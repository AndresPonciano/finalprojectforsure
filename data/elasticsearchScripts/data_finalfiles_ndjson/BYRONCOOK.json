{"title": "Ramsey vs. lexicographic termination proving\n", "abstract": " Termination proving has traditionally been based on the search for (possibly lexicographic) ranking functions. In recent years, however, the discovery of termination proof techniques based on Ramsey\u2019s theorem have led to new automation strategies, e.g. size-change, or iterative reductions from termination to safety. In this paper we revisit the decision to use Ramsey-based termination arguments in the iterative approach. We describe a new iterative termination proving procedure that instead searches for lexicographic termination arguments. Using experimental evidence we show that this new method leads to dramatic speedups.", "num_citations": "110\n", "authors": ["285"]}
{"title": "Microprocessor specification in Hawk\n", "abstract": " Modern microprocessors require an immense investment of time and effort to create and verify, from the high level architectural design downwards. We are exploring ways to increase the productivity of design engineers by creating a domain specific language for specifying and simulating processor architectures. We believe that the structuring principles used in modern functional programming languages, such as static typing, parametric polymorphism, first class functions, and lazy evaluation provide a good formalism for such a domain specific language, and have made initial progress by creating a library on top of the functional language Haskell. We have specified the integer subset of an out of order, superscalar DLX microprocessor, with register renaming, a reorder buffer, a global reservation station, multiple execution units, and speculative branch execution. Two key abstractions of this library are the signal\u00a0\u2026", "num_citations": "103\n", "authors": ["285"]}
{"title": "Circle of investigation of an air\u2010borne gamma\u2010ray spectrometer\n", "abstract": " Calculations that will enable an experimenter to estimate the volume of material viewed by an air\u2010borne gamma\u2010ray spectrometer are presented. The effects of altitude, air density, source density, and gamma\u2010ray attenuation coefficient were investigated. It is shown that the altitude is the most important parameter in the determination of the volume of material that produces a given percentage of the total observed signal.", "num_citations": "82\n", "authors": ["285"]}
{"title": "On embedding a microarchitectural design language within Haskell\n", "abstract": " Based on our experience with modelling and verifying microarchitectural designs within Haskell, this paper examines our use of Haskell as host for an embedded language. In particular, we highlight our use of Haskell's lazy lists, type classes, lazy state monad, and unsafe Perform I0, and point to several areas where Haskell could be improved in the future. We end with an example of a benefit gained by bringing the functional perspective to microarchitectural modelling.", "num_citations": "73\n", "authors": ["285"]}
{"title": "Indoor location using trilateration characteristics\n", "abstract": " This paper proposes a method for indoor location that uses the results of trilateration of Wi-Fi signal strength to learn what is expected at specific locations. It discusses why indoor location is needed, and the reasons for using Wi-Fi networks as the basis of the location process. It also describes the problems with trilateration using radio signals, and introduces some proposals to improve the precision of the trilateration algorithm.", "num_citations": "70\n", "authors": ["285"]}
{"title": "Formal reasoning about the security of amazon web services\n", "abstract": " We report on the development and use of formal verification tools within Amazon Web Services (AWS) to increase the security assurance of its cloud infrastructure and to help customers secure themselves. We also discuss some remaining challenges that could inspire future research in the community.", "num_citations": "59\n", "authors": ["285"]}
{"title": "Specifying superscalar microprocessors in Hawk\n", "abstract": " Hawk is a language for the speci cation of microprocessors at the microarchitectural level. In this paper we use Hawk to specify a modern microarchitecture based on the Intel P6 with features such as speculation, register renaming, and superscalar out-of-order execution. We show that parametric polymorphism, type-classes, higher-order functions, lazy evaluation, and the state monad are key to Hawk's concision and clarity.", "num_citations": "57\n", "authors": ["285"]}
{"title": "Making prophecies with decision predicates\n", "abstract": " We describe a new algorithm for proving temporal properties expressed in LTL of infinite-state programs. Our approach takes advantage of the fact that LTL properties can often be proved more efficiently using techniques usually associated with the branching-time logic CTL than they can with native LTL algorithms. The caveat is that, in certain instances, nondeterminism in the system's transition relation can cause CTL methods to report counter examples that are spurious with respect to the original LTL formula. To address this problem we describe an algorithm that, as it attempts to apply CTL proof methods, finds and then removes problematic nondeterminism via an analysis on the potentially spurious counterexamples. Problematic nondeterminism is characterized using decision predicates, and removed using a partial, symbolic determinization procedure which introduces new prophecy variables to predict the\u00a0\u2026", "num_citations": "51\n", "authors": ["285"]}
{"title": "A framework for microprocessor correctness statements\n", "abstract": " Most verifications of out-of-order microprocessors compare state-machine-based implementations and specifications, where the specification is based on the instruction-set architecture. The different efforts use a variety of correctness statements, implementations, and verification approaches. We present a framework for classifying correctness statements about safety that is independent of implementation representation and verification approach. We characterize the relationships between the different statements and illustrate how existing and classical approaches fit within this framework.", "num_citations": "51\n", "authors": ["285"]}
{"title": "A framework for superscalar microprocessor correctness statements\n", "abstract": " Most verifications of superscalar, out-of-order microprocessors compare state-machine-based implementations and specifications, where the specification is based on the instruction-set architecture. The different efforts use a variety of correctness statements, implementations, and verification approaches. We present a framework for classifying correctness statements about safety properties of superscalar microprocessors. Our framework is independent of the implementation representation and verification approach, and is parameterized by the width of the processor. We characterize the relationships between the correctness statements of many different efforts and also illustrate how classical approaches to microprocessor verification fit within our framework.", "num_citations": "50\n", "authors": ["285"]}
{"title": "BMA: Visual tool for modeling and analyzing biological networks\n", "abstract": " BioModel Analyzer (bma ) is a tool for modeling and analyzing biological networks. Designed with a lightweight graphical user interface, the tool facilitates usage for biologists with no previous knowledge in programming or formal methods. The current implementation analyzes systems to establish stabilization. The results of the analysis\u2014whether they be proofs or counterexamples\u2014are represented visually. This paper describes the approach to modeling used in bma and also notes soon-to-be-released extensions to the tool.", "num_citations": "49\n", "authors": ["285"]}
{"title": "Reasoning about nondeterminism in programs\n", "abstract": " Branching-time temporal logics (eg CTL, CTL*, modal mu-calculus) allow us to ask sophisticated questions about the nondeterminism that appears in systems. Applications of this type of reasoning include planning, games, security analysis, disproving, precondition synthesis, environment synthesis, etc. Unfortunately, existing automatic branching-time verification tools have limitations that have traditionally restricted their applicability (eg push-down systems only, universal path quantifiers only, etc).", "num_citations": "48\n", "authors": ["285"]}
{"title": "Proving stabilization of biological systems\n", "abstract": " We describe an efficient procedure for proving stabilization of biological systems modeled as qualitative networks or genetic regulatory networks. For scalability, our procedure uses modular proof techniques, where state-space exploration is applied only locally to small pieces of the system rather than the entire system as a whole. Our procedure exploits the observation that, in practice, the form of modular proofs can be restricted to a very limited set. For completeness, our technique falls back on a non-compositional counterexample search. Using our new procedure, we have solved a number of challenging published examples, including: a 3-D model of the mammalian epidermis; a model of metabolic networks operating in type-2 diabetes; a model of fate determination of vulval precursor cells in the C.\u00a0elegans worm; and a model of pair-rule regulation during segmentation in the Drosophila embryo. Our\u00a0\u2026", "num_citations": "48\n", "authors": ["285"]}
{"title": "Continuous formal verification of Amazon s2n\n", "abstract": " We describe formal verification of s2n, the open source TLS implementation used in numerous Amazon services. A key aspect of this proof infrastructure is continuous checking, to ensure that properties remain proven during the lifetime of the software. At each change to the code, proofs are automatically re-established with little to no interaction from the developers. We describe the proof itself and the technical decisions that enabled integration into development.", "num_citations": "45\n", "authors": ["285"]}
{"title": "A proof engine approach to solving combinational design automation problems\n", "abstract": " There are many approaches available for solving combinational design automation problems encoded as tautology or satisfiability checks. Unfortunately there exists no single analysis that gives adequate performance for all problems of interest, and it is therefore critical to be able to combine approaches. In this paper, we present a proof engine framework where individual analyses are viewed as strategies-functions between different proof states. By defining our proof engine in such a way that we can compose strategies to form new, more powerful, strategies we achieve synergistic effects between the individual methods. The resulting framework has enabled us to develop a small set of powerful composite default strategies. We describe several strategies and their interplay; one of the strategies, variable instantiation, is new. The strength of our approach is demonstrated with experimental results showing that our\u00a0\u2026", "num_citations": "43\n", "authors": ["285"]}
{"title": "Architectures for exponentiation in GF(2n)\n", "abstract": " We investigate different data structures in GF(2n) and their correspondence to silicon architectures to examine possible hardware implementations of the Diffie-Hellman key exchange system.", "num_citations": "38\n", "authors": ["285"]}
{"title": "Temporal property verification as a program analysis task\n", "abstract": " We describe a reduction from temporal property verification to a program analysis problem. We produce an encoding which, with the use of recursion and nondeterminism, enables off-the-shelf program analysis tools to naturally perform the reasoning necessary for proving temporal properties (e.g. backtracking, eventuality checking, tree counterexamples for branching-time properties, abstraction refinement, etc.). Using examples drawn from the PostgreSQL database server, Apache web server, and Windows OS kernel, we demonstrate the practical viability of our work.", "num_citations": "36\n", "authors": ["285"]}
{"title": "On automation of CTL* verification for infinite-state systems\n", "abstract": " In this paper we introduce the first known fully automated tool for symbolically proving CTL                                      properties of (infinite-state) integer programs. The method uses an internal encoding which facilitates reasoning about the subtle interplay between the nesting of path and state temporal operators that occurs within CTL                                      proofs. A precondition synthesis strategy is then used over a program transformation which trades nondeterminism in the transition relation for nondeterminism explicit in variables predicting future outcomes when necessary. We show the viability of our approach in practice using examples drawn from device drivers and various industrial examples.", "num_citations": "35\n", "authors": ["285"]}
{"title": "Disposable memo functions\n", "abstract": " We formalize the meaning of lazy memo-functions in Haskell with an extension to the lazy-calculus, Haskell's computational model. The semantics enable reasoning about memoization's e ect on space and time complexity. Based on the semantics, we present a prototype implementation that requires no changes to the garbage-collector; memo-tables are simply reclaimed when no references to them remain.", "num_citations": "25\n", "authors": ["285"]}
{"title": "Drug target optimization in chronic myeloid leukemia using innovative computational platform\n", "abstract": " Chronic Myeloid Leukemia (CML) represents a paradigm for the wider cancer field. Despite the fact that tyrosine kinase inhibitors have established targeted molecular therapy in CML, patients often face the risk of developing drug resistance, caused by mutations and/or activation of alternative cellular pathways. To optimize drug development, one needs to systematically test all possible combinations of drug targets within the genetic network that regulates the disease. The BioModelAnalyzer (BMA) is a user-friendly computational tool that allows us to do exactly that. We used BMA to build a CML network-model composed of 54 nodes linked by 104 interactions that encapsulates experimental data collected from 160 publications. While previous studies were limited by their focus on a single pathway or cellular process, our executable model allowed us to probe dynamic interactions between multiple pathways and\u00a0\u2026", "num_citations": "20\n", "authors": ["285"]}
{"title": "Temporal property verification as a program analysis task\n", "abstract": " We describe a reduction from temporal property verification to a program analysis problem. First we present a proof system that, unlike the standard formulation, is more amenable to reasoning about infinite-state systems: disjunction is treated by partitioning, rather than enumerating, the state space and temporal operators are characterized with special sets of states called frontiers. We then describe a transformation that, with the use of procedures and nondeterminism, enables off-the-shelf program analysis tools to naturally perform the reasoning necessary for proving temporal properties (e.g. backtracking, eventuality checking, tree counterexamples for branching-time properties, abstraction refinement, etc.). Using examples drawn from the PostgreSQL database server, Apache web server, and Windows OS kernel, we demonstrate the practical viability of our work.", "num_citations": "18\n", "authors": ["285"]}
{"title": "Fairness for infinite-state systems\n", "abstract": " In this paper we introduce the first known tool for symbolically proving fair-CTL properties of (infinite-state) integer programs. Our solution is based on a reduction to existing techniques for fairness-free CTL model checking via the use of infinite non-deterministic branching to symbolically partition fair from unfair executions. We show the viability of our approach in practice using examples drawn from device drivers and algorithms utilizing shared resources.", "num_citations": "15\n", "authors": ["285"]}
{"title": "Computer Aided Verification\n", "abstract": " Computer Aided Verification - NASA/ADS Now on home page ads icon ads Enable full ADS view NASA/ADS Computer Aided Verification Touili, Tayssir ; Cook, Byron ; Jackson, Paul Abstract Publication: Lecture Notes in Computer Science Pub Date: 2010 DOI: 10.1007/978-3-642-14295-6 Bibcode: 2010LNCS......T Keywords: Computer Science; Logics and Meanings of Programs; Software Engineering; Programming Languages; Compilers; Interpreters; Mathematical Logic and Formal Languages; Artificial Intelligence (incl. Robotics); Computer Communication Networks full text sources Publisher | \u00a9 The SAO/NASA Astrophysics Data System adshelp[at]cfa.harvard.edu The ADS is operated by the Smithsonian Astrophysical Observatory under NASA Cooperative Agreement NNX16AC86A NASA logo Smithsonian logo Resources About ADS ADS Help What's New Careers@ADS Social @adsabs ADS Blog Project to \u2026", "num_citations": "14\n", "authors": ["285"]}
{"title": "Faster temporal reasoning for infinite-state programs\n", "abstract": " In this paper, we describe a new symbolic model checking procedure for CTL verification of infinite-state programs. Our procedure exploits the natural decomposition of the state space given by the control-flow graph in combination with the nesting of temporal operators to optimize reasoning performed during symbolic model checking. An experimental evaluation against competing tools demonstrates that our approach not only gains orders-of-magnitude performance improvement, but also allows for scalability of temporal reasoning for larger programs.", "num_citations": "13\n", "authors": ["285"]}
{"title": "Symbolic simulation of microprocessor models using type classes in Haskell\n", "abstract": " We present a technique for doing symbolic simulation of microprocessor models in the functional programming language Haskell.We use polymorphism and the type class system, a unique feature of Haskell, to write models that work over both concrete and symbolic data.We offer this approach as an alternative to using uninterpreted constants. When the full generality of rewriting is not needed, the performance of symbolic simulation by evaluation is much faster than previously reported symbolic simulation efforts in theorem provers.", "num_citations": "13\n", "authors": ["285"]}
{"title": "Priciples of program termination\n", "abstract": " In this paper we introduce the basic concepts behind the problem of proving program termination, including well-founded relations, well-ordered sets, and ranking functions. We also connect the notion of termination of computer programs with that of well-founded relations. This paper introduces no original concepts, nor does it propose solutions towards the the problem of automating termination proofs. It does, however, provide a foundation from which the reader can peruse the more advanced literature on the topic.", "num_citations": "12\n", "authors": ["285"]}
{"title": "Verifying increasingly expressive temporal logics for infinite-state systems\n", "abstract": " Temporal logic is a formal system for specifying and reasoning about propositions qualified in terms of time. It offers a unified approach to program verification as it applies to both sequential and parallel programs and provides a uniform framework for describing a system at any level of abstraction. Thus, a number of automated systems have been proposed to exclusively reason about either Computation-Tree Logic (CTL) or Linear Temporal Logic (LTL) in the infinite-state setting. Unfortunately, these logics have significantly reduced expressiveness as they restrict the interplay between temporal operators and path quantifiers, thus disallowing the expression of many practical properties, for example, \u201calong some future an event occurs infinitely often.\u201d Contrarily, CTL*, a superset of both CTL and LTL, can facilitate the interplay between path-based and state-based reasoning. CTL* thus exclusively allows for the\u00a0\u2026", "num_citations": "11\n", "authors": ["285"]}
{"title": "At the interface of biology and computation\n", "abstract": " Representing a new class of tool for biological modeling, Bio Model Analyzer (BMA) uses sophisticated computational techniques to determine stabilization in cellular networks. This paper presents designs aimed at easing the problems that can arise when such techniques-\\'14using distinct approaches to conceptualizing networks\\'14-are applied in biology. The work also engages with more fundamental issues being discussed in the philosophy of science and science studies. It shows how scientific ways of knowing are constituted in routine interactions with tools like BMA, where the emphasis is on the practical business at hand, even when seemingly deep conceptual problems exist. For design, this perspective refigures the frictions raised when computation is used to model biology. Rather than obstacles, they can be seen as opportunities for opening up different ways of knowing.", "num_citations": "8\n", "authors": ["285"]}
{"title": "Low altitude gamma-spectrometric surveys from helicopters in Puerto Rico as an example of the remote sensing of thorium, uranium, and potassium in soils and rocks\n", "abstract": " Eight hundred and thirty-five miles of selected traverses on the island of Puerto Rico were monitored via helicopter with a prototype single-channel gamma ray spectrometer. A pair of 5-in x 5-in NaI(T1) detectors were flown under normal operating conditions of 60 mph and 50 feet above the ground. Reproducible and often highly characteristic thorium, uranium and potassium \u201csignatures\u201d for the major lithologies and soil types of the island could be defined. Formational contacts and zones only a few yards wide could be distinguished in many cases. During the 275 mile survey of the entire beach and coastline, the provenance of several drainage basins was found to be relatable to the absolute and relative concentrations in the associated beach deposits. Rugged terrain and heavy vegetational cover did not appear to be a deterrent in the application of this technique. Thorium, uranium and potassium concentration\u00a0\u2026", "num_citations": "8\n", "authors": ["285"]}
{"title": "Finding instability in biological models\n", "abstract": " The stability of biological models is an important test for establishing their soundness and accuracy. Stability in biological systems represents the ability of a robust system to always return to homeostasis. In recent work, modular approaches for proving stability have been found to be swift and scalable. If stability is however not proved, the currently available techniques apply an exhaustive search through the unstable state space to find loops. This search is frequently prohibitively computationally expensive, limiting its usefulness. Here we present a new modular approach eliminating the need for an exhaustive search for loops. Using models of biological systems we show that the technique finds loops significantly faster than brute force approaches. Furthermore, for a subset of stable systems which are resistant to modular proofs, we observe a speed up of up to 3 orders of magnitude as the exhaustive\u00a0\u2026", "num_citations": "7\n", "authors": ["285"]}
{"title": "Using St\u00e5lmarck\u2019s algorithm to prove inequalities\n", "abstract": " St\u00e5lmarck\u2019s 1-saturation algorithm is an incomplete but fast method for computing partial equivalence relations over propositional formulae. Aside from anecdotal evidence, until now little has been known about what it can prove. In this paper we characterize a set of formulae with bitvector-inequalities for which 1-saturation is sufficient to prove unsatisfiability. This result has application to fast predicate abstraction for software with fixed-width bit-vectors.", "num_citations": "7\n", "authors": ["285"]}
{"title": "Making fast hardware with separation logic\n", "abstract": " Recently developed tools now allow us to automatically synthesize hardware from programs that use the heap [5]. Unfortunately, because current tools are unable to accurately track the heap-carried data dependencies between program commands, the synthesis tools miss many opportunities for optimization, such as pipelining, parallelization, or memory localization. Thus, the resulting circuits have poor performance. In this paper we describe a separation logic based program analysis for identifying heap-carried data dependencies between program statements, and demonstrate the performance gains that it enables when performing hardware synthesis.", "num_citations": "6\n", "authors": ["285"]}
{"title": "Increased hardware safety margin through software checking\n", "abstract": " An implementation of built-in safety features of a hydraulically powered robot, along with additional recommendations for the user to implement at the work site are described. The main theme is the use of the software control system for most of the built-in sa fety features, along with an explanation of each. These features include the real-time 20 millisecond loop axis movement tolerance checking in various configurations, freeze motion mode, startup procedures and emergency hydraulics off. The necessary hardware and its interface to the software will be included to show how each function is implemented.", "num_citations": "6\n", "authors": ["285"]}
{"title": "Modelling biology\u2013working through (in-) stabilities and frictions\n", "abstract": " Computational biology is a nascent field reliant on software coding and modelling to produce insights into biological phenomena. Extreme claims cast it as a field set to replace conventional forms of experimental biology, seeing software modelling as a (more convenient) proxy for bench-work in the wet-lab. In this article, we deepen and complicate the relations between computation and scientific ways of knowing by discussing a computational biology tool, BMA, that models gene regulatory networks. We detail the instabilities and frictions that surface when computation is incorporated into scientific practice, framing the tensions as part of knowing-in-progress\u2014the practical back and forth in working things out. The work exemplifies how software studies\u2014and careful attention to the materialities of computation\u2014can shed light on the emerging sciences that rely on coding and computation. Further, it puts to work a standpoint that sees computation as tightly entangled with forms of scientific knowing and doing, rather than a wholesale replacement of them.", "num_citations": "5\n", "authors": ["285"]}
{"title": "Location by scene analysis of wi-fi characteristics\n", "abstract": " This paper provides details of an experiment performed to investigate the use of Scene Analysis to provide location information. The method we used generates the characteristic signature using Position Estimates which are calculated by trilateration of Wi-Fi Received Signal Strength values. We provide details of the conclusions we have made regarding the resolution and error rates that the method provides.", "num_citations": "5\n", "authors": ["285"]}
{"title": "Combining stream-based and state-based verification techniques\n", "abstract": " Algebraic verification techniques manipulate the structure of a circuit while preserving its behavior. Algorithmic verification techniques verify properties about the behavior of a circuit. These two techniques have complementary strengths: algebraic techniques are largely independent of the size of the state space, and algorithmic techniques are highly automated. It is desirable to exploit both in the same verification. However, algebraic techniques often use stream-based models of circuits, while algorithmic techniques use state-based models. We prove the consistency of stream- and state-based interpretations of circuit models, and show how stream-based veri_cation results can be used hand-in-hand with state-based veri_cation results. Our approach allows us to combine stream-based algebraic rewriting and state-based reasoning, using SMV and SVC, to verify a pipelined microarchitecture with\u00a0\u2026", "num_citations": "5\n", "authors": ["285"]}
{"title": "Branching-time reasoning for programs\n", "abstract": " CiteSeerX \u2014 Branching-time reasoning for programs Documents Authors Tables Log in Sign up MetaCart DMCA Donate CiteSeerX logo Documents: Advanced Search Include Citations Authors: Advanced Search Include Citations Tables: DMCA Branching-time reasoning for programs (2011) Cached Download as a PDF Download Links [www.cl.cam.ac.uk] [www.cl.cam.ac.uk] Save to List Add to Collection Correct Errors Monitor Changes by Byron Cook , Eric Koskinen , Moshe Vardi Citations: 2 - 2 self Summary Citations Active Bibliography Co-citation Clustered Documents Version History Share Facebook Twitter Reddit Bibsonomy OpenURL Abstract Keyphrases branching-time reasoning Powered by: Apache Solr About CiteSeerX Submit and Index Documents Privacy Policy Help Data Source Contact Us Developed at and hosted by The College of Information Sciences and Technology \u00a9 2007-2019 The State \u2026", "num_citations": "4\n", "authors": ["285"]}
{"title": "Brightness limitations in sources for static and ultra-fast high resolution electron microscopy\n", "abstract": " Brightness limitations in sources for static and ultra-fast... (2013) | www.narcis.nl KNAW KNAW Narcis Back to search results Delft University of Technology Publication Brightness limitations in sources for static and ultra-fast... (2013) Open access . Pagina-navigatie: Main Save publication Save as MODS Export to Mendeley Save as EndNote Export to RefWorks Title Brightness limitations in sources for static and ultra-fast high resolution electron microscopy Author Cook, BJ Thesis advisor Kruit, P. Date issued 2013-11-19 Access Open Access Language English Type Doctoral Thesis Publication http://resolver.tudelft.nl/uuid:49185f45-6b1f-41ac-a327-e472... Persistent Identifier urn:NBN:nl:ui:24-uuid:49185f45-6b1f-41ac-a327-e472541861eb Metadata XML Source Delft University of Technology Go to Website Navigation: Home about narcis login Nederlands contact Anna van Saksenlaan 51 2593 HW Den Haag narcis..\u2026", "num_citations": "3\n", "authors": ["285"]}
{"title": "Formal Methods for Industrial Critical Systems: 14th International Workshop, FMICS 2009, Eindhoven, The Netherlands, November 2-3, 2009, Proceedings\n", "abstract": " This book constitutes the proceedings of the 14th International Workshop on Formal Methods for Industrial Critical Systems, FMICS 2009 held in Eindhoven, The Netherlands, in November 2009. The 10 papers presented were carefully reviewed and selected from 25 submissions. The volume also contains with 4 invited papers and 6 posters. The aim of the FMICS workshop series is to provide a forum for researchers who are interested in the development and application of formal methods in industry. It also strives to promote research and development for the improvement of formal methods and tools for industrial applications.", "num_citations": "3\n", "authors": ["285"]}
{"title": "Discriminating similar languages: Persian and Dari\n", "abstract": " Although widely-studied in recent years, Language Identification (LID) systems for determining the language of input texts often fail to discriminate between similar languages like Croatian-Serbian and Malay-Indonesian. This has brought attention to the task of discriminating similar languages, varieties and dialects\u2013including a recent shared task [3]. Persian (also known as Farsi) and Dari (Eastern Persian, spoken predominantly in Afghanistan) are two close variants that have not hitherto been investigated in LID and we report the first results on this pair. Dari is a low-resourced but important language, particularly for the US due to its ongoing involvement in Afghanistan, which has led to increasing research interest [1]. We developed a corpus of 28k sentences (14k per-language) and using character and word n-grams, we discriminated them with 96% accuracy. Out-of-domain cross-corpus evaluation was conducted to test the discriminative models\u2019 generalizability, achieving 87% accuracy in classifying 79k sentences from the Uppsala Persian Corpus. Feature analysis revealed lexical, morphological and orthographic inter-language differences.", "num_citations": "2\n", "authors": ["285"]}
{"title": "Automatically proving program termination\n", "abstract": " In this talk I will describe new tools that allow us to automatically prove termination and other liveness properties of software systems. In particular I will discuss the Terminator program termination prover and its application to the problem of showing that Windows device driver event-handling routines always eventually stop responding to events.", "num_citations": "2\n", "authors": ["285"]}
{"title": "Formal verification of explicitly parallel microprocessors\n", "abstract": " The trend in microprocessor design is to extend instruction-set architectures with features\u2014such as parallelism annotations, predication, speculative memory access,or multimedia instructions\u2014that allow the compiler or programmer to express more instruction-level parallelism than the microarchitecture is willing to derive. In this paper we show how these instruction-set extensions can be put to use when formally verifying the correctness of a microarchitectural model. Inspired by Intel\u2019s IA-64, we develop an explicitly parallel instruction-set architecture and a clustered microarchitectural model. We then describe how to formally verify that the model implements the instruction set. The contribution of this paper is a specification and verification method that facilitates the decomposition of microarchitectural correctness proofs using instruction-set extensions.", "num_citations": "2\n", "authors": ["285"]}
{"title": "A Correctness Proof of a Speculative, Superscalar, Out-of-Order, Renaming Microarchitecture\n", "abstract": " Microarchitects are increasingly using techniques such as speculation, register renaming, and superscalar out-of-order execution to make use of instruction-level parallelism. However, the growing complexity of modern microprocessors exacerbates the difficulty of relating them to the simple machines that they emulate. Flaws found later in lower-level validation are often microarchitectural in nature. In this paper we provide high-level mathematical specifications for a basic machine and for a speculative, superscalar, out-of-order, renaming machine based on the Intel P6 microarchitecture. We then prove that the visible outputs of the two machines are equivalent.", "num_citations": "2\n", "authors": ["285"]}
{"title": "Top-level refinement in processor verification\n", "abstract": " We provide a framework for the specification and verification of high-performance processors. As an example, we give a high-level specification and correctness proof for a processor that uses speculation, register renaming, superscalar out-of-order execution, and resolution of memory dependencies. The specifications of its three concurrently operating units are very general and can be refined independently, so that our proof covers a whole family of microarchitectures. Abstract treatmentofdata, representation of on-the-fly instructions as transactions, and a history table containing the full information of a processor's run are the main features of the proof.", "num_citations": "2\n", "authors": ["285"]}
{"title": "Development of Remote Methods for Obtaining Soil Information and Location of Construction Materials Using Gamma Ray Signatures.\n", "abstract": " Contents Experimental comparison of NaIT1 and solid organic scintillation detectors for use in remote sensing of terrestrial gamma rays Hydrologic investigations and the significance of U-234U-238 disequilibrium in the ground waters of central Texas Radon emanation investigations Computer simulation and a simple approach to some topographical considerations The discrimination of rock and soil types via low altitude airborne gamma-ray spectrometry in Payne County, Oklahoma.Descriptors:", "num_citations": "2\n", "authors": ["285"]}
{"title": "Automated formal reasoning about AWS systems\n", "abstract": " Automatic and semiautomatic formal verification tools are now being developed and used within Amazon Web Services (AWS) to find proofs that prove or disprove desired properties of key AWS components. In this session, we outline these efforts and discuss how tools are used to play and then replay found proofs of desired properties when software artifacts or networks are modified, thus helping provide security throughout the lifetime of the AWS system.", "num_citations": "1\n", "authors": ["285"]}
{"title": "Automated formal reasoning about Amazon web services (Keynote)\n", "abstract": " Automatic and semiautomatic formal verification and model checking tools are now being used within AWS to find proofs that prove or disprove desired properties of key AWS components. In this session, we outline these efforts and discuss how tools are used to play and then replay found proofs of desired properties when software artifacts or networks are modified, thus helping provide security throughout the lifetime of the AWS system.", "num_citations": "1\n", "authors": ["285"]}
{"title": "Reducing Deadlock and Livelock Freedom to Termination\n", "abstract": " In this paper we introduce a general method for proving deadlock and livelock freedom of concurrent programs with shared memory. Our goal in this work is to support programs which use locks stored in mutable data structures. The key to our technique is the observation that dependencies between locks can be abstracted using recursion and non-determinism in a sequential logic program such that termination of the abstraction implies deadlock and livelock freedom of the original program.", "num_citations": "1\n", "authors": ["285"]}
{"title": "Branching-time reasoning for infinite-state systems\n", "abstract": " We introduce the first known automatic method for reasoning about branching-time for infinite-state systems. The key idea is to encode possible branching using recursion in a way that an interprocedural program analysis for infinite-state programs can then naturally perform the necessary operations needed for branchingtime proofs (eg backtracking, eventuality checking, tree counterexamples, etc.). Formally we define a higher-order recursive construct that captures the\u2200 CTL model checking problem in a sound and complete way. Most importantly, our construct is developed in a way that facilitates the use of existing interprocedural program analysis tools. Using examples drawn from the PostgreSQL database server, Apache web server, and the Windows OS kernel, we demonstrate the practical viability of our approach.", "num_citations": "1\n", "authors": ["285"]}
{"title": "Automatically proving concurrent programs correct\n", "abstract": " This talk will describe new advances that allow us to automatically prove both liveness properties and heap-shape properties of concurrent programs. The talk will focus on recent thread-modular extensions to the program termination prover TERMINATOR and shape analysis tool SLAyer and their application to Windows device drivers.", "num_citations": "1\n", "authors": ["285"]}
{"title": "Location using scene analysis of WIFI characteristics\n", "abstract": " Location using scene analysis of WIFI characteristics - IRep - Nottingham Trent University Current students | NOW | Staff login Nottingham Trent University Study with us International Services for business Research Alumni NTU > IRep IRep Location using scene analysis of WIFI characteristics Tools + Tools Cook, B., Buckberry, G., Scowcroft, I., Mitchell, J. and Allen, T., 2006. Location using scene analysis of WIFI characteristics. In: Proceedings London Communications Symposium, London, UK. Full text not available from this repository. Item Type: Conference contribution Creators: Cook, B., Buckberry, G., Scowcroft, I., Mitchell, J. and Allen, T. Date: 2006 Divisions: Schools > School of Science and Technology Record created by: EPrints Services Date Added: Actions (login required) Edit View Edit View Views Views per month \u2026", "num_citations": "1\n", "authors": ["285"]}