{"title": "Understanding and using patterns in software development\n", "abstract": " Patterns have shown to be an effective means of capturing and communicating software design experience. However, there is more to patterns than software design patterns: We believe that patterns work for software development on several levels. In this paper we explore what we have come to understand as crucial aspects of the pattern concept, relate patterns to the different models built during software design, discuss pattern forms and how we think that patterns can form larger wholes like pattern handbooks.", "num_citations": "423\n", "authors": ["843"]}
{"title": "Pattern languages of program design 3\n", "abstract": " Pattern languages of program design 3 | Guide books ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksPattern languages of program design 3 Export Citation Select Citation format Download citation Copy citation Categories Journals Magazines Books Proceedings SIGs Conferences Collections People About About ACM Digital Library Subscription Information Author Guidelines Using ACM Digital Library All Holdings within the ACM Digital Library ACM Computing Classification System Join Join ACM Join SIGs Subscribe to Publications Institutions and Libraries Connect Contact Facebook Twitter Linkedin The ACM Digital \u2026", "num_citations": "382\n", "authors": ["843"]}
{"title": "Role model based framework design and integration\n", "abstract": " Today, any large object-oriented software system is built using frameworks. Yet, designing frameworks and defining their interaction with clients remains a difficult task. A primary reason is that today's dominant modeling concept, the class, is not well suited to describe the complexity of object collaborations as it emerges in framework design and integration. We use role modeling to overcome the problems and limitations of class-based modeling. Using role models, the design of a framework and its use by clients can be described succinctly and with much better separation of concerns than with classes. Using role objects, frameworks can be integrated into use-contexts that have not been foreseen by their original designers.", "num_citations": "325\n", "authors": ["843"]}
{"title": "Framework design: A role modeling approach\n", "abstract": " Role modeling for framework design, as developed in this dissertation, makes designing, learning, and using object-orientedframeworkseasicr than possiblewith traditional class-basedapproaches.Object-oriented frameworks promisehigher productivityand shorter time-to-market for the develop\u00ac ment of object-orientedapplications. These goals are achieved through design and code reuse. While many projects show that these promises can be met, failed projects also show that they are not always easy to reach. This dissertation addresses three pertinent technical problems of designing, learning, and using object-orientedframeworks: complexity of classes, complexity of objeetcollaboration, and lack of clarity of requirements put upon use-clients of a framework.", "num_citations": "304\n", "authors": ["843"]}
{"title": "Composite design patterns\n", "abstract": " Software design patterns are the core abstractions from successful recurring problem solutions in software design. Composite design patterns are the core abstractions from successful recurring frameworks. A composite design pattern is a pattern that is best described as the composition of further patterns the integration of which shows a synergy that makes the composition more than just the sum of its parts. This paper presents examples of composite patterns, discusses a role-based analysis and composition technique, and demonstrates that composite patterns extend the pattern idea from single problem solutions to object-oriented frameworks.", "num_citations": "265\n", "authors": ["843"]}
{"title": "The role object pattern\n", "abstract": " ficult to understand and hard to maintain. Unanticipated changes cannot be handled gracefully and will trigger lots of recompilation. Changes to a client-specific part of the class interface are likely to affect clients in other subsystems or applications as well. A simple solution might be to extend the Customer class by adding new Borrower and Investor subclasses which capture the borrower-specific and investor-specific aspects respectively. From an object identity point of view, subclassing implies that two objects of different subclasses are not identical. Thus, a customer acting both as an investor and as a borrower is represented by two different objects with distinct identities. Identity can only be simulated by an additional mechanism. If two objects are meant to be identical, their inherited attributes must constantly be checked for consistency. However, we will inevitably run into problems in case of polymorphic searches, for example when we want to make up the list of all c", "num_citations": "258\n", "authors": ["843"]}
{"title": "The economic motivation of open source software: Stakeholder perspectives\n", "abstract": " Open source software has enabled large system integrators to increase their profits through cost savings and reach more customers due to flexible pricing. This has upset existing ecosystems and shuffled structural relationships, resulting in the emergence of firms providing consulting services to open source projects. This new breed of service firm in turn lives or dies by its ability to recruit and retain appropriate talent. For such talent, in particular for software developers, life has become more difficult and exciting at once. Developers face new career prospects and paths, since their formal position in an open source project, in addition to their experience and capabilities, determines their value to an employer. Economically rational developers strive to become commiters to high-profile open source projects to further their careers, which in turn generates more recognition, independence, and job security", "num_citations": "247\n", "authors": ["843"]}
{"title": "The total growth of open source\n", "abstract": " Software development is undergoing a major change away from a fully closed software process towards a process that incorporates open source software in products and services. Just how significant is that change? To answer this question we need to look at the overall growth of open source as well as its growth rate. In this paper, we quantitatively analyze the growth of more than 5000 active and popular open source software projects. We show that the total amount of source code as well as the total number of open source projects is growing at an exponential rate. Previous research showed linear and quadratic growth in lines of source code of individual open source projects. Our work shows that open source is expanding into new domains and applications at an exponential rate.", "num_citations": "223\n", "authors": ["843"]}
{"title": "The architecture of a UML virtual machine\n", "abstract": " Current software development tools let developers model a software system and generate program code from the models to run the system. However, generating code and installing a non-trivial system induces a time delay between changing the model and executing it that makes rapid model prototyping awkard if not impossible. This paper presents the architecture of a virtual machine for UML that interprets UML models without any intermediate code-generation step. The paper shows how to embed UML in a metalevel architecture so that a key property of model-based systems, the casual connection between models and model instances, is guaranteed. With this architecture, changes to a model have immediate effects on its execution, providing users with rapid feedback about the model's structure and behavior. This approach supports model innovation better than today's code-generation approaches.", "num_citations": "164\n", "authors": ["843"]}
{"title": "Modeling microblogging adoption in the enterprise\n", "abstract": " Despite a broad range of collaboration tools already available, enterprises continue to look for ways to improve internal and external communication. Microblogging is such a new communication channel with some considerable potential to improve intra-firm transparency and knowledge sharing. However, the adoption of such social software presents certain challenges to enterprises. Based on the results of four focus group sessions, we identified several new constructs to play an important role in the microblogging adoption decision. Examples include privacy concerns, communication benefits, perceptions regarding signal-to-noise ratio, as well codification effort. Integrating these findings with common views on technology acceptance, we formulate a model to predict the adoption of a microblogging system in the workspace. Our findings serve as an important guideline for managers seeking to realize the potential of microblogging in their company.", "num_citations": "161\n", "authors": ["843"]}
{"title": "Framework development for large systems\n", "abstract": " COMMUNICATIONS OF THE ACM October 1997/Vol. 40, No. 10 53 employing framework technology\u2014the framework layers of the Gebos system are therefore described and discussed in detail. The following section describes layering techniques and divides frameworks into two parts: concept and implementation. These parts are combined to form concept and implementation libraries. Finally, we examine the Role Object Design Pattern that is used to make an object play different roles in different departments while remaining an integrated component.", "num_citations": "140\n", "authors": ["843"]}
{"title": "The single-vendor commercial open source business model\n", "abstract": " Single-vendor commercial open source software projects are open source software projects that are owned by a single firm that derives a direct and significant revenue stream from the software. Single-vendor commercial open source at first glance represents an economic paradox: How can a firm earn money if it is making its product available for free as open source? This paper presents the core properties of single-vendor open source business models and discusses how they work. Using a single-vendor open source approach, firms can get to market faster with a superior product at lower cost than possible for traditional competitors. The paper shows how these benefits accrue from an engaged and self-supporting user community. Lacking any prior comprehensive reference, this paper is based on an analysis of public statements by practitioners of single-vendor open source. It forges the various\u00a0\u2026", "num_citations": "112\n", "authors": ["843"]}
{"title": "A pattern language for tool construction and integration based on the tools and materials metaphor\n", "abstract": " Why do people prefer to use certain software systems and why do they have problems using others? What is the quality within certain software that makes people soon feel familiar using it and lets them work efficiently? These are questions that we, like a lot of people who develop and use application systems in their everyday work, asked ourselves.We believe that the key to this quality (in the sense of [Pir74]) is found in systems that allow people to work according to their qualification and needs while using their skills and competence. In order to develop software with this quality we, as a group, have put together many of the things which have proved useful in software engineering over the last decades and have integrated these methods and techniques into a unifying approach\u2013the Tools and Materials Metaphor [BCS92, BZ92]. It has guided us and other developers during analysis and design and has helped to envision and finally build systems of quality.", "num_citations": "112\n", "authors": ["843"]}
{"title": "Open collaboration within corporations using software forges\n", "abstract": " This article describes our experiences using open source software development practices at SAP. SAP is a major software developer and leader in business applications. We've found that open source practices can complement traditional top-down software development with bottom-up collective intelligence. Software forges offer a mechanism for advancing the adoption of open source best practices within corporations. We illustrate our experiences using SAP's own internal software forge, called SAP Forge, and compare our experiences with those from other large software companies.", "num_citations": "90\n", "authors": ["843"]}
{"title": "Describing and composing patterns using role diagrams\n", "abstract": " Design patterns are patterns of classes and objects that represent solutions to recurring design problems. They are usually described using class diagrams. Class diagrams, however, often intertwine the actual solution with efficient ways of implementing it. This paper uses role diagrams to describe and compose patterns. Role diagrams help designers focus on the collaborations and distribution of responsibilities between objects. Role diagrams also are a better starting point for composing patterns. This paper presents several examples and reports on first experiences with using role diagrams for composing patterns which have been promising.", "num_citations": "89\n", "authors": ["843"]}
{"title": "Dynamic object model\n", "abstract": " A system with a Dynamic Object Model allows the types of objects to change at runtime. This includes adding new types, changing existing ones, and changing the relationships between types. Taken together, all types and their relationships form a domain-specific model. Underlying such a dynamic object model is a framework that acts much like a domain-specific modeling language.", "num_citations": "87\n", "authors": ["843"]}
{"title": "Paid vs. volunteer work in open source\n", "abstract": " Many open source projects have long become commercial. This paper shows just how much of open source software development is paid work and how much has remained volunteer work. Using a conservative approach, we find that about 50% of all open source software development has been paid work for many years now and that many small projects are fully paid for by companies. However, we also find that any non-trivial project balances the amount of paid developer with volunteer work, and we suggest that the ratio of volunteer to paid work can serve as an indicator for the health of open source projects and aid the management of the respective communities.", "num_citations": "82\n", "authors": ["843"]}
{"title": "The economic case for open source foundations\n", "abstract": " By establishing a successful open source platform, software firms can compete more effectively across technology stacks and thereby increase their addressable market.", "num_citations": "76\n", "authors": ["843"]}
{"title": "How and why wikipedia works: an interview with angela beesley, elisabeth bauer, and kizu naoko\n", "abstract": " This article presents an interview with Angela Beesley, Elisabeth Bauer, and Kizu Naoko. All three are leading Wikipedia practitioners in the English, German, and Japanese Wikipedias and related projects. The interview focuses on how Wikipedia works and why these three practitioners believe it will keep working. The interview was conducted via email in preparation of WikiSym 2006, the 2006 International Symposium on Wikis, with the goal of furthering Wikipedia research [1]. Interviewer was Dirk Riehle, the chair of WikiSym 2006. An online version of the article provides simplified access to URLs [2].", "num_citations": "66\n", "authors": ["843"]}
{"title": "Micro-blogging adoption in the enterprise: An empirical analysis\n", "abstract": " Given the increasing interest in using social software for company-internal communication and collaboration, this paper examines drivers and inhibitors of micro-blogging adoption at the workplace. While nearly one in two companies is currently planning to introduce social software, there is no empirically validated research on employees\u2019 adoption. In this paper, we build on previous focus group results and test our research model in an empirical study using Structural Equation Modeling. Based on our findings, we derive recommendations on how to foster adoption. We suggest that micro-blogging should be presented to employees as an efficient means of communication, personal brand building, and knowledge management. In order to particularly promote content contribution, privacy concerns should be eased by setting clear rules on who has access to postings and for how long they will be archived.", "num_citations": "63\n", "authors": ["843"]}
{"title": "Metadata and adaptive object-models\n", "abstract": " The unrelenting pace of change that confronts contemporary software developers compels them to make their applications more configurable, flexible, and adaptable. A way to meet such requirements is to use an Adaptive Object- Model (AOM). This paper describes common architectures for adaptive object-models and summarizes the results from our ECOOP 2000 workshop. Participants to this workshop focused on comparisons between the Adaptive Object-Model\u2019s approach and those of Reflection and Metamodeling. It emerged that there are common themes present in all three approaches and that these approaches can complimen5t one another for assisting developers in designing and building systems that can more quickly adapt to new and changing business requirements.", "num_citations": "63\n", "authors": ["843"]}
{"title": "The Event Notification Pattern - Integrating Implicit Invocation with Object-Orientation\n", "abstract": " Managing inter-object dependencies in object-oriented systems is a complex task. Changes of one object often require dependent objects to change accordingly. Making every object explicitly inform every dependent object about its state changes intertwines object interfaces and implementations, thereby hampering system evolution and maintenance. These problems can be overcome by introducing the notion of Implicit Invocation to object-oriented systems as a decoupling mechanism between objects. This paper presents the Event Notification pattern, a pattern to smoothly integrate implicit invocation mechanisms with object-oriented designs. State changes of objects, dependencies of other objects on them and the maintenance links between these objects are made explicit as first class objects. The resulting structure is highly flexible and can be used to manage inter-object dependencies in object-oriented systems efficiently.", "num_citations": "55\n", "authors": ["843"]}
{"title": "The commit size distribution of open source software\n", "abstract": " With the growing economic importance of open source, we need to improve our understanding of how open source software development processes work. The analysis of code contributions to open source projects is an important part of such research. In this paper we analyze the size of code contributions to more than 9,000 open source projects. We review the total distribution and distinguish three categories of code contributions using a size-based heuristic: single focused commits, aggregate team contributions, and repository refactorings. We find that both the overall distribution and the individual categories follow a power law. We also suggest that distinguishing these commit categories by size will benefit future analyses.", "num_citations": "53\n", "authors": ["843"]}
{"title": "Design and implementation of the sweble wikitext parser: unlocking the structured data of wikipedia\n", "abstract": " The heart of each wiki, including Wikipedia, is its content. Most machine processing starts and ends with this content. At present, such processing is limited, because most wiki engines today cannot provide a complete and precise representation of the wiki's content. They can only generate HTML. The main reason is the lack of well-defined parsers that can handle the complexity of modern wiki markup. This applies to Media Wiki, the software running Wikipedia, and most other wiki engines.", "num_citations": "48\n", "authors": ["843"]}
{"title": "Continuous integration in open source software development\n", "abstract": " Commercial software firms are increasingly using and contributing to open source software. Thus, they need to understand and work with open source software development processes. This paper investigates whether the practice of continuous integration of agile software development methods has had an impact on open source software projects. Using fine-granular data from more than 5000 active open source software projects we analyze the size of code contributions over a project\u2019s life-span. Code contribution size has stayed flat. We interpret this to mean that open source software development has not changed its code integration practices. In particular, within the limits of this study, we claim that the practice of continuous integration has not yet significantly influenced the behavior of open source software developers.", "num_citations": "48\n", "authors": ["843"]}
{"title": "A role-based design pattern catalog of atomic and composite patterns structured by pattern purpose\n", "abstract": " This technical report presents 25 design patterns using the role diagram notation. The role diagram notation describes a pattern using the concept of \u201crole\u201d as the central modeling construct. The purpose of this report is to describe a set of common reusable patterns in a form that makes them an easy target for composition. The ultimate goal is to explain frameworks as sets of instantiated patterns which integrate with each other to serve a common goal, that is to achieve the framework\u2019s purpose.", "num_citations": "48\n", "authors": ["843"]}
{"title": "A comparison of the value systems of Adaptive Software Development and Extreme Programming: How methodologies may learn from each other\n", "abstract": " Today, we see an increasing interest in new software development methodologies that put humans at the center of the development process. Adaptive Software Development, Extreme Programming, and others are exemplars of this new breed of development methodologies. They are all based on the assumption that for coping with high speed and high change, traditional management techniques are inadequate. Effectively, the new methodologies are based on a different value system than the old ones. A value system is a system of beliefs about what constitutes the fundamental aspects of software development: developers, customers, markets, products, requirements, etc. This paper presents a simple model of value systems and compares the value systems of two exemplary new development methodologies, Adaptive Software Development (ASD) and Extreme Programming (XP). The purpose of this comparison is to more easily determine whether techniques of one methodology can be adapted and used by another methodology, thereby helping authors of methodologies to better learn from other methodologies.", "num_citations": "42\n", "authors": ["843"]}
{"title": "Lessons learned from using design patterns in industry projects\n", "abstract": " Design patterns help in the creative act of designing, implementing, and documenting software systems. They have become an important part of the vocabulary of experienced software developers. This article reports about the author\u2019s experiences and lessons learned with using and applying design patterns in industry projects. The article not only discusses how using patterns benefits the design of software systems, but also how firms can benefit further from developing a firm-specific design language and how firms can motivate and educate developers to learn and develop this shared language.", "num_citations": "35\n", "authors": ["843"]}
{"title": "The commenting practice of open source\n", "abstract": " The development processes of open source soft-ware are different from traditional closed source development processes. Still, open source software is frequently of high quality. This raises the question of how and why open source software creates high quality and whether it can maintain this quality for ever larger project sizes. In this paper, we look at one particular quality indicator, the density of comments in open source software code. We find that successful open source projects follow a consistent practice of documenting their source code, and we find that the comment density is independent of team and project size.", "num_citations": "34\n", "authors": ["843"]}
{"title": "Bureaucracy\n", "abstract": " ... In this paper, I use role diagrams to present the Bureaucracy pattern and to explore its design and implementation space. Role diagrams have proved to be very useful to get a grip on this complex pattern, and I believe they will work well for design patterns in general.", "num_citations": "34\n", "authors": ["843"]}
{"title": "Inner source definition, benefits, and challenges\n", "abstract": " Inner Source (IS) is the use of open source software development practices and the establishment of an open source-like culture within organizations. The organization may still develop proprietary software but internally opens up its development. A steady stream of scientific literature and practitioner reports indicates the interest in this research area. However, the research area lacks a systematic assessment of known research work: No model exists that defines IS thoroughly. Various case studies provide insights into IS programs in the context of specific organizations but only few publications apply a broader perspective. To resolve this, we performed an extensive literature survey and analyzed 43 IS related publications plus additional background literature. Using qualitative data analysis methods, we developed a model of the elements that constitute IS. We present a classification framework for IS programs and\u00a0\u2026", "num_citations": "29\n", "authors": ["843"]}
{"title": "Serializer\n", "abstract": " The Serializer pattern lets you efficiently stream objects into data structures of your choice as well as create objects from such data structures. The Serializer pattern can be used whenever objects are written to or read from flat files, relational database tables, network transport buffers, etc. The Reader part of the pattern builds an object structure by reading a data structure from a backend. The Writer part of the pattern writes an existing object structure as a data structure to a backend. Both parts together constitute the Serializer pattern. The pattern can be found in more or less pure versions in probably every framework that provides support for object streaming. The CORBA externalization service and the JAVA Serialization package are a clean applications of the pattern. However, it develops its full potential only in the context of different streaming backends.", "num_citations": "29\n", "authors": ["843"]}
{"title": "A model of open source developer foundations\n", "abstract": " Many community open source projects are of high economic relevance. As these projects mature, their leaders face a choice of continuing the project as is, making the project join an existing foundation, or creating their own foundation for the project. This article presents a model of open source developer foundations that project leaders can use to compare existing foundations with their needs or to design their own. The model is based on a three-iteration qualitative study involving interviews and supplementary materials review. To demonstrate its usefulness, we apply the model to nine foundations and present their organizational choices in a comparative table format.", "num_citations": "27\n", "authors": ["843"]}
{"title": "The empirical commit frequency distribution of open source projects\n", "abstract": " A fundamental unit of work in programming is the code contribution (\" commit\") that a developer makes to the code base of the project in work. An author's commit frequency describes how often that author commits. Knowing the distribution of all commit frequencies is a fundamental part of understanding software development processes. This paper presents a detailed quantitative analysis of commit frequencies in open-source software development. The analysis is based on a large sample of open source projects, and presents the overall distribution of commit frequencies.", "num_citations": "26\n", "authors": ["843"]}
{"title": "Product trader\n", "abstract": " Suppose you have designed a class hierarchy of domain value types like AccountNumber, Amount, InterestRate or SocialSecurityNumber. These value types will be used in several applications. For example, one such application will present a form on the screen and let users edit its fields. The value types of the fields correspond to the domain value types. Since each value type has its own semantics and editing constraints, you might want to provide specialized widgets for each of these value types as shown in figure 1 and 2:", "num_citations": "26\n", "authors": ["843"]}
{"title": "Towards end-user programming with wikis\n", "abstract": " When business software fails to provide the desired functionality, users typically turn to spreadsheets to perform simple but general computational tasks. However, spreadsheets enforce a view of the world that consists mostly of tables and numbers rather than the domain concepts users have in mind. We are using wikis as a platform for empowering end-users to perform computational tasks of their choice. This paper discusses how core properties of wikis can support end-user programming. We illustrate our approach using wiki prototype software for working with business objects as made available by SAP's business application suite.", "num_citations": "25\n", "authors": ["843"]}
{"title": "A model of the commit size distribution of open source\n", "abstract": " A fundamental unit of work in programming is the code contribution (\u201ccommit\u201d) that a developer makes to the code base of the project in work. We use statistical methods to derive a model of the probabilistic distribution of commit sizes in open source projects and we show that the model is applicable to different project sizes. We use both graphical as well as statistical methods to validate the goodness of fit of our model. By measuring and modeling a fundamental dimension of programming we help improve software development tools and our understanding of software development.", "num_citations": "24\n", "authors": ["843"]}
{"title": "How Open Source Is Changing the Software Developer's Career.\n", "abstract": " Open source software development is add-ing skills to the labor market and offering the promise of increased salaries and job security to those with open source project experience. This trend is not surprising, given that open source software development has long overlapped with the commercial world. For example, a 2012 Linux Foundation study found that more than 75 percent of the Linux kernel is being developed on company time or with company sponsorship (http://go. linuxfoundation. org/who-writes-linux-2012). A more recent independent study1 found that about half of all code contributions are being performed Monday to Friday between 9 am and 5 pm, likewise suggesting paid work. Clearly, this growing commercialization of open source is influencing software developer careers.", "num_citations": "23\n", "authors": ["843"]}
{"title": "Controlling and steering open source projects\n", "abstract": " Commercial software firms can control or steer open source software projects to meet their business needs.", "num_citations": "21\n", "authors": ["843"]}
{"title": "Inner source in platform-based product engineering\n", "abstract": " Inner source is an approach to collaboration across intra-organizational boundaries for the creation of shared reusable assets. Prior project reports on inner source suggest improved code reuse and better knowledge sharing. Using a multiple-case case study research approach, we analyze the problems that three major software development organizations were facing in their product line engineering efforts. We find that a root cause, the separation of product units as profit centers from a platform organization as a cost center, leads to delayed deliveries, increased defect rates, and redundant software components. All three organizations assume that inner source can help solve these problems. The article analyzes the expectations that these companies were having towards inner source and the problems they were experiencing in its adoption. Finally, the article presents our conclusions on how these organizations\u00a0\u2026", "num_citations": "19\n", "authors": ["843"]}
{"title": "A dual model of open source license growth\n", "abstract": " Every open source project needs to decide on an open source license. This decision is of high economic relevance: Just which license is the best one to help the project grow and attract a community? The most common question is: Should the project choose a restrictive (reciprocal) license or a more permissive one? As an important step towards answering this question, this paper analyses actual license choice and correlated project growth from ten years of open source projects. It provides closed analytical models and finds that around 2001 a reversal in license choice occurred from restrictive towards permissive licenses.", "num_citations": "19\n", "authors": ["843"]}
{"title": "The comment density of open source software code\n", "abstract": " The development processes of open source software are different from traditional closed source development processes. Still, open source software is frequently of high quality. Thus, we are investigating how open source software creates high quality and whether it can maintain this quality for ever larger project sizes. In this paper, we look at one particular quality indicator, the density of comments in open source software code. In a large-scale study of more than 5,000 projects, we find that active open source projects document their source code, and we find that the comment density is independent of team and project size, but not of project age. In future work, we intend to correlate comment density with project success or failure.", "num_citations": "19\n", "authors": ["843"]}
{"title": "Design and implementation of wiki content transformations and refactorings\n", "abstract": " The organic growth of wikis requires constant attention by contributors who are willing to patrol the wiki and improve its content structure. However, most wikis still only offer textual editing and even wikis which offer WYSIWYG editing do not assist the user in restructuring the wiki. Therefore,\" gardening\" a wiki is a tedious and error-prone task. One of the main obstacles to assisted restructuring of wikis is the underlying content model which prohibits automatic transformations of the content. Most wikis use either a purely textual representation of content or rely on the representational HTML format. To allow rigorous definitions of transformations we use and extend a Wiki Object Model. With the Wiki Object Model installed we present a catalog of transformations and refactorings that helps users to easily and consistently evolve the content and structure of a wiki. Furthermore we propose XSLT as language for\u00a0\u2026", "num_citations": "18\n", "authors": ["843"]}
{"title": "Fine-grained change detection in structured text documents\n", "abstract": " Detecting and understanding changes between document revisions is an important task. The acquired knowledge can be used to classify the nature of a new document revision or to support a human editor in the review process. While purely textual change detection algorithms offer fine-grained results, they do not understand the syntactic meaning of a change. By representing structured text documents as XML documents we can apply tree-to-tree correction algorithms to identify the syntactic nature of a change.", "num_citations": "17\n", "authors": ["843"]}
{"title": "Pattern density and role modeling of an object transport service\n", "abstract": " Many object-oriented frameworks exhibit a high density of design pattern applications. Usually, there are more pattern instances in a framework than there are abstract classes. Yet, only little has been done so far to better cope with pattern density and the resulting interaction and composition problems. We illustrate the problem by describing the design of an object transport service, which provides functionality to copy objects across process boundaries. The service is used by higher-level services like object migration and remote request execution. It is designed and implemented as an object-oriented framework based on the composition of several interlocking design pattern applications. We argue that we need better ways of describing patterns and composing them than available today. We report on describing patterns as role models. This approach eases pattern composition and simplifies framework design\u00a0\u2026", "num_citations": "17\n", "authors": ["843"]}
{"title": "JUnit 3.8 documented using collaborations\n", "abstract": " This paper describes the design of the unit testing framework JUnit v3.8. The documentation technique employed is an enhanced version of collaboration-based design, also known as role modeling. In collaboration-based design, objects are viewed as playing multiple roles in different contexts, and different contexts are viewed as task specific collaborations. The documentation accounts for every method in the JUnit 3.8 framework by assigning it to a role. It thereby investigates whether roles and collaborations can serve as basic units of functionality provided by a design like a framework. Such a measure of functionality can serve multiple purposes, for example estimating implementation efforts or measuring complexity.", "num_citations": "16\n", "authors": ["843"]}
{"title": "How and why to encapsulate class trees\n", "abstract": " A good reusable framework, pattern or module interface usually is represented by abstract classes. They form an abstract design and leave the implementation to concrete subclasses. The abstract design is instantiated by naming these subclasses. Unfortunately, this exposes implementation details like class names and class tree structures. The paper gives a rationale and a general metaobject protocol design that encapsulates whole class trees. Clients of an abstract design retrieve classes and create objects based on class semantics specifications. Using abstract classes as the only interface enhances information hiding and makes it easier both to evolve a system and to configure system variants.", "num_citations": "16\n", "authors": ["843"]}
{"title": "Estimating commit sizes efficiently\n", "abstract": " The quantitative analysis of software projects can provide insights that let us better understand open source and other software development projects. An important variable used in the analysis of software projects is the amount of work being contributed, the commit size. Unfortunately, post-facto, the commit size can only be estimated, not measured. This paper presents several algorithms for estimating the commit size. Our performance evaluation shows that simple, straightforward heuristics are superior to the more complex text-analysis-based algorithms. Not only are the heuristics significantly faster to compute, they also deliver more accurate results when estimating commit sizes. Based on this experience, we design and present an algorithm that improves on the heuristics, can be computed equally fast, and is more accurate than any of the prior approaches.", "num_citations": "15\n", "authors": ["843"]}
{"title": "Value object\n", "abstract": " Implement datatypes as immutable classes so that their instances can be handled similar to built-in values.", "num_citations": "15\n", "authors": ["843"]}
{"title": "Values in object systems\n", "abstract": " Objects and values are fundamental yet complementary concepts of software system modeling and implementation. However, in the context of large object systems, modeling and implementing value types has received no sufficient attention. Our experiences show that proper understanding of value types can ease programming and improve performance of such systems significantly. In this paper, we discuss the impact of value types on object-oriented system design, implementation, and performance. We discuss several implementation techniques that let us introduce value types into systems implemented in mainstream object-oriented programming languages.", "num_citations": "15\n", "authors": ["843"]}
{"title": "How commercial involvement affects open source projects: three case studies on issue reporting\n", "abstract": " Whereas most research on Internetware has focused on new technologies for keeping track of a changing Internet, little attention has been paid to the software development process. A large portion of the software running the Internet is open source software. Open source software is developed both by volunteers and commercial companies, often jointly. Companies get involved in open source projects for commercial reasons, and bring with them a commercial software development process. Thus, it is important to understand how commercial involvement affects the software development process of open source projects. This article presents case studies of three open source application servers that are being developed jointly by a volunteer community and one primary software company. We are interested in better understanding developer behavior, specifically task distribution and performance, based on\u00a0\u2026", "num_citations": "14\n", "authors": ["843"]}
{"title": "Design pattern density defined\n", "abstract": " Design pattern density is a metric that measures how much of an object-oriented design can be understood and represented as instances of design patterns. Expert developers have long believed that a high design pattern density implies a high maturity of the design under inspection. This paper presents a quantifiable and observable definition of this metric. The metric is illustrated and qualitatively validated using four real-world case studies. We present several hypotheses of the metric's meaning and their implications, including the one about design maturity. We propose that the design pattern density of a maturing framework has a fixed point and we show that if software design patterns make learning frameworks easier, a framework's design pattern density is a measure of how much easier it will become.", "num_citations": "14\n", "authors": ["843"]}
{"title": "The QDAcity-RE method for structural domain modeling using qualitative data analysis\n", "abstract": " The creation of domain models from qualitative input relies heavily on experience. An uncodified ad-hoc modeling process is still common and leads to poor documentation of the analysis. In this article we present a new method for domain analysis based on qualitative data analysis. The method helps identify inconsistencies, ensures a high degree of completeness, and inherently provides traceability from analysis results back to stakeholder input. These traces do not have to be documented after the fact. We evaluate our approach using four exploratory studies.", "num_citations": "13\n", "authors": ["843"]}
{"title": "Wom: An object model for wikitext\n", "abstract": " Wikipedia is a rich encyclopedia that is not only of great use to its contributors and readers but also to researchers and providers of third party software around Wikipedia. However, Wikipedia's content is only available as Wikitext, the markup language in which articles on Wikipedia are written, and whoever needs to access the content of an article has to implement their own parser or has to use one of the available parser solutions. Unfortunately, those parsers which convert Wikitext into a high-level representation like an abstract syntax tree (AST) define their own format for storing and providing access to this data structure. Further, the semantics of Wikitext are only defined implicitly in the MediaWiki software itself. This situation makes it difficult to reason about the semantic content of an article or exchange and modify articles in a standardized and machine-accessible way. To remedy this situation we propose a markup language, called XWML, in which articles can be stored and an object model, called WOM, that defines how the contents of an article can be read and modified.", "num_citations": "12\n", "authors": ["843"]}
{"title": "User experience design in software product lines\n", "abstract": " User experience design is an important part of software product development, and yet software product line engineering has largely ignored this topic. This paper presents a set of industry best practices for user experience design in software product lines. We conducted multiple-case case study research using two different product lines within the multinational company Siemens AG: in a healthcare software division and in an industrial automation software division. We performed a preliminary exploratory study that will serve as a baseline for future research in the design, implementation, and management of user experience design in the context of software product lines. Practitioners can use our findings and the resulting best practices to improve their user experience design, particularly within healthcare and industrial automation software product lines.", "num_citations": "11\n", "authors": ["843"]}
{"title": "Enterprise people and skill discovery using tolerant retrieval and visualization\n", "abstract": " Understanding an enterprise\u2019s workforce and skill-set can be seen as the key to understanding an organization\u2019s capabilities. In today\u2019s large organizations it has become increasingly difficult to find people that have specific skills or expertise or to explore and understand the overall picture of an organization\u2019s portfolio of topic expertise. This article presents a case study of analyzing and visualizing such expertise with the goal of enabling human users to assess and quickly find people with a desired skill set. Our approach is based on techniques like n-grams, clustering, and visualization for improving the user search experience for people and skills.", "num_citations": "11\n", "authors": ["843"]}
{"title": "Improving traceability of requirements through qualitative data analysis\n", "abstract": " Traceability is an important quality aspect in modern software development. It facilitates the documentation of decisions and helps identifying conflicts regarding the conformity of one artifact to another. We propose a new approach to requirements engineering that utilizes qualitative research methods, which have been well established in the domain of social science. Our approach integrates traceability between the original documentation and the requirements specification and the domain model and glossary and supports adaptability to change.", "num_citations": "10\n", "authors": ["843"]}
{"title": "Industry requirements for FLOSS governance tools to facilitate the use of open source software in commercial products\n", "abstract": " Virtually all software products incorporate free/libre and open source software (FLOSS) components. However, ungoverned use of FLOSS components can result in legal and financial risks, and risks to a firm\u2019s intellectual property. To avoid these risks, companies must govern their FLOSS use through open source governance processes and by following industry best practices. A particular challenge is license compliance. To manage the complexity of governance and compliance, companies should use tools and well-defined processes. This paper investigates and presents industry requirements for FLOSS governance tools, followed by an evaluation of the suggested requirements.We chose eleven companies with an advanced understanding of open source governance and interviewed their FLOSS governance experts to derive a theory of industry requirements for tooling. We extended our previous work adding\u00a0\u2026", "num_citations": "9\n", "authors": ["843"]}
{"title": "The five stages of open source volunteering\n", "abstract": " Today\u2019s software systems build on open source software. Thus, we need to understand how to successfully create, nurture, and mature the software development communities of these open source projects. In this article, we review and discuss best practices of the open source volunteering and recruitment process that successful project leaders are using to lead their projects to success. We combine the perspective of the volunteer, looking at a project, with the perspective of a project leader, looking to find additional volunteers for the project. We identify a five-stage process consisting of a connecting, understanding, engaging, performing, and leading stage. The underlying best practices, when applied, significantly increase the chance of an open source project being successful.", "num_citations": "9\n", "authors": ["843"]}
{"title": "Gesch\u00e4ftsrisiken und Governance von Open Source in Softwareprodukten\n", "abstract": " In fast jedem Softwareprodukt, auch in gro\u00dfer Standardsoftware, sind heute Open-Source-Komponenten enthalten. Die Hersteller dieser Software m\u00fcssen die Gesch\u00e4ftsrisiken, die mit der Integration von Open-Source-Software in kommerzielle Produkte verbunden sind, verstehen und vern\u00fcnftig managen. Dieser Beitrag zeigt ein Modell verschiedener rechtlicher, technischer und sozialer Risiken auf, die durch unkontrollierten Einsatz von Open-Source-Software entstehen, und erl\u00e4utert ausgew\u00e4hlte Erfolgsmethoden der Open Source Governance, die von f\u00fchrenden Firmen angewandt werden. Das Modell ist das Analyseergebnis von f\u00fcnf mit gro\u00dfen deutschen Softwareherstellern gef\u00fchrten Interviews sowie weiterer Literaturrecherche.", "num_citations": "9\n", "authors": ["843"]}
{"title": "A grammar for standardized wiki markup\n", "abstract": " Today's wiki engines are not interoperable. The rendering engine is tied to the processing tools which are tied to the wiki editors. This is an unfortunate consequence of the lack of rigorously specified standards. This paper discusses an EBNF-based grammar for Wiki Creole 1.0, a community standard for wiki markup, and demonstrates its benefits. Wiki Creole is being specified using prose, so our grammar revealed several categories of ambiguities, showing the value of a more formal approach to wiki markup specification. The formalization of Wiki Creole using a grammar shows performance problems that today's regular-expression-based wiki parsers might face when scaling up. We present an implementation of a wiki markup parser and demonstrate our test cases for validating Wiki Creole parsers. We view the work presented in this paper as an important step towards decoupling wiki rendering engines from\u00a0\u2026", "num_citations": "9\n", "authors": ["843"]}
{"title": "Muster am Beispiel der Werkzeug und Material Metapher\n", "abstract": " Die Ingenieurswissenschaften verf\u00fcgen \u00fcber Konstruktionshandb\u00fccher, welche es ihren Anwendern erm\u00f6glichen, auf erprobte L\u00f6sungen f\u00fcr wiederkehrende Probleme zur\u00fcckzugreifen. In der objektorientierten Softwareentwicklung wird seit einiger Zeit ebenfalls versucht, das Wissen erfahrener Entwickler in geeigneter Form festzuhalten. Dies geschieht mit Hilfe von\" Mustern\", welche als Vorlage zur L\u00f6sung immer wiederkehrender Probleme dienen. Muster werden zur Konstruktion und Dokumentation von Softwaresystemen verwendet und erleich-tern die Kommunikation unter Entwicklern. Diese Arbeit diskutiert die bisherige Literatur zum Thema Muster und definiert auf eigenen Erfahrungen aufbauend einen softwaretechnisch orientierten Musterbegriff. Es wird herausgearbeitet, wie Muster Erfahrungswissen effizient darstellen k\u00f6nnen. Die Struktur von Musterabh\u00e4ngigkeiten wird diskutiert und ein Ordnungsschema vorgestellt, welches im Rahmen eines Handbuchs eingesetzt werden kann. Die Definitionen werden an einem grossen Beispiel, dem Softwareentwurf nach der Werkzeug und Material Metapher, erprobt. Dabei werden die Metaphern und die sie implementierenden Konzepte zur Werkzeugkonstruktion und-integration als eine Menge aufeinander abgestimmter Muster pr\u00e4sentiert. An einem die Musterdarstellung begleitenden Beispiel wird gezeigt, wie Muster Softwaresysteme und Softwarearchitekturen erkl\u00e4ren und dokumentieren k\u00f6nnen.", "num_citations": "9\n", "authors": ["843"]}
{"title": "The innovations of open source\n", "abstract": " Open source has given us many innovations. This article provides an overview of the most important innovations and illustrates the impact that open source is having on the software industry and beyond. The main innovations of open source can be grouped into four categories: legal, process, tool, and business models. Probably the best known innovations are open source licenses, which also define the concept. Software becomes open source if users receive it under an open source license. Discusses each of these categories in detail and explains their significance for open source development.", "num_citations": "8\n", "authors": ["843"]}
{"title": "Understanding industry requirements for FLOSS governance tools\n", "abstract": " Almost all software products today incorporate free/libre, and open source software (FLOSS) components. Companies must govern their FLOSS use to avoid potential risks to their intellectual property resulting from the use of FLOSS components. A particular challenge is license compliance. To manage the complexity of license compliance, companies should use tools and well-defined processes to perform these tasks time and cost efficiently. This paper investigates and presents common industry requirements for FLOSS governance tools, followed by an evaluation of the suggested requirements by matching them with the features of existing tools.               We chose 10 industry leading companies through polar theoretical sampling and interviewed their FLOSS governance experts to derive a theory of industry needs and requirements for tooling. We then analyzed the features of a governance tools sample\u00a0\u2026", "num_citations": "8\n", "authors": ["843"]}
{"title": "An ebnf grammar for wiki creole 1.0\n", "abstract": " Today's wiki engines are not interoperable. This is an unfortunate consequence of the lack of rigorously specified standards. This technical report presents a complete and validated EBNF-based grammar for Wiki Creole, a community standard for wiki markup. Wiki Creole is also the only standard currently available. Wiki Creole is being specified using prose, leading to inconsistencies and ambiguities. Our grammar uncovered those ambiguities which we fed back into the specification process. The Wiki Creole grammar presented in this report makes the creation of Wiki Creole parsers simple using parser generators, ANTLR in our case. Using a precise specification of wiki markup lets us decouple wiki editors from wiki storage from further wiki processing tools. Based on this decoupling layer we expect innovation on these different parts to proceed independently and at a faster pace than before.", "num_citations": "8\n", "authors": ["843"]}
{"title": "Properties of Member Functions in C++\n", "abstract": " As C++ developers, we talk a lot about member functions (methods) of a class. We talk about member function types like getters and setters, command methods, and factory methods. Next to classifying member functions by purpose, we also talk about properties of member functions like being a primitive or composed method, a hook or template method, a class or instance method, or a convenience method.Obviously, we have a large vocabulary for talking about member function types and properties. We use this vocabulary to communicate and document different aspects of a member function, for example, what it is good for, who may use it, and how it is implemented. Understanding this vocabulary is a key to fast and effective communication among developers.", "num_citations": "8\n", "authors": ["843"]}
{"title": "Design of a Smalltalk Framework for the Tools and Materials Metaphor\n", "abstract": " The Tools and Materials Metaphor is a design methodology for interactive software systems. It supports developers with both metaphors on how to interpret and understand an application domain as well as concrete techniques on how to actually construct systems according to the metaphors. The construction process is best supported by an application framework that captures those parts of the metaphors that can be formalized as reusable abstract classes. We have implemented such a framework for the Tools and Materials Metaphor in Smalltalk.", "num_citations": "8\n", "authors": ["843"]}
{"title": "Pattern discovery and validation using scientific research methods\n", "abstract": " Pattern discovery, the process of discovering previously unrecognized patterns, is often performed as an ad-hoc process with little resulting certainty in the quality of the proposed patterns. Pattern validation, the process of validating the accuracy of proposed patterns, remains dominated by the simple heuristic of \"the rule of three\". This article shows how to use established scientific research methods for the purpose of pattern discovery and validation. We present a specific approach, called the handbook method, that uses the qualitative survey, action research, and case study research for pattern discovery and evaluation, and we discuss the underlying principle of using scientific methods in general. We evaluate the handbook method using three exploratory studies and demonstrate its usefulness.", "num_citations": "7\n", "authors": ["843"]}
{"title": "How developers acquire FLOSS skills\n", "abstract": " With the increasing prominence of open collaboration as found in free/libre/open source software projects and other joint production communities, potential participants need to acquire skills. How these skills are learned has received little research attention. This article presents a large-scale survey (5,309 valid responses) in which users and developers of the beta release of a popular file download application were asked which learning styles were used to acquire technical and social skills. We find that the extent to which a person acquired the relevant skills through informal methods tends to be higher if the person is a free/libre/open source code contributor, while being a professional software developer does not have this effect. Additionally, younger participants proved more likely to make use of formal methods of learning. These insights will help individuals, commercial companies, educational\u00a0\u2026", "num_citations": "7\n", "authors": ["843"]}
{"title": "Global Business Objects: Requirements and Solutions\n", "abstract": " Developing world-wide distributed object-oriented systems poses a number of difficult problems. In this paper, we summarize some of these problems as a set of requirements and we present our software architecture that addresses them. Our software architecture is reflective in all its key abstractions which is a prerequisite to successfully satisfy the requirements. Furthermore, it defines a set of common capabilities and standard implementations. Key capabilities comprise support for persistence, migration, event handling, transactions, hooking up inspection, debugging and security mechanisms. A mainstream banking application which conforms to the architecture is currently being developed at UBS, with Genesis as the lead consultant. Ubilab is focusing on the research aspects of the project such as type and domain model evolution, world-wide web integration, and introducing higher-level abstractions of software architecture which go beyond single classes and objects.", "num_citations": "7\n", "authors": ["843"]}
{"title": "Erfolgsmethoden der Open-Source-Governance und-Compliance\n", "abstract": " Open-Source-Software ist weit verbreitet und wird nicht nur als alleinstehende Anwendungen eingesetzt, sondern auch als Komponenten in Produkten. Entsprechend wichtig ist es f\u00fcr Unternehmen, die Open-Source-Komponenten verwenden, mittels Open-Source-Governance und-Compliance sicherzustellen, dass die dem Einsatz von Open Source eigenen Risiken rechtzeitig und korrekt adressiert werden. Aufbauend auf fr\u00fcherer Arbeit zu den Risiken der Open-Source-Verwendung stellt dieser Artikel ein Modell und beispielhafte Erfolgsmethoden (\u201eBest Practices \u201c) vor, mit denen Produktunternehmen diesen Risiken begegnen k\u00f6nnen. Das Modell und die Erfolgsmethoden stellen einen Auszug aus einem in Entwicklung befindlich Handbuch zur Open-Source-Governance und-Compliance dar. Weitere Information zu diesem Handbuch kann vom ersten Autor erfragt werden.", "num_citations": "6\n", "authors": ["843"]}
{"title": "A model of commercial open source software product features\n", "abstract": " Commercial open source software has become an important part of the packaged software product industry. This paper provides a model of individual product features, rather than full-fledged business models, and their perceived value to customers. The model is the result of a three-iteration study, including interview analysis, literature review and the implementation of an empirical survey. Companies can use the feature model to determine their products and business model.", "num_citations": "6\n", "authors": ["843"]}
{"title": "End-User Programming with Application Wikis: A Panel with Ludovic Dubost, Stewart Nickolas, and Peter Thoeny\n", "abstract": " Wikis empower users to collaborate with each other using prose. Users imprint data structures and processes onto wiki pages using social and technical conventions. Application wikis enhance wiki engines with lightweight programming features that aid in making data structures and processes explicit. Using these features, endusers can program a wiki to better support them in their collaborative processes and integrate their work into the overall IT infrastructure. Application wikis make database access and business process integration easy from within the wiki while maintaining the wiki-style of collaborative work. The panelists of this panel, together with the audience and the moderator, will review existing work and explore future research directions in application wikis.", "num_citations": "6\n", "authors": ["843"]}
{"title": "The perfection of informality: Tools, templates, and patterns\n", "abstract": " Tool support for using design patterns in software development has been a failure so far. There are at least two reasons: Either, the tool and its pattern notation have remained incomprehensible for all but the most well-trained developers, or, the tool and notation have been so limiting that they have been of little use at all. The underlying reason for these two problems is a mismatch between two competing needs. Design patterns were introduced to support informal communication in human design activities and have therefore been defined only informally. Tool support, however, requires precise specification to allow for automated application and conformance checking. In this article, by distinguishing design patterns from design templates, I show how to reconcile the need for informal and effective communication with the need for precise specification.", "num_citations": "6\n", "authors": ["843"]}
{"title": "Method types in java\n", "abstract": " As Java developers, we talk about query methods, command methods, and factory methods. We talk about convenience methods, helper methods, and assertion methods. We talk about primitive methods, composed methods, and template methods.Obviously, we have a rich vocabulary for talking about methods of a class or interface. We use this vocabulary to quickly communicate and document what a method does, who it may be used by, and how it is implemented. Understanding this vocabulary is key to fast and effective communication among developers.", "num_citations": "6\n", "authors": ["843"]}
{"title": "Open-source license compliance in software supply chains\n", "abstract": " Almost all software products today include open-source components. However, the obligations that open-source licenses put on their users can be difficult or undesirable to comply with [14, 20, 25]. As a consequence, software vendors and related companies need to govern the process by which open-source components are included in their products [7, 21]. A key process of such open-source governance is license clearance, that is, the process by which a company decides whether a particular component\u2019s license is acceptable for use in its products [4, 15, 19]. In this article, we discuss this process, review the challenges it poses to software vendors, and provide unanswered research questions that result from it.", "num_citations": "5\n", "authors": ["843"]}
{"title": "Lightweight enduser programming with wikis\n", "abstract": " Wikis are online collaboration tools to share information amongst users. Today\u2019s wiki engines typically lack features to integrate structured data from backend databases. We have created a solution for integrating wiki technology with SAP structured data. Our solution will help provide a lightweight end-user programming environment for users to access complex structured data.", "num_citations": "5\n", "authors": ["843"]}
{"title": "Patterns for Encapsulating Class Trees\n", "abstract": " Introduction pattern as a form emerging in specific contexts. The form is finite and can be described precisely, while the context is infinite and can only be partially described (that is, we extract what we think is relevant to understand the forces driving the pattern).Section 2 introduces the background of the presented patterns. Section 3 and 4 present the patterns needed for encapsulating class trees. Section 5 compares the patterns with other patterns, most notably Factory Method and Abstract Factory. Section 6 goes back to discuss the pattern form and what we have gained from using it. Section 7 summarizes the paper and presents some further conclusions.", "num_citations": "5\n", "authors": ["843"]}
{"title": "Industry best practices for FLOSS governance and component reuse\n", "abstract": " \u200b Corporate use of open source in software products is on the rise. While this brings a number of technological and business benefits to companies, it also comes with potential legal and financial risks caused by license non-compliance and ungoverned use of open source components. Companies address these threats with free/libre and open source software (FLOSS) governance-internal guidelines and processes for using open source components in products. An essential aspect of FLOSS governance is component reuse and component repository, which enable efficient governance for the previously used components by the company\u2019s developers. In our study, we aimed to identify the current industry best practices for FLOSS governance and component reuse. We conducted 15 expert interviews in companies with high governance maturity, analyzed these interviews and derived 19 best practices cast in the pattern format of context-problem-solution. The format was inspired by design patterns and enables higher applicability of our research results by practitioners. The 19 best practices form a handbook on FLOSS governance and component reuse that also includes workflows connecting the individual practices into process templates.", "num_citations": "4\n", "authors": ["843"]}
{"title": "Communication in firm-internal global software development with China\n", "abstract": " Globally distributed software development projects are on the rise. However, 69% of cross-regional projects fail completely or partially, because of lack of cross-cultural understanding. This paper presents a qualitative study of the impact of communication on Global Software Development (GSD) within firms due to cultural differences. In particular, we provide a model of problems and solutions related to communication of German/Chinese and American/Chinese collaborations in GSD. The model was derived using grounded theory to study six globally distributed software development projects. The results may not only help companies understand cultural problems, but also help them overcome these problems. To this end, we discuss the solutions adopted by the multinational software companies that we studied.", "num_citations": "4\n", "authors": ["843"]}
{"title": "Geplanter inner source: Ein weg zur profit-center-\u00fcbergreifenden wiederverwendung\n", "abstract": " Wiederverwendung von Softwarekomponenten verspricht, Softwareentwicklung schneller und g\u00fcnstiger zu machen und die Ergebnisqualit\u00e4t zu steigern. Trotz diverser methodischer Ans\u00e4tze ist es f\u00fcr viele Softwareentwicklungsorganisationen schwierig geblieben, diese Ziele auch nur ansatzweise zu erreichen. Vor diesem Hintergrund bietet \u201eInner Source\u201c, die Verwendung von Open-Source-Praktiken in der firmeninternen Softwareentwicklung, neue Chancen. Inner-Source-Software ist Software, die innerhalb eines Unternehmens \u00fcber Profit-Center-Grenzen hinweg in Gemeinschaftsarbeit entwickelt wird und von allen Abteilungen genutzt werden kann. In diesem Artikel stellen wir die bisher gewonnenen Erfahrungen mit Inner-Source-Entwicklung dar, definieren organisatorische Gestaltungsm\u00f6glichkeiten und prognostizieren die Entstehung von Inner-Source-Organisationen, einer neuen Form der Organisation f\u00fcr die Wiederverwendung.", "num_citations": "4\n", "authors": ["843"]}
{"title": "Architecture Support for Global Business Objects: Requirements and Solutions\n", "abstract": " The development of world-wide distributed object-oriented systems poses a considerable number of hard questions. In this paper, we summarize these questions as a set of requirements which we consider to be important for a software architecture to be successful, and we present our solution for such a software architecture. Our main conclusion is that such a software architecture must be reflective in all its key abstractions in order to allow analyzing and operationalizing its properties. A mainstream banking project is on its way which conforms to this architecture. At Ubilab, we are focusing on the research aspects of the project like enabling smooth evolution and explicitly modeling and operationalizing the software architecture at nmtime.", "num_citations": "4\n", "authors": ["843"]}
{"title": "What Microservices Can Learn From Enterprise Information Integration.\n", "abstract": " Microservices are an architectural style in which each service typically provides the complete stack of functions from a user or application programming interface through a domain model all the way to storage for that model. As a consequence, querying conjunct data from different microservices becomes a non-trivial engineering task. In this article, we review older and established general data integration theory in the enterprise context and then compare current microservice practice with enterprise information integration (EII) theory as an established approach to data integration. We find that microservices do not utilize all possible approaches for data integration that are common in enterprises. Specifically, microservices use middleware only partially and databases are not used at all to integrate data. Therefore, we further investigate whether, when, and how these two approaches can be used in a microservices context and present our findings. With our findings, we (i) clear the way for fellow researchers to investigate and improve unused integration strategies with microservices and (ii) raise the awareness of practitioners that some integration strategies may not work out of the box with microservices as they do in EII.", "num_citations": "3\n", "authors": ["843"]}
{"title": "Industry best practices for corporate open sourcing\n", "abstract": " Companies usually don\u2019t share the source code for the software they develop. While this approach is justified in software that constitutes differentiating intellectual property, proprietary development can lead to redundant development and other opportunity costs. In response, companies are increasingly open sourcing some if not all of their non-differentiating software. Given the limited academic research on this emerging topic, we bridge the gap between industry and academia by taking a practice-based approach. We investigate why and how companies engage in corporate open sourcing. We take an exploratory case study approach. Our cases are four companies with multibillion-dollar revenues each: A major e-commerce company based in Germany; a leading social networking service company based in the USA; a cloud computing software company based in the USA; and a manufacturing and media software company based in the USA. We present the resulting theory in an actionable format of state-of-the-art best practice patterns.", "num_citations": "3\n", "authors": ["843"]}
{"title": "Challenges of tracking and documenting open source dependencies in products: A case study\n", "abstract": " Software vendors need to manage the dependencies of the open source components used in their products. Without this management, license compliance would be impossible, export restrictions could not be maintained, and security vulnerabilities would remain unknown to the vendor.", "num_citations": "3\n", "authors": ["843"]}
{"title": "Getting started with open source governance and compliance in companies\n", "abstract": " Commercial use of open source software is on the rise as more companies realize the benefits of using FLOSS components in their products. At the same time, the ungoverned use of such components can result in legal, financial, intellectual property, and other risks. To mitigate these risks, companies must govern their use of open source through appropriate processes. This paper presents an initial theory of industry best practices on getting started with open source governance and compliance. Through a qualitative survey, we conducted and analyzed 15 expert interviews in companies with advanced capabilities in open source governance. We also studied practitioner reports on existing practices for introducing FLOSS governance processes. We cast our resulting initial theory in the actionable format of best practice patterns that, when combined, form a practical handbook of getting started with FLOSS\u00a0\u2026", "num_citations": "3\n", "authors": ["843"]}
{"title": "Industry best practices for open source governance and component reuse\n", "abstract": " Corporate use of open source in software products is on the rise. While this brings a number of technological and business benefits to companies, it also comes with potential legal and financial risks caused by license non-compliance and ungoverned use of open source components. Companies address these threats with free/libre and open source software (FLOSS) governance-internal guidelines and processes for using open source components in products. An essential aspect of FLOSS governance is component reuse and component repository, which enable efficient governance for the previously used components by the company's developers. In our study, we aimed to identify the current industry best practices for FLOSS governance and component reuse. We conducted 15 expert interviews in companies with high governance maturity, analyzed these interviews and derived 19 best practices cast in the\u00a0\u2026", "num_citations": "3\n", "authors": ["843"]}
{"title": "Single-Vendor Open Source at the Crossroads\n", "abstract": " Single-Vendor Open Source at the Crossroads Page 1 Single-Vendor Open Source at the Crossroads Dirk Riehle Friedrich-Alexander University Erlangen-N\u00fcrnberg 2019-03-13 \u2013 LF OSLS 2019 \u2013 California, USA Page 2 Single-Vendor Open Source \u00a9 2019 Dirk Riehle - All Rights Reserved 2 Professorship of Open Source Software \u25cf Professor of Computer Science \u25cf For software engineering and open source software \u25cf At the computer science department of the engineering faculty \u25cf Previously held research positions at ... \u25cf SAP Labs (Silicon Valley) leading the open source research group \u25cf UBS (Swiss Bank, Zurich) leading the software engineering group \u25cf Previously worked in development at ... \u25cf Skyva Inc. (supply chain software, Boston) as software architect \u25cf Bayave GmbH (on-demand business software, Berlin) as CTO Page 3 Single-Vendor Open Source \u00a9 2019 Dirk Riehle - All Rights Reserved \u2026", "num_citations": "3\n", "authors": ["843"]}
{"title": "Open Source User Foundations\n", "abstract": " Open Source User Foundations Page 1 Open Source User Foundations \u00a9 2016 Dirk Riehle - All Rights Reserved 1 Open Source User Foundations Prof. Dr. Dirk Riehle Friedrich-Alexander University Erlangen-N\u00fcrnberg BITKOM Forum Open Source Berlin \u2013 2016-07-05 Page 2 Open Source User Foundations \u00a9 2016 Dirk Riehle - All Rights Reserved 2 Professorship of Open Source Software \u25cf Dirk Riehle, professor of computer science \u25cf Focus is software engineering research incl. open source software \u25cf At Friedrich-Alexander-University Erlangen-N\u00fcrnberg, Faculty of Engineering \u25cf Previously held research positions at ... \u25cf SAP Labs (Palo Alto, Silicon Valley) leading the open source research group \u25cf UBS (Swiss Bank, Zurich) leading the software engineering research group \u25cf Previously worked in development at ... \u25cf Skyva Inc. (supply chain software startup, Boston) as software architect \u25cf Bayave \u2026", "num_citations": "3\n", "authors": ["843"]}
{"title": "Developer belief vs. reality: The case of the commit size distribution\n", "abstract": " The design of software development tools follows from what the developers of such tools believe is true about software development. A key aspect of such beliefs is the size of code contributions (commits) to a software project. In this paper, we show that what tool developers think is true about the size of code contributions is different by more than an order of magnitude from reality. We present this reality, called the commit size distribution, for a large sample of open source and selected closed source projects. We suggest that these new empirical insights will help improve software development tools by aligning underlying design assumptions closer with reality.", "num_citations": "3\n", "authors": ["843"]}
{"title": "The Unstoppable Rise of Open Source/Der Siegeszug von Open Source\n", "abstract": " Open source software is software that is available for everyone to use for free, to adapt to one\u2019s needs for free, and to pass on to other interested parties, for free as well [1]. Beyond the legal definition, the open source movement has brought the world a new way of developing software. Open source is a \u201cdevelopment method for software that harnesses the power of distributed peer review and transparency of process. The promise of open source is better quality, higher reliability, more flexibility, lower cost, and an end to predatory vendor lock-in.\u201d[2] Underlying open source software development are the principles of open transparent collaboration: egalitarianism (everyone may participate, nobody is excluded a priori), meritocracy (decisions are based on the merits of the arguments) and self-organization (processes are adapted to people and project communities rather than people and project communities to\u00a0\u2026", "num_citations": "3\n", "authors": ["843"]}
{"title": "Bringing Open Source Best Practices into Corporations Using a Software Forge\n", "abstract": " A software forge is a tools platform for collaborative software development, similar to integrated CASE environments. Unlike CASE tools, however, software forges have been designed for the software development practices of the open source community. In this paper, we discuss our experiences with using a software forge to bring open source best practices into corporations. We present the design principles and benefits of a firm-internal software forge, and we present a case study of how one project inside SAP benefitted significantly from being on the forge.", "num_citations": "3\n", "authors": ["843"]}
{"title": "End-user programming with application wikis\n", "abstract": " Wikis empower users to collaborate with each other using prose. Users imprint data structures and processes onto wiki pages using social and technical conventions.", "num_citations": "3\n", "authors": ["843"]}
{"title": "An xml interchange format for wiki creole 1.0\n", "abstract": " Wikis have become an important application on the web and in the enterprise, yet there are no interoperability standards between different wiki engines. We present the first complete XML representation format of Wiki Creole 1.0. Wiki Creole is a community standard for wiki markup, the language used to write wiki pages. This report presents the complete XML representation format using a validating XML schema. In addition we present XSLT definitions for transforming the XML representations to XHTML on the one hand and for transforming the XML representations to Wiki Creole markup on the other hand. Our work shows how using XML technologies we can make wiki interchange, wiki upgrading, and wiki conversion independent from a specific wiki engine implementation.", "num_citations": "3\n", "authors": ["843"]}
{"title": "The role of shapers in knowledge-sharing\n", "abstract": " Wikis are a collaborative technology that allows for new ways of working and sharing knowledge. While most firms today have been experimenting with wikis, an important element of the use of wikis that has generally been ignored is the role of the people who shape the wiki pages. Shapers ensure the sustainability of a wiki community by helping to ensure that new ideas and contributions are made and organized. This panel consists of four practitioners who play critical shaping roles in their wiki communities, and two academics who will begin, moderate, and summarize the session. The panel of practitioners will share their thoughts on why they shape, how they shape, and how other communities can help to encourage participants to adopt the shaping role.", "num_citations": "3\n", "authors": ["843"]}
{"title": "Domain-driven framework layering in large systems\n", "abstract": " Frameworks are a key to successful object-oriented application development. The goal of this paper is to show that successful framework development must match the business domains they are derived from, and that they must be flexible enough to evolve gracefully. Our principal contribution is the presentation of concepts that can be used for domain partitioning and framework layering in order to overcome difficulties in framework construction and layering. The work reported here is based on a series of object-oriented banking projects. The system, including several frameworks, consists of 3500 C++-classes and was developed over the past five years.", "num_citations": "3\n", "authors": ["843"]}
{"title": "Working with Java Interfaces and Classes-How to separate interfaces from implementations\n", "abstract": " Factory\"[3, page 87] or\" Product Trader\"[4, page 29]. The effect of this would be that the name of the implementing classes is no longer part of the client code, making it independent from them. As an added benefit, the implementations can be extended and changed without affecting the client code. The next question that poses itself is which criteria to use in choosing a specific implementation. There is no unqualified answer, since it depends on the intended applications. For the naming service example, the VectorNameImpl class is preferable because name components are used frequently, and efficient access to them is important. In contrast, StringNameImpl would be best used when a large number of names will be used and efficiency in storage is crucial. Through this discussion it becomes obvious that differentiating between the implementations is still important. However, the differences in the implementations and their effects on client code can usually be minimized as long as the...", "num_citations": "3\n", "authors": ["843"]}
{"title": "Working with Java Interfaces and Classes-How to maximize design and code reuse in the face of inheritance\n", "abstract": " Window-Toolkit (AWT), demonstrate that the effective use of interfaces is not always intuitive. This is the second in a series of two articles. The first article appeared in the July 1999 issue of Java Report. It discussed the importance of interfaces and the distinction between interfaces and the classes that implement them. Section 2 of this article briefly reiterates the topic to set the stage for more advanced issues of interface and class inheritance as well as code factoring. The example used throughout the article is the design of a naming service, as defined by the CORBA Object Services Specification (COSS)[1]. 2 Interfaces and Implementation Object-oriented modeling is based on classes and objects. A class is the abstraction of several similar phenomena, which are found in one or in more domains. Objects are the concrete phenomena themselves. In Java-based implementations of software systems, classes defined in domain models are typically represented as Java interfaces. Th...", "num_citations": "3\n", "authors": ["843"]}
{"title": "Bureaucracy-A Composite Pattern\n", "abstract": " The Bureaucracy pattern is a recurring design theme used to implement hierarchical object structures which allow interaction on every level of the hierarchy and maintain their inner consistency themselves. It is a composite pattern which is based on the Composite, Observer and Chain of Responsibility pattern. Composite patterns require new presentation and modeling techniques since their complexity makes them more difficult to approach than noncomposite patterns. This paper uses role modeling to present the Bureaucracy pattern and to explore its design and implementation space. Role modeling has proved to be very useful to get a grip on this complex pattern, and it can be expected to work well for design patterns in general.", "num_citations": "3\n", "authors": ["843"]}
{"title": "Industry best practices for component approval in FLOSS Governance\n", "abstract": " Increasingly companies realize the value of using free/libre and open source software (FLOSS) in their products, but need to manage the associated risks. Leading companies introduce open source governance as a solution. A key aspect of corporate FLOSS governance deals with choosing and evaluating open source components for use in products. Following an industry-based research approach, we present 13 best practices in the pattern format of context-problem-solutions paired with consequences. In this paper, we cover an excerpt of the Component Approval section of our FLOSS governance handbook. This article builds upon our previous EuroPLoP publication covering Component Reuse in FLOSS governance processes, as well as other publications on the topic. Analyzing qualitative data gathered from 15 expert interviews, we derive and interconnect the common industry recommendations for\u00a0\u2026", "num_citations": "2\n", "authors": ["843"]}
{"title": "Single-vendor open source firms\n", "abstract": " A business model describes how a company operates and achieves its goals. Open source itself is not a business model, but it can be an important strategy to help a company reach its goals. While each firm has its own distinct plan, there are naturally distinguishable types of business models. Single-vendor open source firms own some piece of software that they provide under an open source license. Typically, they develop the software themselves and earn money through complementary products and services. The companies have many options to design their business models.", "num_citations": "2\n", "authors": ["843"]}
{"title": "The Ecosystem of openKONSEQUENZ, A User-Led Open Source Foundation\n", "abstract": " Companies without expertise in software development can opt to form consortia to develop open source software to meet their needs, as an alternative to the build-or-buy decision. Such user-led foundations are little understood, due to a limited number of published examples. In particular, almost nothing is known about the ecosystems surrounding user-led foundations. Our work seeks to address this gap, through an exploratory qualitative survey of openKONSEQUENZ, from the German energy sector. We find that the technological goals are quite homogeneous, independent of a participant\u2019s role in the ecosystem, but that economic conflicts exist between foundation members and supplier companies due to the consortium\u2019s efforts to transform the software market structure to limit dependency on specific vendors.", "num_citations": "2\n", "authors": ["843"]}
{"title": "Managing commercial conflicts of interest in open source foundations\n", "abstract": " When companies opt to open source their software, they may choose to offer the project to an open source foundation. Donating the software to an open source foundation offers a number of advantages, such as access to the foundation\u2019s existing tools and project management. However, in donating the software, the company relinquishes control of the software and grants other foundation members\u2014including competitors\u2014the same rights to the software. Using a multiple-case study research approach, this paper examines how foundations manage conflicts of interest in the open sourcing donation scenario. We find that foundations primarily use a set of well-defined mechanisms to prevent such conflicts from arising, and that the use of these mechanisms can depend on the foundation type.", "num_citations": "2\n", "authors": ["843"]}
{"title": "Definition of open collaboration\n", "abstract": " CiNii \u8ad6\u6587 - Definition of Open Collaboration CiNii \u56fd\u7acb\u60c5\u5831\u5b66\u7814\u7a76\u6240 \u5b66\u8853\u60c5\u5831\u30ca\u30d3\u30b2\u30fc\u30bf[\u30b5\u30a4\u30cb\u30a3] \u65e5\u672c\u306e\u8ad6\u6587\u3092\u3055\u304c\u3059 \u5927\u5b66\u56f3\u66f8\u9928\u306e\u672c\u3092\u3055\u304c\u3059 \u65e5\u672c\u306e\u535a\u58eb\u8ad6\u6587\u3092\u3055\u304c\u3059 \u65b0\u898f\u767b\u9332 \u30ed\u30b0\u30a4\u30f3 English \u691c\u7d22 \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u9589\u3058\u308b \u30bf\u30a4\u30c8\u30eb \u8457\u8005\u540d \u8457\u8005ID \u8457\u8005\u6240\u5c5e \u520a\u884c\u7269\u540d ISSN \u5dfb\u53f7 \u30da\u30fc\u30b8 \u51fa\u7248\u8005 \u53c2\u8003\u6587\u732e \u51fa\u7248\u5e74 \u5e74\u304b\u3089 \u5e74\u307e\u3067 \u691c\u7d22 \u691c\u7d22 \u691c\u7d22 CiNii\u7a93\u53e3\u696d\u52d9\u306e\u518d\u958b\u306b\u3064\u3044\u3066 Definition of Open Collaboration RIEHLE D. \u88ab\u5f15\u7528\u6587\u732e: 1\u4ef6 \u8457\u8005 RIEHLE D. \u53ce\u9332\u520a\u884c\u7269 WikiSym 2013 WikiSym 2013, 2012 \u88ab\u5f15\u7528\u6587\u732e: 1\u4ef6\u4e2d 1-1\u4ef6\u3092 \u8868\u793a 1 DESIGN ACTIVITY THROUGH OPEN COLLABORATION : Design Case Study of Open Collaboration at Sporepedia KIN Daeeop , LEE Kun-pyo \u30c7\u30b6\u30a4\u30f3\u5b66\u7814\u7a76 60(2), 29-38, 2013-07-31 \u53c2\u8003\u6587\u732e48\u4ef6 Tweet \u5404\u7a2e \u30b3\u30fc\u30c9 NII\u8ad6\u6587ID(NAID) 20001532928 \u8cc7\u6599\u7a2e\u5225 \u305d\u306e\u4ed6 \u30c7\u30fc\u30bf\u63d0\u4f9b\u5143 CJP\u5f15\u7528 \u66f8\u304d\u51fa\u3057 RefWorks\u306b \u66f8\u304d\u51fa\u3057 EndNote\u306b\u66f8\u304d\u51fa\u3057 Mendeley\u306b\u66f8\u304d\u51fa\u3057 Refer/BiblX\u3067\u8868\u793a RIS\u3067\u8868\u793a BibTeX\u3067\u2026", "num_citations": "2\n", "authors": ["843"]}
{"title": "Working with Classes and Interfaces\n", "abstract": " Classes are fundamental to object-oriented design and programming in C++. In this article, we take a look at five fundamental patterns of designing and using classes. We use a story, the evolution of a seemingly simple class, to illustrate the Simple Class, Design by Primitives, Interface Class, Abstract Base Class, and Narrow Inheritance Interface patterns. This story and the ensuing discussion provide us with some insight on what makes up a pattern and a good description thereof.", "num_citations": "2\n", "authors": ["843"]}
{"title": "A Comparison of the Value Systems of Adaptive Software Development and Extreme Programming\n", "abstract": " Today, we see an increasing interest in new software development methodologies that put humans at the center of the development process. Adaptive Software Development, Extreme Programming, and others are exemplars of this new breed of development methodologies. They are all based on the assumption that for coping with high speed and high change, traditional management techniques are inadequate. Effectively, the new methodologies are based on a different value system than the old ones. A value system is a system of beliefs about what constitutes the fundamental aspects of software development: developers, customers, markets, products, requirements, etc. This paper presents a simple model of value systems and compares the value systems of two exemplary new development methodologies, Adaptive Software Development (ASD) and Extreme Programming (XP). The purpose of this comparison is to more easily determine whether techniques of one methodology can be adapted and used by another methodology, thereby helping authors of methodologies to better learn from other methodologies.", "num_citations": "2\n", "authors": ["843"]}
{"title": "L\u00f6st CORBA wirklich alle unsere Probleme?\n", "abstract": " In diesem Artikel arbeiten wir deshalb bewu\u00dft die Schwachstellen von CORBA heraus. Dabei betrachten wir die folgenden Aspekte: das Objektmetamodell, die Unterst\u00fctzung durch CORBA im Bereich Softwarearchitektur, sowie pragmatische \u00dcberlegungen zur Standardisierung und zum Markt. Wir setzen voraus, da\u00df Sie die wichtigste Terminologie und technischen Ans\u00e4tze der OMG-Spezifikationen bereits kennen, so da\u00df wir uns auf eine Diskussion der eigentlichen Probleme von CORBA konzentrieren k\u00f6nnen.", "num_citations": "2\n", "authors": ["843"]}
{"title": "Arbeiten mit Java-Schnittstellen und-Klassen\n", "abstract": " Die Unterscheidung von Schnittstellen und Implementierungen ist ein in der Softwaretechnik schon lange bekanntes Konzept. Java bietet diese Unterscheidung zwar an, allerdings ist sie f\u00fcr viele Java-Entwickler anfangs ungewohnt. Dieser zweiteilige Artikel soll dem abhelfen. Ging es im ersten Teil um Schnittstellen und Implementierungen, geht es nun um Schnittstellen-und Klassenvererbung und die Faktorisierung von Implementierungen. Zur Illustration dient wiederum das Beispiel eines einfachen Namensdienstes, wobei neben der sauberen und \u00e4nderungsfreundlichen Modellierung insbesondere die Codewiederverwendung betont wird.", "num_citations": "2\n", "authors": ["843"]}
{"title": "Late Creation-A Creational Pattern\n", "abstract": " Suppose you have designed a class hierarchy of domain value types like AccountNumber, Amount, InterestRate or SocialSecurityNumber. These value types will be used in several applications. For example, one such application will present a form on the screen and let users edit its fields. The value types of the fields correspond to the domain value types. Since each value type has its own semantics and editing constraints, you might want to provide specialized widgets for each of these value types as shown in the following figure.", "num_citations": "2\n", "authors": ["843"]}
{"title": "Bringing Wikipedia to Work: Open Collaboration within Corporations\n", "abstract": " \u220e We don\u2019t have to originate the research to profit from it\u220e Building a better business model is better than getting to market first\u220e If we make the best use of internal and external ideas, we will win\u220e We should profit from other\u2019s use of our IP and we should buy others\u2019 IP if it advances our business model", "num_citations": "1\n", "authors": ["843"]}
{"title": "Method properties in java\n", "abstract": " As Java developers, we talk a lot about methods of classes and interfaces. We talk about types of methods like getters and setters, command methods, and factory methods. Next to classifying methods by purpose, we also talk about properties of methods like being a primitive or composed method, a hook or template method, a class or instance method, or a convenience method.Obviously, we have a large vocabulary for talking about method types and method properties. We use this vocabulary to communicate and document different aspects of a method, for example, what it is good for, who may use it, and how it is implemented. Understanding this vocabulary is a key to fast and effective communication among developers.", "num_citations": "1\n", "authors": ["843"]}
{"title": "Working with Java Interfaces and Classes\n", "abstract": " Software engineering has been using interfaces for over 25 years. Java, in contrast to other object-oriented programming languages like C++ and Smalltalk, provides a clean separation between interfaces and classes that implement the interfaces. For new Java developers, this requires some adjustment in thinking. This article shows not only how to distinguish between interfaces and classes, but also how to use them effectively to model and implement Java-based systems. We illustrate the concepts using the implementation of a simple CORBA-based naming service.", "num_citations": "1\n", "authors": ["843"]}
{"title": "Sp\u00e4te Erzeugung\n", "abstract": " Ein zentrales Konzept des objektorientierten Entwurfs ist die Bildung abstrakter Oberklassen, deren Zusammenspiel die Funktionalit\u00e4t einer Anwendung realisiert. Konkretisiert wird dies durch Unterklassen, die offengelassene Aspekte der Oberklassen ausf\u00fcllen und so die Erzeugung von Objekten erm\u00f6glichen. Um diese Objekte zu erzeugen, m\u00fcssen die konkreten Klassen benannt werden. Mit dem hier vorgestellten Konzept der sp\u00e4ten Erzeugung lassen sich Objekte konkreter Unterklassen nur mit Kenntnis ihrer abstrakten Oberklassen erzeugen, was die Flexibilit\u00e4t der Softwarearchitektur erh\u00f6ht und ihre Komplexit\u00e4t reduziert.", "num_citations": "1\n", "authors": ["843"]}