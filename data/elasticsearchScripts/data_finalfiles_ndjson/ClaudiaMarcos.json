{"title": "Comparaci\u00f3n de modelos de calidad, factores y m\u00e9tricas\n", "abstract": " Existen diferentes enfoques de desarrollo de software, en su mayor\u00eda priorizan la calidad en el proceso y el producto obtenido. Para poder lograr esto es importante el uso de modelos de calidad apropiados para cada metodolog\u00eda. Estos modelos de calidad presentan factores e indicadores que describen las caracter\u00edsticas del software y sus relaciones y pueden ser adaptaciones de otros o creados tomando como base los est\u00e1ndares existentes.", "num_citations": "31\n", "authors": ["1018"]}
{"title": "Solving conflicts in aspect-oriented applications\n", "abstract": " Aspect-Oriented Software Development is an approach which supports the modularisation of crosscutting concerns through the development phases of an application. One of the limitations in the main approaches to AOSD is that they do not provide support for the definition and handling of conflicts that may arise between multiple competing aspects. This paper describes how conflicts are managed by a framework that we have developed for the construction of aspect-oriented applications. In the first place, we describe the main characteristics of this reflective multi-level framework and the tool that instantiates it. We then present our categorisation of different conflicts and how they are defined and handled by our environment for the development of aspect-oriented software.", "num_citations": "31\n", "authors": ["1018"]}
{"title": "Reifying design patterns as metalevel constructs\n", "abstract": " A design pattern describes a structure of communicating components that solves a commonly occurring design problem. Designing with patterns offers the possibility of raising the abstraction level at which design is performed, with improvements in clarity, understanding, and facility of maintenance of applications. However, in their most common presentation, design patterns are informal pieces of design process, which application is not reflected in the operational system, and the potential advantages of a more principled design are not realized. This work proposes to organize design in such a way that pattern applications remain explicit in the operational systems. A reflective architecture is proposed, where patterns are reified as metalevel constructs.", "num_citations": "23\n", "authors": ["1018"]}
{"title": "MAM-UML: an UML profile for the modeling of mobile-agent applications\n", "abstract": " This paper introduces an approach for the modeling of mobile-agent applications. It aims to deal with the lack of appropriate concepts and notations, in the standard UML, to capture relevant abstractions for the modeling of mobile-agent features. The approach is materialized by an UML profile, which includes views to model organizational, life cycle, interaction and mobility aspects of mobile-agent applications contributing to the analysis, design and implementation phases of their development.", "num_citations": "21\n", "authors": ["1018"]}
{"title": "Desarrollo de un sistema de la din\u00e1mica de rodeo de cr\u00eda bovina y de los recursos de alimentaci\u00f3n para su aplicaci\u00f3n a la planificaci\u00f3n productiva y econ\u00f3mica\n", "abstract": " El actual entorno de cambio agropecuario exige la capacidad de formular y evaluar alternativas posibles. Este trabajo plantea la experiencia del desarrollo de una herramienta inform\u00e1tica simple aplicable a la toma de decisi\u00f3n ganadera. El equipo de trabajo posee una conformaci\u00f3n interdisciplinaria y la metodolog\u00eda de desarrollo utilizada es m\u00e9todos \u00e1giles. La estructura b\u00e1sica del proceso de cr\u00eda vacuna surge de su din\u00e1mica del flujo del rodeo. El sistema en desarrollo modeliza esta din\u00e1mica ante dos situaciones: rodeo estable o en transici\u00f3n, tanto anual como mensual, generando un presupuesto econ\u00f3mico, financiero y forrajero del proceso y su an\u00e1lisis de sensibilidad.", "num_citations": "15\n", "authors": ["1018"]}
{"title": "Framework comprehension and design patterns: A reverse engineering approach\n", "abstract": " Object-oriented frameworks are generic designs for specific application domains, that enable the reuse of designs and domain expert experience. In spite of this, framework are not simple to reuse because they are difficult to comprehend, mainly due to a lack of good documentation and supporting tools. In this work, an approach to framework comprehension based on visualization of design patterns is presented. A tool was built to support this approach, by trying to automatically identify and explain the potential patterns existing in a given design. Experimental results and conclusions of tool utilization are also presented.", "num_citations": "13\n", "authors": ["1018"]}
{"title": "Modeling of mobile-agent applications with UML\n", "abstract": " In the last years, the software development based on mobile agents has received important attention because it introduces a new development paradigm for widely distributed and heterogeneous systems. Up to now, the usual approach for mobile-agent applications development has been focused on the implementation phase, mainly because of the vast lack of suitable modeling techniques or methodologies in the domain. In this sense, the development of powerful abstractions for the modeling of mobile agents becomes increasingly important. In this article, we present an approach to deal with the lack of appropriate concepts and notations in the standard Unified Modeling Language (UML) to capture relevant abstractions for the modeling of mobile-agent features. This approach is materialized by a coherent and comprehensive set of views and models, which extends UML contributing to the analysis and design phases of mobile-agent applications development.", "num_citations": "12\n", "authors": ["1018"]}
{"title": "Administraci\u00f3n de conflictos entre aspectos en aspectj\n", "abstract": " La ocurrencia de conflictos entre aspectos es una consecuencia de la descomposici\u00f3n de los sistemas software en el desarrollo de sistemas orientados a aspectos. Dicho fen\u00f3meno requiere una especial atenci\u00f3n y tratamiento ya que la activaci\u00f3n de ciertos conflictos puede provocar comportamientos no deseados, inconsistencias e imprecisi\u00f3n en la ejecuci\u00f3n de los sistemas software. En este trabajo se proponen estrategias y mecanismos para controlar y resolver las potenciales situaciones conflictivas entre aspectos en aplicaciones desarrolladas en AspectJ.", "num_citations": "8\n", "authors": ["1018"]}
{"title": "Identificaci\u00f3n Temprana de Aspectos\n", "abstract": " En este trabajo se presenta un enfoque automatizado para identificar aspectos en etapas tempranas del ciclo de desarrollo de software. Para ello se desarrolla una herramienta en el contexto de ingenier\u00eda de software que sirva de soporte para identificar los diferentes concerns del sistema. En etapas posteriores estos concerns se convertir\u00e1n en los elementos b\u00e1sicos y en los aspectos del sistema. De esta manera, se identifican los aspectos en etapas tempranas logrando la separaci\u00f3n de concerns y reduciendo los costos de desarrollo, mantenimiento y evoluci\u00f3n.", "num_citations": "8\n", "authors": ["1018"]}
{"title": "Agile Development for a Beef-Cattle Farm Simulator\n", "abstract": " Today software industry faces new challenges, as to apply innovative strategies to develop new products. These strategies require continuous adjustment to the dynamic changes of software requirements, and therefore, in some cases time-schedule of tasks becomes difficult for planning purposes. In this paper, a project experience during the development of a grazed based beef-cattle farm simulator is presented. Initially the project was developed following a waterfall life cycle but with scant documentation and planning, which was fated to fail. Finally, a agile method was applied which allowed highly positive results from the point of view of developers and customer.", "num_citations": "6\n", "authors": ["1018"]}
{"title": "An\u00e1lisis de desarrollo de software orientado a Feature-L\u00ednea de producto de Software para Aplicaciones de TVDI\n", "abstract": " El Desarrollo de Software Orientado a Features (FOSD) consiste en la construcci\u00f3n de sistemas a partir de un conjunto de caracter\u00edsticas, cada feature o caracter\u00edstica es una unidad funcional que satisface un requisito de software. Las fases son an\u00e1lisis del dominio, dise\u00f1o e implementaci\u00f3n del dominio, configuraci\u00f3n y generaci\u00f3n del producto de software, obteniendo as\u00ed una L\u00ednea de Productos de Software (SPL). El presente trabajo realiza una comparaci\u00f3n de herramientas para su implementaci\u00f3n y, se analiza un conjunto de aplicaciones que modelan features. Resultando un espacio de estudio abierto para modelar aplicaciones para la Televisi\u00f3n Digital Interactiva (TVDi). Adem\u00e1s se han encontrado diversos m\u00e9todos, artefactos y patrones de dise\u00f1o para el modelado de una aplicaci\u00f3n de TVDi en particular, reflejando un estudio para el modelado de variabilidad. El objetivo principal es estudiar SPL/FOSD, empleando los Patrones de Dise\u00f1o de Interacci\u00f3n (PDI) para el dominio de las aplicaciones de TVDi.", "num_citations": "5\n", "authors": ["1018"]}
{"title": "Rescue of a whole-farm system: crystal clear in action\n", "abstract": " This paper presents a case study of an agricultural project. From a desktop research model (stage 1), a web-based whole-farm simulator was developed applying a waterfall life cycle (stage 2) but several problems were detected and the project failed. The project was continued (stage 3) applying crystal clear agile method, which suited better the requirements. An efficient team communication and the frequent delivery of usable code increasingly contributed to the sponsor\u2019s satisfaction. It was positively concluded that crystal clear was able to rescue the project and that it could be applied in a short-term period without major difficulties.", "num_citations": "5\n", "authors": ["1018"]}
{"title": "MEDIATOR: an AOP tool to support conflicts among aspects\n", "abstract": " The issue of conflicts among aspects is not new, however the handling of conflicts is still an open problem. First, the detection of conflicts is a manual task in most of the AOP tools. Second, in general the resolution of conflicts is enclosed to order-schemes. The handling of conflicts can be problematical if the programming tool does not supply suitable structures and specific mechanisms. MEDIATOR is an environment programming that extends Java language to support AOP, with specific and flexible mechanisms to manage conflicts among aspects. The detection of conflicts is an automatic process and the resolution of them is implemented by explicit and symbolic rules.", "num_citations": "5\n", "authors": ["1018"]}
{"title": "Conflicts in aspectj: Restrictions and solutions\n", "abstract": " A conflict among aspects happens when two or more aspects compete for its activation. The treatment of conflicts should provide mechanisms for the detection and resolution of the same ones, with the objective of avoiding that the software execution will be uncertain and unstable. However, the mechanisms provided by the programming aspect-oriented tools can be really limited, being this the case of AspectJ. In consequence, the resolution of certain conflicts becomes a critical problem since it drives to the restructuring of the code of the aspects. In this work the conflicting situations are identified that they are critical in AspectJ and particular and general solutions are delineated to the problem.", "num_citations": "4\n", "authors": ["1018"]}
{"title": "Associations in conflict\n", "abstract": " Aspect-Oriented Programming (AOP) is an emergent technology for the modularization of crosscutting concern. The most used approach to support the AOP paradigm is based on the aspect notion, as the basic unit that contains the crosscutting concern logic and a method that relates it to the functional components (pointcuts, advices, join-points). This mechanism, popularized by tools like AspectJ, restricts and limits the handling of conflicts among aspects. In this work a flexible, wider and powerful approach is presented. This strategy is based on two main mechanisms: definition of associations and explicit rules. The approach presented is implemented in a prototype denominated MEDIATOR.", "num_citations": "4\n", "authors": ["1018"]}
{"title": "Expert in conflicts\n", "abstract": " Aspect-oriented programming (AOP) is an emergent technology for the modularization of crosscutting concerns. The most used approach to support the AOP paradigm is based on the aspect notion, as the basic unit that contains the crosscutting concern logic and a method (pointcuts, advice, and join-points) that relates it to the functional components. This mechanism, popularized by tools like AspectJ, restricts and limits the handling of conflicts among aspects. In this work, a flexible, wide and powerful approach is presented. This strategy is based on two main mechanisms: definition of associations and symbolic rules. An expert embedded system detects and solves conflicts automatically. The approach presented is implemented in a prototype denominated MEDIATOR.", "num_citations": "3\n", "authors": ["1018"]}
{"title": "Exploraci\u00f3n de Reglas de Inferencia para Automatizar la Refactorizaci\u00f3n Aspectual\n", "abstract": " Este trabajo explora la factibilidad de automatizar el catalogo de refactorizaci\u00f3n aspectual propuesto por Monteiro y Fern\u00e1ndez utilizando como estrategia un sistema de reglas de inferencia. En particular se presentan el an\u00e1lisis y dise\u00f1o de las estructuras de datos y reglas para el grupo del catalogo cuyo objetivo es extraer crosscutting concerns. El prototipo Z-ARIR soporta el proceso planteado.Abstract. This work explores the feasibility of automating the aspect refactoring catalogue proposed by Monteiro and Fern\u00e1ndez using as strategy an inference rules system. In particular the analysis and design of the structures of data and rules are presented to the group whose objective is to extract crosscutting concerns. The prototype Z-ARIR supports the outlined process.", "num_citations": "3\n", "authors": ["1018"]}
{"title": "Early Conflicts: An\u00e1lisis y Resoluci\u00f3n de Conflictos Tempranos\n", "abstract": " Actualmente el tratamiento de aspectos en las etapas tempranas de desarrollo de software (aspectos tempranos), es uno de los temas de investigaci\u00f3n en la Ingenier\u00eda de Software. Durante estas etapas se intenta comenzar a modularizar el sistema identificando, separando y especificando los concerns que cortan transversalmente los componentes funcionales de la aplicaci\u00f3n, denominados aspectos candidatos. Entre estos aspectos existen posibles competencias de activaci\u00f3n que derivan a situaciones poco deseables llamadas conflictos (conflictos tempranos). El presente trabajo propone un enfoque automatizado para detectar, analizar y resolver toda situaci\u00f3n conflictiva que pueda surgir entre aspectos generados tempranamente.", "num_citations": "3\n", "authors": ["1018"]}
{"title": "Conflictos entre aspectos en etapas del desarrollo de software\n", "abstract": " La ausencia de m\u00e9todos, estrategias y mecanismos autom\u00e1ticos y flexibles para la detecci\u00f3n y resoluci\u00f3n de conflictos entre aspectos puede tener consecuencias graves en la ejecuci\u00f3n del software. Ante la presencia de determinadas situaciones conflictivas el comportamiento del software se puede tornar impredecible, indeseado e incierto. La construcci\u00f3n y desarrollo de soluciones que superen estas deficiencias resulta una tarea importante para el desarrollo orientado a aspectos [1]. El presente art\u00edculo describe el t\u00f3pico de estudio, los trabajos relacionados al tema y las acciones a realizar a trav\u00e9s del proyecto de investigaci\u00f3n Conflictos entre Aspectos.", "num_citations": "3\n", "authors": ["1018"]}
{"title": "Administraci\u00f3n temprana de conflictos entre aspectos\n", "abstract": " Dada la creciente evoluci\u00f3n y cambios existentes en el desarrollo de software orientado a aspectos se ha visto necesario aplicar dicho paradigma en todas las etapas del desarrollo de software. Es por ello que actualmente existen trabajos que abarcan hasta las etapas m\u00e1s tempranas, existiendo enfoques que identifican aspectos a partir de los crosscutting concerns funcionales y no funcionales. Inclusive, en algunos casos abordan el tratamiento de conflictos entre dichos aspectos. Debido a que reci\u00e9n se inicia este tratamiento, este trabajo propone un enfoque automatizado para administrar conflictos en las etapas tempranas del desarrollo de software, m\u00e1s precisamente en la ingenier\u00eda de requerimientos, de manera tal de detectar, analizar y resolver conflictos que puedan surgir entre aspectos generados tempranamente.", "num_citations": "3\n", "authors": ["1018"]}
{"title": "Un enfoque pr\u00e1ctico para reusar Aspectos en ASPECTJ\n", "abstract": " En el Desarrollo de Software Orientado a Aspectos es frecuente encontrar situaciones en las que un mismo aspecto se repite y se utiliza en diferentes aplicaciones de software. En AspectJ el reuso de los aspectos es limitado. En este trabajo se propone un enfoque que radica en establecer un mecanismo que permita definir separadamente aquellos elementos de AspectJ que obstaculizan su reuso. Se plantea la extensi\u00f3n de la herramienta ASTOR para incluir un repositorio de aspectos gen\u00e9ricos y manejo de asociaciones, factores en los cuales se basa la estrategia.", "num_citations": "3\n", "authors": ["1018"]}
{"title": "A Framework for the Development of Multi-Level Reflective Applications\n", "abstract": " Computational reflection has become a useful technique for developing applications that are able to observe and modify their behaviour. Reflection has evolved to the point where it is being used to address a variety of application domains. This paper presents a reflective architecture that has been developed as a framework that provides a flexible reflective mechanism for the development of a wide range of applications. This architecture supports many meta-levels, where each one may contain one or more planes. A plane groups components that deal with the same functionality, and so enhances the separation of concerns in the system. The reflective mechanism permits different types of reflection, and also incorporates the runtime handling of potential conflicts between competing system components. The design and implementation of this framework are described, and an example illustrates its characteristics.", "num_citations": "3\n", "authors": ["1018"]}
{"title": "Estrategias para la Integraci\u00f3n y Conexi\u00f3n de Reglas de Negocio con Aspectos\n", "abstract": " La Programaci\u00f3n Orientada a Aspectos (POA) ha sido propuesta como una alternativa para implementar (encapsular) las conexiones entre reglas de negocio (RN) y los componentes funcionales o l\u00f3gica de negocio (funcionalidad base) con el objeto de minimizar las dependencias y acoplamiento. Trabajos previos demuestran que en consecuencia se logra mayor reutilizaci\u00f3n del c\u00f3digo base y mejoras en el mantenimiento del software. Sin embargo, otros problemas aparecen directamente asociados con la naturaleza de las conexiones y las limitaciones de los lenguajes POA que dificultan el desarrollo del software. Este proyecto de investigaci\u00f3n plantea explorar, proponer y experimentar estrategias que ofrezcan mayor flexibilidad en la implementaci\u00f3n de conexiones con aspectos, superando los enfoques existentes. Las bases del trabajo se establecen en las siguientes premisas: a) plantear el abordaje de enfoques POA declarativos para el encapsulamiento de las conexiones entre reglas de negocio y la funcionalidad base; b) definir especificaciones de alto nivel para la representaci\u00f3n de las conexiones independientes de lenguajes de programaci\u00f3n y notaciones de dise\u00f1o; c) establecer una taxonom\u00eda que clasifique a las conexiones de acuerdo a sus caracter\u00edsticas a partir de las especificaciones para su procesamiento autom\u00e1tico. Los resultados del proyecto de investigaci\u00f3n se apoyar\u00e1n en el desarrollo de prototipos y casos de estudio que permitan demostrar la validez de los conocimientos generados.", "num_citations": "2\n", "authors": ["1018"]}
{"title": "Modelo de Asociaciones: un enfoque para el tratamiento de conflictos entre aspectos\n", "abstract": " La ocurrencia de ciertos conflictos entre aspectos puede producir comportamientos inciertos e indeseables en la ejecuci\u00f3n del software, por lo que es necesario disponer de mecanismos espec\u00edficos para controlar y administrar las situaciones conflictivas. La estructura de las herramientas de programaci\u00f3n orientadas a aspectos puede influir en este sentido, flexibilizando o limitando la tarea. En este trabajo se propone el Modelo de Asociaciones como un enfoque alternativo que flexibiliza, amplia y automatiza la administraci\u00f3n de conflictos entre aspectos.Abstract. The conflicts among aspects can produce uncertain and undesirable behaviors in the execution of the software. Therefore, specific mechanisms to control and to handle the conflicting situations are necessary. The structure of the AOP tools can influence in this sense because of its flexibility or restrictions. In this work it is proposed the Model of Associations such as an alternative approach which is more flexible, wide and automatic way to solve the conflicts among aspects.", "num_citations": "2\n", "authors": ["1018"]}
{"title": "L\u00ednea de Producto de Software para aplicaciones de TVDi basado en patrones de dise\u00f1o\n", "abstract": " El desarrollo de aplicaciones interactivas para TV Digital (TVDi) de calidad ya escala industrial requiere estrategias espec\u00edficas que se puedan aplicar al desarrollo. A partir de patrones de dise\u00f1o de interacci\u00f3n centrados en el usuario, se propone la construcci\u00f3n de una L\u00ednea de Productos de Software (SPL) para aplicaciones TVDi. Una SPL es una modalidad de desarrollo software enfocada en potenciar la reutilizaci\u00f3n y los patrones de dise\u00f1o de interacci\u00f3n que garantizan la usabilidad de los productos. Este trabajo presenta el modelo de caracter\u00edsticas de una SPL para dominio de aplicaciones interactivas de TV Digital, la cual se valid\u00f3 con 32 prototipos que aplican los patrones de dise\u00f1o de interacci\u00f3n centrados en el usuario.", "num_citations": "1\n", "authors": ["1018"]}
{"title": "Uso de Ontolog\u00edas para mapear una Arquitectura de Software con su Implementaci\u00f3n\n", "abstract": " La arquitectura de software de un sistema es un activo importante para una organizaci\u00f3n que desarrolla software. Para maximizar los beneficios que provee una arquitectura, \u00e9sta debe estar en correspondencia con la implementaci\u00f3n del sistema.Resumen: La arquitectura de software de un sistema es un activo importante para una organizaci\u00f3n que desarrolla software. Para maximizar los beneficios que provee una arquitectura, \u00e9sta debe estar en correspondencia con la implementaci\u00f3n del sistema. En muchos proyectos existe cierta documentaci\u00f3n de la arquitectura, pero sin embargo, la informaci\u00f3n de mapeos entre los elementos de dicha arquitectura y su implementaci\u00f3n en c\u00f3digo es escasa o inexistente. Este problema trae aparejadas dificultades de entendimiento de los elementos de c\u00f3digo en relaci\u00f3n a la arquitectura originalmente dise\u00f1ada, lo que repercute negativamente sobre el aseguramiento de la calidad y los esfuerzos de mantenimiento del sistema. Si bien la provisi\u00f3n manual de estos mapeos es factible, es una tarea compleja y proclive a errores, particularmente a medida que la implementaci\u00f3n del sistema evoluciona en el tiempo. En este contexto, las t\u00e9cnicas de alineaci\u00f3n de ontolog\u00edas se presentan como una alternativa para producir mapeos en forma autom\u00e1tica. Por esta raz\u00f3n, el presente trabajo propone un enfoque automatizado y basado en ontolog\u00edas para la generaci\u00f3n de mapeos entre la arquitectura de un sistema y su implementaci\u00f3n.", "num_citations": "1\n", "authors": ["1018"]}
{"title": "REAssistant: a Tool for Identifying Crosscutting Concerns in Textual Requirements.\n", "abstract": " Use case modeling is very useful to capture requirements and communicate with the stakeholders. Use cases normally have textual specifications that describe the interactions between the system and external actors. However, since use cases are specified from a functional perspective, concerns that do not fit well this decomposition criterion are kept away from the analysts\u2019 eye and might end up intermingled in multiple use cases. These crosscutting concerns (CCCs) are generally relevant for analysis, design and implementation activities and should be dealt with from early stages. Unfortunately, identifying such concerns by hand is a cumbersome and error-prone task, mainly because it requires a semantic interpretation of textual requirements. To ease the analysis of CCCs, we have developed an automated tool called REAssistant that is able to extract semantic information from textual use cases and reveal candidate CCCs, helping analysts to reason about them before making important commitments in the development. Our tool performs a series of advanced NLP analyses based on the UIMA framework. Analysts can define concern-specific queries in the tool to search for CCCs in the requirements via a flexible SQL-like language. In this article, we briefly discuss the technologies behind the tool and explain how an end user can interact with REAssistant to analyze CCCs in use case specifications. A short video explaining the main features of the tool can be found at https://youtu. be/i3kSJil_2eg. The REAssistant tool can be downloaded from https://code. google. com/p/reassistant.", "num_citations": "1\n", "authors": ["1018"]}
{"title": "Exploraci\u00f3n de repositorios de software y an\u00e1lisis de potenciales extensiones a aspectos\n", "abstract": " Tanto el Desarrollo basado en Componentes como el Desarrollo de Software orientado a Aspectos son enfoque propuestos para abordar diversos problemas que surgen en el proceso de desarrollo de aplicaciones. Ambos enfoques tienen como objetivo el reuso de software, ante esta situaci\u00f3n surge la necesidad de que componentes y aspectos compartan un espacio com\u00fan en el cual puedan ser publicados, recuperados y reutilizados. Los repositorios actuales parecen no proveer aspectos de manera expl\u00edcita, en ocasiones los aspectos son utilizados para especificar el componente, pero no son reusables. La tarea de publicar y recuperar componentes es muy compleja, existen diversos m\u00e9todos de publicaci\u00f3n y recuperaci\u00f3n a tal fin. En este trabajo se exploraron diferentes repositorios analizando criterios al igual que se exponen los m\u00e9todos de publicaci\u00f3n y recuperaci\u00f3n con el fin de determinar si es posible la adaptaci\u00f3n o extensi\u00f3n de los repositorios a aspectos.", "num_citations": "1\n", "authors": ["1018"]}
{"title": "pLinker: Relaciones con Patrones de Dise\u00f1o\n", "abstract": " Los patrones de dise\u00f1o se han convertido en una t\u00e9cnica importante para el reuso de conocimiento de software. Cada patr\u00f3n provee informaci\u00f3n sobre su dise\u00f1o, describiendo las clases, m\u00e9todos y relaciones que resuelven un problema de dise\u00f1o en particular. Sin embargo, su documentaci\u00f3n no brinda informaci\u00f3n sobre la integraci\u00f3n de los mismos en un dise\u00f1o existente, simplemente describen de manera poco detallada los patrones con los cuales esta relacionado. Este trabajo, presenta una clasificaci\u00f3n de las relaciones entre patrones y c\u00f3mo la estructura de clases de un dise\u00f1o existente se ve afectada al incorporar un nuevo patr\u00f3n. Con el objetivo de asistir al usuario en la construcci\u00f3n de dise\u00f1os utilizando patrones y sus relaciones, se implement\u00f3 pLinker. Dicha herramienta permite construir diagramas de clase UML e incorporar patrones en ellos.", "num_citations": "1\n", "authors": ["1018"]}
{"title": "Combining aspect mining techniques based on crosscutting concern sort\n", "abstract": " Aspect mining encompasses techniques for identifying crosscutting concern code in legacy systems. Those techniques share several problems, including low recall and precision. In this paper, a dynamic aspect mining technique based on crosscutting concern sorts is introduced, and combined with four previous static techniques in two case studies. By combining our dynamic based technique with the other static ones we were able to improve the percentage of identified candidates 72% and 178% on average for each analyzed application. Based on the results, we reckon that static and dynamic based approaches yield complementary results and hence should be used in conjunction.", "num_citations": "1\n", "authors": ["1018"]}
{"title": "Una extension de UML para Sistemas de Agentes\n", "abstract": " Debido a la diversidad de los sistemas multi-agentes, el dise\u00f1o de los mismos resulta cada vez m\u00e1s complejo. En consecuencia, los desarrolladores necesitan de metodolog\u00edas y herramientas que ayuden en el desarrollo de sistemas agentes. UML ha sido propuesto como una nueva alternativa para el modelamiento de agentes, sin embargo no provee mecanismos para modelar las caracter\u00edsticas propias de un agente. En este trabajo se presenta un profile UML para Sistemas de Agentes. Se ha extendido la herramienta ArgoUML con el objetivo de soportar la incorporaci\u00f3n del profile a dicha herramienta, la cual permite que los desarrolladores especifiquen nuevos profiles y actualicen autom\u00e1ticamente el UML est\u00e1ndar, permitiendo el modelamiento de aplicaciones con estos nuevos elementos.", "num_citations": "1\n", "authors": ["1018"]}