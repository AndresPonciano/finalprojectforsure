{"title": "Genetic programming III: Darwinian invention and problem solving\n", "abstract": " Genetic programming is a method for getting a computer to solve a problem by telling it what needs to be done instead of how to do it. Koza, Bennett, Andre, and Keane present genetically evolved solutions to dozens of problems of design, optimal control, classification, system identification, function learning, and computational molecular biology. Among the solutions are 14 results competitive with human-produced results, including 10 rediscoveries of previously patented inventions. Researchers in artificial intelligence, machine learning, evolutionary computation, and genetic algorithms will find this an essential reference to the most recent and most important results in the rapidly growing field of genetic programming.* Explains how the success of genetic programming arises from seven fundamental differences distinguishing it from conventional approaches to artificial intelligence and machine learning* Describes how genetic programming uses architecture-altering operations to make on-the-fly decisions on whether to use subroutines, loops, recursions, and memory* Demonstrates that genetic programming possesses 16 attributes that can reasonably be expected of a system for automatically creating computer programs* Presents the general-purpose Genetic Programming Problem Solver* Focuses on the previously unsolved problem of analog circuit synthesis, presenting genetically evolved filters, amplifiers, computational circuits, a robot controller circuit, source identification circuits, a temperature-measuring circuit, a voltage reference circuit, and more* Introduces evolvable hardware in the form of field-programmable gate arrays* Includes\u00a0\u2026", "num_citations": "2397\n", "authors": ["1695"]}
{"title": "Automated synthesis of analog electrical circuits by means of genetic programming\n", "abstract": " Analog circuit synthesis entails the creation of both the topology and the sizing (numerical values) of all of the circuit's components. This paper presents a single uniform approach using genetic programming for the automatic synthesis of both the topology and sizing of a suite of eight different prototypical analog circuits, including a low-pass filter, a crossover filter, a source identification circuit, an amplifier, a computational circuit, a time-optimal controller circuit, a temperature-sensing circuit, and a voltage reference circuit. The problem-specific information required for each of the eight problems is minimal and consists of the number of inputs and outputs of the desired circuit, the types of available components, and a fitness measure that restates the high-level statement of the circuit's desired behavior as a measurable mathematical quantity. The eight genetically evolved circuits constitute an instance of an\u00a0\u2026", "num_citations": "597\n", "authors": ["1695"]}
{"title": "Model-based Bayesian exploration\n", "abstract": " Reinforcement learning systems are often concerned with balancing exploration of untested actions against exploitation of actions that are known to be good. The benefit of exploration can be estimated using the classical notion of Value of Information - the expected improvement in future decision quality arising from the information acquired by exploration. Estimating this quantity requires an assessment of the agent's uncertainty about its current value estimates for states. In this paper we investigate ways of representing and reasoning about this uncertainty in algorithms where the system attempts to learn a model of its environment. We explicitly represent uncertainty about the parameters of the model and build probability distributions over Q-values based on these. These distributions are used to compute a myopic approximation to the value of information for each action and hence to select the action that best balances exploration and exploitation.", "num_citations": "349\n", "authors": ["1695"]}
{"title": "State abstraction for programmable reinforcement learning agents\n", "abstract": " Safe state abstraction in reinforcement learning allows an agent to ignore aspects of its current state that are irrelevant to its current decision, and therefore speeds up dynamic programming and learning. This paper explores safe state abstraction in hierarchical reinforcement learning, where learned behaviors must conform to a given partial, hierarchical program. Unlike previous approaches to this problem, our methods yield significant state abstraction while maintaining hierarchical optimality, ie, optimality among all policies consistent with the partial program. We show how to achieve this for a partial programming language that is essentially Lisp augmented with nondeterministic constructs. We demonstrate our methods on two variants of Dietterich\u2019s taxi domain, showing how state abstraction and hierarchical optimality result in faster learning of better policies and enable the transfer of learned skills from one problem to another.", "num_citations": "326\n", "authors": ["1695"]}
{"title": "Automated design of both the topology and sizing of analog electrical circuits using genetic programming\n", "abstract": " This paper describes an automated process for designing analog electrical circuits based on the principles of natural selection, sexual recombination, and developmental biology. The design process starts with the random creation of a large population of program trees composed of circuit-constructing functions. Each program tree specifies the steps by which a fully developed circuit is to be progressively developed from a common embryonic circuit appropriate for the type of circuit that the user wishes to design. The fitness measure is a user-written computer program that may incorporate any calculable characteristic or combination of characteristics of the circuit. The population of program trees is genetically bred over a series of many generations using genetic programming. Genetic programming is driven by a fitness measure and employs genetic operations such as Darwinian reproduction, sexual\u00a0\u2026", "num_citations": "326\n", "authors": ["1695"]}
{"title": "Generating categorical depth maps using passive defocus sensing\n", "abstract": " A method is disclosed for generating a categorical depth map of a scene using passive defocus sensing. In a preferred embodiment three synchronized CCD cameras focused at different distances detect three images of the same scene. An image processor partitions the images into an array of regions and calculates a sharpness value for each region. The sharpness value for a region is calculated by summing over all pixels (x, y) in the region the absolute difference in the intensity value of a pixel (x, y)(with pixel (xk, yl), where k and l are constants. The image processor then constructs a depth map of the scene by determining for each region the image with the greatest sharpness in that region. An application of the invention to a mobile robot control system is described in detail. Among other applications, the method may be used for collision avoidance, object detection, and speed measurement.", "num_citations": "302\n", "authors": ["1695"]}
{"title": "Method and apparatus for long-range planning\n", "abstract": " A method and apparatus for long-range planning. One embodiment includes a method for long-range planning for staffing in a complex environment, such as a contact center. The method includes defining at least one employee profile, wherein an employee profile comprises a group of employees that have the same skills, and wherein defining comprises specifying characteristics, including a skill set and an efficiency percentage. The method further includes defining at least one queue, specifying at least one criteria to be satisfied by a long-range staffing plan, and calculating an effect of staffing the at least one queue with the at least one employee profile, wherein the calculated effect includes a service level for the at least one queue, and an effective cost per hour.", "num_citations": "248\n", "authors": ["1695"]}
{"title": "Method and apparatus for automated design of complex structures using genetic programming\n", "abstract": " An automated design process and apparatus for use in designing complex structures, such as circuits, to satisfy prespecified design goals, using genetic operations. The present invention uses a population of entities which may be evolved to generate structures that may potentially satisfy the design goals. The behavior of such generated structures is evaluated in view of the design goals, and those structures more closely meeting the design goals are evolved further until a structure is generated that either meets the prespecified design goal or some other process completion criteria. In this manner, a design complex structure may be obtained.", "num_citations": "200\n", "authors": ["1695"]}
{"title": "Discovery by genetic programming of a cellular automata rule that is better than any known rule for the majority classification problem\n", "abstract": " It is difficult to program cellular automata. This is especially true when the desired computation requires global communication and global integration of information across great distances in the cellular space. Various human-written algorithms have appeared in the past two decades for the vexatious majority classification task for one-dimensional two-state cellular automata. This paper describes how genetic programming with automatically defined functions evolved a rule for this task with an accuracy of 82.326%. This level of accuracy exceeds that of the original 1978 Gacs-Kurdyumov-Levin (GKL) rule, all other known human-written rules, and all other known rules produced by automated methods. The rule evolved by genetic programming is qualitatively different from all previous rules in that it employs a larger and more intricate repertoire of domains and particles to represent and communicate information across the cellular space.", "num_citations": "191\n", "authors": ["1695"]}
{"title": "Parallel Genetic Programming\n", "abstract": " This chapter contains sections titled: Introduction, Selection of Machinery to Implement Parallel Genetic Programming, Implementation of Parallel Genetic Programming Using A Network of Transputers, Comparison of Computational Effort for Different Migration Rates, Increasing Performance: The PowerPC in the Transputer Architecture, Conclusions", "num_citations": "186\n", "authors": ["1695"]}
{"title": "Automated WYWIWYG design of both the topology and component values of electrical circuits using genetic programming\n", "abstract": " This paper describes an automated process for designing electrical circuits in which\" What You Want Is What You Get\"(\" WYWIWYG\"\u2013pronounced\" wow-eee-wig\"). The design process uses genetic programming to produce both the topology of the desired circuit and the sizing (numerical values) for all the components of a circuit. Genetic programming successfully evolves both the topology and the sizing for an asymmetric bandpass filter that was described as being difficult-to-design in a leading electrical engineering journal. This evolved circuit is another instance in which a genetically evolved solution to a non-trivial problem is competitive with human performance.", "num_citations": "167\n", "authors": ["1695"]}
{"title": "Programmable reinforcement learning agents\n", "abstract": " We present an expressive agent design language for reinforcement learning that allows the user to constrain the policies considered by the learning process by partially specifying a program for the agent. The language includes standard programmatic features such as parameterized subroutines, temporary interrupts, aborts, and memory variables, and allows for the partial specification of complex agent programs. For learning that which isn\u2019t specified, we present provably convergent learning algorithms. We demonstrate that agent programs written in the language are concise as well as modular, which is important to facilitate state abstraction and the transferability of learned skills.", "num_citations": "146\n", "authors": ["1695"]}
{"title": "Evolving team darwin united\n", "abstract": " The RoboCup simulator competition is one of the most challenging international proving grounds for contemporary AI research. Exactly because of the high level of complexity and a lack of reliable strategic guidelines, the pervasive attitude has been that the problem can most successfully be attacked by human expertise, possibly assisted by some level of machine learning. This led, in RoboCup\u201997, to a field of simulator teams all of whose level and style of play were heavily influenced by the human designers of those teams. In contrast, our 1998 team was \u201cdesigned\u201d entirely by the process of genetic programming. Our evolved team placed in the middle of the pack at Robocup98, despite the fact that it was largely machine learned rather than hand coded. This paper presents our motivation, our approach, and the specific construction of our team that created itself from scratch.", "num_citations": "145\n", "authors": ["1695"]}
{"title": "Simultaneous evolution of the architecture of a multi-part program while solving a problem using architecture altering operations\n", "abstract": " An apparatus and method for solving problems where a population is created and evolved to generate a result. While solving the problem, the architecture of entities in the population are altered. Each of said entities may include internally and externally invoked sub-entities. The externally invoked sub-entities are capable of having actions, invocations of sub-entities which are invoked internally, and material. Also, each sub-entity which is invoked internally is capable of including actions, invocations of internally invocable sub-entities, material provided to the externally invocable sub-entity, and material.", "num_citations": "142\n", "authors": ["1695"]}
{"title": "The mitochondrial ornithine transporter: bacterial expression, reconstitution, functional characterization, and tissue distribution of two human isoforms\n", "abstract": " Two isoforms of the human ornithine carrier, ORC1 and ORC2, have been identified by overexpression of the proteins in bacteria and by study of the transport properties of the purified proteins reconstituted into liposomes. Both transport l-isomers of ornithine, lysine, arginine, and citrulline by exchange and by unidirectional mechanisms, and they are inactivated by the same inhibitors. ORC2 has a broader specificity than ORC1, and l- and d-histidine, l-homoarginine, and d-isomers of ornithine, lysine, and ornithine are all substrates. Both proteins are expressed in a wide range of human tissues, but ORC1 is the predominant form. The highest levels of expression of both isoforms are in the liver. Five mutant forms of ORC1 associated with the human disease hyperornithinemia-hyperammonemia-homocitrullinuria were also made. The mutations abolish the transport properties of the protein. In patients with\u00a0\u2026", "num_citations": "130\n", "authors": ["1695"]}
{"title": "Generalized prioritized sweeping\n", "abstract": " Prioritized sweeping is a model-based reinforcement learning method that attempts to focus an agent's limited computational resources to achieve a good estimate of the value of environment states. To choose effectively where to spend a costly planning step, classic prioritized sweeping uses a simple heuristic to focus computation on the states that are likely to have the largest errors. In this paper, we introduce generalized prioritized sweeping, a principled method for generating such estimates in a representation-specific manner. This allows us to extend prioritized sweeping beyond an explicit, state-based representation to deal with compact representations that are necessary for dealing with large state spaces. We apply this method for generalized model approximators (such as Bayesian networks), and describe preliminary experiments that compare our approach with classical prioritized sweeping.", "num_citations": "108\n", "authors": ["1695"]}
{"title": "Parallel genetic programming on a network of transputers\n", "abstract": " This report describes the parallel implementation of genetic programming in the C programming language using a PC 486 type computer (running Windows) acting as a host and a network of transputers acting as processing nodes. Using this approach, researchers of genetic algorithms and genetic programming can acquire computing power that is intermediate between the power of currently-available workstations and that of supercomputers at a cost that is intermediate between the two.A comparison is made of the computational effort required to solve the problem of symbolic regression of the Boolean even-S-parity function with different migration rates. Genetic programming required the least computational effort with an 8% migration rate. Moreover, this computational effort was less than that required for solving the problem with a serial computer and a panmictic population of the same size. That is, apart from the nearly linear speed-up in executing a fixed amount of code inherent in the parallel implementation of genetic programming, parallelization delivered more than linear speed-up in solving the problem using genetic programming.", "num_citations": "104\n", "authors": ["1695"]}
{"title": "Genetic programming as a Darwinian invention machine\n", "abstract": " Genetic programming is known to be capable of creating designs that satisfy prespecified high-level design requirements for analog electrical circuits and other complex structures. However, in the real world, it is often important that a design satisfy various non-technical requirements. One such requirement is that a design not possess the key characteristics of any previously known design. This paper shows that genetic programming can be used to generate novel solutions to a design problem so that genetic programming may be potentially used as an invention machine. This paper turns the clock back to the period just before the time (1917) when George Campbell of American Telephone and Telegraph invented and patented the design for an electrical circuit that is now known as the ladder filter. Genetic programming is used to reinvent the Campbell filter. The paper then turns the clock back to the\u00a0\u2026", "num_citations": "103\n", "authors": ["1695"]}
{"title": "A parallel implementation of genetic programming that achieves super-linear performance\n", "abstract": " This paper describes the successful parallel implementation of genetic programming on a network of processing nodes using the transputer architecture. With this approach, researchers of genetic algorithms and genetic programming can acquire computing power that is intermediate between the power of currently available workstations and that of supercomputers at intermediate cost. This approach is illustrated by a comparison of the computational effort required to solve a benchmark problem. Because of the decoupled character of genetic programming, our approach achieved a nearly linear speed up from parallelization. In addition, for the best choice of parameters tested, the use of subpopulations delivered a super-linear speed-up in terms of the ability of the algorithm to solve the problem. Several examples are also presented where the parallel genetic programming system evolved solutions that are\u00a0\u2026", "num_citations": "98\n", "authors": ["1695"]}
{"title": "Use of automatically defined functions and architecture-altering operations in automated circuit synthesis with genetic programming\n", "abstract": " This paper demonstrates the usefulness of automatically defined functions and architecture-altering operations in designing analog electrical circuits using genetic programming. A design for a lowpass filter is genetically evolved in which an automatically defined function is profitably reused in the 100% compliant circuit. The symmetric reuse of an evolved substructure directly enhances the performance of the circuit. Genetic programming rediscovered the classical ladder topology used in Butterworth and Chebychev filters as well as the more complex topology used in Cauer (elliptic) filters.", "num_citations": "97\n", "authors": ["1695"]}
{"title": "Automatically defined features: The simultaneous evolution of 2-dimensional feature detectors and an algorithm for using them\n", "abstract": " Although automatically defined functions (ADFcts) with genetic programming (GP) appear to have great utility in a wide variety of domains, their application to the automatic discovery of 2-dimensional features has been only moderately successful [Koza 1993]. Boolean functions of pixel inputs, although very general, may not be the best representation for 2-dimensional features. This chapter describes a method for the simultaneous evolution of 2-dimensional hitmiss matrices and an algorithm to use these matrices in pattern recognition. Hit-miss matrices are templates that can be moved over part of an input pattern to check for a'match'. These matrices are evolved using a 2-dimensional genetic algorithm, while the algorithms controlling the templates are evolved using GP. The approach is applied to the problem of digit recognition, and is found to be successful at discovering individuals which can recognize very low resolution digits. Possibilities for expansion into a full-size character recognition system are discussed.", "num_citations": "97\n", "authors": ["1695"]}
{"title": "Four problems for which a computer program evolved by genetic programming is competitive with human performance\n", "abstract": " It would be desirable if computers could solve problems without the need for humans to write the detailed programmatic steps. That is, it would be desirable to have a domain independent automatic programming technique in which \"What You Want Is What You Get\" (WYWIWYG). Genetic programming is such a technique. This paper surveys three examples of problems (from the fields of cellular automata and molecular biology) in which genetic programming evolved a computer program that produced results that were slightly better than human performance for the same problem. This paper then discusses the problem of electronic circuit synthesis in greater detail. It shows how genetic programming can evolve both the topology of a desired electrical circuit and the sizing (numerical values) for each component in a crossover (woofer and tweeter) filter. Genetic programming has also evolved the design for a lowpass\u00a0\u2026", "num_citations": "94\n", "authors": ["1695"]}
{"title": "Simultaneous evolution of the architecture of a multi-part program to solve a problem using architecture altering operations\n", "abstract": " An apparatus and method for solving problems where a population is created and evolved to generate a result. While solving the problem, the architecture of entities in the population are altered. Each of said entities may include internally and externally invoked sub-entities. The externally invoked sub-entities are capable of having actions, invocations of sub-entities which are invoked internally, and material. Also, each sub-entity which is invoked internally is capable of including actions, invocations of internally invocable sub-entities, material provided to the externally invocable sub-entity, and material.", "num_citations": "90\n", "authors": ["1695"]}
{"title": "Agent scheduling system and method having improved post-processing step\n", "abstract": " A method for improving an agent schedule comprises unscheduling an agent from a shift in the schedule; evaluating a score function for each of a plurality of possible schedules which have the agent scheduled for different possible shifts; and selecting an improved schedule from among the plurality of possible schedules. The improved schedule is characterized by an improved value of the score function. The above steps are repeated until a locally optimal schedule is obtained. The break times in the possible shifts are not necessarily scheduled in the above procedure. In another aspect of the invention, a method is provided for optimal break scheduling. The method includes the steps of unscheduling a break; evaluating a score function for a plurality of possible break times for the break; and selecting an improved break time from the possible break times. The improved break time is characterized by an improved\u00a0\u2026", "num_citations": "81\n", "authors": ["1695"]}
{"title": "Automatically choosing the number of fitness cases: The rational allocation of trials\n", "abstract": " For many problems to which genetic programming has been applied, choosing the number of tness cases with which to evaluate the individuals is a crucial decision. If too few tness cases are used, over tting may occur, and the measured tness of an individual may not be representative of its true tness. On the other hand, if too many tness cases are used, a great deal of computer time can be wasted. This paper presents a method for the Rational Allocation of Trials (RAT) that dynamically allocates a boundedly optimal number of tness cases for each individual. RAT allocates individuals to tournaments prior to their evaluation, and then, borrowing from previous work in model selection, allocates trials (tness cases) only to those individuals for whom the cost of evaluating another tness case is outweighed by the expected utility that the new information will provide. For most evolutionary computation approaches, including genetic programming, and for most problems, the RAT algorithm will provide signi cant time savings at minimal additional system complexity.", "num_citations": "75\n", "authors": ["1695"]}
{"title": "A study in program response and the negative effects of introns in genetic programming\n", "abstract": " The standard method of obtaining a response in tree-based genetic programming is to take the value returned by the root node. In non-tree representations, alternate methods have been explored. One alternative is to treat a specific location in indexed memory as the response value when the program terminates. The purpose of this paper is to explore the applicability of this technique to tree-structured programs and to explore the intron effects that these studies bring to light. This paper\u2019s experimental results support the finding that this memory-based program response technique is an improvement for some, but not all, problems. In addition, this paper\u2019s experimental results support the finding that, contrary to past research and speculation, the addition or even facilitation of introns can seriously degrade the search performance of genetic programming.", "num_citations": "74\n", "authors": ["1695"]}
{"title": "Evolution of intricate long-distance communication signals in cellular automata using genetic programming\n", "abstract": " A cellular automata rule for the majority classification task was evolved using genetic programming with automatically defined functions. The genetically evolved rule has an accuracy of 82.326%. This level of accuracy exceeds that of the Gacs-Kurdyumov-Levin (GKL) rule, all other known human-written rules, and all other rules produced by known previous automated approaches. Our genetically evolved rule is qualitatively different from other rules in that it utilizes a finegrained internal representation of density information; it employs a large number of different domains and particles; and it uses an intricate set of signals for communicating information over large distances in time and space.", "num_citations": "73\n", "authors": ["1695"]}
{"title": "Staff scheduling for inbound call and customer contact centers\n", "abstract": " The staff scheduling problem is a critical problem in the call center (or, more generally, customer contact center) industry. This article describes DIRECTOR, a staff scheduling system for contact centers. DIRECTOR is a constraint-based system that uses AI search techniques to generate schedules that satisfy and optimize a wide range of constraints and service-quality metrics. DIRECTOR has successfully been deployed at more than 800 contact centers, with significant measurable benefits, some of which are documented in case studies included in this article.", "num_citations": "65\n", "authors": ["1695"]}
{"title": "System and method for complex schedule generation\n", "abstract": " A system and method for generating a schedule for multiple employees in a complex environment. In one embodiment, the method includes generating a schedule for multiple employees with varying skill sets for a time period, wherein the plurality of employees have varying overlapping skill sets that enable them to perform various tasks, and wherein employees are shared across tasks within the time period. In one embodiment, the method includes receiving a plurality of user inputs to a scheduling program, including a number of employee designations that each refer to a unique employee, and a number of skill sets that each correspond to one of the employee designations. The method further includes receiving a user input that changes the number of employee designations by indicating at least one changed employee, and estimating an effect of the at least one changed employee on effective staffing levels for\u00a0\u2026", "num_citations": "63\n", "authors": ["1695"]}
{"title": "Automated synthesis of computational circuits using genetic programming\n", "abstract": " Analog electrical circuits that perform mathematical functions (e.g., cube root, square) are called computational circuits. Computational circuits are of special practical importance when the small number of required mathematical functions does not warrant converting an analog signal into a digital signal, performing the mathematical function in the digital domain, and then converting the result back to the analog domain. The design of computational circuits is difficult even for mundane mathematical functions and often relies on the clever exploitation of some aspect of the underlying device physics of the components. Moreover, implementation of each different mathematical function typically requires an entirely different clever insight. This paper demonstrates that computational circuits can be designed without such problem-specific insights using a single uniform approach involving genetic programming. Both the\u00a0\u2026", "num_citations": "61\n", "authors": ["1695"]}
{"title": "Genetic programming problem solver with automatically defined stores loops and recursions\n", "abstract": " The present invention is a genetic programming problem solver that automatically generates computer programs to solve problems. The genetic programming problem solver incorporates architecture-altering operations. In one embodiment, the genetic programming problem solver uses architecture-altering operations for automatically defined functions and loops, together with indexed memory, to generate the resulting computer programs. In a second embodiment, the genetic programming problem solver uses architecture-altering operations of automatically defined function, loops, recursions, and stores to generate the resulting computer programs.", "num_citations": "53\n", "authors": ["1695"]}
{"title": "Mobile robot obstacle avoidance via depth from focus\n", "abstract": " A critical challenge in the creation of autonomous mobile robots is the reliable detection of moving and static obstacles. In this paper, we present a passive vision system that recovers coarse depth information reliably and efficiently. This system is based on the concept of depth from focus, and robustly locates static and moving obstacles as well as stairs and dropoffs with adequate accuracy for obstacle avoidance. We describe an implementation of this vision system on a mobile robot as well as real-world experiments both indoors and outdoors. These experiments have involved several hours of continuous and fully autonomous operation in crowded, natural settings.", "num_citations": "53\n", "authors": ["1695"]}
{"title": "Evolution of a 60 decibel op amp using genetic programming\n", "abstract": " Genetic programming was used to evolve both the topology and sizing (numerical values) for each component of a low-distortion, low-bias 60 decibel (1000-to-1) amplifier with good frequency generalization.", "num_citations": "53\n", "authors": ["1695"]}
{"title": "Reuse, parameterized reuse, and hierarchical reuse of substructures in evolving electrical circuits using genetic programming\n", "abstract": " Most practical electrical circuits contain modular substructures that are repeatedly used to create the overall circuit. Genetic programming with automatically defined functions and the recently developed architecture-altering operations provides a way to build complex structures with reused substructures. In this paper, we successfully evolved a design for a two-band crossover (woofer and tweeter) filter with a crossover frequency of 2,512 Hz. Both the topology and the sizing (numerical values) for each component of the circuit were evolved during the run. The evolved circuit contained three different noteworthy substructures. One substructure was invoked five times thereby illustrating reuse. A second substructure was invoked with different numerical arguments. This second substructure illustrates parameterized reuse because different numerical values were assigned to the components in the different\u00a0\u2026", "num_citations": "50\n", "authors": ["1695"]}
{"title": "Learning and upgrading rules for an OCR system using genetic programming\n", "abstract": " Rule-based systems used for optical character recognition (OCR) are notoriously difficult to write, maintain, and upgrade. The paper describes a method for using genetic programming (GP) to evolve and upgrade rules for an OCR system. The language of the evolved programs was designed such that human hand-coded rules can be included into the initial population in order to upgrade for a new font. The system was successful at learning rules for large character sets consisting of multiple fonts and sizes, with very good generalization to test sets. In addition, the method was found to be successful at updating hand-coded rules written in C for new fonts. This research demonstrates the successful application of GP to a difficult, noisy, real-world problem.< >", "num_citations": "49\n", "authors": ["1695"]}
{"title": "Synthesis of topology and sizing of analog electrical circuits by means of genetic programming\n", "abstract": " The design (synthesis) of an analog electrical circuit entails the creation of both the topology and sizing (numerical values) of all of the circuit's components. There has previously been no general automated technique for automatically creating the design for an analog electrical circuit from a high-level statement of the circuit's desired behavior. This paper shows how genetic programming can be used to automate the design of eight prototypical analog circuits, including a lowpass filter, a highpass filter, a bandstop filter, a tri-state frequency discriminator circuit, a frequency-measuring circuit, a 60 dB amplifier, a computational circuit for the square root function, and a time-optimal robot controller circuit.", "num_citations": "48\n", "authors": ["1695"]}
{"title": "Evolution of mapmaking: Learning, planning, and memory using genetic programming\n", "abstract": " An essential component of an intelligent agent is the ability to observe, encode, and use information about its environment. Traditional approaches to genetic programming have focused on evolving functional or reactive programs with only a minimal use of state. This paper presents an approach for investigating the evolution of learning, planning, and memory using genetic programming. The approach uses a multi-phasic fitness environment that enforces the use of memory and allows fairly straightforward comprehension of the evolved representations. An illustrative problem of 'gold' collection is used to demonstrate the usefulness of the approach. The results indicate that the approach can evolve programs that store simple representations of their environments and use these representations to produce simple plans.< >", "num_citations": "44\n", "authors": ["1695"]}
{"title": "A Comparative Histological Study of the Tongue of Rat (Rattus Norvegicus), Bat (Eidolon Helvum) and Pangolin (Manis Tricuspis).\n", "abstract": " This study assessed the micro anatomical differences in the tongue of rat, bat and pangolin with a view to establishing the functional anatomical differences of these mammalian tongues on their dietary pattern. Ten rats, ten bats and ten pangolins were used for this study. The animals were sacrificed and the tongue excised and processed for light microscopical study adopting the following stains: Haematoxylin Eosin, Verhoeff Gieson and Masson trichrome. The results showed non papillation of the keratinized stratified epithelium of pangolin tongue unlike the papillation seen in the tongue of the rat and bat. While the filiform papillation seen in the rat was bristle like, the filiform papillae in the bat were crown-like. There was also an unusual dense collagenous ring in the proximal portion of the pangolin tongue which was absent in other mammals. There were taste buds along the lateral walls of the vallate papillae in the distal portion of the tongue of rats and bats but none was found in the pangolins. In conclusion, the morphology of the tongues of these mammals showed a relationship between their feeding pattern and the adaptive changes in the microanatomy of their tongue.", "num_citations": "43\n", "authors": ["1695"]}
{"title": "Automatic discovery of protein motifs using genetic programming\n", "abstract": " Automated methods of machine learning may prove to be useful in discovering biologically meaningful information hidden in the rapidly growing databases of DNA sequences and protein sequences. Genetic programming is an extension of the genetic algorithm in which a population of computer programs is bred, over a series of generations, in order to solve a problem. Genetic programming is capable of evolving complicated problem-solving expressions of unspecified size and shape. Moreover, when automatically defined functions are added to genetic programming, genetic programming becomes capable of efficiently capturing and exploiting recurring sub-pattems. This chapter describes how genetic programming with automatically defined functions successfully evolved motifs for detecting the D-E-A-D box family of proteins and for detecting the manganese superoxide dismutase family. Both motifs were\u00a0\u2026", "num_citations": "41\n", "authors": ["1695"]}
{"title": "Classifying protein segments as transmembrane domains using architecture-altering operations in genetic programming\n", "abstract": " The biological theory of gene duplication, concerning how new structures and new behaviors are created in living things, is brought to bear on the problem of automated architecture discovery in genetic programming. Using architecture-altering operations patterned after naturally-occurring gene duplication, genetic programming is used to evolve a computer program to classify a given protein segment as being a transmembrane domain or nontransmembrane area of the protein. The out-of-sample error rate for the best geneticallyevolved program achieved was slightly better than that of previously-reported human-written algorithms for this problem. This is an instance of an automated machine learning algorithm rivaling a human-written algorithm for a problem.", "num_citations": "39\n", "authors": ["1695"]}
{"title": "Evolving computer programs using rapidly reconfigurable field-programmable gate arrays and genetic programming\n", "abstract": " This paper describes how the massive parallelism of the rapidly reconfigurable Xilinx XC6216 FPGA (in conjunction with Virtual Computing's HOT Works board) can be exploited to accelerate the time-consuming fitness measurement task of genetic algorithms and genetic programming. This acceleration is accomplished by embodying each individual of the evolving population into hardware in order to perform the fitness measurement task. A 16-step sorting network for seven items was evolved that has two fewer steps than the sorting network described in the 1962 O'Connor and Nelson patent on sorting networks (and the same number of steps as a 7-sorter that was devised by Floyd and Knuth subsequent to the patent and that is now known to be minimal). Other minimal sorters have been evolved.", "num_citations": "38\n", "authors": ["1695"]}
{"title": "Toward evolution of electronic animals using genetic programming\n", "abstract": " This paper describes an automated process for designing an optimal food-foraging controller for a lizard. The controller consists of an analog electrical circuit that is evolved using the principles of natural selection, sexual recombination, and developmental biology. Genetic programming creates both the topology of the controller circuit and the numerical values for each electrical component.", "num_citations": "38\n", "authors": ["1695"]}
{"title": "Parallel genetic programming on a network of transputers\n", "abstract": " This paper describes the parallel implementation of genetic programming in the C programming language using a PC 486 type computer running Windows acting as a host and a network of transputers acting as processing nodes. Using this approach, researchers of genetic algorithms and genetic programming can acquire computing power that is intermediate between the power of currently available workstations and that of supercomputers at a cost that is intermediate between the two. A comparison is made of the computational effort required to solve the problem of symbolic regression of the Boolean even-5-parity function with different migration rates. Genetic programming required the least computational effort with migration rate at 5%; however, there was little difference in performance for migration rates between 1% and 8%. Moreover, this computational effort required for these migration rates was less than that required for solving the problem with a serial computer and a panmictic population of the same size. That is, apart from the nearly linear speed-up in executing a fixed amount of code inherent in the parallel implementation of genetic programming, parallelization delivered more than linear speed-up in solving the problem using genetic programming.", "num_citations": "38\n", "authors": ["1695"]}
{"title": "Programmable reinforcement learning agents\n", "abstract": " This dissertation examines the use of partial programming as a means of designing agents for large Markov Decision Problems. In this approach, a programmer specifies only that which they know to be correct and the system then learns the rest from experience using reinforcement learning.", "num_citations": "37\n", "authors": ["1695"]}
{"title": "The evolution of agents that build mental models and create simple plans using genetic programming\n", "abstract": " The Evolution of Agents that Build Mental Models and Create Simple Plans Using Genetic Programming | Proceedings of the 6th International Conference on Genetic Algorithms ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleProceedingsProceedings of the 6th International Conference on Genetic AlgorithmsThe Evolution of Agents that Build Mental Models and Create Simple Plans Using Genetic Programming Article The Evolution of Agents that Build Mental Models and Create Simple Plans Using Genetic Programming Share on Author: David L Andre profile image David Andre View Profile Authors Info & Affiliations Publication: \u2026", "num_citations": "34\n", "authors": ["1695"]}
{"title": "Discovery of molecular markers to discriminate corneal endothelial cells in the human body\n", "abstract": " The corneal endothelium is a monolayer of hexagonal corneal endothelial cells (CECs) on the inner surface of the cornea. CECs are critical in maintaining corneal transparency through their barrier and pump functions. CECs in vivo have a limited capacity in proliferation, and loss of a significant number of CECs results in corneal edema called bullous keratopathy which can lead to severe visual loss. Corneal transplantation is the most effective method to treat corneal endothelial dysfunction, where it suffers from donor shortage. Therefore, regeneration of CECs from other cell types attracts increasing interests, and specific markers of CECs are crucial to identify actual CECs. However, the currently used markers are far from satisfactory because of their non-specific expression in other cell types. Here, we explored molecular markers to discriminate CECs from other cell types in the human body by integrating the published RNA-seq data of CECs and the FANTOM5 atlas representing diverse range of cell types based on expression patterns. We identified five genes, CLRN1, MRGPRX3, HTR1D, GRIP1 and ZP4 as novel markers of CECs, and the specificities of these genes were successfully confirmed by independent experiments at both the RNA and protein levels. Notably none of them have been documented in the context of CEC function. These markers could be useful for the purification of actual CECs, and also available for the evaluation of the products derived from other cell types. Our results demonstrate an effective approach to identify molecular markers for CECs and open the door for the regeneration of CECs in vitro.", "num_citations": "33\n", "authors": ["1695"]}
{"title": "Health. Care. Anywhere. Today\n", "abstract": " What if clinical quality medical equipment were available to every consumer in a form factor that was inexpensive, accurate, and easy to use? What if this equipment provided information that previously was un-measurable or very difficult to measure? What if the physiological state of individuals, at resolutions measured in thousandths of a second instead of in visits per year, could be measured easily, making it possible to ascertain caloric intake and expenditure, patterns of sleep, contextual activities such as working-out and driving, even parameters of mental state and health. What aspect of healthcare wouldn\u2019t change? We present a system that is available today that enables this vision. This award-wining multi-channel wearable physiological monitor has enabled the collection of more than 90 million minutes of data in natural settings from thousands of subjects engaged in diverse activities. Data modeling efforts are resulting in applications that present meaningful and actionable information in real-time to users and their designated collaborators (physicians, family members, counselors, coaches, etc.) We describe the SenseWear system, its design, and a summary of validation studies, current commercial applications, and ongoing research. This discussion will show how the convergence of design for wearability, advances in machine learning, and improvements in wireless technology will manifest the future of health care as personal, ubiquitous, and collaborative.", "num_citations": "33\n", "authors": ["1695"]}
{"title": "Evolving sorting networks using genetic programming and the rapidly reconfigurable xilinx 6216 field-programmable gate array\n", "abstract": " This paper describes how the massive parallelism of the rapidly reconfigurable Xilinx XC6216 FPCA (in conjunction with Virtual Computing Corporation's HOT Works board) can be exploited to accelerate the computationally burdensome fitness measurement task of genetic algorithms and genetic programming. This acceleration is accomplished by embodying each individual of the evolving population into hardware in order to perform this time-consuming fitness measurement task. A 16-step sorting network for seven items was evolved that has two fewer steps than the sorting network described in the 1962 O'Connor and Nelson patent on sorting networks (and the same number of steps as a 7-sorter that was devised by Floyd and Knuth (1973) subsequent to the patent and that is now known to be minimal).", "num_citations": "33\n", "authors": ["1695"]}
{"title": "Evolution of Iteration in Genetic Programming.\n", "abstract": " The solution to many problems requires, or is facilitated by, the use of iteration. Moreover, because iterative steps are repeatedly executed, they must have some degree of generality.An automatic programming system should require that the user make as few problemspecific decisions as possible concerning the size, shape, and character of the ultimate solution to the problem. Work first presented at the Fourth Annual Conference on Evolutionary Programming in 1995 (EP-95) demonstrated that six then-new architecture-altering operations made it possible to automate the decision about the architecture of an overall program dynamically during a run of genetic programming. The question arises as to whether it is also possible to automate the decision about whether to employ iteration, how much iteration to employ, and the particular sequence of iterative steps. This paper introduces the new operation of restricted iteration creation that automatically creates a restricted iteration-performing branch out of a portion of an existing computer program during a run a genetic programming. Genetic programming with the new operation is then used (in conjunction with the other architecture-altering operations first presented at EP-95) to evolve a computer program to solve a non-trivial problem.", "num_citations": "32\n", "authors": ["1695"]}
{"title": "Genetic programming: Biologically inspired computation that creatively solves non-trivial problems\n", "abstract": " This paper describes a biologically inspired domain-independent technique, called genetic programming, that automatically creates computer programs to solve problems. Starting with a primordial ooze of thousands of randomly created computer programs, genetic programming progressively breeds a population of computer programs over a series of generations using the Darwinian principle of natural selection, recombination (crossover), mutation, gene duplication, gene deletion, and certain mechanisms of developmental biology. The technique is illustrated by its application to a non-trivial problem involving the automatic synthesis (design) of a lowpass filter circuit. The evolved results are competitive with human-produced solutions to the problem. In fact, four of the automatically created circuits exhibit human-level creativity and inventiveness, as evidenced by the fact that they correspond to four\u00a0\u2026", "num_citations": "31\n", "authors": ["1695"]}
{"title": "Evolution using genetic programming of a low-distortion, 96 decibel operational amplifier\n", "abstract": " There is no known general technique for automatically designing an analog electrical circuit that satisfies design specifications. Genetic programming was used to evolve both the topology and the sizing (numerical values) for each component of a low-distortion 96 decibel (64,860-to-l) amplifier circuit.", "num_citations": "31\n", "authors": ["1695"]}
{"title": "Evolutionary design of analog electrical circuits using genetic programming\n", "abstract": " The design (synthesis) of analog electrical circuits entails the creation of both the topology and sizing (numerical values) of all of the circuit\u2019s components. There has previously been no general automated technique for automatically designing an analog electrical circuit from a high-level statement of the circuit\u2019s desired behavior. This paper shows how genetic programming can be used to automate the design of both the topology and sizing of a suite of five prototypical analog circuits, including a lowpass filter, a tri-state frequency discriminator circuit, a 60 dB amplifier, a computational circuit for the square root, and a time-optimal robot controller circuit. All five of these genetically evolved circuits constitute instances of an evolutionary computation technique solving a problem that is usually thought to require human intelligence.", "num_citations": "30\n", "authors": ["1695"]}
{"title": "Design of a high-gain operational amplifier and other circuits by means of genetic programming\n", "abstract": " This paper demonstrates that a design for a low-distortion high-gain 96 decibel (64,860 -to-1) operational amplifier (including both circuit topology and component sizing) can be evolved using genetic programming.", "num_citations": "29\n", "authors": ["1695"]}
{"title": "The design of analog circuits by means of genetic programming\n", "abstract": " The design process entails creation of a complex structure to satisfy user-defined requirements. The design of analog electrical circuits is particularly challenging because it is generally viewed as requiring human intelligence and because it is a major activity of practicing analog electrical engineers. The design process for analog circuits begins with a high-level description of the circuit's desired behavior and entails creation of both the topology and the sizing of a satisfactory circuit. The topology comprises the gross number of components in the circuit, the type of each component (eg, a resistor), and a list of all connections between the components. The sizing involves specifying the values (typically numerical) of each of the circuit's components.Considerable progress has been made in automating the design of certain categories of purely digital circuits; however, the design of analog circuits and mixed analog-digital circuits has not proved as amenable to automation (Rutenbar 1993). Describing\" the analog dilemma,\" Aaserud and Nielsen (1995) noted", "num_citations": "28\n", "authors": ["1695"]}
{"title": "Clastic pipe characteristics and distributions throughout the Colorado Plateau: implications for paleoenvironment and paleoseismic controls\n", "abstract": " Clastic pipes occur throughout much of the Phanerozoic strata of the Colorado Plateau and provide a unique opportunity to test the validly of various deformation and triggering mechanism hypotheses in the context of their tectono-stratigraphic and paleoenvironmental settings. Pipes dominantly occur in Jurassic strata and preferentially in eolian (especially interdune), sabkha, and fluvial deposits because these sediments contained interbedded fine-grained and water-saturated, high-porosity, coarse-grained facies. The greatest geographic concentrations of pipes occur in three trends: (1) a northeast trend from the Lake Powell to Moab areas of southern and southeastern Utah, (2) an east\u2013west trend in northern Arizona within and north of the Grand Canyon, and (3) a west-northwest\u2013east-southeast trend along Interstate 40 west of Albuquerque, New Mexico. Many pipes formed due to liquefaction and fluidization\u00a0\u2026", "num_citations": "26\n", "authors": ["1695"]}
{"title": "Influence of the morphology and of the composition of chromium oxides on their catalytic activity for the gas phase fluorination of 1, 1, 1-trifluoro-2-chloro-ethane\u00a0\u2026\n", "abstract": " The morphology and the oxygen content of chromium oxides used in the fluorination of CF3CH2Cl are important parameters for their catalytic activity. The oxides constituted by polyhedral particles and particles in platelet shape have a catalytic activity per surface unit greater than the chromium oxides constituted by spheric and by needle particles. An excess of oxygen compared to CrO1.5 is necessary to obtain the highest intrinsic catalytic activity but the amount of the excess seems not to be important. Chromium oxides (CrO1.7 and CrO1.9) which have not the same oxygen excess have the same intrinsic catalytic activity.", "num_citations": "24\n", "authors": ["1695"]}
{"title": "Representations for learning control policies\n", "abstract": " Representing the expected reward or cost for taking an action in a stochastic control problem, such as automated driving, is not trivial when the state and action spaces are continuous.", "num_citations": "22\n", "authors": ["1695"]}
{"title": "Obstacle avoidance via depth from focus\n", "abstract": " A critical challenge in the creation of autonomous mobile robots is the reliable detection of moving and static obstacles. In this paper, we present a passive vision system that recovers coarse depth information reliably and efficiently. This system is based on the concept of depth from focus, and robustly locates static and moving obstacles as well as stairs and dropoffs with adequate accuracy for navigation. We describe an implementation of this vision system on a mobile robot as well as real-world experiments both indoors and outdoors. These experiments have involved several hours of continuous and fully autonomous operation in crowded, natural settings.", "num_citations": "21\n", "authors": ["1695"]}
{"title": "A compact, hierarchically optimal Q-function decomposition\n", "abstract": " Previous work in hierarchical reinforcement learning has faced a dilemma: either ignore the values of different possible exit states from a subroutine, thereby risking suboptimal behavior, or represent those values explicitly thereby incurring a possibly large representation cost because exit values refer to nonlocal aspects of the world (ie, all subsequent rewards). This paper shows that, in many cases, one can avoid both of these problems. The solution is based on recursively decomposing the exit value function in terms of Q-functions at higher levels of the hierarchy. This leads to an intuitively appealing runtime architecture in which a parent subroutine passes to its child a value function on the exit states and the child reasons about how its choices affect the exit value. We also identify structural conditions on the value function and transition distributions that allow much more concise representations of exit state\u00a0\u2026", "num_citations": "19\n", "authors": ["1695"]}
{"title": "The automatic programming of agents that learn mental models and create simple plans of action\n", "abstract": " An essential component of an intelligent agent is the ability to notice, encode, store, and utilize information about its environment. Traditional approaches to program induction have focused on evolving functional or reactive programs. This paper presents MAPMAKER, an approach to the automatic generation of agents that discover information about their environment, encode this information for later use, and create simple plans utilizing the stored mental models. In this approach, agents are multi-part computer programs that communicate through a shared memory. Both the programs and the representation scheme are evolved using genetic programming. An illustrative problem of'gold'collection is used to demonstrate the approach in which one part of a program makes a map of the world and stores it in memory, and the other part uses this map to find the gold The results indicate that the approach can evolve programs that store simple representations of their environments and use these representations to produce simple plans.", "num_citations": "18\n", "authors": ["1695"]}
{"title": "GPU computing\n", "abstract": " \" Parallelism is the future of computing\" Characteristics of an application that can be successfully mapped onto a GPU:", "num_citations": "17\n", "authors": ["1695"]}
{"title": "Practical reinforcement learning in continuous domains\n", "abstract": " this paper, we propose a practical architecture for model-based reinforcement learning in continuous state and action spaces that avoids the above difficulties by using an instance-based modeling technique. We present a method for learning and maintaining a value function estimate using instancebased learners, and show that our method compares favorably to other function approximation methods, such as neural networks. Furthermore, our reinforcement learning algorithm learns an explicit model of the environment simultaneously with a value function and policy. The use of a model is beneficial, first, because it allows the agent to make better use of its experiences through simulated planning steps. Second, the use of a model makes it straightforward to provide prior information to the system in the form of the structure of the environmental model. We extend a technique called generalized prioritized sweeping to the continuous case in order to focus the agent's planning steps on those states where the current value is most likely to be incorrect. We illustrate our algorithm's effectiveness with results on several control domains.", "num_citations": "17\n", "authors": ["1695"]}
{"title": "On the theory of designing circuits using genetic programming and a minimum of domain knowledge\n", "abstract": " The problem of analog circuit design is a difficult problem that is generally viewed as requiring human intelligence to solve. Considerable progress has been made in automating the design of certain categories of purely digital circuits; however, the design of analog electrical circuits and mixed analog-digital circuits has not proved to be as amenable to automation. When critical analog circuits are required for a project, skilled and highly trained experts are necessary. Previous work on applying genetic programming to the design of analog circuits has proved to be successful at evolving a wide variety of circuits, including filters, amplifiers and computational circuits; however, these previous approaches have required the specification of an appropriate embryonic circuit. This paper explores a method to eliminate even this small amount of problem-specific knowledge, and, in addition, proves that the representation\u00a0\u2026", "num_citations": "17\n", "authors": ["1695"]}
{"title": "Rapidly reconfigurable fieldprogrammable gate arrays for accelerating fitness evaluation in genetic programming\n", "abstract": " The dominant component of the computational burden of solving non-trivial problems with evolutionary algorithms is the task of measuring the fitness of each individual in each generation of the evolving population. The advent of rapidly reconfigurable fieldprogrammable gate arrays (FPGAs) and the idea of evolvable hardware opens the possiblity of embodying each individual of the evolving population into hardware for the purpose of accelerating the timeconsuming fitness evaluation task This paper demonstrates how the massive parallelism of the rapidly reconfigurable Xilinx XC6216 FPGA can be exploited to accelerate the computationally burdensome fitness evaluation task of genetic programming. The work was done on Virtual Computing Corporation's low-cost HOTS expansion board for PC type computers. A 16-step 7-sorter was evolved that has two fewer steps than the sorting network described in the 1962 O'Connor and Nelson patent on sorting networks and that has the same number of steps as the minimal 7-sorter that was devised by Floyd and Knuth subsequent to the patent.", "num_citations": "17\n", "authors": ["1695"]}
{"title": "Use of architecture-altering operations to dynamically adapt a three-way analog source identification circuit to accommodate a new source\n", "abstract": " The problem of source identification involves correctly classifying an incoming signal into a category that identifies the signal's source. The problem is difficult because information is not provided concerning each source's distinguishing characteristics and because successive signals from the same source differ. The source identification problem can be made more difficult by dynamically changing the repertoire of sources while the problem is being solved. We used genetic programming to evolve both the topology and the sizing (numerical values) for each component of an analog electrical circuit that can correctly classify an incoming analog electrical signal into three categories. Then, the repertoire of sources was dynamically changed by adding a new source during the run. The paper describes how the architecture-altering operations enabled genetic programming to adapt, during the run, to the changed environment. Specifically, a three-way source identification circuit was evolved and then adapted into a four-way classifier, during the run, thereby successfully handling the additional new source.", "num_citations": "17\n", "authors": ["1695"]}
{"title": "A case for redundant arrays of inexpensive disks (RAID)\n", "abstract": " Abstract 1ncreasing performance of CPUs and memories will be squandered if nor matched by a similar performance increase in I/O. While the capacity of Single Large Expensive Disk (SLED) has grown rapidiy, the performance improvement of SLED has been modest. Redundant Arrays af Inexpensive Disks (RAID), based on the magnetic disk technology developed for personal computers, offers an attractive alternative to SLED, promising improvements of an order of magnitude in performance, reliability, power consumption, and scalability. This paper introduces five levels of RAIDs, giving their relative costperformance, and compares RAIDs to an iBM3380 and a Fujitsu Super Eagle.", "num_citations": "17\n", "authors": ["1695"]}
{"title": "Automatic design of analog electrical circuits using genetic programming\n", "abstract": " The design (synthesis) of analog electrical circuits entails the creation of both the topology and sizing (numerical values) of all of the circuit's components. There has previously been no general automated technique for automatically designing an analog electrical circuit from a high-level statement of the circuit's desired behavior. This chapter introduces genetic programming and shows how it can be used to automate the design of both the topology and sizing of a suite of five prototypical analog circuits, including a lowpass filter, a tri-state frequency discriminator circuit, a 60 dB amplifier, a computational circuit for the square root, and a time-optimal robot controller circuit.The problem-specific information required for each of the eight problems is minimal and consists primarily of the number of inputs and outputs of the desired circuit, the types of available components, and a fitness measure that restates the high-level statement of the circuit's desired behavior as a measurable mathematical quantity. All five of these genetically evolved circuits constitute instances of an evolutionary computation technique solving a problem that is usually thought to require human intelligence.", "num_citations": "16\n", "authors": ["1695"]}
{"title": "Evolution of a low-distortion, low-bias 60 decibel op amp with good frequency generalization using genetic programming\n", "abstract": " Genetic programming was used to evolve both the topology and the sizing (numerical values) for each component of a low-distortion, lowbias 60 decibel (1000-to-1) amplifier circuit with good frequency generalization. The evolved circuit was composed of two types of transistors (active elements) as well as resistors and capacitors.", "num_citations": "16\n", "authors": ["1695"]}
{"title": "Real-time reinforcement learning in continuous domains\n", "abstract": " RL in continuous domains The reinforcement learning framework that we assume in this paper is the standard Markov Decision Process (MDP) setup for reinforcement learning (Kaelbling & Moore 1996). We assume that at each point in time the environment is in some state s. At each step, the agent selects an action a, which causes the agent to transition to some new state t. Furthermore, the agent can receive some reward r (s) that depends only on the state s and not on the past. We assume that the system is Markovian; ie that the probability p (s'| s, a) of reaching state s' from state s by executing a does not depend on how the system arrived at state s. In this setting, the agent's objective is to maximize its expected discounted accumulated reward.In reinforcement learning, the optimal mapping from states to optimal behavior (policy) is determined entirely by the expected long-term return from each state, which is called its value. Optimal decisions can be made in RL by learning the value of each state. The", "num_citations": "15\n", "authors": ["1695"]}
{"title": "Evolving sorting networks using genetic programming and rapidly reconfigurable field-programmable gate arrays\n", "abstract": " This paper describes ongoing work involving the use of the Xilinx XC6216 rapidly reconfigurable field-programmable gate array to evolve sorting networks using genetic programming. We successfully evolved a network for sorting seven items that employs two fewer steps than the sorting network described in a l962 patent and that has the same number of steps as the sevensorter devised by Floyd and Knuth subsequent to the patent.", "num_citations": "15\n", "authors": ["1695"]}
{"title": "Evolution of a time-optimal fly-to controller circuit using genetic programming\n", "abstract": " Most problem-solving techniques used by engineers involve the introduction of analytical and mathematical representations and techniques that are entirely foreign to the problem at hand. Genetic programming offers the possibility of solving problems in a more direct way using the given ingredients of the problem. This idea is explored by considering the problem of designing an electrical controller to implement a solution to the timeoptimal fly-to control problem.", "num_citations": "14\n", "authors": ["1695"]}
{"title": "Genetic programming: Biologically inspired computation that exhibits creativity in solving non-trivial problems\n", "abstract": " This paper describes a biologically inspired domain-independent technique, called genetic programming, that automatically creates computer programs to solve problems. We argue that the field of design is a useful testbed for determining whether an automated technique can produce results that are competitive with human-produced results. We present several results that are competitive with the products of human creativity and inventiveness. This claim is supported by the fact that each of the results infringe on previously issued patents. This paper presents a candidate set of criteria that identify when a machine-created solution to a problem is competitive with a human-produced result.", "num_citations": "12\n", "authors": ["1695"]}
{"title": "Genetic programming: Turing\u2019s third way to achieve machine intelligence\n", "abstract": " One of the central challenges of computer science is to get a computer to solve a problem without explicitly programming it. In particular, it would be desirable to have a problemindependent system whose input is a high-level statement of a problem\u2019s requirements and whose output is a working computer program that solves the given problem. The challenge is to make computers do what needs to be done, without having to tell the computer exactly how to do it.", "num_citations": "12\n", "authors": ["1695"]}
{"title": "Automatic programming of a time-optimal robot controller and an analog electrical circuit to implement the robot controller by means of genetic programming\n", "abstract": " Genetic programming is an automatic programming technique that evolves computer programs to solve, or approximately solve, problems. This paper presents two examples in which genetic programming creates a computer program for controlling a robot so that the robot moves to a specified destination point in minimal time. In the first approach, genetic programming evolves a computer program composed of ordinary arithmetic operations and conditional operations to implement a time-optimal control strategy. In the second approach, genetic programming evolves the design of an analog electrical circuit consisting of transistors, diodes, resistors, and power supplies to implement a near-optimal control strategy.", "num_citations": "12\n", "authors": ["1695"]}
{"title": "Learning hierarchical behaviors\n", "abstract": " In the last few years, many researchers have begun to study how to introduce hierarchy into reinforcement learning methods. Generally, this work has pushed the envelope in one of several important directions, but it typically has avoided the question of how to learn systems of hierarchical behavior from experience. We present a preliminary system for learning simple hierarchical systems using a constrained language for behavior specification. The system learns \u201cdo-until\u201d macros by choosing a subgoal from and using its past experience with respect to this subgoal to build a constrained macro behavior that achieves it. The system can either be run offline and used for new but similar problems, or can be used during learning. We present an algorithm that combines macro learning with asynchronous value iteration methods such as prioritized sweeping. Macros learned by the system for a simple environment are discussed. Additionally, we present the related literature and sketch out the future work for this project.", "num_citations": "11\n", "authors": ["1695"]}
{"title": "Evolution of both the architecture and the sequence of work-performing steps of a computer program using genetic programming with architecture-altering operations\n", "abstract": " The goal of automatic programming is to create, in an automated way, a computer program that enables a computer to solve a problem. Ideally, an automatic programming system should require that the user pre-specify as little as possible about the problem environment. In particular, it is desirable that the user not be required to prespecify the architecture of the ultimate solution to his problem.The question of how to automatically create the architecture of the overall program in an evolutionary approach to automatic programming, such as genetic programming, has a parallel in the biological world: how new structures and behaviors are created in living things. This corresponds to the question of how new DNA that encodes for a new protein is created in more complex organisms.", "num_citations": "11\n", "authors": ["1695"]}
{"title": "Automatic synthesis of the topology and sizing for analog electrical circuits using genetic programming\n", "abstract": " Design is a major activity of practicing engineers. The design process entails creation of a complex structure to satisfy userdefined requirements. Since the design process typically entails tradeoffs between competing considerations, the end product of", "num_citations": "10\n", "authors": ["1695"]}
{"title": "Genetic programming: biologically inspired computation that exhibits creativity in producing human-competitive results\n", "abstract": " Publisher SummaryOne of the central challenges of computer science is to get a computer to solve a problem without programming it explicitly. The challenge is to create an automatic system whose input is a high-level statement of a problem's requirements and whose output is a satisfactory solution to the given problem. This challenge is the common goal of such fields of research as artificial intelligence and machine learning. Paraphrasing Arthur Samuel, this challenge addresses the question: How can computers are made to do what needs to be done, without being told exactly how to do it? As Samuel further explained: \u201cThe aim is to get machines to exhibit behavior, which if done by humans, would be assumed to involve the use of intelligence.\u201d This chapter provides an affirmative answer to the following two questions: Starting only with a high-level statement of the problem's requirements, can computers\u00a0\u2026", "num_citations": "7\n", "authors": ["1695"]}
{"title": "Classifying proteins as extracellular using programmatic motifs and genetic programming\n", "abstract": " As newly sequenced proteins are deposited into the world's ever growing archive of protein sequences, they are typically immediately tested by various computerized algorithms for clues as to their biological structure and function. One question about a new protein involves its cellular location-that is, where the protein resides in a living organism (extracellular, intracellular, etc.). A paper by J. Cedano et al. (1997) reported a human-created five way algorithm for cellular location created using statistical techniques with 76% accuracy. The article describes a two way classification algorithm that was evolved using genetic programming with 83% accuracy for determining whether a protein is extracellular. Unlike the statistical calculation, the genetically evolved algorithm employs a large and varied arsenal of computational capabilities, including arithmetic functions, conditional operations, subroutines, iterations, memory\u00a0\u2026", "num_citations": "7\n", "authors": ["1695"]}
{"title": "Using programmatic motifs and genetic programming to classify protein sequences as to cellular location\n", "abstract": " As newly sequenced proteins are deposited into the world's ever-growing archives, they are typically immediately tested by various algorithms for clues as to their biological structure and function. One question about a new protein involves its cellular location \u2014 that is, where the protein resides in a living organism (e.g., extracellular, membrane, nuclear). A human-created five-way algorithm for cellular location using statistical techniques with 76% accuracy was recently reported. This paper describes a two-way algorithm that was evolved using genetic programming with 83% accuracy for determining whether a protein is an extracellular protein, 84% for nuclear proteins, 89% for membrane proteins, and 83% for anchored membrane proteins. Unlike the statistical calculation, the genetically evolved programs employ a large and varied arsenal of computational capabilities, including arithmetic functions\u00a0\u2026", "num_citations": "7\n", "authors": ["1695"]}
{"title": "Automatic creation of computer programs for designing electrical circuits using genetic programming\n", "abstract": " One of the central goals of computer science is to get computers to solve problems starting from only a high-level statement of the problem. The goal of automating the design process bears many similarities to the goal of automatically creating computer programs. The design process entails creation of a complex structure to satisfy user-defined requirements. The design process is usually viewed as requiring human intelligence. Indeed, design is a major activity of practicing engineers. For these reasons, the design process offers a practical yardstick for evaluating automated programming (program synthesis) techniques. In particular, the design (synthesis) of analog electrical circuits entails the creation of both the topology and sizing (numerical values) of all of a circuit's components. There has previously been no general automated technique for automatically designing an analog electrical circuit from a high-level\u00a0\u2026", "num_citations": "7\n", "authors": ["1695"]}
{"title": "Competitive strategies: An approach against proliferation\n", "abstract": " International peace and stability and other US interests are potentially threatened by the proliferation of strategic weapons\u2014both advanced conventional systems and weapons of mass destruction (WMD), including nuclear, biological, and chemical (NBC) weapons, and missile-delivery systems. Policymakers have been responding to this difficult and complex challenge with a broad range of initiatives aimed at curbing both the incentive to obtain these capabilities (ie, the \u201cdemand side\u201d) and the availability of enabling components and associated technology (ie, the \u201csupply side\u201d). 1Based on such matters as the experience gained in the Gulf War with Iraq, the related assumption that nonproliferation approaches may not succeed entirely, and the concern over limitations in US force capabilities, the Department of Defense (DoD) has been pursuing counterproliferation, mainly by developing systems capabilities and exploring military response options as part of the Defense Counterproliferation Initiative (DCI). 2 A growing body of technical assessments, studies, and analyses indicates that implementing these measures will be operationally challenging, technically complex, costly, and\u2014in some instances\u2014not entirely feasible. Insights from war games are revealing here. For example, after nonmilitary actions fail to defuse a hypothetical but realistic crisis, experienced military planners and other participants typically see few to no good alternatives to high-risk military operations that offer the prospect of, at best, modest\u2014and thus commonly politically unacceptable\u2014chances of success. This has prompted", "num_citations": "7\n", "authors": ["1695"]}
{"title": "Design of a 96 decibel operational amplifier and other problems for which a computer program evolved by genetic programming is competitive with human performance\n", "abstract": " It would be desirable if computers could solve problems without the need for a human to write the detailed programmatic steps. That is, it would be desirable to have a domain-independent automatic programming technique in which\" What You Want Is What You Get\"(\" WYWIWYG\"\u2013pronounced\" wow-eee-wig\"). Genetic programming is such a technique. This paper surveys three recent examples of problems (one from the field of cellular automata and two from the fields of molecular biology) in which genetic programming evolved a computer program that produced results that were slightly better than human performance for the same problem. This paper then discusses a fourth problem in greater detail and demonstrates that a design for a low-distortion 96 decibel op amp (including both topology and component sizing) can be evolved using genetic programming. The information that the user must supply to genetic programming consists of the parts bin (transistors, resistors, and capacitors) and the fitness measure for the major operating characteristics of an op amp.", "num_citations": "7\n", "authors": ["1695"]}
{"title": "A case study where biology inspired a solution to a computer science problem\n", "abstract": " This paper describes how the biological theory of gene duplication described in Susumu Ohno's provocative book, Evolution by Means of Gene", "num_citations": "7\n", "authors": ["1695"]}
{"title": "Darwinian programming and engineering design using genetic programming\n", "abstract": " One of the central challenges of computer science is to build a system that can automatically create computer programs that are competitive with those produced by humans. This paper presents a candidate set of criteria that identify when a machine-created solution is competitive with a human-produced result. We argue that the field of design is a useful testbed for determining whether an automated technique can produce results that are competitive with human-produced results. We present several results that are competitive with the products of human creativity and inventiveness. This claim is supported by the fact that each of the results infringe on previously issued patents.", "num_citations": "5\n", "authors": ["1695"]}
{"title": "Behrenfeld1, Climate-driven trends in contemporary ocean productivity\n", "abstract": " Contributing roughly half of the biosphere's net primary production (NPP) Ii-*, photosynthesis by oceanic phytopiankton is a vital link in the cycling of carbon between living and inorganic stocks. Each day, more than a hundred million tons of carbon in the form of CO2 are fixed into organic material by these ubiquitous, microscopic plants of the upper ocean, and each day a similar amount of organic carbon is transferred into marine ecosystems by sinking and grazing. The distribution of phytopiankton biomass and NPP is defined by the availability of light and nutrients (nitrogen, phosphate, iron). These growth-limiting factors are in turn regulated by physical processes of ocean circulation, mixed-layer dynamics, upwelling, atmospheric dust deposition, and the solar cycle. Satellite measurements of ocean colour provide a means of quantifying ocean productivity on a global scale and linking its variability to\u00a0\u2026", "num_citations": "5\n", "authors": ["1695"]}
{"title": "Fourteen Instances where Genetic Programming has Produced Results that are Competitive with Results Produced by Humans\n", "abstract": " It would be desirable if computers could solve problems without the need for a human to write the detailed programmatic steps. That is, it would be desirable to have a domainindependent automatic programming technique in which\" What You Want Is What You Get\"(\" WYWIWYG\"\u2013pronounced\" wow-eee-wig\"). Indeed, automatic programming is one of the central problems of computer science. Paraphrasing Arthur Samuel in 1959 [41], this goal concerns How can computers be made to do what needs to be done, without being told exactly how to do it?", "num_citations": "4\n", "authors": ["1695"]}
{"title": "Automatic discovery using genetic programming of an unknown-sized detector of protein motifs containing repeatedly-used subexpressions\n", "abstract": " Automated methods of machine learning may be useful in discovering biologically meaningful patterns that are hidden in the rapidly growing databases of genomic and protein sequences. However, almost all existing methods of automated discovery require that the user specify, in advance, the size and shape of the pattern that is to be discovered. Moreover, existing methods do not have a workable analog of the idea of a reusable subroutine to exploit the recurring subpatterns of a problem environment. Genetic programming can evolve complicated problem-solving expressions of unspecified size and shape. When automatically defined functions are added to genetic programming, genetic programming becomes capable of efficiently capturing and exploiting recurring sub-patterns. This paper describes how genetic programming with automatically defined functions successfully evolved motifs for detecting the DEAD box family of proteins and for detecting the manganese superoxide dismutase family. Both...", "num_citations": "4\n", "authors": ["1695"]}
{"title": "Comparison of candidates who passed or failed the final (Part Three) examination for the FFARCS (Eng.) in 1988\n", "abstract": " All 484 candidates for the 1988 Fellowship in Anaesthesia (Part Three) were surveyed to investigate any differences between successful and unsuccessful candidates in study techniques, work and domestic factors, and examination history that might lead to better guidance to those preparing for the examination and an improvement in the current success rate of less than 30%. Candidates' views were sought also on the examination process. The response rate was 67%. Forty-two percent of respondents passed the examination. Forty-seven percent of successful and 55% of unsuccessful candidates considered their clinical workload was excessive. Successful candidates reported better departmental support, more systematic and adequate preparation, and a better knowledge of the scope of the examination. Unsuccessful candidates were more likely to have had a personal or family crisis or change in job which\u00a0\u2026", "num_citations": "4\n", "authors": ["1695"]}
{"title": "Machine intelligence 12: towards an automated logic of human thought\n", "abstract": " This is the latest volume in a series which has provided coverage of the seminal advances in machine intelligence over the past two decades. It marks a turning point in the series' direction, one that will focus on the vital problem of scientific reasoning and the application of artificial intelligence to analyzing the sometimes staggering quantities of data generated in fields from biotechnology to planetary physics. The book includes contributions from internationally recognized experts who offer their insights on important practical and theoretical developments. It also includes an extensive bibliography that will serve as a valuable guide to the literature.", "num_citations": "3\n", "authors": ["1695"]}
{"title": "Programmatic reinforcement learning agents\n", "abstract": " Safe state abstraction in reinforcement learning allows an agent to ignore aspects of its current state that are irrelevant to its current decision, and therefore speeds up dynamic programming and learning. Like Dietterich\u2019s MAXQ framework, this paper develops methods for safe state abstraction in the context of hierarchical reinforcement learning, in which a hierarchical partial program is used to constrain the policies that are considered. We extend techniques from MAXQ to the context of programmable hierarchical abstract machines (PHAMs), which express complex parameterized behaviors using a simple extension of the Lisp language. We show that our methods preserve the property of hierarchical optimality, ie, optimality among all policies consistent with the PHAM program. We also show how our methods allow safe detachment, encapsulation, and transfer of learned \u201csubroutine\u201d behaviors, and demonstrate our methods on Dietterich\u2019s taxi domain. 1", "num_citations": "2\n", "authors": ["1695"]}
{"title": "Exploring Online Support Vector Regression\n", "abstract": " Support vector machines offer some advantages for function approximation in reinforcement learning. In reinforcement learning, we would like a non-parametric technique that does not require that all data points be stored. SVM regression seems to offer this possibility, because only the support vectors must be stored. However, in reinforcement learning, a function approximator must be fast enough to be run after every (or after a couple of) step (s) in the environment. Standard SVM regression is based on the idea of batch processing and thus must be modified to be an online algorithm. A key question is whether the basic SVM algorithm will work incrementally, in that adding data points to an existing SVM might not take as much time as re-running SVM on the enlarged dataset. If this sort of incremental speed-up is possible, then SVM\u2019s might well be suitable for RL. Thus, this project set out to examine the performance of SVM regression in an incremental, online situation. I implemented a version of Platt\u2019s SMO algorithm for the regression case, based on the outline in Smola and Scholkpf\u2019s tutorial. Their presentation had a few bugs that I rooted out, and the algorithm seemed to work well on several simple regression test cases with both linear and gaussian kernels, as well as small scale polynomial kernels. However, the basic algorithm does seem somewhat dependent on good choices of parameters to achieve good performance. In a test of the online performance, I found that if a new point is well predicted by the existing SVM, it took very little time to incorporate. For some choices of parameters, I also found that it took on the order of 1/10 th as\u00a0\u2026", "num_citations": "2\n", "authors": ["1695"]}
{"title": "Artificial Evolution of Intelligence: Lessons from natural evolution An illustrative approach using Genetic Programming\n", "abstract": " When I first dreamed of becoming a Symbolics Systems major, I knew I wanted to do an Honors project. For me at that time, Symbolic Systems meant artificial intelligence. I had read the science fiction, read Godel, Escher, Bach,, and was entranced by the idea of creating machines that learned and of joining in the search to understand intelligence. I knew that a Symbolic Systems project held the potential to actually work on an AI project, of actually getting my hands dirty and creating an'AI'. How could I not want to take part in that? Through the years, my interests spread to encompass Cognitive Science. I found I had a special attraction to problems of learning and of human development, and found myself becoming immersed in the study of cognitive psychology as well. I found myself fascinated by the fact that humans use language, and that this language is acquired by infants. Then, in an amazing quarter, I took a course from John Koza on genetic algorithms and Nils Nilsson's machine learning course at the same time. I found myself pulled into both machine learning and evolutionary computation. And, because of the projects assigned in those two classes, I found I could actually do work that was somewhat interesting and valuable. However, when the time came for me to apply for the honors project, I found that I was having a hard time choosing what route I should take, what area I should focus on. My initial proposals were somewhat vague, describing a combined project to use genetic programming to understand how mental representations come to be formed, and to look into notions of learning, representation, and language. Through weekly\u00a0\u2026", "num_citations": "2\n", "authors": ["1695"]}
{"title": "Action of lysergic acid diethylamide (LSD-25) in obsessive neuroses.\n", "abstract": " [Action of lysergic acid diethylamide (LSD-25) in obsessive neuroses.] - Abstract - Europe PMC Sign in or create an account https://orcid.org Europe PMC Menu About About Europe PMC Funders Joining Europe PMC Governance Roadmap Outreach Tools Tools overview ORCID article claiming Journal list Grant finder External links service RSS feeds Annotations Annotations submission service Developers Developer resources Articles RESTful API Grants RESTful API API use cases SOAP web service Annotations API OAI service Bulk downloads Developers Forum Help Help using Europe PMC Search syntax reference Contact us Contact us Helpdesk Feedback Twitter Blog Tech blog Developer Forum Europe PMC plus Search worldwide, life-sciences literature Search Advanced Search Recent history Saved searches Abstract Citations & impact [Action of lysergic acid diethylamide (LSD-25) in obsessive neuroses\u2026", "num_citations": "2\n", "authors": ["1695"]}
{"title": "Herbivore\u00e2 mediated linkages between aboveground and belowground communities\n", "abstract": " Understanding how terrestrial ecosystems function requires a combined aboveground\u00e2 belowground approach, because of the importance of feedbacks that occur between herbivores, producers, and the decomposer subsystem. In this paper, we identify several mechanisms by which herbivores can indirectly affect decomposer organisms and soil processes through altering the quantity and quality of resources entering the soil. We show that these mechanisms are broadly similar in nature for both foliar and root herbivory, regardless of whether they operate in the short term as a result of physiological responses of individual plants to herbivore attack or long\u00e2 term following alteration of plant community structure by herbivores and subsequent changes in the quality of litter inputs to soil. We propose that a variety of possible mechanisms is responsible for the idiosyncratic nature of herbivore effects on soil biota and ecosystem function; positive, negative, or neutral effects of herbivory are possible depending upon the balance of these different mechanisms. However, we predict that positive effects of herbivory on soil biota and soil processes are most common in ecosystems of high soil fertility and high consumption rates, whereas negative effects are most common in unproductive ecosystems with low consumption rates. The significance of multiple\u00e2 species herbivore communities is also emphasized, and we propose that if resource use complementarity among herbivorespecies or functional groups leads to greater total consumption of phytomass, and thus greater net herbivory, then both positive and negative consequences of increasing herbivore\u00a0\u2026", "num_citations": "1\n", "authors": ["1695"]}
{"title": "Multi-level parallelism in automatically synthesizing soccer-playing programs for robocup using genetic programming\n", "abstract": " Many of the various proposals for tomorrow\u2019s supercomputers have included clusters of multiprocessors as an essential component. However, when designing the systems of the future, it is important to insure that the nature of the parallelism provided matches up with some relevant and important set of algorithms. This project presents empirical program synthesis as an algorithm that can successfully exploit the multiple levels of interconnect present in an multi-SMP cluster system. When applying program synthesis techniques to difficult problems, it is often the case that two distinct levels of parallelism will emerge. First, many example programs must be tested--and can often be tested in parallel. This matches up with the \u201cslow\u201d interconnect on a clump-based system. Second, the execution of a particular program can often be parallelized, especially if the program is complicated or requires interactions with a complex simulation. This level of parallelism, in contrast to the first, often requires fine-grained communication. Thus, this matches up with the \u201cfast\u201d level of the clump-based system. In particular, this project presents a multi-level parallel system for the automatic program synthesis of soccer-playing agents for the Robocup simulator competition using genetic programming. The system utilizes both the fast sharedmemory communication of the SMP system as well as a much slower mechanism for the inter-SMP communication. The system is benchmarked on a variety of configurations, and speedup curves are presented. Additionally, a simple LogP analysis comparing the performance of the designed system with a singleprocessor based NOW\u00a0\u2026", "num_citations": "1\n", "authors": ["1695"]}
{"title": "Evolution of a tri-state frequency discriminator for the source identification problem using genetic programming\n", "abstract": " Automated synthesis of analog electronic circuits is recognized as a difficult problem. Genetic programming was used to evolve both the topology and the sizing (numerical values) for each component of a circuit that can perform source identification by correctly classify an incoming signal into categories.", "num_citations": "1\n", "authors": ["1695"]}
{"title": "Automated discovery of protein motifs with genetic programming\n", "abstract": " Automated methods of machine learning may prove to be useful in discovering biologically meaningful information hidden in the rapidly growing databases of DNA sequences and protein sequences. Genetic programming is an extension of the genetic algorithm in which a population of computer programs is bred, over a series of generations, in order to solve a problem. Genetic programming is capable of evolving complicated problem-solving expressions of unspecified size and shape. Moreover, when automatically defined functions are added to genetic programming, genetic programming becomes capable of efficiently capturing and exploiting recurring sub-patterns. This chapter describes how genetic programming with automatically defined functions successfully evolved motifs for detecting the DEAD box family of proteins and for detecting the manganese superoxide dismutase family. Both motifs were evolved without prespecifying their length. Both evolved motifs employed automatically defined functions to capture the repeated use of common subexpressions. When tested against the SWISS-PROT database of proteins, the two genetically evolved consensus motifs detect the two families either as well, or slightly better than, the comparable human-written motifs found in the PROSITE database.", "num_citations": "1\n", "authors": ["1695"]}
{"title": "Treatment of oligophrenias of various etiologies with implantation of fresh tissues (cellular therapy)(Part 2).\n", "abstract": " [Treatment of oligophrenias of various etiologies with implantation of fresh tissues (cellular therapy) (Part 2).] - Abstract - Europe PMC Sign in or create an account https://orcid.org Europe PMC Menu About About Europe PMC Preprints in Europe PMC Funders Joining Europe PMC Governance Roadmap Outreach Tools Tools overview ORCID article claiming Journal list Grant finder External links service RSS feeds Annotations Annotations submission service Developers Developer resources Articles RESTful API Grants RESTful API API use cases SOAP web service Annotations API OAI service Bulk downloads Developers Forum Help Help using Europe PMC Search syntax reference Contact us Contact us Helpdesk Feedback Twitter Blog Tech blog Developer Forum Europe PMC plus Search worldwide, life-sciences literature Search Advanced Search Recent history Saved searches Abstract [Treatment of \u2026", "num_citations": "1\n", "authors": ["1695"]}
{"title": "Seeing the Forest Through the Trees: The Value of OSINT for the US Navy\n", "abstract": " Though it often goes unrecognized, history shows publicly available information (PAI) consistently plays an integral part in the development of the intelligence picture. With the advent of the Information Age, a rapid evolution of technological innovations democratized and decentralized information, creating a digital universe and a surfeit of open source intelligence, or OSINT. In the past decade alone, the world produced more information than it had in the rest of human history. This diffusion of information holds significant promise for the Naval Intelligence community, whose own rich history is replete with examples of OSINT being an integral part of the analytic picture.From the Age of Sail to the Global War on Terror and beyond, OSINT has proven valuable across the range of maritime operations. Despite this history, Naval Intelligence treats OSINT as an oxymoron, relying on an analytic culture biased against unclassified data. This bias is a mistake. To maintain maritime superiority the Naval Intelligence community needs to orient its collection and analysis toward a truly all-source effort and harness the full potential of OSINT as an intelligence discipline on par with the classified disciplines or it risks ceding the advantage to adversaries and competitors.", "num_citations": "1\n", "authors": ["1695"]}