{"title": "Formalizing web service choreographies\n", "abstract": " Current Web service choreography proposals, such as BPEL4WS, BPSS, WSFL, WSCDL or WSCI, provide notations for describing the message flows in Web service collaborations. However, such proposals remain at the descriptive level, without providing any kind of reasoning mechanisms or tool support for checking the compatibility of Web services based on the proposed notations. In this paper we present the formalization of one of these Web service choreography proposals (WSCI), and discuss the benefits that can be obtained by such formalization. In particular, we show how to check whether two or more Web services are compatible to interoperate or not, and, if not, whether the specification of adaptors that mediate between them can be automatically generated \u2014hence enabling the communication of (a priori) incompatible Web services.", "num_citations": "329\n", "authors": ["1133"]}
{"title": "Towards a consistent terminology for software measurement\n", "abstract": " Although software measurement plays an increasingly important role in Software Engineering, there is no consensus yet on many of the concepts and terminology used in this field. Even worse, vocabulary conflicts and inconsistencies can be frequently found amongst the many sources and references commonly used by software measurement researchers and practitioners. This article presents an analysis of the current situation, and provides a comparison framework that can be used to identify and address the discrepancies, gaps, and terminology conflicts that current software measurement proposals present. A basic software measurement ontology is introduced, that aims at contributing to the harmonization of the different software measurement proposals and standards, by providing a coherent set of common concepts used in software measurement. The ontology is also aligned with the metrology vocabulary\u00a0\u2026", "num_citations": "303\n", "authors": ["1133"]}
{"title": "Quality attributes for COTS components\n", "abstract": " As Component-based Software Development (CBSD) starts to be effectively used, some software vendors have commenced to successfully sell and license commercial off-the-shelf (COTS) components. One of the most critical processes in CBSD is the selection of the COTS components that meet the user requirements. Current proposals have shown how to deal with the functional aspects of this evaluation process. However, there is a lack of appropriate quality models that allow an effective assessment of COTS components. Besides, the international standards that address the software products\u2019 quality issues (in particular, those from ISO and IEEE) have shown to be too general for dealing with the specific characteristics of software components. In this position paper we propose a quality model for CBSD based on ISO 9126, that defines a set of quality attributes and their associated metrics for the effective evaluation of COTS components.", "num_citations": "206\n", "authors": ["1133"]}
{"title": "Measuring the usability of software components\n", "abstract": " The last decade marked the first real attempt to turn software development into engineering through the concepts of Component-Based Software Development (CBSD) and Commercial Off-The-Shelf (COTS) components, with the goal of creating high-quality parts that could be joined together to form a functioning system. One of the most critical processes in CBSD is the selection of a set of software components from in-house or external repositories that fulfil some architectural and user-defined requirements. However, there is a lack of quality models and metrics that can help evaluate the quality characteristics of software components during this selection process. This paper presents a set of measures to assess the Usability of software components, and describes the method followed to obtain and validate them. Such a method can be re-used as a pattern for defining and validating measures for further quality\u00a0\u2026", "num_citations": "161\n", "authors": ["1133"]}
{"title": "Object interoperability\n", "abstract": " This report summarizes the presentations, discussions and outcomes of the ECOOP\u201999 Workshop on Object Interoperability, held in Lisbon on Monday, June 14, 1999. Divided into four main sessions, the workshop covered some of the most important issues related to object interoperability at different levels (such as protocols, semantics, or mediated architectures). Two are the main goals of this report. First, it tries to provide a snapshot of some of the current research being carried out within the object-oriented community in these areas. And second, it summarizes some of the open questions and issues related to object interoperability, in order to set the basis for further research activities.", "num_citations": "111\n", "authors": ["1133"]}
{"title": "Formal and Tool Support for Model Driven Engineering with Maude.\n", "abstract": " Models and metamodels play a cornerstone role in Model-Driven Software Development. Although several notations have been proposed to specify them, the kind of formal and tool support they provide is quite limited. In this paper we explore the use of Maude as a formal notation for describing models and metamodels. Maude is an executable rewriting logic language specially well suited for the specification of object-oriented open and distributed systems. We show how Maude offers a simple, natural, and accurate way of specifying models and metamodels, and offers good tool support for reasoning about them. In particular, we show how some basic operations on models, such as model subtyping, type inference, and metric evaluation, can be easily specified and implemented in Maude, and made available in development environments such as Eclipse.", "num_citations": "107\n", "authors": ["1133"]}
{"title": "Building enterprise systems with ODP: an introduction to open distributed processing\n", "abstract": " The Reference Model of Open Distributed Processing (RM-ODP) is an international standard that provides a solid basis for describing and building widely distributed systems and applications in a systematic way. It stresses the need to build these systems with evolution in mind by identifying the concerns of major stakeholders and then expressing the design as a series of linked viewpoints. Although RM-ODP has been a standard for more than ten years, many practitioners are still unaware of it. Building Enterprise Systems with ODP: An Introduction to Open Distributed Processing offers a gentle pathway to the essential ideas that constitute ODP and shows how these ideas can be applied when designing and building challenging systems. It provides an accessible introduction to the design principles for software engineers and enterprise architects. The book also explains the benefits of using viewpoints to produce simpler and more flexible designs and how ODP can be applied to service engineering, open enterprise, and cloud computing. The authors include guidelines for using the Unified Modeling LanguageTM (UML) notation and for structuring and writing system specifications. They elucidate how this fits into the model-driven engineering tool chain via approaches, such as Model-Driven Architecture\u00ae(MDA). They also demonstrate the power of RM-ODP for the design and organization of complex distributed IT systems in e-government, e-health, and energy and transportation industries. All concepts and ideas in the book are illustrated through a single running example that describes the IT support needed by a medium-sized company as it\u00a0\u2026", "num_citations": "92\n", "authors": ["1133"]}
{"title": "Tractable Model Transformation Testing\n", "abstract": " Model transformation (MT) testing is gaining interest as the size and complexity of MTs grows. In general it is very difficult and expensive (time and computational complexity-wise) to validate in full the correctness of a MT. This paper presents a MT testing approach based on the concept of Tract, which is a generalization of the concept of Model Transformation Contract. A Tract defines a set of constraints on the source and target metamodels, a set of source-target constraints, and a tract test suite, i.e., a collection of source models satisfying the source constraints. We automatically generate input test suite models, which are then transformed into output models by the transformation under test, and the results checked with the USE tool (UML-based Specification Environment) against the constraints defined for the transformation. We show the different kinds of tests that can be conducted over a MT using this\u00a0\u2026", "num_citations": "87\n", "authors": ["1133"]}
{"title": "A survey on the quality information provided by software component vendors\n", "abstract": " The last decade marked the first real attempt to turn software development into engineering through the concepts of Component-Based Software Development (CBSD) and Commercial Off-The-Shelf (COTS) components. The idea is to create high-quality parts and join them together to form a functioning system. One of the most critical processes in CBSD is the selection of the COTS components from a repository that meet the user requirements. Current approaches try to propose appropriate quality models for the effective assessment of such components. These proposals define quality characteristics, attributes, and metrics, which are specific to the particular nature of COTS components and CBSD. However, we have found that the information required evaluating those components using those quality models and metrics is not usually available in the existing commercial software repositories. This paper presents a survey we have conducted on the most popular COTS component vendor sites, trying to evaluate how much of the information required to assess COTS components is actually available. Our goal was to estimate the current gap between the \u201crequired\u201d and the \u201cprovided\u201d information, since there is no point in defining theoretical measures for COTS components if the data they rest upon is not available. Analyzing this gap is the first step towards successfully bridging it, by both refining the component quality models so their metrics are more realistic, and by improving the information currently provided by software component vendors.", "num_citations": "81\n", "authors": ["1133"]}
{"title": "Analyzing rule-based behavioral semantics of visual modeling languages with Maude\n", "abstract": " There is a growing need to explicitly represent the behavioral semantics of Modeling Languages in a precise way, something especially important in industrial environments in which simulation and verification are critical issues. Graph transformation provides one way to specify the semantics of Domain Specific Visual Languages (DSVLs), with the advantage of being intuitive and easy to use for the system designer. Even though its theory has been extensively developed during the last 30 years, it has some limitations concerning specific analysis capabilities. On the contrary, Maude is a rewriting logic-based language with very good formal analysis support, but which requires specialized knowledge. In this paper we show how a mapping between graph transformation-based specifications of DSVL semantics and Maude is possible. This allows performing simulation, reachability and model-checking\u00a0\u2026", "num_citations": "80\n", "authors": ["1133"]}
{"title": "A trading service for COTS components\n", "abstract": " Component-based software development (CBSD) has gained recognition as one of the key technologies for the construction of high-quality, evolvable, large complex systems in a timely and affordable manner. In CBSD, the development effort becomes one of gradual discovery about the components, their capabilities and the incompatibilities that arise when they are used in concert. Thus, trading becomes one of the cornerstones of CBSD. However, most of the existing methods for CBSD do not make effective use of traders. In this paper, we analyze the required features for commercial off-the-shelf (COTS) components traders, and introduce COTStrader, an Internet-based trader for COTS components. In addition, we discuss how the COTStrader can be integrated into a spiral methodology for CBSD, providing partially automated support for building COTS-based systems.", "num_citations": "79\n", "authors": ["1133"]}
{"title": "A rewriting logic semantics for ATL\n", "abstract": " As the complexity of model transformation (MT) grows, the need to rely on formal semantics of MT languages becomes a critical issue. Formal semantics provide precise speci cations of the expected behavior of transformations, allowing users to understand them and to use them properly, and MT tool builders to develop correct MT engines, compilers, etc. In addition, formal semantics allow modelers to reason about the MTs and to prove their correctness, something specially important in case of large and complex MTs (with, e.g., hundreds or thousands of rules) for which manual debugging is no longer possible. In this paper we give a formal semantics of the ATL 3.0 model transformation language using rewriting logic and Maude, which allows addressing these issues. Such formalization provides additional bene ts, such as enabling the simulation of the speci cations or giving access to the Maude toolkit to reason about them.", "num_citations": "77\n", "authors": ["1133"]}
{"title": "Orchestrating ATL model transformations\n", "abstract": " The design and development of any complex applications using a Model-driven Engineering approach involve not only the use of many models, but also the use of many model transformations between them. These transformations should be chained together, using Model Transformation Orchestration notations and tools. This paper introduces Wires*, a graphical executable language for the orchestration of ATL transformations, which provides appropriate mechanisms to enable the modular and compositional specification and execution of complex model transformations chains.", "num_citations": "74\n", "authors": ["1133"]}
{"title": "Representing and operating with model differences\n", "abstract": " Models and metamodels play a cornerstone role in Model-Driven Software Development (MDSD). Models conform to metamodels, which usually specify domain-specific languages that allow to represent the various facets of a system in terms of models. This paper discusses the problem of calculating differences between models conforming to arbitrary metamodels, something essential in any MDSD environment for dealing with the management of changes and evolution of software models. We present a metamodel for representing the differences as models, too, following the MDSD \u201ceverything is a model\u201d principle. The Difference Metamodel, together with the difference and other related operations (do, undo and composition) presented here have been specified in Maude and integrated in an Eclipse-developed environment.", "num_citations": "73\n", "authors": ["1133"]}
{"title": "On the combination of domain specific modeling languages\n", "abstract": " Domain Specific Modeling Languages (DSMLs) are essential elements in Model-based Engineering. Each DSML allows capturing certain properties of the system, while abstracting other properties away. Nowadays DSMLs are mostly used in silos to solve specific problems. However, there are many occasions when multiple DSMLs need to be combined to design systems in a modular way. In this paper we discuss some scenarios of use and several mechanisms for DSML combination. We propose a general framework for combining DSMLs that subsumes them, based on the concept of viewpoint unification, and its realization using model-driven techniques.", "num_citations": "69\n", "authors": ["1133"]}
{"title": "Formalizing wsbpel business processes using process algebra\n", "abstract": " Industry standards for Web Service composition, such as WSBPEL, provide the notation and additional control mechanisms for the execution of business processes in Web Service collaborations. However, these standards do not provide support for checking interesting properties related to Web Service and process behaviour. In an attempt to fill this gap, we describe a formalization of WSBPEL business processes, that adds protocol information to the specifications of interacting Web Services, and uses a process algebra to model their dynamic behaviour \u2014 thus enabling their formal analysis and the inference of relevant properties of the systems being built.", "num_citations": "69\n", "authors": ["1133"]}
{"title": "New issues in object interoperability\n", "abstract": " This report summarizes the presentations, discussions, and outcomes of the ECOOP\u20192000 Workshop on Object Interoperability, held in Sophia Antipolis, France, on Monday, June 12, 2000. Divided into four main sessions, the workshop covered some of the most important issues related to object interoperability at different levels (such as protocols or semantics). This report has two main goals. First, it tries to provide a snapshot of some of the current research being carried out within the object-oriented community in these areas. And second, it summarizes some of the open questions and issues related to object interoperability, in order to set the basis for further research activities.", "num_citations": "68\n", "authors": ["1133"]}
{"title": "Realizing correspondences in multi-viewpoint specifications\n", "abstract": " Viewpoint modeling is an effective technique for specifying complex software systems in terms of a set of independent viewpoints and correspondences between them. Each viewpoint focuses on a particular aspect of the system, abstracting away from the rest of the concerns. Correspondences specify the relationships between the elements in different views, together with the constraints that guarantee the consistency among these elements. However, most Architectural Frameworks, which follow a multi-viewpoint approach, either do not consider the explicit specification of correspondences, or do it in a very simplistic way. This paper proposes a generic model-driven approach to the specification and realization of correspondences between viewpoints. In particular, we show how correspondences can be modeled both extensionally and intensionally, and propose the use of model transformations to connect these\u00a0\u2026", "num_citations": "60\n", "authors": ["1133"]}
{"title": "Usability measures for software components\n", "abstract": " The last decade marked the first real attempt to turn software development into engineering through the concepts of Component-Based Software Development (CBSD) and Commercial Off-The-Shelf (COTS) components, with the goal of creating high-quality parts that could be joined together to form a functioning system. One of the most critical processes in CBSD is the selection of the software components (from either in-house or external repositories) that fulfill some architectural and user-defined requirements. However, there is currently a lack of quality models and metrics that can help evaluate the quality characteristics of software components during this selection process. This paper presents a set of measures to assess the Usability of software components, and describes the method followed to obtain and validate them.", "num_citations": "58\n", "authors": ["1133"]}
{"title": "Component-based software quality: methods and techniques\n", "abstract": " Component-based software development, CBSD, is no longer just one more new paradigm in software engineering, but is effectively used in development and practice. So far, however, most of the efforts from the software engineering community have concentrated on the functional aspects of CBSD, leaving aside the treatment of the quality issues and extra-functional properties of software components and component-based systems. This book is the first one focusing on quality issues of components and component-based systems. The 16 revised chapters presented were carefully reviewed and selected for inclusion in the book; together with an introductory survey, they give a coherent and competent survey of the state of the art in the area. The book is organized in topical parts on COTS selection, testing and certification, software component quality models, formal models to quality assessment, and CBSD management.", "num_citations": "58\n", "authors": ["1133"]}
{"title": "Effective use of ontologies in software measurement\n", "abstract": " Ontologies are frequently used in the context of software and technology engineering. These can be grouped into two main categories, depending on whether they are used to describe the knowledge of a domain (domain ontologies) or whether they are used as software artifacts in software development processes. This paper presents some experiences and lessons learnt from the effective use of an ontology for Software Measurement, called software measurement ontology (SMO). The SMO was developed some years ago as a result of a thorough analysis of the software measurement domain. Its use as a domain ontology is presented first, a description of how the SMO can serve as a conceptual basis for comparing international standards related to software measurement. Second, the paper describes several examples of the applications of SMO as a software artifact. In particular, we show how the SMO can be\u00a0\u2026", "num_citations": "47\n", "authors": ["1133"]}
{"title": "An ontology for software measurement\n", "abstract": " Software measurement has evolved in such a way that it is no longer a marginal or atypical activity within the software development process and has become a key activity for software project managers. All successful software organizations use measurement as part of their day-to-day management and technical activities. Measurement provides organizations with the objective information they need to make informed decisions that positively impact their business and engineering performance [17]. As a matter of fact, CMMI (Capability Maturity Model Integration) includes software measurement as one of its requisites for reaching higher maturity levels and it helps organizations to institutionalize their measurement and analysis activities, rather than addressing measurement as a secondary function. Other initiatives such as ISO/IEC 15504 [11], SW-CMM (Capability Maturity Model for Software) and the ISO/IEC 90003\u00a0\u2026", "num_citations": "47\n", "authors": ["1133"]}
{"title": "Selecting software components with multiple interfaces\n", "abstract": " Component-based software development is gaining recognition as the key technology for the construction of high-quality, evolvable, large software systems in a timely and affordable manner. Component search and service matching have become two of the key issues involved in this process. However current proposals addressing these issues are based on the simplistic assumptions that components present only one interface with the services they offer. This work presents an extension of those approaches in which components may offer and require several interfaces, extending the traditional component \"substitutability\" operator. In addition, an algorithm for selecting COTS components with multiple interfaces from a repository in order to implement a given software architecture is presented.", "num_citations": "44\n", "authors": ["1133"]}
{"title": "Change management in multi-viewpoint system using asp\n", "abstract": " Viewpoint modeling is an effective technique for specifying complex software systems in terms of a set of independent viewpoints and correspondences between them. Each viewpoint focuses on a particular aspect of the system, abstracting away from the rest of the concerns. Correspondences specify the relationships between the elements in different views, together with the constraints that guarantee the consistency among these elements. However, most Enterprise Architectural Frameworks, which follow a multi-viewpoint approach, either do not consider the explicit specification of correspondences, or do it in a very simplistic way. In this paper we examine the representation of correspondences in the context of the RM-ODP, identify some of its related issues, and propose some improvements to the way in which correspondences are modeled. In particular, we claim that multi-viewpoint modeling approaches need\u00a0\u2026", "num_citations": "43\n", "authors": ["1133"]}
{"title": "Quality attributes for software metamodels\n", "abstract": " As Model-Based Engineering (MBE) starts to be effectively used, some of its constituent disciplines such as Domain Specific Modeling and Metamodeling are becoming quite popular. Metamodels play a cornerstone role in these approaches, not only for defining Domain Specific Languages but also for specifying all kinds of artifacts involved in MBE. However, there is a lack of appropriate quality models that allow an effective assessment of Metamodels. Besides, the international standards that address the software products\u2019 quality issues (in particular, those from ISO and IEEE) have shown to be too general for dealing with the specific characteristics of Metamodels because of their dual nature of being models on the one hand, and representing modeling languages on the other. In this paper we propose a quality model for Metamodels, that defines a set of quality attributes for evaluating Metamodels.", "num_citations": "41\n", "authors": ["1133"]}
{"title": "Adding behavior to models\n", "abstract": " Domain Specific Languages (DSLs) play a cornerstone role in Model-Driven Software Development for representing models and metamodels. DSLs are usually defined in terms of their abstract and concrete syntax only. This allows the rapid and inexpensive development of DSLs and their associated tools (e.g., editors), but does not allow the representation of their behavioral semantics, something especially important for model operations like simulation and verification. In this paper we explore the use of Maude as a formal notation for describing models and metamodels, including the specification of their dynamic behavior.", "num_citations": "41\n", "authors": ["1133"]}
{"title": "Towards a rewriting logic semantics for ATL\n", "abstract": " As the complexity of model transformation (MT) grows, the need to count on formal semantics of MT languages also increases. Firstly, formal semantics provide precise specifications of the expected behavior of transformations, which are crucial for both MT users (to be able to understand them and to use them properly) and MT tool builders (to develop correct MT engines, optimizers, etc.). Secondly, we need to be able to reason about the MTs to prove their correctness. This is specially important in case of large and complex MTs (with, e.g., hundreds or thousands of rules) for which manual debugging is no longer possible. In this paper we present a formal semantics to the ATL model transformation language using rewriting logic and Maude, which allows addressing these issues. This formalization provides additional benefits, such as enabling the simulation of the specifications or giving access to the\u00a0\u2026", "num_citations": "36\n", "authors": ["1133"]}
{"title": "Trading for COTS components in open environments\n", "abstract": " Trading is a well-known mechanism for searching and locating services in object-oriented systems. However, current traders present some limitations when used in open component-based system environments. In this paper we analyze the required features that COTS components traders should have, and describe the design and implementation of COTStrader; an Internet-based trader for COTS components that handles the heterogeneity, scalability and evolution of COTS traders.", "num_citations": "35\n", "authors": ["1133"]}
{"title": "Testing models and model transformations using classifying terms\n", "abstract": " This paper proposes the use of equivalence partitioning techniques for testing models and model transformations. In particular, we introduce the concept of classifying terms, which are general OCL terms on a class model enriched with OCL constraints. Classifying terms permit defining equivalence classes, in particular for partitioning the source and target model spaces of the transformation, defining for each class a set of equivalent models with regard to the transformation. Using these classes, a model validator tool is able to automatically construct object models for each class, which constitute relevant test cases for the transformation. We show how this approach of guiding the construction of test cases in an orderly, systematic and efficient manner can be effectively used in combination with Tracts for testing both directional and bidirectional model transformations and for analyzing their behavior.", "num_citations": "34\n", "authors": ["1133"]}
{"title": "RM-ODP: The ISO reference model for open distributed processing\n", "abstract": " As software technology becomes a core part of business enterprises in all market sectors, customers demand more flexible enterprise systems. This demand coincides with the increasing use of personal computers and today\u2019s easy access to local and global communication networks, that together provide an excellent infrastructure for building open distributed systems. However, the specific problems of those large systems are currently challenging the Software Engineering community, whose traditional methods and tools are finding difficulties for coping with the new requirements. Furthermore, current IT departments are also facing serious problems to keep up with the new emerging technologies. A recent analysis by ComputerWorld (dated November 10, 1999) shows that 85% of IT departments in the US fail to meet their own companies\u2019 strategic business needs. There is no similar study for the Spanish IT departments, but we are sure that the situation is not much better here.Writing business logic is hard enough. Writing infrastructure code is much more difficult, and developing open distributed applications requires a complex underlying infrastructure. This middleware tier must handle distributed communications, proxy/instance relationships, security, transactional integrity, integration with legacy applications, data transfer to databases, and scalability, to name a few. The more help you get from the infrastructure, the less you'll have to do, leaving more time for your business logic. Which probably is complex enough to keep you amused. In this respect, Desmond D\u2019Souza summarizes very well what businesses demand from technology in today\u00a0\u2026", "num_citations": "34\n", "authors": ["1133"]}
{"title": "Model transformations\n", "abstract": " In recent years, Model-Driven Engineering has taken a leading role in advancing a new paradigm shift in software development. Leveraging models to a first-class status is at the core of this methodology. Shifting the focus of software development from coding to modeling permits programs to transform models in order to generate other models which are amenable for a wide range of purposes, including code generation. This paper introduces a classification of model transformation approaches and languages, illustrating the characteristics of the most prominent ones. Moreover, two specific application scenarios are proposed to highlight bidirectionality and higher-order transformations in the change propagation and coupled evolution domains, respectively.", "num_citations": "31\n", "authors": ["1133"]}
{"title": "Assessing component-based systems\n", "abstract": " The last decade marked the first real attempt to turn software development into engineering through the concepts of Component-Based Software Development (CBSD) and Commercial Off-The-Shelf (COTS) components. The idea is to create high-quality parts and join them together to form a functioning system. The problem is that the combination of such parts does not necessarily result in a high-quality system. It is clear that CBSD affects software quality in several ways, ranging from introducing new methods for selecting COTS components, to defining a wide scope of testing principles and measurements. Today, software quality staff must rethink the way software is assessed, including all life-cycle phases\u2014from requirements to evolution. Based on cumulated research efforts, the goal of this chapter is to introduce the best practices of current Component-Based Software Assessment (CBSA). We will\u00a0\u2026", "num_citations": "31\n", "authors": ["1133"]}
{"title": "Atributos de calidad para componentes COTS\n", "abstract": " Conforme cobra auge el desarrollo de aplicaciones basadas en componentes COTS, y empiezan a aparecen las primeras casas comerciales que venden componentes COTS con \u00e9xito, aumenta la necesidad de disponer de par\u00e1metros de calidad que permitan evaluarlos y seleccionarlos de acuerdo a los requisitos de calidad de los usuarios. Partiendo de las distintas propuestas existentes sobre caracter\u0131sticas de calidad para los productos gen\u00e9ricos software (especialmente las recogidas por ISO e IEEE), este trabajo ofrece una lista de atributos y de sus posibles m\u00e9tricas que son aplicables espec\u0131ficamente a los componentes COTS, y que permiten describir (y medir) no s\u00f3lo su funcionalidad, sino tambi\u00e9n muchas de sus propiedades extra-funcionales. El modelo de calidad propuesto se contrasta tambi\u00e9n con los ya existentes, cuyo car\u00e1cter demasiado generalista dificulta su implantaci\u00f3n y utilizaci\u00f3n efectiva para el caso concreto de los componentes COTS.", "num_citations": "28\n", "authors": ["1133"]}
{"title": "Employing classifying terms for testing model transformations\n", "abstract": " This contribution proposes a new technique for developing test cases for UML and OCL models. The technique is based on an approach that automatically constructs object models for class models enriched by OCL constraints. By guiding the construction process through so-called classifying terms, the built test cases in form of object models are classified into equivalence classes. A classifying term can be an arbitrary OCL term on the class model that calculates for an object model a characteristic value. From each equivalence class of object models with identical characteristic values one representative is chosen. The constructed test cases behave significantly different with regard to the selected classifying term. By building few diverse object models, properties of the UML and OCL model can be explored effectively. The technique is applied for automatically constructing relevant source model test cases for\u00a0\u2026", "num_citations": "27\n", "authors": ["1133"]}
{"title": "Simulating domain specific visual models by observation\n", "abstract": " Domain Specific Visual Languages (DSVLs) are essential elements in Model-Driven Engineering (MDE) for representing models and metamodels. In-place model transformations provide an intuitive way to complement metamodels with behavioral specifications. Besides, they can be extended with quantitative models of time and with mechanisms that facilitate the design of real-time complex systems. In this paper we present an approach to simulate and analyze the behavior of systems described by DSVLs using observers, which are objects that can monitor both the state of the rest of the objects of the system, and the execution of the system actions. Our proposal is supported by e-Motions, a graphical framework and tool for defining timed behavioral specifications of models. We also show how this approach enables the specification and simulation of other important features of systems, such as the automatic\u00a0\u2026", "num_citations": "26\n", "authors": ["1133"]}
{"title": "A journey through the secret life of models\n", "abstract": " Although Model Driven Software Development (MDSD) is achieving significant progress, it is still far from becoming a real Engineering discipline. In fact, many of the difficult problems of the engineering of complex software systems are still unresolved, or simplistically addressed by many of the existing MDSD approaches. In this paper we outline three of the currently outstanding problems of MDSD on which we are now working, and propose some hints on how they can be addressed. The challenges are: the specification of the behavioral semantics of metamodels; the addition of time to these specifications so that models can be properly animated, simulated and analyzed; and the use of viewpoints and correspondences for specifying large-scale software systems.", "num_citations": "24\n", "authors": ["1133"]}
{"title": "Aspectos de calidad en el desarrollo de software basado en componentes\n", "abstract": " El desarrollo de software basado en componentes se ha convertido actualmente en uno de los mecanismos m\u00e1s efectivos para la construcci\u00f3n de grandes sistemas y aplicaciones de software. Una vez que la mayor parte de los aspectos funcionales de esta disciplina comienzan a estar bien definidos, la atenci\u00f3n de la comunidad cient\u00edfica comienza a centrarse en los aspectos extrafuncionales y de calidad, como un paso hacia una verdadera ingenier\u00eda. En este art\u00edculo se discuten precisamente los aspectos de calidad relativos a los componentes software ya las aplicaciones que con ellos se construyen, con especial \u00e9nfasis en los est\u00e1ndares internacionales que los definen y regulan, y en los problemas que se plantean en este tipo de entornos.", "num_citations": "24\n", "authors": ["1133"]}
{"title": "Evaluating quality-in-use using bayesian networks\n", "abstract": " This paper challenges the traditional approach for assessing the overall quality of a software product, which is based on the assumption that, in ISO/IEC 9126 terms, a good external quality ensures a good quality-in-use. Here we change the focus of the quality assessment, concentrating on the quality-in-use as the driving factor for designing a software product, or for selecting the product that better fits a user\u2019s needs. We propose a \u201cbackwards\u201d analysis of the relationship between the external quality and the quality-in-use which tries to determine the external quality sub-characteristics that are really relevant to ensure the required level of quality in a given context of use, in order to avoid superfluous costs or irrelevant features\u2013which may unnecessarily increase the final price of the product. In this paper we propose Bayesian Belief Networks to model such relationships, and propose a method to build them for different contexts of use.", "num_citations": "23\n", "authors": ["1133"]}
{"title": "Teaching UML and OCL models and their validation to software engineering students: an experience report\n", "abstract": " Models are expanding their use for many different purposes in the field of software engineering and, due to their importance, universities have started incorporating modeling courses into their programs. Being a relatively new discipline, teaching modeling concepts brings in new challenges. Our contribution in this paper is threefold. First, we list and describe the main issues we have come across when teaching modeling in a dedicated Software Engineering course. We then present a simple case study that we have developed and successfully used in class, which permits students specify a system and its views, simulate them, check their relations, and perform several kinds of analyses on the overall system specifications. For this, we use a combination of UML and OCL. Finally, we report on the results of a survey we conducted among the students of the last two years to evaluate our proposal, and the lessons we\u00a0\u2026", "num_citations": "22\n", "authors": ["1133"]}
{"title": "The reference model of open distributed processing: Foundations, experience and applications\n", "abstract": " This paper provides an editorial introduction to the current special issue on Open Distributed Processing. It looks back over the development of the ODP standards and at the way in which they have been used, and looks forward at the way current activities are progressing. It contains a broad bibliography covering ODP standards, related research work and application case studies.", "num_citations": "22\n", "authors": ["1133"]}
{"title": "On the concurrent execution of model transformations with linda\n", "abstract": " Nowadays there exists a wide variety of model transformation languages. However, all of them present limitations, mainly performance issues, when the complexity and size of model transformations and models grow. The problems arise due to the in-memory allocation of large models as well as the time taken by the execution engines for producing the output models. This restricts the benefits of using model transformations in different application fields of model engineering where the complexity of the transformation tasks exceeds the capabilities of sequential execution engines. In this paper we tackle these limitations by introducing concurrency for model transformations to effectively improve the execution performance. Instead of reinventing the wheel, we base our approach on Linda, a mature coordination language for parallel processes. We explore how model transformations fit into Linda and show a set of\u00a0\u2026", "num_citations": "21\n", "authors": ["1133"]}
{"title": "Medici\u00f3n del software ontolog\u00eda y metamodelo\n", "abstract": " La r\u00e1pida evoluci\u00f3n de los ordenadores hizo del software una pieza clave. Cada vez juega un papel m\u00e1s importante en nuestras actividades diarias. En la actualidad, el software se caracteriza por ser complejo y de dif\u00edcil mantenimiento.Como en cualquier otro producto que afecta a nuestra vida, se desea que el software cumpla ciertos requisitos de calidad. Es necesario tener un control de su proceso de desarrollo soportado por una tecnolog\u00eda de ingenier\u00eda de software adecuada, con el fin de que el proceso sea preciso, predecible y repetible. Un factor clave para alcanzar estos objetivos es la medici\u00f3n.", "num_citations": "21\n", "authors": ["1133"]}
{"title": "Adding uncertainty and units to quantity types in software models\n", "abstract": " Although several software modeling languages permit the representation of key aspects of physical entities, such as units, precision or measurement uncertainty, these aspects are not typically incorporated into their type systems. Therefore, operating with such properties is normally cumbersome and contrived. This paper shows how both data uncertainty and units can be captured in software models and naturally incorporated into their type systems. In particular, we present extensions of the UML/OCL type Real and define a set of operations on values of these new types. Furthermore, we show how they can be used in software models to carry out computations that consider measurement uncertainty and permit the detection of unit mismatches when trying to operate with their values.", "num_citations": "20\n", "authors": ["1133"]}
{"title": "Modeling the ODP computational viewpoint with UML 2.0\n", "abstract": " The ODP computational viewpoint describes the functionality of a system and its environment in terms of a configuration of objects interacting at interfaces, independently of their distribution. Up until UML version 2.0, both the lack of precision in the UML definition and the semantic gap between the ODP concepts and the UML constructs hindered its application for ODP computational viewpoint modeling. With the advent of UML 2.0 the situation may have changed, because its semantics have been more precisely defined and it now incorporates a whole new set of concepts more apt for modeling the structure and behavior of distributed systems. In this paper, we explore the benefits provided by the new extension mechanisms of UML and, more specifically, we present a UML profile for modeling the ODP computational viewpoint concepts. We also show a case study that illustrates how our proposal is applied to a\u00a0\u2026", "num_citations": "20\n", "authors": ["1133"]}
{"title": "Cqm: A software component metric classification model\n", "abstract": " In the last few years component-based software development (CBSD) has been imposed as a new paradigm in software systems construction. CBSD is based on the idea that software systems can be developed by selecting and integrating appropriate components, which have already been developed, and then assembling them to obtain the functionality desired in the final application. Multiple authors have proposed metrics to quantify several components characteristics in order to help in its selection. Nevertheless, rather than helping developers, such proposals often provoke more confusion due to the fact that they do not systematically take into account different aspects of the components.Trying to achieve clarity in this line, we have developed the CQM model (Component Quality Model), whose first aim is to propose a classification of the defined metrics for software components. The model will also be able to be used for the evaluation of a component or a component system. Finally, it is necessary to indicate that this is the first version of the model, and it will need to be refined by means of its use and discussion in different forums.", "num_citations": "20\n", "authors": ["1133"]}
{"title": "The experiment model and validity frame in M&S\n", "abstract": " Modelling and Simulation approaches use system models to conduct simulation experiments. Experimental frames have been applied in this context to formally define a system\u2019s context. During the creation of an experimental frame for a simple spring model it becomes clear that experimental frames in their current definition lack certain properties and omit relevant information. Our approach describes the process of capturing the context of models and systems to provide truly reproducible experiment descriptions. The information, captured as experimental setups, can then be used for different purposes and in different scenarios, in particular for checking the validity of a model, the discovery of suitable models for the design of a system, and for calibrating models.", "num_citations": "19\n", "authors": ["1133"]}
{"title": "A Linda-based platform for the parallel execution of out-place model transformations\n", "abstract": " ContextThe performance and scalability of model transformations is gaining interest as industry is progressively adopting model-driven techniques and multicore computers are becoming commonplace. However, existing model transformation engines are mostly based on sequential and in-memory execution strategies, and thus their capabilities to transform large models in parallel and distributed environments are limited.ObjectiveThis paper presents a solution that provides concurrency and distribution to model transformations.MethodInspired by the concepts and principles of the Linda coordination language, and the use of data parallelism to achieve parallelization, a novel Java-based execution platform is introduced. It offers a set of core features for the parallel execution of out-place transformations that can be used as a target for high-level transformation language compilers.ResultsSignificant gains in\u00a0\u2026", "num_citations": "19\n", "authors": ["1133"]}
{"title": "Medidas de usabilidad de componentes software\n", "abstract": " La \u00faltima d\u00e9cada ha marcado el primer intento real de convertir el desarrollo software en una ingenier\u00eda usando los conceptos de Desarrollo Software Basado en Componentes (DSBC) y de Componentes COTS (Commercial Off-The-Shelf) cuyo objetivo es crear elementos de alta calidad que se puedan ensamblar para construir un sistema funcional. Uno de los procesos cr\u00edticos dentro del DSBC es la selecci\u00f3n de los componentes que, cumpliendo los requisitos de funcionalidad definidos por el usuario, formar\u00e1n parte del producto final. Sin embargo, existe una falta de modelos de calidad y de medidas que ayuden en la evaluaci\u00f3n de las caracter\u00edsticas de calidad de los componentes software durante este proceso de selecci\u00f3n. Este trabajo presenta un conjunto de medidas para valorar la Usabilidad de los componentes COTS, y describe el m\u00e9todo seguido para obtenerlas y validarlas emp\u00edricamente.", "num_citations": "19\n", "authors": ["1133"]}
{"title": "Typing model transformations using tracts\n", "abstract": " As the complexity of MDE artefacts grows, there is an increasing need to rely on precise and abstract mechanisms that allow system architects to reason about the systems they design, and to test their individual components. In particular, assigning types to models and model transformations is needed for realizing many key MDE activities. This paper presents a light-weight approach to type model transformations using tracts. Advantages and limitations of the proposal are discussed, as well as the applicability of the proposal in several settings.", "num_citations": "18\n", "authors": ["1133"]}
{"title": "On the specification of non-functional properties of systems by observation\n", "abstract": " Domain specific languages play a cornerstone role in Model-Driven Engineering (MDE) for representing models and metamodels. So far, most of the MDE community efforts have focused on the specification of the functional properties of systems. However, the correct and complete specification of some of their non-functional properties is critical in many important distributed application domains, such as embedded systems, multimedia applications or e-commerce services. In this paper we present an approach to specify QoS requirements, based on the observation of the system actions and of the state of its objects. We show how this approach can be used to extend languages which specify behavior in terms of rules, and how QoS characteristics can be easily expressed and reused across models. We show as well how this approach enables the specification of other important properties of systems, such\u00a0\u2026", "num_citations": "17\n", "authors": ["1133"]}
{"title": "Behavior, time and viewpoint consistency: Three challenges for mde\n", "abstract": " Although Model Driven Software Development (MDSD) is achieving significant progress, it is still far from becoming a real Engineering discipline. In fact, many of the difficult problems of the engineering of complex software systems are still unresolved, or simplistically addressed by many of the current MDSD approaches. In this position paper we outline three of the outstanding problems that we think MDSD should tackle in order to be useful in industrial environments.", "num_citations": "17\n", "authors": ["1133"]}
{"title": "Well-formed rules for viewpoint correspondences specification\n", "abstract": " Service Enterprise Architecture (SEA) is nowadays gaining a wider audience in companies using large-scale IT systems. It combines service orientation and viewpoint modeling. Hence, service orientation is attractive due to its ability to virtualize component architecture and to enable easier composition and contractualization. However, services may be defined at multiple levels (business, application, technology) and viewpoint modeling permits to adopt a systematic approach. This paper compares several frameworks (Zachman, RM-ODP) and methodologies (TOGAF/ADM, Praxeme, ThinkService). A special focus is made on their ability to handle viewpoint correspondences and evolution management.", "num_citations": "17\n", "authors": ["1133"]}
{"title": "Specifying quantities in software models\n", "abstract": " ContextAn essential requirement for the design and development of any engineering application that deals with real-world physical systems is the formal representation and processing of physical quantities, comprising both measurement uncertainty and units. Although solutions exist for several programming languages and simulation frameworks, this problem has not yet been fully solved for software models.ObjectiveThis paper shows how both measurement uncertainty and units can be effectively incorporated into software models, becoming part of their basic type systems.MethodWe introduce the main concepts and mechanisms needed for representing and handling physical quantities in software models. More precisely, we describe an extension of basic type Real, called Quantity, and a set of operations defined for the values of that type, together with a ready-to-use library of dimensions and units, which can\u00a0\u2026", "num_citations": "16\n", "authors": ["1133"]}
{"title": "Language-Specific Model Versioning Based on Signifiers.\n", "abstract": " In model-driven engineering (MDE), models constitute the central artifacts in the development process, and thus, are often built by teams of developers. As a consequence, adequate version control for models is crucial to the success of MDE-based projects. Several model versioning systems have been proposed recently. Most of them are generic in the sense that they are agnostic to modeling languages. Although this ensures a wide applicability, important merge issues may not be detected. In this paper, we present an orthogonal extension to generic model versioning systems for enabling the detection of an important subset of language-specific merge issues. Users may enhance the versioning system\u2019s capabilities by defining signifiers, which describe the combination of features of a model element type that convey the superior meaning of its instances. Signifiers improve the different phases of the versioning process including comparing and merging models leading to a higher quality of the finally merged models. We showcase the applicability of our approach by enhancing the versioning support for the modeling language Ecore.", "num_citations": "16\n", "authors": ["1133"]}
{"title": "Extending visual modeling languages with timed behavioral specifications\n", "abstract": " Domain specific languages (DSLs) play a cornerstone role in Model-Driven Software Development for representing models and metamodels. DSLs are usually defined only in terms of their abstract and concrete syntaxes, although this hampers the development of formal analysis and simulation tools. In this paper we advocate the use of in-place model transformations to complement metamodels (the structural aspects of a DSL) with timed behavioral specifications. In particular, we propose an extension for in-place transformation rules to state action properties (not only model element properties), and to model time-dependent behavior. This approach avoids making unnatural changes to the DSL metamodels to represent behavioral and time aspects, and allows the resulting specifications to be translated into different semantic domains, such as Real-Time Maude, making them amenable to simulation and other kinds of formal analysis.", "num_citations": "16\n", "authors": ["1133"]}
{"title": "On the foundation for roles in RM-ODP: Contributions from conceptual modelling\n", "abstract": " In this paper, we attempt to provide a semantic foundation for the role-related concepts in the RM-ODP. We believe that some theories of conceptual modelling may help us to provide a well-founded underpinning for these concepts, and to harmonize competing proposals for them. As a starting point of our effort, we study the definitions of Genilloud and Wegmann, and the proposed definition in the working document for the amendment of the standard as contributed by Linington.", "num_citations": "16\n", "authors": ["1133"]}
{"title": "A graphical representation of COTS-based software architectures\n", "abstract": " As commercial components emerge and commence to be used in real applications, the need to design such systems with a sound architecture becomes a critical issue. Traditionally, Architectural Description Languages have been used for that purposes, although their formality and unfriendliness have limited their use in industrial environments. On the other hand, the successful and widespread modeling notation UML has shown some limitations when used for representing Software Architectures. In this paper we describe a set of constructs and UML extensions that facilitate the description of Software Architectures, particularly those of applications developed from reusable COTS components.", "num_citations": "16\n", "authors": ["1133"]}
{"title": "Specification and simulation of queuing network models using domain-specific languages\n", "abstract": " Queuing network models (QNMs) provide powerful notations and tools for modeling and analyzing the performance of many different kinds of systems. Although several powerful tools currently exist for solving QNMs, some of these tools define their own model representations, have been developed in platform-specific ways, and are normally difficult to extend for coping with new system properties, probability distributions or system behaviors. This paper shows how Domain Specific Languages (DSLs), when used in conjunction with Model-driven engineering techniques, provide a high-level and very flexible approach for the specification and analysis of QNMs. We build on top of an existing metamodel for QNMs (PMIF) to define a DSL and its associated tools (editor and simulation engine), able to provide a high-level notation for the specification of different kinds of QNMs, and easy to extend for dealing with other\u00a0\u2026", "num_citations": "15\n", "authors": ["1133"]}
{"title": "Formalizing complex event processing systems in Maude\n", "abstract": " Complex event processing (CEP) is a cutting-edge technology for analyzing and correlating streams of information about events that happen in a system, and deriving conclusions from them. CEP permits defining complex events based on the events produced by the incoming sources, to identify complex meaningful circumstances and to respond to them as quickly as possible. Such event types and patterns are defined using event processing languages. However, as the complexity of CEP programs grows, they become difficult to understand and to prove correct. This paper proposes a formal framework for the specification of CEP applications, using rewriting logic and Maude, to allow developers to formally analyze and prove properties of their CEP programs. Several case studies are presented to illustrate the approach, as well as a discussion on the benefits of using Maude and its toolkit for modeling and\u00a0\u2026", "num_citations": "14\n", "authors": ["1133"]}
{"title": "On the industrial adoption of model driven engineering. Is your company ready for MDE?\n", "abstract": " Model Driven Engineering (MDE) is an approach to software development where models play a central role in all software engineering processes. Conceived to provide significant gains in productivity, portability, maintainability and interoperability, MDE is now starting to be effectively used in industry. Thus, companies are beginning to evaluate their possibilities for adopting it. This paper examines the current state of MDE in industry, summarizes the current obstacles for adoption, and discusses the advantages that it should bring to businesses and its limitations. Finally, some ideas for a smoother transition towards a wider adoption of MDE are outlined.", "num_citations": "14\n", "authors": ["1133"]}
{"title": "Viewpoint synchronization of UWE models\n", "abstract": " Viewpoint modeling has demonstrated to be an effective approach for specifying complex software systems by means of a set of independent views and correspondences between them. As any other software system, a Web application evolves during its lifetime, and its specifications change to meet new requirements or to adapt to business changes. As a consequence, view elements and correspondences can be added, modified or removed, which may cause synchronization and consistency problems in the system specifications. UWE is a Model-Driven Web Engineering approach that uses several viewpoints for addressing the different concerns involved in the specification and development of Web systems. In this paper we examine the explicit and partially automatic specification of correspondences between UWE views, and present a tool for helping synchronize them under the presence of changes to the view elements.", "num_citations": "14\n", "authors": ["1133"]}
{"title": "Controllers: reusable wrappers to adapt software components\n", "abstract": " This paper discusses the modular development of software applications in Open Systems using reusable components and controllers. In this work a component model for open system is proposed, in which components encapsulate computation, systems deal with the creation and communication of components, and the rest of the context-specific requirements and concerns are implemented by first-class, reflective, reusable entities, called controllers. Controllers are thought to be the natural evolution of the traditional object wrappers or filters to the realm of component-oriented programming, that can be added to components in a modular way, modifying their behavior according to the requirements they implement.", "num_citations": "14\n", "authors": ["1133"]}
{"title": "Towards Approximate Model Transformations.\n", "abstract": " As the size and complexity of models grow, there is a need to count on novel mechanisms and tools for transforming them. This is required, eg, when model transformations need to provide target models without having access to the complete source models or in really short time\u2014as it happens, eg, with streaming models\u2014or with very large models for which the transformation algorithms become too slow to be of practical use if the complete population of a model is investigated.In this paper we introduce Approximate Model Transformations, which aim at producing target models that are accurate enough to provide meaningful and useful results in an efficient way, but without having to be fully correct. So to speak, this kind of transformations treats accuracy for execution performance. In particular, we redefine the traditional OCL operators used to query models (eg, allInstances, select, collect, etc.) by adopting sampling techniques and analyse the accuracy of approximate model transformations results.", "num_citations": "13\n", "authors": ["1133"]}
{"title": "Adding Random Operations to OCL.\n", "abstract": " This paper presents an extension of OCL to allow modellers to deal with random numbers and probability distributions in their OCL specifications. We show its implementation in the tool USE and discuss some advantages of this new feature for the validation and verification of models.", "num_citations": "12\n", "authors": ["1133"]}
{"title": "Expressing measurement uncertainty in software models\n", "abstract": " Uncertainty is an inherent property of any measure or estimation performed in any physical setting, and therefore it needs to be taken into consideration when modelling systems that manage real data. Although several modelling languages permit the representation of measurement uncertainty for describing certain system attributes, these aspects are not normally incorporated into their type systems. Thus, operating with uncertain values and propagating uncertainty are normally cumbersome processes and difficult to achieve at the model level. This paper proposes an extension of the UML and OCL types to incorporate data uncertainty coming from physical measurements or user estimations into the models, together with the set of operations defined for the values of these types.", "num_citations": "12\n", "authors": ["1133"]}
{"title": "On the addition of properties to components\n", "abstract": " The design of components for open systems has led to the study of new systems and their properties. Most of these systems try to facilitate the design of components by incorporating new features, services and utilities that solve the basic problems of open systems: heterogeneity, partial knowledge of the components, and dynamic changes in the system\u2019s configuration. However, our approach is not focused on the system but on the components themselves. This paper defines the properties that components of those systems should have and introduces a framework to implement them.", "num_citations": "12\n", "authors": ["1133"]}
{"title": "An mde approach for runtime monitoring and adapting component-based systems: Application to wimp user interface architectures\n", "abstract": " In certain systems, software must be adapted at runtime to the requirements and changes occurring in the context. A strategy to achieve this goal is to model such systems as software architectures making use of the Component-based Software Engineering (CBSE). Thus, the system can be adapted through the reconfiguration of the software architectures. In this paper we present a schema for the adaptation of software architectures at runtime based on the system context observation. The software system is defined by means of architectural models at two levels: abstract and concrete. We use a trading process to regenerate concrete architectural models from their abstract definitions and a component repository. We also use Model-Driven Engineering (MDE) techniques to transform at runtime such models in order to achieve the system adaptation to the monitored context by using observers. This article describes a\u00a0\u2026", "num_citations": "11\n", "authors": ["1133"]}
{"title": "Action templates and causalities in the ODP computational viewpoint\n", "abstract": " The RM-ODP is a reference model that provides a coordinating framework for Open Distributed Processing standards, and offers a well-defined and comprehensive set of concepts and functions for the specification of ODP systems. Some years after its release as International Standard, an ISO Study Group will evaluate the need for a revision of RM-ODP, a customary process for ISO standards. The goal is to make use of the experiences gained from the use of the RM-ODP framework during that period, in order to propose improvements or changes if required. In order to serve as an input to that Group, this paper raises two small issues that we have discovered when trying to formalize the ODP Computational Viewpoint: the need of an independent term for referring to the signature of an Action Template, and the way in which Causalities are currently defined and handled. A proposal for addressing these issues is presented for discussion.", "num_citations": "11\n", "authors": ["1133"]}
{"title": "Parallel in-place model transformations with LinTra\n", "abstract": " As software systems have grown large and complex in the last few years, the problems with which Model-Driven Development has to cope have increased at the same pace. In particular, the need to improve the performance and scalability of model transformations has become a critical issue. In previous work we introduced LinTra, a model transformation platform for the parallel execution of out-place model transformations. Nevertheless, in-place model transformations are required in several contexts and domains as well. In this paper we discuss the fundamentals of in-place model transformations in the light of their parallel execution and provide LinTra with an in-place execution mode.", "num_citations": "10\n", "authors": ["1133"]}
{"title": "Modeling odp computational specifications using uml\n", "abstract": " The open distributed processing (ODP) computational viewpoint describes the functionality of a system and its environment in terms of a configuration of objects interacting at interfaces, independently of their distribution. Quality of service (QoS) contracts and service level agreements are an integral part of any computational specification, which are specified in ODP in terms of environment contracts. Up until unified modeling language (UML) version 2, both the lack of precision in the UML definition and the semantic gap between the ODP concepts and the UML constructs hindered its application for ODP computational viewpoint modeling. With the advent of UML 2 the situation has changed, because its semantics have been more precisely defined and it now incorporates a whole new set of concepts more apt for modeling the structure and behavior of distributed systems. In this paper, we explore the benefits\u00a0\u2026", "num_citations": "10\n", "authors": ["1133"]}
{"title": "Trading for COTS components to fulfill architectural requirements\n", "abstract": " Component-based development (CBD) moves organizations from application development to application assembly, involving the use of third-party, prefabricated pieces (commercial off-the-shelf components, COTS) and spiral development methodologies. Although a software component market is still quite slow to develop, effective use of software components is slowly becoming a valid technology for the building of software systems. Moreover, the complexity of the applications is continuously growing, and the amount of the information about components is becoming too large to be handled by human intermediaries. Therefore, automated trading of components will play a critical role in CBD. This chapter underlines the need of linking three areas of the COTS CBD: the documentation and specification of COTS components, the description of COTS-based software architectures, and the trading processes for COTS components. A trading-based development method (TBDM), a three-tier method to build software applications as an assembly of COTS software components, is presented. A sample implementation is illustrated.", "num_citations": "10\n", "authors": ["1133"]}
{"title": "MPM4CPS: Multi-Paradigm Modelling for Cyber-Physical Systems.\n", "abstract": " The last decades have seen the emergence of truly complex, designed systems, known as Cyber-Physical Systems (CPS). Engineering such systems requires integrating physical, software, and network aspects. To date, neither a unifying theory nor systematic design methods, techniques and tools exist to meet this challenge. Individual engineering disciplines, such as mechanical, electrical, network and software engineering offer only partial solutions. Multi-Paradigm Modelling (MPM) proposes to model every part and aspect of a system, including development processes, explicitly, at the most appropriate level (s) of abstraction, using the most appropriate modelling formalism (s). Modelling language engineering, including model transformation, and the study of their semantics, are used to realize MPM. MPM is seen as an effective answer to the challenges of designing Cyber-Physical Systems. Research on modelling CPS is typically based on national activities with loose international interaction. To establish an interdisciplinary and inter-institutional platform for scientific information exchange, consensus building, and collaboration, the COST Action MPM4CPS, funded by the EU Framework Programme for Research and Innovation, has been initiated. MPM4CPS aims to develop and share foundations, techniques, and tools related to Multi-Paradigm Modelling for Cyber-Physical Systems (MPM4CPS) and to provide educational resources. In this paper we describe the overall MPM4CPS approach and its current status.", "num_citations": "9\n", "authors": ["1133"]}
{"title": "Obligations and delegation in the ODP enterprise language\n", "abstract": " The ODP Enterprise Language is used to describe the organizational objectives and policies that apply to the system to be specified. It also captures constraints associated with the environment in which the system is to be used. Because the enterprise specification is concerned more with organizational issues than technical details of the system, there is considerable emphasis in the language design on obligations and norms, rather than on the declaration of some single rigidly required behaviour. This leads to a requirement for specification techniques that encompass a wide range of behaviour and then identify which behaviour should occur and how exceptions are to be handled, this is more challenging than computational specification, where the specification is essentially a recognizer for correct behaviour and does not define what is to happen if there are violations. This paper describes work currently in\u00a0\u2026", "num_citations": "9\n", "authors": ["1133"]}
{"title": "A reflective component model for open systems\n", "abstract": " We present a component model for the modular design of Open Distributed Systems. Based on black-box components and reusable controllers, it addresses many of the special issues for such systems, including heterogeneity, component evolution, and dynamic change.", "num_citations": "9\n", "authors": ["1133"]}
{"title": "Extending complex event processing to graph-structured information\n", "abstract": " Complex Event Processing (CEP) is a powerful technology in realtime distributed environments for analyzing fast and distributed streams of data, and deriving conclusions from them. CEP permits defining complex events based on the events produced by the incoming sources in order to identify complex meaningful circumstances and to respond to them as quickly as possible. However, in many situations the information that needs to be analyzed is not structured as a mere sequence of events, but as graphs of interconnected data that evolve over time. This paper proposes an extension of CEP systems that permits dealing with graph-structured information. Two case studies are used to validate the proposal and to compare its performance with traditional CEP systems. We discuss the benefits and limitations of the CEP extensions presented.", "num_citations": "8\n", "authors": ["1133"]}
{"title": "Formalizing ODP computational viewpoint specifications in Maude\n", "abstract": " The ODP computational viewpoint describes the functionality of a system and its environment, in terms of a configuration of objects which interact at interfaces. Computational objects provide a functional decomposition of the system, independently of its distribution. Although several notations have been proposed to model this ODP viewpoint, either they are not expressive enough to faithfully represent all its concepts, or they tend to suffer from a lack of formal support. We explore the use of Maude as a formal notation for writing ODP computational viewpoint specifications. Maude is an executable rewriting logic language specially well suited for the specification of object-oriented open and distributed systems. We show how Maude offers a simple, natural, and accurate way of modelling the ODP computational viewpoint concepts, allows the execution of the specifications produced, and offers good tool support for\u00a0\u2026", "num_citations": "8\n", "authors": ["1133"]}
{"title": "Using physical quantities in robot software models\n", "abstract": " One of the challenges of modeling any software application that deals with real-world physical systems resides in the correct representation of numerical values and their units. This paper shows how both measurement uncertainty and units can be effectively incorporated into software models, becoming part of their basic type systems, and illustrates this approach in the particular case of a robot language. We show how our approach allows robot modelers to safely represent and manipulate units and measurement uncertainties of the robots and their elements in a natural manner, statically ensuring unit-safe assignments and operations, as well as the propagation of uncertainty in the computations of derived attributes and operations.", "num_citations": "7\n", "authors": ["1133"]}
{"title": "Tractstool: Testing model transformations based on contracts\n", "abstract": " Model transformations play an important role in Model-Driven Engineering (MDE), and as their size and complexity grow, there is an increasing need to count on tool support for testing their correctness. In this work, we present TractsTool, a tool for specifying and testing several different kinds of model transformations, e.g., model-to-model, model-to-text, and text-to-model transformations, based on contracts.", "num_citations": "7\n", "authors": ["1133"]}
{"title": "A tool for the model-based specification of open distributed systems\n", "abstract": " As the complexity of open distributed systems grows, the need to rely on concepts and notations for expressing and structuring their specifications becomes essential. However, having concepts and notations is not enough. The large size and complexity of the set of models that constitute the system specifications also forces the need to have tools for properly creating, handling, validating and maintaining these large models. This paper presents xODP, a tool for the model-based specification of open distributed systems according to the Reference Model of Open Distributed Processing (RM-ODP) standards. Using the UML4ODP notation, it provides edition and validation facilities for ODP viewpoint models and for the correspondences between them, as well as early prototyping and execution of the ODP computational models.", "num_citations": "6\n", "authors": ["1133"]}
{"title": "Theory and Practice of Model Transformations: First International Conference, ICMT 2008, ETH Z\u00fcrich, Switzerland, July 1-2, 2008, Proceedings\n", "abstract": " Models have become essential for dealing with the numerous aspects involved in developing and maintaining complex IT systems. Models allow capturing of the relevant aspects of a system from a given perspective, and at a precise level of abstraction. In addition to models, the transformations between them are other key elements in model-driven engineering. Model transformations allow the de? nition and implementation of the operations on models, and also provide achainthatenablestheautomateddevelopmentofasystemfromitscorrespo-ing models. Furthermore, model transformations may be realized using models, and are, therefore, an integral part of any model-driven approach. There are already several proposals for model transformation speci? cation, implementation and execution, which are beginning to be used by modeling practitioners. However, model transformations need specialized support in s-eral aspects in order to realize their full potential. The problem goes beyond having speci? c languages to represent model transformations; we also need to understandtheirfoundations, suchasthekeyconceptsandoperatorssupporting those languages, their semantics, and their structuring mechanisms and pr-erties (eg, modularity, composability and parametrization). In addition, model transformations can be stored in repositories as reusable assets, where they can be managed, discovered and reused. There is also a need to chain and combine model transformations in order to produce new and more powerful transfor-tions, and to be able to implement new operations on models. Finally, model transformations need methodology\u00a0\u2026", "num_citations": "6\n", "authors": ["1133"]}
{"title": "Special issue on model transformation\n", "abstract": " This paper introduces the special issue on model transformations. The objective of this special issue is to provide a representative sample of advanced research being carried out in the emergent field of model transformation. The papers contained in this special issue provide an overview of current open issues and identify potential lines for further research. They contribute in different respects to the area of model transformation, from its foundations to the potential benefits it may bring to the emergent field of Model-Driven Engineering.", "num_citations": "6\n", "authors": ["1133"]}
{"title": "Specifying reusable controllers for software components\n", "abstract": " The design of components for open and distributed systems is challenging the software community with its specific problems. One of the current approaches is based on a reflective model that uses standard, independent, composible meta-components (controllers) to coordinate components and modify their behavior according to the user. requirements. However, this approach still has some pending issues, like the definition of design methodologies that lead to reusable and composible components and controllers, and the use of formal tools to reason about the correctness of the composed applications. This paper presents a formal framework in Object-Z for specifying reusable controllers, based on a component model for this kind of systems. The basic mechanisms of the model are formalized, together with the concepts and methods that allow developers of the controllers to prove their correctness\u00a0\u2026", "num_citations": "6\n", "authors": ["1133"]}
{"title": "Teaching model views with UML and OCL\n", "abstract": " The specification of any non-trivial system is normally composed of a set of models. Each model describes a different view of the system, focuses on a particular set of concerns, and uses its own notation. For example, UML defines a set of diagrams for modelling the structure and behavior of any software system. One of the problems we perceived with our students is that they are able to understand each one of these diagrams, but they have problems understanding how they are related, and how the overall system specifications work when composed of a set of views. This paper presents a simple case study that we have developed and successfully used in class, which permits students developing the principal views of a system, simulate them, and check their relations.", "num_citations": "5\n", "authors": ["1133"]}
{"title": "Requirements for ODP enterprise architecture tools\n", "abstract": " An important issue to the adoption of any enterprise architectural approach is the availability of tools to support the development, storage, presentation, analysis, improvement and evolution of enterprise architecture representations. As with enterprise architecture methodologies, enterprise architecture tools to support the architectural development process are still emerging. Most important software vendors (e.g., Rational, BEA, IBM, etc.) are investing in the development of large EA tools, mainly focused on their own frameworks or on well-known architectural proposals, such as TOGAF or FEAF. In this paper we identify an initial list of requirements that any tool for EA using RM-ODP should fulfill, as a first step towards the development of the appropriate ODP-Enterprise Architecture tools.", "num_citations": "5\n", "authors": ["1133"]}
{"title": "Software development from reusable components and controllers\n", "abstract": " The design of components for open and distributed systems is challenging the software community with its specific problems. One of the current approaches is based on a reflective model that uses standard, independent, composible meta-components (controllers) to coordinate components and modify their behavior according to the user requirements. This paper introduces a methodology for the development of such controllers, based on a systematic process that produces several outcomes, from their formal specifications to their implementation.", "num_citations": "5\n", "authors": ["1133"]}
{"title": "(An Example for) Formally Modeling Robot Behavior with UML and OCL\n", "abstract": " One of the problems that the design and development of robotic applications currently have is the lack of unified formal modeling notations and tools that can address the many different aspects of these kinds of applications. This paper presents a small example of a chain of robotized arms that move parts in a production line, modeled using a combination of UML and OCL. We show the possibilities that these high-level notations provide to describe the structure and behaviour of the system, to model some novel aspects such as measurement uncertainty and tolerance of physical elements, and to perform several kinds of analyses.", "num_citations": "4\n", "authors": ["1133"]}
{"title": "Towards tracking\" guilty\" transformation rules: a requirements perspective\n", "abstract": " Several approaches for specifying the requirements for model transformations have been proposed. Most of them define constraints on source and target models as well as on the relationships between them. A major advantage of these approaches is their independence from transformation implementation languages and transformation implementations. However, when these constraints are used for testing, identifying the model transformation rules that violate the constraints is not possible. In this paper we present an approach for automatically aligning specifications of model transformations and their implementations. Matching functions establish these alignments based on the used metamodel elements in the constraints and rules. We present our first results and outline further use cases where an alignment between constraints and rules is beneficial.", "num_citations": "4\n", "authors": ["1133"]}
{"title": "Searching and matching software components with multiple interfaces\n", "abstract": " Currently there is an increasing interest in the use of COTS components for building software applications. Component search and service matching are two of the issues involved in this process. Traditional proposals to deal with these problems are based on the simplistic assumption that components present only one interface with the services they offer, and that matching is done on a one-to-one basis. This work presents an extension of those approaches in which components offer several interfaces, and not only their supported services are contemplated, but also the external services they may require from other components to operate. In this context, some of the traditional component operators are extended\u2013composition, substitutability, and equivalence\u2013so they can deal with multiple interfaces. In addition, the problems arising in this new setting are discussed, and some of the possible solutions presented.", "num_citations": "4\n", "authors": ["1133"]}
{"title": "Extending OCL with Subjective Logic.\n", "abstract": " The logic of the UML and OCL modeling languages is based on crisp values, eg, true or false. However, when modeling systems that work in physical environments or where human actors are involved, different users may have subjective opinions about the reality that they perceive, and thus may need to assign different levels of confidence to the logic predicates of the models. These different views, or opinions, may also be subject to uncertainty when there is a lack of knowledge about the system, adding the dimension of ignorance to the traditional belief-disbelief dichotomy. This paper proposes an extension of the OCL/UML datatype Boolean that enables the representation of subjective uncertain opinions, together with a set of logical operators for reasoning with uncertain propositions in order to reach better informed decisions. The proposal has been implemented as an extension of the UML-based Specification Environment (USE) tool, and validated with several applications and case studies.", "num_citations": "3\n", "authors": ["1133"]}
{"title": "On softening OCL invariants\n", "abstract": " Invariants play a crucial role in system development. This contribution focuses on invariants in systems with so-called occurrence uncertainty, where we are interested in deciding whether a certain population (a set of instances of a class model) of the system satisfies an invariant or not, but we are unsure about the actual occurrence of the elements of that population, and also about the degree of satisfaction that is actually required for the invariant to be fulfilled. Invariants are soft in the sense that they are required to hold only for a particular, and a priori uncertain, percentage of the population. The contribution proposes a systematic approach to occurrence uncertainty and a prototypical implementation for models with uncertainty and soft invariants allowing to build system states and to make experiments with them.", "num_citations": "3\n", "authors": ["1133"]}
{"title": "Towards distributed model transformations with LinTra\n", "abstract": " Performance and scalability of model transformations are becoming prominent topics in Model-Driven Engineering. In previous works we introduced LinTra, a platform for executing model transformations in parallel. LinTra is based on the Linda model of a coordination language and is intended to be used as a middleware where high-level model transformation languages are compiled. In this paper we present the initial results of our analyses on the scalability of out-place model-to-model transformation executions in LinTra when the models and the processing elements are distributed over a set of machines.", "num_citations": "3\n", "authors": ["1133"]}
{"title": "Iterative Development of Transformation Models by Using Classifying Terms.\n", "abstract": " In this paper we propose an iterative process for the correct specification of model transformations, ie, for developing correct transformation models. This permits checking the correctness of a model transformation specification before any implementation is available. The proposal is based on the use of classifying terms for partitioning the input space and for simplifying the testing process.", "num_citations": "3\n", "authors": ["1133"]}
{"title": "A domain specific visual language for modeling power-aware reliability in wireless sensor networks\n", "abstract": " Reliability is an attribute that appears in all quality models, so it is important to take it into account when developing any kind of system. Its evaluation at latter stages of the software development may force the re-engineering of important parts of the system, something very costly. This is why it should be raised to the system design phase. Among the systems where reliability is a crucial issue, some wireless sensor network (WSN) protocols aim to extend the networks lifetime as much as possible, so a more reliable network will live longer. Following a model-driven engineering (MDE) approach, we propose the use of domain specific visual languages (DSVLs) to model the reliability of systems based on components by means of in-place behavioral rules and by modeling how the state of the components changes. We have developed as well a DSVL for modeling and analyzing reliability properties of a WSN protocol\u00a0\u2026", "num_citations": "3\n", "authors": ["1133"]}
{"title": "On explaining modeling principles with modeling examples: a classification catalog\n", "abstract": " Examples are of central concern in teaching modeling. Typically, the general principles and concepts that have to be communicated are explained in terms of smaller or larger modeling examples with the hope that the examples cover the central issues of the principles and concepts well. The paper discusses a classification catalogue for examples along various criteria like syntax, semantics, pragmatics, complexity or evolution. The aim of the paper is to encourage the teaching with examples exhausting the possible spectrum of example use.", "num_citations": "3\n", "authors": ["1133"]}
{"title": "Special track on model transformation (MT 2006)\n", "abstract": " We are witnessing an increasing interest in the Software Engineering community towards the use of models for developing software systems. Shifting intellectual property and business logic from source code into models, allows organizations to focus on the important aspects of their systems, which have traditionally been blurred by the usage of standard programming languages and underlying technologies.", "num_citations": "3\n", "authors": ["1133"]}
{"title": "Reflexiones sobre la definici\u00f3n de m\u00e9tricas para software orientado a aspectos\n", "abstract": " En este trabajo presentamos una serie de reflexiones entorno a la definici\u00f3n de m\u00e9tricas que puedan resultar de utilidad en el Desarrollo de Software Orientado a Aspectos. Partiendo de los est\u00e1ndares internacionales de calidad del software, se plantean algunas ideas acerca de la utilidad de las m\u00e9tricas para los desarrolladores software y se sugieren algunos ejemplos de las mismas.", "num_citations": "3\n", "authors": ["1133"]}
{"title": "Modeling Behavioral Deontic Constraints Using UML and OCL\n", "abstract": " Business rules specify the required or desirable states of affairs or behavior of IT systems, and typically involve deontic constraints that must be adequately specified to enable their appropriate representation and effective analysis. Such deontic constraints focus on the permitted actions and obligations of the agents to carry them out. In this paper we present a proposal to explicitly specify dynamic deontic constraints in UML and OCL so that, on the one hand, they can guide and restrict the system behavior and, on the other hand, allow us to reason about such deontic behavior, including accountability analysis.", "num_citations": "2\n", "authors": ["1133"]}
{"title": "Improving query performance on dynamic graphs\n", "abstract": " Querying large models efficiently often imposes high demands on system resources such as memory, processing time, disk access or network latency. The situation becomes more complicated when data are highly interconnected, e.g. in the form of graph structures, and when data sources are heterogeneous, partly coming from dynamic systems and partly stored in databases. These situations are now common in many existing social networking applications and geo-location systems, which require specialized and efficient query algorithms in order to make informed decisions on time. In this paper, we propose an algorithm to improve the memory consumption and time performance of this type of queries by reducing the amount of elements to be processed, focusing only on the information that is relevant to the query but without compromising the accuracy of its results. To this end, the reduced subset of data is\u00a0\u2026", "num_citations": "2\n", "authors": ["1133"]}
{"title": "Trading Accuracy for Performance in Data Processing Applications.\n", "abstract": " Applications that need to process large volumes of data to make informed decisions, such as stream processing systems or those dealing with social networks, usually impose strong requirements on resources like memory, processing time, disk or network latency. One approach to address this problem is to reduce the amount of data to be processed, at the cost of decreasing the confidence on the results. Estimating the errors of such approximate solutions becomes a critical issue. In this paper, we explore different approximation possibilities depending on how the data is organized, and what information needs to be obtained from them. We propose an approach to estimate the accuracy of these approximate solutions in the context of data processing systems, in terms of the precision and recall of the results obtained. A case study is used to validate the proposal and to evaluate the performance of different types of approximations.", "num_citations": "2\n", "authors": ["1133"]}
{"title": "Static analysis of complex event processing programs\n", "abstract": " Complex Event Processing (CEP) provides a mechanism to efficiently correlate and infer conclusions about systems by means of analyzing the events they process. In areas such as the Internet of Things (IoT), Cyber Physical Systems (CPS), system monitoring or data streaming analytics, CEP is able to read events from a data stream and to generate complex events that represent situations of interest to the system owner by means of event patterns. Every time a sequence of events matches a pattern, a complex event is created and added to the data stream. The dependencies among the rules and the possibility of non-confluent behavior of CEP rulebased systems may lead to unexpected outputs when executing CEP programs. In this work, we show how to statically check and correct two particular properties of CEP systems: rule acyclicity and rule race conditions. We use Esper EPL as a CEP language, and present a tool we have developed to perform these analyses.", "num_citations": "2\n", "authors": ["1133"]}
{"title": "Model Finding and Model Completion with USE.\n", "abstract": " This short contribution demonstrates central options in the tool USE (Uml-based Specification Environment) for exploring UML models within software development. It particularly uses so-called classifying OCL terms for building validation and verification scenarios and for completing partial models. The contribution demonstrates the tool\u2019s options with an example: statecharts together with a simple syntax model and a model for capturing finite fractions of the statechart semantics.", "num_citations": "2\n", "authors": ["1133"]}
{"title": "Prototyping component-based self-adaptive systems with Maude\n", "abstract": " Software adaptation is becoming increasingly important as more and more applications need to dynamically adapt their structure and behavior to cope with changing contexts, available resources and user requirements. Maude is a high-performance reflective language and system, supporting both equational and rewriting logic specification and programming for a wide range of applications. In this paper we describe our experience in using Maude for prototyping component-based self-adaptive systems so that they can be formally simulated and analyzed. In order to illustrate the benefits of using Maude in this context, a case study in the robotics domain is presented.", "num_citations": "2\n", "authors": ["1133"]}
{"title": "A Domain Specific Visual Language for Modeling Power-Aware Reliability in Wireless Sensor Networks (Extended version)\n", "abstract": " Reliability is an attribute that appears in all quality models, so it is important to take it into account when developing any kind of system. Its evaluation at latter stages of the software development may force the re-engineering of important parts of the system, something very costly. This is why it should be raised to the system design phase. Among the systems where reliability is a crucial issue, some wireless sensor network (WSN) protocols aim to extend the networks lifetime as much as possible, so a more reliable network will live longer. Following a model-driven engineering (MDE) approach, we propose the use of domain specific visual languages (DSVLs) to model the reliability of systems based on components by means of in-place behavioral rules and by modeling how the state of the components changes. We have developed as well a DSVL for modeling and analyzing reliability properties of a WSN protocol based on local information, namely directional source-aware routing protocol (DSAP).", "num_citations": "2\n", "authors": ["1133"]}
{"title": "Objects, Components, Models, Patterns: 49th International Conference, TOOLS 2011, Zurich, Switzerland, June 28-30, 2011, Proceedings\n", "abstract": " This book constitutes the refereed proceedings of the 49th International Conference on Objects, Models, Components, Patterns, held in Zurich, Switzerland, in June 2011. The 19 revised full papers presented together with the abstracts of 2 invited papers were carefully reviewed and selected from a total of 68 submissions. The papers discuss all aspects of object technology and related fields, in particular model-based development, component-based development, language implementation and patterns, in a holistic way. The conference has a strong practical bias, without losing sight of the importance of correctness and performance.", "num_citations": "2\n", "authors": ["1133"]}
{"title": "On the Synchronization of ODP Textual and Graphical Specifications\n", "abstract": " There are both advantages and disadvantages of using visual and textual notations for expressing large system specifications. Each kind of notation seems to be more apt for expressing and managing some aspects, and there is no clear winner. A solution can be the use of both styles, with synchronization mechanisms that always keep them in synch. In this paper we present an initial proposal for the use of both textual and graphical specifications of ODP systems, and their automated synchronization. The proposal is supported by a tool that has been developed to synchronize the models developed by the Magic Draw plug in for ODP and a textual version of a subset of the ODP viewpoint languages.", "num_citations": "2\n", "authors": ["1133"]}
{"title": "Model transformation\n", "abstract": " Abstract not available.", "num_citations": "2\n", "authors": ["1133"]}
{"title": "On the execution of ODP computational specifications\n", "abstract": " The ODP computational viewpoint allows the description of the functional decomposition of a system and its environment in terms of configurations of objects that interact at interfaces. RM-ODP does not prescribe any concrete notation for describing this viewpoint, which hinders the development and use of tools for writing, analyzing and executing ODP computational specifications. Thus, several authors have proposed either formal or visual languages to describe this ODP viewpoint. However, the former notations are complex and lack industrial support, while the latter do not count with proper tools for executing and analyzing the specification produced. In this paper, we explore the use of model transformation techniques to establish a connection between UML models and Maude formal specifications of the ODP computational viewpoint, in order to obtain the best of both worlds.", "num_citations": "2\n", "authors": ["1133"]}
{"title": "Modeling the ODP computational viewpoint with UML 2.0: The templeman library example\n", "abstract": " The advent of UML 2.0 has provided a new set of concepts more apt for modeling the structure and behavior of distributed systems. These concepts and mechanisms can be effectively used for representing the ODP concepts, in particular those from the Computational Viewpoint. In this paper we present an example that uses the UML 2.0 profile for the ODP computational viewpoint to illustrate its benefits and limitations.", "num_citations": "2\n", "authors": ["1133"]}
{"title": "Usability Indicators for Software Components\n", "abstract": " One of the most critical processes of Component-based Software Development (CBSD) is the selection of the set of components (either from inhouse or from external repositories) that fulfil the appropriate architectural and user-defined requirements. This process opens the need to count with objective methods that help developers evaluate the components. This paper presents a set of measures and indicators to assess one quality characteristic, the Usability, of great importance to any software product, and describes the method followed to obtain and validate them.", "num_citations": "2\n", "authors": ["1133"]}
{"title": "Describing Specifications and architectural requirements of COTS components\n", "abstract": " Currently there is an increasing interest in the use of COTS components for building software applications. One of the key aspects in the construction of COTS-based applications is the definition of software architecture prototypes from visual notations and reusable components (commercial components). These specifications must comply with some related aspects of COTS components, such as the quality of service (QoS), or the non-functional and functional information of the component. However, the possible benefits of COTS software architecture development, such as low cost, low risk, and high quality, cannot be satisfactorily achieved due to inadequate and/or incomplete proposals for commercial component, specification and architecture definition. This chapter discusses an approach for describing specifications and architectural requirements of COTS components. It uses an extended UML-RT notation by\u00a0\u2026", "num_citations": "2\n", "authors": ["1133"]}
{"title": "Modeling objects with uncertain behaviors\n", "abstract": " Modeling the behavior of complex systems that operate in real environments, deal with physical elements, or interact with humans is a challenging task. It involves the explicit representation of aspects of behavioral uncertainty that are inherent in the system, but generally neglected in software models. In this paper, we focus on the explicit representation of the behavior of objects of complex systems, considering their motivations, randomness, and the different types of underlying uncertainty that affect their actions. We show how such uncertain behaviors can be effectively modeled in UML and OCL, and how the specifications produced can be used to simulate and analyze these systems.", "num_citations": "1\n", "authors": ["1133"]}
{"title": "Native Support for UML and OCL Primitive Datatypes Enriched with Uncertainty in USE.\n", "abstract": " Measurement uncertainty, an essential property of any physical system, is gaining attention in the modeling community due to the need to specify these kinds of system properties. Some notations already provide support for representing this information, but there is also the need to count on tools with native support for datatypes enriched with measurement uncertainty, able to manage it in a natural and transparent manner. This paper describes the extension that we have developed for the tool UML-based Specification Environment (USE) for supporting the primitive UML/OCL datatypes with uncertainty information.", "num_citations": "1\n", "authors": ["1133"]}
{"title": "Generating effective test suites for model transformations using classifying terms.\n", "abstract": " Generating sample models for testing a model transformation is no easy task. This paper explores the use of classifying terms and stratified sampling for developing richer test cases for model transformations. Classifying terms are used to define the equivalence classes that characterize the relevant subgroups for the test cases. From each equivalence class of object models, several representative models are chosen depending on the required sample size. We compare our results with test suites developed using random sampling, and conclude that by using an ordered and stratified approach the coverage and effectiveness of the test suite can be significantly improved.", "num_citations": "1\n", "authors": ["1133"]}
{"title": "Representing ODP enterprise language deontic tokens in UML\n", "abstract": " The ODP Enterprise Language is used to describe the organizational objectives and policies that apply to some system to be specified. It also captures constraints associated with the environment in which the system is to be used. Because the enterprise specification is concerned more with organizational issues than technical details of the system, there is considerable emphasis on obligations and norms, rather than on the declaration of some single rigidly required behaviour. The recently revised Enterprise Language is already able to express directly obligations and other deontic concepts, such as permissions and prohibitions. However, mapping such concepts into UML offers interesting challenges. This paper describes work currently in progress within the International Organization for Standardization (ISO) to extend the UML4ODP standard ISO/IEC 19793 for dealing with deontic concepts, and illustrates the\u00a0\u2026", "num_citations": "1\n", "authors": ["1133"]}
{"title": "Automated Throughput Optimization of Cloud Services via Model-driven Adaptation.\n", "abstract": " Cloud computing promises easy access, low entry cost and elasticity. However, elastic service provisioning is usually delivered via service replication, which must be supervised manually, hand-picking the services to replicate and ensuring their proper load balance. Automated service provisioning, ie, the function of automatically scaling the services to cope up with their runtime demand, is a research challenge in cloud computing. In this work, we include such scalability analysis early in its development cycle, right at the design stage. We propose a model-driven approach where various QoS parameters can be simulated and analyzed using the e-Motions tool. Additionally, the model is automatically transformed to fit the given throughput requirements by replicating the services which cause the bottleneck. In order to evaluate the proposal, we present some initial experimental results run over the e-Motions tool.", "num_citations": "1\n", "authors": ["1133"]}
{"title": "Modelling Foundations and Applications: 8th European Conference, ECMFA 2012, Kgs. Lyngby, Denmark, July 2-5, 2012, Proceedings\n", "abstract": " This book constitutes the refereed proceedings of the 8th European Conference on Modelling Foundations and Applications, held in Kgs. Lyngby, Denmark, in July 2012. The 20 revised full foundations track papers and 10 revised full applications track papers presented were carefully reviewed and selected from 81 submissions. Papers on all aspects of MDE were received, including topics such as architectural modelling and product lines, code generation, domain-specic modeling, metamodeling, model analysis and verication, model management, model transformation and simulation. The breadth of topics, as well as the high quality of the results presented in these accepted papers, demonstrate the maturity and vibrancy of the field.", "num_citations": "1\n", "authors": ["1133"]}
{"title": "Dise\u00f1o y Simulaci\u00f3n de Sistemas de Colas con e-Motions\n", "abstract": " Este trabajo propone el uso de un lenguaje de dominio espec \u00ed co de alto nivel y ejecutable para analizar el rendimiento de un sistema de colas implementado mediante diferentes estrategias. En concreto se utiliza un enfoque basado en el Desarrollo del Software Dirigido por Modelos (DSDM) para modelar el comportamiento del sistema de facturaci\u00f3n de una aerol\u00ednea y obtener datos relativos a su rendimiento en cuanto a costes y tiempos de espera, dependiendo de la estrategia utilizada. Para lograr ese prop\u00f3sito se utiliza e-Motions, una herramienta que permite al usuario modelar y analizar sistemas en tiempo real de forma gr\u00e1 ca.", "num_citations": "1\n", "authors": ["1133"]}
{"title": "Adapting Component-based User Interfaces at Runtime using Observers\n", "abstract": " Model-driven engineering (MDE) already plays a key role in Human-Computer Interaction for the automatic generation of end-user interfaces from their abstract and platform-independent specifications. Moreover, MDE techniques and tools are proving to be very useful for adapting at runtime the final user interfaces according to the current context properties: platform, user roles, component states, etc. In this paper we propose a mechanism to adapt user interfaces at runtime. These user interfaces will be (re) generated through the dynamic composition of user-interface software components, depending on the observed properties of the environment and of the components\u2019 behaviour.", "num_citations": "1\n", "authors": ["1133"]}
{"title": "Guest editorial to the special section on model transformation\n", "abstract": " Models have become essential for dealing with the numerous aspects involved in developing and maintaining complex IT systems. Models assist in capturing the relevant aspects of a system from a given perspective and at a precise level of abstraction. Model transformation represents a key activity in model-driven engineering by supporting the definition and implementation of the operations on models, which can provide a chain that enables the automated development of a system from its corresponding models. Furthermore, a model transformation may also be considered a model in its own right, which presents opportunities for higher-order transformations, ie, transformations that manipulate models representing other model transformations. There exist several approaches that support model transformation specification, implementation, and execution, which are beginning to be used by model engineers\u00a0\u2026", "num_citations": "1\n", "authors": ["1133"]}
{"title": "Guest editorial to the special section on model transformation\n", "abstract": " Models play a cornerstone role in Model-Driven Engineering (MDE). The use of models opens up new possibilities for creating, analyzing, and manipulating systems through various types of tools and languages. Each model usually addresses one set of related concerns, and transformations between models provide a chain that enables the automated development of a system from its corresponding models. Model transformation specification, implementation, and execution are the major parts of this process. Furthermore, model transformations may also be realized using models, and are, therefore, an integral part of a model-driven approach. Model transformations need specialized support in several aspects in order to realize their full potential for system modelers, transformation developers, and tool vendors. The problem goes beyond having specific languages to represent model transformations; we also need to understand the key concepts and operators supporting those languages, their semantics and their structuring mechanisms and properties (eg, modularity, composability, and parameterization). In addition, model transformations can be stored in repositories", "num_citations": "1\n", "authors": ["1133"]}
{"title": "Especificaci\u00f3n de descripciones arquitect\u00f3nicas multivista basada en modelos\n", "abstract": " El modelado de puntos de vista es una t\u00e9cnica muy efectiva para especificar sistemas software complejos. El resultado es un conjunto de puntos de vista independientes, centrado cada uno en un aspecto concreto del sistema y abstra\u0131do del resto, incluyendo las distintas correspondencias existentes entre ellos. As\u0131, en los \u00faltimos tiempos se est\u00e1 librando una aut\u00e9ntica batalla entre marcos arquitect\u00f3nicos fieles a esta filosof\u0131a con la finalidad de posicionarse en un mercado muy competitivo. A pesar de los esfuerzos de los organismos internacionales de estandarizaci\u00f3n por establecer un marco com\u00fan de referencia, existe gran ambig\u00fcedad en la terminolog\u0131a utilizada actualmente. Por otra parte, cada vez m\u00e1s, estos marcos, encabezados por la futura \u2018metanorma\u2019IEEE ISO/IEC Std. 42010, promueven el acercamiento de este mundo con la Ingenier\u0131a Dirigida por Modelos. En este trabajo trataremos de aclarar la terminolog\u0131a m\u00e1s relevante en este campo, clasificar las distintas propuestas arquitect\u00f3nicas disponibles y estudiar su relaci\u00f3n con el DSDM. Adem\u00e1s, presentamos un procedimiento gen\u00e9rico basado en modelos para el desarrollo de especificaciones de arquitecturas multivista con una herramienta de soporte que lo implementa, particularizada a ODP.", "num_citations": "1\n", "authors": ["1133"]}
{"title": "Algunos problemas de la generalizaci\u00f3n en el metamodelo de UML\n", "abstract": " La relaci\u00f3n de generalizaci\u00f3n es representada como una \u201crelaci\u00f3n dirigida\u201d en el metamodelo de UML. Esto corresponde a la naturaleza de la propia relaci\u00f3n en el dominio sem\u00e1ntico de la orientaci\u00f3n a objetos. No obstante, pensamos que la forma concreta que adopta en el metamodelo es incorrecta, lo cual implica una serie de inconvenientes para las herramientas de manipulaci\u00f3n de modelos que tratan de seguir fielmente el est\u00e1ndar de UML. M\u00e1s a\u00fan, pensamos que esto se debe a una forma inadecuada de entender las relaciones entre los niveles de metamodelado en OMG: realidad representada (M0), modelo (M1) y metamodelo (M2). En consecuencia, proponemos una correcci\u00f3n al metamodelo de UML que evite estos inconvenientes.", "num_citations": "1\n", "authors": ["1133"]}
{"title": "Sem\u00e1ntica visual para modelos de sistemas basados en componentes software\n", "abstract": " La creciente complejidad de las aplicaciones software complica notablemente su estudio y la posible detecci\u00f3n de errores en su dise\u00f1o o implementaci\u00f3n. Las t\u00e9cnicas de visualizaci\u00f3n son un instrumento muy v\u00e1lido para detectar o alertar sobre posibles anomal\u00edas en el dise\u00f1o de este tipo de aplicaciones, algo especialmente cr\u00edtico sobre todo cuando no se puede definir de forma precisa cu\u00e1ndo existe una \u201canomal\u00eda\u201d. Sin embargo, uno de los problemas de las t\u00e9cnicas de visualizaci\u00f3n reside en su implementaci\u00f3n, normalmente costosa, compleja y poco flexible. En este art\u00edculo mostramos c\u00f3mo es posible utilizar la ingenier\u00eda basada en modelos y las transformaciones entre modelos para implementar de forma modular, eficiente y flexible algunas herramientas de visualizaci\u00f3n de sistemas basados en componentes.", "num_citations": "1\n", "authors": ["1133"]}
{"title": "Un acercamiento a la representaci\u00f3n e implementaci\u00f3n de la diferencia entre modelos\n", "abstract": " En la Ingenier\u00eda Dirigida por Modelos (Model Driven Engineering, MDE), los modelos se convierten en los artefactos claves del desarrollo software. Estos modelos, al estar sometidos a un continuo proceso de evoluci\u00f3n, hacen que ciertas operaciones como la diferencia est\u00e9n adquiriendo cada vez m\u00e1s mayor importancia. En este art\u00edculo proponemos el uso de Maude como una notaci\u00f3n formal para la descripci\u00f3n de modelos y metamodelos, e implementamos en \u00e9l una definici\u00f3n de la diferencia entre modelos (y sus correspondientes operaciones) independiente del metamodelo al cual sean conformes.", "num_citations": "1\n", "authors": ["1133"]}
{"title": "Una metodolog\u00eda para el desarrollo de software basado en COTS\n", "abstract": " Uno de los objetivos tradicionales de la ingenier\u00eda del software ha sido la necesidad de desarrollar sistemas software mediante el ensamblaje de m\u00f3dulos independientes software. En este sentido, los componentes software reutilizables han jugado un papel importante. Por otro lado, est\u00e1n apareciendo un gran n\u00famero de trabajos que hacen uso de componentes comerciales\u2013tambi\u00e9n llamados COTS\u2013en las fases de desarrollo de un sistema software. Uno de los problemas que presenta este tipo de componente es que, por regla general, carece de informaci\u00f3n suficiente para que puedan ser tratados en procesos autom\u00e1ticos de b\u00fasqueda de componentes desde repositorios, para su composici\u00f3n respetando la arquitectura de la aplicaci\u00f3n software. Adem\u00e1s, tampoco existen metodolog\u00edas conocidas que ayuden en estas tareas de composici\u00f3n. En este trabajo se presenta una metodolog\u00eda a nivel global para\u00a0\u2026", "num_citations": "1\n", "authors": ["1133"]}
{"title": "Sobre la b\u00fasqueda y emparejamiento componentes COTS con m\u00faltiples interfaces\n", "abstract": " Actualmente existe un inter\u00e9s creciente por los procesos de b\u00fasqueda y emparejamiento de componentes COTS para construir con ellos aplicaciones software. Sin embargo, estos procesos siempre se han planteado desde una perspectiva simplista, en donde los componentes presentan una sola interfaz con los servicios que estos ofrecen, y en donde el emparejamiento se produce 1 a 1. Este trabajo aborda una extensi\u00f3n de dichos estudios a un \u00e1mbito m\u00e1s general, en el cual los componentes ofrecen varias interfaces, como suele suceder en las aplicaciones reales. En este contexto, se extienden los t\u00edpicos operadores de composici\u00f3n, reemplazabilidad y compatibilidad de componentes para trabajar con m\u00faltiples interfaces. Tambi\u00e9n, se estudian soluciones a ciertos problemas que aparecen al construir aplicaciones con este tipo de componentes.", "num_citations": "1\n", "authors": ["1133"]}