{"title": "A systematic analysis of software architecture visualization techniques\n", "abstract": " The visualization of software systems allows a software developer to build a mental model of the program supporting her to better understand its design and functionality. This research aims at studying current visualization techniques and practices to propose a set of principles for designing effective software architecture visualization techniques, focusing on their support for program comprehension. The research will be carried out in three main phases. First, we will complement current works by proposing a taxonomy of visualization techniques. The second contribution will be to identify different requirements and characteristics of architecture visualization techniques. Finally, to evaluate software visualization's usability and effectiveness in practice, we will measure the performance of developers in terms of their percentage of the correct answers and effort developers spend to answer given questions. To compute\u00a0\u2026", "num_citations": "18\n", "authors": ["2156"]}
{"title": "Extending the UML metamodel to provide support for crosscutting concerns\n", "abstract": " Aspect-orientation is a term used to describe approaches that explicitly capture, model and implement crosscutting concerns (or aspects). There is currently a number of new programming languages as well as extensions to current programming languages, the design dimensions of most of which have been influenced by the AspectJ language through three concepts and their respective constructs, namely join points, point cuts and advice which can support two principles recognized as being key concepts of aspect-oriented programming (AOP): quantification and obliviousness. At the modeling level, the reception of AOP has long been focused on the modeling of AspectJ programs, and there exists no model that is generic enough to capture non-AspectJ aspects either as a source language during forward engineering or as a target language during reverse engineering. In this paper, we present an extension to the\u00a0\u2026", "num_citations": "11\n", "authors": ["2156"]}
{"title": "Biases and differences in code review using medical imaging and eye-tracking: genders, humans, and machines\n", "abstract": " Code review is a critical step in modern software quality assurance, yet it is vulnerable to human biases. Previous studies have clarified the extent of the problem, particularly regarding biases against the authors of code, but no consensus understanding has emerged. Advances in medical imaging are increasingly applied to software engineering, supporting grounded neurobiological explorations of computing activities, including the review, reading, and writing of source code. In this paper, we present the results of a controlled experiment using both medical imaging and also eye tracking to investigate the neurological correlates of biases and differences between genders of humans and machines (eg, automated program repair tools) in code review. We find that men and women conduct code reviews differently, in ways that are measurable and supported by behavioral, eye-tracking and medical imaging data. We\u00a0\u2026", "num_citations": "2\n", "authors": ["2156"]}
{"title": "Toward an Objective Measure of Developers\u2019 Cognitive Activities\n", "abstract": " Understanding how developers carry out different computer science activities with objective measures can help to improve productivity and guide the use and development of supporting tools in software engineering. In this article, we present two controlled experiments involving 112 students to explore multiple computing activities (code comprehension, code review, and data structure manipulations) using three different objective measures including neuroimaging (functional near-infrared spectroscopy (fNIRS) and functional magnetic resonance imaging (fMRI)) and eye tracking. By examining code review and prose review using fMRI, we find that the neural representations of programming languages vs. natural languages are distinct. We can classify which task a participant is undertaking based solely on brain activity, and those task distinctions are modulated by expertise. We leverage insights from the\u00a0\u2026", "num_citations": "1\n", "authors": ["2156"]}
{"title": "Eyes on Code: A Study on Developers Code Navigation Strategies\n", "abstract": " What code navigation strategies do developers use and what mechanisms do they employ to find relevant information Do their strategies evolve over the course of longer tasks Answers to these questions can provide insight to educators and software tool designers to support a wide variety of programmers as they tackle increasingly-complex software systems. However, little research to date has measured developers' code navigation strategies in ecologically-valid settings or analyzed how strategies progressed throughout a maintenance task. We propose a novel experimental design that more accurately represents the software maintenance process in terms of software complexity and IDE interactions. Using this framework, we conduct an eye-tracking study (n=36) of realistic bug-fixing tasks, dynamically and empirically identifying relevant code areas. We introduce a three-phase model to characterize developers\u00a0\u2026", "num_citations": "1\n", "authors": ["2156"]}
{"title": "Trustworthiness Perceptions in Code Review: An Eye-tracking Study\n", "abstract": " Background: Automated program repair and other bug-fixing approaches are gaining attention in the software engineering community. Automation shows promise in reducing bug fixing costs. However, many developers express reluctance about accepting machine-generated patches into their codebases.Aims: To contribute to the scientific understanding and the empirical investigation of human trust and perception with regards to automation in software maintenance.Method: We design and conduct an eye-tracking study investigating how developers perceive trust as a function of code provenance (ie, author or source). We systematically vary provenance while controlling for patch quality.Results: In our study of ten participants, overall visual code scanning and the distribution of attention differed across identical code patches labeled as human-vs. machine-written. Participants looked more at the source code for\u00a0\u2026", "num_citations": "1\n", "authors": ["2156"]}
{"title": "Model Based Blobal Image Registration.\n", "abstract": " In this paper, we propose a model-based image registration method capable of detecting the true transformation model between two images. We incorporate a statistical model selection criterion to choose the true underlying transformation model. Therefore, the proposed algorithm is robust to degeneracy as any degeneracy is detected by the model selection component. In addition, the algorithm is robust to noise and outliers since any corresponding pair that does not undergo the chosen model is rejected by a robust fitting method adapted from the literature. Another important contribution of this paper is evaluating a number of different model selection criteria for image registration task. We evaluated all different criteria based on different levels of noise. We conclude that CAIC and GBIC slightly outperform other criteria for this application. The next choices are GIC, SSD and MDL. Finally, we create panorama images using our registration algorithm. The panorama images show the success of this algorithm.", "num_citations": "1\n", "authors": ["2156"]}