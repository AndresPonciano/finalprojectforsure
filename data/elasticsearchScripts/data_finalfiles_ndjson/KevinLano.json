{"title": "The B language and method: a guide to practical formal development\n", "abstract": " B is one of the few formal methods which has robust, commercially-available tool support for the entire development lifecycle from specification through to code generation. This volume provides a comprehensive introduction to the B Abstract Machine Notation, and to how it can be used to support formal specification and development of high integrity systems. A strong emphasis is placed on the use of B in the context of existing software development methods, including object-oriented analysis and design. The text includes a large number of worked examples, graduated exercises in B AMN specification and development (all of which have been class-tested), two extended case studies of the development process, and an appendix of proof techniques suitable for B. Based on material which has been used to teach B at postgraduate and undergraduate level, this volume will provide invaluable reading a wide range of people, including students, project technical managers and workers, and researchers with an interest in methods integration and B semantics.", "num_citations": "293\n", "authors": ["579"]}
{"title": "Formal object-oriented development\n", "abstract": " Formal Object-Oriented Development provides a comprehensive overview of the use of formal object-oriented methods; it covers how and where they should be introduced into the development process, how they can be introduced selectively for critical parts of an application, and how to incorporate them effectively into existing deveopmental practices. The text is extensively illustrated, both with tutorial and self-assessment excercises and with examples of industrial applications from the reactive systems domain. This book will be of interest to academic and industrial researchers, software engineering practitioners and consultants, and will also provide invaluable reading material for students learning Z++ and VDM++.", "num_citations": "186\n", "authors": ["579"]}
{"title": "Object-oriented specification case studies\n", "abstract": " Object-oriented specification case studies | Guide books ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksObject-oriented specification case studies ABSTRACT No abstract available. Index Terms 1.Object-oriented specification case studies 1.Software and its engineering 1.Software creation and management 1.Designing software 1.Requirements analysis 2.Software notations and tools 1.General programming languages 1.Language types 1.Object oriented languages Comments Login options Check if you have access through your login credentials or your institution to get full access on this article. Sign in Full Access Get this \u2026", "num_citations": "186\n", "authors": ["579"]}
{"title": "Z++, an object-orientated extension to Z\n", "abstract": " This paper defines an object-orientated extension, Z                                            ++                 , to the popular specification language Z [24]. This extension makes explicit the known ob jectorientated characteristics of Z specifications and allows more complex forms of inheritance and views of specifications, as well as multi-levelled specifications. These encourage a healthy separation between implementation levels in systems, thus making modification and development of systems easier. We give examples of the use of the language, and describe related tools for interactive refinement and maintenance of systems written using this notation.", "num_citations": "134\n", "authors": ["579"]}
{"title": "Specification in B: An introduction using the B toolkit\n", "abstract": " This book gives a practical introduction to the B specification language and method, an approach to the development of high-quality software using rigorous CASE techniques. It is suitable for both undergraduate and postgraduate courses, in addition to being an introduction for industrial practitioners. Extensive examples of all development life-cycle stages are given, including animation, proof, design and code generation in C. Two large case studies and exercises with solutions are provided. The authors have extensive experience in teaching B and in its industrial application to high integrity systems. The book uses the B Toolkit to support the text, but it is also relevant to users of alternative toolsets for B.", "num_citations": "124\n", "authors": ["579"]}
{"title": "UML to B: Formal verification of object-oriented models\n", "abstract": " The integration of UML and formal methods such as B and SMV provides a bridge between graphical specification techniques usable by mainstream software engineers, and precise analysis and verification techniques, essential for the development of high integrity and critical systems. In this paper we define a translation from UML class diagrams into B, which is used to verify the consistency of UML models and to verify that expected properties of these models hold.", "num_citations": "103\n", "authors": ["579"]}
{"title": "Creating specifications from code\n", "abstract": " Reverse-engineering application codes back to the design and speci cation stage may entail the recreation of lost information for an application, or the extraction of new information. We describe techniques which produce abstractionsin object-oriented and functional notations, thus aiding the comprehension of the essential structure and operations of the application, and providing formal design information which may make the code much more maintainable and certainly more respectable.", "num_citations": "89\n", "authors": ["579"]}
{"title": "UML 2 semantics and applications\n", "abstract": " A coherent and integrated account of the leading UML 2 semantics work and the practical applications of UML semantics development With contributions from leading experts in the field, the book begins with an introduction to UML and goes on to offer in-depth and up-to-date coverage of: The role of semantics Considerations and rationale for a UML system model Definition of the UML system model UML descriptive semantics Axiomatic semantics of UML class diagrams The object constraint language Axiomatic semantics of state machines A coalgebraic semantic framework for reasoning about interaction designs Semantics of activity diagrams Verification of UML models State invariants Model transformation specification and verification Additionally, readers are provided with expert guidance on how to resolve semantic problems and a section on applications of UML semantics with model analysis. UML 2 Semantics and Applications is an ideal resource for researchers and tool-builders working in UML, among others. It is also an excellent textbook for postgraduate teaching and research.", "num_citations": "75\n", "authors": ["579"]}
{"title": "Formalising design patterns\n", "abstract": " This paper views  design patterns  [5] as a transformation from a \u201cbefore\u201d system consisting of a set of classes (often a single unstructured class) into an \u201cafter\u201d system consisting of a collection of classes organised by the pattern. To prove that these transformations are formal refinements, we adopt a version of the Object Calculus [4] as a semantic framework. We make explicit the conditions under which these transformations are formally correct. We give some additional design pattern transformations which have been termed \u201cannealing\u201d in the VDM++ world, which include the introduction of concurrent execution into an initially sequential system. We show that these design patterns can be classified on the basis of a small set of fundamental transformations which are reflected in the techniques used in the proof of their correctness.", "num_citations": "72\n", "authors": ["579"]}
{"title": "Model-transformation design patterns\n", "abstract": " This paper defines a catalogue of patterns for the specification and design of model transformations, and provides a systematic scheme and classification of these patterns, together with pattern application examples in leading model transformation languages such as ATL, QVT, GrGen.NET, and others. We consider patterns for improving transformation modularization and efficiency and for reducing data storage requirements. We define a metamodel-based formalization of model transformation design patterns, and measurement-based techniques to guide the selection of patterns. We also provide an evaluation of the effectiveness of transformation patterns on a range of different case studies.", "num_citations": "70\n", "authors": ["579"]}
{"title": "Semantics and transformations for UML models\n", "abstract": " This paper presents a semantic framework for a large part of UML, and gives a set of transformations on UML models based on this semantics. These transformations can be used to enhance, rationalise, refine or abstract UML models.", "num_citations": "65\n", "authors": ["579"]}
{"title": "Evaluation of model transformation approaches for model refactoring\n", "abstract": " This paper provides a systematic evaluation framework for comparing model transformation approaches, based upon the ISO/IEC 9126-1 quality characteristics for software systems. We apply this framework to compare five transformation approaches (QVT-R, ATL, Kermeta, UML-RSDS and GrGen.NET) on a complex model refactoring case study: the amalgamation of apparent attribute clones in a class diagram.The case study highlights the problems with the specification and design of the refactoring category of model transformations, and provides a challenging example by which model transformation languages and approaches can be compared. We take into account a wide range of evaluation criteria aspects such as correctness, efficiency, flexibility, interoperability, re-usability and robustness, which have not been comprehensively covered by other comparative surveys of transformation approaches.The\u00a0\u2026", "num_citations": "62\n", "authors": ["579"]}
{"title": "Graph and model transformation tools for model migration\n", "abstract": " We describe the results of the Transformation Tool Contest 2010 workshop, in which nine graph and model transformation tools were compared for specifying model migration. The model migration problem\u2014migration of UML activity diagrams from version 1.4 to version 2.2\u2014is non-trivial and practically relevant. The solutions have been compared with respect to several criteria: correctness, conciseness, understandability, appropriateness, maturity and support for extensions to the core migration task. We describe in detail the comparison method, and discuss the strengths and weaknesses of the solutions with a special focus on the differences between graph and model transformation for model migration. The comparison results demonstrate tool and language features that strongly impact the efficacy of solutions, such as support for retyping of model elements. The results are used to motivate an agenda\u00a0\u2026", "num_citations": "60\n", "authors": ["579"]}
{"title": "Reasoning and refinement in object-oriented specification languages\n", "abstract": " This paper describes a formal object-oriented specification language, Z++, and identifies proof rules and associated specification structuring and development styles for the facilitation of validation and verification of implementations against specifications in this language. We give inference rules for showing that certain forms of inheritance lead to refinement, and for showing that refinements are preserved by constructs such as promotion of an operation from a supplier class to a client class. Extension of these rules to other languages is also discussed.", "num_citations": "58\n", "authors": ["579"]}
{"title": "Formalising the UML in structured temporal theories\n", "abstract": " In this chapter we describe a possible semantics for a large part of the Unified Modelling Notation (UML), using structured theories in a simple temporal logic. This semantic representation is suitable for modular reasoning about UML models. We show how it can be used to clarify certain ambiguous cases of UML semantics, and how to justify enhancement or refinement transformations on UML models.", "num_citations": "55\n", "authors": ["579"]}
{"title": "Objects, Associations and Subsystems: a hierarchical approach to encapsulation\n", "abstract": " We describe a compositional approach to the formal interpretation of type view diagrams and statecharts. We define theories for object instances and classes, and theories for associations between them. These theories are combined with categorical constructions to yield a formalisation of the entire system.             We observe that some notations require the identification of theories intermediate between the theories of the constituent classes and associations and that of the entire system. This leads us to propose a notion of subsystem which generalises the concept of object and yields an approach to system specification employing object-like encapsulation in a nested hierarchy of components.", "num_citations": "55\n", "authors": ["579"]}
{"title": "Model-driven development of model transformations\n", "abstract": " In this paper we define a systematic model-driven development process for model transformations based on a precise semantics. We illustrate this process by applying it to the development and verification of the UML to relational database transformation.", "num_citations": "50\n", "authors": ["579"]}
{"title": "Reverse engineering and software maintenance: a practical approach\n", "abstract": " Reverse Engineering and Software Maintenance | Guide books ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksReverse Engineering and Software Maintenance: A Practical Approach ABSTRACT No abstract available. Comments Login options Check if you have access through your login credentials or your institution to get full access on this article. Sign in Full Access Get this Publication Information Contributors Published in Guide books cover image Reverse Engineering and Software Maintenance: A Practical Approach December 1993 251 pages ISBN:0077078977 Authors: Kevin Lano, Howard Haughton Copyright \u00a9 1993 \u2026", "num_citations": "50\n", "authors": ["579"]}
{"title": "Reverse\u2010engineering cobol via formal methods\n", "abstract": " We describe methods and software tools which aid in reverse\u2010engineering COBOL application programs back to specifications (and in validating them against specifications). The aim is to create object\u2010based abstractions from the implementation to capture design and functionality. The central process which the tools support is \u2018transformation from formalism to formalism\u2019, first from COBOL to the intermediate language Uniform, then from Uniform to a functional description language, and then to the specification language Z. In the process, dataflow diagrams, entity\u2010relationship diagrams and call\u2010graphs, and other types of information, are extracted from the code.", "num_citations": "50\n", "authors": ["579"]}
{"title": "Constraint-based specification of model transformations\n", "abstract": " Model transformations are a central element of model-driven development (MDD) approaches. The correctness, modularity and flexibility of model transformations is critical to their effective use in practical software development. In this paper we describe an approach for the automated derivation of correct-by-construction transformation implementations from high-level specifications. We illustrate this approach on a range of model transformation case studies of different kinds (re-expression, refinement, quality improvement and abstraction transformations) and describe ways in which transformations can be composed and evolved using this approach.", "num_citations": "48\n", "authors": ["579"]}
{"title": "Specification and verification of model transformations using UML-RSDS\n", "abstract": " In this paper we describe techniques for the specification and verification of model transformations using a combination of UML and formal methods. The use of UML 2 notations to specify model transformations facilitates the integration of model transformations with other software development processes. Extracts from three large case studies of the specification of model transformations are given, to demonstrate the practical application of the approach.", "num_citations": "47\n", "authors": ["579"]}
{"title": "Formal methods into practice: case studies in the application of the B method\n", "abstract": " The paper reports on an investigation into the application of the B method of formal software development. Six case studies are described, each exploring a different aspect of the use of the B methodology and toolkit. The case studies are drawn from a diverse range of applications and address different aspects of the software development lifecycle. The notation, method and tool support are assessed and conclusions are drawn concerning the use of B and formal methods generally.", "num_citations": "45\n", "authors": ["579"]}
{"title": "Advanced systems design with Java, UML and MDA\n", "abstract": " The Model Driven Architecture defines an approach where the specification of the functionality of a system can be separated from its implementation on a particular technology platform. The idea being that the architecture will be able to easily be adapted for different situations, whether they be legacy systems, different languages or yet to be invented platforms. MDA is therefore, a significant evolution of the object-oriented approach to system development. Advanced System Design with Java, UML and MDA describes the factors involved in designing and constructing large systems, illustrating the design process through a series of examples, including a Scrabble player, a jukebox using web streaming, a security system, and others. The book first considers the challenges of software design, before introducing the Unified Modelling Language and Object Constraint Language. The book then moves on to discuss systems design as a whole, covering internet systems design, web services, Flash, XML, XSLT, SOAP, Servlets, Javascript and JSP. In the final section of the book, the concepts and terminology of the Model Driven Architecture are discussed. To get the most from this book, readers will need introductory knowledge of software engineering, programming in Java and basic knowledge of HTML.* Examines issues raised by the Model-Driven Architecture approach to development* Uses easy to grasp case studies to illustrate complex concepts* Focused on the internet applications and technologies that are essential for students in the online age", "num_citations": "41\n", "authors": ["579"]}
{"title": "A compositional semantics of UML-RSDS\n", "abstract": " This paper provides a semantics for the UML-RSDS (Reactive System Development Support) subset of UML, using the real-time action logic (RAL) formalism. We show how this semantics can be used to resolve some ambiguities and omissions in UML semantics, and to support reasoning about specifications using the B formal method and tools. We use \u2018semantic profiles\u2019 to provide precise semantics for different semantic variation points of UML. We also show how RAL can be used to give a semantics to notations for real-time specification in UML. Unlike other approaches to UML semantics, which concentrate on the class diagram notation, our semantic representation has behaviour as a central element, and can be used to define semantics for use cases, state machines and interactions, in addition to class diagrams.", "num_citations": "39\n", "authors": ["579"]}
{"title": "Constraint-driven development\n", "abstract": " To obtain the full benefits of model-driven development (MDD) approaches such as MDA, a suitable level of abstraction needs to be chosen which enables the core functionality and properties of a system to be expressed, independent of programming language or implementation platform, so that this specification can be reused for a wide variety of different environments.This paper describes how constraints, together with UML class diagrams and state machines, can be used as a precise and platform-independent specification language. We describe the use of constraints in UML-RSDS and tool support for the synthesis of executable systems from constraints.", "num_citations": "39\n", "authors": ["579"]}
{"title": "Logical specification of reactive and real-time systems\n", "abstract": " This paper provides a uniform specification and reasoning framework for reactive and real-time systems, which combines the formalisms of real-time logic (RTL) and linear temporal logic to provide an event-based logical system suitable for analysing properties of liveness, fairness, safety and responsiveness. It will be shown that this logic is sound with respect to a natural semantics, and that interval logic and linear temporal logic formalisms can be embedded within the framework. We give an application of the logic to the formalisation of the VDM ++  language.", "num_citations": "39\n", "authors": ["579"]}
{"title": "Structuring and Design of Reactive Systems using RSDS and B\n", "abstract": " With the advent of comprehensive safety standards for software intensive safety related systems, such as IEC 61508 and its specialisations for particular industry sectors (medical, machinery, process, etc), there is a need to establish combinations of techniques which can be used by industry to demonstrate conformance to these standards for particular developments. In this paper we describe one such combination of techniques, involving statecharts and B, which is aimed at reactive control system development.               We define strategies for controller decomposition which allow safety in-variants to be distributed into subcontroller requirements, and define techniques for the automatic synthesis of controllers from invariants. A case study of a train control system is used to illustrate the ideas.", "num_citations": "38\n", "authors": ["579"]}
{"title": "From programs to Z specifications\n", "abstract": " Universal techniques for transforming code from a typical procedural language to Z-like specifications will be discussed first; the latter make good starting points for the post hoc validation of programs which lack formal documentation. We prove properties of classes of programs, before we move on to discuss the further set of techniques we use to prove properties of individual programs. In the foundational work, we provide a concise algebraic language and axioms based on the simple mathematical theory of monads, and show that it is sufficiently expressive. We then give practical validation techniques which extend these transformations and provide several examples of such heuristically driven program validations.", "num_citations": "38\n", "authors": ["579"]}
{"title": "Safety and security analysis of object-oriented models\n", "abstract": " In this paper we review existing approaches for the safety and security analysis of object-oriented software designs, and identify ways in which these approaches can be improved and made more rigorous.", "num_citations": "37\n", "authors": ["579"]}
{"title": "UML refinement and abstraction transformations\n", "abstract": " Transformations of object-oriented models based on a rigorous underlying semantics represent a means of obtaining the bene ts of formal methods without the need for users to reason directly in mathematical formalisms. In this paper we present a set of diagrammatic transformations on UML models which represent re nement or abstraction steps. We show how the correctness of these transformations can be justi ed in a suitable semantic model of UML.", "num_citations": "37\n", "authors": ["579"]}
{"title": "A framework for model transformation verification\n", "abstract": " A model transformation verification task may involve a number of different transformations, from one or more of a wide range of different model transformation languages, each transformation may have a particular transformation style, and there are a number of different verification properties which can be verified for each language and style of transformation. Transformations may operate upon many different modelling languages. This diversity of languages and properties indicates the need for a suitably generic framework for model transformation verification, independent of particular model transformation languages, and able to provide support for systematic procedures for verification across a range of languages, and for a range of properties. In this paper we describe the elements of such a framework, and apply this framework to some example transformation verification problems. The paper is novel in\u00a0\u2026", "num_citations": "36\n", "authors": ["579"]}
{"title": "Objects revisited\n", "abstract": " The authors provide insights into the process of deriving objects from code and specifications. Their purpose is to facilitate the more general process of reverse engineering. They concentrate on a method for object identification and give some examples of deriving objects with details on the syntax of the object-oriented notation Z++. The authors provide some further examples of object derivation, concentrating on internal data structures in program code. They detail the relationship between objects and abstract data types, and discuss the concepts of reusability with respect to inheritance hierarchies.<>", "num_citations": "33\n", "authors": ["579"]}
{"title": "Slicing techniques for UML models.\n", "abstract": " This paper defines techniques for the slicing of UML models, that is, for the restriction of models to those parts which specify the properties and behaviour of a subset of the elements within them. The purpose of this restriction is to produce a smaller model which permits more effective analysis and comprehension than the complete model, and also to form a step in factoring of a model. We consider class diagrams, single state machines, and communicating sets of state machines.", "num_citations": "31\n", "authors": ["579"]}
{"title": "Rigorous development in UML\n", "abstract": " The Unified Modelling Language (UML) is becoming the de facto industry standard notation for object-oriented analysis and design. In this paper we propose a development process using UML and other notations which supports formal analysis and verification, so enabling the notation to be used for highly critical systems.               We will illustrate the development process using a small example of a traffic light control system.", "num_citations": "30\n", "authors": ["579"]}
{"title": "Comparative evaluation of model transformation specification approaches\n", "abstract": " Abstract Model transformations have become a key element of model-driven software development, being used to transform platform-independent models to platform-specific models, to improve model quality, to introduce design patterns and refactorings, and to map models from one language to another. A large number of model transformation notations and tools exist. However, there are no guidelines on how to select appropriate notations for particular model transformation tasks, and no comprehensive comparisons of the relative merits of particular approaches. In this paper we provide a unified semantic treatment of model transformations, and show how correctness properties of model transformations can be defined using this semantics. We evaluate several approaches which have been developed for model transformation specification, with respect to their expressivity, complexity and support for verification, and make recommendations for resolving the outstanding problems concerning model transformation specification.", "num_citations": "29\n", "authors": ["579"]}
{"title": "The z++ manual\n", "abstract": " 1 BackgroundZ++ arose from the Esprit II project REDO, and the need within this project to provide an abstract representation for large data-processing systems. The UNIFORM procedural language adopted by the project was a key in uence, as was the B abstract machine notation of Abrial. At the time the language was developed (1989-1990), we were not aware of the other attempts at de ning object-oriented Z extensions, such as Object-Z and MooZ, although it became clear that there were many commonalities between these languages. A technical comparison of the languages and their inter-translatability can be found in [39]. A further strong in uence has been the Ei el language [45], which is perhaps the most theoretically secure object-oriented programming language, and the work of Goguen and others on algebraic object-oriented speci cation languages [17]. The aim from the outset was to produce a language which could naturally express designs, in addition to providing a means for structuring and incremental correct development of large systems. Whilst seeking to provide alternative means of speci cation, such as algebraic and temporal, it is also a strong aim to minimize the size of the language, so reducing the burden of learning. Z++ is intended for practical use in an industrial environment, and hence, can be considered a compromise between generality and implementability: in terms of the standard life-cycle, it seeks to support expression of requirements, of designs, and of speci cations. Support for implementation is at present only envisaged via translation to a notation such as B AMN, although a translation into UNIFORM\u00a0\u2026", "num_citations": "29\n", "authors": ["579"]}
{"title": "Towards a compositional interpretation of object diagrams\n", "abstract": " We develop a compositional interpretation of object model and statechart diagrams as used in the \u201cSyntropy\u201d method of Object-Oriented Analysis and Design. Separate theories are constructed for object instances, class managers and associations which are then combined with categorical constructions to yield a formal interpretation of the complete system.             We compare the use of state attributes to abstractly interpret history with temporal axioms governing behaviours and contrast the logical notion of locality with object-oriented data encapsulation. We consider the interpretation of statecharts partitioning the overall statespace and defining transitions between partitions and give a formal interpretation to event parameters, filters, preconditions and postconditions. We observe that some features of Syntropy are not amenable to this systematic modular interpretation.", "num_citations": "28\n", "authors": ["579"]}
{"title": "Model transformation specification and verification\n", "abstract": " Model transformations are becoming increasingly important in software development, particularly as part of model-driven development approaches (MDD). This paper defines an approach for specifying transformations as constraints, and for verifying the correctness of these transformations.", "num_citations": "27\n", "authors": ["579"]}
{"title": "INTEGRATED FORMAL and OBJECT-ORIENTED METHODS: The VDM++ Approach\n", "abstract": " This paper describes methods integration techniques and tools developed for the VDM ++  formal specification language. Case studies which have been carried out for the language using tool support for the integrated development method are also described. The original features of the method are its use of highly abstract initial specifications to avoid the design bias of object-oriented structuring, and the formal treatment of structural transformations.", "num_citations": "27\n", "authors": ["579"]}
{"title": "Agile model-based development using UML-RSDS\n", "abstract": " This book describes the concepts and application of model-based development (MBD), model transformations, and Agile MBD to a wide range of software systems. It covers systems requirements engineering, system specification and design, verification, reuse, and system composition in the context of Agile MBD. Examples of applications in finance, system migration, internet systems and software refactoring are given. An established open-source MBD technology, UML-RSDS, is used throughout to illustrate the concepts. The book is suitable for industrial practitioners who need training in Agile MBD, and those who need to understand the issues to be considered when introducing MBD in an industrial context. It is also suitable for academic researchers, and for use as text for undergraduate or postgraduate courses in MBD. Examples for educational use of UML-RSDS are included in the book.", "num_citations": "26\n", "authors": ["579"]}
{"title": "Structured axiomatic semantics for UML models\n", "abstract": " In this paper we provide a systematic formal interpretation for most elements of the UML notation. This interpretation, in a structured temporal logic, enables precise analysis of the properties of these models, and the verification of one model against another. We extend previous work by providing a structured logical interpretation for sequence diagrams, in which object communication is represented using theory morphisms. As an application of the formalisation, we show how the introduction of particular design patterns can be proved to be refinement transformations.", "num_citations": "25\n", "authors": ["579"]}
{"title": "The uml-rsds manual\n", "abstract": " This manual gives a guide to versions from 1.5 to 1.8 (2018) of the UML-RSDS tools for modeldriven development. UML-RSDS provides rapid automated construction of software systems (in Java, C, JSP/Servlets, C# or C++) from high-level UML specifications (class diagrams, use cases, state machines and activities). The tools are currently free to download and use. In general, standard UML 2 and OCL 2 is used for specification and design. The tool can be used as part of software development to reduce coding costs, time and errors, and to ensure a greater consistency between system components written in multiple languages. It can ensure the correct and consistent implementation of business data and logic in multiple system components.", "num_citations": "24\n", "authors": ["579"]}
{"title": "Reactive system specification and refinement\n", "abstract": " This paper describes formal approaches for reactive and real time system specification and development, using a process of systematic translation from statechart descriptions of a system into a specification language utilising real time logic (RTL), and refinement within this language. Alternative implementation strategies using synchronisation constraints and synchronisation code are also provided, together with examples of development using the approach.             The approach provides a unitary formalism which combines statecharts, RTL and temporal logic. Animation and proof tools are also briefly described.", "num_citations": "24\n", "authors": ["579"]}
{"title": "Comparing verification techniques for model transformations\n", "abstract": " Model transformations are a central element of model-driven development (MDD) approaches. The correctness of model transformations is critical to their effective use in practical software development, since users must be able to rely upon transformations correctly preserving the semantics of source models and producing valid target models. In this paper we provide techniques for proving the termination, confluence and correctness of declaratively-specified model transformations, relative to a formal semantics for UML and OCL. We compare the effectiveness of syntactic analysis techniques, interactive verification tools and automated proof tools.", "num_citations": "23\n", "authors": ["579"]}
{"title": "Model-driven software development with UML and Java\n", "abstract": " Aimed at 2nd and 3rd year/MSc courses, Model Driven Software Development using UML and Java introduces MDD, MDA and UML, and shows how UML can be used to specify, design, verify and implement software systems using an MDA approach. Structured to follow two lecture courses, one intermediate (UML, MDA, specification, design, model transformations) and one advanced (software engineering of web applications and enterprise information systems), difficult concepts are illustrated with numerous examples, and exercises with worked solutions are provided throughout.", "num_citations": "23\n", "authors": ["579"]}
{"title": "Invariant-based synthesis of fault-tolerant systems\n", "abstract": " Statecharts are a very widely used formalism for reactive system development, however there are problems in using them as a fully formal specification notation because of the conflicting variants of statechart semantics which exist. In this paper a modular subset of statechart notation is defined which has a simple semantics, and permits compositional development and verification. Techniques for decomposing specifications in this notation, design strategies for incorporating fault tolerance, and translation to the B formal language, are also described, and illustrated with extracts from a case study of a fault tolerant system.", "num_citations": "23\n", "authors": ["579"]}
{"title": "Literature Survey of previous research work in Models and Methodologies in Project Management\n", "abstract": " This paper provides a survey of the existing literature and research carried out in the area of project management using different models, methodologies, and frameworks. Project Management (PM) broadly means programme management, portfolio management, practice management, project management office, etc. A project management system has a set of processes, procedures, framework, methods, tools, methodologies, techniques, resources, etc. which are used to manage the full life cycle of projects. This also means to create risk, quality, performance, and other management plans to monitor and manage the projects efficiently and effectively.", "num_citations": "22\n", "authors": ["579"]}
{"title": "Formal development in B abstract machine notation\n", "abstract": " This paper gives a comprehensive introduction to the B Abstract Machine Notation (AMN), a formal method which is based on Z and which is supported by an industrial quality toolset. The paper describes development techniques for AMN, including the formalization of requirements, specification construction, design and implementation. Results from a large-scale safety-critical development using the method are also given.", "num_citations": "22\n", "authors": ["579"]}
{"title": "A survey of model transformation design patterns in practice\n", "abstract": " Model transformation design patterns have been proposed by a number of researchers, but their usage appears to be sporadic and sometimes patterns are applied without recognition of the pattern. In this paper we provide a systematic literature review of transformation design pattern applications. We evaluate how widely patterns have been used, and how their use differs in different transformation languages and for different categories of transformation. We identify what benefits appear to arise from the use of patterns, and consider how the application of patterns can be improved. The paper also identifies several new patterns which have not previously been catalogued.", "num_citations": "21\n", "authors": ["579"]}
{"title": "Slicing of UML state machines\n", "abstract": " This paper defines techniques for the slicing of UML state machine models, to produce smaller or simpler models which have the same behaviour as the original model on selected data. Slicing enables more effective analysis and comprehension than the complete model, and can also be used to factor a model.", "num_citations": "21\n", "authors": ["579"]}
{"title": "Direct Semantics of Extended State Machines.\n", "abstract": " In this paper we present semantic profiles for UML 2 state machines, which are based directly upon the structure of a state machine model, without requiring flattening or other transformations on these models. The approach addresses many of the semantic problems identified for state machines, and provides a basis for semantic analysis and proof of behavioural compatibility between state machines.", "num_citations": "20\n", "authors": ["579"]}
{"title": "Z++\n", "abstract": " The two case studies are specified in Z++, to highlight the differences and similarities between the specification styles possible in this language and in the other object-oriented extensions to Z. A full description of the Z++ language is contained in [Lano and Haughton 1991], and is also described in [Lano 1991]. Here we give only an overview of the syntax.", "num_citations": "20\n", "authors": ["579"]}
{"title": "Correct-by-construction synthesis of model transformations using transformation patterns\n", "abstract": " Model transformations are an essential part of model-based development approaches, such as Model-driven Architecture (MDA) and Model-driven Development (MDD). Model transformations are used to refine and abstract models, to re-express models in a new modelling language, and to analyse, refactor, compare and improve models. Therefore, the correctness of model transformations is critically important for successful application of model-based development: software developers should be able to rely upon the correct processing of their models by transformations in the same way that they rely upon compilers to produce correct executable versions of their programs. In this paper, we address this problem by defining standard structures for model transformation specifications and implementations, which serve as patterns and strategies for constructing a wide range of model transformations. These\u00a0\u2026", "num_citations": "19\n", "authors": ["579"]}
{"title": "Technical debt in model transformation specifications\n", "abstract": " Model transformations (MT), as with any other software artifact, may contain quality flaws. Even if a transformation is functionally correct, such flaws will impair maintenance activities such as enhancement and porting. The concept of technical debt (TD) models the impact of such flaws as a burden carried by the software which must either be settled in a \u2018lump sum\u2019 to eradicate the flaw, or paid in the ongoing additional costs of maintaining the software with the flaw. In this paper we investigate the characteristics of technical debt in model transformations, analysing a range of MT cases in different MT languages, and using measures of quality flaws or \u2018bad smells\u2019 for MT, adapted from code measures.                 Based on these measures we identify significant differences in the level and kinds of technical debt in different MT languages, and we propose ways in which TD can be reduced.", "num_citations": "18\n", "authors": ["579"]}
{"title": "Case study: Class diagram restructuring\n", "abstract": " This case study is an update-in-place refactoring transformation on UML class diagrams. Its aim is to remove clones of attributes from a class diagram, and to identify new classes which abstract groups of classes that share common data features. It is used as one of a general collection of transformations (such as the removal of redundant inheritance, or multiple inheritance) which aim to improve the quality of a specification or design level class diagram. The transformation is a typical example of a model refactoring, and illustrates the issues involved in such transformations.", "num_citations": "18\n", "authors": ["579"]}
{"title": "Reuse and adaptation of Z specifications\n", "abstract": " This paper discusses the reuse and adaptation of specifications in Z and object oriented Z, and provides techniques based on a calculus of refinements and on measures of specification design quality, which attempt to address these issues. This calculus will form the basis of a proposal to extend the logic W for standard Z [40] to a reasoning formalism suitable for proving relationships between specifications at a global level. Comparisons with the facilities offered by object oriented specification languages, and with the B abstract machine notation are given. Examples from industrial case studies of the applications of these techniques are also provided.", "num_citations": "18\n", "authors": ["579"]}
{"title": "Integrating VDM++ and real-time system design\n", "abstract": " This paper presents work performed in the EPSRC \u201cObject-oriented Specification of Reactive and Real-time Systems\u201d project. It aims to provide formal design methods for real-time systems, using a combination of the VDM++ formal method and the HRT-HOOD method.             We identify refinement steps for hard real-time systems in VDM++, together with a case study of a mine-pump control system, involving a combination of VDM++ and HRT-HOOD.             We also consider the representation of hybrid systems in VDM++.", "num_citations": "17\n", "authors": ["579"]}
{"title": "Refinement in object-oriented specification languages\n", "abstract": " This paper addresses the issues related to the development of a formal semantic framework, oriented around refinement, for object-oriented specification languages, particularly those based upon the Z specification language [27]. A proposal for a systematic mapping of object-oriented Z into standard Z is presented, and is then extended to include treatment of object identity. Throughout, we stress the importance of a formal semantics and a related reasoning system to the correct development and verifiability of software systems using formal methods. This work is a product of investigations into the use of formal methods and semantic analysis in assessment and arises from the need to provide a precise meaning to formal specifications extracted from imperative programs as part of a process of static and semantic analysis. The \u2018reference Z\u2019 style of specification has been applied in particular to the functional\u00a0\u2026", "num_citations": "17\n", "authors": ["579"]}
{"title": "Formalising design patterns as model transformations\n", "abstract": " This chapter describes techniques for the verification of refactorings or transformations of UML models which introduce Design patterns. The techniques use a semantics of object-oriented systems defined by the object calculus (Fiadeiro & Maibaum, 1991; Lano, 1998), and the pattern transformations are proved to be refinements using this semantics.", "num_citations": "16\n", "authors": ["579"]}
{"title": "Reeingineering legacy applications using design patterns\n", "abstract": " This paper presents a new approach to the use of design patterns for the reengineering of legacy code, using a mapping from procedural design patterns to object-oriented patterns. We show also how object-oriented design patterns can be formalised and correctness conditions for their application derived, in order to justify the preservation of functionality in the reengineering process. We conclude with a case study of reengineering of a legacy COBOL application.", "num_citations": "16\n", "authors": ["579"]}
{"title": "Using B to design and verify controllers for chemical processing\n", "abstract": " This paper is concerned with bridging the gap between approaches for the synthesis of controllers in the process industries and formal methods of specifying, designing and verifying reactive and realtime systems.We present a method which integrates techniques for the synthesis of procedural controllers 24] with speci cation and veri cation techniques for B 1]. The combined method enables a systematic approach to be taken to the creation of formalised designs for process controllers and proof obligations for the correctness of these designs against speci cations to be generated.", "num_citations": "16\n", "authors": ["579"]}
{"title": "Enhancing object\u2010oriented methods with formal notations\n", "abstract": " This article addresses the issue of how the precision of object\u2010oriented analysis and design methods can be enhanced by the selective introduction of mathematical notation. We use the OMT and Booch methods as a basis, with some enhancements by aspects of the Fusion and Syntropy methods. The formal notation will be the VDM++ specification language. We give examples to demonstrate the advantages of using diagrammatic and formal techniques in combination, particularly for critical systems or for reusable libraries. Some of the translations given in this article have been implemented in the Venus toolset for VDM++ (Plat, AFRODITE Project Report, AFRO/CG/NP/VENUSREP/VI, 1995). \u00a9 1997 John Wiley & Sons, Inc.", "num_citations": "16\n", "authors": ["579"]}
{"title": "Optimising Model-transformations using Design Patterns.\n", "abstract": " This paper identifies how metrics of model transformation complexity can be used to guide the choice and application of design patterns to improve the quality and efficiency of model transformation specifications. Heuristics for choosing design patterns based on the metrics are defined, and the process is applied to an example transformation.", "num_citations": "15\n", "authors": ["579"]}
{"title": "Formal Descriptive Semantics of UML and Its Applications.\n", "abstract": " What is the meaning of a UML diagram? Consider the simple class model of a library system, shown in Figure 5.1. One may interpret its meaning as follows: The system has two classes, called Member and Book. There is an association between them, which is called Borrows. The multiplicity upper bound ofthe Borrows association at the Book end is 10, and the multiplicity upper bound ofBorrows at the Member end is I. An alternative interpretation of the model is: There are two types of objects in the system, called Member and Book. Members can borrow books. Each member can only borrow up to 10 books at any time, and each book can be borrowed by at most one member at any time.", "num_citations": "15\n", "authors": ["579"]}
{"title": "Specifying reactive systems in B AMN\n", "abstract": " This paper describes techniques for specifying and designing reactive systems in the B Abstract Machine (AMN) language, using concepts from procedural process control. In addition, we consider what forms of concurrent extensions to B AMN would make it more effective in representing such systems.", "num_citations": "15\n", "authors": ["579"]}
{"title": "Extending B AMN with concurrency\n", "abstract": " The B Abstract Machine Notation (AMN) is a formal specification and development language which is related to VDM 11 and Z 17, and incorporates modularity mechanisms which support the construction of large systems. It has been used to develop automatic train control systems 2, 4, 3, medical information systems and modules of the CICS software 10. B is a sequential specification language in that operations are regarded as single atomic actions, and it is not possible, at the implementation level, for two or more machines to be executing concurrently. The extensions described in this paper will allow concurrent execution between machine implementations, but not concurrent execution within a machine.Industrial users of B have identified the lack of treatment of concurrency as the major outstanding problem with the language 10. Although reactive systems have been developed using B AMN, the lack of support\u00a0\u2026", "num_citations": "15\n", "authors": ["579"]}
{"title": "The integration of agile development and model driven development: A systematic literature review\n", "abstract": " In this paper, we present a Systematic Literature Review (SLR) on combining Agile development and Model-Driven Development (MDD). The objectives of this paper are to identify what are the main characteristics of current Agile Model-Driven Development (Agile MDD) approaches, as well as the benefits and the problems of adopting these approaches. Fifteen publications have been identified and selected as primary studies on which we conducted the analysis. The results show that Agile development and MDD can coexist and benefit from their integration. However, combining Agile and MDD is still in its early stages and more eort is required in research to advance this area. The main contributions of this paper are: detailed and condensed results in the context of current Agile MDD approaches, detailed results on the benefits of Agile MDD in practice, and the observed problems and challenges of the current Agile MDD approaches.", "num_citations": "14\n", "authors": ["579"]}
{"title": "A model-based development approach for model transformations\n", "abstract": " Model transformations have become a key element of model-driven software development, being used to transform platform-independent models (PIMs) to platform-specific models (PSMs), to improve model quality, to introduce design patterns and refactorings, and to map models from one language to another. A large number of model transformation notations and tools exist, however, there remain substantial problems concerning the analysis and verification of model transformations. In particular, there is no systematic development process for model transformations.             In this paper, we provide a unified semantic treatment of model transformations, and show how correctness properties of model transformations can be defined. We define a systematic model-driven development process for model transformations based on this semantics, and we describe case studies using this process.", "num_citations": "14\n", "authors": ["579"]}
{"title": "Distributed system specification in vdm++\n", "abstract": " This paper describes an application of VDM++ to the specification and design of a simple communication system, based on requirements for an advanced network service specified by the author.               It is shown how VDM++ may be combined with diagrammatic methods (OMT and Fusion) in order to enhance the precision of the latter. We also discuss the issue of feature interaction, and the use of object-oriented specification to address this problem.", "num_citations": "14\n", "authors": ["579"]}
{"title": "A specification\u2010based approach to maintenance\n", "abstract": " In this paper we define a language, Z++, and a method based upon this language, to support the use of formal methods in software maintenance. Formal methods have been proposed several times as the solution to the growing problem of software maintenance, and we base our approach on the more successful of the attempts made to apply these methods. Our approach is to use a conceptually simple framework, based on an object\u2010oriented extension to the specification language Z (Spivey, 1989), for dealing with requests for changes to software for which some formal documentation and record of development already exists. The method is centered on the maintenance of the specifications and the development record, not upon source code or Structured Methodology documentation. It is proposed as a practical approach for software in the medium\u2010term future, allowing the mass of programming detail that\u00a0\u2026", "num_citations": "14\n", "authors": ["579"]}
{"title": "Software Design Using Java 2\n", "abstract": " Software Design Using Java 2 is a Software Engineering text aimed at intermediate and advanced students on undergraduate programmes. The book offers a comprehensive treatment of the essential techniques needed to design software systems using object technology: design patterns, architectural, subsystem and module design, user interface design, web-based system design and database design. The extensive use of case studies from the domains of finance, internet systems and reactive systems allows the design process to be demonstrated in full. In addition, the authors describe an extension of object oriented concepts, called co-ordination contracts, which addresses the problem of increasing flexibility by separating the program logic from the software components this logic applies to. Key features:\u00b7 Covers the use of Java Swing, JDBC, JavaScript, JSP and Servlets\u00b7 Focuses on the essential aspects of the design process in a practical and directed manner, using UML and Java 2\u00b7 Provides a guide to the management of student projects\u00b7 Gives a complete case study of a student project This textbook is ideal for students and professionals in object-oriented software development, and in the object-oriented software engineering field.", "num_citations": "13\n", "authors": ["579"]}
{"title": "Requirements engineering in model-transformation development: An interview-based study\n", "abstract": " Model Transformations (MT) are central building blocks of Model Driven Engineering (MDE). The size and complexity of model transformations grows as they see more wide-spread use in industry. As a result, systematic approaches to the development of high-quality and highly reliable model transformations become increasingly important. However, because little is known about the context in which model transformations are developed, it is very difficult to know what would be required from such systematic approaches. This paper provides some initial results and analysis of an interview-based study of requirements engineering (RE) in MT developments. We have interviewed industry experts in MT development, with the goal of understanding the contexts and ways in which transformations are developed and how their requirements are established. The types of stakeholders of transformations were\u00a0\u2026", "num_citations": "13\n", "authors": ["579"]}
{"title": "Towards a Meta-model of the Cloud Computing Resource Landscape.\n", "abstract": " As Cloud Computing becomes more predominant, large scale datacenters are subject to an increasing demand for efficiency and flexibility. However, growing infrastructure management complexity and maintenance costs are becoming a hindrance to the advancement of the Cloud vision. In this paper we discuss how existing datacenter resource management approaches fail to provide infrastructure elasticity and suggest a resources provisioning architecture to fill this gap. As a first step towards implementing our targets, we present a metamodel to describe the characteristics of the Cloud landscape, emphasising on a provider\u2019s perspective. With this meta-model we intend to introduce new modelling concepts towards facilitating the selection of optimal reconfigurations in a timely fashion.", "num_citations": "13\n", "authors": ["579"]}
{"title": "Formal specification using interaction diagrams\n", "abstract": " Interaction diagrams are a widely-used UML notation, however in contrast to class diagrams or state machines there is a lack of formal semantics for interaction diagrams. We propose a formal semantics for the notation, and consider applications of this semantics for checking the consistency of interaction diagrams with other UML models, and for diagrammatic formal specification of real-time properties.", "num_citations": "13\n", "authors": ["579"]}
{"title": "Transformational program analysis\n", "abstract": " This paper describes an approach to the semantic analysis of procedural code. The techniques differ from those adopted in current static analysis tools such as MALPAS (Bramson, 1984) and SPADE (Clutterbuck and Carr\u00e9, 1988) in two key respects:(1) A database is used, together with language-specific and language-independent data models, as a repository for all information about a program or set of programs which is required for analysis, and for storing and interrelating the results of analyses;(2) The techniques aim to treat the full language under consideration by a process of successive transformation and abstraction from the source code until a representation is obtained which is amenable to analysis. This abstraction process can include the production of formal specifications from code. The techniques have been partially implemented for the OS/VS IBM diallect of COBOL'74 and for FORTRAN'77. Several\u00a0\u2026", "num_citations": "13\n", "authors": ["579"]}
{"title": "Integrating formal and structured methods in reverse-engineering\n", "abstract": " The issue of the interaction between structured and formal notations in reverse-engineering and maintenance is discussed, and a process which uses both forms of representation to support application understanding, evaluation, assessment, redesign, and reengineering is described. This process is supported by prototype tools implemented on the REDO toolkit and repository for reverse-engineering.< >", "num_citations": "13\n", "authors": ["579"]}
{"title": "RSDS, a Subset of UML with Precise Semantics.\n", "abstract": " In this paper we describe the semantic foundation of a subset, RSDS, of the UML notation. This subset is speci cally intended to support reactive system speci cation, and has a formal semantics expressed in temporal logic. We de ne this semantics, and use the semantics to justify RSDS techniques for modular decomposition and veri cation of reactive systems, involving a structure-preserving translation to SMV.", "num_citations": "12\n", "authors": ["579"]}
{"title": "Experiences of using formal methods for chemical process control specification\n", "abstract": " This paper discusses the benefits of adding formal specification in B to existing controller synthesis techniques, and some of the limitations of B for this area of application. Examples from case studies carried out in the \u201cObject-oriented specification of real-time and reactive systems\u201d (ROOS) project are given.", "num_citations": "12\n", "authors": ["579"]}
{"title": "A comparative description of object-oriented specification languages\n", "abstract": " A comparative description of object-oriented specification languages | Object-oriented specification case studies ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksObject-oriented specification case studiesA comparative description of object-oriented specification languages chapter A comparative description of object-oriented specification languages Share on Authors: Kevin C Lano profile image K. Lano View Profile , Howard P Haughton profile image H. Haughton View Profile Authors Info & Affiliations Publication: Object-oriented specification case studiesJanuary 1994 Pages 20\u201354 2citation 0 Downloads Metrics Total Citations2 \u2026", "num_citations": "12\n", "authors": ["579"]}
{"title": "Formal frameworks for approximate reasoning\n", "abstract": " This paper discusses applications of a formal set-theoretic foundation for fuzzy set theory [23] to problems of approximate and uncertain reasoning, and also looks at other formalisms, such as the classical Alternative Set Theory [39] and its Intuitionistic version [21, 20] for uncertain reasoning. Formal definitions of these frameworks will be given. Many suggestions for semantic operations on values of formulae involving intermediate truth have been made; [41, 40] contain a survey of these. There are two main problems: how to reconcile the use of the linear order [0, 1] as the value space when in reality degrees of truth are often incomparable, and secondly, within this simplified range of values, to select operations which are both logically coherent with each other and intuitively reasonable. We will derive general semantic constraints on operations which will motivate the formal frameworks that we define.", "num_citations": "12\n", "authors": ["579"]}
{"title": "Fuzzy sets and residuated logic\n", "abstract": " The properties of a set theory, RZF, defined in a logic weaker than intuitionistic logic are investigated, using natural models. RZF is intended to act as a framework for fuzzy set theory, more general and applicable than Heyting valued structures such as Topoi. The theory RZF contains an interpretation of classical set theory, and is consistent relative to this theory. It is also a suitable theory for the expression of attributes of uncertainty and vagueness, since a certain subclass of the sets definable in this theory are \u2018crisp\u2019 or two-valued, and behave classically, whereas sets in general obey only residuated logic, of which the \u0141ukasiewicz semantics on [0, 1], the real interval, is a particular realisation.", "num_citations": "12\n", "authors": ["579"]}
{"title": "A survey of model transformation design pattern usage\n", "abstract": " Model transformation design patterns have been proposed by a number of authors, but their usage appears to be sporadic and sometimes patterns are applied without recognition of the pattern. In this paper we provide a literature review of transformation design pattern applications, with regard to their effectiveness and range of use, and consider how pattern usage can be made more effective.", "num_citations": "11\n", "authors": ["579"]}
{"title": "Model migration transformation specification in UML-RSDS\n", "abstract": " Model transformations have become a key element of model-driven software develop-ment, being used to transform platform-independent models to platform-specific models, to improve model quality, to introduce design patterns and refactorings, and to map mod-els from one language to another. In this paper we show how the UML-RSDS notation and tools can be applied to the model migration case study and explain the distinctive features of this model transforma-tion approach which make it suitable for model migration transformations. 1 Activity Diagram Migration The case study is described in [21], it involves the transformation of models of the UML 1.4 activity diagram language [14] into models of the UML 2.2 activity diagram language [17]. In UML 1.4 the language of activity diagrams was a variant of the state machine language. However in UML 2.2, a separate language is defined. The structure of these two languages are quite similar, so the transformation can be specified in a direct manner based on the structure of the source language.", "num_citations": "11\n", "authors": ["579"]}
{"title": "Structuring reactive systems in B AMN\n", "abstract": " B has been widely used for high-integrity systems development, for example in the railway industry. However, there are few published guidelines on how to structure B specifications for particular types of system, such as reactive control systems. In this paper, we describe a method to support the graphical design of systems using the B abstract machine notation (AMN), and we develop guidelines for expressing the structuring requirements of reactive systems in B.", "num_citations": "11\n", "authors": ["579"]}
{"title": "Design of reactive control systems for event-driven operations\n", "abstract": " This paper explores the combination of formal methods with techniques taken from control engineering for specifying, designing and verifying reactive systems.             In particular, it is shown how to use techniques for specification and verification in VDM++ in combination with the synthesis of procedural controllers, a mathematical abstraction of the logic controlling an eventdriven sequential operation. The procedural controller is used as a provably correct specification of an event-driven operation to be implemented using VDM++. The resulting method enables a systematic approach for creating formalized designs of controllers for this type of operations, and proof obligations for the correctness of the designs against specifications to be generated. The approach is illustrated using an example.", "num_citations": "11\n", "authors": ["579"]}
{"title": "Refinement of distributed object systems\n", "abstract": " This paper describes how refinement concepts can be applied to the transformation of system structures within object-oriented specification and design. We formalise the concept of annealing developed for the VDM++ language [Durr et al., 1994], and show how it enables a high degree of abstraction to be used at early development stages, without premature commitment to particular sets of classes or the allocation of responsibilities to classes.               We give examples of this VDM++ development technique for distributed systems, using examples of a spanning-tree calculation algorithm and a dynamic numeric computation. Animation techniques using B AMN [Lano and Haughton, 1995] are also described.", "num_citations": "11\n", "authors": ["579"]}
{"title": "Extracting design and functionality from code\n", "abstract": " Techniques developed as part of the REDO project on software maintenance are described. Transformations which produce highly abstract descriptions of the functionality of an application are applied. This allows maintenance and restructuring operations to be carried out more effectively, since the abstractions are free from unnecessary implementation details which complicate reasoning about the code itself. Designs are abstracted from applications by examining data flow and control flow, and by using techniques to identify and isolate meaningful processes. An object-oriented design is generated, using classes based on the main variables of the code, with logical invariants of the code included as invariants of the classes of the design, and with the abstractions of the identified operations included as methods of these classes. These partial designs can then be rewritten into improved forms.<>", "num_citations": "11\n", "authors": ["579"]}
{"title": "An algebraic semantics for the specification language Z++\n", "abstract": " An Algebraic Semantics for the Specification Language Z++ | Proceedings of the Second International Conference on Methodology and Software Technology: Algebraic Methodology and Software Technology ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleProceedingsAMAST '91An Algebraic Semantics for the Specification Language Z++ ARTICLE An Algebraic Semantics for the Specification Language Z++ Share on Authors: Kevin C Lano profile image Kevin Lano View Profile , Howard P Haughton profile image Howard P. Haughton View Profile Authors Info & Affiliations Publication: AMAST '91: Proceedings of the Second \u2026", "num_citations": "11\n", "authors": ["579"]}
{"title": "Defining and formalising project management models and processes\n", "abstract": " The research will focus on studying the feasibility of defining/ formalising model driven project management using PMBOK as base. This work proposes a model driven project management based upon all the Process and Knowledge management areas making use of modelling languages like UML and OCL. This is a unique attempt to define and describe the complete PM standard taking into consideration all the process and knowledge management areas. Previous research has been done to build simple models that for one process or knowledge management area and even that does not make use of model driven concepts. These research works focussed on creating more of structured flow rather than object models. Our research focuses on PMBOK since more than 75% of the projects around the world use PMBOK for managing projects.", "num_citations": "10\n", "authors": ["579"]}
{"title": "Case study: FIXML to Java, C# and C++\n", "abstract": " This case study is a transformation from financial transaction data expressed in FIXML XML format, into class definitions in Java, C# and C++. It is based on an industrial application of MDD in finance, and aims to support rapid upgrading of user software when new or extended FIXML definitions become available. The transformation involves text-to-model, model-to-model and model-to-text", "num_citations": "10\n", "authors": ["579"]}
{"title": "Using B to verify UML Transformations\n", "abstract": " This paper describes the use of the B formal method to verify semantic properties of UML graphical models, and the correctness of transformations on these models.", "num_citations": "10\n", "authors": ["579"]}
{"title": "From implicit specifications to explicit designs in reactive system development\n", "abstract": " In this paper we describe how the RSDS method can be used as a bridge between implicit Z-style specifications of reactive systems, and explicit B AMN designs of these systems. We define the translation from RSDS to B and verify its correctness. We also define controller decomposition techniques, and a translation to SMV.", "num_citations": "10\n", "authors": ["579"]}
{"title": "Annealing and data decomposition in VDM\n", "abstract": " VDM++ is a formal specification language derived from VDMSL and incorporating object-oriented structuring based on language extensions which owe much to SmallTalk (though features have been added to cater for specifying reactive real-time systems). Research on the language has been in progress since about 1991[1][2], but it is only recently that papers have begun to be published on the subject[3][4][5].Several more-detailed papers are in preparation. In particular, a paper describing the concept of annealing in some detail will be ready shortly.Our attention has recently been drawn to the paper by Jian Lu [6] which describes a process of data decomposition in VDM bearing some relationship to our concept of annealing. The present paper is intended to give an introduction to the annealing concept, and to show how it relates to the work of Jian Lu.", "num_citations": "10\n", "authors": ["579"]}
{"title": "Transforming continuous into discrete specifications with VDM++\n", "abstract": " The VDM++ language, developed in the ESPRIT AFRODITE language as an object-oriented, concurrent and real-time extension of VDM, supports the specification of continuous and hybrid behaviour via the concept of time variables. These variables, which can be either inputs or outputs to a class, may vary continuously over time, and without the execution of any method of the class taking place. They can be constrained and related by differential and integral calculus formulae. (3 pages)", "num_citations": "10\n", "authors": ["579"]}
{"title": "Improving the process of system specification and refinement in B\n", "abstract": " This paper describes systematic approaches to the formalisation and refinement of domain and analysis models in the B Abstract Machine Notation (AMN). These are intended to improve the process of formalisation of requirements, and the feasibility of formal development from these formalised requirements.               Static and dynamic models are addressed, and a comparison of the effectiveness of two alternative approaches to formalisation is performed, based upon the proof requirements generated by these approaches. A strategy for refinement to code and reuse of existing developments in the context of the B methodology is also described. A number of case studies are used to illustrate the approach.", "num_citations": "10\n", "authors": ["579"]}
{"title": "A constraint-based fuzzy inference system\n", "abstract": " This paper describes an inference system for uncertain predicates, providing an alternative to the maximal entropy method used by Paris and Vencovska in             In the Appendix we give an example of the application of the process, and a formal definition of the logics that underlie the system.", "num_citations": "10\n", "authors": ["579"]}
{"title": "Extracting Correspondences from Metamodels Using Metamodel Matching.\n", "abstract": " In Model-Driven Engineering (MDE), metamodels define the structure of software models such as Petri Nets. This paper proposes a new approach to extract correspondences from metamodels, in order to automatically derive transformations on models. We present the approach on an example of two versions of metamodels for Petri Nets, and evaluate it on benchmark examples of metamodel matching.", "num_citations": "9\n", "authors": ["579"]}
{"title": "Translating UML-RSDS OCL to ANSI C\n", "abstract": " In this paper we describe a transformation from a subset of OCL to ANSI C code, and we show that the generated code provides improved efficiency compared to OCL execution using Java, C# or C++. The transformation is itself formally specified using OCL.", "num_citations": "9\n", "authors": ["579"]}
{"title": "Language-independent model transformation verification\n", "abstract": " One hinderance to model transformation verification is the large number of different MT languages which exist, resulting in a large number of different language-specific analysis tools. As an alternative, we define a single analysis process which can, in principle, analyse speci- fications in several different transformation languages, by making use of a common intermediate representation to express the semantics of trans- formations in any of these languages. Some analyses can be performed directly on the intermediate representation, and further semantic models in specific verification formalisms can be derived from it. We illustrate the approach by applying it to ATL.", "num_citations": "9\n", "authors": ["579"]}
{"title": "Design patterns for model transformations\n", "abstract": " Model transformations are a central element of model-driven software development. This paper defines design patterns for the specification and implementation of model transformations. These patterns are commonly recurring structures and mechanisms which we have identified in many specific transformations. In this paper we show how they can be used together to support an overall development process for model transformations from high-level specifications to executable Java implementations.", "num_citations": "9\n", "authors": ["579"]}
{"title": "Refinement Patterns for UML\n", "abstract": " This paper describes strategies or \u2018patterns\u2019 for the refinement of UML specifications into executable implementations, using a semantically precise subset, UML-RSDS, of UML.", "num_citations": "9\n", "authors": ["579"]}
{"title": "Formalising inter-model consistency of the UML\n", "abstract": " In this paper we define consistency rules between class diagrams, object diagrams and statecharts in a subset of UML, based on the UML metamodel and a formal semantics for these models.", "num_citations": "9\n", "authors": ["579"]}
{"title": "Composition of reactive system components\n", "abstract": " This paper will present the case for using a formal component-based specification technique for reactive systems, such as the Object Calculus of Fiadeiro and Maibaum. The Object Calculus provides a modular, highly declarative and abstract specification language, suitable for refinement using model-based design notations such as B or VDM. In the Object Calculus, pre/post style specifications of the effect of actions can be given, together with temporal logic specifications of expected histories of behaviour of the system. Keywords: Temporal logic, Reactive systems, Program specification, Object Calculus, Specification languages. Workshop Goals: Investigate application of formal specification in component-based systems, particularly reactive systems. 1 Background Temporal logic is an established technique for the specification of reactive systems: it has the advantage of being declarative and supporting reasoning, and it is sufficiently expressive for many practical cases. The...", "num_citations": "9\n", "authors": ["579"]}
{"title": "Specifying a concept-recognition system in Z++\n", "abstract": " Specifying a concept-recognition system in Z++ | Object-oriented specification case studies ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksObject-oriented specification case studiesSpecifying a concept-recognition system in Z ++ chapter Specifying a concept-recognition system in Z ++ Share on Authors: Kevin C Lano profile image K. Lano View Profile , Howard P Haughton profile image H. Haughton View Profile Authors Info & Affiliations Publication: Object-oriented specification case studiesJanuary 1994 Pages 137\u2013157 1citation", "num_citations": "9\n", "authors": ["579"]}
{"title": "The impact of integrating agile software development and model-driven development: a comparative case study\n", "abstract": " Agile and Model-Driven Development integration (Agile MDD) is of significant interest to researchers who want to leverage the best of both worlds. Currently, there is no clear evidence or proof for the real impact of such integration. As a first step in this direction, this paper reports an empirical investigation on the impact of integrating Agile and Model-Driven Development on the quality of software systems. To this end, we developed a financial application using Agile MDD, which is further contrasted with three other independent versions of the same application developed using different approaches: Agile method, MDD method, and traditional (manually-coded) method, respectively. We also compared the functionality of the systems and a variety of technical debt metrics measuring the quality of the code and its design. Based on the case study results, we have found that the use of Agile MDD shows some\u00a0\u2026", "num_citations": "8\n", "authors": ["579"]}
{"title": "Verified bidirectional transformations by construction\n", "abstract": " Bidirectional transformations (bx) are of increasing significance in model-based engineering. Currently bx are defined using a number of specialised transformation languages. In this paper we show how standard UML elements such as use cases and OCL constraints can be used to define bx, thus taking advantage of the wide industrial and educational adoption and support for UML. We define patterns and techniques for specifying bx so that they are correct by construction.", "num_citations": "8\n", "authors": ["579"]}
{"title": "Null Considered Harmful (for Transformation Verification).\n", "abstract": " The use of explicit null and invalid values in OCL can lead to complex and hard-to-verify specifications. In addition, these values complicate the logic of OCL and of transformation languages that use OCL, making it difficult to provide effective verification support for these languages. We define an alternative technique for using OCL with UML and model transformations which avoids the use of null and undefined values, and we present verification techniques for a transformation language, UML-RSDS, based on this approach.", "num_citations": "8\n", "authors": ["579"]}
{"title": "Model transformation specification and design\n", "abstract": " Model transformations are a central element of model-driven development (MDD) approaches such as the model-driven architecture (MDA). The correctness, modularity, and flexibility of model transformations is critical to their effective use in practical software development.In this chapter, we describe techniques for model transformation specification and implementation. We focus particularly on the UML-RSDS approach for the automated derivation of transformation implementations from high-level specifications, which uses specification and implementation patterns to guide the choice of implementation strategy for a particular problem. We illustrate this approach using several model transformation case studies of different kinds (re-expression, refinement, quality improvement, and abstraction transformations).", "num_citations": "8\n", "authors": ["579"]}
{"title": "Invariant-based synthesis and composition of control algorithms using B\n", "abstract": " This paper describes techniques for the automatic synthesis of veried controllers for discrete event systems, based on the invariants of behaviour required for such systems. We dene alternative structuring approaches for controllers, and the correspondences between this decomposition and structuring in the B formal method, which is used to provide an implementation of the control systems. 1", "num_citations": "8\n", "authors": ["579"]}
{"title": "Design patterns: applications and open issues\n", "abstract": " The field of software design patterns has grown extensively since the first work on patterns in the 1990s. Design patterns have proved useful as encodings of good design practice and expert knowledge in a wide variety of domains, from enterprise information systems to software security. We look at some recent developments in the application of patterns, and identify some remaining theoretical and practical issues with the use of patterns.", "num_citations": "7\n", "authors": ["579"]}
{"title": "Integrating goal-oriented measurement for evaluation of model transformation\n", "abstract": " Model transformations have become a key element of model-driven software development, being used to transform platform-independent models to platform-specific models, to improve model quality, to introduce design patterns and refactorings, and to map models from one language to another. In this paper, a survey is presented to review different model transformation techniques. In addition, the Goal/Question/Metric (G/Q/M) paradigm has been used to evaluate the comprehensibility of these model transformation approaches.", "num_citations": "7\n", "authors": ["579"]}
{"title": "Concurrency specification in UML-RSDS\n", "abstract": " Concurrency Specification in UML-RSDS - Research Portal, King's College, London King's College London King's main site Research portal Home Researchers Research Groups Research Outputs Research Funding Internal Research Outputs Theses . Journals Publishers Concurrency Specification in UML-RSDS Research output: Contribution to journal \u203a Conference paper K Lano, K Androutsopoulos, D Clark Overview Citation formats Original language English Journal MODELS Published 2006 Event MARTES Workshop - Duration: 1 Jan 2006 \u2192 \u2026 King's Authors K Lano (Informatics, Software Modelling and Applied Logic) Post to Twitter Post to FaceBook Post to Digg View graph of relations By the same authors A model-driven framework for developing android-based classic multiplayer 2D board games Derakhshandi, M., Kolahdouz-Rahimi, S., Troya, J. & Lano, K., Nov 2021, In: Automated Software \u2026", "num_citations": "7\n", "authors": ["579"]}
{"title": "Supporting co-use of VDM and B by translation\n", "abstract": " VDM and B are two mature formal methods currently in use by industry and supported by commercial tools. Though the methods are foundationally similar, the coverage of their supporting tools di ers signi cantly. The integration and co-use of the two methods has been considered in a number of previous papers, and it has been demonstrated that both methods can be pro tably applied at di erent points in the development life-cycle, with initial abstract speci cations in VDM being translated into design speci cations in B prior to re nement into code. In this paper we describe a partial translation from VDM to B, which may allow automated support for this step in the process. We also describe possible future extensions to the translation.", "num_citations": "7\n", "authors": ["579"]}
{"title": "Invariants as design templates in object-based systems\n", "abstract": " Recent work using VDM++(see [1]) has shown how objects in an object-oriented language can be refined by a process of transformation of an initial class into structures of (usually) simpler objects. The process has been nick-named\" annealing\" by analogy with the physical process which changes the crystaline structure of a material while retaining its chemical properties. This process is considered an important aspect of system development in relation to object oriented systems, especially where formal correctness is an objective. It was shown in [2] that it is a mechanism by which model splitting (see Jian Lu, 1995 [3]) may be implemented. In [1] it was applied to the development of design patterns (see for example Gamma [4]) to give them a formal basis. In this paper we pay special attention to the way in which the structures of the specified system depends on the logical structure of the invariant", "num_citations": "7\n", "authors": ["579"]}
{"title": "Development of concurrent systems in B AMN\n", "abstract": " This paper outlines an approach to extending B AMN to support concurrent specification, using a combination of linear temporal logic and Ada style task definitions. The extension is applied to the \u201cproduction cell\u201d case study.", "num_citations": "7\n", "authors": ["579"]}
{"title": "Combining object-oriented representations of knowledge with proximity to conceptual prototypes\n", "abstract": " A framework for knowledge representation that combines the fuzzy reasoning of systems and object-oriented databases is suggested. The use of objects to represent knowledge has become popular. However, this organization of knowledge, as a classification of entities by means of their attributes and their characteristic operations, returns to a traditional view of the formation of concepts (H. Gardner, 1985). This view, that conceptual categories can all be defined in the crisp way that mathematical concepts are defined, is not plausible for many real-world examples, and the idea of categories as formed from a clustering of data around a conceptual prototype, with an associated nearness measure, was substituted in its place (E. Rosch, 1978). A system that combines these two apparently distinct means of representation is described. Machine learning techniques are applied to the formation of suitable metrics for\u00a0\u2026", "num_citations": "7\n", "authors": ["579"]}
{"title": "Intuitionistic modal logic and set theory\n", "abstract": " The mathematical treatment of the concepts of vagueness and approximation is of increasing importance in artificial intelligence and related research. The theory of fuzzy sets was created by Zadeh [Z] to allow representation and mathematical manipulation of situations of partial truth, and proceeding from this a large amount of theoretical and applied development of this concept has occurred. The aim of this paper is to develop a natural logic and set theory that is a candidate for the formalisation of the theory of fuzzy sets. In these theories the underlying logic of properties and sets is intuitionistic, but there is a subset of formulae that are \u2018crisp\u2019, classical and two-valued, which represent the certain information. Quantum logic or logics weaker than intuitionistic can also be adopted as the basis, as described in [L]. The relationship of this theory to the intensional set theory MZF of [Gd] and the global intuitionistic set\u00a0\u2026", "num_citations": "7\n", "authors": ["579"]}
{"title": "Automated Synthesis of ATL Transformations from Metamodel Correspondences.\n", "abstract": " In this paper we describe techniques for semi-automatically synthesising transformations from metamodel correspondences, in order to accelerate transformation development. We provide a strategy for synthesising complete ATL transformations from correspondences, and evaluate the approach using examples from the ATL zoo.", "num_citations": "6\n", "authors": ["579"]}
{"title": "Improving the application of agile modelbased development: Experiences from case studies\n", "abstract": " Agile model-based development has the potential to combine the benefits of both agile and model-based development (MBD) approaches: rapid automated software generation, lightweight development processes and direct customer involvement. In this paper, we analyse three application case studies of agile MBD, and we identify the factors which have contributed to the success or failure of these applications. We propose an improved agile MBD approach, and give guidelines on its application, in order to increase the effectiveness and success rate of applications of agile MBD.", "num_citations": "6\n", "authors": ["579"]}
{"title": "Experiences of Teaching Model-based Development.\n", "abstract": " Since 2012 we have been teaching agile development and model-based development (MBD) in undergraduate courses at King\u2019s College London. In this paper we analyse the results of practical courseworks in agile MBD, taken from 2013-14 and 2014-15. We identify the factors which have contributed to the success or failure of students to apply theoretical knowledge to these practical problems, and we consider how educational techniques can be improved in this area.", "num_citations": "6\n", "authors": ["579"]}
{"title": "Solving the TTC 2014 Movie Database Case with UML-RSDS.\n", "abstract": " This paper describes a solution to the Movie Database case using UML-RSDS. The solution specification is declarative and logically clear, whilst the implementation (in Java) is of practical efficiency.", "num_citations": "6\n", "authors": ["579"]}
{"title": "Solving the Petri-Nets to statecharts transformation case with UML-RSDS\n", "abstract": " This paper provides a solution to the Petri-Nets to statecharts case using UML-RSDS. We show how a highly declarative solution which is confluent and invertible can be given using this approach.", "num_citations": "6\n", "authors": ["579"]}
{"title": "Formalising object-oriented models in the object calculus\n", "abstract": " This paper identifies how object models, statecharts and interaction diagrams can be given a semantics in the Object Calculus of Fiadeiro and Maibaum. A compositional interpretation of object model and statechart diagrams is developed, with separate theories constructed for object instances, class managers and associations which are then combined using categorical constructions to yield a formal interpretation of complete systems.             We use this semantics to identify some problematic features of these notations in the Syntropy method.", "num_citations": "6\n", "authors": ["579"]}
{"title": "Component Composition in Business and System Modelling\n", "abstract": " Bespoke development of large business systems can be couched in terms of the composition of components, which are, put simply, chunks of development work. Design, mapping a specification to an implementation, can also be expressed in terms of components: a refinement comprising an abstract component, a concrete component and a mapping between them. Similarly, system extension is the composition of an existing component, the legacy system, with a new component, the extension. This paper overviews work being done on a UK EPSRC funded research project formulating and formalizing techniques for describing, composing and performing integrity checks on components. Although the paper focuses on the specification and development of information systems, the techniques are equally applicable to the modeling and re-engineering of businesses, where no computer system may be involved.", "num_citations": "6\n", "authors": ["579"]}
{"title": "A Real-time Action Logic of Objects\n", "abstract": " This paper presents work performed in the EPSRC ''Object-oriented Specification of Reactive and Real-time Systems'' project. It aims to extend the Object Calculus of Fiadeira and Mailbaum to cover durative actions and real-time constraints. We define a core logic, termed ''Real-time action logic'' (RAL) which can provide an axiomatic semantics and reasoning framework for concurrent, real-time and object-oriented specification languages. The logic could also be viewed as providing the basis of a specification language in its own right. We show how a model action logic (MAL) and real-time logic (RTL) for reasoning about concurrent object-oriented pograms and specifications can be derived from RAL, and indicate how this formalism can be used to provide an axiomatic semantics for a large part of the object-oriented specification language VDM++.", "num_citations": "6\n", "authors": ["579"]}
{"title": "Refinement, Subtyping and Subclassing in VDM++.\n", "abstract": " This paper will consider the relationships between the concepts of refinement and subtyping for the object-oriented formal specification language VDM++[9, 5]. This language is an object-oriented extension of the VDM-SL specification language, and also contains concurrent and real-time specification features. Formal definitions of refinement and subtyping for the sequential and concurrent parts of the language will be given, and the roles of inheritance, refinement and subtyping in a formal development process defined. Small examples are used to illustrate the proposed process. More substantial examples are given in [8].", "num_citations": "6\n", "authors": ["579"]}
{"title": "Agile Specification of Code Generators for Model-Driven Engineering\n", "abstract": " The production of code or other text from software models is an essential task in Model-Driven Engineering (MDE) approaches for software development. Automated code generation is key to the productivity improvements observed in MDE approaches. Nonetheless, there has been a lack of systematic research into optimising the construction of code generators, and in the current state of the art such generators are usually developed manually, which involves detailed programming in 3GLs, or in specialised code generation languages. In either case, high expertise in the source language abstract syntax is necessary. In this paper, we survey different approaches for the construction of code generators, and we define an approach for declarative specification of code generators by text-to-text mappings, in terms of the concrete syntax of both source and target languages. We show that this approach enables the rapid development of code generators, which are also more concise and efficient compared to previous generators.", "num_citations": "5\n", "authors": ["579"]}
{"title": "Patterns for specifying bidirectional transformations in UML-RSDS\n", "abstract": " In this paper, we identify model transformation specification and design patterns, which support the property of transformation bidirectionality: the ability of a single specification to be applied either as a source-to-target transformation or as a target-to-source transformation. In contrast to previous work on bidirectional transformations (bx), we identify the important role of transformation invariants in the derivation of reverse transformations, and show how patterns and invariants can be used to give a practical means of defining bx in the UML-RSDS transformation language.", "num_citations": "5\n", "authors": ["579"]}
{"title": "Analysis of hybrid model transformation language specifications\n", "abstract": " The most widely-used model transformation languages, such as ATL and ETL, combine declarative and imperative aspects to define how one model is derived from another, or is updated in-place. General verification techniques for such languages must therefore be able to support reasoning about both declarative and imperative aspects. We define an analysis process which can, in principle, treat several different hybrid transformation languages, by making use of a common intermediate representation to express the semantics of transformations in any of these languages. Some analyses can be performed directly on the intermediate representation, and further semantic models in specific verification formalisms can be derived from it.", "num_citations": "5\n", "authors": ["579"]}
{"title": "Solving the TTC 2011 model migration case with UML-RSDS\n", "abstract": " In this paper we apply the UML-RSDS notation and tools to the GMF model migration case study and explain how to use the UML-RSDS tools.", "num_citations": "5\n", "authors": ["579"]}
{"title": "Semantics and Refinement of Behavior State Machines.\n", "abstract": " In this paper we present an axiomatic semantics for UML 2 behavior state machines, and give transformation rules for establishing refinements of behavior state machines, together with proofs of the semantic validity of these rules, based on a unified semantics of UML 2.", "num_citations": "5\n", "authors": ["579"]}
{"title": "Automated synthesis of high-integrity systems using model-driven development\n", "abstract": " Model-driven development (MDD) is the construction of software systems using formal or semi-formal design models as the basis. One potential benefit of MDD is that the construction of software from models can be automated, to reduce development costs and errors. We describe the application of MDD to two areas of high-integrity systems: reactive control systems, and web applications. A subset of UML with a precise semantics is used to support analysis and verified model transformations.", "num_citations": "5\n", "authors": ["579"]}
{"title": "Design for Change: Advanced System Design with Java, UML and MDA\n", "abstract": " The world of software development is experiencing dramatic growth and diversification, with a multitude of new languages and technologies continually being introduced and elaborated: XML,. Net, web services, mobile computing... It therefore becomes increasingly difficult to keep up to date with even the technologies in one particular area.At the same time, important steps towards unification and standardisation of notations and methods are taking place-the new UML 2.0 standard is the prime example of these, and provides a common notation and set of concepts which can be used in any object-oriented development for any kind of system. The MDA (Model-driven Architecture) likewise provides a general strategy for separating platform-independent specifications of systems from their platformspecific implementations.", "num_citations": "5\n", "authors": ["579"]}
{"title": "Formal implementation of procedural controllers for event-driven sequential systems in chemical processes\n", "abstract": " This paper describes the application of a method to carry out a formally correct implementation of a logic controller for an event-driven process system. Given a control architecture and the functional specification of each controller module, formal proofs are established and discharged to demonstrate the logical equivalence between the functional specification and the code implementation of logic controllers. The methodology is illustrated with an example.", "num_citations": "5\n", "authors": ["579"]}
{"title": "Specification of required non-determinism\n", "abstract": " We present an approach to the specification of required external non-determinism: the willingness of a component to respond to a number of external action requests, using a language, COMMUNITY, which provides both permission and willingness guards on actions.             This enables a program-like declaration of required non-determinism, in contrast to the use of a branching-time temporal logic. We give a definition of parallel composition for this language, and show that refinement is compositional with respect to parallel composition. We use the concepts developed for COMMUNITY to identify extensions to the B and VDM++ model-based specification languages to incorporate specification of required non-determinism. In particular, we show that preconditions may be considered as a form of willingness guard, separating concerns of acceptance and termination, once module contracts are re-interpreted\u00a0\u2026", "num_citations": "5\n", "authors": ["579"]}
{"title": "Water Hyacinth: A Potential Lignocellulosic Biomass for Bioethanol\n", "abstract": " Scarcity of non-renewable energy sources due to the continuous depletion of fossil fuels has paved need for sustainable and environmentally friendly biofuels from biomass. Of all the natural resources used for production of biofuel, lignocellulosic biomass is the most attractive source due to its sustainability, wide abundance and easy availability. Efficient and cost-effective conversion of lignocellulosic biomass to biofuel production requires various steps including pretreatment, saccharification and fermentation process. In the present chapter, we have consolidated different generations of biofuels, composition of lignocellulosic biomass and a brief overview of the current status of biofuel production.", "num_citations": "4\n", "authors": ["579"]}
{"title": "Declarative specification of bidirectional transformations using design patterns\n", "abstract": " Bidirectional transformations (bx) are a specific form of model transformation (MT) used in model-driven engineering to maintain consistency between two models, which may change independently. Currently bx are defined using a number of specialized transformation languages, which have had limited uptake due to complex semantics and poor efficiency. In contrast, unidirectional transformation languages such as ATL have been widely adopted, but require separate forward and reverse transformations to be written to address model synchronization requirements. In this paper, we provide declarative specification techniques for bx, systematically constructed using MT design patterns. We define two approaches to declarative bx definition: 1) by automatically bidirectionalizing unidirectional transformation specifications and 2) by developing specification guidelines for the QVT-R standard language to make it more\u00a0\u2026", "num_citations": "4\n", "authors": ["579"]}
{"title": "Solving the Class Responsibility Assignment Case with UML-RSDS.\n", "abstract": " This case study [2] is an endogenous transformation which aims to optimally assign attributes and methods to classes to improve a measure, CRA, of class diagram quality. We provide a specification of the transformation in the UML-RSDS language [3, 4] using search-based software engineering techniques (SBSE).UML-RSDS is a model-based development language and toolset, which specifies systems in a platformindependent manner, and provides automated code generation from these specifications to executable implementations (in Java, C# and C++). Tools for analysis and verification are also provided. Specifications are expressed using the UML 2 standard language: class diagrams define data, use cases define the top-level services or functions of the system, and operations can be used to define detailed functionality. Expressions, constraints, pre and postconditions and invariants all use the standard OCL 2.4 notation of UML 2.", "num_citations": "4\n", "authors": ["579"]}
{"title": "Model transformation applications from requirements engineering perspective\n", "abstract": " Requirements Engineering (RE) is an essential process in the development of effective software systems, and it is the basis for subsequent development processes. At present, the focus of Model Transformation (MT) is mainly on the specification and implementation stages. Transformations are not using engineering principles, which may not be an issue within a small project, but it will be problematic in large scale industry projects. One of the main reasons that hinders a systematic RE process to be used before starting the development could be the false assumption that it is a waste of time/cost and would delay the implementation. The goal of this paper is to evaluate model transformation technology from a requirements engineering process point of view. We identify techniques for the RE of MT, taking into account specific characteristics of different categories of model transformations.", "num_citations": "4\n", "authors": ["579"]}
{"title": "Temporal logic specification and analysis for model transformations\n", "abstract": " In this paper we outline an approach for using temporal logic specifications and model-checking tools to express and verify model transformation properties. Linear Temporal Logic (LTL) is used to express transformation semantics, and the SMV formalism is used to encode this semantics and to perform model checking.", "num_citations": "4\n", "authors": ["579"]}
{"title": "Surrogate-assisted online optimisation of cloud IaaS configurations\n", "abstract": " Elasticity refers to the auto-scaling ability of clouds towards optimally matching their resources to actual demand conditions. An important problem facing the infrastructure and service providers is how to optimise their resource configurations online, to elastically serve time-varying demands. Most scaling methodologies provide resource reconfiguration decisions to maintain quality properties under environment changes. However, issues related to the timeliness of such reconfiguration decisions are often neglected. In this paper, we present a methodology for online optimisation of cloud configurations. We first employ a search-based approach to extract near-optimal configurations considering conflicting performance and business quality attributes. Towards reducing the burden of time-consuming evaluations of configurations' quality, we develop surrogate models to predict their quality based on history observations\u00a0\u2026", "num_citations": "4\n", "authors": ["579"]}
{"title": "Patterns for Model Transformation Specification and Implementation\n", "abstract": " In this paper we describe standard structures for model transformation specifications and implementations, which serve as patterns for constructing a wide range of model transformations. We use specification patterns to derive relationships between invertibility, change-propagation and the existence of language-level interpretations for transformations that are defined using the pattern. We also consider how these specification patterns can be used to systematically construct implementations for the specifications, and what software patterns (both variations on well-known design patterns, and those specific to the model transformation domain) are particularly relevant to model transformation implementation.", "num_citations": "4\n", "authors": ["579"]}
{"title": "Formal specification and verification of railway systems using UML\n", "abstract": " Formal Specification and Verification of Railway Systems Using UML - Research Portal, King's College, London King's College London King's main site Research portal Home Researchers Research Groups Research Outputs Research Funding Internal Research Outputs Theses . Journals Publishers Formal Specification and Verification of Railway Systems Using UML Research output: Chapter in Book/Report/Conference proceeding \u203a Conference paper Kevin Lano, Kelly Androutsopoulos, David Clark Overview Citation formats Original language English Title of host publication Unknown Publisher Unknown Publisher ISBN (Print) 963 9457 450 Published 2003 Event Formal Methods for Railway Operation and Control Systems Workshop - Budapest Duration: 1 Jan 2003 \u2192 \u2026 Conference Conference Formal Methods for Railway Operation and Control Systems Workshop City Budapest Period 1/01/2003 \u2192 \u2026 King's \u2026", "num_citations": "4\n", "authors": ["579"]}
{"title": "Demonstrating preservation of safety properties in reactive control system development\n", "abstract": " With the advent of comprehensive safety standards for software-dependent safety related systems, such as IEC 61508 and its specialisations for particular industry sectors (medical, machinery, process, etc), there is a need to establish combinations of techniques which can be used by industry to demonstrate conformance to these standards for particular developments. In this paper we describe parts of a method which involves such an integrated combination of techniques, and we illustrate these techniques on a case study of a control system for a food-processing plant.", "num_citations": "4\n", "authors": ["579"]}
{"title": "The VDM+ B project: Objectives and progress\n", "abstract": " The VDM+ B project is developing the formal underpinnings for an integration of VDM and B enabling their co-use within one development. In this paper, we describe the objectives for the project, the approach being undertaken and the current status of the work.", "num_citations": "4\n", "authors": ["579"]}
{"title": "Mapping procedural patterns to object-oriented design patterns\n", "abstract": " This paper presents a new approach to the use of design patterns for the reengineering of legacy code, using a mapping from procedural design patterns to object-oriented patterns. We show also how object-oriented design patterns can be formalised and correctness conditions for their application derived, in order to justify the preservation of functionality in the reengineering process. We give examples taken from case studies of reengineering legacy COBOL applications.", "num_citations": "4\n", "authors": ["579"]}
{"title": "Linking hazard analysis to formal specification and design in B\n", "abstract": " Once a hazard analysis of a system has been undertaken and a list of safety properties that it must satisfy derived, can this be used to obtain properties which a software controller for the system must satisfy? In addition, what evidential value for the safety of a system are proofs of correctness of a formal specification of its software components? We will examine these issues in the context of a specification and development technique for the B formal specification language, which has been used to specify and design discrete event control systems for batch-processing plants. A simple example is used to illustrate the ideas. The results obtained from a larger case study are also presented.", "num_citations": "4\n", "authors": ["579"]}
{"title": "Defining semantics for rigorous development in UML\n", "abstract": " The Unified Modelling Language (UML) is becoming the de facto industry standard notation for object-oriented analysis and design. In this paper we outline a semantic framework for UML which would support formal analysis and verification as part of a rigorous development process for critical systems. 1 Introduction The UML [8] combines and extends elements of previous OO notations such as OMT, Booch and Objectory. In contrast to these methods, its notations are precisely defined using the Object Constraint Language (OCL) and a meta-model to express the allowed forms of diagrams and their properties. In previous papers we have shown how the semantic meaning of some UML diagrams can also be precisely defined [4, 3]. This semantics supports the use of transformational development: the refinement of abstract models towards concrete models, using design steps which are known to be correct with respect to the semantics (all properties of the abstract model are preserved in the refined model)...", "num_citations": "4\n", "authors": ["579"]}
{"title": "Reasoning Techniques in VDM++\n", "abstract": " CiteSeerX \u2014 Reasoning Techniques in VDM++ Documents Authors Tables Log in Sign up MetaCart DMCA Donate CiteSeerX logo Documents: Advanced Search Include Citations Authors: Advanced Search Include Citations Tables: DMCA Reasoning Techniques in VDM++ (1994) Cached Download as a PDF Download Links [ftp.fys.ruu.nl] Other Repositories/Bibliography DBLP Save to List Add to Collection Correct Errors Monitor Changes by K. Lano , Distribution Afrodite Teams Summary Citations Active Bibliography Co-citation Clustered Documents Version History Share Facebook Twitter Reddit Bibsonomy OpenURL Abstract This document identifies proof techniques for demonstrating refinement, subtyping and internal consistency for VDM Keyphrases proof technique internal consistency Powered by: Apache Solr About CiteSeerX Submit and Index Documents Privacy Policy Help Data Source Contact Us \u2026", "num_citations": "4\n", "authors": ["579"]}
{"title": "An algebraic semantics for the specification language Z++\n", "abstract": " This paper describes a formal semantics for the object-oriented specification language Z++,(13), and gives applications of this semantics to the definition of refinements and transformations of specifications in the language. The language itself is an extension of Z (22), and uses algebraic specifications of class behaviour as external specifications of these classes, which may in addition have internal state-based specifications of their behaviour. The algebraic description is used to satisfy proof obligations required of systems which use this class, and the state-based description is used in refinement.", "num_citations": "4\n", "authors": ["579"]}
{"title": "Synthesis of mobile applications using AgileUML\n", "abstract": " In this paper we describe a method to apply the AgileUML toolset to synthesise mobile apps from UML models. This is a lightweight model-driven engineering (MDE) approach suitable for app developers who need to rapidly produce native apps for either or both Android or iOS platforms.", "num_citations": "3\n", "authors": ["579"]}
{"title": "A comparison of quality flaws and technical debt in model transformation specifications\n", "abstract": " The quality of model transformations (MT) has high impact on model-driven engineering (MDE) software development approaches, because of the central role played by transformations in MDE for refining, migrating, refactoring and other operations on models.For programming languages, a popular paradigm for code quality is the concept of technical debt (TD), which uses the analogy that quality flaws in code are a debt burden carried by the software, which must either be \u2018redeemed\u2019 by expending specific effort to remove its flaws, or be tolerated, with ongoing additional costs to maintenance due to the flaws.Whilst the analysis and management of quality flaws and TD in programming languages has been investigated in depth over several years, less research on the topic has been carried out for model transformations. In this paper we investigate the characteristics of quality flaws and technical debt in model\u00a0\u2026", "num_citations": "3\n", "authors": ["579"]}
{"title": "A process for integrating agile software development and model-driven development\n", "abstract": " Agile software development and Model-Driven Development (MDD) are two software engineering paradigms that contribute to enabling the rapid development of applications. Previous approaches have proposed the integration of Agile and MDD, however these approaches are either specific to one application domain, or fail to cover the complete development cycle, for example, to include requirements engineering. To address this problem we propose a general and comprehensive process that integrates Agile development and MDD, and that allows applications to be safely developed in an iterative and incremental manner. We also report on a case study to evaluate the application of the proposed process.", "num_citations": "3\n", "authors": ["579"]}
{"title": "Families to Persons Case with UML-RSDS\n", "abstract": " In this paper we describe a solution to the TTC 2017 families to persons bx case using the UML-RSDS subset of UML and OCL.", "num_citations": "3\n", "authors": ["579"]}
{"title": "Model-Driven Business Process Engineering\n", "abstract": " Model Driven development (MDD) is a software and systems development model that involves the application of visual modeling principles and best practices.", "num_citations": "3\n", "authors": ["579"]}
{"title": "Runtime infrastructure optimisation in cloud IaaS structures\n", "abstract": " The requirement for elasticity involves the ability of cloud data centers to add or remove resources at a fine grain and with a lead time of seconds, closely matching resources to the actual demand conditions. Elasticity techniques can assist cloud stakeholders in regards to: (i) alleviating data center capital and operating costs, (ii) keeping cloud services continuously available, (iii) supporting market flexibility. To date, most infrastructure scaling methodologies can provide resource reconfiguration decisions to maintain quality properties under environment changes. However, issues related to the timeliness of reconfiguration decisions under dynamic changes are not adequately addressed. In this paper, we describe the PhD motivation, research questions and methodology towards developing cloud infrastructure and hosted services QoS optimisations under environment uncertainties.", "num_citations": "3\n", "authors": ["579"]}
{"title": "Z, an object-orientated extension to Z\n", "abstract": " This paper defines an object-orientated extension, Z**, to the popular specification language Z [24]. This extension makes explicit the known object-orientated characteristics of Z specifications and allows more complex forms of inheritance and views of specifications, as well as multi-levelled specifications. These encourage a healthy separation between implementation levels in systems, thus making modification and development of systems easier. We give examples of the use of the language, and describe related tools for interactive refinement and maintenance of systems written using this notation.", "num_citations": "3\n", "authors": ["579"]}
{"title": "Slicing of UML Models.\n", "abstract": " This paper defines techniques for the slicing of UML models, that is, for the restriction of models to those parts which specify the properties of a subset of the elements within them. The purpose of this restriction is to produce a smaller model which permits more effective analysis and comprehension than the complete model, and also to form a step in factoring of a model. We consider class diagrams, individual state machines, and communicating sets of state machines.", "num_citations": "3\n", "authors": ["579"]}
{"title": "Specification and refinement of continuous real-time systems\n", "abstract": " This paper describes techniques for the specification and refinement of control and simulation software for systems involving continuous and discrete data. We give a formal concept of refinement suitable for this domain, which generalises conventional refinement in VDM-SL.             We also show how VDM++ can be used in conjunction with classical discrete controller synthesis techniques.", "num_citations": "3\n", "authors": ["579"]}
{"title": "Real-time Action Logic and Applications\n", "abstract": " This paper presents work performed in the EPSRC\\Object-oriented Speci cation of Reactive and Real-time Systems\" project. It aims to extend the Object Calculus of Fiadeiro and Maibaum to cover durative actions, real-time constraints and hybrid systems. We de ne a core logic, termed\\Real-time action logic\"(RAL) which can provide an axiomatic semantics and reasoning framework for concurrent, real-time and object-oriented speci cation languages. The logic could also be viewed as providing the basis of a speci cation language in its own right. We combine RAL with the object-oriented speci cation language VDM++ in order to provide a framework for speci cation and re nement of real-time systems. We show how a modal action logic (MAL) and real-time logic (RTL) for reasoning about concurrent object-oriented programs and speci cations can be derived from RAL, and indicate how this formalism can be used to provide an axiomatic semantics for a large part of VDM++(so that development steps in VDM++/RAL can be veri ed using RAL only). Applications of the formalism to proving correct re nement steps for hard real-time systems are given, together with a case study of a mine-pump control system, involving a combination of VDM++ and HRT-HOOD. A semantics for RAL is included.", "num_citations": "3\n", "authors": ["579"]}
{"title": "Design and Implementation\n", "abstract": " This chapter will cover the stages of development from a complete and validated specification through successive stages of refinement, involving design decisions about how certain specification elements should be expressed in a more code-oriented manner, until a stage is reached which corresponds to an immediately executable system. This process is a key advantage of B over earlier formal methods, particularly Z, which were designed mainly for use at the specification and requirements capture stages.", "num_citations": "3\n", "authors": ["579"]}
{"title": "Specification and analysis techniques in object-oriented methods\n", "abstract": " Specification and analysis techniques in object-oriented methods | Object-oriented specification case studies ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksObject-oriented specification case studiesSpecification and analysis techniques in object-oriented methods chapter Specification and analysis techniques in object-oriented methods Share on Authors: Kevin C Lano profile image K. Lano View Profile , M Tobin profile image M. Tobin View Profile Authors Info & Affiliations Publication: Object-oriented specification case studiesJanuary 1994 Pages 1\u201319 0citation 0 Downloads Metrics Total Citations0 Total Downloads0 Last 12 \u2026", "num_citations": "3\n", "authors": ["579"]}
{"title": "Object-oriented specification languages in the software life cycle\n", "abstract": " Object-oriented specification languages in the software life cycle | Object-oriented specification case studies ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksObject-oriented specification case studiesObject-oriented specification languages in the software life cycle chapter Object-oriented specification languages in the software life cycle Share on Authors: Kevin C Lano profile image K. Lano View Profile , Howard P Haughton profile image H. Haughton View Profile Authors Info & Affiliations Publication: Object-oriented specification case studiesJanuary 1994 Pages 55\u201379 0citation 0 Downloads Metrics Total Citations0 Total \u2026", "num_citations": "3\n", "authors": ["579"]}
{"title": "Expressing the Semantics of VDM++ in RTL\n", "abstract": " CiteSeerX \u2014 Expressing the Semantics of VDM++ in RTL Documents Authors Tables Log in Sign up MetaCart DMCA Donate CiteSeerX logo Documents: Advanced Search Include Citations Authors: Advanced Search Include Citations Tables: DMCA Expressing the Semantics of VDM++ in RTL (1994) Cached Download as a PDF Download Links [ftp.fys.ruu.nl] Save to List Add to Collection Correct Errors Monitor Changes by K. Lano , Distribution Afrodite Teams Summary Citations Active Bibliography Co-citation Clustered Documents Version History Share Facebook Twitter Reddit Bibsonomy OpenURL Abstract This report outlines the formal semantics of VDM Keyphrases formal semantics Powered by: Apache Solr About CiteSeerX Submit and Index Documents Privacy Policy Help Data Source Contact Us Developed at and hosted by The College of Information Sciences and Technology \u00a9 2007-2019 The \u2026", "num_citations": "3\n", "authors": ["579"]}
{"title": "Standards and techniques for object-oriented formal specification\n", "abstract": " The authors discuss the significance and application of object-oriented formal specification languages to general software engineering projects and particularly to a safety-critical and mission-critical systems. They consider the role that standardisation of such languages could play in promoting their effective uptake. They give syntactic and semantic details of two object-oriented specification languages: Object-Z and Z++, and of the object-based specification language B. Aspects of these languages are considered as inputs to an eventual standard framework for such languages. These languages have been used for a wide variety of systems, from data-processing to artificial intelligence and communication protocols. They give simple examples of specifications in these languages to support a comparative evaluation.< >", "num_citations": "3\n", "authors": ["579"]}
{"title": "REDO at Oxford\n", "abstract": " The Programming Research Group at Oxford University is participating in the ESPRIT project REDO. The project is targeted at the ReEngineering and reDOcumentation of COBOL and Fortran programs. The working consortium involves academic and industrial partners across Europe, under the overall management of Lloyd\u2019s Register of Shipping in London. Three universities (Durham, Oxford and Limerick), five software products and services houses (Centrisa (Sp), CTC (Gr), ITS (Sp), Grumman (Ger), Marconi (UK)) and two large users of application codes (Electricit\u00e9 de France (Fr), Delft Hydraulics (Nth)) provide a lively spectrum of talents and activities.", "num_citations": "3\n", "authors": ["579"]}
{"title": "Implementing QVT-R via semantic interpretation in UML-RSDS\n", "abstract": " The QVT-Relations (QVT-R) model transformation language is an OMG standard notation for model transformation specification. It is highly declarative and supports (in principle) bidirectional (bx) transformation specification. However, there are many unclear or unsatisfactory aspects to its semantics, which is not precisely defined in the standard. UML-RSDS is an executable subset of UML and OCL. It has a precise mathematical semantics and criteria for ensuring correctness of applications (including model transformations) by construction. There is extensive tool support for verification and for production of 3GL code in multiple languages (Java, C#, C++, C, Swift and Python). In this paper, we define a translation from QVT-R into UML-RSDS, which provides a logically oriented semantics for QVT-R, aligned with the RelToCore mapping semantics in the QVT standard. The translation includes variation points\u00a0\u2026", "num_citations": "2\n", "authors": ["579"]}
{"title": "Extending OCL with Map and Function Types\n", "abstract": " Map and function types are of high utility in software specification and design, for example, maps can be used to represent configurations or caches, whilst function values can be used to enable genericity and reuse in a specification, and to support mechanisms such as callbacks or closures in an implementation. These types have been incorporated into the leading programming languages, including Java, C++, Swift and Python.", "num_citations": "2\n", "authors": ["579"]}
{"title": "Enhancing model transformation synthesis using natural language processing\n", "abstract": " In this paper we examine how model transformation specifications can be derived from requirements and examples, using a combination of natural language processing (NLP), machine learning (ML) and inductive logic programming (ILP) techniques, together with search-based software engineering (SBSE) for metamodel matching. The AI techniques are employed in order to improve the performance and accuracy of the base SBSE approach, and enable this to be used for a wider range of transformation cases. We propose a specific approach for the co-use of the techniques, and evaluate this on a range of transformation examples from different sources.", "num_citations": "2\n", "authors": ["579"]}
{"title": "Technical debt in procedural model transformation languages\n", "abstract": " Model transformations (MT) are a significant element of model-based and model-driven engineering approaches. Hence their quality is important for their effectiveness for use in such developments. The concept of technical debt (TD) estimates the impact of quality flaws on the maintenance costs of software artefacts.In this paper we define a quality model for model transformation languages, and define TD indicators for MT based on this model. We apply the indicators to evaluate the TD levels in 40 transformation cases in three procedural MT languages: QVT-O, Kermeta and EGL, and compare these levels with results for the declarative QVT-R language.", "num_citations": "2\n", "authors": ["579"]}
{"title": "eXtreme Modeling: an approach to agile model-based development\n", "abstract": " Model-based development (MBD) is the development of software systems using graphical and textual models such as UML class diagrams. MBD and related approaches such as Model-driven development (MDD) have had some success within specific application domains, such as the automotive industry. Agile software development approaches such as Scrum and eXtreme Programming (XP) have been widely adopted in many different industry sectors. These approaches emphasise iterative development and close customer collaboration. eXtreme Modeling (XM) is a model-based development analogue of eXtreme Programming: it is an agile development approach based on the use of software models to specify and synthesise software systems. In this paper we look at the track record of agile and model-based development, and we consider the case for combining these approaches into XM to obtain benefits from both approaches: rapid automated software generation, lightweight development processes, and direct customer involvement. An example application of XM in the financial services domain is described.", "num_citations": "2\n", "authors": ["579"]}
{"title": "Agile Model-driven Engineering of Financial Applications.\n", "abstract": " Flexibility and agility are key properties for financial applications development: systems need to be easy to change and evolve to keep up with changing market conditions and opportunities, and changes in the regulatory environment.In many cases, Excel with VB is the main platform used for the development of applications in the finance industry. This offers advantages of flexibility and user customisation of applications in rapid development cycles. However, this dependence upon a proprietary software package causes problems when applications must be migrated to an alternative platform, or when precise control over functionality is needed. Modeldriven development (MDD) and model transformations have a good potential for improving these aspects of financial development. In this paper, we describe techniques that enable the use of Excel as an MDD front-end for the specification and development of financial applications in a rigorous manner.", "num_citations": "2\n", "authors": ["579"]}
{"title": "Model Transformation Semantic Analysis by Transformation.\n", "abstract": " In this paper we show how translation from QVT-R to an intermediate semantic representation can be used to support analysis of QVT-R specifications. We use the UML to RDB case study to illustrate the approach.", "num_citations": "2\n", "authors": ["579"]}
{"title": "Model transformation design patterns for bidirectionality\n", "abstract": " In this paper we identify model transformation specification and design patterns which support the property of transformation bidirectionality: the ability of a single specification to be applied either as a source-to-target transformation or as a target-to-source transformation.", "num_citations": "2\n", "authors": ["579"]}
{"title": "Development process patterns for distributed onshore/offshore software projects\n", "abstract": " the globalisation of the commercial world, and the use of distributed working practices (Offshore/onshore/nearshore) has increased dramatically with the improvement of information and communication technologies. Many organisations, especially those that operate within knowledge intensive industries, have turned to distributed work arrangements to facilitate information exchange and provide competitive advantage in terms of cost and quicker delivery of the solutions. The information and communication technologies (ICT) must be able to provide services similar to face-to-face conditions. Additional organisations functions must be enhanced to overcome the shortcomings of ICT and also to compensate for time gaps, cultural differences, and distributed team work. Our proposed model identifies four key work models or patterns that affect the operation of distributed work arrangements, and we also propose guidelines for managing distributed work efficiently and effectively.", "num_citations": "2\n", "authors": ["579"]}
{"title": "Towards more abstract specification of model transformations\n", "abstract": " In this paper we define a framework for the specification and verification of transformations, based on the mathematical concept of institutions. We show how this framework can be used to specify transformations at a high level of abstraction, and can be used to characterise the correctness of transformations.", "num_citations": "2\n", "authors": ["579"]}
{"title": "Catalogue of model transformations\n", "abstract": " Purpose This transformation is useful when refining a PIM towards a PSM for a platform which does not support inheritance, such as the relational data model. It can also be used to remove multiple inheritance for refinement to platforms which do not support multiple inheritance.", "num_citations": "2\n", "authors": ["579"]}
{"title": "Verification of model transformations\n", "abstract": " Model transformations are a central element of model-driven development (MDD) approaches such as the model-driven architecture (MDA). The correctness of model transformations is critical to their effective use in practical software development, since users must be able to rely upon the transformations correctly preserving the semantics of models. In this paper we define a formal semantics for model transformations, and provide techniques for proving the termination, confluence and correctness of model transformations.", "num_citations": "2\n", "authors": ["579"]}
{"title": "Introduction to the Unified Modeling Language.\n", "abstract": " In this chapter we describe the primary notations of the Uni\ufb01ed Modeling Language (UML): class diagrams, state machines, use cases, interaction diagrams, activity diagrams, and deployment diagrams. The UML consists of a large collection of notations whose purpose is to model software systems in all their aspects: data, state, behavior, communication, services provided, timing properties, and deployment con\ufb01gurations. Each notation itself forms a complex language, and the notations are interrelated and interdependent, making the task of providing a uni\ufb01ed semantics for the UML very challenging.", "num_citations": "2\n", "authors": ["579"]}
{"title": "Extending UML with coordination contracts\n", "abstract": " Coordination contracts are a software analysis and design construct which enable separation between the stable components of a system and the rules which define the interactions of these components. This separation supports rapid evolution of rules without requiring modification to components. In this paper we show that contracts can be defined in UML, and we define an MDA-based development process which makes use of contracts.", "num_citations": "2\n", "authors": ["579"]}
{"title": "Coordination Contracts\n", "abstract": " This chapter defines the concept of coordination contract as a means of organising applications in terms of business rules or other required invariants which constrain the joint behaviour of the components they apply to. This approach to organisation of an application supports its adaption to changing requirements. We also show that some design patterns can be alternatively expressed in terms of contracts.", "num_citations": "2\n", "authors": ["579"]}
{"title": "Composition of reactive system components\n", "abstract": " In this paper we show how the Object Calculus of Fiadeiro and Maibaum can be used to specify reactive systems. This provides a modular, highly declarative, and abstract specification language, suitable for refinement using model-based design notations such as B or VDM.In the Object Calculus, pre/post style specifications of the effect of actions can be given, together with temporal logic specifications of expected histories of behavior of the system. We show how such specifications can be translated directly into B modules and an executable implementation.", "num_citations": "2\n", "authors": ["579"]}
{"title": "Reactive system refinement of distributed systems in B\n", "abstract": " In this paper we combine the \u2018event-driven B\u2019 style of B specification developed by Abrial with state machine refinement techniques to systematically refine abstract non-distributed models of telecommunication and network systems towards distributed implementations.             The aim is to link event-driven B techniques with object-oriented methods such as UML, and so enhance the industrial usability of these techniques.             We describe two case studies: a simple telecommunications system and a more complex network time service.1", "num_citations": "2\n", "authors": ["579"]}
{"title": "Compositional specification of controllers for batch process operations\n", "abstract": " This paper describes a combination of techniques from control engineering and formal methods in order to specify and implement control systems for batch process operations. It extends previous work by providing a non-trivial specification for the top-level polling loop of a control system, and defining composition techniques for controllers.               Batch process operations are common in industrial practice. Automated manufacturing systems and chemical processing are two examples. Common features of these operations enable us to provide a generic method for the formalisation of controllers for a large class of such systems, using B and procedural controller synthesis.               We give examples from case studies to illustrate the techniques.", "num_citations": "2\n", "authors": ["579"]}
{"title": "Refinement Through Pictures: Formalizing Syntropy Refinement Concepts\n", "abstract": " This paper provides techniques for formally justifying the re nement steps given for the Syntropy method of Cook and Daniels.It uses a temporal logic formalism, the Object Calculus, to formalise the models of Syntropy in modules which are theories, linked by theory-preserving morphisms. Re nements are also characterised by particular forms of interpretations between theories. The intention is to provide support for a system which allows re nement steps to be carried out via diagrammatic descriptions, rather than mathematical formulae, and hence to enhance the usability of a formal approach to object-oriented software development.", "num_citations": "2\n", "authors": ["579"]}
{"title": "Object-oriented Formal Development\n", "abstract": " The combination of object-orientation and formal methods introduces a wide range of speci cation and design mechanisms which have potential for improving software development. These are due to the power of abstract yet precise description which mathematics provides, which complements existing object-oriented analysis and design notations (which are abstract but imprecise) and programming languages (precise but concrete). This paper will introduce some of these techniques and show how they can be used to add more power to both formal methods and object-oriented speci cation and development.", "num_citations": "2\n", "authors": ["579"]}
{"title": "The intuitionistic alternative set theory\n", "abstract": " Lano, K., The intuitionistic alternative set theory, Annals of Pure and Applied Logic 59 (1993) 141\u2013156The Alternative Set Theory, as defined in Vopenka and Sochor, demonstrates how a set theory which avoids actually infinite sets can serve as a framework for much of classical mathematics. This paper defines a theory which can serve as an intuitionistic analogue of AST, and examines motivations for alternative formulations of classical AST from an intuitionistic and finitistic viewpoint. The intuitionistic AST uses appropriate modifications of the concepts of AST, with the notion of feasibility replacing finiteness, and with new distinctions between alternative definitions of Countable Class and Revealment. Results of classical AST which are still valid in this new system are given, and an interpretation of the corresponding classical system in the intuitionistic system is defined. This shows that the adoption of an\u00a0\u2026", "num_citations": "2\n", "authors": ["579"]}
{"title": "Using Prolog for Reverse-Engineering and Validation\n", "abstract": " A suite of tools for reverse-engineering and validating COBOL programs has been developed as part of the ESPRIT REDO project [5]. These tools produce functional abstractions and object-oriented designs and documentation from raw source code, with the aim of improving comprehensibility and maintainability.On loading, the application source code is parsed and immediately transformed behind the scenes into an intermediate language UNIFORM [8], which is somwhat simpler than COBOL, in order to facilitate further operations, and all the tools work from this representation of the application. The representation is maintained in a persistent database [3], and is also available to the user for certain operations. The semantics of UNIFORM has been completely formally specified [?], so the transformation apparently succeeds in giving an unambiguous formal semantics to COBOL (!) but it should be borne in mind that formal specifications need not be fully deterministic, and in fact many different implementations will satisfy the specification used. The tools work only on the logic of the common abstraction.", "num_citations": "2\n", "authors": ["579"]}
{"title": "A model-driven framework for developing android-based classic multiplayer 2D board games\n", "abstract": " Mobile applications and game development are attractive fields in software engineering. Despite the advancement of programming languages and integrated development environments, there have always been many challenges for software and mobile game developers. Model-Driven Engineering (MDE) is a software engineering methodology that applies software modeling languages for modeling the problem domain. In this paradigm, the code is to be automatically generated from the models by applying different model transformations. Besides, manipulating models instead of code facilitates the discovery and resolution of errors due to the high level of abstraction. This study presents an approach and framework, called MAndroid, that generates Android-based classic multiplayer 2D board games in a fully automated fashion, relying on the concepts of MDE. Structural and behavioral dimensions of the game are\u00a0\u2026", "num_citations": "1\n", "authors": ["579"]}
{"title": "Using the AgileUML metamodel matching and transformation synthesis tools\n", "abstract": " The AgileUML toolset provides techniques for deducing matchings of classes and features between metamodels. These matchings can be used to derive model transformations in UML-RSDS, ATL, ETL, QVT-O and QVT-R. The latest version of the tools can be obtained from: https://www. agilemde. co. uk or from https://projects. eclipse. org/projects/modeling. agileuml.", "num_citations": "1\n", "authors": ["579"]}
{"title": "Generation of Test Cases from UML Diagrams-A Systematic Literature Review\n", "abstract": " Model-Based testing (MBT) is a technique to derive test cases from models of the system under test (SUT), and the UML is the leading and de-facto standard language for system models both in industry and academia. This paper describes the results of a general systematic literature review (SLR) on the topic of generating test cases based on UML diagrams. By using selection and exclusion criteria, 62 primary studies were chosen from 443 identified publications, which ranged from 1999 to 2019. This study analysed the approaches and outcomes of the reviewed papers. The analysis is mainly focused on the model type, intermediate formats used and coverage criteria. Based on the review results, research trends and deficiencies are identified, and future works are proposed.", "num_citations": "1\n", "authors": ["579"]}
{"title": "Model-based Testing and Monitoring using AgileUML\n", "abstract": " In this paper we present an approach for the model-based testing (MBT) and runtime monitoring of applications using the UML-RSDS language and AgileUML toolset. This approach uses class invariants and operation pre/post specifications to guide the choice of test cases, and synthesises monitoring code from temporal logic specifications of application behaviour. We give examples of the use of the techniques for mobile apps and financial systems.", "num_citations": "1\n", "authors": ["579"]}
{"title": "TL an abstract specification language for bidirectional transformations\n", "abstract": " Model transformation verification has been hindered by the complex language mechanisms and semantics of mainstream transformation languages. In this paper we describe an abstract formalism, TL, for the definition of bidirectional and unidirectional transformations in a purely declarative manner. In contrast to model transformation languages such as ATL or QVT-R, there is no implicit or explicit sequencing of rules in TL specifications. Reasoning about TL specifications is therefore facilitated. We show that semantics-preserving translations can be defined from TL to subsets of the mainstream transformation languages.", "num_citations": "1\n", "authors": ["579"]}
{"title": "Model Driven Development of Mobile Applications\n", "abstract": " Model Driven Development of Mobile Applications - Research Portal, King's College, London King's College London King's main site Research portal Home Researchers Research Groups Research Outputs Research Funding Internal Research Outputs Theses . Journals Publishers Model Driven Development of Mobile Applications Research output: Chapter in Book/Report/Conference proceeding \u203a Conference paper \u203a peer-review Lyan Alwakeel, Kevin Lano Overview Citation formats Original language English Title of host publication Doctoral Symposium, ECOOP 2020 Published 1 Sep 2020 Additional links https://2020.splashcon.org/details/splash-2020-Doctoral-Symposium/3/Model-Driven-Development-of-Mobile-Applications-ECOOP-DS- Documents Model-Driven Development of Mobile Applications - ECOOP20 Model_Driven_Development_of_Mobile_Applications_ECOOP20.pdf, 822 KB, application/pdf \u2026", "num_citations": "1\n", "authors": ["579"]}
{"title": "Using the metamodel matching and transformation synthesis tools\n", "abstract": " The Agile UML toolset provides techniques for deducing matchings of classes and features between metamodels. These matchings can be used to derive model transformations in UML-RSDS, ATL, ETL, QVT-O and QVT-R. The latest version of the tools can be obtained from: https://nms. kcl. ac. uk/kevin. lano/uml2web/. These form part of the Agile UML toolset (https://projects. eclipse. org/projects/modeling. agileuml).", "num_citations": "1\n", "authors": ["579"]}
{"title": "Using the QVT-R analyser and code generator\n", "abstract": " The Agile UML toolset (https://projects. eclipse. org/projects/modeling. agileuml) provides a QVT-R parser and analyser, which converts QVT-R specifications into the UML-RSDS subset of UML. The Agile UML tools can then be used to generate executable implementations of the specifications in Java or other 3GLs.", "num_citations": "1\n", "authors": ["579"]}
{"title": "Simplified specification languages for flexible and agile modelling\n", "abstract": " The complexity of MDE and model transformation languages can be a significant barrier to the adoption of MDE and its use within agile development. In this paper we survey different alternative specification notations and make proposals for simplified notations to address this issue, for three particular use cases of MDE. We also provide an empirical analysis comparing the use of three specification techniques in practice.", "num_citations": "1\n", "authors": ["579"]}
{"title": "Comparative case studies in agile model-driven development.\n", "abstract": " This paper reports on experiences of integrating Agile and Model-Driven Development, for the development of code generators and nancial systems. We evaluate the bene ts of the Agile MDD approach by comparing Agile non-MDD and Agile MDD developments of code generators, and an agile MDD development of a nancial application with three other independent versions of the same application developed using di erent approaches. We also compare the functionality of the systems and a variety of technical debt metrics measuring the quality of the code and its design. Based on the case study results, we have found evidence that the use of Agile MDD leads to reductions in development e ort, and to improvements in software quality and e ciency.", "num_citations": "1\n", "authors": ["579"]}
{"title": "Practical Aspects of the Integration of Agile Development and Model-driven Development: An Exploratory\n", "abstract": " The aim of this paper is to investigate and gain insights into the state of practice of integrating Agile development and Model-Driven Development (MDD), understanding their impact and various problems of their applicability. To meet this aim, we conducted seven in-depth, one-to-one interviews with Agile and MDD practitioners to provide insights about their experiences and opinions of integrating Agile and MDD. The study found that although both approaches gained considerable attentions by practitioners, the state of practice is not yet mature. Key challenges relate to the lack of well-defined process, lack of adequate tools and steep learning curve.", "num_citations": "1\n", "authors": ["579"]}
{"title": "Transformation from UML to C: A large-scale example of MDD for model transformation development\n", "abstract": " In this paper we describe a substantial example of model-driven development (MDD) applied to model transformation (MT) development. A detailed requirements engineering process was followed, together with an agile MDD process. The transformation maps UML specifications to ANSI C code, and it is written using the UML-RSDS MT specification language.", "num_citations": "1\n", "authors": ["579"]}
{"title": "Towards automatic generation of project-based solutions\n", "abstract": " Modern business models and processes usually demand an integrated utilisation of business frameworks and methodologies, such as PRINCE2\u00ae and PMBOK\u00ae, to produce meaningful business documentation and solutions. Often, the use of such frameworks is a prerequisite to engage with public or private sector large-scale projects. However, models contained in such frameworks usually lack formal semantics which may lead to inconsistencies between modeling solutions. The maintainability and reusability of such models tends to require manual intervention which is susceptible to human error. Software engineers used to experience similar issues and partially solved these by introducing a model-driven approach called Model Driven Architecture. In an attempt to adapt to industry needs, over the past five years Domain Specific Modeling has experienced increased popularity. The authors propose a\u00a0\u2026", "num_citations": "1\n", "authors": ["579"]}
{"title": "Report on the Third Workshop on Verification of Model Transformations (VOLT 2014).\n", "abstract": " This report is a summary of the Third International Workshop on the Verification Of modeL Transformation (VOLT 2014) held at the STAF 2014 conference. The workshop brought together researchers from model-driven engineering, in particular from model transformation language engineering and modelbased verification. The major aims of VOLT 2014 were to identify motivations, problems, and requirements for model transformation verification as well as to present different proposals supporting different kinds of model transformations and verification techniques.", "num_citations": "1\n", "authors": ["579"]}
{"title": "Model transformation architectural patterns\n", "abstract": " Design patterns for model transformations have been defined to optimise individual transformations and to improve their internal structure. In this paper we consider how patterns can be used to organise systems of transformations, and to improve the efficiency and architecture of such systems.", "num_citations": "1\n", "authors": ["579"]}
{"title": "Synthesis of Software from Logical Constraints.\n", "abstract": " This paper presents the case for constraints (requirements formalised as logical assertions) as the key starting point for software development. We describe how system development from such constraints can be automated.", "num_citations": "1\n", "authors": ["579"]}
{"title": "Verification of UML Models.\n", "abstract": " In this chapter we describe conditions for the completeness and consistency of UML models, both with respect to individual models and between several models of the same system. The correctness of a UML model generally concerns four types of properties:1. Consistency. A model is inconsistent if there are contradictions present in the model, which mean that no situation can ever satisfy it. In UML it is neces-sary to consider both the consistency of an individual model (such as a class diagram) and the consistency of this model when compared with other models that describe other aspects of the same system (eg, state machine models). 2. Completeness. A model is incomplete if there are missing elements of the system, such as cases of behavior or missing subclasses, which should be present to give an adequate speci\ufb01cation. 3. Validation. Validation checks that the model formalizes the requirements correctly.", "num_citations": "1\n", "authors": ["579"]}
{"title": "Axiomatic Semantics of State Machines.\n", "abstract": " In this chapter we provide an axiomatic semantics of UML 2 state machine notation by translating this notation into the RAL formalism introduced in Chapter 6. Initially, we consider \u201c\ufb02at\u201d state machines without state hierarchies, then extend the semantics to include nested and concurrent states and compound transitions. The semantics is used to resolve issues of ambiguity with the informal de\ufb01nitions of transition priority and history states in the UML documents.", "num_citations": "1\n", "authors": ["579"]}
{"title": "Generating accessible and usable internet systems\n", "abstract": " Generating accessible and usable internet systems - Research Portal, King's College, London King's College London King's main site Research portal Home Researchers Research Groups Research Outputs Research Funding Internal Research Outputs Theses . Journals Publishers Generating accessible and usable internet systems Research output: Chapter in Book/Report/Conference proceeding \u203a Conference paper K Lano, R Jesmin Overview Citation formats Original language English Title of host publication IADIS International Conference WWW/Internet 2004 Publisher Unknown Publisher Pages ? - ? Published 2004 Event IADIS WWW/Internet conference - Madrid Duration: 6 Oct 2004 \u2192 9 Oct 2004 Conference Conference IADIS WWW/Internet conference City Madrid Period 6/10/2004 \u2192 9/10/2004 King's Authors K Lano (Informatics, Software Modelling and Applied Logic) Post to Twitter Post to FaceBook \u2026", "num_citations": "1\n", "authors": ["579"]}
{"title": "Business Information Systems\n", "abstract": " In this chapter we show applications of coordination contracts to software systems in the business and finance domain, using a case study of stock trading. We also describe techniques for the organisation of collections of contracts, and the tool support available for contracts in the Coordination Development Environment (CDE) provided on the CD.", "num_citations": "1\n", "authors": ["579"]}
{"title": "Design Patterns\n", "abstract": " Design patterns are standard design structures which have been found to be useful in many different applications. They therefore provide a set of ready-made solutions to design problems which are encountered in software development, and a repertoire of building blocks for software design. This chapter gives a brief history of software design patterns and their role and purpose. Java examples of the most frequently used patterns: the State, Template Method, Observer, Visitor, Iterator, Mediator and Proxy patterns are defined, and a list of all widely used design patterns, with a brief description of each, is also included.", "num_citations": "1\n", "authors": ["579"]}
{"title": "Design patterns and their role in formal object-oriented development\n", "abstract": " This paper describes how object-oriented design patterns can be used within a formal development process, and how the structure of formal requirements specifications, as expressed in their invariant properties, may serve to suggest suitable patterns to be used in their design and implementation.", "num_citations": "1\n", "authors": ["579"]}
{"title": "Systematising reactive system design\n", "abstract": " Reactive systems are a very important class of systems for engineering organisations. The role of software is now dominant and its share of system construction costs is ever increasing. However, in spite of much research devoted to reactive systems development, proper engineering languages, methods and tools, as construed by the conventional engineering community, are not available to support the technology. We examine the state of play and suggest a way ahead for putting into place appropriate technology for industry.", "num_citations": "1\n", "authors": ["579"]}
{"title": "Formalising real-time system design\n", "abstract": " This paper identifies ways in which formal real-time notations (VDM++) real-time design methods (HRT-HOOD) and simulation tools (gPROMS) can be combined in practical developments.             The benefits of such a combination include that a precise semantics can be attached to specifications in HRT-HOOD using the VDM++ notation and that HRT-HOOD guidelines on structuring and decomposition can be used for VDM++ specifications and designs. Abstract real-time specifications can also be animated at an early development stage to validate them against requirements.", "num_citations": "1\n", "authors": ["579"]}
{"title": "Transformational formal development of real-time systems\n", "abstract": " This paper presents techniques for the transformational formal development of reactive and real-time systems, using a combination of the VDM++ formal method and the HRT-HOOD method. A case study of a chemical control system is used to illustrate the techniques.", "num_citations": "1\n", "authors": ["579"]}
{"title": "Specification of Required Non-determinism\n", "abstract": " We present an approach to the speci cation of required external non-determinism: the willingness of a component to respond to a number of external action requests, using a language, COMMUNITY, which provides both permission and willingness guards on actions.This enables a program-like declaration of required non-determinism, in contrast to the use of a branching-time temporal logic. We give a de nition of parallel composition for this language, and show that re nement is compositional with respect to parallel composition. We use the concepts developed for COMMUNITY to identify extensions to the B and VDM++ model-based speci cation languages to incorporate speci cation of required non-determinism. In particular, we show that preconditions may be considered as a form of willingness guard, separating concerns of acceptance and termination, once module contracts are re-interpreted in a way suitable for a concurrent environment.", "num_citations": "1\n", "authors": ["579"]}
{"title": "Refinement and Safety Analysis\n", "abstract": " This paper discusses the extent to which the validity of the results of safety analyses such as FTA and FMEA can be preserved through the refinement process, and to what extent it is possible to avoid repeating these analyses at later development stages.", "num_citations": "1\n", "authors": ["579"]}
{"title": "Specifying static analysis tools using formal methods\n", "abstract": " The paper describes experience of a large-scale application of the Z specification language to the formalisation of parts of the transformation and analysis functionality contained in a static analysis toolset for COBOL. Aspects of the development described in the paper are: the combination of 'diagrammatic' analysis and design techniques with formal specification, in order to obtain well-structured and comprehensible specifications; techniques to utilise object-oriented structure in the domain in order to structure a specification; benefits of using formal specifications in an industrial environment in which expertise in formal methods was restricted, and which was predominately within a traditional database and imperative programming culture.", "num_citations": "1\n", "authors": ["579"]}
{"title": "From Analysis to Formal Specification\n", "abstract": " This chapter will describe a systematic process of formalisation of OMT analysis models: data, functional and dynamic, into Z++ and VDM++. The main elements of the data and dynamic models of OMT will be covered in this chapter. The Booch method is also considered [30]. Chapter 7 will cover the OMT notation in greater depth, and also consider the OOA method [271]. The use of this translation process and of specification animation, in providing a common language between the specifier and the client, will be emphasised for its significance in reducing errors in requirements elicitation. It covers the stages of requirements formalisation and specification enhancement described in Chapter 2. Section 3.1 describes the formalisation of object models in Z++ and VDM++, Section 3.2 describes how various forms of aggregation can be formally defined, Section 3.3 describes alternative approaches for operation\u00a0\u2026", "num_citations": "1\n", "authors": ["579"]}
{"title": "Testing and Safety Analysis of AM (Abstract Machine) Specifications\n", "abstract": " The purpose of this paper is to describe how testing and safety analysis of Abstract Machine Specifications can be undertaken in a formal manner. It is also shown that safety properties are preserved under refinement.", "num_citations": "1\n", "authors": ["579"]}
{"title": "Hunting for Objects in the COBOL Jungle\n", "abstract": " We describe methods and software tools which reverse-engineer COBOL application programs back to the specification stage, and validate the programs against the adduced specification. The aim is to create object-oriented abstractions from the implementation code, thus capturing the design concepts as reusable application components. The central process which the tools support is \u2018transformation from formalism to formalism\u2019, first from COBOL to the intermediate language UNIFORM, then from UNIFORM to a functional description language, and then to the specification language Z, in which the component is finally described.", "num_citations": "1\n", "authors": ["579"]}
{"title": "The REDO Project\n", "abstract": " This report gives an overview of the work performed by the Programming Research Group as part of the European collaborative ESPRIT II\\REDO\" project (no. 2487). This work covered the areas of reverse-engineering: redocumentation and re-engineering validation: post-hoc veri cation and generation of correct code from speci cations maintenance: new languages and methods to support maintenance. Research in areas of concurrent programming and decompilation were also performed.", "num_citations": "1\n", "authors": ["579"]}