{"title": "IIFA: modular inter-app intent information flow analysis of android applications\n", "abstract": " Android apps cooperate through message passing via intents. However, when apps have disparate sets of privileges inter-app communication (IAC) can accidentally or maliciously be misused, e.g., to leak sensitive information contrary to users\u2019 expectations. Recent research has considered static program analysis to detect dangerous data leaks due to inter-component communication (ICC), but suffers from shortcomings for IAC with respect to precision, soundness, and scalability. As a remedy we propose a novel pre-analysis for static ICC/IAC analysis. Our main contribution is the first fully automatic ICC/IAC information flow analysis that is scalable for realistic apps due to modularity, avoiding combinatorial explosion: Our approach determines communicating apps using short summaries rather than inlining intent calls between components and apps, which entails simultaneously analyzing all apps installed on a\u00a0\u2026", "num_citations": "11\n", "authors": ["2126"]}
{"title": "Pianalyzer: A precise approach for pendingintent vulnerability analysis\n", "abstract": " PendingIntents are a powerful and universal feature of Android for inter-component communication. A PendingIntent holds a base intent to be executed by another application with the creator\u2019s permissions and identity without the creator necessarily residing in memory. While PendingIntents are useful for many scenarios, e.g., for setting an alarm or getting notified at some point in the future, insecure usage of PendingIntents causes severe security threats in the form of denial-of-service, identity theft, and privilege escalation attacks. An attacker may gain up\u00a0to SYSTEM privileges to perform the most sensitive operations, e.g., deleting user\u2019s data on the device. However, so far no tool can detect these PendingIntent vulnerabilities.                 In this work we propose PIAnalyzer, a novel approach to analyze PendingIntent related vulnerabilities. We empirically evaluate PIAnalyzer on a set of 1000 randomly\u00a0\u2026", "num_citations": "9\n", "authors": ["2126"]}
{"title": "Thieftrap\u2013an anti-theft framework for android\n", "abstract": " Smartphones store a plenitude of sensitive data. This data together with high values of smartphones make them an attractive target for physical theft. Clearly, the device owner would like to regain the device in such a case. Also, the information should be protected from illegitimate access.               In this paper, we present the first anti-theft solution that effectively handles these issues. Our proposal is based on a novel concept of an anti-theft honeypot account that protects the owner\u2019s data while preventing a thief from resetting the device. Thus, a stolen device can be regained by the device owner with high probability, while information leakage to the thief is prevented. We implemented the proposed scheme and evaluated it through an empirical user study with 35 participants. In this study, the owner\u2019s data could be protected, recovered, and anti-theft functionality could be performed unnoticed from the thief in\u00a0\u2026", "num_citations": "5\n", "authors": ["2126"]}
{"title": "Enhancing Users\u2019Privacy: Static Resolution of the Dynamic Properties of Android\n", "abstract": " The usage of mobile devices is rapidly growing with Android being the most prevalent mobile operating system. Thanks to the vast variety of mobile applications, users are preferring smartphones over desktops for day to day tasks like Internet surfing. Consequently, smartphones store a plenitude of sensitive data. This data together with the high values of smartphones make them an attractive target for device/data theft (thieves/malicious applications). Unfortunately, state-of-the-art anti-theft solutions do not work if they do not have an active network connection, eg, if the SIM card was removed from the device. In the majority of these cases, device owners permanently lose their smartphone together with their personal data, which is even worse. Apart from that malevolent applications perform malicious activities to steal sensitive information from smartphones. Recent research considered static program analysis to detect dangerous data leaks. These analyses work well for data leaks due to inter-component communication, but suffer from shortcomings for inter-app communication with respect to precision, soundness, and scalability. This thesis focuses on enhancing users\u2019 privacy on Android against physical device loss/theft and (un) intentional data leaks. It presents three novel frameworks:(1) ThiefTrap, an anti-theft framework for Android,(2) IIFA, a modular inter-app intent information flow analysis of Android applications, and (3) PIAnalyzer, a precise approach for PendingIntent vulnerability analysis. ThiefTrap is based on a novel concept of an anti-theft honeypot account that protects the owner\u2019s data while preventing a thief from resetting the\u00a0\u2026", "num_citations": "1\n", "authors": ["2126"]}
{"title": "A Formal Logic Framework for the Automation of the Right to be Forgotten\n", "abstract": " The right to be forgotten results from a ruling of the European Court of Justice. It empowers individuals to control the display of their personal data indexed by a search engine. Specifically, it requires Internet search engine operators to deploy a process for individuals to file requests concerning the removal of their personal data from search indices.               To support the right to be forgotten, search engine operators such as Google, Microsoft and Yahoo currently provide a web form where users submit all relevant information. A subsequent manual process by the search engine operators assesses whether the author of the request is eligible to exercise the right to be forgotten and if the request itself is lawful. However, manual verification is inefficient, unscalable, and prone to subjective judgment. A framework for automated reasoning about case law (\u201cPriCL\u201d) could in principle tell whether some precedents\u00a0\u2026", "num_citations": "1\n", "authors": ["2126"]}