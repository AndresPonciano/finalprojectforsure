{"title": "The art of testing less without sacrificing quality\n", "abstract": " Testing is a key element of software development processes for the management and assessment of product quality. In most development environments, the software engineers are responsible for ensuring the functional correctness of code. However, for large complex software products, there is an additional need to check that changes do not negatively impact other parts of the software and they comply with system constraints such as backward compatibility, performance, security etc. Ensuring these system constraints may require complex verification infrastructure and test procedures. Although such tests are time consuming and expensive and rarely find defects they act as an insurance process to ensure the software is compliant. However, long lasting tests increasingly conflict with strategic aims to shorten release cycles. To decrease production costs and to improve development agility, we created a generic\u00a0\u2026", "num_citations": "106\n", "authors": ["968"]}
{"title": "Code reviewing in the trenches: Challenges and best practices\n", "abstract": " Code review has been widely adopted by and adapted to open source and industrial projects. Code review practices have undergone extensive research, with most studies relying on trace data from tool reviews, sometimes augmented by surveys and interviews. Several recent industrial research studies, along with blog posts and white papers, have revealed additional insights on code reviewing \u201cfrom the trenches.\u201d Unfortunately, the lessons learned about code reviewing are widely dispersed and poorly summarized by the existing literature. In particular, practitioners wishing to adopt or reflect on an existing or new code review process might have difficulty determining what challenges to expect and which best practices to adopt for their development context. Building on the existing literature, this article adds insights from a recent large-scale study of Microsoft developers to summarize the challenges that code\u00a0\u2026", "num_citations": "67\n", "authors": ["968"]}
{"title": "Code reviews do not find bugs. how the current code review best practice slows us down\n", "abstract": " Because of its many uses and benefits, code reviews are a standard part of the modern software engineering workflow. Since they require involvement of people, code reviewing is often the longest part of the code integration activities. Using experience gained at Microsoft and with support of data, we posit (1) that code reviews often do not find functionality issues that should block a code submission; (2) that effective code reviews should be performed by people with specific set of skills; and (3) that the social aspect of code reviews cannot be ignored. We find that we need to be more sophisticated with our guidelines for the code review workflow. We show how our findings from code reviewing practice influence our code review tools at Microsoft. Finally, we assert that, due to its costs, code reviewing practice is a topic deserving to be better understood, systematized and applied to software engineering workflow with\u00a0\u2026", "num_citations": "62\n", "authors": ["968"]}
{"title": "Code ownership and software quality: A replication study\n", "abstract": " In a traditional sense, ownership determines rights and duties in regard to an object, for example a property. The owner of source code usually refers to the person that invented the code. However, larger code artifacts, such as files, are usually composed by multiple engineers contributing to the entity over time through a series of changes. Frequently, the person with the highest contribution, e.g. The most number of code changes, is defined as the code owner and takes responsibility for it. Thus, code ownership relates to the knowledge engineers have about code. Lacking responsibility and knowledge about code can reduce code quality. In an earlier study, Bird et al. [1] showed that Windows binaries that lacked clear code ownership were more likely to be defect prone. However recommendations for large artifacts such as binaries are usually not actionable. E.g. Changing the concept of binaries and refactoring\u00a0\u2026", "num_citations": "42\n", "authors": ["968"]}
{"title": "Lessons learned from building and deploying a code review analytics platform\n", "abstract": " Tool-based code review is growing in popularity and has become a standard part of the development process at Mi-crosoft. Adoption of these tools makes it possible to mine data from code reviews and provide access to it. In this paper, we pre-sent an experience report for CodeFlow Analytics, a system that collects code review data, generates metrics from this data, and provides a number of ways for development teams to access the metrics and data. We discuss the design, design decisions and chal-lenges that we encountered when building CodeFlow Analytics. We contacted teams that used CodeFlow Analytics over the past two years and discuss what prompted them to use CodeFlow Ana-lytics, how they have used it, and what the impact has been. Fur-ther, we survey research that has been enabled by using the Code-Flow Analytics platform. We provide a series of lessons learned from this experience to\u00a0\u2026", "num_citations": "21\n", "authors": ["968"]}
{"title": "Runtime integration and testing for highly dynamic service oriented ICT solutions--An Industry Challenges Report\n", "abstract": " Modern Information and Communications Technology (ICT) solutions are often widely distributed and highly dynamic service oriented architectures (SOA) with stringent availability requirements. Availability implies that SOA must be reconfigured, updated and maintained during runtime, while retaining their overall operational integrity. This requires that much of the adaptation, integration, configuration and testing activities typically performed offline, during development time, now have to be done online, during runtime. Current component-based runtime platforms such as SOA realize the technological foundations for runtime reconfiguration and maintenance.However, because software engineering methodology has not kept pace with the rapid leap forward in platform technology, adequate methods, techniques and tools for dealing with runtime integration and testing are not yet available.This paper discusses the\u00a0\u2026", "num_citations": "20\n", "authors": ["968"]}
{"title": "Selecting tests for execution on a software product\n", "abstract": " A method of automatically selecting tests for execution on a software product includes generating a cost model based on test performance history data that is based on results of past executions of a plurality of tests on the software product, wherein the cost model provides, for each test in the plurality of tests, a first expected monetary cost value associated with executing the test and a second expected monetary cost value associated with skipping execution of the test. The method includes automatically selecting tests in the plurality of tests for future execution based on the first and second expected monetary cost values.", "num_citations": "10\n", "authors": ["968"]}
{"title": "CodeFlow: Improving the Code Review Process at Microsoft: A discussion with Jacek Czerwonka, Michaela Greiler, Christian Bird, Lucas Panjer, and Terry Coatta\n", "abstract": " Delivering a new set of capabilities for managing and improving Microsoft\u2019s code-review process was the primary goal right from the start. In the course of accomplishing that, much was also learned about certain general code-review principles. In fact, subsequent research has offered surprising evidence of just how similar the impact can be when many of these principles are followed at companies other than Microsoft.", "num_citations": "4\n", "authors": ["968"]}
{"title": "Quantum coin-flipping-based authentication\n", "abstract": " Quantum cryptographic key distribution (QKD) is a promising candidate for achieving unconditional security, making the renowned one-time pad encryption technically feasible for building computer networks. However, although well-developed theoretical foundations perfectly ensure protection against eavesdropping, no natural mechanism is yet able to successfully repel an adversary sitting between Alice and Bob, performing QKD with both and re-encrypting each message after heaving read it in plain text. Authentication is hence of crucial importance, and normally applied to all messages that are related to the public discussion part of the QKD protocol. We present an analysis of a scenario, in which authentication is postponed until the end of the QKD protocol. This yields to reduced computational effort, as well as simple and tight bounds on the amount of pre-shared key material. Our solution relies on a\u00a0\u2026", "num_citations": "4\n", "authors": ["968"]}
{"title": "Code reviewing in the trenches: Understanding challenges, best practices and tool needs\n", "abstract": " This technical report is a companion document to the IEEE Software article \u201cCode Reviewing in the Trenches: Understanding Challenges, Best Practices and Tool Needs\u201d. It is intended to give a thorough description of our study such that the article in IEEE Software can focus on results and insights that are most relevant to practitioners. In this report, we provide a more in-depth description of the methodology used to conduct our study of code review at Microsoft (see 1. Code Review Study) and share more detailed and comprehensive analyses of the survey results (see Appendix: In-Depth Survey Analysis and Appendix: Survey Slices). We also present the survey that we deployed in its entirety (see Appendix: Complete Survey), as well as many raw results (Appendix: Raw Results).", "num_citations": "3\n", "authors": ["968"]}
{"title": "Lessons learned from deploying a code review analytics platform\n", "abstract": " Tool based code review is growing in popularity and has become a standard part of the development process at Microsoft. Adoption of these tools make it possible to mine data from code reviews and provide access to it. In this paper, we present an experience report for CodeFlow Analytics, a system that collects code review data, generates metrics from this data, and provides a number of ways for development teams to access the metrics and data. We discuss the design, design decisions and challenges that we encountered when building CodeFlow Analytics. We contacted teams that used CodeFlow Analytics over the past two years and discuss what prompted them to use CodeFlow Analytics, how they have used it, and what the impact has been. Further, we survey research that has been enabled by using the CodeFlow Analytics platform. We provide series of lessons learned from this experience to help others embarking on a task of building an analytics platform in an enterprise setting.", "num_citations": "3\n", "authors": ["968"]}
{"title": "Test suite comprehension for modular and dynamic systems\n", "abstract": " The two main topics of this dissertation are plug-in-based systems and test suite comprehension. In particular, challenges during testing plug-in-based systems are revealed, and reverse engineering based techniques to support developers during test suite comprehension are presented.", "num_citations": "3\n", "authors": ["968"]}
{"title": "Secure Resource Sharing in Ad hoc Networks.\n", "abstract": " Mobile and wireless devices become more popular and their capabilities increase as well. At the same time, most of the today\u2019s PC power is unused, as a study of the Gartner Group indicates. Grid computing and P2P systems take advantage of this fact and provide unused resources to other nodes within the network, but mobile scenarios or ad hoc networks are often left out. This paper presents a concept for secure resource sharing in mobile ad hoc networks, with a special focus on challenges and problems with mostly unknown and potentially unreliable and untrustworthy devices. Virtualization technologies will be presented as a solution to grant application security, as they are also used in grid and trusted computing. The secure resource sharing (SRS) system, that will be presented in this paper as well, focuses on granting security aspects like availability, privacy, confidentiality and trust establishment in the area of resource sharing.", "num_citations": "1\n", "authors": ["968"]}