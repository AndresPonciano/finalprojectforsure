{"title": "A comparison of static architecture compliance checking approaches\n", "abstract": " The software architecture is one of the most important artifacts created in the lifecycle of a software system. It enables, facilitates, hampers, or interferes directly the achievement of business goals, functional and quality requirements. One instrument to determine how adequate the architecture is for its intended usage is architecture compliance checking. This paper compares three static architecture compliance checking approaches (reflexion models, relation conformance rules, and component access rules) by assessing their applicability in 13 distinct dimensions. The results give guidance on when to use which approach.", "num_citations": "153\n", "authors": ["2150"]}
{"title": "Impact analysis for event-based components and systems\n", "abstract": " In my dissertation, I aim to develop a dependence-based impact analysis technique for event-based systems and event-based components that communicate via messages. This paper motivates the problem, summarizes the open challenges and outlines proposed solution and evaluation strategies.", "num_citations": "9\n", "authors": ["2150"]}
{"title": "Helios: impact analysis for event-based components and systems\n", "abstract": " The event-based software architectural style [4] is widely used in the domain of user-interface software and wide-area applications (eg, financial markets, logistics, and sensor networks). A Gartner study determined that the market size for message-oriented (aka event-based) middleware licenses was about $1 billion in 2005 [2]. In event-based systems, components do not directly call other components, but rather indirectly using messages or events. However, this high decoupling and use of implicit invocations render an event-based system more difficult to analyze since, in the absence of explicit dependency information, an engineer has to assume that any component in the system may potentially interact with, and thus depend on, any other component.", "num_citations": "4\n", "authors": ["2150"]}
{"title": "Dependence analysis for distributed event-based systems\n", "abstract": " In recent years, distributed event-based (DEB) systems that have been developed using message-oriented middleware platforms have become widespread. In DEB systems, a software component does not directly call other software components via explicit references, but instead implicitly invokes other software components by publishing messages. Consequently, DEB components are highly decoupled and enable highly scalable, easy-to-evolve, concurrent, distributed, heterogeneous applications.", "num_citations": "1\n", "authors": ["2150"]}