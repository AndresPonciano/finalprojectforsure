{"title": "A Model-Based Tool for Generating Software Process Model Tailoring Transformations\n", "abstract": " Tailoring is the mechanism of adapting a software process to the needs of a project. Model-Driven Engineering (MDE) provides a formal basis and tools infrastructure for automatic software process tailoring. However, the use of a MDE approach can become awkward for most process engineers, because it requires knowledge of MDE concepts and formalisms to implement the required models and tailoring transformations. Proposals trying to address this problem should balance the formality required by MDE and the usability needed by the users. This paper presents a model-based tool and its associated procedure that allow process engineers to automatically generate tailoring transformation rules using a graphical user-interface, obtaining the desired balance. The proposal is illustrated with a running example.", "num_citations": "15\n", "authors": ["391"]}
{"title": "Understanding the design of software development teams for academic scenarios\n", "abstract": " The software engineering community recognizes that human factors of developers directly influence the behavior and performance of software teams. Typically, cohesive teams tend to develop software in a more coordinated and effective way, resulting in suitable products. Although these cohesive teams could be designed to try reaching such benefits, there is no recipe that allows us to do it in a simple way. Therefore, most of the software teams are formed using any other criteria, by losing thus the potential benefits of using cohesive teams. The problem of designing these teams is not only present in the software industry, but also in the academia; particularly in capstone courses, where the students run software projects in real or simulated scenarios. In order to help find a solution to this problem, particularly for academic settings, this paper proposes a heuristic to form software development teams, considering the\u00a0\u2026", "num_citations": "11\n", "authors": ["391"]}
{"title": "A tool for modeling software development contexts in small software organizations\n", "abstract": " Characterizing the software development context has been recognized as relevant for a variety of purposes, particularly for tailoring the organizational software processes according to the features of each project to be addressed. That tailoring activity makes the software processes more efficient and effective. However, formally modeling software development contexts, which is usually required to perform this tailoring activity, represents a challenge for many organizations, and particularly for small software companies, which usually have low expertise and resources to deal with formal methods and notations. This paper presents a usable software tool for defining the software development context for an organization and also for particular projects. Preliminary evaluations of the tool usability and usefulness have been performed. The obtained results indicate that the tool provides all the services required to model\u00a0\u2026", "num_citations": "9\n", "authors": ["391"]}
{"title": "Template-based vs. Automatic process tailoring\n", "abstract": " Software process lines (SPrL) is a trend in software companies for generating software processes adapted to specific project contexts, i.e., process tailoring. There are several strategies for process tailoring ranging from having a unique process always applied, to defining a specific process for each project, the former is inefficient while the latter is expensive. Two intermediate strategies used in industry and academia are template-based and automatic process tailoring. In this paper we present a case-study where we compare the productivity and quality of both strategies measured in terms of extra or missing process elements. We applied both strategies to the SPrL of a small Chilean company and we found that automatic tailoring is always more productive, but this difference is mitigated when the predefined processes are those more frequently applied.", "num_citations": "8\n", "authors": ["391"]}
{"title": "A Usable MDE-based Tool for Software Process Tailoring\n", "abstract": " In order to systematize development, software companies define their organizational processes. The process engineer is in charge of this activity. Tailoring software processes is an activity that allows project managers to adapt organizational software processes to the needs of particular projects. Modeldriven engineering (MDE) has been applied with that purpose using process model tailoring transformations. Although this approach is technically feasible, there are still factors that jeopardize its usage in industry. First, current transformation languages and tools are not simple for defining and applying tailoring transformations. Second, the potential users-process engineers and project managers-do not usually have the required knowledge for writing transformations. Trying to deal with these usability challenges, this paper proposes an MDE-based tool that allows defining the models for the organizational software process and the organizational context, as well as tailoring rules using a usable user interface, so that the project manager just requires to define the project context of the particular project in order to automatically obtain the tailored process. This usable interface hides the complexities of the tool backend built as a megamodel, requiring from the process engineer and the project manager only knowledge about project characteristics and how they affect tailoring. We report our experience of applying the tool in a real-world software process and we outline this experience in http://www. dcc. uchile. cl/gems/docs/DemoMODELS2015. pdf.", "num_citations": "5\n", "authors": ["391"]}
{"title": "Implementing HOTs that generate transformations with two input models\n", "abstract": " Model-driven Engineering (MDE) is a paradigm that promotes the use of models and automatic model transformations to handle complex software developments. Model transformations promise to reduce the effort for manipulating models. However, building transformations themselves is not easy. Higher-order Transformations (HOTs) are a means for automatically building model transformations. Building HOTs is in itself a complex task mainly because there are no standard languages for implementing them, and there are not many HOTs available in the literature to learn from. This situation is even worse when more sophisticated HOTs are required with two input models. We consider a real application to generate transformations for tailoring software process, because the generated transformation needs to have two input models: the organizational process and the project context model. In this paper, we show\u00a0\u2026", "num_citations": "5\n", "authors": ["391"]}
{"title": "T2m and m2t transformations between software processes and software process models\n", "abstract": " Formalizing software processes allows process engineers to analyze, simulate, evolve and manipulate them with different purposes. Eclipse Process Framework Composer is a free tool for formalizing SPEM 2.0 processes, it provides primitives for process definition and allows to graphically visualize processes. This user friendliness is crucial for practitioners to both follow the designed process and to validate it. For the last two years we have been working in tailoring software process models, i.e. configuring general processes to particular contexts in order to make them more productive. However, it is hard for end users to validate the results and follow the process if it is in its model format, i.e., xmi. Moreover, manual translation is hard and error prone. In this paper we present a set of projectors: an injector that transforms the xml description of the process into xmi, and a extractor that transforms the xmi description of\u00a0\u2026", "num_citations": "5\n", "authors": ["391"]}
{"title": "Dise\u00f1o de Equipos de Desarrollo de Software en Escenarios Universitarios\n", "abstract": " Se sabe que existen factores humanos que influencian el comportamiento de un equipo de desarrollo durante la ejecuci\u00f3n de un proyecto de software. Entre estos factores est\u00e1 la pro-actividad y el perfil psico-t\u00e9cnico de sus miembros, el grado de sociabilidad interpersonal del equipo, y el nivel de liderazgo del jefe de proyecto, entre otros. Los equipos cohesionados usualmente llevan a cabo procesos de software m\u00e1s coordinados y efectivos, que resultan en productos finales de mejor calidad y/o procesos de desarrollo que requieren un menor esfuerzo. La conformaci\u00f3n de un buen equipo de desarrollo implica una inversi\u00f3n en tiempo y recursos econ\u00f3micos, que usualmente no puede ser asumida por varios tipos de organizaciones. Como por ejemplo, peque\u00f1as empresas de software, que t\u00edpicamente cuentan con recursos humanos y financieros limitados. En ese escenario los jefes de proyecto usan m\u00e9todos y criterios ad-hoc para formar sus equipos; por ejemplo asignan al proyecto a la gente que est\u00e1 disponible. En consecuencia el nivel de cohesi\u00f3n de los equipos formados de esa manera es imprevisible. La detecci\u00f3n tard\u00eda de incompatibilidades entre los miembros de un equipo de desarrollo puede generar resultados catastr\u00f3ficos para un proyecto. Esta problem\u00e1tica tambi\u00e9n est\u00e1 presente en escenarios universitarios, particularmente en carreras de Computaci\u00f3n e Inform\u00e1tica, donde el docente a cargo de un curso necesita armar equipos cohesivos con estudiantes que usualmente no conoce. Si los equipos est\u00e1n bien conformados, la probabilidad de \u00e9xito de un proyecto mejora considerablemente. En otro caso, el equipo tiene\u00a0\u2026", "num_citations": "2\n", "authors": ["391"]}
{"title": "Coordination and pressing: A formula for teamwork\u2014A case study\n", "abstract": " The software industry has recognized the importance of teamwork as a driver for good projects results. However teamwork is not an easy goal to reach, because there is a large list of variables affecting the process. Each project probably will require a particular recipe to promote and perform real teamwork. Therefore a one-size fits-all approach does not work to promote teamwork in the software development scenarios. This article presents an influence model that helps the development teams to find a strategy that allow them to carry out teamwork. This model is the result of an analysis conducted by the authors on 27 software projects performed in a controlled setting in an academic environment.", "num_citations": "2\n", "authors": ["391"]}
{"title": "Edutrivias: Web support system based on trivia for the teaching-learning process\n", "abstract": " The e-learning systems allow users to improve the traditional education systems granting flexibility, permanence, and synchrony. Many e-learning systems are based on the use of web applications and games. A trivia quiz is a game metaphor which allows to enhance the teaching-learning process in an entertaining, constant and motivating way for students. This work presents Edutrivias, a web system created to support the teaching-learning process through trivia quizzes. Edutrivias uses the trivia quiz as an educational resource that allows positive reinforcement, monitoring, control and effective feedback of student learning. The description of the web system and an exploratory case study are presented. Preliminary results show that Edutrivias generates a positive impact on students, encouraging self-learning and supporting knowledge retention.", "num_citations": "1\n", "authors": ["391"]}
{"title": "Automatic Generation of Transformations for Software Process Tailoring\n", "abstract": " Tailoring software processes is an activity that allows process engineers to adapt organizational software processes to the needs of particular projects. Model-driven engineering (MDE) has been used for tailoring software processes using models and transformations. Even though there are some proposals for automatically generating part of the transformations, they are not easily applicable in the software industry because there are still factors that jeopardize its usage in small software enterprises. First, the potential users-process engineers-do not usually have the required knowledge for writing transformations. Second, current transformation languages and tools are not simple for defining and applying tailoring transformations. Trying to deal with these challenges, this research proposes a tool-set that balances the formality required by MDE and the usability needed by the users. We define a domain-specific language for defining tailoring rules. These rules are the input for a higher-order transformation that automatically generates tailoring transformations with no direct user interaction with the code. The tool-set reduces the complexity of defining tailoring rules and allows for the automatic generation of tailoring transformations. We illustrate the application of our approach in a small Chilean software company.", "num_citations": "1\n", "authors": ["391"]}
{"title": "Reducing Complexity of Process Tailoring Transformations Generation\n", "abstract": " Tailoring software processes to particular contexts applying model transformations has proved to be appropriate and technically feasible. However, the use of this approach can become awkward for most process engineers, because it requires knowledge about the process and its tailoring needs, and also about building model transformations. In a previous work we have proposed a tool based on model-driven engineering (MDE) for automatically generating software process model tailoring transformations. This paper presents an improved user interface of the tool and proposes a process for guiding its application for tailoring processes. We illustrate its use by applying it for tailoring the process of Rhiscom, a Chilean small software company. The tool and the process balance the formally required by MDE with the usability needed by the process engineers.", "num_citations": "1\n", "authors": ["391"]}