{"title": "Traceability of requirements and consistency verification of UML use case, activity and Class diagram: A Formal approach\n", "abstract": " UML being semi formal in nature, it lacks formal syntax and hence automated verification of analysis and design specifications cannot be done. Verification at early phases of SDLC has gained significant importance because of the possibility of early error detection resulting in reduced costs and time to market. To address this, in this paper we propose a formal grammar for the three of the commonly used UML diagrams - Use Case diagram, which is used to capture functional requirement; Activity diagram, which is used to diagrammatically depict the textual descriptions, or flow of events of use case diagram, and Class diagram, which is used to depict the structural aspect of design. In this paper, we have proposed a framework for verification of the diagrams, which includes syntactic correctness, inter-diagram consistency and requirement traceability.", "num_citations": "58\n", "authors": ["1978"]}
{"title": "Measuring complexity of component based architecture: a graph based approach\n", "abstract": " Component based software development (CBSD) is an evolving paradigm where emphasis is laid on reuse of existing components and effective designing of components. As complexity of software systems increases, the challenge of CBSD lies in designing highly cohesive, testable components. Researcher community is striving hard to identify the attributes characterizing component-based development and proposing metrics that may help in controlling the complexity of the component-based systems. This paper proposes a metric-based approach for the determination of complexity along with a set of architectural aspects of componentbased architectures. The Component Architecture Complexity Measurement Metrics (CACMM) has been proposed based on Component Architecture Graph (CAG), a graphical model used for representing UML component diagram. Analysis of the graph is done to measure\u00a0\u2026", "num_citations": "23\n", "authors": ["1978"]}
{"title": "UML-compiler: a framework for syntactic and semantic verification of UML diagrams\n", "abstract": " UML being semi formal in nature, it lacks formal syntax and hence automated verification of design specifications cannot be done. To address this we propose a UML Compiler that takes context free grammars for UML diagrams and verifies the syntactic correctness of the individual diagrams and semantic correctness in terms of consistency verification with other diagrams. This UML-Compiler is a part of a framework, which consists of two modules. First module converts XMI format of UML diagrams, as generated by any standard tool into string format and second module (UML-Compiler) is for verification of the diagrams. This paper focuses on the second module and proposes a formal context free grammar for the two of the commonly used UML diagrams - Class diagram (depicting the static design) and sequence diagram (depicting behavioral design) and validated by using Lex and YACC.", "num_citations": "23\n", "authors": ["1978"]}
{"title": "Requirement traceability in software development process: an empirical approach\n", "abstract": " One of the biggest challenges in the software industry is to ensure that a software product meets all user specifications. In this paper, we propose to establish traceability of functional requirements expressed in a SRS document among different UML diagrams that are used in requirement analysis and design phases. We have used Z notation as the formal language for representing the SRS and design artifacts and this formal notation is used to automatically establish trace paths based on certain rules. We present an implementation methodology based on XML for development of a prototype. A snapshot of some of the results based on a case study has been shown for illustration of our approach. Our approach will help in identifying missing requirements or incomplete requirement coverage as well highlight the impact points for effective change management of requirements.", "num_citations": "16\n", "authors": ["1978"]}
{"title": "Analysis of complexity of requirements: A metrics based approach\n", "abstract": " In this paper we have developed a metrics based model that will help in quantitatively estimating complexity of requirements for object oriented development methodology. Use Case point is a well-known metrics used for estimation based on use cases. Our model goes a step forward and provides a measurement methodology based on other design models like sequence and class diagrams. This metrics model is based on a formal model using Z notation and implemented using a XML based approach. Measuring complexity of a requirement in terms of design elements will help in validating estimates in the design phase and project management in the long run.", "num_citations": "13\n", "authors": ["1978"]}
{"title": "Adv-ears: A formal requirements syntax for derivation of use case models\n", "abstract": " The development of complex systems frequently involves extensive work to elicit, document and review functional requirements that are usually written in unconstrained natural language, which is inherently imprecise. Use of Formal techniques in Requirement Engineering would be of immense importance as it would provide automated support in deriving use case models from the functional requirements. In this paper we propose a formal syntax for requirements called Adv-EARS. We define a grammar for this syntax such that a requirements document in this format can be grammatically parsed and the prospective actors and use cases are automatically derived from the parse tree. The use case diagram is then automatically generated based on the actors and use cases and their relationships. We have used requirements of an Insurance system as a case study to illustrate our approach.", "num_citations": "11\n", "authors": ["1978"]}
{"title": "CAG: A Component Architecture Graph\n", "abstract": " This paper proposes a graph-based approach for the specification of component-based architectures. We have proposed Component Architecture Graph (CAG), a new graphical model for representing UML component diagram. A set of metrics has been defined based on this graph, which will help in measuring several architectural aspects of a system. A case study is presented for presenting the new graphical model and analysis based on the metrics has been discussed.", "num_citations": "10\n", "authors": ["1978"]}
{"title": "Code based analysis for object-oriented systems\n", "abstract": " The basic features of object-oriented software makes it difficult to apply traditional testing methods in object-oriented systems. Control Flow Graph (CFG) is a well-known model used for identification of independent paths in procedural software. This paper highlights the problem of constructing CFG in object-oriented systems and proposes a new model named Extended Control Flow Graph (ECFG) for code based analysis of Object-Oriented (OO) software. ECFG is a layered CFG where nodes refer to methods rather than statements. A new metrics\u2014 Extended Cyclomatic Complexity (E-CC) is developed which is analogous to McCabe\u2019s Cyclomatic Complexity (CC) and refers to the number of independent execution paths within the OO software. The different ways in which CFG\u2019s of individual methods are connected in an ECFG are presented and formulas for E-CC for these different cases are proposed\u00a0\u2026", "num_citations": "10\n", "authors": ["1978"]}
{"title": "Automated Translation of behavioral models using OCL and XML\n", "abstract": " The UML diagrams present different but partly overlapping views of the same system and hence design risks due to inconsistencies among diagrams is inevitable. Automated translation of behavioral diagrams is one way of ensuring consistency among the different models that can take us one step forward towards formalizing behavioral specifications of the system. In this paper based on the dependencies between some of the commonly used diagrams that we identified in our previous paper, we have proposed a methodology for translating automatically a set of behavioral diagrams. As this translation is automated, the consistency among the diagrams is automatically checked. Our approach combines both OCL and XML technologies. Based on the OCL constraints, we here propose a methodology for automated translation of statechart diagram from a set of sequence diagrams with the help of XML.", "num_citations": "10\n", "authors": ["1978"]}
{"title": "Automated Requirements Modelling with Adv-EARS\n", "abstract": " The development of complex systems frequently involves extensive work to elicit, document and review functional requirements that are usually written in unconstrained natural language, which is inherently imprecise. Use of Formal techniques in Requirement Engineering would be of immense importance as it would provide automated support in deriving use case models from the functional requirements. In this paper we propose a formal syntax for requirements called Adv-EARS. We define a grammar for this syntax such that a requirements document in this format can be grammatically parsed and the prospective actors and use cases are automatically derived from the parse tree. The use case diagram is then automatically generated based on the actors and use cases and their relationships. We have used requirements of an Insurance system as a case study to illustrate our approach.", "num_citations": "9\n", "authors": ["1978"]}
{"title": "Static analysis of object oriented systems using extended control flow graph\n", "abstract": " The basic features of object oriented software makes it difficult to apply traditional testing methods like McCabe's Cyclomatic complexity in object oriented systems. The control flow graph used in procedural systems has been extended to be applicable for object oriented systems as ECFG. ECFG is a layered CFG where nodes refer to methods rather than statements. Our work is based on analyzing static characteristics of a system using ECFG. Extended cyclomatic complexity (E-CC) refers to the number of independent execution paths within the software. In this paper we have described different ways in which CFGs of individual methods are connected in an ECFG and E-CC for these different cases are given along with small code examples for substantiating our findings. Finally we have taken an ECFG of a fairly large system and applied these cases to arrive at the E-CC of the system considered as our example.", "num_citations": "8\n", "authors": ["1978"]}
{"title": "Dynamic Service Choreography using Context Aware Enterprise Service Bus.\n", "abstract": " Enterprise Service Bus (ESB) is responsible for publishing and discovery of services in a global distributed delivery system. Context-aware systems offer entirely new opportunities for application developers and for end users by gathering context data and adapting systems\u2019 behavior accordingly. In this paper, we propose a Context Aware ESB (CA-ESB) that will publish and discover services based on location context. The main modules of the framework consist of Context Provider (senses location context), Context Aware Logic Module (decides which regional service to be selected based on location context) and Service Choreographer (choreographs selected services). We propose a graphical model named Context Aware Graph (CA-Graph) that will help us to dynamically choreograph the services. These modules along with other modules of SOA reference architecture will help the ESB to sense the location of\u00a0\u2026", "num_citations": "7\n", "authors": ["1978"]}
{"title": "Integration of design in distributed development using D-Scenario graph\n", "abstract": " The distributed delivery model has gained immense importance where the actual software is developed in a distributed manner with a common core component and various regional components interfacing with it. This introduces more complexity in software design as sequence diagrams, which implements the use cases are highly interleaved. We propose a new graphical model named Distributed Scenario Graph (D-SG) to integrate the distributed sequence diagrams to have an overall system view. It is a hierarchical graph that models information regarding interleaving of sequence diagrams of regional and common use cases. We also propose a metrics named Optimum Scenario Paths (OSP) that measures the minimum number of independent paths in the D-Scenario Graph for a particular region as well as for the entire system. Our model will help in identifying the minimum number of test cases required for\u00a0\u2026", "num_citations": "7\n", "authors": ["1978"]}
{"title": "Traceability between service component and class: a model based approach\n", "abstract": " Service components are the key to the development of a serviceoriented solution as they provide the implementation of the services. The implementation of Service components provides the actual function of the component and can be defined with one or more Java classes. We propose a model named Service Component to Class (SC2C) that maps the service components of an application with that of the classes that implement the service components. We also propose a visual model as a part of SC2C that represents the classes and relationship among classes. This model helps to establish traceability among service components and classes. We also introduce some traceability metrics to measure traceability between the artifacts of Service Oriented Architecture (SOA) and Object Oriented (OO) paradigms. This work, along with our earlier work, help in Software Configuration Management of a SOA application\u00a0\u2026", "num_citations": "6\n", "authors": ["1978"]}
{"title": "CA-ESB: Context aware enterprise service bus\n", "abstract": " Enterprise Service Bus (ESB) is responsible for publishing and discovery of services in such environments. Contextaware systems offer entirely new opportunities for application developers and for end users by gathering context data and adapting systems\u2019 behavior accordingly. In this paper, we propose a Context Aware ESB (CA-ESB) that will publish and discover services based on location context. The main modules of the framework consist of Context Provider (senses location context), Context Aware Logic Module (decides which regional service to be selected based on location context) and Service Choreographer (choreographs selected services). We propose a graphical model named Context Aware Graph (CA-Graph) that will help us to dynamically choreograph the services. These modules along with other modules of SOA reference architecture will help the ESB to sense the location of users, to select the required services and dynamically choreograph those services. We define a set of metrics based on CA-graph and analyse of performance CAESB. An algorithm is proposed that will dynamically choreograph the selected services based on location context. The results of the case study of an Insurance System are used to illustrate our approach.", "num_citations": "6\n", "authors": ["1978"]}
{"title": "Metrics-based Analysis of Requirements for Object-Oriented systems: An empirical approach\n", "abstract": " In an object-oriented environment, it is necessary to ensure that all the requirements are addressed in the design as well as implemented in a consistent manner in UML diagrams like sequence and class diagrams, which model the behavioral and structural aspects of the system. Metrics, which measures the degree of coverage of requirements and the extent of consistency between related models, will be a powerful tool for developers to have a quantitative feedback about the correctness of a system. We have proposed a new set of metrics namely Requirement Coverage Metrics (RCM) and Design Compliance Metrics (DCM) based on UML design models. RCM indicates the extent of coverage of requirements in design and highlights any missing requirements or inadequate coverage in design. It also helps in measuring progress of a project and thus helps in project management. DCM verifies whether the requirements that have been covered in design have been consistently realized in sequence and class diagrams or not. A case study has been considered and calculation of RCM and DCM has been done", "num_citations": "6\n", "authors": ["1978"]}
{"title": "FAM2BP: Transformation Framework of UML Behavioral Elements into BPMN Design Element\n", "abstract": " Business processes are an integral part of service-oriented architecture. A typical business process spans multiple Use Cases. Use case diagram along with activity diagrams represents the behavior of a design in the analysis phase for an object-oriented system. In this paper, we propose a relational model, \"Formalized Analysis Model to Business Process (FAM2BP)\" for transformation of Formalized Analysis Model (FAM) of object-oriented systems into BPMN process for SOA application. FAM consists of a set of grammar based formalized Use case and Activity diagram elements of UML. FAM2BP propose some rules that will help the designer to generate business processes for SOA application directly from object oriented analysis models.\u00a0This model would help in evolution of software design and development paradigms from Object Oriented to Service Oriented systems.", "num_citations": "5\n", "authors": ["1978"]}
{"title": "Analysis of object-oriented design: A metrics based approach\n", "abstract": " In this paper, we have proposed a set of metrics to quantitatively estimate the amount of consistency in object-oriented design based on UML use case, activity and class diagrams for a requirement. We have proposed a design compliance metrics II (DCM-II) to quantitatively measure the extent of consistency between use case, activity and class diagrams implementing the use cases for the same requirement. The basis of measuring consistency is the relationship between them based on the common elements. It also helps in measuring progress of a project and thus helps in project management. DCM-II verifies whether the requirements that have been covered in design have been consistently realized in activity and class diagram.", "num_citations": "5\n", "authors": ["1978"]}
{"title": "Behavioral and structural evolution of SOA from OO: an integrated approach\n", "abstract": " Service Oriented Architecture caters to the \"Separation of Concerns\" and incorporates reusability, granularity, modularity, componentization and interoperability. There are many software products that have been developed in the object-oriented paradigm. To incorporate the positive aspects of the service-oriented paradigm, they need to be evolved to the service-oriented domain. In this paper, we define an integrated approach towards consistent evolution of Object Oriented (OO) paradigm to the Service Oriented (SOA) domain. There are some proven Object Oriented Design Tools that can be used for Service Oriented Application design incorporating both the behavioral and structural aspects. The work in this paper involves a set of activities like formalizing the different UML diagrams, formal mapping of object components to service level components and establishing consistency among them. We also establish a\u00a0\u2026", "num_citations": "3\n", "authors": ["1978"]}
{"title": "A mathematical reusability model for quantifying the reduction in development effort\n", "abstract": " Software Effort and Cost Estimation is a very important activity that includes very uncertain elements. In the context of object-oriented software, traditional methods and metrics were extended to help managing this activity. Use Case Points (UCP) is a very well known metrics used for estimation of object-oriented systems. Use case models are used in Object-Oriented Analysis for capturing and describing the Functional-Requirements of a system. Several methods for estimating software development effort are based on attributes of a use case model. In this paper, we propose a mathematical model based on vectors to measure reusability of software design in terms of reusability of the use cases. Increasing reusability of the use case model would lead to decrease in development effort. Using the vector model, we propose an approach to measure Complexity Reduction Factor (CRF) which measures percentage\u00a0\u2026", "num_citations": "3\n", "authors": ["1978"]}
{"title": "Stack-Based Dynamic Resource Access Control Protocol for Real-Time Systems\n", "abstract": " Scheduling of tasks with resource sharing and hard deadline in Real-Time Software Systems (RTSS) has been an important area of research. The Stack-Based Dynamic Resource access control Protocol (SDRP) is a new protocol that reduces the time complexity of the existing Stack-Based Resource Sharing Protocol (SRP) as well as prevents missing of deadline of a higher priority task having no resource requirement. The SDRP is simple, arguably much easier to understand and more efficient to implement compared to the SRP. A simulator is developed to validate the proposed protocol.", "num_citations": "2\n", "authors": ["1978"]}
{"title": "Engineering of requirements for a distributed teleteaching system: a conceptual graph-based approach\n", "abstract": " This work proposes a graph based requirement analysis approach and its verification methodology to address the challenges of requirements engineering in the context of a distributed teleteaching system. Requirements are generally expressed in natural language and in the absence or limited use of the requirements elicitation phase, verification of requirements and traceability of requirements to different artifacts of the subsequent phases becomes difficult. In this work we use i* diagrams, the well known standard for agent based requirements analysis. Then we propose Extended Means Ends Analysis (EMEA) with the addition of some new constructs. Next we define a transformation algorithm to derive a conceptual graph (CG) and propose a method for conceptual graph based requirements specification and its verification. A metrics based evaluation for performance measurement of the proposed method in\u00a0\u2026", "num_citations": "2\n", "authors": ["1978"]}
{"title": "A perishable inventory system with service facility, postponed demands and finite waiting hall\n", "abstract": " In this article, we present a continuous review (s, S) inventory system with a service facility consisting of finite waiting hall (capacity N) and a single server. The customers arrive according to a Poisson process. The individual customer\u2019s unit demand is satisfied after a random time of service, which is assumed to be exponential. An arriving customer, who finds the waiting hall is full, enters into the pool of finite size (capacity M) or leaves the system which is according to a Bernolli trial. Any customer who arrives when the pool is full is assumed to be lost. At the time of service completion, if the waiting hall size drops to a preassigned level L (1< L< N) or below and the inventory level is above s, a customer from the pool is transferred to the waiting hall with probability p (0< p< 1) and she is positioned as the last among the waiting customers. If at a service completion epoch the waiting hall turns out to be empty, there is atleast one customers in the pool and the inventory level is positive, then the one ahead of all waiting in the pool gets transferred to the buffer immediately to the waiting hall, and her service starts immediately. When the inventory level drops to s an order for Q (= S\u2212 s) items is placed. The order items are received after a random time which is distributed as exponential. The life time of each item in the inventory is assumed to be exponential distribution. The joint probability distribution of the inventory level, the number of customers in the waiting hall and the number of customers in the pool, is obtained in the steadystate case. Various stationary system performance measures are computed and total expected cost rate is calculated. The results\u00a0\u2026", "num_citations": "2\n", "authors": ["1978"]}
{"title": "Separation of scattered concerns: a graph based approach for aspect mining\n", "abstract": " Aspect Mining is a dynamic area of research in the field of Software Engineering. Aspects are concerns that are intermingled with other concerns thereby reducing the understandability, maintainability and scalability of the code. The concept of Separation of Concerns (SoC) is often achieved untill the Design Phase, but gets difficult in the later phases of the software development life cycle (SDLC). During program maintenance the maintenance team is left with an aggregation of procedures and variables, both of which may be generically called user-defined tokens. This paper proposes a graph-based approach to address the problem of SoC during program maintenance. This is done by the removal of some source code elements (e.g., user-defined-tokens), which can be responsible for tangled concerns and complex code. These user-definedtokens can be treated separately under the Aspect Oriented\u00a0\u2026", "num_citations": "2\n", "authors": ["1978"]}
{"title": "Formalization of the design phase of software lifecycle: A grammar based approach\n", "abstract": " In Object Oriented systems, the design phase can be modeled using the three diagrams: Sequence diagram (which depicts responses of all objects that are involved in a single use case), Class Diagram (which is used to depict the structural aspect of design) and State chart diagram (which is used to depicts the states and state dependent behavior for objects). In this paper, we have proposed a framework for verification of these diagrams, which includes syntactic correctness and inter-diagram consistency. This is done by proposing Context Free Grammar for the three diagrams. The proposed grammar is validated by using Lex and Yacc and parse tree is generated which is an alternate form of the grammar. This framework, being built based on a formal approach, would enable us to automate the process of correctness and consistency verification among the diagrams used in design phase. This would also help us\u00a0\u2026", "num_citations": "2\n", "authors": ["1978"]}
{"title": "Scenario path identification for distributed systems: A graph based approach\n", "abstract": " With increased complexity of software systems being developed; analysis of use case scenarios is gaining importance leading to effective test case identification during early part of the life cycle. Existing approaches provide various methods for analysis of UML activity diagrams and scenario path identification based on graph models of activity diagrams. In most cases these methods consider a single activity diagram. However use case scenarios may span multiple activity diagrams, which have become quite common with distributed development of software systems. In this paper we propose Activity Relationship graph model that depicts the interrelationship of activity diagrams modeling a use case. Activity Relationship graph ARG is a hierarchical graph where each node depicts an activity diagram modeled as activity diagram graph (AG). We also define a set of metrics named Use case Scenario Paths (USP) that\u00a0\u2026", "num_citations": "2\n", "authors": ["1978"]}
{"title": "Requirements to Services: A Model to Automate Service Discovery and Dynamic Choreography from Service Version Database\n", "abstract": " As the software industry is gradually moving toward the cloud computing in a fast pace, Service oriented architecture (SOA) is increasingly becoming more and more important, as far as the Software As a Service (SAAS) is concerned. As SOA applications are maturing, it becomes imperative to maintain the various versions of services published in the Enterprise Service Bus (ESB). However, for implementing a particular requirement, it may not always be cost-efficient, to use the latest version of the services. If a previous version matches the requirement, then that might be a cost-effective solution and enabling \u201creuse\u201d to a larger extent can be a very useful method in cloud computing domain where pay per use is the accepted norm. In this chapter, we devise a comprehensive framework that models requirements in a formal manner and automatically extracts verbs to generate an activity model, which is then\u00a0\u2026", "num_citations": "1\n", "authors": ["1978"]}
{"title": "Modeling and analysis of deadlock driven dynamic priority scheduling\n", "abstract": " Specifying and designing Real Time Software Systems (RTSS) is a complex matter, because it requires logical correctness as well as timing correctness. Unified Modeling Language (UML), the standard visual object-oriented modeling language, is suitable to deal with this complexity. In RTSS, scheduling of tasks with hard deadlines has been an important area of research in today's life. In this paper a model is developed using UML 2.0 to highlight the deadlock occurrence as a drawback of Priority Inheritance Protocol (PIP). Further an improved model has been developed to prevent deadlock using the Stack Based Preemption Ceiling Protocol (SBPCP).", "num_citations": "1\n", "authors": ["1978"]}
{"title": "Comparative analysis of real time resource access control protocols using UML 2.0\n", "abstract": " The behaviors of real time software systems do not depend only on the values of input and output signals, but also on the times of their occurrences. Real time systems (RTS) interact with their environments using time constrained input/output signals. The complexity of Real Time Systems is continually increasing which makes their design very challenging. In RTS, the scheduling of tasks with hard deadlines has been an important area of research. Unified Modeling Language (UML), the standard visual object-oriented modeling language, is suitable to deal with this complexity. The main objective of this paper is to compare two protocols using UML 2.0 models. The shortcomings of the existing Priority Inheritance protocol are represented using one UML model. Further, the Stack Based Priority Ceiling protocol is used to overcome this difficulty using an improved model.", "num_citations": "1\n", "authors": ["1978"]}
{"title": "SCAG: a graphical approach to measure the complexity of the SOA application\n", "abstract": " Service Oriented Architecture (SOA) provides a foundation to achieve software reuse that enables business professionals, who are not necessarily programmers, to exploit the intrinsic properties of software. A component-based programming model is the key factor in the rapid adoption of SOA. SOA exploits the properties of Component Based Software Engineering (CBSE) in the form of services. SOA components help to provide the business users with some flexibility to play around with the components and rewire them to create new business solutions. The complexity of SOA application plays an important role in project planning and determination of timeline and cost estimation and allocation of resources. This paper proposes a metric-based approach for the determination of relative complexity and coupling of Component based SOA application. We have proposed a Service Component Architecture Graph\u00a0\u2026", "num_citations": "1\n", "authors": ["1978"]}