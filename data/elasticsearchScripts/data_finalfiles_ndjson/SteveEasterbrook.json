{"title": "Using benchmarking to advance research: A challenge to software engineering\n", "abstract": " Benchmarks have been used in computer science to compare the performance of computer systems, information retrieval algorithms, databases, and many other technologies. The creation and widespread use of a benchmark within a research area is frequently accompanied by rapid technical progress and community building. These observations have led us to formulate a theory of benchmarking within scientific disciplines. Based on this theory, we challenge software engineering research to become more scientific and cohesive by working as a community to define benchmarks. In support of this challenge, we present a case study of the reverse engineering community, where we have successfully used benchmarks to advance the state of research.", "num_citations": "343\n", "authors": ["1786"]}
{"title": "Communication problems in requirements engineering: a field study\n", "abstract": " The requirements engineering phase of software development projects is characterised by the intensity and importance of communication activities. During this phase, the various stakeholders must be able to communicate their requirements to the analysts, and the analysts need to be able to communicate the specifications they generate back to the stakeholders for validation. This paper describes a field investigation into the problems of communication between disparate communities involved in the requirements specification activities. The results of this study are discussed in terms of their relation to three major communication barriers: 1) ineffectiveness of the current communication channels; 2) restrictions on expressiveness imposed by notations; and 3) social and organisational barriers. The results confirm that organisational and social issues have great influence on the effectiveness of communication. They also show that in general, endusers find the notations used by software practitioners to model their requirements difficult to understand and validate.", "num_citations": "243\n", "authors": ["1786"]}
{"title": "Research issues in the study of computer supported collaborative writing\n", "abstract": " In this chapter we set out issues central to the investigation of computer support for collaborative writing, extending previous work to develop cognitive support systems for single writers (Sharples and O\u2019Malley 1988; Sharples et al. 1989). The most successful computer tools to support complex tasks such as writing are those that fit in with the user\u2019s normal patterns of work (Norman 1986). All writers have strategies of working that suit the context of the task and that have been acquired over many years, through apprenticeship and trial and error. It is difficult to uncover and analyse these strategies, and more difficult still to design computer systems that will support them. Our method for single-person writing was to develop a task model that drew on research in the writing process and to extend it through empirical studies of those aspects of writing (for example, the writer\u2019s use of external representations such as\u00a0\u2026", "num_citations": "235\n", "authors": ["1786"]}
{"title": "Sustainability design and software: The karlskrona manifesto\n", "abstract": " Sustainability has emerged as a broad concern for society. Many engineering disciplines have been grappling with challenges in how we sustain technical, social and ecological systems. In the software engineering community, for example, maintainability has been a concern for a long time. But too often, these issues are treated in isolation from one another. Misperceptions among practitioners and research communities persist, rooted in a lack of coherent understanding of sustainability, and how it relates to software systems research and practice. This article presents a cross-disciplinary initiative to create a common ground and a point of reference for the global community of research and practice in software and sustainability, to be used for effectively communicating key issues, goals, values and principles of sustainability design for software-intensive systems.The centrepiece of this effort is the Karlskrona\u00a0\u2026", "num_citations": "200\n", "authors": ["1786"]}
{"title": "Handling conflict between domain descriptions with computer-supported negotiation\n", "abstract": " Conflict is an inevitable part of both knowledge elicitation and system design. People will disagree over how to interpret features of the application domain, what the requirements for a new system are, and how to meet those requirements. Conventional systems analysis techniques avoid such conflicts, making any resolution untraceable and adding to the communication problems. This paper surveys a number of fields which have addressed the problems of conflict resolution. A model of computer-supported negotiation is presented which can be used to address conflicts in systems analysis directly. The model begins with an exploratory phase, in which the conflict is broken down into its components, eliciting the issues which underlie disagreements and criteria to measure their satisfaction. A set of options for possible resolutions are generated using design techniques. Finally, these options are compared to the\u00a0\u2026", "num_citations": "193\n", "authors": ["1786"]}
{"title": "A survey of empirical studies of conflict\n", "abstract": " Conflict is a common phenomenon in interactions both between individuals, and between groups of individuals. As computer-supported cooperative work (CSCW) is concerned with the design of systems to support such interactions, an examination of conflict, and the various ways of dealing with it, would clearly be of benefit. This chapter surveys the literature that is most relevant to the CSCW community, covering many disciplines that have addressed particular aspects of conflict.", "num_citations": "170\n", "authors": ["1786"]}
{"title": "Engineering the software for understanding climate change\n", "abstract": " Climate scientists build large, complex simulations with little or no software engineering training\u2014and don't readily adopt the latest software engineering tools and techniques. This ethnographic study of climate scientists shows that their culture and practices share many features of agile and open source projects, but with highly customized software validation and verification techniques.", "num_citations": "169\n", "authors": ["1786"]}
{"title": "Requirements: The key to sustainability\n", "abstract": " Software's critical role in society demands a paradigm shift in the software engineering mind-set. This shift's focus begins in requirements engineering. This article is part of a special issue on the Future of Software Engineering.", "num_citations": "168\n", "authors": ["1786"]}
{"title": "Automated software testing using model-checking\n", "abstract": " White-box testing allows developers to determine whether or not a program is partially consistent with its specified behavior and design through the examination of intermediate values of variables during program execution. These intermediate values are often recorded as an execution trace produced by monitoring code inserted into the program. After program execution, the values in an execution trace are compared to values predicted by the specified behavior and design. Inconsistencies between predicted and actual values can lead to the discovery of errors in the specification and its implementation. This paper describes an approach to (1) verify the execution traces created by monitoring statements during white-box testing using a model checker as a semantic tableau;(2) organize multiple execution traces into distinct equivalence partitions based on requirements specifications written in linear temporal logic (LTL); and (3) use the counter-example generation mechanisms found in most model-checker tools to generate new test cases for unpopulated equivalence partitions.", "num_citations": "154\n", "authors": ["1786"]}
{"title": "Case studies for software engineers\n", "abstract": " The topic of this paper was the correct use and interpretation of case studies as an empirical research method. Using an equal blend of lecture and discussion, it gave a foundation for conducting, reviewing, and reading case studies. There were lessons for software engineers as researchers who conduct and report case studies, reviewers who evaluate papers, and practitioners who are attempting to apply results from papers. The main resource for the course was the book Case Study Research: Design and Methods by Robert K. Yin. This text was supplemented with positive and negative examples from the literature.", "num_citations": "150\n", "authors": ["1786"]}
{"title": "View merging in the presence of incompleteness and inconsistency\n", "abstract": " View merging, also called view integration, is a key problem in conceptual modeling. Large models are often constructed and accessed by manipulating individual views, but it is important to be able to consolidate a set of views to gain a unified perspective, to understand interactions between views, or to perform various types of analysis. View merging is complicated by incompleteness and inconsistency: Stakeholders often have varying degrees of confidence about their statements. Their views capture different but overlapping aspects of a problem, and may have discrepancies over the terminology being used, the concepts being modeled, or how these concepts should be structured. Once views are merged, it is important to be able to trace the elements of the merged view back to their sources and to the merge assumptions related to them. In this paper, we present a framework for merging incomplete and\u00a0\u2026", "num_citations": "139\n", "authors": ["1786"]}
{"title": "Requirements in the wild: How small companies do it\n", "abstract": " Small companies form a large part of the software industry, but have mostly been overlooked by the requirements engineering research community. We know very little about the techniques these companies use to elicit and track requirements and about their contexts of operations. This paper presents preliminary results from an ongoing exploratory case study of requirements management in seven small companies, which found that (a) successful small companies exhibit a huge diversity of requirements practices that work well enough for their contexts; (b) these companies display strong cultural cohesion; (c) the principal of the company tends to retain control of the requirements processes long after other tasks have been delegated; and (d) the evidence rejects the simplistic view of a current \"software crisis\", as requirements errors for these companies, though problematic, are rarely catastrophic. We develop a\u00a0\u2026", "num_citations": "134\n", "authors": ["1786"]}
{"title": "CSCW: Cooperation or conflict?\n", "abstract": " Computer supported cooperative work (CSCW) systems will undoubtedly play an important role in the application of information systems in the 1990s and beyond. The term\" cooperative\" is often taken for granted and it is assumed that CSCW users are willing and able to cooperate without any difficulty. This assumption ignores the possibility of conflict and, as a result, the expression, management and resolution of conflict are not supported. CSCW: Cooperation or Conflict? arose from a one-day meeting on computer supported cooperative work which examined the role of conflict in collaborative work. The aim of the meeting was to examine what people actually do when they say they are cooperating, and to assess how this affects the design of systems. The chapters of this book are fuller accounts of the work presented during the meeting. The first chapter presents a survey of studies of conflict in social psychology and related fields, providing both a summary of the main findings and a set of pointers into the literature. The subsequent chapters each present a different view of conflict, focussing particularly on the social and organizational settings, and the factors which lead to conflict. The earlier chapters provide conceptual frameworks for the study of various types of conflict, while the later chapters concentrate on the implications for CSCW. The book is the first to examine conflict from a CSCW perspective. It offers a unique snapshot of current research work in this exciting field, and establishes the importance of the issue. For the designer of CSCW systems, it offers insights into the role of conflict, and an analysis of some of the assumptions on\u00a0\u2026", "num_citations": "132\n", "authors": ["1786"]}
{"title": "Extracting and modeling product line functional requirements\n", "abstract": " We introduce an extractive approach to building a product line's requirements assets. We define the functional requirements profiles (FRPs) according to the linguistic characterization of a domain's action-oriented concerns, and show that FRPs can be extracted from a document based on domain-aware lexical affinities that bear a 'verb - direct object' relation. The validated FRPs are then amenable to semantic case analysis so as to uncover the variation structures. Finally, merging FRPs helps discover the requirements interdependencies. We use orthogonal variability modeling to represent the product line's external variability and constraints. We apply our approach to an auto-marker product line. The study shows our approach complements domain analysis by quickly offering insights into system functionalities and product line variabilities.", "num_citations": "122\n", "authors": ["1786"]}
{"title": "Resolving requirements conflicts with computer-supported negotiation\n", "abstract": " Conflict is an inevitable part of both requirements elicitation and system design. As McDermid points out elsewhere in this volume, requirements are negotiated, not captured. During this process, the participants will disagree over how to interpret features of the application domain, what the requirements for a new system are, and how to meet those requirements. Conventional analysis techniques tend to suppress conflict, making any resolution untraceable and adding to the communication problems. This chapter argues the need for explicit support for conflict management, and presents a model of computer-supported negotiation to address this need.In the software engineering literature, mention of the need to handle conflict is rare. This is surprising given the importance attached to it in the social sciences. For many years it has been recognised in management science and sociology that conflict is an inevitable feature of group interaction, often to be harnessed for its positive aspects, rather than suppressed [Robbins 1974],[Deutsch 1973],[Strauss 1978]. Some recent software engineering research has identified conflict as an issue [Curtis, Krasner & Iscoe 1988],[Anderson & Fickas 1989],[Feather 1989],[Robinson 1990], although as yet little progress has been made towards understanding how conflict might be handled.", "num_citations": "113\n", "authors": ["1786"]}
{"title": "Domain modelling with hierarchies of alternative viewpoints\n", "abstract": " It is shown how domain modelling can be used within requirements engineering to reveal the conceptual models used by the participants, and relate these to one another. Existing elicitation techniques used in AI adopt a purely cognitive stance, in that they model a single problem-cognitive stance, and ignore the social and organizational context. A framework for representing alternative, conflicting viewpoints in a single domain model is described. The framework is based on the development of a hierarchy of viewpoint descriptions, where lower levels of the hierarchy contain the conflicts. The hierarchies can be viewed in a number of ways, and allow the participants to develop an understanding of each other's perspective. The framework is supported by a set of tools for developing and manipulating these hierarchies.< >", "num_citations": "108\n", "authors": ["1786"]}
{"title": "Open code for open science?\n", "abstract": " Science Data. These journals collaborate with data repositories, so that the journal publication links to the respective deposited data set, which hence becomes citable. In parallel to emerging opportunities of data publications, it is important to ensure that all data sources are cited and indexed appropriately2. Because many journals restrict the length of reference lists, references to data sources are often moved to supplementary material that is not included in common indexing systems, like Web of Science, Scopus or Google Scholar. The introduction of \u2018data citations\u2019 as an additional category of citations to the usual reference list (as operated in Scientific Data3) resolves this situation: such a dedicated section allows any underlying data sources to be fully acknowledged. It will be up to the scientific community to decide whether data citations are evaluated together with references to articles or separately. In a\u00a0\u2026", "num_citations": "96\n", "authors": ["1786"]}
{"title": "From computational thinking to systems thinking\n", "abstract": " If information and communication technologies (ICT) are to bring about a transformational change to a sustainable society, then we need to transform our thinking. Computer professionals already have a conceptual toolkit for problem solving, sometimes known as computational thinking. However, computational thinking tends to see the world in terms a series of problems (or problem types) that have computational solutions (or solution types). Sustainability, on the other hand, demands a more systemic approach, to avoid technological solutionism, and to acknowledge that technology, human behaviour and environmental impacts are tightly inter-related. In this paper, I argue that systems thinking provides the necessary bridge from computational thinking to sustainability practice, as it provides a domain ontology for reasoning about sustainability, a conceptual basis for reasoning about transformational change, and a set of methods for critical thinking about the social and environmental impacts of technology. I end the paper with a set of suggestions for how to build these ideas into the undergraduate curriculum for computer and information sciences.", "num_citations": "96\n", "authors": ["1786"]}
{"title": "An algebraic framework for merging incomplete and inconsistent views\n", "abstract": " View merging, also called view integration, is a key problem in conceptual modeling. Large models are often constructed and accessed by manipulating individual views, but it is important to be able to consolidate a set of views to gain a unified perspective, to understand interactions between views, or to perform various types of end-to-end analysis. View merging is complicated by inconsistency of views. Once views are merged, it is useful to be able to trace the elements of the merged view back to their sources. In this paper, we propose a framework for merging incomplete and inconsistent graph-based views. We introduce a formalism, called annotated graphs, which incorporates a systematic annotation scheme capable of modeling incompleteness and inconsistency as well as providing a built-in mechanism for stakeholder traceability. We show how structure-preserving maps can capture the relationships\u00a0\u2026", "num_citations": "87\n", "authors": ["1786"]}
{"title": "Formal methods for verification and validation of partial specifications: A case study\n", "abstract": " This paper describes our work exploring the suitability of formal specification methods for independent verification and validation (IV&V) of software specifications for large, safety-critical systems. An IV&V contractor often has to perform rapid analysis on incomplete specifications, with no control over how those specifications are represented. Lightweight formal methods show significant promise in this context, as they offer a way of uncovering major errors without the burden of full proofs of correctness. We describe a case study of the use of partial formal models for IV&V of the requirements for Fault Detection Isolation and Recovery on the space station. We conclude that the insights gained from formalizing a specification are valuable, and it is the process of formalization, rather than the end product, that is important. It was only necessary to build enough of the formal model to test the properties in which we were\u00a0\u2026", "num_citations": "86\n", "authors": ["1786"]}
{"title": "A framework for empirical evaluation of model comprehensibility\n", "abstract": " If designers of modelling languages want their creations to be used in real software projects, the communication qualities of their languages need to be evaluated, and their proposals must evolve as a result of these evaluations. A key quality of communication artifacts is their comprehensibility. We present a flexible framework to evaluate the comprehensibility of model representations that is grounded on the underlying theory of the language to be evaluated, and on theoretical frameworks in cognitive science.", "num_citations": "84\n", "authors": ["1786"]}
{"title": "On the difficulty of replicating human subjects studies in software engineering\n", "abstract": " Replications play an important role in verifying empirical results. In this paper, we discuss our experiences performing a literal replication of a human subjects experiment that examined the relationship between a simple test for consistent use of mental models, and success in an introductory programming course. We encountered many difficulties in achieving comparability with the original experiment, due to a series of apparently minor differences in context. Based on this experience, we discuss the relative merits of replication, and suggest that, for some human subjects studies, literal replication may not be the the most effective strategy for validating the results of previous studies.", "num_citations": "79\n", "authors": ["1786"]}
{"title": "Anchoring and adjustment in software estimation\n", "abstract": " Anchoring and adjustment is a form of cognitive bias that affects judgments under uncertainty. If given an initial answer, the respondent seems to use this as an'anchor', adjusting it to reach a more plausible answer, even if the anchor is obviously incorrect. The adjustment is frequently insufficient and so the final answer is biased. In this paper, we report a study to investigate the effects of this phenomenon on software estimation processes. The results show that anchoring and adjustment does occur in software estimation, and can significantly change the resulting estimates, no matter what estimation technique is used. The results also suggest that, considering the magnitude of this bias, software estimators tend to be too confident of their own estimations.", "num_citations": "75\n", "authors": ["1786"]}
{"title": "Elicitation of requirements from multiple perspectives\n", "abstract": " The success of large software engineering projects depends critically on the specification, which must represent the requirements of a large number of people with widely differing perspectives. Conventional approaches to software engineering do not address the process of identifying and integrating these perspectives, but instead concentrate on the maintenance of a single consistent description. This results in a specification which represents only one point of view, often the analyst\u2019s, excluding suggestions which do not fit with this view. The processes which led to the adoption of this point of view will go unrecorded, making any rationale attached to such a specification incomplete. Other participants will not be able to validate it properly, as it does not relate to their requirements.This thesis integrates ideas drawn from the study of knowledge acquisition, computer-supported co-operative work and negotiation into a model of the specification activity which allows the capture of multiple perspectives, and resolution of conflicts between them. Perspectives are elicited separately, and each develops as an independent description of the requirements. If a description becomes inconsistent, it is split into separate perspectives which represent each side of the argument. Comparisons between perspectives can be made, and when conflicts are discovered, a process of computer-supported negotiation is invoked. This allows participants to teach each other about their perspectives, and elicit the issues on which those perspectives are based. Where resolution is required, new suggestions are evaluated using these issues. A set of tools has been developed\u00a0\u2026", "num_citations": "71\n", "authors": ["1786"]}
{"title": "On using a benchmark to evaluate C++ extractors\n", "abstract": " In this paper, we take the concept of benchmarking, as used extensively in computing, and apply it to the evaluation of C++ fact extractors. We demonstrate the efficacy of this approach by developing a prototype benchmark, CppETS 1.0 (C++ Extractor Test Suite, pronounced 'see-pets') and collecting feedback in a workshop setting. The CppETS benchmark characterises C++ extractors along two dimensions: accuracy and robustness. It consists of a series of test buckets that contain small C++ programs and related questions that pose different challenges to the extractors. As with other research areas, benchmarks are best developed through technical work and consultation with a community, so we invited researchers to apply CppETS to their extractors and report on their results in a workshop. Four teams participated in this effort, evaluating the four extractors Ccia, cppx, the Rigi C++ parser and TkSee/SN. They\u00a0\u2026", "num_citations": "66\n", "authors": ["1786"]}
{"title": "Analysis of inconsistency in graph-based viewpoints: a category-theoretical approach\n", "abstract": " Eliciting the requirements for a proposed system typically involves different stakeholders with different expertise, responsibilities, and perspectives. Viewpoints-based approaches have been proposed as a way to manage incomplete and inconsistent models gathered from multiple sources. In this paper, we propose a category-theoretical framework for the analysis of fuzzy viewpoints. Informally, a fuzzy viewpoint is graph in which the elements of a lattice are used to specify the amount of knowledge available about the details of nodes and edges. By defining an appropriate notion of morphism between fuzzy viewpoints, we construct categories of fuzzy viewpoints and prove that these categories are (finitely) complete. We then show how colimits can be employed to merge the viewpoints and detect the inconsistencies that arise independent of any particular choice of viewpoint semantics. We illustrate an application of\u00a0\u2026", "num_citations": "65\n", "authors": ["1786"]}
{"title": "Climate change: a grand software challenge\n", "abstract": " Software is a critical enabling technology in nearly all aspects of climate change, from the computational models used by climate scientists to improve our understanding of the impact of human activities on earth systems, through to the information and control systems needed to build an effective carbon-neutral society. Accordingly, we, as software researchers and software practitioners, have a major role to play in responding to the climate crisis. In this paper we map out the space in which our contributions are likely to be needed, and suggest a possible research agenda.", "num_citations": "61\n", "authors": ["1786"]}
{"title": "So, you think you know others' goals? A repertory grid study\n", "abstract": " Recent research in requirements engineering (RE) has generated a number of notations for modeling stakeholders' goals and the relationships between them. However, the community has paid little attention to how stakeholders can develop consensus on the meaning of the goals in a goal model. In this article, we show how to use the repertory grid technique (RGT) to compare stakeholders' terms when they describe their softgoals (goals whose satisfaction can't be established in a clear-cut sense). We conducted a pilot study for a nonprofit organization to demonstrate our approach. The study shows that the technique can readily identify agreements and mismatches in stakeholders' terminologies and can be performed without preliminary training or specific resources", "num_citations": "59\n", "authors": ["1786"]}
{"title": "Concept analysis for product line requirements\n", "abstract": " Traditional methods characterize a software product line's requirements using either functional or quality criteria. This appears to be inadequate to assess modularity, detect interferences, and analyze trade-offs. We take advantage of both symmetric and asymmetric views of aspects, and perform formal concept analysis to examine the functional and quality requirements of an evolving product line. The resulting concept lattice provides a rich notion which allows remarkable insights into the modularity and interactions of requirements. We formulate a number of problems that aspect-oriented product line requirements engineering should address, and present our solutions according to the concept lattice. We describe a case study applying our approach to analyze a mobile game product line's requirements, and review lessons learned.", "num_citations": "51\n", "authors": ["1786"]}
{"title": "Contextual risk analysis for interview design\n", "abstract": " Interviews with stakeholders can be a useful method for identifying user needs and establishing requirements. However, interviews are also problematic. They are time consuming and may result in insufficient, irrelevant or invalid data. Our goal is to re-examine the methodology of interview design, to determine how various contextual factors affect the success of interviews in requirements engineering. We present a case study of a Web conferencing system used by a support group for spousal caregivers of people with dementia. Two sets of interviews were conducted to identify requirements for a new version of the system. Both sets of interviews had the same information elicitation goals, but each used different interview tactics. A comparison of the participants' responses to each format offers insights into the relationship between the interview context and the relative success of each interview technique for eliciting\u00a0\u2026", "num_citations": "51\n", "authors": ["1786"]}
{"title": "Coordination breakdowns: why groupware is so difficult to design\n", "abstract": " The complexity of group interaction means that there are many uncertainties in the requirements for software support tools. Many existing software systems rely on the adaptability of human users to overcome such uncertainties. One of the biggest problems is that existing analysis techniques fail to predict how collaboration will change as a result of the introduction of a new system. In this paper, we demonstrate the extent to which group support systems can change an organisation. To address this problem, better theories of how collaboration evolves over time are required, and in particular, what aspects of collaboration are likely to lead to coordination breakdowns. This paper sketches out a model of collaboration based on concepts of shared understanding, conflict and breakdown, and analyses the mechanisms of interaction in the light of this model.< >", "num_citations": "46\n", "authors": ["1786"]}
{"title": "On-demand cluster analysis for product line functional requirements\n", "abstract": " We propose an on-demand clustering framework for analyzing the functional requirements in a product line. Our approach is novel in that the objects to be clustered capture the domain's action themes at a primitive level, and the essential attributes are uncovered via semantic analysis. We provide automatic support to complement domain analysis by quickly identifying important entities and functionalities. A second contribution is our recognition of stakeholders' different goals in cluster analysis, e.g., feature identification for users versus system decomposition for designers. We thus advance the literature by examining requirements clusters that overlap and those causing a minimal information loss, and by facilitating the discovery of product line variabilities. A proof-of-concept example is presented to show the applicability and usefulness of our approach.", "num_citations": "44\n", "authors": ["1786"]}
{"title": "Management of evolving specifications using category theory\n", "abstract": " Structure is important in large specifications for understanding, testing and managing change. Category theory has been explored as framework for providing this structure, and has been successfully used to compose specifications. This work has typically adopted a \"correct-by-construction\" approach: components are specified, proved correct and then composed together in such a way as to preserve their properties. However, in a large project, it is desirable to be able to mix specification and composition steps such that, at any particular moment in the process, we may have established only some of the properties of the components and some of the composition relations. In this paper, we propose adaptations to the categorical framework in order to manage evolving specifications. We demonstrate the utility of the framework on the analysis of a part of a software change request for the Space Shuttle.", "num_citations": "43\n", "authors": ["1786"]}
{"title": "Formal Methods for V&V of partial specifications: An experience report\n", "abstract": " This paper describes our work exploring the suitability of formal specification methods for independent verification and validation (IV&V) of software specifications for large, safety critical systems. An IV&V contractor often has to perform rapid analysis on incomplete specifications, with no control over how those specifications are represented. Lightweight formal methods show significant promise in this context, as they offer a way of uncovering major errors, without the burden of full proofs of correctness. We describe an experiment in the application of the method SCR to testing for consistency properties of a partial model of the requirements for fault detection isolation and recovery on the space station. We conclude that the insights gained from formalizing a specification is valuable, and it is the process of formalization, rather than the end product that is important. It was only necessary to build enough of the formal\u00a0\u2026", "num_citations": "41\n", "authors": ["1786"]}
{"title": "Discovering aspects in requirements with repertory grid\n", "abstract": " The dominant decomposition at the requirements level relies on how requirements are represented and modeled. An aspectual requirement is a broadly scoped concern that cuts across and has impacts on other requirements-level concerns or artifacts. This paper presents a novel use of Repertory Grid Technique with roots in psychology of personal constructs as a systematic and effective way to support analysts for viewing and manipulating requirements models to expose how entities relate to one another, thereby facilitating aspectual requirements identification and conflicts detection. We illustrate the approach with a proof-of-concept example adapted from the literature; in particular, we show how early aspects can be discovered in goal models, and how interference can be detected in viewpoints-based models.", "num_citations": "40\n", "authors": ["1786"]}
{"title": "The software architecture of climate models: a graphical comparison of CMIP5 and EMICAR5 configurations\n", "abstract": " We analyze the source code of eight coupled climate models, selected from those that participated in the CMIP5 (Taylor et al., 2012) or EMICAR5 (Eby et al., 2013; Zickfeld et al., 2013) intercomparison projects. For each model, we sort the preprocessed code into components and subcomponents based on dependency structure. We then create software architecture diagrams that show the relative sizes of these components/subcomponents and the flow of data between them. The diagrams also illustrate several major classes of climate model design; the distribution of complexity between components, which depends on historical development paths as well as the conscious goals of each institution; and the sharing of components between different modeling groups. These diagrams offer insights into the similarities and differences in structure between climate models, and have the potential to be useful tools for communication between scientists, scientific institutions, and the public.", "num_citations": "38\n", "authors": ["1786"]}
{"title": "A historical examination of the social factors affecting female participation in computing\n", "abstract": " We present a history of female participation in North American CS, with a focus on the social forces involved. For educators to understand the status quo, and how to change it, we must understand the historical forces that have led us here. We begin with the female''computers''of the 19th century, then cover the rise of computing machines, establishment of CS, and a history of CS education with regard to gender. In our discussion of academic CS, we contemplate academic generations of female computer scientists and describe their differential experiences.", "num_citations": "38\n", "authors": ["1786"]}
{"title": "A category-theoretic approach to syntactic software merging\n", "abstract": " Software merging is a common and essential activity during the lifespan of large-scale software systems. Traditional textual merge techniques are inadequate for detecting syntactic merge conflicts. In this paper, we propose a domain-independent approach for syntactic software merging that exploits the graph-based structure(s) of programs. We use morphisms between fuzzy graphs to capture the relationships between the structural elements of the programs to be merged, and apply a truth ordering lattice to express inconsistencies and evolutionary properties as we compute the merge. We demonstrate the approach with a three-way consolidation merge in a commercial software system; in particular, we show how analyzing merged call structures can help developers gain a better understanding and control of software evolution.", "num_citations": "38\n", "authors": ["1786"]}
{"title": "On the lack of consensus over the meaning of openness: an empirical study\n", "abstract": " This study set out to explore the views and motivations of those involved in a number of recent and current advocacy efforts (such as open science, computational provenance, and reproducible research) aimed at making science and scientific artifacts accessible to a wider audience. Using a exploratory approach, the study tested whether a consensus exists among advocates of these initiatives about the key concepts, exploring the meanings that scientists attach to the various mechanisms for sharing their work, and the social context in which this takes place. The study used a purposive sampling strategy to target scientists who have been active participants in these advocacy efforts, and an open-ended questionnaire to collect detailed opinions on the topics of reproducibility, credibility, scooping, data sharing, results sharing, and the effectiveness of the peer review process. We found evidence of a lack of agreement on the meaning of key terminology, and a lack of consensus on some of the broader goals of these advocacy efforts. These results can be explained through a closer examination of the divergent goals and approaches adopted by different advocacy efforts. We suggest that the scientific community could benefit from a broader discussion of what it means to make scientific research more accessible and how this might best be achieved.", "num_citations": "37\n", "authors": ["1786"]}
{"title": "Evidence that computer science grades are not bimodal\n", "abstract": " Although it has never been rigorously demonstrated, there is a common belief that grades in computer science courses are bimodal. We statistically analyzed 778 distributions of final course grades from a large research university and found that only 5.8% of the distributions passed tests of multimodality. We then devised a psychology experiment to understand why CS educators believe their grades to be bimodal. We showed 53 CS professors a series of histograms displaying ambiguous distributions that we asked them to categorize. A random half of participants were primed to think about the fact that CS grades are commonly thought to be bimodal; these participants were more likely to label ambiguous distributions as \"bimodal.\" Participants were also more likely to label distributions as bimodal if they believed that some students are innately predisposed to do better at CS. These results suggest that bimodal\u00a0\u2026", "num_citations": "35\n", "authors": ["1786"]}
{"title": "Analysis of early aspects in requirements goal models: A concept-driven approach\n", "abstract": " Early aspects are stakeholder concerns that crosscut the problem domain, with the potential for a broad impact on questions of scoping, prioritization, and architectural design. Analyzing early aspects improves early stage decision-making, and helps trace stakeholder interests throughout the software development life cycle. However, analysis of early aspects is hard because stakeholders are often vague about the concepts involved, and may use different vocabularies to express their concerns. In this paper, we present a rigorous approach to conceptual analysis of stakeholder concerns. We make use of the repertory grid technique to identify terminological interference between stakeholders\u2019 descriptions of their goals, and formal concept analysis to uncover conflicts and trade-offs between these goals. We demonstrate how this approach can be applied to the goal models commonly used in requirements\u00a0\u2026", "num_citations": "34\n", "authors": ["1786"]}
{"title": "Assessing climate model software quality: a defect density analysis of three models\n", "abstract": " A climate model is an executable theory of the climate; the model encapsulates climatological theories in software so that they can be simulated and their implications investigated. Thus, in order to trust a climate model, one must trust that the software it is built from is built correctly. Our study explores the nature of software quality in the context of climate modelling. We performed an analysis of defect reports and defect fixes in several versions of leading global climate models by collecting defect data from bug tracking systems and version control repository comments. We found that the climate models all have very low defect densities compared to well-known, similarly sized open-source projects. We discuss the implications of our findings for the assessment of climate model software trustworthiness.", "num_citations": "32\n", "authors": ["1786"]}
{"title": "Traceability in viewpoint merging: a model management perspective\n", "abstract": " Viewpoint merging is one of the core activities in viewpoints-based development. We may consolidate a set of viewpoints to unify different stakeholders' perspectives, to explore interactions between different parts of a problem, or to perform various types of analysis. Once viewpoints are merged, it is important to be able to determine how the merged viewpoint represents each viewpoint, and to track the assumptions involved in the merge. Building on the viewpoint merging framework in our earlier work [22], this paper proposes a systematic way to generate and represent the traceability information required for tracing the merged viewpoint elements back to their originating viewpoints, and to the merge assumptions related to the elements.", "num_citations": "31\n", "authors": ["1786"]}
{"title": "Negotiation and the Role of the Requirements Specification\n", "abstract": " The term requirements engineering describes the processes leading to the production of a requirements specification. Much of software engineering research takes the existence of this document for granted, concentrating instead on the downstream areas of software development. In this chapter, we argue that the problems of requirements engineering deserve greater study. To understand why this is so, we consider the role of the specification in the software engineering process, and describe issues which must be addressed during specification construction. The difficulties of requirements engineering come from many directions, including the sheer quantity of knowledge involved, the inherent uncertainty, and the need for negotiation where there are conflicting requirements. We conclude that a prescriptive framework to support negotiation of requirements is highly desirable, and describe a number of objectives for such a framework.", "num_citations": "31\n", "authors": ["1786"]}
{"title": "Barriers to adoption of information technology in healthcare\n", "abstract": " Healthcare is an important pillar of society, critical for e ectively responding to public health emergencies, and addressing disease, ill health, and poverty brought on by communicable disease and non communicable disease and cancer [7]. The increasing need for cost e ective, time e ective, and preventive healthcare is forcing radical changes in current healthcare systems, requiring them to take full advantage of capabilities of modern technology, including information technology. However, this is not straightforward. Despite constant advances in modern information technology, adoption in healthcare is very slow.In this report, we take a systems thinking perspective to identify barriers to the application of information technology in healthcare and adoption of those advances through the prism of two use cases: electronic medical records (EMR) and remote patient monitoring (RPM) technology. Finally, we outline solutions to individual barriers and consider the negative e ects those solutions might have on other barriers. We expect that our analysis of adoption of information technology in healthcare as presented in our use cases will strengthen the case for systems thinking and help requirements analysts decide on appropriate steps to boost adoption of new technology to achieve more e ective and e cient next generation healthcare.", "num_citations": "27\n", "authors": ["1786"]}
{"title": "Efficient and information-preserving future frame prediction and beyond\n", "abstract": " Applying resolution-preserving blocks is a common practice to maximize information preservation in video prediction, yet their high memory consumption greatly limits their application scenarios. We propose CrevNet, a Conditionally Reversible Network that uses reversible architectures to build a bijective two-way autoencoder and its complementary recurrent predictor. Our model enjoys the theoretically guaranteed property of no information loss during the feature extraction, much lower memory consumption and computational efficiency. The lightweight nature of our model enables us to incorporate 3D convolutions without concern of memory bottleneck, enhancing the model\u2019s ability to capture both short-term and long-term temporal dependencies. Our proposed approach achieves state-of-the-art results on Moving MNIST, Traffic4cast and KITTI datasets. We further demonstrate the transferability of our self-supervised learning method by exploiting its learnt features for object detection on KITTI. Our competitive results indicate the potential of using CrevNet as a generative pre-training strategy to guide downstream tasks.", "num_citations": "26\n", "authors": ["1786"]}
{"title": "Software engineering for sustainability: Find the leverage points!\n", "abstract": " We as software engineers are responsible for the long-term consequences of the systems we design-including impacts on the wider environmental and societal sustainability. However, the field lacks analytical tools for understanding these potential impacts while designing a system or for identifying opportunities for using software to bring about broader societal transformations. This article explores how the concept of leverage points can be used to make sustainability issues more tangible in system design. The example of software for transportation systems illustrates how leverage points can help software engineers map out and investigate the wider system in which the software resides, such that we can use software as an effective tool for engineering a more sustainable world. This article is part of a theme issue on Process Improvement.", "num_citations": "26\n", "authors": ["1786"]}
{"title": "Evidencing sustainability design through examples\n", "abstract": " Significant research has recently been undertaken within the Requirements Engineering (RE) community towards understanding, integrating, and evaluating sustainability concerns in software systems. However, there still is no single point of reference for either RE researchers or practitioners where the work on sustainability is gathered and exemplified. It is the aim of this paper to become such a reference point. Here we review the current work on RE and Sustainability, and gather both the set of available approaches and demonstrative examples on how each of the RE activities-from feasibility study to requirements management-can be undertaken with explicit support for sustainability. This paper aims to serve as a starting point for RE researchers and practitioners who wish to start to positively contribute to sustainability of the socio-technical systems via RE research or practice.", "num_citations": "26\n", "authors": ["1786"]}
{"title": "V&V through inconsistency tracking and analysis\n", "abstract": " In this paper we describe a research agenda for a study into the use of inconsistency analysis as a tool for software V&V and in particular, the use of category theory as a basis for modeling consistency relationships between the various artifacts of software development, including specifications, design, test cases, etc. Our expectation is that inconsistency analysis is fundamental to much of the work of V&V and that a systematic approach will have impacts across a wide range of V&V tasks. Two goals are described: an account of the contribution of inconsistency analysis to various V&V analyses, and the development of a formal framework for inconsistency analysis. Our approach to the development of the latter is through the refinement of the viewpoint framework using the language of category theory. We discuss the relationship between specification morphisms, as conventional conceived in work on composition of\u00a0\u2026", "num_citations": "26\n", "authors": ["1786"]}
{"title": "Engineering associations: from models to code and back through semantics\n", "abstract": " Association between classes is a central construct in OO modeling. However, precise semantics of associations has not been defined, and only the most basic types are implemented in modern forward and reverse engineering tools. In this paper, we present a novel mathematical framework and build a precise semantics for several association constructs, whose implementation has been considered problematic. We also identify a number of patterns for using associations in practical applications, which cannot be modeled (reverse engineered) in UML.", "num_citations": "24\n", "authors": ["1786"]}
{"title": "Software architects in practice: Handling requirements\n", "abstract": " Software architecture can be a critical factor in software development. Understanding what software architects do in practice is necessary to the enterprise of providing techniques, methods, process, tools and technologies to support the development and use of software architecture. In this paper, we present the results of how architects handle requirements in practice. We then summarize the key lessons learned from the study.", "num_citations": "24\n", "authors": ["1786"]}
{"title": "Comparing and contrasting different algorithms leads to increased student learning\n", "abstract": " Comparing and contrasting different solution approaches is known in math education and cognitive science to increase student learning--what about CS? In this experiment, we replicated work from Rittle-Johnson and Star, using a pretest--intervention--posttest--follow-up design (n= 241). Our intervention was an in-class workbook in CS2. A randomized half of students received questions in a compare-and-contrast style, seeing different code for different algorithms in parallel. The other half saw the same code questions sequentially, and evaluated them one at a time. Students in the former group performed better with regard to procedural knowledge (code reading & writing), and flexibility (generating, recognizing & evaluating multiple ways to solve a problem). The two groups performed equally on conceptual knowledge. Our results agree with those of Rittle-Johnson and Star, indicating that the existing work in this\u00a0\u2026", "num_citations": "23\n", "authors": ["1786"]}
{"title": "Learning from inconsistency\n", "abstract": " The paper argues that inconsistencies that occur during the development of a software specification offer an excellent way of learning more about the development process. We base this argument on our work on inconsistency management. Much attention has been devoted recently to the need to allow inconsistencies to occur during software development, to facilitate flexible development strategies, especially for collaborative work. Recent work has concentrated on reasoning in the presence of inconsistency, tracing inconsistencies with 'pollution markers', and supporting resolution. We argue that one of the most important aspects of inconsistency is the learning opportunity it provides. We are therefore concerned with how to capture this learning outcome so that its significance is not lost. We present a small example of how apprentice software engineers learn from their mistakes, and outline how an inconsistency\u00a0\u2026", "num_citations": "22\n", "authors": ["1786"]}
{"title": "Coordination Breakdowns: How flexible is collaborative work?\n", "abstract": " The psychology of computer users is by no means fully understood. Hence there are many uncertainties in software design, and especially interface design. Many software products succeed not because they are designed to suit their users, but because the users can adapt to suit the software. The question then for CSCW is whether collaborative work is equally adaptable. I will argue in this chapter that CSCW design is particularly hard because we do not yet have an adequate framework for understanding how group members adapt to cope with coordination breakdown and conflict.", "num_citations": "21\n", "authors": ["1786"]}
{"title": "PMI: Knowledge elicitation and De Bono's thinking tools\n", "abstract": " Much attention in knowledge acquisition has been directed at the question \u201cWhat is Knowledge?\u201d. In this paper, we discuss a related question, which we consider to be of equal importance, namely \u201cWhat is Thinking?\u201d. We present a definition of thinking that emphasizes the importance of arriving at new arrangements of knowledge, and discuss how having knowledge about something can be used to avoid thinking. Given this view, it is clear that stimulating an expert to think about the domain can provide more detailed knowledge about both the domain and about the expert himself. We have taken one of De Bono's thinking tools, the PMI (plus-minus-interesting) and built a knowledge elicitation tool for use in a domain where the expert's responses are likely to be based on unquestioned judgements. The tool requires the expert to think about the domain in ways that he is perhaps not used to, and the\u00a0\u2026", "num_citations": "21\n", "authors": ["1786"]}
{"title": "Eliciting Architectural Decisions from Requirements using a Rule-based Framework.\n", "abstract": " Making architectural decisions based on requirements, analyzing cost-benefit trade-offs, and keeping design options open is a difficult task. Existing work on classification of architectural styles and features of reusable components, and derivation of relevant architectural styles provides useful heuristics to the task, but it remains to be largely a laborintensive activity.In this paper, we propose a rule-based framework with automated reasoning for eliciting architectural decisions from requirements. Our goal is to gain a deeper understanding of the relationships between requirements and architectural decisions, define generic mappings based on these relationships, and use these mappings to guide architectural design with a higher degree of automation.", "num_citations": "19\n", "authors": ["1786"]}
{"title": "Shelter dynamics in refugee and IDP camps: Customization, permanency, and opportunities\n", "abstract": " The UNHCR estimates that the average forced displacement period is 17 years, which many refugees and IDPs (Internally Displaced Persons) spend entirely in camps. This reality has caused camps to be increasingly considered as permanent cities of our future rather than temporary relief solutions. Unfortunately, this recognition has not been matched by corresponding increases in the planning or resources devoted to camps. In the case of shelter, a basic human need, little to no architectural infrastructure exists and urban planning remains short-term. As a result, camp dwellers are often forced to take it upon themselves to transform existing humanitarian storage facilities into essential domiciles, markets, and communities. In this paper, we describe our observations and survey results on the state of and practices surrounding shelter from three camps in north Iraq. Our findings illustrate the various modes of shelter\u00a0\u2026", "num_citations": "18\n", "authors": ["1786"]}
{"title": "Configuration Management for Large-Scale Scientific Computing at the UK Met Office\n", "abstract": " The UK Met Office's flexible configuration management (FCM) system uses existing open source tools, adapted for use with high-performance scientific Fortran code, to help manage evolving code in its large-scale climate simulation and weather forecasting models. FCM has simplified the development process, improved team coordination, and reduced release cycles.", "num_citations": "18\n", "authors": ["1786"]}
{"title": "The Role of Independent V & V in Upstream Software Development Processes\n", "abstract": " This paper describes the role of Verification and Validation (V&V) during the requirements and high level design processes, and in particular the role of Independent V&V (IV&V). The job of IV&V during these phases is to ensure that the requirements are complete, consistent and valid, and to ensure that the high level design meets the requirements. This contrasts with the role of Quality Assurance (QA), which ensures that appropriate standards and process models are defined and applied. This paper describes the current state of practice for IV&V, concentrating on the process model used in NASA projects. We describe a case study, showing the processes by which problem reporting and tracking takes place, and how IV&V feeds into decision making by the development team. We then describe the problems faced in implementing IV&V. We conclude that despite a well defined process model, and tools to support it, IV&V is still beset by communication and coordination problems.", "num_citations": "18\n", "authors": ["1786"]}
{"title": "A framework for the study of computer supported collaborative writing\n", "abstract": " A framework for the study of computer supported collaborative writing - OpenGrey fra | eng OpenGrey Open System for Information on Grey literature in Europe Home Search Subjects Partners Export Help Search XML To cite or link to this reference: http://hdl.handle.net/10068/515039 Title : A framework for the study of computer supported collaborative writing Authors : Sharples, M. ; Goodlet, J. ; Beck, E. ; Corporate author : Sussex Univ., Brighton (United Kingdom). School of Cognitive and Computing Sciences ; Publication year : 1991 Language : English ; Pagination/Size : 21 p. ; SIGLE classification : 05K - Linguistics ; 05Q - Psychology ; 090 - Electronics and electrical engineering, computer science, general ; Keyword(s) : A framework for the study of computer supported collaborative writing [ Cognitive process of writing] ; Document type : R - Report ; Report number : SU-CSRP--190 ; Other identifier : GB ; GB_ 1991:\u2026", "num_citations": "18\n", "authors": ["1786"]}
{"title": "A taxonomy of asymmetric requirements aspects\n", "abstract": " The early aspects community has received increasing attention among researchers and practitioners, and has grown a set of meaningful terminology and concepts in recent years, including the notion of requirements aspects. Aspects at the requirements level present stakeholder concerns that crosscut the problem domain, with the potential for a broad impact on questions of scoping, prioritization, and architectural design. Although many existing requirements engineering approaches advocate and advertise an integral support of early aspects analysis, one challenge is that the notion of a requirements aspect is not yet well established to efficaciously serve the community. Instead of defining the term once and for all in a normally arduous and unproductive conceptual unification stage, we present a preliminary taxonomy based on the literature survey to show the different features of an asymmetric\u00a0\u2026", "num_citations": "17\n", "authors": ["1786"]}
{"title": "Case studies for software engineers\n", "abstract": " Case Studies for Software Engineers Page 1 1 28th International Conference on Software Engineering \u00a9 2006 Easterbrook, Sim, Perry, Aranda Tutorial F2 Case Studies for Software Engineers Steve Easterbrook University of Toronto Jorge Aranda University of Toronto This tutorial was originally developed with: Susan Elliott Sim University of California, Irvine Dewayne E. Perry The University of Texas at Austin Tutorial F2 Case Studies for Software Engineers \u00a9 2006 Easterbrook, Sim, Perry, Aranda 2 Goals of this tutorial \u274d For researchers: \u25cf differentiate case studies from other empirical methods \u25cf a solid grounding in the fundamentals of case studies as a research method \u25cf understand and avoid common mistakes with case studies \u274d For reviewers: \u25cf guidance to judge quality and validity of reported case studies. \u25cf criteria to assess whether research papers based on case studies are suitable for publication \u274d \u2026", "num_citations": "17\n", "authors": ["1786"]}
{"title": "Sustainability debt: A metaphor to support sustainability design decisions\n", "abstract": " Sustainability, the capacity to endure, is fundamental for the societies on our planet. Despite its increasing recognition in software engineering, it remains difficult to assess the delayed systemic effects of decisions taken in requirements engineering and systems design. To support this difficult task, this paper introduces the concept of sustainability debt. The metaphor helps in the discovery, documentation, and communication of sustainability issues in requirements engineering. We build on the existing metaphor of technical debt and extend it to four other dimensions of sustainability to help think about sustainability-aware software systems engineering. We highlight the meaning of debt in each dimension and the relationships between those dimensions. Finally, we discuss the use of the metaphor and explore how it can help us to design sustainability-aware software intensive systems.", "num_citations": "16\n", "authors": ["1786"]}
{"title": "Independent Validation of Specifications: A coordination headache\n", "abstract": " Large, complex projects face significant barriers to coordination and communication due to continuous, rapid changes during a project's lifecycle. Such changes must be tracked, analyzed, and reconciled to ensure high quality in the end product, otherwise problems may be get lost or ignored in the overall complexity. We report on \"work in progress\" in the study of coordination problems between two independent separate groups: software development and software analysis. We have begun to construct a taxonomy of coordination problem, which we illustrate with two scenarios. We briefly describe current attempts to introduce incremental improvements to coordination problems in such projects via World Wide Web tools. Based on actual project experiences, we plan to deploy such tools in a non intrusive fashion to improve coordination and communication between software development groups.", "num_citations": "14\n", "authors": ["1786"]}
{"title": "Scaling up Women in Computing Initiatives: What Can We Learn from a Public Policy Perspective?\n", "abstract": " How to increase diversity in computer science is an important open question in CS education. A number of best practices have been suggested based on case studies; however, for scaling these efforts up in a sustainable fashion, it remains unclear which types of initiatives are most effective in which contexts. We examine gender diversity initiatives in CS education from a policy analysis perspective, adapting McDonnell and Elmore's 1987 notion of policy instruments, wherein the initiative is the unit of analysis. We present a conceptual framework for categorizing the different policy instruments by a cross of'leverage'and'targetedness', and discuss how different types of initiatives will scale. We argue that universally-targeted, high-leverage initiatives are most important for scaling up diversity initiatives in CS education, with medium-leverage being a stepping stone to high leverage change.", "num_citations": "13\n", "authors": ["1786"]}
{"title": "Evaluating user-centric adaptation with goal models\n", "abstract": " Capturing and adapting to the operational context of mobile users is one of the key properties of pervasive systems. Although some frameworks have been proposed for managing user-centric adaptation in pervasive computing, little work has been done on adaptivity evaluation. This paper proposes a framework for evaluating adaptive pervasive systems based on the viewpoint comparison between the potential users and the system design. In this framework, two types of goal models \"system goal models\" and \"user goal models\" are developed for the viewpoint comparison, two metrics \"coverage\" and \"demand\" are used for measuring the difference, and some principles are applied for identifying key features from the comparison. This paper also reports the result of a case study we conducted for evaluating the effectiveness of this framework.", "num_citations": "12\n", "authors": ["1786"]}
{"title": "Fault detectability analysis for requirements validation of fault tolerant systems\n", "abstract": " When high assurance applications are concerned, life cycle process control has witnessed steady improvement over the past two decades. As a consequence, the number of software defects introduced in the later phases of the life cycle, such as detailed design and coding, is decreasing. The majority of the remaining defects originate in the early phases of the life cycle. This is understandable, since the early phases deal with the translation from informal requirements into a formalism that will be used by developers. Since the step from informal to formal notation is inevitable, verification and validation of the requirements continue to be the research focus. Discovering potential problems as early as possible provides the potential for significant reduction in development time and cost. In this paper, the focus is on a specific aspect of requirements validation for dynamic fault tolerant control systems: the feasibility\u00a0\u2026", "num_citations": "12\n", "authors": ["1786"]}
{"title": "Sustainable and smart: Rethinking what a smart home is\n", "abstract": " The term Smart Home typically refers to dwellings augmented with high-tech responsive systems such that heating, air conditioning, lighting, appliances, entertainment outlets, and architectural components are computerized and managed, often via a remote control. Smart homes promise comfort, convenience, and resource conservation in the near future. Yet the notion of increased dependency on technology for comfort and efficiency (and hence, sustainably) needs to be revised. While we (justifiably) expect our dwellings to use technological advances to sense and respond to our needs, a growing body of literature [1-5] warns against increased dependencies and amplified complexification, given the resource depletion anticipated in the future. Through examples and discussions drawn primarily from vernacular architecture discourse, this paper addresses this dichotomy. We investigate how smart homes can be re-defined to better fit sustainability goals while anticipating technology limitations. We introduce members of the ICT4S community to the sustainability potentials of vernacular domestic architecture and inspire them by its smart responses to human needs and harsh conditions. And finally, we argue that re-employing tried-and-true vernacular techniques in conjunction with ICT systems can offer smart yet simple and feasible solutions to future housing needs while being inherently more sustainable from an environmental and operational stance.", "num_citations": "11\n", "authors": ["1786"]}
{"title": "Guest Editors' Introduction: Climate Change-Science and Software\n", "abstract": " Climate change is likely to be one of the defining global issues of the 21st century. The past decade\u2014the hottest in recorded history\u2014has witnessed countries around the world struggling to deal with drought, heat waves, and extreme weather. The sheer scale of the problem also makes it hard to understand, predict, and solve. Climate science journals regularly publish special issues on specific climate models, typically timed to present results from a major new release of a given model. However, these tend to focus on the new science that the model enables, rather than to describe the software and its development. This special issue of IEEE Software magazine focuses on the \"software\" behind climate change models.", "num_citations": "11\n", "authors": ["1786"]}
{"title": "Empirical research methods in requirements engineering\n", "abstract": " \u25cf Empirical Induction used to build evidence\u25cf Scientists often get it wrong\u2026\u25cf\u2026 but Science (as a process) is self-correcting\u25cf All scientific laws and theories have limited scope\u25cf Eg biological theories probably only apply on our own planet\u25cf Eg laws of physics don\u2019t apply at the subatomic level", "num_citations": "11\n", "authors": ["1786"]}
{"title": "Scale Changes Everything: Understanding the Requirements for Systems of Systems.\n", "abstract": " Software technology now penetrates almost every aspect of our lives in complex ways. The reality of 21st century software development is that software itself is but one part of a complex system-of-systems that includes a broad technological infrastructure along with a wide set of human activities. The technological systems and the human activity systems have a symbiotic relationship-each shapes the other in complex ways, such that neither can be understood in isolation. A recent report from the SEI on Ultra-Large Scale (ULS) Systems accurately characterized the nature of these systems-of-systems: they have no centralized control; experience normal failures and continual evolution of heterogeneous elements; and their requirements are inherently conflicting, diverse and often unknowable. For design purposes, the boundary between people and software disappears-design is as much about shaping the human activities as it is about constructing the software.", "num_citations": "11\n", "authors": ["1786"]}
{"title": "Managing terminological interference in goal models with repertory grid\n", "abstract": " Terminological interference occurs in requirements engineering when stakeholders vary in the concepts they use to understand a problem domain, and the terms they use to describe those concepts. This paper investigates the use of Kelly's repertory grid technique (RGT) to explore stakeholders' varying interpretations of the labels attached to softgoals in a goal model. We associate softgoals with stakeholders' personal constructs, and use the tasks that contribute to these goals as elements that stakeholders can rate using their constructs. By structurally exchanging grids data among stakeholders, we can compare their conceptual and terminological structures, and gain insights into relationships between problem domain concepts", "num_citations": "11\n", "authors": ["1786"]}
{"title": "iVuBlender: A tool for merging incomplete and inconsistent views\n", "abstract": " View merging is an important activity in any conceptual modeling language. It is often desirable to combine a set of views to gain a unified perspective, to test hypotheses about how views are related, or to perform various types of analysis. A major challenge for view merging is toleration of incompleteness and inconsistency: views may be inconclusive, and may have conflicts over the concepts being modeled or how they are structured. Drawing on the theory developed in our earlier work (2003), we present a view merging tool, called iVuBlender, that allows for explicit modeling of incompleteness and inconsistency and provides a framework for interconnecting and merging incomplete and inconsistent views.", "num_citations": "11\n", "authors": ["1786"]}
{"title": "Distributed cognition in software engineering research: Can it be made to work?\n", "abstract": " Distributed cognition is a theoretical and methodological framework that considers social groups, their artifacts, and their contexts as a single cognitive entity working towards the solution of a shared problem. In this paper we briefly describe the framework and consider its strengths and weaknesses as a theoretical foundation for software engineering research. We propose a series of techniques to address the methodological problems that the application of the framework entails in our research field. Finally, we present an ongoing exploratory case study that aims to evaluate the adaptability of the framework and of the techniques we propose here.", "num_citations": "10\n", "authors": ["1786"]}
{"title": "Verification and validation of requirements for mission critical systems\n", "abstract": " The aim of this tutorial is to introduce a number of practical techniques for analyzing requirements for embedded, mission critical systems, along with a general model for applying them as part of an Independent Verification and Validation (IV&V) process. We will emphasize the use of formal modeling techniques, but with a purely practical aim: we will demonstrate how to select and apply an appropriate analysis technique, irrespective of whether the project to which it is to be applied routinely uses any formal specification languages. The tutorial draws on our experiences with lightweight formal techniques applied to NASA programs, in which we have demonstrated that formal techniques offer a great deal of value as a modeling tool for analysis of mission critical software requirements, without incurring the expense of formally specifying these requirements. The tutorial will include several NASA case studies.", "num_citations": "10\n", "authors": ["1786"]}
{"title": "Category theory for beginners\n", "abstract": " Reading a maths books (especially category theory books!) is like reading a program without any of the supporting documentation. There\u2019s lots of definitions, lemmas, proofs, and so on, but no indication of what it\u2019s all for, or why it\u2019s written the way it is. This also applies to many software engineering papers that explore formal foundations.", "num_citations": "10\n", "authors": ["1786"]}
{"title": "Exile Within Borders: Understanding the Limits of the Internally Displaced People (IDPs) in Iraq\n", "abstract": " Research in ICT about forced displacement focuses mainly on refugees. Internally displaced people (IDPs), however, are rarely discussed in ICT and related disciplines. This paper aims to fill in the gap and provide an insight into the everyday lives of conflict-driven IDPs and their ICTs usage based on our original fieldwork at several IDP and refugee camps in northern Iraq. Our work includes extended field observations, surveys with 86 IDPs and 47 refugees, and examination of recent reports about IDPs from international NGOs that have been active in that region. Our findings illustrate that IDPs live under similar resource-constrained environment as refugees and, in some cases, suffer from even harsher restrictions. We highlight how these confines limit their ICTs usage and discuss opportunities for future ICT research and policy implication to improve the quality of life of the displaced residing within their own\u00a0\u2026", "num_citations": "8\n", "authors": ["1786"]}
{"title": "A machine learning approach to non-uniform spatial downscaling of climate variables\n", "abstract": " This study presents a scalable and robust approach to spatial downscaling in the context of climate downscaling. We explore the ability of four techniques to downscale a climate variable to a given location of interest. As an example, we focus on downscaling daily mean air temperature at twelve stations located across the topographically complex province of British Columbia, Canada. The techniques include multi-linear regression (MLR), artificial neural networks (ANN), extreme learning machines (ELM) and long-short term memory networks (LSTM). Our method based on LSTM generalizes well to different locations and leads to higher downscaling accuracy compared to MLR and ELM. The performance of the models is measured based on statistical metrics, including the coefficient of determination, and the root mean square error.", "num_citations": "8\n", "authors": ["1786"]}
{"title": "How CS departments are managing the enrolment boom: Troubling implications for diversity\n", "abstract": " Enrolments in North American undergraduate computer science have been booming in recent years, and many CS departments have been struggling to meet student demand. We surveyed 78 CS professors, instructors, staff, and administrators to see how the enrolment boom has been affecting their practice; and to see how departments are responding in terms of policy. We asked participants to tell us what factors were being considered in their department's policymaking using a page of open-ended questions. Only one participant of 78 noted diversity as a concern. We then gave them a list of factors we thought could affect their department's policymaking, including diversity. After this prompt, more participants reported diversity was important (n=5). We found that policymakers are favouring solutions which are intuitive to them, rather than looking for examples from the literature, similar institutions, or the history of\u00a0\u2026", "num_citations": "8\n", "authors": ["1786"]}
{"title": "Software engineering for sustainability\n", "abstract": " Sustainability is a central objective for systems development because, according to Rockstr\u00f6m et al.(2009), humanity has exceeded the planet\u2019s boundaries for safe operation. Software systems are present in almost all aspects of our daily lives, therefore software systems can help to transition towards sustainability by acting as agents of change. If software engineers want to include sustainability as a new objective into their systems, it needs to be reflected in the requirements; therefore this may have significant impact on how software developers perform requirements engineering and systems design. However, software engineers lack practical guidelines on how to perform a sustainability analysis for a system while in discussion with customers. The key focus of this chapter is bridging the sustainability analysis gap in software engineering.", "num_citations": "8\n", "authors": ["1786"]}
{"title": "Formal modeling of space shuttle software change requests using SCR\n", "abstract": " This paper describes a feasibility study into the use of a formal requirements modeling method (SCR) to assist with independent verification and validation of change requests for space shuttle flight software. The goal of the study was to determine whether a formal modeling technique could automate some of the manual analysis tasks performed on change requests, including consistency checking. To analyze the change request, the key part of the original functionality was modeled in SCR. The model was then updated to reflect the proposed changes. Tool support was used to perform consistency checking and to validate the model against domain properties. The study showed that as an analysis tool, formal modeling offers some advantages over inspection-based approaches. However, the problem of analyzing change requests is sufficiently different from other requirements modeling tasks that some specialist\u00a0\u2026", "num_citations": "8\n", "authors": ["1786"]}
{"title": "What is Hypertext?\n", "abstract": " What is Hypertext? | Text retrieval ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksText retrieval: the state of the artWhat is Hypertext? chapter What is Hypertext? Share on Author: Steve M Easterbrook profile image Steve M. Easterbrook View Profile Authors Info & Affiliations Publication: Text retrieval: the state of the artJanuary 1990 Pages 119\u2013137 0citation Get Citation Alerts New Citation Alert added! This alert has been successfully added and will be sent to: You will be notified whenever a record that you have chosen has been cited. To \u2026", "num_citations": "8\n", "authors": ["1786"]}
{"title": "Situating shelter design and provision in ICT discourse for scarce-resource contexts\n", "abstract": " The world is facing a shelter crisis that is only expected to worsen in the future as resources become scarcer and climate change, economic decline, and mass migrations pervade. In this paper, we argue that the ICT community has a major role to play in the crisis of shelter provision, and we explore the relevant challenges and limitations, as well as the role ICT systems can play to mitigate them. We break shelter provision into four fundamental processes: land procurement, design, construction, and maintenance, and we sketch four research themes to address them. Through specific project examples, we show that the abundant present is the time to use ICT systems to investigate, collect, analyze, develop, test, and preserve a variety of tools, techniques, knowledge bits, construction kits, and algorithms that will guide us in the future to produce shelters with limited design, computing, and construction resources.", "num_citations": "7\n", "authors": ["1786"]}
{"title": "On the Use of Model Checking in Verification of Evolving Agile Software Frameworks: An Exploratory Case Study.\n", "abstract": " Evolution is a basic fact of software life. Domain-specific agile software frameworks are key to modern enterprise information systems (EIS). We propose a model checking approach to formal verification of agile frameworks that evolve continuously. The results obtained can be used to justify the maintenance activities in software evolution and identify important but implicit assumptions about the application domain of the framework. An industrially relevant exploratory case study is conducted to validate our hypothesis and proactively direct future research.", "num_citations": "7\n", "authors": ["1786"]}
{"title": "Model management and inconsistency in software design\n", "abstract": " The management of inconsistency between multiple viewpoints is a central problem in the design of large software systems. However, many of the formalisms we use in software design cannot handle inconsistent descriptions. This leads to two common reactions: to abandon the formalisms (and use semi-formal or informal design notations) or to repair inconsistent descriptions at all costs, if necessary by discarding problematic information. Both reactions represent a retreat from support for a full range of design activities. Instead, we argue the need for formal reasoning systems that can tolerate inconsistent information. A key observation is that model management is a central activity in software design. Rather than seeking to build a single consistent model, software designers need to reason about the inconsistencies and dependencies between a set of inter-related partial models. We are currently investigating the use of paraconsistent logics to reason with information from inconsistent models.", "num_citations": "7\n", "authors": ["1786"]}
{"title": "Observations on conway\u2019s law in scientific computing\n", "abstract": " We describe the structure of organizations and products of scientific computing projects using Conway\u2019s Law as a lens to guide our observations. Our organizational findings include highly unconventional work structures, loose project membership and roles, low team coordination and awareness, and the dependence on liaisons for geographically distributed development. These characteristics are reflected in the ambiguous goals and requirements, organic growth, and loose boundaries of the resulting products.", "num_citations": "6\n", "authors": ["1786"]}
{"title": "How Theses Get Written: Some Cool Tips\n", "abstract": " The problem (that I tackle)\u201cHowever, specifications often reflect the analyst\u2019s own bias, rather than the inputs of the many different stakeholders\u2026", "num_citations": "6\n", "authors": ["1786"]}
{"title": "CrevNet: Conditionally Reversible Video Prediction\n", "abstract": " Applying resolution-preserving blocks is a common practice to maximize information preservation in video prediction, yet their high memory consumption greatly limits their application scenarios. We propose CrevNet, a Conditionally Reversible Network that uses reversible architectures to build a bijective two-way autoencoder and its complementary recurrent predictor. Our model enjoys the theoretically guaranteed property of no information loss during the feature extraction, much lower memory consumption and computational efficiency.", "num_citations": "5\n", "authors": ["1786"]}
{"title": "Investigating the functional implications of reinforcing feedback loops in transcriptional regulatory networks\n", "abstract": " Transcription factors (TFs) and microRNAs (miRNAs) can jointly regulate transcriptional networks in the form of recurrent circuits or motifs. A motif can be divided into a feedforward loop (FFL) and a feedback loop (FBL). Incoherent FFLs have been the recent focus due to their potential to dampen gene expression noise in maintaining physiological norms. However, a cell is not only able to manage noise but also able to exploit it during development or tumorigenesis to initiate radical transformation such as cell differentiation or metastasis. A plausible mechanism may involve reinforcing FBLs (rFBLs), which amplify changes to a sufficient level in order to complete the state transition. To study the behaviour of rFBLs, we developed a novel theoretical framework based on biochemical kinetics. The proposed rFBL follows a parsimonious design, involving two TFs and two miRNAs. A simulation study based on our model\u00a0\u2026", "num_citations": "5\n", "authors": ["1786"]}
{"title": "On the countably many misconceptions about# hashtables\n", "abstract": " From an ongoing research project on teaching hash tables using worked examples, we present four preliminary observations. First, that rather than there being a small set of common misconceptions, student misconceptions are diverse and often unique to the student. Second, that students' naive language about hash tables when given a pretest is influenced by words from the Internet (eg\" hashtag\"). Third, we observed that students' language on concept questions evolves with repeated testing, becoming more conceptually accurate but technically less precise. And finally, that students' code code correctness is not correlated to code style, but is correlated to how students performed on the concept questions.", "num_citations": "5\n", "authors": ["1786"]}
{"title": "Software quality in climate modelling\n", "abstract": " This study explores the software quality of climate models. Our ultimate goal is to answer the question, how can software researchers1 be of benefit to climate modelers and other computational scientists? Our immediate goal is to explore the measurement of software quality in the climate modelling domain.Notice that our ultimate goal is not to help improve software quality, though we would be pleased if this was an outcome. The stance throughout this work is deliberately exploratory. As we will describe in the following section, there is a chasm between software research and the activities and needs of computational scientists, a group to which climate modellers belong. Software quality in this domain is new territory for our discipline and so we ought to proceed first by exploration and observation, and later offer help once we have a better understanding. It may very well be (and, in fact, we already have some evidence to support the fact) that the scientists we are investigating do not need the sort of help we offer to our more familiar research domains of commercial and industrial software.", "num_citations": "5\n", "authors": ["1786"]}
{"title": "Capturing and modeling human cognition for context-aware software\n", "abstract": " Lin Mei (lmei@ cs. toronto. edu) Steve Easterbrook (sme@ cs. toronto. edu) Department of Computer Science, University of Toronto Toronto, M5S 2E4 CANADA", "num_citations": "5\n", "authors": ["1786"]}
{"title": "Discovering the shared understanding dynamics of large software teams\n", "abstract": " Reaching project goals demands from team members the creation and communication of detailed and vastly heterogeneous project information. Although no team member needs to know every piece of project information, each of them depends extensively on knowledge generated by other parties. Their aggregated information-seeking and information-sharing activities form a web of interactions that develops the team's shared understanding of their project.", "num_citations": "5\n", "authors": ["1786"]}
{"title": "Case studies for software engineers\n", "abstract": " The topic of this full-day tutorial was the correct use and interpretation of case studies as an empirical research method. Using an equal blend of lecture and discussion, it gave attendees a foundation for conducting, reviewing, and reading case studies. There were lessons for software engineers as researchers who conduct and report case studies, reviewers who evaluate papers, and practitioners who are attempting to apply results from papers. The main resource for the course was the book Case Study Research: Design and Methods by Robert K. Yin. This text was supplemented with positive and negative examples from the literature.", "num_citations": "5\n", "authors": ["1786"]}
{"title": "An introduction to formal modelling in requirements engineering\n", "abstract": " 1 An Introduction to Formal Modeling in Requirements Engineering Page 1 1 1 University of Toronto Department of Computer Science \u00a9 2001, Steve Easterbrook An Introduction to Formal Modeling in Requirements Engineering Prof Steve Easterbrook Dept of Computer Science, University of Toronto, Canada sme@cs.toronto.edu http://www.cs.toronto.edu/~sme 2 University of Toronto Department of Computer Science \u00a9 2000-2002, Steve Easterbrook Outline \u279c Why do we need Formal Methods in RE? \u279c What do formal methods have to offer? \u279c A survey of existing techniques \u279c Example modeling language: SCR \u0192 The language \u0192 Case study \u0192 Advantages and disadvantages \u279c Example analysis technique: Model Checking \u0192 How it works \u0192 Case Study \u0192 Advantages and disadvantages \u279c Where next? you are here! 3 University of Toronto Department of Computer Science \u00a9 2000-2002, Steve Easterbrook What are \u2026", "num_citations": "5\n", "authors": ["1786"]}
{"title": "Preparing Students for Software Engineering\n", "abstract": " This position paper describes our work with a new course at Sussex University, designed to bridge the gap between computer science and software engineering. We argue that the way in which software engineering is introduced in most computer science degrees makes it hard for students to internalise the lessons of good engineering practice. In particular, programming is seen to be divorced from software engineering. We describe a new course taught to rst year undergraduates, once they have learned to program. The course exposes students to the di culties of large scale software development, including integrating and modifying other people's code. The course uses a trading game in which student buy and sell software modules, making their own evaluations of cost and quality. An important innovation is to force the students to be explicit about lessons learned, as an introduction to process improvement. Early results are promising: the rst cohort of students are signi cantly more motivated in their subsequent software engineering course.", "num_citations": "5\n", "authors": ["1786"]}
{"title": "Scr as an iv&v tool\n", "abstract": " This paper describes some preliminary work on the use of SCR-style specification as a tool for Independent Verification and Validation IV&V. Our intention is to use formal methods not as a part of the development process itself, but as ashadow'activity, performed by an independent team of experts. Our long-term expectation is that this approach will turn out to be a less painful way of introducing formal methods into well-established, large-scale software development processes. However, there are a number of problems that need to be solved before SCR-style methods can be used in this way. The most important of these is the need to model the relationship between informal and formal specifications. The context for this work is the development of software for the International Space Station ISS project. Boeing Space and Defense Group Houston Prime is responsible for supervising the overall development and integration of International Space Station software. There are three Product Groups PGs, McDonnell Douglas Aerospace, Rockwell Aerospace-Rocketdyne and Boeing Space and Defense Group Huntsville, who are developing several key Computer Software Configuration Items CSCIs, which Prime is responsible for integrating. There are also several International Partners IPs including Russia, Japan, Canada, and the European Space Agency, who are developing software that will need to be incorporated into ISS. With over 45 flight computers and an estimated 1.1 million source lines of flight code, the potential problems are considerable. Software IV&V is currently being performed by Intermetrics, under an interim contract. The\u00a0\u2026", "num_citations": "5\n", "authors": ["1786"]}
{"title": "Application of deep learning to estimate atmospheric gravity wave parameters in reanalysis data sets\n", "abstract": " Gravity waves play an essential role in driving and maintaining global circulation. To understand their contribution in the atmosphere, the accurate reproduction of their distribution is important. Thus, a deep learning approach for the estimation of gravity wave momentum fluxes was proposed, and its performance at 100\u00a0hPa was tested using data from low\u2010resolution zonal and meridional winds, temperature, and specific humidity at 300, 700, and 850\u00a0hPa in the Hokkaido region (Japan). To this end, a deep convolutional neural network was trained on 29\u2010year reanalysis data sets (JRA\u201055 and DSJRA\u201055), and the final 5\u2010year data were reserved for evaluation. The results showed that the fine\u2010scale momentum flux distribution of the gravity waves could be estimated at a reasonable computational cost. Particularly, in winter, when gravity waves are stronger, the median root means square errors (RMSEs) of the\u00a0\u2026", "num_citations": "4\n", "authors": ["1786"]}
{"title": "Inflo: collaborative reasoning via open calculation graphs\n", "abstract": " Inflo is a web tool that introduces new ways to collaboratively construct and deconstruct logical arguments drawn as visual dataflow graphs. Inflo graphs are dynamic: nodes are logical propositions that can contain computations based on other nodes. Inflo nodes and graphs have URLs, permitting sharing via blogs, e-mails, papers, etc. People can collaboratively construct, refine, and adapt/reuse arguments by making changes to shared nodes. Combining community-curated nodes and using Inflo's nodes for computation, back-of-the-envelope calculations can rapidly be made.", "num_citations": "4\n", "authors": ["1786"]}
{"title": "Exploiting COTS-based RE methods: an experience report\n", "abstract": " This paper reports on an exploratory study of a key hypothesis of enterprise resource planning (ERP) requirements engineering (RE) adoption, namely that framing applications to the packaged RE model leads to integral practices and economic development. We analyzed two interrelated pilot projects developed for a business division of a large IT company, using Oracle\u2019s commercial off-the-shelf (COTS) application implementation method (AIM). The study showed that AIM RE improved team collaboration and project management experience, but needed to make hidden assumptions explicit to support data visibility and integrity. Our study can help practitioners generate more effective and mature processes when exploiting COTS-based RE methods.", "num_citations": "4\n", "authors": ["1786"]}
{"title": "Experience in using business scenarios to assess COTS components in integrated solutions\n", "abstract": " Constructing software by integrating commercial off-the-shelf (COTS) components is widely practised, particularly in the IT service industry. For vendors of COTS components, requirements engineering is particularly challenging. To continually improve their products, vendors must identify and analyze problems that occur when their components are used in a wide variety of integrated solutions, and they must anticipate new applications in which their components could be used. In this paper, we describe a scenario-based framework developed at the Software Group division of IBM Corporation (IBM SWG) The framework mimics the solution integration process for new business opportunities, allowing the development teams to evaluate their components, discover and resolve integration issues, and to surface new requirements for future releases. This paper describes the framework, gives an example of its use in a business scenario, discusses the experience of using this framework at IBM SWG, and relates the lessons learned.", "num_citations": "4\n", "authors": ["1786"]}
{"title": "An introduction to Category Theory for Software Engineers\n", "abstract": " ASE98 minitutorial-2002 Page 1 1 University of Toronto Department of Computer Science \u00a9 Steve Easterbrook, 1999 An introduction to Category Theory for Software Engineers* Dr Steve Easterbrook Associate Professor, Dept of Computer Science, University of Toronto sme@cs.toronto.edu *slides available at http://www.cs.toronto.edu/~sme/presentations/cat101.pdf Page 2 2 University of Toronto Department of Computer Science \u00a9 Steve Easterbrook, 1999 Key Questions for this tutorial \u2022 What is Category Theory? \u2022 Why should we be interested in Category Theory? \u2022 How much Category Theory is it useful to know? \u2022 What kinds of things can you do with Category Theory in Software Engineering? \u2022 (for the ASE audience) Does Category Theory help us to automate things? Page 3 3 University of Toronto Department of Computer Science \u00a9 Steve Easterbrook, 1999 \u2022 An explanation of \u201cColimits\u201d \u2022 My frustration: \u2192 \u2026", "num_citations": "4\n", "authors": ["1786"]}
{"title": "Mind the gap: bridging the sustainable software systems research divide\n", "abstract": " Sustainability is a major concern to humanity as a result of the consequences of the rapid consumption of the planets finite natural resources, combined with exponential economic and population growth. Principally associated with the field of ecology, sustainability has emerged as an important area of research in a number of sub-fields within the domain of computing including human-computer interaction. While these communities have attempted to address the challenges of sustainability from their different perspectives, there is a severe lack of common understanding of the fundamental concepts of sustainability and how they relate to software systems. As a result, there is a need for a common ground and consistent terminology to reduce the replication of effort. This paper presents the Karlskrona Manifesto for Sustainabilty Design as a mechanism for initiating a conversation between the different communities in addressing the challenges of developing sustainable software systems.", "num_citations": "3\n", "authors": ["1786"]}
{"title": "Do Over or Make Do? Climate Models as a Software Development Challenge\n", "abstract": " We present the results of a comparative study of the software engineering culture and practices at four different earth system modeling centers: the UK Met Office Hadley Centre, the National Center for Atmospheric Research (NCAR), The Max-Planck-Institut f\u00fcr Meteorologie (MPI-M), and the Institut Pierre Simon Laplace (IPSL). The study investigated the software tools and techniques used at each center to assess their effectiveness. We also investigated how differences in the organizational structures, collaborative relationships, and technical infrastructures constrain the software development and affect software quality. Specific questions for the study included 1) Verification and Validation-What techniques are used to ensure that the code matches the scientists\u2019 understanding of what it should do? How effective are these are at eliminating errors of correctness and errors of understanding? 2) Coordination-How\u00a0\u2026", "num_citations": "3\n", "authors": ["1786"]}
{"title": "Non-uniform spatial downscaling of climate variables\n", "abstract": " The goal of this study is to present a scalable and robust approach to spatial downscaling of climate variables. We explore the ability of artificial neural networks (ANN) to downscale a climate variable to a given location of interest. We illustrate our proposed method in a downscaling application of monthly mean air temperature and precipitations at twelve stations located across the topographically complex province of British Columbia, Canada. Our method generalizes well to different locations and leads to high downscaling accuracy. The performance of the models is measured based on four statistical metrics, including the coefficient of determination, and the root mean square error.", "num_citations": "2\n", "authors": ["1786"]}
{"title": "Homeowners as Engaged Participants: Determining information needs to maximize the environmental benefit of green renovations\n", "abstract": " Green home renovation is a socio-technical process involving homeowners and professionals. Homeowners undertaking a green renovation encounter unfamiliar terms and must navigate potentially conflicting information from different sources. These challenges prevent some homeowners from being fully engaged in the renovation process, which can lead to less than optimal homeowner satisfaction and failure to use green features to their greatest extent. This paper details the information requirements of homeowners, drawing on seven interviews that were conducted with those who have done a green home renovation. We put forward suggestions that can be used to improve the green home design process, contributing to higher uptake, more satisfied homeowners, and more environmentally friendly use of renovated homes. We also conclude that there is a need for homeowners to be contributors to the\u00a0\u2026", "num_citations": "2\n", "authors": ["1786"]}
{"title": "Modelling the climate system: Is model-based science like model-based engineering?(Keynote)\n", "abstract": " Modern computational science is largely a model-building activity. At first sight, the models that scientists construct seem to differ radically from those used in model-based engineering. Scientists tend to build indicative (\u2018how things are\u2019) models of the world using sets of continuous equations, while engineers tend to build optative (\u2018how things should be\u2019) models of the world using structural and procedural abstractions. But a closer look reveals many fascinating similarities. In this talk, I will explore the relationship between the two types of modelling, drawing on my field studies of how climate modellers work. I'll begin with an overview of what a climate model is and how it is used. I'll then dive deeper into the engineering challenges of constructing a climate model, including the challenges of coupling disparate model components, dealing with model versioning and model management issues, and the role that climate\u00a0\u2026", "num_citations": "2\n", "authors": ["1786"]}
{"title": "Code Design and Quality Control\n", "abstract": " ESM codes have mostly been written directly by scientists, as experts in the various geoscientific domains relevant for these model. This contrasts with commercial forms of software development, where there is usually a clear division of labour between systems analysts, who determine what the system should do, and programmers, who are responsible for writing the code.", "num_citations": "2\n", "authors": ["1786"]}
{"title": "The software architecture of global climate models\n", "abstract": " It has become common to compare and contrast the output of multiple global climate models (GCMs), such as in the Climate Model Intercomparison Project Phase 5 (CMIP5). However, intercomparisons of the software architecture of GCMs are almost nonexistent. In this qualitative study of seven GCMs from Canada, the United States, and Europe, we attempt to fill this gap in research. We describe the various representations of the climate system as computer programs, and account for architectural differences between models. Most GCMs now practice component-based software engineering, where Earth system components (such as the atmosphere or land surface) are present as highly encapsulated sub-models. This architecture facilitates a mix-and-match approach to climate modelling that allows for convenient sharing of model components between institutions, but it also leads to difficulty when choosing\u00a0\u2026", "num_citations": "2\n", "authors": ["1786"]}
{"title": "A first look at end-user visual computation supporting sharing & reuse with Inflo\n", "abstract": " Inflo is a web-based tool designed to support quantitative decision-making problems such as carbon calculators. Using the dataflow programming paradigm, Inflo provides an extensible environment for end-user programming. Inflo is built around the idea of collaboration and openness for opportunistic code-reuse and unplanned code sharing.", "num_citations": "2\n", "authors": ["1786"]}
{"title": "First international workshop on software research and climate change\n", "abstract": " This workshop will explore the contributions that software research can make to the challenge of climate change. Software is a critical enabling technology in nearly all aspects of climate change, from the computational models used by climate scientists to improve our understanding of the impact of human activities on earth systems, through to the information and control systems needed to build an effective carbon-neutral society. The intent of the workshop is to explore how software research can contribute to this challenge, to build a community of researchers interested in responding to the challenge, and to map out a research agenda.", "num_citations": "2\n", "authors": ["1786"]}
{"title": "Integrating schema integration frameworks, algebraically\n", "abstract": " The paper presents a framework, in which the main concepts of schema and data integration can be specified both semantically and syntactically in an abstract data-model independent way. We first define what are schema matching and integration semantically, in terms of sets of instances and mappings between them. We also define a schema matching and integration syntactically, and introduce a procedure (the how) for computing the integration of matched schema according to the syntactical definition in fairly abstract terms. The main theorem of the paper states that the result of syntactical integration satisfies the semantic definition and, hence, does produce what we really need. We show how this framework unifies the approach taken in at least five other schema integration proposals and fills in some important gaps in these proposals. Viewed in a broader perspective, the framework developed in the paper integrates the syntactical and semantical sides of model management and, particularly, reveals a re-", "num_citations": "2\n", "authors": ["1786"]}
{"title": "What is Software Engineering\n", "abstract": " Requirements Engineering Acknowledgments What is Software Engineering ??? Page 1 1 \u00a9 2006-07 Betty HC Cheng. This presentation is available free for non-commercial use with attribution under a creative commons license. Requirements Engineering CSE491-602 (Fall 2006) Instructor: Dr. B. Cheng \u00a9 2006-07 Betty HC Cheng. This presentation is available free for non-commercial use with attribution under a creative commons license. Acknowledgments \u270d Waterloo Software Engineering Team (Atlee, Berry, Day, Svetinovic, Godfrey \u270d Steve Easterbrook \u270d Tony Torre, Detroit Diesel Corp. \u00a9 2006-07 Betty HC Cheng. This presentation is available free for non-commercial use with attribution under a creative commons license. What is Software Engineering ??? \u270d The study of systematic and effective processes and technologies for supporting software development and maintenance activities \u270d Improve quality \u270d \u2026", "num_citations": "2\n", "authors": ["1786"]}
{"title": "CSC340F\u2013Requirements Engineering\n", "abstract": " \uf0c4 If it doesn\u2019t work well then either:\uf0d8\u2026 the designer didn\u2019t have an adequate understanding of the purpose\uf0d8\u2026 or we are using the software for a purpose different from the intended one\uf0c4 Requirements analysis is about identifying this purpose\uf0c4 Inadequate understanding of the purpose leads to poor quality software", "num_citations": "2\n", "authors": ["1786"]}
{"title": "Bugs in the space program\n", "abstract": " Bugs in the Space Program: Page 1 \u00a9 Steve Easterbrook, 2005 1 University of Toronto Department of Computer Science Bugs in the Space Program: The Role of Software in Systems Failure Prof. Steve Easterbrook Dept of Computer Science, University of Toronto http://www.cs.toronto.edu/~sme 2 University of Toronto Department of Computer Science \u00a9 Steve Easterbrook, 2005 Key ideas Complex systems rely more and more on software as the \u201cglue\u201d \u279c Is software just like any other component? \u279c Are there additional risks when we choose to allocate system functions to software? \u279c Are systems engineering and software engineering similar disciplines? Page 2 3 University of Toronto Department of Computer Science \u00a9 Steve Easterbrook, 2005 software Monitored Variables Environment System input data data output Controlled Variables How Software Engineers see the world Environment Input devices Output \u2026", "num_citations": "2\n", "authors": ["1786"]}
{"title": "Verification and Validation in a Rapid Software Development Process\n", "abstract": " The high cost of software production is driving development organizations to adopt more automated design and analysis methods such as rapid prototyping, computer-aided software engineering (CASE) tools, and high-level code generators. Even developers of safety-critical software systems have adopted many of these new methods while striving to achieve high levels of quality and reliability. While these new methods may enhance productivity and quality in many cases, we examine some of the risks involved in the use of new methods in safety-critical contexts. We examine a case study involving the use of a CASE tool that automatically generates code from high-level system designs. We show that while high-level testing on the system structure is highly desirable, significant risks exist in the automatically generated code and in revalidating releases of the generated code after subsequent design changes. We identify these risks and suggest process improvements that retain the advantages of rapid, automated development methods within the quality and reliability contexts of safety-critical projects.", "num_citations": "2\n", "authors": ["1786"]}
{"title": "A constraint-based decision support system for capacity planning in interdependent evolving urban systems\n", "abstract": " As urbanization continues at a rapid pace, there is a corresponding need for tools that can aid urban planners in predicting impacts on municipal infrastructure. One of the most salient issues arising from urbanization is the strain that population growth places upon existing infrastructure systems. 1 Since planning decisions\u2013including zoning\u2013can alter land use patterns, they have a direct impact on legacy infrastructure. For example, densification imposes additional demands that can propagate through infrastructure systems in myriad ways. At present, urban planners and other stakeholders have limited means of estimating the impact of planning decisions on the ability of infrastructure systems to reliably deliver resources.This paper describes a simple decision support system (DSS) 2 intended to aid urban planners in visualizing the impacts of planning interventions on urban infrastructure systems. It demonstrates a means by which urban planners can visualize the impact of zoning decisions or analyze the effects of growth. The software provides users with a district-level model in which each infrastructure system is represented as a network that delivers resources to buildings. Interdependencies between individual infrastructure systems allow demands from one system to propagate to another, providing the user with the ability to visualize changes across the entire set of infrastructures.", "num_citations": "1\n", "authors": ["1786"]}
{"title": "Recovering the parameters underlying the Lorenz-96 chaotic dynamics\n", "abstract": " Climate projections suffer from uncertain equilibrium climate sensitivity. The reason behind this uncertainty is the resolution of global climate models, which is too coarse to resolve key processes such as clouds and convection. These processes are approximated using heuristics in a process called parameterization. The selection of these parameters can be subjective, leading to significant uncertainties in the way clouds are represented in global climate models. Here, we explore three deep network algorithms to infer these parameters in an objective and data-driven way. We compare the performance of a fully-connected network, a one-dimensional and, a two-dimensional convolutional networks to recover the underlying parameters of the Lorenz-96 model, a non-linear dynamical system that has similar behavior to the climate system.", "num_citations": "1\n", "authors": ["1786"]}
{"title": "Correcting Historical Errors: An investigation of systematic errors in Arrhenius's 1896 climate model\n", "abstract": " Svante Arrhenius's two-dimensional energy balance model is widely recognized as the first ever climate model, and is lauded in histories of climate science for producing values of climate sensitivity remarkably close to the current IPCC uncertainty range. However, in his 2009 thesis, Dufresne showed that the warming signal in Arrhenius's model is entirely due to a systematic error in the radiation data used by Arrhenius for his model, and that with modern radiation transmittance data, the model would show virtually no warming under doubling of CO2. Dufresne hypothesized that the errors in the radiation data are almost entirely balanced by the fact that Arrhenius used a single layer version of his model for his main results-a simplification he made due to computational limits. We have completed a detailed re-implementation of Arrhenius's model to explore these errors in more detail. By switching between Arrhenius's\u00a0\u2026", "num_citations": "1\n", "authors": ["1786"]}
{"title": "On the software quality of climate models\n", "abstract": " A climate model is an executable theory of the climate; the model encapsulates climatological theories in software so that they can be simulated and their implications investigated directly. Thus, in order to trust a climate model one must trust that the software it is built from is robust. Our study explores the nature of software quality in the context of climate modelling: How do we characterise and assess the quality of climate modelling software? We use two major research strategies:(1) analysis of defect densities of leading global climate models and (2) semi-structured interviews with researchers from several climate modelling centres. Defect density analysis is an established software engineering technique for studying software quality. We collected our defect data from bug tracking systems, version control repository comments, and from static analysis of the source code. As a result of our analysis, we characterise\u00a0\u2026", "num_citations": "1\n", "authors": ["1786"]}
{"title": "Fostering Team Awareness in Earth System Modeling Communities\n", "abstract": " Existing Global Climate Models are typically managed and controlled at a single site, with varied levels of participation by scientists outside the core lab. As these models evolve to encompass a wider set of earth systems, this central control of the modeling effort becomes a bottleneck. But such models cannot evolve to become fully distributed open source projects unless they address the imbalance in the availability of communication channels: scientists at the core site have access to regular face-to-face communication with one another, while those at remote sites have access to only a subset of these conversations-eg formally scheduled teleconferences and user meetings. Because of this imbalance, critical decision making can be hidden from many participants, their code contributions can interact in unanticipated ways, and the community loses awareness of who knows what. We have documented some of\u00a0\u2026", "num_citations": "1\n", "authors": ["1786"]}
{"title": "Software research and climate change\n", "abstract": " This workshop explored the contributions that software research can make to the challenge of climate change. Climate change is likely to be the defining issue of the 21st Century. Recent studies indicate that climate change is accelerating, confirming the most pessimistic of scenarios identified by climate scientists. Our past use of fossil fuels commit the world to around 2 C average temperature rise since the preindustrial era, and, unless urgent and drastic cuts are made, further heating is likely to trigger any of a number of climate change tipping points. The results will be a dramatic reduction of food production and water supplies, more extreme weather events, the spread of disease, sea level rise, ocean acidification and mass extinctions. We are faced with the twin challenges of mitigation (avoiding the worst climate change effects by rapidly transitioning the world to a low-carbon economy) and adaptation (re\u00a0\u2026", "num_citations": "1\n", "authors": ["1786"]}
{"title": "The role of visualization in the naturalization of remote software immigrants\n", "abstract": " Software development is commonly becoming a globally distributed task, often due to mergers and acquisitions, globalization, cross-divisional efforts, outsourcing, or even telecommuting. Individuals -and entire teams- are suddenly faced with new challenges when they must move from the traditional synchronous co-located paradigm to the newer asynchronous distributed paradigm. While previous work has examined collocated software immigrants, we investigate remote immigrants who may be working synchronously or asynchronously, and report on the naturalization process. Specifically, we focus on the role of visualization in helping with this process. The case study presented is exploratory in nature with data collected via pilot interviews. We found a number of issues impeding normal workflow, as perceived by participants who recently became remote software immigrants, and we discuss how visualization tools were developed to help them to understand the process.", "num_citations": "1\n", "authors": ["1786"]}
{"title": "Csc2106s: Requirements engineering\n", "abstract": " 1. Examine the state-of-the-art for research & practice in Requirements Engineering.\u2022 Role of RE in software and systems engineering\u2022 Current techniques, notations, methods, processes and tools used in RE 2. Gain practical experience in selected RE techniques 3. Understand the essential nature of RE\u2022 Breadth of skills needed for RE, and the many disciplines on which it draws\u2022 Contextual factors & practicalities that affect the success of various approaches to RE 4. Gain a basic grounding for research in RE\u2022 Methodological issues for RE research\u2022 Current research issues and the direction of the field\u2022 Awareness of the literature", "num_citations": "1\n", "authors": ["1786"]}
{"title": "CSC444F Software Engineering I\n", "abstract": " The first practicals will be held in the week of September 10th. The first practical will be used to form teams, and find out a little about the course projects. If you miss the first practical, make sure that by the end of the week you have found out which practical section you should be in.", "num_citations": "1\n", "authors": ["1786"]}