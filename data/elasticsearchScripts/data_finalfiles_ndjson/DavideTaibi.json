{"title": "OpenBQR: a framework for the assessment of OSS\n", "abstract": " People and organizations that are considering the adoption of OSS, or that need to choose among different OS products face the problem of evaluating OSS in a systematic, sound and complete way. While several proposals concerning the evaluation of costs and benefits exist, little attention has been given to the evaluation of technical qualities and, in general, to the \u201cusage-oriented\u201d issues. In this paper the existing proposals are examined, the different types of qualities and issues that are relevant to potential users are described, and a coherent and innovative method for the evaluation of OSS is proposed. The proposed method is expected to support the potential user in the evaluation and choice of OSS in a flexible way, taking into account all the aspects that are relevant to the user.", "num_citations": "76\n", "authors": ["1316"]}
{"title": "A survey on open source software trustworthiness\n", "abstract": " Trustworthiness is a crucial characteristic when it comes to evaluating any product, even more so for open source software, which is now becoming widely used. The authors conducted a survey to identify the reasons and motivations that lead software companies to adopt or reject open source software; they then ranked, according to importance, the specific trust factors used when selecting an open source software component or product. The motivations and importance ranking of factors might be useful for both developers of open source software (to make their products and components more useful for other stakeholders) and to future prospective open source software users.", "num_citations": "60\n", "authors": ["1316"]}
{"title": "Quality of open source software: the QualiPSo Trustworthiness Model\n", "abstract": " Trustworthiness is one of the main issues upon which the decision whether to adopt an Open-Source Software (OSS) product is based. The work described here is part of an activity that has the goals of 1) defining an adequate notion of trustworthiness of software products and artifacts and 2) identifying a number of factors that influence it. Specifically, this paper reports about the identification of the \u201cdimensions\u201d of trustworthiness, i.e., of the high-level qualities that software products and artefacts have to posses in order to be considered trustworthy. These dimensions are described by means of a conceptual model of trustworthiness, which comprises the representation of the factors that affect the user\u2019s perception of trustworthiness, as well as the objective characteristics of the products that contribute to \u201cbuild\u201d trustworthi-ness. The aforementioned model is equipped with a measurement plan that de-scribes\u00a0\u2026", "num_citations": "50\n", "authors": ["1316"]}
{"title": "Microservices In Agile Software Development: A Workshop-Based Study Into Issues Advantages And Disadvantages\n", "abstract": " In the last years, cloud-native architectures have emerged as a target platform for the deployment of microservice architectures. The migration of existing monoliths into cloud-native applications is still in the early phase, and only few companies already started their migrations. Therefore, success and failure stories about different approaches are not available in the literature. This context connects also to the recently discussed DevOps context where development and continuous deployment are closely linked.", "num_citations": "41\n", "authors": ["1316"]}
{"title": "Architectural smells detected by tools: a catalogue proposal\n", "abstract": " Architectural smells can negatively impact on different software qualities and can represent a relevant source of architectural debt. Several architectural smells have been defined by different researchers. Moreover, both academia and industry proposed several tools for software quality analysis, but it is not always clear to understand which tools provide also support for architectural smells detection and if the tools developed for this specific purpose are effectively available or not. In this paper we propose a catalogue of architectural smells for which, at least one tool able to detect the smell exists. We outline the main differences in the detection techniques exploited by the tools and we propose a classification of these architectural smells according to the violation of three design principles.", "num_citations": "40\n", "authors": ["1316"]}
{"title": "From Monolithic Systems to Microservices: A Decomposition Framework based on Process Mining\n", "abstract": " Decomposition is one of the most complex tasks during the migration from monolithic systems to microservices, generally performed manually, based on the experience of the software architects. In this work, we propose a 6-step framework to reduce the subjectivity of the decomposition process. The framework provides software architects with a set of decomposition options, together with a set of measures to evaluate and compare their quality. The decomposition options are identified based on the independent execution traces of the system by means of the application of a process-mining tool to the log traces collected at runtime. We validated the process, in an industrial project, by comparing the proposed decomposition options with the one proposed by the software architect that manually analyzed the system. The application of our framework allowed the company to identify issues in their software that the architect did not spot manually, and to discover more suitable decomposition options that the architect did not consider. The framework could be very useful also in other companies to improve the quality of the decomposition of any monolithic system, identifying different decomposition strategies and reducing the subjectivity of the decomposition process. Moreover, researchers could extend our approach increasing the support and further automating the decomposition support.", "num_citations": "37\n", "authors": ["1316"]}
{"title": "On the definition of dynamic software measures\n", "abstract": " The quantification of several software attributes (eg, size, complexity, cohesion, coupling) is usually carried out in a static fashion, and several hundreds of measures have been defined to this end. However, static measurement may only be an approximation for the measurement of these attributes during software use. The paper proposes a theoretical framework based on Axiomatic Approaches for the definition of sensible dynamic software measures that can dynamically capture these attributes. Dynamic measures based on this framework are defined for dynamically quantifying size and coupling. In this paper, we also compare dynamic measures of size and coupling against well-known static measures by correlating them with fault-pronenesses of four case studies.", "num_citations": "35\n", "authors": ["1316"]}
{"title": "On the Diffuseness of Code Technical Debt in Java Projects of the Apache Ecosystem\n", "abstract": " Background. Companies commonly invest major effort into removing, respectively not introducing, technical debt issues detected by static analysis tools such as SonarQube, Cast, or Coverity. These tools classify technical debt issues into categories according to severity, and developers commonly pay attention to not introducing issues with a high level of severity that could generate bugs or make software maintenance more difficult. Objective. In this work, we aim to understand the diffuseness of Technical Debt (TD) issues and the speed with which developers remove them from the code if they introduced such an issue. The goal is to understand which type of TD is more diffused and how much attention is paid by the developers, as well as to investigate whether TD issues with a higher level of severity are resolved faster than those with a lower level of severity. We conducted a case study across 78K commits of 33\u00a0\u2026", "num_citations": "33\n", "authors": ["1316"]}
{"title": "Applying SCRUM in an OSS development process: an empirical evaluation\n", "abstract": " Open Source Software development often resembles Agile models. In this paper, we report about our experience in using SCRUM for the development of an Open Source Software Java tool. With this work, we aim at answering the following research questions: 1) is it possible to switch successfully to the SCRUM methodology in an ongoing Open Source Software development process? 2) is it possible to apply SCRUM when the developers are geographically distributed? 3) does SCRUM help improve the quality of the product and the productivity of the process? We answer to these questions by identifying a set of measures and by comparing the data we collected before and after the introduction of SCRUM. The results seem to show that SCRUM can be introduced and used in an ongoing geographically distributed Open Source Software process and that it helps control the development process better.", "num_citations": "32\n", "authors": ["1316"]}
{"title": "Predicting OSS trustworthiness on the basis of elementary code assessment\n", "abstract": " Background. Open Source Software (OSS) provides increasingly serious and viable alternatives to traditional closed source software. The number of OSS users is continuously growing, as is the number of potential users that are interested in evaluating the quality of OSS. The latter would greatly benefit from simple methods for evaluating the trustworthiness of OSS.Objective. This paper aims at finding a quantitative relationship between the perceived quality of OSS and a few simple objective measures.Method. the users' and developers' evaluations of trustworthiness and reliability of OSS products were collected and correlated to static code measures, called\" Elementary Code Assessment\" rules, which check very simple rules that well-written code should satisfy.Results. The result of the analysis is a set of quantitative models that link static measures of the source code to perceivable qualities of OSS. These\u00a0\u2026", "num_citations": "29\n", "authors": ["1316"]}
{"title": "An investigation of the users\u2019 perception of OSS quality\n", "abstract": " The quality of Open Source Software (OSS) is generally much debated. Some state that it is generally higher than closed-source counterparts, while others are more skeptical. The authors have collected the opinions of the users concerning the quality of 44 OSS products in a systematic manner, so that it is now possible to present the actual opinions of real users about the quality of OSS products. Among the results reported in the paper are: the distribution of trustworthiness of OSS based on our survey; a comparison of the trustworthiness of the surveyed products with respect to both open and closed-source competitors; the identification of the qualities that affect the perception of trustworthiness, based on rigorous statistical analysis.", "num_citations": "29\n", "authors": ["1316"]}
{"title": "Serverless Edge Computing: Vision and Challenges\n", "abstract": " Born from a need for a pure \u201cpay-per-use\u201d model and highly scalable platform, the \u201cServerless\u201d paradigm emerged and has the potential to become a dominant way of building cloud applications. Although it was originally designed for cloud environments, Serverless is finding its position in the Edge Computing landscape, aiming to bring computational resources closer to the data source. That is, Serverless is crossing cloud borders to assess its merits in Edge computing, whose principal partner will be the Internet of Things (IoT) applications. This move sounds promising as Serverless brings particular benefits such as eliminating always-on services causing high electricity usage, for instance. However, the community is still hesitant to uptake Serverless Edge Computing because of the cloud-driven design of current Serverless platforms, and distinctive characteristics of edge landscape and IoT applications. In this\u00a0\u2026", "num_citations": "28\n", "authors": ["1316"]}
{"title": "The QualiSPo approach to OSS product quality evaluation\n", "abstract": " The quality of Open Source Software (OSS) is generally much debated. Some state that it is generally higher than closed-source counterparts, while others are more skeptical. In the QualiSPo project the authors addressed the problem of evaluating OSS products in a manner that is both as complete as possible and objective. To this end, a toolset and an evaluation framework are needed. The paper describes such toolset and framework, and accounts for the first evaluations that are being obtained.", "num_citations": "27\n", "authors": ["1316"]}
{"title": "Towards certifying the testing process of Open-Source Software: New challenges or old methodologies?\n", "abstract": " To improve both the quality and the trustworthiness perception of Open Source Software (OSS) products, we introduce the new idea of certifying the testing process of an OSS system. While the global certification of an OSS product is an emerging research field, the idea of certifying only its testing process has never been studied, conversely to the case of Closed Source Software (CSS) products. The certification of the testing process has a twofold goal: simplify the process of testing OSS products by guiding developers in identifying the proper testing strategies and the limitations of their existing testing plans; simplify the selection of equivalent OSS and CSS products by evaluating the certificates released by the companies. Specifically, in this paper we discuss 1) a set of issues, inherent to OSS, that must be taken into account when testing the OSS product; 2) a preliminary methodology that suggests how to\u00a0\u2026", "num_citations": "27\n", "authors": ["1316"]}
{"title": "An empirical investigation of perceived reliability of open source java programs\n", "abstract": " Background: Open Source Software (OSS) is used by a continuously growing number of people, both end-users and developers. The quality of OSS is thus an issue of increasing interest. Specifically, OSS stakeholders need to trust OSS with respect to a number of qualities.Objective: This paper focuses on the level of trust that OSS stakeholders have in OSS reliability, one of the most important software qualities. The goal of the work reported here is to investigate to what extent the perception of reliability by users depends on objectively measurable characteristics of software.Method: We collected subjective user evaluations of the reliability of 22 Java OSS products, and then we measured their code characteristics that are generally believed to affect the quality of software. Finally, we carried out a correlational study to predict the perceived level of reliability of OSS based on the measured characteristics of the\u00a0\u2026", "num_citations": "26\n", "authors": ["1316"]}
{"title": "A probability-based approach to modeling the risk of unauthorized propagation of information in on-line social networks\n", "abstract": " The unauthorized propagation of information is an important problem in the Internet, especially because of the increasing popularity of On-line Social Networks. To address this issue, many access control mechanisms have been proposed so far, but there is still a lack of techniques to evaluate the risk of unauthorized flow of information within social networks. This paper introduces a probability-based approach to modeling the likelihood that information propagates from one social network user to users who are not authorized to access it. The approach is demonstrated via an example, to show how it can be applied in practical cases.", "num_citations": "21\n", "authors": ["1316"]}
{"title": "Serverless: What it Is, What to Do and What Not to Do\n", "abstract": " Serverless, the new buzzword, has been gaining a lot of attention from the developers and industry. Cloud vendors such as AWS and Microsoft have hyped the architecture almost everywhere, from practitioners' conferences to local events, to blog posts. In this work, we introduce serverless functions (also known as Function-as-a-Service or FaaS), together with on bad practices experienced by practitioners, members of the Tampere Serverless Meetup group.", "num_citations": "19\n", "authors": ["1316"]}
{"title": "A curated dataset of microservices-based systems\n", "abstract": " Microservices based architectures are based on a set of modular, independent and fault-tolerant services. In recent years, the software engineering community presented studies investigating potential, recurrent, effective architectural patterns in microservices-based architectures, as they are very essential to maintain and scale microservice-based systems. Indeed, the organizational structure of such systems should be reflected in so-called microservice architecture patterns, that best fit the projects and development teams needs. However, there is a lack of public repositories sharing open sources projects microservices patterns and practices, which could be beneficial for teaching purposes and future research investigations. This paper tries to fill this gap, by sharing a dataset, having a first curated list microservice-based projects. Specifically, the dataset is composed of 20 open-source projects, all using specific microservice architecture patterns. Moreover, the dataset also reports information about inter-service calls or dependencies of the aforementioned projects. For the analysis, we used two different tools (1) SLOCcount and (2) MicroDepGraph to get different parameters for the microservice dataset. Both the microservice dataset and analysis tool are publicly available online. We believe that this dataset will be highly used by the research community for understanding more about microservices architectural and dependencies patterns, enabling researchers to compare results on common projects.", "num_citations": "19\n", "authors": ["1316"]}
{"title": "Moonlighting Scrum: An agile method for distributed teams with part-time developers working during non-overlapping hours\n", "abstract": " Scrum and several agile development processes are becoming increasingly popular since they offer the ability to manage volatile requirements. This applies to many types of projects and teams. In case of development teams with moonlight developers working for at most ten non-overlapping hours per week, not all Scrum practices can be applied. In this paper, we introduce Moonlighting Scrum, an adaptation of Scrum aimed at optimizing effectiveness and efficiency by minimizing the amount of communication to the least necessary and maximizing the time invested in development. Our aim is to accomplish this by modifying Scrum practices to achieve a trade-off between development and communication effort to produce the best final results, given the available resources and time. An application of Moonlighting Scrum took place in a real cooperative project and provided interesting results.", "num_citations": "19\n", "authors": ["1316"]}
{"title": "Interoperability-related architectural problems and solutions in information systems: A scoping study\n", "abstract": " [Context] With the increasing industrial demands for seamless exchange of data and services among information systems, architectural solutions are a promising research direction which supports high levels of interoperability at early development stages. [Objectives] This research aims at identifying the architectural problems and before-release solutions of interoperability on its different levels in information systems, and exploring the interoperability metrics and research methods used to evaluate identified solutions. [Methods] We performed a scoping study in five digital libraries and descriptively analyzed the results of the selected studies. [Results] From the 22 studies included, we extracted a number of architectural interoperability problems on the technical, syntactical, semantic, and pragmatic levels. Many problems are caused by systems\u2019 heterogeneity on data representation, meaning or context. The\u00a0\u2026", "num_citations": "14\n", "authors": ["1316"]}
{"title": "A Decomposition and Metric-Based Evaluation Framework for Microservices\n", "abstract": " Migrating from monolithic systems into microservice is a very complex task. Companies are commonly decomposing the monolithic system manually, analyzing dependencies of the monolith and then assessing different decomposition options. The goal of our work is two-folded: 1) we provide a microservice measurement framework to objectively evaluate and compare the quality of microservices-based systems; 2) we propose a decomposition system based on business process mining. The microservice measurement framework can be applied independently from the decomposition process adopted, but is also useful to continuously evaluate the architectural evolution of a system. Results show that the decomposition framework helps companies to easily identify the different decomposition options. The measurement framework can help to decrease the subjectivity of the decision between different decomposition\u00a0\u2026", "num_citations": "10\n", "authors": ["1316"]}
{"title": "Serverless computing-where are we now, and where are we heading?\n", "abstract": " Serverless systems are becoming more popular and being adopted by a large number of companies. Serverless computing is a new paradigm that provides a platform to efficiently develop and deploy applications to the market without having to manage any underlying infrastructure.1,2 However, serverless solutions introduce several new issues that companies need to tackle. In this article, we introduce serverless technology and its evolution, discuss its benefits and issues, and describe future challenges that researchers should address.", "num_citations": "9\n", "authors": ["1316"]}
{"title": "Controlled experiments comparing fault-tree-based safety analysis techniques\n", "abstract": " The capability to model dynamic aspects of safety-critical systems, such as sequence or stochastic dependence of events, is one important requirement for safety analysis techniques. State Event Fault Tree Analysis, Dynamic Fault Tree Analyis, and Fault Tree Analysis combined with Markov Chains Analysis have been developed to fulfill these requirements, but they are still not widely accepted and used in practice. In order to investigate the reasons behind this low usage, we conducted two controlled experiments. The goal of the experiments was to analyze and compare applicability and efficiency in State Event Fault Tree analysis versus Dynamic Fault Tree Analyis and Fault Tree Analysis combined with Markov Chains Analysis. The results of both experiments show that, notwithstanding the power of State Event Fault Tree Analysis, Dynamic Fault Tree Analyis is rated by participants as more applicable and is\u00a0\u2026", "num_citations": "9\n", "authors": ["1316"]}
{"title": "Motivations, benefits, and issues for adopting Micro-Frontends: A Multivocal Literature Review\n", "abstract": " Context:Micro-Frontends are increasing in popularity, being adopted by several large companies, such as DAZN, Ikea, Starbucks and may others. Micro-Frontends enable splitting of monolithic frontends into independent and smaller micro applications. However, many companies are still hesitant to adopt Micro-Frontends, due to the lack of knowledge concerning their benefits. Additionally, provided online documentation is often times perplexed and contradictory.Objective:The goal of this work is to map the existing knowledge on Micro-Frontends, by understanding the motivations of companies when adopting such applications as well as possible benefits and issues.Method:For this purpose, we surveyed the academic and grey literature by means of the Multivocal Literature Review process, analyzing 173 sources, of which 43 reported motivations, benefits and issues.Results:The results show that existing\u00a0\u2026", "num_citations": "8\n", "authors": ["1316"]}
{"title": "Process configuration framework tool\n", "abstract": " Organizations considering the adoption of new methods, techniques, or tools often face the problem of how to evaluate these systematically, thoroughly, and completely. In this work we present the Process Configuration Framework Tool, a web application based on the Reference Technology platform and aimed at helping organizations find empirical evidence in a specific context. These results will help decision makers to easily find existing methods, techniques, and tools in the appropriate context and make decisions based on empirical evidence.", "num_citations": "8\n", "authors": ["1316"]}
{"title": "An Empirical Investigation on the Motivations for the Adoption of Open Source Software\n", "abstract": " Open Source Software has evolved dramatically in the last twenty years and now many open source products are considered similar, or better, than proprietary solutions. The result is that the trustworthiness of some open source products is now very high and the motivations for adopting an open source product over a proprietary product has changed in the last ten years. For this reason, we ran a mixed research approach, composed of three empirical studies, so as to identify the motivations for the adoption of open source products. The goal is to take a snapshot of the state-of-the-art in FLOSS motivation\u2019s adoption. Results show that the economical aspects and the freedom of some type of licenses are not the main adoption drivers any more while other motivations such as the ease of customization and ethical reasons are currently considered more important.", "num_citations": "7\n", "authors": ["1316"]}
{"title": "Can Functional Size Measures Improve Effort Estimation in SCRUM?\n", "abstract": " In SCRUM projects, effort estimations are carried out at the beginning of each sprint, usually based on story points. The usage of functional size measures, specifically selected for the type of application and development conditions, is expected to allow for more accurate effort estimates. The goal of the work presented here is to verify this hypothesis, based on experimental data. The association of story measures to actual effort and the accuracy of the resulting effort model was evaluated. The study shows that developers\u2019 estimation is more accurate than those based on functional measurement. In conclusion, our study shows that, easy to collect functional measures do not help developers in improving the accuracy of the effort estimation in Moonlight SCRUM.", "num_citations": "7\n", "authors": ["1316"]}
{"title": "OP2A - Assessing the Quality of the Portal of Open Source Software Products\n", "abstract": " Open Source Software (OSS) communities do not often invest in marketing strategies to promote their products in a competitive way. Even the home pages of the web portals of well-known OSS products show technicalities and details that are not relevant for a fast and effective evaluation of the product\u2019s qualities. So, final users and even developers, who are interested in evaluating and potentially adopting an OSS product, are often negatively impressed by the quality perception they have from the web portal of the product and turn to proprietary software solutions or fail to adopt OSS that may be useful in their activities. In this paper, we define an evaluation model and we derive a checklist that OSS developers and web masters can use to design their web portals with all the contents that are expected to be of interest for OSS final users. We exemplify the use of the model by applying it to the Apache Tomcat web portal and we apply the model to 22 well-known OSS portals. 1", "num_citations": "7\n", "authors": ["1316"]}
{"title": "OSS-TMM: Guidelines for Improving the Testing Process of Open Source Software\n", "abstract": " Open Source Software (OSS) products do not usually follow traditional software engineering development paradigms. Specifically, testing activities in OSS development may be quite different from those carried out in Closed Source Software (CSS) development. As testing and verification require a good deal of resources in OSS, it is necessary to have ways to assess and improve OSS testing processes. This paper provides a set of testing guidelines and issues that OSS developers can use to decide which testing techniques make most sense for their OSS products. This paper 1) provides a checklist that helps OSS developers identify the most useful testing techniques according to the main characteristics of their products, and 2) outlines a proposal for a method that helps assess the maturity of OSS testing processes. The method is a proposal of a Maturity Model for testing processes (called OSS-TMM). To show its\u00a0\u2026", "num_citations": "6\n", "authors": ["1316"]}
{"title": "T-DOC: A tool for the automatic generation of testing documentation for OSS products\n", "abstract": " In the context of Open Source Software (OSS), the lack of project documentation is one of the most challenging problems that slows down the widespread diffusion of OSS products. The difficulty of providing up-to-date and reasonable documentation for OSS products relates to two main reasons. First, documenting development activities and technological issues is viewed as a tedious and unrewarding task. Second, data and information about an OSS project (such as source code, project plans, testing requirements, etc.) are scattered and shared via unstructured channels such as unofficial forums and mailing lists.               In this paper, we focus on technical documentation related to testing activities. In this context, the lack of documentation is exacerbated due to the use of the available testing methods that drastically increase code fragmentation. We propose T-doc, a tool that simplifies the generation of\u00a0\u2026", "num_citations": "6\n", "authors": ["1316"]}
{"title": "On the Relationship Between Coupling and Refactoring: An Empirical Viewpoint\n", "abstract": " Background: Refactoring has matured over the past twenty years to become part of a developer's toolkit. However, many fundamental research questions still remain largely unexplored. Aim: The goal of this paper is to investigate the highest and lowest quartile of refactoring-based data using two coupling metrics - the Coupling between Objects metric and the more recent Conceptual Coupling between Classes metric to answer this question. Can refactoring trends and patterns be identified based on the level of class coupling? Method: In this paper, we analyze over six thousand refactoring operations drawn from releases of three open-source systems to address one such question. Results: Results showed no meaningful difference in the types of refactoring applied across either lower or upper quartile of coupling for both metrics; refactorings usually associated with coupling removal were actually more numerous\u00a0\u2026", "num_citations": "5\n", "authors": ["1316"]}
{"title": "Towards a Classification Schema for Development Technologies: an Empirical Study in the Avionic Domain\n", "abstract": " Software and hardware development organizations that consider the adoption of new methods, techniques, or tools often face several challenges, namely to: guarantee process quality, reproducibility, and standard compliance. They need to compare existing solutions on the market, and they need to select technologies that are most appropriate for each process phase, taking into account the specific context requirements. Unfortunately, this kind of information is usually not easily accessible; it is incomplete, scattered, and hard to compare. Our goal is to report on an empirical study with high-level practitioners, to extend our previous work on a classification schema for development technologies in the avionic domain. We investigate the acceptance and the possible improvements on the schema, with the aim to help decision makers to easily find, compare and combine existing methods, techniques, and tools based on previous experience. The study has been carried out with five technical leaders for the development of flight control systems, from Liebherr-Aerospace Lindenberg GmbH and the results show that the schema helps to transfer knowledge between projects, guaranteeing quality, reproducibility, and standard compliance.", "num_citations": "4\n", "authors": ["1316"]}
{"title": "Towards the evaluation of OSS trustworthiness: Lessons learned from the observation of relevant OSS projects\n", "abstract": " To facilitate the adoption of open-source software (OSS) in industry, it is important to provide potential users (i.e., those who could decide to adopt OSS) with the means for evaluating the trustworthiness of OS products. This paper presents part of the work done in the QualiPSo project for this purpose. A set of factors that are believed to affect the perception of trustworthiness are introduced. In order to test the feasibility of deriving a correct, complete and reliable evaluation of trustworthiness on the basis of these factors, a set of well-known OSS projects have been chosen. Then, the possibility to assess the proposed factors on each project was verified: not all the factors appear to be observable or measurable. The paper reports what information is available to support the evaluation and what is not. This knowledge is considered to be useful to users, who are warned that there are still dark areas in the\u00a0\u2026", "num_citations": "4\n", "authors": ["1316"]}
{"title": "Defining an open source software trustworthiness model\n", "abstract": " In an ideal word, totally trustworthy software would provide an absolute guarantee that it will perform its required functions under all possible circumstances, will do so on time, and will never perform any actions that have hazardous consequences.", "num_citations": "4\n", "authors": ["1316"]}
{"title": "Making the Cloud work for Software Producers: linking Architecture, Operating Cost and Revenue\n", "abstract": " Cloud migration is concerned with moving an on-premise software system into the cloud. In this paper, we focus on software producers adopting the cloud to provide their solutions to enterprise customers. Their challenge is to migrate a software product, developed in-house and traditionally delivered on-premise, to an Infrastructure-as-a-Service or Platform-as-a-Service solution, while also mapping an existing traditional licensing model on to a cloud monetization model. The analysis of relevant cost types and factors of cloud computing generate relevant information for the software producers when deciding to adopt cloud computing, and defining software pricing. We present an integrated framework for informing cloud monetization based on operational cost factors for migrating to the cloud and test it in a real-life case study. Differences between basic virtualization of the software product and using fully cloud-native platform services for re-architecting the product in question are discussed.", "num_citations": "3\n", "authors": ["1316"]}
{"title": "Can Opinion Mining Techniques Help to Select Open Source Software?\n", "abstract": " People and organizations that are considering the adoption of Open-Source Software (OSS), or that need to choose among different OSS products are interested in knowing the user community\u2019s opinion, since this can provide useful indications about the strengths and limits of the software being evaluated. While several methods for the evaluation of the community size are available, there is no automated support to the extraction of the opinions of the community. In this paper we explore whether it is possible to support the OSS selection process by means of automated sentiment analysis techniques. Our goal is to understand if the actual opinion mining techniques, can be applied to get valuable opinions on OSS software. Our goal will be achieved first developing a web crawler to extract user generated content on OSS, building a data-set of relevant user generated then we apply the opinion mining process the OSS blogs data-set. We collected more than 88K user generated content and we compared the performance of our opinion mining technique with a set of existing opinion mining tools. Results of the application of our technique show that opinion mining can help to evaluate the opinions of OSS products. However, the existing opinion mining tools, even if applicable in different domains, are still not reliable in the domain of OSS, mainly because they are trained on different data-sets, opening new research directions for future work in the opinion mining domain.", "num_citations": "3\n", "authors": ["1316"]}
{"title": "A survey on the importance of some economic factors in the adoption of open source software\n", "abstract": " Economic advantages have long been used as a key factor for promoting the adoption of Open Source Software. This paper reports on an investigation about the impact of economic factors when deciding on the adoption of Open Source Software, in the framework of a survey carried out in the QualiPSo project. The results seem to indicate that economic issues may have a remarkably lower impact than commonly believed, though people with roles more directly related to economic results and working in private companies seem to give economic factors more consideration than other Open Source Software stakeholders.", "num_citations": "3\n", "authors": ["1316"]}
{"title": "University of lugano at trec 2008 blog track\n", "abstract": " We report on the University of Luganos participation in the Blog track of TREC 2008. In particular we describe our system for performing opinion retrieval and blog distillation. The 2008 Blog track continued on from the successful 2007 Blog track, including the same opinion retrieval and blog distillation activities. This year was our first participation in TREC and we participated in both opinion retrieval and blog distillation tasks. We aimed to test the effectiveness of learning methods in each of these tasks. In the topic retrieval phase baseline of the opinion retrieval task, we used a rank learning method to combine additional information including the content of incoming hyperlinks and tag data from social bookmarking websites with our basic retrieval method which was the Divergence from Randomness version of BM25 DFR BM25. The results shows 20 improvement in the Mean Average Precision MAP of the proposed method in comparison with DFR BM25. We then examined the effectiveness of learning methods in assigning opinion scores to documents. We compared a Support Vector Machine SVM based learning system with a simpler system that used the average opinionatedness of each word in the document. Although the results were not satisfactory in our TREC submission and we didnt improve the baseline, repeating the experiments showed the improvement over the baseline by using the learning methods in document opinion scoring.Descriptors:", "num_citations": "3\n", "authors": ["1316"]}
{"title": "Exploring factors and measures to select open source software\n", "abstract": " [Context] Open Source Software (OSS) is nowadays used and integrated in most of the commercial products. However, the selection of OSS projects for integration is not a simple process, mainly due to a of lack of clear selection models and lack of information from the OSS portals. [Objective] We investigated the current factors and measures that practitioners are currently considering when selecting OSS, the source of information and portals that can be used to assess the factors, and the possibility to automatically get this information with APIs. [Method] We elicited the factors and the measures adopted to assess and compare OSS performing a survey among 23 experienced developers who often integrate OSS in the software they develop. Moreover, we investigated the APIs of the portals adopted to assess OSS extracting information for the most starred 100K projects in GitHub. [Result] We identified a set consisting of 8 main factors and 74 sub-factors, together with 170 related metrics that companies can use to select OSS to be integrated in their software projects. Unexpectedly, only a small part of the factors can be evaluated automatically, and out of 170 metrics, only 40 are available, of which only 22 returned information for all the 100K projects. [Conclusion.] OSS selection can be partially automated, by extracting the information needed for the selection from portal APIs. OSS producers can benefit from our results by checking if they are providing all the information commonly required by potential adopters. Developers can benefit from our results, using the list of factors we selected as a checklist during the selection of OSS, or using the APIs\u00a0\u2026", "num_citations": "2\n", "authors": ["1316"]}
{"title": "RARE: a labeled dataset for cloud-native memory anomalies\n", "abstract": " Anomaly detection has been attracting interest from both the industry and the research community for many years, as the number of published papers and services adopted grew exponentially over the last decade. One of the reasons behind this is the wide adoption of cloud systems from the majority of players in multiple industries, such as online shopping, advertisement or remote computing. In this work we propose a Dataset foR cloud-nAtive memoRy anomaliEs: RARE. It includes labelled anomaly time-series data, comprising of over 900 unique metrics. This dataset has been generated using a microservice for injecting artificial byte stream in order to overload the nodes, provoking memory anomalies, which in some cases resulted in a crash. The system was built using a Kafka server deployed on a Kubernetes system. Moreover, in order to get access and download the metrics related to the server, we utilised\u00a0\u2026", "num_citations": "2\n", "authors": ["1316"]}
{"title": "Does Visualization Speed Up the Safety Analysis Process?\n", "abstract": " The goal of this paper is to present our experience in utilizing the power of the information visualization (InfoVis) field to accelerate the safety analysis process of Component Fault Trees (CFT) in embedded systems. For this, we designed and implemented an interactive visual tool called ESSAVis, which takes the CFT model as input and then calculates the required safety information (e.g., the information on minimal cut sets and their probabilities) that is needed to measure the safety criticality of the underlying system. ESSAVis uses this information to visualize the CFT model and allows users to interact with the produced visualization in order to extract the relevant information in a visual form. We compared ESSAVis with ESSaRel, a tool that models the CFT and represents the analysis results in textual form. We conducted a controlled user evaluation study where we invited 25 participants from different\u00a0\u2026", "num_citations": "2\n", "authors": ["1316"]}
{"title": "A classification schema for development technologies\n", "abstract": " Software and hardware development organizations that consider the adoption of new methods, techniques, or tools often face several challenges, namely to: guarantee process quality, reproducibility, and standard compliance. They need to compare existing solutions on the market, and they need to select technologies that are most appropriate for each process phase, taking into account the specific context requirements. Unfortunately, this kind of information is usually not easily accessible; it is incomplete, scattered, and hard to compare. Our goal is to present a case study on a classification schema we applied on the avionic domain to help decision makers to easily find, compare and combine existing methods, techniques, and tools based on previous experience. The results show that the schema helps to transfer knowledge between projects, guaranteeing quality, reproducibility, and standard compliance.", "num_citations": "2\n", "authors": ["1316"]}
{"title": "BlogMeter: web sentiment platform\n", "abstract": " People and organizations that are considering the adoption of Open-Source Software (OSS), or that need to choose among different OSS products are interested in knowing the user community\u2019s opinion, since this can provide useful indications about the strengths and limits of the software to be evaluated. While several methods for the evaluation of the community size are available, there is very little automated support to the extraction of the opinions of the community. Our objective is to create a tool that supports the potential user in the evaluation and choice of OSS by performing an in-depth \u201csentiment analysis\u201d of the user community according to the information published on the internet in various forms. The idea is that, by means of the tool, potential users can know the products\u2019 spread and the community\u2019s general opinion before performing their own specific evaluations.", "num_citations": "2\n", "authors": ["1316"]}
{"title": "Structural Coupling for Microservices\n", "abstract": " Cloud-native Applications are 'distributed, elastic and horizontal-scalable systems composed of (micro)services which isolate states in a minimum of stateful components'. Hence, an important property is to ensure a low coupling and a high cohesion among the (micro)services composing the cloud-native application. Loosely coupled and highly cohesive services allow development teams to work in parallel, reducing the communication overhead between teams. However, despite both practitioners and researchers agree on the importance of this general property, there are no validated metrics to effectively measure or test the actual coupling level between services. In this work, we propose ways to compute and visualize the coupling between microservices, by extending and adapting the concepts behind the computation of the traditional structural coupling. We validate these measures with a case study involving 17 open-source projects and we provide an automatic approach to measure them. The results of this study highlight how these metrics provide to practitioners a quantitative and visual view of services compositions, which can be useful to conceive advanced systems to monitor the evolution of the service.", "num_citations": "1\n", "authors": ["1316"]}