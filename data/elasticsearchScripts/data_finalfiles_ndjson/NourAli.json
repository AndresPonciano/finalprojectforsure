{"title": "A systematic mapping study in microservice architecture\n", "abstract": " The accelerating progress of network speed, reliability and security creates an increasing demand to move software and services from being stored and processed locally on users' machines to being managed by third parties that are accessible through the network. This has created the need to develop new software development methods and software architectural styles that meet these new demands. One such example in software architectural design is the recent emergence of the microservices architecture to address the maintenance and scalability demands of online service providers. As microservice architecture is a new research area, the need for a systematic mapping study is crucial in order to summarise the progress so far and identify the gaps and requirements for future studies. In this paper we present a systematic mapping study of microservices architectures and their implementation. Our study\u00a0\u2026", "num_citations": "335\n", "authors": ["591"]}
{"title": "Designing software architectures with an aspect-oriented architecture description language\n", "abstract": " A great deal of languages have emerged and have demonstrated the advantages that Aspect-Oriented Programming offers. For this reason, the aspect-oriented approach is being introduced into the early phases (analysis and design) of the software life cycle. In this work, we present an Aspect-Oriented Architecture Description Language (AOADL) to specify software architectures of complex, dynamic and distributed software systems. This AOADL follows the PRISMA approach, which integrates the advantages of Component-Based Software Development (CBSD) and Aspect-Oriented Software Development (AOSD). The PRISMA AOADL combines components and aspects in an elegant and novel way achieving a better management of crosscutting-concerns. In addition, it is independent of the technology, and it has great expressive power in order to facilitate the automatic code generation from its\u00a0\u2026", "num_citations": "62\n", "authors": ["591"]}
{"title": "Architecture consistency: State of the practice, challenges and requirements\n", "abstract": " Architecture Consistency (AC) aims to align implemented systems with their intended architectures. Several AC approaches and tools have been proposed and empirically evaluated, suggesting favourable results. In this paper, we empirically examine the state of practice with respect to Architecture Consistency, through interviews with nineteen experienced software engineers. Our goal is to identify 1) any practises that the companies these architects work for, currently undertake to achieve AC; 2) any barriers to undertaking explicit AC approaches in these companies; 3) software development situations where practitioners perceive AC approaches would be useful, and 4) AC tool needs, as perceived by practitioners. We also assess current commercial AC tool offerings in terms of these perceived needs. The study reveals that many practitioners apply informal AC approaches as there are barriers for\u00a0\u2026", "num_citations": "50\n", "authors": ["591"]}
{"title": "Integrating aspects in software architectures: PRISMA applied to robotic tele-operated systems\n", "abstract": " Aspect-Oriented Software Development (AOSD) has emerged as a new approach to develop software systems by improving their structure, reuse, maintenance and evolution properties. It is being applied to all stages of the software life cycle. In this paper, we present the PRISMA approach, which introduces AOSD in software architectures. PRISMA is characterized by integrating aspects as first-order citizens of software architectures. This paper shows how the PRISMA methodology is applied to develop a case study of the tele-operation system domain. We illustrate how the PRISMA approach can improve the development and maintenance processes of these kinds of industrial systems.", "num_citations": "47\n", "authors": ["591"]}
{"title": "Distributed requirements elicitation using a spatial hypertext wiki\n", "abstract": " In Global Software Development (GSD), distributed stakeholders (e.g. team members, customers, etc) have to collaborate and communicate in an efficient and effective way to share, create and discuss knowledge. Nowadays, a challenge is to provide integrated collaborative tools that implement creativity techniques which allow distributed stakeholders to externalize their knowledge through brainstorming and share and store knowledge in a common repository. The Requirements Elicitation (RE) process is a clear example where this kind of support is needed in the software development process. This paper presents the Spatial Hypertext Wiki as a collaborative tool for supporting creativity in the RE process. The Spatial Hypertext characteristics of the wiki provide a virtual board where distributed stakeholders can share, brainstorm, negotiate, or prioritize the knowledge involved in RE.", "num_citations": "43\n", "authors": ["591"]}
{"title": "Dynamic evolution in aspect-oriented architectural models\n", "abstract": " This paper presents a solution to the evolution problem of software architectures. This solution is provided by PRISMA. PRISMA is an architecture modeling approach that integrates the advantages of Component-Based Software Development (CBSD) and Aspect-Oriented Software Development (AOSD). This integration is reflected in its model and in its Architecture Description Language (ADL). In this paper, PRISMA is presented as a framework to evolve aspect-oriented and component-based architectures by requirements-driven evolution. The evolution is supported by means of a meta-level and the reflexive properties of PRISMA ADL which have been implemented as a middleware. In addition, it is demonstrated how the evolution services of the PRISMA meta-level permit the run-time evolution of software architectures using an industrial case study, the TeachMover Robot.", "num_citations": "40\n", "authors": ["591"]}
{"title": "Towards micro service architecture recovery: An empirical study\n", "abstract": " Micro service architectures are rapidly establishing themselves in the software industry as a more efficient and effective substitute for monolithic applications. In a micro service architecture, the application is broken down into many small elements called micro services. These are managed in a distributed way and typically involve several development teams. In such an environment, an architectural model can get lost along the way, making it difficult to perform many downstream software engineering tasks, such as migration, audit, integration or impact analysis. To address this problem, we are developing support for Micro Service Architecture Recovery (MiSAR) using a Model Driven Engineering approach. In this paper, we describe an empirical study which aims to identify the core elements of our approach, by undertaking manual analysis on 8 micro service-based open source projects. From this analysis, we\u00a0\u2026", "num_citations": "34\n", "authors": ["591"]}
{"title": "JITTAC: a just-in-time tool for architectural consistency\n", "abstract": " Architectural drift is a widely cited problem in software engineering, where the implementation of a software system diverges from the designed architecture over time causing architecture inconsistencies. Previous work suggests that this architectural drift is, in part, due to programmers' lack of architecture awareness as they develop code. JITTAC is a tool that uses a real-time Reflexion Modeling approach to inform programmers of the architectural consequences of their programming actions as, and often just before, they perform them. Thus, it provides developers with Just-In-Time architectural awareness towards promoting consistency between the as-designed architecture and the as-implemented system. JITTAC also allows programmers to give real-time feedback on introduced inconsistencies to the architect. This facilitates programmer-driven architectural change, when validated by the architect, and allows for\u00a0\u2026", "num_citations": "34\n", "authors": ["591"]}
{"title": "Ambient-PRISMA: Ambients in mobile aspect-oriented software architecture\n", "abstract": " This work presents an approach called Ambient-PRISMA for modelling and developing distributed and mobile applications. Ambient-PRISMA enriches an aspect-oriented software architectural approach called PRISMA with the ambient concept from Ambient Calculus. Ambients are introduced in PRISMA as specialized kinds of connectors that offer mobility services to architectural elements (components and connectors) and are able to coordinate a boundary, which models the notion of location. Mobility of architectural elements is supported by reconfiguring the software architecture. This paper presents a metamodel that introduces ambients to design aspect-oriented software architectural models for mobile systems. The design of models is performed using an Aspect-Oriented Architecture Description Language. A middleware called Ambient-PRISMANET which maps the metamodel to .NET technology and\u00a0\u2026", "num_citations": "31\n", "authors": ["591"]}
{"title": "Executing Aspect-Oriented Component-Based Software Architectures on .NET Technology\n", "abstract": " Complex structures, non-functional requirements, reusability and run-time evolution are leading properties that current software systems need to deal with. Two software development approaches have emerged to respond to these needs: Component-Based Software Development (CBSD)[Szy98] and Aspect-Oriented Software Development (AOSD)[AOS05]", "num_citations": "31\n", "authors": ["591"]}
{"title": "Characterizing real-time reflexion-based architecture recovery: an in-vivo multi-case study\n", "abstract": " Architecting software systems is an integral part of the software development lifecycle. However, often the implementation of the resultant software ends up diverging from the designed architecture due to factors such as time pressures on the development team during implementation/evolution, or the lack of architectural awareness on the part of (possibly new) programmers. In such circumstances, the quality requirements addressed by the as-designed architecture are likely to be unaddressed by the as-implemented system.", "num_citations": "25\n", "authors": ["591"]}
{"title": "ShyWiki-a spatial hypertext wiki\n", "abstract": " This paper presents ShyWiki, a Spatial Hypertext Wiki. ShyWiki has the flexibility and advantages of spatial hypertext. ShyWiki hypertext documents are composed of notes and maps that can be arranged by users. Users can change the spatial attributes of the elements in a hypertext document such as their position, order, color, size, etc. Furthermore, users can move, delete or aggregate notes as well as maps. ShyWiki allows users to perform a collaborative spatial hypertext design due to the fact that the community of users decide the final structure of a wiki page.", "num_citations": "23\n", "authors": ["591"]}
{"title": "An investigation on online versus batch learning in predicting user behaviour\n", "abstract": " An investigation on how to produce a fast and accurate prediction of user behaviour on the Web is conducted. First, the problem of predicting user behaviour as a classification task is formulated and then the main problems of such real-time predictions are specified: the accuracy and time complexity of the prediction. Second, a method for comparison of online and batch (offline) algorithms used for user behaviour prediction is proposed. Last, the performance of these algorithms using the data from a popular question and answer platform, Stack Overflow, is empirically explored. It is demonstrated that a simple online learning algorithm outperforms state-of-the-art batch algorithms and performs as well as a deep learning algorithm, Deep Belief Networks. The proposed method for comparison of online and offline algorithms as well as the provided experimental evidence can be used for choosing a machine\u00a0\u2026", "num_citations": "19\n", "authors": ["591"]}
{"title": "Software quality assurance: in large scale and complex software-intensive systems\n", "abstract": " Software Quality Assurance in Large Scale and Complex Software-intensive Systems presents novel and high-quality research related approaches that relate the quality of software architecture to system requirements, system architecture and enterprise-architecture, or software testing. Modern software has become complex and adaptable due to the emergence of globalization and new software technologies, devices and networks. These changes challenge both traditional software quality assurance techniques and software engineers to ensure software quality when building today (and tomorrow\u2019s) adaptive, context-sensitive, and highly diverse applications. This edited volume presents state of the art techniques, methodologies, tools, best practices and guidelines for software quality assurance and offers guidance for future software engineering research and practice. Each contributed chapter considers the practical application of the topic through case studies, experiments, empirical validation, or systematic comparisons with other approaches already in practice. Topics of interest include, but are not limited, to: quality attributes of system/software architectures; aligning enterprise, system, and software architecture from the point of view of total quality; design decisions and their influence on the quality of system/software architecture; methods and processes for evaluating architecture quality; quality assessment of legacy systems and third party applications; lessons learned and empirical validation of theories and frameworks on architectural quality; empirical validation and testing for assessing architecture quality. Focused on quality assurance\u00a0\u2026", "num_citations": "19\n", "authors": ["591"]}
{"title": "Self-adaptation to mobile resources in service oriented architecture\n", "abstract": " Mobile or pervasive systems continuously change their environments and resources (e.g. Battery or bandwidth). Mobile applications require different services when they enter or exit environments and as their resources change. In this paper, we propose a service oriented architectural approach that supports self-adaptation to changes in resources and location topology when mobility occurs, by reconfiguring the software architecture at runtime. The location topology and mobility primitives are inspired from ambient calculus. Our approach considers ambients to be autonomic elements that can manage elements located in them to their environment and provide them with new services suited to the available resources, when mobility occurs. Ambients implement a hierarchical and decentralized MAPE-K loop to adapt the distributed and mobile service oriented architecture to the resource requirements. We have\u00a0\u2026", "num_citations": "19\n", "authors": ["591"]}
{"title": "Comparing architecture description languages for mobile software systems\n", "abstract": " Software architecture is a technique which aids the development of complex and dynamic systems. Architecture Description Languages (ADLs) describe software architectures using a textual syntax or a graphical notation. However, not many ADLs have provided primitives for describing software architectures of distributed and mobile software systems. This paper presents a comparison among existing ADLs that have addressed distributed and mobile software systems. The features chosen for the comparison have been taken from the work of Roman et al.[15] which propose a framework for viewing mobility. The features taken into account in this work are how ADLs support the notion of location, mobility, coordination, middleware, a graphical notation, and tools. The work presented in this paper proposes to be a starting point for discovering whether ADLs have properly supported mobility or not.", "num_citations": "18\n", "authors": ["591"]}
{"title": "A conceptual model for distributed aspect-oriented software architectures\n", "abstract": " Distribution has become a fundamental requirement for information systems and not an auxiliary. We believe it is important to consider distribution from early stages of the life cycle of software development and deal with distribution at a high abstraction level. This paper, presents a conceptual model for specifying software architectures of distributed information systems. The conceptual model is defined by combining the aspect-oriented software development (AOSD) and the component-based software development (CBSD). The distribution conceptual model is explained by presenting its AOSD perspective and the CBSD perspective. The AOSD perspective of the conceptual model describes the mobile and replication behaviour of an architectural element by introducing a distribution aspect and a replication aspect. The architectural perspective (CBSD perspective) of the distribution model allows specification of the\u00a0\u2026", "num_citations": "15\n", "authors": ["591"]}
{"title": "A spatial hypertext wiki for knowledge management\n", "abstract": " Collaboration is a key factor in successful knowledge management. Recently, wikis have become a popular solution for distributed and collaborative knowledge management. However, most wikis do not appropriately support the facilities needed for group idea creation and can only represent unstructured knowledge (text, images, and hyperlinks) which cannot be reused or systematized. This paper proposes the use of a Spatial Hypertext Wiki (ShyWiki) as a knowledge management wiki which allows users to interact in a distributed and collaborative way in order to generate ideas, and organize and structure knowledge. This type of wiki can help in the externalization of tacit knowledge, and is able to represent explicit knowledge at different levels of formality. Furthermore, the visual and spatial characteristics of this wiki can be used for representing implicit relations among concepts as well as for organizing and\u00a0\u2026", "num_citations": "14\n", "authors": ["591"]}
{"title": "Dynamic reconfiguration of software architectures through aspects\n", "abstract": " Currently, most software systems have a dynamic nature and evolve at run-time. The dynamic reconfiguration of software architectures has to be supported in order to enable their architectural element instances and their links to be created and destroyed at run-time. Complex components also need reconfiguration capabilities to evolve their internal compositions. This paper introduces an approach to support the dynamic reconfiguration of software architectures taking advantage of aspect-oriented techniques. It enables complex components to autonomously reconfigure themselves: they are capable of both having knowledge of their current configuration and reconfiguring themselves at run-time. This approach has been developed for the PRISMA aspect-oriented architectural model. A new kind of aspect has been created in PRISMA in order to provide dynamic reconfiguration services to each complex\u00a0\u2026", "num_citations": "14\n", "authors": ["591"]}
{"title": "An experience using a spatial hypertext wiki\n", "abstract": " Most wikis do not allow users to collaboratively organize relations among wiki pages, nor ways to visualize them because such relations are hard to express using hyperlinks. The Spatial Hypertext Wiki (ShyWiki) is a wiki that uses Spatial Hypertext to represent visual and spatial implicit relations. This paper reports an experience about the use of ShyWiki features and its spatial hypertext model. Four groups, consisting of 3 members each, were asked to use ShyWiki for creating, sharing and brainstorming knowledge during the design and documentation of a software architecture. We present the evaluation of a questionnaire that users answered about their perceived usefulness and easiness of use of the spatial and visual properties of ShyWiki, and several of its features. We have also asked the users if they would find the visual and spatial properties useful in a wiki such as Wikipedia. In addition, we have analyzed\u00a0\u2026", "num_citations": "12\n", "authors": ["591"]}
{"title": "Mobile ambients in aspect-oriented software architectures\n", "abstract": " Nowadays, distributed and mobile systems are acquiring importance and becoming widely extended for supporting ubiquitous computing. In order to develop such systems in a technology-independent way, it is important to have a formalism that describes distribution and mobility at a high abstraction level. Ambient Calculus is a formalism that allows the representation of boundaries where computation occurs. Also, distributed and mobile systems are usually difficult to develop as they need to take into account functional and non-functional requirements and reusability and adaptability mechanisms. In order to achieve these needs it is necessary to separate the distribution and mobility concerns from the rest of the concerns. PRISMA is an approach that integrates the advantages of Component-Based Software Development and Aspect-Oriented Software Development for specifying software architectures. In\u00a0\u2026", "num_citations": "12\n", "authors": ["591"]}
{"title": "Prediction of Users' Response Time in Q&A Communities\n", "abstract": " Social media and online Question and Answer (Q&A) communities in particular have become a successful solution for finding answers on diverse topics. However, not all questions are answered by these communities. Also, many questions are not answered quickly enough. In this paper, we propose a framework for predicting users' response time. The framework uses a diverse set of features including information on users, the content they generate while communicating, question tags, spatial and temporal features. Then these features are used as input for training predictive models by various machine learning algorithms. As a case study, three diverse Q&A communities from Stack Exchange are selected to test the framework. We demonstrate that Deep Belief Networks outperform Logistic Regression (LR), k-nearest neighbors (k-NN), and Decision Trees (DT) in the accuracy of the prediction across the three\u00a0\u2026", "num_citations": "10\n", "authors": ["591"]}
{"title": "Modeling support for mobile ambients in service oriented architecture\n", "abstract": " Service Oriented Architecture (SOA) is a promising approach for designing and developing mobile applications. However, SOA concepts need to be combined with mobile principles to fully accommodate their requirements. Previously, a metamodel called Ambient-SoaML has been defined, which combines the Service Oriented Architecture Modeling Language (SoaML) and Mobile Ambients concepts inspired from Ambient Calculus. In this paper, a modeling tool that supports designing service oriented architecture of mobile systems based on Ambient-SoaML is presented. The tool allows users to graphically design Ambient-SoaML architectures and ensures that they are correctly built. The tool is an eclipse plug-in and has been implemented following Model Driven Architecture (MDA) principles and associated technologies. A running example is used to illustrate the features of the tool.", "num_citations": "8\n", "authors": ["591"]}
{"title": "Enabling the visualization for reasoning about temporal data\n", "abstract": " Complexity and scale of modern data is at its highest level but its temporal properties are often neglected. As a result, it is often hard for a user to make an informed decision about its time related characteristics. However, an aesthetic and efficient visualization can mitigate this drawback of data representation. For example, an informative graphical visualization based on user's interaction with a computer interface can dramatically improve user experience with temporal data. In this paper, I propose such visualization of temporal data for reasoning. I developed a temporal model supporting different temporal entities for this data. These include timestamps, intervals, different time granularity and uncertainty of time. I proposed a multimodal visualization based on this abstract time model so a user will have the functionality to reason on temporal properties of visualized data from different points of view.", "num_citations": "7\n", "authors": ["591"]}
{"title": "Self-adaptive quality requirement elicitation process for legacy systems: a case study in healthcare\n", "abstract": " Legacy systems need to be continuously maintained and re-engineered to improve their provision of services and improve quality attributes. An approach that promises to improve quality attributes and reduce human maintenance tasks is the self-adaptive approach, where software systems modify their own behaviour. However, there is little guidance in the literature on how to migrate to a self-adaptive system and evaluate which features should be designed/implemented with self-adaptive behaviour. In this paper, we describe a process called Self-Adaptive Quality Requirement Elicitation Process (SAQEP), a process that allows eliciting quality attribute requirements from legacy system stakeholders and specify which of these requirements can be taken account to be implemented in a self-adaptation system. The SAQEP has been applied to elicit the self-adaptive quality requirements of a legacy system in a Mexican\u00a0\u2026", "num_citations": "6\n", "authors": ["591"]}
{"title": "A semantic wiki based on spatial hypertext\n", "abstract": " Spatial Hypertext Wiki (ShyWiki) is a wiki which represents knowledge using notes that are spatially distributed in wiki pages and have visual characteristics such as colour, size, or font type. The use of spatial and visual characteristics in wikis is important to improve human comprehension, creation and organization of knowledge. Another important capability in wikis is to allow machines to process knowledge. Wikis that formally structure knowledge for this purpose are called semantic wikis. This paper describes how ShyWiki can make use of spatial hypertext in order to be a semantic wiki. ShyWiki can represent knowledge at different levels of formality. Users of ShyWiki can annotate the content and represent semantic relations without being experts of semantic web data description languages. The spatial hypertext features make it suitable for users to represent unstructured knowledge and implicit graphic relations\u00a0\u2026", "num_citations": "6\n", "authors": ["591"]}
{"title": "Designing mobile aspect-oriented software architectures with ambients\n", "abstract": " This chapter focuses on designing software architectures of mobile applications using an Aspect-Oriented Architecture Description Language (AOADL). The AOADL follows an approach called Ambient-PRISMA which enables designers to address, in an explicit and abstract way, the notion of location and mobility. Concretely, the AOADL extends the PRISMA AOADL by introducing a primitive called an ambient which is inspired by Ambient Calculus. An ambient defines a bounded place where other architectural elements (components and connectors) reside and are coordinated with elements that are outside an ambient\u2019s boundary. Architectural elements can enter and exit ambients. Ambients, as well as other architectural elements, are defined by importing aspects. Thus, behaviours that change the location of architectural elements are specified separately in distribution aspects. The objective of this chapter is to\u00a0\u2026", "num_citations": "5\n", "authors": ["591"]}
{"title": "Developing mobile ambients using an aspect-oriented software architectural model\n", "abstract": " Nowadays, distributed and mobile systems are acquiring greater importance and becoming more widely used to support ubiquitous computing. However, developing systems of this kind is a difficult task. Instead of concentrating on how problems should be solved developers must worry about implementation details. Ambient Calculus is a formalism that provides primitives to describe mobile systems in an abstract way. Aspect-oriented software development and software architectures promise to achieve reusability, maintenance and adaptability, which are all essential for the development of distributed systems. In this paper, we present how a platform-independent model called Ambient-PRISMA combines both Ambient Calculus and Aspect-Oriented Software Architecture for the specification of distributed and mobile systems. A platform-specific model in .Net for supporting Ambient-PRISMA code generation\u00a0\u2026", "num_citations": "5\n", "authors": ["591"]}
{"title": "Mobile architectures at runtime: research challenges\n", "abstract": " Mobile applications interact with devices, networks, environments and pervasive services and at runtime these interactions can continuously change and adapt, causing side effects. In this paper, we propose the usage of architectural models at runtime to allow software engineers monitor the structural changes of a mobile system. Architectural models at runtime have previously been proposed in the literature and providing them to mobile software engineers can help them to maintain and evolve mobile applications by taking just in time actions in fixing problems more quickly or decide to disable certain services. We discuss the motivation and outline several research challenges for providing a conceptual framework and tool for mobile architecture at runtime support. We also discuss a solution to one of the challenges.", "num_citations": "3\n", "authors": ["591"]}
{"title": "Exploring how the attribute driven design method is perceived\n", "abstract": " A method for designing software architecture based on achieving quality attributes is the attribute driven design (ADD) method. This method has not been explored in terms of users\u2019 perception of its usefulness and easiness of use. Our goal is to study the perceptions of software engineers with no or little experience industrially in designing software architecture using the ADD. In this chapter, we describe an empirical study that we conducted on master students to measure their perceptions of the ADD after using it. We performed two experiments, one with students enrolled in the Software Architecture module in 2010 and repeated it with the students of the same module in 2011. Our main findings are that the subjects perceive ADD method as useful and that there is a relationship between its usefulness and willingness of use. However, the subjects\u2019 opinion was that they did not agree that the ADD method is easy to\u00a0\u2026", "num_citations": "3\n", "authors": ["591"]}
{"title": "How to visualise a conversation: case-based reasoning approach\n", "abstract": " At present, the complexity and scale of modern digital conversations between people is at its highest level but there is a gap in how to represent these conversations to a user. As a result, it is often hard for a user to understand the flow of a conversation and make an informed decision over it. However, an aesthetic and efficient visualisation can mitigate this drawback of data representation. In this paper, a case-based approach was proposed for choosing an appropriate visualisation for user\u2019s conversations. A case was formulated as a visualisation of a conversation which a user decided to use for his analysis of the conversation. When a user decides to visualise a new conversation, the most similar visualisation type from previous users\u2019 experiences is selected for the visualisation of the new conversation. In this paper, the cases of visualisations of conversations from the IBM Many Eyes platform were collected and a case-based reasoning approach for choosing a visualisation of user\u2019s conversation was designed. Finally, the work of the proposed approach was tested on a sample email conversation, and then four participants evaluated the appropriateness of the chosen visualisation types in comparison with other eight possible visualisations for the email conversation.", "num_citations": "2\n", "authors": ["591"]}
{"title": "High Level Specification of Distributed and Mobile Information Systems\n", "abstract": " Nowadays, information systems are large and complex to develop. An important factor that influences in this complexity is that information systems are tending to be distributed with mobile components. Many technologies have emerged in dealing with distribution issues at an implementation level. However, few approaches have considered distribution from the beginning of the life cycle of software development and have dealt with distribution at a high abstraction level. In this paper, we focus on specifying distributed and mobile information systems at a high abstraction level using an approach called PRISMA. PRISMA is an architectural model which combines the Component-Based Software Development (CBSD) and Aspect-Oriented Software Development (AOSD) to describe software architectures. PRISMA has associated an Architectural Description Language (ADL) that is separated into a Type Definition Language and a Configuration Language. We use the Type Definition Language to specify the distribution aspect as a first order citizen of the language. Furthermore, we use the Configuration Language to configure the location of the instances of the software architecture.", "num_citations": "2\n", "authors": ["591"]}
{"title": "Managing requirements elicitation knowledge using a spatial hypertext wiki\n", "abstract": " Wikis have been widely used as knowledge management tools. However, most of them do not support the conversion process of knowledge in an appropriate way. Specifically, they do not support brainstorming and creativity techniques, which are needed to convert tacit knowledge into explicit. This chapter presents how a wiki tool called the Spatial Hypertext Wiki (ShyWiki) can be used for supporting collaborative requirements elicitation following the knowledge creation spiral of Nonaka. The knowledge conversions in the spiral (socialization, externalization, combination, and internalization) and the knowledge types in each conversion are related to different activities in requirements elicitation, which can be performed through ShyWiki. ShyWiki allows stakeholders to collaborate by creating, brainstorming, structuring and reorganizing requirements contained in notes. In this way, the requirements negotiation and\u00a0\u2026", "num_citations": "1\n", "authors": ["591"]}
{"title": "Distributed replication in aspect-oriented software architectures using ambients\n", "abstract": " Replication has become a fundamental requirement for distributed systems in order to avoid network overload as well as to provide fault tolerance. The objective of this work is to show how replication can be supported in an abstract and technology independent way. The work presented in this paper is called Ambient-PRISMA. Ambient-PRISMA combines PRISMA and Ambient Calculus. PRISMA is an approach for developing aspect-oriented software architectures. Ambient Calculus is a formalism that provides primitives for specifying distribution, mobility and replication. In this way, both the advantages of PRISMA and Ambient Calculus are obtained.", "num_citations": "1\n", "authors": ["591"]}
{"title": "Replicaci\u00f3n Distribuida en Arquitecturas Software Orientadas a Aspectos Utilizando Ambientes\n", "abstract": " Con la expansi\u00f3n de los sistemas distribuidos, la replicaci\u00f3n se ha convertido en un requisito fundamental para evitar la sobrecarga en la red y proporcionar tolerancia a fallos. El objetivo de este trabajo es mostrar c\u00f3mo dar soporte a este requisito de forma abstracta e independiente de la tecnolog\u00eda. Para ello, el trabajo combina PRISMA con el C\u00e1lculo de Ambientes (CA). PRISMA es un enfoque de desarrollo para arquitecturas software orientado a aspectos, y el CA es un formalismo que proporciona primitivas para especificar caracter\u00edsticas de distribuci\u00f3n, movilidad y replicaci\u00f3n. Con ello, esta propuesta tiene las ventajas proporcionadas por PRISMA y el CA.", "num_citations": "1\n", "authors": ["591"]}
{"title": "Transparent Mobility of Distributed Objects using .NET\n", "abstract": " Nowadays, information systems are becoming more distributed and dynamic in nature, where mobility is a solution for run-time adaptability. However, implementing software with such characteristics is a complex task. This is due to the fact that current middleware technologies do not provide a simple and direct way of implementing distributed objects that can move in a transparent way. In this paper, we are going to present an approach, implemented in .NET Remoting to allow transparent mobility of distributed objects. Our approach is based on separating the distribution and mobility concerns from the source code that contains the application logic in entities called attachments. Thus, attachments are high-level proxies that are responsible for creating communication channels and are capable of managing dynamic location changes without affecting the objects in the case of mobility. This approach has been implemented using a case study. The response time of distributed communication provided by our approach has been tested and compared with the remote communication provided by the primitives of .NET Remoting.", "num_citations": "1\n", "authors": ["591"]}
{"title": "Introducing Ambient Calculus in Mobile Aspect-Oriented Software\n", "abstract": " Currently most software systems have a distributed nature. The development of distributed and mobile software is a complex task. As a result, it is important to take into account distribution and mobility from the early stages of the development process instead of delaying their considerations to the implementation stage. In this work, we present how to consider distribution and mobility features at the architectural level.", "num_citations": "1\n", "authors": ["591"]}
{"title": "PRISMA: Arquitecturas Software Orientadas a Aspectos y Basadas en Componentes\n", "abstract": " El desarrollo de sistemas software actuales es necesario abordarlo mediante plataformas que permitan describir modelos de arquitectura complejos, distribuidos, evolutivos y reutilizables. PRISMA es un modelo que integra el Desarrollo de Software Basado en Componentes (DSBC) y el Desarrollo de Software Orientado a Aspectos (DSOA) para la construcci\u00f3n de modelos arquitect\u00f3nicos. Dicho modelo permite evolucionar sus arquitecturas gracias a sus capacidades reflexivas implementadas mediante su meta-nivel. Este trabajo presenta la visi\u00f3n orientada a aspectos de PRISMA: el soporte que ofrece al DSOA, su capacidad de evolucionar aspectos y las ventajas que estos aportan al modelo. Palabras clave: Arquitecturas Software Orientadas a Aspectos, An\u00e1lisis y Dise\u00f1o de Software Orientado a Aspectos.", "num_citations": "1\n", "authors": ["591"]}