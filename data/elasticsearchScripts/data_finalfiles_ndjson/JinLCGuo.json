{"title": "Analysis and detection of information types of open source software issue discussions\n", "abstract": " Most modern Issue Tracking Systems (ITSs) for open source software (OSS) projects allow users to add comments to issues. Over time, these comments accumulate into discussion threads embedded with rich information about the software project, which can potentially satisfy the diverse needs of OSS stakeholders. However, discovering and retrieving relevant information from the discussion threads is a challenging task, especially when the discussions are lengthy and the number of issues in ITSs are vast. In this paper, we address this challenge by identifying the information types presented in OSS issue discussions. Through qualitative content analysis of 15 complex issue threads across three projects hosted on GitHub, we uncovered 16 information types and created a labeled corpus containing 4656 sentences. Our investigation of supervised, automated classification techniques indicated that, when prior\u00a0\u2026", "num_citations": "31\n", "authors": ["2258"]}
{"title": "Activity-based analysis of open source software contributors: roles and dynamics\n", "abstract": " Contributors to open source software (OSS) communities assume diverse roles to take different responsibilities. One major limitation of the current OSS tools and platforms is that they provide a uniform user interface regardless of the activities performed by the various types of contributors. This paper serves as a non-trivial first step towards resolving this challenge by demonstrating a methodology and establishing knowledge to understand how the contributors' roles and their dynamics, reflected in the activities contributors perform, are exhibited in OSS communities. Based on an analysis of user action data from 29 GitHub projects, we extracted six activities that distinguished four Active roles and five Supporting roles of OSS contributors, as well as patterns in role changes. Through the lens of the Activity Theory, these findings provided rich design guidelines for OSS tools to support diverse contributor roles.", "num_citations": "16\n", "authors": ["2258"]}
{"title": "How Do the Open Source Communities Address Usability and UX Issues? An Exploratory Study\n", "abstract": " Usability and user experience (UX) issues are often not well emphasized and addressed in open source software (OSS) development. There is an imperative need for supporting OSS communities to collaboratively identify, understand, and fix UX design issues in a distributed environment. In this paper, we provide an initial step towards this effort and report on an exploratory study that investigated how the OSS communities currently reported, discussed, negotiated, and eventually addressed usability and UX issues. We conducted in-depth qualitative analysis of selected issue tracking threads from three OSS projects hosted on GitHub. Our findings indicated that discussions about usability and UX issues in OSS communities were largely influenced by the personal opinions and experiences of the participants. Moreover, the characteristics of the community may have greatly affected the focus of such discussion.", "num_citations": "13\n", "authors": ["2258"]}
{"title": "DoMoBOT: a bot for automated and interactive domain modelling\n", "abstract": " Domain modelling transforms domain problem descriptions written in natural language (NL) into analyzable and concise domain models (class diagrams) during requirements analysis or the early stages of design in software development. Since the practice of domain modelling requires time in addition to modelling skills and experience, several approaches have been proposed to automate or semi-automate the construction of domain models from problem descriptions expressed in NL. Despite the existing work on domain model extraction, some significant challenges remain unaddressed:(i) the extracted domain models are not accurate enough to be used directly or with minor modifications in software development,(ii) existing approaches do not facilitate the tracing of the rationale behind the modelling decisions taken by the model extractor, and (iii) existing approaches do not provide interactive interfaces to\u00a0\u2026", "num_citations": "10\n", "authors": ["2258"]}
{"title": "Always a Tall Order: Values and Practices of Professiona Game Designers of Serious Games for Health\n", "abstract": " Serious games for health utilize game media to help players attain health-related goals. Game designers play a crucial role in this growing game genre; they focus on particularly challenging design problems that are not well represented in the literature. In this study, we interviewed 11 professional game designers focused on games for health to explore how they perceived and approached their work. Our findings revealed how our participants considered\" success\" and the challenges of designing games for health; we also identified various methods and tools used in their practice. Additionally, we found that our participants were very user-centric and tended to focus almost equally on the problem and the solution spaces when approaching game design. The insights presented in this study will be of interest to games for health researchers and designers. This work also contributes to bridging the research-practice\u00a0\u2026", "num_citations": "9\n", "authors": ["2258"]}
{"title": "Ontology learning and its application in software-intensive projects\n", "abstract": " Software artifacts, such as requirements, design, source code, documentation, and safety-related artifacts are typically expressed using domain-specific terminology. Automated tools which attempt to analyze software artifacts in order to perform tasks such as trace retrieval and maintenance, domain analysis, program comprehension, or to service natural language queries, need to understand the vocabulary and concepts of the domain in order to achieve acceptable levels of accuracy. Domain concepts can be captured and stored as an ontology. Unfortunately, constructing ontologies is extremely time-consuming and has proven hard to automate. This dissertation proposes a novel approach for semi-automated ontology building that leverages user-defined trace links to identify candidate domain facts. It uses a variety of web-mining, Natural Language Processing, and machine learning techniques to filter and rank\u00a0\u2026", "num_citations": "8\n", "authors": ["2258"]}
{"title": "Towards Queryable and Traceable Domain Models\n", "abstract": " Model-Driven Software Engineering encompasses various modelling formalisms for supporting software development. One such formalism is domain modelling which bridges the gap between requirements expressed in natural language and analyzable and more concise domain models expressed in class diagrams. Due to the lack of modelling skills among novice modellers and time constraints in industrial projects, it is often not possible to build an accurate domain model manually. To address this challenge, we aim to develop an approach to extract domain models from problem descriptions written in natural language by combining rules based on natural language processing with machine learning. As a first step, we report on an automated and tool-supported approach with an accuracy of extracted domain models higher than existing approaches. In addition, the approach generates trace links for each model\u00a0\u2026", "num_citations": "7\n", "authors": ["2258"]}
{"title": "Teaching Modelling Literacy: An Artificial Intelligence Approach\n", "abstract": " In Model-Driven Engineering (MDE), models are used to build and analyze complex systems. In the last decades, different modelling formalisms have been proposed for supporting software development. However, their adoption and practice strongly rely on mastering essential modelling skills to develop a complete and coherent model-based system. Moreover, it is often difficult for novice modellers to get direct and timely feedback and recommendations on their modelling strategies and decisions, particularly in large classroom settings which hinders their learning. Certainly, there is an opportunity to apply Artificial Intelligence (AI) techniques to an MDE learning environment to empower the provisioning of automated and intelligent modelling advocacy. In this paper, we propose a framework called ModBud (a modelling buddy) to educate novice modellers about the art of abstraction. ModBud uses natural\u00a0\u2026", "num_citations": "6\n", "authors": ["2258"]}
{"title": "Usability of Virtual Reality Application Through the Lens of the User Community: A Case Study\n", "abstract": " The increasing availability and diversity of virtual reality (VR) applications highlighted the importance of their usability. Function-oriented VR applications posed new challenges that are not well studied in the literature. Moreover, user feedback becomes readily available thanks to modern software engineering tools, such as app stores and open source platforms. Using Firefox Reality as a case study, we explored the major types of VR usability issues raised in these platforms. We found that 77% of usability feedbacks can be mapped to Nielsen's heuristics while few were mappable to VR-specific heuristics. This result indicates that Nielsen's heuristics could potentially help developers address the usability of this VR application in its early development stage. This work paves the road for exploring tools leveraging the community effort to promote the usability of function-oriented VR applications.", "num_citations": "6\n", "authors": ["2258"]}
{"title": "Software Engineering Event Modeling using Relative Time in Temporal Knowledge Graphs\n", "abstract": " We present a multi-relational temporal Knowledge Graph based on the daily interactions between artifacts in GitHub, one of the largest social coding platforms. Such representation enables posing many user-activity and project management questions as link prediction and time queries over the knowledge graph. In particular, we introduce two new datasets for i) interpolated time-conditioned link prediction and ii) extrapolated time-conditioned link/time prediction queries, each with distinguished properties. Our experiments on these datasets highlight the potential of adapting knowledge graphs to answer broad software engineering questions. Meanwhile, it also reveals the unsatisfactory performance of existing temporal models on extrapolated queries and time prediction queries in general. To overcome these shortcomings, we introduce an extension to current temporal models using relative temporal information with regards to past events.", "num_citations": "4\n", "authors": ["2258"]}
{"title": "Leveraging Design Patterns to Support Designer-Therapist Collaboration When Ideating Brain Injury Therapy Games\n", "abstract": " Many therapists who work with patients who have had a brain injury (BI) include games to ameliorate boredom associated with repetitive rehabilitation exercises. However, designing effective, appropriate, and engaging games for BI therapy is challenging. Following a user-centered approach we created GaPBIT (Game Design Patterns for BI Therapy), a prototype tool that leveraged design patterns to support designer-therapist collaboration when ideating games for BI therapy. We observed the use of GaPBIT in six game ideation workshops that involved game designers and therapists. The tool effectively facilitated collaboration in the interdisciplinary teams. Findings also suggested that information tools like GaPBIT support but do not replace informative collaboration among designers and subject-matter experts (ie, therapists in our study). We argue that our findings and research methodology generalize to other\u00a0\u2026", "num_citations": "4\n", "authors": ["2258"]}
{"title": "A Neural Network Based Approach to Domain Modelling Relationships and Patterns Recognition\n", "abstract": " Model-Driven Software Engineering advocates the use of models and their transformations across different stages of software engineering to better understand and analyze systems under development. Domain modelling is used during requirements analysis or the early stages of design to transform informal requirements written in natural language to domain models which are analyzable and more concise. Since domain modelling is time-consuming and requires modelling skills and experience, many approaches have been proposed to extract domain concepts and relationships automatically using extraction rules. However, relationships and patterns are often hidden in the sentences of a problem description. Automatic recognition of relationships or patterns in those cases requires context information and external knowledge of participating domain concepts, which goes beyond what is possible with extraction\u00a0\u2026", "num_citations": "3\n", "authors": ["2258"]}
{"title": "Automated traceability for domain modelling decisions empowered by artificial intelligence\n", "abstract": " Domain modelling abstracts real-world entities and their relationships in the form of class diagrams for a given domain problem space. Modellers often perform domain modelling to reduce the gap between understanding the problem description which expresses requirements in natural language and the concise interpretation of these requirements. However, the manual practice of domain modelling is both time-consuming and error-prone. These issues are further aggravated when problem descriptions are long, which makes it hard to trace modelling decisions from domain models to problem descriptions or vice-versa leading to completeness and conciseness issues. Automated support for tracing domain modelling decisions in both directions is thus advantageous. In this paper, we propose an automated approach that uses artificial intelligence techniques to extract domain models along with their trace links. We\u00a0\u2026", "num_citations": "2\n", "authors": ["2258"]}
{"title": "How Do Open Source Software Contributors Perceive and Address Usability? Valued Factors, Practices, and Challenges\n", "abstract": " Usability is an increasing concern in open source software (OSS). Given the recent changes in the OSS landscape, it is imperative to examine the OSS contributors\u2019 current valued factors, practices, and challenges concerning usability. We accumulated this knowledge through a survey with a wide range of contributors to OSS applications. Through analyzing 84 survey responses, we found that many participants recognized the importance of usability. While most relied on issue tracking systems to collect user feedback, a few participants also adopted typical user-centered design methods. However, most participants demonstrated a system-centric rather than a user-centric view. Understanding the diverse needs and consolidating various feedback of end-users posed unique challenges for the OSS contributors when addressing usability in the most recent development context. Our work provided important insights\u00a0\u2026", "num_citations": "2\n", "authors": ["2258"]}
{"title": "Subtle bugs everywhere: Generating documentation for data wrangling code\n", "abstract": " Data scientists reportedly spend a significant amount of their time in their daily routines on data wrangling, ie cleaning data and extracting features. However, data wrangling code is often repetitive and error-prone to write. Moreover, it is easy to introduce subtle bugs when reusing and adopting existing code, which results in reduced model quality. To support data scientists with data wrangling, we present a technique to generate documentation for data wrangling code. We use (1) program synthesis techniques to automatically summarize data transformations and (2) test case selection techniques to purposefully select representative examples from the data based on execution information collected with tailored dynamic program analysis. We demonstrate that a JupyterLab extension with our technique can provide on-demand documentation for many cells in popular notebooks and find in a user study that users with our plugin are faster and more effective at finding realistic bugs in data wrangling code.", "num_citations": "1\n", "authors": ["2258"]}
{"title": "Traceability Network Analysis: A Case Study of Links in Issue Tracking Systems\n", "abstract": " Traceability links between software artifacts serve as an invaluable resource for reasoning about software products and their development process. Most conventional methods for capturing traceability are based on pair-wise artifact relations such as trace matrices or navigable links between two directly related artifacts. However, this limited view of trace links ignores the propagating effect of artifact connections as well as the trace link properties at a project level. In this work, we propose the use of network structures to provide another perspective from which reasoning on a collective of trace events is possible. We explore various network analysis techniques in the issue tracking system of sixty-six open source projects. Our observation reveals two salient properties of the traceability network, i.e. scale free and triadic closure. These properties provide a strong indication of the applicability of network analysis tools\u00a0\u2026", "num_citations": "1\n", "authors": ["2258"]}