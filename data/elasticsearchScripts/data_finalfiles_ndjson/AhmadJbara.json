{"title": "OPCloud: An OPM Integrated Conceptual\u2010Executable Modeling Environment for Industry 4.0\n", "abstract": " This chapter presents Methodical Approach to Executable Integrated Modeling (MAXIM) and its implementation environment, OPCloud. The MAXIM framework enables concurrent modeling of the hardware and software system aspects, avoiding the need to make the painful and information\u2010leaking transition from the abstract, qualitative conceptual system architecting stage to the concrete, detailed, quantitative design stage. The MAXIM environment aims to overcome the widening hardware\u2010software modeling gap, stepping toward bringing systems engineering and software engineering closer together. OPCloud is revolutionary in that it is the first and only modeling environment that enables modeling systems not just conceptually; the same environment also provides the modeler with the ability to proceed with detailed, quantitative design that is integrated into the qualitative model. The chapter discusses\u00a0\u2026", "num_citations": "20\n", "authors": ["2154"]}
{"title": "Model-Based Systems Engineering for Aircraft Design with Dynamic Landing Constraints Using Object-Process Methodology\n", "abstract": " We present a model-based systems engineering (MBSE) framework using object-process methodology (OPM, ISO 19450) for civil transport aircraft design with dynamic landing constraints. The framework integrates the aircraft system development life cycle processes into a holistic MBSE model, incorporating into it the specific aircraft dynamic loads model-based design (MBD) domain. Using this framework, we also perform model-based requirements analysis, validation, and verification. The model parameter set is governed by a unified format used for both the MBSE and MBD domains. The resulting model enables aircraft design processes to start being formalized at the early conceptual design stage and carry on to detailed design, adding value to system lifecycle processes by integrating and streamlining the MBSE and MBD domains into a more holistic framework with seamless transition between these two\u00a0\u2026", "num_citations": "20\n", "authors": ["2154"]}
{"title": "Model-based diagnosis with FTTell: Assessing the potential for pediatric failure to thrive (FTT) during the perinatal stage\n", "abstract": " Models have traditionally been mostly either prescriptive, expressing the function, structure and behavior of a system-to-be, or descriptive, specifying a system so it can be understood and analyzed. In this work, we offer a third kind\u2014diagnostic models. We have built a model for assessing potential pediatric failure to thrive (FTT) during the perinatal stage. Although FTT is commonly found in young children and has been studied extensively, the exact etiology is often not clear. The ideal solution is for a pediatrician to input pertinent data and information in a single tool in order to obtain some assessment on the potential etiology. We present FTTell\u2014an executable model-based medical knowledge aggregation and diagnosis tool, in which the qualitative considerations and quantitative parameters of the problem are modeled using a Methodical Approach to Executable Integrative Modeling (MAXIM)\u2014an\u00a0\u2026", "num_citations": "10\n", "authors": ["2154"]}
{"title": "Business process improvement using Object\u2010Process Methodology\n", "abstract": " For decades, business process improvement (BPI) has been a persistent and expensive concern that spans across many industry sectors. We present OPM\u2010BPI\u2014a model\u2010based method to improve business processes using ISO 19450\u2014Object\u2010Process Methodology (OPM). The approach compares favorably to state\u2010of\u2010the\u2010art business process languages and approaches, such as Business Process Modeling Notation (BPMN). An aviation manufacturing company case study of safely removing a part from an aircraft and reinstalling it demonstrates the method. We show how using OPM\u2010BPI enables removing a large portion of the supporting objects, and how related processes can be eliminated or merged, achieving considerable model simplification that represents a significantly improved, more effective and less wasteful business process.", "num_citations": "4\n", "authors": ["2154"]}
{"title": "Toward integrating systems engineering with software engineering through Object-Process Programming\n", "abstract": " Modern systems comprise hardware and software components that together provide value through enabling the functionality that the system is intended to provide. Systems engineering (SE) and software engineering (SwE) are therefore interdependent, tightly coupled, and complementary activities that must be carefully aligned and coordinated throughout the system development process. Yet, these two disciplines have historically grown quite separated from each other, with too little interaction and mutual learning. In this work, we develop and evaluate Object-Process Programming (OPP) as a proof-of-concept for a common framework that integrates SE and SwE based on ISO 19450\u2014Object-Process Methodology. The ability of designers to use the same paradigm for engineering the software, the hardware, and the system as a whole, using the same concepts and principles and the same design environment\u00a0\u2026", "num_citations": "3\n", "authors": ["2154"]}
{"title": "The Model Fidelity Hierarchy: From Text to Conceptual, Computational, and Executable Model\n", "abstract": " Model-based systems engineering applies a variety of model kinds, each with its own fidelity and exactness level. Based on experience we gained while modeling an aircraft landing gear with the objective of numerically defining its various parameters that fulfill engineering and safety requirements, we present the model fidelity hierarchy (MFH). At this hierarchy's bottom, vaguest level, is spoken language, followed by free written text, conceptual model, its augmentation with computational capabilities, and finally an executable version of that model. Using object-process methodology (OPM ISO 19450) with its computational extension, we present this hierarchy by describing the landing gear model as it progresses through these levels, and the kinds of mistakes revealed while transitioning from one level to the next. The MFH, identified and defined in this article, is made possible by using OPM, which enables these\u00a0\u2026", "num_citations": "1\n", "authors": ["2154"]}
{"title": "ICSD: Interactive Visual Support for Understanding Code Control Structure\n", "abstract": " Code comprehension is a mental process in any maintenance activity. It becomes decisive in large methods. Such methods are burdened with programming constructs as lines of code (LOC) correlate with McCabe's cyclomatic complexity (MCC). This makes it hard to capture their code, as they span many pages even in large screens, and as a result hinders grasping their structural properties that might be key for maintenance. Visualization can assist in comprehending complex systems. It has been shown that control structure diagrams (CSDs) could be useful to better understand and discover structural properties, such as code regularity, of such large methods. IDEs and development tools have been moving from desktops to the Web so as to benefit from this ubiquitous environment that provides instant collaboration and easier integration.This paper presents ICSD, an interactive Web-based tool that implements\u00a0\u2026", "num_citations": "1\n", "authors": ["2154"]}
{"title": "Characterization of the Linux configuration system\n", "abstract": " Variability in software systems is often expressed using the C pre-processor (CPP). However, CPP has been identified as problematic. We argue that CPP is not as bad as its reputation suggests, and indeed many large systems use it effectively. We perform a deep analysis of the Linux configuration options, and find significant inconsistencies between the source code and the configuration control system. We found that the distribution of the source code config options is heavy-tailed, with some options having more than a thousand instances in the code. Such wide use seems to imply a massive coupling between different parts of the system. However, we argue that employing a purely syntactic analysis, as is commonly done in recent work, is insufficient. By involving semantic considerations, we find that in reality the coupling induced by the very frequent options is limited. We believe that deep characterization as\u00a0\u2026", "num_citations": "1\n", "authors": ["2154"]}