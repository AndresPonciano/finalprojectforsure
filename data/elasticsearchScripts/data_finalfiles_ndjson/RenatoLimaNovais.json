{"title": "Information visualization for emergency management: A systematic mapping study\n", "abstract": " Background: Emergency management (EM) refers to the ability to deal with emergency tasks in different phases and iterations. To do this, each task requires many and different types of information coming from several sources related to the incident. As people working in an emergency situation are generally under stress and have to make quick and effective decisions, they need to assimilate the received information in an easy and intuitive way. Information visualization (InfoVis) is the study of visual representations of abstract data to reinforce human cognition to understand these data through 2D computer screens. It is frequently used to analyze and understand the huge amount of multidimensional data produced in an emergency.Objective: This study analyzes how researchers use information visualization tools to improve emergency management. Our general objective is to map the area examining both the\u00a0\u2026", "num_citations": "37\n", "authors": ["944"]}
{"title": "Sourceminer evolution: A tool for supporting feature evolution comprehension\n", "abstract": " Program comprehension is an essential activity to perform software maintenance and evolution. Comprehensibility often encompasses the analysis of individual logical units, called features, which are often scattered through many program modules. Understanding how the feature code is implemented along the software evolution history is essential, for instance, to perform refactoring activities. However, existing tools do not provide means to comprehend the feature code evolution. To overcome this shortcoming, this paper presents a tool called Source Miner Evolution (SME) that provides multiple interactive and coordinated views to comprehend feature code evolution. SME implements a feature-sensitive comparison of multiple program versions. Our usability assessment with experienced developers indicated that SME allows them to efficiently perform recurring comprehension tasks on evolving feature code. The\u00a0\u2026", "num_citations": "15\n", "authors": ["944"]}
{"title": "Reliable and smart decision support system for emergency management based on crowdsourcing information\n", "abstract": " Command and control centres face the challenge of quickly obtaining accurate information about emergencies they should response to. Conversely, crowdsourcing information and mobile technologies offer great potential for better engaging eyewitnesses in emergency and crisis management processes. This paper describes the vision and the realisation of the RESCUER system, a smart and interoperable decision support system for emergency and crisis management based on mobile crowdsourcing information. Eight evaluation exercises with end users were performed during the project duration, in addition to technical verifications of the individual system components. The results of the evaluation exercises were quite positive and helped to continuously improve and extend the system.", "num_citations": "12\n", "authors": ["944"]}
{"title": "The problem of conceptualization in god class detection: agreement, strategies and decision drivers\n", "abstract": " The concept of code smells is widespread in Software Engineering. Despite the empirical studies addressing the topic, the set of context-dependent issues that impacts the human perception of what is a code smell has not been studied in depth. We call this the code smell conceptualization problem. To discuss the problem, empirical studies are necessary. In this work, we focused on conceptualization of god class. God class is a code smell characterized by classes that tend to centralize the intelligence of the system. It is one of the most studied smells in software engineering literature. A controlled experiment that extends and builds upon a previous empirical study about how humans detect god classes, their decision drivers, and agreement rate. Our study delves into research questions of the previous study, adding visualization to the smell detection process, and analyzing strategies of detection. Our findings\u00a0\u2026", "num_citations": "11\n", "authors": ["944"]}
{"title": "Visualization mechanisms for crowdsourcing information in emergency coordination\n", "abstract": " To perform emergency coordination, people in a command centre need to process a large amount of data about the incident to make decisions, generally, under time pressure. A main challenge is to quickly obtain contextual information about the situation, which can be obtained from people in the place of the incident, in a crowdsourcing manner. This paper presents our investigation about visualization mechanisms to support command centres on analysing crowdsourcing information regarding emergency situations. As contributions, we highlight: 1) discussion of existing visualization mechanisms and their support on emergency management; 2) prototype of the Emergency Response Toolkit (ERTK), a set of tools to support command centres on using information from the crowd, eg in large-scale events; and 3) evaluation of ERTK and its visualization mechanisms with 11 emergency experts, in Brazil, Austria and\u00a0\u2026", "num_citations": "8\n", "authors": ["944"]}
{"title": "Experimentally assessing the combination of multiple visualization strategies for software evolution analysis\n", "abstract": " Software engineers need to comprehend large amounts of data to maintain software. Software Visualization is an area that helps users to analyze software through the use of visual resources. It can be effectively used to understand the large amount of data produced during software evolution. A key challenge in the area is to create strategies to consistently visualize the many software attributes, modules and versions produced during its lifecycle. Most of the current visualization strategies seek to present data as a whole, including all available versions of the software in one visual scene. The area lacks strategies visualizing software in detail through the analysis of the evolution of specific software modules. Both strategies are useful, and should be selected according to the task at hand. This work focuses on combining software evolution visualization strategies, experimentally validating the benefits of the approach\u00a0\u2026", "num_citations": "7\n", "authors": ["944"]}
{"title": "Timeline matrix: an on demand view for software evolution analysis\n", "abstract": " Evolu\u00e7\u00e3o de software \u00e9 um dos t\u00f3picos mais importantes da pesquisa moderna em engenharia de software. Muitos trabalhos de visualiza\u00e7\u00e3o de software t\u00eam sido propostos para ajudar na an\u00e1lise dos dados de evolu\u00e7\u00e3o. Estes trabalhos, normalmente, apresentam uma vis\u00e3o global ou um retrato instant\u00e2neo da evolu\u00e7\u00e3o do software. Muitos deles oferecem detalhes sob demanda, por\u00e9m apenas atrav\u00e9s de tooltips ou acesso ao c\u00f3digo fonte. Neste trabalho, apresentamos a vis\u00e3o TimeLine Matrix, a qual funciona sob demanda de outras vis\u00f5es. Uma vez selecionado o elemento de interesse, esta vis\u00e3o mostra a evolu\u00e7\u00e3o completa deste elemento. Ela permite assim navegar facilmente na hist\u00f3ria, e fazer compara\u00e7\u00f5es entre at\u00e9 tr\u00eas elementos. Um exemplo de uso dessa vis\u00e3o em um cen\u00e1rio real \u00e9 apresentado, mostrando como ela pode ajudar a resolver tarefas de compreens\u00e3o de evolu\u00e7\u00e3o de software.", "num_citations": "6\n", "authors": ["944"]}
{"title": "What Questions Developers Ask During Software Evolution? An Academic Perspective\n", "abstract": " Many studies on software evolution propose new approaches. One needs to validate the approaches. For that, it is common to conduct experimental studies where participants have to answer questionnaires with questions related to the research topic. Those questions must be relevant, otherwise the validation may be invalid. In this context, this study investigates which questions (and so the tasks) developers really answer (and perform) during software evolution. To this end, a survey comprised of 11 questions was applied to 42 participants from academia. This study allowed to derive an initial model on questions developers ask during software evolution, and to understand how the participants agreed with the relevance of the questions.", "num_citations": "5\n", "authors": ["944"]}
{"title": "Cross-platform multimedia application development: for mobile, web, embedded and IoT with Qt/QML\n", "abstract": " Qt framework is a cross-platform SDK and a technology strategy that lets you quickly and cost-effectively design, develop, deploy, and maintain software while delivering a seamless user experience across all devices. One of the main focuses of the Qt framework is the development of powerful multimedia applications in a simple way through Qt Modeling Language (QML). It allows to develop applications/libraries only once and compile the same source code to multiple platforms. Qt is widely used by several companies around the world, however is still unknown in Brazil. This short-course has the mission to explore the use of Qt/QML for the development of Cross-platform multimedia applications.", "num_citations": "4\n", "authors": ["944"]}
{"title": "Uma an\u00e1lise do uso da ontologia ims ld na constru\u00e7ao de modelos conceituais para e-learning\n", "abstract": " Dificuldades na fase de elicita\u00e7\u00e3o de requisitos constituem um problema que afeta a modelagem de software. Erros nesta fase d\u00e3o origem a modelos conceituais que n\u00e3o representam corretamente o interesse do usu\u00e1rio. Por sua vez, ontologias de dom\u00ednio podem ser usadas para minimizar esse problema. O objetivo deste estudo \u00e9 mostrar que o uso da ontologia IMS LD pode resultar em software educacional mais correto. Para tal, foram realizados estudos experimentais em que a abordagem tradicional de elicita\u00e7\u00e3o de requisitos foi confrontada com a abordagem que usa esta ontologia. Os resultados foram avaliados atrav\u00e9s de an\u00e1lises estat\u00edsticas. O principal resultado deste estudo demonstra a viabilidade do uso da ontologia IMS LD como subs\u00eddio na modelagem conceitual.", "num_citations": "4\n", "authors": ["944"]}
{"title": "On the use of a multiple-visualization approach to manage software bugs\n", "abstract": " Software testing has been reported as one of the main responsible for quality assurance in a software project. In this effect, a series of techniques, methods, and tools can be found in the literature. In this work, we propose an approach to manage bugs using multiple software visualization. We developed an eclipse-based plug-in to report bugs. As a result of this activity, the collected bugs may be bound with the software elements. Such a binding aids the engineers responsible for fixing bugs to know the exact point where the reported bug was installed. We used multiple views with different perspectives to analyze and understand the bugs in the source code. As a proof of concept, we simulated its use in an open source system.", "num_citations": "4\n", "authors": ["944"]}
{"title": "An ontology-based approach to analyzing the occurrence of code smells in software\n", "abstract": " Code Smells indicate potential flaws in software design that can lead to costly consequences. To mitigate the bad effects of Code Smells, it is necessary to detect and fix defective code. Programmatic processing of Code Smells is not new. Previous works have focused on detection and representation to support the analysis of faulty software. However, such works are based on a syntactic operation, without taking advantage on semantic properties of the software. On the other hand, there are several ways to provide semantic support in software development as a whole. Ontologies, for example, have recently been usedl. The application of ontologies for inferring semantic mechanisms to aid software engineers in dealing with smells may be of great value. As little attention has been given to this, we propose an ontology-based approach to analyze the occurrence of Code Smells in software projects. First, we present a comprehensive ontology that is capable of representing Code Smells and their association with software projects. We also introduce a tool that can manipulate our ontology in order to provide processing of Code Smells as it mines software source-code. Finally, we conducted an initial evaluation of our approach in a real usage scenario with two large open-source software repositories.", "num_citations": "3\n", "authors": ["944"]}
{"title": "Quality Attributes Analysis in a Crowdsourcing-based Emergency Management System.\n", "abstract": " In an emergency situation where the physical integrity of people is at risk, a mobile solution should be easy to use and trustworthy. In order to offer a good user experience and to improve the quality of the app, we should evaluate characteristics of usability, satisfaction, and freedom from risk. This paper presents an experiment whose objective is to evaluate quality attributes in a crowdsourcing-based emergency management system. The quality attributes evaluated are: appropriateness recognisability, user interface aesthetics, usefulness, trust, and health and safety risk mitigation. The experiment was designed following the Goal/Question/Metric approach. We could evaluate the app with experts from the area of emergency. The results showed that the participants thought the app was well designed, easy to understand, easy to learn, and easy to use. This evaluation ensured the application improvement, and also the evaluation process adopted.", "num_citations": "3\n", "authors": ["944"]}
{"title": "Using evowave for logical coupling analysis of a long-lived software system\n", "abstract": " Logical coupling reveals implicit dependencies between program entities, by measuring how often they changed together during development. The comprehension of how the logical coupling property manifests itself in the project is a key activity. Software Evolution Visualization (SEV) has been a promising approach to this end. However, this is not trivial, since SEV has to handle different software entities and attributes, and still deals with the temporal dimension of evolution. In this sense, we have been working on the specification, development and evaluation of a novel SEV tool, called EVOWAVE. This novel visualization metaphor is able to visualize different types of data generated in software evolution using both overview-based and detail-based approaches. It can be applied to different software engineering tasks and domains. In this paper, we present a logical coupling study we conducted in order to evaluate this tool in this important domain.", "num_citations": "3\n", "authors": ["944"]}
{"title": "Using EVOWAVE to Analyze Software Evolution.\n", "abstract": " Software evolution produces large amounts of data which software engineers need to understand for their daily activities. The use of software visualization constitutes a promising approach to help them comprehend multiple aspects of the evolving software. However, portraying all the data is not an easy task as there are many dimensions to the data (eg time, files, properties) to be considered. This paper presents a new software visualization metaphor inspired by concentric waves, which gives information about the software evolution in different levels of detail. This new metaphor is able to portray large amount of data and may also be used to consider different dimensions of the data. It uses the concepts of the formation of concentric waves to map software evolution data generated during the waves formation life cycle. The metaphor is useful for exploring and identifying certain patterns in the software evolution. To evaluate its applicability, we conducted an exploratory study to show how the visualization can quickly answer different questions asked by software engineers when evolving their software.", "num_citations": "3\n", "authors": ["944"]}
{"title": "Investigating the relationship between code smell agglomerations and architectural concerns: similarities and dissimilarities from distributed, service-oriented, and mobile systems\n", "abstract": " Context: software architects often decide on strategies before incorporating an asset (eg, components) in software systems. At the same time, they are responsible for preventing code and architectural degradation caused by design problems. Problem: groups of code smells (aka agglomeration of code smells) have been recognized as a source of design problems, but no previous study has analyzed the relationship between such agglomerations and different types of software. Different types of software have different needs in terms of implementation of architectural concerns, which can lead to consequential variations in the way how code smells agglomerate. Goal: this study aims to understand how a varied set of projects and their respective architectural concerns relates to code smells agglomerations. Method: our study analyses the history of 15 Open Source Software (OSS) projects split as three groups of\u00a0\u2026", "num_citations": "2\n", "authors": ["944"]}
{"title": "Investigating the Use of Visual Analytics to Support Decision-Making in Crisis Management: A Multi-Method Approach.\n", "abstract": " People working in a crisis are generally under stress while having to make the right decisions at the right time. They have to process large amount of data as well as assimilate the received information in an intuitive way. Like Crisis Management (CM) itself, Visual Analytics (VA) is a multi-disciplinary research area and is potentially useful to analyze and understand the huge amount of multidimensional data produced in a crisis. Our work investigates how researchers and practitioners are using VA in decision-making in CM. We aim to develop a computational reference model based on VA. For that, we carried out a multi-method approach to collect and analyze CM data. This paper presents our multi-method investigation on the use of VA in CM context. It firstly reports on a systematic mapping study to analyze the available information visualization tools and their applications in CM. To complement this information, we report on questionnaires and ethnographic studies applied during the large events held in Brazil in recent years. Then, we analyze existing tools for visualizing crisis information. Lastly, we analyze the data gathered from interviews with six professional crisis managers. The compiled results show that the full potential of VA is not being applied in the state-of-the-art and state-ofthe-practice. We consider that further research into the application of VA is required to improve decisionmaking processes in CM.", "num_citations": "2\n", "authors": ["944"]}
{"title": "Software evolution visualization: Status, challenges, and research directions\n", "abstract": " Software Visualization is the field of Software Engineering that aims to help people to understand software through the use of visual resources. It can be effectively used to analyze and understand the large amount of data produced during software evolution. Several Software Evolution Visualization (SEV) approaches have been proposed. The goals of the proposed approaches are varied, and they try to help programmers and managers to deal with software evolution in their daily software activities. Despite their goals, their applicability in real development scenarios is questionable. In this chapter, the authors discuss the current state of the art and challenges in software evolution visualization, presenting issues and problems related to the area, and they propose some solutions and recommendations to circumvent them. Finally, the authors discuss some research directions for the SEV domain.", "num_citations": "2\n", "authors": ["944"]}
{"title": "An Approach for Semantically-Enriched Recommendation of Refactorings Based on the Incidence of Code Smells\n", "abstract": " Code smells are symptoms of bad decisions on the design and development of software. The occurrence of code smells in software can lead to costly consequences. Refactorings are considered adequate resources when it comes to reducing or removing the undesirable effects of smells in software. Ontologies and semantics can play a substantial role in reducing the interpretation burden of software engineers as they have to decide about adequate refactorings to mitigate the impact of smells. However, related work has given little attention to associating the recommendation of refactorings with the use of ontologies and semantics. Developers can benefit from the combination of code smells detection with a semantically-oriented approach for recommendation of refactorings. To make this possible, we expand the application of our previous ontology, ONTOlogy for Code smEll ANalysis (ONTOCEAN), to\u00a0\u2026", "num_citations": "2\n", "authors": ["944"]}
{"title": "Supporting Decision Making during Emergencies through Information Visualization of Crowdsourcing Emergency Data.\n", "abstract": " Decision making during an emergency response requires having the right information provided in the right way to the right people. Relevant information about an emergency can be provided by several sources, including the crowd at the place where the emergency is happening. A big challenge is how to avoid overwhelming the decision makers with unnecessary or redundant information provided by the crowd. Our hypothesis is that appropriate information visualization techniques improve the understanding of information sent by a crowd during an emergency. This work presents an approach for emergency information visualization, gathered through crowdsourcing, which improves context-aware decision making by keeping a real-time emergency state board. This approach was implemented in ERTK, as a proof of concept, and evaluated with 15 emergency management experts in Brazil. The yielded results show that our approach has the potential to assist a contextaware decision making during an emergency response.", "num_citations": "2\n", "authors": ["944"]}
{"title": "Analyzing Distributions of Emails and Commits from OSS Contributors through Mining Software Repositories\n", "abstract": " Context: Distributed software development is a modern practice in software industry. This is especially true in Open Source Software (OSS) community. In this context, developers are normally distributed around the world. In addition, most of them work for free and without or with low coordinating. Understanding how developers\u2019 practices are on those projects may guide communities to successfully manage their projects. Goal: We mined two repositories of the Apache Httpd project in order to gather information about its developers\u2019 behavior. Method: We developed an approach to cross data gathered from mail list and source code repository through mining techniques. The approach uses software visualization to analyze the mined data. We conducted an experimental evaluation of the approach to assess the behavioral patterns from OSS development community. Results: Our results show Apache developers\u2019 behavior patterns. In addition, we deepen the analysis of the Preferred Representational System of four top developers presented by Cola\u00e7o et. al in (Cola\u00e7o et al., 2010). Conclusion: The use of data mining and software visualization to analyze data from different sources can spot important properties of development processes.", "num_citations": "2\n", "authors": ["944"]}
{"title": "On the design of a contextual emergency state builder with multiple data sources\n", "abstract": " Emergencies often happen in a random and unexpected way, and operational forces must take immediate actions to reduce damages to the affected properties and people. Contextual information provides emergency response teams with an overview of the ongoing emergency and allows better decision making, such as the coordination of operational forces and resources provisioning. In this paper, we present the Emergency State Builder (ESB), acentral component we designed to aggregate contextual information about emergencies from multiple data sources with emphasis on fires, explosions, gas leaks and environmental damage incidents. The ESB is our answer to the challenge and providing timely, reliable and relevant contextual information to other components of a emergency management platform, called RESCUER, and, ultimately, to the emergency response teams. To illustrate the applicability of this\u00a0\u2026", "num_citations": "1\n", "authors": ["944"]}
{"title": "Um experimento com a ontologia ims ld na constru\u00e7 ao de modelos conceituais para e-learning\n", "abstract": " Difficulties in the early stages of software development can negatively affect conceptual modeling. Errors at this stage (modeling) give rise to conceptual models that do not correctly represent the interests of users. In turn, domain ontologies can be used to minimize such errors. The purpose of this study is to show that the use of the IMS LD ontology can help in the construction of a more correct conceptual model for e-learning. For this, an experimental study was carried out in which the traditional approach of constructing the conceptual model was confronted with the approach that uses this ontology. The results were evaluated through statistical analysis. The main result of this study demonstrates, with statistical significance, that the use of the IMS LD ontology helps in the conceptual modeling.Resumo. Dificuldades nas fases iniciais de desenvolvimento de software podem afetar de forma negativa a modelagem conceitual. Erros nesta fase (modelagem) dao origem a modelos conceituais que nao representam corretamente os interesses dos usu\u00e1rios. Por sua vez, ontologias de dom\u0131nio podem ser usadas para minimizar esses erros. O objetivo deste estudo \u00e9 mostrar que o uso da ontologia IMS LD pode ajudar na constru\u00e7ao de modelo conceitual mais correto para e-learning. Para tal, foi realizado um estudo experimental em que a abordagem tradicional de constru\u00e7ao do modelo conceitual foi confrontada com a abordagem que usa essa ontologia. Os resultados foram avaliados atrav\u00e9s de an\u00e1lises estat\u0131sticas. O principal resultado deste estudo demonstra, com signific\u00e2ncia estat\u0131stica, que o uso da ontologia IMS LD ajuda na modelagem\u00a0\u2026", "num_citations": "1\n", "authors": ["944"]}
{"title": "Challenges in crowd communication for emergency management\n", "abstract": " The public communication during an emergency is a key step on emergency management. The maintenance of a clear communication with the involved parties is essential for avoiding panic or misguidance. One challenge is to find out who are the targets such communication which are relevant information to them and which communication channels they can be achieved. Existing public communication solutions were not designed thinking in the variability of message according the interested, concerned only with the disclosure of a single message independent of relevance of your content for each stakeholder. However, variability in the message content is important for ensuring that each stakeholder receives relevant information for him, respecting the good principles of communication in crisis situations. This paper presents the challenges of dissemination of public communication to different targets on the crowd\u00a0\u2026", "num_citations": "1\n", "authors": ["944"]}
{"title": "Uma arquitetura para ferramentas de Aspect Mining\n", "abstract": " This paper describes an exploratory study that was carried out to evaluate some aspect mining tools. Besides some tools, we investigated some generative techniques of aspect mining. Based on our study, we proposed an architecture to lead with concerns in existing and new software.", "num_citations": "1\n", "authors": ["944"]}