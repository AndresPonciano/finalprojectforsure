{"title": "Minimizing Technical Debt: Developer's viewpoint\n", "abstract": " Often we find it difficult to adapt to any changes during later phases of a software development project. Primary reason for this is rigidity in design and code which do not allow major changes to be incorporated. This inflexibility substantially increases the cost of post-delivery enhancement and maintenance and is termed as Technical Debt. As Technical Debt cannot be eliminated completely, we need to reduce its burden. Many practitioners, especially from agile community, have suggested some practices to avoid or overcome the Technical Debt. This paper explores the methods for relief from Technical Debt and proposes thirteen steps that a developer should follow to minimize technical debt. These steps have proved to be effective when implemented in projects as discussed in this paper. (5 pages)", "num_citations": "14\n", "authors": ["1345"]}
{"title": "Scrum+:: Is it \u201cScrumBut\u201d or \u201cScrumAnd\u201d\n", "abstract": " In this paper we analyze the challenges we may encounter by tweaking core practices of Scrum framework (ScrumBut) or benefits we may get by blending some non-Scrum practices with Scrum framework (ScrumAnd). Detailed analysis is carried out on ScrumBut and ScrumAnd and their impact on project success or failure is studied. As it is not always easy to conclude if any Agile project is following ScrumBut or ScromAnd, we discuss two principles, derived from OOD, to distinguish between the two. Use of these principles is illustrated by application on real life scenarios. By application of these principles, a Scrum Practitioner can easily find out the methodology used in a particular project implementation.", "num_citations": "9\n", "authors": ["1345"]}
{"title": "Software Engineering Practices for Minimizing Technical Debt\n", "abstract": " Often we find it difficult to incorporate any changes in a software project during later phases of its development, or during post-delivery maintenance. Primary reason for this is inflexibility in design and code which makes it difficult for changes to be incorporated. This inflexibility substantially increases the cost of making changes and this metaphor has been termed as Technical Debt [1]. While Technical Debt cannot be eliminated completely, its burden needs to be reduced. Many practitioners, especially from agile community, have suggested some practices to avoid or eliminate Technical Debt. This paper discusses methods for relief from Technical Debt and proposes seven software engineering practices that a developer can follow to minimize Technical Debt. These practices have been used and found to be effective when implemented in projects as discussed here.", "num_citations": "6\n", "authors": ["1345"]}
{"title": "Software Architecture for large/critical applications\n", "abstract": " Software Architecture provides a blue print for developing a system and plays a vital role in addressing quality related aspects such as performance, security, scalability etc. [1]. Architecture of a software system has to ensure that design is able to support all requirements as well as able to incorporate any changes requested by the customer. This paper discusses the role of architecture and design on project failure rate and also suggests the steps that need to be added in architecture and design in order to cope up with changes in business requirements and evolution of technology to avoid such failures.", "num_citations": "3\n", "authors": ["1345"]}
{"title": "Design and Development of Optimal Software Architecture Using Grounded Theory\n", "abstract": " The Architecture provides a blue print of developing system and plays a vital role to address many non-functional features such as performance, security, modifiability etc. It ensures that design will be able to support all requirements as well as able to support any changes that may be proposed. This requires planned design.Usually anticipating the change leads to complex design and requires more time and eventually maintenance of system turns to be more complicated. Agile approach, which advocates clear and simple design only for current requirement/change, emphasizes on evolutionary design. However on the other side evolutionary design may also lead to disaster since it grows as the system development and gradually in this case also it become really hard to alter code for new change.", "num_citations": "1\n", "authors": ["1345"]}
{"title": "A Systematic Method to Evaluate the Software Engineering Practices for Minimizing Technical Debt\n", "abstract": " Often we find it difficult to incorporate any changes in a software project during later phases of its development, or during post-delivery maintenance. Primary reason for this is inflexibility in design and code which makes it difficult for changes to be incorporated. This inflexibility substantially increases the cost of making changes and this metaphor has been termed as Technical Debt [1].While Technical Debt cannot be eliminated completely, its burden needs to be reduced. Many practitioners, especially from agile community, have suggested some practices to avoid or eliminate Technical Debt. This paper discusses on a systematic method to evaluate the six software engineering practices that a developer can follow to minimize Technical Debt. These practices have been used and found to be effective when implemented in projects as discussed here.", "num_citations": "1\n", "authors": ["1345"]}