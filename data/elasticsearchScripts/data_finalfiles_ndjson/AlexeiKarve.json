{"title": "Dynamic scaling of web applications in a virtualized cloud computing environment\n", "abstract": " Scalability is critical to the success of many enterprises currently involved in doing business on the Web and in providing information that may vary drastically from one time to another. Maintaining sufficient resources just to meet peak requirements can be costly. Cloud computing provides a powerful computing model that allows users to access resources on-demand. In this paper, we will describe a novel architecture for the dynamic scaling of Web applications based on thresholds in a virtualized cloud computing environment. We will illustrate our scaling approach with a front-end load-balancer for routing and balancing user requests to Web applications deployed on Web servers installed in virtual machine instances. A dynamic scaling algorithm for automated provisioning of virtual machine resources based on threshold number of active sessions will be introduced. The on-demand capability of the cloud to rapidly\u00a0\u2026", "num_citations": "424\n", "authors": ["1933"]}
{"title": "Dynamic placement for clustered web applications\n", "abstract": " We introduce and evaluate a middleware clustering technology capable of allocating resources to web applications through dynamic application instance placement. We define application instance placement as the problem of placing application instances on a given set of server machines to adjust the amount of resources available to applications in response to varying resource demands of application clusters. The objective is to maximize the amount of demand that may be satisfied using a configured placement. To limit the disturbance to the system caused by starting and stopping application instances, the placement algorithm attempts to minimize the number of placement changes. It also strives to keep resource utilization balanced across all server machines. Two types of resources are managed, one load-dependent and one load-independent. When putting the chosen placement in effect our controller\u00a0\u2026", "num_citations": "242\n", "authors": ["1933"]}
{"title": "Adaptive, model-driven autoscaling for cloud applications\n", "abstract": " Applications with a dynamic workload demand need access to a flexible infrastructure to meet performance guarantees and minimize resource costs. While cloud computing provides the elasticity to scale the infrastructure on demand, cloud service providers lack control and visibility of user space applications, making it difficult to accurately scale the underlying infrastructure. Thus, the burden of scaling falls on the user.", "num_citations": "148\n", "authors": ["1933"]}
{"title": "Reliable and scalable image transfer for data centers with low connectivity using redundancy detection\n", "abstract": " A system and method for efficiently transferring virtual machine images across nodes in a cloud computing environment, includes analyzing each image on each node to create hash code clusters and a similarity matrix. An instruction to transfer an image from a source node to a target node is received. The clusters and the similarity matrix are used to determine to what extent the data from the image is already on the source node, or on any other node, and further determines the cost and speed of transferring such data to the target node. An optimal transfer plan is generated, and data that is not already on the target node is transferred to the target node from the most efficient node on which it is available, according to the optimal transfer plan.", "num_citations": "104\n", "authors": ["1933"]}
{"title": "Method and apparatus for template-based provisioning in a service delivery environment\n", "abstract": " A method for automated provisioning of computing resources in a distributed computing network includes obtaining a data structure representing a resource dependency characterization of an application to be implemented over the distributed computing network, wherein the data structure indicates a set of resources to be deployed, obtaining a template that represents a predefined network topology for supporting deployment of the set of resources, mapping the set of resources represented in the data structure to the template so as to satisfy a set of component requirements to generate a deployment map, and provisioning the set of resources on a plurality of computers based on the deployment map to implement the application over the distributed computing network.", "num_citations": "99\n", "authors": ["1933"]}
{"title": "Method and apparatus for policy-based provisioning in a virtualized service delivery environment\n", "abstract": " In a distributed computing network having computers interconnected with each other, a method and apparatus of providing policy based provisioning of middleware components to provide a solution for a service. With this invention, the middleware components that are necessary to provide the solution are determined. Then, the configurations of the computers are determined so as to satisfy a selected configuration policy for a selected solution. Finally, the necessary middleware components are installed on the configured computers so that the solution can be provided. Some of the selected configuration policies are: maximization of server utilization policy, provisioning of software components requiring external access based on availability of external resources, and minimization of total time to install said determined components. The progress of installation of the middleware components can also be monitored to\u00a0\u2026", "num_citations": "86\n", "authors": ["1933"]}
{"title": "Method and apparatus for selective and quantitative rights management\n", "abstract": " A method, apparatus, and computer implemented instructions for managing rights to a service in a data processing system. A request is received from a user for the service. The rights to the service are identified. Content for the service is received. The content is selectively modified based on the rights identified. The content is sent to the user.", "num_citations": "76\n", "authors": ["1933"]}
{"title": "Expediting the provisioning of virtual machines based on cached repeated portions of a template\n", "abstract": " A computer-implemented method includes: receiving, by a computing device, a template for creating a virtual machine (VM) instance; separating, by the computing device, the template into a repeated portion and a unique portion; determining, by the computing device, whether the repeated portion is stored in a cache; creating, by the computing device and based on determining that the repeated portion is stored in the cache, the VM instance using the repeated portion stored in the cache; completing, by the computing device, the unique portion of the VM instance to create a completed VM instance; and deploying, by the computing device, the completed VM instance.", "num_citations": "51\n", "authors": ["1933"]}
{"title": "Automatic audio adjustment system based upon a user's auditory profile\n", "abstract": " A system for adjusting audio output including a transmitter unit adapted to be carried by a user and a sound generating system. The transmitter unit includes a memory and a signal transmitter. The sound generating system includes a sound generator, a signal receiver, means for altering a sound signal from the signal generator based upon a signal transmitted by the transmitter to the receiver, and speakers connected to the altering means.", "num_citations": "50\n", "authors": ["1933"]}
{"title": "Solution-based deployment of complex application services on a cloud\n", "abstract": " Managing and containing runaway IT costs for solution deployment is one of the top priorities for enterprises. Cloud Computing, with its on-demand provisioning capability on shared resources, has emerged as a new paradigm for reducing IT costs. In this paper, we describe a solution-based provisioning mechanism to automate the deployment of complex application services on a Cloud infrastructure. We introduce the concept of Composite Appliance and show how it can be used to deploy a complete solution and to simplify management tasks. We illustrate the advantages of our approach with a prototype solution consisting of two-tier application services that are deployed and configured automatically on virtual machine instances without manual intervention.", "num_citations": "46\n", "authors": ["1933"]}
{"title": "Modeling the impact of workload on cloud resource scaling\n", "abstract": " Cloud computing offers the flexibility to dynamically size the infrastructure in response to changes in workload demand. While both horizontal and vertical scaling of infrastructure is supported by major cloud providers, these scaling options differ significantly in terms of their cost, provisioning time, and their impact on workload performance. Importantly, the efficacy of horizontal and vertical scaling critically depends on the workload characteristics, such as the workload's parallelizability and its core scalability. In today's cloud systems, the scaling decision is left to the users, requiring them to fully understand the tradeoffs associated with the different scaling options. In this paper, we present our solution for optimizing the resource scaling of cloud deployments via implementation in OpenStack. The key component of our solution is the modelling engine that characterizes the workload and then quantitatively evaluates\u00a0\u2026", "num_citations": "45\n", "authors": ["1933"]}
{"title": "Scalability and performance of web applications in a compute cloud\n", "abstract": " Scalability and performance are key factors to the success of many enterprises involved in doing business on the web. Maintaining sufficient web resources just to meet performance during peak demands can be costly. Compute Cloud provides a powerful environment to allow dynamic scaling of web applications without the needs for user intervention. In this paper, we present a case study on the scalability and performance of web applications in a Cloud. We describe a novel dynamic scaling architecture with a front-end load-balancer for routing user requests to web applications deployed on virtual machine instances with the goal of maximizing resource utilization in instances while minimizing total number of instances. A scaling algorithm for automated provisioning of virtual resources based on threshold number of active user sessions will be introduced. The on-demand capability of the Cloud to rapidly provision\u00a0\u2026", "num_citations": "44\n", "authors": ["1933"]}
{"title": "Dynamic application placement with allocation restrictions and even load distribution\n", "abstract": " A solution to a variant of a class constrained multiple knapsack problem. Previous solutions require that memory demand of every application be identical and do not consider minimizing placement changes. Previous techniques do not consider optimizing placement to improve load balancing as is described subsequently. Thus, the present invention provides systems, methods and apparatus, encapsulated in software, to provide the dynamic placement of application instances on a heterogeneous cluster of server machines. It depends on the existence of a visible and controllable platform, systems management and other business services that signal events and accept commands. It provides dynamically placing applications on servers such as to maximize a total amount of satisfied application demands, minimize a number of placement changes from a current placement, and minimize imbalance of load\u00a0\u2026", "num_citations": "43\n", "authors": ["1933"]}
{"title": "Scaling a cloud infrastructure\n", "abstract": " A method for scaling a cloud infrastructure, comprises receiving at least one of resource-level metrics and application-level metrics, estimating parameters of at least one application based on the received metrics, automatically and dynamically determining directives for scaling application deployment based on the estimated parameters, and providing the directives to a cloud service provider to execute the scaling.", "num_citations": "42\n", "authors": ["1933"]}
{"title": "Method and apparatus for a migration assistant\n", "abstract": " Consistent and systematic location of program files and associated data files is enhanced by use of a software module that carries out migration of program files and associated data files in accordance with a stored set of policies on what programs are acceptable: what versions are current and/or obsolete and what locations for program and data files are acceptable. An optional feature is a resident program that monitors the installation process for programs and the creation process for files and carries out organization policies with regard to whether the program in question is approved and/or whether the file in question is located in an approved location.", "num_citations": "33\n", "authors": ["1933"]}
{"title": "System and method supporting application solution composition on cloud\n", "abstract": " Disclosed is a method, computer-program product and a system to compose an application solution on a cloud-computing platform for a user. The method includes, in response to input from the user, selecting at least one predetermined template that includes a hardware and software instance of a data processing system that is implementable as an solution on a cloud platform; comparing the at least one selected template against a set of constraints; establishing an instance of a cloud based solution for the user based on the selected template; and validating the established cloud based solution against user-uploaded information such as software and workloads to ensure that the solution satisfies requirements of the user, such as both technical and financial requirements of the user.", "num_citations": "31\n", "authors": ["1933"]}
{"title": "Secure speech\n", "abstract": " A method, apparatus and computer product for masking speech. The system includes a signal acquiring apparatus for generating an electrical signal representative of the speech; a processing apparatus for using the electrical signal to provide an audio signal which cancels the speech; and a signal generator, also referred to as a babble generator, for providing a speech masking signal to mask any speech not canceled. The masking signal is generated by processing the speech in one of several ways so that its content is not intelligible.", "num_citations": "31\n", "authors": ["1933"]}
{"title": "Using machine learning for black-box autoscaling\n", "abstract": " Autoscaling is the practice of automatically adding or removing resources for an application deployment to meet performance targets in response to changing workload conditions. However, existing autoscaling approaches typically require expert application and system knowledge to minimize resource costs and performance target violations, thus limiting their applicability. We present MLscale, an application-agnostic, machine learning based autoscaler that is composed of: (i) a neural network based online (black-box) performance modeler, and (ii) a regression based metrics predictor to estimate post-scaling application and system metrics. Implementation results for diverse applications across several traces highlight MLscale's application-agnostic behavior and show that MLscale (i) reduces resource costs by about 50% compared to the optimal static policy, (ii) is within 15% of the cost of the optimal dynamic\u00a0\u2026", "num_citations": "30\n", "authors": ["1933"]}
{"title": "Leveraging local image redundancy for efficient virtual machine provisioning\n", "abstract": " Virtualized data centers became ubiquitous and led to invention of new delivery model called Cloud computing. Cloud service providers pursue high degree of automation for the management processes in order to make their services responsive and inexpensive. One of such critical processes is virtual machine provisioning. This article proposes and evaluates a provisioning model that leverages virtual machine image similarity to reduce the data volume transferred from the storage server to the hypervisor on which the virtual machine is being instantiated. We also present an analytical model of such a provisioning process for a single hypervisor shedding light on the impact of degree of image similarity, system utilization, and hypervisor capacity on the performance of the system. The model is validated using discrete event simulator. The algorithm has been implemented on a testbed system and also extensive\u00a0\u2026", "num_citations": "30\n", "authors": ["1933"]}
{"title": "Simplifying solution deployment on a Cloud through composite appliances\n", "abstract": " Containing runaway IT costs is one of the top priorities for enterprises. Cloud Computing, with its on-demand provisioning capability on shared resources, has emerged as a new paradigm for managing IT costs. In this paper, we describe a framework to simplify deployment of complex solutions on a Cloud infrastructure. We discuss the concept of a composite appliance and show how it can be used to reduce management costs. We illustrate the benefits of our approach with a complex three-tiered solution that can be deployed and configured on a set of virtual machines instances without any manual intervention.", "num_citations": "25\n", "authors": ["1933"]}
{"title": "Co-location of virtual machines with nested virtualization\n", "abstract": " Co-locating a virtual machine with nested virtualization, in one aspect, may comprise receiving a list of one or more virtual machine instances to co-locate with associated configuration information. A parent virtual machine instance may be identified to host the one or more virtual machine instances. Virtual machine images associated with the one or more virtual machine instances may be consolidated. A composite parent virtual machine image may be created based on the consolidated virtual machine images and the parent virtual machine instance. The parent virtual machine instance may be configured to accommodate for capacity requirement of the one or more child virtual machine instances. The parent virtual machine instance may be started on a processor via the composite parent virtual machine image. The one or more virtual machine instances may be started within the parent virtual machine instance as\u00a0\u2026", "num_citations": "23\n", "authors": ["1933"]}
{"title": "VMAR: Optimizing I/O performance and resource utilization in the cloud\n", "abstract": " A key enabler for standardized cloud services is the encapsulation of software and data into VM images. With the rapid evolution of the cloud ecosystem, the number of VM images is growing at high speed. These images, each containing gigabytes or tens of gigabytes of data, create heavy disk and network I/O workloads in cloud data centers. Because these images contain identical or similar OS, middleware, and applications, there are plenty of data blocks with duplicate content among the VM images. However, current deduplication techniques cannot efficiently capitalize on this content similarity due to their warmup delay, resource overhead and algorithmic complexity.               We propose an instant, non-intrusive, and lightweight I/O optimization layer tailored for the cloud: Virtual Machine I/O Access Redirection (VMAR). VMAR generates a block translation map at VM image creation / capture time, and\u00a0\u2026", "num_citations": "22\n", "authors": ["1933"]}
{"title": "Determining location for a portable data processing system by analyzing location syndromes\n", "abstract": " A method, system, and computer program product for determining the location of a portable data processing system is provided. In one embodiment, the portable data processing system determines resources that are geographically proximate to the portable computer and generates a location syndrome. The location syndrome is then compared to a set of location profiles, wherein at least some of the location profiles correspond to different geographic locations. Responsive to sufficiently matching the location syndrome to one of the set of location profiles, a label corresponding to the matched one of the set of location profiles is returned as the current location of the portable data processing system.", "num_citations": "22\n", "authors": ["1933"]}
{"title": "Virtual machine image access de-duplication\n", "abstract": " A system and an article of manufacture for de-duplicating virtual machine image accesses include identifying one or more identical blocks in two or more images in a virtual machine image repository, generating a block map for mapping different blocks with identical content into a same block, deploying a virtual machine image by reconstituting an image from the block map and fetching any unique blocks remotely on-demand, and de-duplicating virtual machine image accesses by storing the deployed virtual machine image in a local disk cache.", "num_citations": "21\n", "authors": ["1933"]}
{"title": "Decryption system for encrypted audio\n", "abstract": " An encrypted audio decryption system for decrypting encrypted audio sound. The system includes a hearing device and a key FOB. The hearing device is adapted to receive the encrypted audio sound, decrypt the encrypted audio sound, and transmit signals corresponding to the decrypted audio sound to a speaker of the hearing device. The key FOB is adapted to transmit a decryption key to the hearing device. The hearing device is adapted not to decrypt the encrypted audio sound without receipt of the decryption key, corresponding to the encrypted audio sound, from the key FOB.", "num_citations": "21\n", "authors": ["1933"]}
{"title": "Providing performance guarantees for cloud-deployed applications\n", "abstract": " Applications with a dynamic workload demand need access to a flexible infrastructure to meet performance guarantees and minimize resource costs. While cloud computing provides the elasticity to scale the infrastructure on demand, cloud service providers lack control and visibility of user space applications, making it difficult to accurately scale the infrastructure. Thus, the burden of scaling falls on the user. That is, the user must determine when to trigger scaling and how much to scale. Scaling becomes even more challenging when applications exhibit dynamic changes in their behavior. In this paper, we propose a new cloud service, Dependable Compute Cloud (DC2), that automatically scales the infrastructure to meet the user-specified performance requirements, even when multiple user requests execute concurrently. DC2 employs Kalman filtering to automatically learn the (possibly changing) system\u00a0\u2026", "num_citations": "20\n", "authors": ["1933"]}
{"title": "Rc2\u2013a living lab for cloud computing\n", "abstract": " In this paper we present our experience in building the Research Compute Cloud (RC2), a cloud computing platform for use by the worldwide IBM Research community. Within eleven months of its official release RC2 has reached a community of 631 users spanning 34 countries, and serves on average 350 active users and 1800 active VM instances per month. Besides offering a utility computing platform across a heterogeneous pool of servers, RC2 aims at providing a living lab for experimenting with new cloud technologies and accelerating their transfer to IBM products. This paper describes our experience in designing and implementing a flexible infrastructure to enable rapid integration of novel ideas while preserving the overall stability and consumability of the system.", "num_citations": "19\n", "authors": ["1933"]}
{"title": "Method and apparatus for a services model based provisioning in a multitenant environment\n", "abstract": " A method, system and computer usable program code is disclosed for mapping a logical topology to information technology (IT) resources. The method comprises the steps of generating a logical topology of resources for a solution to a given request for resources, extracting information about shared rules and constraints on IT resources specific to a plurality of customers, and generating multiple mappings from the logical topology to the IT resources that satisfy said shared rules and constraints.", "num_citations": "19\n", "authors": ["1933"]}
{"title": "Automatic provisioning for subscription computing\n", "abstract": " The present invention is directed toward a method, computer program product, and data processing system for providing automatic, mass-customized preparation of disk images. The invention relies on a front end, which interacts with customers and sales personnel to acquire self-consistent provisioning requirements. These requirements are input to a provisioning engine, which uses a knowledge base of constraints and affinities to generate a set of provisioning orders. These orders are input to a disk image builder, which automatically creates the disk image and saves it for distribution. The disk image builder also consults a knowledge base concerning best practices established by the service provider for disk image builds. Finally, the requirements are used to drive a disk image tester, which exercises the image as a quality inspection.", "num_citations": "18\n", "authors": ["1933"]}
{"title": "Model-driven optimal resource scaling in cloud\n", "abstract": " Cloud computing offers the flexibility to dynamically size the infrastructure in response to changes in workload demand. While both horizontal scaling and vertical scaling of infrastructure are supported by major cloud providers, these scaling options differ significantly in terms of their cost, provisioning time, and their impact on workload performance. Importantly, the efficacy of horizontal and vertical scaling critically depends on the workload characteristics, such as the workload\u2019s parallelizability and its core scalability. In today\u2019s cloud systems, the scaling decision is left to the users, requiring them to fully understand the trade-offs associated with the different scaling options. In this paper, we present our solution for optimizing the resource scaling of cloud deployments via implementation in OpenStack. The key component of our solution is the modeling engine that characterizes the workload and then\u00a0\u2026", "num_citations": "17\n", "authors": ["1933"]}
{"title": "MLscale: A machine learning based application-agnostic autoscaler\n", "abstract": " Autoscaling is the practice of automatically adding or removing resources for an application deployment to meet performance targets in response to changing workload conditions. However, existing autoscaling approaches typically require expert application and system knowledge to reduce resource costs and performance target violations, thus limiting their applicability. We present MLscale, an application-agnostic, machine learning based autoscaler that is composed of: (i) a neural network based online (black-box) performance modeler, and (ii) a regression based metrics predictor to estimate post-scaling application and system metrics. Implementation results for diverse applications across several traces highlight MLscale's application-agnostic behavior and show that MLscale (i) reduces resource costs by about 41%, on average, compared to the optimal static policy, (ii) is within 14%, on average, of the cost of\u00a0\u2026", "num_citations": "16\n", "authors": ["1933"]}
{"title": "Decryption system for encrypted display\n", "abstract": " A display security system including a display device and a key FOB. The display device includes an electrical display, a file with encrypted information, a system for displaying the encrypted information on the display, and a decryption key receiver. The key FOB is adapted to transmit a description key to the decryption key receiver of the display device. The display device is adapted to display the encrypted information on the display in a decrypted form when the receiver receives the decryption key from the key FOB. The display device is adapted to not display the encrypted information on the display in a decrypted form when the receiver does not receive the decryption key from the key FOB.", "num_citations": "16\n", "authors": ["1933"]}
{"title": "Managed infrastructure with IBM cloud OpenStack services\n", "abstract": " In this paper, we discuss how OpenStack\u00ae, an open source cloud computing software platform, can be used to deliver a managed private cloud by describing the IBM Cloud OpenStack Services offering. IBM Cloud OpenStack Services is an enterprise-class infrastructure-as-a-service, running on OpenStack in a selection of worldwide IBM SoftLayer\u00ae data centers. This managed service provides the necessary levels of control so that businesses can focus on applications and services, not on the infrastructure and cloud management systems beneath them. We discuss the design challenges that customers encounter when choosing managed private clouds and illustrate an architecture that addresses these challenges using open source technologies.", "num_citations": "15\n", "authors": ["1933"]}
{"title": "The unobservability problem in clouds\n", "abstract": " The cloud is not transparent. Users of cloud computing cannot control or monitor important information about their VMs or services, such as placement, true resource allocation, virtualization overhead, etc. Likewise, cloud providers cannot obtain important information about their users' deployment such as the application model, the role of each VM, etc. While such information is not required to be revealed, we claim that this lack of information prevents users from fully understanding their resource availability, and limits the feasibility of various performance management solutions. We refer to this lack of information as the \"Unobservability\" problem. In this paper, we describe the unobservability problem and present various use cases from our experience managing a medium-scale cloud deployment with several hundred VMs and experiments on EC2 that highlight the severe impact of unobservability on performance\u00a0\u2026", "num_citations": "13\n", "authors": ["1933"]}
{"title": "A cloud provisioning system for deploying complex application services\n", "abstract": " Cloud Computing, with its on-demand provisioning capability on shared resources, has emerged as a new paradigm for reducing IT costs. In this paper, we present the architecture of a provisioning system that simplifies the deployment of complex application services on a Cloud infrastructure. We will introduce the concept of Composite Appliance and explain how it can be implemented and utilized to simplify management tasks and to reduce costs. We illustrate the extensibility and advantages of our design with a prototype solution consisting of a 3-tier application services that are deployed and configured automatically without manual intervention on a set of virtual machines instances in a Cloud.", "num_citations": "13\n", "authors": ["1933"]}
{"title": "Integrated calendar and phonemail system\n", "abstract": " An integrated calendar-phone mail system accepts input from a workstation to a calendar or to a voice-mail program periodically updating the phone mail data with new data from the calendar and updating the calendar data with new data from the phone mail.", "num_citations": "13\n", "authors": ["1933"]}
{"title": "Data synchronization using redundancy detection\n", "abstract": " Managing data in a cloud computing environment, including data transfers. File level and block level similarities are identified, including for archive and nested archive files, residing on datacenters and regional repositories. A replication plan is generated based on receiving a replication instruction, and further based on similarity clusters by transferring unique data blocks and files from best available sources including regional repositories.", "num_citations": "12\n", "authors": ["1933"]}
{"title": "Discovering and leveraging content similarity to optimize collective on-demand data access to iaas cloud storage\n", "abstract": " A critical feature of IaaS cloud computing is the ability to quickly disseminate the content of a shared dataset at large scale. In this context, a common pattern is collective on-demand read, i.e., accessing the same VM image or dataset from a large number of V Minstances concurrently. There are various techniques that avoid I/Ocontention to the storage service where the dataset is located without relying on pre-broadcast. Most such techniques employ peer-to-peer collaborative behavior where the VM instances exchange information about the content that was accessed during runtime, such that it impossible to fetch the missing data pieces directly from each other rather than the storage system. However, such techniques are often limited within a group that performs a collective read. In light of high data redundancy on large IaaS data centers and multiple users that simultaneously run VM instance groups that\u00a0\u2026", "num_citations": "12\n", "authors": ["1933"]}
{"title": "RC2: A living lab for cloud computing\n", "abstract": " In this paper we present our experience in building the Research Compute Cloud (RC2), a cloud computing platform for use by the worldwide IBM Research community. Within four months of its official release RC2 has reached a community of 260 users spanning 18 countries, and serves on average 200 active users and 800 active VM instances per month. Besides offering a utility computing platform across a heterogeneous pool of servers, RC2 aims at providing a living lab for experimenting with new cloud technologies and accelerating their transfer to IBM products. This paper describes our experience in designing and implementing a flexible infrastructure to enable rapid integration of novel ideas while preserving the overall stability and consumability of the system.", "num_citations": "12\n", "authors": ["1933"]}
{"title": "Service management for the infrastructure of blockchain networks\n", "abstract": " Techniques facilitating service management for the infrastructure of blockchain networks are provided. A system comprises a memory and a processor that executes computer executable components stored in the memory. The computer executable components can comprise an allocation component, a grouping component, and an implementation component. The allocation component can assign, within a blockchain network, a first group of nodes of a first node type to a first set of operation slots and a second group of nodes of a second node type, different than the first node type, to a second set of operation slots. The grouping component can aggregate the second group of nodes assigned to the second set of operation slots with the first group of nodes within the first set of operation slots. The implementation component can execute a service management operation. A consensus algorithm can be satisfied during\u00a0\u2026", "num_citations": "8\n", "authors": ["1933"]}
{"title": "Service management of blockchain networks\n", "abstract": " Business interest in blockchain technology is increasing due the potential for change that it offers. Large scale adoption in enterprise IT environments brings about a need for service management and DevOps processes for blockchain deployments. Nodes in the network may fail or be taken down for maintenance requiring visibility across hybrid, traditional, cloud enabled and cloud native deployments. Service management is necessary to ease deployment woes for those looking to install code within their own data centers on-premises or on dedicated cloud servers and further to handle the life cycle of the deployments that includes security patches, critical updates, upgrades, change management and restarting services. In this paper, we provide a mechanism to optimally perform such operations with no disruption to the consensus and transactions for such emerging blockchain applications.", "num_citations": "8\n", "authors": ["1933"]}
{"title": "Configurable rating and metering\n", "abstract": " A method for creating a configurable model for rating and metering resource usage, the method includes utilizing at least one rating context for a contract of a registered offering, wherein the registered offering is a resource, monitoring the resource usage to create a usage record, optimizing the collection of the usage data based on revenue potential and metering costs, contextualizing a usage record of the resource, generating rated usage data according to the usage record, and tuning a performance indicator of a metering definition for the registered offering based on the rated usage data.", "num_citations": "8\n", "authors": ["1933"]}
{"title": "Dynamic application placement with allocation restrictions, vertical stacking and even load distribution\n", "abstract": " A solution to a variant of a class constrained multiple knapsack problem. Previous solutions require that memory demand of every application be identical and do not consider minimizing placement changes. Previous techniques do not consider optimizing placement to improve load balancing as is described subsequently. Thus, the present invention provides systems, methods and apparatus, encapsulated in software, to provide the dynamic placement of application instances on a heterogeneous cluster of server machines. It depends on the existence of a visible and controllable platform, systems management and other business services that signal events and accept commands. It provides dynamically placing applications on servers such as to maximize a total amount of satisfied application demands, minimize a number of placement changes from a current placement, and minimize imbalance of load\u00a0\u2026", "num_citations": "8\n", "authors": ["1933"]}
{"title": "Regional business model for subscription computing\n", "abstract": " A method, apparatus, and computer implemented instructions for managing services in a data processing system. A request is received for a service from a client. A location of the client is identified in response to receiving the request. Based on the location of the client, a determination is made as to whether the service is to be provided. If the service is provided, the client is billed for the service based on the location of the client.", "num_citations": "8\n", "authors": ["1933"]}
{"title": "On-demand cloud service management\n", "abstract": " A plurality of traditional software applications are packaged as custom composite solutions, and are stored as custom composite solution deployable images. Customer input is obtained from a customer. At least one of the custom composite solution deployable images is deployed into a management cloud in response to the customer input.", "num_citations": "7\n", "authors": ["1933"]}
{"title": "Virtual machine-to-image affinity on a physical server\n", "abstract": " Techniques for improving virtual machine-to-image affinity on a physical server. A method includes identifying physical machines in a network as candidate source physical machines, wherein each candidate source physical machine stores a first virtual machine image and a set of additional virtual machine images, identifying physical machines in the network as candidate target physical machines, wherein each candidate target physical machine stores one of the additional virtual machine images, and selecting a virtual machine image from the set of additional virtual machine images and selecting a physical machine from the candidate target physical machines such that migrating the selected virtual machine image from a candidate source physical machine to the selected target physical machine results in a maximized image affinity per virtual machine in comparison to each image migration scenarios for the set\u00a0\u2026", "num_citations": "7\n", "authors": ["1933"]}
{"title": "System and method for restartable provisioning of software components\n", "abstract": " A system and method for associating a state with a distributed system and transitioning component states with recovery to reverse transitioning attempts includes defining a global state representing an overall provisioning state of a plurality of components involved in a system wherein a set of global states are employed as provisioning checkpoints. Individual software component methods are defined for transitioning from one state to another. Individual states are associated with a global state. A rollback method is defined by which a destination global state may be rolled back to a previous global state in an event of a failure.", "num_citations": "7\n", "authors": ["1933"]}
{"title": "Redundancy aware virtual disk mobility for cloud computing\n", "abstract": " With multiplicity of Cloud service providers offering geographically distributed Compute Clouds, both providers and customers find it necessary to quickly move virtual machine images between data centers. This is usually accomplished using standard rsync-based transfer which is slow and bandwidth intensive given large size of virtual machine images. This article proposes a mechanism to reconstitute an image on target data center using information about overlap among images and content already available in the target data center. No changes to file system are needed and the approach can immediately be used with traditional libraries storing images as regular files. Moreover, we use a peer-to-peer approach that allows simultaneous retrieval of fragments from multiple data centers. The system and algorithms have been implemented and evaluated on two Compute Cloud environments using three image\u00a0\u2026", "num_citations": "7\n", "authors": ["1933"]}
{"title": "Selecting provisioning targets for new virtual machine instances\n", "abstract": " One embodiment of a method for provisioning a new virtual machine instance based on the content of an image of the new virtual machine instance includes identifying, from among a plurality of host machines, the host machine having the highest percentage of the content available in local storage, and provisioning the new virtual machine instance on the host machine having the highest percentage of the content available in local storage. Another embodiment of a method for provisioning a new virtual machine instance based on an image of the new virtual machine instance includes constructing at least a portion of the image using data stored locally on a target machine hosting the new virtual machine instance, and completing the image using data obtained over a network from remote storage.", "num_citations": "6\n", "authors": ["1933"]}
{"title": "System and method for graph based K-redundant resiliency for IT cloud\n", "abstract": " A method for enabling resiliency for cloud computing systems is described. The method includes modifying a topology graph of a network architecture by mapping processes flows onto the topology graph. A resiliency graph is created based on the modified topology graph. The method includes modifying the resiliency graph by translating at least one SLA into the resiliency graph. Overlaps and dependencies in the modified resiliency graph are identified. Apparatus and computer readable instructions are also described.", "num_citations": "6\n", "authors": ["1933"]}
{"title": "Dynamic provisioning in data processing environment\n", "abstract": " Techniques are disclosed for the dynamic introduction of new components to be used during provisioning of solutions in data processing system environments such as service delivery environments. For example, in a provisioning system that manages provisioning of components in a data processing system, an automated method of dynamically provisioning one or more new components in the data processing system comprises the provisioning system performing the following steps. The provisioning system accepts a registration of a new component during a runtime period of the data processing system, wherein the new component has not been previously registered in the data processing system prior to the runtime period, and further wherein the registration comprises obtaining information relating to at least one of one or more prerequisites and a configuration associated with the new component. The\u00a0\u2026", "num_citations": "6\n", "authors": ["1933"]}
{"title": "Evaluation of redundancy driven provisioning for hypervisors with locally attached storage\n", "abstract": " Virtualized data centers became ubiquitous and led to invention of new delivery model called cloud computing. Cloud service providers pursue high degree of automation for the management processes in order to make their services responsive and inexpensive. One of such critical processes is virtual machine provisioning. This article reports on our on-going research to evaluate the efficiency of the provisioning process that leverages virtual machine similarity to reduce the amount of data that has to be transferred from the storage server to the hyper visor on which the virtual machine is being instantiated. The simulation experiments point to conclusion that the redundancy based provisioning can provide very substantial reduction in terms of amount of data that needs to be copied from the storage server.", "num_citations": "6\n", "authors": ["1933"]}
{"title": "A declarative approach for service enablement on hybrid cloud orchestration engines\n", "abstract": " The rapidly increasing complexity and scale of hybrid cloud environments requires improved service management capabilities in orchestration and automation. Current methods focus on provisioning infrastructure but lack functionality for consistently enabling and performing operational activities on managed services. We propose a data-driven approach to dynamically generate Orchestration Engine plugins from service descriptor metadata. Our approach extends Orchestration Engines by representing managed services as code within reusable blueprints in order to accelerate service deployments and ease management activities. In our work, we provide a data model and system architecture to allow service providers to easily author and publish resource definitions for a wide range of public and private services. These definitions may be combined into solution blueprints, forming a declarative and reusable\u00a0\u2026", "num_citations": "5\n", "authors": ["1933"]}
{"title": "System and method for graph based K-redundant resiliency for IT cloud\n", "abstract": " An apparatus for enabling resiliency for cloud computing systems is provided. An apparatus includes a processor and a memory storing computer program code. The memory and the computer program code are configured to, with the processor, cause the apparatus to perform actions. The actions include modifying a topology graph of a network architecture by mapping processes flows onto the topology graph and creating a resiliency graph based on the modified topology graph. The actions also include modifying the resiliency graph by translating at least one SLA into the resiliency graph and identifying overlaps and dependencies in the modified resiliency graph. Apparatus and computer readable instructions are also described.", "num_citations": "5\n", "authors": ["1933"]}
{"title": "Virtual Machine Image Access De-Duplication\n", "abstract": " Techniques for de-duplicating virtual machine image accesses. A method includes identifying one or more identical blocks in two or more images in a virtual machine image repository, generating a block map for mapping different blocks with identical content into a same block, deploying a virtual machine image by reconstituting an image from the block map and fetching any unique blocks remotely on-demand, and de-duplicating virtual machine image accesses by storing the deployed virtual machine image in a local disk cache.", "num_citations": "5\n", "authors": ["1933"]}
{"title": "Inexact reconstitution of virtual machine images\n", "abstract": " Reconstituting a machine image separates constituent parts of a machine image, and for each part, determines whether an exact version of the part is available on the target machine. If an exact version of the part is not available on the target machine, an inexact part is looked for on the target machine. Whether an inexact part is found may be determined based on attribute policy specification and similarity computation. For the inexact part found on the target machine, any dependencies may be identified and processed as a part to be reconstituted for the machine image. If no exact part and no inexact part are found on the target machine, the part is transferred from a source machine to the target machine. A machine image is created based on parts.", "num_citations": "4\n", "authors": ["1933"]}
{"title": "Orchestration Engine Blueprint Milestones\n", "abstract": " A method and system of assigning computing resources of a cloud by an orchestration engine is provided. A workload request is received via a network. A blueprint is extracted from the workload request. Milestones associated with the blueprint are identified. Business rules associated with the blueprint are determined. A cost of each of the identified milestones is determined. Upon determining that there is interdependence between at least some of the identified milestones, a group of milestones that are interdependent is created. The milestones are ranked based on the determined business rules and determined cost. A deployment plan is executed based on the ranked milestones.", "num_citations": "4\n", "authors": ["1933"]}
{"title": "Tracking for royalty determination\n", "abstract": " A system including at least one memory having a plurality of individual contributions forming a compilation stored in the at least one memory; and at least one processor connected to the at least one memory, where the processor is configured to use provenance data associated with a catalog item to track an individual contribution in a compilation of contributions, where the compilation is stored in the at least one memory; and dynamically compute a royalty distribution for the individual contribution based, at least partially, upon at least one metric related to the contributions which form the compilation.", "num_citations": "4\n", "authors": ["1933"]}
{"title": "Evaluation of expressions using recursive SQL\n", "abstract": " The present invention is directed towards a system and method for delivering client content. The system compares a plurality of client properties with a plurality of properties stored in a content server and determines a plurality of Boolean expressions. The system evaluates the expressions according to a recursive SQL query to retrieve applicable qualifying rules. Further, the system supplies an action associated with the applicable qualifying rules to a client. The actions allow client content to be automatically updated from a FTP server.", "num_citations": "4\n", "authors": ["1933"]}
{"title": "Automatically detecting risky scripts in infrastructure code\n", "abstract": " Infrastructure code supports embedded scripting languages such as Shell and PowerShell to manage the infrastructure resources and conduct life-cycle operations. Risky patterns in the embedded scripts have widespread of negative impacts across the whole infrastructure, causing disastrous consequences. In this paper, we propose an analysis framework, which can automatically extract and compose the embedded scripts from infrastructure code before detecting their risky code patterns with correlated severity levels and negative impacts. We implement SecureCode based on the proposed framework to check infrastructure code supported by Ansible, ie, Ansible playbooks. We integrate SecureCode with the DevOp pipeline deployed in IBM cloud and test Secure-Code on 45 IBM Services community repositories. Our evaluation shows that SecureCode can efficiently and effectively identify 3419 true issues with\u00a0\u2026", "num_citations": "3\n", "authors": ["1933"]}
{"title": "Towards scalable on-demand collective data access in IaaS clouds: An adaptive collaborative content exchange proposal\n", "abstract": " A critical feature of IaaS cloud computing is the ability to quickly disseminate the content of a shared dataset at large scale. In this context, a common pattern is collective read, i.e.,\u00a0accessing the same VM image or dataset from a large number of VM instances concurrently. Several approaches deal with this pattern either by means of pre-broadcast before access or on-demand concurrent access to the repository where the image or dataset is stored. We propose a different solution using a hybrid strategy that augments on-demand access with a collaborative scheme in which the VMs leverage similarities between their access pattern in order to anticipate future read accesses and exchange chunks between themselves in order to reduce contention to the remote repository. Large scale experiments show significant improvement over conventional approaches from multiple perspectives: completion time, sustained read\u00a0\u2026", "num_citations": "3\n", "authors": ["1933"]}
{"title": "Image transfer optimization for agile development\n", "abstract": " Cloud computing is becoming a common delivery model for IT services. Development and testing of applications and services is usually conducted on a development cloud environment often within customer premises and deployed in stages to a production cloud. Agile development process integrates development and deployment of IT systems and requires frequent and low cost synchronization between development and deployment cloud environments. This article proposes and evaluates virtual machine transfer algorithm based on image redundancy that allows to reduce bandwidth and time required to transfer specific images from development to production sites. It also explores how a typical image library, including public and private images, evolves over time and what impact it has on potential gain from the proposed algorithm. An analytical model is also proposed that allows to quantify degree of saving\u00a0\u2026", "num_citations": "3\n", "authors": ["1933"]}
{"title": "Orchestration engine blueprint aspects for hybrid cloud composition\n", "abstract": " Techniques that facilitate orchestration engine blueprint aspects for hybrid cloud composition are provided. In one example, a system includes a learning component and a hybrid cloud composition component. The learning component learns one or more blueprint-level aspects associated with information for one or more computing resources of a cloud-based computing platform based on historical data associated with the cloud-based computing platform. The hybrid cloud composition component generates a set of resource definitions for the cloud-based computing platform based on the one or more blueprint-level aspects. The hybrid cloud composition component also modifies a blueprint associated with the cloud-based computing platform based on the set of resource definitions.", "num_citations": "2\n", "authors": ["1933"]}
{"title": "Orchestration engine facilitating management of operation of resource components\n", "abstract": " Systems, computer-implemented methods, and computer program products that facilitate orchestration engine components for a cloud computing environment are provided. According to an embodiment, a system can comprise a memory that stores computer executable components and a processor that executes the computer executable components stored in the memory. The computer executable components can comprise a blueprint component that can, based on one or more dependencies between respective resource components of a cloud-based computing platform, declare a steady state action to be executed in response to a steady state event indicative of an event associated with steady state operation of a resource component of the cloud-based computing platform. The computer executable components can further comprise an orchestration engine component that can, based on the blueprint component\u00a0\u2026", "num_citations": "2\n", "authors": ["1933"]}
{"title": "Towards efficient on-demand VM provisioning: Study of VM runtime I/O access patterns to shared image content\n", "abstract": " IaaS clouds are becoming a standard way of providing elastic compute capacity at an affordable cost. To achieve that, VM provisioning system has to optimally allocate I/O and compute resources. One of the significant optimization opportunities is to leverage content similarity across VM images. While many studies have been devoted to de-duplication of VM images, this paper is to the best of our knowledge, the first one to comprehensively study the relationship between the VM image similarity structure and the runtime I/O access patterns. Our study focuses on block-level similarity and I/O access patterns, revealing correlations between common content of different images and application-level access semantics. Furthermore, it also zooms on several runtime I/O access pattern aspects, such as the similarity of the sequences in which common content is accessed. The results show a strong tendency for access\u00a0\u2026", "num_citations": "2\n", "authors": ["1933"]}
{"title": "Orchestration engine blueprint aspects for hybrid cloud composition\n", "abstract": " Techniques that facilitate orchestration engine blueprint aspects for hybrid cloud composition are provided. In one example, a system includes a blueprint component and a hybrid cloud composition component. The blueprint component determines one or more blueprint-level aspects for a blueprint associated with a cloud-based computing platform. The one or more blueprint-level aspects are indicative of encoded information for one or more features associated with one or more computing resources for the cloud-based computing platform. The hybrid cloud composition component determines a set of resource definitions for the cloud-based computing platform based on the one or more blueprint-level aspects.", "num_citations": "1\n", "authors": ["1933"]}
{"title": "Orchestration engine using a blockchain for a cloud resource digital ledger\n", "abstract": " Techniques that facilitate an orchestration engine using a blockchain for a cloud resource digital ledger are provided. In one example, a system includes an orchestration engine component and a blockchain component. The orchestration engine component manages one or more computing resources for a cloud-based computing platform. The blockchain component adds event data indicative of an event associated with the one or more computing resources into a blockchain dataset for the cloud-based computing platform. The blockchain dataset comprises a sequence of data blocks that corresponds to a sequence of events for the cloud-based computing platform.", "num_citations": "1\n", "authors": ["1933"]}
{"title": "Efficient data retrieval in big-data processing systems\n", "abstract": " A mechanism is provided for implementing operation optimization. Responsive to a request to load data via a input/output (I/O) load operation, prior to loading the data, transformed data in a local memory is searched for a match to the requested data. Responsive to identifying transformed that matches the requested data, the transformed data in the local memory is used to fulfill the request. Responsive to failing to identify transformed data in the local memory that matches the requested data, untransformed data in the local memory is searched for a match to the requested data. Responsive to identifying untransformed data that matches the requested data, the untransformed data in the local memory is used to fulfill the request. Responsive to failing to identify untransformed data in the local memory that matches the requested data, the requested data may be loaded from the storage system via the I/O load operation.", "num_citations": "1\n", "authors": ["1933"]}
{"title": "Tracking for royalty determination\n", "abstract": " A method including identifying an individual contribution to a compilation, where the compilation comprises a plurality of individual contributions; and determining, at least partially with a computer processor, a royalty distribution value for the identified individual contribution based, at least partially, upon at least one weighted metric regarding the compilation.", "num_citations": "1\n", "authors": ["1933"]}