{"title": "An empirical analysis of information retrieval based concept location techniques in software comprehension\n", "abstract": " Concept location, the problem of associating human oriented concepts with their counterpart solution domain concepts, is a fundamental problem that lies at the heart of software comprehension. Recent research has attempted to alleviate the impact of the concept location problem through the application of methods drawn from the information retrieval (IR) community. Here we present a new approach based on a complimentary IR method which also has a sound basis in cognitive theory. We compare our approach to related work through an experiment and present our conclusions. This research adapts and expands upon existing language modelling frameworks in IR for use in concept location, in software systems. In doing so it is novel in that it leverages implicit information available in system documentation. Surprisingly, empirical evaluation of this approach showed little performance benefit overall and\u00a0\u2026", "num_citations": "112\n", "authors": ["1229"]}
{"title": "Fault detection and prediction in an open-source software project\n", "abstract": " Software maintenance continues to be a time and resource intensive activity. Any efforts that help to address the maintenance bottleneck within the software lifecycle are welcome. One area where such efforts are useful is in the identification of the parts of the source-code of a software system that are most likely to contain faults and thus require changes. We have carried out an empirical study where we have merged information from the CVS repository and the Bugzilla database for an open-source software project to investigate whether or not parts of the source-code are faulty, the number and severity of faults and the number and types of changes associated with parts of the system. We present an analysis of this information, showing that Pareto's Law holds and we evaluate the usefulness of the Chidamber and Kemerer metrics for identifying the fault-prone classes in the system analysed.", "num_citations": "64\n", "authors": ["1229"]}
{"title": "Floating production mooring integrity JIP-key findings\n", "abstract": " Over the last two years Noble Denton has been undertaking a Joint Industry Project (JIP) to investigate how to improve the integrity of the moorings used by Floating Production Systems (FPSs). The JIP has surveyed the world wide performance of all types of FPS mooring systems including FPSOs, semi submersible production units and Spars. Wide ranging support from 23 sponsoring organizations including operators, floating production contractors, regulatory authorities, equipment suppliers and inspection companies has enabled access to a significant pool of data.", "num_citations": "56\n", "authors": ["1229"]}
{"title": "Automatic mapping of user tags to wikipedia concepts: The case of a q&a website\u2013stackoverflow\n", "abstract": " The uncontrolled nature of user-assigned tags makes them prone to various inconsistencies caused by spelling variations, synonyms, acronyms and hyponyms. These inconsistencies in turn lead to some of the common problems associated with the use of folksonomies such as the tag explosion phenomenon. Mapping user tags to their corresponding Wikipedia articles, as well-formed concepts, offers multifaceted benefits to the process of subject metadata generation and management in a wide range of online environments. These include normalization of inconsistencies, elimination of personal tags and improvement of the interchangeability of existing subject metadata. In this article, we propose a machine learning-based method capable of automatic mapping of user tags to their equivalent Wikipedia concepts. We have demonstrated the application of the proposed method and evaluated its performance using\u00a0\u2026", "num_citations": "34\n", "authors": ["1229"]}
{"title": "Text mining stackoverflow: An insight into challenges and subject-related difficulties faced by computer science learners\n", "abstract": " Purpose                \u2013 The use of social media and in particular community Question Answering (Q     &    A) websites by learners has increased significantly in recent years. The vast amounts of data posted on these sites provide an opportunity to investigate the topics under discussion and those receiving most attention. The purpose of this paper is to automatically analyse the content of a popular computer programming Q     &    A website, StackOverflow (SO), determine the exact topics of posted Q     &    As, and narrow down their categories to help determine subject difficulties of learners. By doing so, the authors have been able to rank identified topics and categories according to their frequencies, and therefore, mark the most asked about subjects and, hence, identify the most difficult and challenging topics commonly faced by learners of computer programming and software development\u00a0\u2026", "num_citations": "29\n", "authors": ["1229"]}
{"title": "A historical, textual analysis approach to feature location\n", "abstract": " ContextFeature location is the task of finding the source code that implements specific functionality in software systems. A common approach is to leverage textual information in source code against a query, using Information Retrieval (IR) techniques. To address the paucity of meaningful terms in source code, alternative, relevant source-code descriptions, like change-sets could be leveraged for these IR techniques. However, the extent to which these descriptions are useful has not been thoroughly studied.ObjectiveThis work rigorously characterizes the efficacy of source-code lexical annotation by change-sets (ACIR), in terms of its best-performing configuration.MethodA tool, implementing ACIR, was used to study different configurations of the approach and to compare them to a baseline approach (thus allowing comparison against other techniques going forward). This large-scale evaluation employs eight\u00a0\u2026", "num_citations": "21\n", "authors": ["1229"]}
{"title": "Suicides\n", "abstract": " [Suicides] - Abstract - Europe PMC Sign in or create an account https://orcid.org Europe PMC Menu About About Europe PMC Preprints in Europe PMC Funders Joining Europe PMC Governance Roadmap Outreach Tools Tools overview ORCID article claiming Journal list Grant finder External links service RSS feeds Annotations Annotations submission service Developers Developer resources Articles RESTful API Grants RESTful API API use cases SOAP web service Annotations API OAI service Bulk downloads Developers Forum Help Help using Europe PMC Search syntax reference Contact us Contact us Helpdesk Feedback Twitter Blog Tech blog Developer Forum Europe PMC plus Search worldwide, life-sciences literature Search Advanced Search Recent history Saved searches Abstract Citations & impact [Suicides] Sarr\u00f3 B, Nogu\u00e9 S Medicina Clinica, 01 Apr 1992, 98(16):624-626Language:spa PMID: \u2026", "num_citations": "18\n", "authors": ["1229"]}
{"title": "Evaluating pair-programming for non-computer science major students\n", "abstract": " The ubiquitous nature of software has resulted in many non-computer-science (NCS) major students taking courses in computer programming. The appeal of learning computer programming for this cohort may be diminished, given that they do not usually have an initial desire to become expert programmers. This, coupled with the difficulty of learning computer programming, means that efforts to heighten their engagement with/learning of, programming skills are required.", "num_citations": "17\n", "authors": ["1229"]}
{"title": "Construct specific coupling measurement for C++ software\n", "abstract": " Studies which consider the extent to which the encapsulation of a class is weakened by direct access to its hidden members (such as through the use of the friend construct in C++) are scarce, and those that do exist are based on metric suites where the enabling mechanism of the coupling is ignored. This can lead to conclusions of limited construct validity where incorrect causes of coupling are suggested.In this paper a suite of software metrics which measure the amount of coupling enabled by different C++ programming language constructs (such as friendship and inheritance) are proposed. The metrics presented are based on a formal data model which can be easily adapted for other OO languages. This formal approach removes the scope for ambiguity in the metric definitions. These metrics provide a more accurate reflection of the causative agents of coupling in Object Oriented Systems and their utility is\u00a0\u2026", "num_citations": "10\n", "authors": ["1229"]}
{"title": "Exploring the differing usages of programming language features in systems developed in c++ and java\n", "abstract": " The Object-Oriented (OO) programming paradigm has claimed numerous advantages, including enhanced understandability, maintainability and reusability of OO software. However, these advantages do not automatically apply when an OO approach to software development is adopted. The features provided in OO languages such as C++ and Java can help to facilitate the development of understandable, maintainable and reusable software. However, systems built from different languages may have structural differences which may in turn impact the understandability, maintainability or reusability of the systems. In this paper an empirical study is presented which utilises software metrics to examine the structure of software systems written in C++ and Java. The findings suggest that C++ systems may be more difficult to understand or maintain than Java systems and that information hiding principles are applied only to a limited extent in the development of OO software.", "num_citations": "9\n", "authors": ["1229"]}
{"title": "A friend in need is a friend indeed [software metrics and friend functions]\n", "abstract": " Previous research has highlighted the extensive use of the C++ friend construct in both library-based and application-based systems. However, existing software metrics do not concentrate on measuring friendship accurately, a surprising omission given the debate friendship has caused in the object-oriented community. In this paper, a number of software metrics, that measure the extent to which friend class relationships are actually used in systems, are defined. These metrics are based on the interactions for which the friend construct is necessary, as well as the direction of this association between classes. Our results, in applying these metrics to the top 100 downloaded systems from sourceforge.net, indicate that up to 66% of friend class relationships in systems are redundant. Elsewhere, friend function declarations would have been more appropriate in many cases. In addition, it has been shown that friendship\u00a0\u2026", "num_citations": "8\n", "authors": ["1229"]}
{"title": "An empirical study of the use of friends in C++ software\n", "abstract": " A commonly held belief is that the friend construct in C++ is a violation of encapsulation. However, little empirical analysis of its use has taken place to provide evidence to support this claim. This paper presents a study, which assesses the design implications of including friendship in a system. A number of hypotheses are investigated based on previous work in this area by Counsell and Newson (2000). Our initial findings suggest that classes declared as friends are coupling hotspots, that the more friends a class has the more protected and private members it will contain and that friendship is not used to access inherited protected members.", "num_citations": "8\n", "authors": ["1229"]}
{"title": "Applying Meyer's taxonomy to object-oriented software systems\n", "abstract": " Inheritance is one of the core concepts in object-orientation. There has been much discussion and disagreement as to the correct uses of the inheritance mechanism in the literature. The classification of B. Meyer (1996) seems to be the most comprehensive for the identification of appropriate uses of inheritance. While it seems that this taxonomy has been validated by its author, in the design and development of software, it does not seem to have been validated against existing systems. We attempt, in the first instance, to move towards this validation by attempting to define a method whereby the inheritance relationships in software systems can be classified into individual categories in Meyer's taxonomy. Subsequently it also provides some insight on how inheritance is used in such systems.", "num_citations": "8\n", "authors": ["1229"]}
{"title": "Fine-grained software metrics in practice\n", "abstract": " Modularity is one of the key features of the Object- Oriented (00) paradigm. Low coupling and high cohesion help to achieve good modularity. Inheritance is one of the core concepts of the 00 paradigm which facilitates modularity. Previous research has shown that the use of the friend construct as a coupling mechanism in C+ + software is extensive. However, measures of the friend construct are scarse in comparison with measures of inheritance. In addition, these existing measures are coarse-grained, in spite of the widespread use of the friend mechanism. In this paper, a set of software metrics are proposed that measure the actual use of the friend construct, inheritance and other forms of coupling. These metrics are based on the interactions for which each coupling mechanism is necessary and sufficient. Previous work only considered the declaration of a relationship between classes. The software metrics\u00a0\u2026", "num_citations": "7\n", "authors": ["1229"]}
{"title": "Using changeset descriptions as a data source to assist feature location\n", "abstract": " Feature location attempts to assist developers in discovering functionality in source code. Many textual feature location techniques utilize information retrieval and rely on comments and identifiers of source code to describe software entities. An interesting alternative would be to employ the changeset descriptions of the code altered in that changeset as a data source to describe such software entities. To investigate this we implement a technique utilizing changeset descriptions and conduct an empirical study to observe this technique's overall performance. Moreover, we study how the granularity (i.e. file or method level of software entities) and changeset range inclusion (i.e. most recent or all historical changesets) affect such an approach. The results of a preliminary study with Rhino and Mylyn. Tasks systems suggest that the approach could lead to a potentially efficient feature location technique. They also\u00a0\u2026", "num_citations": "3\n", "authors": ["1229"]}
{"title": "Measuring the impact of friends on the internal attributes of software systems\n", "abstract": " Differing views have been expressed on the appropriateness of the friend construct in the design and implementation of object-oriented software in C++. However, little empirical analysis of its usage in the development of systems has taken place. This paper describes an empirical study of the top 100 most downloaded open-source software systems from sourceforge.net, to assess the design implications of the use of the friend construct. On a larger cohort of systems our results provide further evidence that classes declared as friends are coupling hotspots. Our findings also indicate that class size does not seem to have the confounding effect on this relationship that has been suggested in previous research. In addition, there seems to be no indication that friendship is used as an alternative to inheritance although a small number of systems seem to use friendship as an alternative to multiple inheritance and vice\u00a0\u2026", "num_citations": "3\n", "authors": ["1229"]}
{"title": "Identifying feature clones: an industrial case study\n", "abstract": " During its software evolution, the original software system of our industrial partner was split into three variants. These have evolved over time, but retained a lot of common functionality. During strategical planning our industrial partner realized the need for consolidation of common code in a shared code base towards more efficient code maintenance and re-use. To support this agenda, a feature-clone identification approach was proposed, combining elements of feature location (to identify the relevant code in one system) and clone detection (to identify that common feature's code across systems) techniques. In this work, this approach is used (via our prototype tool CoRA) to locate three features that were identified by the industrial partner for re-factoring, and is evaluated. The methodology, involving a system expert, was designed to evaluate the discrete parts of the approach in isolation: textual and static analyses\u00a0\u2026", "num_citations": "2\n", "authors": ["1229"]}
{"title": "[Engineering Paper] Identifying Feature Clones in a Suite of Systems\n", "abstract": " As part of a module re-unification project of an industrial partner's code, spanning one systems and two derivative systems, the feature-clone variants across these systems have to be extracted, to be later re-unified as singular code elements for re-use. To assist developers with this task, the CoRA (The Code Re-unification Application) tool was designed and implemented. An approach, and the subsequent design of the tool was derived from reflection on manual feature-location/clonedetection efforts on the company's systems, in the first phase of an action research cycle where the approach/implementation will be iteratively trialled, and subsequently refined, in-situ. A pilot study is discussed that leads to the proposed tool. The tool combines a hybrid (textual-static) feature location technique and a textual clone detection technique for featureclone identification. In this paper, the rationale behind the CoRA tool is\u00a0\u2026", "num_citations": "2\n", "authors": ["1229"]}
{"title": "Investigating software modularity using class and module level metrics\n", "abstract": " Modularity is at the core of software quality. It is an attribute which reflects the complexity of software systems, and their ability to evolve. In previous metric-based research, modularity has been predominantly assessed at the class level, but this level seems inappropriate for the large-scale software systems of today due to information overload. More recently work has begun to focus on the assessment of modularity at higher levels of abstraction for these types of software systems.In moving to assess such systems at the module rather than the class level, the first question that arises is to define the nature of a module. In previous research, the concept of module has many definitions some of which are ambiguous. In this chapter we investigate if metrics for higher level abstractions can help to inform on the composition of High Level Modules (HLMs). Another interesting question is focused on whether class level\u00a0\u2026", "num_citations": "2\n", "authors": ["1229"]}
{"title": "An exploration of the'introduce explaining variable'refactoring\n", "abstract": " While we know much about refactoring trends and their occurrence in open-source and proprietary systems, we still know little about their association with defects or the nature of classes where refactoring is applied. In this paper, we explore one such refactoring,\" Introduce explaining variable\"(IEV), a low-level code based refactoring which simplifies a complex expression through the introduction of added variables. We explore the possibility that this type of refactoring, requiring manipulation of variables and constructs will have a greater association with defects than other types of refactoring. Classes where they are applied will have lower coupling levels. Five releases from two projects of Eclipse were used to support this analysis and tools to extract both the set of class refactorings and class coupling and size metrics supported the analysis. Results showed that for four out of the five releases studied, classes\u00a0\u2026", "num_citations": "2\n", "authors": ["1229"]}
{"title": "A replicated and refined empirical study of the use of friends in C++ software\n", "abstract": " The friend mechanism is widely used in C++ software even though the potential benefits of its use are disputed and little is known about when, where and why it is employed in practice. Furthermore, there is limited empirical analysis of its impact in object-oriented software, with only one study (Counsell and Newson, 2000) reported at journal level.This paper aims to add to the empirical evidence of friendship\u2019s impact by replicating Counsell and Newson (2000)\u2019s original study. The study\u2019s design is refined to improve the construct validity of the evaluation and a larger cohort of systems is used to improve the generalisability of the results. The findings suggest that classes involved in friendship are coupling hotspots and that there is no link between inheritance and friendship, contrary to the findings presented in Counsell and Newson (2000). The findings also suggest that the use of friends in a class is independent of\u00a0\u2026", "num_citations": "2\n", "authors": ["1229"]}
{"title": "A Computationally Efficient Measure for Word Semantic Relatedness Using Time Series\n", "abstract": " Measurement of words semantic relatedness plays an important role in a wide range of natural language processing and information retrieval applications, such as full-text search, summarization, classification and clustering. In this paper, we propose an easy to implement and low-cost method for estimating words semantic relatedness. The proposed method is based on the utilization of words temporal footprints as found in publicly available corpora such as Google Books Ngrams (GBN), and knowledge bases such as Wikipedia. The extracted footprints are represented as time series, their similarities is measured using the Minkowski distance, and averaged using a correlation-based weighting scheme to quantify the words semantic relatedness. The overall performance of the method and the quality of the two sources used for extracting words temporal footprints (i.e., GBN and Wikipedia) are evaluated using the\u00a0\u2026", "num_citations": "1\n", "authors": ["1229"]}
{"title": "Text mining Q&A websites for supporting course design and curriculum development in higher education\n", "abstract": " This In this work we propose a novel text mining approach for assisting academic staff in their course design and curriculum development activities. The proposed approach is based on mining the textual content of technical and academic Q&A websites and online forums to find the most up-to-date and challenging topics whose inclusion in the curriculum would enhance the quality of related courses offered in higher education institutes. In specific, we have applied this method to a well-established online forum in the field of computer science, StackOverflow. com, which covers a wide range of computer programming topics, and currently contains over 15 million questions and answers. We have automatically analysed the content of these Q&A\u2019s to determine their topics and broad categories according to the Wikipedia serving as a crowd-sourced classification scheme. We present the results of our computer-assisted analysis in terms of the most frequently occurring subjects and topics and discuss the insight gained from the findings of our analysis.", "num_citations": "1\n", "authors": ["1229"]}
{"title": "An Analysis of the Use of Friends in C++ Software Systems\n", "abstract": " A commonly held belief is that a friend is a violation of encapsulation and as a consequence its use would result in poorly designed and difficult to understand software. However, little empirical evidence exists to support this claim. This paper presents a study which assesses the design implications of including friendship in a system. A number of hypotheses are investigated based on previous work in this area by Counsell and Newson,[9]. Our initial findings suggest that classes declared as friends are coupling hotspots, that the more friends a class has the more protected and private members it will contain and that friendship is not used to access inherited protected members.", "num_citations": "1\n", "authors": ["1229"]}