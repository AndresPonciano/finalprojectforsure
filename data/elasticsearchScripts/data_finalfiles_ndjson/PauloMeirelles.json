{"title": "A high-fault-coverage approach for the test of data, control and handshake interconnects in mesh networks-on-chip\n", "abstract": " A novel strategy to detect interconnect faults between distinct channels in networks-on-chip is proposed. Short faults between distinct channels in the data, control and communication handshake lines are considered in a cost-effective test sequence for Mesh NoC topologies based on XY routing.", "num_citations": "93\n", "authors": ["1224"]}
{"title": "Monitoramento de m\u00e9tricas de c\u00f3digo-fonte em projetos de software livre\n", "abstract": " Nesta tese de doutorado, apresentamos uma abordagem para a observa\u00e7\u00e3o das m\u00e9tricas de c\u00f3digo-fonte, estudando-as atrav\u00e9s de suas distribui\u00e7\u00f5es e associa\u00e7\u00f5es, al\u00e9m de discutir as rela\u00e7\u00f5es de causalidade e implica\u00e7\u00f5es pr\u00e1ticas-gerenciais para monitoramento das mesmas. Em nossos estudos avaliamos a distribui\u00e7\u00e3o e correla\u00e7\u00f5es dos valores das m\u00e9tricas de 38 projetos de software livre, dentre os com mais contribuidores ativos em seus reposit\u00f3rios. Para tal, coletamos e analisamos os valores para cada m\u00e9trica em mais de 344.872 classes e m\u00f3dulos dos projetos avaliados. Complementarmente, para mostrarmos a utilidade do monitoramento de m\u00e9tricas, descrevemos uma extens\u00e3o e adapta\u00e7\u00e3o do modelo de causalidade do conceito de atratividade de projetos de software livre, que indica uma rela\u00e7\u00e3o estat\u00edstica entre os valores das m\u00e9tricas de c\u00f3digo-fonte e a quantidade de downloads\u00a0\u2026", "num_citations": "50\n", "authors": ["1224"]}
{"title": "Redefining and testing interconnect faults in mesh nocs\n", "abstract": " An extended fault model and novel strategy to tackle interconnect faults in network-on-chips are proposed. Short faults between distinct channels are considered in a cost-effective test sequence for mesh NoC topologies based on XY routing.", "num_citations": "27\n", "authors": ["1224"]}
{"title": "Predicting software flaws with low complexity models based on static analysis data\n", "abstract": " Due to the constant evolution of technology, each day brings new programming languages, development paradigms, and ways of evaluating processes. This is no different with source code metrics, where there is always new metric classes. To use a software metric to support decisions, it is necessary to understand how to perform the metric collection, calculation, interpretation, and analysis. The tasks of collecting and calculating source code metrics are most often automated, but how should we monitor them during the software development cycle? Our research aims to assist the software engineer to monitor metrics of vulnerability threats present in the source code through a reference prediction model, considering that real world software have non-functional security requirements, which implies the need to know how to monitor these requirements during the software development cycle. As a first result, this paper presents an empirical study on the evolution of the Linux project. Based on static analysis data, we propose low complexity models to study flaws in the Linux source code. About 391 versions of the project were analyzed by mining the official Linux repository using an approach that can be reproduced to perform similar studies. Our results show that it is possible to predict the number of warnings triggered by a static analyzer for a given software project revision as long as the software is continuously monitored.", "num_citations": "17\n", "authors": ["1224"]}
{"title": "A Metrics Suite for code annotation assessment\n", "abstract": " Code annotation is a language feature that enables the introduction of custom metadata on programming elements. In Java, this feature was introduced on version 5, and today it is widely used by main enterprise application frameworks and APIs. Although this language feature potentially simplifies metadata configuration, its abuse and misuse can reduce source code readability and complicate its maintenance. The goal of this paper is to propose software metrics regarding annotations in the source code and analyze their distribution in real-world projects. We have defined a suite of metrics to assess characteristics of the usage of source code annotations in a code base. Our study collected data from 24947 classes extracted from open source projects to analyze the distribution of the proposed metrics. We developed a tool to automatically extract the metrics and provide a full report on annotations usage. Based on\u00a0\u2026", "num_citations": "14\n", "authors": ["1224"]}
{"title": "On the sustainability of academic software: the case of static analysis tools\n", "abstract": " From 1991 to 2015, 60 papers published in the ASE and SCAM conferences introduced static analysis prototypes or tools as academic software developed to support research. In this study, we characterize such academic software concerning sustainability. We performed an exploratory study regarding publicization (whether the software is available from an explicitly given URL in a software publication), evolution stage (initial development, evolution, servicing, phase-out or close-down), and recognition (the way others mention the software in their papers). Thereby, we discussed the results under the umbrella of software sustainability. Results for the academic software for static analysis published at ASE and SCAM, show that 40% are not publicly available from the URL informed by the authors; 78% are in an initial development stage, discontinued, or closed-down; 23% has no mentions in relevant digital libraries\u00a0\u2026", "num_citations": "6\n", "authors": ["1224"]}
{"title": "Fifteen years of open source software evolution\n", "abstract": " The Open Source Software (OSS) ecosystem and community has evolved enormously from the first edition of the OSS conference that took place in Genoa (Italy) in 2005. Such evolution happened in every aspect of OSS including research, technology, and business pushing its adoption to an unpredictable scale. Nowadays, it is almost impossible for people not using OSS in every interaction they have with technology. This fact is a tremendous success for OSS but such evolution and adoption has not always followed the intended path and some relevant deviations have occurred during such long journey.               This paper provide an overview of the evolution of OSS in the three mentioned areas (research, technology, and business) highlighting the main aspects and identifying the current trends that will be the basis for its future evolution.", "num_citations": "4\n", "authors": ["1224"]}
{"title": "Levantamento de m\u00e9tricas de avalia\u00e7\u00e3o de projetos de software livre\n", "abstract": " Tradicionalmente, qualidade de Software \u00e9 comumente atribu\u0131da ao processo de desenvolvimento do software que teoricamente levaa conformidade com os requisitos elencados. O surgimento e a ado\u00e7ao de metodologias \u00e1geis, procurando \u201cdesburocratizar\u201d o processo de desenvolvimento, e o crescimento do impacto do software livre na ind\u00fastria demonstram que, em muitos casos, o c\u00f3digo-fonte de um determinado programa passa a ser o principal e/ou \u00fanico artefato ao final de sua constru\u00e7ao. Assim, as m\u00e9tricas convencionais de qualidade que t\u00eam como base a documenta\u00e7ao do processo de software j\u00e1 nao podem ser consideradas suficientes para a avalia\u00e7ao de muitas aplica\u00e7oes dispon\u0131veis. Desse modo, este trabalho pretende investigar, dentro do estado-da-arte e de um ampla pesquisa realizada com especialistas em desenvolvimento de software, as m\u00e9tricas e os aspectos baseados no c\u00f3digo-fonte, testes, manutenibilidade, comunidade, entre outros apresentados neste trabalho, capazes de determinar caracter\u0131sticas da qualidade do software, ajudando na escolha de ado\u00e7ao de um software livre.", "num_citations": "4\n", "authors": ["1224"]}
{"title": "Annotation sniffer: Open source tool for annotated code elements\n", "abstract": " Since the introduction of code annotations in the Java language, this feature has been widely adopted by software developers across the globe. Main enterprise frameworks make extensive use of code annotations as a replacement for XML based solutions. Code annotations are inserted directly on code elements, providing a simple way to introduce custom metadata. To aid in our research that aims understanding how developers use this feature, we developed the Annotation Sniffer. An open source tool that extracts a suite of metrics dedicated to code annotations. Video link: https://youtu. be/f9ER5zaJkXc", "num_citations": "3\n", "authors": ["1224"]}
{"title": "Defini\u00e7\u00e3o de clusters para classifica\u00e7\u00e3o do uso de anota\u00e7\u00f5es em c\u00f3digo Java\n", "abstract": " Code annotation allows the introduction of custom metadata on programming elements directly on the source code. In Java, it is used extensively by enterprise applications and frameworks. Although it has become popular, there are few studies dedicated to the analysis and assessment of its usage. For instance, it is unknown the impact that annotations brings to software maintenance. This paper aims to classify object oriented classes based on its annotations usage, through a Kohonen Self Organizing Map. The input of the map are metrics values related to annotations. As a result, this approach allowed the identification of distinct classes.Resumo. Anota\u00e7\u00f5es de c\u00f3digo permitem introduzir metadados sobre elementos de programa\u00e7\u00e3o diretamente no c\u00f3digo fonte. Na linguagem Java, ela \u00e9 utilizada extensivamente por aplica\u00e7\u00f5es e frameworks corporativos. Apesar da sua popularidade, existem poucos estudos dedicados \u00e0 an\u00e1lise e avalia\u00e7\u00e3o do seu uso. Por exemplo, n\u00e3o se sabe qual o impacto de anota\u00e7\u00f5es na manuten\u00e7\u00e3o do c\u00f3digo fonte. Este trabalho tem o objetivo de classificar classes de acordo com seu uso de anota\u00e7\u00f5es, utilizando um Mapa de Kohonen para visualizar os grupos. Para esse agrupamento, s\u00e3o utilizadas como entrada os valores de m\u00e9tricas relacionadas a anota\u00e7\u00f5es. Como resultado, a abordagem proposta permitiu identificar grupos bem distintos de classes, classificando-as dentro ou fora do uso comum de anota\u00e7\u00f5es dentro do universo de projetos analisados.", "num_citations": "3\n", "authors": ["1224"]}
{"title": "Kalibro Metrics: um servi\u00e7o para monitoramento e interpreta\u00e7 ao de m\u00e9tricas de c\u00f3digo-fonte\n", "abstract": " M\u00e9tricas de c\u00f3digo-fonte nao sao novidade, mas ainda nao t\u00eam sido bem exploradas no desenvolvimento de software. A maioria das ferramentas de m\u00e9tricas mostra valores num\u00e9ricos isolados, que nao sao f\u00e1ceis de entender porque a interpreta\u00e7ao desses valores pode depender do contexto de implementa\u00e7 ao.O objetivo do Kalibro Metrics \u00e9 melhorar a legibilidade de m\u00e9tricas de c\u00f3digo-fonte, difundindo seu uso. Ele permite ao usu\u00e1rio criar configura\u00e7oes de intervalos associados a avalia\u00e7oes qualitativas, incluindo coment\u00e1rios e recomenda\u00e7oes. Usando essas configura\u00e7oes, Kalibro mostra resultados de m\u00e9tricas de modo amig\u00e1vel, ajudando: arquitetos de software a detectar falhas de projeto; gerentes de projetos a controlar qualidade de c\u00f3digo-fonte; desenvolvedores de software e pesquisadores a comparar caracter\u0131sticas espec\u0131ficas do c\u00f3digo-fonte de v\u00e1rios projetos. Essas configura\u00e7oes podem ser compartilhadas e evoluir.", "num_citations": "3\n", "authors": ["1224"]}
{"title": "Improving Parallelism in Git and GNU Compiler Collection: Strategies, Difficulties, and Lessons Learned\n", "abstract": " Manufacturers are creating powerful CPUs by exponentially increasing the number of cores over time, as producing faster sequential chips has become more expensive. Developers must now employ parallel strategies and design parallel algorithms if they want to use every resource available in the machine. Still, many successful open-source projects are mostly sequential, failing to harness the full computational power available. This article presents approaches for performance improvements into two large and well-known open-source projects, Git and GCC, using parallel programming. We share the difficulties faced and the strategies used, concluding with a set of lessons learned useful to similar parallelization processes.", "num_citations": "1\n", "authors": ["1224"]}
{"title": "Benefits and Challenges of Open-Source Health informatics Systems: A Systematic Search of Projects and Literature Review\n", "abstract": " Health Informatics Systems (HIS) draw more attention as their benefits are further explored and becoming more evident.  The improvement of patient care and the quality of health services are examples of such advantages. Nevertheless, proprietary systems are not always viable due to their high costs. We investigated the benefits and challenges of Open-Source Health informatics Systems (OHIS) adoption discussed in the literature, and we also mapped the real-world OHIS projects, with their technical and community characteristics. Both results guide us to address the aspects that still need to be overcome and also to identify the criteria to help managers and IT professionals in choosing the most suitable  OHIS for their context. We conducted a Systematic Mapping Study to review the literature and also mined source code repositories of OHIS projects.  We employ well-consolidated methods from the software engineering community, and we differentiate from similar related works by the use of a more systematic method and also to evaluate OHIS projects using objective software engineering metrics and artifacts. We found 500 papers and 151 projects, selecting 26 works to analyze thoroughly and mining 38 active OHIS repositories. We mapped the benefits and challenges to adopt OHIS projects and identified the legal and technical characteristics of them. We propose a conceptual map to illustrate  the relationship among all the OHIS adoption benefits. We then correlate how technical and documental artifacts from an OHIS project affect their expected benefits and challenges. Thus, we recommend a set of artifacts and metrics well established in\u00a0\u2026", "num_citations": "1\n", "authors": ["1224"]}
{"title": "Attribute Sniffer: Collecting Attribute Metrics for C# Code\n", "abstract": " The C# attributes have been available since the release of this language as a means to configure custom metadata on code elements. Being very similar to Java annotations, they are both introduced directly in the source code. Several C# frameworks such as NUnit, Unity Game Engine, and JSON. net use attributes to allow applications to configure custom metadata, as to execute different behavior and validation. This paper presents the Attribute Sniffer, a tool to collect attributes metrics on the C# source code, also validating the metrics proposed initially for Java annotations.", "num_citations": "1\n", "authors": ["1224"]}