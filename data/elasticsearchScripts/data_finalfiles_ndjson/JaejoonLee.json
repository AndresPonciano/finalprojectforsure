{"title": "FORM: A feature-; oriented reuse method with domain-; specific reference architectures\n", "abstract": " Systematic discovery and exploitation of commonality across related software systems is a fundamental technical requirement for achieving successful software reuse. By examining a class/family of related systems and the commonality underlying those systems, it is possible to obtain a set of reference models, i.e., software architectures and components needed for implementing applications in the class. FORM (Feature-;Oriented Reuse Method) supports development of such reusable architectures and components (through a process called the \u201cdomain engineering\u201d) and development of applications using the domain artifacts produced from the domain engineering. FORM starts with an analysis of commonality among applications in a particular domain in terms of services, operating environments, domain technologies, and implementation techniques. The model constructed during the analysis is called a\u00a0\u2026", "num_citations": "1598\n", "authors": ["1510"]}
{"title": "Feature-oriented product line engineering\n", "abstract": " The feature-oriented reuse method analyzes and models a product line's commonalities and differences in terms of product features and uses the analysis results to develop architectures and components. The article illustrates, with a home integration system example, how FORM brings efficiency into product line development.", "num_citations": "847\n", "authors": ["1510"]}
{"title": "Concepts and guidelines of feature modeling for product line software engineering\n", "abstract": " Product line software engineering (PLSE) is an emerging software engineering paradigm, which guides organizations toward the development of products from core assets rather than the development of products one by one from scratch. In order to develop highly reusable core assets, PLSE must have the ability to exploit commonality and manage variability among products from a domain perspective. Feature modeling is one of the most popular domain analysis techniques, which analyzes commonality and variability in a domain to develop highly reusable core assets for a product line. Various attempts have been made to extend and apply it to the development of software product lines. However, feature modeling can be difficult and time-consuming without a precise understanding of the goals of feature modeling and the aid of practical guidelines. In this paper, we clarify the concept of features and the\u00a0\u2026", "num_citations": "536\n", "authors": ["1510"]}
{"title": "A feature-oriented approach to developing dynamically reconfigurable products in product line engineering\n", "abstract": " Dynamic product reconfiguration refers to making changes to a deployed product configuration while a system is running. Recently, there have been increasing demands for dynamic product reconfiguration in various application areas (e.g., ubiquitous computing, self-healing systems, etc.); however, most product line engineering methods in the literature have focused on the development of reusable core assets for statically configured products. In this paper, we propose a feature-oriented approach to develop dynamically reconfigurable core assets. This approach takes feature binding analysis results as a key design driver for identifying and managing variation points of dynamically reconfigurable products. We also provide a conceptual model for a reconfigurator, which monitors and manages product reconfiguration at run time. The method is illustrated with a home service robot product line example", "num_citations": "131\n", "authors": ["1510"]}
{"title": "Feature-Oriented Re-engineering of Legacy Systems into Product Line Assets \u2013 a Case Study \n", "abstract": " Home service robots have a wide range of potential applications, such as home security, patient caring, cleaning, etc. The services provided by the robots in each application area are being defined as markets are formed and, therefore, they change constantly. Thus, robot applications need to evolve both quickly and flexibly adopting frequently changing requirements. This makes software product line framework ideal for the domain of home service robots. Unfortunately, however, robot manufacturers often focus on developing technical components (e.g., vision recognizer and speech processor) and then attempt to develop robots by integrating these components in an ad-hoc way. This practice produces robot applications that are hard to re-use and evolve when requirements change. We believe that re-engineering legacy robot applications into product line assets can significantly enhance reusability and\u00a0\u2026", "num_citations": "93\n", "authors": ["1510"]}
{"title": "Feature-oriented variability management in product line engineering\n", "abstract": " Implementing feature-oriented variability modeling throughout the life cycle.", "num_citations": "82\n", "authors": ["1510"]}
{"title": "An approach for developing service oriented product lines\n", "abstract": " Service Orientation (SO) is a relevant promising candidate for accommodating rapidly changing user needs and expectations. Adopting SO in practice for real software and system development, however, has uncovered several challenging issues, such as how to identify services, determining configurations of services that are relevant to users' current context, and maintaining system integrity after configuration changes. In this paper, we propose a method that addresses these issues by adapting a feature-oriented product line engineering approach. Our method is based on the feature analysis technique that enables us to identify services of a service oriented system. The method is notable in that it guides developers to identify services at the right level of granularity, to map users' context to relevant service configuration, and to maintain system integrity in terms of invariants and pre/post conditions of services. We\u00a0\u2026", "num_citations": "79\n", "authors": ["1510"]}
{"title": "Feature\u2010oriented engineering of PBX software for adaptability and reuseability\n", "abstract": " Incorporating a high level of adaptability and reusability into software is one challenge that all software engineers face. PBX (Private Branch Exchange) is one such system that requires a high level of adaptability and reusability because of rapidly expanding service features, ever changing communication technology, continuously evolving standards and diverse communication laws and standards in different countries. The software engineering community has made various efforts to address the problem of enhancing software adaptability and reusability. As a result, many programming concepts, such as information hiding, encapsulation, object orientation, abstract data type and modularization, have been developed. Although adequate application of these principles requires the domain or program family perspective, most methods, so far, have been oriented toward developing a single application. FORM\u00a0\u2026", "num_citations": "77\n", "authors": ["1510"]}
{"title": "Components meet aspects: Assessing design stability of a software product line\n", "abstract": " ContextIt is important for Product Line Architectures (PLA) to remain stable accommodating evolutionary changes of stakeholder\u2019s requirements. Otherwise, architectural modifications may have to be propagated to products of a product line, thereby increasing maintenance costs. A key challenge is that several features are likely to exert a crosscutting impact on the PLA decomposition, thereby making it more difficult to preserve its stability in the presence of changes. Some researchers claim that the use of aspects can ameliorate instabilities caused by changes in crosscutting features. Hence, it is important to understand which aspect-oriented (AO) and non-aspect-oriented techniques better cope with PLA stability through evolution.ObjectiveThis paper evaluates the positive and negative change impact of component and aspect based design on PLAs. The objective of the evaluation is to assess how aspects and\u00a0\u2026", "num_citations": "67\n", "authors": ["1510"]}
{"title": "A feature-oriented approach for developing reusable product line assets of service-based systems\n", "abstract": " Service orientation (SO) is a relevant promising candidate for accommodating rapidly changing user needs and expectations. One of the goals of adopting SO is the improvement of reusability, however, the development of service-based system in practice has uncovered several challenging issues, such as how to identify reusable services, how to determine configurations of services that are relevant to users\u2019 current product configuration and context, and how to maintain service validity after configuration changes. In this paper, we propose a method that addresses these issues by adapting a feature-oriented product line engineering approach. The method is notable in that it guides developers to identify reusable services at the right level of granularity and to map users\u2019 context to relevant service configuration, and it also provides a means to check the validity of services at runtime in terms of invariants and pre/post\u00a0\u2026", "num_citations": "53\n", "authors": ["1510"]}
{"title": "Feature binding analysis for product line component development\n", "abstract": " Feature analysis, which provides commonality and variability information of a product line, is essential for product line asset development. Moreover, feature binding information (i.e., when and how product features are included to products and delivered to customers) also drives product line component design. Feature binding can be examined from three perspectives: what features are bound (feature binding unit), when features are bound (feature binding time), and how features are bound (feature binding techniques), and this information must be made available to component design so that composition of components for feature binding becomes feasible. In this paper, we introduce an approach to analyzing feature binding from the three perspectives (i.e., what, when, and how) and illustrate how the analysis results can be used for component development of a product line.", "num_citations": "44\n", "authors": ["1510"]}
{"title": "Using a marketing and product plan as a key driver for product line asset development\n", "abstract": " The product line engineering paradigm has emerged recently to address the need to minimize the development cost and the time to market in this highly competitive global market. Product line development consists of product line asset development and product development using the assets. Product line requirements are essential inputs to product line asset development. These inputs, although critical, are not sufficient to develop product line assets. A marketing and product plan, which includes plans on what features are to be packaged in products, how these features will be delivered to customers (e.g., feature binding time), and how the products will evolve in the future, also drives product line asset development; thus this paper explores design issues from the marketing perspective and presents key design drivers that are tightly coupled with the marketing strategy. An elevator control software example\u00a0\u2026", "num_citations": "44\n", "authors": ["1510"]}
{"title": "How dynamic is your dynamic software product line?\n", "abstract": " Recently, there have been increasing demands for the postponement of decisions on software adaptations and product variations to provide the flexibility required by dynamic environments and users. The goal is that software adaptations and product variations can be chosen even at runtime. As such, a research theme that addresses development issues for reusable and dynamically reconfigurable core assets has emerged and it is called dynamic software product lines (DSPLs) with its consequential need to manage runtime variability. Research on the use of runtime variability, however, is still heavily based on the specification of decisions during design time. That is, a system simply postpones\u2014when to adapt \u201cto runtime but\u2014how to adapt \u201cis already decided at design time. In this paper, we present a brief assessment of the current research in the area and discuss some research issues related to the feasibility of DSPL oriented approaches to build self-adaptive systems.", "num_citations": "39\n", "authors": ["1510"]}
{"title": "A feature-based approach to product line production planning\n", "abstract": " A production plan, which describes how core assets are used to develop products, has an important role in product line engineering as a communications medium between core asset developers and product developers. Recently, there have been efforts to address issues related to production planning, most of which focus on the process and business/management aspects of production planning; not much emphasis is given to technical issues such as deciding which features will be made as core assets and what their granularity will be.               In this paper, we introduce a feature-based approach to product line production planning and illustrate how our approach addresses these technical issues. In our approach, a feature model and feature-binding information are used as primary input to production plan development. A product line production plan created using our approach could be customized\u00a0\u2026", "num_citations": "39\n", "authors": ["1510"]}
{"title": "Feature-oriented analysis and specification of dynamic product reconfiguration\n", "abstract": " In many application domains, scenarios have been developed that benefit from the idea of ambience; Systems will not necessarily be activated by people anymore, but will react on their own to situations they recognize. It, thereby, must dynamically adapt itself to changes in the technical environment or user context. In addition, such dynamically reconfigurable products must be customized to the individual needs of particular users. Product line engineering can be applied to create these variants efficiently; however, means for handling adaptation capabilities at a generic level are required. This paper introduces the front-end of such a means by describing an approach for analysis and specification of features that vary as a part of reconfigurations at runtime.", "num_citations": "27\n", "authors": ["1510"]}
{"title": "Re-engineering software architecture of home service robots: A case study\n", "abstract": " With the advances of robotics, computer science, and other related areas, home service robots attract much attention from both academia and industry. Home service robots present interesting technical challenges to the community in that they have a wide range of potential applications, such as home security, patient caring, cleaning, etc., and that the services provided by the robots in each application area are being defined as markets are formed and, therefore, they change constantly. Without architectural considerations to address these challenges, robot manufacturers often focus on developing technical components (eg, vision recognizer, speech processor, and actuator) and then attempt to develop service robots by integrating these components. When prototypes are developed for a new application, or when services are added, modified, or removed from existing robots, unexpected, undesirable, and often\u00a0\u2026", "num_citations": "27\n", "authors": ["1510"]}
{"title": "An aspect-based feature model for architecting component product lines\n", "abstract": " Feature modeling is widely used for software product line analysis to capture commonality and variability of a product line. As product line variations are mainly captured in a feature model, the mapping between features and architectural components is essential to enable the derivation of product architectures from the feature model. However, current SPL architecture design approaches that map features to architectural components do not model crosscutting concerns explicitly either at a feature model or at product line architecture design. We propose a feature-oriented solution with aspects for product line architecture design aiming at improving product line architecture evolvability by adopting aspect-oriented techniques, which provide a promising support for modeling crosscutting concerns. Our approach includes guidelines for developing and refining SPL requirements into component-based product line\u00a0\u2026", "num_citations": "22\n", "authors": ["1510"]}
{"title": "Identifying and specifying reusable services of service centric systems through product line technology\n", "abstract": " Position Paper Page 1 1 Identifying and Specifying Reusable Services of Service Centric Systems through Product Line Technology Position Paper Dr. Jaejoon Lee jaejoon.lee@iese.fraunhofer.de Copyright \u00a9 Fraunhofer IESE 2007 Identifying and Specifying Reusable Services of Service Centric Systems through Product Line Technology Slide 2 Outline \u2022 Introduction \u2022 Approach Overview \u2022 Service Identification \u2022 Service Specification \u2022 Summary Page 2 2 Copyright \u00a9 Fraunhofer IESE 2007 Identifying and Specifying Reusable Services of Service Centric Systems through Product Line Technology Slide 3 \u2022 \u201cService-oriented architecture (SOA)\u201d is an emerging concept for the development of information systems - Not for a statically configured system - Service providers/consumers may join in and leave from a system dynamically (ie, at run time) - Some examples include Web services, ebXML, etc. \u2022 One of the \u2026", "num_citations": "21\n", "authors": ["1510"]}
{"title": "History-sensitive heuristics for recovery of features in code of evolving program families\n", "abstract": " A program family might degenerate due to unplanned changes in its implementation, thus hindering the maintenance of family members. This degeneration is often induced by feature code that is changed individually in each member without considering other family members. Hence, as a program family evolves over time, it might no longer be possible to distinguish between common and variable features. One of the imminent activities to address this problem is the history-sensitive recovery of program family's features in the code. This recovery process encompasses the analysis of the evolution history of each family member in order to classify the implementation elements according to their variability nature. In this context, this paper proposes history-sensitive heuristics for the recovery of features in code of degenerate program families. Once the analysis of the family history is carried out, the feature elements are\u00a0\u2026", "num_citations": "14\n", "authors": ["1510"]}
{"title": "Feature-oriented engineering of PBX software\n", "abstract": " PBX (private branch exchange) systems are evolving rapidly due to fast expanding services, ever-changing communication technology, continuously evolving standards, and diverse communication laws and standards in different countries. As new features are added continuously, the detection of feature interaction problems early in the development lifecycle and the resolution of these problems through adaptable software are difficult challenges which all PBX software engineers face. A feature-oriented reuse method (FORM), introduced in this paper, concentrates on analyzing and modeling commonalities and differences in applications of a given domain in terms of features. The analysis results are then used for both the analysis of feature interactions and the engineering of domain-oriented software with a high level of adaptability (and reusability). We found that FORM facilitates the analysis of feature\u00a0\u2026", "num_citations": "14\n", "authors": ["1510"]}
{"title": "Re-engineering a Credit Card Authorization System for Maintainability and Reusability of Components \u2013 A Case Study \n", "abstract": " A credit card authorization system (CAS) is a large information system performing diverse activities such as purchase authentication, balance transfer, cash advances, etc. One characteristic of CAS is its frequent update to satisfy the needs of customers and newly enforced governmental laws. Thus, CAS should be designed to minimize the effects of updates, for which high reusability of the CAS components is desired. In this paper, we present our experience of re-engineering CAS based on a feature model for improved reusability of components, which alleviates the difficulty of system maintenance. The result of this project has been successfully transferred to the company.", "num_citations": "10\n", "authors": ["1510"]}
{"title": "An Aspect-oriented View to Support Feature-oriented Reengineering\n", "abstract": " The Feature-oriented reengineering process provides guidelines to build a Software Product Line (SPL) from legacy software assets by using feature model to support the creation of other development assets, such as the product line architecture. Current aspectoriented models are mainly focused on supporting the implementation phase of a feature-oriented reengineering process. There is a lack of models to support both crosscutting concerns and variability. This work proposes an aspect-oriented feature view to support the representation of both crosscutting concerns and variability, enabling to reason about how crosscutting concerns affect each other and other features and also to trace both variability and crosscutting concerns, which facilitates to measure the impact of change requests. We have presented an illustrative example of the usefulness of this view and also a formal specification to provide clear and concise understanding about the view.", "num_citations": "7\n", "authors": ["1510"]}
{"title": "Software product line engineering to develop variant-rich web services\n", "abstract": " Service-Oriented Architecture (SOA) enables enterprise for distributed and flexible software development. SOA aims at promoting effective software asset reuse by means of encapsulating functionalities as reusable services accessible through well-defined interfaces. However, one of the challenging problems for the realization of this vision is an need for design and management of variants of SOA-based solutions. Such SOA-based solutions require customization to meet stakeholders\u2019 individual functional and non-functional requirements. In this chapter, a methodological foundation for modeling and developing variant-rich SOA-solutions by incorporating the principles of Software Product Line Engineering (SPLE) into the SOA development life cycle  .", "num_citations": "6\n", "authors": ["1510"]}
{"title": "Bio-Inspired Mechanisms for Coordinating Multiple Instances of a Service Feature in Dynamic Software Product Lines.\n", "abstract": " One of the challenges in Dynamic Software Product Line (DSPL) is how to support the coordination of multiple instances of a service feature. In particular, there is a need for a decentralized decision-making capability that will be able to seamlessly integrate new instances of a service feature without an omniscient central controller. Because of the need for decentralization, we are investigating principles from self-organization in biological organisms. As an initial proof of concept, we have applied three bio-inspired techniques to a simple smart home scenario: quorum sensing based service activation, a firefly algorithm for synchronization, and a gossiping (epidemic) protocol for information dissemination. In this paper, we first explain why we selected those techniques using a set of motivating scenarios of a smart home and then describe our experiences in adopting them.", "num_citations": "6\n", "authors": ["1510"]}
{"title": "A feature-oriented method for product line software engineering\n", "abstract": " A Feature-Oriented Method for Product Line Software Engineering Page 1 1 Title : Feature-Oriented Method for Product Line Software Engineering \u00a9 2002 by Pohang University of Science and Technology Department of Computer Science and Engineering Software Engineering Laboratory, RO Korea Pohang University of Science and Technology (POSTECH) Software Engineering Laboratory ISFST 2002 Tutorial A Feature-Oriented Method for Product Line Software Engineering Part 2 : Feature Analysis Pohang University of Science and Technology (POSTECH) Copyright \u00a9 2002 SE Lab. Dept. of CSE POSTECH, RO Korea International Symposium on Future Software Technology 2002 Pre-Symposium Tutorial October 20, 2002, Xi\u2019an, China Kyo C. Kang and Jaejoon Lee POSTECH Copyright \u00a9 2002 SE Lab. Dept. of CSE POSTECH, RO Korea Introduction Feature Modeling \u25aa Domain Definition \u25aa Feature \u2026", "num_citations": "5\n", "authors": ["1510"]}
{"title": "Dynamic feature deployment and composition for dynamic software product lines\n", "abstract": " We aim to tackle problems with feature interoperability in dynamic software product lines: a feature allows collaborations with other features not conceived when it is deployed. In this position paper, we propose a Dynamic Feature Deployment (DFD) idea, which is a model-driven approach to support seamless integration of new features and changes of product configuration at runtime. The approach is based on a feature-modelling technique that directly deals with flexibility of reusable software assets in software product line engineering. We also propose a Hybrid between Passive/Active Behaviours (Hy-PAB) architecture model to support two extreme sets of behaviours for DFD: an active coordinating behaviour that controls the interactions with other features, and a passive subordinating behaviour that allows other features to control their interactions with other features.", "num_citations": "4\n", "authors": ["1510"]}
{"title": "Feature-based determination of product line asset types. in-house, cots, or open source\n", "abstract": " One important activity in product line engineering is product line production planning [1, 2], during which stakeholders of a product line determine what and how product line assets are developed and used for product development. Moreover, decisions on which assets should be developed as in-house assets or purchased as COTS are made. Recently, there have been increasing interests in using open source software for product development [3, 4]. As pointed out in [3], it seems reasonable to make some common components of a product line as open source software or acquire them from exiting open source communities. However, it is still not clear what a \u201ccommon\u201d component means and how it can be identified. Suppose, for example, that a switching component for voice communications in a telephony product line is a common component and is required for every product of the product line. If the overall quality of a switching system mainly depends on the quality of the switching component, then it may be difficult to develop such components as open source software, as they may be developed based on lots of know-how of a company. Therefore, we need a systematic approach or guidelines that can be used to determine which product line assets to be developed as open source software. In this position paper, we propose a feature-based approach to identifying product line assets and determining their development strategies during product line production planning. The approach is an extension of [5], and a feature model [6], which captures commonality and vari-", "num_citations": "2\n", "authors": ["1510"]}
{"title": "Feature oriented analysis and design for dynamically reconfigurable product lines\n", "abstract": " Dynamic product reconfiguration refers to making changes to a deployed product configuration at runtime. Dynamic addition, deletion, or modification of product features, or dynamic changes of architectural structures (Gomaa and Hussein, 2004; Kramer and Magee, 1990) are examples of dynamic reconfiguration. Dynamic product reconfiguration has been studied in various research areas such as self-healing systems (Garlan and Schmerl, 2002; Ganek and Corbi, 2003; Oreizy et al., 1999), context-aware computing (Yau et al., 2002;(Schilit et al., 1994) software component deployment (Mikic-Rakic and Medvidovic, 2002;(van der Hoek and Wolf, 2003; Hall et al.. 1999), and ubiquitous computing (Sousa and Garlan, 2002; Banavar and Bernstein, 2002). When a change in the operational context is detected, it may trigger product reconfiguration to provide context-relevant services or to meet quality requirements (eg, performance). Different from statically configured products, dynamically reconfigurable products should be able to: monitor the current situation (ie, the operational context) of a product\u25fe validate a reconfiguration request with consideration of change impacts and\u25fe available resources determine strategies to handle currently active services during reconfiguration\u25fe perform dynamic reconfiguration while maintaining system integrity\u25feDynamic reconfiguration approaches in the literature have mainly focused so far on reconfiguration of single products, on mechanisms for detecting changes and trigger reconfigurations, and on techniques for correctly reconfiguring the product technically at runtime. The dynamically realized adaptations of a\u00a0\u2026", "num_citations": "1\n", "authors": ["1510"]}