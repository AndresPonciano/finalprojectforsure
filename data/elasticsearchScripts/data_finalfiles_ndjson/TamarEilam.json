{"title": "Improving performance and availability of services hosted on iaas clouds with structural constraint-aware virtual machine placement\n", "abstract": " The increasing popularity of modern virtualization-based datacenters continues to motivate both industry and academia to provide answers to a large variety of new and challenging questions. In this paper we aim to answer focusing on one such question: how to improve performance and availability of services hosted on IaaS clouds. Our system, structural constraint-aware virtual machine placement (SCAVP), supports three types of constraints: demand, communication and availability. We formulate SCAVP as an optimization problem and show its hardness. We design a hierarchical placement approach with four approximation algorithms that efficiently solves the SCAVP problem for large problem sizes. We provide a formal model for the application (to better understand structural constraints) and the datacenter (to effectively capture capabilities), and use the two models as inputs to the placement problem. We\u00a0\u2026", "num_citations": "251\n", "authors": ["1929"]}
{"title": "Virtual solution composition and deployment system and method\n", "abstract": " A method and information processing system are provided for creating a virtual part and for composing and deploying a virtual solution with one or more virtual parts. The virtual part includes: a virtual image including a set of compatible software components; a set of configurability points, each configurability point defining at least one parameter of the virtual part that is configurable; a set of virtual ports, wherein each virtual port indicates at least one of a set of virtual parts required by the virtual part and a set of virtual parts that are compatible with the virtual part; and a set of configuration scripts adapted to reconfigure the virtual image.", "num_citations": "163\n", "authors": ["1929"]}
{"title": "An architecture for virtual solution composition and deployment in infrastructure clouds\n", "abstract": " The combination of virtual server technology and the Infrastructure-as-a-Service (IaaS) approach to utility computing promises to revolutionize the way in which distributed software services are deployed. Server virtualization technology can be used to capture complete reusable software stacks, shifting the complexity of middleware installation and configuration from deployment to packaging. IaaS clouds provide a set of interfaces for controlling virtual machines and configuring their hardware and network environment, substantially reducing the complexity of service provisioning. In this paper we identify and tackle a few of the remaining challenges in fulfilling the promise of radical simplification of distributed software service composition and deployment. We propose an approach and architecture for composition and deployment of virtual software services in cloud environments. We introduce a virtual appliance\u00a0\u2026", "num_citations": "130\n", "authors": ["1929"]}
{"title": "Speculative caching of individual fields in a distributed object system\n", "abstract": " This disclosure presents a technique of field-level caching in distributed object-oriented systems, in which a speculative approach is taken to identify opportunities for caching. The speculative approach is particularly suitable for exploitation of opportunities for caching. Invalidation protocols, which are fully compliant with the Java memory model, are provided to recover from incorrect speculation, while incurring only a low overhead. The technique has been implemented on a cluster of machines, and has been found to be readily scalable with multi-threaded applications. Field caching, optionally combined with other optimizations, produces a practically important performance step up in distributed environments, such as the cluster virtual machine for Java, which transparently distributes an application's threads and objects among the nodes of a cluster.", "num_citations": "125\n", "authors": ["1929"]}
{"title": "Simplified deployment modeling\n", "abstract": " A deployment modeling platform enables a user to model application characteristics of target software and to associate application modeling parameters to the modeled application characteristics. A user may also model environment characteristics of a target deployment environment and to associate environment modeling parameters to the modeled deployment environment characteristics. Still further, a user may create a deployment model that associates and maps selected parameters of the modeled application characteristics of the target software to associated parameters of the modeled environment characteristics of the deployment environment, and to verify that each parameter that relates to a requirement is mapped to and is fulfilled by an associated parameter that relates to a corresponding capability to determine whether validation problems exist in order to deploy the target software in the associated\u00a0\u2026", "num_citations": "119\n", "authors": ["1929"]}
{"title": "Semantically rich composable software image bundles\n", "abstract": " A composable software bundle is created by retrieving a semantic representation of a set of software modules. A functional representation of a set of operations is retrieved. Each operation in the set of operations is to be performed on the set of software modules during at least one virtual image life-cycle phase in a set of virtual image life-cycle phases. A set of artifacts including a set of executable instructions associated with the set of operations is identified. The semantic representation, the functional representation, and the set of artifacts, are stored in a composable software bundle.", "num_citations": "117\n", "authors": ["1929"]}
{"title": "Provisioning of services based on declarative descriptions of a resource structure of a service\n", "abstract": " The present invention is directed to provisioning and managing computing services in a computing utility system. It receives a Concrete Resource Model describing a desired resource structure. It uses a representation of the infrastructure, including resources, configuration, capabilities and constraints, as a knowledge subsystem. The method generates and executes provisioning actions to affect the infrastructure resources by creating a resource structure that matches the description in the Concrete Resource Model and satisfies the requirements described in the input. The method can be used to create new computing services, to destroy existing computing services, to modify the resource combination allocated to a computing service, or the configuration of these resources. Provisioning actions, generated, can be executed immediately, or saved and executed later, and possibly many times. Provisioning actions\u00a0\u2026", "num_citations": "107\n", "authors": ["1929"]}
{"title": "Automatic provisioning of services based on a high level description and an infrastructure description\n", "abstract": " The present invention is directed to provisioning and managing computing services in a computing utility system. It receives as an input an infrastructure independent description of a set of requirements on the new desired state of a computing service. It uses a knowledge plane to represent the infrastructure. The method generates a Concrete Model that describes a resource structure that refines the input and is implementable over the infrastructure. It then generates and possibly executes provisioning actions to create an identical resource structure on the infrastructure. The method can be used to create new computing services, to destroy existing computing services, to modify the resource combinations allocated to a computing service, or the configuration of these resources. Provisioning actions can be executed immediately, or saved and executed later, and possibly many times. Provisioning actions may be\u00a0\u2026", "num_citations": "105\n", "authors": ["1929"]}
{"title": "Model driven provisioning: Bridging the gap between declarative object models and procedural provisioning tools\n", "abstract": " Today\u2019s enterprise data centers support thousands of mission-critical business applications composed of multiple distributed heterogeneous components. Application components exhibit complex dependencies on the configuration of multiple data center network, middleware, and related application resources. Applications are also associated with extended life-cycles, migrating from development to testing, staging and production environments, with frequent roll-backs. Maintaining end-to-end data center operational integrity and quality requires careful planning of (1) application deployment design, (2) resource selection, (3) provisioning operation selection, parameterization and ordering, and (4) provisioning operation execution. Current data center management products are focused on workflow-based automation of the deployment processes. Workflows are of limited value because they hard-code many\u00a0\u2026", "num_citations": "94\n", "authors": ["1929"]}
{"title": "Method and system for constructing virtual resources\n", "abstract": " System for managing a life cycle of a virtual resource. One or more virtual resources are defined. The one or more defined virtual resources are created. The created virtual resources are instantiated. Then, a topology of a virtual resource is constructed using a plurality of virtual resources that are in at least one of a defined, a created, or an instantiated state.", "num_citations": "92\n", "authors": ["1929"]}
{"title": "Methods and apparatus for dynamic allocation of servers to a plurality of customers to maximize the revenue of a server farm\n", "abstract": " A method and structure for dynamic allocation of servers to customers in a server farm which supports a flexible contract structure such that the total revenue of the farm is maximized. The invention creates a resource allocation plan based on a long term forecast for the server farm, taking into account traffic, number of servers, customers' contracts and revenue optimization algorithms. The plan is then modified as indicated by short term forecasting using currently monitored load metrics to reallocate to maximize revenue for particular time periods.", "num_citations": "91\n", "authors": ["1929"]}
{"title": "Pattern based SOA deployment\n", "abstract": " A key function of a Service Oriented Architecture is the separation between business logic and the platform of its implementation and deployment. Much of the focus in SOA research has been on service design, implementation, composition, and placement. In this paper we address the challenge of configuring the hosting infrastructure for SOA service deployment. The functional and non-functional requirements of services impose constraints on the configuration of their containers at different levels. Presently, such requirements are captured in informal documents, making service deployment a slow, expensive, and error-prone process. In this paper, we introduce a novel approach to formally capturing service deployment best-practices as model-based patterns. Deployment patterns capture the structure of a solution, without bindings to specific resource instances. They can be defined at different levels of\u00a0\u2026", "num_citations": "84\n", "authors": ["1929"]}
{"title": "Managing the configuration complexity of distributed applications in internet data centers\n", "abstract": " In this article we examine the challenges faced by data center administrators when deploying and configuring Web applications. We discuss how the configuration dependencies of these Web applications cut across software stacks, network layers, and middleware container boundaries. We argue that the deployment and configuration process requires the combined expertise from multiple domains such as application, middleware, network, security, reliability, and performance. We review the model-based tools available today to manage the configuration complexity of these applications and introduce a new tool that extends the existing state of the art by automatically generating actionable distributed deployment models using model transformation techniques. The key idea behind this new tool is the principle of separation of concerns: developers capture the logical structure of the application in a model, best\u00a0\u2026", "num_citations": "84\n", "authors": ["1929"]}
{"title": "Compact routing schemes with low stretch factor\n", "abstract": " This paper presents a routing strategy called Pivot Interval Routing (PIR), which allows message routing on every weighted n-node network along paths whose stretch factor (namely, the ratio between the length of the routing path and the shortest path) is at most five, and whose average stretch factor is at most three, with routing tables of size O (n log 3/2 n) bits per node. In addition, the route lengths are at most 2D (\u2308 1.5D\u2309 for uniform weights) where D is the weighted diameter of the network. Moreover, it is shown that the PIR strategy can be constructed in polynomial time and can be implemented so that the generated scheme is in the form of an interval routing scheme (IRS), using at most O (n log n) intervals per link. As a result, the schemes are simpler than previous ones and they imply that the paths followed by messages are loop-free. On the other hand, we show that there is no loop-free routing strategy\u00a0\u2026", "num_citations": "72\n", "authors": ["1929"]}
{"title": "Componentized automatic provisioning and management of computing environments for computing utilities\n", "abstract": " The present invention provides systems, methods and apparatus for automatically provisioning and managing resources in a computing utility. Its automation procedures are based on a resource model which allows resource-specific provisioning and management tasks to be encapsulated into components for reuse. These components are assembled into more complex structures and finally computing services. This invention provides a method for constructing a computing service from a set of resources given a high level specification. Once constructed, the service includes a component that provides management function, which can allow modification of its underlying set of resources.", "num_citations": "71\n", "authors": ["1929"]}
{"title": "Compact routing schemes with low stretch factor\n", "abstract": " This paper presents a routing strategy called Pivot Inter-val Routing (PIR), which allows inessage routing on every weighted n-node network along paths whose stretch (namely, the ratio between their length and the distance between their endpoints) is at most five, and whose average stretch is at inost three, with routing tables of size O (n3/\u201d log3/\u2019n) bits in total. A similar routing strategy for unweighted networks which guarantees the same bounds on the stretch factor and in addition a bound of r1. 501 on the route lengths, where D is the dianreter of the network, is also presented. Moreover, it is shown that the PIR strategy can be implemented so that the generated scheme is in the forin of an interval routing scheme (IRS), using at most 2dm intervals per link in the first case and 3,/m in the second case. As a result, the scheines are siinpler than previous ones and they imply that paths of messages are loop-free. Finally\u00a0\u2026", "num_citations": "71\n", "authors": ["1929"]}
{"title": "Pattern-based composite application deployment\n", "abstract": " The deployment of composite applications and services in distributed or compute cloud environments is still a challenging task that is a key source of operational cost and risk. Current approaches to composite deployments can be categorized as workflow based and model based. In the workflow based approach, deployers create end-to-end workflows to automate application deployment, while in the model based approach architects design detailed \u201cdesired state\u201d models and validate they meet all requirements and constraints. Today, there is no formally understood relationship and mapping between \u201cdesired state\u201d models and deployment workflows, posing a challenge and limitation on architects and deployers. In this paper we propose a new model based approach to bridge the gap between deployment models and workflows. Our approach supports separation of concerns where basic automation building\u00a0\u2026", "num_citations": "61\n", "authors": ["1929"]}
{"title": "Using a utility computing framework to develop utility systems\n", "abstract": " In this paper we describe a utility computing framework, consisting of a component model, a methodology, and a set of tools and common services for building utility computing systems. This framework facilitates the creation of new utility computing systems by providing a set of common functions, as well as a set of standard interfaces for those components that are specialized. It also provides a methodology and tools to assemble and re-use resource provisioning and management functions used to support new services with possibly different requirements. We demonstrate the benefits of the framework by describing two sample systems: a life-science utility computing service designed and implemented using the framework, and an on-line gaming utility computing service designed in compliance with the framework.", "num_citations": "58\n", "authors": ["1929"]}
{"title": "Reducing the complexity of application deployment in large data centers\n", "abstract": " The deployment and configuration of distributed applications is a human intensive and highly complex process that poses significant challenges to data center operators. The process involves many cross-cutting concerns such as connectivity, performance, and security requirements, as well as resource availability, policies and best practices. These interdependencies represent a significant source of complexity, cost, and risk in data center management. In this paper we address this problem using a new approach that leverages concepts from the model-driven architecture research domain. We describe a prototype application deployment automation system based on model transformation techniques. We show how model transformation techniques can replace the manual process of writing and adapting scripts and workflows, reduce the deployment complexity, guarantee configuration integrity and consistency\u00a0\u2026", "num_citations": "51\n", "authors": ["1929"]}
{"title": "A high performance cluster JVM presenting a pure single system image\n", "abstract": " The Cluster JVM (cJVM) is an implementation of a Java Virtual Machine (JVM) that executes in a distributed manner on the nodes of a cluster. Our goals in building cJVM were: 1) demonstrate that a JVM can virtualize a cluster,", "num_citations": "50\n", "authors": ["1929"]}
{"title": "Deployment pattern realization with models of computing environments\n", "abstract": " Deployment pattern matching is implemented by accessing a target computing environment model that captures environment modeling parameters relating to resources and resource-resource relationships of a corresponding computing environment and expressing the target computing environment model as a model graph defined by target resource elements and resource-to-resource relationship links. Deployment pattern matching is further implemented by accessing a realization pattern that captures deployment parameters relating to resources and resource-resource relationships of a deployment of interest and expressing the realization pattern as a pattern graph defined by conceptual resource elements and constraints arranged by resource-to-resource relationship links and constraint links. The realization pattern is then evaluated against the target computing environment model by executing at least one\u00a0\u2026", "num_citations": "49\n", "authors": ["1929"]}
{"title": "Hierarchical resource management for a computing utility\n", "abstract": " This invention provides for the hierarchical provisioning and management of a computing infrastructure which is used to provide computing services to the customers of the service provider that operates the infrastructure. Infrastructure resources can include those acquired from other service providers. The invention provides architecture for hierarchical management of computing infrastructures. It allows the dynamic provisioning and assignment of resources to computing environments. Customers can have multiple computing environments within their domain. The service provider shares its resources across multiple customer domains and arbitrates on the use of resources between and within domains. The invention enables resources to be dedicated to a specific customer domain or to a specific computing environment. Customers can specify acquisition and distribution policy which controls their use of resources\u00a0\u2026", "num_citations": "46\n", "authors": ["1929"]}
{"title": "System, method and computer program product for provisioning of resources and service environments\n", "abstract": " The present invention provides a system, method, and computer program product to accelerate provisioning by dynamically creating dynamic free pools (DFPs) of pre-provisioned resources that are provisioned in advance, and are ready and free for use. A DFP construct for a resource, and its associated dynamic free pool manager are generated dynamically from a formal description of an aggregated resource structure (eg in the form of an XML schema). The present invention also provides a system, method, and computer program product to improve the delivery time of SEs based on the DFP constructs. The methods are extended to deal with special conditions such as contention over resources, or critical delivery time.", "num_citations": "44\n", "authors": ["1929"]}
{"title": "Lightpath arrangement in survivable rings to minimize the switching cost\n", "abstract": " This paper studies the design of low-cost survivable wavelength-division-multiplexing (WDM) networks. To achieve survivability, lightpaths are arranged as a set of rings. Arrangement in rings is also necessary to support SONET/SDH protection schemes such as 4FBLSR above the optical layer. This is expected to be the most common architecture in regional (metro) networks. We assume that we are given a set of lightpaths in an arbitrary network topology and aim at finding a partition of the lightpaths to rings adding a minimum number of lightpaths to the original set. The cost measure that we consider (number of lightpaths) reflects the switching cost of the entire network. In the case of a SONET/SDH higher layer, the number of lightpaths is equal to the number of add-drop multiplexers (ADMs) (since two subsequent lightpaths in a ring can share an ADM at the common node). We prove some negative results on the\u00a0\u2026", "num_citations": "43\n", "authors": ["1929"]}
{"title": "Greedy hot-potato routing on the two-dimensional mesh\n", "abstract": " We propose hot-potato (or, deflection) packet routing algorithms on the two-dimensional mesh. The algorithms are strongly greedy in the sense that they attempt to send packets in good directions whenever possible. Furthermore, the routing operations are simple and independent of the time that has elapsed. The first algorithm gives the best evacuation time known for delivering all the packets to their destinations. A batch ofk packets with maximal source-to-destination distanced max is delivered in 2(k-1)+d max. The second algorithm improves this bound tok+d max when all packets are destined to the same node. This also implies a new bound for the multitarget case, which is the first to take into account the number of in-edges of a node. The third algorithm is designed for routing permutations with source-to-destination distance at most three, in which case the algorithm terminates in at most seven steps\u00a0\u2026", "num_citations": "43\n", "authors": ["1929"]}
{"title": "Designing and building virtual images using semantically rich composable software image bundles\n", "abstract": " A virtual image is created by receiving a selection of at least one composable software bundle. The at least one composable software bundle includes a first set of metadata and a first set of artifacts comprising a first set of executable instructions associated with a first set of operations. A virtual image asset is selected and received. The virtual image asset includes one or more virtual image disks, a second set of metadata, and a second set of artifacts including a second set of executable instructions associated with a second set of operations. A new virtual image asset is created based on the at least one composable software bundle and the virtual image asset. The new virtual image asset includes a third set of metadata that is based on the first set of metadata and the second set of metadata.", "num_citations": "40\n", "authors": ["1929"]}
{"title": "Automatic realization of SOA deployment patterns in distributed environments\n", "abstract": " Deployment patterns have been proposed as a mechanism to support the provisioning of SOA-based services. Deployment patterns represent the structure and constraints of composite solutions, including non-functional properties, such as performance, availability, and security, without binding to specific resource instances. In previous work [1], we have presented a formal mechanism for capturing such service deployment patterns using models. Our pattern models define abstract connectivity and configuration requirements which are then realized by an existing or planned infrastructure. Realization mapping is used to enforce policies, and is materialized at deployment time. In this paper we extend that work to address the problem of automatic pattern realization over a given infrastructure. We first formalize the problem and present three variations of increasing power and complexity. We then present a\u00a0\u2026", "num_citations": "31\n", "authors": ["1929"]}
{"title": "The complexity of the characterization of networks supporting shortest-path interval routing\n", "abstract": " Interval Routing is a routing method that was proposed in order to reduce the size of the routing tables by using intervals and was extensively studied and implemented. Some variants of the original method were also defined and studied. The question of characterizing networks which support optimal (ie, shortest path) Interval Routing has been thoroughly investigated for each of the variants and under different models, with only partial answers, both positive and negative, given so far. In this paper, we study the characterization problem under the most basic model (the one unit cost), and with the most restrictive memory requirements (one interval per edge). We prove that this problem is NP-hard (even for the restricted class of graphs of diameter at most 3). Our result holds for all variants of Interval Routing. It significantly extends some related NP-hardness result, and implies that, unless P= NP, partial\u00a0\u2026", "num_citations": "29\n", "authors": ["1929"]}
{"title": "Transparently obtaining scalability for Java applications on a cluster\n", "abstract": " cJVM is a Java virtual machine (JVM) which provides a single system image of a traditional JVM while executing in a distributed fashion on the nodes of a cluster. cJVM virtualizes the cluster, transparently distributing the objects and threads of any pure Java application. The aim of cJVM is to obtain improved scalability for Java server applications by distributing the application's work among the cluster's computing resources. cJVM's architecture, its unique object model, thread, and memory models, were described by Y. Aridor et al. (1999, in \u201cInternational Conference on Parallel Processing, September 21\u201324) and at http://www.haifa.il.ibm.com/projects/systech/cjvm.html. In this article, we focus on the optimization techniques employed in cJVM to achieve high scalability. In particular, we focus on the techniques used to enhance locality, thereby reducing the amount of communication generated by cJVM. Our\u00a0\u2026", "num_citations": "29\n", "authors": ["1929"]}
{"title": "A complete characterization of the path layout construction problem for ATM networks with given hop count and load\n", "abstract": " We investigate the time complexity of deciding the existence of layouts of virtual paths in high-speed networks, that enable a connection from one vertex to all others and have maximum hop count h and maximum edge load l, for a stretch factor of one. We prove that the problem of determining the existence of such layouts is NP-complete for every given values of h and l, except for the cases h=2, l=1 and h=1, any l, for which we give polynomial-time layout constructions.", "num_citations": "28\n", "authors": ["1929"]}
{"title": "Dynamic late binding of third party on demand services in an on-demand infrastructure\n", "abstract": " The present invention relates to the field of networked computer and refers to a method and respective system for providing on-demand services via an electronic network from a service provider (SP) to a client requesting a service. A plurality of third-party service providers (TPSP) are involved for providing one or more on-demand services (called TPSP service) as a possible contribution to the client-requested service.", "num_citations": "27\n", "authors": ["1929"]}
{"title": "Topology modeling application that handles abstract entities through the realization of conceptual objects\n", "abstract": " The present invention can include a solution for handling abstract entities through the realization of conceptual objects within a modeling application. Such a system can include a semantic model and a modeling application. The semantic model can be configured to present relationships between entities. The entities can include both conceptual objects and concrete objects. A conceptual object can represent an abstract definition that can contain unfulfilled functional parameters. The conceptual object can be associated with another conceptual object or concrete object using a realization relationship. The modeling application can be configured to handle conceptual objects and realization relationships, while preserving the relational integrity of the semantic model.", "num_citations": "25\n", "authors": ["1929"]}
{"title": "Arbitration in a computing utility system\n", "abstract": " Methods, apparatus and systems for controlling allocation and de-allocation of resources in a computing utility system, and evaluating resource assignments. Resources are dynamically allocated to customers of the computing utility through computing environments in such a way that a given objective is satisfied. Assignment of resources to environments is affected by relationships between computing environments which enable resource sharing, and constraints regarding assignment of resources to environment which limit resource sharing. The invention may be used over all of the environments in the utility or a selectable subset.", "num_citations": "24\n", "authors": ["1929"]}
{"title": "Neptune: A dynamic resource allocation and planning system for a cluster computing utility\n", "abstract": " We present Neptune - the resource director of Oc\u00e9ano, a policy driven fabric management system that dynamically reconfigures resources in a computing utility cluster. Neptune implements an on-line control mechanism subject to policy-based performance and resource configuration objectives. Neptune reassigns servers and bandwidth among a set of service domains, based on pre-defined policy, in response to workload changes. It builds and executes a reconfiguration plan through a planning framework, breaking reconfiguration objectives into individual tasks delegated to set of lower level resource managers. We describe an example decision policy algorithm that we implemented and demonstrated in an 80 server multi-domain computing utility.", "num_citations": "24\n", "authors": ["1929"]}
{"title": "Method, system, and product for identifying provisioning operations via planning methods\n", "abstract": " A method, system, and computer program product are disclosed for automatically determining a valid ordering of provisioning operations, and their needed parameters, so that a provisioning system can configure a desired resource state. This is accomplished by formally describing the pre-conditions and effects of provisioning operations, the current state of managed resources and the desired final state. A planning algorithm is then used to determine the provisioning operations, a valid ordering and appropriate parameters to bring the system from the current state to the desired state.", "num_citations": "23\n", "authors": ["1929"]}
{"title": "Model-based automation of service deployment in a constrained environment\n", "abstract": " Service physical topology design in large data centers is a function of many cross-cutting concerns such as service connectivity, performance, and security requirements, as well as data center resources, policies and best practices. These interdependencies represent a significant source of complexity, cost, and risk in data center management. This paper proposes a novel model-based approach to service physical topology design that reduces design complexity and allows for a separation of concerns. Service requirements are represented in terms of highlevel models, and provisioning concerns as model transformation rules, resource selectors, constraints and objective functions. We use a refinement engine that automatically searches the space of service model transformations to produce a set of possible service physical deployment topologies. We discuss our prototype implementation of the service model refinement engine design and we report the results of experiments where we used our prototype to generate detailed physical deployment topology solutions for a variety of service models describing a rich set of requirements.", "num_citations": "21\n", "authors": ["1929"]}
{"title": "Componentized Automatic Provisioning And Management Of Computing Environments For Computing Utilities\n", "abstract": " The present invention provides systems, methods and apparatus for automatically provisioning and managing re-sources in a computing utility. Its automation procedures are based on a resource model which allows resource specific provisioning and management tasks to be encapsulated into components for reuse. These components are assembled into more complex structures and finally computing services. This invention provides a method for constructing a computing service from a set of resources given a high level specification. Once constructed, the service includes a component that provides management function, which can allow modification of its underlying set of resources.", "num_citations": "20\n", "authors": ["1929"]}
{"title": "Image asset lifecycle management in a computing environment\n", "abstract": " Lifecycles of virtual image assets are managed as follows. A set of assets including a set virtual image assets and a set of software bundle assets are analyzed. At least a portion of relationship data between one or more of the virtual image assets and one or more of the software bundle assets is determined. The at least a portion of relationship data is stored in a memory. At least one of one or more virtual image assets and one or more software bundle assets are determined to be associated with a set of changes. At least one virtual image asset that is related to the one or more virtual image assets and/or one or more software bundle assets associated with the set of changes is identified. The at least one virtual image asset that has been identified is updated based on the set of changes.", "num_citations": "19\n", "authors": ["1929"]}
{"title": "Virtual image construction\n", "abstract": " A requirement graph defined by a user is analyzed. A set of user-defined requirements is identified, based on the analyzing, for constructing a virtual image. A set of models is analyzed based on the set of user-defined requirements that have been identified. Each semantic in the set of models represents at least one capability and one requirement of a virtual image building block in a plurality of virtual image building blocks. A set of virtual image construction solutions is generated based on analyzing the set of models. Each virtual image construction solution includes at least one set of virtual image building blocks from the plurality of virtual image building blocks. The at least one set of virtual image building blocks satisfies the set of user-defined requirements and requirements of each virtual image building block within the at least one set of virtual image building blocks.", "num_citations": "18\n", "authors": ["1929"]}
{"title": "Method for improved image-customization by use of embedded metadata\n", "abstract": " The present invention relates to a method for the customization of virtual machine images. The method comprises identifying and retrieving a virtual machine image template. A customized virtual machine image is created from the virtual machine image template. The customized virtual machine image template being created by identifying at least one file-system or memory image that is associated with the virtual machine image template, identifying within the at least one file-system or memory image at least one data set, wherein the at least one data set comprises metadata. The metadata contains information detailing the required execution context customization aspects for at least one specified image subset of the virtual machine. Execution context-specific information that is required to customize the image subset of the virtual machine is retrieved. Further, the image subset of the virtual machine is modified in\u00a0\u2026", "num_citations": "18\n", "authors": ["1929"]}
{"title": "A lower bound for linear interval routing\n", "abstract": " Linear Interval Routing is a space-efficient routing method for point-to-point communication networks. It is a restricted variant of Interval Routing where the routing range associated with every link is represented by an interval with no wrap-around. A common way to measure the efficiency of such routing methods is in terms of the maximal length of a path a message traverses. For Interval Routing the upper bound and lower bound on this quantity are 2D and 1.75D \u2014 1, respectively, where D is the diameter of the network. We prove a lower bound of \u03a9(D2) on the length of a path a message traverses under Linear Interval Routing. We further extend the result by showing a connection between the efficiency of Linear Interval Routing and the bi-diameter of the network.", "num_citations": "18\n", "authors": ["1929"]}
{"title": "Method for managing lifecycles for virtual image assets\n", "abstract": " Lifecycles of virtual image assets are managed as follows. A set of assets including a set virtual image assets and a set of software bundle assets are analyzed. At least a portion of relationship data between one or more of the virtual image assets and one or more of the software bundle assets is determined. The at least a portion of relationship data is stored in a memory. At least one of one or more virtual image assets and one or more software bundle assets are determined to be associated with a set of changes. At least one virtual image asset that is related to the one or more virtual image assets and/or one or more software bundle assets associated with the set of changes is identified. The at least one virtual image asset that has been identified is updated based on the set of changes.", "num_citations": "17\n", "authors": ["1929"]}
{"title": "System and method for model driven transformation filtering\n", "abstract": " A method and system for model-driven transformation are provided. The method and system in one aspect allows selecting of one or more model elements in a model. Transformation definitions are evaluated to identify one or more transformations that may be applicable to the selected one or more model elements. In one aspect, transformations may be identified that are applicable in an entire model, those that take the selected one or more model elements as input parameters, those that affect one or more model element, or any combination thereof. In one aspect, a list of applicable transformations is presented. In another aspect, the method and system automatically apply the one or more applicable transformations to the model.", "num_citations": "13\n", "authors": ["1929"]}
{"title": "Approximation algorithms for survivable optical networks\n", "abstract": " We are motivated by the developments in all-optical networks - a new tech- nology that supports high bandwidth demands. These networks provide a set of ligthpaths which can be seen as high-bandwidth pipes on which communication is performed. Since the capacity enabled by this technology substatially exceeds the one provided by conventional networks, its ability to recover from failures within the optical layer is important. In this paper we study the design of a survivable optical layer. We assume that an initial set of pathlights (designed according to the expected communication pattern) is given, and we are targerted at augmenting this initial set with additional lightpaths such that the result will guarantee survivability. For this purposes, we define and motivate a ring parti-                      tion survivability condition that the solution must satisfy. Generally speaking, this condition states that lightpaths must be\u00a0\u2026", "num_citations": "12\n", "authors": ["1929"]}
{"title": "Method and system for modeling, validating and automatically resolving goals and dependencies between elements within a topology\n", "abstract": " Computer implemented method, system and computer usable program code for configuring a computing system. A determination is made whether there are any errors in the model, and responsive to determining that there is at least one error in the model, a determination is made whether there is at least one resolution for correcting the at least one error. Responsive to determining that there is at least one resolution for correcting the at least one error, at least one resolution among the at least one resolution for correcting the at least one error is selected to form at least one selected resolution to correct the at least one error. The at least one selected resolution is applied to the model to form a transformed model, and the transformed model is output to a user.", "num_citations": "9\n", "authors": ["1929"]}
{"title": "A complete characterization of the path layout construction problem for ATM networks with given hop count and load\n", "abstract": " We investigate the time complexity of deciding the existence of layouts  of virtual paths in high-speed networks, that enable a connection  from one vertex to all others and have maximum hop count h and  maximum edge load l, for a stretch factor of one. We prove that the  problem of determining the existence of such layouts is NP-complete  for every given values of h and l, except for the cases  h = 2, l = 1 and h = 1, any  l, for which we give polynomial-time layout constructions.  Extensions for cases of a stretch factor greater than one are also discussed.", "num_citations": "9\n", "authors": ["1929"]}
{"title": "Method and system for modeling, validating and automatically resolving goals and dependencies between elements within a topology\n", "abstract": " Computer implemented method, system and computer usable program code for configuring a computing system. A system for configuring a computing system includes a mechanism for creating a model of a computing system, a validator for determining whether there are any errors in the model, and a resolver, responsive to determining that there is at least one error in the model, for determining whether there is at least one resolution for correcting the at least one error. A selector, responsive to determining that there is at least one resolution for correcting the at least one error, selects at least one resolution among the at least one resolution for correcting the at least one error to form at least one selected resolution to correct the at least one error, and applies the at least one selected resolution to the model to form a transformed model. An output outputs the transformed model to a user.", "num_citations": "8\n", "authors": ["1929"]}
{"title": "Method and system for modeling, validating and automatically resolving goals and dependencies between elements within a topology\n", "abstract": " Computer implemented method, system and computer usable program code for configuring a computing system. A system for configuring a computing system includes a mechanism for creating a model of a computing system, a validator for determining whether there are any errors in the model, and a resolver, responsive to determining that there is at least one error in the model, for determining whether there is at least one resolution for correcting the at least one error. A selector, responsive to determining that there is at least one resolution for correcting the at least one error, selects at least one resolution among the at least one resolution for correcting the at least one error to form at least one selected resolution to correct the at least one error, and applies the at least one selected resolution to the model to form a transformed model. An output outputs the transformed model to a user.", "num_citations": "8\n", "authors": ["1929"]}
{"title": "System for managing lifecycles for virtual image assets\n", "abstract": " Lifecycles of virtual image assets are managed as follows. A set of assets including a set virtual image assets and a set of software bundle assets are analyzed. At least a portion of relationship data between one or more of the virtual image assets and one or more of the software bundle assets is determined. The at least a portion of relationship data is stored in a memory. At least one of one or more virtual image assets and one or more software bundle assets are determined to be associated with a set of changes. At least one virtual image asset that is related to the one or more virtual image assets and/or one or more software bundle assets associated with the set of changes is identified. The at least one virtual image asset that has been identified is updated based on the set of changes.", "num_citations": "6\n", "authors": ["1929"]}
{"title": "Automated design for deployment of a distributed application using constraint propagation\n", "abstract": " A system and method for automated design deployment for distributed applications includes providing a node with at least one requirement attribute in an application description. A repository for infrastructure elements is searched for candidate infrastructure elements for that satisfy the at least one requirement attribute. A candidate infrastructure element that best satisfies the at least one requirement attribute in the application description is substituted in place of the node with the at least one requirement attribute.", "num_citations": "6\n", "authors": ["1929"]}
{"title": "System, method and computer program product for provisioning of resources and service environments\n", "abstract": " A system for provisioning service environments (SEs) and resources includes a component for creating and handling state change events and a parts catalog including descriptions of SEs, variable federated resources, aggregated, and basic resources. The system further includes a planner component for generating plans for construction and destruction of SEs and plans for creation, addition, removal and destruction of every aggregated resource to or from the SEs. The planner component has an interface to the parts catalog and an interface to a global dynamic free pool manager. The global dynamic free pool manager is configured for dynamically constructing and destructing dynamic free pool managers with their assigned dynamic free pools including dynamically changing their capacities.", "num_citations": "5\n", "authors": ["1929"]}
{"title": "Lower bounds for linear interval routing\n", "abstract": " Linear interval routing is a space\u2010efficient routing method for point\u2010to\u2010point communication networks. It is a restricted variant of interval routing where the routing range associated with every link is represented by an interval with no wraparound. A common way to measure the efficiency of such routing methods is in terms of the maximal length of a path a message traverses. For interval routing, the upper bound and lower bound on this quantity are 2D and 2D \u2212 3, respectively, where D is the diameter of the network. We prove a lower bound of \u03a9(D2) on the length of a path a message traverses under linear interval routing. We further extend the result by showing a connection between the efficiency of linear interval routing and the total2\u2010diameter (defined in Section 4) of the network, and by presenting a family of graphs for which this lower bound is tight. \u00a9 1999 John Wiley & Sons, Inc. Networks 34: 37\u201346, 1999", "num_citations": "5\n", "authors": ["1929"]}
{"title": "Average stretch analysis of compact routing schemes\n", "abstract": " This paper presents some analytic results concerning the pivot interval routing (PIR) strategy of [T. Eilam, C. Gavoille, D. Peleg, Compact routing schemes with low stretch factor, J. Algorithms 46 (2)(2003) 97\u2013114, Preliminary version appeared. in: Proceedings of the 17th ACM Symposium on Principles of Distributed Computing, June 1998, pp. 11\u201320.] That strategy allows message routing on every weighted n-node network along paths whose stretch (namely, the ratio between their length and the distance between their endpoints) is at most five, and whose average stretch is at most three, with routing tables of size O (n log 3/2 n) bits per node. In addition, the route lengths are at most 2 D (\u2308 1.5 D\u2309 for uniform weights) where D is the weighted diameter of the network. The PIR strategy can be constructed in polynomial time and can be implemented so that the generated scheme is in the form of an interval routing\u00a0\u2026", "num_citations": "4\n", "authors": ["1929"]}
{"title": "A simple DFS-based algorithm for linear interval routing\n", "abstract": " Linear Interval Routing is a space-efficient routing method for point-to-point communication networks. It is a restricted variant of Interval Routing where the routing range associated with every link is represented by an interval with no wrap-around. It was noted in [BLT91] that not every network has a valid Linear Interval Labeling Scheme (LILS). A complete characterization of the networks that admit a valid LILS was presented in [FG94], together with an algorithm that generates a valid LILS in case one exists. We present a new algorithm that generates an LILS for every network that admits one. Our algorithm is based on a DFS spanning tree of the network, and is \u201cin the spirit\u201d of the algorithms for Interval Routing. Our algorithm has few advantages over the algorithm of [FG94]: it utilizes the well-known theory of DFS spanning trees and is thus simpler to understand and to implement, it uses all links of the network\u00a0\u2026", "num_citations": "4\n", "authors": ["1929"]}
{"title": "On the total/sub k/-diameter of connection networks\n", "abstract": " We study connection networks in which certain pairs of nodes have to be connected by k edge-disjoint paths, and study bounds for the minimal sum of lengths of such k paths. We define the related notions of total/sub k/-distance for a pair of nodes and total/sub k/-diameter of a connection network, and study the value TD/sub k/(d) which is the maximal such total/sub k/-diameter of a network with diameter d. These notions have applications in fault-tolerant routing problems, in ATM networks, and in compact routing in networks. We prove an upper bound on TD/sub k/(d) and a lower bound on the growth of TD/sub k/(d) as functions of k and d; those bounds are tight, /spl theta/(d/sup k/), when k is fired. Specifically, we prove that TD/sub k/(d)/spl les/2/sup k-1/d/sup k/, with the exceptions TD/sub 2/(1)=3, TD/sub 3/(1)=5, and that for every k, d/sub 0/>0, there exists (a) an integer d/spl ges/d/sub 0/ such that TD/sub k/(d)/spl\u00a0\u2026", "num_citations": "4\n", "authors": ["1929"]}
{"title": "Resource model for self-managing computing utility services\n", "abstract": " ______________ Oc\u00e9ano, an IBM Research project, provides management software that enables a Web hosting service to automatically and dynamically relocate Web servers among a set of customer Web sites in response to usage. The Oc\u00e9ano approach addresses two problems in current hosting centers: over-provisioning of resources and high manual cost of operation. The goal of the work described in this paper is to generalize the Oc\u00e9ano solution so that it can be applied to manage services with different requirements and from different application domains (eg, Grid or ebusiness services). We introduce the concept of a self-managing virtual resource: a resource combined with monitoring, problem determination, configuration and allocation policy. Resources are created in a hierarchical fashion from other resources.", "num_citations": "1\n", "authors": ["1929"]}