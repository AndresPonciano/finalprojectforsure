{"title": "Refactoring product lines\n", "abstract": " Adoption strategies for Software Product Lines (SPL) frequently involve bootstrapping existing products into a SPL and extending an existing SPL to encompass another product. One way to do that is to use program refactorings. However, the traditional notion of refactoring does not handle appropriately feature models (FM), nor transformations involving multiple instances of the same SPL. For instance, it is not desirable to apply a refactoring into a SPL and reduce its configurability. In this paper, we extend the traditional notion of refactoring to an SPL context. Besides refactoring programs, FMs must also be refactored. We present a set of sound refactorings for FMs. We evaluate this extended refactoring definition for SPL in a real case study in the mobile games domain.", "num_citations": "233\n", "authors": ["1525"]}
{"title": "Extracting and evolving mobile games product lines\n", "abstract": " For some organizations, the proactive approach to product lines may be inadequate due to prohibitively high investment and risks. As an alternative, the extractive and the reactive approaches are incremental, offering moderate costs and risks, and therefore sometimes may be more appropriate. However, combining these two approaches demands a more detailed process at the implementation level. This paper presents a method for extracting a product line and evolving it, relying on a strategy that uses refactorings expressed in terms of simpler programming laws. The approach is evaluated with a case study in the domain of games for mobile devices, where variations are handled with aspect-oriented constructs.", "num_citations": "151\n", "authors": ["1525"]}
{"title": "Distributed adapters pattern: a design pattern for object-oriented distributed applications\n", "abstract": " We introduce the Distributed Adapters Pattern (DAP) in the context of remote communication between two components, where it is intended that these components be decoupled from specific communication Application Programming Interfaces (API).", "num_citations": "105\n", "authors": ["1525"]}
{"title": "Improving extensibility of object-oriented frameworks with aspect-oriented programming\n", "abstract": " Object-oriented frameworks are nowadays a common and useful technology used in the implementation of software system families. Despite their benefits, over the last years many researchers have described the inadequacy of object-oriented mechanisms to address the modularization and composition of many framework features, thus reducing the extent to which a framework can be extended. The crosscutting nature of many framework features is identified as one of the main causes of these problems. In this paper, we analyze how aspect-oriented programming can help to improve the design, implementation, and extension of object-oriented frameworks. We propose the concept of Extension Join Points (EJPs) as a way of designing and documenting existing crosscutting extension points. EJPs improve framework extensibility, including superior composability of the framework core functionality with\u00a0\u2026", "num_citations": "97\n", "authors": ["1525"]}
{"title": "Investigating the safe evolution of software product lines\n", "abstract": " The adoption of a product line strategy can bring significant productivity and time to market improvements. However, evolving a product line is risky because it might impact many products and their users. So when evolving a product line to introduce new features or to improve its design, it is important to make sure that the behavior of existing products is not affected. In fact, to preserve the behavior of existing products one usually has to analyze different artifacts, like feature models, configuration knowledge and the product line core assets. To better understand this process, in this paper we discover and analyze concrete product line evolution scenarios and, based on the results of this study, we describe a number of safe evolution templates that developers can use when working with product lines. For each template, we show examples of their use in existing product lines. We evaluate the templates by also\u00a0\u2026", "num_citations": "81\n", "authors": ["1525"]}
{"title": "Extracting and evolving code in product lines with aspect-oriented programming\n", "abstract": " For some organizations, the proactive approach to product lines may be inadequate due to prohibitively high investment and risks. As an alternative, the extractive and the reactive approaches are incremental, offering moderate costs and risks, and therefore sometimes may be more appropriate. However, combining these two approaches demands a more detailed process at the implementation level. This paper presents a method and a tool for extracting a product line and evolving it, relying on a strategy that uses refactorings expressed in terms of simpler programming laws. The approach is evaluated with a case study in the domain of games for mobile devices, where variations are handled with aspect-oriented constructs.", "num_citations": "66\n", "authors": ["1525"]}
{"title": "Dependability analysis in the ambient assisted living domain: An exploratory case study\n", "abstract": " Ambient Assisted Living (AAL) investigates the development of systems involving the use of different types of sensors, which monitor activities and vital signs of lonely elderly people in order to detect emergency situations or deviations from desirable medical patterns. Instead of requiring the elderly person to manually push a button to request assistance, state-of-the-art AAL solutions automate the process by \u2018perceiving\u2019 lonely elderly people in their home environment through various sensors and performing appropriate actions under the control of the underlying software. Dependability in the AAL domain is a critical requirement, since poor system availability, reliability, safety, or integrity may cause inappropriate emergency assistance to potentially have fatal consequences. Nevertheless, contemporary research has not focused on assessing dependability in this domain. This work attempts to fill this gap presenting\u00a0\u2026", "num_citations": "62\n", "authors": ["1525"]}
{"title": "Modeling and verification for probabilistic properties in software product lines\n", "abstract": " We propose a model for feature-aware discrete-time Markov chains, called FDTMC, as a basis for verifying probabilistic properties, e.g., Reliability and availability, of product lines. To verify such properties on FDTMC, we compare three techniques. First, we experiment with two different parametric techniques to obtain this formula: the classical one builds it from the model as whole, and a new one that builds it compositionally from a sequence of modules. Finally, we propose a new technique that performs a bounded verification for the whole product line, and thus takes advantage of the high probability of common behaviors of the product line. It computes an approximate formula, represented as an arithmetic decision diagram. Experimental results on a vital signal monitoring system prototype are provided and compared for these techniques aiming at analysing them for scalability issues of size and computational\u00a0\u2026", "num_citations": "46\n", "authors": ["1525"]}
{"title": "Safe evolution templates for software product lines\n", "abstract": " Software product lines enable generating related software products from reusable assets. Adopting a product line strategy can bring significant quality and productivity improvements. However, evolving a product line can be risky, since it might impact many products. When introducing new features or improving its design, it is important to make sure that the behavior of existing products is not affected. To ensure that, one usually has to analyze different types of artifacts, an activity that can lead to errors. To address this issue, in this work we discover and analyze concrete evolution scenarios from five different product lines. We discover a total of 13 safe evolution templates, which are generic transformations that developers can apply when evolving compositional and annotative product lines, with the goal of preserving the behavior of existing products. We also evaluate the templates by analyzing the evolution history\u00a0\u2026", "num_citations": "43\n", "authors": ["1525"]}
{"title": "GODA: A goal-oriented requirements engineering framework for runtime dependability analysis\n", "abstract": " Context: Many modern software systems must deal with changes and uncertainty. Traditional dependability requirements engineering is not equipped for this since it assumes that the context in which a system operates be stable and deterministic, which often leads to failures and recurrent corrective maintenance. The Contextual Goal Model (CGM), a requirements model that proposes the idea of context-dependent goal fulfillment, mitigates the problem by relating alternative strategies for achieving goals to the space of context changes. Additionally, the Runtime Goal Model (RGM) adds behavioral constraints to the fulfillment of goals that may be checked against system execution traces.Objective: This paper proposes GODA (Goal-Oriented Dependability Analysis) and its supporting framework as concrete means for reasoning about the dependability requirements of systems that operate in dynamic contexts\u00a0\u2026", "num_citations": "35\n", "authors": ["1525"]}
{"title": "Comparative analysis of porting strategies in J2ME games\n", "abstract": " Porting is a critical task in mobile device game development. The high diversity of devices requires correspondingly customized versions of a single game. Managing the variabilities among these customized versions while exploring the latent game commonality cannot be solely addressed with a single technique. This paper contributes to this task by identifying and analyzing porting challenges, and by evaluating and contrasting existing approaches within industrial-strength case studies of J2ME games. Further, we present lessons learned, proposing more effective guidelines for this process, aiming at improving the quality of the resulting applications and porting process productivity.", "num_citations": "34\n", "authors": ["1525"]}
{"title": "Automating resource selection and configuration in inter-clouds through a software product line method\n", "abstract": " Nowadays, cloud users face three important problems: (a) choosing one or more appropriate cloud provider(s) to run their application(s), (b) selecting appropriate cloud resources, which implies having enough information about the available resources, including their characteristics and constraints, and (c) configuring the cloud resources. These problems are mostly due to the wide range of resources. These resources usually have distinct dependencies, and they are offered at various clouds' layers. In this complex scenario, the users often have to handle cloud resources and their dependencies manually. This is an error-prone and time-consuming activity, even for skilled cloud users and system administrators. In this context, this paper proposes a software product line engineering (SPLE) method and a tool to deal with these issues. Our SPL-based engineering method enables a declarative and goal-oriented\u00a0\u2026", "num_citations": "31\n", "authors": ["1525"]}
{"title": "Comparitive study of variability management in software product lines and runtime adaptable systems\n", "abstract": " Software Product Lines (SPL) and Runtime Adaptation (RTA) have traditionally been distinct research areas addressing different problems and with different communities. Despite the differences, there are also underlying commonalities with synergies that are worth investigating in both domains, potentially leading to more systematic variability support in both domains. Accordingly, this paper analyses commonality and differences of variability management between SPL and RTA and presents an initial discussion and our perspective on the feasibility of integrating variability management in both areas.", "num_citations": "30\n", "authors": ["1525"]}
{"title": "Managing variability in business processes: an aspect-oriented approach\n", "abstract": " Business processes specify key activities in an organization, some of which can be automated. It is often the case that replication of activities across such processes occur and failure in identifying such replication results in organizational costs. To minimize this risk and optimize organizational resources, in this paper we characterize variability in business process and propose an approach to manage such a variability. The characterization of variability relies on the study of industrial-strength applications in the Human Resources domain. The management of variability is based on a compositional and parametric approach with Aspect-Orientation. It leverages and extends an existing tool to address variability in such domain", "num_citations": "28\n", "authors": ["1525"]}
{"title": "Building reliable and maintainable dynamic software product lines: An investigation in the body sensor network domain\n", "abstract": " Context: Dependability is a key requirement, especially in safety-critical applications. Many of these applications have changing context and configurations at runtime to achieve functional and quality goals and can be realized as Dynamic Software Product Lines (DSPLs). DSPL constitutes an emerging but promising research area. Nevertheless, ensuring dependability in DSPLs remains insufficiently explored, especially in terms of reliability and maintainability. This compromises quality assurance and applicability of DSPLs in safety-critical domains, such as Body Sensor Network (BSN).Objective: To address this issue, we propose an approach to developing reliable and maintainable DSPLs in the context of the BSN domain.Method: Adaptation plans are instances of a Domain Specific Language (DSL) describing reliability goals and adaptability at runtime. These instances are automatically checked for reliability\u00a0\u2026", "num_citations": "25\n", "authors": ["1525"]}
{"title": "Implementing framework crosscutting extensions with EJPs and AspectJ\n", "abstract": " In a previous work, we proposed a framework extension approach based on the use of a new concept, called Extension Join Points (EJPs). EJPs enable the framework systematic extension by means of variability and integration aspects. In this paper, we show how EJPs can be implemented using the mechanisms of the AspectJ language. To evaluate the usefulness of the EJPs in the framework extension process, we have used them in the development of three OO frameworks from different domains. As a result of our case studies, we present: (i) an initial categorization of different kinds of contracts between frameworks, EJPs and aspects which can be implemented in AspectJ; and (ii) a set of lessons learned when specifying the EJPs._____________________________________________________________________________________________ RESUMO: Uma abordagem para extens\u00e3o de frameworks baseada em um novo conceito, denominado Extension Join Points (EJPs), tem sido proposta anteriormente. EJPs possibilitam a extens\u00e3o sistem\u00e1tica de frameworks, atrav\u00e9s do uso de aspectos de variabilidade e integra\u00e7\u00e3o. Neste artigo, n\u00f3s mostramos como os EJPs podem ser implementados usando os mecanismos da linguagem AspectJ. Para avaliar a utilidade dos EJPs no processo de extens\u00e3o de frameworks, n\u00f3s os utilizamos no desenvolvimento de 3 frameworks OO de diferentes dom\u00ednios. Como um resultado de nossos estudos de caso, n\u00f3s apresentamos: (i) uma categoriza\u00e7\u00e3o inicial de diferentes tipos de contratos entre frameworks, EJPs e aspectos, os quais podem ser implementados em AspectJ; e (ii) um conjunt o de\u00a0\u2026", "num_citations": "25\n", "authors": ["1525"]}
{"title": "Variability management of reliability models in software product lines: An expressiveness and scalability analysis\n", "abstract": " Some domains, specially those of critical systems, require dependable software. Ensuring dependability is not a trivial problem. Model checking can be used to estimate the reliability of a software through models that represent the behavior of the system. Through these models it is possible to estimate and measure quantitatively properties such as reliability. In the context of Software Product Lines (SPL), we need to check an entire family of systems. It is not feasible to build a model for each configuration of a SPL as the number of models required can be very large. Some contributions directly address this issue proposing techniques specifically tailored for SPL. Particularly, the technique of parametric model-checking allows the use of a single model to obtain properties values from different configurations through an arithmetic formula. However, even an arithmetic formula may not be easy to evaluate. If the number\u00a0\u2026", "num_citations": "17\n", "authors": ["1525"]}
{"title": "Identifying Variations in Mobile Devices.\n", "abstract": " Product lines promise to improve software quality and development productivity. A central issue to meet this is systematically dealing with variations within products in a certain domain. Although various techniques are available, their use is constrained by the specific application domain. This paper presents an extractive method for handling variation in the mobile device application domain. Being based on Aspect-Oriented Programming and general program transformation, it offers enhanced configurability and composability. We illustrate the approach with a game product line built with J2ME.", "num_citations": "16\n", "authors": ["1525"]}
{"title": "Experiences with mobile games product line development at meantime\n", "abstract": " Small and medium enterprises (SME) represent a significant percentage of software companies. Although there are some experience reports on using software product line (SPL) techniques in SMEs, there is a lack of such reports on the mobile games domain. This domain is attractive both economically and technically, with a significant amount of variability, thus suggesting the use of a SPL approach. Accordingly, we conduct an exploratory study in a company in this domain, eliciting the main challenges, determining if and how SPL approaches help to address them, and raising hypotheses to guide future studies.", "num_citations": "13\n", "authors": ["1525"]}
{"title": "Beyond code: Handling variability in art artifacts in mobile game product lines\n", "abstract": " This position paper addresses on going work in exploring variability mechanisms for relevant artifacts in the domain of Mobile Game Software Product Lines. In particular, we show such mechanisms for images and sound and reason on the choice of such mechanism based on factors such as binding-time, performance, and reusability. Future work consists of refining a reasoning framework to encompass additional factors for the selection of such mechanism and exploring more closely the influence of such artifacts not only in code but also in tests.", "num_citations": "10\n", "authors": ["1525"]}
{"title": "Assessing a swarm-GAP based solution for the task allocation problem in dynamic scenarios\n", "abstract": " Swarm-GAP is a heuristic that combines a swarm intelligence strategy with the generalized assignment problem (GAP) method. This approach is especially appropriate when there are agents engaged in a collaborative task, but in general, heuristics have drawbacks to optimize resource allocation. A previous work proposed the usage of three swarm-GAP variants to solve the task allocation problem among agents representing a group of Unmanned Aerial Vehicles (UAVs) aiming at the optimization of their resources usage applied in the context of static environments. However, there is a lack of empirical assessment of these algorithms in dynamic scenarios, i.e., with some attributes changing along the system execution. Such changes represent important features of real-world application scenarios, such as in military operations in which a number of non-expected events may happen, e.g., loss of members of the\u00a0\u2026", "num_citations": "9\n", "authors": ["1525"]}
{"title": "Massive mobile games porting: Meantime study case\n", "abstract": " Game development for mobile devices is usually regarded as a simpler task when compared to games developed for desktop platforms. Indeed, the resources provided by the latter do support more complex applications, therefore, increasing the final product value, and also making the development cycle longer. Although mobile games (and mobile applications, in general) do not have the same amount of resources to be explored, they must adhere to a very strong portability requirement and, since the whole development cycle is rather short, this porting phase must be as efficient and cheap as possible, so that it does not have a huge impact on the final product. In this present work, we will discuss Meantime\u2019s experience in developing and porting J2ME games to a large amount of different devices, elucidating how we have evolved from an immature porting process up to a new process that has proved to be more scalable, efficient, cheaper and easier to maintain.", "num_citations": "9\n", "authors": ["1525"]}
{"title": "A product line of theories for reasoning about safe evolution of product lines\n", "abstract": " A product line refinement theory formalizes safe evolution in terms of a refinement notion, which does not rely on particular languages for the elements that constitute a product line. Based on this theory, we can derive refinement templates to support safe evolution scenarios. To do so, we need to provide formalizations for particular languages, to specify and prove the templates. Without a systematic approach, this leads to many similar templates and thus repetitive verification tasks. We investigate and explore similarities between these concrete languages, which ultimately results in a product line of theories, where different languages correspond to features, and products correspond to theory instantiations. This also leads to specifying refinement templates at a higher abstraction level, which, in the long run, reduces the specification and proof effort, and also provides the benefits of reusing such templates for\u00a0\u2026", "num_citations": "8\n", "authors": ["1525"]}
{"title": "Towards compositional approach for parametric model checking in software product lines\n", "abstract": " Parametric model-checking allows the use of a single model to obtain properties values from different configurations through an arithmetic formula. Formulas with hundreds of operands and operators can be evaluated at runtime in milliseconds on current computers. Neverthless, those formulas may not scale to devices with limited resources. This work-in-progress addresses this problem by presenting a compositional parametric model checking approach able to produce partial factorized formulas. This approach simplifies the model checking by verifying smaller models separately instead of a unique large model since the effort to recombine the formulas is as simple as text replacement.", "num_citations": "8\n", "authors": ["1525"]}
{"title": "An incremental aspect-oriented product line method for J2ME game development\n", "abstract": " Game development for mobile devices must address a significantly high number of variations. These arise due to variable device capability, which implies constraining application features to meet available resources in specific devices. Managing such variation thus play a key role in the development process, for which the product line approach is suitable. However, in practice, organizations will not shift to this approach from scratch; there are frequently some existing products which should be integrated into the approach. Nevertheless, guidance in this direction is still rare.In this context, this paper describes an incremental process for structuring a product line from existing mobile device game applications. The process relies on continuous refactoring and Aspect-Oriented Programming to isolate communality from variability latent within the products. We applied this process to an initial set of three industrial-strength games and evolved them into a single product line. Thereafter, evolution was performed on the single product line rather than on the individual products.", "num_citations": "8\n", "authors": ["1525"]}
{"title": "Using Aspects to Structure Small Devices Adaptive Applications\n", "abstract": " This paper briefly presents an architectural pattern, Adaptability Aspects, for structuring adaptive applications using Aspect-Oriented programming in a specific way. We also evaluate the applicability of this pattern for resource constrained devices. The Adaptability Aspects pattern is intended to improve modularity and reuse when adaptability is required. By providing three versions of the same J2ME application, we also compare our pattern implementation with pure Object\u2013Oriented solutions using GoF patterns and with a less flexible implementation where the adaptability concerns are not so well isolated, evaluating aspects such as code size, memory use and performance.", "num_citations": "8\n", "authors": ["1525"]}
{"title": "AOP-driven variability in product lines of pervasive computing applications\n", "abstract": " Problem: The demand for pervasive computing applications has increased. The great number of different devices and features per device make it difficult to quickly respond to such demand and to comply with everincreasing quality and reuse requirements Solution: Use AOP in order to provide easier feature variability implementation for product lines related to pervasive devices.", "num_citations": "7\n", "authors": ["1525"]}
{"title": "Techniques for developing a product line of product line tools: a comparative study\n", "abstract": " Tool support is essential for Application Engineering in Software Product Lines (SPL). Despite a myriad of existing tools, most lack adequate support for flexibility and adaptability, so that it is hard for them to be applied in different contexts, e.g., addressing variability in different artifacts. Addressing this issue requires exploring underlying commonality and adequately managing variability of such tools. In order to provide systematic guidance in this direction, we have conducted a comparative analysis of variability management techniques for SPL tool development in the context of the SPL Hephaestus tool. The analysis reveals that two techniques, one annotative and another transformational, are most suitable to variability management in Hephaestus, and that their combination is a feasible strategy to improve such management.", "num_citations": "6\n", "authors": ["1525"]}
{"title": "Dohko: an autonomic system for provision, configuration, and management of inter-cloud environments based on a software product line engineering method\n", "abstract": " Configuring and executing applications across multiple clouds is a challenging task due to the various terminologies used by the cloud providers. Therefore, we advocate the use of autonomic systems to do this work automatically. Thus, in this paper, we propose and evaluate Dohko, an autonomic and goal-oriented system for inter-cloud environments. Dohko implements self-configuration, self-healing, and context-awareness properties. Likewise, it relies on a hierarchical P2P overlay (a) to manage the\u00a0 virtual machines running on the clouds and (b) to deal with inter-cloud communication. Furthermore, it depends on a software product line engineering method to enable applications\u2019 deployment and reconfiguration, without requiring pre-configured virtual machine images. Experimental results show that Dohko can free the users from the duty of executing non-native cloud application on single and over\u00a0\u2026", "num_citations": "5\n", "authors": ["1525"]}
{"title": "An exploratory case study on exploiting aspect orientation in mobile game porting\n", "abstract": " Portability is a crucial requirement in the mobile game domain. Aspect-oriented programming has been shown to be a promising solution to implement the portability concerns, and more generally, to be a key technical enabler to transition mobile application development toward systematic software reuse. In this chapter, we report an exploratory case study that critically examines how aspect orientation is practiced in industrial-strength mobile game applications. Our analysis takes into account technical artifacts, organizational structures, and their relationships. Altogether these complementary and synergistic viewpoints allow us to formulate a set of hypotheses and to offer some concrete insights into developing information reuse and integration strategies in the rapidly changing landscape of mobile software development.", "num_citations": "5\n", "authors": ["1525"]}
{"title": "Theory and proofs for feature model refactorings\n", "abstract": " In this technical report, we present an abstract syntax, semantics and a refactoring (we also call refinement) notion for feature models in Prototype Verification System (PVS)[1], which encompasses a formal specification language and a theorem prover. Based on this definition, we propose and prove in PVS Prover [2] a number of refactorings for feature models.This document is organized as follows. First, we present a PVS formalization of feature models in Section 2. Next, we show in Section 3 proofs of some useful theorems and type-correctness conditions (TCCs) of our formalization. In Section 4, we present a number of bi-directional refactorings (called algebraic laws) for feature models. Section 5 shows that our catalog of bi-directional refactorings is complete. Section 6 provides proofs of some refactorings proposed for feature models. By composing those refactorings, we derive a number of extractive refactorings in Section 7.", "num_citations": "5\n", "authors": ["1525"]}
{"title": "Autonomic provisioning, configuration, and management of inter-cloud environments based on a software product line engineering method\n", "abstract": " Configuring and executing application across multiple clouds is a challenging task due to the various terminologies used by cloud providers to describe their services and features. Likewise, the services are regularly offered at different levels of abstraction, such as infrastructure-as-a-service (IaaS) and platform-as-a-service (PaaS). While IaaS services provide low-level access to the infrastructure, PaaS services enable the users to delegate the management of the computing environment to the cloud providers. Consequently, at the IaaS level, the users are responsible for managing the computing resources, whereas, at the PaaS level, the users must develop native cloud applications following the constraints defined by the PaaS provider. These two options exist, mostly because the clouds target web applications, whereas users' applications are commonly batch-oriented. Considering how difficult is the task of\u00a0\u2026", "num_citations": "4\n", "authors": ["1525"]}
{"title": "Portability as an aspect: rethinking modularity in mobile game development\n", "abstract": " This extended abstract overviews our modularity vision along a technical-organizational-ecosystem dimension. Our goal is to explore the benefits that modularity could provide to software vendors in the rapidly changing landscape of mobile game development. Our research suggests a promising synergy between the software ecosystem and modularity communities.", "num_citations": "4\n", "authors": ["1525"]}
{"title": "On Testing Crosscutting Features using Extension Join Points\n", "abstract": " Recently, one arguing question in the context of product line development is how to improve the modularization and composition of crosscutting features. However, little attention has been paid to the closely related issue of testing the crosscutting features. This paper proposes an approach for testing the crosscutting features of a product line based on the use of a previously proposed concept called Extension Join Points (EJPs).", "num_citations": "4\n", "authors": ["1525"]}
{"title": "An implementation method for distributed object-oriented applications\n", "abstract": " Distribution has become an essential non-functional requirement of most applications. The same application may be required to use different distribution platforms simultaneously or during its evolution. However, distributed applications are considerably more difficult to design, implement and test than centralized systems even with the same functionality. We present an implementation method which guides the progressive transformation of an initially centralized application into a distributed one. The method helps to tame the inherent complexity of distributed systems and makes tests more effective. Additionally, it relies on a design pattern promoting extensibility and reuse of other layers such as the user interface and the business layers.", "num_citations": "4\n", "authors": ["1525"]}
{"title": "Declaring Static Crosscutting Dependencies in AspectJ\n", "abstract": " Aspect-Oriented Programming (AOP) is considered a promising approach for Software Product Line (SPL) implementation. In this paper we present the problem of dependency in inter-type method declarations as well a proposal of two new constructs to AspectJ interfaces: introduces and declares. These constructs can be used to declare and check dependency between base code and aspects in such a way to support separate development.", "num_citations": "3\n", "authors": ["1525"]}
{"title": "Systems, methods, and computer program products to integrate user-defined operations into a database transaction\n", "abstract": " Systems, methods, and computer products that support techniques associated with highly reliable transaction protocol semantics in databases. Such techniques extend database transaction semantics that support a single-phase or a two-phase commit protocol to include user-defined operations while supporting the XA X/Open\u00ae Distributed Transaction Processing Protocol (\u201cXA Transaction Protocol\u201d). The preferred embodiment of the present invention novelly enables user-defined operations that access external resources by means of the XA Transaction Protocol to be included in database transaction processing features. Thereby user-level access to well-defined APIs is provided. Further, the preferred embodiment of the present invention novelly ensures atomicity for the results of the database transaction that includes both the user-defined operations and database operations. According to the preferred\u00a0\u2026", "num_citations": "3\n", "authors": ["1525"]}
{"title": "Feature-based configuration management of reconfigurable cloud applications\n", "abstract": " A recent trend in software industry is to provide enterprise applications in the cloud that are accessible everywhere and on any device. As the market is highly competitive, customer orientation plays an important role. Companies therefore start providing applications as a service, which are directly configurable by customers in an online self-service portal. However, customer configurations are usually deployed in separated application instances. Thus, each instance is provisioned manually and must be maintained separately. Due to the induced redundancy in software and hardware components, resources are not optimally utilized. A multi-tenant aware application architecture eliminates redundancy, as a single application instance serves multiple customers renting the application. The combination of a configuration self-service portal with a multi-tenant aware application architecture allows serving customers just-in-time by automating the deployment process. Furthermore, self-service portals improve application scalability in terms of functionality, as customers can adapt application configurations on themselves according to their changing demands. However, the configurability of current multi-tenant aware applications is rather limited. Solutions implementing variability are mainly developed for a single business case and cannot be directly transferred to other application scenarios.The goal of this thesis is to provide a generic framework for handling application variability, automating configuration and reconfiguration processes essential for self-service portals, while exploiting the advantages of multi-tenancy. A promising solution to achieve this\u00a0\u2026", "num_citations": "2\n", "authors": ["1525"]}
{"title": "Exploring Architecture-Based Reliability Analysis of Current Multi-layered Web Applications\n", "abstract": " Web applications architecture evolved from simple web sites add-ons to complex n-layer applications. However, identifying components in this domain is usually a subjective task, as web applications typically comprise web pages, scripts, forms, applets, servlets or simply web objects. As a result of this subjectivity, a component-based life-cycle might reflect on inconsistencies not only on a clear definition of web components, but also on the process development itself. In addition, it is hard to identity which components are more critical according to specific tasks, such that developers could spend more time to improve their design. That quality certainly comprises reliability, availability and security, summing up as dependability attributes. The application of architecture-based reliability analysis techniques in various domains have contributed to solve those problems. However, very little has been done towards the\u00a0\u2026", "num_citations": "2\n", "authors": ["1525"]}
{"title": "Orquestra\u00e7\u00e3o de servi\u00e7os por meio de agentes de software no dom\u00ednio de vida ambiente-assistida\n", "abstract": " Solu\u00e7\u00f5es em Vida Ambiente-Assistida (VAA) s\u00e3o inerentemente complexas, resultando em que sistemas de informa\u00e7\u00e3o nesse dom\u00ednio frequentemente requererem a combina\u00e7\u00e3o de diversas estrat\u00e9gias de modelagem. Devido \u00e0 natureza cr\u00edtica deste dom\u00ednio de aplica\u00e7\u00e3o, a rastreabilidade dos objetivos dos atores no software subjacente \u00e9 uma quest\u00e3o-chave para a modelagem. Para resolver este problema, apresentamos uma abordagem preliminar de modelagem de sistema nesse dom\u00ednio combinando sistemas multiagentes com arquitetura orientada a servi\u00e7os.", "num_citations": "2\n", "authors": ["1525"]}
{"title": "Methods to integrate user-defined operations into a database\n", "abstract": " Systems, methods, and computer products that support techniques associated with highly reliable transaction protocol semantics in databases. Such techniques extend database transaction semantics that support a single-phase or a two-phase commit protocol to include user-defined operations while supporting the XA X/Open\u00ae Distributed Transaction Processing Protocol (\u201cXA Transaction Protocol\u201d). The preferred embodiment of the present invention novelly enables user-defined operations that access external resources by means of the XA Transaction Protocol to be included in database transaction processing features. Thereby user-level access to well-defined APIs is provided. Further, the preferred embodiment of the present invention novelly ensures atomicity for the results of the database transaction that includes both the user-defined operations and database operations. According to the preferred\u00a0\u2026", "num_citations": "2\n", "authors": ["1525"]}
{"title": "A verification approach for crosscutting features based on extension join points\n", "abstract": " Recently, one arguing question in the context of product line development is how to improve the modularization and composition of crosscutting features. However, little attention has been paid to the closely related issue of testing the crosscutting features. This paper proposes a verification approach for the crosscutting features of a product line based on the use of a previously proposed concept called Extension Join Points.", "num_citations": "2\n", "authors": ["1525"]}
{"title": "Porting mobile games in an aspect-oriented way: An industrial case study\n", "abstract": " Portability is a crucial requirement in the mobile game domain. Aspect-oriented programming has been shown to be a promising solution to implement the portability concerns, and more generally, to be a key technical enabler to transition mobile application development toward systematic software reuse. In this paper, we report a case study that critically examines how aspect orientation is practiced in industrial-strength mobile game applications. Our analysis takes into account technical artifacts, organizational structures, and their relationships. Altogether these complementary and synergistic viewpoints offer some concrete insights into developing information reuse and integration strategies in the rapidly changing landscape of mobile software development.", "num_citations": "1\n", "authors": ["1525"]}
{"title": "Formal specification and verification of wellformedness in business process product lines\n", "abstract": " Quality assurance is a key challenge in product lines (PLs). Given the exponential growth of product variants as a function of the number of features, ensuring that all products meet given properties is a non-trivial issue. In particular, this holds for well-formedness in PLs. Although this has been explored at some levels of abstraction (eg, implementation), this remains unexplored for business process PLs developed using a compositional approach. Accordingly, in this paper we report on-going work in formalizing Business Process Product Lines, including the definition of well-formedness rules, formal specification of transformations, and the proof that transformations preserve well-formedness without having to instantiate all variants. Formalization and proofs are provided in the Prototype Verification System, which has a formal specification language and a proof assistant.", "num_citations": "1\n", "authors": ["1525"]}