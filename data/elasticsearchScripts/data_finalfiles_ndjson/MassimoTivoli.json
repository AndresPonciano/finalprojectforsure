{"title": "SYNTHESIS: a tool for automatically assembling correct and distributed component-based systems\n", "abstract": " SYNTHESIS is a tool for automatically assembling correct and distributed component-based systems. In our context, a system is correct when it is deadlock-free and performs only specified component interactions. In order to automatically synthesize the correct composition code, SYNTHESIS takes as input an high-level behavioural description for each component that must form the system to be built and a specification of the component interactions that must be enforced in the system. The automatically derived composition code is implemented as a set of distributed component wrappers that cooperatively interact with each other and with their wrapped components in order to prevent possible deadlocks and make the composed system exhibit only the specified interactions. The current version of SYNTHESIS supports two possible development platforms: Microsoft COM/DCOM, and EJB (Enterprise Java Beans).", "num_citations": "85\n", "authors": ["657"]}
{"title": "Deadlock-free software architectures for com/dcom applications\n", "abstract": " Many software projects are based on the integration of independently designed software components that are acquired on the market rather than developed within the project itself. Sometimes interoperability and composition mechanisms provided by component based integration frameworks cannot solve the problem of binary component integration in an automatic way. In this paper we present a technique to allow connectors synthesis for deadlock-free component based architectures [IEEE Proceedings of the 16th ASE, 2001] in the context of COM/DCOM applications. This work also provides guidelines to implement an automatic tool that derives the implementation of routing deadlock-free policies within the connector from the dynamic behavior specification of the COM components. Deadlock is then prevented by inserting the synthesized connector within the system via COM composition mechanisms while\u00a0\u2026", "num_citations": "83\n", "authors": ["657"]}
{"title": "Software architecture for correct components assembly\n", "abstract": " Correct automatic assembly in software components is an important issue in CBSE (Commercial-Off-The-Shelf). Building a system from reusable software components or from COTS (Commercial-Off-The-Shelf) components introduces a set of problems. One of the main problems in components assembly is related to the ability to properly manage the dynamic interactions of the components. Component assembling can result in architectural mismatches when trying to integrate components with incompatible interaction behavior like deadlock and other software anomalies. This problem represents a new challenge for system developers. The issue is not only in specifying and analyzing a set of properties rather in being able to enforce them out of a set of already implemented (local) behaviors. Our answer to this problem is a software architecture based approach in which the software architecture imposed on\u00a0\u2026", "num_citations": "73\n", "authors": ["657"]}
{"title": "Failure-free coordinators synthesis for component-based architectures\n", "abstract": " One of the main problems in component assembly is how to establish properties on the assembly code by only assuming a limited knowledge of the single component properties. Our answer to this problem is an architectural approach in which the software architecture imposed on the assembly prevents black-box integration anomalies. The basic idea is to build applications by assuming a \u201ccoordinator-based\u201d architectural style. We, then, operate on the coordinating part of the system architecture to obtain an equivalent version of the system which is failure-free. A failure-free system is a deadlock-free one and it does not violate any specified coordination policy. A coordination policy models those interactions of components that are actually needed for the overall purpose of the system. We illustrate our approach by means of an explanatory example and validate it on an industrial case study that concerns the\u00a0\u2026", "num_citations": "64\n", "authors": ["657"]}
{"title": "Automatic synthesis of modular connectors via composition of protocol mediation patterns\n", "abstract": " Ubiquitous and pervasive computing promotes the creation of an environment where Networked Systems (NSs) eternally provide connectivity and services without requiring explicit awareness of the underlying communications and computing technologies. In this context, achieving interoperability among heterogeneous NSs represents an important issue. In order to mediate the NSs interaction protocol and solve possible mismatches, connectors are often built. However, connector development is a never-ending and error-prone task and prevents the eternality of NSs. For this reason, in the literature, many approaches propose the automatic synthesis of connectors. However, solving the connector synthesis problem in general is hard and, when possible, it results in a monolithic connector hence preventing its evolution. In this paper, we define a method for the automatic synthesis of modular connectors, each of\u00a0\u2026", "num_citations": "49\n", "authors": ["657"]}
{"title": "A model-based synthesis process for choreography realizability enforcement\n", "abstract": " The near future in service-oriented system development envisions a ubiquitous world of available services that collaborate to fit users\u2019 needs. Modern service-oriented applications are often built by reusing and assembling distributed services. This can be done by considering a global specification of the interactions between the participant services, namely the choreography. In this paper, we propose a synthesis approach to automatically synthesize a choreography out of a specification of it and a set of services discovered as suitable participants. The synthesis is model-based in the sense that it works by assuming a finite state model of the services\u2019s protocol and a BPMN model for the choreography specification. The result of the synthesis is a set of distributed components, called coordination delegates, that coordinate the services\u2019 interaction in order to realize the specified choreography. The work\u00a0\u2026", "num_citations": "49\n", "authors": ["657"]}
{"title": "Synthesis of correct and distributed adaptors for component-based systems: an automatic approach\n", "abstract": " Building a distributed system from third-party components introduces a set of problems, mainly related to compatibility and communication. Our approach to solve these problems is to build an adaptor which forces the system to exhibit only a set of safe or desired behaviors. By exploiting an abstract and partial specification of the global behavior that must be enforced, we automatically build a centralized adaptor. It mediates the interaction among components by both performing the specified behavior and, simultaneously, avoiding possible deadlocks. However in a distributed environment it is not always possible or convenient to insert a centralized adaptor. In contrast, building a distributed adaptor might increase the applicability of the approach in a real-scale context. In this paper we show how it is possible to automatically generate a distributed adaptor by exploiting an approach to the definition of distributed IDS\u00a0\u2026", "num_citations": "48\n", "authors": ["657"]}
{"title": "The future of software: Adaptation and dependability\n", "abstract": " Software in the near ubiquitous future (Softure) will need to cope with variability, as software systems get deployed on an increasingly large diversity of computing platforms and operates in different execution environments. Heterogeneity of the underlying communication and computing infrastructure, mobility inducing changes to the execution environments and therefore changes to the availability of resources and continuously evolving requirements require software systems to be adaptable according to the context changes. Softure should also be reliable and meet the users performance requirements and needs. Moreover, due to its pervasiveness and in order to make adaptation effective and successful, adaptation must be considered in conjunction with dependability, i.e., no matter what adaptation is performed, the system must continue to guarantee a certain degree of Quality of Service (QoS). Hence\u00a0\u2026", "num_citations": "46\n", "authors": ["657"]}
{"title": "Automatic synthesis of deadlock free connectors for COM/DCOM applications\n", "abstract": " Many software projects are based on the integration of independently designed software components that are acquired on the market rather than developed within the project itself. Sometimes interoperability and composition mechanisms provided by component based integration frameworks cannot solve the problem of binary component integration in an automatic way. Notably, in the context of component based concurrent systems, the binary component integration may cause deadlocks within the system. In this paper we present a technique to allow connectors synthesis for deadlock-free component based architectures [2] in a real scale context, namely in the context of COM/DCOM applications. This technique is based on an architectural, connector-based approach which consists of synthesizing a COM/DCOM connector as a COM/DCOM server that can route requests of the clients through a deadlock free\u00a0\u2026", "num_citations": "45\n", "authors": ["657"]}
{"title": "Adaptor synthesis for real-time components\n", "abstract": " Building a real-time system from reusable or COTS components introduces several problems, mainly related to compatibility, communication, and QoS issues. We propose an approach to automatically derive adaptors in order to solve black-box integration anomalies, when possible. We consider black-box components equipped with an expressive interface that specifies the interaction behavior with the expected environment, the component clock, as well as latency, duration, and controllability of the component\u2019s actions. The principle of adaptor synthesis is to coordinate the interaction behavior of the components in order to avoid possible mismatches, such as deadlocks. Each adaptor models the correct assembly code for a set of components. Our approach is based on labeled transition systems and Petri nets, and is implemented in a tool called SynthesisRT. We illustrate it through a case study\u00a0\u2026", "num_citations": "43\n", "authors": ["657"]}
{"title": "Flyaq: Enabling non-expert users to specify and generate missions of autonomous multicopters\n", "abstract": " Multicopters are increasingly popular since they promise to simplify a myriad of everyday tasks. Currently, vendors provide low-level APIs and basic primitives to program multicopters, making mission development a task-specific and error-prone activity. As a consequence, current approaches are affordable only for users that have a strong technical expertise. Then, software engineering techniques are needed to support the definition, development, and realization of missions at the right level of abstraction and involving teams of autonomous multicopters that guarantee the safety today's users expect. In this paper we describe a tool that enables end-users with no technical expertise, e.g., firefighters and rescue workers, to specify missions for a team of multicopters. The detailed flight plan that each multicopter must perform to accomplish the specified mission is automatically generated by preventing collisions\u00a0\u2026", "num_citations": "40\n", "authors": ["657"]}
{"title": "Synthesis and verification of self-aware computing systems\n", "abstract": " Self-aware computing systems are envisaged to exploit the knowledge of their own software architecture, hardware infrastructure and environment in order to follow high-level goals through proactively adapting as their environment evolves. This chapter describes two classes of key enabling techniques for self-adaptive systems: automated synthesis and formal verification. The ability to dynamically synthesize component connectors and compositions underpins the proactive adaptation of the architecture of self-aware systems. Deciding when adaptation is needed and selecting valid new architectures or parameters for self-aware systems often requires formal verification. We present the state of the art in the use of the two techniques for the development of self-aware computing systems and summarize the main research challenges associated with their adoption in practice.", "num_citations": "37\n", "authors": ["657"]}
{"title": "Automated synthesis of service choreographies\n", "abstract": " Future Internet research promotes the production of a distributed-computing environment that will be increasingly surrounded by a virtually infinite number of software services that can be composed to meet user needs. Services will be increasingly active entities that, communicating peer-to-peer, can proactively make decisions and autonomously perform tasks. Service choreography is a form of decentralized service composition that describes peer-to-peer message exchanges among participant services from a global perspective. In a distributed setting, obtaining the coordination logic required to realize a choreography is nontrivial and error prone. So, automatic support for realizing choreographies is needed. For this purpose, researchers developed a choreography synthesis tool. The Web extra at http://www.di.univaq.it/marco.autili/synthesis/shortdemo/demo.htm is a short demonstration of CHOReOSynt, a\u00a0\u2026", "num_citations": "37\n", "authors": ["657"]}
{"title": "Synthesis, a tool for synthesizing correct and protocol-enhanced adaptors\n", "abstract": " Sauf mention contraire ci-dessus, le contenu de cette notice bibliographique peut \u00eatre utilis\u00e9 dans le cadre d\u2019une licence CC BY 4.0 Inist-CNRS/Unless otherwise stated above, the content of this bibliographic record may be used under a CC BY 4.0 licence by Inist-CNRS/A menos que se haya se\u00f1alado antes, el contenido de este registro bibliogr\u00e1fico puede ser utilizado al amparo de una licencia CC BY 4.0 Inist-CNRS", "num_citations": "37\n", "authors": ["657"]}
{"title": "Synthesizing adapters for conversational web-services from their WSDL interface\n", "abstract": " Service-oriented applications are typically built out of existing web-services (WSs) possibly made available by third party vendors. This requires that the application has to be able to evolve when the composing WSs are not anymore available or when new, more useful ones, are published. In this setting, an important problem is to understand how to use WSs showing an interface that differs from the one the application has been built to. The problem becomes even more complex when we consider conversational WSs, ie, WSs that expose operations that have Input/Output (I/O) data dependencies among them. This paper presents a complete development methodology to the automatic synthesis of adapters for conversational WSs starting from their WSDL interface. The result is a tool-supported methodology that takes as input the WSDL of a pair of services and automatically builds a script that maps a sequence of\u00a0\u2026", "num_citations": "36\n", "authors": ["657"]}
{"title": "Choreography realizability enforcement through the automatic synthesis of distributed coordination delegates\n", "abstract": " In the near future we will be surrounded by a virtually infinite number of software applications that provide services in the digital space. This situation promotes reuse-based software production through composition of existing software services distributed over the Internet. Choreographies are a form of decentralized composition that model the external interaction of the participant services by specifying peer-to-peer message exchanges from a global perspective. When third-party (possibly black-box) services are to be composed, obtaining the distributed coordination logic required to enforce the realizability of the specified choreography is a non-trivial and error prone task. Automatic support is then needed. In this paper, we propose a formal approach to the enforcement of choreography realizability through the automatic synthesis of distributed Coordination Delegates (CDs). CDs are additional software entities with\u00a0\u2026", "num_citations": "34\n", "authors": ["657"]}
{"title": "Synthesis of decentralized and concurrent adaptors for correctly assembling distributed component-based systems\n", "abstract": " Building a distributed system from third-party components introduces a set of problems, mainly related to compatibility and communication. Our existing approach to solve such problems is to build a centralized adaptor which restricts the system\u2019s behavior to exhibit only deadlock-free and desired interactions. However, in a distributed environment such an approach is not always suitable. In this paper, we show how to automatically generate a distributed adaptor for a set of black-box components. First, by taking into account a specification of the interaction behavior of each component, we synthesize a behavioral model for a centralized glue adaptor. Second, from the synthesized adaptor model and a specification of the desired behavior that must be enforced, we generate one local adaptor for each component. The local adaptors cooperatively behave as the centralized one restricted with respect to the specified\u00a0\u2026", "num_citations": "33\n", "authors": ["657"]}
{"title": "Application-layer connector synthesis\n", "abstract": " The heterogeneity characterizing the systems populating the Ubiquitous Computing environment prevents their seamless interoperability. Heterogeneous protocols may be willing to cooperate in order to reach some common goal even though they meet dynamically and do not have a priori knowledge of each other. Despite numerous efforts have been done in the literature, the automated and run-time interoperability is still an open challenge for such environment. We consider interoperability as the ability for two Networked Systems (NSs) to communicate and correctly coordinate to achieve their goal(s).               In this chapter we report the main outcomes of our past and recent research on automatically achieving protocol interoperability via connector synthesis. We consider application-layer connectors by referring to two conceptually distinct notions of connector: coordinator and mediator. The former is\u00a0\u2026", "num_citations": "32\n", "authors": ["657"]}
{"title": "Towards an assume-guarantee theory for adaptable systems\n", "abstract": " Modern software systems should be more and more designed with adaptation and run-time evolution in mind. But even with good reactions to changes, the triggered adaptation should be performed preserving some properties that we call invariants. This position paper presents a step towards the definition of a theoretical assume-guarantee framework that allows one to efficiently define under which conditions adaptation can be performed by still preserving the desired invariant. The framework aims to cope with different levels of granularity that span from code to software architecture. Two illustrative examples instantiate the framework at two different levels of abstraction.", "num_citations": "32\n", "authors": ["657"]}
{"title": "Automatic generation of detailed flight plans from high-level mission descriptions\n", "abstract": " Drones are increasingly popular since they promise to simplify a myriad of everyday tasks. Currently vendors provide low-level APIs and basic primitives to program drones, making mission development a task-specific and error-prone activity. As a consequence, current approaches are affordable only for users that have a strong technical expertise. Then, it emerges the need for software engineering techniques supporting the definition, development, and realization of missions involving swarms of autonomous drones while guaranteeing the safety today's users expect. In this paper we consider mission specifications expressed through a domain-specific modeling language which can be effectively used by end-users with no technical expertise, eg, firefighters and rescue workers. Our generation method automatically derives the lower level logic that each drone must perform to accomplish the specified mission\u00a0\u2026", "num_citations": "29\n", "authors": ["657"]}
{"title": "An architectural approach to the correct and automatic assembly of evolving component-based systems\n", "abstract": " Software components are specified, designed and implemented with the intention to be reused, and they are assembled in various contexts in order to produce a multitude of software systems. However, in the practice of software development, this ideal scenario is often unrealistic. This is mainly due to the lack of an automatic and efficient support to predict properties of the assembly code by only assuming a limited knowledge of the properties of single components. Moreover, to make effective the component-based vision, the assembly code should evolve when things change, i.e., the properties guaranteed by the assembly, before a change occurs, must hold also after the change. Glue code synthesis approaches technically permit one to construct an assembly of components that guarantees specific properties but, practically, they may suffer from the state-space explosion phenomenon.In this paper, we propose a\u00a0\u2026", "num_citations": "28\n", "authors": ["657"]}
{"title": "Distributed enforcement of service choreographies\n", "abstract": " Modern service-oriented systems are often built by reusing, and composing together, existing services distributed over the Internet. Service choreography is a possible form of service composition whose goal is to specify the interactions among participant services from a global perspective. In this paper, we formalize a method for the distributed and automated enforcement of service choreographies, and prove its correctness with respect to the realization of the specified choreography. The formalized method is implemented as part of a model-based tool chain released to support the development of choreography-based systems within the EU CHOReOS project. We illustrate our method at work on a distributed social proximity network scenario.", "num_citations": "27\n", "authors": ["657"]}
{"title": "CHOREOS: large scale choreographies for the future internet\n", "abstract": " In this paper we share our experience in the CHOReOS EU project. CHOReOS provides solutions for the development and execution of large scale choreographies for the Future Internet. Our main involvement in the project concerns the definition of a choreography development process based on automated synthesis of choreographies out of a large scale service base and a user-centric requirements specification. By focusing on the work package WP2, whose main outcome is the realization of the CHOReOS development process, we discuss the WP2 activities by also summarizing main objectives and related achievements.", "num_citations": "26\n", "authors": ["657"]}
{"title": "Self-aware computing systems: Related concepts and research areas\n", "abstract": " Self-aware computing systems exhibit a number of characteristics (e.g., autonomy, social ability, and proactivity) which have already been studied in different research areas, such as artificial intelligence, organic computing, or autonomic and self-adaptive systems. This chapter provides an overview of strongly related concepts and areas of study from the perspective of self-aware computing systems.", "num_citations": "24\n", "authors": ["657"]}
{"title": "Synthesis of concurrent and distributed adaptors for component-based systems\n", "abstract": " Building a distributed system from third-party components introduces a set of problems, mainly related to compatibility and communication. Our existing approach to solve such problems is to build a centralized adaptor which restricts the system\u2019s behavior to exhibit only deadlock-free and desired interactions. However, in a distributed environment such an approach is not always suitable. In this paper we show how to automatically generate a distributed adaptor for a set of black-box components. First, by taking into account a specification of the interaction behavior of each component, we synthesize a behavioral model of a centralized glue adaptor. Second, from the synthesized adaptor model and a specification of the desired behavior, we generate a set of adaptors local to the components. They cooperatively behave as the centralized adaptor restricted with respect to the specified desired interactions.", "num_citations": "24\n", "authors": ["657"]}
{"title": "Automated synthesis of application-layer connectors from automata-based specifications\n", "abstract": " Ubiquitous and Pervasive Computing, and the Internet of Things, promote dynamic interaction among heterogeneous systems. To achieve this vision, interoperability among heterogeneous systems represents a key enabler, and mediators are often built to solve protocol mismatches. Many approaches propose the synthesis of mediators. Unfortunately, a rigorous characterization of the concept of interoperability is still lacking, hence making hard to assess their applicability and soundness. In this paper, we provide a framework for the synthesis of mediators that allows us to: (i) characterize the conditions for the mediator existence and correctness; and (ii) establish the applicability boundaries of the synthesis method.", "num_citations": "23\n", "authors": ["657"]}
{"title": "Synthesis of resilient choreographies\n", "abstract": " A possible Service Engineering (SE) approach to build service-based systems is to compose together distributed services by considering a global specification of their interactions, namely a choreography. BPMN2 (Business Process Modeling Notation v2.0) provides a dedicated notation, called Choreography Diagrams, to define the global expected behavior between interacting participants. An interesting problem worth considering concerns choreography realizability enforcement, while ensuring a resilient evolution upon facing changes. The strategy that we adopt to solve this problem is twofold: given a BPMN2 choreography specification and a set of existing services discovered as possible participants, (i) adapt their interaction protocol to the choreography roles and (ii) coordinate their (adapted) interaction so to fulfill the global collaboration prescribed by the choreography. This paper proposes a\u00a0\u2026", "num_citations": "19\n", "authors": ["657"]}
{"title": "A reuse-based approach to the correct and automatic composition of web-services\n", "abstract": " Service oriented technologies, such as web services, can be considered one of the latest trends in distributed computing. Nowadays, the Internet arena is populated by an ever more increasing number of web services. This has led to the need for reuse-based approaches to the automatic construction of new services as a correct composition of existing ones. A composition of services is correct when it respects the Service Level Specification (SLS) specified for the composite service to be built. To this end, we propose an extension of our previous work on the automatic component assembly. The aim of this extension is to propose an automatic and specification-based approach for constructing composite services from existing ones, which are discovered from a service repository. We instantiate the proposal in the context of web services. This work has to be considered as an ongoing work. In this paper, we also raise\u00a0\u2026", "num_citations": "19\n", "authors": ["657"]}
{"title": "An adaptation-based approach to incrementally build component systems\n", "abstract": " Software components are now widely used in the development of systems. However, incompatibilities between their behavioural interfaces may make their composition impossible. The objective of software adaptation is to compensate such incompatibilities building as automatically as possible corrective connectors or components. Constructing component-based systems from scratch is difficult, in particular when components cannot be used directly since they have to be adjusted with respect to their mates. Incremental construction methods are therefore essential because they make it possible to build systems step by step and therefore to master the complexity of their adaptation. In this paper, we propose an incremental approach to build component-based systems which relies on the generation of adaptors to overcome behavioural incompatibilities. The adaptation stage can be automated being given an\u00a0\u2026", "num_citations": "18\n", "authors": ["657"]}
{"title": "Towards an architectural approach for the dynamic and automatic composition of software components\n", "abstract": " In a component-based software system the components are specified, designed and implemented with the intention to be reused, and are assembled in various contexts in order to produce a multitude of software systems. However, this ideal scenario is not always the case, eg, the integration with legacy components. In this context, one main problem in component assembly arises. It is related to the ability to automatically and efficiently (ie, by reducing the state-explosion phenomenon) synthesize an assembly code for a set of, possibly incompatible, software components. Moreover, this assembly should be able to evolve when things change and to be correct-by-construction, ie, despite the changes, it always ensures a set of properties of interest. In this paper we propose a Software Architecture (SA) based approach in which architectural analysis and code synthesis are combined together in order to efficiently and\u00a0\u2026", "num_citations": "17\n", "authors": ["657"]}
{"title": "A software exoskeleton to protect and support citizen\u2019s ethics and privacy in the digital world\n", "abstract": " Citizens of the digital world are threatened. The digital systems that surround them are increasingly able to make autonomous decisions over and above them and on their behalf. They feel that their moral rights, as well as the social, economic, and political spheres, can be affected by the behavior of such systems. Although unavoidable, the digital world is becoming uncomfortable and potentially hostile to its users as human beings and as citizens. Notwithstanding the introduction of the GDPR and of initiatives to establish criteria on software transparency and accountability, users feel vulnerable and unprotected. In this paper, we present EXOSOUL, an overarching research framework that aims at building a software a personalized exoskeleton that enhances and protects users by mediating their interactions with the digital world according to their own ethics of actions and privacy of data. The exoskeleton disallows\u00a0\u2026", "num_citations": "13\n", "authors": ["657"]}
{"title": "On dynamic reconfiguration of behavioural adaptation\n", "abstract": " Software components are now widely used in the develop- ment of systems. However, incompatibilities between their observable in- terfaces may happen and then make their composition impossible. Soft- ware adaptation aims at generating as automatically as possible new components called adaptors whose role is to compensate such incompat- ibilities. Since development of adaptors is costly, it is crucial to make their reconfiguration possible when one wants to modify or update some parts of a running system involving adaptors. In this first attempt, we present the problem of dynamically reconfiguring adaptors and we sketch some ideas of solution on an example. Finally, we end with a list of open issues to be worked out.", "num_citations": "13\n", "authors": ["657"]}
{"title": "Automatic adaptor synthesis for protocol transformation\n", "abstract": " Adaptation of software components is an important issue in Component Based Software Engineering (CBSE). Building a system from reusable or Commercial-Off-The-Shelf (COTS) components introduces a set of issues, mainly related to compatibility and communication aspects. Components may have incompatible interaction behavior. Moreover it might be necessary to enhance the current communication protocol to introduce more sophisticated interactions among components. We address these problems enhancing our architectural approach which allows for detection and recovery of integration mismatches by synthesizing a suitable coordinator. Starting from the specification of the system to be assembled and from the specification of the needed protocol enhancements, our framework automatically derives, in a compositional way, the glue code for the set of components. The synthesized glue code avoids interaction mismatches and provides a protocol-enhanced version of the composed system.", "num_citations": "12\n", "authors": ["657"]}
{"title": "Towards a connector algebra\n", "abstract": " Interoperability of heterogeneous networked systems has yet to reach the maturity required by ubiquitous computing due to the technology-dependent nature of solutions. The Connect Integrated Project attempts to develop a novel network infrastructure to allow heterogeneous networked systems to freely communicate with one another by synthesising the required connectors on-the-fly. A key objective of Connect is to build a comprehensive theory of composable connectors, by devising an algebra for rigorously characterising complex interaction protocols in order to support automated reasoning. With this aim in mind, we formalise a high-level algebra for reasoning about protocol mismatches. Basic mismatches can be solved by suitably defined primitives, while complex mismatches can be settled by composition operators that build connectors out of simpler ones. The semantics of the algebra is given in\u00a0\u2026", "num_citations": "12\n", "authors": ["657"]}
{"title": "Model-driven adaptation of service choreographies\n", "abstract": " Service choreographies represent a powerful and flexible approach to compose software services in a fully distributed way. A key enabler for the actual realization of choreographies is the ability to automatically compose services, and perform exogenous coordination and adaptation of their interaction. This is a nontrivial and error prone task. Automatic support for realizing choreographies is needed. In this paper we focus on adapter generation and describe our novel approach to the synthesis of service Adapters. When needed, adapters permit to correctly bind concrete services to (abstract) choreography roles by solving possible protocol mismatches. Enterprise Integration Patterns are used as adaptation primitives and composed to realize complex adaptation policies.", "num_citations": "11\n", "authors": ["657"]}
{"title": "Automatic failures-free connector synthesis: An example\n", "abstract": " Many software projects are based on the integration of independently designed software components that are acquired on the market rather than developed within the project itself. This type of components is well known as COTS (Commercial-Off-The-Shelf) components. Nowadays component based technologies provide interoperability and composition mechanisms that cannot solve the COTS components assembly problem in an automatic way. One of the main problems in components assembly is related to the ability to establish properties on the assembly code by only assuming a limited knowledge of the single components properties. Our answer to this problem is a software architecture based approach in which the software architecture imposed on the assembly, allows for detection and recovery of COTS integration anomalies. We build applications by assuming a defined architectural style. Then, we\u00a0\u2026", "num_citations": "11\n", "authors": ["657"]}
{"title": "Correct and automatic assembly of COTS components: an architectural approach\n", "abstract": " Correct and automatic assembly of COTS components: an architectural approach Page 1 Correct and automatic assembly of COTS components: an architectural approach Paola Inverardi University of L\u2019Aquila Dip. Informatica via Vetoio 1, 67100 L\u2019Aquila, Italy inverard@univaq.it Massimo Tivoli University of L\u2019Aquila Dip. Informatica via Vetoio 1, 67100 L\u2019Aquila, Italy tivoli@univaq.it ABSTRACT \u00a2\u00a1\u00a4\u00a3\u00a6\u00a5 \u00a7 \u00a9 \u00a1 \"!# \u00a9#$%'&( \u00a7) \u00a1 \"01\u00a1 \u00a7 (23 \u00a9 \u00a34 5#\"67\u00a3\u00a6 (8 9\u00a1 67\u00a9 \u00a34 \u00a9 @ 67\u00a3#2#(A !B(\u00a3#2#(\u00a3C DE\u00a5\u00a2 2#(\u00a7 678 \u00a3#(2F \u00a7G\u00a9 H \u00a1\u00a4 I&(\u00a9QP4!B\u00a9 \u00a3#(\u00a3C \u00a7R 51\u00a1 S \u00a1 \u00a2\u00a1 &(TCU#67 (2 \u00a9 \u00a3V 5#WPX\u00a1 Y ( X 9\u00a1 5#( \u00a2 51\u00a1 \u00a3V 2#(` (D7\u00a9 !B(2V \"67 5#6E\u00a3V 5#a!# \u00a9#$ (&( 67 b\u00a7G(DE ce df5#6E\u00a7g H\u00a5C!BF\u00a9 &(\u00a9 P3!@\u00a9 \u00a3h(\u00a3\u00a6 \u00a7g 6E\u00a7gi(D7DR Y\u00a6\u00a3h\u00a9pf\u00a3q \u00a1 \u00a7a rfstdIu vrw\u00a9QP4P3( &(6 \u00a1 DEA\u00a4six@Aydf5#(A u95#(DE 9 \u00a6 &(\u00a9 P3!B\u00a9 \u00a3#(\u00a3C b\u00a7 c \u00a99 \u00a1 21\u00a1 \u00a5\u00a6\u00a7 &(\u00a9 P3!@\u00a9 A \u00a3#(\u00a3C", "num_citations": "11\n", "authors": ["657"]}
{"title": "CHOReVOLUTION: automating the realization of highly\u2013collaborative distributed applications\n", "abstract": " CHOReVOLUTION is a platform for the tool-assisted development and execution of scalable applications that leverage the distributed collaboration of services specified through service choreographies. It offers an Integrated Development and Runtime Environment (IDRE) comprising a wizard-aided development environment, a system monitoring console, and a back-end for managing the deployment and execution of the system on the cloud. We describe the platform by using a simple example and evaluate it against two industrial use cases in the domain of Smart Mobility & Tourism and Urban Traffic Coordination.", "num_citations": "10\n", "authors": ["657"]}
{"title": "On the automated synthesis of enterprise integration patterns to adapt choreography-based distributed systems\n", "abstract": " The Future Internet is becoming a reality, providing a large-scale computing environments where a virtually infinite number of available services can be composed so to fit users' needs. Modern service-oriented applications will be more and more often built by reusing and assembling distributed services. A key enabler for this vision is then the ability to automatically compose and dynamically coordinate software services. Service choreographies are an emergent Service Engineering (SE) approach to compose together and coordinate services in a distributed way. When mismatching third-party services are to be composed, obtaining the distributed coordination and adaptation logic required to suitably realize a choreography is a non-trivial and error prone task. Automatic support is then needed. In this direction, this paper leverages previous work on the automatic synthesis of choreography-based systems, and describes our preliminary steps towards exploiting Enterprise Integration Patterns to deal with a form of choreography adaptation.", "num_citations": "9\n", "authors": ["657"]}
{"title": "Correct components assembly for a product data management cooperative system\n", "abstract": " In this paper we report on a case study of correct automatic assembly of software components. We show the application of our tool (called Synthesis) for correct components assembly to a software system in the area of CSCW (Computer Supported Cooperative Work). More specifically we consider a product data management (PDM) cooperative system which has been developed by the company Think3 in Bologna, ITALY (www.think3.com). In the area of CSCW, the automatic enforcing of desired interactions among the components forming the system requires the ability to properly manage the dynamic interactions of the components. Moreover once a customer acquires a CSCW system, the vendor of the CSCW system has to spend many further resources in order to integrate the CSCW system with the client applications used by the customer organization. Thus the full automation of the phase of integration\u00a0\u2026", "num_citations": "9\n", "authors": ["657"]}
{"title": "A choreography-based and collaborative road mobility system for L\u2019Aquila city\n", "abstract": " Next Generation Internet (NGI) is the European initiative launched to identify the future internet technologies, designed to serve the needs of the digitalized society while ensuring privacy, trust, decentralization, openness, inclusion, and business cooperation. NGI provides efficient support to promote diversity, decentralization and the growth of disruptive innovation envisioned by smart cities. After the earthquake of 6 April 2009, the city of L\u2019Aquila is facing a massive and innovative reconstruction process. As a consequence, nowadays, the L\u2019Aquila city can be considered as a living laboratory model for applications within the context of smart cities. This paper describes and evaluates the realization of a Collaborative Road Mobility System (CRMS) for L\u2019Aquila city by using our CHOReVOLUTION approach for the automated choreography production. The CRMS allows vehicles and transport infrastructure to interconnect, share information and use it to coordinate their actions. View Full-Text", "num_citations": "8\n", "authors": ["657"]}
{"title": "Aiding the realization of service-oriented distributed systems\n", "abstract": " Reuse-based software engineering is becoming the main approach for developing business and commercial systems. Service choreographies support the reuse-based service-oriented philosophy in that they represent a powerful and flexible approach to realize systems by (possibly) reusing services and composing them in a fully distributed way. A key enabler for the realization of choreographies is the ability to (i) reuse existing applications and services that can play the role of choreography participants,(ii) aid developers in writing the code of those participants whose roles cannot be covered through reuse, and (iii) automatically synthesize the coordination logic required for their correct interaction. The contribution of this paper is the definition and realization of a novel approach to the synthesis of service choreographies that allows developers to just fill-in-the-blank of automatically generated code templates of\u00a0\u2026", "num_citations": "8\n", "authors": ["657"]}
{"title": "A development process for requirements based service choreography\n", "abstract": " The Future Internet envisions a ubiquitous world where available services can be easily discovered and coordinated so to fit users' requirements and needs. Service choreographies will play a central role in this vision as an effective means to allow heterogeneous services to suitably collaborate. This paper describes our experience of choreography development within the CHOReOS project.", "num_citations": "8\n", "authors": ["657"]}
{"title": "On the Model-driven Synthesis of Adaptable Choreographies.\n", "abstract": " Service choreographies represent a powerful and exible approach to compose software services in a distributed way. A key enabler for the realization of choreographies is the ability to automatically compose services, and perform exogenous coordination and adaptation of their interaction. This is a nontrivial and error prone task. Automatic support is needed. Adapters are used to bind concrete services to (abstract) choreography roles by solving possible protocol mismatches. In this paper we focus on the synthesis of adapters, each of them realized as a suitable composition of adaptation primitives. We show our method at work on a use case in the domain of Smart Mobility & Tourism.", "num_citations": "7\n", "authors": ["657"]}
{"title": "Biological Immunity and Software Resilience: Two Faces of the Same Coin?\n", "abstract": " Biological systems modeling and simulation is an important stream of research for both biologists and computer scientists. On the one hand, biologists ask for systemic approaches to model biological systems to the purpose of simulating them on a computer and predicting their behavior, which is resilient by nature. This would limit as much as possible the number of experiments in laboratory, which are known to be expensive, often impracticable, hardly reproducible, and slow. On the other hand, beyond facing the development challenges related to the achievement of the resilience to be offered by biological system simulators, computer scientists ask for a well-established engineering methodology to systematically deal with the peculiarities of software resilient systems, in their more general sense. In line with this, in this paper we report on our preliminary study of immune systems (a particular kind of\u00a0\u2026", "num_citations": "7\n", "authors": ["657"]}
{"title": "Producing software by integration: Challenges and research directions (keynote)\n", "abstract": " Software is increasingly produced according to a certain goal and by integrating existing software produced by third-parties, typically black-box, and often provided without a machine readable documentation. This implies that development processes of the next future have to explicitly deal with an inherent incompleteness of information about existing software, notably on its behaviour. Therefore, on one side a software producer will less and less know the precise behaviour of a third party software service, on the other side she will need to use it to build her own application. In this paper we present an innovative development process to automatically produce dependable software systems by integrating existing services under uncertainty and according to the specied goal. Moreover, we (i) discuss important challenges that must be faced while producing the kind of systems we are targeting,(ii) give an overview of the\u00a0\u2026", "num_citations": "7\n", "authors": ["657"]}
{"title": "Cooperative Intelligent Transport Systems: Choreography-Based Urban Traffic Coordination\n", "abstract": " With the emerging connected automated vehicles, 5G and Internet of Things (IoT), vehicles and road infrastructure become connected and cooperative, enabling Cooperative Intelligent Transport Systems (C-ITS). C-ITS are transport system of systems that involves many stakeholders from different sectors. While running their own systems and providing services independently, stakeholders cooperate with each other for improving the overall transport performance such as safety, efficiency and sustainability. Massive information on road and traffic is already available and provided through standard services with different protocols. By reusing and composing the available heterogeneous services, novel value-added applications can be developed. This paper introduces a choreography-based service composition platform, i.e. the CHOReVOLUTION Integrated Development and Runtime Environment (IDRE), and it\u00a0\u2026", "num_citations": "6\n", "authors": ["657"]}
{"title": "Editorial to theme issue on model-driven engineering of component-based software systems\n", "abstract": " This theme issue aims at providing a forum for disseminating latest trends in the use and combination of model-driven engineering (MDE) and component-based software engineering (CBSE). One of the main aims of MDE is to increase productivity in the development of complex systems, while reducing the time to market. Regarding CBSE, one of the main goals is to deliver and then support the exploitation of reusable \u201coff-the-shelf\u201d software components to be incorporated into larger applications. An effective interplay of MDE and CBSE can bring benefits to both communities: on the one hand, the CBSE community would benefit from implementation and automation capabilities of MDE, and on the other hand, MDE would benefit from the foundational nature of CBSE. In total, we received 23 submissions to this theme issue, and each submission was reviewed by at least three reviewers. Thanks to the high\u00a0\u2026", "num_citations": "6\n", "authors": ["657"]}
{"title": "On the model-driven synthesis of evolvable service choreographies\n", "abstract": " Choreographies are a form of decentralized composition that model the external interaction of the participant services by specifying peer-to-peer message exchanges from a global perspective. When mismatching third-party services are to be composed, obtaining the distributed coordination and adaptation logic required to suitably realize a choreography is a non-trivial and error prone task. Automatic support is then needed. Nowadays, very few approaches address the problem of actually realizing choreographies in an automatic way. In this paper, we share the experience we had in two EU projects specifically targeted at choreographies, and report on a novel model-driven approach to the automatic synthesis of evolving choreographies we are currently working on. We illustrate our method at work on a use case in the domain of Smart Mobility & Tourism.", "num_citations": "6\n", "authors": ["657"]}
{"title": "Synthesis of distributed and adaptable coordinators to enable choreography evolution\n", "abstract": " Software systems are often built by composing together software services distributed over the Internet. Choreographies are a form of decentralized composition that models the external interaction of the participant services by specifying peer-to-peer message exchanges from a global perspective. Nowadays, very few approaches address the problem of actually realizing choreographies in an automatic way. Most current approaches are rather static and are poorly suited to the need of the Future Internet. In this chapter, we propose a method for the automatic synthesis of evolving choreographies. Coordination software entities are synthesized in order to proxify and control the participant services\u2019 interaction. When interposed among the services, coordination entities enforce the collaboration specified by the choreography. The ability to evolve the coordination logic in a modular way enables choreography\u00a0\u2026", "num_citations": "6\n", "authors": ["657"]}
{"title": "ModelLAND: Where do models come from?\n", "abstract": " The way in which software systems are produced is radically changing, by increasingly promoting the (re-)use of existent software artifacts. A flourishing of model-based engineering techniques has been defined for building, managing, verifying, validating and controlling software systems. Most approaches build on the assumption that suitable models of software artifacts exist. However, when moving from theory to practice, a question raises up: where do models come from?               The thesis of this paper is that there is the need of explore techniques to automatically extract models from existent software. This paper proposes a general overview of the exploring problem and shows two different techniques, tailored to specific domains, to automatically build models (of different nature) from software artifacts.", "num_citations": "6\n", "authors": ["657"]}
{"title": "Developing highly complex distributed systems: a software engineering perspective\n", "abstract": " What is a highly complex distributed system in the future era? What are the needs that may drive the development of such systems? And what is their life cycle? Is there any new challenge for Software Engineering (SE)? In this paper, we try to provide a partial answer to the above questions by characterizing few application domains that we consider of raising interest in the next years. Our thesis is that there is a need to rethink the whole software process for such systems. The traditional boundaries between static and dynamic activities disappear and development support mingles with run time support thus invading the middleware territory.", "num_citations": "6\n", "authors": ["657"]}
{"title": "The role of architecture in components assembly\n", "abstract": " One of the main problem in component assembly is related to the ability to establish properties on the assembly code by only assuming a relative knowledge of the single components properties. Our answer to this problem is a software architecture based approach in which the software architecture imposed on the assembly, allows for detection and recovery of COTS integration anomalies. In this position paper, by means of an explanatory example we illustrate our approach and discuss on possible recovery strategies.", "num_citations": "6\n", "authors": ["657"]}
{"title": "Thematic series on Verification and Composition for the Internet of Services and Things\n", "abstract": " The Internet of Services and Things is characterized as a distributed computing environment that will be populated by a large number of software services and things. Within this context, software systems will increasingly be built by reusing and composing together software services and things distributed over the Internet. This calls for new integration paradigms and patterns, formal composition theories, integration architectures, as well as flexible and dynamic composition and verification mechanisms. In particular, service- and thing-based systems pose new challenges for software composition and verification techniques, due to changing requirements, emerging behaviors, uncertainty, and dynamicity.", "num_citations": "5\n", "authors": ["657"]}
{"title": "Distributed composition of highly-collaborative services and sensors in tactical domains\n", "abstract": " Software systems are often built by composing services distributed over the network. Choreographies are a form of decentralized composition that models the external interaction of the services by specifying peer-to-peer message exchanges from a global perspective. When third-party services are involved, usually black-box services to be reused, actually realizing choreographies calls for exogenous coordination of their interaction. Nowadays, very few approaches address the problem of actually realizing choreographies in an automatic way. These approaches are rather static and are poorly suited to the need of tactical domains, which are highly-dynamic networking environments that bring together services and sensors over military radio networks. In this paper, we describe a method to employ service choreographies in tactical environments, and apply it to a case study in the military domain.", "num_citations": "5\n", "authors": ["657"]}
{"title": "An architectural style for the development of choreographies in the future internet\n", "abstract": " Accounting for the challenges posed by the Future Internet (FI), we revisit the traditional definitions of component, connector and coordination protocol, and propose the CHOReOS Architectural Style (CAS) for the development of choreographies in the FI. Components enable leveraging the diversity of services that integrate in the FI as well as the ultra large service base envisioned for the FI. Connectors bring together the highly heterogeneous interaction paradigms that are now used in today\u2019s increasingly complex distributed systems and further support interoperability across heterogeneous paradigms. Coordination protocols foster choreography-based coordination for the sake of scalability, while preventing service interactions that would violate a specified choreography. A key aspect of CAS is to introduce novel abstractions for all its elements, which enable leveraging the wide diversity of the FI, in all its dimensions of scale, heterogeneity and mobility.", "num_citations": "5\n", "authors": ["657"]}
{"title": "An architectural approach to the automatic composition and adaptation of software components\n", "abstract": " Composition and adaptation of software components is an important issue in Component Based Software Engineering (CBSE). Building a system from reusable or Commercial-Off-The-Shelf (COTS) components introduces a set of problems, mainly related to compatibility and communication. On one hand, components may have incompatible interaction behavior (eg, deadlocks, livelocks, incompatible method names, mismatch between the order in which messages are expected/exchanged and so on). This might require one to restrict the system\u2019s behavior to avoid undesired interactions among components. On the other hand, it might be necessary to enhance the current communication protocol in order to deal with architectural updates (eg, inserting, replacing or removing components), missing functionality or to improve quality attributes such as reliability. This might require one to augment the system\u2019s behavior to introduce more sophisticated interactions among components. We address these problems by means of an architectural approach implemented in our SYNTHESIS tool which allows one for both detecting/avoiding incompatible interactions and enhancing the communication protocol by synthesizing a suitable coordinator. Taking into account the specification of the system to be assembled, the specification of the desired behaviors that the composed system has to exhibit and the specification of the protocol enhancements, SYNTHESIS automatically derives, in a compositional way, the glue code for the set of components forming the system. The synthesized glue code implements a software coordinator which avoids incompatible\u00a0\u2026", "num_citations": "5\n", "authors": ["657"]}
{"title": "Introducing trust in service-oriented distributed systems through blockchain\n", "abstract": " Business process management is concerned with the design execution, improvement, and monitoring of business processes. Systems that support the enactment and execution of processes have extensively been used by companies to streamline and automate intra-organizational processes. However, today's business enterprises must deal with global competition, heterogeneity, and rapidly develop new services and products. To address these requirements, the services reuse-based approach allowed enterprises to reconsider and optimize the way they do business, and change their information systems and applications to support collaborative business processes. Service choreographies support the reuse-based service-oriented philosophy in that they represent a powerful and flexible approach to realize systems by (possibly) reusing services and composing them in a fully distributed way. Nevertheless, for\u00a0\u2026", "num_citations": "4\n", "authors": ["657"]}
{"title": "Automated integration of service-oriented software systems\n", "abstract": " In the near future we will be surrounded by a virtually infinite number of software applications that provide services in the digital space. This situation radically changes the way software will be produced and used: (i) software is increasingly produced according to specific goals and by integrating existing software; (ii) the focus of software production will be shifted towards reuse of third-parties software, typically black-box, that is often provided without a machine readable documentation. The evidence underlying this scenario is that the price to pay for this software availability is a lack of knowledge on the software itself, notably on its interaction behaviour. A producer will operate with software artefacts that are not completely known in terms of their functional and non-functional characteristics. The general problem is therefore directed to the ability of interacting with the artefacts to the extent the goal is reached\u00a0\u2026", "num_citations": "4\n", "authors": ["657"]}
{"title": "A compositional synthesis of failure-free connectors for correct components assembly\n", "abstract": " Correct automatic assembly of software components is considered an important issue of CBSE (Component-Based Software Engineering). It is related to the ability to establish properties on the assembly code by only assuming a relative knowledge of the single components properties. In our precedent works, we have provided our answer to this problem by discussing a software architecture based approach in which the software architecture imposed on the assembly allows for detection and recovery of COTS (Commercial-Off-The-Shelf) integration anomalies. One of the crucial aspects of our assembly technique is related to the ability to synthesize a specification-satisfying assembly code (ie the failures-free connector) in such a way that the synthesis results compositional with respect to system evolutions. That is every time the system evolves, in order to automatically synthesize the failures-free connector for the new version of the specification-satisfying system it is enough to repeat the synthesis only for the part of the system related to its evolution.", "num_citations": "4\n", "authors": ["657"]}
{"title": "CHOReVOLUTION: Service choreography in practice\n", "abstract": " This paper presents CHOReVOLUTION, a platform for the tool-assisted realization and execution of distributed applications. CHOReVOLUTION specifically targets service-oriented systems specified through service choreographies. It offers an Integrated Development and Runtime Environment (IDRE) organized into three layers, namely, front-end, back-end, and cloud. It comprises a wizard-aided development environment and a system monitoring console in the front-end layer, and a back-end for managing the deployment and execution of the choreographed system on the cloud. We describe the IDRE by using an industrial use case in the domain of Smart Mobility & Tourism, and finally we provide details on its experimental evaluation.", "num_citations": "3\n", "authors": ["657"]}
{"title": "A Multipurpose Framework for Model-based Reuse-oriented Software Integration Synthesis.\n", "abstract": " Systems are increasingly built by reusing and integrating existing software. This paper presents the preliminary version of a multipurpose framework for software integration synthesis. The objective is to provide both researchers and practitioners with an easily accessible environment that, integrating different kinds of software synthesizers, permit to perform different kinds of analyses, verification, model-to-model and model-to-code transformations, all oriented to the reuse and the integration of existing, possibly third-party, software.", "num_citations": "3\n", "authors": ["657"]}
{"title": "A development process for context-aware adaptive services\n", "abstract": " Pervasive computing infrastructure makes it possible for mobile users to run software services on extremely heterogeneous and resource-constrained mobile devices. Heterogeneity and device limitedness creates serious problems for the development and deployment of mobile services that are able to run properly on the execution context and are able to ensures that users experience the ldquobestrdquo Quality of Service possible according to their needs and specific contexts of use. In this paper we show how the main issues related to the development of self-adapting context-aware services are addressed in the IST PLASTIC Project with the support of CHAMELEON, a declarative framework for tailoring adaptable services.", "num_citations": "3\n", "authors": ["657"]}
{"title": "Automatic synthesis of coordinators for COTS groupware applications: an example\n", "abstract": " The coordination of concurrent activities in collaborative environments is a very important and difficult task. Many approaches for the construction of large-scale flexible group-ware applications there exist in the literature. They provide valid support to modeling, analysis and to a whitebox developing of coordination protocols for computer supported cooperative applications. Little attention has been dedicated so far to group-ware applications built by assembling third-party components. In this paper by means of an exploratory example, we apply a software architecture based approach to the group-ware systems development. The software architecture imposed on the coordinating part of the system, allows for detection and recovery of possible and unpredictable concurrent activities conflicts. Moreover, the approach allows the enforcing of coordination policies on the composed system by automatically synthesizing\u00a0\u2026", "num_citations": "3\n", "authors": ["657"]}
{"title": "Transition Strategies for Increasing Self-awareness in Existing Types of Computing Systems\n", "abstract": " In this chapter, we propose a methodology to analyse the different levels of self-awareness present in distinct types of computing systems and architectures, investigate the level of self-awareness that is already present in those systems and architectures, and describe some transition strategies to increase the level of self-awareness in these systems.", "num_citations": "2\n", "authors": ["657"]}
{"title": "Dynamic connector synthesis: revised prototype implementation\n", "abstract": " The CONNECT Integrated Project aims at enabling continuous composition of Networked Systems (NSs) to respond to the evolution of functionalities provided to and required from the networked environment. CONNECT aims at dropping the interoperability barrier by adopting a revolutionary approach to the seamless networking of digital systems, that is, synthesizing on-the-fly the connectors via which networked systems communicate. The resulting emergent connectors are effectively synthesized according to the behavioral semantics of application- down to middleware-layer protocols run by the interacting parties.", "num_citations": "2\n", "authors": ["657"]}
{"title": "Reasoning about and Harmonizing the Interaction Behavior of Networked Systems at Application-and Middleware-Layer\n", "abstract": " The CONNECT Integrated Project aims at enabling continuous composition of networked systems to respond to the evolution of functionalities provided to and required from the networked environment. CONNECT aims at dropping the interoperability barrier by adopting a revolutionary approach to the seamless networking of digital systems, that is, synthesizing on-the-fly the connectors via which networked systems communicate. The resulting emergent connectors are effectively synthesized according to the behavioral semantics of application- down to middleware-layer protocols run by the interacting parties. The role of work package WP3 is to devise automated and compositional approaches to connector synthesis, which can be performed at run-time. Given the respective interaction behavior of networked systems, we want to synthesize the behavior of the connector(s) needed for them to interact. These connectors serve as mediators of the networked systems' interaction at both application and middleware layers. During the project's first year, the work of WP3 led us to achieve the following preliminary results: the formalization of matching and mapping relationships for application-layer interaction protocols; the definition of the corresponding mediator generation algorithm; the analysis of the interoperability problems, and related solutions, that can occur at middleware-layer; and a model-driven approach to the automated elicitation of application-layer protocols from software implementations. All these achievements have been reported in Deliverable D3.1: \"Modeling of application- and middleware-layer interaction protocols\". In this deliverable\u00a0\u2026", "num_citations": "2\n", "authors": ["657"]}
{"title": "Run time models in adaptive service infrastructure\n", "abstract": " Software in the near ubiquitous future will need to cope with variability, as software systems get deployed on an increasingly large diversity of computing platforms and operates in different execution environments. Heterogeneity of the underlying communication and computing infrastructure, mobility inducing changes to the execution environments and therefore changes to the availability of resources and continuously evolving requirements require software systems to be adaptable according to the context changes. Software systems should also be reliable and meet the user\u2019s requirements and needs. Moreover, due to its pervasiveness, software systems must be dependable. Supporting the validation of these self-adaptive systems to ensure dependability requires a complete rethinking of the software life cycle. The traditional division among static analysis and dynamic analysis is blurred by the need to\u00a0\u2026", "num_citations": "2\n", "authors": ["657"]}
{"title": "Assessing Dependability for Mobile and Ubiquitous Systems: Is There a Role for Software Architectures?\n", "abstract": " A traditional research direction in Software Architecture (SA) and dependability is to deduce system dependability properties from the knowledge of the system SA. This well reflects the fact that traditional systems are built by using the closed world assumption. In mobile and ubiquitous systems this line of reasoning becomes too restrictive to apply due to the inherent dynamicity and heterogeneity of the systems under consideration. Indeed, these systems need to relax the closed world assumption and to consider an open world where the system context is not fixed. In other words, the assumption that the system SA is known and fixed at an early stage of the system development might be a limitation. On the contrary, the ubiquitous scenario promotes the view that systems are built by dynamically assembling available components. System dependability can then at most be assessed in terms of components\u00a0\u2026", "num_citations": "1\n", "authors": ["657"]}