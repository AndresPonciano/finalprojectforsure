{"title": "The highways and country roads to continuous deployment\n", "abstract": " As part of a Finnish research program, researchers interviewed 15 information and communications technology companies to determine the extent to which the companies adopted continuous deployment. They also aimed to find out why continuous deployment is considered beneficial and what the obstacles are to its full adoption. The benefits mentioned the most often were the ability to get faster feedback, the ability to deploy more often to keep customers satisfied, and improved quality and productivity. Despite understanding the benefits, none of the companies adopted a fully automatic deployment pipeline. The companies also had higher continuous-deployment capability than what they practiced. In many cases, they consciously chose to not aim for full continuous deployment. Obstacles to full adoption included domain-imposed restrictions, resistance to change, customer desires, and developers' skill and\u00a0\u2026", "num_citations": "177\n", "authors": ["2002"]}
{"title": "Improving the delivery cycle: A multiple-case study of the toolchains in Finnish software intensive enterprises\n", "abstract": " Context: Software companies seek to gain benefit from agile development approaches in order to meet evolving market needs without losing their innovative edge. Agile practices emphasize frequent releases with the help of an automated toolchain from code to delivery.Objective: We investigate, which tools are used in software delivery, what are the reasons omitting certain parts of the toolchain and what implications toolchains have on how rapidly software gets delivered to customers.Method: We present a multiple-case study of the toolchains currently in use in Finnish software-intensive organizations interested in improving their delivery frequency. We conducted qualitative semi-structured interviews in 18 case organizations from various software domains. The interviewees were key representatives of their organization, considering delivery activities.Results: Commodity tools, such as version control and\u00a0\u2026", "num_citations": "39\n", "authors": ["2002"]}
{"title": "Experiences and insights from applying GQM+ Strategies in a systems product development organisation\n", "abstract": " Aligning software-related activities with corporate strategies and goals is increasingly important for several reasons such as increasing the customer satisfaction in software-based products and services. Several approaches have been proposed to create such an alignment. GQM+Strategies is an approach that applies measurement principles to link goals and strategies on different levels of an organisation. In this paper, we describe experiences from applying GQM+Strategies to elicit, link, and align the goals of an integrated systems product development organisation across multiple organisational levels. We provide insights into how GQM+Strategies was applied during a five-month period. The paper presents the enacted application process and main lessons learnt. In addition, related approaches are described and an outlook on future work is given.", "num_citations": "27\n", "authors": ["2002"]}
{"title": "Measurement of the Non-Technical Skills of Software Professionals: An Empirical Investigation.\n", "abstract": " Software development managers recognize that project teams need to be developed and managed. Although technical skills are necessary, non-technical (NT) skills are equally necessary for project success. There are several tools that assist in measuring the effectiveness of the technical skills that teams use to perform projects, but there are no proven tools to measure the NT skills of software developers. Behavioral markers (BM), observable behaviors that have positive or negative impacts on individual or team performance) are beginning to be successfully used by airline and medical industries to assist managers in assessing NT skills of project teams and individuals. The purpose of this research is to develop and validate a NT skills taxonomy for software developers. This paper presents an empirical investigation to develop and validate a NT skills taxonomy which was in turn used to construct a BM system tool for said developers and software development teams.", "num_citations": "19\n", "authors": ["2002"]}
{"title": "Examining the structure of lean and agile values among software developers\n", "abstract": " Gaining maximum benefit of Lean and Agile methods requires a thorough understanding of their assumptions regarding culture, mindset, and values. This paper examines the value system structure of experienced developers working with Lean and Agile methods, and compares it to universal human values and individual personality. We developed and deployed an online survey on Lean and Agile values, with embedded measures for universal values and personality. The resulting data set, with 61 respondents, was analysed using agglomerative hierarchical clustering and multidimensional scaling. A value structure containing 11 Lean and Agile values was uncovered, yielding insight into how Lean and Agile developers experience values in their work. The analysis shows that Lean and Agile values are connected, but not equal, to universal values and personality. The proposed model can help\u00a0\u2026", "num_citations": "15\n", "authors": ["2002"]}
{"title": "The effects of GQM+ Strategies on organizational alignment\n", "abstract": " The increasing role of software for developing products and services requires that organizations align their software-related activities with high-level business goals. In practice, this alignment is very difficult and only little systematic support is available. GQM+Strategies is a method that aims at aligning organizational goals, strategies, and measurements at all levels of an organization in a seamless way. This article describes a case study of applying GQM+Strategies in a globally op- erating industrial R&D organization developing special-purpose device products for B2B customers. The study analyzes how GQM+Strategies has helped clarify and harmonize the goal set of the organization. Results of the study indicate improved alignment and integration of different goals. In addition, the method helped to make the initially informal goal-setting more transparent and consequently enabled revising it while new, more important goals were discovered and comprehended. Moreover, several elements affecting the achievement of goals as well as impediments were identified.", "num_citations": "11\n", "authors": ["2002"]}
{"title": "A behavior marker tool for measurement of the non-technical skills of software professionals: An empirical investigation\n", "abstract": " Managers recognize that software development project teams need to be developed and guided. Although technical skills are necessary, non-technical (NT) skills are equally, if not more, necessary for project success. Currently, there are no proven tools to measure the NT skills of software developers or software development teams. Behavioral markers (observable behaviors that have positive or negative impacts on individual or team performance) are beginning to be successfully used by airline and medical industries to measure NT skill performance. The purpose of this research is to develop and validate the behavior marker system tool that can be used by different managers or coaches to measure the NT skills of software development individuals and teams. This paper presents an empirical study conducted at the Software Factory where users of the behavior marker tool rated video clips of software development teams. The initial results show that the behavior marker tool can be reliably used with minimal training.", "num_citations": "9\n", "authors": ["2002"]}
{"title": "A behavior marker for measuring non-technical skills of software professionals: An empirical study\n", "abstract": " Managers recognize that software development teams need to be developed. Although technical skills are necessary, non-technical (NT) skills are equally, if not more, necessary for project success. Currently, there are no proven tools to measure the NT skills of software developers or software development teams. Behavioral markers (observable behaviors that have positive or negative impacts on individual or team performance) are successfully used by airline and medical industries to measure NT skill performance. This research developed and validated a behavior marker system through an empirical study conducted at the Software Factory where users of the behavior marker tool rated video clips of software development teams. The initial results show that the behavior marker tool can be reliably used with minimal training.", "num_citations": "3\n", "authors": ["2002"]}
{"title": "Assessing the viability of implicitly estimated velocity for measuring the productivity of software teams\n", "abstract": " Productivity is an important aspect of any software development project as it has direct implications on both the cost of software and the time taken to produce it. Though software development as a field has evolved significantly during the last few decades in terms of development processes, best practices and the emphasis thereon, the way in which the productivity of software developers is measured has remained comparatively stagnant. Some established metrics focus on a sole activity, such as programming, which paints an incomplete picture of productivity given the multitude of different activities that a software project consists of. Others are more process-oriented \u2014 purporting to measure all types of development activities \u2014 but require the use of estimation, a technique that is both time-consuming and prone to inaccuracy. A metric that is comprehensive, accurate and suitable in today's development landscape is needed.  In this thesis, we examine productivity measurement in software engineering from both theoretical and pragmatic perspectives in order to determine if a proposed metric, implicitly estimated velocity, could be a viable alternative for productivity measurement in Agile and Lean software teams. First, the theory behind measurement \u2014 terminology, data types and levels of measurement \u2014 is presented. The definition of the term productivity is then examined from a software engineering perspective. Based on this definition and the IEEE standard for validating software quality metrics, a set of criteria for validating productivity metrics is proposed. The motivations for measuring productivity and the factors that may impact it are then\u00a0\u2026", "num_citations": "2\n", "authors": ["2002"]}