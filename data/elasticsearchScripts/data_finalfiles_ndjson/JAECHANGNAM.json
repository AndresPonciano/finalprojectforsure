{"title": "CLAMI: Defect Prediction on Unlabeled Datasets\n", "abstract": " Defect prediction on new projects or projects with limited historical data is an interesting problem in software engineering. This is largely because it is difficult to collect defect information to label a dataset for training a prediction model. Cross-project defect prediction (CPDP) has tried to address this problem by reusing prediction models built by other projects that have enough historical data. However, CPDP does not always build a strong prediction model because of the different distributions among datasets. Approaches for defect prediction on unlabeled datasets have also tried to address the problem by adopting unsupervised learning but it has one major limitation, the necessity for manual effort. In this study, we propose novel approaches, CLA and CLAMI, that show the potential for defect prediction on unlabeled datasets in an automated manner without need for manual effort. The key idea of the CLA and\u00a0\u2026", "num_citations": "145\n", "authors": ["211"]}
{"title": "Survey on Software Defect Prediction\n", "abstract": " Software defect prediction is one of the most active research areas in software engineering. Defect prediction results provide the list of defect-prone source code artifacts so that quality assurance teams can effectively allocate limited resources for validating software products by putting more effort on the defect-prone source code. As the size of software projects becomes larger, defect prediction techniques will play an important role to support developers as well as to speed up time to market with more reliable software products.In this survey, we first introduce the common defect prediction process used in the literature and how to evaluate defect prediction performance. Second, we compare different defect prediction techniques such as metrics, models, and algorithms. Third, we discuss various approaches for cross-project defect prediction that is an actively studied topic in recent years. We then discuss applications on defect prediction and other emerging topics. Finally, based on this survey, we identify challenging issues for the next step of the software defect prediction.", "num_citations": "54\n", "authors": ["211"]}
{"title": "A trust framework of ubiquitous healthcare with advanced Petri net model\n", "abstract": " Ubiquitous healthcare, which enables patients to access medical services anywhere anytime, is still so immature that particularly trust issues in this area require more researches. In this sense, how to design a trustworthy ubiquitous healthcare system is an interesting problem to be resolved. In this paper, we propose a trust framework for ubiquitous healthcare systems by using advanced Petri net and verify how this trust framework evaluates trust properties when developing ubiquitous healthcare systems. The outcome of the research, the trust framework, can make it easy to understand how trust relationships can be built in ubiquitous healthcare systems via mathematical and graphical models.", "num_citations": "5\n", "authors": ["211"]}
{"title": "Mining crash fix patterns\n", "abstract": " During the life cycle of software development, developers have to fix different kinds of bugs reported by testers or end users. The efficiency and effectiveness of fixing bugs have a huge impact on the reliability of the software as well as the productivity of the development team. Software companies usually spend a large amount of money and human resources on the testing and bug fixing departments. As a result, a better and more reliable way to fix bugs is highly desired by them. In order to achieve such goal, in depth studies on the characteristics of bug fixes from well maintained, highly popular software projects are necessary. In this paper, we study the bug fixing histories extracted from the Eclipse project, a well maintained, highly popular open source project. After analyzing more than 36,000 bugs that belongs to three major kinds of exception types, we are able to reveal some common fix types that are frequently used to fix certain kinds of program exceptions. Our analysis shows that almost all of the exceptions that belong to a certain exception can be fixed by less than ten fix types. Our result implies that most of the bugs in software projects can be and should be fixed by only a few common fix patterns.", "num_citations": "1\n", "authors": ["211"]}