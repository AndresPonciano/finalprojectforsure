{"title": "Features of IT service markets: a systematic literature review\n", "abstract": " The provision of IT solutions over electronic marketplaces became prominent in recent years. We call such marketplaces IT service markets. IT service markets have some core architectural building blocks that impact the quality attributes of these markets. However, these building blocks and their impacts are not well-known. Thus, design choices for IT service markets have been made ad-hoc until now. Furthermore, only single aspects of such markets have been investigated until now, but a comprehensive view is missing. In this paper, we identify common features and their interrelations on the basis of a systematic literature review of 60 publications using grounded theory. This knowledge provides an empirical evidence on the interdisciplinary design choices of IT service markets and it serves as a basis to support market providers and developers to integrate market features. Thereby, we make a first step\u00a0\u2026", "num_citations": "12\n", "authors": ["774"]}
{"title": "A variability model for store-oriented software ecosystems: an enterprise perspective\n", "abstract": " Pioneers of today\u2019s software industry like Salesforce and Apple have established successful ecosystems around their software platforms. Architectural knowledge of the existing ecosystems is implicit and fragmented among online documentation. In protection of intellectual property, existing documentation hardly reveals influential business strategies that affect the ecosystem structure. Thus, other platform providers can hardly learn from the existing ecosystems in order to systematically make reasonable design decisions with respect to their business strategies to create their own ecosystems. In this paper, we identify a variability model for architectural design decisions of a store-oriented software ecosystem product line from an enterprise perspective, comprising business, application, and infrastructure views. We derive the variability model from fragmentary material of existing ecosystems and a rigorous\u00a0\u2026", "num_citations": "10\n", "authors": ["774"]}
{"title": "On-the-fly computing meets IoT markets\u2014towards a reference architecture\n", "abstract": " The Internet of Things (IoT) connects the things of our everyday life and supports usin our common activities. Several markets for IoT services have been created. These markets enable IoT users to search and compose services in order to support an IoT activity. However, existing IoT markets like IFTTT (If This Then That) are not convenient for users with respect to service discovery and composition. The objective of On-the-fly (OTF) computing is to configure and provide software markets that fulfill individual users' wishes by the automatic on-the-fly composition of single services. The architecture framework of On-the-fly computing markets helps architects to systematically develop these systems in different domains. In this paper, we use our OTF architectural framework to examine the requirements of a reference architecture for IoT markets. Furthermore, we perform a comparison between the architecture of IFTTT as\u00a0\u2026", "num_citations": "9\n", "authors": ["774"]}
{"title": "Modeling and analyzing architectural diversity of open platforms\n", "abstract": " Nowadays, successful software companies attain enhanced business objectives by opening their platforms to thousands of third-party providers. When developing an open platform many architectural design decisions have to be made, which are driven from the companies\u2019 business objectives. The set of decisions results in an overwhelming design space of architectural variabilities. Until now, there are no architectural guidelines and tools that explicitly capture design variabilities of open platforms and their relation to business objectives. As a result, systematic knowledge is missing; platform providers have to fall back to ad-hoc decision-making; this bears consequences such as risks of failure and extra costs. In this paper, we present a pattern-driven approach called SecoArc to model diverse design decisions of open platforms and to analyze and compare alternative architectures with respect to\u00a0\u2026", "num_citations": "4\n", "authors": ["774"]}
{"title": "Design options of store-oriented software ecosystems: an investigation of business decisions\n", "abstract": " Nowadays companies like Apple create ecosystems of third-party providers and users around their software platforms. Often online stores like Apple App Store are created to directly market third-party solutions. We call such ecosystems store-oriented software ecosystems. While the architecture of these ecosystems is mainly derived from business decisions of their owners, ecosystems with greatly different architectural designs have been created. This diversity makes it challenging for future ecosystem providers to understand which architectural design is suitable to fulfill certain business decisions. In turn, opening a platform becomes risky while endangering intellectual property or scarifying quality of services. In this paper, we identify three main design options of store-oriented software ecosystems by classifying existing ecosystems based on similarities in their business decisions. We elaborate on the\u00a0\u2026", "num_citations": "3\n", "authors": ["774"]}
{"title": "Patterns of store-oriented software ecosystems: detection, classification, and analysis of design options\n", "abstract": " Software companies nowadays create ecosystems of users and third-party providers around their platforms. They often provide online stores so that the third-party developments can be exposed to users directly. The resulting ecosystems differ significantly from each other in their architectural designs because their providers differ in terms of business goals and contexts. Until now, this architectural diversity and rationale behind it are not well-understood. Therefore, it is not clear which software features contribute to ecosystem\u2019s success with respect to certain business goals and context. This hinders systematic creation of ecosystems in the future. Thus, decision-making becomes too risky; for future ecosystem providers, which may lead to creation of inefficient ecosystems that lack critical features, and for third-party providers to rely on ad-hoc choices while deciding on suitability of an ecosystem for their future career. In this paper, we introduce three design patterns for storeoriented software ecosystems by classifying the design decisions, business goals, and context of 111 store-oriented software ecosystems. Each design pattern provides an architectural solution to achieve a different business goal while supporting a different context. We discuss how the design patterns are applied together in order to achieve more business goals. Our work supports ecosystem and third-party providers by sharing practice-proven architectural solutions, helping them to take informed architectural decisions and reduce technical risks.", "num_citations": "3\n", "authors": ["774"]}
{"title": "On-the-fly computing\n", "abstract": " Das Enterprise Architecture Management stellt umfangreiche Methoden, Modelle und Frameworks f\u00fcr die Modellierung von Unternehmensarchitekturen zur Verf\u00fcgung. Die Entwicklung von Software und deren Integration in IT-Landschaften ist heutzutage zunehmend von Komplexit\u00e4t und Unsicherheit gepr\u00e4gt. Dieser Beitrag (Research-in-progress) m\u00f6chte ein neues Paradigma \u2013 das On-The-Fly Computing \u2013 vorschlagen, um diesen Herausforderungen zu begegnen, m\u00f6gliche L\u00f6sungsans\u00e4tze zu diskutieren sowie erste Ergebnisse eines Referenzmodells f\u00fcr individualisierte IT-Dienstleistungen in dynamischen Software-M\u00e4rkten dokumentieren.", "num_citations": "2\n", "authors": ["774"]}
{"title": "Architectural management of on-the-fly computing markets\n", "abstract": " Existing software markets like Google Play allow users to search among available Apps and select one based on the description provided for the App or based on its rating. Future software markets facilitate on-the-fly composition of such Apps based on users' individual wishes. Realizing such On-The-Fly Computing (OTF) markets requires support of sophisticated software features. In addition, suitable orchestration among such features needs to ensure well-alignment of business and IT aspects in case of run-time changes like market dynamics. However, all these introduce new architectural and management complexities, which are specific to such markets.", "num_citations": "2\n", "authors": ["774"]}