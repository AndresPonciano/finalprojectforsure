{"title": "The unified problem-solving method development language UPML\n", "abstract": " Problem-solving methods provide reusable architectures and components for implementing  the reasoning part of knowledge-based systems. The Unified Problem-Solving  Method Description Language (UPML) has been developed to describe and implement  such architectures and components to facilitate their semi-automatic reuse and adaptation.  In a nutshell, UPML is a framework for developing knowledge-intensive reasoning  systems based on libraries ofg eneric problem-solving components. The paper describes  the components and adapters, architectural constraints, development guidelines, and tools  provided by UPML. UPML is developed as part of the IBROW project, which provides  an Internet-based brokering service for reusing problem-solving methods.", "num_citations": "213\n", "authors": ["1954"]}
{"title": "Specifying knowledge-based systems with reusable components\n", "abstract": " . The paper introduces an approach for the specification and verification of knowledge-based systems combining conceptual and formal techniques. We identify four elements of the specification of a knowledge-based system: a task definition, a problem-solving method, a domain model, and an adapter that relates the other elements. We present abstract data types and a variant of dynamic logic as formal means to specify and verify these different elements. As a consequence of our conceptual model we can decompose the overall verification task of the knowledge-based systems into different proof obligations. Each proof obligation deals with a different aspect of the entire system. The use of the conceptual model in specification and verification improves understandability and reduces the effort for both activities. The modularization enables reuse of specifications and proofs. A knowledge-based system can be build by combing and adapting different components. 1 INTRODUCTION During the last...", "num_citations": "68\n", "authors": ["1954"]}
{"title": "Specification and verification of knowledge-based systems\n", "abstract": " The paper introduces a formal approach for the specification and verification of knowledge-based systems. We identify different elements of such a specification: a task definition, a problem-solving method, a domain model, an adapter, and assumptions that relate these elements. We present abstract data types and a variant of dynamic logic as formal means to specify these different elements. Based on our framework we can distinguish several verification tasks. In the paper, we discuss the application of the Karlsruhe Interactive Verifier (KIV) for this purpose. KIV was originally developed for the verification of procedural programs but it fits well for our approach. We illustrate the verification process with KIV and show how KIV can be used as an exploration tool that helps to detect assumptions necessary to close the gap between the task definition and the competence of a problemsolving method.", "num_citations": "57\n", "authors": ["1954"]}
{"title": "The component model of UPML in a nutshell\n", "abstract": " Problem-solving methods provide reusable architectures and components for implementing the reasoning part of knowledge-based systems. The Unified Problem-solving Method description Language UPML has been developed to describe such architectures and components to facilitate their semiautomatic reuse and adaptation. This paper sketches the components and connectors provided by UPML.", "num_citations": "41\n", "authors": ["1954"]}
{"title": "MLPM: Defining a semantics and axiomatization for specifying the reasoning process of knowledge-based systems\n", "abstract": " We investigate the formal specification of the dynamic reasoning process of knowledge-based systems. The main contributions of the paper are: defining a formal framework for describing the dynamic reasoning behaviour of knowledge-based systems which unifies existing approaches; defining a semantics for the specification of the dynamic reasoning behaviour of a knowledge-based system within the states as algebra setting that overcomes several shortcomings of the existing approaches; and providing for the first time an axiomatization and proof theory of specification languages for knowledge-based systems. We achieve this by developing the logical language MLPM (Modal Logic of Predicate Modification).", "num_citations": "39\n", "authors": ["1954"]}
{"title": "Reasoning about dynamic features in specification languages\n", "abstract": " Using algebras over some signature to model the notion of state is quite common in specification languages. Some specification formalisms, e.g. COLD and Evolving Algebras, also allow for the dynamic change of states. Two kinds of elementary procedures are used: creation (of a new object) and modification (of a function or predicate at some point).             In this paper we present and investigate MLCM (Modal Logic of Creation and Modification), a multimodal predicate logic for reasoning over programs built up from such procedures. MLCM deviates from traditional dynamic predicate logic in two respects: creation is added as a primitive program construct and assignment (to variables) is replaced by assignment to constants and parametrized assignment to function and predicate symbols.             We present a definition of syntax, semantics and axiomatisation of MLCM and establish completeness for the\u00a0\u2026", "num_citations": "37\n", "authors": ["1954"]}
{"title": "A formalization of evolving algebras\n", "abstract": " Evolving Algebras is a speci cation formalism developed by Y. Gurevich. It is applied in a number of cases, eg to de ne the semantics of programming languages and protocols. This paper presents a formal de nition of Evolving Algebras with a clear separation between syntax and semantics, leading (among other things) to an elaboration of the join operator. The relation with the formal speci cation language COLD is stressed.", "num_citations": "33\n", "authors": ["1954"]}
{"title": "Modal change logic (MCL): Specifying the reasoning of knowledge-based systems\n", "abstract": " We investigate the formal specification of the reasoning process of knowledge-based systems in this paper. We analyze the corresponding parts of the KADS specification languages KARL and (ML)2 and deduce some general requirements. The essense of these languages is that they integrate a declarative specification of inferences with control information. The languages differ in the way they achieve this integration and each of them has shortcomings. We propose a unifying semantical framework that integrates the core of the different solutions and overcomes their problems. We define a semantics and axiomatization with the Modal Change Logic (MCL). The main contribution of the paper is not to introduce yet another specification language. Instead we aim at four goals: (1) defining a framework for describing the dynamic reasoning behavior of knowledge-based systems which integrates existing approaches\u00a0\u2026", "num_citations": "28\n", "authors": ["1954"]}
{"title": "A software architecture for knowledge-based systems\n", "abstract": " The paper introduces a software architecture for the specification and verification of knowledge-based systems combining conceptual and formal techniques. Our focus is component-based specification enabling their reuse. We identify four elements of the specification of a knowledge-based system: a task definition, a problem-solving method, a domain model, and an adaptor. We present algebraic specifications and a variant of dynamic logic as formal means to specify and verify these different elements. As a consequence of our architecture we can decompose the overall specification and verification task of the knowledge-based systems into subtasks. We identify different subcomponents for specification and different proof obligations for verification. The use of the architecture in specification and verification improves understandability and reduces the effort for both activities. In addition, its decomposition and\u00a0\u2026", "num_citations": "26\n", "authors": ["1954"]}
{"title": "Formalization of a software architecture for embedded systems: a process algebra for SPLICE\n", "abstract": " SPLICE is an industrially developed and applied software architecture for large-scale distributed embedded systems. The key feature of SPLICE is asynchronous communication between processes. The characteristics of systems built with SPLICE include dynamic data distribution, fault-tolerance, and real-time performance. The objective of the work presented in this paper was to use a formal model to reason about the behaviour of SPLICE systems and to support the design process in system decomposition and refinement. We formalize SPLICE using a process algebra called SPLICE Process Algebra. This process algebra allows us to derive properties of the SPLICE architecture. From these properties a set of guidelines can be produced that aid in the development of SPLICE applications.", "num_citations": "17\n", "authors": ["1954"]}
{"title": "Algebraic proof assistants in HOL\n", "abstract": " We explore several ways to formalize the algebraic laws of CSP-like languages in HOL. The intent of the paper is to show how HOL can be tailored to acting as a proof assistant. The emphasis is therefore on the consequences of various choices to be made during the formalization for writing tactics. We end up with a proof assistant that allows a user to make steps of the granularity of an algebraic law. It is not the purpose of this paper to show in HOL that the algebraic laws of some CSP-like language are sound; the purpose is to show how HOL can be used to apply the algebraic laws and act as a rewrite system.", "num_citations": "13\n", "authors": ["1954"]}
{"title": "NORMAL-FORM IN A DELAY-INSENSITIVE ALGEBRA\n", "abstract": " A process algebra is given for specifying delay-insensitive processes. We show in two steps that expressions in this algebra have a normal form, as a consequence of which the algebra is complete. First, the number of operators in process expressions is reduced by a set of rewrite laws. The resulting expressions are in a so-called pre-normal form. Secondly, we introduce some additional laws to transform a process from its pre-normal form to its normal form.", "num_citations": "13\n", "authors": ["1954"]}
{"title": "Testing for highly distributed service-oriented systems using virtual environments\n", "abstract": " Performing testing while the system is running may potentially cause a pollution of the system with test-data, sending out the test data to the endusers or even result in additional costs by invoking services that cost money per invocation. Testing costs get even higher if we consider that deploying a new version of software to different environments requires high expertise of system engineers that usually handle this kind of work. Often, the problem is that some external service is simply not available or it is available for just limited time for testing. All of these issues could be avoided if a simulation environment, behaving in the very same way as the real system, is used. Nowadays, generation of this kind of simulation environments is very feasible and it is something that needs to be explored further.In this work we concentrate on how testing of web services is performed in highly distributed service-oriented systems using\u00a0\u2026", "num_citations": "9\n", "authors": ["1954"]}
{"title": "Formalizing anaesthesia: a case study in formal specification\n", "abstract": " We report on the formalization of knowledge for a support system in the field of anaesthesiology. It is a case study in the use of the formal specification method we are developing. The method consists of guidelines (using concepts from object-oriented design methods), language (AFSL, Almost Formal Specification Language) and tools (type-checker, graphical representation of signatures).", "num_citations": "9\n", "authors": ["1954"]}
{"title": "Formalizing Knowledge Domains:-Static and Dynamic Aspects\n", "abstract": " Copyright Other than for strictly personal use, it is not permitted to download or to forward/distribute the text or part of it without the consent of the author (s) and/or copyright holder (s), unless the work is under an open content license (like Creative Commons).", "num_citations": "8\n", "authors": ["1954"]}
{"title": "Policy-based scheduling of Cloud services\n", "abstract": " Worldwide accessibility of clouds brings great benefits by providing easy access to resources. However, scheduling cloud resources for utilization among multiple collaborating cloud users is still often executed manually. To address this problem, we developed a scheduling service for cloud middleware that guarantees optimal resource utilization in terms of a total number of used resources in a given interval based on user-defined policies. In the paper, we introduce the scheduling algorithm, describe its supporting system architecture and provide the evaluation that proves the feasibility of the developed solution. The provided scheduling algorithm takes into account dependencies between individual services, and can enforce common use of shared resources that lead to the optimal resource utilization. By assuring continuous schedule optimality, costs caused by unnecessary usage of additional cloud resources are minimized.", "num_citations": "7\n", "authors": ["1954"]}
{"title": "Formalisation for decision support in anaesthesiology\n", "abstract": " This paper reports on research for decision support for anaesthesiologists at the University Hospital in Groningen, the Netherlands. Based on Carola, an existing automated Operation documentation system, we designed a support environment that will assist in real-time diagnosis. The core of the work presented here consists of a knowledge base (containing anaesthesiological knowledge) and a diagnosis system. The knowledge base is specified in the logic-based formal specification language AFSL. This leads to a powerful and precise treatment of knowledge structuring and data abstraction.", "num_citations": "6\n", "authors": ["1954"]}
{"title": "The unified problem-solving method development language\n", "abstract": " The Unified Problem-Solving Method Development Language University of Amsterdam University of Amsterdam UvA Terms of use Contact UvA-DARE (Digital Academic Repository) Home Advanced Search Browse My selection Search UvA-DARE Author D. Fensel E. Motta VR Benjamins S. Decker M. Gaspari R. Groenboom W. Grosso MA Musen E. Plaza G. Schreiber R. Studer BJ Wielinga Year 1999 Title The Unified Problem-Solving Method Development Language Publisher Karlsruhe: University of Karlsruhe Document type Report Faculty Faculty of Social and Behavioural Sciences (FMG) Institute Psychology Research Institute (PsyRes) Language English Note Deliverable ESPRIT project 27169, IBROW3, nr. 1.1.1 Permalink https://hdl.handle.net/11245/1.162598 Disclaimer/Complaints regulations If you believe that digital publication of certain material infringes any of your rights or (privacy) interests, please let \u2026", "num_citations": "4\n", "authors": ["1954"]}
{"title": "A formal semantics for specifying the dynamic reasoning of knowledge-based systems\n", "abstract": " We study the KADS specification languages KARL and (ML) 2 in a states as algebras setting. The essence of these languages is that they integrate a declarative specification of inferences together with control information. Therefore, these languages can be used to specify the dynamic reasoning process of knowledge-based systems besides their pure input/output behavior. The departure of our discussion is the logic MLCM (Modal Logic of Creation and Modification) which is developed to reason about dynamic properties of the specification language COLD stemming from software engineering. We propose extensions to MLCM leading to the definition of MLCM++, and show that it is sufficient to express the inference steps of KADS-models. The two main contributions of the paper are: studying the dynamics of the KARL and (ML) 2, and proposing an extension of MLCM for reasoning about inferences.", "num_citations": "4\n", "authors": ["1954"]}
{"title": "Formalization of anesthesiology for decision support\n", "abstract": " This paper reports on research for decision support for anaesthesiologists at the University Hospital in Groningen, the Netherlands. Based on Carola, an existing automated operation documentation system, we design a support environment that will assist in real-time diagnosis. The core of the work presented here consists of a knowledge base (containing anaesthesiological knowledge) and a diagnosis system. The knowledge base is speci ed in the logic-based formal speci cation language AFSL. This leads to a powerful and precise treatment of knowledge structuring and data abstraction.", "num_citations": "3\n", "authors": ["1954"]}
{"title": "Methods for Testing Web Services\n", "abstract": " This paper will discuss software testing, and in particular testing of web services and Service Oriented Architecture (SOA). This topic will be covered from two perspectives: First, from the theory and the current testing needs for SOA and second, we will provide pointers and review practical problems that are not solved yet and would require extra research from universities and research institutes.", "num_citations": "2\n", "authors": ["1954"]}
{"title": "Using Advanced Code Analysis for Boosting Unit Test Creation\n", "abstract": " Unit testing is a popular testing technique, widespread in enterprise IT and embedded/safety-critical. For enterprise IT, unit testing is considered to be good practice and is frequently followed as an element of test-driven development. In the safety-critical world, there are many standards, such as ISO 26262, IEC 61508, and others, that either directly or indirectly mandate unit testing. Regardless the area of the application, unit testing is very time-consuming and teams are looking for strategies to optimize their efforts. This is especially true in the safety-critical space, where demonstration of test coverage is required for the certification. In this presentation, we share the results of our research regarding the use of advanced code analysis algorithms for augmenting the process of unit test creation. The discussion includes automatic discovery of inputs and responses from mocked components that maximize the code\u00a0\u2026", "num_citations": "1\n", "authors": ["1954"]}
{"title": "Securing Web Services\n", "abstract": " Web services security constitutes the technological and managerial procedures applied to the system to ensure the confidentiality, integrity, and availability of information that is exchanged by the Web service. This article explores security issues specific to Web services and illustrates the engineering and testing practices required to ensure security throughout the Web services development life cycle.", "num_citations": "1\n", "authors": ["1954"]}
{"title": "Reflections on the quality of open source software\n", "abstract": " Summary Proponents of Open Source software have long claimed that their code is of higher quality than the equivalent commercial software. Opponents of Open Source argue just the opposite: that Open Source software is inherently unreliable. Until now, there has been little independent, objective data available to support either view.On Feb 11, 2003 Reasoning published a study comparing the Linux TCP/IP stack to commercially developed TCP/IP stacks. This comparison showed that an active, mature Open Source project may have fewer defects than similar commercial projects (the study is available for download at URL http://www. reasoning. com/downloads/opensource. html).", "num_citations": "1\n", "authors": ["1954"]}
{"title": "A formal semantics and axiomatization for specifying the dynamics of knowledge-based systems\n", "abstract": " We study the KADS specification languages KARL and (ML) 2 in a states as algebras setting. The essence of these languages is that they integrate a declarative specification of inferences together with control information. Therefore, these languages can be used to specify the dynamic reasoning process of knowledge-based systems besides their pure input/output behavior. The departure of our discussion is the logic MLCM (Modal Logic of Creation and Modification) which is developed to reason about dynamic properties of the specification language COLD stemming from software engineering. We propose necessary extensions to MLCM leading to the definition of MLCM++, and show that it is sufficient to express the inference steps of KADS-models. The three main contributions of the paper are: defining a semantics for the specification of the dynamic reasoning behavior of a knowledge-based system within the states as algebra setting; proposing an extension of MLCM for integrating the specification of static and dynamic aspects of a system; and providing for the first time an axiomatization of specification languages for knowledgebased systems.", "num_citations": "1\n", "authors": ["1954"]}
{"title": "Formal specification and design of a simple real time kernel\n", "abstract": " This paper shows how we can use a logical formalism, a formal speci cation language, to specify parts of a real-time kernel. The formalism is based on rst order logic, without special features for real-time purposes.", "num_citations": "1\n", "authors": ["1954"]}