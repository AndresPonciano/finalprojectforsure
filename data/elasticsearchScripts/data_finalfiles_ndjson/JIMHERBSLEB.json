{"title": "Global software development\n", "abstract": " The last several decades have witnessed a steady, irreversible trend toward the globalization of business, and of software-intensive high-technology businesses in particular. Economic forces are relentlessly turning national markets into global markets and spawning new forms of competition and cooperation that reach across national boundaries. This change is having a profound impact not only on marketing and distribution but also on the way produces are conceived, designed, constructed, tested, and delivered to customers. The author considers how software development is increasingly a multisite, multicultural, globally distributed undertaking.", "num_citations": "1469\n", "authors": ["51"]}
{"title": "An empirical study of speed and communication in globally distributed software development\n", "abstract": " Global software development is rapidly becoming the norm for technology companies. Previous qualitative research suggests that distributed development may increase development cycle time for individual work items (modification requests). We use both data from the source code change management system and survey data to model the extent of delay in a distributed software development organization and explore several possible mechanisms for this delay. One key finding is that distributed work items appear to take about two and one-half times as long to complete as similar items where all the work is colocated. The data strongly suggest a mechanism for the delay, i.e., that distributed work items involve more people than comparable same-site work items, and the number of people involved is strongly related to the calendar time to complete a work item. We replicate the analysis of change data in a different\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "1276\n", "authors": ["51"]}
{"title": "Social coding in GitHub: transparency and collaboration in an open software repository\n", "abstract": " Social applications on the web let users track and follow the activities of a large number of others regardless of location or affiliation. There is a potential for this transparency to radically improve collaboration and learning in complex knowledge-based activities. Based on a series of in-depth interviews with central and peripheral GitHub users, we examined the value of transparency for large-scale distributed collaborations and communities of practice. We find that people make a surprisingly rich set of social inferences from the networked activity information in GitHub, such as inferring someone else's technical goals and vision when they edit code, or guessing which of several similar projects has the best chance of thriving in the long term. Users combine these inferences into effective strategies for coordinating work, advancing technical skills and managing their reputation.", "num_citations": "1110\n", "authors": ["51"]}
{"title": "Global software engineering: The future of socio-technical coordination\n", "abstract": " Globally-distributed projects are rapidly becoming the norm for large software systems, even as it becomes clear that global distribution of a project seriously impairs critical coordination mechanisms. In this paper, I describe a desired future for global development and the problems that stand in the way of achieving that vision. I review research and lay out research challenges in four critical areas: software architecture, eliciting and communicating requirements, environments and tools, and orchestrating global development. I conclude by noting the need for a systematic understanding of what drives the need to coordinate and effective mechanisms for bringing it about.", "num_citations": "865\n", "authors": ["51"]}
{"title": "Splitting the organization and integrating the code: Conway's law revisited\n", "abstract": " It is widely acknowledged that coordination of large scale software development is an extremely difficult and persistent problem. Since the structure of the code mirrors the structure of the organization, one might expect that splitting the organization across time zones, cultures, and (natural) languages would make it difficult to assemble the components. This paper presents a case study of what indeed turned out to be the most difficult part of a geographically distributed software project, ie, integration. Coordination problems were greatly exaggerated across sites, largely because of the breakdown of informal communication channels. The results imply that multi-site development can benefit to some extent ti-om stable plans, processes, and specifications. The inherently unpredictable aspects of projects, however, require communication channels that can be invoked spontaneously, by developers, as needed. These\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "638\n", "authors": ["51"]}
{"title": "Software quality and the capability maturity model\n", "abstract": " Engineering Institute (SEI) were busy putting together the set of ideas that was to become the Capability Maturity Model (CMM) for Software. 1 The CMM adopted the opposite of the quick-fix silver bullet philosophy. It was intended to be a coherent, ordered set of incremental improvements, all having experienced success in the field, packaged into a roadmap that showed how effective practices could be built on one another in a logical progression (see \u0393\u00c7\u00a3The Capability Maturity Model for Software\u0393\u00c7\u00a5 sidebar). Far from a quick fix, it was", "num_citations": "602\n", "authors": ["51"]}
{"title": "Distance, dependencies, and delay in a global collaboration\n", "abstract": " Collaborations over distance must contend with the loss of the rich, subtle interactions that co-located teams use to coordinate their work. Previous research has suggested that one consequence of this loss is that cross-site work will take longer than comparable single-site work. We use both survey data and data from the change management system to measure the extent of delay in a multi-site software development organization. We also measure site interdependence, differences in same-site and cross-site communication patterns, and analyze the relationship of these variables to delay. Our results show a significant relationship between delay in cross-site work and the degree to which remote colleagues are perceived to help out when workloads are heavy. This result is particularly troubling in light of the finding that workers generally believed they were as helpful to their remote colleagues as to their local\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "577\n", "authors": ["51"]}
{"title": "Expertise browser: a quantitative approach to identifying expertise\n", "abstract": " Finding relevant expertise is a critical need in collaborative software engineering, particularly in geographically distributed developments. We introduce a tool, called Expertise Browser (ExB), that uses data from change management systems to locate people with desired expertise. It uses a quantification of experience, and presents evidence to validate this quantification as a measure of expertise. The tool enables developers, for example, to easily distinguish someone who has worked only briefly in a particular area of the code from someone who has more extensive experience, and to locate people with broad expertise throughout large parts of the product, such as modules or even subsystems. In addition, it allows a user to discover expertise profiles for individuals or organizations. Data from a deployment of the tool in a large software development organization shows that newer, remote sites tend to use the tool\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "576\n", "authors": ["51"]}
{"title": "An empirical study of global software development: distance and speed\n", "abstract": " Global software development is rapidly becoming the norm for technology companies. Previous qualitative research suggests that multi-site development may increase the development cycle time. We use both survey data and data from the source code change management system to model the extent of delay in a multi-site software development organization, and explore several possible mechanisms for this delay. We also measure differences in same-site and cross-site communication patterns, and analyze the relationship of these variables to delay. Our results show that, compared to same-site work, cross-site work takes much longer and requires more people for work of equal size and complexity. We also report a strong relationship between delay in cross-site work and the degree to which remote colleagues are perceived to help out when workloads are heavy. We discuss the implications of our findings for\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "565\n", "authors": ["51"]}
{"title": "The geography of coordination: Dealing with distance in R&D work\n", "abstract": " Geographically distributed development creates new questions about how to coordinate multi-site work. In this paper, we present four methods product development organizations used to coordinate their work: functional areas of expertise, product structure, process steps, and customization. We describe the benefits and difficulties with each model. Finally, we discuss two difficulties that occur irrespective of the model used: consequences of unequal distribution of project mass, and finding expertise.", "num_citations": "547\n", "authors": ["51"]}
{"title": "Architectures, coordination, and distance: Conway's law and beyond\n", "abstract": " Geographically distributed development teams face extraordinary communication and coordination problems. The authors' case study clearly demonstrates how common but unanticipated events can stretch project communication to the breaking point. Project schedules can fall apart, particularly during integration. Modular design is necessary, but not sufficient to avoid this fate.", "num_citations": "536\n", "authors": ["51"]}
{"title": "Team knowledge and coordination in geographically distributed software development\n", "abstract": " Coordination is important in software development because it leads to benefits such as cost savings, shorter development cycles, and better-integrated products. Team cognition research suggests that members coordinate through team knowledge, but this perspective has only been investigated in real-time collocated tasks and we know little about which types of team knowledge best help coordination in the most geographically distributed software work. In this field study, we investigate the coordination needs of software teams, how team knowledge affects coordination, and how this effect is influenced by geographic dispersion. Our findings show that software teams have three distinct types of coordination needs\u0393\u00c7\u00f6technical, temporal, and process\u0393\u00c7\u00f6and that these needs vary with the members' role; geographic distance has a negative effect on coordination, but is mitigated by shared knowledge of the team and\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "534\n", "authors": ["51"]}
{"title": "Familiarity, complexity, and team performance in geographically distributed software development\n", "abstract": " While prior research has found that familiarity is beneficial to team performance, it is not clear whether different kinds of familiarity are more or less beneficial when the work has different types of complexity. In this paper, we theorize how task and team familiarity interact with task and team coordination complexity to influence team performance. We posit that task familiarity is more beneficial with more complex tasks (i.e., tasks that are larger or with more complex structures) and that team familiarity is more beneficial when team coordination is more difficult (i.e., for larger or geographically dispersed teams). Finally, we propose that the effects of task familiarity and team familiarity on team performance are complementary. Based on a field study of geographically distributed software teams, two of our hypotheses are disconfirmed: Our results show that the beneficial effects of task familiarity decline when tasks are more\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "491\n", "authors": ["51"]}
{"title": "Influence of social and technical factors for evaluating contribution in GitHub\n", "abstract": " Open source software is commonly portrayed as a meritocracy, where decisions are based solely on their technical merit. However, literature on open source suggests a complex social structure underlying the meritocracy. Social work environments such as GitHub make the relationships between users and between users and work artifacts transparent. This transparency enables developers to better use information such as technical value and social connections when making work decisions. We present a study on open source software contribution in GitHub that focuses on the task of evaluating pull requests, which are one of the primary methods for contributing code in GitHub. We analyzed the association of various technical and social measures with the likelihood of contribution acceptance. We found that project managers made use of information signaling both good technical contribution practices for a pull\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "379\n", "authors": ["51"]}
{"title": "Socio-technical congruence: a framework for assessing the impact of technical and work dependencies on software development productivity\n", "abstract": " The identification and management of work dependencies is a fundamental challenge in software development organizations. This paper argues that modularization, the traditional technique intended to reduce interdependencies among components of a system, has serious limitations in the context of software development. We build on the idea of congruence, proposed in our prior work, to examine the relationship between the structure of technical and work dependencies and the impact of dependencies on software development productivity. Our empirical evaluation of the congruence framework showed that when developers' coordination patterns are congruent with their coordination needs, the resolution time of modification requests was significantly reduced. Furthermore, our analysis highlights the importance of identifying the\" right\" set of technical dependencies that drive the coordination requirements\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "371\n", "authors": ["51"]}
{"title": "Introducing instant messaging and chat in the workplace\n", "abstract": " We report on our experiences of introducing an instant messaging and group chat application into geographically distributed workgroups. We describe a number of issues we encountered, including privacy concerns, individual versus group training, and focusing on teams or individuals. The perception of the tool's utility was a complex issue, depending both on users' views of the importance of informal communication, and their perceptions of the nature of cross-site communication issues. Finally, we conclude with a discussion of critical mass, which is related to the features each user actually uses. More generally, we encountered a dilemma that imposes serious challenges for user-centered design of groupware systems", "num_citations": "368\n", "authors": ["51"]}
{"title": "Global software development at siemens: experience from nine projects\n", "abstract": " We report on the experiences of Siemens Corporation in nine globally-distributed software development projects. These projects represent a range of collaboration models, from co-development to outsourcing of components to outsourcing the software for an entire project. We report experience and lessons in issues of project management, division of labor, ongoing coordination of technical work, and communication. We include lessons learned, and conclude the paper with suggestions about important open research issues in this area.", "num_citations": "345\n", "authors": ["51"]}
{"title": "What is chat doing in the workplace?\n", "abstract": " We report an empirical study of a synchronous messaging application with group-oriented functionality designed to support teams in the workplace. In particular, the tool supports group chat windows that allow members of a group to communicate with text that persists for about a day. We describe the experience of 6 globally-distributed work groups who used the tool over a period of 17 months. An analysis of use shows that the group functionality was used primarily for bursts of synchronous conversations and occasional asynchronous exchanges. The content was primarily focused on work tasks, and negotiating availability, with a smattering of non-work topics and humor. Nearly all groups were remarkably similar in the content of their group chat, although the research group chatted far more frequently than the others. We conclude with suggestions for future research, and a discussion of the place of team-oriented\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "340\n", "authors": ["51"]}
{"title": "Software dependencies, work dependencies, and their impact on failures\n", "abstract": " Prior research has shown that customer-reported software faults are often the result of violated dependencies that are not recognized by developers implementing software. Many types of dependencies and corresponding measures have been proposed to help address this problem. The objective of this research is to compare the relative performance of several of these dependency measures as they relate to customer-reported defects. Our analysis is based on data collected from two projects from two independent companies. Combined, our data set encompasses eight years of development activity involving 154 developers. The principal contribution of this study is the examination of the relative impact that syntactic, logical, and work dependencies have on the failure proneness of a software system. While all dependencies increase the fault proneness, the logical dependencies explained most of the variance in\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "322\n", "authors": ["51"]}
{"title": "After the Appraisal: A Systematic Survey of Process Improvement, its Benefits, and Factors that Influence Success.\n", "abstract": " Very little published evidence exists about the impact of the Capability Maturity ModeiSm CMM or CMM-based appraisals on subsequent software process improvement and organizational performance. A few credible case studies do exist, but it is uncertain how widely their results apply. We present evidence here from a much broader cross section of software organizations. Our results suggest that process maturity does indeed pay off in better product quality, ability to meet schedule commitments, and other indicators of organizational performance. The vast majority of survey respondents also report that their appraisals proved to be highly accurate and useful in guiding their subsequent process improvement efforts. Not all organizations have been equally successful, however, and improvement often takes longer and costs more than expected. We identify several factors, most of them under management control, that distinguish more successful from less successful organizations.Descriptors:", "num_citations": "309\n", "authors": ["51"]}
{"title": "Apparatus and method for use in a data/conference call system for automatically collecting participant information and providing all participants with that information for use\u252c\u00e1\u0393\u00c7\u00aa\n", "abstract": " A so-called \u0393\u00c7\u00a3OpenChannel\u0393\u00e4\u00f3\u0393\u00c7\u00a5 conference is established by separating particular participants of the conference from those participants that are actually currently active in the conference. This establishes a type of virtual conference, ie, meeting, that can be monitored by participants, ie, users, without requiring them to be actively a part of the conference call. These particular participants are in a so-called monitor mode. These participants can readily change their state from the monitor mode to a listen mode or active mode, as desired. One advantage of this invention is that a long-term conference of months or even years duration can be set up, only incurring a cost to participants when they are active participants in the conference call.", "num_citations": "272\n", "authors": ["51"]}
{"title": "Impression formation in online peer production: activity traces and personal profiles in github\n", "abstract": " In this paper we describe a qualitative investigation of impression formation in an online distributed software development community with social media functionality. We find that users in this setting seek out additional information about each other to explore the project space, inform future interactions, and understand the potential future value of a new person. They form impressions around other users' expertise based on history of activity across projects, and successful collaborations with key high status projects in the community. These impressions influence their receptivity to strangers' work contributions.", "num_citations": "267\n", "authors": ["51"]}
{"title": "Apparatus and method for use in collaboration services\n", "abstract": " A ConnectIcon View is employed to establish collaborative communications between a plurality of participants in a group. Specifically, it is a dynamic visual representation of the participants of a group being invited to communicate together with their presence information, lists of documents and URLs (Uniform Resource Locators) to be examined, and a set of mechanisms (email, chat, voice, and the like) to initiate communication, each of which can be billed to the originator or otherwise as desired. The available presence information allows a user to employ the best mode of communicating for the instant purpose, namely, either asynchronous communication or synchronous communication.", "num_citations": "263\n", "authors": ["51"]}
{"title": "A systematic survey of CMM experience and results\n", "abstract": " The capability maturity model (CMM) for software has become very influential as a basis for software process improvement (SPI). Most of the evidence to date showing the results of these efforts has consisted of case studies. We present a systematic survey of organizations that have undertaken CMM-based SPI to get more representative results. We found evidence that process maturity is in fact associated with better organizational performance, and that software process appraisals are viewed, in retrospect, as extremely valuable and accurate guides for the improvement effort. The path was not always smooth, however, and efforts generally took longer and cost more than expected. A number of factors that distinguished highly successful from unsuccessful efforts are identified. Most of these factors are under management control, suggesting that a number of specific management decisions are likely to have a major\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "254\n", "authors": ["51"]}
{"title": "Apparatus and method for use in portal service for a team utilizing collaboration services\n", "abstract": " A TeamPortal View is a dynamic visual representation of the members of a team who may be located at geographically distributed locations. The TeamPortal View provides a Web portal that (a) displays static team information,(b) provides a dynamic view of the team members presence and their current locations, which are collected automatically and up-dated in real-time and (c) allows contact to be made by members of the team using the Web interface to initiate email, chat sessions, person-to-person calls, conference calls or the like.", "num_citations": "244\n", "authors": ["51"]}
{"title": "Presence awareness in collaborative systems\n", "abstract": " Presence awareness initiatives are implemented in a collaborative system that enables a user to set presence awareness policies, and that provides a reasonably high assurance that the system will correctly implement those policies. Specifically, the collaborative presence awareness system is such as to enable users to specify complex presence awareness policies. The presence awareness system is also such as to have been verified by employing systematic state-space exploration tools to establish a high level of assurance that the presence awareness system has the capability to implement correctly, substantially all possible presence awareness policies. Further, in accordance with another aspect of the invention, the presence awareness policy specifications are modular relative to the rest of the presence awareness system, and can be modified without having to modify computational modules or user\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "230\n", "authors": ["51"]}
{"title": "Simplifying cyber foraging for mobile devices\n", "abstract": " Cyber foraging is the transient and opportunistic use of compute servers bymobile devices. The short market life of such devices makes rapid modification of applications for remote execution an important problem. We describe a solution that combines a\" little language\" for cyber foraging with an adaptive runtime system. We report results from a user study showing that even novice developers are able to successfully modify large, unfamiliar applications in just a few hours. We also show that the quality of novice-modified and expert-modified applications are comparable in most cases.", "num_citations": "208\n", "authors": ["51"]}
{"title": "Tesseract: Interactive visual exploration of socio-technical relationships in software development\n", "abstract": " Software developers have long known that project success requires a robust understanding of both technical and social linkages. However, research has largely considered these independently. Research on networks of technical artifacts focuses on techniques like code analysis or mining project archives. Social network analysis has been used to capture information about relations among people. Yet, each type of information is often far more useful when combined, as when the ldquogoodnessrdquo of social networks is judged by the patterns of dependencies in the technical artifacts. To bring such information together, we have developed Tesseract, an interactive exploratory environment that utilizes cross-linked displays to visualize the myriad relationships between artifacts, developers, bugs, and communications. We evaluated Tesseract by (1) demonstrating its feasibility with GNOME project data (2\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "206\n", "authors": ["51"]}
{"title": "Challenges of global software development\n", "abstract": " Reviews the problems, solutions and open issues in global software development (GSD), in which the software development activities are distributed across multiple sites. First, we introduce the reasons why GSD is becoming more and more prevalent. Then we outline the issues created or amplified by GSD and illustrate various effects it has on a software project. Finally, we summarize the literature on existing approaches to reduce the negative effects of GSD and list key open research questions.", "num_citations": "188\n", "authors": ["51"]}
{"title": "Shared mental models, familiarity, and coordination: A multi-method study of distributed software teams\n", "abstract": " Coordination is important in large-scale software development because of the many people involved and the complex dependencies present in software tasks. Even small improvements in productivity can lead to substantial cost savings and competitive advantage. But despite great technological advances in software engineering and collaboration tools in recent years, coordination in software development projects continues to be problematic. Traditional theories suggest that team members coordinate by programming their tasks and by communicating with each other, but more recent research also suggests that they coordinate through work familiarity, and team cognition mechanisms like shared mental models. This paper reports on the results of a multi-method research investigation of how shared mental models, work familiarity and geographic dispersion affect coordination in software teams. This research is\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "161\n", "authors": ["51"]}
{"title": "Improving API documentation usability with knowledge pushing\n", "abstract": " The documentation of API functions typically conveys detailed specifications for the benefit of interested readers. In some cases, however, it also contains usage directives, such as rules or caveats, of which authors of invoking code must be made aware to prevent errors and inefficiencies. There is a risk that these directives may be ldquolostrdquo within the verbose text, or that the text would not be read because there are so many invoked functions. To address these concerns for Java, an Eclipse plug-in named eMoose decorates method invocations whose targets have associated directives. Our goal is to lead readers to investigate further, which we aid by highlighting the tagged directives in the JavaDoc hover. We present a lab study that demonstrates the directive awareness problem in traditional documentation use and the potential benefits of our approach.", "num_citations": "151\n", "authors": ["51"]}
{"title": "How to break an API: cost negotiation and community values in three software ecosystems\n", "abstract": " Change introduces conflict into software ecosystems: breaking changes may ripple through the ecosystem and trigger rework for users of a package, but often developers can invest additional effort or accept opportunity costs to alleviate or delay downstream costs. We performed a multiple case study of three software ecosystems with different tooling and philosophies toward change, Eclipse, R/CRAN, and Node. js/npm, to understand how developers make decisions about change and change-related costs and what practices, tooling, and policies are used. We found that all three ecosystems differ substantially in their practices and expectations toward change and that those differences can be explained largely by different community values in each ecosystem. Our results illustrate that there is a large design space in how to build an ecosystem, its policies and its supporting infrastructure; and there is value in\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "147\n", "authors": ["51"]}
{"title": "Coordination breakdowns and their impact on development productivity and software failures\n", "abstract": " The success of software development projects depends on carefully coordinating the effort of many individuals across the multiple stages of the development process. In software engineering, modularization is the traditional technique intended to reduce the interdependencies among modules that constitute a system. Reducing technical dependencies, the theory argues, results in a reduction of work dependencies between teams developing interdependent modules. Although that research stream has been quite influential, it considers a static view of the problem of coordination in engineering activities. Building on a dynamic view of coordination, we studied the relationship between socio-technical congruence and software quality and development productivity. In order to investigate the generality of our findings, our analyses were performed on two large-scale projects from two companies with distinct\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "145\n", "authors": ["51"]}
{"title": "Formulation and preliminary test of an empirical theory of coordination in software engineering\n", "abstract": " Motivated by evidence that coordination and dependencies among engineering decisions in a software project are key to better understanding and better methods of software creation, we set out to create empirically testable theory to characterize and make predictions about coordination of engineering decisions. We demonstrate that our theory is capable of expressing some of the main ideas about coordination in software engineering, such as Conway's law and the effects of information hiding in modular design. We then used software project data to create measures and test two hypotheses derived from our theory. Our results provide preliminary support for our formulations.", "num_citations": "145\n", "authors": ["51"]}
{"title": "How to hackathon: Socio-technical tradeoffs in brief, intensive collocation\n", "abstract": " Hackathons are events where people who are not normally collocated converge for a few days to write code together. Hackathons, it seems, are everywhere. We know that long-term collocation helps advance technical work and facilitate enduring interpersonal relationships, but can similar benefits come from brief, hackathon-style collocation? How do participants spend their time preparing, working face-to-face, and following through these brief encounters? Do the activities participants select suggest a tradeoff between the social and technical benefits of collocation? We present results from a multiple-case study that suggest the way that hackathon-style collocation advances technical work varies across technical domain, community structure, and expertise of participants. Building social ties, in contrast, seems relatively constant across hackathons. Results from different hackathon team formation strategies\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "142\n", "authors": ["51"]}
{"title": "Empirical evaluation of defect projection models for widely-deployed production software systems\n", "abstract": " Defect-occurrence projection is necessary for the development of methods to mitigate the risks of software defect occurrences. In this paper, we examine user-reported software defect-occurrence patterns across twenty-two releases of four widely-deployed, business-critical, production, software systems: a commercial operating system, a commercial middleware system, an open source operating system (OpenBSD), and an open source middleware system (Tomcat). We evaluate the suitability of common defect-occurrence models by first assessing the match between characteristics of widely-deployed production software systems and model structures. We then evaluate how well the models fit real world data. We find that the Weibull model is flexible enough to capture defect-occurrence behavior across a wide range of systems. It provides the best model fit in 16 out of the 22 releases. We then evaluate the ability of\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "136\n", "authors": ["51"]}
{"title": "Communication networks in geographically distributed software development\n", "abstract": " In this paper, we seek to shed light on how communication networks in geographically distributed projects evolve in order to address the limits of the modular design strategy. We collected data from a geographically distributed software development project covering 39 months of activity. Our analysis showed that over time a group of developers emerge as the liaisons between formal teams and geographical locations. In addition to handling the communication and coordination load across teams and locations, those engineers contributed the most to the development effort.", "num_citations": "132\n", "authors": ["51"]}
{"title": "Scientific software production: incentives and collaboration\n", "abstract": " Software plays an increasingly critical role in science, including data analysis, simulations, and managing workflows. Unlike other technologies supporting science, software can be copied and distributed at essentially no cost, potentially opening the door to unprecedented levels of sharing and collaborative innovation. Yet we do not have a clear picture of how software development for science fits into the day-to-day practice of science, or how well the methods and incentives of its production facilitate realization of this potential. We report the results of a multiple-case study of software development in three fields: high energy physics, structural biology, and microbiology. In each case, we identify a typical publication, and use qualitative methods to explore the production of the software used in the science represented by the publication. We identify several different production systems, characterized primarily by\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "127\n", "authors": ["51"]}
{"title": "Characterizing the sequential structure of interactive behaviors through statistical and grammatical techniques\n", "abstract": " Statistical and grammatical techniques are reviewed as an integrated approach to exploratory sequential data analysis (ESDA) for categorical data. The first step is the identification and validation of the categories to be analyzed. The main statistical techniques discussed are log-linear modeling and lag sequential analysis. These methods allow for the statistical evaluation of a wide range of general and specific hypotheses about sequential structure. Grammatical techniques based on definite-clause grammars are described and illustrated, and the complex issue of measuring the goodness of fit of a set of patterns is discussed. Throughout the article, examples from our own research illustrate how the various techniques are used, especially in concert, while carrying out ESDA. In Section 6, several other human-computer interaction and computer-supported cooperative work applications of these techniques are\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "127\n", "authors": ["51"]}
{"title": "Modelling the likelihood of software process improvement: An exploratory study\n", "abstract": " Software process assessments have become big business worldwide. They can be a powerful tool for initiating and sustaining software process improvement (SPI). However, SPI programs sometimes fail. Moreover there still are very few systematic empirical investigations about the conditions under which SPI initiatives vary in their outcomes. In this paper we present the results of a study of factors that influence the success of SPI. The data come from a sample survey of organizations that have performed assessments based on the capability maturity model for software, and was conducted from 1 to 3 years after the assessments (sufficient time had passed for changes to have taken place). The results consist of a multivariate model of the conditions (e.g., how the improvement efforts are organized and funded) that can explain the successes and failures of SPI efforts. The model is constructed using a\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "111\n", "authors": ["51"]}
{"title": "Object-oriented analysis and design in software project teams\n", "abstract": " Software development poses enormous cognitive, organizational, and managerial challenges. In this article, we focus on two of the most formidable of these challenges and on the promise of object-oriented (00) technology for addressing them. In particular, we analyze the claims made about 00 design (OOD) and (a) dissemination of domain knowledge and (b) communication and coordination. In order to address the validity of these claims, we conducted an in-depth observational study of OOD in an industrial setting as well as a series of interviews with experienced OOD practitioners. Compared to similar projects using traditional methods, our study found evidence in the OOD project for a reduced need for clarification in design discussions; differences in participation, in how meeting time is spent, and in the sequential order of design discussions; and a much greater tendency to ask why questions. We discuss the\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "110\n", "authors": ["51"]}
{"title": "Configuring global software teams: a multi-company analysis of project productivity, quality, and profits\n", "abstract": " In this paper, we examined the impact of project-level configurational choices of globally distributed software teams on project productivity, quality, and profits. Our analysis used data from 362 projects of four different firms. These projects spanned a wide range of programming languages, application domain, process choices, and development sites spread over 15 countries and 5 continents. Our analysis revealed fundamental tradeoffs in choosing configurational choices that are optimized for productivity, quality, and/or profits. In particular, achieving higher levels of productivity and quality require diametrically opposed configurational choices. In addition, creating imbalances in the expertise and personnel distribution of project teams significantly helps increase profit margins. However, a profit-oriented imbalance could also significantly affect productivity and/or quality outcomes. Analyzing these complex tradeoffs\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "108\n", "authors": ["51"]}
{"title": "Experiences and results from initiating field defect prediction and product test prioritization efforts at ABB Inc.\n", "abstract": " Quantitatively-based risk management can reduce the risks associated with field defects for both software producers and software consumers. In this paper, we report experiences and results from initiating risk-management activities at a large systems development organization. The initiated activities aim to improve product testing (system/integration testing), to improve maintenance resource allocation, and to plan for future process improvements. The experiences we report address practical issues not commonly addressed in research studies: how to select an appropriate modeling method for product testing prioritization and process improvement planning, how to evaluate accuracy of predictions across multiple releases in time, and how to conduct analysis with incomplete information. In addition, we report initial empirical results for two systems with 13 and 15 releases. We present prioritization of configurations\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "106\n", "authors": ["51"]}
{"title": "Supporting online problem-solving communities with the semantic web\n", "abstract": " The Web plays a critical role in hosting Web communities, their content and interactions. A prime example is the open source software (OSS) community, whose members, including software developers and users, interact almost exclusively over the Web, constantly generating, sharing and refining content in the form of software code through active interaction over the Web on code design and bug resolution processes. The Semantic Web is an envisaged extension of the current Web, in which content is given a well-defined meaning, through the specification of metadata and ontologies, increasing the utility of the content and enabling information from heterogeneous sources to be integrated. We developed a prototype Semantic Web system for OSS communities, Dhruv. Dhruv provides an enhanced semantic interface to bug resolution messages and recommends related software objects and artifacts. Dhruv uses\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "106\n", "authors": ["51"]}
{"title": "Design considerations for online deliberation systems\n", "abstract": " Online deliberation enables structured, topical discussion about particular questions or concepts. A number of Web-based deliberation systems have been independently introduced in recent years, and reported on as single-point examples. This article reviews several of these systems, focusing on the design principles behind them and how they worked out. From this literature, we distill another iteration of design considerations that can be used to design online deliberation systems to \u0393\u00c7\u00a3inform the debate.\u0393\u00c7\u00a5 These considerations focus on the mutually reinforcing goals of attracting contributions, navigating through content, improving usability, focusing on quality content, and promoting wide-scale tool adoption.", "num_citations": "103\n", "authors": ["51"]}
{"title": "Notation and representation in collaborative object-oriented design: an observational study\n", "abstract": " Software designers in the object-oriented paradigm can make use of modeling tools and standard notations such as UML. Nevertheless, casual observations from collocated design collaborations suggest that teams tend to use physical mediums to sketch a plethora of informal diagrams in varied representations that often diverge from UML. To better understand such collaborations and support them with tools, we need to understand the origins, roles, uses, and implications of these alternate representations. To this end we conducted observational studies of collaborative design exercises, in which we focused on representation use. Our primary finding is that teams intentionally improviserepresentations and organize design information in responseto ad-hoc needs, which arise from the evolution of the design, and which are difficult to meet with fixed standard notations. This behavior incurs orientation and\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "86\n", "authors": ["51"]}
{"title": "Leveraging transparency\n", "abstract": " A new generation of development environments takes a radical approach to communication and coordination by fusing social networking functionality with flexible, distributed version control. Through these transparent work environments, people, repositories, development activities, and their histories are immediately and easily visible to all users. Developers quickly acquire the skill to interpret this rich information to find useful resources, connect with people, solve technical problems, and enhance their learning opportunities. This article presents the results of a qualitative study of users of one such environment, GitHub. It describes how transparency helps developers on GitHub manage their projects, handle dependencies more effectively, reduce communication needs, and figure out what requires their attention. Although transparency is not a silver bullet, the approach shows great promise for enhancing\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "85\n", "authors": ["51"]}
{"title": "A case study of a corporate open source development model\n", "abstract": " Open source practices and tools have proven to be highly effective for overcoming the many problems of geographically distributed software development. We know relatively little, however, about the range of settings in which they work. In particular, can corporations use the open source development model effectively for software projects inside the corporate domain? Or are these tools and practices incompatible with development environments, management practices, and market-driven schedule and feature decisions typical of a commercial software house? We present a case study of open source software development methodology adopted by a significant commercial software project in the telecommunications domain. We extract a number of lessons learned from the experience, and identify open research questions.", "num_citations": "77\n", "authors": ["51"]}
{"title": "The structure of activity during design meetings\n", "abstract": " The development of schemes to support design, whether behavioral methods or new technologies like groupware, should be based on detailed knowledge about how design occurs. Such data can be used to suggest what kinds of tools people might need as well as to provide a baseline for evaluating the effects of schemes for improvement. We present details of how real groups work in early software design", "num_citations": "76\n", "authors": ["51"]}
{"title": "Factors leading to integration failures in global feature-oriented development: an empirical analysis\n", "abstract": " Feature-driven software development is a novel approach that has grown in popularity over the past decade. Researchers and practitioners alike have argued that numerous benefits could be garnered from adopting a feature-driven development approach. However, those persuasive arguments have not been matched with supporting empirical evidence. Moreover, developing software systems around features involves new technical and organizational elements that could have significant implications for outcomes such as software quality. This paper presents an empirical analysis of a large-scale project that implemented 1195 features in a software system. We examined the impact that technical attributes of product features, attributes of the feature teams and crossfeature interactions have on software integration failures. Our results show that technical factors such as the nature of component dependencies and\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "72\n", "authors": ["51"]}
{"title": "Architecting in software ecosystems: interface translucence as an enabler for scalable collaboration\n", "abstract": " Software ecosystems are emerging as an alternative approach for the development of complex software systems. The potentially transformational benefits of software ecosystems stems, primarily, from two basic principles that software ecosystems have embraced: transparency, a pillar in open source development, and modular system design. Despite the benefits associated with transparency and modularity, there are also important challenges that deserve attention. In this paper, we introduce the concept of interface translucence as an architectural mechanism that seeks to overcome challenges faced by transparency and modular system design. Interface translucence leverages the important technical role that interfaces play in software architectures to bridge the technical and socio-organizational dimensions of software development in ecosystems. We present an application of the concept of interface\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "71\n", "authors": ["51"]}
{"title": "Crowd development\n", "abstract": " Crowd development is a development process designed for transient workers of varying skill. Work is organized into microtasks, which are short, self-descriptive, and modular. Microtasks recursively spawn microtasks and are matched to workers, who accrue points reflecting value created. Crowd development might help to reduce time to market and software development costs, increase programmer productivity, and make programming more fun.", "num_citations": "69\n", "authors": ["51"]}
{"title": "Preserving knowledge in design projects: What designers need to know\n", "abstract": " In order to inform the design of technology support and new procedural methods for software design, we analyzed the content of real design meetings in tlmx organizations, focusing in particular on the questions the designers ask of each other. We found that most questions concerned the project requirements, particularly what the software was supposed to do and, somewhat less frequently, scenarios of use. Questions about functions to be performed by software components and how these functions were to be realized were also fairly frequent. Rationales for design decisions were seldom asked about. The implications of this research for design tools and methods are discussed.", "num_citations": "69\n", "authors": ["51"]}
{"title": "Collaboration in software engineering projects: A theory of coordination\n", "abstract": " Coordination of engineering decisions is a central concern of software engineering. We present a theory in which coordination of engineering decisions is modeled as a distributed constraint satisfaction problem (DCSP). We derive six hypotheses, predicting how the distribution of decisions over developers and the density of constraints among decisions will affect development time, probability that a file contains a field defect, and developer productivity. We test these hypotheses using data from a commercial project. We find support for all hypotheses predicting detrimental effects from poor distribution of decisions over developers. The effects of constraint density were mixed, showing that dense constraints slowed development but did not significantly affect productivity. Dense data dependencies increased the chances that a file contained a field defect, but, very surprisingly, dense call dependencies significantly lowered the chances that a file contained a field defect. We discuss the implications of these findings.", "num_citations": "59\n", "authors": ["51"]}
{"title": "Collaboration in global software projects at siemens: An experience report\n", "abstract": " As a globally operating company with about 30,000 software engineers worldwide, Siemens has accumulated a wide variety of experiences in global development. Many individuals and organizations have adjusted their practices to deal with the challenges related to the geographic distribution of the development effort. From a corporate perspective, Siemens has accumulated a rich base of knowledge about global development and how to approach it successfully. The Siemens software initiative - a company-wide improvement program for software development at Siemens - has worked on collecting this widely-distributed knowledge and synthesizing it in a form accessible to the wider software development community. In this paper, the approach as well as key learnings in people and communication-related aspects of collaboration are summarized.", "num_citations": "57\n", "authors": ["51"]}
{"title": "Incentives and integration in scientific software production\n", "abstract": " Science policy makers are looking for approaches to increase the extent of collaboration in the production of scientific software, looking to open collaborations in open source software for inspiration. We examine the software ecosystem surrounding BLAST, a key bioinformatics tool, identifying outside improvements and interviewing their authors. We find that academic credit is a powerful motivator for the production and revealing of improvements. Yet surprisingly, we also find that improvements motivated by academic credit are less likely to be integrated than those with other motivations, including financial gain. We argue that this is because integration makes it harder to see who has contributed what and thereby undermines the ability of reputation to function as a reward for collaboration. We consider how open source avoids these issues and conclude with policy approaches to promoting wider collaboration by\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "56\n", "authors": ["51"]}
{"title": "Finding predictors of field defects for open source software systems in commonly available data sources: A case study of openbsd\n", "abstract": " Open source software systems are important components of many business software applications. Field defect predictions for open source software systems may allow organizations to make informed decisions regarding open source software components. In this paper, we remotely measure and analyze predictors (metrics available before release) mined from established data sources (the code repository and the request tracking system) as well as a novel source of data (mailing list archives) for nine releases of OpenBSD. First, we attempt to predict field defects by extending a software reliability model fitted to development defects. We find this approach to be infeasible, which motivates examining metrics-based field defect prediction. Then, we evaluate 139 predictors using established statistical methods: Kendall's rank correlation, Pearson's rank correlation, and forward AIC model selection. The metrics we\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "55\n", "authors": ["51"]}
{"title": "Communication patterns in geographically distributed software development and engineers' contributions to the development effort\n", "abstract": " This study seeks to shed light on how communication patterns in geographically distributed software development (GDSD) projects evolve over time and how they relate to developers' contributions to the development effort. Data from two GDSD projects from two distinct companies were collected. The analysis showed that the definition of formal roles had an important impact on patterns of communication across development locations. In one project a group of developers emerged over time as the liaisons between geographical locations. In addition to handling the communication and coordination load across locations, those same engineers contributed the most to the development effort. On the other hand, in the second project, communication across site was formalized and the developers involved in the cross site communication and coordination activities were not as productive.", "num_citations": "54\n", "authors": ["51"]}
{"title": "Managing a corporate open source software asset\n", "abstract": " Introduction We define corporate open source (COS) as applying the precepts and methodologies prevalent in the open source development community for creating industrial-strength software projects in a corporation for internal use. It may seem that open source style development - using informal processes, voluntary assignment to tasks, and having few financial incentives - may not be a good match for commercial environments. Our ongoing work, however, demonstrates that under the right circumstances, corporations can benefit from open source development techniques. We present two approaches to managing COS projects, and expand in detail on one of them. Our results indicate that open source approaches require significant adaptation to succeed in commercial settings. In particular, they require substantial support from business divisions within a corporation to successfully leverage the shared asset\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "53\n", "authors": ["51"]}
{"title": "A case study of open source tools and practices in a commercial setting\n", "abstract": " Commercially, many in the industry are using products based on Open Source. What have been missing are studies on if the commercial industry benefits from developing software following the open source development model. We present a case study that examines this issue by applying the concepts of the open source software development methodology to creating industrial-strength software. We conclude with lessons learned and open research questions.", "num_citations": "53\n", "authors": ["51"]}
{"title": "Work-to-rule: the emergence of algorithmic governance in Wikipedia\n", "abstract": " Research has shown the importance of a functioning governance system for the success of peer production communities. It particularly highlights the role of human coordination and communication within the governance regime. In this article, we extend this line of research by differentiating two categories of governance mechanisms. The first category is based primarily on communication, in which social norms emerge that are often formalized by written rules and guidelines. The second category refers to the technical infrastructure that enables users to access artifacts, and that allows the community to communicate and coordinate their collective actions to create those artifacts. We collected qualitative and quantitative data from Wikipedia in order to show how a community's consensus gradually converts social mechanisms into algorithmic mechanisms. In detail, we analyze algorithmic governance mechanisms in\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "52\n", "authors": ["51"]}
{"title": "Forecasting field defect rates using a combined time-based and metrics-based approach: a case study of OpenBSD\n", "abstract": " Open source software systems are critical infrastructure for many applications; however, little has been precisely measured about their quality. Forecasting the field defect-occurrence rate over the entire lifespan of a release before deployment for open source software systems may enable informed decision-making. In this paper, we present an empirical case study often releases of OpenBSD. We use the novel approach of predicting model parameters of software reliability growth models (SRGMs) using metrics-based modeling methods. We consider three SRGMs, seven metrics-based prediction methods, and two different sets of predictors. Our results show that accurate field defect-occurrence rate forecasts are possible for OpenBSD, as measured by the Theil forecasting statistic. We identify the SRGM that produces the most accurate forecasts and subjectively determine the preferred metrics-based prediction\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "51\n", "authors": ["51"]}
{"title": "Deciding what to design: Closing a gap in software engineering education\n", "abstract": " Software has jumped \u0393\u00c7\u00a3out of the box\u0393\u00c7\u00a5 \u0393\u00c7\u00f4 it controls critical systems, pervades business and commerce, and infuses entertainment, communication, and other everyday activities. These applications are constrained not only by traditional capability and performance considerations but also by economic, business, market and policy issues and the context of intended use. The diver sity of applications requires adaptability in responding to client needs, and the diversity of clients and contexts requires the ability to discriminate among crite ria for success. As a result, software designers must also get out of their boxes: in addition to mastering classical software development skills, they must master the contextual issues that discriminate good solutions from merely competent ones. Current software engineering education, however, remains largely \u0393\u00c7\u00a3in the box\u0393\u00c7\u00a5: it neglects the rich fabric of issues that lie between the\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "51\n", "authors": ["51"]}
{"title": "Social media and success in open source projects\n", "abstract": " Social media are being integrated into work environments. They have the potential to provide essential context and awareness, and increase work performance as a result. However, the specific effects of social media that impact productivity are not well understood. We perform a quantitative analysis of project success of over 5,000 open source software projects hosted on GitHub, a website that provides extensive social media functionality. Adapted from the open source literature, we develop two measures of project success, Developer Attention and Work Contribution. We find that projects with highly socially connected developers are not necessarily the most active or popular projects. Oddly, projects with a high level of developer multitasking, ie, splitting effort equally across multiple projects, tend to receive less Developer Attention, but greater Work Contribution. Success on both measures is strongly positively\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "50\n", "authors": ["51"]}
{"title": "Understanding the scientific software ecosystem and its impact: Current and future measures\n", "abstract": " Software is increasingly important to the scientific enterprise, and science-funding agencies are increasingly funding software work. Accordingly, many different participants need insight into how to understand the relationship between software, its development, its use, and its scientific impact. In this article, we draw on interviews and participant observation to describe the information needs of domain scientists, software component producers, infrastructure providers, and ecosystem stewards, including science funders. We provide a framework by which to categorize different types of measures and their relationships as they reach around from funding, development, scientific use, and through to scientific impact. We use this framework to organize a presentation of existing measures and techniques, and to identify areas in which techniques are either not widespread, or are entirely missing. We conclude with\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "47\n", "authors": ["51"]}
{"title": "Designing corporate hackathons with a purpose: the future of software development\n", "abstract": " Based on our empirical studies of 10 hackathons held by scientific communities, a corporation, and universities as well as the review of published literature, we discuss that hackathons can be organized around goals such as enriching social networks, facilitating collaborative learning, and workforce development. We also discuss design choices that can scaffold the organization of hackathons and their tradeoffs. Design choices include identifying a suitable mixture of attendee skills, the selection process for projects and teams, and whether to hold a competitive or collaborative event. Hackathons can achieve multiple goals if designed carefully.", "num_citations": "46\n", "authors": ["51"]}
{"title": "A coordination risk analysis method for multi-site projects: Experience report\n", "abstract": " It has been widely recognized that coordination amongst the people involved in developing a software intensive system is required for successful completion. Many projects, particularly those with team members separated by geographic distance, have an impeded ability to coordinate amongst some project members, which may cause a mismatch between the need of the project to coordinate and the ability to coordinate resulting in coordination break downs. This paper presents a coordination risk analysis method for determining the significant coordination mismatches before they become an issue and experiences applying this method to geographically distributed projects.", "num_citations": "46\n", "authors": ["51"]}
{"title": "Conceptual simplicity meets organizational complexity: case study of a corporate metrics program\n", "abstract": " A corporate-wide metrics program faces enormous and poorly understood challenges as its implementation spreads out from the centralized planning body across many organizational boundaries into the sites where the data collection actually occurs. This paper presents a case study of the implementation of one corporate-wide program, focusing particularly on the unexpected difficulties of collecting a small number of straightforward metrics. Several mechanisms causing these difficulties are identified, including attenuated communication across organizational boundaries, inertia created by existing data collection systems, and the perceptions, expectations, and fears about how the data will be used. We describe how these factors influence the interpretation of the definitions of the measurements and influence the degree of conformance that is actually achieved. We conclude with lessons learned about both\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "46\n", "authors": ["51"]}
{"title": "Why not improve coordination in distributed software development by stealing good ideas from open source\n", "abstract": " \u0393\u00c7\u00f3 Work is not assigned; individuals choose what work they will do. The choices are constrained, however, by various motivations that are not fully understood. For example, it can be assumed that developers try to maximize the chance that their code will be included in a release, and will enhance their reputation.", "num_citations": "44\n", "authors": ["51"]}
{"title": "Designing as if trust mattered\n", "abstract": " Historically, builders of CSCW tools have not focused on the creation of trust among users as a critical design goal. Yet, high levels of trust produce a number of benefits, including reduced coordination and communication costs. These benefits are particularly salient and desirable for geographically distributed workers. Therefore, to the extent that support for geographically distributed work is a key CSCW goal, CSCW tools should include features that enhance trust. This paper draws on the experience of a geographically distributed organization to identify aspects of long distance relationships associated with increased trust. Survey data collected within the organization showed that non-work interaction was positively correlated with trust to the same degree as more predictable factors, such as personal familiarity with distant sites and level of overarching shared group identity. In addition, interactive communication media had an unexpectedly positive relationship to non-work interaction, compared to less interactive media, which were negatively related. We conclude with a discussion of how CSCW tools can use these findings to improve production and maintenance of trust in geographically distributed organizations.", "num_citations": "44\n", "authors": ["51"]}
{"title": "Challenging licensure and certification.\n", "abstract": " In order to clarify the legal context in which the controversy over the regulation of professional psychology is embedded, we review the various legal theories that have been or might be used to challenge licensure and certification statutes in the courts. An analysis of the relevant cases and statutes indicates that many of the concerns most frequently expressed by psychologists (eg, the validity and the possible discriminatory effects of the Examination for the Professional Practice of Psychology) are probably not legally vulnerable, whereas other requirements (eg, residency requirements, oral examinations) are potential sources of major legal problems. We also hope our analysis will help to focus attention on legally relevant empirical questions. Recommendations are offered on how licensure statutes should be drafted in order to avoid legal difficulties.", "num_citations": "43\n", "authors": ["51"]}
{"title": "Measuring similarity similarly: Lda and human perception\n", "abstract": " Several intelligent technologies designed to improve navigability in and digestibility of text corpora use topic modeling such as the state-of-the-art Latent Dirichlet Allocation (LDA). This model and variants on it provide lower-dimensional document representations used in visualizations and in computing similarity between documents. This article contributes a method for validating such algorithms against human perceptions of similarity, especially applicable to contexts in which the algorithm is intended to support navigability between similar documents via dynamically generated hyperlinks. Such validation enables researchers to ground their methods in context of intended use instead of relying on assumptions of fit. In addition to the methodology, this article presents the results of an evaluation using a corpus of short documents and the LDA algorithm. We also present some analysis of potential causes of\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "41\n", "authors": ["51"]}
{"title": "Empirical studies of software process assessment methods\n", "abstract": " There are now many methods for assessing the maturity and capabilities of software engineering organizations. Assessment scores are being used in making the contract award decision by the US Navy [Ru93] and Air Force [SK95], as well as in commercial organizations [MC96]. Furthermore, conformance to process standards such as ISO 9001, as determined during an audit, is a necessity for doing business in many European countries. Software process assessments are also an essential element of the self-improvement cycle for many organizations (eg, see [Ba96][Dy95]).There has been a relative dearth of empirical investigations of the core premises of most contemporary assessment methods and their underlying models. Software organizations were being required and/or pressured to conform to certain standards (eg, to be at Level 3 on the CMM) without adequate empirical evidence supporting the assumptions made by these standards. At least partly because of this, a certain amount of skepticisim and uncertainty exists about the accuracy and usefulness of software process assessments, and improvements based on them (eg, see [BM91][Ba94][Ba95][Jo95]). The software community needs to be more confident that assessment results accurately reflect the capabilities of organizations being assessed, not simply the idiosyncrasies of those doing the assessments. We need a solid basis to better understand assessment methods, evaluate their basic premises, and inform decisions about their use and improvement. Similarly, more evidence is needed to justify investment in process improvement programs following the assessments.", "num_citations": "41\n", "authors": ["51"]}
{"title": "Success or failure? Modeling the likelihood of software process improvement\n", "abstract": " In this paper we present the results of a reanalysis of a study of factors that influence the success of software process improvement [6]. The initial report relied on simple statistical analytic methods, largely univariate and bivariate statistics. The current multivariate analysis replicates the basic results of the earlier study, while adding additional insights about the interactions among and comparative importance of the factors that make process improvement efforts likely to succeed or fail.", "num_citations": "41\n", "authors": ["51"]}
{"title": "Beyond computer science\n", "abstract": " Computer science is necessary but not sufficient to understand and overcome the problems we face in software engineering. We need to understand not only the properties of the software itself, but also the limitations and competences humans bring to the engineering task. Rather than rely on commonsense notions, we need a deep and nuanced view of human capabilities in order to determine how to enhance them. I discuss what I regard as promising examples of cognitive and organizational theories and propose research directions to develop new ways of representing run-time behavior and ways of thinking about project coordination. I conclude with observations on creating an interdisciplinary culture.", "num_citations": "39\n", "authors": ["51"]}
{"title": "You Hacked and Now What? -Exploring Outcomes of a Corporate Hackathon\n", "abstract": " Time bounded events such as hackathons, data dives, codefests, hack-days, sprints or edit-a-thons have increasingly gained attention from practitioners and researchers. Existing research, however, has mainly focused on the event itself, while potential outcomes of hackathons have received limited attention. Furthermore, most research around hackathons focuses on collegiate or civic events. Research around hackathons internal to tech companies, which are nearly ubiquitous, and present significant organizational, cultural, and managerial challenges, remains scarce. In this paper we address this gap by presenting findings from a case study of five teams which participated in a large scale corporate hackathon. Most team members voiced their intentions to continue the projects their worked on during the hackathon, but those whose projects did get continued were characterized by meticulous preparation, a focus\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "38\n", "authors": ["51"]}
{"title": "When it breaks, it breaks: How ecosystem developers reason about the stability of dependencies\n", "abstract": " Dependencies among software projects and libraries are an indicator of the often implicit collaboration among many developers in software ecosystems. Negotiating change can be tricky: changes to one module may cause ripple effects to many other modules that depend on it, yet insisting on only backward-compatible changes may incur significant opportunity cost and stifle change. We argue that awareness mechanisms based on various notions of stability can enable developers to make decisions that are independent yet wise and provide stewardship rather than disruption to the ecosystem. In ongoing interviews with developers in two software ecosystems (CRAN and Node.js), we are finding that developers in fact struggle with change, that they often use adhoc mechanisms to negotiate change, and that existing awareness mechanisms like Github notification feeds are rarely used due to information overload\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "38\n", "authors": ["51"]}
{"title": "Addressing challenges to open source collaboration with the semantic web\n", "abstract": " Despite the remarkable success of open source software, there are a number of challenges to collaboration in open source software development, in particular, with respect to supporting collaboration among developers, supporting potential contributors, and in bringing users and developers together. In this paper, we examine some of the possible enhancements of open source development environments, and consider the application of Semantic Web technology to address these.", "num_citations": "37\n", "authors": ["51"]}
{"title": "Software process improvement: State of the payoff\n", "abstract": " CiNii \u03a6\u00bd\u00fb\u00b5\u00fb\u00e7 - Software process improvement : State of the payoff CiNii \u03c3\u00a2\u255c\u03c4\u00bd\u00ef\u00b5\u00e2\u00e0\u03c3\u00e1\u2592\u03c3\u00a1\u00aa\u03c4\u00e1\u00f6\u03c4\u2310\u2562\u00b5\u00eb\u00c7 \u03c3\u00a1\u00aa\u03a6\u00ed\u00f4 \u00b5\u00e2\u00e0\u03c3\u00e1\u2592\u03c0\u00e2\u00e8\u03c0\u00e2\u00f4\u03c0\u00e9\u2593\u03c0\u00e2\u255d\u03c0\u00e9\u2510[\u03c0\u00e9\u2561\u03c0\u00e9\u00f1\u03c0\u00e2\u00ef\u03c0\u00e9\u00fa] \u00b5\u00f9\u00d1\u00b5\u00a3\u00bc\u03c0\u00fc\u00ab\u03a6\u00bd\u00fb\u00b5\u00fb\u00e7\u03c0\u00e9\u00c6\u03c0\u00fc\u00f2\u03c0\u00fc\u00ee\u03c0\u00fc\u00d6 \u03c3\u00f1\u00ba\u03c3\u00a1\u00aa\u03c3\u00a2\u2502\u00b5\u00a2\u2555\u0398\u00f1\u00bf\u03c0\u00fc\u00ab\u00b5\u00a3\u00bc\u03c0\u00e9\u00c6\u03c0\u00fc\u00f2\u03c0\u00fc\u00ee\u03c0\u00fc\u00d6 \u00b5\u00f9\u00d1\u00b5\u00a3\u00bc\u03c0\u00fc\u00ab\u03c3\u00ec\u00dc\u03c3\u00fa\u00bd\u03a6\u00bd\u00fb\u00b5\u00fb\u00e7\u03c0\u00e9\u00c6\u03c0\u00fc\u00f2\u03c0\u00fc\u00ee\u03c0\u00fc\u00d6 \u00b5\u00fb\u2591\u03a6\u00aa\u00c5 \u03c4\u00d6\u2557\u0398\u00ee\u2593 \u03c0\u00e2\u00a1\u03c0\u00e9\u2591\u03c0\u00e9\u00f1\u03c0\u00e2\u2502 English \u00b5\u00f1\u00a3\u03c4\u2524\u00f3 \u03c0\u00fc\u00d6\u03c0\u00fc\u2563\u03c0\u00fc\u00aa \u00b5\u00a3\u00bc\u00b5\u00fb\u00e7\u03c0\u00fc\u00e9\u03c0\u00e9\u00e8 \u03c0\u00fc\u00d6\u03c0\u00fc\u2563\u03c0\u00fc\u00aa \u00b5\u00a3\u00bc\u00b5\u00fb\u00e7\u03c0\u00fc\u00e9\u03c0\u00e9\u00e8 \u0398\u00fb\u00eb\u03c0\u00fc\u00ff\u03c0\u00e9\u00ef \u03c0\u00e9\u2510\u03c0\u00e9\u00f1\u03c0\u00e2\u00ea\u03c0\u00e2\u00bd \u03a6\u00e6\u00f9\u03a6\u00c7\u00e0\u03c3\u00c9\u00ec \u03a6\u00e6\u00f9\u03a6\u00c7\u00e0ID \u03a6\u00e6\u00f9\u03a6\u00c7\u00e0\u00b5\u00eb\u00c7\u03c3\u2592\u20a7 \u03c3\u00ea\u00e8\u03a6\u00ed\u00ee\u03c4\u00eb\u2310\u03c3\u00c9\u00ec ISSN \u03c3\u2556\u2557\u03c3\u00c5\u2556\u03c0\u00e2\u00dc\u03c0\u00e2\u255d\u03c0\u00e9\u2555 \u03c3\u00e7\u2551\u03c4\u00eb\u00ea\u03a6\u00c7\u00e0 \u03c3\u00c5\u00e9\u03a6\u00c7\u00e2\u00b5\u00fb\u00e7\u03c4\u00ee\u00ab \u03c3\u00e7\u2551\u03c4\u00eb\u00ea\u03c3\u2563\u2524 \u03c3\u2563\u2524\u03c0\u00fc\u00ef\u03c0\u00e9\u00eb \u03c3\u2563\u2524\u03c0\u00fc\u255b\u03c0\u00fc\u00ba \u00b5\u00f1\u00a3\u03c4\u2524\u00f3 \u00b5\u00f1\u00a3\u03c4\u2524\u00f3 \u00b5\u00f1\u00a3\u03c4\u2524\u00f3 CiNii\u03c4\u00ac\u00f4\u03c3\u00c5\u00fa\u00b5\u00d1\u00a1\u03c3\u00ef\u00d6 \u03c0\u00fc\u00ab\u03c3\u00e5\u00ec\u0398\u00fb\u00ef\u03c0\u00fc\u00bd\u03c0\u00fc\u00f1\u03c0\u00fc\u00e4\u03c0\u00fc\u00aa Software process improvement : State of the payoff HERBSLEB J. \u03a6\u00f3\u00bd\u03c3\u255d\u00f2\u03c4\u00f6\u00bf\u00b5\u00fb\u00e7\u03c4\u00ee\u00ab: 1\u03a3\u2557\u2562 \u03a6\u00e6\u00f9\u03a6\u00c7\u00e0 HERBSLEB J. \u03c3\u00c5\u00c4\u0398\u00ee\u2593\u03c3\u00ea\u00e8\u03a6\u00ed\u00ee\u03c4\u00eb\u2310 American Programmer American Programmer Sept., 2-12, 1994 \u03a6\u00f3\u00bd\u03c3\u255d\u00f2\u03c4\u00f6\u00bf\u00b5\u00fb\u00e7\u03c4\u00ee\u00ab: 1\u03a3\u2557\u2562\u03a3\u2555\u00a1 1-1\u03a3\u2557\u2562\u03c0\u00e9\u00c6 \u03a6\u00ed\u00bf\u03c4\u00f1\u2551 1 \u03c0\u00e9\u255c\u03c0\u00e2\u00f2\u03c0\u00e2\u00ea\u03c0\u00e9\u00aa\u03c0\u00e9\u00bf\u03c0\u00e9\u00f3\u03c0\u00e9\u00bb\u03c0\u00e2\u00ac\u03c0\u00e9\u00bf\u03c0\u00e2\u255d\u03c0\u00e9\u2556\u03c0\u00e2\u00ba\u03c0\u00e2\u2502 : \u03a6\u00bf\u00a1\u03a6\u00bf\u00ea\u03c4\u0192\u00d1\u03a6\u00a1\u00ff\u03c0\u00fc\u00ab\u00b5\u00ba\u00ef\u0398\u00c7\u00e1\u03c0\u00fc\u00bf\u03c4\u00ec\u2593\u03c3\u255b\u00f9 \u00b5\u2593\u2502\u0398\u00e7\u00c4 \u03c3\u00fb\u00e4\u03c3\u255c\u00ee \u0398\u00a2\u2557\u03c3\u00a1\u00c9\u00b5\u00e2\u00e0\u03c3\u00e1\u2592\u0398\u00c7\u00dc\u03a3\u2510\u00ed\u03c3\u00a1\u00aa\u03a3\u255d\u00dc\u00b5\u00e8\u00c7\u03a6\u00ed\u00f4\u03c4\u00e1\u00f6\u03c4\u2310\u2562\u03c3\u00e1\u2592\u03c3\u00e6\u00e8. KBSE, \u03c4\u0192\u00d1\u03a6\u00e2\u255c\u03c0\u00e9\u255c\u03c0\u00e2\u00f2\u03c0\u00e2\u00ea\u03c0\u00e9\u00aa\u03c0\u00e9\u00ba\u03c0\u00e9\u00f3\u03c3\u2556\u00d1\u03c3\u00a1\u00aa 96(52), 49-56, 1996-05-21 \u03c3\u00c5\u00e9\u03a6\u00c7\u00e2\u00b5\u00fb\u00e7\u03c4\u00ee\u00ab11\u03a3\u2557\u2562 \u03a6\u00f3\u00bd\u03c3\u255d\u00f2\u03c4\u00f6\u00bf\u00b5\u00fb\u00e7\u03c4\u00ee\u00ab1\u03a3\u2557\u2562 Tweet \u03c3\u00c9\u00e4\u03c4\u00bf\u00ab\u03c0\u00e9\u2502\u03c0\u00e2\u255d\u03c0\u00e2\u00eb NII\u03a6\u00bd\u00fb\u00b5\u00fb\u00e7ID(NAID) 10022372683 \u03a6\u2502\u00e7\u00b5\u00fb\u00d6\u03c4\u00bf\u00ab\u03c3\u00ea\u00d1 \u0398\u00a2\u00e6\u03a6\u00ac\u00ee\u03a6\u00bd\u00fb\u00b5\u00fb\u00e7 \u03c0\u00e2\u00e7\u03c0\u00e2\u255d\u03c0\u00e9\u2510\u00b5\u00c5\u00c9\u03a3\u255b\u00a2\u03c3\u00e0\u00e2 CJP\u03c3\u255d\u00f2\u03c4\u00f6\u00bf \u00b5\u00a2\u2555\u03c0\u00fc\u00ec\u03c3\u00e7\u2551\u03c0\u00fc\u00f9 RefWorks\u03c0\u00fc\u00bd\u00b5\u00a2\u2555\u03c0\u00fc\u00ec\u03c3\u00e7\u2551\u03c0\u00fc\u00f9 EndNote\u03c0\u00fc\u00bd\u00b5\u00a2\u2555\u03c0\u00fc\u00ec\u03c3\u00e7\u2551\u03c0\u00fc\u00f9 Mendeley/(\u0393\u00c7\u00aa", "num_citations": "37\n", "authors": ["51"]}
{"title": "Community code engagements: summer of code & hackathons for community building in scientific software\n", "abstract": " Community code engagements--short-term, intensive software development events--are used by some scientific communities to create new software features and promote community building. But there is as yet little empirical support for their effectiveness. This paper presents a qualitative study of two types of community code engagements: Google Summer of Code (GSoC) and hackathons. We investigated the range of outcomes these engagements produce and the underlying practices that lead to these outcomes. In GSoC, the vision and experience of core members of the community influence project selection, and the intensive mentoring process facilitates creation of strong ties. Most GSoC projects result in stable features. The agenda setting phase of hackathons reveals high priority issues perceived by the community. Social events among the relatively large numbers of participants over brief engagements\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "36\n", "authors": ["51"]}
{"title": "Dependency forecasting in the distributed agile organization\n", "abstract": " 56 October 2006/Vol. 49, No. 10 COMMUNICATIONS OF THE ACM dependencies that drive the need to communicate may shift frequently depending on the content of each delivery increment. One way to identify dependencies that trigger the need to communicate is through extraction from the project code. Traditional dependency methods\u0393\u00c7\u00f6identifying common data structures and calls\u0393\u00c7\u00f6are labor intensive and may capture only a subset of the important dependencies. We have found that using an automated system that builds links strictly on whether or not developers have modified the same file produces excellent results at little cost to project staff. In this model, a time window, such as the last two weeks, is chosen based on the frequency of team change in the organization. Any two developers who have modified the same file in the time window are assumed to have a need to coordinate their work, and are given\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "33\n", "authors": ["51"]}
{"title": "The future of collaborative software development\n", "abstract": " Software development organizations are changing from traditional enterprise or open source teams to decentralized, inter-reliant, multi-scale ecosystems of software developers. This transformation presents novel challenges and opportunities to those seeking to understand, evaluate, support, and influence these organizations. The goals of this workshop are to bring together researchers who are interested in the evolution of software development organizations, highlighting the role of collaboration technology, such as crowdsourcing, social media, software hosting, and application marketplace services, in shaping organizational transformation, and coordinating future efforts.", "num_citations": "32\n", "authors": ["51"]}
{"title": "Advanced Services: Changing how we communicate\n", "abstract": " This paper introduces three next-generation collaboration services designed to restore the human social interactions often lost in geographically distributed work environments. These services \u0393\u00c7\u00f6 TeamPortal\u0393\u00e4\u00f3, ConnectIcon\u0393\u00e4\u00f3, and OpenChannel\u0393\u00e4\u00f3 \u0393\u00c7\u00f6 will be delivered as a trial and demonstration system on the service access, mediation, and management (SAMM) platform. SAMM technology allows service providers to use the standard Lucent Softswitch to add converged voice and data services to their networks by employing service frameworks. These frameworks handle service interactions, including service session management; operations, administration, maintenance, and provisioning (OAM&P); and billing. As examples of new revenue-generating services, the collaboration services demonstrate the advantages of a packet-based core network. This type of network provides always-on communication that\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "32\n", "authors": ["51"]}
{"title": "Virtual community prescence awareness\n", "abstract": " The goal of the work presented in this paper is to identify ways to improve the speed, efficiency and quality with which a distributed development team develops their product and delivers it to market. We are working closely with a distributed product team at Lucent Technologies in order to ensure that our efforts are based on the needs of an existing distributed organization. Interviews have been conducted with members of this organization which have revealed a number of problems which affect distributed groups. Some of the problems identified were: the lack of tools to share data during meetings, insufficient organizational information, lack of knowledge concerning who was responsible for each module of the system, lack of any informal, unplanned, encounters/meetings between the distributed sites, and lack of presence information; e.g. in today or on holiday, for distant colleagues.The focus of the work\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "32\n", "authors": ["51"]}
{"title": "Vertical interaction in open software engineering communities\n", "abstract": " Software engineering is still a relatively young field, struggling to develop consistent standards and methods across the domain. For a given project, developers can choose from dozens of models, tools, platforms, and languages for specification, design, implementation, and testing. The globalization of software engineering and the rise of Open Source further complicate the issues as firms now must collaborate and coordinate with other firms and individuals possessing a myriad of goals, norms, values, expertise, and preferences. This thesis uses four empirical studies to take a vertical examination of Open Source ecosystems and identify the way that foundations, firms, and individuals come together to create large scale software ecosystems and produce world class software despite their differing goals and values. First, I examine Open Source as a collaborative phenomenon between firms and non-profit foundations that support many communities and identify the ways in which non-profit foundations enable member firms to create value in the ecosystem. Next, an empirical study of direct collaboration between firms within the Eclipse system reveals that most firms operate relatively independently but there is still heavy reliance on a single dominant player for core portions of the ecosystem. I then evaluate how the presence of commercial firms affects the attraction and retention of volunteer developers in an Open Source community. The final study examines how individual developers manage their dependencies in Open Source and extends the socio-technical congruence metric to address changing requirements and facilitate the metric as a tool\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "30\n", "authors": ["51"]}
{"title": "Supporting virtual team formation through community-wide deliberation\n", "abstract": " Team-based learning is a structured, small-group learning method that has been associated with many positive outcomes in traditional classroom settings. However, relatively little research has focused on how to form and support teams within online learning platforms, such as Massive Open Online Courses (MOOCs). A number of challenges arise for team formation in voluntary online classes: students may drop out and leave their team, and even if they do persist with the course, the team may not work together effectively. In this paper, we introduce a team-formation strategy that incorporates a deliberation process, where participants hold discussions in preparation for the collaboration task. First, we present a crowdsourced experiment that compares teams that are formed before or after a community deliberation process. Results demonstrate that teams engaging in a larger community deliberative process prior to\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "28\n", "authors": ["51"]}
{"title": "Challenges in measuring, understanding, and achieving social-technical congruence\n", "abstract": " Congruence, the state in which a software development organization harbors sufficient coordination capabilities to meet the coordination demands of the technical products under development, is increasingly recognized as critically important to the performance of an organization. To date, it has been shown that a variety of states of incongruence may exist in an organization, with possibly serious negative effects on product quality, development progress, cost, and so on. Exactly how to achieve congruence, or knowing what steps to take to achieve congruence, is less understood. In this paper, we introduce a series of key challenges that we believe must be comprehensively addressed in order for congruence research to result in wellunderstood approaches, tactics, and tools\u0393\u00c7\u00f4so these can be infused in the day-to-day practices of development organizations to improve their coordination capabilities with better aligned social and technical structures.This effort is partially funded by the National Science Foundation under grant number IIS-0534775, IIS-0329090, and the Software Industry Center and its sponsors, particularly the Alfred P. Sloan Foundation. Effort also supported by a 2007 Jazz Faculty Grant. The views and conclusions are those of the authors and do not reflect the opinions of any sponsoring organizations/agencies.", "num_citations": "28\n", "authors": ["51"]}
{"title": "Searching the state space: A qualitative study of API protocol usability\n", "abstract": " Application Programming Interfaces (APIs) often define protocols -- restrictions on the order of client calls to API methods. API protocols are common and difficult to use, which has generated tremendous research effort in alternative specification, implementation, and verification techniques. However, little is understood about the barriers programmers face when using these APIs, and therefore the research effort may be misdirected. To understand these barriers better, we perform a two-part qualitative study. First, we study developer forums to identify problems that developers have with protocols. Second, we perform a think-aloud observational study, in which we systematically observe professional programmers struggle with these same problems to get more detail on the nature of their struggles and how they use available resources. In our observations, programmer time was spent primarily on four types of\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "26\n", "authors": ["51"]}
{"title": "NotMeeting: A field trial of NetMeeting in a geographically distributed organization\n", "abstract": " This study reports on a three month field trial of Microsoft NetMeeting by geographically distributed software engineers in a Fortune 500 telecommunications organization. Participants were selected based on their need to collaborate with remote colleagues. After an initial orientation, participants were encouraged to use NetMeeting, whenever possible, to perform regular work tasks. Participants were interviewed halfway through the trial and at the conclusion of the trial to gauge level of use and attitudes toward NetMeeting. Results indicated low NetMeeting use but moderate satisfaction. The findings also illuminated difficulties in the introduction of collaboration tools in an authentic work setting and the adaptation of tools under conditions of everyday use.", "num_citations": "26\n", "authors": ["51"]}
{"title": "When cultures clash: Participation in open source communities and its implications for organizational commitment\n", "abstract": " Software applications developed within the OSS community have enjoyed tremendous success and for-profit organizations are keen to tap into this significant pool of software development talent (Chesbrough 2003; Feller et al. 2008). Examples companies include Netscape, IBM and Google (Maccormack et al. 2006). These companies seek to benefit from the talent of a global and sometimes voluntary workforce by paying some employees to contribute to OSS projects (Raymond 1999, Shah 2006). This merging of open and traditional software development may cause developer stress based on conflicting OSS community and traditional software development norms. Specifically, developers must balance company intellectual property concerns with the reciprocal and community-based norms that drive OSS development (Stewart and Gosain 2006). When these values are not in sync, contributors that aim to abide by conflicting values may exhibit dysfunctional attitudes. Employee stress with respect to their role can be destructive to organizational outcomes (Maas and Matejka 2009; Aranya and Ferris 1984). This study develops an OSS context specific model that describes the relationship between clashing software development cultures and employee organizational commitment. We leverage the rich OSS literature and the research that focuses on organizational-professional conflict (OPC) to develop hypotheses linking clashing cultures and organizational commitment. These hypotheses are tested using a combination of archival data and a survey of 127 GNOME developers. The findings presented in this paper contribute to OSS literature and\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "24\n", "authors": ["51"]}
{"title": "Understanding hackathons for science: Collaboration, affordances, and outcomes\n", "abstract": " Nowadays, hackathons have become a popular way of bringing people together to engage in brief, intensive collaborative work. Despite being a brief activity, being collocated with team members and focused on a task\u0393\u00c7\u00f6radical collocation\u0393\u00c7\u00f6could improve collaboration of scientific software teams. Using a mixed-methods study of participants who attended two hackathons at Space Telescope Science Institute, we examined how hackathons can facilitate collaboration in scientific software teams which typically involve members from two different disciplines: science and software engineering. We found that hackathons created a focused interruption-free working environment in which team members were able to assess each other\u0393\u00c7\u00d6s skills, focus together on a single project and leverage opportunities to exchange knowledge with other collocated participants, thereby allowing technical work to advance more\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "23\n", "authors": ["51"]}
{"title": "The impact of ideology misfit on open source software communities and companies\n", "abstract": " The success of open source software (OSS) development has led a growing number of companies to seek to leverage this model of development (Fitzgerald 2006; Germonprez et al. 2016; Ho and Rai 2017; Stewart et al. 2006). Companies devote resources, including employee labor, to OSS initiatives (Hann et al. 2013; Spaeth et al. 2015). However, the return on such investments has been mixed (Capra et al. 2011; Stewart et al. 2006). While companies such as IBM, Novell, and Red Hat have achieved some success in their OSS community collaborations (Munga et al. 2009), other companies have failed. For instance, Xara, a commercial software company, mismanaged an effort to garner developer commitment and participation because it fundamentally misunderstood the ideology that drove contributors to participate (Willis 2007). Ideology represents \u0393\u00c7\u00a3relatively coherently interrelated sets of emotionally charged beliefs, values and norms that bind some people together and help them make sense of their worlds\u0393\u00c7\u00a5(Trice and Beyer 1993, p. 33). As such, it serves as a frame of reference for predicting and relating to others in an environment (Hartley 1983). Although Xara released 90% of its code to the community, it did not cater to developers\u0393\u00c7\u00d6 interest in the core 10% of the application, thus failing to adhere to the expected openness and sharing that underlies the ideology common in OSS communities. This proved to be a major sticking point for community developers\u0393\u00c7\u00f6who ultimately abandoned the project because Xara did not address their needs (Willis 2007).As the Xara experience illustrates, ideology informs developers\u0393\u00c7\u00d6 commitment to OSS\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "23\n", "authors": ["51"]}
{"title": "COMMUNICATION, TEAM PERFORMANCE, AND THE INDIVIDUAL: BRIDGING TECHNICAL DEPENDENCIES.\n", "abstract": " Failure of software development projects is common. Often one of the major factors is poor communication between individuals on the development team. However, improving coordination requires more than just increasing communication. The Socio-Technical Congruence (STC) metric helps make sense out of the complicated highly-dynamic coordination requirements between team members by analyzing the relationship between communication and task dependencies obtained from work artifacts (Cataldo, Herbsleb, & Carley, 2008). Previous research computed STC from data contained in software repositories and found that high values of STC in a commercial software engineering setting led to higher team performance (Cataldo, Wagstrom, Herbsleb, & Carley, 2006), but did not differentiate cleanly between the effects of communication aligned with coordination requirements and that which was not. In this\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "23\n", "authors": ["51"]}
{"title": "Making the software factory work: Lessons from a decade of experience\n", "abstract": " At the heart of proposals to use process-oriented techniques for creating organizations that are capable of creating high-quality software at low cost is a focus on software process maturity, organizational learning to foster continuous improvement, and contractual arrangements that support an exclusive focus on software construction activities, as opposed to a broader focus on end-to-end development of an entire product. We study an organization that was to provide fast, low-cost, high-quality software development services to product teams within Lucent Technologies. The vision called for an organization with a culture that is distinct and isolated from the rest of Lucent, characterized by a commitment to a well-defined software development process, use of state-of-the-art technology that fits into the process, and use of various forms of feedback to recognize and take advantage of opportunities for process\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "23\n", "authors": ["51"]}
{"title": "From personal tool to community resource: What's the extra work and who will do it?\n", "abstract": " Sharing scientific data, software, and instruments is becoming increasingly common as science moves toward large-scale, distributed collaborations. Sharing these resources requires extra work to make them generally useful. Although we know much about the extra work associated with sharing data, we know little about the work associated with sharing contributions to software, even though software is of vital importance to nearly every scientific result. This paper presents a qualitative, interview-based study of the extra work that developers and end users of scientific software undertake. Our findings indicate that they conduct a rich set of extra work around community management, code maintenance, education and training, developer-user interaction, and foreseeing user needs. We identify several conditions under which they are likely to do this work, as well as design principles that can facilitate it. Our results\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "22\n", "authors": ["51"]}
{"title": "Effectively managing information systems architecture standards: an intra-organization perspective\n", "abstract": " Most standards research focus on standardization of Information and Communication Technology (ICT) standards across an industry. Prior research has not focused on standards management issues within organizations. It is important for research on ICT standards to consider the issue of how organizations should effectively manage their internal standards. Internal ICT standards are manifested as information systems (IS) architecture standards and frameworks. We differentiate between infrastructure architecture standards and integration architecture standards. We argue that it is important to differentiate between these two types of architecture standards, because of the differences in the focus, scope, and benefits of infrastructure and integration architecture. We make use of the information processing theory to make hypotheses about how the structure and organization of the architecture team and inter-unit coordination and control mechanisms are expected to differ for effective management of integration and infrastructure architecture. For infrastructure architecture standards, the goals and benefits are obvious to the IT department, but not necessarily so for the individual business units. While using the standards will provide long-term benefits to the organization as a whole, each business unit may not observe a direct benefit from using the standards in the short term. We hypothesize that to effectively manage infrastructure architecture standards, projects should be IT driven, architecture teams should be managed centrally, and the necessary inter-unit coordination and control processes should be in place to govern the interactions of architects\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "22\n", "authors": ["51"]}
{"title": "E-mentoring for software engineering: A socio-technical perspective\n", "abstract": " Mentoring is one of the most effective pedagogical tools, holding great promise for software engineering education. When done badly, however, it can lead to dysfunctional interpersonal relationships and may turn off mentees from careers in software engineering. In this qualitative interview-based study we examine how socio-technical dimensions of software impact the formation of social ties important for satisfying two goals of mentorship, building technical skill and interpersonal development. We find that mentees working on user facing, interdependent software form a balance of ties that facilitate both goals, while mentees working on non-user facing software mostly form ties important for building technical skill. Work practices that create opportunities for unstructured contact between mentees and community members, such as code review in a mentee cohort, can help to overcome this imbalance. Our findings\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "21\n", "authors": ["51"]}
{"title": "Representing knowledge in requirements engineering: an empirical study of what software engineers need to know\n", "abstract": " The selection and structuring of requirements engineering data necessitates an empirical prediction about the future utility of the selected data and of the retrieval paths available in the structure. In order to investigate these predictions, the questions asked by software engineers at software requirements and preliminary design meetings are analyzed. It is assumed that the kinds of information elicited by these questions are good indicators of what data would be most useful. Results lend support to systems that focus on the developing artifact itself, and indicate the importance of user scenarios.< >", "num_citations": "21\n", "authors": ["51"]}
{"title": "Transactivity as a Predictor of Future Collaborative Knowledge Integration in Team-Based Learning in Online Courses.\n", "abstract": " To create a satisfying social learning experience, an emerging challenge in educational data mining is to automatically assign students into effective learning teams. In this paper, we utilize discourse data mining as the foundation for an online team-formation procedure. The procedure features a deliberation process prior to team assignment, where participants hold discussions both to prepare for the collaboration task and provide indicators that are then used during automated team assignment. We automatically assign teams in a way that maximizes average observed pairwise transactivity exchange within teams, whereas in a control condition, teams are assigned randomly. We validate our team-formation procedure in a crowdsourced online environment that enables effective isolation of variables, namely Amazon\u0393\u00c7\u00d6s Mechanical Turk. We compare group knowledge integration outcomes between the two team assignment conditions. Our results demonstrate that transactivity-based team assignment is associated with significantly greater knowledge integration (p<. 05, effect size 3 standard deviations).", "num_citations": "20\n", "authors": ["51"]}
{"title": "Reading the documentation of invoked API functions in program comprehension\n", "abstract": " Comprehending an unfamiliar code fragment requires an awareness of explicit usage directives that may be present in the documentation of some invoked functions. Since it is not practical for developers to thoroughly investigate every call, directives may be missed and errors may occur. We previously reported on a tool called eMoose, which highlights calls to methods with associated directives, and on a controlled comparative lab study in which eMoose users were more successful at fixing bugs in given code fragments. In this paper we attempt to shed light on the factors behind these differences with a detailed analysis of videos from the study. We argue that information foraging theory may explain the subjects' reading choices and the impact of our tool. We also suggest ways to structure documentation to increase the prospects of knowledge acquisition.", "num_citations": "20\n", "authors": ["51"]}
{"title": "Building a socio-technical theory of coordination: why and how (outstanding research award)\n", "abstract": " Research aimed at understanding and addressing coordination breakdowns experienced in global software development (GSD) projects at Lucent Technologies took a path from open-ended qualitative exploratory studies to quantitative studies with a tight focus on a key problem\u0393\u00c7\u00f4delay\u0393\u00c7\u00f4and its causes. Rather than being directly associated with delay, multi-site work items involved more people than comparable same-site work items, and the number of people was a powerful predictor of delay. To counteract this, we developed and deployed tools and practices to support more effective communication and expertise location. After conducting two case studies of open source development, an extreme form of GSD, we realized that many tools and practices could be effective for multi-site work, but none seemed to work under all conditions. To achieve deeper insight, we developed and tested our Socio-Technical\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "19\n", "authors": ["51"]}
{"title": "Metaphorical representation in collaborative software engineering\n", "abstract": " Finding a useful abstract representation is fundamental to solving many difficult problems in software engineering. In order to better understand how representations are actually used in key collaborative software engineering tasks, this empirical study examined all of the spoken representations of software behavior in 9 domain analysis sessions. It found that about 70% of them were metaphorical, representing system behavior as physical movement of objects, as perceptual processes, or in anthropomorphic terms ascribing beliefs and desires to the system. The pattern of use of these representations indicates 1) that they were not merely temporary placeholders, but rather their use persisted even when a specialized and more formal vocabulary had been developed, and 2) the metaphoric descriptions appear to reflect actual use of metaphor, rather than just a choice of vocabulary. The use of metaphor is explained\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "18\n", "authors": ["51"]}
{"title": "Social media in transparent work environments\n", "abstract": " Social media is being integrated into work environments making them more transparent. When the work environment is transparent, it has the potential to allow projects to transmit information about work artifacts and events quickly through a large network. Using signaling theory, we propose a theory that users interpret this information and then make work-related decisions about attention and effort allocation in a principled manner. In the open source context of voluntary participation, broadcast activity information act as signals that allow developers to make highly informed choices about where to expend their attention and effort and with whom to collaborate. We propose four potential signals from literature and interviews with developers in our research setting and discuss the implications for social media in software development environments.", "num_citations": "16\n", "authors": ["51"]}
{"title": "How to support newcomers in scientific hackathons-an action research study on expert mentoring\n", "abstract": " Time-bounded events such as hackathons have become a global phenomenon. Scientific communities in particular show growing interest in organizing them to attract newcomers and develop technical artifacts to expand their code base. Current hackathon approaches presume that participants have sufficient expertise to work on projects on their own. They only provide occasional support by domain experts serving as mentors which might not be sufficient for newcomers. Drawing from work on workplace and educational mentoring, we developed and evaluated an approach where each hackathon team is supported by a community member who serves in a mentor role that goes beyond providing occasional support. Evaluating this approach, we found that teams who took ownership of their projects, set achievable goals early while building social ties with their mentor and receiving learning-oriented support\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "15\n", "authors": ["51"]}
{"title": "Identifying unusual commits on GitHub\n", "abstract": " Transparent environments and social\u0393\u00c7\u00c9coding platforms as GitHub help developers to stay abreast of changes during the development and maintenance phase of a project. Especially, notification feeds can help developers to learn about relevant changes in other projects. Unfortunately, transparent environments can quickly overwhelm developers with too many notifications, such that they lose the important ones in a sea of noise. Complementing existing prioritization and filtering strategies based on binary compatibility and code ownership, we develop an anomaly detection mechanism to identify unusual commits in a repository, which stand out with respect to other changes in the same repository or by the same developer. Among others, we detect exceptionally large commits, commits at unusual times, and commits touching rarely changed file types given the characteristics of a particular repository or developer\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "15\n", "authors": ["51"]}
{"title": "Intelligently transparent software ecosystems\n", "abstract": " Today's social-coding tools foreshadow a transformation of the software industry, as it relies increasingly on open libraries, frameworks, and code fragments. Our vision calls for new intelligently transparent services that support rapid development of innovative products while helping developers manage risk and issuing them early warnings of looming failures. Intelligent transparency is enabled by an infrastructure that applies analytics to data from all phases of the life cycle of open source projects, from development to deployment. Such an infrastructure brings stakeholders the information they need when they need it.", "num_citations": "15\n", "authors": ["51"]}
{"title": "When psychologists aid in the voir dire: Legal and ethical considerations\n", "abstract": " Under our system of administering criminal law, the jury is a feature of the very highest importance. The selection of the jury is not a mere gesture. The rhetorical remark of a British statesman that \u0393\u00c7\u00a3The whole machinery of the state, all the apparatus of the system, and its varied workings, end in simply bringing twelve good men into a box,\u0393\u00c7\u00a5 carried a real truth.... 1", "num_citations": "15\n", "authors": ["51"]}
{"title": "Structuring documentation to support state search: A laboratory experiment about protocol programming\n", "abstract": " Application Programming Interfaces (APIs) often define object protocols. Objects with protocols have a finite number of states and in each state a different set of method calls is valid. Many researchers have developed protocol verification tools because protocols are notoriously difficult to follow correctly. However, recent research suggests that a major challenge for API protocol programmers is effectively searching the state space. Verification is an ineffective guide for this kind of search. In this paper we instead propose Plaiddoc, which is like Javadoc except it organizes methods by state instead of by class and it includes explicit state transitions, state-based type specifications, and rich state relationships. We compare Plaiddoc to a Javadoc control in a between-subjects laboratory experiment. We find that Plaiddoc participants complete state search tasks in significantly less time and with significantly fewer\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "14\n", "authors": ["51"]}
{"title": "Success or failure? Modeling the likelihood of software process improvement. International software engineering research network\n", "abstract": " In this paper we present the results of a reanalysis of a study of factors that influence the success of software process improvement [6]. The initial report relied on simple statistical analytic methods, largely univariate and bivariate statistics. The current multivariate analysis replicates the basic results of the earlier study, while adding additional insights about the interactions among and comparative importance of the factors that make process improvement efforts likely to succeed or fail.", "num_citations": "14\n", "authors": ["51"]}
{"title": "Practices and supporting structures for mature inquiry culture in distributed software development projects\n", "abstract": " As software specifications for complex systems are practically never entirely complete and consistent, the recipient of the specification needs domain knowledge in order to decide which parts of the system are specified clearly and which parts are specified ambiguously and thus need inquiry to get a more detailed specification. By analyzing the evidence gained in multiple-case study, the necessary components for achieving a mature inquiry culture in distributed software development derived from the practices at Siemens Program and System Engineering (PSE) are identified. These components are presented in three categories-pillars: project communication, requirements communication and inquiry practices", "num_citations": "13\n", "authors": ["51"]}
{"title": "The eXtreme programming (XP) metaphor and software architecture\n", "abstract": " The Metaphor is intended to contribute to the Agile Programming value of communication. Previously, some of the author studied the Metaphor as a means of communication among team members and between them and clients. This paper examines the Metaphor\u0393\u00c7\u00d6s contribution to the software architecture. Both experiments seem to reveal that the Metaphor has poor effectiveness.", "num_citations": "13\n", "authors": ["51"]}
{"title": "Hacking and making at time-bounded events: Current trends and next steps in research and event design\n", "abstract": " Time-bounded collaborative events in which teams work together under intense time pressure are becoming increasingly popular. While hackathons, that is, competitive overnight coding events, are one of the more prevalent examples of this phenomenon, there are many more distinct event design variations for different audiences and with divergent aims, such as sprints, codefests, hack-days, edit-a-thons and so on. Taken together, these events offer new opportunities and challenges for cooperative work by affording explicit, predictable, time-bounded spaces for interdependent work and access to new audiences of collaborators. This one-day workshop brings together researchers interested in the phenomenon, experienced event organizers, and participants interested in running their own events to consolidate research to-date, share practical experiences, and understand what benefits different event variations\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "12\n", "authors": ["51"]}
{"title": "The VistA ecosystem: current status and future directions\n", "abstract": " With the recent national focus on health care and the infusion of funds that HITECH will bring to Health IT (HIT), it is hard to imagine a more appropriate time for the US Department of Veterans Affairs (VA) to formulate policy aimed at making its HIT system, VistA, more widely available. In fact, judging by the transformative impact that open platforms have had in many technology domains, it is likely that if done correctly, the VistA software could form the basis of a thriving ecosystem that would drive down cost and unleash innovation. The kernel of a socio\u0393\u00c7\u00c9technical ecosystem based on VistA is functioning today outside of VA, but it needs help and support from VA policies if it is to thrive, grow to its full potential, and help to transform HIT.Socio\u0393\u00c7\u00c9technical ecosystems are extraordinarily complex, but research has recently begun to reveal the keys to software platforms that spark successful ecosystems. The primary difficulty is charting the course to growth and en route there is a set of fundamental issues that need to be addressed: What technical work must be done to evolve VistA into a suitable platform for use outside of VA? How should an ecosystem consisting of great numbers of vendors, service providers, IT departments, many classes of users, VA, non\u0393\u00c7\u00c9profits, and many other types of players be governed so that coherence can be maintained, while still encouraging innovation? What kind of cultural and technological infrastructure must be deployed in order to support information dissemination and effective decision\u0393\u00c7\u00c9making? How can a critical mass of adopters be attracted quickly to create viable business opportunities?", "num_citations": "12\n", "authors": ["51"]}
{"title": "Pushing relevant artifact annotations in collaborative software development\n", "abstract": " Recent techniques show the benefits of attaching community generated knowledge to artifacts in an information space and presenting it to subsequent readers. We argue that such knowledge may also be relevant to the readers of artifacts which link to this target. Such situations are particularly frequent in software development, where a lack of awareness of critical directives associated with an invoked function can lead to costly errors. We describe how eMoose, a group memory-aid for this domain, addresses these problems by visually\" pushing\" annotated knowledge from invocation targets into the invoking code. Similar techniques could potentially be applied to other development phases and to other domains.", "num_citations": "12\n", "authors": ["51"]}
{"title": "The Big Effects of Short-term Efforts: Mentorship and Code Integration in Open Source Scientific Software\n", "abstract": " Simply releasing the source code to scientific software is inadequate if it is to remain useful to scientists beyond initial publication [1]. First, scientists often develop \u0393\u00c7\u00a3kleenex-code\u0393\u00c7\u00a5 that they intend to use once and throw away [5]. This software is therefore unlikely to be accessible to other scientists. Second, scientists do not receive obvious benefits from contributing to open-source scientific software, unless those contributions directly result in publication [5, 6]. Third, scientists often lack the expertise to develop production quality software [4, 7]. Fourth, because there tend not to be funding lines for the maintenance of scientific software, the software may quickly become outdated and unusable once project grants are exhausted [9].Google Summer of Code (GSoC) 1, an annual program that pays students who successfully complete shortterm open-source coding projects, may hold promise for addressing these concerns. As a first step, we sought to understand the kinds of features that get integrated, and participants\u0393\u00c7\u00d6 impressions of the program. We therefore conducted a case study of Biopython [2], a scientific software community with a history of participation in GSoC. Bringing in new contributors and retaining them over the long term are of course primary objectives, but we found a number of less expected effects as well.", "num_citations": "11\n", "authors": ["51"]}
{"title": "Achieving speed in globally distributed project work\n", "abstract": " We used a survey and an analysis of change management data to measure the extent of delay in a multi-site software development organization. Results indicated that cross-site work takes much longer and requires more people than comparable same-site work. We describe several tools we have deployed, which are designed specifically to address the issues of speed we identified. We report our strategy for introducing these tools, the lessons we learned and how we revised our strategy based on this experience, and present data on usage. Next, we describe enhanced versions of these tools that are being developed as products. We conclude with an examination of research findings that were helpful, and research issues we think should get more attention.CSCW research has revealed many subtleties of collaborative work, including such things as the critical importance of context, common ground, incidental properties of shared artifacts, and informal communication. Distance work clearly impacts these crucial characteristics. Distance reduces the sheer amount of communication, and creates numerous problems in establishing a shared understanding.", "num_citations": "11\n", "authors": ["51"]}
{"title": "Socio-technical congruence (STC 2008)\n", "abstract": " The need for coordination among developers, teams, and organizations is one of the fundamental problems of realworld software engineering projects. Technical decisions about the structure of software serve to shape the extent and content of the required coordination, while team structure, social networks, work history, geographic location, and other organizational factors determine coordination capabilities. Understanding how to ensure that the coordination capabilities among developers are sufficient to perform the coordination required of them is an increasingly pressing research question that will require progress in many related research areas. See, eg,[2-5]. The need for conformance between organizational characteristics and software design has long been recognized. As Conway famously claimed four decades ago,\u0393\u00c7\u00a3any organization that designs a system will inevitably produce a design whose structure\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "10\n", "authors": ["51"]}
{"title": "What Happens to All These Hackathon Projects? Identifying Factors to Promote Hackathon Project Continuation\n", "abstract": " Time-based events, such as hackathons and codefests, have become a global phenomenon attracting thousands of participants to hundreds of events every year. While research on hackathons has grown considerably, there is still limited insight into what happens to hackathon projects after the event itself has ended. While case studies have provided rich descriptions of hackathons and their aftermath, we add to this literature a large-scale quantitative study of continuation across hackathons in a variety of domains. Our findings indicate that a considerable number of projects get continued after a hackathon has ended. Our results also suggest that short- and long-term continuation are different phenomena. While short-term continuation is associated with technical preparation, number of technologies used in a project and winning a hackathon, long-term continuation is predicated on skill diversity among team\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "9\n", "authors": ["51"]}
{"title": "End-to-end features as meta-entities for enabling coordination in geographically distributed software development\n", "abstract": " The nature of the software development work activities and their inter-relationships makes supporting geographically distributed software development projects a challenging endeavor. In this paper, we discussed the limitations of the traditional organizational design views in terms of coordination in the context of geographically distributed software development projects. We propose the well-established concept of a product feature as a framework to improve support distributed product development projects through collaborative tools that enhance the coordination capabilities of the development organization. Finally, we present a conceptual idea on how such improvement could be realized using product features as the center pieces for communication and coordination in distributed software development.", "num_citations": "9\n", "authors": ["51"]}
{"title": "Corporate hackathons, how and why? A multiple case study of motivation, projects proposal and selection, goal setting, coordination, and outcomes\n", "abstract": " Time-bounded events such as hackathons, data dives, codefests, hack-days, sprints or edit-a-thons have increasingly gained attention from practitioners and researchers. Yet there is a paucity of research on corporate hackathons, which are nearly ubiquitous and present significant organizational, cultural, and managerial challenges. To provide a comprehensive understanding of team processes and broad array of outcomes of corporate hackathons, we conducted a mixed-methods, multiple case study of five teams that participated in a large scale corporate hackathon. Two teams were \u0393\u00c7\u00a3pre-existing\u0393\u00c7\u00a5 teams (PETs) and three were newly-formed \u0393\u00c7\u00a3flash\u0393\u00c7\u00a5 teams (FTs). Our analysis revealed that PETs coordinated almost as if it was just another day at the office while creating innovations within the boundary of their regular work, whereas FTs adopted role-based coordination adapted to the hackathon context while\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "8\n", "authors": ["51"]}
{"title": "Sharing, re-use and circulation of resources in cooperative scientific work\n", "abstract": " This one-day workshop aims to stimulate research on the sharing and reuse of scientific resources in cooperative scientific work. As science trends toward increasing geographic and temporal scales, larger collaborations, and greater interdisciplinarity, scientific resources increasingly need to be more mobile and integrated with computer supported information and communication environments. Sharing, reuse and circulation of resources become a central challenge and critical component of cooperative scientific work. We interpret sharing broadly to include circulating scientific materials in any way that makes them available to other scientists. We include a variety of resources such as data, software, materials and specimens, workflows, technical know-how, clinical and laboratory protocols, and algorithms. We explore a range of sharing and reuse practices past and present, what motivates and limits them, how\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "8\n", "authors": ["51"]}
{"title": "How useful is the metaphor component of agile methods?: a preliminary study\n", "abstract": " The \u0393\u00c7\u00a3metaphor\u0393\u00c7\u00a5 is the practice of agile processes most ignored by practitioners. A metaphor is meant to be agreed upon by all members of a project as a means of simply explaining the purpose of the project and thus guide the structure of the architecture, thus it is very important for communication, both among the team and with the client. Since both customers and developers alike use the metaphor to clarify the project, a good metaphor should be easily understandable to customers, yet have sufficient content that it can guide architecture development. This paper experiments with the metaphor as a communication tool.", "num_citations": "8\n", "authors": ["51"]}
{"title": "The 2nd Workshop on Hacking and Making at Time-Bounded Events: Current Trends and Next Steps in Research and Event Design\n", "abstract": " Hackathons or Hackathon-style events, describe increasingly popular time-bounded intensive events across different fields and sectors. Often cited examples of hackathons include the demanding overnight competitive coding events, but there are many design variations for different audiences and with divergent aims. They offer a new form of collaboration by affording explicit, predictable, time-bounded spaces for interdependent work and engaging with new audiences. This one-day workshop will bring together researchers, experienced event organizers, and practitioners to share and discuss their practical experiences. Empirical insights from studying these events may help position the CHI community to better study, plan and design hackathon-style events and socio-technical systems that support new modes of production and collaboration.", "num_citations": "7\n", "authors": ["51"]}
{"title": "Transparency and coordination in peer production\n", "abstract": " This paper examines coordination in transparent work environments - environments where the content of work artifacts, and the actions taken on these artifacts, are fully visible to organizational members. Our qualitative study of a community of open source software developers revealed a coordination system characterized by interest-based, asynchronous interaction and knowledge transfer. At the core of asynchronous knowledge transfer, lies the concept of quasi-codification, which occurs when rich process knowledge is implicitly encoded in work artifacts. Our findings suggest that members are able to more selectively form dependencies, monitor the trajectory of projects, and make their work understandable to others which facilitates coordination. We discuss two important characteristics that enable coordination activities in a transparent environment: the presence of an imagined audience that dictates the way artifacts are crafted, and experience within the environment, that allows individuals to derive knowledge from these artifacts. By showing how transparency influences coordination, this research challenges previous conceptions of coordination for complex, collaborative work.", "num_citations": "7\n", "authors": ["51"]}
{"title": "Coordination in innovative design and engineering: observations from a lunar robotics project\n", "abstract": " Coordinating activities across groups in systems engineering or product development projects is critical to project success, but substantially more difficult when the work is innovative and dynamic. It is not clear how technology should best support cross-group collaboration on these types of projects. Recent work on coordination in dynamic settings has identified cross-boundary knowledge exchange as a critical mechanism for aligning activities. In order to inform the design of collaboration technology for creative work settings, we examined the nature of cross-group knowledge exchange in an innovative engineering research project developing a lunar rover robot as part of the Google Lunar X-Prize competition. Our study extends the understanding of communication and coordination in creative design work, and contributes to theory on coordination. We introduce four types of cross-team knowledge exchange\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "7\n", "authors": ["51"]}
{"title": "A Preliminary Theory for Open-Source Ecosystem Microeconomics\n", "abstract": " While there has been substantial empirical work identifying factors that influence the contribution to, and use of open-source software, we have as yet little theory that identifies the key constructs and relationships that would allow us to explain and predict how open-source ecosystems function. The absence of ecosystem theory is particularly alarming as open-source software works its way more broadly and deeply into the economy. The problem facing policymakers is how to provide support and resources when needed, without distorting decision-making, demotivating volunteers, serving special interests at the expense of others, and maintaining the communities that take on and guide the work. What is needed is a clearly articulated and empirically validated theory of open-source ecosystems. This chapter provides a sketch of such a theory in the form of a set of propositions, which may form the foundation for\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "6\n", "authors": ["51"]}
{"title": "An agent-based model of edit wars in wikipedia: How and when is consensus reached\n", "abstract": " Edit wars are conflicts among editors of Wikipedia when editors repeatedly overwrite each other's content. Edit wars can last from a few days to several years before reaching consensus often leading to a loss of content quality. Therefore, the goal of this paper is to create an agent-based model of edit wars in order to study the influence of various factors involved in consensus formation. We model the behavior of agents using theories of group stability and reinforcement learning. We show that increasing the number of credible or trustworthy agents and agents with a neutral point of view decreases the time taken to reach consensus, whereas the duration is longest when agents with opposing views are in equal proportion. Our model can be used to study the behavior of members in online communities and to inform policies and guidelines for participation.", "num_citations": "6\n", "authors": ["51"]}
{"title": "Need for tweet: How open source developers talk about their github work on twitter\n", "abstract": " Social media, especially Twitter, has always been a part of the professional lives of software developers, with prior work reporting on a diversity of usage scenarios, including sharing information, staying current, and promoting one's work. However, previous studies of Twitter use by software developers typically lack information about activities of the study subjects (and their outcomes) on other platforms. To enable such future research, in this paper we propose a computational approach to cross-link users across Twitter and GitHub, revealing (at least) 70,427 users active on both. As a preliminary analysis of this dataset, we report on a case study of 786 tweets by open-source developers about GitHub work, combining automatic characterization of tweet authors in terms of their relationship to the GitHub items linked in their tweets with qualitative analysis of the tweet contents. We find that different developer roles\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "5\n", "authors": ["51"]}
{"title": "Collaborative Writing on GitHub: A Case Study of a Book Project\n", "abstract": " Social coding platforms such as GitHub are increasingly becoming a digital workspace for the production of non-software digital artifacts. Since GitHub offers unique features that are different from traditional ways of collaborative writing, it is interesting to investigate how GitHub features are used for writing. In this paper, we present the preliminary findings of a mixed-methods, case study of collaboration practices in a GitHub book project. We found that the use of GitHub depended on task interdependence and audience participation. GitHub's direct push method was used to coordinate both loosely-and tightly-coupled work, with the latter requiring collaborators to follow socially-accepted conventions. The pull-based method was adopted once the project was released to the public. While face-to-face and online meetings were prominent in the early phases, GitHub's issues became instrumental for communication and\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "5\n", "authors": ["51"]}
{"title": "The big effects of short-term efforts: A catalyst for community engagement in scientific software\n", "abstract": " Scientific progress relies crucially on software, yet in practice there are significant challenges to scientific software production and maintenance. We conducted a case study of a bioinformatics library called Biopython to investigate the promise of Summer of Code (SoC), a program originally developed by Google that pays students to work on open-source projects for the summer, for addressing these challenges. We find that SoC benefits students by engaging them with mentors and the community at large. SoC students learn how to contribute to open-source scientific software projects and how to apply their new software engineering skills in practice. We also find that SoC benefits the Biopython community by creating mentorship and communication networks that enable Biopython developers to more easily identify and implement users\u0393\u00c7\u00d6 needs.", "num_citations": "5\n", "authors": ["51"]}
{"title": "Identity-Based Roles in Rhizomatic Social Justice Movements on Twitter\n", "abstract": " Contemporary social justice movements can be understood as rhizomatic, growing laterally without a central structure. In this mixed methods study, we investigated the roles that activists develop based on their personal and professional identities and carry with them through the dynamic landscape of rhizomatic social justice movements on Twitter. We conducted interviews with self-identified social justice activists and analyzed seven weeks of their Twitter timeline and retweets. We found three activist roles\u0393\u00c7\u00f4organizer, storyteller and advocate\u0393\u00c7\u00f4and described the identities, approaches to activism, behaviors on Twitter, and the relationship to social justice movements for each role. We used these roles as a lens to better understand how movement identities are constructed, laid out an agenda for future research on roles in rhizomatic social justice movements and suggested design directions.", "num_citations": "4\n", "authors": ["51"]}
{"title": "Using productive collaboration bursts to analyze open source collaboration effectiveness\n", "abstract": " Developers of open-source software projects tend to collaborate in bursts of activity over a few days at a time, rather than at an even pace. A project might find its productivity suffering if bursts of activity occur when a key person with the right role or right expertise is not available to participate. Open-source projects could benefit from monitoring the way they orchestrate attention among key developers, finding ways to make themselves available to one another when needed. In commercial software development, Sociotechnical Congruence (STC) has been used as a measure to assess whether coordination among developers is sufficient for a given task. However, STC has not previously been successfully applied to open-source projects, in which some industrial assumptions do not apply: management-chosen targets, mandated steady work hours, and top-down task allocation of inputs and targets. In this work we\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "4\n", "authors": ["51"]}
{"title": "Socio-technical coordination (keynote)\n", "abstract": " Crowd development is a development process designed for transient workers of varying skill. Work is organized into microtasks, which are short, self-descriptive, and modular. Microtasks recursively spawn microtasks and are matched to workers, who accrue points reflecting value created. Crowd development might help to reduce time to market and software development costs, increase programmer productivity, and make programming more fun.", "num_citations": "4\n", "authors": ["51"]}
{"title": "Construction of association networks from communication in teams working on complex projects\n", "abstract": " This paper introduces a semi\u0393\u00c7\u00c9automated method for extracting the associations among components of a complex engineering project by mining transcripts of design discussions about the engineered artifact. We contribute a novel method for deriving network data from communication data. This method uses relational text analysis to construct networks representing associations among designed pieces of the artifact. Our analysis shows that association networks extracted with this method correlate highly with those extracted by humans, and those constructed based on expert interviews. This method can help scholars and practitioners understand the nature and evolution of the relationship between tasks and components, and the successful execution of complex projects. The association networks produced by our method can be used to reveal key properties of the project and may suggest the coordination\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "4\n", "authors": ["51"]}
{"title": "Global Software Development: The Bell Labs Collaboratory\n", "abstract": " Empirical studies of global development. The problems of global development are varied. We conducted over 200 structured interviews at 14 sites on three continents, with people at all levels in the organization from developers to executives. In addition to the obvious problems of time zone, limited bandwidth connectivity, language and culture differences, we found the chief victim of global development to be speed [4]. Changes which cross sites take much longer than changes which are all at a single site. The difference appears not to be due to the size or complexity of cross-site changes, but rather to communication and coordination issues. Most pressing among these communication and coordination issues [3] are 1) what we are calling issue resolution paralysis, induced by the inability to identify the right person, initiate communication, and have an effective interchange, and 2) a complete lack of informal \u0393\u00c7\u00a3corridor talk\u0393\u00c7\u00a5 among people at different sites, which results in a surprisingly powerful impediment to the flow of information.", "num_citations": "4\n", "authors": ["51"]}
{"title": "An empirical study of information needs in collaborative software design\n", "abstract": " To begin by stating the obvious, group soft\u0393\u00c7\u00f6ware design is a hard problem. Not only is it intellectually challengings)\u0393\u00c7\u00d610)\u0393\u00c7\u00d615), but the social, organizational, cultural, and business contexts in which the work inevitably takes place add enormously to the complexity of the taskzl\u2229\u00bc\u00fc). In particular, communication and coordination, adapting to changing requirements, and disseminating su\u2229\u00bc\u00e9icient knowledge of the application domain are pervasive sources of dif\u2229\u00bc\u00fcculty in real world collaborative software design. It is often suggested that tools which facil\u0393\u00c7\u00f6itate recording, searching, and retrieving im\u0393\u00c7\u00f6portant information would provide valuable as\u0393\u00c7\u00f6sistance in overcoming these context-generated problems. But there exists a wide variety of opinions on precisely what sort of information would be most useful. The most frequently discussed possibilities seem to be design ratio\u0393\u00c7\u00f6nale, knowledge of the application domain, user\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "4\n", "authors": ["51"]}
{"title": "Modeling coordination and productivity in open-source GitHub projects\n", "abstract": " In open-source software development, coordination between globally separated developers is often structured in ways not immediately visible to them, such as implicit groupings of people working on similar code and related issues. This opacity is despite the availability and accessibility of a large quantity of low-level project activity data on platforms like GitHub. This paper uses this low-level data to construct meaningful indicators that could offer improved transparency into how coordination is conducted in open source. Prior work has shown the value of Socio-Technical Congruence for evaluating the quality of coordination in commercial software systems. However, little work has successfully translated this analysis to the domain of open source, primarily due to their less formal and inconsistent ways of partitioning work, assigning tasks and measuring success. We present a technique for distinguishing the active phases of coordination and define a measure of productivity for these projects. We perform a quantitative analysis of the influence of congruence on productivity in these phases demonstrating that the associations between our measure of productivity and the measures of congruence and other control variables are subtle but consistent with the prior work in commercial software development and discuss some applications of our work.", "num_citations": "3\n", "authors": ["51"]}
{"title": "When it breaks, it breaks\n", "abstract": " Dependencies among software projects and libraries are an indicator of the often implicit collaboration among many developers in software ecosystems. Negotiating change can be tricky: changes to one module may cause ripple effects to many other modules that depend on it, yet insisting on only backwardcompatible changes may incur significant opportunity cost and stifle change. We argue that awareness mechanisms based on various notions of stability can enable developers to make decisions that are independent yet wise and provide stewardship rather than disruption to the ecosystem. In ongoing interviews with developers in two software ecosystems (CRAN and Node. js), we are finding that developers in fact struggle with change, that they often use adhoc mechanisms to negotiate change, and that existing awareness mechanisms like Github notification feeds are rarely used due to information overload. We study the state of the art and current information needs and outline a vision toward a change-based awareness system.", "num_citations": "3\n", "authors": ["51"]}
{"title": "Beyond code: prioritizing issues, sharing knowledge, and establishing identity at Hackathons for Science\n", "abstract": " Although the stated objective of a hackathon is to write code, code is not the only outcome. In this position paper, we argue that \u0393\u00c7\u00a3hackathons for science,\u0393\u00c7\u00a5 hackathons used to advance infrastructure for science, facilitate the circulation of important knowledge, such as the scientific community\u0393\u00c7\u00d6s priorities, technical know-how, and social connections. We support this position by drawing from scientific literature on hackathons, summaries and descriptions posted online by hackathon participants, and interviews that we conducted with bioinformatics scientists who have attended hackathons for science.Our focus is on hackathons used in the life sciences. Over the last several years, hackathons have frequently been used in bioinformatics. For instance, the National Evolutionary Synthesis Center (NESCent), an evolutionary biology research center, has sponsored and organized hackathons every year since 20061. At these events, about 30-45 scientists and developers of scientific software take time off from their regular jobs to meet face to face and collaborate intensively on the software for several days. Typical activities include keynote presentations on software infrastructure issues, brainstorming solutions that can be immediately addressed at the hackathon, and training on software tools. Participants spend the majority of the time implementing, testing, and documenting code. These activities produce a range of outcomes.", "num_citations": "3\n", "authors": ["51"]}
{"title": "Sharing the spoils: incentives and collaboration in scientific software development\n", "abstract": " Science policy makers are looking for approaches to increase the extent of collaboration in the production of scientific software, looking to open collaborations in open source software for inspiration. We examine the software ecosystem surrounding BLAST, a key bioinformatics tool, identifying outside improvements and interviewing their authors. We find that academic credit is a powerful motivator for the production and revealing of improvements. Yet surprisingly, we also find that improvements motivated by academic credit are less likely to be integrated than those with other motivations, including financial gain. To the extent that integration removes a contribution from visibility, reputation can be problematic as a reward for collaboration. We consider how open source avoids these issues and conclude with policy approaches to promoting wider collaboration by addressing incentives for integration.", "num_citations": "3\n", "authors": ["51"]}
{"title": "Technical perspective Maintaining quality in the face of distributed development\n", "abstract": " By James herbsleb it WAs A problem that should not have taken three weeks to solve. But the tester was in Germany and the developer was in England. The documentation claimed that if a function was called from a command line with particular parameters, it would return values of particular state variables. If the operator simply entered blank, it would return the values of all the variables. It was this last option that was causing the grief. Entering blank just returned garbage, insisted the tester. The developer couldn\u0393\u00c7\u00d6t duplicate the problem, and after three weeks of frustrating emails and phone conversations, the developer hopped on an airplane to Germany. A few seconds after sitting down beside the tester, he observed the tester enter the characters \u0393\u00c7\u00a3blank\u0393\u00c7\u00a5 and hit return, rather than just hitting return by itself. Mystery solved. This is just one anecdote, but it is emblematic of how most everyone these days thinks of\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "3\n", "authors": ["51"]}
{"title": "When and how to make breaking changes: Policies and practices in 18 open source software ecosystems\n", "abstract": " Open source software projects often rely on package management systems that help projects discover, incorporate, and maintain dependencies on other packages, maintained by other people. Such systems save a great deal of effort over ad hoc ways of advertising, packaging, and transmitting useful libraries, but coordination among project teams is still needed when one package makes a breaking change affecting other packages. Ecosystems differ in their approaches to breaking changes, and there is no general theory to explain the relationships between features, behavioral norms, ecosystem outcomes, and motivating values. We address this through two empirical studies. In an interview case study, we contrast Eclipse, NPM, and CRAN, demonstrating that these different norms for coordination of breaking changes shift the costs of using and maintaining the software among stakeholders, appropriate to each\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "2\n", "authors": ["51"]}
{"title": "Platform design strategies: Contrasting case studies of two audio production systems\n", "abstract": " In this paper, we provide a case study of two competing audio platforms: Apple\u0393\u00c7\u00d6s AU and Steinberg VST. Through investigation of the technical architecture and governance structure, we extrapolate some meaningful inferences in the form of testable hypotheses for platform developers moving forward. Specifically, we are hypothesizing that ability to adopt open governance structures is correlated with the reliance on common standards of communication and the provision of a simplistic kernel promotes flexibility and improves performance.", "num_citations": "2\n", "authors": ["51"]}
{"title": "MSR: Mining for scientific results?\n", "abstract": " MSR: Mining for Scientific Results? Page 1 MSR: Mining for Scientific Results? Jim Herbsleb School of Computer Science Carnegie Mellon University jdh@cs.cmu.edu http://conway.isri.cmu.edu/~jdh/ The author gratefully acknowledge support by the National Science Foundation under Grants IIS-11 0414698, IIS-0534656, OCI-0943168, and IGERT 9972762, as well as the Software Industry Center at CMU and its sponsors, particularly the Alfred P. Sloan Foundation. Page 2 2 MSR and the Value of Prediction \u0393\u00c7\u00f3 High impact relative to most SE research \u0393\u00c7\u00f3 Practical utility \u0393\u00c7\u00f3 Goal is prediction \u0393\u00c7\u00f4 Insight and understanding are optional Page 3 Photo: I, MikeGogulski Page 4 4 MSR 2010 Topics \u0393\u00c7\u00f3 Predicting \u0393\u00c7\u00f3 Bug severity \u0393\u00c7\u00f3 Number of bugs (2) \u0393\u00c7\u00f3 Fault-proneness \u0393\u00c7\u00f3 Efficiency \u0393\u00c7\u00f3 Change \u0393\u00c7\u00f3 Comparing \u0393\u00c7\u00f3 Precision finding bugs \u0393\u00c7\u00f3 Using stack traces \u0393\u00c7\u00f3 Detecting \u0393\u00c7\u00f3 Security bugs (2) \u0393\u00c7\u00f3 Clones (3) \u0393\u00c7\u00f3 Metapatterns \u0393\u00c7\u00f3 Licenses \u0393\u00c7\u00f3 Occasions to \u0393\u00c7\u00f3 \u0393\u00c7\u00f3 (7) I\u0393\u00c7\u00aa", "num_citations": "2\n", "authors": ["51"]}
{"title": "Socio-technical logics of correctness in the scientific software development ecosystem\n", "abstract": " Science increasingly depends on software. From configuration and control of instruments, to statistical analysis,\u252c\u00e1simulation and visualization, virtually every workflow that\u252c\u00e1generates scientific results involves software.1 In practice,\u252c\u00e1scientific collaboration in a growing number of disciplines\u252c\u00e1means drawing together different software artifacts produced\u252c\u00e1in different ways, by different people, to build an ensemble\u252c\u00e1artifact that does scientific work and, ultimately, provides\u252c\u00e1reasons to believe scientific conclusions.\u252c\u00e1In this position paper we present an understanding of the scientific software development ecosystem that is emerging from\u252c\u00e1our interviews of working scientists who develop software in\u252c\u00e1the course of their science. First we describe the types of\u252c\u00e1software and software development being undertaken. We then\u252c\u00e1focus in on three logics of correctness that have emerged from\u252c\u00e1our interviews. We demonstrate that these logics are closely\u252c\u00e1linked to the social circumstances of the software\u0393\u00c7\u00d6s production\u252c\u00e1and use and the type of software; these are socio-technical\u252c\u00e1logics. We conclude by examining the implications of this\u252c\u00e1understanding for shaping policies designed to maximize the\u252c\u00e1return on the substantial public investments in scientific software production.", "num_citations": "2\n", "authors": ["51"]}
{"title": "Using distributed constraint satisfaction to build a theory of congruence\n", "abstract": " Distributed Constraint Satisfaction Problem (DSCP) has been proposed as a methodology to frame and analyze coordination in software development. Here, we propose concrete ways to cast rich social and product dependence graphs of software projects into the DSCP framework, suggest how the lack of congruence among these graphs may affect primary software engineering outcomes, and discuss the DSCP machinery that is most likely to provide necessary tools to test these hypotheses.", "num_citations": "2\n", "authors": ["51"]}
{"title": "Individualized Socio-Technical Congruence\n", "abstract": " At a macro level, congruence between a team\u0393\u00c7\u00d6s actual communication and coordination dependencies, a metric called socio-technical congruence (STC), is related to higher team performance. However, at an individual level, the calculation of STC may seem opaque, leaving individuals confused about how their communication patterns affect the STC metric and impact overall team performance. We propose two methods of calculating individualized STC based on previous work in the field. Examining this relationship further, we find that when the individualized STC metrics are broken into their constituent parts, individuals with high amounts of coordination requirements tend to have higher performance, while individuals with higher levels of communication have lower performance.", "num_citations": "2\n", "authors": ["51"]}
{"title": "How Useful Is the Metaphor Component of Agile Methods? A Preliminary Study\n", "abstract": " The\" metaphor\" is the practice of agile processes most ignored by practitioners. A metaphor is meant to be agreed upon by all members of a project as a means of simply explaining the purpose of the project and thus guide the structure of the architecture, thus it is very important for communication, both among the team and with the client. Since both customers and developers alike use the metaphor to clarify the project, a good metaphor should be easily understandable to customers, yet have sufficient content that it can guide architecture development. This paper experiments with the metaphor as a communication tool.", "num_citations": "2\n", "authors": ["51"]}
{"title": "Introducing instant messaging and chat in the workplace\n", "abstract": " We report on our experiences of introducing an instant messaging and group chat application into geographically distributed workgroups. We describe a number of issues we encountered, including privacy concerns, individual versus group training, and focusing on teams or individuals. The perception of the tool\u0393\u00c7\u00d6s utility was a complex issue, depending both on users\u0393\u00c7\u00d6 views of the importance of informal communication, and their perceptions of the nature of cross-site communication issues. Finally, we conclude with a discussion of critical mass, which is related to the features each user actually uses. More generally, we encountered a dilemma that imposes serious challenges for user-centered design of groupware systems.", "num_citations": "2\n", "authors": ["51"]}
{"title": "Culture and breaking change: A survey of values and practices in 18 open source software ecosystems\n", "abstract": " Software ecosystems have become one of the most important ways to organize software development, and to maintain and reuse code packages. But coordination can be a major challenge in software ecosystems when packages change, since packages tend to be highly interdependent yet independently maintained. The culture of an ecosystem includes those values and practices associated with managing change. We conducted a survey of thousands of developers in more than a dozen ecosystems, asking them about the values and practices that make up their communities\u0393\u00c7\u00d6 distinctive cultures; as well as the perceived power of different stakeholders and perceived health of the community. This dataset release shares anonymized data from the survey.", "num_citations": "2\n", "authors": ["51"]}
{"title": "The secret life of hackathon code\n", "abstract": " Background: Hackathons have become popular events for teams to collaborate on projects and develop software prototypes. Most existing research focuses on activities during an event with limited attention to the evolution of the code brought to or created during a hackathon. Aim: We aim to understand the evolution of hackathon-related code, specifically, how much hackathon teams rely on pre-existing code or how much new code they develop during a hackathon. Moreover, we aim to understand if and where that code gets reused, and what factors affect reuse. Method: We collected information about 22,183 hackathon projects from DEVPOST -- a hackathon database -- and obtained related code (blobs), authors, and project characteristics from the World of Code. We investigated if code blobs in hackathon projects were created before, during, or after an event by identifying the original blob creation date and author, and also checked if the original author was a hackathon project member. We tracked code reuse by first identifying all commits containing blobs created during an event before determining all projects that contain those commits. Result: While only approximately 9.14% of the code blobs are created during hackathons, this amount is still significant considering the time and member constraints of such events. Approximately a third of these code blobs get reused in other projects. The number of associated technologies and the number of participants in a project increase reuse probability. Conclusion: Our study demonstrates to what extent pre-existing code is used and new code is created during a hackathon and how much of it is\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "1\n", "authors": ["51"]}
{"title": "Trust-Building Across Networks Through Festival Organizing\n", "abstract": " In this case study, we examine how organizers of a grassroots literary and cultural festival built trust across networks in a decentralized curatorial process. Organizers with backgrounds in arts and community organizing used online organizing tactics and tools to connect writers from different neighborhoods, marginalized identity groups and cultural organizations. We observe that the use of social media helped bring openness and transparency to the planning process, inviting broader participation and creating space for social interactions, thus facilitating trust. Brokers played a pivotal role in connecting different networks online and off and fostered collaboration and relationship building. However, in some cases brokering was not enough to establish trust; organizers had to make extra efforts to adapt to groups' cultural and communication norms and make special accommodations to increase inclusivity.", "num_citations": "1\n", "authors": ["51"]}
{"title": "Hackathons for Science, How and Why?\n", "abstract": " Based on our empirical studies of 14 hackathons held by a corporation (Microsoft OneWeek Hackathon), universities, and scientific communities including three hack days at Space Telescope Science Institute (STScI), we will present how hackathons can be designed to achieve specific goals in a semi-academic environment like STScI. Our recommendations are derived from the analysis of data collected through ethnographic observations, interviews, and questionnaires. Hackathons are not only a good way to foster innovation but also to provide learning and knowledge exchange opportunities, to create new and enhance existing social connections, to exercise new technical and leadership opportunities, and to get the needed work done or to make a quick progress on technical work. However, designing a hackathon involves careful upfront planning, project selection, team formation, goal setting, and follow-up\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "1\n", "authors": ["51"]}
{"title": "An Analysis of the PEARC 2018 Science Gateways Community Institute Hackathon: Lessons Learned\n", "abstract": " Science Gateways are web portals on which data, software, instruments, and computing resources provide users, and scientists streamlined workflows through dynamically coded frontends. These web portals allow scientist to focus on research with little to no need to utilize programmatic skills. Hackathons are time-bounded events in which collaborators intensely focus on a given subject or problem in an effort to generate solutions. Hackathon events provide opportunities for participants with diverse backgrounds, mixed specialties, and broad skill sets to interact in a manner that promotes disruptive solutions. Hackathons come in a variety of different forms and serve many different purposes. These purposes include developing resources, infrastructure, practices, and culture for a community. The Science Gateways Community Institute team proposed a hackathon to introduce students attending the PEARC 2018\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "1\n", "authors": ["51"]}
{"title": "Conflict in Comments: Learning but Lowering Perceptions, With Limits\n", "abstract": " Prior work and perception theory suggests that when exposed to discussion related to a particular piece of crowdsourced text content, readers generally perceive that content to be of lower quality than readers who do not see those comments, and that the effect is stronger if the comments display conflict. This paper presents a controlled experiment with over 1000 participants testing to see if this effect carries over to other documents from the same platform, including those with similar content or by the same author. Although we do generally find that perceived quality of the commented-on document is affected, effects do not carry over to the second item and readers are able to judge the second in isolation from the comment on the first. We confirm a prior finding about the negative effects conflict can have on perceived quality but note that readers report learning more from constructive conflict comments.", "num_citations": "1\n", "authors": ["51"]}
{"title": "The sustainability of scientific software: Ecosystem context and science policy\n", "abstract": " The sustainability of scientific software is a key challenge for science policy. We approach this question by drawing on empirical studies of scientists using software and describe how components are arranged with complements and dependencies into value-\u0393\u00c7\u00c9providing assemblies, periodically revisited by their scientist users. Over time, software declines in scientific usefulness, driven by four factors: a moving scientific frontier and technological change, production friction, use friction and the software ecosystem context. In particular we highlight the impact of the complexity of ecosystem context, in terms of the diversity of use-\u0393\u00c7\u00c9contexts in which a component is used. We identify three broad strategies to address the need for work to sustain the usefulness of scientific software: suppress the drivers, reduce the amount of work needed, or attract sufficient resources able to undertake the work needed to sustain scientific usefulness. We examine three attraction systems: commercial markets, community-\u0393\u00c7\u00c9based peer-\u0393\u00c7\u00c9production and grant-\u0393\u00c7\u00c9making. We describe how these systems bring resources to projects, and particularly highlight how both commercial markets and peer production address the challenges of ecosystem complexity while scientific grant-\u0393\u00c7\u00c9making does not. We conclude by making science policy recommendations to address the challenges of sustainability, by enhancing the grant-\u0393\u00c7\u00c9making system and by facilitating transitions to other resource attraction systems.", "num_citations": "1\n", "authors": ["51"]}
{"title": "Talking about concerns\n", "abstract": " The aspects community has developed a rich set of language-based mechanisms for addressing issues of scattering and tangling of concerns. In this talk, I sketch an alternative approach, where automatically collected data are analyzed to create models of concerns, which in turn are used by tools in the development environment. Data includes not only traditional repository data such as version and change logs, but also text data such as communication, meeting minutes, documentation, and even spoken conversation. I will describe some preliminary work my colleagues and I have done to explore this direction.", "num_citations": "1\n", "authors": ["51"]}
{"title": "Success in Online Production Systems: A Longitudinal Analysis of the Socio-Technical Duality of Development Projects\n", "abstract": " Online production systems represent a new and innovative approach for producing information goods. However, the success of such endeavors depends on a careful interrelationship between their social and technical dimensions. In this paper, we explore how various aspects of those dimensions impact the success of online production systems. We collected data from the open source community GNOME and we used the inclusion of a product into an official release as indicator for the success of a project. Our analyses revealed that structural characteristics of the individual project\u0393\u00c7\u00d6s communication and task dependency (coordination needs) networks, the position of individuals in the overall ecosystem communication network as well as the technical structure of the product, are all significantly associated with project success. Our novel results represent an important step in understanding the success drivers of online production systems as well as a starting point for reshaping traditional models for producing information goods typically used in corporate settings.", "num_citations": "1\n", "authors": ["51"]}
{"title": "Exploring Interrelationships among Project Entities to Support Coordination in Distributed Teams\n", "abstract": " This paper is geared to start a discussion about what data to preserve and analyze to facilitate collaborative production tasks. We do so by representing interrelationships among different project entities as networks and combining these networks using the concept of Meta Matrix\u0393\u00c7\u00f4a methodology for combining individual networks to create derived networks to investigate. For illustration, we present how socio-technical dependencies, task dependencies, and knowledge networks can be constructed using the Meta Matrix. We conclude by showing how we used validated the feasibility of Meta Matrix by presenting Tesseract, a socio-technical browser that models a subset of individual and derived networks for a software project. It specifically, captures relations between developers, artifacts, and issues/bugs which is then displayed via a set of four juxtaposed, cross-linked displays.This effort is partially funded by the National Science Foundation under grant number IIS-0534775, IIS-0329090, and the Software Industry Center and its sponsors, particularly the Alfred P. Sloan Foundation. Effort also supported by a 2007 Jazz Faculty Grant. The views and conclusions are those of the authors and do not reflect the opinions of any sponsoring organizations/agencies.", "num_citations": "1\n", "authors": ["51"]}
{"title": "Using Development Experience to Calculate Congruence\n", "abstract": " Coordination congruence has been defined as the match between coordination requirements and the actual coordination behavior of a team, where requirements are calculated based on underlying task dependencies and behavior based on communication patterns. In this paper we propose to expand the notion of congruence in two distinct ways. First, we use the concept of shared mental model as a determinant of coordination behavior, where shared mental model is defined as the common conceptualization of artifacts, tasks, and team members shared among developers who have worked together in the past. Second, we create a measure of expertise congruence that determines the match between the expertise that is required and that which is allocated to a project. We also present some issues that need careful investigation as we expand the notion of congruence.This effort is partially funded by the National Science Foundation under grant number IIS-0329090, and the Software Industry Center and its sponsors, particularly the Alfred P. Sloan Foundation. Effort also supported by a 2007 Jazz Faculty Grant. The views and conclusions are those of the authors and do not reflect the opinions of any sponsoring organizations/agencies.", "num_citations": "1\n", "authors": ["51"]}