{"title": "EMF-IncQuery: An integrated development environment for live model queries\n", "abstract": " As model management platforms are gaining industrial attention, the importance of automated model querying techniques is also increasing. Several important engineering tasks supported by model-based tools \u2013 such as well-formedness constraint validation or model transformations \u2013 rely on efficiently evaluating model queries. If the models change rapidly or frequently, it is beneficial to provide live and incrementally evaluated queries that automatically propagate model changes to keep query results consistent.The current paper reports on the of EMF-IncQuery framework focusing on new features of its integrated development environment (such as query validation and visualization) and its support for integrating queries to existing applications (e.g. by auto-generated data bindings) built on top of the industry standard Eclipse Modeling Framework (EMF). Our approach is illustrated on a case study integrating well\u00a0\u2026", "num_citations": "165\n", "authors": ["1842"]}
{"title": "Road to a reactive and incremental model transformation platform: three generations of the VIATRA framework\n", "abstract": " The current release of VIATRA provides open-source tool support for an event-driven, reactive model transformation engine built on top of highly scalable incremental graph queries for models with millions of elements and advanced features such as rule-based design space exploration complex event processing or model obfuscation. However, the history of the VIATRA model transformation framework dates back to over 16\u00a0years. Starting as an early academic research prototype as part of the M.Sc project of the the first author it first evolved into a Prolog-based engine followed by a family of open-source projects which by now matured into a component integrated into various industrial and open-source tools and deployed over multiple technologies. This invited paper briefly overviews the evolution of the VIATRA/IncQuery family by highlighting key features and illustrating main transformation concepts\u00a0\u2026", "num_citations": "104\n", "authors": ["1842"]}
{"title": "A graph query language for EMF models\n", "abstract": " While model queries are important components in model-driven tool chains, they are still frequently implemented using traditional programming languages, despite the availability of model query languages due to performance and expressiveness issues. In the current paper, we propose EMF-IncQuery as a novel, graph-based query language for EMF models by adapting the query language of the Viatra2 model transformation framework to inherit its concise, declarative nature, but to properly tailor the new query language to the modeling specificities of EMF. The EMF-IncQuery language includes (i) structural restrictions for queries imposed by EMF models, (ii) syntactic sugar and notational shorthand in queries, (iii) true semantic extensions which introduce new query features, and (iv) a constraint-based static type checking method to detect violations of EMF-specific type inference rules.", "num_citations": "98\n", "authors": ["1842"]}
{"title": "Query-driven incremental synchronization of view models\n", "abstract": " Views are key concepts of domain-specific modeling in order to provide specific focus of the designers by abstracting from unnecessary details of the underlying abstract model. Usually, these views are represented as models themselves (view models), computed from the source model. However, the efficient maintenance of views when the source model changes is challenging, as recalculation from scratch has to be avoided to achieve scalability.", "num_citations": "32\n", "authors": ["1842"]}
{"title": "Performance comparison of query-based techniques for anti-pattern detection\n", "abstract": " ContextProgram queries play an important role in several software evolution tasks like program comprehension, impact analysis, or the automated identification of anti-patterns for complex refactoring operations. A central artifact of these tasks is the reverse engineered program model built up from the source code (usually an Abstract Semantic Graph, ASG), which is traditionally post-processed by dedicated, hand-coded queries.ObjectiveOur paper investigates the costs and benefits of using the popular industrial Eclipse Modeling Framework (EMF) as an underlying representation of program models processed by four different general-purpose model query techniques based on native Java code, OCL evaluation and (incremental) graph pattern matching.MethodWe provide in-depth comparison of these techniques on the source code of 28 Java projects using anti-pattern queries taken from refactoring operations in\u00a0\u2026", "num_citations": "24\n", "authors": ["1842"]}
{"title": "Local search-based pattern matching features in emf-incquery\n", "abstract": " Graph patterns provide a declarative formalism to describe model queries used for several important engineering tasks, such as well-formedness constraint validation or model transformations. As different pattern matching approaches, such as local search or incremental evaluation, have different performance characteristics (smaller memory footprint vs. smaller runtime), a wider range of practical problems can be addressed. The current paper reports on a novel feature of the EMF-IncQuery framework supporting local search-based pattern matching strategy to complement the existing incremental pattern matching capabilities. The reuse of the existing pattern language and query development environment of EMF-IncQuery enables to select the most appropriate strategy separately for each pattern without any modifications to the definitions of existing patterns. Furthermore, a graphical debugger\u00a0\u2026", "num_citations": "23\n", "authors": ["1842"]}
{"title": "Integrating efficient model queries in state-of-the-art EMF tools\n", "abstract": " Abstract Model-driven development tools built on industry standard platforms, such as the Eclipse Modeling Framework (EMF), heavily use model queries in various use cases, such as model transformation, well-formedness constraint validation and domain-specific model execution. As these queries are executed rather frequently in interactive modeling applications, they have a significant impact on the runtime performance of the tool, and also on the end user experience. However, due to their complexity, they can also be time consuming to implement and optimize on a case-by-case basis. The aim of the EMF-IncQuery framework is to address these shortcomings by using declarative queries over EMF models and executing them effectively using a caching mechanism. In the current paper, we present the new and significantly extended version of the EMF-IncQuery Framework, with new features and runtime\u00a0\u2026", "num_citations": "20\n", "authors": ["1842"]}
{"title": "Anti-pattern detection with model queries: A comparison of approaches\n", "abstract": " Program queries play an important role in several software evolution tasks like program comprehension, impact analysis, or the automated identification of anti-patterns for complex refactoring operations. A central artifact of these tasks is the reverse engineered program model built up from the source code (usually an Semantic Graph, ASG), which is traditionally post-processed by dedicated, hand-coded queries. Our paper investigates the use of the popular industrial Eclipse Modeling Framework (EMF) as an underlying representation of program models processed by three general-purpose model query techniques based on native Java code, local-search and incremental evaluation. We provide in-depth comparison of these techniques on the source code of 17 Java projects using queries taken from refactoring operations in different usage profiles. Our results show that general purpose model queries outperform\u00a0\u2026", "num_citations": "19\n", "authors": ["1842"]}
{"title": "Towards Dynamic Backward Slicing of Model Transformations\n", "abstract": " Model transformations are frequently used means for automating software development in various domains to improve quality and reduce production costs. Debugging of model transformations often necessitates identifying parts of the transformation program and the transformed models that have causal dependence on a selected statement. In traditional programming environments, program slicing techniques are widely used to calculate control and data dependencies between the statements of the program. Here we introduce program slicing for model transformations where the main challenge is to simultaneously assess data and control dependencies over the transformation program and the underlying models of the transformation. In this paper, we present a dynamic backward slicing approach for both model transformation programs and their transformed models based on automatically generated execution\u00a0\u2026", "num_citations": "12\n", "authors": ["1842"]}
{"title": "Implementing Efficient Model Validation in EMF Tools\n", "abstract": " Model-driven development tools built on industry standard platforms, such as the Eclipse Modeling Framework (EMF), heavily use model queries in various use cases, such as model transformation, well-formedness constraint validation and domain-specific model execution. As these queries are executed rather frequently in interactive modeling applications, they have a significant impact on the runtime performance of the tool, and also on the end user experience. However, due to their complexity, they can be time consuming to implement and optimize on a case-by-case basis. To address these shortcomings, we developed the EMF-INCQUERY framework for defining declarative queries over EMF models and executing them effectively using a caching mechanism. In the current paper, we demonstrate how our framework can be easily integrated with other EMF tools. We describe a case study in which EMF\u00a0\u2026", "num_citations": "12\n", "authors": ["1842"]}
{"title": "Static type checking of model transformation programs\n", "abstract": " Introduction               Model transformations, utilized for various tasks, such as formal model analysis or code generation are key elements of model-driven development processes. As the complexity of developed model transformations grows, ensuring the correctness of transformation programs becomes increasingly difficult. Nonetheless, error detection is critical as errors can propagate into the target application.", "num_citations": "8\n", "authors": ["1842"]}
{"title": "A generic static analysis framework for model transformation programs\n", "abstract": " To ensure the correctness of complex model transformations tools that can find errors are necessitated. The goal of this paper is to define a static analysis framework which can detect some common errors in transformation programs.", "num_citations": "8\n", "authors": ["1842"]}
{"title": "Program analysis techniques for model queries and transformations\n", "abstract": " Model-driven engineering aims to address the ever-increasing complexity of software development by focusing on di erent kinds of models to de ne and analyze the system on various levels of abstraction. The e ective handling of such models is highly dependent on model queries and transformations.The correctness of such queries and transformations is critical as undetected errors may invalidate analysis results or even propagate into the target application. For this reason, a large number of testing and formal analysis approaches are available for the veri cation of model queries and transformations, however they require signi cant e ort to use or time to execute. To complement such formal approaches, this dissertation promotes the use of lightweight program", "num_citations": "6\n", "authors": ["1842"]}
{"title": "Static Type Checking of Model Transformations by Constraint Satisfaction Programming\n", "abstract": " The control structure of the Viatra2 transformation programs is untyped making it easier to misuse the type system. The aim of this paper is to provide a static type checker tool to these transformation programs that can detect those errors. We use a generic static analysis framework for analysis, and as an underlying engine constraint satisfaction problem solver is used. For this reason it is required to translate the metamodel (that acts as the type system) and the type safety properties of the transformation program to constraints.", "num_citations": "5\n", "authors": ["1842"]}
{"title": "Visualization of Traceability Models with Domain-speci\ufb01c Layouting\n", "abstract": " Traceability models are often used to describe the correspondence between source and target models of model transformations. Although the visual representation of such models are important for transformation development and application, mostly ad-hoc solutions are present in industrial environments. In this paper we present a user interface component for visualizing traceability models inside transformation frameworks. As generic graph visualization methods fail to emphasize the underlying logical structure of our model, we used domain-speci\ufb01c layouts by customizing generic graph layout algorithms with data from the metamodels used during the transformation. This approach was evaluated, among others, with the traceability models generated by a BPEL veri\ufb01cation transformation, which serves as our running example.", "num_citations": "4\n", "authors": ["1842"]}
{"title": "Developing and visualizing live model queries\n", "abstract": " Several important tasks performed by model driven development tools---such as well-formedness constraint validation or model transformations---rely on evaluating model queries. If the model changes rapidly or frequently, it is beneficial to provide live queries that automatically propagate these model changes into the query results. To ease the development and debugging of live queries, the development environment should provide a way to evaluate the query results continuously, helping to understand how the created query works.", "num_citations": "2\n", "authors": ["1842"]}
{"title": "Static Analysis of Model Transformations\n", "abstract": " Model transformations have a crucial role in the model-driven development [1] processes as they form the basis to derive source code from high level descriptions. Usually complex model transformations are captured by transformation programs.As these programs grow in size ensuring their correctness becomes increasingly difficult, nonetheless it is required as errors in these programs can propagate into the developed application. Methods for ensuring correctness of computer programs such as static analysis are applicable for transformation programs as well. Static analysis represents a set of techniques for computing different properties of programs without their execution. It is extensively used both in compiler optimization and program verification.", "num_citations": "2\n", "authors": ["1842"]}
{"title": "Saying Hello World with VIATRA2 - A Solution to the TTC 2011 Instructive Case\n", "abstract": " The paper presents a solution of the Hello World! An Instructive Case for the Transformation Tool Contest using the VIATRA2 model transformation tool.", "num_citations": "1\n", "authors": ["1842"]}
{"title": "Ecore to Genmodel case study solution using the Viatra2 framework\n", "abstract": " The paper presents a solution of the Ecore to GenModel case study of the Transformation Tool Contest 2010, using the model transformation tool Viatra2.", "num_citations": "1\n", "authors": ["1842"]}