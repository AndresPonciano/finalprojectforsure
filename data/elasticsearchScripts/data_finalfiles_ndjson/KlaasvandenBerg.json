{"title": "Semantics of trace relations in requirements models for consistency checking and inferencing\n", "abstract": " Requirements traceability is the ability to relate requirements back to stakeholders and forward to corresponding design artifacts, code, and test cases. Although considerable research has been devoted to relating requirements in both forward and backward directions, less attention has been paid to relating requirements with other requirements. Relations between requirements influence a number of activities during software development such as consistency checking and change management. In most approaches and tools, there is a lack of precise definition of requirements relations. In this respect, deficient results may be produced. In this paper, we aim at formal definitions of the relation types in order to enable reasoning about requirements relations. We give a requirements metamodel with commonly used relation types. The semantics of the relations is provided with a formalization in first-order logic\u00a0\u2026", "num_citations": "94\n", "authors": ["1217"]}
{"title": "A metamodeling approach for reasoning about requirements\n", "abstract": " In requirements engineering, there are several approaches for requirements modeling such as goal-oriented, aspect-driven, and system requirements modeling. In practice, companies often customize a given approach to their specific needs. Thus, we seek a solution that allows customization in a systematic way. In this paper, we propose a metamodel for requirements models (called core                   metamodel) and an approach for customizing this metamodel in order to support various requirements modeling approaches. The core metamodel represents the common concepts extracted from some prevalent approaches. We define the semantics of the concepts and the relations in the core metamodel. Based on this formalization, we can perform reasoning on requirements that may detect implicit relations and inconsistencies. Our approach for customization keeps the semantics of the core concepts intact\u00a0\u2026", "num_citations": "70\n", "authors": ["1217"]}
{"title": "Change impact analysis for requirements: A metamodeling approach\n", "abstract": " ContextFollowing the evolution of the business needs, the requirements of software systems change continuously and new requirements emerge frequently. Requirements documents are often textual artifacts with structure not explicitly given. When a change in a requirements document is introduced, the requirements engineer may have to manually analyze all the requirements for a single change. This may result in neglecting the actual impact of a change. Consequently, the cost of implementing a change may become several times higher than expected.ObjectiveIn this paper, we aim at improving change impact analysis in requirements by using formal semantics of requirements relations and requirements change types.MethodIn our previous work we present a requirements metamodel with commonly used requirements relation types and their semantics formalized in first-order logic. In this paper the\u00a0\u2026", "num_citations": "64\n", "authors": ["1217"]}
{"title": "Aosd ontology 1.0: Public ontology of aspect-orientation\n", "abstract": " This report presents a Common Foundation for Aspect-Oriented Software Development. A Common Foundation is required to enable effective communication and to enable integration of activities within the Network of Excellence. This Common Foundation is realized by developing an ontology, ie the shared meaning of terms and concepts in the domain of AOSD. In the first part of this report, we describe the definitions of an initial set of common AOSD terms. There is general agreement on these definitions. In the second part, we describe the Common Foundation task in detail.", "num_citations": "59\n", "authors": ["1217"]}
{"title": "Evaluation of rule-based modularization in model transformation languages illustrated with ATL\n", "abstract": " This paper studies ways for modularizing transformation definitions in current rule-based model transformation languages. Two scenarios are shown in which the modular units are identified on the base of the relations between source and target metamodels and on the base of generic transformation functionality. Both scenarios justify modularization by requiring adaptability and reusability in transformation definitions. To enable representation and composition of the identified units, a transformation language must provide proper modular constructs and mechanisms for their integration. We evaluate several implementations of the scenarios by applying different transformation techniques: usage of explicit and implicit rule calls, and usage of rule inheritance. ATLAS Transformation Language (ATL) is used to illustrate these implementations. The experience with these scenarios shows that current languages provide a\u00a0\u2026", "num_citations": "57\n", "authors": ["1217"]}
{"title": "Teaching functional programming to first-year students\n", "abstract": " In the period 1986\u20131991, experiments have been carried out with an introductory course in computer programming, based on functional programming. Due to thorough educational design and evaluation, a successful course has been developed. This has led to a revision of the computer programming education in the first year of the computer science curriculum at the University of Twente.This article describes the approach, the aim of the computer programming course, the outline and subject matter of the course, and the evaluation. Educational research has been done to assess the quality of the course.", "num_citations": "51\n", "authors": ["1217"]}
{"title": "Change impact analysis based on formalization of trace relations for requirements\n", "abstract": " Evolving customer needs is one of the driving factors in software development. There is a need to analyze the impact of requirement changes in order to determine possible conflicts and design alternatives influenced by these changes. The analysis of the impact of requirement changes on related requirements can be based on requirements traceability. In this paper, we propose a requirements metamodel with well defined types of requirements relations. This metamodel represents the common concepts extracted from some prevalent requirements engineering approaches. The requirements relations in the metamodel are used to trace related requirements for change impact analysis. We formalize the relations. Based on this formalization, we define change impact rules for requirements. As a case study, we apply these rules to changes in the requirements specification for Course Management System.", "num_citations": "50\n", "authors": ["1217"]}
{"title": "Functional size measurement applied to UML-based user requirements\n", "abstract": " There is a growing interest in applying standardized methods for Functional Size Measurement (FSM) to Functional User Requirements (FUR) based on models in the Unified Modelling Language (UML). No consensus exists on this issue. We analyzed the demands that FSM places on FURs. We propose a requirements space with several levels of refinement, and show how UML can be used to specify FURs at these levels. FSM can be applied at the product level of UML-based FURs. We discuss our experience for three case studies and with two FSM methods: Function Point Analysis (FPA) and COSMIC Full Function Points (CFFP).", "num_citations": "41\n", "authors": ["1217"]}
{"title": "Control-flow semantics of use cases in UML\n", "abstract": " The control-flow for five kinds of use cases is analysed: for common use cases, variant use cases, component use cases, specialised use cases and for ordered use cases. The control-flow semantics of use cases\u2014and of the uses-relation, the extends-relation and the precedes-relation between use cases\u2014is described in terms of flowgraphs. Sequence diagrams of use cases are refined to capture the control-flow adequately. Guidelines are given for use case descriptions to attain a well-defined flow of control.", "num_citations": "40\n", "authors": ["1217"]}
{"title": "Generation and validation of traces between requirements and architecture based on formal trace semantics\n", "abstract": " The size and complexity of software systems make integration of the new/modified requirements to the software system costly and time consuming. The impact of requirements changes on other requirements, design elements and source code should be traced to determine parts of the software to be changed. Considerable research has been devoted to relating requirements and design artifacts with source code. Less attention has been paid to relating requirements (R) with architecture (A) by using well-defined semantics of traces. Traces between R&A might be manually assigned. This is time-consuming, and error prone. Traces might be incomplete and invalid. In this paper, we present an approach for automatic trace generation and validation of traces between requirements (R) and architecture (A). Requirements relations and architecture verification techniques are used. A trace metamodel is defined with\u00a0\u2026", "num_citations": "38\n", "authors": ["1217"]}
{"title": "Rule-based modularization in model transformation languages illustrated with ATL\n", "abstract": " This paper studies ways for modularizing transformation definitions in current rule-based model transformation languages. Two scenarios are shown in which the modular units are identified on the basis of relations between source and target metamodels and on the base of generic transformation functionality. Both scenarios justify modularization by requiring adaptability and reusability in transformation definitions. To enable representation and composition of the identified units, a transformation language must provide proper modular constructs and mechanisms for their integration. We evaluate several implementations of the scenarios by applying different transformation techniques: usage of explicit and implicit rule calls, and usage of rule inheritance. ATLAS Transformation Language (ATL) is used to illustrate these implementations. The experience with these scenarios shows that current languages provide a\u00a0\u2026", "num_citations": "35\n", "authors": ["1217"]}
{"title": "Analysis of crosscutting across software development phases based on traceability\n", "abstract": " Traceability of requirements and concerns enhances the quality of software development. We use trace relations to define crosscutting. As starting point, we set up a dependency matrix to capture the relationship between elements at two levels, eg concerns and representations of concerns. The definition of crosscutting is formalized in terms of linear algebra, and represented with matrices and matrix operations. In this way, crosscutting can be clearly distinguished from scattering and tangling. We apply this approach to the identification of crosscutting across early phases in the software life cycle, based on the transitivity of trace relations. We describe an illustrative case study to demonstrate the applicability of the analysis.", "num_citations": "31\n", "authors": ["1217"]}
{"title": "MISTRAL: A language for model transformations in the MOF meta-modeling architecture\n", "abstract": " In the Meta Object Facility (MOF) meta-modeling architecture a number of model transformation scenarios can be identified. It could be expected that a meta-modeling architecture will be accompanied by a transformation technology supporting the model transformation scenarios in a uniform way. Despite the fact that current transformation languages have similarities they are usually focused only on a particular scenario. In this paper we analyze the problems that prevent the usage of a single language for different transformation scenarios. The problems are rooted in the current organization of the MOF architecture and especially in its inability to define explicitly the mechanisms of instantiation and generalization found in different modeling languages. This causes a coupling between a transformation language and the instantiation mechanism specific for a given modeling language. We propose an\u00a0\u2026", "num_citations": "30\n", "authors": ["1217"]}
{"title": "Model driven architecture based XML processing\n", "abstract": " A number of applications that process XML documents interpret them as objects of application specific classes in a given domain. Generic interfaces such as SAX and DOM leave this interpretation completely to the application. Data binding provides some automation but it is not powerful enough to express complex relations between the application model and the document syntax. Since document schemas play the role of models of documents we can define document processing as model-to-model transformation in the context of Model Driven Architecture (MDA). We define a transformation language for specifying transformations from XML schemas to application models. Transformation execution is an interpretation of a document that results in a set of application objects.", "num_citations": "29\n", "authors": ["1217"]}
{"title": "Software measurement and functional programming\n", "abstract": " Software metrics have been investigated for the assessment of programs written in a functional programming language. The external attribute of programs considered in this thesis is their comprehensibility to novice programmers. This attribute has been operationalized in a number of experiments. The internal attribute of software which is examined is the structure. Two models for the structure of software have been employed: callgraphs and flowgraphs. The proposed control-flow model captures the operational semantics of function definitions. The objective measurement of the attributes has been supported by tools. The validation of structure metrics has been addressed in certain experiments for programming-in-the-small. The structure of type expressions in functional programs has been analysed in a case study. A simple framework for software metrication proved to be useful. The validation of metrics has been\u00a0\u2026", "num_citations": "28\n", "authors": ["1217"]}
{"title": "Tool support for generation and validation of traces between requirements and architecture\n", "abstract": " Traceability is considered crucial for establishing and maintaining consistency between software development artifacts. Although considerable research has been devoted to relating requirements and design artifacts with source code, less attention has been paid to relating requirements with architecture by using well-defined semantics of traces. We present a tool that provides trace establishment by using semantics of traces between R&A (Requirements and Architecture). The tool provides the following:(1) generation/validation of traces by using requirements relations and/or verification of architecture,(2) generation/validation of requirements relations by using traces. The tool uses the semantics of traces together with requirements relations and verification results for generating and validating traces. It is based on model transformations in ATL and term-rewriting logic in Maude.", "num_citations": "22\n", "authors": ["1217"]}
{"title": "Traceability-based change management in operational mappings\n", "abstract": " This paper describes an approach for the analysis of changes in model transformations in the Model Driven Architecture (MDA). Models should be amenable to changes in user requirements and technological platforms. Impact analysis of changes can be based on traceability of model elements. We propose a model for generating trace links between model elements and study scenarios for changes in source models and how to identify the impacted elements in the target model.", "num_citations": "21\n", "authors": ["1217"]}
{"title": "Analysis of crosscutting in early software development phases based on traceability\n", "abstract": " Crosscutting is usually described in terms of scattering and tangling. However, the distinction between these three concepts is vague. Precise definitions are mandatory for certain research areas such as the identification of crosscutting concerns at phases of the software life cycle. We propose a conceptual framework for crosscutting where crosscutting is defined in terms of trace relations. The definition of crosscutting is formalized using linear algebra, and represented with matrices and matrix operations. In this way, crosscutting can be clearly distinguished from scattering and tangling. With this definition and transitivity of trace relations, crosscutting can be identified and traced through software development, also in early phases. We describe some illustrative case studies to demonstrate the applicability of the analysis.", "num_citations": "20\n", "authors": ["1217"]}
{"title": "Change impact analysis for SysML requirements models based on semantics of trace relations\n", "abstract": " Change impact analysis is one of the applications of requirements traceability in software engineering community. In this paper, we focus on requirements and requirements relations from traceability perspective. We provide formal definitions of the requirements relations in SysML for change impact analysis. Our approach aims at keeping the model synchronized with what stakeholders want to be modeled, and possibly implemented as well, which we called as the domain. The differences between the domain and model are defined as external inconsistencies. The inconsistencies are propagated for the whole model by using the formalization of relations, and mapped to proposed model changes. We provide tool support which is a plug-in of the commercial visual software modeler BluePrint.", "num_citations": "18\n", "authors": ["1217"]}
{"title": "Analysis of crosscutting in model transformations\n", "abstract": " This paper describes an approach for the analysis of crosscutting in model transformations in the Model Driven Architecture (MDA). Software architectures should be amenable to changes in user requirements and technological platforms. Impact analysis of changes can be based on traceability of architectural design elements. Design elements have dependencies with other software artifacts but also evolve in time. Crosscutting dependencies may have a strong influence on modifiability of software architectures. We define crosscutting based on a traceability pattern. We present an impact analysis of crosscutting dependencies in transformations rules at model level as well as at metamodel level.", "num_citations": "18\n", "authors": ["1217"]}
{"title": "Change impact analysis of crosscutting in software architectural design\n", "abstract": " Software architectures should be amenable to changes in user requirements and implementation technology. The analysis of the impact of these changes can be based on traceability of architectural design elements. Design elements have dependencies with other software artifacts but also evolve in time. Crosscutting dependencies may have a strong influence on modifiability of software architectures. We present an impact analysis of crosscutting dependencies in architectural design. The analysis is supported by a matrix representation of dependencies.", "num_citations": "18\n", "authors": ["1217"]}
{"title": "Building adaptable and reusable XML applications with model transformations\n", "abstract": " We present an approach in which the semantics of an XML language is defined by means of a transformation from an XML document model (an XML schema) to an application specific model. The application specific model implements the intended behavior of documents written in the language. A transformation is specified in a model transformation language used in the Model Driven Architecture (MDA) approach for software development. Our approach provides a better separation of three concerns found in XML applications: syntax, syntax processing logic and intended meaning of the syntax. It frees the developer of low-level syntactical details and improves the adaptability and reusability of XML applications. Declarative transformation rules and the explicit application model provide a finer control over the application parts affected by adaptations. Transformation rules and the application model for an XML\u00a0\u2026", "num_citations": "16\n", "authors": ["1217"]}
{"title": "Static analysis of functional programs\n", "abstract": " In this paper, the static analysis of programs in the functional programming language Miranda\u2217 is described based on two graph models. A new control-flow graph model of Miranda definitions is presented, and a model with four classes of callgraphs. Standard software metrics are applicable to these models. A Miranda front end for Prometrix\u2020, a tool for the automated analysis of flowgraphs and callgraphs, has been developed. This front end produces the flowgraph and callgraph representations of Miranda programs. Some features of the metric analyser are illustrated with an example program. The tool provides a promising access to standard metrics on functional programs.", "num_citations": "16\n", "authors": ["1217"]}
{"title": "A multiple wire magnetostrictive delay line for improved signal and reduced reflections\n", "abstract": " The amplitude of the output signal per unit of cross sectional area of a magnetostrictive delay line decreases for increasing wire diameter due to the skin effect. For a fixed area a large output signal can be obtained by using a number of thin wires. An additional advantage is the reduced influence of inhomogeneities along the wires. Reflections in this multiple wire delay line can be reduced firstly by means of interference by fixing half of the number of wires to a mass and leaving the other half ends free, and/or secondly through spreading out the reflections by shifting the ends of the wires with respect to each other. A simple magneto-acoustic position measurement system using a multiple wire delay line and one single transmitting/receiving coil is demonstrated.", "num_citations": "15\n", "authors": ["1217"]}
{"title": "Crosscutting, what is and what is not?: A Formal definition based on a Crosscutting Pattern\n", "abstract": " Crosscutting is usually described in terms of scattering and tangling. However, the distinction between these concepts is vague, which could lead to ambiguous statements. Sometimes, precise definitions are required, eg for the formal identification of crosscutting concerns. We propose a conceptual framework for formalizing these concepts based on a crosscutting pattern that shows the mapping between elements at two levels, eg concerns and representations of concerns. The definitions of the concepts are formalized in terms of linear algebra, and visualized with matrices and matrix operations. In this way, crosscutting can be clearly distinguished from scattering and tangling. Using linear algebra, we demonstrate that our definition generalizes other definitions of crosscutting as described by Masuhara & Kiczales [21] and Tonella and Ceccato [28]. The framework can be applied across several refinement levels assuring traceability of crosscutting concerns. Usability of the framework is illustrated by means of applying it to several areas such as change impact analysis, identification of crosscutting at early phases of software development and in the area of model driven software development.", "num_citations": "14\n", "authors": ["1217"]}
{"title": "Mining early aspects based on syntactical and dependency analyses\n", "abstract": " Aspect-Oriented Requirements Engineering focuses on the identification and modularisation of crosscutting concerns at early stages. There are different approaches in the requirements engineering community to deal with crosscutting concerns, introducing the benefits of the application of aspect-oriented approaches at these early stages of development. However, most of these approaches rely on the use of Natural Language Processing techniques for aspect identification in textual documents and thus, they lack a unified process that generalises its application to other requirements artefacts such as use case diagrams or viewpoints. In this paper, we propose a process for mining early aspects, i.e. identifying crosscutting concerns at the requirements level. This process is based on a crosscutting pattern where two different domains are related. These two different domains may represent different artefacts of the\u00a0\u2026", "num_citations": "12\n", "authors": ["1217"]}
{"title": "A synthesis-based approach to transformations in an MDA software development process\n", "abstract": " In an MDA software development process, models are repeatedly transformed to other models to finally achieve a set of models with enough detail to implement the system. Generally, there are multiple ways to transform one model into another model. Alternative target models differ in quality properties and the selection of a particular model is determined on the base of specific requirements. Current transformation languages only provide means to specify transformations but do not help to identify and select among alternative transformations. In this paper we propose a synthesis-based software development process with a set of techniques for constructing a transformation space for a given transformation problem. The process takes a source model, its meta-model and the meta-model of the target, and quality requirements as input and generates a transformation space.", "num_citations": "11\n", "authors": ["1217"]}
{"title": "A conceptual formalization of crosscutting in AOSD\n", "abstract": " We propose a formalization of crosscutting based on a conceptual framework for AOSD. Crosscutting is clearly distinguished from the related concepts scattering and tangling. The definitions of these concepts are formalized and visualized with matrices and matrix operations. This allows more precise reasoning about crosscutting.", "num_citations": "9\n", "authors": ["1217"]}
{"title": "Identification of crosscutting in software design\n", "abstract": " The identification of crosscutting is a prerequisite for applying aspect-oriented techniques in software development. We present an operationalization of the definition of crosscutting to support this identification. We use matrices to represent the relation between design elements at different levels of abstraction. We present some case studies about the identification of crosscutting concerns in order to illustrate the application of our approach. In particular, we apply the approach to the identification of crosscutting in some of the GoF\u2019s design patterns.", "num_citations": "7\n", "authors": ["1217"]}
{"title": "Axiomatic validation in the software metric development process\n", "abstract": " Axiomatic Validation in the Software Metric Development Process \u2014 University of Twente Research Information Skip to main navigation Skip to search Skip to main content University of Twente Research Information Logo Home Profiles Research Units Projects Research output Datasets Activities Prizes Press / Media Search by expertise, name or affiliation Axiomatic Validation in the Software Metric Development Process Klaas van den Berg, PM van den Broek Research output: Chapter in Book/Report/Conference proceeding \u203a Chapter \u203a Academic \u203a peer-review Overview Original language Undefined Title of host publication Software Measurement Editors A. Melton Place of Publication London, UK Publisher International Thomson Computer Press Pages 157-177 Number of pages 21 ISBN (Print) 18503271787 Publication status Published - 1995 Keywords EWI-10098 SE-SMM: Software Measurement and Metrics \u2026", "num_citations": "7\n", "authors": ["1217"]}
{"title": "Experimental evaluation of a tool for change impact prediction in requirements models: Design, results, and lessons learned\n", "abstract": " There are commercial tools like IBM Rational RequisitePro and DOORS that support semi-automatic change impact analysis for requirements. These tools capture the requirements relations and allow tracing the paths they form. In most of these tools, relation types do not say anything about the meaning of the relations except the direction. When a change is introduced to a requirement, the requirements engineer analyzes the impact of the change in related requirements. In case semantic information is missing to determine precisely how requirements are related to each other, the requirements engineer generally has to assume the worst case dependencies based on the available syntactic information only. We developed a tool that uses formal semantics of requirements relations to support change impact analysis and prediction in requirements models. The tool TRIC (Tool for Requirements Inferencing and\u00a0\u2026", "num_citations": "6\n", "authors": ["1217"]}
{"title": "Operation composition in model transformations with complex source patterns\n", "abstract": " In model transformations, rules handle mapping between source metamodel elements and target metamodel elements. There are cases in which more complex structures in the source have to be selected. In some transformation languages, these complex source patterns require decomposition of transformation specifications into multiple rules. This decomposition negatively affects qualities of transformation specifications such as modifiability and consistency. The handling of a complex source pattern by a single transformation rule requires composition at finer granularity, ie, operation composition. In this paper, we show how operation composition improves the quality of transformation specifications for complex source patterns. As an illustration, we implemented a complex source pattern transformation for agent systems in two wellknown model transformation languages, ATL and Tefkat. ATL supports composition at rule level, and Tefkat supports composition at operation level. We describe the requirements for transformation languages in order to support the handling of complex source patterns in single transformation rules. We discuss some transformation mechanisms that provide operation composition.", "num_citations": "6\n", "authors": ["1217"]}
{"title": "An ontology-based metalanguage with explicit instantiation\n", "abstract": " Model Driven Engineering (MDE) is a promising paradigm for software development. It raises the level of abstraction in software development by treating models as primary artifacts. The practical application of this paradigm is seriously endangered by the current weak modeling foundation of the approach. The objective of this work is to provide a sound foundation to modeling in MDE based on Formal Ontologies. MDE advocates the definition of the abstract syntax of modeling languages, both domain-specific and general-purpose, by means of metamodels. Metamodels are expressed in a specialized metalanguage. The definition of a metamodel is a recurring task in MDE and requires sound and formal support. The lack of such support causes deficiencies such as conceptual anomalies in the modeling languages, limited applicability of crucial MDE operations like model transformation and querying, and limited reuse of model libraries. From philosophical point of view, metamodels can be seen as ontological commitments. Metalanguages have to provide constructs for building ontological theories as a base for modeling languages. In this thesis, we present a new metalanguage derived from the study of Formal Ontology. This metalanguage, called OGML, raises the level of abstraction of metamodels from pure abstract syntax to semantics descriptions based on ontologies. Thus, the language developers can make conscious choices for their modeling concepts and can explicitly define important relations such as instantiation. With this metalanguage, we aim at a precise conceptual and formal foundation for metamodeling. OGML is capable of\u00a0\u2026", "num_citations": "4\n", "authors": ["1217"]}
{"title": "Un marco Conceptual para la Formalizaci\u00f3n de crosscutting en Desarrollos Orientados a Aspectos\n", "abstract": " El concepto de crosscutting suele ser descrito en t\u00e9rminos de scattering y tangling1. Sin embargo, la distinci\u00f3n entre estos t\u00e9rminos no suele ser concisa, llevando a situaciones ambiguas. En muchas ocasiones se hace necesario tener definiciones m\u00e1s precisas, por ejemplo para determinadas \u00e1reas de investigaci\u00f3n como la identificaci\u00f3n formal de asuntos transversales o crosscutting concerns. Proponemos un marco de trabajo conceptual para la formalizaci\u00f3n de estos conceptos basado en lo que denominamos un patr\u00f3n de crosscutting que representa la relaci\u00f3n entre elementos de dos niveles diferentes, por ejemplo concerns y una representaci\u00f3n de dichos concerns. Estos conceptos son definidos formalmente en t\u00e9rminos del \u00e1lgebra lineal y representados mediante matrices y operaciones con dichas matrices. De este modo, el concepto de crosscutting puede ser claramente diferenciado de los t\u00e9rminos de scattering y tangling. La utilidad de las matrices de dependencias presentadas se ilustra mediante el an\u00e1lisis de crosscutting a lo largo de una serie de niveles de refinamiento, que puede ser formalizado en lo que hemos denominado la concatenaci\u00f3n de patrones de crosscutting.", "num_citations": "4\n", "authors": ["1217"]}
{"title": "Disentangling Crosscutting in AOSD: Formalization based on a Crosscutting Pattern.\n", "abstract": " Crosscutting is usually described in terms of scattering and tangling. However, the distinction between these concepts is vague, which could lead to ambiguous statements. Sometimes, precise definitions are required, eg, for the formal identification of crosscutting concerns. We propose a conceptual framework for formalizing these concepts based on a crosscutting pattern that shows the mapping between elements at two levels, eg, concerns and representations of concerns. The definitions of the concepts are formalized in terms of linear algebra, and visualized with matrices and matrix operations. In this way, crosscutting can be clearly distinguished from scattering and tangling. The usability of dependency matrices is illustrated in the analysis of crosscutting across several refinement levels, which can be formalized through the cascading of the crosscutting pattern.", "num_citations": "4\n", "authors": ["1217"]}
{"title": "Disentangling crosscutting in AOSD: A conceptual framework\n", "abstract": " Crosscutting is usually described in terms of scattering and tangling. However, the distinction between these three concepts is vague, sometimes leading to ambiguous statements and confusion. We propose a conceptual framework for crosscutting. Crosscutting is clearly distinguished from scattering and tangling. The definitions of these concepts are formalized and visualized with matrices and matrix operations. We discuss the relation between the concepts crosscutting, decomposition and coupling.", "num_citations": "4\n", "authors": ["1217"]}
{"title": "A language for model transformations in the MOF meta-modeling architecture\n", "abstract": " In the Meta Object Facility (MOF) meta-modeling architecture a number of model transformation scenarios can be identified. It could be expected that a meta-modeling architecture will be accompanied by a transformation technology supporting the model transformation scenarios in a uniform way. Despite the fact that current transformation languages have similarities they are usually focused only on a particular scenario. In this paper we analyse the problems that prevent the usage of a single language for different transformation scenarios. The problems are rooted in the current organization of the MOF architecture and especially in its inability to define explicitly the mechanisms of instantiation and generalization found in different modeling languages. This causes a tight coupling between a transformation language and the instantiation mechanism specific at the level it operates upon. We propose an organization of the MOF architecture based on a simple and uniform representation of all model elements no matter at which level they are defined. In this framework different instantiation and generalization mechanisms are represented as a set of functions. We present a transformation language based on that framework which is independent of the instantiation and generalization mechanism specific for a given model.", "num_citations": "4\n", "authors": ["1217"]}
{"title": "Generalised approach to software structure metrics\n", "abstract": " The aim of this paper is to generalise the Fenton-Whitty-Kaposi (FWK) approach to structure software metrics by considering arbitrary sets of decomposition operations for flowgraphs. In the FWK approach, decomposition of flowgraphs is unique, but the number of associated metric functions is not finite and these functions are all independent. In general, the decomposition of flowgraphs is not unique, which leads to constraints on the associated metric functions. Here we derive these constraints explicitly for two special cases, where we consider only the two operations sequencing and nesting as decomposition operations. It is shown that the two resulting classes of structure metrics are contained in the class of recursive structure metrics of the FWK approach.", "num_citations": "4\n", "authors": ["1217"]}
{"title": "A rule-based approach for evolution of AADL models based on changes in functional requirements\n", "abstract": " The increasing complexity of software systems makes change management costly and time consuming. To ensure the cost-effective system longevity and endurance, it is crucial to apply change management in the early stages of software development. In this paper, we introduce a rule-based approach to make software architecture evolving based on counter examples provided by a model checker for violated, changing functional requirements. The approach works on software architecture in AADL and is based on verifying functional requirements using Maude model checker. Our goal is to provide guidelines to the architect about potential changes. Using an industrial example, we show how our approach helps in determining changes to produce a new version of the architecture.", "num_citations": "3\n", "authors": ["1217"]}
{"title": "Validation of structure metrics: a case study\n", "abstract": " A framework for the validation of axiomatic structure metrics is presented. In a case study, the comprehensibility of type expressions in the functional programming language Miranda has been investigated. A structure metric for the comprehensibility of type expressions has been developed together with internal and external axioms. This structure metric has been validated experimentally. The calibrated metric function results in a good prediction of the comprehensibility.< >", "num_citations": "3\n", "authors": ["1217"]}
{"title": "Programmers' performance on structured versus nonstructured function definitions\n", "abstract": " A control-flow model for functional programs is used in an experimental comparison of the performance of programmers on structured versus nonstructured Miranda function definitions. The performance is taken as a measure of the comprehensibility of functional programs. The experimental set-up is similar to the Scanlan study (1989). However, in the present study, a two-factor repeated measures design is used in the statistical analysis. The control-flow model appears to be useful in the shaping of the experiment. A significantly better performance has been found for structured function definitions on both dependent variables: the time needed to answer questions about the function definitions and the proportion correct answers. Moreover, for structured function definitions, a counter-intuitive result has been obtained: there are significantly fewer errors in larger definitions than in smaller ones.", "num_citations": "2\n", "authors": ["1217"]}
{"title": "Axiomatic testing of structure metrics\n", "abstract": " Axiomatic testing of software metrics is described, based on axioms from representational measurement theory. In a case study, the axioms are given for the formal relational structure and the empirical relational structure. Two approaches to axiomatic testing are elaborated: deterministic testing and probabilistic testing.< >", "num_citations": "2\n", "authors": ["1217"]}
{"title": "Empirical evaluation of change impact predictions using a requirements management tool with formal relation types\n", "abstract": " Background: This research was part of a master\u2019s thesis to evaluate the impact of using TRIC, a software tool with formal requirements relationship types, on the quality of change impact prediction in software. Objective: To analyze the real-world impact of using a software tool with formal requirements relationship types; for the purpose of the evaluation of effectiveness of tools; with respect to the quality of change impact predictions; in the context of software requirements management; from the viewpoint of system maintenance engineers. Method: This research features a quasi-experiment with 21 master\u2019s degree students predicting change impact for five change scenarios on a realworld software requirements specification. The quality of change impact predictions was measured by the F-measure and the time in seconds to complete the prediction.Two formal hypotheses were developed. Null hypothesis 1 stated that the F-scores of change impact predictions of system maintenance engineers using TRIC will be equal to or less than those from system maintenance engineers not using TRIC. Null hypothesis 2 stated that the time taken to complete change impact predictions of system maintenance engineers using TRIC will be equal or longer than those from system maintenance engineers not using TRIC. The data were collected by a web application and analyzed using ANOVA and \u03c72 statistical analyses. Results: No significant difference in F-scores between TRIC and the other groups was detected. TRIC was found to be significantly slower for four out of five change impact predictions. These inferences were made at \u03b1= 0, 05 with a mean\u00a0\u2026", "num_citations": "1\n", "authors": ["1217"]}
{"title": "A metamodeling approach to incremental model changes\n", "abstract": " For the next step in raising the level of abstraction in software development, Kent (Kent, 2002) proposed an approach for Model Driven Engineering (MDE). With MDE it is possible to raise the level of abstraction such that decisions can be made regardless the implementation language. Business rules can be defined on a higher level so in fact programming happens at the level of models. Model transformations allow models to be turned into other models, for instance models of source code or other less abstract models. This thesis is about model\u2010to\u2010model and model\u2010to\u2010text transformations. Usually modelto\u2010 text aspects of thoughts are omitted because the text to be generated can also be modeled and thus a model\u2010to\u2010model transformation should be sufficient. Because in this thesis we focus on incremental model changes and also incremental changing the files in the file system, we explicitly studied model\u2010to\u2010text transformation approaches to keep model and text synchronized. In this thesis we use different terms for model\u2010tomodel and model\u2010to\u2010text transformations. We use the term transformation when we are dealing with models as logical entities, we use the term generation when we are dealing with files as physical entities. For instance, in a model\u2010to\u2010text transformation the model will be transformed and the output will be generated files; the generation of files is due to the transformation of a model. We studied the possibilities to perform specific file generation and file modification based on a set of changes to a model. In our approach we started investigating state of the art modeling environments and concluded that they were not able to\u00a0\u2026", "num_citations": "1\n", "authors": ["1217"]}
{"title": "Validation in the Software Metric Development Process\n", "abstract": " In this paper the validation of software metrics will be examined. Two approaches will be combined: representational measurement theory and a validation network scheme. The development process of a software metric will be described, together with validities for the three phases of the metric development process. Representation axioms from measurement theory are used both for the formal and empirical validation. The differentiation of validities according to these phases unifies several validation approaches found in the software metric's literature.", "num_citations": "1\n", "authors": ["1217"]}
{"title": "Syntactic complexity metrics and the readability of programs in a functional computer language\n", "abstract": " This article reports on thc dcfinition and the mcasurernent of the software complexity metrics of Halstead (1977) and McCabc (1976) for programs writtcn in the functional progaming language Miranda. An automated measurement of thcsc mctrics is describcd. In a casc study, the correlation is established between the complexity metrics and the expert assessment of the readability of programs in Miranda, and compared with those for programs in Pascal.", "num_citations": "1\n", "authors": ["1217"]}
{"title": "Some Experiences with Two Intelligent Tutoring Systems for Teaching Computer Programming: PROUST and the LISP-Tutor\n", "abstract": " In this article, we report on our experiences with PROUST and the LISP-Tutor, which are intelligent tutoring systems (ITS) for teaching introductory programming in respectively Pascal and LISP. After a brief discussion of the history of intelligent programming tutors, and the presentation of a general framework for discussing the architecture of such systems, the functional architecture and the performance of PROUST and the LISP-Tutor are described. Then, we are in a position for a critical evaluation and comparison of the two systems. Finally, it is discussed what the strengths and weaknesses of PROUST, the LISP-Tutor, and more recent systems inspired by them may learn us for the development of new programming tutors.", "num_citations": "1\n", "authors": ["1217"]}