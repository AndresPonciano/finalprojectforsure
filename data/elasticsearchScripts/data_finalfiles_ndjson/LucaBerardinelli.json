{"title": "Cross-disciplinary engineering with AutomationML and SysML\n", "abstract": " AutomationML (AML) is an emerging standard in the automation domain to represent and exchange artifacts between heterogeneous engineering tools used in different disciplines, such as mechanical and electrical engineering.  The Systems Modeling Language (SysML) is a modeling standard influenced by software modeling languages, such as UML, typically adopted in the early phases of engineering processes.  This paper investigates commonalities and differences of the structural modeling parts of AML (CAEX) and SysML (block diagrams) in support of establishing tool-independent interoperability.  This support for cross-disciplinary modeling is facilitated by a bridge between AML and SysML built on model-driven interoperability techniques.  We demonstrate the interoperability between AML and SysML with a case study concerning a lab-sized production system.", "num_citations": "35\n", "authors": ["1965"]}
{"title": "Model-based co-evolution of production systems and their libraries with AutomationML\n", "abstract": " System models are essential in planning, designing, realizing, and maintaining production systems. AutomationML (AML) is an emerging standard to represent and exchange heterogeneous artifacts throughout the complete system life cycle and is more and more used as a modeling language. AML is designed as a flexible, prototype-based language able to represent the full spectrum of different artifacts. It may be utilized to build reusable libraries containing prototypical elements to build up production systems by using clones. However, libraries have to evolve over time, e.g., to reflect bug fixes, new features or refactorings, and so system models have to co-evolve to reflect the changes in the libraries. To tackle this co-evolution challenge, we specify in this paper the relationship between library elements, i.e., prototypes, and system elements, i.e., clones, by establishing a formal model for prototype-based modeling\u00a0\u2026", "num_citations": "31\n", "authors": ["1965"]}
{"title": "Model-driven systems engineering: Principles and application in the CPPS domain\n", "abstract": " To engineer large, complex, and interdisciplinary systems, modeling is considered as the universal technique to understand and simplify reality through abstraction, and thus, models are in the center as the most important artifacts throughout interdisciplinary activities within model-driven engineering processes. Model-Driven Systems Engineering (MDSE) is a systems engineering paradigm that promotes the systematic adoption of models throughout the engineering process by identifying and integrating appropriate concepts, languages, techniques, and tools. This chapter discusses current advances as well as challenges towards the adoption of model-driven approaches in cyber-physical production systems (CPPS) engineering. In particular, we discuss how modeling standards, modeling languages, and model transformations are employed to support current systems engineering processes in the CPPS\u00a0\u2026", "num_citations": "22\n", "authors": ["1965"]}
{"title": "Energy consumption analysis and design of energy-aware WSN agents in fUML\n", "abstract": " Wireless Sensor Networks (WSN) are nowadays applied to a wide set of domains (e.g., security, health). WSN are networks of spatially distributed, radio-communicating, battery-powered, autonomous sensor nodes. WSN are characterized by scarcity of resources, hence an application running on them should carefully manage its resources. The most critical resource in WSN is the nodes\u2019 battery.               In this paper, we propose model-based engineering facilities to analyze the energy consumption and to develop energy-aware applications for WSN that are based on Agilla Middleware. For this aim i) we extend the Agilla Instruction Set with the new battery instruction able to retrieve the battery Voltage of a WSN node at run-time; ii) we measure the energy that the execution of each Agilla instruction consumes on a target platform; and iii) we extend the Agilla Modeling Framework with a new analysis that\u00a0\u2026", "num_citations": "19\n", "authors": ["1965"]}
{"title": "Combining fUML and profiles for non-functional analysis based on model execution traces\n", "abstract": " For developing software systems it is crucial to consider non-functional properties already in an early development stage to guarantee that the system will satisfy its non-functional requirements. Following the model-based engineering paradigm facilitates an early analysis of non-functional properties of the system being developed based on the elaborated design models. Although UML is widely used in model-based engineering, it is not suitable for model-based analysis directly due to its lack of formal semantics. Thus, current model-based analysis approaches transform UML models into formal languages dedicated for analyses purpose, which may introduce accidental complexity of implementing the required model transformations.", "num_citations": "15\n", "authors": ["1965"]}
{"title": "A Model-Driven Engineering Workbench for CAEX Supporting Language Customization and Evolution\n", "abstract": " Computer Aided Engineering Exchange (CAEX) is one of the most promising standards when it comes to data exchange between engineering tools in the production system automation domain. This is also reflected by the current emergence of AutomationML (AML), which uses CAEX as its core representation language. However, with the increasing use of CAEX, important language engineering challenges arise. One of these challenges is the customization of CAEX for its usage in superior standards, such as AML, which requires the precise specification of the language including the formalization and validation of additional usage rules. Another highly topical challenge is the ongoing evolution of CAEX as has recently happened with the transition from version 2.15 to version 3.0. Further challenges include the provisioning of editing facilities and visualizations of CAEX documents such that they can be inspected\u00a0\u2026", "num_citations": "13\n", "authors": ["1965"]}
{"title": "Integrating Performance Modeling in Industrial Automation through AutomationML and PMIF\n", "abstract": " Data exchange is a critical issue within the multi-disciplinary engineering process of cyber physical production systems (CPPS). AutomationML (AML) is an emerging standard in the this field to represent and exchange artifacts between heterogeneous engineering tools used in mechanical, electrical, and software engineering domains. However, the interoperability of different exchange standards may be needed in order to integrate even further tools in tool chains. For instance, the Performance Model Interchange Format (PMIF) is a common representation devised in the performance engineering domain for model-based system performance analysis and simulation based on Queueing Network Models (QNM). Of course, such aspects are also of particular interest when designing a CPPS. This paper investigates, with the help of a case study, the combination of AML and PMIF as an enabling step towards an early\u00a0\u2026", "num_citations": "11\n", "authors": ["1965"]}
{"title": "Testing uncertainty of cyber-physical systems in IoT cloud infrastructures: combining model-driven engineering and elastic execution\n", "abstract": " Today's cyber-physical systems (CPS) span IoT and cloud-based datacenter infrastructures, which are highly heterogeneous with various types of uncertainty. Thus, testing uncertainties in these CPS is a challenging and multidisciplinary activity. We need several tools for modeling, deployment, control, and analytics to test and evaluate uncertainties for different configurations of the same CPS. In this paper, we explain why using state-of-the art model-driven engineering (MDE) and model-based testing (MBT) tools is not adequate for testing uncertainties of CPS in IoT Cloud infrastructures. We discus how to combine them with techniques for elastic execution to dynamically provision both CPS under test and testing utilities to perform tests in various IoT Cloud infrastructures.", "num_citations": "9\n", "authors": ["1965"]}
{"title": "A Unified Approach to Model Non-Functional Properties of Mobile Context-Aware Software\n", "abstract": " Modeling context-awareness is becoming a primary activity for software engineers that design applications for mobile devices. In fact, software applications running on such devices need to be aware of their context (that may rapidly change) to adapt their services and offer the best quality (intended as a combination of non-functional properties) in any context. Thus the need of instruments to manage mobility, context-awareness and non-functional characteristics is critical to build software systems in ubiquitous and mobile domain. In this paper we introduce a framework to uniformly model different types of mobility and context-awareness so that the modeling and analysis of non-functional properties of such systems can be supported in an integrated environment. To enable non-functional analysis, we devise the integration of non-functional parameters in the modeling framework. In particular, we present an UML implementation of our framework within the Magic-Draw modeling environment, with the support of existing UML profiles for modeling context-awareness and non-functional properties. We finally show an example of modeling and analysis of reliability in the eHealth domain.", "num_citations": "9\n", "authors": ["1965"]}
{"title": "Modeling and provisioning iot cloud systems for testing uncertainties\n", "abstract": " Modern Cyber-Physical Systems (CPS) and Internet of Things (IoT) systems consist of both loosely and tightly interactions among various resources in IoT networks, edge servers and cloud data centers. These elements are being built atop virtualization layers and deployed in both edge and cloud infrastructures. They also deal with a lot of data through the interconnection of different types of networks and services. Therefore, several new types of uncertainties are emerging, such as data, actuation, and elasticity uncertainties. This triggers several challenges for testing uncertainty in such systems. However, there is a lack of novel ways to model and prepare the right infrastructural elements covering requirements for testing emerging uncertainties. In this paper, first we present techniques for modeling CPS/IoT Systems and their uncertainties to be tested. Second, we introduce techniques for determining and\u00a0\u2026", "num_citations": "8\n", "authors": ["1965"]}
{"title": "Cardinality-based variability modeling with AutomationML\n", "abstract": " Variability modeling is an emerging topic in the general field of systems engineering and, with current trends such as Industrie 4.0, it gains more and more interest in the domain of production systems. Therefore, it is not sufficient to describe systems in several specific cases, but instead families of systems have to be used. In this paper we introduce a role class library for AutomationML to explicitly represent variability. This allows to exchange not only system descriptions but also system family descriptions. We argue for a light-weight extension of AutomationML. The variability-based modeling approach is based on cardinalities, which is a well-known concept from conceptual modeling and feature modeling. Furthermore, we also show how instantiations of variability models can be validated by our EMF-based AutomationML workbench.", "num_citations": "8\n", "authors": ["1965"]}
{"title": "Towards model quality assurance for multi-disciplinary engineering\n", "abstract": " In multi-disciplinary engineering (MDE) projects, information models play an important role as inputs to and outputs of engineering processes. In MDE projects, engineers collaborate from various disciplines, such as mechanical, electrical, and software engineering. These disciplines use general-purpose and domain-specific models in their engineering context. Important challenges include model synchronization and model quality assurance (MQA) that are covered insufficiently in current MDE practices. This chapter focuses on the needs and approaches for MQA in MDE environments. We address the following two research questions (RQs): The first RQ focuses on investigating needs and expected capabilities that are required for a systematic review process that focuses on changes in MDE design models (RQ-MQA1). The second RQ focuses on how to extend a standard modeling language for MDE\u00a0\u2026", "num_citations": "8\n", "authors": ["1965"]}
{"title": "On the evolution of CAEX: A language engineering perspective\n", "abstract": " CAEX is one of the most promising standards when it comes to data exchange between engineering tools in the production system automation domain. This is also reflected by the current emergence of AutomationML, which uses CAEX as its core representation data format. Having such standards at hand, the question arises how to deal with the evolution of such standards as is currently happening with the transition from CAEX 2.15 to CAEX 3.0. In this paper, we take a language engineering point of view to the evolution of engineering data formats. In particular, we present how CAEX can be formulated in a model-based framework, which allows to reason about evolution of the data format as well as its impact on the data stored in such evolving formats. By this, not only the migration process of existing data to the new format version is possible, but also a more theoretical investigation on information preservation is\u00a0\u2026", "num_citations": "8\n", "authors": ["1965"]}
{"title": "DevopsML: Towards modeling devops processes and platforms\n", "abstract": " DevOps and Model Driven Engineering (MDE) provide differently skilled IT stakeholders with methodologies and tools for organizing and automating continuous software engineering activities-from development to operations, and using models as key engineering artifacts, respectively. Both DevOps and MDE aim at shortening the development life-cycle, dealing with complexity, and improve software process and product quality.", "num_citations": "6\n", "authors": ["1965"]}
{"title": "fUML-driven design and performance analysis of software agents for wireless sensor network\n", "abstract": " The growing request for high-quality applications for wireless sensor network (wsn) demands model-driven approaches that facilitate the design and the early validation of extra-functional properties by combining design and analysis models. for this purpose, uml and several analysis-specific languages can be chosen and weaved through translational approaches. however, the complexity brought by the underlying technological spaces may hinder the adoption of uml-based approaches in the wsn domain. the recently introduced foundational uml (fuml) standard provides a formal semantics to a strict uml subset, enabling the execution of uml models.               Leveraging fUML, we realize the Agilla Modeling Framework, an executable fUML model library, to conveniently design agent-based software applications for WSN and analyze their performance through the execution of the corresponding fUML model\u00a0\u2026", "num_citations": "6\n", "authors": ["1965"]}
{"title": "Modeling and timing simulation of agilla agents for WSN applications in executable UML\n", "abstract": " Wireless Sensor Networks are becoming one of the most successful choices for the development and deployment of a wide range of applications, from intelligent homes to environment monitoring. In response to the growing demand for fast development of WSN applications, we extend an existing UML-based approach for the design and code generation of Agilla applications with functional simulation and timing analysis capabilities through executable UML models. The proposed approach makes use of both a UML profile and an executable model library for Agilla. Execution times, annotated on Agilla instructions and patterns in the library, are given as additional input parameters during the model execution to carry out a timing analysis of the simulated Agilla applications. Modeling and simulation activities rely on MagicDraw\u00a9 and Cameo Simulation Toolkit\u00a9. A running case study is provided to show the\u00a0\u2026", "num_citations": "5\n", "authors": ["1965"]}
{"title": "Towards Semantic Integration of Plant Behavior Models with AutomationML's Intermediate Modeling Layer.\n", "abstract": " AutomationML is an emerging IEC standard for storing and exchanging engineering data among the heterogeneous software tools involved in the engineering of production systems. One important subset of such engineering data is the plant behavior. To make this data exchangeable, AutomationML uses the existing industry data format PLCopen XML. However, at the development stages of production systems, the plant behavior is usually defined using other representation means, such as Gantt charts, impulse diagrams, and sequential function charts. To make such plant behavior models exchangeable, AutomationML introduces the so-called Intermediate Modeling Layer (IML) with corresponding transformation rules to decouple the employed modeling languages from the target format PLCopen XML. However, IML itself as well as the transformations from and to IML are only semi-formally described. This not only hinders the adoption of IML as a common language for representing plant behavior, but also renders impossible the composition of heterogeneous plant behavior models for carrying out integrated analyses of the global plant behavior. In this work, we aim at clarifying syntactical and semantical aspects of IML by proposing a metamodel and operational semantics for IML. This constitutes the first step towards formalizing and validating transformations between behavioral modeling languages currently employed in the production domain (eg, Gantt charts), IML, and PLCopen XML. Having this foundation, we aim at utilizing IML as the semantic domain for the composition of heterogeneous plant behavior models.", "num_citations": "3\n", "authors": ["1965"]}
{"title": "Model-driven engineering of middleware-based ubiquitous services\n", "abstract": " Supporting the execution of service-oriented applications over ubiquitous networks specifically calls for a service-oriented middleware (SOM), which effectively enables ubiquitous networking while benefiting from the diversity and richness of the networking infrastructure. However, developing ubiquitous applications that exploit the specific features offered by a SOM might be a time-consuming task, which demands a deep knowledge spanning from the application domain concepts down to the underlying middleware technicalities. In this paper, first we present the model-driven development process underpinning ubiSOAP, a SOM for the ubiquitous networking domain. Then, based on the domain concepts defined by the conceptual model of ubiSOAP, its architecture and its technicalities, we propose a domain-specific environment, called ubiDSE, that aids the development of applications that exploits the ubi\u00a0\u2026", "num_citations": "3\n", "authors": ["1965"]}
{"title": "MICE: Monitoring and modeling the context evolution\n", "abstract": " Context is an application-specific set of heterogeneous data that a context-aware system should be capable to sense to accordingly adapt its behavior. Context evolution may affect the qualities of the functionalities provided by context-aware systems, in terms of variations of its non-functional properties. In this paper we propose a distributed tool that is capable to monitor, retrieve and arrange heterogeneous data from any IP-enabled device in a set of state-based awareness manager models. The latter are meant to model the context evolution and to be integrated in model-driven approaches to evaluate the impact of the evolution of context on the quality of the provisioned services.", "num_citations": "3\n", "authors": ["1965"]}
{"title": "Providing lightweight and adaptable service technology for information and communication (PLASTIC) in the mobile ehealth case study\n", "abstract": " In this paper we briefly describe a case study, i.e. the Mobile eHealth (MeH), developed in the context of the IST PLASTIC project aimed at supporting self-adapting and context-aware services. The goal of the case study is to show how to model a service-based application and to demonstrate that model-based solutions are suitable to generate Quality of Service (QoS) models and adaptable code from service models.", "num_citations": "2\n", "authors": ["1965"]}
{"title": "VISION as a support to cognitive behavioural systems\n", "abstract": " Cognitive behavioral systems would definitely benefit from a supporting technology able to automatically recognize the context where humans operate, their gestures and even facial expressions. Such capability poses challenges for many researchers in various fields because the ultimate goal is to transfer to machines the human capability of representing and reasoning on the environment and its elements. The automation can be achieved through a supporting infrastructure able to capture a huge amount of information from the environment, much more than humans do, and sending it to a processing unit able to build a representation of the context that would catch all elements necessary to interpret the specific environment.               The goal of this paper is to present the VISION infrastructure and how it can support cognitive systems. Indeed, VISION is a software/hardware infrastructure that overcomes the\u00a0\u2026", "num_citations": "2\n", "authors": ["1965"]}
{"title": "AIDOaRt: AI-augmented Automation for DevOps, a Model-based Framework for Continuous Development in Cyber-Physical Systems\n", "abstract": " With the emergence of Cyber-Physical Systems (CPS), the increasing complexity in development and operation demands for an efficient engineering process. In the recent years DevOps promotes closer continuous integration of system development and its operational deployment perspectives. In this context, the use of Artificial Intelligence (AI) is beneficial to improve the system design and integration activities, however, it is still limited despite its high potential. AIDOaRT is a 3 years long H2020-ECSEL European project involving 32 organizations, grouped in clusters from 7 different countries, focusing on AI-augmented automation supporting modelling, coding, testing, monitoring and continuous development of Cyber-Physical Systems (CPS). The project proposes to apply Model-Driven Engineering (MDE) principles and techniques to provide a framework offering proper AI-enhanced methods and related tooling\u00a0\u2026", "num_citations": "1\n", "authors": ["1965"]}
{"title": "Leveraging Model-driven Technologies for JSON Artefacts: the Shipyard Case Study\n", "abstract": " With JSON's increasing adoption, the need for structural constraints and validation capabilities led to JSON Schema, a dedicated meta-language to specify languages which are in turn used to validate JSON documents. Currently, the standardisation process of JSON Schema and the implementation of adequate tool support (e.g., validators and editors) are work in progress. However, the periodic issuing of newer JSON Schema drafts makes tool development challenging. Nevertheless, many JSON Schemas as language definitions exist, but JSON documents are still mostly edited in basic text-based editors. To tackle this challenge, we investigate in this paper how Model-Driven Engineering (MDE) methods for language engineering can help in this area. Instead of re-inventing the wheel of building up particular technologies directly for JSON, we study how the existing MDE infrastructures may be utilized for JSON\u00a0\u2026", "num_citations": "1\n", "authors": ["1965"]}
{"title": "Visualizing multi-dimensional state spaces using selective abstraction\n", "abstract": " Domain-specific languages (DSLs) are popular for many reasons, such as increasing productivity for developers and improving communication with domain experts. Both textual and graphical DSLs are viable solutions with complementary pros and cons: while graphical DSLs shorten the learning curve and facilitate documentation and communication, textual DSLs aim at higher productivity thanks to more efficient editor functionalities. This paper presents the industrial experience on the adoption of a hybrid approach combining an existing textual DSL with a read-only graphical state machine representation (visualization), equipped with a selective abstraction functionality that offers user-specific, highly configurable views on states and transitions. Our approach is the result of an evolutionary process to improve the modelling experience, relying on frequent user feedback. We argue that a well-tailored visualization\u00a0\u2026", "num_citations": "1\n", "authors": ["1965"]}