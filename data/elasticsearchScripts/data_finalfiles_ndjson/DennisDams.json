{"title": "Abstract interpretation and partition refinement for model checking\n", "abstract": " Abstract interpretation and partition refinement for model checking (1996) | www.narcis.nl KNAW KNAW Narcis Back to search results Eindhoven University of Technology Publication Abstract interpretation and partition refinement for model checking (1996) Open access . Pagina-navigatie: Main Save publication Save as MODS Export to Mendeley Save as EndNote Export to RefWorks Title Abstract interpretation and partition refinement for model checking Author Dams, DR Thesis advisor Baeten, Jos CM; Damm, W.; Gerth, Rob T. Publisher Department of Mathematics and Computer Science; Formal Methods Date issued 1996 Access Open Access Language English Type Doctoral Thesis Publisher Technische Universiteit Eindhoven Publication https://research.tue.nl/nl/publications/abstract-interpretat... ISBN 90-386-0078-X Persistent Identifiers NBN urn:nbn:nl:ui:25-1c1bdc7f-42f1-4939-a3f0-b067d81a0abf DOI \u2026", "num_citations": "289\n", "authors": ["1143"]}
{"title": "ABSTRACT INTERPRETATION OF REACTIVE SYSTEMS-ABSTRACTIONS PRESERVING FOR-ALL-CTL-ASTERISK, THERE-EXISTS-CTL-ASTERISK AND CTL-ASTERISK\n", "abstract": " The need for formal verification of systems on one hand, and the advent of complex reactive systems on the other, call for the development of automated verification techniques. Model checking is one such technique, which has proven quite successful. However, the state explosion problem remains the stumbling block in many situations. Recent experience indicates that solutions are to be found in the application of techniques for property preserving abstraction and successive approximation of models. However, a coherent basis for these notions is still lacking. The theory of Abstract Interpretation offers a framework for the definition and justification of property preserving abstractions. Furthermore, it provides a method for the effective computation of such abstract models directly from the text of a program, thereby avoiding the need for intermediate storage of a full-blown model. Finally, it allows trading precision for\u00a0\u2026", "num_citations": "162\n", "authors": ["1143"]}
{"title": "Symmetric spin\n", "abstract": " We give a detailed description of SymmSpin, a prototype implementation of a symmetry-reduction package for the Spin model checker. It offers several heuristics for state-space reduction. A series of experiments is described, underlining the effectiveness of the heuristics and demonstrating the ability of the implementation to handle almost all of Spin\u2019s input language Promela.", "num_citations": "112\n", "authors": ["1143"]}
{"title": "Bottom-up abstract interpretation of logic programs\n", "abstract": " This paper presents a formal framework for the bottom-up abstract interpretation of logic programs which can be applied to approximate answer substitutions, partial answer substitutions and call patterns for a given program and arbitrary initial goal. The framework is based on a Tp-like semantics defined over a Herbrand universe with variables which has previously been shown to determine the answer substitutions for arbitrary initial goals. The first part of the paper reconstructs this semantics to provide a more adequate initial goals. The first part of the paper reconstructs this semantics to provide a more adequate basis for abstract interpretation. A notion of abstract substitution is introduced and shown to determine an abstract semantic function which for a given program can be applied to approximate the answer substitutions for an arbitrary initial goal.The second part of the paper extends the bottom-up approach to\u00a0\u2026", "num_citations": "98\n", "authors": ["1143"]}
{"title": "Geometrical guidance and trapping transition of human sperm cells\n", "abstract": " The guidance of human sperm cells under confinement in quasi-2D microchambers is investigated using a purely physical method to control their distribution. Transport property measurements and simulations are performed with diluted sperm populations, for which effects of geometrical guidance and concentration are studied in detail. In particular, a trapping transition at convex angular wall features is identified and analyzed. We also show that highly efficient microratchets can be fabricated by using curved asymmetric obstacles to take advantage of the spermatozoa specific swimming strategy.", "num_citations": "81\n", "authors": ["1143"]}
{"title": "Integrating real time into Spin: A prototype implementation\n", "abstract": " We present a discrete-time extension of Promela, a high level modelling language for the specification of concurrent systems, and the associated Spin model checker. Our implementation is fully compatible with Spin\u2019s partial order reduction algorithm, which is indeed one of its main strengths. The real time package is for most part orthogonal to the other features of the tool, resulting in a modular extension. We have evaluated it by several experiments, with encouraging results.", "num_citations": "79\n", "authors": ["1143"]}
{"title": "Derivation and safety of an abstract unification algorithm for groundness and aliasing analysis\n", "abstract": " We derive and prove safe an abstract unification algorithm for groundness and aliasing analysis in logic programs. In general, proving the safety of abstract unification plays a crucial role in the construction of an abstract interpretation. We adopt a notion of abstract substitutions which is originally due to Sondergaard and derive an abstract unification algorithm by abstracting the process of unifying a pair of concrete atoms. This results in a concise and well motivated definition of abstract unification together with a proof of its safety. The resulting algorithm appears to formally reconstruct that intended by Sondergaard. The approach followed in deriving the algorithm is interesting in its own; to appreciate its advantages it is sufficient to compare our presentation of the algorithm with previous ones, and to note that those previous are not accompanied by proofs of safety.", "num_citations": "76\n", "authors": ["1143"]}
{"title": "The existence of finite abstractions for branching time model checking\n", "abstract": " Abstraction is often essential to verify a program with model checking. Typically, a concrete source program with an infinite (or finite, but large) state space is reduced to a small, finite state, abstract program on which a correctness property can be checked. The fundamental question we investigate in this paper is whether such a reduction to finite state programs is always possible, for arbitrary branching time temporal properties. We begin by showing that existing abstraction frameworks are inherently incomplete for verifying purely existential or mixed universal-existential properties. We then propose a new, complete abstraction framework which is based on a class of focused transition systems (FTS's). The key new feature in FTS's is a way of \"focusing\" an abstract state to a set of more precise abstract states. While focus operators have been defined for specific contexts, this result shows their fundamental usefulness\u00a0\u2026", "num_citations": "73\n", "authors": ["1143"]}
{"title": "Incremental algorithms for inter-procedural analysis of safety properties\n", "abstract": " Automaton-based static program analysis has proved to be an effective tool for bug finding. Current tools generally re-analyze a program from scratch in response to a change in the code, which can result in much duplicated effort. We present an inter-procedural algorithm that analyzes incrementally in response to program changes and present experiments for a null-pointer dereference analysis. It shows a substantial speed-up over re-analysis from scratch, with a manageable amount of disk space used to store information between analysis runs.", "num_citations": "71\n", "authors": ["1143"]}
{"title": "Iterating transducers\n", "abstract": " Regular languages have proved useful for the symbolic state exploration of infinite state systems. They can be used to represent infinite sets of system configurations; the transitional semantics of the system consequently can be modeled by finite-state transducers. A standard problem encountered when doing symbolic state exploration for infinite state systems is how to explore all states in a finite amount of time.When representing the one-step transition relation of a system by a finite-state transducer T, this problem boils down to finding an appropriate finite-state representation T                         ** for its transitive closure.               In this paper we give a partial algorithm to compute a finite-state transducer T                         ** for a general class of transducers. The construction builds a quotient of an underlying infinite-state transducer T                         w, using a novel behavioural equivalence that is based past and\u00a0\u2026", "num_citations": "65\n", "authors": ["1143"]}
{"title": "Automata as abstractions\n", "abstract": " We propose the use of tree automata as abstractions in the verification of branching time properties, and show several benefits. In this setting, soundness and completeness are trivial. It unifies the abundance of frameworks in the literature, and clarifies the role of concepts therein in terms of the well-studied field of automata theory. Moreover, using automata as models simplifies and generalizes results on maximal model theorems.", "num_citations": "61\n", "authors": ["1143"]}
{"title": "Shape analysis through predicate abstraction and model checking\n", "abstract": " We propose a new framework, based on predicate abstraction and model checking, for shape analysis of programs. Shape analysis is used to statically collect information\u2014such as possible reachability and sharing\u2014about program stores. Rather than use a specialized abstract interpretation based on shape graphs, we instantiate a generic and automated abstraction procedure with shape predicates from a correctness property. This results in a predicate-discovery procedure that identifies predicates relevant for correctness, using an analysis based on weakest preconditions, and creates a finite state abstract program. The correctness property is then checked on the abstraction with a model checking tool. To enable this process, we calculate weakest preconditions for common shape properties, and present heuristics for accelerating convergence. Exploring abstract state spaces with model checkers\u00a0\u2026", "num_citations": "61\n", "authors": ["1143"]}
{"title": "Model checking SDL with Spin\n", "abstract": " We present an attempt to use the model checker Spin as a verification engine for SDL, with special emphasis put on the verification of timing properties of SDL models. We have extended Spin with a front-end that allows to translate SDL to Promela (the input language of Spin), and a back-end that allows to analyse timing properties. Compared with the previous attempts, our approach allows to verify not only qualitative but also quantitative aspects of SDL timers, and our translation of SDL to Promela handles the SDL timers in a correct way. We applied the toolset to the verification of a substantial part of a complex industrial protocol. This allowed to expose several non-trivial errors in the protocol\u2019s design.", "num_citations": "56\n", "authors": ["1143"]}
{"title": "Discrete-time promela and spin\n", "abstract": " Spin is a software package for the verification of concurrent systems. A system to be verified is modeled in Promela \u2014 Spin\u2019s input language. We present an extension of Promela and Spin with discrete time that provides an opportunity to model systems whose correct functioning crucially depends on timing parameters. This extension is completely compatible with all the features of the standard package, in particular the partial order reduction algorithm. We have tested the prototype tool on several applications known from the verification literature and the first results are promising.", "num_citations": "48\n", "authors": ["1143"]}
{"title": "Model checking using adaptive state and data abstraction\n", "abstract": " We present a partitioning algorithm for checking ACTL specifications that distinguishes between states only if this is necessary to ascertain the specification. This algorithm is then generalized to also abstract from the variable values in the states. Here, too, the values between which the algorithm distinguishes are determined by what is needed to decide whether or not the specification holds. The resulting algorithm is being implemented in an ROBDD based model checker for VHDL/S.", "num_citations": "44\n", "authors": ["1143"]}
{"title": "Partial-order reduction techniques for real-time model checking\n", "abstract": " A new notion, covering, generalising independence is introduced. It enables improved effects of partial-order reduction techniques when applied to real-time systems. Furthermore, we formulate a number of locally checkable conditions for covering that can be used as the basis for a practical algorithm. Correctness is proven with respect to a chosen discretisation method.", "num_citations": "43\n", "authors": ["1143"]}
{"title": "A heuristic for symmetry reductions with scalarsets\n", "abstract": " We present four versions of a new heuristic for coping with the problem of finding (canonical) representatives of symmetry equivalence classes (the so-called orbit problem), in symmetry techniques for model checking. The practical implementation of such techniques hinges on appropriate workarounds of this hard problem, which is equivalent to graph isomorphism. We implemented the four strategies on top of the Spin model checker, and compared their performance on several examples, with encouraging results.", "num_citations": "37\n", "authors": ["1143"]}
{"title": "Freeness analysis for logic programs-and correctness\n", "abstract": " Several proposals for computing freeness information for logic programs have been put forward in recent literature. The availability of such information has proven useful in a variety of applications. While these proposals have illustrated the importance of such analyses, they lack formal justification. Moreover, several have been found incorrect. This paper introduces a novel domain of abstract eguation systems describing possible sharing and definite freeness of terms in a system of equations. A simple and intuitive abstract unification algorithm is presented, providing the core of a correct and precise sharing and freeness analysis for logic programs. Our contribution is not only a correct algorithm, but perhaps primarily, the systematic approach in which it is derived by mimicking each step in a suitable concrete unification algorithm. Consequently, the abstract algorithm is intuitive\u2013as it resembles the concrete algorithm\u00a0\u2026", "num_citations": "37\n", "authors": ["1143"]}
{"title": "Flat fragments of CTL and CTL: separating the expressive and distinguishing powers\n", "abstract": " We study both the expressive and the distinguishing powers of flat temporal logics. These are fragments obtained by restricting the first argument of the Until operator to propositional formulae. Both the linear-time and the branching-time cases are considered.", "num_citations": "32\n", "authors": ["1143"]}
{"title": "Iterating transducers\n", "abstract": " Regular languages have proved useful for the symbolic state exploration of infinite state systems. They can be used to represent infinite sets of system configurations; the system\u2019s transitional semantics consequently can be modeled by finite-state transducers. A standard problem for infinite state systems is how to explore all states in a finite amount of time. When the initial states of a system are represented by a finite-state automaton A and the one-step transition relation by a finite-state transducer T, this problem amounts to effectively computing an appropriate finite-state representation T*\u2218 A for the transduction of A under T\u2019s transitive closure. In this paper we give a partial algorithm to compute a finite-state transducer T* for a general class of transducers. The construction builds a quotient of an underlying infinite-state transducer T< \u03c9, using a novel behavioural equivalence based on past and future bisimulations\u00a0\u2026", "num_citations": "31\n", "authors": ["1143"]}
{"title": "Orion: High-precision methods for static error analysis of C and C++ programs\n", "abstract": " We describe the algorithmic and implementation ideas behind a tool, Orion, for finding common programming errors in C and C++ programs using static code analysis. We aim to explore the fundamental trade-off between the cost and the precision of such analyses. Analysis methods that use simple dataflow domains run the risk of producing a high number of false error reports. On the other hand, the use of complex domains reduces the number of false errors, but limits the size of code that can be analyzed.               Orion employs a two-level approach: potential errors are identified by an efficient search based on a simple domain; each discovered error path is then scrutinized by a high-precision feasibility analysis aimed at filtering out as many false errors as possible.               We describe the algorithms used and their implementation in a GCC-based tool. Experimental results on a number of software\u00a0\u2026", "num_citations": "30\n", "authors": ["1143"]}
{"title": "Abstraction in software model checking: Principles and practice\n", "abstract": " This paper provides a brief description, including a bibliography, of the SPIN2002 tutorial on abstraction in model checking of software.", "num_citations": "26\n", "authors": ["1143"]}
{"title": "Practical Symbolic Model Checking of the Full M-calculus Using Compositional Abstractions\n", "abstract": " We apply abstract interpretation techniques to reduce the time and space requirements for model checking the full-calculus over parallel processes. The abstractions can be computed compositionally. The techniques have been implemented in a StateCharts model checker. Experiments show a 17-fold reduction on the average in the size of the BDDs on non-trivial speci cations.", "num_citations": "25\n", "authors": ["1143"]}
{"title": "Specification and implementation of components of a \u03bcCRL toolbox\n", "abstract": " We develop a set of tools to translate linear \u03bcCRL specifications to finite transition systems. These tools are intended to function as the core of larger toolsets comprising model checkers, weak or branching bisimulation checkers, simulators, etc. The main problem in constructing these larger toolsets is to manage the software development process, especially, when many different people are contributing. Therefore, and this makes our approach unique, we describe specifications and implementations of the tools formally in \u03bcCRL. We realise the tools in C and let them communicate via the Toolbus.", "num_citations": "24\n", "authors": ["1143"]}
{"title": "An on-the-fly tableau construction for a real-time temporal logic\n", "abstract": " Temporal logic is a useful tool for specifying correctness properties of reactive programs. In particular, real-time temporal logics have been developed for expressing quantitative timing aspects of systems. A tableau construction is an algorithm that translates a temporal logic formula into a finite-state automaton that accepts precisely all the models of the formula. It is a key ingredient to checking satisfiability of a formula as well as to the automata-theoretic approach to model checking. An improvement to the efficiency of tableau constructions has been the development of on-the-fly versions. In the real-time domain, tableau constructions have been developed for various logics and their complexities have been studied. However, there has been considerably less work aimed at improving and implementing them. In this paper, we present an on-the-fly tableau construction for a linear temporal logic with dense\u00a0\u2026", "num_citations": "21\n", "authors": ["1143"]}
{"title": "The bounded retransmission protocol revisited.\n", "abstract": " Philips\u2019 Bounded Retransmission Protocol, developed for the 4th generation infra-red remote control systems [Phi97], has been the focus of various verification efforts [GP96, HS96, HSV94, Mat96, DKRT97, GS]. It is a non-trivial protocol to transfer files across a lossy medium as a sequence of chunks. It allows for only a bounded number of retransmissions of chunks and it uses time outs to detect chunk loss. As such, the protocol is parameterised by the retransmission bound and the various time-out values. Correctness entails verification for any file and any number of chunks.We use this protocol to illustrate the use of abstract interpretation techniques in model checking. Specifically, we verify the protocol for all parameter values, files and number of chunks using a finite-state model checker without inductive arguments. Instead, we rely on a number of canonical abstractions of the files, timers etc. to render the parameterised system finite state. The techniques that we use here are from [DGG97].", "num_citations": "21\n", "authors": ["1143"]}
{"title": "On the design of a correct freeness analysis for logic programs\n", "abstract": " Several proposals for computing freeness information for logic programs have been put forward in the recent literature. The availability of such information has proven useful in a variety of applications, including parallelization of Prolog programs, optimizations in Prolog compilers, as well as for improving the precision of other analyses. While these proposals have illustrated the importance of such analyses, they lack formal justification. Moreover, several have been found incorrect. This paper introduces a novel domain of abstract equation systems describing possible sharing and definite freeness of terms in a system of equations. A simple and intuitive abstract unification algorithm is presented, providing the core of a correct and precise sharing and freeness analysis for logic programs. Our contribution is not only a correct algorithm, but perhaps primarily, the application of a systematic approach in which it is derived\u00a0\u2026", "num_citations": "21\n", "authors": ["1143"]}
{"title": "Method and apparatus for incremental analysis of one or more properties of a program\n", "abstract": " Methods and apparatus are provided for incremental analysis of one or more properties of a program. According to one aspect of the invention, at least one property of a software program is evaluated, given one or more changes to the software program. Nodes in a derivation graph are identified corresponding to changed edges in a control flow graph representation of the software program, wherein the derivation graph describes an earlier evaluation of the software program. In addition, at least one of the identified nodes in the derivation graph is updated and the derivation graph is traversed outward from a location of a change. The revised derivation graph can optionally be further processed to remove false errors.", "num_citations": "17\n", "authors": ["1143"]}
{"title": "Comparing abstraction refinement algorithms\n", "abstract": " We present a generic algorithm that provides a unifying scheme for the comparison of abstraction refinement algorithms. It is centered around the notion of refinement cue which generalizes counterexamples. It is demonstrated how the essential features of several refinement algorithms can be captured as instances.We argue that the generic algorithm does not limit the completeness of instances, and show that the proposed generalization of counterexamples is necessary for completeness \u2014 thus addressing a shortcoming of more limited notions of counterexample-guided refinement.", "num_citations": "10\n", "authors": ["1143"]}
{"title": "Applying verification methods to non-exhaustive verification of software/hardware systems\n", "abstract": " In order to handle the increasing complexity of hardware/software designs, system level design methods are being used. These methods are directed to produce operational system models at a high level of abstraction. They can be used to assess early in the design phase if specific functional or performance requirements can be met. Since the systems that are being designed are often concurrent and real-time, the behaviour of these models can become rather complex. It is not always easy to check whether a model indeed satisfies the desired requirements. If the specification model has a well-defined semantics, and the requirements can be expressed exactly, it is possible to automate some of these checks. Several techniques exist to verify if a given model satisfies certain formally defined properties. A popular approach is model-checking, which is an automata based approach in which the verification problem is reduced to standard checks on finite state automata, as used in the tool Spin [1] for example.In this paper we investigate the use of such automata based verification techniques in simulation of high-level system specifications in POOSL [2]. We show how certain properties expressed in the formalism linear temporal logic (LTL), can be automatically monitored during simulations of complex distributed systems.", "num_citations": "9\n", "authors": ["1143"]}
{"title": "Method and apparatus for evaluating paths in a state machine\n", "abstract": " Methods and apparatus are provided for exploring paths through a graph representation of a program or another entity. According to one aspect of the invention, at least one property of a state machine, such as a graph representing a software program, is evaluated. One or more paths in the state machine are evaluated using a state exploration algorithm, wherein the state exploration algorithm maintains a stack data structure representing a current path being processed from an entry state to a current state and a visited state cache indicating zero or more states that have been evaluated. When a state satisfies at least one property, such as having an error, each of the states in the path are removed from the visited states cache if the path satisfies one or more predefined criteria. The one or more predefined criteria may comprise a feasibility of the path.", "num_citations": "7\n", "authors": ["1143"]}
{"title": "Theoretical and Practical Aspects of SPIN Model Checking: 5th and 6th International SPIN Workshops, Trento, Italy, July 5, 1999, Toulouse, France, September 21 and 24, 1999\u00a0\u2026\n", "abstract": " Increasing the designer\u2019s con dence that a piece of software or hardwareis c-pliant with its speci cation has become a key objective in the design process for software and hardware systems. Many approaches to reaching this goal have been developed, including rigorous speci cation, formal veri cation, automated validation, and testing. Finite-state model checking, as it is supported by the explicit-state model checkerSPIN, is enjoying a constantly increasingpopularity in automated property validation of concurrent, message based systems. SPIN has been in large parts implemented and is being maintained by Gerard Ho-mann, and is freely available via ftp fromnetlib. bell-labs. comor from URL http://cm. bell-labs. com/cm/cs/what/spin/Man/README. html. The beauty of nite-state model checking lies in the possibility of building\\push-button\" validation tools. When the state space is nite, the state-space traversal will eventually terminate with a de nite verdict on the property that is being validated. Equally helpful is the fact that in case the property is inv-idated the model checker will return a counterexample, a feature that greatly facilitates fault identi cation. On the downside, the time it takes to obtain a verdict may be very long if the state space is large and the type of properties that can be validated is restricted to a logic of rather limited expressiveness.", "num_citations": "6\n", "authors": ["1143"]}
{"title": "PresenceScape: Virtual world mediated rich communication\n", "abstract": " The shift toward more horizontal and distributed organizations has presented communication challenges for individuals and institutions that are physically separated from one another. Video communication platforms such as Skype, Jabber, and the Cisco video communication system are widely deployed in enterprise environments to enable employee communication over a distance. Those video communication tools that are capable of audio-video exchange and document sharing are sufficient to establish and support communication for formal and scheduled meetings. However research indicates that a good deal of communication and interaction within the enterprise environment is not pre-scheduled. Although not supported by existing video communication tools, this informal communication and interaction plays an essential role in creating and maintaining collaborative relationships. This paper presents an\u00a0\u2026", "num_citations": "5\n", "authors": ["1143"]}
{"title": "FM 2009: Formal Methods: Second World Congress, Eindhoven, The Netherlands, November 2-6, 2009, Proceedings\n", "abstract": " th FM 2009, the 16 International Symposium on Formal Methods, marked the 10th an-versary of the First World Congress on Formal Methods that was held in 1999 in Toulouse, France. We wished to celebrate this by advertising and organizing FM 2009 as the Second World Congress in the FM series, aiming to once again bring together the formal methods communities from all over the world. The statistics displayed in the table on the next page include the number of countries represented by the Programme Committee members, as well as of the authors of submitted and accepted papers. Novel this year was a special track on tools and industrial applications. Subm-sions of papers on these topics were especially encouraged, but not given any special treatment.(It was just as hard to get a special track paper accepted as any other paper.) What we did promote, however, was a discussion of how originality, contri-tion, and soundness should be judged for these papers. The following questions were used by our Programme Committee.", "num_citations": "5\n", "authors": ["1143"]}
{"title": "Telco meets the web: Programming shared-experience services\n", "abstract": " With current technology, it is relatively easy to create a new web service or a mashup combining several Web services. On the other hand, it is considerably more difficult to build services that combine telecommunications and Web aspects. Our thesis is that this is primarily due to the lack of a simple, yet expressive model for representing telco services. This paper presents a model, called the session data type (SDT), for the particular class of shared-experience services. The SDT model results in a considerable simplification of the design and the implementation of \u201ctelco+web\u201d mashups. This paper provides several examples of such mashups and describes a prototype implementation.", "num_citations": "5\n", "authors": ["1143"]}
{"title": "Using the inka prover to automate safety proofs in abstract interpretation-a case study\n", "abstract": " Using the INKA Prover to Automate Safety Proofs in Abstract Interpretation \u2013 A Case Study Page 1 Using the INKA Prover to Automate Safety Proofs in Abstract Interpretation \u2013 A Case Study Dennis Dams 1 , Dieter Hutter 2 , and Natalia Sidorova 1 1 Dept. of Electrical Eng., Eindhoven University of Technology {dennis, natalia}@ics.ele.tue.nl 2 German Research Center for Artificial Intelligence hutter@dfki.de Page 2 2 CONTENTS \u2022 Motivation \u2022 Data abstractions \u2022 A case study: Philips\u2019 Bounded Retransmission Protocol \u2022 Abstracting lists \u2022 Tuning-up INKA \u2022 Conclusions and future work Page 3 3 The Spin model-checker Spin: a software tool for analysis and verification of concurrent systems Input language: Promela a high-level language based on Dijkstra's guarded command language notation and borrowing the notation for i/o operations from Hoare's CSP language the system description in Promela C program, \u2026", "num_citations": "5\n", "authors": ["1143"]}
{"title": "Supporting student-to-student interaction in video-supported distance learning\n", "abstract": " We report on a project aimed at assessing how video communication can be used more beneficially in a distance learning setting and designing possible solutions. Literature and user studies reveal that the social aspect of a classroom is considered to be very important and that student-to-student interaction is currently lacking in distance education programs. Student-to-student interaction is one of the big challenges to overcome in distance learning. To increase this type of interaction the concept of a shared 2D communication space is proposed in which users can move their own webcam image around and communicate with other people present in the virtual space by \u2018standing\u2019next to them. Verbal communication only occurs between \u2018grouped\u2019users thus allowing for multiple conversations to be held within the same communication space.", "num_citations": "3\n", "authors": ["1143"]}
{"title": "Concurrency, Compositionality, and Correctness: Essays in Honor of Willem-Paul de Roever\n", "abstract": " Why would you read this preface? As we start thinking what to write here, we wonder who is going to read these words. Fromourperspective\u2013thatofwritersaddressinganaudienceofreaders\u2013you are most likely Willem-Paul de Roever. Willem: our main motivation in putting together this Festschrift is to honor you on the occasion of your retirement. In terms of scienti? c ancestry, you are a father to two of us, and a grandfather to 1 the third, and you have had a profound impact on our formation as computer scientists. Atthepersonallevel, weknowyouasakind-hearted, generousperson. We are grateful to know you in these ways, and hope to have encounters with you in many years to come. AnotherlikelypossibilityisthatyouareCorinneorJojanneke, wifeordau-ter of Willem; the two strong pillars on which so much in his life is founded. You share the honor, respect, and love that went into the writing, as will be ackno-edged by those contributing authors that know you\u2013which are almost all. Also, we would like to thank you for your help in sending us photographs for inclusion in this book, and for your encouragement. The next option is that you are one of the contributing authors. In this case you may wonder why it took us so long to get this work published. After all, wasn\u2019tit \u201calmostdone\u201d alreadyattheretirementeventinJuly2008? Theanswer is twofold: we gave everyone ample time to revise their submissions in line with the recommendations by the referees; and we ourselves took ample time to put everything together. Our hope is that this will be visible in the quality of the? nal result.", "num_citations": "2\n", "authors": ["1143"]}
{"title": "Communicating deictic gestures through handheld multi-touch devices\n", "abstract": " Deictic gestures are gestures we make during communication to point at objects or persons. Indicative acts of directing-to guide the addressee to an object, while placing-for acts place an object for the addressee\u2019s attention. Commonly used presentation software tools, such as PowerPoint and Keynote, offer ample support for placing-for gestures, eg slide transitions, progressive disclosure of list items and animations. Such presentation tools, however, do not generally offer adequate support for the directing-to indicative act (ie pointing gestures). In this paper we argue the value of presenting deictic gestures to a remote audience. Our research approach is threefold: identify indicative acts that are naturally produced by presenters; design tangible gestures for multi-touch surfaces that replicate the intent of those indicative acts; and design a set of graphical effects for remote viewing that best represent these indicative acts for the audience.", "num_citations": "1\n", "authors": ["1143"]}