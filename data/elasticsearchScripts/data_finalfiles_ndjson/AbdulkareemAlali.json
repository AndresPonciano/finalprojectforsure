{"title": "An empirical characterization of commits in software repositories\n", "abstract": " During software evolution the continuous change of a software system is typically recorded in version control systems such as subversion 1 or CVS 2. This history is a valuable source of data for understanding the evolution process [Kagdi, Collard, Maletic 2007]. In the work presented here we aim to better understand how developers typically commit changes to these repositories. Surprisingly, there has been little empirical work characterizing what a typical or normal commit looks like. We feel that a better understanding of this process will allow us to predict the characteristics of commits for given maintenance tasks. The goal is to understand not just a single version of a system, but multiple versions of a system in the context of the system\u2019s evolution.Commits recorded by version control systems keep track of changes to the software system. Here, we limit our study to source code changes and the other artifacts of software evolution such as changes to external documentation are not examined. These commits (changes) take place any time a developer adds, modifies, or deletes something in the source code.", "num_citations": "9\n", "authors": ["998"]}
{"title": "Cost-based query optimization for complex pattern mining on multiple databases\n", "abstract": " For complex data mining queries, query optimization issues arise, similar to those for the traditional database queries. However, few works have applied the cost-based query optimization, which is the key technique in optimizing traditional database queries, on complex mining queries. In this work, we develop a cost-based query optimization framework to an important collection of data mining queries, ie frequent pattern mining across multiple databases. Specifically, we make the following contributions: 1) We present a rich class of queries on mining frequent itemsets across multiple datasets supported by a SQL-based mechanism. 2) We present an approach to enumerate all possible query plans for the mining queries, and develop a dynamic programming approach and a branch-and-bound approach based on the enumeration algorithm to find optimal query plans with the least mining cost. 3) We introduce\u00a0\u2026", "num_citations": "2\n", "authors": ["998"]}
{"title": "Improved methods for mining software repositories to detect evolutionary couplings\n", "abstract": " The dissertation investigates techniques to improve the results of mining large software repositories for evolutionary couplings. Evolutionary couplings are dependencies between software artifacts that impact how systems are maintained and evolved. They appear as co-changing artifacts in the version history of software systems. Detection of evolutionary couplings has traditionally been done using data mining techniques (eg, frequent pattern mining). The focus of this research is twofold.", "num_citations": "1\n", "authors": ["998"]}