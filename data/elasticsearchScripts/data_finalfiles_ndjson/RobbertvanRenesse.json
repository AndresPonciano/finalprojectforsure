{"title": "Bitcoin-ng: A scalable blockchain protocol\n", "abstract": " Cryptocurrencies, based on and led by Bitcoin, have shown promise as infrastructure for pseudonymous online payments, cheap remittance, trustless digital asset exchange, and smart contracts. However, Bitcoin-derived blockchain protocols have inherent scalability limits that trade off between throughput and latency, which withhold the realization of this potential.", "num_citations": "1296\n", "authors": ["492"]}
{"title": "A gossip-style failure detection service\n", "abstract": " Failure Detection is valuable for system management, replication, load balancing, and other distributed services. To date, Failure Detection Services scale badly in the number of members that are being monitored. This paper describes a new protocol based on gossiping that does scale well and provides timely detection. We analyze the protocol, and then extend it to discover and leverage the underlying network topology for much improved resource utilization. We then combine it with another protocol, based on broadcast, that is used to handle partition failures.", "num_citations": "807\n", "authors": ["492"]}
{"title": "Amoeba: A distributed operating system for the 1990s\n", "abstract": " A description is given of the Amoeba distributed operating system, which appears to users as a centralized system but has the speed, fault tolerance, security safeguards, and flexibility required for the 1990s. The Amoeba software is based on objects. Objects are managed by server processes and named using capabilities chosen randomly from a sparse name space. Amoeba has a unique, fast file system split into two parts: the bullet service stores immutable files contiguously on the disk; the directory service gives capabilities symbolic names and handles replication and atomicity, eliminating the need for a separate transaction management system. To bridge the gap with existing systems, Amoeba has a Unix emulation facility consisting of a library of Unix system call routines that make calls to the various Amoeba server processes.< >", "num_citations": "739\n", "authors": ["492"]}
{"title": "Distributed operating systems\n", "abstract": " Distributed operating systems have many aspects in common with centralized ones, but they also differ in certain ways. This paper is intended as an introduction to distributed operating systems, and especially to current university research about them. After a discussion of what constitutes a distributed operating system and how it is distinguished from a computer network, various key design issues are discussed. Then several examples of current research projects are examined in some detail, namely, the Cambridge Distributed Computing System, Amoeba, V, and Eden.", "num_citations": "627\n", "authors": ["492"]}
{"title": "Experiences with the Amoeba distributed operating system\n", "abstract": " The Amoeba project is a research effort aimed at understanding how to connect multiple computers in a seamless way [16, 17, 26, 27, 31]. The basic idea is to provide the users with the illusion of a single powerful timesharing system, when, in fact, the system is implemented on a collection of machines, potentially distributed among several countries. This research has led to the design and implementation of the Amoeba distributed operating system, which is being used as a prototype and vehicle for further research. In this article we will describe the current state of the system (Amoeba 4.0), and show some of the lessons we have learned designing and using it over the past eight years. We will also discuss how this experience has influenced our plans for the next version, Amoeba 5.0. Amoeba was originally designed and implemented at the Vrije Universiteit in Amsterdam, and is now being jointly developed there\u00a0\u2026", "num_citations": "592\n", "authors": ["492"]}
{"title": "COCA: A secure distributed online certification authority\n", "abstract": " COCA is a fault-tolerant and secure online certification authority that has been built and deployed both in a local area network and in the Internet. Extremely weak assumptions characterize environments in which COCA's protocols execute correctly: no assumption is made about execution speed and message delivery delays; channels are expected to exhibit only intermittent reliability; and with 3t + 1 COCA servers up to t may be faulty or compromised. COCA is the first system to integrate a Byzantine quorum system (used to achieve availability) with proactive recovery (used to defend against mobile adversaries which attack, compromise, and control one replica for a limited period of time before moving on to another). In addition to tackling problems associated with combining fault-tolerance and security, new proactive recovery protocols had to be developed. Experimental results give a quantitative evaluation for\u00a0\u2026", "num_citations": "554\n", "authors": ["492"]}
{"title": "Chain Replication for Supporting High Throughput and Availability.\n", "abstract": " Chain replication is a new approach to coordinating clusters of fail-stop storage servers. The approach is intended for supporting large-scale storage services that exhibit high throughput and availability without sacrificing strong consistency guarantees. Besides outlining the chain replication protocols themselves, simulation experiments explore the performance characteristics of a prototype implementation. Throughput, availability, and several objectplacement strategies (including schemes based on distributed hash table routing) are discussed.", "num_citations": "547\n", "authors": ["492"]}
{"title": "JiST: An efficient approach to simulation using virtual machines\n", "abstract": " Discrete event simulators are important scientific tools and their efficient design and execution is the subject of much research. In this paper, we propose a new approach for constructing simulators that leverages virtual machines and combines advantages from the traditional systems\u2010based and language\u2010based simulator designs. We introduce JiST, a Java\u2010based simulation system that executes discrete event simulations both efficiently and transparently by embedding simulation semantics directly into the Java execution model. The system provides standard benefits that the modern Java runtime affords. In addition, JiST is efficient, out\u2010performing existing highly optimized simulation runtimes. As a case study, we illustrate the practicality of the JiST framework by applying it to the construction of SWANS, a scalable wireless ad hoc network simulator. We simulate million node wireless networks, which represents\u00a0\u2026", "num_citations": "362\n", "authors": ["492"]}
{"title": "Operating system support for mobile agents\n", "abstract": " The TACOMA project is concerned with implementing operating system support for agents, processes that migrate through a network. Two TACOMA prototypes have been completed; this paper outlines our experiences in building and using them. A mechanism for exchanging electronic cash was explored, as well as agent-based schemes for scheduling and fault-tolerance.", "num_citations": "341\n", "authors": ["492"]}
{"title": "Distributed processing system with replicated management information base\n", "abstract": " A replicated management information base (RMIB), or replicated spreadsheet, is maintained at nodes to share information among the nodes. The RMIB includes columns, or categories, of the information to be shared and rows for the respective \u201cmember\u201d nodes. Each member node is responsible for the contents of its own row. When the node updates its row, the node sends out an update message to the other members. As the update message propagates through the membership, each member updates the row in its copy, or view, of the RMIB. The nodes may include version numbers in the update messages, so that the receiving node ignores older messages or applies the messages in order. The member nodes may gossip among themselves, to ensure that each node receives the most recent updates. Also, the nodes may monitor their respective network interfaces and send as updates any changes to the status\u00a0\u2026", "num_citations": "325\n", "authors": ["492"]}
{"title": "Scalable computer network resource monitoring and location system\n", "abstract": " A computer network resource monitoring and locating system includes one or more hierarchical management information bases (HMIBs) through which a user can locate or obtain information relevant to managing or locating various network resources. The system maintains a portion of the HMIB information on each node, and a user starts from a local node and navigates through the system using the contact information that is part of the HMIBs. Each network node provides information directly to an associated lowest level MIB, referred to herein as a group MIB, and maintains a copy of that MIB. The system condenses the information in the gossip MIB and provides the condensed information as a row of a next highest level MIB, which is referred to herein as a subnetwork MIB. The system further condenses the information in this MIB to produce a row of a next highest level MIB, and so forth. Each row of the MIBs\u00a0\u2026", "num_citations": "314\n", "authors": ["492"]}
{"title": "Decentralization in bitcoin and ethereum networks\n", "abstract": " Blockchain-based cryptocurrencies have demonstrated how to securely implement traditionally centralized systems, such as currencies, in a decentralized fashion. However, there have been few measurement studies on the level of decentralization they achieve in practice. We present a measurement study on various decentralization metrics of two of the leading cryptocurrencies with the largest market capitalization and user base, Bitcoin and Ethereum. We investigate the extent of decentralization by measuring the network resources of nodes and the interconnection among them, the protocol requirements affecting the operation of nodes, and the robustness of the two systems against attacks. In particular, we adapted existing internet measurement techniques and used the Falcon Relay Network as a novel measurement tool to obtain our data. We discovered that neither Bitcoin nor Ethereum has strictly\u00a0\u2026", "num_citations": "302\n", "authors": ["492"]}
{"title": "Using sparse capabilities in a distributed operating system\n", "abstract": " A distributed operating system, Amoeba, that includes capabilities for naming and protecting objects is reported. In contrast to traditional centralized operating systems, in which capabilities are managed by the operating system kernel, in Amoeba all the capabilities are managed directly by user code. To prevent tampering, the capabilities are protected cryptographically. A variety of the issues involved is outlined, and four different ways of dealing with access rights are presented.", "num_citations": "302\n", "authors": ["492"]}
{"title": "Multicast protocol with reduced buffering requirements\n", "abstract": " A scalable multicast protocol buffers the multicast messages at a subset of \u201cC\u201d members, where C is selected to reduce to an acceptable level the probability that a given message will be lost before it reaches at least one of the C members. When a member receives a multicast message, the member determines whether or not it should buffer the message by manipulating a string of bytes that is unique to both the message and the member and determining if the result is less than a calculated value C/n, where \u201cn\u201d is the number of known members. When one of the C bufferers thereafter receives a gossip message that indicates that the multicast message has been lost to the gossiping member, the bufferer retransmits the message to the gossiping member. When a member that is not one of the C bufferers receives such a gossip message, the member determines which members are bufferers of the lost message and\u00a0\u2026", "num_citations": "256\n", "authors": ["492"]}
{"title": "Strong and weak virtual synchrony in Horus\n", "abstract": " This paper presents two variants of virtual synchrony, which are supported by Horus. The first variant, called strong virtual synchrony, includes the property that every message is delivered within the view in which it is sent. This property is very useful in developing applications, since it helps in minimizing the amount of context information that needs to be sent on messages, and the amount of computation which is required in order to process a message. However, it is shown that in order to support this property, the application program has to block messages during view changes. An alternative definition, called weak virtual synchrony, which can be implemented without blocking messages, is then presented. This definition still guarantees that messages will be delivered within the view in which they were sent, only that it uses a slightly weaker notion of what the view in which a message was sent is. An\u00a0\u2026", "num_citations": "211\n", "authors": ["492"]}
{"title": "Paxos made moderately complex\n", "abstract": " This article explains the full reconfigurable multidecree Paxos (or multi-Paxos) protocol. Paxos is by no means a simple protocol, even though it is based on relatively simple invariants. We provide pseudocode and explain it guided by invariants. We initially avoid optimizations that complicate comprehension. Next we discuss liveness, list various optimizations that make the protocol practical, and present variants of the protocol.", "num_citations": "183\n", "authors": ["492"]}
{"title": "The Amoeba distributed operating system\u2014a status report\n", "abstract": " As the price of CPU chips continues to fall rapidly, it will soon be economically feasible to build computer systems containing a large number of processors. The question of how this computing power should be organized, and what kind of operating system is appropriate then arises. Our research during the past decade has focused on these issues and led to the design of a distributed operating system called Amoeba which is intended for systems with large numbers of computers. Amoeba, its philosphy, design, applications and some experience with it are described here.", "num_citations": "172\n", "authors": ["492"]}
{"title": "APSS: Proactive secret sharing in asynchronous systems\n", "abstract": " APSS, a proactive secret sharing (PSS) protocol for asynchronous systems, is explained and proved correct. The protocol enables a set of secret shares to be periodically refreshed with a new, independent set, thereby thwarting mobile-adversary attacks. Protocols for asynchronous systems are inherently less vulnerable to denial-of-service attacks, which slow processor execution or delay message delivery. So APSS tolerates certain attacks that PSS protocols for synchronous systems cannot.", "num_citations": "162\n", "authors": ["492"]}
{"title": "Cryptographic support for fault-tolerant distributed computing\n", "abstract": " Mobile processes, or agents, have been proposed for a variety of applications in the Internet and other large distributed systems. But little work has been directed at operating-system support for agents. This paper discusses one aspect of the problem---implementing fault-tolerance without specialized hardware. In traditional client-server settings, a central and trusted host may send all messages and receive all replies, thereby implementing a star-shaped communications pattern. In contrast, an agent can execute autonomously at a succession of remote sites without returning to the host that launched it. Thus, computations structured using agents may consume less network-bandwidth in performing tasks that involve multiple hosts. Moreover, for some settings, it is unrealistic to presume the existence of a central host that remains connected to the network---mobile computing and wireless networks are obvious\u00a0\u2026", "num_citations": "153\n", "authors": ["492"]}
{"title": "An introduction to the TACOMA distributed system\n", "abstract": " CiteSeerX \u2014 An Introduction to the TACOMA Distributed System Documents Authors Tables Log in Sign up MetaCart DMCA Donate CiteSeerX logo Documents: Advanced Search Include Citations Authors: Advanced Search Include Citations Tables: DMCA An Introduction to the TACOMA Distributed System (1995) Cached Download as a PDF Download Links [www.ub.uit.no] Save to List Add to Collection Correct Errors Monitor Changes by Dag Johansen , Robbert Renesse , Fred B. Schneider Citations: 123 - 3 self Summary Citations Active Bibliography Co-citation Clustered Documents Version History Share Facebook Twitter Reddit Bibsonomy OpenURL Abstract Keyphrases tacoma distributed system Powered by: Apache Solr About CiteSeerX Submit and Index Documents Privacy Policy Help Data Source Contact Us Developed at and hosted by The College of Information Sciences and Technology \u00a9 2007-The \u2026", "num_citations": "144\n", "authors": ["492"]}
{"title": "Packing messages as a tool for boosting the performance of total ordering protocols\n", "abstract": " This paper compares the throughput and latency of four protocols that provide total ordering. Two of these protocols are measured with and without message packing. We used a technique that buffers application messages for a short period of time before sending them, so more messages are packed together. The main conclusion of this comparison is that message packing influences the performance of total ordering protocols under high load overwhelmingly more than any other optimization that was checked in this paper, both in terms of throughput and latency. This improved performance is attributed to the fact that packing messages reduces the header overhead for messages, the contention on the network, and the load on the receiving CPUs.", "num_citations": "134\n", "authors": ["492"]}
{"title": "An introduction to the TACOMA distributed system version1. 0\n", "abstract": " CiNii \u8ad6\u6587 - An Introduction to the TACOMA Distributed System Version1.0 CiNii \u56fd\u7acb\u60c5\u5831\u5b66 \u7814\u7a76\u6240 \u5b66\u8853\u60c5\u5831\u30ca\u30d3\u30b2\u30fc\u30bf[\u30b5\u30a4\u30cb\u30a3] \u65e5\u672c\u306e\u8ad6\u6587\u3092\u3055\u304c\u3059 \u5927\u5b66\u56f3\u66f8\u9928\u306e\u672c\u3092\u3055\u304c\u3059 \u65e5\u672c\u306e\u535a\u58eb\u8ad6\u6587\u3092 \u3055\u304c\u3059 \u65b0\u898f\u767b\u9332 \u30ed\u30b0\u30a4\u30f3 English \u691c\u7d22 \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u9589\u3058\u308b \u30bf\u30a4\u30c8\u30eb \u8457\u8005\u540d \u8457\u8005 ID \u8457\u8005\u6240\u5c5e \u520a\u884c\u7269\u540d ISSN \u5dfb\u53f7\u30da\u30fc\u30b8 \u51fa\u7248\u8005 \u53c2\u8003\u6587\u732e \u51fa\u7248\u5e74 \u5e74\u304b\u3089 \u5e74\u307e\u3067 \u691c\u7d22 \u691c\u7d22 \u691c\u7d22 CiNii\u7a93\u53e3\u696d\u52d9\u306e\u518d\u958b\u306b\u3064\u3044\u3066 An Introduction to the TACOMA Distributed System Version1.0 JOHANSON D. \u88ab\u5f15\u7528\u6587\u732e: 1\u4ef6 \u8457\u8005 JOHANSON D. \u53ce\u9332\u520a\u884c\u7269 Technical Report 95-23 Technical Report 95-23, 1995 Depth. of Computer Science, Univ. of Tromoso and Cornell Univ. \u88ab\u5f15\u7528\u6587\u732e: 1\u4ef6\u4e2d 1-1\u4ef6\u3092 \u8868\u793a 1 \u5206\u6563\u74b0\u5883\u306b\u304a\u3051\u308b\u900f\u904e\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u8a18\u8ff0\u6cd5\u3068 D'Agent \u3092\u7528\u3044\u305f \u5b9f\u884c\u74b0\u5883 \u672c\u7530 \u6cbb , \u591a\u7530 \u77e5\u6b63 , \u6a0b\u53e3 \u660c\u5b8f \u60c5\u5831\u51e6\u7406\u5b66\u4f1a\u7814\u7a76\u5831\u544a. DPS,\u30de\u30eb\u30c1\u30e1\u30c7\u30a3\u30a2\u901a\u4fe1\u3068\u5206\u6563 \u51e6\u7406\u7814\u7a76\u4f1a\u5831\u544a 97, 55-60, 2000-03-21 \u53c2\u8003\u6587\u732e8\u4ef6 Tweet \u5404\u7a2e\u30b3\u30fc\u30c9 NII\u8ad6\u6587ID(NAID) \u306e\u306b\u2026", "num_citations": "128\n", "authors": ["492"]}
{"title": "{REM}: Resource-efficient mining for blockchains\n", "abstract": " Blockchains show promise as potential infrastructure for financial transaction systems. The security of blockchains today, however, relies critically on Proof-of-Work (PoW), which forces participants to waste computational resources.", "num_citations": "119\n", "authors": ["492"]}
{"title": "Efficient reconciliation and flow control for anti-entropy protocols\n", "abstract": " The paper shows that anti-entropy protocols can process only a limited rate of updates, and proposes and evaluates a new state reconciliation mechanism as well as a flow control scheme for anti-entropy protocols.", "num_citations": "119\n", "authors": ["492"]}
{"title": "Fireflies: scalable support for intrusion-tolerant network overlays\n", "abstract": " This paper describes and evaluates Fireflies, a scalable protocol for supporting intrusion-tolerant network overlays. While such a protocol cannot distinguish Byzantine nodes from correct nodes in general, Fireflies provides correct nodes with a reasonably current view of which nodes are live, as well as a pseudo-random mesh for communication. The amount of data sent by correct nodes grows linearly with the aggregate rate of failures and recoveries, even if provoked by Byzantine nodes. The set of correct nodes form a connected submesh; correct nodes cannot be eclipsed by Byzantine nodes. Fireflies is deployed and evaluated on PlanetLab.", "num_citations": "116\n", "authors": ["492"]}
{"title": "Handbook on theoretical and algorithmic aspects of sensor, ad hoc wireless, and peer-to-peer networks\n", "abstract": " The availability of cheaper, faster, and more reliable electronic components has stimulated important advances in computing and communication technologies. Theoretical and algorithmic approaches that address key issues in sensor networks, ad hoc wireless networks, and peer-to-peer networks play a central role in the development of emerging network", "num_citations": "114\n", "authors": ["492"]}
{"title": "Scalable wireless ad hoc network simulation\n", "abstract": " CiNii \u8ad6\u6587 - Scalable wireless ad hoc network simulation CiNii \u56fd\u7acb\u60c5\u5831\u5b66\u7814\u7a76\u6240 \u5b66\u8853\u60c5\u5831 \u30ca\u30d3\u30b2\u30fc\u30bf[\u30b5\u30a4\u30cb\u30a3] \u65e5\u672c\u306e\u8ad6\u6587\u3092\u3055\u304c\u3059 \u5927\u5b66\u56f3\u66f8\u9928\u306e\u672c\u3092\u3055\u304c\u3059 \u65e5\u672c\u306e\u535a\u58eb\u8ad6\u6587\u3092\u3055\u304c\u3059 \u65b0\u898f\u767b\u9332 \u30ed\u30b0\u30a4\u30f3 English \u691c\u7d22 \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u9589\u3058\u308b \u30bf\u30a4\u30c8\u30eb \u8457\u8005\u540d \u8457\u8005ID \u8457\u8005\u6240\u5c5e \u520a\u884c \u7269\u540d ISSN \u5dfb\u53f7\u30da\u30fc\u30b8 \u51fa\u7248\u8005 \u53c2\u8003\u6587\u732e \u51fa\u7248\u5e74 \u5e74\u304b\u3089 \u5e74\u307e\u3067 \u691c\u7d22 \u691c\u7d22 \u691c\u7d22 CiNii\u7a93\u53e3\u696d\u52d9\u306e\u518d\u958b \u306b\u3064\u3044\u3066 Scalable wireless ad hoc network simulation BARR R. \u88ab\u5f15\u7528\u6587\u732e: 1\u4ef6 \u8457\u8005 BARR R. \u53ce\u9332\u520a\u884c\u7269 Handbook on Theoretical and Algorithmic Aspects of Sensor, Ad hoc Wireless, and Peer-to-Peer Networks Handbook on Theoretical and Algorithmic Aspects of Sensor, Ad hoc Wireless, and Peer-to-Peer Networks, 2005 CRC Press \u88ab\u5f15\u7528\u6587\u732e: 1\u4ef6\u4e2d 1-1\u4ef6\u3092 \u8868\u793a 1 MANET\u306b\u304a\u3051\u308b\u7701\u8cc7\u6e90\u6027\u3092\u8003\u616e\u3057\u305f\u4f4d\u7f6e\u4f9d\u5b58\u60c5\u5831\u53ce\u96c6\u624b\u6cd5 \u912d \u9855\u5fd7 , \u6df1\u6fa4 \u826f\u5f70 , \u672c\u4f4d\u7530 \u771f\u4e00 \u96fb\u5b50\u60c5\u5831\u901a\u4fe1\u5b66\u4f1a\u8ad6\u6587\u8a8c. D, \u60c5\u5831\u30fb\u30b7\u30b9\u30c6\u30e0 = The IEICE transactions on information and ((\u2026", "num_citations": "114\n", "authors": ["492"]}
{"title": "A critique of the remote procedure call paradigm\n", "abstract": " The remote procedure call paradigm is widely used in distributed operating systems. It is conceptually simple to use and straightfor-ward to implement. Nevertheless, experience has shown that it also has some subtle, but less pleasant aspects. In this paper we discuss problems with RPC in the areas of conceptual problems with the model itself, technical problems with implementing it, problems caused by client and server crashes, and performance problems. The paper concludes with a discussion and analysis of the problems and proposed solutions.", "num_citations": "110\n", "authors": ["492"]}
{"title": "Willow: DHT, aggregation, and publish/subscribe in one protocol\n", "abstract": " This paper describes a new peer-to-peer protocol that integrates DHT routing, aggregation, all-to-all multicast, as well as both topic- and content-based publish/subscribe. In spite of this extensive set of features, the Willow protocol is simple, scalable, balances the load well across the members, is proximity-aware, adapts to network conditions, and recovers quickly and gracefully from network partitions and subsequent repairs.", "num_citations": "108\n", "authors": ["492"]}
{"title": "Performance of the world's fastest distributed operating system\n", "abstract": " Distributed operating systems have been in the experimental stage for a number of years now, but few have progressed to the point of actually being used in a production environment. It is our belief that the reason lies primarily with the performance of these systems---they tend to be fairly slow compared to traditional single computer systems. The Amoeba system has been designed with high performance in mind. In this paper some performance measurements of Amoeba are presented and comparisons are made with UNIX on the SUN, as well as with some other interesting systems. In particular, short remote procedure calls take 1.4 msec and long data transfers achieve a user-to-user bandwidth of 677 kbytes/sec. Furthermore, the file server is so fast that it is limited by the communication bandwidth to 677 kbytes/sec. The real speed of the file server is too high to measure. To the best of our knowledge, these are\u00a0\u2026", "num_citations": "99\n", "authors": ["492"]}
{"title": "Specifications and proofs for Ensemble layers\n", "abstract": " Ensemble is a widely used group communication system that supports distributed programming by providing precise guarantees for synchronization, message ordering, and message delivery. Ensemble eases the task of distributed-application programming, but as a result, ensuring the correctness of Ensemble itself is a difficult problem. In this paper we use I/O automata for formalizing, specifying, and verifying the Ensemble implementation. We focus specifically on message total ordering, a property that is commonly used to guarantee consistency within a process group. The systematic verification of this protocol led to the discovery of an error in the implementation.", "num_citations": "93\n", "authors": ["492"]}
{"title": "Voting with ghosts\n", "abstract": " Data replication is a technique for increasing the availability of data. Two popular algorithms for maintaining consistency among the replicas are Weighted Voting [1] and Available Copies [2] In recent papers [3] it has been shown that under common circumstances Available Copies (AC) performs better than Weighted Voting (WV). However, the issue of network partitioning due to gateway crashes is ignored in AC. We present an improvement of WV that, if configured accordingly, performs as well as AC, but, unlike AC, also works correctly in the face of network partitioning.", "num_citations": "90\n", "authors": ["492"]}
{"title": "Bosco: One-step byzantine asynchronous consensus\n", "abstract": " Asynchronous Byzantine consensus algorithms are an important primitive for building Byzantine fault-tolerant systems. Algorithms for Byzantine consensus typically require at least two communication steps for decision; in many systems, this imposes a significant performance overhead. In this paper, we show that it is possible to design Byzantine fault-tolerant consensus algorithms that decide in one message latency under contention-free scenarios and still provide strong consistency guarantees when contention occurs. We define two variants of one-step asynchronous Byzantine consensus and show a lower bound on the number of processors needed for each. We present a Byzantine consensus algorithm, Bosco, for asynchronous networks that meets these bounds, even in the face of a strong network adversary.", "num_citations": "82\n", "authors": ["492"]}
{"title": "The importance of aggregation\n", "abstract": " In this paper, we define aggregation as the ability to summarize information. In the area of sensor networks [16.2] it is also referred to as data fusion. It is the basis for scalability for many, if not all, large networking services. For example, address aggregation allows Internet routing to scale.Without it, routing tables would need a separate entry for each Internet address. Besides a problem of memory size, populating the tables would be all but impossible. DNS also makes extensive use of aggregation, allowing domain name to attribute mappings to be resolved in a small number of steps. Many basic distributed paradigms and consistency mechanisms are based on aggregation. For example, synchronization based on voting requires votes to be counted. Aggregation is a standard service in databases. Using SQL queries, users can explicitly aggregate data in one or more tables in a variety of ways.", "num_citations": "82\n", "authors": ["492"]}
{"title": "A tacoma retrospective\n", "abstract": " For seven years, the TACOMA project has investigated the design and implementation of software support for mobile agents. A series of prototypes has been developed, with experiences in distributed applications driving the effort. This paper describes the evolution of these TACOMA prototypes, what primitives each supports, and how the primitives are used in building distributed applications. Copyright \u00a9 2002 John Wiley & Sons, Ltd.", "num_citations": "82\n", "authors": ["492"]}
{"title": "FLIP: An internetwork protocol for supporting distributed systems\n", "abstract": " Most modern network protocols give adequate support for traditional applications such as file transfer and remote login. Distributed applications, however, have different requirements (e.g., efficient at-most-once remote procedure call even in the face of processor failures). Instead of using ad hoc protocols to meet each of the new requirements, we have designed a new protocol, called the Fast Local Internet Protocol (FLIP), that provides a clean and simple integrated approach to these new requirements. FLIP is an unreliable message protocol that provides both point-to-point communication and multicast communication, and requires almost no network management. Furthermore, by using FLIP we have simplified higher-level protocols such as remote procedure call and group communication, and enhanced support for process migration and security. A prototype implementation of FLIP has been built as part of the\u00a0\u2026", "num_citations": "82\n", "authors": ["492"]}
{"title": "Jist: Embedding simulation time into a virtual machine\n", "abstract": " Since progress in many avenues of science depends heavily on simulated results, discrete event simulators have been the subject of much research into their efficient design and execution. This paper introduces JiST, a Java-based simulation framework that executes discrete event simulations both efficiently and transparently. Our system differs from existing work in that it embeds simulation time semantics into the Java execution model, but does so without inventing a new language, without requiring a specialized compiler and without utilizing a custom runtime. The result is a flexible simulation environment that allows sequential simulation execution and also transparently supports both parallel and optimistic execution with automatic checkpointing and rollback. The JiST approach uses a convenient single system image abstraction across a cluster of nodes, that allows for dynamic network and computational load-balancing and fine-grained migration of simulation state. The system provides standard benefits that the modern Java runtime affords, such as type-safety, garbage collection and portability. Nevertheless, JiST performs well, either matching or exceeding the performance of ns2 and the highly optimized GloMo-Sim runtime in both throughput and memory consumption. We illustrate the practicality of the JiST framework by applying it to the construction of SWANS, a scalable wireless ad hoc network simulator.", "num_citations": "80\n", "authors": ["492"]}
{"title": "Scalable state-machine replication\n", "abstract": " State machine replication (SMR) is a well-known technique able to provide fault-tolerance. SMR consists of sequencing client requests and executing them against replicas in the same order, thanks to deterministic execution, every replica will reach the same state after the execution of each request. However, SMR is not scalable since any replica added to the system will execute all requests, and so throughput does not increase with the number of replicas. Scalable SMR (S-SMR) addresses this issue in two ways: (i) by partitioning the application state, while allowing every command to access any combination of partitions, and (ii) by using a caching algorithm to reduce the communication across partitions. We describe Eyrie, a library in Java that implements S-SMR, and Volery, an application that implements Zookeeper's API. We assess the performance of Volery and compare the results against Zookeeper. Our\u00a0\u2026", "num_citations": "79\n", "authors": ["492"]}
{"title": "The performance of the Amoeba distributed operating system\n", "abstract": " Amoeba is a capability\u2010based distributed operating system designed for high\u2010performance interactions between clients and servers using the well\u2010known RPC model. The paper starts out by describing the architecture of the Amoeba system, which is typified by specialized components such as workstations, several services, a processor pool, and gateways that connect other Amoeba systems transparently over wide\u2010area networks. Next the RPC interface is described. The paper presents performance measurements of the Amoeba RPC on unloaded and loaded systems. The time to perform the simplest RPC between two user processes has been measured to be 1\u20104 ms. Compared to SUN 3/50's RPC, Amoeba has one ninth of the delay, and over three times the throughput. Finally we describe the Amoeba file server. The Amoeba file server is so fast that it is limited by the communication bandwidth. To the best of\u00a0\u2026", "num_citations": "77\n", "authors": ["492"]}
{"title": "Scalable and secure resource location\n", "abstract": " In this paper we present Captain Cook, a service that continuously monitors resources in the Internet, and allows clients to locate resources using this information. Captain Cook maintains a tree-based representation of all the collected resource information. The leaves in the tree contain directly measured resource information, while internal nodes are generated using condensation functions that aggregate information in child nodes. We present examples of how such information may be used for cluster management, application-level routing and placement of servers, and pervasive computing. The nodes are automatically replicated updates being propagated using a novel hierarchical gossip protocol. We analyze how well this protocol behaves, and conclude that updates propagate quickly in spite of scale, failed nodes, and message loss. We describe how Captain Cook can be made secure using Public Key\u00a0\u2026", "num_citations": "73\n", "authors": ["492"]}
{"title": "Vegvisir: A partition-tolerant blockchain for the internet-of-things\n", "abstract": " While the intersection of blockchains and the Internet of Things (IoT) have received considerable research interest lately, Nakamoto-style blockchains possess a number of qualities that make them poorly suited for many IoT scenarios. Specifically, they require high network connectivity and are power-intensive. This is a drawback in IoT environments where battery-constrained nodes form an unreliable ad hoc network such as in digital agriculture. In this paper we present Vegvisir, a partition-tolerant blockchain for use in power-constrained IoT environments with limited network connectivity. It is a permissioned, directed acyclic graph (DAG)-structured blockchain that can be used to create a shared, tamperproof data repository that keeps track of data provenance. We discuss the use cases, architecture, and challenges of such a blockchain.", "num_citations": "69\n", "authors": ["492"]}
{"title": "Gossip-based distribution estimation in peer-to-peer networks.\n", "abstract": " We propose a novel gossip-based technique that allows each node in a system to estimate the distribution of values held by other nodes. We observe that the presence of duplicate values does not significantly affect the distribution of values in samples collected through gossip, and based on that explore different data synopsis techniques that optimize space and time while allowing nodes to accumulate information. Unlike previous aggregation schemes, our approach focuses on allowing all nodes in the system to compute an estimate of the entire distribution in a decentralized and efficient manner. We evaluate our approach through simulation, showing that it is simple and scalable, and that it allows all nodes in the system to converge to a satisfactory estimate of the distribution in a small number of rounds.", "num_citations": "66\n", "authors": ["492"]}
{"title": "The hierarchical daisy architecture for causal delivery\n", "abstract": " In this paper, we propose the hierarchical daisy architecture, which provides causal delivery of messages sent to any subset of processes. The architecture provides fault tolerance and maintains the amount of control information within a reasonable size. It divides processes into logical groups. Messages inside a logical group are sent directly, while messages that need to cross logical groups' boundaries are forwarded by servers. We prove the correctness of the daisy architecture, discuss possible optimizations, and present simulation results.", "num_citations": "66\n", "authors": ["492"]}
{"title": "Optimizing layered communication protocols\n", "abstract": " Layering of communication protocols offers many well-known advantages but typically leads to performance inefficiencies. We present a model for layering, and point out where the performance problems occur in stacks of layers using this model. We then investigate the common execution paths in these stacks and how to identify them. These paths are optimized using three techniques: optimizing the computation, compressing protocol headers, and delaying processing. All of the optimizations can be automated in a compiler with the help of minor annotations by the protocol designer. We describe the performance that we obtain after implementing the optimizations by hand on a full-scale system.", "num_citations": "64\n", "authors": ["492"]}
{"title": "Defense against intrusion in a live streaming multicast system\n", "abstract": " Application-level multicast systems are vulnerable to attacks that impede nodes from receiving desired data. Live streaming protocols are especially susceptible to packet loss induced by malicious behavior. We describe SecureStream, an application-level live streaming system built using a pull-based architecture that results in improved tolerance of malicious behavior. SecureStream is implemented as a layer running over Fireflies, an intrusion-tolerant membership protocol. Our paper describes the SecureStream system and offers simulation and experimental results confirming its resilience to attack", "num_citations": "63\n", "authors": ["492"]}
{"title": "Masking the overhead of protocol layering\n", "abstract": " Protocol layering has been advocated as a way of dealing with the complexity of computer communication. It has also been criticized for its performance overhead. In this paper, we present some insights in the design of protocols, and how these insights can be used to mask the overhead of layering, in a way similar to client caching in a file system. With our techniques, we achieve an order of magnitude improvement in end-to-end message latency in the Horus communication framework. Over an ATM network, we are able to do a round-trip message exchange, of varying levels of semantics, in about 170 \u00b5 seconds, using a protocol stack of four layers that were written in ML, a high-level functional language.", "num_citations": "63\n", "authors": ["492"]}
{"title": "Jist/swans\n", "abstract": " JiST / SWANS Rimon Barr Page 1 JiST / SWANS Java in Simulation Time / Scalable Wireless Ad hoc Network Simulator Density-Independent Route Discovery in Ad hoc Wireless Networks Rimon Barr <barr@cs.cornell.edu> Wireless Network Laboratory Advisor: Prof. Zygmunt J. Haas 9 March 2004 http://www.cs.cornell.edu/barr/repository/jist/ Page 2 2 JiST \u2013 Java in Simulation Time JiST \u2013 Java in Simulation Time \u2022 Simulation scalability is important \u2022 JiST is a new approach to building simulators: it extends the Java object model and execution semantics, and leverages the Java virtual machine to run simulations efficiently and transparently. \u2022 Bring simulation semantics to modern, popular language \u2022 run plain-Java programs in simulation time \u2022 merges systems and languages approaches to simulator construction \u2022 virtual machine-based simulation 5x10^6 events time (sec) vs. JiST JiST 0.97 - Parsec 1.91 2.0x ns2-C \u2026", "num_citations": "62\n", "authors": ["492"]}
{"title": "Wormhole: Reliable pub-sub to support geo-replicated internet services\n", "abstract": " Wormhole is a publish-subscribe (pub-sub) system developed for use within Facebook\u2019s geographically replicated datacenters. It is used to reliably replicate changes among several Facebook services including TAO, Graph Search and Memcache. This paper describes the design and implementation of Wormhole as well as the operational challenges of scaling the system to support the multiple data storage systems deployed at Facebook. Our production deployment of Wormhole transfers over 35 GBytes/sec in steady state (50 millions messages/sec or 5 trillion messages/day) across all deployments with bursts up to 200 GBytes/sec during failure recovery. We demonstrate that Wormhole publishes updates with low latency to subscribers that can fail or consume updates at varying rates, without compromising efficiency.", "num_citations": "57\n", "authors": ["492"]}
{"title": "Protocol switching: Exploiting meta-properties\n", "abstract": " As we see a growing variety of network and application behaviors, it becomes more important that protocols adapt to their surroundings. Building adaptive protocols is complicated, and therefore we have considered building hybrid protocols that switch between specialized protocols. We show for which communication properties this is a correct solution, and classify these using a new concept called meta-properties. We also show how well these switches perform.", "num_citations": "57\n", "authors": ["492"]}
{"title": "System for and method of improving discrete event simulation using virtual machines\n", "abstract": " The system and method of the present invention can allow the imbedding of simulation primitives within a conventional programming language in order to use the full capabilities of the conventional programming language and its compiler without modification in the programming of efficient, scalable simulators. The simulation primitives are designed to be preserved through the compilation process, thus allowing a rewriter to modify the compiler's byte code output without accessing the source code. Also, since the rewriter output is a set of class files and a kernel can be written in the conventional programming language, and the system and method of the present invention can execute within a conventional virtual machine associated with the conventional programming language.", "num_citations": "56\n", "authors": ["492"]}
{"title": "How robust are gossip-based communication protocols?\n", "abstract": " Gossip-based communication protocols are often touted as being robust. Not surprisingly, such a claim relies on assumptions under which gossip protocols are supposed to operate. In this paper, we discuss and in some cases expose some of these assumptions and discuss how sensitive the robustness of gossip is to these assumptions. This analysis gives rise to a collection of new research challenges.", "num_citations": "56\n", "authors": ["492"]}
{"title": "Vive la diff\u00e9rence: Paxos vs. viewstamped replication vs. zab\n", "abstract": " Paxos, Viewstamped Replication, and Zab are replication protocols for high-availability in asynchronous environments with crash failures. Claims have been made about their similarities and differences. But how does one determine whether two protocols are the same, and if not, how significant are the differences? We address these questions using refinement mappings. Protocols are expressed as succinct specifications that are progressively refined to executable implementations. Doing so enables a principled understanding of the correctness of design decisions for implementing the protocols. Additionally, differences that have a significant impact on performance are surfaced by this exercise.", "num_citations": "55\n", "authors": ["492"]}
{"title": "The Design of a High-Performance File Server.\n", "abstract": " The Bullet server is an innovative file server that outperforms traditional file servers like SUN\u2019s NFS by more than a factor of three. It achieves high throughput and low delay by a radically different software design than current file servers in use. Instead of storing files as a sequence of disk blocks, each Bullet server file is stored contiguously, both on disk and in the server\u2019s RAM cache. Furthermore, it employs the concept of an immutable file, to improve performance, to enable caching, and to provide a clean semantic model to the user. The paper describes the design and implementation of the Bullet server in detail, presents measurements of its performance, and compares this performance with other well-known file servers running on the same hardware.", "num_citations": "54\n", "authors": ["492"]}
{"title": "Causal controversy at le mont st.-michel\n", "abstract": " As usual, the SIGOPS workshop provided a great platform for interesting discussion. Among other things, a controversy arose around the usefulness of causal ordering in a distributed system. In this paper, I explain causality in non-technical terms, and enumerate some of the most prevalent misconceptions that surrounded causality. Next I present some important examples where causal delivery is a necessary and sufficient ordering of events.", "num_citations": "50\n", "authors": ["492"]}
{"title": "Method and system for optimizing layered communication protocols\n", "abstract": " Layering of protocols offers several well-known advantages, such as, for example, reduction of a network design complexity, but, on the other hand, layering introduces overhead which increases delays in communication and typically leads to performance inefficiencies. The present invention provides a number of techniques allowing to model protocol layering and detect where performance inefficiencies occur in the stack of protocol layers. Furthermore, after common execution paths are identified in the protocol stacks, these paths are optimized by using optimization techniques, such as optimizing the computation, compressing protocol headers, and delaying processing. All of the optimizations are automated in a compiler with the help of minor annotations by the protocol designer.", "num_citations": "46\n", "authors": ["492"]}
{"title": "Follow the sun through the clouds: Application migration for geographically shifting workloads\n", "abstract": " Global cloud services have to respond to workloads that shift geographically as a function of time-of-day or in response to special events. While many such services have support for adding nodes in one region and removing nodes in another, we demonstrate that such mechanisms can lead to significant performance degradation. Yet other services do not support application-level migration at all. Live VM migration between availability zones or even across cloud providers would be ideal, but cloud providers do not support this flexible mechanism.", "num_citations": "45\n", "authors": ["492"]}
{"title": "Fireflies: A secure and scalable membership and gossip service\n", "abstract": " An attacker who controls a computer in an overlay network can effectively control the entire overlay network if the mechanism managing membership information can successfully be targeted. This article describes Fireflies, an overlay network protocol that fights such attacks by organizing members in a verifiable pseudorandom structure so that an intruder cannot incorrectly modify the membership views of correct members. Fireflies provides each member with a view of the entire membership, and supports networks with moderate total churn. We evaluate Fireflies using both simulations and PlanetLab to show that Fireflies is a practical approach for secure membership maintenance in such networks.", "num_citations": "45\n", "authors": ["492"]}
{"title": "Short paper: Service-oriented sharding for blockchains\n", "abstract": " The rise of blockchain-based cryptocurrencies has led to an explosion of services using distributed ledgers as their underlying infrastructure. However, due to inherently single-service oriented blockchain protocols, such services can bloat the existing ledgers, fail to provide sufficient security, or completely forego the property of trustless auditability. Security concerns, trust restrictions, and scalability limits regarding the resource requirements of users hamper the sustainable development of loosely-coupled services on blockchains.                 This paper introduces Aspen, a sharded blockchain protocol designed to securely scale with increasing number of services. Aspen shares the same trust model as Bitcoin in a peer-to-peer network that is prone to extreme churn containing Byzantine participants. It enables introduction of new services without compromising the security, leveraging the trust assumptions, or\u00a0\u2026", "num_citations": "44\n", "authors": ["492"]}
{"title": "Supporting broad internet access to TACOMA\n", "abstract": " The TACOMA system [JRS95] provides operating-system support for mobile processes, or agents, that traverse the hosts of a network in accomplishing some task. A TACOMA agent executing on one host moves to another host by using TCP to communicate with TACOMA software at the destination host. The presumption is that TACOMA software has been installed at any host that might launch or be visited by an agent. This presumption is questionable:\u2022 System managers are reluctant to install software that allows arbitrary imported software, like agents, to be executed on their hosts. And, there is good reason for this reluctance.\u2022 Hosts are autonomous. So, even were security not a concern, arranging for installation of a piece of non-critical software on a significant fraction of the hosts in a large network is impractical. The network-software installation-problem is not unique to agents or to TACOMA. Any provider of\u00a0\u2026", "num_citations": "44\n", "authors": ["492"]}
{"title": "Structured virtual synchrony: Exploring the bounds of virtual synchronous group communication\n", "abstract": " Multipoint communication protocols that offer group membership and virtually synchronous message delivery are commonly believed to be heavyweight and non-scalable. To meet the needs of large-scale computer-supported collaborative work, distributed parallel computing, and future worldwide applications, we designed the Structured Virtual Synchrony (SVS) protocol. The protocol has been implemented as part of Horus, a group communication system developed at Cornell University. It scales up to 800 members, while achieving a one-way latency of 100 milliseconds over groups of 500 members.", "num_citations": "44\n", "authors": ["492"]}
{"title": "Supercloud: Opportunities and challenges\n", "abstract": " Infrastructure as a Service (IaaS) clouds couple applications tightly with the underlying infrastructures and services. This vendor lock-in problem forces users to apply ad-hoc deployment strategies in order to tolerate cloud failures, and limits the ability of doing virtual machine (VM) migration and resource scaling across different clouds. This paper presents the Supercloud, a cloud service comprising resources obtained from several diverse IaaS cloud providers, and discusses opportunities, limitations, and future research directions. Currently, the Supercloud has been deployed using resources from several major cloud providers, including Amazon EC2, Rackspace, HP Cloud, and some private clouds. VMs run in a virtual network and can be migrated seamlessly across different clouds, with different hypervisors and device models. Using case studies we demonstrate that, being able to deploy applications to more\u00a0\u2026", "num_citations": "43\n", "authors": ["492"]}
{"title": "X-containers: Breaking down barriers to improve performance and isolation of cloud-native containers\n", "abstract": " \" Cloud-native\" container platforms, such as Kubernetes, have become an integral part of production cloud environments. One of the principles in designing cloud-native applications is called Single Concern Principle, which suggests that each container should handle a single responsibility well. In this paper, we propose X-Containers as a new security paradigm for isolating single-concerned cloud-native containers. Each container is run with a Library OS (LibOS) that supports multi-processing for concurrency and compatibility. A minimal exokernel ensures strong isolation with small kernel attack surface. We show an implementation of the X-Containers architecture that leverages Xen paravirtualization (PV) to turn Linux kernel into a LibOS. Doing so results in a highly efficient LibOS platform that does not require hardware-assisted virtualization, improves inter-container isolation, and supports binary compatibility\u00a0\u2026", "num_citations": "40\n", "authors": ["492"]}
{"title": "Developing correctly replicated databases using formal tools\n", "abstract": " Fault-tolerant distributed systems often contain complex error handling code. Such code is hard to test or model-check because there are often too many possible failure scenarios to consider. As we will demonstrate in this paper, formal methods have evolved to a state in which it is possible to generate this code along with correctness guarantees. This paper describes our experience with building highly-available databases using replication protocols that were generated with the help of correct-by-construction formal methods. The goal of our project is to obtain databases with unsurpassed reliability while providing good performance. We report on our experience using a total order broadcast protocol based on Paxos and specified using a new formal language called Event ML. We compile Event ML specifications into a form that can be formally verified while simultaneously obtaining code that can be executed. We\u00a0\u2026", "num_citations": "40\n", "authors": ["492"]}
{"title": "Secure distributed on-line certification authority\n", "abstract": " A fault-tolerant and secure on-line certification authority uses replication to achieve availability. A client request is forwarded to a delegate server. The delegate forwards the request to all certification servers. After receiving responses from a quorum of certification servers, the delegate sends a client response including a threshold signature protocol to sign the client response. The delegate then forwards the client response to the client.", "num_citations": "40\n", "authors": ["492"]}
{"title": "Method and system for masking the overhead of protocol layering\n", "abstract": " The Protocol Accelerator is a system which significantly reduces the communication latency of complex layered communication protocols. In particular, the protocol accelerator reduces both the message header overhead imposed by layered protocols and the message processing overhead by employing such techniques as classifying, collecting and aligning the headers, using shorter identifiers to represent information in immutable fields of the headers, introducing pre-and post-processing of a message, packet filtering, and packing and unpacking of messages in cases where a backlog of messages has to be processed by the protocol accelerator.", "num_citations": "40\n", "authors": ["492"]}
{"title": "Design and implementation of programmable media gateways\n", "abstract": " Treating the network as a processor that can perform computation has several benefits. Processing at strategic locations in the network may reduce bandwidth requirements. Low-powered devices that are connected to the Internet can be off-loaded as well. In this paper we present Degas, a programmable media gateway system. Degas allows users to upload small programs, called deglets, into a Degas gateway to filter, transform or mix video streams from a multicast session. We describe a declarative, event-driven programming model for writing deglets. We also discuss a simple mechanism used by gateways to optimize and execute the operations specified in the deglets. Finally, a method for selecting a suitable gateway to run deglets is outlined.", "num_citations": "40\n", "authors": ["492"]}
{"title": "Selectcast: a scalable and self-repairing multicast overlay routing facility\n", "abstract": " In this paper we describe SelectCast, a self-repairing multicast overlay routing facility for supporting publish/subscribe applications. Select Cast is a peer-to-peer protocol, and lever-ages Astrolabe, a secure distributed information management system. SelectCast uses replication to recover quickly from transient failures, as well as Astrolabe's aggregation facilities to recover from long-term failures or adapt to changes in load or QoS requirements. In order to evaluate the scalability and performance of SelectCast, and compare these with other multicast facilities, we built a multicast testing facility on NetBed. This paper reports latency and load results for SelectCast, compared to both native IP multicast and Yoid.", "num_citations": "37\n", "authors": ["492"]}
{"title": "P6P: A peer-to-peer approach to Internet infrastructure\n", "abstract": " P6P is a new, incrementally deployable networking infrastructure that resolves the growing tensions between the Internet routing infrastructure and the end sites of the Internet. P6P decouples the two through a P2P overlay network formed by the edge routers. P6P brings the benefits of IPv6 directly to end hosts, solving the major headache of IPv6 deployment as well as those of ISP switching, multihoming, and dynamic addressing.               P6P advocates Internet innovations at the overlay formed by the edge routers, rather than at the core Internet. P2P protocols can be incorporated into P6P to provide advanced features such as multicast. This opens the door for P2P research to play a central role in shaping the future of the Internet. The paper describes the P6P design and architecture, addresses the security and performance concerns, and shows simulation results that support its feasibility.", "num_citations": "36\n", "authors": ["492"]}
{"title": "SecureStream: An intrusion-tolerant protocol for live-streaming dissemination\n", "abstract": " Peer-to-peer (P2P) dissemination systems are vulnerable to attacks that may impede nodes from receiving data in which they are interested. The same properties that lead P2P systems to be scalable and efficient also lead to security problems and lack of guarantees. Within this context, live-streaming protocols deserve special attention since their time sensitive nature makes them more susceptible to the packet loss rates induced by malicious behavior. While protocols based on dissemination trees often present obvious points of attack, more recent protocols based on pulling packets from a number of different neighbors present a better chance of standing attacks. We explore this in SecureStream, a P2P live-streaming system built to tolerate malicious behavior at the end level. SecureStream is built upon Fireflies, an intrusion-tolerant membership protocol, and employs a pull-based approach for streaming data. We\u00a0\u2026", "num_citations": "34\n", "authors": ["492"]}
{"title": "Why bother with CATOCS?\n", "abstract": " In their paper Understanding the Limitations of Causally and Totally Ordered Communication [CS93], David Cheriton (Stanford University) and Dale Skeen (Teknekron Software Systems, Inc.) identify several potential problems in using causally and totally ordered communication support (CATOCS), and conclude that such support is of limited merit at best. This is a remarkable statement, given that, first, many well-known researchers are advocating a CATOCS model, and second, several projects have used CATOCS support successfully.[CS93] lists four limitations. They recognize that the third limitation is only a generalization of the second, so that there are really only three. However, in the course of the paper they state an additional two. For convenience, we combine overhead and scalability concerns. In total, therefore, the paper actually does contain four limitations. These are:\u2022 Lamport's event ordering cannot\u00a0\u2026", "num_citations": "34\n", "authors": ["492"]}
{"title": "Enforcing privacy policies with meta-code\n", "abstract": " This paper proposes a mechanism for expressing and enforcing security policies for shared data. Security policies are expressed as stateful meta-code operations; meta-code can express a broad class of policies, including access-based policies, use-based policies, obligations, and sticky policies with declassification. The meta-code is interposed in the filesystem access path to ensure policy compliance. The generality and feasibility of our approach is demonstrated using a sports analytics prototype system.", "num_citations": "33\n", "authors": ["492"]}
{"title": "Efficient reliable internet storage\n", "abstract": " This position paper presents a new design for an Internetwide peer-to-peer storage facility. The design is intended to reduce the required replication significantly without loss of availability. Two techniques are proposed. First, aggressive use of parallel recovery made possible by placing blocks randomly, rather than in a DHT-based fashion. Second, tracking of individual nodes availabilities, so that it becomes unnecessary to use worst case availability assumptions. The design uses a full membership DHT, and proposes a protocol for replica management.", "num_citations": "33\n", "authors": ["492"]}
{"title": "Implementing Distributed Algorithms using Remote Procedure Call\n", "abstract": " Remote procedure call (RPC) is a simple yet powerful primitiv~ for communication and synchronization between distributed processes. A problem with RPC is that it tends to decrease the amount of parallelism in an application due to its synchronous nature. This paper shows how light-weight processes can be used to circumvent this problem. The combination of blocking RPC calls and light-weight processes provides both simple semantics and efficient exploitation of parallelism. The communication primitive of the Amoeba Distributed Operating System is", "num_citations": "32\n", "authors": ["492"]}
{"title": "Distributing media transformation over multiple media gateways\n", "abstract": " Media gateways have been proposed as a solution to the network heterogeneity problem in media multicasting. Services on the gateways transform media streams as they flow through the gateways. In this paper, we present our work on composable services in media gateways. A user can request a computation to be performed on a set of media streams. The system then distributes the computation over multiple gateways for execution. We present an algorithm for decomposing the computation into sub-computations, and an application-level protocol that locates appropriate media gateways to run these sub-computations.", "num_citations": "31\n", "authors": ["492"]}
{"title": "Proving hybrid protocols correct\n", "abstract": " We describe a generic switching protocol for the construction of hybrid protocols and prove it correct with the Nuprl proof development system. For this purpose we introduce the concept of metaproperties and use them to formally characterize communication properties that can be preserved by switching. We also identify switching invariants that an implementation of the switching protocol must satisfy in order to work correctly.", "num_citations": "31\n", "authors": ["492"]}
{"title": "Performance issues in TACOMA\n", "abstract": " Mobile code performance depends, in part, on the costs of transferring an agent from one host to another and of initiating execution of that agent on a target host. These costs are reported for TACOMA (Troms and COrnell Moving Agents) v1. 3, a UNIX-based system that supports agents. The experiments suggest opportunities for performance enhancements, both by changing the underlying operating system and by changing the architecture of the TACOMA run-time system.", "num_citations": "30\n", "authors": ["492"]}
{"title": "Byzantine chain replication\n", "abstract": " We present a new class of Byzantine-tolerant State Machine Replication protocols for asynchronous environments that we term Byzantine Chain Replication. We demonstrate two implementations that present different trade-offs between performance and security, and compare these with related work. Leveraging an external reconfiguration service, these protocols are not based on Byzantine consensus, do not require majority-based quorums during normal operation, and the set of replicas is easy to reconfigure.             One of the implementations is instantiated with t\u2009+\u20091 replicas to tolerate t failures and is useful in situations where perimeter security makes malicious attacks unlikely. Applied to in-memory BerkeleyDB replication, it supports 20,000 transactions per second while a fully Byzantine implementation supports 12,000 transactions per second\u2014about 70% of the throughput of a non-replicated\u00a0\u2026", "num_citations": "29\n", "authors": ["492"]}
{"title": "Scalable and probabilistic leaderless BFT consensus through metastability\n", "abstract": " This paper introduces a family of leaderless Byzantine fault tolerance protocols, built around a metastable mechanism via network subsampling. These protocols provide a strong probabilistic safety guarantee in the presence of Byzantine adversaries while their concurrent and leaderless nature enables them to achieve high throughput and scalability. Unlike blockchains that rely on proof-of-work, they are quiescent and green. Unlike traditional consensus protocols where one or more nodes typically process linear bits in the number of total nodes per decision, no node processes more than logarithmic bits. It does not require accurate knowledge of all participants and exposes new possible tradeoffs and improvements in safety and liveness for building consensus protocols. The paper describes the Snow protocol family, analyzes its guarantees, and describes how it can be used to construct the core of an internet-scale electronic payment system called Avalanche, which is evaluated in a large scale deployment. Experiments demonstrate that the system can achieve high throughput (3400 tps), provide low confirmation latency (1.35 sec), and scale well compared to existing systems that deliver similar functionality. For our implementation and setup, the bottleneck of the system is in transaction verification.", "num_citations": "28\n", "authors": ["492"]}
{"title": "Routers for the cloud: Can the internet achieve 5-nines availability?\n", "abstract": " Accordingly, we adopt an approach first used in telephony, where availability measures the percentage of time when almost all calls go through (that is, only a small percentage are dropped, and in an uncorrelated way). The wired telephone infrastructure is engineered to guarantee 99.999 percent availability: the \u201c5-nines\u201d standard. In a one-year reliability study of IP core routers in a regional IP service provider network conducted by the University of Michigan, router interface downtime averaged roughly 955 minutes per year, which doesn\u2019t even reach the \u201c3-nines\u201d level. Figure 1 shows the breakdown of problems that this study identified. The results support the view that redundant hardware has great potential: back in 2004, when the university conducted the study, most deployed routers were monolithic (nonclustered), and many links played unique, critical roles.Hardware and link failures jointly accounted for almost a third of outages. With redundant hardware and links, both factors have since been sharply reduced\u2014putting ever greater emphasis on IP routing\u2019s reliability. This need for software that can survive hardware outages is vital because we must minimize the percentage of time that the routes the router is using are inconsistent with those its neighbors use\u2014for example, because the router has yet to apply routing updates that the neighbors are already employing. A more complete discussion of IP routing failures is available elsewhere. 1 BGP is designed for use in networks composed of interconnected autonomous systems (ASs). An AS could be a network operated by some ISP, or might be a campus or corporate network. BGP\u00a0\u2026", "num_citations": "28\n", "authors": ["492"]}
{"title": "What TACOMA taught us\n", "abstract": " CiNii \u8ad6\u6587 - What TACOMA taught us CiNii \u56fd\u7acb\u60c5\u5831\u5b66\u7814\u7a76\u6240 \u5b66\u8853\u60c5\u5831\u30ca\u30d3\u30b2\u30fc\u30bf[\u30b5\u30a4\u30cb\u30a3] \u65e5\u672c\u306e \u8ad6\u6587\u3092\u3055\u304c\u3059 \u5927\u5b66\u56f3\u66f8\u9928\u306e\u672c\u3092\u3055\u304c\u3059 \u65e5\u672c\u306e\u535a\u58eb\u8ad6\u6587\u3092\u3055\u304c\u3059 \u65b0\u898f\u767b\u9332 \u30ed\u30b0\u30a4\u30f3 English \u691c\u7d22 \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u9589\u3058\u308b \u30bf\u30a4\u30c8\u30eb \u8457\u8005\u540d \u8457\u8005ID \u8457\u8005\u6240\u5c5e \u520a\u884c\u7269\u540d ISSN \u5dfb\u53f7\u30da\u30fc\u30b8 \u51fa\u7248\u8005 \u53c2\u8003\u6587\u732e \u51fa\u7248\u5e74 \u5e74\u304b\u3089 \u5e74\u307e\u3067 \u691c\u7d22 \u691c\u7d22 \u691c\u7d22 CiNii\u7a93\u53e3\u696d\u52d9\u306e\u518d\u958b\u306b\u3064\u3044\u3066 What TACOMA taught us JOHANSEN D. \u88ab\u5f15\u7528\u6587\u732e: 1\u4ef6 \u8457\u8005 JOHANSEN D. \u53ce\u9332\u520a\u884c\u7269 Mobility, Mobile Agents and Process Migration - An Edited Collection Mobility, Mobile Agents and Process Migration - An Edited Collection, 1998 Addison Wesley \u88ab\u5f15\u7528\u6587\u732e: 1\u4ef6\u4e2d 1-1\u4ef6\u3092 \u8868\u793a 1 Protection and Interoperability for Mobile Agents: A Secure and Open Programming Environment BELLAVISTA Paolo , CORRADI Antonio , STEFANELLI Cesare IEICE transactions on communications 83(5), 961-972, 2000-05-25 \u53c2\u8003\u6587\u732e36\u4ef6 \u88ab\u5f15\u7528\u6587\u732e2\u4ef6 Tweet \u5404\u7a2e\u30b3\u30fc\u30c9 (\u2026", "num_citations": "28\n", "authors": ["492"]}
{"title": "Service-oriented sharding with aspen\n", "abstract": " The rise of blockchain-based cryptocurrencies has led to an explosion of services using distributed ledgers as their underlying infrastructure. However, due to inherently single-service oriented blockchain protocols, such services can bloat the existing ledgers, fail to provide sufficient security, or completely forego the property of trustless auditability. Security concerns, trust restrictions, and scalability limits regarding the resource requirements of users hamper the sustainable development of loosely-coupled services on blockchains. This paper introduces Aspen, a sharded blockchain protocol designed to securely scale with increasing number of services. Aspen shares the same trust model as Bitcoin in a peer-to-peer network that is prone to extreme churn containing Byzantine participants. It enables introduction of new services without compromising the security, leveraging the trust assumptions, or flooding users with irrelevant messages.", "num_citations": "27\n", "authors": ["492"]}
{"title": "WAIF: Web of asynchronous information filters\n", "abstract": " The Internet is seeing a rapid increase in on-line newspapers and advertising for new products and sales.Yet only primitive mechanisms are available to help users discover and obtain that subset of these news items likely to be of interest. Current search engines are really only first step. For locating news providers, word-of-mouth and mass mailings are still used; for retrieval of news items, users are forced to poll web sites regularly or provide e-mail addresses for follow-up mailings. WAIF is a new framework to facilitate easy user access for Internet users to relevant news items. WAIF supports new kinds of browsers, personalized filters, recommendation systems, and - most importantly - an evolution path intended to enable efficient deployment of new techniques that enhance the user retrieval experience.", "num_citations": "27\n", "authors": ["492"]}
{"title": "Smart spot instances for the supercloud\n", "abstract": " In this paper, we explore the use of live VM migration to take advantage of spot markets such as provided by Amazon and Google. These markets provide an exciting low cost alternative to regular VM instances, but the threats of price spikes and premature termination severely limit their usability. Migration can address these threats: spot market instances facing price hikes or termination can migrate to other instance types, including regular ones. Reliability can be further improved by replication. In this paper we investigate various design options and present some preliminary results of experiments with dynamic programming techniques, both using simulation and using a realistic deployment. We find that in unstable markets we can achieve significant savings at low overhead and while maintaining good reliability.", "num_citations": "26\n", "authors": ["492"]}
{"title": "Proactive cache placement on cooperative client caches for online social networks\n", "abstract": " This paper investigates cache placement on a cooperative cache built from individual client caches in an online social network or web service. We use a service that maintains a mapping between content and the clients that cache it, and propose cache placement schemes that leverage relationships between clients (for example, social links) and workload statistics, proactively placing content on clients that are likely to access it. We evaluate efficacy through simulation, comparing our schemes against commonly used cache placement algorithms as well as optimal placement. We synthesize a workload to match characteristics of online social networks. Simulation results of our proposed caching schemes impose moderate network overhead and show considerable improvement to the client's cache hit ratio, even under churn.", "num_citations": "26\n", "authors": ["492"]}
{"title": "Goal-oriented programming, or composition using events, or threads considered harmful\n", "abstract": " Many applications, and particularly distributed applications, are about dealing with events. The code is of the form: when this message arrives do this; when this timer expires do that; when that server fails do something else; etc. Perhaps the most natural way to program this is by using interrupt handlers. Programmers have found this hard to program, and prefer loops of the form: for ever {e= await_event (); handle_event (e);}. But there are several problems with this approach. The handle_event routine may take a long time to execute, slowing down the handling of subsequent events. Worse, handle_event may invoke await_event to wait, for example, for the reply of a Remote Procedure Call. To deal with this, the thread abstraction was introduced. While threads are handling events, or awaiting for specific events, unrelated events can be handled by other threads. Unfortunately, anybody who has ever used threads\u00a0\u2026", "num_citations": "26\n", "authors": ["492"]}
{"title": "Connecting RPC-based distributed systems using wide-area networks\n", "abstract": " Remote Procedure Call (RPC) is a widely used communication mechanism in local network based distributed operating systems. It is simple, fast, and straightforward to implement. However, when two or more distant distributed systems are connected, problems arise concerning the protocols, locating services, and other issues. To solve these problems, gateways are introduced. In this paper we discuss various ways in which these gateways can be organized and show how their application in the Amoeba Distributed Operating System has solved the problems cited above.", "num_citations": "26\n", "authors": ["492"]}
{"title": "Replication techniques for availability\n", "abstract": " The chapter studies how to provide clients with access to a replicated object that is logically indistinguishable from accessing a single yet highly available object. We study this problem under two different models. In the first, we assume that failures can be detected accurately. In the second we drop this assumption, making the model more realistic but also significantly more challenging. Under the first model, we present the primary-backup and chain replication techniques. Under the second model, we present techniques based on voting. We conclude with a discussion on reconfiguration.", "num_citations": "25\n", "authors": ["492"]}
{"title": "User-specified adaptive scheduling in a streaming media network\n", "abstract": " In disaster and combat situations, mobile cameras and other sensors transmit real-time data, used by many operators or analysis tools. Unfortunately, in the face of limited, unreliable resources, and varying demands, not all users may be able to get the fidelity they require. This paper describes MediaNet, a distributed stream processing system designed with the above scenarios in mind. Unlike past approaches, MediaNet's users can intuitively specify how the system should adapt based on their individual needs. MediaNet uses both local and online global resource scheduling to improve user performance and network utilization, and adapts without requiring underlying support for resource reservations. Performance experiments show that our scheduling algorithm is reasonably fast, and that user performance and network utilization are both significantly improved.", "num_citations": "24\n", "authors": ["492"]}
{"title": "Amoeba\n", "abstract": " Amoeba | Proceedings of the Workshop on Micro-kernels and Other Kernel Architectures ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleProceedingsProceedings of the Workshop on Micro-kernels and Other Kernel ArchitecturesAmoeba ARTICLE Amoeba Share on Author: Robbert Van Renesse profile image Robbert van Renesse View Profile Authors Info & Affiliations Publication: Proceedings of the Workshop on Micro-kernels and Other Kernel ArchitecturesApril 1992 Pages 1\u201310 1citation 0 Downloads Metrics Total Citations1 Total Downloads0 Last 12 Months0 Last 6 weeks0 Get Citation Alerts New Citation Alert added! This alert : \u2026", "num_citations": "24\n", "authors": ["492"]}
{"title": "Configuring distributed computations using response surfaces\n", "abstract": " Configuring large distributed computations is a challenging task. Efficiently executing distributed computations requires configuration tuning based on careful examination of application and hardware properties. Considering the large number of parameters and impracticality of using trial and error in a production environment, programmers tend to make these decisions based on their experience and rules of thumb. Such configurations can lead to underutilized and costly clusters, and missed deadlines.", "num_citations": "23\n", "authors": ["492"]}
{"title": "Balancing gossip exchanges in networks with firewalls.\n", "abstract": " Balancing Gossip Exchanges in Networks with Firewalls Page 1 Balancing Gossip Exchanges in Networks with Firewalls J. Leitao, R. van Renesse and L. Rodrigues Introduction Balancing Gossip Evaluation Conclusions Balancing Gossip Exchanges in Networks with Firewalls J. Leitao, R. van Renesse and L. Rodrigues IPTPS 2010 April 27, 2010 Page 2 Balancing Gossip Exchanges in Networks with Firewalls J. Leitao, R. van Renesse and L. Rodrigues Introduction Balancing Gossip Evaluation Conclusions Outline 1 Introduction 2 Balancing Gossip 3 Evaluation 4 Conclusions Page 3 Balancing Gossip Exchanges in Networks with Firewalls J. Leitao, R. van Renesse and L. Rodrigues Introduction Balancing Gossip Evaluation Conclusions Introduction Scope Gossip protocols: Very flexible. Easy to implement. Scalable. Page 4 Balancing Gossip Exchanges in Networks with Firewalls J. Leitao, R. van Renesse and L-\u2026", "num_citations": "23\n", "authors": ["492"]}
{"title": "An experiment in formal design using meta-properties\n", "abstract": " Formal methods tools have greatly influenced our ability to increase the reliability of software and hardware systems by revealing errors and clarifying critical concepts. In this article, we show how a rich specification language and a theorem prover for it have contributed to the design and implementation of verifiably correct adaptive protocols. The protocol-building team included experts in formal methods who were able to use the theorem prover to help guide protocol construction at the pace of implementation that is not formally assisted. This example shows that formal methods can have a large impact when being engaged at the earliest stages of design and implementation, because they add value to all subsequent stages, including the creation of informative documentation needed for the maintenance and evolution of software.", "num_citations": "22\n", "authors": ["492"]}
{"title": "A summary of parallel alpha-beta search results\n", "abstract": " In a recent article in this journal, Marsland reviewed the state-of-the-art of single-processor algorithms for game tree searching and pruning [1]. As a number of programs are currently running on computer systems consisting of multiple processors, it is also important to review the current state of parallel search and pruning algorithms. We will thus extend Marsland's paper by discussing the particular problems of such parallel algorithms. We will review the different approaches to the design of a parallel alpha-beta algorithm. We will also discuss how a parallel search interacts with several enhancements of alpha-beta (eg, move-ordering heuristics) and what kind of speedup* may be expected by using multiple processors.", "num_citations": "22\n", "authors": ["492"]}
{"title": "Method for improving search engine efficiency\n", "abstract": " In a method for improving the efficiency of a search engine in accessing, searching and retrieving information in the form of documents stored in document or content repositories, the search engine comprises an array of search nodes hosted on one or more servers. An index of the stored document is created. The search engine processes a user search query and returns a result set of query-matching documents. The index of the search engine is configured on the basis of one or more document properties and partitioned, replicated and distributed over the array of the search nodes. The search queries are processed on the basis of the distributed index. The method realizes a framework for distributing the index of a search engine across several hosts in a computer cluster, relying on three orthogonal mechanisms for index distribution, namely index partitioning, index replication, and assignment of replicas to hosts\u00a0\u2026", "num_citations": "21\n", "authors": ["492"]}
{"title": "Enforcing fairness in a live-streaming system\n", "abstract": " We describe a practical auditing approach designed to encourage fairness in peer-to-peer streaming. Auditing is employed to ensure that correct nodes are able to receive streams even in the presence of nodes that do not upload enough data (opportunistic nodes), and scales well when compared to previous solutions that rely on tit-for-tat style of data exchange. Auditing involves two roles: local and global. Untrusted local auditors run on all nodes in the system, and are responsible for collecting and maintaining accountable information regarding data sent and received by each node. Meanwhile, one or more trusted global auditors periodically sample the state of participating nodes, estimate whether the streaming quality is satisfactory, and decide whether any actions are required. We demonstrate through simulation that our approach can successfully detect and react to the presence of opportunistic nodes in\u00a0\u2026", "num_citations": "21\n", "authors": ["492"]}
{"title": "FirePatch: Secure and Time-Critical Dissemination of Software Patches\n", "abstract": " Because software security patches contain information about vulnerabilities, they can be reverse engineered into exploits. Tools for doing this already exist. As a result, there is a race between hackers and end-users to obtain patches first. In this paper we present and evaluate FirePatch, an intrusion-tolerant dissemination mechanism that combines encryption, replication, and sandboxing such that end-users are able to win the security patch race.", "num_citations": "21\n", "authors": ["492"]}
{"title": "Implementing IPv6 as a peer-to-peer overlay network\n", "abstract": " This paper proposes to implement an IPv6 routing infrastructure as a self-organizing overlay network on top of the current IPv4 infrastructure. The overlay network builds upon a distributed IPv6 edge router with a master/slave architecture. We show how different slaves can be constructed to tunnel through NATs and firewalls, as well as to improve robustness of the routing infrastructure and to provide efficient and resilient implementations for features such as multicast, anycast, and mobile IP using currently available peer-to-peer (P2P) protocols. The resulting IPv6 overlay network would restore the end-to-end property of the original Internet, support evolution and dynamic updating of the protocols running on the overlay network, make available IPv6 and the associated features to network applications immediately, and provide an ideal underlying infrastructure for P2P applications, without changing networking\u00a0\u2026", "num_citations": "21\n", "authors": ["492"]}
{"title": "Environment mobility: moving the desktop around\n", "abstract": " In this position paper, we focus on issues related to middleware support for software mobility in ad hoc and pervasive systems. In particular, we are interested in moving the computational environment of a mobile user following his or her trajectory. We present details of WAIFARER, a prototype implementation that automatically saves and restores application level state to support this mobility. Security, integrity, and fault-tolerance are just some of the key problems that need to be addressed in the future.", "num_citations": "20\n", "authors": ["492"]}
{"title": "Secure abstraction with code capabilities\n", "abstract": " We propose embedding executable code fragments in cryptographically protected capabilities to enable flexible discretionary access control in cloud-like computing infrastructures. We demonstrate how such a code capability mechanism can be implemented completely in user space. Using a novel combination of X.509 certificates and JavaScript code, code capabilities support restricted delegation, confinement, revocation, and rights amplification for secure abstraction.", "num_citations": "19\n", "authors": ["492"]}
{"title": "Power-aware epidemics\n", "abstract": " Epidemic protocols have been heralded as appropriate for wireless sensor networks. The nodes in such networks have limited battery resources. In this paper we investigate the use of power in three styles of epidemic protocols: basic epidemics, neighborhood flooding epidemics, and hierarchical epidemics. Basic epidemics turn out to be highly power hungry, and are not appropriate for power-aware applications. Both neighborhood and hierarchical epidemics can be made to use power judiciously, but a trade-off exists between scalability and latency.", "num_citations": "18\n", "authors": ["492"]}
{"title": "An adaptive protocol for locating programmable media gateways\n", "abstract": " We describe a new control protocol called Adaptive Gateway Location Protocol (AGLP). In this protocol, a client requests a computation on a multimedia stream. AGLP discovers programmable Internet servers that process multimedia streams, and assigns the computation to one of these so-called gateways. AGLP continuously searches for alternate gateways, and, transparent to users, migrates computations between them to improve efficiency. The AGLP protocol uses soft-states for robustness and scale. Simulation results support that our protocol quickly locates gateways and migrates computations while keeping the load on the network low. We also outline planned enhancements to AGLP.", "num_citations": "18\n", "authors": ["492"]}
{"title": "Leveraging sharding in the design of scalable replication protocols\n", "abstract": " Most if not all datacenter services use sharding and replication for scalability and reliability. Shards are more-or-less independent of one another and individually replicated. In this paper, we challenge this design philosophy and present a replication protocol where the shards interact with one another: A protocol running within shards ensures linearizable consistency, while the shards interact in order to improve availability. We provide a specification for the protocol, prove its safety, analyze its liveness and availability properties, and evaluate a working implementation.", "num_citations": "17\n", "authors": ["492"]}
{"title": "Investigating correct-by-construction attack-tolerant systems\n", "abstract": " Attack-tolerant distributed systems change their protocols on-the-fly in response to apparent attacks from the environment; they substitute functionally equivalent versions possibly more resistant to detected threats. Alternative protocols can be packaged together as a single adaptive protocol or variants from a formal protocol library can be sent to threatened groups of processes. We are experimenting with libraries of attack-tolerant protocols that are correct-by-construction and testing them in environments that simulate specified threats, including constructive versions of the famous FLP imaginary adversary against fault-tolerant consensus. We expect that all variants of tolerant protocols are automatically generated and accompanied by machine checked proofs that the generated code satisfies formal properties.", "num_citations": "17\n", "authors": ["492"]}
{"title": "Model framework to facilitate robust programming of distributed workflows\n", "abstract": " A method is disclosed. A finite state machine model for a single system workflow is replicated across a plurality of distributed nodes associated with a leader election protocol. A leader is determined amongst the plurality of distributed nodes to perform a next action of the finite state machine model based at least in part on the leader election protocol. One or more nodes amongst the plurality of distributed nodes are configured to submit a timeout ticket if the next action of the finite state machine model does not appear to have been performed by the leader within a prescribed time.", "num_citations": "16\n", "authors": ["492"]}
{"title": "Supercloud: A library cloud for exploiting cloud diversity\n", "abstract": " Infrastructure-as-a-Service (IaaS) cloud providers hide available interfaces for virtual machine (VM) placement and migration, CPU capping, memory ballooning, page sharing, and I/O throttling, limiting the ways in which applications can optimally configure resources or respond to dynamically shifting workloads. Given these interfaces, applications could migrate VMs in response to diurnal workloads or changing prices, adjust resources in response to load changes, and so on. This article proposes a new abstraction that we call a Library Cloud and that allows users to customize the diverse available cloud resources to best serve their applications. We built a prototype of a Library Cloud that we call the Supercloud. The Supercloud encapsulates applications in a virtual cloud under users\u2019 full control and can incorporate one or more availability zones within a cloud provider or across different providers. The\u00a0\u2026", "num_citations": "15\n", "authors": ["492"]}
{"title": "Omni-kernel: An operating system architecture for pervasive monitoring and scheduling\n", "abstract": " The  omni-kernel  architecture is designed around pervasive monitoring and scheduling. Motivated by new requirements in virtualized environments, this architecture ensures that all resource consumption is measured, that resource consumption resulting from a scheduling decision is attributable to an activity, and that scheduling decisions are fine-grained.  Vortex , implemented for multi-core x86-64 platforms, instantiates the omni-kernel architecture, providing a wide range of operating system functionality and abstractions. With Vortex, we experimentally demonstrated the efficacy of the omni-kernel architecture to provide accurate scheduler control over resource allocation despite competing workloads. Experiments involving Apache, MySQL, and Hadoop quantify the cost of pervasive monitoring and scheduling in Vortex to be below    percent of   cpu  consumption.", "num_citations": "15\n", "authors": ["492"]}
{"title": "A RISC approach to process groups\n", "abstract": " ISIS [1], developed at Cornell University, is a system for building applications consisting of cooperating, distributed processes. Group management and group communication are two basic building blocks provided by ISIS. ISIS has been very successful, and there is currently a demand for a version that will run on many different environments and transport protocols, and will scale to many process groups. Furthermore, performance is an important issue. For this purpose, ISIS is being redesigned and rebuilt from scratch [2]. Of particular importance to us is getting the new ISIS system to run well on modern microkernel technology, notably MACH [3] and Chorus [4]. The basic reasoning behind these plans is that microkernels appear to offer satisfactory support for memory management and communication between processes on the same machine, but that support for applications that run on multiple machines is weak\u00a0\u2026", "num_citations": "15\n", "authors": ["492"]}
{"title": "SGX enforcement of use-based privacy\n", "abstract": " Use-based privacy restricts how information may be used, making it well-suited for data collection and data analysis applications in networked information systems. This work investigates the feasibility of enforcing use-based privacy in distributed systems with adversarial service providers. Three architectures that use Intel-SGX are explored: source-based monitoring, delegated monitoring, and inline monitoring. Trade-offs are explored between deployability, performance, and privacy. Source-based monitoring imposes no burden on application developers and supports legacy applications, but 35-62% latency overhead was observed for simple applications. Delegated monitoring offers the best performance against malicious adversaries, whereas inline monitoring provides performance improvements (0-14% latency overhead compared to a baseline application) in an attenuated threat model. These results provide\u00a0\u2026", "num_citations": "14\n", "authors": ["492"]}
{"title": "Fast protocol transition in a distributed environment (brief announcement)\n", "abstract": " Adaptivity is a desired feature of the distributed systems. Because many characteristics of the environment (network topology, active process distribution, etc.) may change from time to time, a good system should be able to adapt itself and perform sufficiently well under different conditions.", "num_citations": "14\n", "authors": ["492"]}
{"title": "MANDIS/Amoeba: A widely dispersed object-oriented operating system\n", "abstract": " MANDIS/Amoeba: A Widely Dispersed Object-Oriented Operating System \u2014 University of Twente Research Information Skip to main navigation Skip to search Skip to main content University of Twente Research Information Logo Home Profiles Research Units Research Output Datasets Activities Prizes Press / Media Search by expertise, name or affiliation MANDIS/Amoeba: A Widely Dispersed Object-Oriented Operating System Robbert van Renesse, JM van Staveren, Jane Hall, Martin Turnbull, Bill Janssen, Jack Jansen, Sape J. Mullender, Don Holden, A. Bastable, Terje Fallmyr, Dag Johansen, K. Sjoerd Mullender, Walter Zimmer Research output: Chapter in Book/Report/Conference proceeding \u203a Conference contribution \u203a Academic \u203a peer-review Overview Original language English Title of host publication Research into Networks and Distributed Applications Subtitle of host publication European Teleinformatics -''\u2026", "num_citations": "14\n", "authors": ["492"]}
{"title": "Reliability issues in distributed operating systems\n", "abstract": " The authors examine the various kinds of distributed systems and discuss some of the reliability issues involved. They first concentrate on the causes of unreliability, illustrating these with some general solutions and examples. Among the issues treated are interprocess communication, machine crashes, server redundancy, and data integrity. Then they examine one distributed operating system, Amoeba, to see how reliability issues have been handled in at least one real system, and how the pieces fit together.", "num_citations": "14\n", "authors": ["492"]}
{"title": "Towards consent-based lifelogging in sport analytic\n", "abstract": " Lifelogging is becoming widely deployed outside the scope of solipsistic self quantification. In elite sport, the ability to utilize these digital footprints of athletes for sport analytic has already become a game changer. This raises privacy concerns regarding both the individual lifelogger and the bystanders inadvertently captured by increasingly ubiquitous sensing devices. This paper describes a lifelogging model for consented use of personal data for sport analytic. The proposed model is a stepping stone towards understanding how privacy-preserving lifelogging frameworks and run-time systems can be constructed.", "num_citations": "13\n", "authors": ["492"]}
{"title": "Scalog: Seamless reconfiguration and total order in a scalable shared log\n", "abstract": " The shared log paradigm is at the heart of modern distributed applications in the growing cloud computing industry. Often, application logs must be stored durably for analytics, regulations, or failure recovery, and their smooth operation depends closely on how the log is implemented. Scalog is a new implementation of the shared log abstraction that offers an unprecedented combination of features for continuous smooth delivery of service: Scalog allows applications to customize data placement, supports reconfiguration with no loss in availability, and recovers quickly from failures. At the same time, Scalog provides high throughput and total order.", "num_citations": "11\n", "authors": ["492"]}
{"title": "Safe serializable secure scheduling: Transactions and the trade-off between security and consistency\n", "abstract": " Modern applications often operate on data in multiple administrative domains. In this federated setting, participants may not fully trust each other. These distributed applications use transactions as a core mechanism for ensuring reliability and consistency with persistent data. However, the coordination mechanisms needed for transactions can both leak confidential information and allow unauthorized influence. By implementing a simple attack, we show these side channels can be exploited. However, our focus is on preventing such attacks. We explore secure scheduling of atomic, serializable transactions in a federated setting. While we prove that no protocol can guarantee security and liveness in all settings, we establish conditions for sets of transactions that can safely complete under secure scheduling. Based on these conditions, we introduce\\ti {staged commit}, a secure scheduling protocol for federated\u00a0\u2026", "num_citations": "11\n", "authors": ["492"]}
{"title": "A diversified and correct-by-construction broadcast service\n", "abstract": " We present a fault-tolerant ordered broadcast service that is correct-by-construction. Our broadcast service allows for diversity in space, whereby the participants in the broadcast protocol run different code, as well as in time, whereby the protocol itself is changed periodically. We use the Nuprl proof assistant to specify the service, prove correctness, and synthesize the code. The paper includes initial performance results.", "num_citations": "11\n", "authors": ["492"]}
{"title": "Shadowdb: A replicated database on a synthesized consensus core\n", "abstract": " This paper describes ShadowDB, a replicated version of the BerkeleyDB database. ShadowDB is a primary-backup based replication protocol where failure handling, the critical part of the protocol, is taken care of by a synthesized consensus service that is correct by construction. The service has been proven correct semi-automatically by the Nuprl proof assistant. We describe the design and process to prove the consensus protocol correct and present the database replication protocol. The performance of ShadowDB is good in the normal case and recovering from a failure only takes seconds. Our approach offers simplified means to diversify the code in a way that preserves correctness.", "num_citations": "11\n", "authors": ["492"]}
{"title": "Incorporating system resource information into flow control\n", "abstract": " Upcall-based distributed systems have become widespread in recent years.  While upcall-based systems provide some obvious advantages, experiences with these systems have exposed unanticipated problems of unpredictability and inefficiency. Incorporating system resources information into flow control is essential in solving these problems. Variants of window-based flow control suitable for distributed systems are investigated. Next, message packing, which improves network bandwidth usage efficiency, and, consequently, message throughput, is presented. Finally, a back pressure mechanism which controls admission of messages into the system by blocking applications at high load is presented. The combination of the window mechanism and the back pressure mechanism provides end-to-end management of system resources.  The former manages network resources, while the latter manages operating system resources. The combination maintains good throughput even under high load.", "num_citations": "11\n", "authors": ["492"]}
{"title": "Amoeba: high-performance distributed computing\n", "abstract": " Amoeba: high-performance distributed computing (1989) | www.narcis.nl KNAW KNAW Narcis Back to search results CWI Publication Amoeba: high-performance distributed computing (1989) Pagina-navigatie: Main Save publication Save as MODS Export to Mendeley Save as EndNote Export to RefWorks Title Amoeba: high-performance distributed computing Series Department of Computer Science [CS] Author SJ Mullender (Sape); G. van Rossum (Guido); AS Tanenbaum (Andrew); R. van Renesse (Robbert); JM van Staveren Date issued 1989-01-01 Access Closed Access Language English Type Other Publisher CWI Publication https://ir.cwi.nl/pub/5813 Persistent Identifier urn:NBN:nl:ui:18-5813 Metadata XML Source CWI Go to Website Navigation: Home about narcis login Nederlands contact Anna van Saksenlaan 51 2593 HW Den Haag narcis@dans.knaw.nl More >>> Youtube Newsletter >>> Privacy >>> >>\u2026", "num_citations": "11\n", "authors": ["492"]}
{"title": "FLIP; an Internetwork Protocol for Supporting Distributed Systems\n", "abstract": " Most modern network protocols give adequate support for traditional applications such as file transfer and remote login. Distributed applications, however, have different requirements (eg, efficient atmost-once remote procedure call even in the face of processor failures). Instead of using ad-hoc protocols to meet each of the new requirements, we have designed a new protocol, called the Fast Local Internet Protocol (FLIP), that provides a clean and simple integrated approach to these new requirements. FLIP is an unreliable message protocol that provides both point-to-point communication and multicast communication, and requires almost no network management. Furthermore, by using FLIP we have simplified higher-level protocols such as remote procedure call and group communication, and enhanced support for process migration and security. A prototype implementation of FLIP has been built as part of the new kernel for the Amoeba distributed operating system, and is in daily use. Measurements of its performance are presented.", "num_citations": "9\n", "authors": ["492"]}
{"title": "SJ Mullender, J. Jansen and G. van Rossum Comm. of the ACM, 33, 12 (Dec. 1990), pp. 46-63.\n", "abstract": " Amoeba threads are managed at user-level but the kernel is aware of them: when a thread executes a blocking system call, the kernel returns control to the thread scheduler of the task; this thread scheduler can either schedule another thread or return control to the OS.", "num_citations": "9\n", "authors": ["492"]}
{"title": "Sprinkler\u2014reliable broadcast for geographically dispersed datacenters\n", "abstract": " This paper describes and evaluates Sprinkler, a reliable high-throughput broadcast facility for geographically dispersed datacenters. For scaling cloud services, datacenters use caching throughout their infrastructure. Sprinkler can be used to broadcast update events that invalidate cache entries. The number of recipients can scale to many thousands in such scenarios. The Sprinkler infrastructure consists of two layers: one layer to disseminate events among datacenters, and a second layer to disseminate events among machines within a datacenter. A novel garbage collection interface is introduced to save storage space and network bandwidth. The first layer is evaluated using an implementation deployed on Emulab. For the second layer, involving thousands of nodes, we use a discrete event simulation. The effect of garbage collection is analyzed using simulation. The evaluation shows that Sprinkler can\u00a0\u2026", "num_citations": "8\n", "authors": ["492"]}
{"title": "A scalable information management middleware for large distributed systems\n", "abstract": " Information management is one of the key tasks of any large-scale distributed application. The goal of this dissertation is to design and build a general and scalable information management middleware for large distributed systems that will facilitate design, development, and deployment of distributed applications and that will enable application developers to explore the tradeoffs between communication cost, response latency, and consistency.", "num_citations": "8\n", "authors": ["492"]}
{"title": "What TACOMA taught us\n", "abstract": " Tacoma is a system for supporting processes| so called agents| whose execution moves from processor to processor. Our first prototype was completed in March 1994 the version documented elsewhere in this volume was up and running the following year. There have since been four major system releases. The current versions of Tacoma provide support for agents written in C, C++, ML, Perl, Python, Scheme, and Visual Basic. They run on most flavors of UNIX, the Win32 API (including Windows 95, Windows NT, and Windows CE platforms), and the Palm Pilot (from US Robotics). Our practice has been to build and discard prototypes we try to learn from what worked and what didn't. 1", "num_citations": "8\n", "authors": ["492"]}
{"title": "Turtle consensus: Moving target defense for consensus\n", "abstract": " Consensus is a basic building block in middleware configuration services [4, 18]. While such services are designed to tolerate crash failures in asynchronous settings, they may not stand up well to Denial-of-Service (DoS) attacks. Specifically, malicious clients can carefully craft workloads that substantially degrade the performance of many state-of-the-art consensus protocols. By exploiting protocol-specific vulnerabilities, attackers can constantly force the protocol participants to slow execution paths [8]. In this paper, we investigate designing consensus protocols that provide acceptable performance under DoS attacks that aim to saturate the bandwidth of protocol participants.", "num_citations": "7\n", "authors": ["492"]}
{"title": "Elastic replication for scalable consistent service\n", "abstract": " Most of the scalable and high-performance services used in datacenters today provide relaxed consistency guarantees in order to achieve good responsiveness. One reason for this is that it is believed that expensive majority-based consensus protocols are needed in order to provide strong consistency in asynchronous and partially synchronous environments such as a datacenter or the Internet. In this extended abstract, we briefly describe our research into building a new lightweight replication protocol that does not use majority voting and yet provides strong consistency in the presence of crash faults and imperfect failure detectors.", "num_citations": "7\n", "authors": ["492"]}
{"title": "Collaborative networking in an uncooperative Internet\n", "abstract": " Collaborative applications often require peer-to-peer interaction and peer discovery mechanisms. In today's Internet, Firewall and NAT technology, and a lack of support of IP multicast, have made it very difficult to support such applications. Application Level Gateways and Directory Services can solve these problems to some extent, but have scalability problems and should be used as a last resort. This paper describes our experience with implementing a service called Astrolabe which uses a peer-to-peer epidemic protocol. We show how we solved peer-to-peer communication, auto-configuration, and peer discovery. The resulting Astrolabe service can be used to support the development of other peer-to-peer protocols and applications.", "num_citations": "7\n", "authors": ["492"]}
{"title": "The workstation: computing resource or just a terminal?\n", "abstract": " The Workstation: Computing Resource or Just a Terminal? (1987) | www.narcis.nl KNAW KNAW Narcis Back to search results VU University Amsterdam Publication The Workstation: Computing Resource or Just a Terminal? (1987) Pagina-navigatie: Main Save publication Save as MODS Export to Mendeley Save as EndNote Export to RefWorks Title The Workstation: Computing Resource or Just a Terminal? Published in Proceedings of the IEEE Workshop on Workstation Operating Systems Author van Renesse, R.; Tanenbaum, AS; Sharp, GJ Publisher Computer Systems Date issued 1987 Access Restricted Access Language English Type Conference Paper Publisher IEEE Publication https://research.vu.nl/en/publications/88022968-4e10-4b7a-86... OpenURL Search this publication in (your) library Persistent Identifiers NBN urn:nbn:nl:ui:31-88022968-4e10-4b7a-86e8-530f84bb4f3d Handle 1871.1/88022968----to \u2026", "num_citations": "7\n", "authors": ["492"]}
{"title": "Distributed protocols and heterogeneous trust: Technical report\n", "abstract": " The robustness of distributed systems is usually phrased in terms of the number of failures of certain types that they can withstand. However, these failure models are too crude to describe the different kinds of trust and expectations of participants in the modern world of complex, integrated systems extending across different owners, networks, and administrative domains. Modern systems often exist in an environment of heterogeneous trust, in which different participants may have different opinions about the trustworthiness of other nodes, and a single participant may consider other nodes to differ in their trustworthiness. We explore how to construct distributed protocols that meet the requirements of all participants, even in heterogeneous trust environments. The key to our approach is using lattice-based information flow to analyse and prove protocol properties. To demonstrate this approach, we show how two earlier distributed algorithms can be generalized to work in the presence of heterogeneous trust: first, Heterogeneous Fast Consensus, an adaptation of the earlier Bosco Fast Consensus protocol; and second, Nysiad, an algorithm for converting crash-tolerant protocols to be Byzantine-tolerant. Through simulations, we show that customizing a protocol to a heterogeneous trust configuration yields performance improvements over the conventional protocol designed for homogeneous trust.", "num_citations": "6\n", "authors": ["492"]}
{"title": "Cooperative client caching strategies for social and web applications\n", "abstract": " We evaluate the efficiency and cost of different placement strategies for a distributed cache implemented on the clients of an online social network or web service. In our system model, the service maintains a directory for content that tracks the location of objects. The service informs requesting clients of these locations and the clients will cache, serve, and push content according to directives provided by the service. We show that we can improve the individual cache hit ratio by leveraging relationships between clients (eg, social links). The network load imposed on clients is practical.", "num_citations": "6\n", "authors": ["492"]}
{"title": "Challenges facing tomorrow's datacenter: summary of the LADiS workshop\n", "abstract": " The 2008 workshop on Large-Scale Distributed Systems and Middleware (LADiS) addressed challenges facing tomorrow's datacenter. Over the course of three days, attendees laid forth an ambitious research agenda that covered hot topics, ranging from fault-tolerance algorithms to performance management to cloud computing. This report summarizes key themes and conclusions from the workshop.", "num_citations": "6\n", "authors": ["492"]}
{"title": "Consus: Taming the Paxi\n", "abstract": " Consus is a strictly serializable geo-replicated transactional key-value store. The key contribution of Consus is a new commit protocol that reduces the cost of executing a transaction to three wide area message delays in the common case. Augmenting the commit protocol are multiple Paxos implementations optimized for different purposes. Together the different implementations and optimizations comprise a cohesive system that provides low latency, high availability, and strong guarantees. This paper describes the techniques implemented in the open source release of Consus, and lays the groundwork for evaluating Consus once the system implementation is sufficiently robust for a thorough evaluation.", "num_citations": "5\n", "authors": ["492"]}
{"title": "A quantitative evaluation of traffic-aware routing strategies\n", "abstract": " Sunnnary In this research, we address a simple question: how much benefit can be achieved by traffic-aware routing of lntemet traffic? Efficient routing on packet-switched networks has attracted considerable~ h attention from the early days of the Interoet to the present day, yet current routing practice still relies on weighted shortest paths to route traffic, using algorithms that do not take the distribution of traffic demand into account. Compared to trafficaware routing, static muting potentially reduces Internet performance and/or increases operational and infrastructure costs, as networks must overprovision to avoid congestion.Efficiently mapping traffic demands onto a fixed and limited network topology-a practice called\" traffic engineering\"-poses several challenges: acquiring a traffic demand matrix, providing a mechanism (such as MPLS or adjustable edge weights) for mapping traffic to links, and developing an\u00a0\u2026", "num_citations": "5\n", "authors": ["492"]}
{"title": "Formally Verifying Hybrid Protocols with the Nuprl Logical ProgrammingEnvironment\n", "abstract": " We describe a generic switching protocol for the construction of hybrid   protocols and prove it correct with the Nuprl proof development system.  We   introduce the concept of meta-properties to characterize communication   properties that can be preserved by switching and identify switching   invariants that an implementation of the switching protocol must satisfy    in order to work correctly.      Our work shows how a theorem prover with a rich specification language can   contribute to the design and implementation of verifiably correct adaptive   protocols and that it can have a large impact when being engaged at the   earliest stages of the design.", "num_citations": "5\n", "authors": ["492"]}
{"title": "Brief announcement: Fast protocol transition in a distributed environment\n", "abstract": " Modern distributed systems are generally built from a set of components. Such a system has the freedom to adapt itself by switching from using one component to another. Because most components in the distributed systems are running protocols, an agreement must be achieved among the processes when doing the adaptation.The traditional approach to do the protocol switch is by using the two-phase-commit algorithm, in which a coordinator first broadcasts a\" prepare\" message, and all the other processes pause their work and send back acknowledgments. Each process is buffering messages from its own application at this point. After the coordinator receives all the acknowledgments, it broadcasts a\" switch\" message, and upon receiving which all the processes resume working using the new configuration. This approach is clean and easy to implement. However, it has two shortcomings:(1) the reconfiguration\u00a0\u2026", "num_citations": "5\n", "authors": ["492"]}
{"title": "A MUTS Tutorial\n", "abstract": " This document attempts to get MUTS novices familiar with MUTS concepts. It does so by presenting a simple application: a set of \u2018\u2018pull\u2019\u2019applications are waiting for messages. A single \u2018\u2018push\u2019\u2019process sends a message to the pull processes, which then print the message (much like the UNIX\u2020 write (1) program). This document does not provide the basic documentation of MUTS. For this, see the MUTS manual pages.", "num_citations": "5\n", "authors": ["492"]}
{"title": "A Secure High-Speed Transaction Protocol\n", "abstract": " A secure high-speed transaction protocol (1984) | www.narcis.nl KNAW KNAW Narcis Back to search results CWI Publication A secure high-speed transaction protocol (1984) Pagina-navigatie: Main Save publication Save as MODS Export to Mendeley Save as EndNote Export to RefWorks Title A secure high-speed transaction protocol Series Department of Computer Science [CS] Author SJ Mullender (Sape) Date issued 1984-01-01 Access Closed Access Language English Type Other Publisher CWI Publication https://ir.cwi.nl/pub/6442 Persistent Identifier urn:NBN:nl:ui:18-6442 Metadata XML Source CWI Go to Website Navigation: Home about narcis login Nederlands contact Anna van Saksenlaan 51 2593 HW Den Haag narcis@dans.knaw.nl More >>> Youtube Newsletter >>> Privacy statement >>> Disclaimer >>> DANS is an institute of KNAW and NWO Go to page top Go back to contents Go back to site \u2026", "num_citations": "5\n", "authors": ["492"]}
{"title": "Economics of a supercloud\n", "abstract": " A Supercloud is a\" CrossCloud\": It is an Infrastructure-as-a-Service (IaaS) that goes beyond federated or hybrid clouds and gives its users direct control over cloud deployments--even across different underlying cloud providers (Jia et al. 2015). It supports privileged cloud operations such as migration across autonomous cloud providers even if they use different virtual machine monitors, networking, and storage infrastructure. For instance, a user can start a virtual machine instance in the Google cloud (Google Compute Engine), migrate it live to the Amazon cloud (Amazon Elastic Compute Cloud), live migrate it again to the Microsoft cloud (Microsoft Azure), then finally live migrate it to a private cloud (eg a Eucalyptus or OpenStack based cloud). Moreover, a user can have a deployment that simultaneously exists over various combination of cloud providers, then change the placement at any time. To support such\u00a0\u2026", "num_citations": "4\n", "authors": ["492"]}
{"title": "A Blockchain Based on Gossip?-a Position Paper\n", "abstract": " A blockchain is an append-only sequence of blocks of arbitrary data. The two most popular approaches to blockchains are permissionless blockchains based on Proof of Work (PoW) and permissioned blockchains based on Byzantine consensus or Byzantine Fault Tolerance (BFT). The first is based on competitions between anonymous participants solving cryptopuzzles, while the latter is a cooperative approach based on mutual trust between participants. Major problems with PoW approaches include that the energy per transaction is enormous, the transaction rate is very low, and the latency is very high. A major problem with BFT is that membership is closed. Various other approaches to blockchains have been proposed to address these problems. In this paper we propose yet another approach, based on gossip (aka epidemiological protocols)[1]. Gossip is an approach to agreement in so-called eventually consistent systems, and is particularly popular in NoSQL Key-Value Stores such as Dynamo, Cassandra, and so on. In a basic gossip protocol, there is a fixed group of participants. Periodically, each participant randomly selects a peer and exchanges state. This state is reconciled in a way so that all nonfaulty participants eventually converge to the same state. It can be shown that this approach is efficient, converging in O (log N) gossip rounds where N is the number of participants, even in the face of participants failures and message loss [1]. Moreover, gossip protocols are amenable to open and dynamic membership whereby the membership itself is gossiped along with other state [4].To make the application of gossip to blockchains more\u00a0\u2026", "num_citations": "4\n", "authors": ["492"]}
{"title": "A middleware for gossip protocols.\n", "abstract": " Gossip protocols are known to be highly robust in scenarios with high churn, but if the data that is being gossiped becomes corrupted, a protocol\u2019s very robustness can make it hard to fix the problem. All participants need to be taken down, any disk-based data needs to be scrubbed, the cause of the corruption needs to be fixed, and only then can participants be restarted. If even a single participant is skipped in this process, say because it was temporarily unreachable, then it can contaminate the entire system all over again. We describe the design and implementation of a new middleware for gossip protocols that addresses this problem. Our middleware offers the ability to update code dynamically and provides a small resilient core that allows updating code that has failed catastrophically. Our initial PlanetLab-based deployment demonstrates that the middleware is efficient.", "num_citations": "4\n", "authors": ["492"]}
{"title": "The Horus uniform group interface\n", "abstract": " This document describes the current version of a uniform interface for the modules in the HORUS group communication architecture, and presents examples of its use.", "num_citations": "4\n", "authors": ["492"]}
{"title": "Wide-area communication under Amoeba\n", "abstract": " This document describes the earliest Amoeba wide-area gateway service that makes it possible to execute Amoeba transactions over existing long-haul networks. Furthermore, the specification of the interface between network drivers and the gateway is given. Finally, we will propose how to use the gateway service.", "num_citations": "4\n", "authors": ["492"]}
{"title": "Ovid: A Software-Defined Distributed Systems Framework to support Consistency and Change.\n", "abstract": " We present Ovid, a framework for building large-scale distributed systems that have to support strong consistency and at the same time need to be able to evolve quickly as a result of changes in their functionality or the assumptions they made for their initial deployment. In practice, organic growth often makes distributed systems increasingly more complex and unmanageable. To counter this, Ovid supports transformations, automated refinements that allow distributed systems to be developed from simple components. Examples of transformations include replication, batching, sharding, and encryption. Refinement mappings prove that transformed systems implement the specification. The result is a software-defined distributed system, in which a logically centralized controller specifies the components, their interactions, and their transformations. Such systems can be updated on-the-fly, changing assumptions or\u00a0\u2026", "num_citations": "3\n", "authors": ["492"]}
{"title": "Peer-to-Peer Systems IV: 4th International Workshop, IPTPS 2005, Ithaca, NY, USA, February 24-25, 2005, Revised Selected Papers\n", "abstract": " This book constitutes the thoroughly refereed post-proceedings of the 4th International Workshop on Peer-to-Peer Systems, IPTPS 2005, held at Cornell University, Ithaca, NY, USA, in February 2005. The 24 revised full papers were carefully selected during two rounds of reviewing and improvements from 123 submissions. The papers document the state of the art in peer-to-peer computing research. They are organized in topical sections on security and incentives, search, multicast, overlay algorithms, empirical studies, and network locality. The proceedings also include a report with a summary of discussions held at the workshop.", "num_citations": "3\n", "authors": ["492"]}
{"title": "Beyond unix-a true distributed system for the 1990s\n", "abstract": " UNIX has been around now for almost 20 years. At the time UNIX began, most departments felt themselves well-endowed indeed if they owned a single PDP-11/45 with 256K memory and a 2.5 M RK05 disk. Nowadays a laptop would be embarrassed to have only that. It is our hypothesis that UNIX is no longer the appropriate kind of operating system for the 1990s. In this paper, a new system, Amoeba, will be described, that we believe meets the requirements for distributed computing in the 1990s.", "num_citations": "3\n", "authors": ["492"]}
{"title": "The Design of a High-Performance File Server\n", "abstract": " The Bullet server is an innovative file server that outperforms traditional file servers like SUN's NFS by more than a factor of three. It achieves high throughput and low delay by a radically different software design than current file servers in use. Instead of storing files as a sequence of disk blocks, each Bullet server file is stored contiguously, both on disk and in the server's RAM cache. Furthermore, it employs the concept of an immutable file, to improve performance, to enable caching, and to provide a clean semantic model to the user. The paper describes the design and implementation of the Bullet server in detail, presents measurements of its performance, and compares this performance with other well-known file servers running on the same hardware. 1. INTRODUCTION Traditional file systems were designed for small machines, that is, computers with little RAM memory and small disks. Emphasis was on supporting large files using as few resources as possible. To allow...", "num_citations": "3\n", "authors": ["492"]}
{"title": "Research issues in distributed operating systems\n", "abstract": " As distributed computing becomes more widespread, both in high-energy physics and in other applications, centralized operating systems will gradually give way to distributed ones. In this paper we discuss some current research on five issues that are central to the design of distributed operating systems: communications primitives, naming and protection, resource management, fault tolerance, and system services. For each of these issues, some principles, examples, and other considerations will be given.", "num_citations": "3\n", "authors": ["492"]}
{"title": "A web of blocks\n", "abstract": " Blockchains offer a useful abstraction: a trustworthy, decentralized log of totally ordered transactions. Traditional blockchains have problems with scalability and efficiency, preventing their use for many applications. These limitations arise from the requirement that all participants agree on the total ordering of transactions. To address this fundamental shortcoming, we introduce Charlotte, a system for maintaining decentralized, authenticated data structures, including transaction logs. Each data structurestructure -- indeed, each block -- specifies its own availability and integrity properties, allowing Charlotte applications to retain the full benefits of permissioned or permissionless blockchains. In Charlotte, a block can be atomically appended to multiple logs, allowing applications to be interoperable when they want to, without inefficiently forcing all applications to share one big log. We call this open graph of interconnected blocks a blockweb. We allow new kinds of blockweb applications that operate beyond traditional chains. We demonstrate the viability of Charlotte applications with proof-of-concept servers running interoperable blockchains. Using performance data from our prototype, we estimate that when compared with traditional blockchains, Charlotte offers multiple orders of magnitude improvement in speed and energy efficiency.", "num_citations": "2\n", "authors": ["492"]}
{"title": "The supercloud: applying internet design principles to interconnecting clouds\n", "abstract": " Just like we have small dedicated networks in houses, cars, factories, etc., we will have small clouds in all these places. We need a way to glue all these clouds together into a single worldwide infrastructure. The Cloud Abstraction Layer could provide such glue.", "num_citations": "2\n", "authors": ["492"]}
{"title": "Ovid: A software-defined distributed systems framework\n", "abstract": " We present Ovid, a framework for building evolvable large-scale distributed systems that run in the cloud. Ovid constructs and deploys distributed systems as a collection of simple components, creating systems suited for containerization in the cloud. Ovid supports evolution of systems through transformations, which are automated refinements. Examples of transformations include replication, batching, sharding, and encryption. Ovid transformations guarantee that an evolving system still implements the same specification. Moreover, systems built with transformations can be combined with other systems to implement more complex infrastructure services. The result of this framework is a software-defined distributed system, in which a logically centralized controller specifies the components, their interactions, and their transformations.", "num_citations": "2\n", "authors": ["492"]}
{"title": "Providing scalability and low latency in state machine replication\n", "abstract": " State machine replication (SMR) is a well-known replication technique that ensures strong consistency (linearizability) for distributed services. Even though SMR ensures strong consistency, it provides limited throughput scalability, since every replica executes every command. We propose Scalable SMR (S-SMR), a technique that provides throughput scalability by means of partitioning the service state and partially ordering commands across partitions, along with two optimizations: caching and state prefetching.", "num_citations": "2\n", "authors": ["492"]}
{"title": "The energy efficiency of database replication protocols\n", "abstract": " Replication is a widely used technique to provide high-availability to online services. While being an effective way to mask failures, replication comes at a price: at least twice as much hardware and energy are required to mask a single failure. In a context where the electricity drawn by data centers worldwide is increasing each year, there is a need to maximize the amount of useful work done per Joule, a metric denoted as energy efficiency. In this paper, we review commonly-used database replication protocols and experimentally measure their energy efficiency. We observe that the most efficient replication protocol achieves less than 60% of the energy efficiency of a stand-alone server on the TPC-C benchmark. We identify algorithmic techniques that can be used by any protocol to improve its efficiency. Some approaches improve performance, others lower power consumption. Of particular interest is a technique\u00a0\u2026", "num_citations": "2\n", "authors": ["492"]}
{"title": "Supercloud: economical cloud service on multiple vendors\n", "abstract": " Today, Infrastructure-as-a-Service (IaaS) cloud providers such as Amazon's Elastic Compute Engine (EC2), Google's Compute Engine, and Microsoft's Azure offer elastic and isolated compute resources via virtualization and users often choose one of these providers based on price, locality, performance, and features. Typically, a user will choose the same provider for computation and storage to minimize latency and networking costs. Unfortunately, it can be difficult to switch providers once one is selected due to vendor lock-in [2].", "num_citations": "2\n", "authors": ["492"]}
{"title": "An execution service for a partitionable low bandwidth network\n", "abstract": " As the amount of scientific data grows to the point where the Internet bandwidth no longer supports its transfer it becomes necessary to make powerful computational services available near data repositories. Such services allow remote researchers to start long-running parallel computations on the data. Current execution services do not provide remote users with adequate management facilities for this style of computing. This paper describes the PEX system. It has an architecture based on partitionable group communication. We describe how PEX maintains replicated state in the face of processor failures and network partitions, and how it allows remote clients to manipulate this state. We present some performance numbers, and close with discussing related work.", "num_citations": "2\n", "authors": ["492"]}
{"title": "An introduction to the TACOMA distributed system. Version 1.0\n", "abstract": " This report briefly introduces TACOMA Version 1.0. This distributed system supports agents, computations that can roam the internet. The report presents the TACOMA project, the computational model, how to get started, and the basic TACOMA abstractions.", "num_citations": "2\n", "authors": ["492"]}
{"title": "Distributed systems in prospective\n", "abstract": " This paper summarizes benefits of distributed systems briefly. These are illustrated with systems discussed previously.", "num_citations": "2\n", "authors": ["492"]}
{"title": "High availability in a real-time system\n", "abstract": " The area of building embedded real-time systems is one in which the applications being designed are more advanced than the available underlying system support. Examples of such applications can be found in several fields, including robot control, avionics, and plant control systems. These systems all have hard real-time requirements: if a deadline is missed, then the result is catastrophic. Furthermore, such deadlines must often be met even in the face of bounded processor or network failures. Yet, the principles for building such systems are still being developed and the availability of systems supporting these principles is very limited.", "num_citations": "2\n", "authors": ["492"]}
{"title": "The evolution of a distributed operating system\n", "abstract": " AMOEBA is a research project to build a true distributed operating system using the object model. Under the COST11-ter MANDIS project this work was extended to cover wide-area networks. Besides describing the system, this paper discusses the successive versions in the implementation of its model, and why the changes were made. Its purpose is to prevent ourselves and others from making the same mistakes again, and to illustrate how a distributed operating system grows in sophistication and size.", "num_citations": "2\n", "authors": ["492"]}
{"title": "Making distributed systems palatable\n", "abstract": " Designing and implementing a distributed system is easy compared to the task of convincing people to use it. In a university Computer Science Dept., people generally use UNIX and are not at all interested in moving to a different environment, no matter how wonderful it may be. In this paper we report on how we have implemented a UNIX environment for the Amoeba distributed operating system [1], in order to make the transition from UNIX to Amoeba as simple as possible.", "num_citations": "2\n", "authors": ["492"]}
{"title": "The design of a real-time distributed system\n", "abstract": " [en] In modern physics experiments an increasing number and variety of programmable processors is used. As a consequence, a software environment is needed that provides an integrated approach to development, testing and use of real-time distributed software. This contribution is based on work being done in the AMOEBA Distributed Operating System Project and the FADOS Real-Time Distributed Operating System Project. A short description of both systems is presented as an example of how basic real-time operating system services can be organized. AMOEBA is the result of fundamental research in the field of distributed operating systems, while FADOS has been designed for applications as encountered in experimental high-energy physics.(Auth.)", "num_citations": "2\n", "authors": ["492"]}
{"title": "Capability-Based Protection in Distributed Operating Systems\n", "abstract": " Capability-based operating systems have traditionally required large, complex kernels to manage the use of capabilities. In our proposal, capability management is done entirely by user programs without giving up any of the protection aspects normally associated with capabilities. The basic idea is to use one-way functions and encryption to pro-tect sensitive information.", "num_citations": "2\n", "authors": ["492"]}
{"title": "Connecting UNIX Systems Using a Token Ring\n", "abstract": " VU Research Portal Page 1 VU Research Portal Connecting UNIX Systems using a Token Ring van Renesse, R.; Tanenbaum, AS; Mullender, SJ 1984 document version Publisher's PDF, also known as Version of record Link to publication in VU Research Portal citation for published version (APA) van Renesse, R., Tanenbaum, AS, & Mullender, SJ (1984). Connecting UNIX Systems using a Token Ring. (Report, Dept. of Mathematics and Computer Science; No. IR-91). General rights Copyright and moral rights for the publications made accessible in the public portal are retained by the authors and/or other copyright owners and it is a condition of accessing publications that users recognise and abide by the legal requirements associated with these rights. \u2022 Users may download and print one copy of any publication from the public portal for the purpose of private study or research. \u2022 You may not further distribute the or -\u2026", "num_citations": "2\n", "authors": ["492"]}
{"title": "Heterogeneous Paxos\n", "abstract": " In distributed systems, a group of learners achieve consensus when, by observing the output of some acceptors, they all arrive at the same value. Consensus is crucial for ordering transactions in failure-tolerant systems. Traditional consensus algorithms are homogeneous in three ways:-all learners are treated equally,-all acceptors are treated equally, and-all failures are treated equally. These assumptions, however, are unsuitable for cross-domain applications, including blockchains, where not all acceptors are equally trustworthy, and not all learners have the same assumptions and priorities. We present the first consensus algorithm to be heterogeneous in all three respects. Learners set their own mixed failure tolerances over differently trusted sets of acceptors. We express these assumptions in a novel Learner Graph, and demonstrate sufficient conditions for consensus. We present Heterogeneous Paxos, an extension of Byzantine Paxos. Heterogeneous Paxos achieves consensus for any viable Learner Graph in best-case three message sends, which is optimal. We present a proof-of-concept implementation and demonstrate how tailoring for heterogeneous scenarios can save resources and reduce latency.", "num_citations": "1\n", "authors": ["492"]}
{"title": "Asynchronous Consensus Without Rounds\n", "abstract": " Fault tolerant consensus protocols usually involve ordered rounds of voting between a collection of processes. In this paper, we derive a general specification of fault tolerant asynchronous consensus protocols and present a class of consensus protocols that refine this specification without using rounds. Crash-tolerant protocols in this class use 3f+1 processes, while Byzantine-tolerant protocols use 5f+1 processes.", "num_citations": "1\n", "authors": ["492"]}
{"title": "Scheduler control over all resource consumption\n", "abstract": " An operating system must ensure that no hosted service can cause the service level objective of another to be violated. If control is incomplete, no amount of over-provisioning can compensate for it and there will inevitably be ways to circumvent policy enforcement. Still, competing services are often consolidated on the same machine to reduce operational costs. This article presents a novel operating system architecture that ensures all resource consumption is under scheduler control. The viability of the architecture is substantiated through the implementation of a new operating system kernel that provides commodity operating system abstractions. Using this kernel, the efficacy of the architecture is experimentally corroborated.", "num_citations": "1\n", "authors": ["492"]}
{"title": "Nerio: Leader Election and Edict Ordering\n", "abstract": " Coordination in a distributed system is facilitated if there is a unique process, the leader, to manage the other processes. The leader creates edicts and sends them to other processes for execution or forwarding to other processes. The leader may fail, and when this occurs a leader election protocol selects a replacement. This paper describes Nerio, a class of such leader election protocols.", "num_citations": "1\n", "authors": ["492"]}
{"title": "Refining the way to consensus\n", "abstract": " In the last decade we have seen a proliferation of webbased services, and society now puts great trust in their availability. For availability such services depend on replication. Yet most university-educated programmers have enjoyed only a rudimentary introduction into replication techniques. Why? Fault-tolerant consensus protocols for asynchronous environments are difficult to understand and explain. They exhibit rounds of messaging, counting votes, view changes, plus a myriad of subtle details. Correctness proofs may build confidence in the correctness of a consensus protocol, but it may still not be clear to the reader why all the different mechanisms exist. Operational reasoning overlooks the important subtleties of the protocols. Most undergraduate programs do not cover consensus techniques, and the few distributed systems textbooks that give in-depth coverage of consensus are usually intended for a more\u00a0\u2026", "num_citations": "1\n", "authors": ["492"]}
{"title": "JiST\u2013Java in Simulation Time: An efficient, unifying approach to simulation using virtual machines\n", "abstract": " 2 Virtual machine-based simulation motivation: simulation\u2022 cost per MIPS declining\u2022 eg Pentium Xeon:\u2022~ 10,000 MIPS@~ $200\u2022 emphasis on computation\u2022 vs. analytical methods\u2022 vs. empirical methods\u2022 simulators are useful and needed examples\u2013\u2022 physics: electron tunneling, star collisions, particle dynamics,\u2026\u2022 biology: protein folding, disease spread, genetic drift,\u2026\u2022 earth science: weather prediction, tectonic modeling, water quality,\u2026\u2022 finance: portfolio pricing, statistical arbitrage, risk analysis,\u2026\u2022 operations: optimize workflow, supply chain, inventory, pricing,\u2026\u2022 CS: performance analysis of networks, processors, heuristics,\u2026\u2022\u2026 take any subject X, and google \u201cX simulation\u201d", "num_citations": "1\n", "authors": ["492"]}
{"title": "Operating System Support for Mobile Agents Position paper for 5th IEEE Workshop on Hot Topics in Operating Systems\n", "abstract": " An agent is a process that may migrate through a computer network in order to satisfy requests made by its clients. Agents implement a computational metaphor that is analogous to how most people conduct business in their daily lives: visit a place, use a service (perhaps after some negotiation), and then move on. Thus, for the computer illiterate, agents are an", "num_citations": "1\n", "authors": ["492"]}
{"title": "Voting with ghosts\n", "abstract": " Data replication is a technique for increasing the availability of data. Two popular algorithms for maintaining consistency among the replicas are Weighted Voting [1] and Available Copies [2]. In recent papers [3, 4] it has been shown that under common circumstances Available Copies (AC) performs better than Weighted Voting (WV). However, the issue of network partitioning due to gateway crashes is ignored in AC. We present an improvement of WV that, if configured accordingly, performs as well as AC, but, unlike AC, also works correctly in the face of network partitioning.", "num_citations": "1\n", "authors": ["492"]}
{"title": "Bulletin board service: a tool for implementing parallel algorithms\n", "abstract": " The paper describes the design and implementation of the bulletin-board system. A bulletin board is a tool for implementing parallel algorithms, offering process management, synchronization, and communication features. An experimental bulletin-board service was implemented on the Amoeba distributed operating system. To show its operation, the implementation of a simple parallel algorithm using a bulletin board has been described.", "num_citations": "1\n", "authors": ["492"]}
{"title": "Reliability issues in distributed operating systems\n", "abstract": " Distributed systems span a wide spectrum in the design space. In the paper the authors will look at the various kinds and discuss some of the reliability issues involved. The first half of the paper will concentrate on the causes of unreliability, illustrating them with general solutions and examples. Among the issues treated are interprocess communication, machine crashes, server redundancy, and data integrity. In the second half of the paper, one distributed operating system, Amoeba, will be examined to see how reliability issues have been handled in at least one real system, and how the pieces fit together. (GRA)", "num_citations": "1\n", "authors": ["492"]}
{"title": "A Survey of Current Research on Distributed Operating Systems\n", "abstract": " A Survey of Current Research on Distributed Operating Systems (1985) | www.narcis.nl KNAW KNAW Narcis Back to search results VU University Amsterdam Publication A Survey of Current Research on Distributed Operating Systems (1985) Pagina-navigatie: Main Save publication Save as MODS Export to Mendeley Save as EndNote Export to RefWorks Title A Survey of Current Research on Distributed Operating Systems Published in Proceedings of the 8th Australian Computer Science Conference, 21 - 23 Author Tanenbaum, AS; van Renesse, R. Publisher Computer Systems Date issued 1985 Access Restricted Access Language English Type Conference Paper Publication https://research.vu.nl/en/publications/6ec55c07-7fd8-4c26-8f... OpenURL Search this publication in (your) library Persistent Identifiers NBN urn:nbn:nl:ui:31-6ec55c07-7fd8-4c26-8fb0-c552ba635258 Handle 1871.1/6ec55c07-7fd8-4c26-8fb0\u2026", "num_citations": "1\n", "authors": ["492"]}
{"title": "A Directory Service supporting Availability and Consistency\n", "abstract": " Object-based distributed operating systems often employ a directory service to map ASCII names onto internal object identifiers. In this paper we suggest that by extending the functionality of the directory service with support for replication and concurrency control, the rest of the distributed system can be kept relatively simple. We present the design and implementation of such a directory service for the Amoeba distributed operating system, and compare these to other existing directory services.", "num_citations": "1\n", "authors": ["492"]}