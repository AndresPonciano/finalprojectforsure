{"title": "A Business-Oriented Approach to Requirements Elicitation\n", "abstract": " \"The hardest single part of building a software system is deciding precisely what to build\" (Brooks, 1987). Faulty requirements analysis is a major reason for project failure or unsatisfactory information systems that do not fulfill business needs. Although it has been long recognized that system requirements can only be understood within the context of the business processes and business modeling has become the initial phase of most software processes, the transition between business modeling and requirements gathering is still a challenge for research. Moreover, existing work in this area tends to introduce accidental difficulties. This paper reports the results of an action research conducted for elaborating a Business-Oriented approach to Requirements Elicitation. Our approach integrates Requirements Engineering with Business Process Engineering and derives system requirements based on business process\u00a0\u2026", "num_citations": "32\n", "authors": ["2254"]}
{"title": "Where the truth lies: AOP and its impact on software modularity\n", "abstract": " Modularity is the single attribute of software that allows a program to be intellectually manageable [29]. The recipe for modularizing is to define a narrow interface, hide an implementation detail, keep low coupling and high cohesion. Over a decade ago, aspect-oriented programming (AOP) was proposed in the literature to \u201cmodularize the un-modularizable\u201d [24]. Since then, aspect-oriented languages have been providing new abstraction and composition mechanisms to deal with concerns that could not be modularized because of the limited abstractions of the underlying programming language. This paper is a continuation of our earlier work [32] and further investigates AO software with regard to coupling and cohesion. We compare two versions (Java and AspectJ) of ten applications to review AOP within the context of software modularity. It turns out that the claim that \u201cthe software built in AOP is more\u00a0\u2026", "num_citations": "27\n", "authors": ["2254"]}
{"title": "Making agile retrospectives more awesome\n", "abstract": " According to the textbook [23], Scrum exists only in its entirety, where every component is essential to Scrum's success. However, in many organizational environments some of the components are omitted or modified in a way that is not aligned with the Scrum guidelines. Usually, such deviations result in missing the full benefits of Scrum [24]. Thereby, a Scrum process should be frequently inspected and any deviations should be corrected [23]. In this paper, we report on an Action Research project conducted in Intel Technology Poland to revise the work practices related to the Retrospective. During the focus group discussion in the company, retrospectives were generally judged ineffective because \u201cthe same things are discussed over and over\u201d. To cope with this challenge, we revitalized retrospectives by adopting collaborative games. The feedback received from three Scrum teams indicates that our approach\u00a0\u2026", "num_citations": "26\n", "authors": ["2254"]}
{"title": "Adopting collaborative games into agile requirements engineering\n", "abstract": " In agile software development, where great emphasis is put on effective informal communication involving diverse stakeholders, success depends on human and social factors. Not surprisingly, the Agile Manifesto advocates principles and values such as \u201cindividuals and interactions over processes and tools\u201d, \u201cfocus on the customer\u201d, \u201ccollaborate regularly\u201d, \u201ccommunicate face-to-face within the team\u201d and \u201chave regular team introspection\u201d. However, agile methodologies have hardly provided any tools or techniques that aid the human side of software development. Additionally, more and more research suggests that customers no longer should be viewed as a passive source of information but need to be engaged in envisioning future business practice, discovering opportunities, and shaping solutions. To deal with these challenges, we propose a framework for extending Scrum with 9 collaborative games. Collaborative games refer to several structured techniques inspired by game play and designed to facilitate collaboration, foster customer involvement, and stimulate creative thinking. The feedback received from a Scrum team that leveraged our framework in two commercial projects, indicates that the adopted collaborative games: (1) make customers more willing to attend the meeting; (2) foster stakeholders\u2019 commitment; and (3) produce better results than the standard approach", "num_citations": "22\n", "authors": ["2254"]}
{"title": "Separation of crosscutting concerns at the design level: An extension to the UML metamodel\n", "abstract": " Aspect-oriented programming (AOP) was proposed as a way of improving the separation of concerns at the implementation level by introducing a new kind of modularization unit - an aspect. Aspects allow programmers to implement crosscutting concerns in a modular and well-localized way. As a result, the well-known phenomena of code tangling and scattering are avoided. After a decade of research, AOP has gained acceptance within bot academia and industry. The current challenge is to incorporate aspect-oriented (AO) concepts into the software design phase. Since AOP is built on top of OOP, it seems natural to adapt UML to AO design. In this context the author introduces an extension to the UML metamodel to support aspect-oriented modelling.", "num_citations": "22\n", "authors": ["2254"]}
{"title": "Systems evolution and software reuse in object-oriented programming and aspect-oriented programming\n", "abstract": " Every new programming technique makes claims that software engineers want to hear. Such is the case with aspect-oriented programming (AOP). This paper describes a quasi-controlled experiment which compares the evolution of two functionally equivalent programs, developed in two different paradigms. The aim of the study is to explore the claims that software developed with aspect-oriented languages is easier to maintain and reuse than this developed with object-oriented languages. We have found no evidence to support these claims.", "num_citations": "21\n", "authors": ["2254"]}
{"title": "An empirical study on the impact of AspectJ on software evolvability\n", "abstract": " Since its inception in 1996, aspect-oriented programming (AOP) has been believed to reduce the effort required to maintain software systems by replacing cross-cutting code with aspects. However, little convincing empirical evidence exists to support this claim, while several studies suggest that AOP brings new obstacles to maintainability. This paper discusses two controlled experiments conducted to evaluate the impact of AspectJ (the most mature and popular aspect-oriented programming language) versus Java on software evolvability. We consider evolvability as the ease with which a software system can be updated to fulfill new requirements. Since a minor language was compared to the mainstream, the experiments were designed so as to anticipate that the participants were much more experienced in one of the treatments. The first experiment was performed on 35 student subjects who were asked\u00a0\u2026", "num_citations": "20\n", "authors": ["2254"]}
{"title": "Utilizing online collaborative games to facilitate Agile Software Development\n", "abstract": " Effective collaboration and interaction among the development team and between the team and the customer as well as proactive attitude in initiating and implementing improvements play vital roles in the success of agile projects. The challenge is how to address these social aspects since neither the Agile Manifesto nor the Scrum Guide specify techniques that aid the human side of software development. To fill this gap, we developed a web portal which provides 8 collaborative games to be used in agile software development. The feedback received from a Scrum team, who leveraged the games in an industrial project conducted in OKE Poland, indicates that our approach improves participants' communication, motivation, commitment, and creativity.", "num_citations": "17\n", "authors": ["2254"]}
{"title": "Adopting collaborative games into Open Kanban\n", "abstract": " The crucial element of any agile project is people. Not surprisingly, principles and values such as \u201cespect for people\u201d, \u201cCommunication and Collaboration\u201d, \u201cLead using a team approach\u201d, and \u201cLearn and improve continuously\u201d are an integral part of Open Kanban. However, Open Kanban has not provided any tools or techniques to aid the human side of software development. Moreover, as a Lean initiative, it is not as comprehensively defined process as Scrum or XP. Accordingly, inexperienced Kanban teams may feel a bit lost. To deal with these challenges, we propose an extension to Open Kanban, which contains a set of 12 collaborative games. The feedback received from three Kanban teams who leveraged our extension in commercial projects, indicates that the adopted games improved participants' communication, commitment, motivation and creativity.", "num_citations": "17\n", "authors": ["2254"]}
{"title": "Impact of aspect-oriented programming on software modularity\n", "abstract": " Over a decade ago, aspect-oriented programming (AOP) was proposed in the literature to \"modularize the un-modularizable\". Nowadays, the aspect-oriented paradigm pervades all areas of software engineering. With its growing popularity, practitioners are beginning to wonder whether they should start looking into it. However, every new paradigm makes claims that managers want to hear. The aim of this PhD dissertation is to find out how much of what has been written about AOP is true and how much is hype.", "num_citations": "14\n", "authors": ["2254"]}
{"title": "AN EMPIRICAL ASSESSMENT OF THE IMPACT OF ASPECT-ORIENTED PROGRAMMING ON SOFTWARE MODULARITY\n", "abstract": " The term \u201ccrosscutting concern\u201d describes a piece of system that cannot be cleanly modularized because of the limited abstractions offered by the traditional programming paradigms. Symptoms of implementing crosscutting concerns in the languages like C, C# or Java are \u201ccode scattering\u201d and \u201ccode tangling\u201d that both degrade software modularity. Aspect-oriented programming (AOP) was proposed as a new paradigm to overcome these problems. Although it is known that AOP allows programmers to separate crosscutting concerns, the impact of AOP on software modularity is not yet well investigated. This paper reports a quantitative study comparing OO and AO implementations with respect to modularity.", "num_citations": "14\n", "authors": ["2254"]}
{"title": "The integration of functional decomposition with UML notation in business process modelling\n", "abstract": " Over the past decade business and software modelling have been carried out using different notations designed to fit the special needs of the respective tasks. This approach has introduced a gap between the software and business models, which has resulted in inconsistency. The objective of this paper is to propose a new approach to analysis of the business process using UML notation. UML is the most commonly used language in object-oriented software development. Moreover, it can be extended to the modelling of business processes. With this approach it is possible, in the same notation, to visualise a company\u2019s business processes, its information system requirements and the architecture of the relevant information system.", "num_citations": "14\n", "authors": ["2254"]}
{"title": "What is Wrong with AOP?\n", "abstract": " Modularity is a key concept that programmers wield in their struggle against the complexity of software systems. The implementation of crosscutting concerns in a traditional programming language (eg C, C#, Java) results in software that is difficult to maintain and reuse. Although modules have taken many forms over the years from functions and procedures to classes, no form has been capable of expressing a crosscutting concern in a modular way. The latest decomposition unit to overcome this problem is an aspect promoted by aspect-oriented programming (AOP). The aim of this paper is to review AOP within the context of software modularity.", "num_citations": "9\n", "authors": ["2254"]}
{"title": "Evaluating performance and accuracy improvements for attention-OCR\n", "abstract": " In this paper we evaluated a set of potential improvements to the successful Attention-OCR architecture, designed to predict multiline text from unconstrained scenes in real-world images. We investigated the impact of several optimizations on model\u2019s accuracy, including employing dynamic RNNs (Recurrent Neural Networks), scheduled sampling, BiLSTM (Bidirectional Long Short-Term Memory) and a modified attention model. BiLSTM was found to slightly increase the accuracy, while dynamic RNNs and a simpler attention model provided a significant training time reduction with only a slight decline in accuracy.", "num_citations": "8\n", "authors": ["2254"]}
{"title": "Adopting collaborative games into agile software development\n", "abstract": " Although the emergence of agile methods has triggered a growing awareness that social factors have a crucial impact on the success of software projects, neither the Scrum Guide nor the Agile Manifesto prescribe techniques that aid the human side of software development. To address this challenge, we enriched the Scrum process with a set of collaborative games. Collaborative games refer to techniques inspired by game play, but designed for the purpose of solving practical problems. Our approach was evaluated in two companies. The feedbacks received from Scrum teams indicate that the implementation of collaborative games leads to a variety of measurable societal outcomes. In particular, the adopted games improved participants\u2019 communication, involvement, and creativity, make participants more willing to attend Scrum meetings, and produce better results than the standard approach. This\u00a0\u2026", "num_citations": "7\n", "authors": ["2254"]}
{"title": "Residual mobilenets\n", "abstract": " As modern convolutional neural networks become increasingly deeper, they also become slower and require high computational resources beyond the capabilities of many mobile and embedded platforms. To address this challenge, much of the recent research has focused on reducing the model size and computational complexity. In this paper, we propose a novel residual depth-separable convolution block, which is an improvement of the basic building block of MobileNets. We modified the original block by adding an identity shortcut connection (with zero-padding for increasing dimensions) from the input to the output. We demonstrated that the modified architecture with the width multiplier () set to 0.92 slightly outperforms the accuracy and inference time of the baseline MobileNet () on the challenging Places365 dataset while reducing the number of parameters by 14%.", "num_citations": "5\n", "authors": ["2254"]}
{"title": "Instructor presence in video lectures: Preliminary findings from an online experiment\n", "abstract": " Motivation. Despite the widespread use of video lectures in online and blended learning environments, there is still debate whether the presence of an instructor in the video helps or hinders learning. According to social agency theory, seeing the instructor makes learners believe that s/he is personally teaching them, which leads to deeper cognitive processing and, in turn, better learning outcomes. Conversely, according to cognitive load theory, adding an image of the instructor may hinder attention engagement with lecture content due to split-attention effect. Not only are theoretical propositions conflicting, but so is the empirical evidence as well. Objective. This study investigates the effects of the presence of the instructor's face in the corner of an educational video on learning outcomes, perceived cognitive load, and perceived social presence in the context of foreign language vocabulary learning. Method. In an\u00a0\u2026", "num_citations": "4\n", "authors": ["2254"]}
{"title": "Analysis of the impact of aspect-oriented programming on source code quality\n", "abstract": " The aim of this dissertation is to investigate the impact of AOP on software modularity, evolvability and reusability in comparison to OOP. In our case study, we compared OO and AO implementations of 11 real-life systems and the 23 GoF design patterns. We also conducted a controlled experiment in which an example program having two implementations (AOP and OOP) was subjected to subsequent increments with the aim to investigate consequences of these increments on program evolvability and reusability. In addition we explored the existing AO implementations of the GoF design patterns according to applying generics and reflective programming. The results of our research demonstrate that AOP has not obvious advantages over OOP as far as modularization is concerned. We also demonstrated that there are limited situations where a reasonable aspect-oriented implementation improves software evolvability and reusability.", "num_citations": "4\n", "authors": ["2254"]}
{"title": "Things You Might Not Know about the k-Nearest Neighbors Algorithm.\n", "abstract": " Recommender Systems aim at suggesting potentially interesting items to a user. The most common kind of Recommender Systems is Collaborative Filtering which follows an intuition that users who liked the same things in the past, are more likely to be interested in the same things in the future. One of Collaborative Filtering methods is the k Nearest Neighbors algorithm which finds k users who are the most similar to an active user and then it computes recommendations based on the subset of users. The main aim of this paper is to compare two implementations of k Nearest Neighbors algorithm, ie from Mahout and LensKit libraries, as well as six similarity measures. We investigate how implementation differences between libraries influence optimal neighborhood size k and prediction error. We also show that measures like F1-score and nDCG are not always a good choice for choosing the best neighborhood size k. Finally, we compare different similarity measures according to the average time of generating recommendations and the prediction error.", "num_citations": "3\n", "authors": ["2254"]}