{"title": "Enhancing mobile learning activities by the use of mobile virtual devices--some design and implementation issues\n", "abstract": " The use of multiple mobile devices is increasing in mobile learning, bringing a need for collaboration and resource sharing among participating pupils. This paper presents an approach that addresses information and resource sharing for mobile devices in indoors and outdoors settings. Our solution consists of aggregated mobile devices, forming organizations. These Mobile Virtual Devices (MVDs) provide a new mechanism that facilitates design of mobile learning activities offering a virtual complex device that combines the features of several mobile devices.", "num_citations": "75\n", "authors": ["655"]}
{"title": "Dynamic deployment of Java applications\n", "abstract": " Producing high quality software, on time, and keeping costs within reasonable bounds have been three major goals from the very beginning of software engineering as an engineering science. Hardly ever are deployed systems either error-free or fully functionally satisfactory. The result is that, once brought into operation, systems undergo a series of \u201cpatches\u201d,\u201cfixes\u201d, modifications, and changes. At the same time, increasingly many functions dependent on software in business, industry, and at home depend on being immediately available. Having these services unavailable due to updating the software is annoying for users. And there are other types of systems\u2013real-time systems\u2013that cannot afford to be taken down, for instance, telecommunication systems, command-andcontrol systems, and any other systems requiring continuous operation.This paper presents the Java Distributed Run-time Update Management System (JDRUMS). JDRUMS is meant to deal with the above mentioned problems, specifically for Java. It provides functionality for the introduction of new versions of existing Java classes on the fly, while preserving the internal state of objects.", "num_citations": "69\n", "authors": ["655"]}
{"title": "Good practices for educational software engineering projects\n", "abstract": " Recent publications indicate the importance of software engineering in the computer science curriculum. In this paper, we present the final part of software engineering education at University of Groningen in the Netherlands and Vaxjo University in Sweden, where student teams perform an industrial software development project. It furthermore presents the main educational problems encountered in such real-life projects and explains how this international course addresses these problems. The main contribution of this paper is a set of seven good practices for project based software engineering education.", "num_citations": "57\n", "authors": ["655"]}
{"title": "A deployment system for pervasive computing\n", "abstract": " Software has for a long time been used for controlling different systems. Today, there is a trend towards integrating more software in consumer electronics, home appliances, cars etc. Suddenly software is moving from traditional environments, such as the desktop computer into new and unknown territory. This will influence many aspects of the software engineering process; above all, several new problems have arisen in the domain of software deployment. How can software be effectively deployed in these environments? Current deployment strategies are not directly applicable. The paper discusses problems with current deployment models and proposes a new, modified model. A deployment model for pervasive computing must support component based development, different delivery models, and installation and activation strategies. Support for dynamic installation and activation (i.e. making modifications\u00a0\u2026", "num_citations": "46\n", "authors": ["655"]}
{"title": "Dynamic code update in JDrums\n", "abstract": " Pervasive devices get more and more powerful. More powerful devices imply more complex software. In turn this implies bugs and requirements of new features.", "num_citations": "44\n", "authors": ["655"]}
{"title": "Characteristics of software ecosystems for Federated Embedded Systems: A case study\n", "abstract": " ContextTraditionally, Embedded Systems (ES) are tightly linked to physical products, and closed both for communication to the surrounding world and to additions or modifications by third parties. New technical solutions are however emerging that allow addition of plug-in software, as well as external communication for both software installation and data exchange. These mechanisms in combination will allow for the construction of Federated Embedded Systems (FES). Expected benefits include the possibility of third-party actors developing add-on functionality; a shorter time to market for new functions; and the ability to upgrade existing products in the field. This will however require not only new technical solutions, but also a transformation of the software ecosystems for ES.ObjectiveThis paper aims at providing an initial characterization of the mechanisms that need to be present to make a FES ecosystem\u00a0\u2026", "num_citations": "38\n", "authors": ["655"]}
{"title": "Autonomic software product lines (ASPL)\n", "abstract": " We describe ongoing work on a variability mechanism for Autonomic Software Product Lines (ASPL). The autonomic software product lines have self-management characteristics that make product line instances more resilient to context changes and some aspects of product line evolution. Instances sense the context, selects and bind the best component variants to variation-points at run-time. The variability mechanism we describe is composed of a profile guided dispatch based on off-line and on-line training processes. Together they form a simple, yet powerful variability mechanism that continuously learns, which variants to bind given the current context and system goals.", "num_citations": "35\n", "authors": ["655"]}
{"title": "Issues in dynamic software architectures\n", "abstract": " Software architecture is probably one of the best approaches to take non-functional requirements into consideration early on in a development process. Some of these requirements, for instance performance and high availability, are usually implemented as dynamic reconfigurations. Current architecture design methodology does not provide sufficient support for these types of systems. These dynamic changes require new \u201ctools\u201d, for specification and assessment, both during modeling and at run-time. A classification of dynamic architecture types is presented and based on this we discuss important issues that must be resolved if development of applications, where conflicting non-functional requirements are partially implemented using dynamic behavior, should be fully supported.", "num_citations": "33\n", "authors": ["655"]}
{"title": "Profile-guided composition\n", "abstract": " We present an approach that generates context-aware, optimized libraries of algorithms and data structures. The search space contains all combinations of implementation variants of algorithms and data structures including dynamically switching and converting between them. Based on profiling, the best implementation for a certain context is precomputed at deployment time and selected at runtime. In our experiments, the profile-guided composition outperforms the individual variants in almost all cases.", "num_citations": "28\n", "authors": ["655"]}
{"title": "Run-time support for dynamic Java architectures\n", "abstract": " The quality of an object-oriented design is judged not only by how well it meets the end-users requirements but also on how easy it is to understand and maintain. Several techniques intended to simplify the process of understanding and maintaining a object-oriented system has been proposed. Domain specic frameworks, design patterns [2], and software architectures [6] has been proposed as one way to achieve better designs and better support the maintenance activities. Software maintenance can be classied in three categories; corrective, adaptive and perfective. Corrective maintenance is concerned with xing errors in the system that have resulted in system failures. Adaptive maintenance adapts the software to changes in the execution environment (eg new hardware or a new OS). Perfective maintenance is mainly concerned with introducing additional functionality to the system.Maintenance of object\u00a0\u2026", "num_citations": "22\n", "authors": ["655"]}
{"title": "Architectural reasoning for dynamic software product lines\n", "abstract": " Software quality is critical in today's software systems. A challenge is the trade-off situation architects face in the design process. Designers often have two or more alternatives, which must be compared and put into context before a decision is made. The challenge becomes even more complex for dynamic software product lines, where domain designers have to take runtime variations into consideration as well. To address the problem we propose extensions to an architectural reasoning framework with constructs/artifacts to define and model a domain's scope and dynamic variability. The extended reasoning framework encapsulates knowledge to understand and reason about domain quality behavior and self-adaptation as a primary variability mechanism. The framework is demonstrated for a self-configuration property, self-upgradability on an educational product-line.", "num_citations": "18\n", "authors": ["655"]}
{"title": "The editing aspect of aspects\n", "abstract": " In this paper, we suggest improvements for the editing of aspects where aspects denote crosscutting concerns in the sense of Aspect Oriented Programming (AOP). The notation of Hyperplanes, which is the cross-cutting of aspects and core into different context editable fragments, is introduced. Further, a classification of aspects into inline and outline is provided. While outline aspects can be regarded as aspects introduced in AOP, which constitute core dependent modules, inline aspects are aspects that remain in the core code. Additionally, we introduce and demonstrate the advantages of inline aspect editing compared to conventional outline editing used nowadays, with tool assistance.", "num_citations": "14\n", "authors": ["655"]}
{"title": "Service Level Achievements--Distributed Knowledge for Optimal Service Selection\n", "abstract": " In a service-oriented setting, where services are composed to provide end user functionality, it is a challenge to find the service components with best-fit functionality and quality. A decision based on information mainly provided by service providers is inadequate as it cannot be trusted in general. In this paper, we discuss service compositions in an open market scenario where an automated best-fit service selection and composition is based on Service Level Achievements instead. Continuous monitoring updates the actual Service Level Achievements which can lead to dynamically changing compositions. Measurements of real life services exemplify the approach.", "num_citations": "13\n", "authors": ["655"]}
{"title": "Reactive dynamic architectures\n", "abstract": " Dynamic modifications to architectures include replacing components and re-wiring of connectors. In this position paper we present the manner in which architectures can petjorm self-governed re-conjigurations dynamically using rule-based architectural agents. Agents can monitor the architecture and perform simple re-conjigurations. This paper describes work in progress, and point out interesting areas of research connected to architectural agents.", "num_citations": "13\n", "authors": ["655"]}
{"title": "Ecosystems and open innovation for embedded systems: A systematic mapping study\n", "abstract": " This paper surveys work on ecosystems and open innovation of systems in the context of software engineering for embedded systems. The primary research goal is to develop a research agenda based on the topics identified within the research publications on the topic. The agenda is based on a systematic mapping study of 260 publications obtained from digital libraries and is influenced by a set of areas of interest, i.e., product lines, open source, third party, business models, open innovation, and strategy. The results from the study include analysis of the type of research conducted in the field, its origin and research contribution. The study identifies the need for more solutions to specific open innovation problems such as mapping business models to technical platforms; defining open ecosystem processes that foster open innovation; and improving how ecosystem players can leverage on tool support for\u00a0\u2026", "num_citations": "12\n", "authors": ["655"]}
{"title": "Harnessing variability in product-lines of self-adaptive software systems\n", "abstract": " This work studies systematic reuse in the context of self-adaptive software systems. In our work, we realized that managing variability for such platforms is different compared to traditional platforms, primarily due to the run-time variability and system uncertainties. Motivated by the fact that recent trends show that self-adaptation will be used more often in future system generation and that software reuse state-of-practice or research do not provide sufficient support, we have investigated the problems and possibly resolutions in this context. We have analyzed variability for these systems, using a systematic reuse prism, and identified a research gap in variability management. The analysis divides variability handling into four activities:(1) identify variability,(2) constrain variability,(3) implement variability, and (4) manage variability. Based on the findings we envision a reuse framework for the specific domain and present\u00a0\u2026", "num_citations": "11\n", "authors": ["655"]}
{"title": "Towards a decentralized and self-adaptive system for m-learning applications\n", "abstract": " Through the analysis of the different iterations of the Geometry Mobile (GEM) project, a mobile learning effort in the field of mathematics, we have identified a major architectural issue to be addressed in the design and implementation of m-learning applications. Due to the dynamic nature of the field many challenging requirements are continuously emerging. One of them relates to the possibility to support collaborative activities that demand sharing resources between students and their mobile devices in constantly changing conditions. These situations generate the need of using decentralized distributed architectures in which mobile devices can share resources to carry out the activity covering the concerns defined by the different stakeholders. This paper describes our current efforts connected to identifying a set of requirements for M-Learning activities. Thereafter, we elaborate on why a decentralized distributed\u00a0\u2026", "num_citations": "11\n", "authors": ["655"]}
{"title": "Lookahead scheduling for reconfigurable grid systems\n", "abstract": " This paper proposes an approach to continuously optimizing parallel scientific applications with dynamically changing architectures. We achieve this by combining a dynamic architecture and lookahead malleable task graph scheduling.", "num_citations": "11\n", "authors": ["655"]}
{"title": "Architectural reasoning support for product-lines of self-adaptive software systems-a case study\n", "abstract": " Software architecture serves as a foundation for the design and development of software systems. Designing an architecture requires extensive analysis and reasoning. The study presented herein focuses on the architectural analysis and reasoning in support of engineering self-adaptive software systems with systematic reuse. Designing self-adaptive software systems with systematic reuse introduces variability along three dimensions; adding more complexity to the architectural analysis and reasoning process. To this end, the study presents an extended Architectural Reasoning Framework with dedicated reasoning support for self-adaptive systems and reuse. To evaluate the proposed framework, we conducted an initial feasibility case study, which concludes that the proposed framework assists the domain architects to increase reusability, reduce fault density, and eliminate differences in skills and\u00a0\u2026", "num_citations": "8\n", "authors": ["655"]}
{"title": "An adaptive high-performance service architecture\n", "abstract": " This paper introduces an approach to dynamic software composition in the context of scientific computing where high demands performance seem to prevent such flexible solutions. In our concrete however, dynamic software composition is rather a way to high-performance than an obstacle to it. We achieve this by combining dynamic architectures and task graph scheduling.", "num_citations": "7\n", "authors": ["655"]}
{"title": "Reactive architectures with architectural agents\n", "abstract": " This paper discusses dynamic reconfiguration of applications at the architectural level. Current work on dynamic aspects of software architectures has focused on planned reconfigurations controlled from the outside. In this paper we present a different approach, using architectural agents. The agent-enabled architecture descriptions will be executable and have a mechanism to describe reconfiguration events. The agents can be used during design and directly reused in the implementation phase. We also describe the properties of an initial implementation of the Reactive Architecture Tool, which provides support for design and implementation of reactive architectures.", "num_citations": "6\n", "authors": ["655"]}
{"title": "Aligning architectures for sustainability\n", "abstract": " The digitization of industry has drastically changed the competitive landscape by requiring a higher degree of specialization and shorter time to delivery that affect the design properties a software platform should satisfy. The platform architecture must sustain continuous and rapid change to the organizational architecture, which in turn is affected by external forces: ie, forces drive the velocity of change. In this paper, we explore the effects of digitization, characterizing internal and external forces that impact on business strategies and trigger the continuous realignment of the platform, and outline a research agenda to mitigate the effects.", "num_citations": "5\n", "authors": ["655"]}
{"title": "A classification of dynamic software architectures\n", "abstract": " A recent trend in computing is towards more autonomous software systems. This is mainly driven by that our daily life more and more depends on computers and software. Areas like ubiquitous computing with small (embedded) systems and their antipodes world-wide distributed systems require different support in terms of flexibility and availability. Systems must be able to adapt to changes in the environment, including self-healing and adaptation. Users can not take on the tedious task of constantly maintaining and updating their software packages to each and every change. This paper discusses one of the foundations for developers of these systems, dynamic architecture. We investigate the existing body of work in the area and identify dimensions and aspects of dynamically changing arcbitectures. Continuing, we use this division creating a dassification of four fundamental dynamic architecture dasses: Dynamic, Adaptive, Constructive, and Reflective. These four are presented as architectural patterns and their possible application areas are discussed.", "num_citations": "4\n", "authors": ["655"]}
{"title": "Mobile virtual devices for collaborative m-learning\n", "abstract": " The increasing use of mobile devices to support collaborative activities creates a need for developing new methods and perspectives to facilitate information sharing. In this paper, we present an approach for information sharing in mobile collaborative settings through the use of Mobile Virtual Devices (MVD). MVD emerges as a new conceptualization of an organization of mobile devices that supports collaborative tasks. The use of MVD allows designers and users to interact with and through mobile devices in novel ways, considering the aggregation of mobile devices as a single entity. The notion of MVD has been conceptualized on the idea of multirole devices, using components to provide and consume resources.", "num_citations": "3\n", "authors": ["655"]}
{"title": "Automatic rule derivation for adaptive architectures\n", "abstract": " This paper discusses on-going work in adaptive architectures concerning automatic adaptation rule derivation. Adaptation is rule-action based but deriving rules that meet the adaptation goals are tedious and error prone. We present an approach that uses model-driven derivation and training for automatically deriving adaptation rules, and exemplify this in an environment for scientific computing.", "num_citations": "3\n", "authors": ["655"]}
{"title": "eARF evaluation\n", "abstract": " Software architecture serves as a foundation for the development of software systems. To design a software architecture, the architects have to deal with a challenge of analysing and reasoning about multiple design choices. The challenge of architectural analysis and reasoning becomes more complicated in the design of self-adaptive systems due to variability both at development time and runtime. To deal with the challenge, we developed an extended architectural reasoning framework (eARF). The eARF provides architects with proven best practices and knowledge to support the analysis and reasoning process. This study reports two case studies that were performed to evaluate the eARF. The results derived from the case studies are encouraging and indicate that the eARF provides more structured approach for analysis and reasoning with increased reusability and reduced fault density. However, the eARF lacks in analytical means to validate and verify the design decisions. The subjects who participated in the case study faced difficulties in evaluating their design choices, and demanded a support mechanism through which they can objectively analyse, reason about, and verify the design decisions. Based on the case study results, we plan to extend the eARF with an analytical framework for validation and verification of the design decisions.", "num_citations": "2\n", "authors": ["655"]}
{"title": "Reconfigurable scientific applications on GRID services\n", "abstract": " This paper proposes a runtime environment for dynamically changing, parallel scientific applications. This kind of applications is motivated by the LOFAR/LOIS project aiming at a multidisciplinary research platform for natural scientists and engineers. The dynamic infrastructure in turn is than mapped to Grid Services environments.", "num_citations": "2\n", "authors": ["655"]}
{"title": "Employing dynamic architectures\n", "abstract": " Dynamic software architectures is an immature topic. In this article we present a case-study conducted at five Swedish companies involved in either the development of or development with dynamic architectures. We discuss the rationale for dynamism, and identify and discuss several issues concerned with the methodological support for development with dynamic architectures.", "num_citations": "2\n", "authors": ["655"]}
{"title": "Adaptive Trust-Aware Decentralized Information Flow Control\n", "abstract": " Modern software systems are decentralized, distributed, and dynamic, and consequently, require decentralized mechanisms to enforce security. In this paper, we propose an adaptive approach using a combination of decentralized information flow control (DIFC) mechanisms, trust-based methods and decentralized control architectures to enforce security in open distributed systems. In our approach, adaptivity mitigates two aspects of the system dynamics that cause uncertainty: the ever-changing nature of trust and system openness. We formalize our trust-aware DIFC model and instantiate two decentralized control architectures to implement and evaluate it. We evaluate the effectiveness and performance of our method and decentralized control architectures on two case studies.", "num_citations": "1\n", "authors": ["655"]}
{"title": "Self-adaptive trust-aware decentralized information flow control, extended version\n", "abstract": " Modern software systems and their corresponding architectures are decentralized, distributed, and dynamic. As a consequence, decentralized mechanisms are also required to ensure security in such architectures. Decentralized Information Flow Control (DIFC) is a mechanism to control information flow in distributed systems. However, DIFC mechanisms require the resolution of specific centralized control and trust issues. In this paper, we propose an adaptive, trust-aware, decentralized information flow approach that incorporates trust in DIFC for decentralized systems. We employ decentralized feedback loops to enable decentralized control and adaptive trust assignments. In our approach, adaptivity mitigates two aspects of systems dynamics that cause uncertainty: the ever-changing nature of trust and the system openness. We formalize our trust-aware DIFC model and instantiate two decentralized feedback loop architectures to implement it. We discuss the design and implementation considerations and evaluate the effectiveness of adaptive trust-aware DIFC on a set of decentralized architectures and a microservices-based system.", "num_citations": "1\n", "authors": ["655"]}
{"title": "ASPLe: a methodology to develop self-adaptive software systems with reuse\n", "abstract": " Advances in computing technologies are pushing software systems and their operating environments to become more dynamic and complex. The growing complexity of software systems coupled with uncertainties induced by runtime variations leads to challenges in software analysis and design. Self-Adaptive Software Systems (SASS) have been proposed as a solution to address design time complexity and uncertainty by adapting software systems at runtime. A vast body of knowledge on engineering self-adaptive software systems has been established. However, to the best of our knowledge, no or little work has considered systematic reuse of this knowledge. To that end, this study contributes an Autonomic Software Product Lines engineering (ASPLe) methodology. The ASPLe is based on a multi-product lines strategy which leverages systematic reuse through separation of application and adaptation logic. It provides developers with repeatable process support to design and develop self-adaptive software systems with reuse across several application domains. The methodology is composed of three core processes, and each process is organized for requirements, design, implementation, and testing activities. To exemplify and demonstrate the use of the ASPLe methodology, three application domains are used as running examples throughout the report.", "num_citations": "1\n", "authors": ["655"]}
{"title": "Software requirements to support qos in collaborative m-learning activities\n", "abstract": " The use of collaborative activities in education has proven to be an effective way to enhance students\u2019 learning outcomes by increasing their engagement and motivating discussions on the learning topics under exploration. In the field of Technology Enhanced Learning (TEL), the use of information and communication technologies has been extensively studied to provide alternative methods to support collaborative learning activities, combining different applications and tools. Mobile learning, a subset of TEL, has become a prominent area of research as it offers promising tools to enhance students\u2019 collaboration and it provides alternative views for teaching and learning subject matter in relevant and authentic scenarios. While many studies have focused on the pedagogical opportunities provided by mobile technologies, fewer are the efforts looking at technological related aspects. Hardware and software\u00a0\u2026", "num_citations": "1\n", "authors": ["655"]}
{"title": "Towards Autonomic Software Product Lines (ASPL)-A Technical Report\n", "abstract": " This report describes a work in progress to develop Autonomic Software Product Lines (ASPL). The ASPL is a dynamic software product line approach with a novel variability handling mechanism that enables traditional software product lines to adapt themselves at runtime in response to changes in their context, requirements and business goals. The ASPL variability mechanism is composed of three key activities: 1) context-profiling, 2) contextaware composition, and 3) online learning. Context-profiling is an offline activity that prepares a knowledge base for context-aware composition. The context-aware composition uses the knowledge base to derive a new product or adapts an existing product based on a product line\u2019s context attributes and goals. The online learning optimizes the knowledge base to remove errors and suboptimal information and to incorporate new knowledge. The three activities together form a simple yet powerful variability handling mechanism that learns and adapts a system at runtime in response to changes in system context and goals. We evaluated the ASPL variability mechanism on three small-scale software product lines and got promising results. The ASPL approach is, however, is yet at an initial stage and require improved development support with more rigorous evaluation.", "num_citations": "1\n", "authors": ["655"]}
{"title": "Dynamic software architectures\n", "abstract": " Software architecture is a software engineering discipline that provides notations and processes for high-level partitioning of systems' responsibilities early in the software design process. This thesis is concerned with a specific subclass of systems, systems with a dynamic software architecture. They have practical applications in various domains such as high-availability systems and ubiquitous computing.In a dynamic software architecture, the set of architectural elements and the configuration of these elements may change at run-time. These modifications are motivated by changed system requirements or by changed execution environments. The implications of change events may be the addition of new functionality or re-configuration to meet new Quality of Service requirements.", "num_citations": "1\n", "authors": ["655"]}
{"title": "DMDA-A Dynamic Service Architecture for Scientific Computing\n", "abstract": " The objective of this paper is to address the design of an architecture for scientific applications utilizing sensor data. The proposed architecture models applications as services in a service-oriented architecture. This architecture is, mapped to a heterogeneous architecture that contains highperformance, data-driven components and SOA-style components, and a superimposed on a service architecture that provides dynamism.", "num_citations": "1\n", "authors": ["655"]}
{"title": "Towards dynamic model driven architectures\n", "abstract": " Scientific applications using data from networks of sensors must be both highly flexible and high performing. A service-oriented architecture makes sense for modelling such applications, but not for implementing them, due to performance issues and architectural mismatch. In this paper we present an architecture that aims at solving these problems. Applications are modelled as services in a service-oriented architecture, mapped to high-performance, data-driven architectures. Each component is a parallel application. This mapping is done using a MDA approach and is changeable at runtime due to a dynamic Architecture Pattern.", "num_citations": "1\n", "authors": ["655"]}