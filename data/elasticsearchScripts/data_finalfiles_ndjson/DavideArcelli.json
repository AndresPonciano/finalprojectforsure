{"title": "Exploiting queuing networks to model and assess the performance of self-adaptive software systems: a survey\n", "abstract": " Self-adaptation has emerged as a primary concern in the context of modern software systems, due to the high dynamicity of the environments where they operate, which implies the need for such systems to properly face significant degrees of uncertainty. To this aim, much work has been done, mainly by coupling autonomic managers to the managed subsystem which perceives and affects the environment through its sensors and actuators, respectively. Such coupling often results into MAPE-K feedback loop(s), i.e. a Knowledge (K)-based architectural model that divides the adaptation process into four activities, namely Monitor (M), Analyze (A), Plan (P) and Execute (E). Performance modeling notations, analysis methods and tools, have been exploited and coupled to other kinds of techniques (e.g. control theory, machine learning) for modeling and assessing the performance of autonomic managers, possibly\u00a0\u2026", "num_citations": "7\n", "authors": ["820"]}
{"title": "Towards a Generalized Queuing Network Model for Self-adaptive Software Systems.\n", "abstract": " A Self-adaptive Software Systems (SASSs) is composed by a managing and a managed subsystem. The former comprises system\u2019s adaptation logic and controls the latter, which provides system\u2019s functionalities by perceiving and affecting the environment through its sensors and actuators, respectively. Such control often conforms to a MAPE-K feedback loop, ie a Knowledge-based architecture model that divides the adaptation process into four activities, namely Monitor, Analyze, Plan and Execute. Performance modeling notations, analysis methods and tools, have been coupled to other kinds of techniques (eg control theory, machine learning) for modeling and assessing the performance of managing subsystems, possibly aimed at supporting the identification of more convenient architectural alternatives. The contribution of this paper is a generalized Queuing Network model for SASSs, where the managed subsystem is explicitly modelled, thus widening performance modeling and analysis scope to the whole system. Job classes flowing through the QN represent activities of a global feedback control loop, which is based on the system\u2019s mode profile and implemented by class-switches operating in conformance to proper predefined class-switching and routing probabilities. Results obtained by means of a proof-of-concept addressing a realistic case study show that the generalized QN model can usefully support performance-driven architectural decision-making.", "num_citations": "4\n", "authors": ["820"]}
{"title": "Understanding and Comparing Approaches for Performance Engineering of Self-adaptive Systems Based on Queuing Networks.\n", "abstract": " Enabling self-adaptation within hardware/software systems is a complex task, mainly due to environment uncertainty that has to be faced while the system is providing its functionalities. Besides, non-functional goals that have to be met by the system may be introduced, defining Quality-of-Service (QoS) requirements which drive the adaptation.This paper enhances a previous study which surveyed the literature with respect to performance-driven self-adaptation, supported by the Queuing Network paradigm. The seven approaches identified in previous work are detailed in this paper based on a well-defined taxonomy deriving from the former\u2019s classification scheme and spanning over different dimensions, with particular emphasis on the way adaptation mechanisms are introduced, eg available knobs, nonfunctional goals, sources of uncertainty. Based on such taxonomy, internal characteristics of those approaches are described, as well as commonalities and differences, aimed at providing a detailed view of the current state-of-art in the context of performance-driven self-adaptation supported by the Queuing Network paradigm.", "num_citations": "2\n", "authors": ["820"]}
{"title": "A Multi-objective Performance Optimization Approach for Self-adaptive Architectures\n", "abstract": " This paper presents an evolutionary approach for multi-objective performance optimization of Self-Adaptive Systems, represented by a specific family of Queuing Network models, namely SMAPEA QNs. The approach is based on NSGA-II genetic algorithm and it is aimed at suggesting near-optimal alternative architectures in terms of mean response times for the different available system operational modes. The evaluation is performed through a controlled experiment with respect to a realistic case study, with the aim of establishing whether meta-heuristics are worth to be investigated as a valid support to performance optimization of Self-Adaptive Systems.", "num_citations": "2\n", "authors": ["820"]}
{"title": "A Novel Family of Queuing Network Models for Self-adaptive Systems\n", "abstract": " A Self-adaptive System (SaS) consists of an autonomic manager which is able to adapt the system\u2019s behavior by operating on a managed sub-system that perceives and affects the environment through its sensors and actuators, respectively. Self-adaptation may occur at different levels, devising a number of knobs that the autonomic manager can properly regulate in order to produce actuation in response to environment sensing.               This paper is an extension of our previous work introducing a generalized QN model that allows performance modeling and assessment of SaSs. We here extend previous work by defining modeling patterns and controller selection policies to conform to during the instantiation of the generalized model, resulting into a novel family of QN models aimed at representing the different parts of the system and the dynamics occurring over and among them.               A controlled\u00a0\u2026", "num_citations": "1\n", "authors": ["820"]}
{"title": "Model-based software Refactoring Driven by Performance Analysis.\n", "abstract": " In order to deal with performance of software systems, it is important to introduce approaches that work in the early phases of the software life-cycle, even before the code is developed. In fact, if performance requirements are not met, there may be negative consequences on significant parts of the project. Some work has been done in the last few years to tackle the problem of automatically interpreting model-based performance analysis results and translating them into architectural feedback. In this context, software and performance models are typical artifacts involved in the interpretation, and architectural feedback consists of refactoring that can take place either on the software or the performance model. We present here this problem context, by means of a unifying framework that supports model-based software refactoring driven by performance analysis.", "num_citations": "1\n", "authors": ["820"]}