{"title": "Capture and Evolution of Web requirements using WebSpec\n", "abstract": " Developing Web applications is a complex and time consuming process that involves different kind of people, ranging from customers to developers. Requirement artefacts play an important role as they are used by these people to perform their daily activities. However, state of the art in requirement management for Web applications disregards valuable features that tend to improve the development process, such as quick validation during elicitation, automatic requirement validation on the final application and useful change management support. To tackle these problems we introduce WebSpec, a requirement artefact for specifying interaction and navigation features in Web applications. We show its use through the development of an example application in the social networking area, and its implementation as an Eclipse plugin.", "num_citations": "29\n", "authors": ["802"]}
{"title": "An extensible, model-driven and end-user centric approach for api building\n", "abstract": " The implementation of APIs in new applications is becoming a mandatory requirement due to the increasing use of cloud-based solutions, the necessity of integration with ubiquitous applications (like Facebook or Twitter) and the need to facilitate multi-platform support from scratch in the development. However, there is still no theoretically sound process for defining APIs (starting from end-user requirements) or their productive development and evolution, which represents a complex task. Moreover, high-level solutions intended to boost productivity of API development (usually based on Model-Driven Development methodologies) are often difficult to adapt to specific use cases and requirements. In this paper we propose a methodology that allows capturing requirements related to APIs using end-user-friendly artifacts. These artifacts allow quickly generating a first running version of the API with a specific\u00a0\u2026", "num_citations": "9\n", "authors": ["802"]}
{"title": "MoLE: A web authoring tool for building mobile learning experiences\n", "abstract": " This paper presents a web authoring tool that allows teachers to build their own mobile learning experiences, so that their students can carry out a learning activity of the teachers authorship. In this work, a learning activity consists of a set of tasks organized through a workflow, which are given to students in relevant places (within a physical space). The workflow defines the way in which students access each of the tasks proposed in the activity. A preliminary case study and two technological implementations are presented. Although the present is a work in progress, it is based on previous works on the subject and proposes an evolution of them, incorporating technological and usability improvements both in the author's web tool and in the mobile learning application that it generates.", "num_citations": "6\n", "authors": ["802"]}
{"title": "Challenges in the design of a customized location-based mobile learning application\n", "abstract": " This paper presents an analysis of the challenges present in the design of a location-based mobile learning application. The analysis was performed on a customization of the application \"Resuelvo Explorando\" for the thematic of \"Healthy Eating\". Considering the relevance of usability in this type of applications, a usability analysis is presented using a heuristic method. With this work, we expect to contribute in the discussion regarding good practices to address the challenges present in this type of applications from the design stage.", "num_citations": "6\n", "authors": ["802"]}
{"title": "A Flexible Web Authoring Tool for Building Mobile Learning Experiences\n", "abstract": " This paper presents a flexible web authoring tool called MoLE for teachers to build their own mobile learning experiences. MoLE allows teachers to define learning activities (set of learning tasks within a workflow) that can be accessed from a mobile learning application. Through MoLE, the reuse of learning tasks and learning activities is favored so that a community of teachers can co-create activities and share them. Additionally we present an evaluation of it in order to assess the usability of the tool for users with different backgrounds.", "num_citations": "3\n", "authors": ["802"]}
{"title": "A modelling approach to generating user acceptance tests\n", "abstract": " Software testing, in particular acceptance testing, is a very important step in the development process of any application since it represents a way of matching the users\u2019 expectations with the finished product\u00b4s capabilities. Typically considered as a cumbersome activity, many efforts have been made to alleviate the burden of writing tests by, for instance, trying to generate them automatically. However, testing still remains a largely neglected step. In this paper we propose taking advantage of existing requirement artifacts to semi-automatically generate acceptance tests. In particular, we use Scenarios, a requirement artifact used to describe business processes and requirements, and Task/Method models, a modelling approach taken from the Artificial Intelligence field. In order to generate User Acceptance tests, we propose a set of rules that allow transforming Scenarios (typically expressed in natural language), into Task/Methods that can in turn be used to generate the tests. Being high-level tests, close to the user experience, User Acceptance Tests verify that the expectations of the system are met from an end-user\u2019s point of view. Using the proposed ideas, we show how the semi-automated generation of acceptance tests can be implemented by describing an ongoing development of a proof of concept web application designed to support the full process.", "num_citations": "3\n", "authors": ["802"]}
{"title": "Wiki support for automated definition of software test cases\n", "abstract": " PurposeThe design of tests is a very important step in the software development process because it allows us to match the users\u2019 expectations with the finished product. Considered as a cumbersome activity, efforts have been made to automatize and alleviate the burden of test generation, but it is still a largely neglected step. The study aims to propose taking advantage of existing requirement artifacts, like scenarios that describe the dynamic of the domain in a very early stage of software development, to obtain tests from them.Design/methodology/approachIn particular, the approach proposed complement the scenarios that are textually described with a glossary, the language extended lexicon. Thus, a set of rules to derive tests from scenarios is also proposed. The tests are then described using the task/method model.FindingsThe main findings of this study consist of an extension of a previously presented set of\u00a0\u2026", "num_citations": "2\n", "authors": ["802"]}
{"title": "UX challenges in GDSS: an experience report\n", "abstract": " In this paper we present a user experience report on a Group Decision Support System. The used system is a Collaborative framework called GRoUp Support (GRUS). The experience consists in three user tests conducted in three different countries. While the locations are different, all three tests were run in the same conditions: same facilitator and tested process. In order to support the end-users. we teach the system in two different ways: a presentation of the system, and a video demonstrating how to use it. The main feedback of this experience is that the teaching step for using Collaborative tools in mandatory. The experience was conducted in the context of decision-making in the agriculture domain.", "num_citations": "2\n", "authors": ["802"]}