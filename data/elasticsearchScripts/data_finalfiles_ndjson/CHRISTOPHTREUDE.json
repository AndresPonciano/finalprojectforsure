{"title": "How do programmers ask and answer questions on the web?: NIER track\n", "abstract": " Question and Answer (Q&A) websites, such as Stack Overflow, use social media to facilitate knowledge exchange between programmers and fill archives with millions of entries that contribute to the body of knowledge in software development. Understanding the role of Q&A websites in the documentation landscape will enable us to make recommendations on how individuals and companies can leverage this knowledge effectively. In this paper, we analyze data from Stack Overflow to categorize the kinds of questions that are asked, and to explore which questions are answered well and which ones remain unanswered. Our preliminary findings indicate that Q&A websites are particularly effective at code reviews and conceptual questions. We pose research questions and suggest future work to explore the motivations of programmers that contribute to Q&A websites, and to understand the implications of turning Q\u00a0\u2026", "num_citations": "441\n", "authors": ["69"]}
{"title": "Crowd documentation: Exploring the coverage and the dynamics of API discussions on Stack Overflow\n", "abstract": " Traditionally, many types of software documentation, such as API documentation, require a process where a few people write for many potential users. The resulting documentation, when it exists, is often of poor quality and lacks sufficient examples and explanations. In this paper, we report on an empirical study to investigate how Question and Answer (Q&A) websites, such as Stack Overflow, facilitate crowd documentation\u2014knowledge that is written by many and read by many. We examine the crowd documentation for three popular APIs: Android, GWT, and the Java programming language. We collect usage data using Google Code Search, and analyze the coverage, quality, and dynamics of the Stack Overflow documentation for these APIs. We find that the crowd is capable of generating a rich source of content with code examples and discussion that is actively viewed and used by many more developers. For example, over 35,000 developers contributed questions and answers about the Android API, covering 87% of the classes. This content has been viewed over 70 million times to date. However, there are shortcomings with crowd documentation, which we identify. In addition to our empirical study, we present future directions and tools that can be leveraged by other researchers and software designers for performing API analytics and mining of crowd documentation.", "num_citations": "218\n", "authors": ["69"]}
{"title": "Difference computation of large models\n", "abstract": " Modern software engineering practices lead to large models which exist in many versions. Version management systems should offer a service to compare, and possibly merge, these models. The computation of a difference between large models is a big challenge; current algorithms are too inefficient here. We present a new technique for computing differences between models. In practical tests, this technique has been an order of magnitude faster than currently known algorithms. The main idea is to use a high-dimensional search tree for efficiently finding similar model elements. Individual elements are mapped onto a vector of numerical values using a collection of metrics for models and a numerical representation of the names which occur in a model.", "num_citations": "144\n", "authors": ["69"]}
{"title": "Measuring API documentation on the web\n", "abstract": " Software development blogs, developer forums and Q&A websites are changing the way software is documented. With these tools, developers can create and communicate knowledge and experiences without relying on a central authority to provide official documentation. Instead, any content created by a developer is just a web search away. To understand whether documentation via social media can replace or augment more traditional forms of documentation, we study the extent to which the methods of one particular API-jQuery-are documented on the Web. We analyze 1,730 search results and show that software development blogs in particular cover 87.9% of the API methods, mainly featuring tutorials and personal experiences about using the methods. Further, this effort is shared by a large group of developers contributing just a few blog posts. Our findings indicate that social media is more than a niche in\u00a0\u2026", "num_citations": "136\n", "authors": ["69"]}
{"title": "Awareness 2.0: staying aware of projects, developers and tasks using dashboards and feeds\n", "abstract": " Software development teams need to maintain awareness of various different aspects ranging from overall project status and process bottlenecks to current tasks and incoming artifacts. Currently, there is a lack of theoretical foundations to guide tool selection and tool design to best support awareness tasks. In this paper, we explore how the combination of highly configurable project, team and contributor dashboards along with individual event feeds is used to accomplish extensive awareness. Our results stem from an empirical study of several large development teams, with a detailed study of a team of 150 developers and additional data from another four project teams. We present how dashboards become pivotal to task prioritization in critical project phases and how they stir competition while feeds are used for short term planning. Our findings indicate that the distinction between high-level and low-level\u00a0\u2026", "num_citations": "134\n", "authors": ["69"]}
{"title": "Mutual assessment in the social programmer ecosystem: An empirical investigation of developer profile aggregators\n", "abstract": " The multitude of social media channels that programmers can use to participate in software development has given rise to online developer profiles that aggregate activity across many services. Studying members of such developer profile aggregators, we found an ecosystem that revolves around the social programmer. Developers are assessing each other to evaluate whether other developers are interesting, worth following, or worth collaborating with. They are self-conscious about being assessed, and thus manage their public images. They value passion for software development, new technologies, and learning. Some recruiters participate in the ecosystem and use it to find candidates for hiring; other recruiters struggle with the interpretation of signals and issues of trust. This mutual assessment is changing how software engineers collaborate and how they advance their skills.", "num_citations": "111\n", "authors": ["69"]}
{"title": "How tagging helps bridge the gap between social and technical aspects in software development\n", "abstract": " Empirical research on collaborative software development practices indicates that technical and social aspects of software development are often intertwined. The processes followed are tacit and constantly evolving, thus not all of them are amenable to formal tool support. In this paper, we explore how ldquotaggingrdquo, a lightweight social computing mechanism, is used to bridge the gap between technical and social aspects of managing work items. We present the results from an empirical study on how tagging has been adopted and adapted over the past two years of a large project with 175 developers. Our research shows that the tagging mechanism was eagerly adopted by the team, and that it has become a significant part of many informal processes. Our findings indicate that lightweight informal tool support, prevalent in the social computing domain, may play an important role in improving team-based\u00a0\u2026", "num_citations": "106\n", "authors": ["69"]}
{"title": "Choosing an NLP library for analyzing software documentation: a systematic literature review and a series of experiments\n", "abstract": " To uncover interesting and actionable information from natural language documents authored by software developers, many researchers rely on \"out-of-the-box\" NLP libraries. However, software artifacts written in natural language are different from other textual documents due to the technical language used. In this paper, we first analyze the state of the art through a systematic literature review in which we find that only a small minority of papers justify their choice of an NLP library. We then report on a series of experiments in which we applied four state-of-the-art NLP libraries to publicly available software artifacts from three different sources. Our results show low agreement between different libraries (only between 60% and 71% of tokens were assigned the same part-of-speech tag by all four libraries) as well as differences in accuracy depending on source: For example, spaCy achieved the best accuracy on\u00a0\u2026", "num_citations": "85\n", "authors": ["69"]}
{"title": "Work Item Tagging: Communicating Concerns in Collaborative Software Development\n", "abstract": " In collaborative software development projects, work items are used as a mechanism to coordinate tasks and track shared development work. In this paper, we explore how \u201ctagging,\u201d a lightweight social computing mechanism, is used to communicate matters of concern in the management of development tasks. We present the results from two empirical studies over 36 and 12 months, respectively, on how tagging has been adopted and what role it plays in the development processes of several professional development projects with more than 1,000 developers in total. Our research shows that the tagging mechanism was eagerly adopted by the teams, and that it has become a significant part of many informal processes. Different kinds of tags are used by various stakeholders to categorize and organize work items. The tags are used to support finding of tasks, articulation work, and information exchange. Implicit\u00a0\u2026", "num_citations": "68\n", "authors": ["69"]}
{"title": "NLP2Code: Code snippet content assist via natural language tasks\n", "abstract": " Developers increasingly take to the Internet for code snippets to integrate into their programs. To save developers the time required to switch from their development environments to a web browser in the quest for a suitable code snippet, we introduce NLP2Code, a content assist for code snippets. Unlike related tools, NLP2Code integrates directly into the source code editor and provides developers with a content assist feature to close the vocabulary gap between developers' needs and code snippet meta data. Our preliminary evaluation of NLP2Code shows that the majority of invocations lead to code snippets rated as helpful by users and that the tool is able to support a wide range of tasks.", "num_citations": "59\n", "authors": ["69"]}
{"title": "Categorizing the content of GitHub README files\n", "abstract": " README files play an essential role in shaping a developer\u2019s first impression of a software repository and in documenting the software project that the repository hosts. Yet, we lack a systematic understanding of the content of a typical README file as well as tools that can process these files automatically. To close this gap, we conduct a qualitative study involving the manual annotation of 4,226 README file sections from 393 randomly sampled GitHub repositories and we design and evaluate a classifier and a set of features that can categorize these sections automatically. We find that information discussing the \u2018What\u2019 and \u2018How\u2019 of a repository is very common, while many README files lack information regarding the purpose and status of a repository. Our multi-label classifier which can predict eight different categories achieves an F1 score of 0.746. To evaluate the usefulness of the classification, we used\u00a0\u2026", "num_citations": "57\n", "authors": ["69"]}
{"title": "Facilitating Crowd Sourced Software Engineering via Stack Overflow\n", "abstract": " The open source community, as well as numerous technical blogs and community web sites, put online vast quantities of free source code, ranging from snippets to full-blown products. This code embodies the software development community\u2019s domain knowledge, and mirrors the structure of the Internet: it is distributed rather than hierarchical; it is chaotic, incomplete, and inconsistent. StackOverflow.com is a Question and Answer (Q&A) website which uses social media to facilitate knowledge exchange between programmers by mitigating the pitfalls involved in using code from the Internet. Its design nurtures a community of developers, and enables crowd sourced software engineering activities ranging from documentation to providing useful, high quality code snippets to be used in production. In this chapter we review Stack Overflow from three perspectives: (1) its design and its social media characteristics\u00a0\u2026", "num_citations": "44\n", "authors": ["69"]}
{"title": "Effective communication of software development knowledge through community portals\n", "abstract": " Knowledge management plays an important role in many software organizations. Knowledge can be captured and distributed using a variety of media, including traditional help files and manuals, videos, technical articles, wikis, and blogs. In recent years, web-based community portals have emerged as an important mechanism for combining various communication channels. However, there is little advice on how they can be effectively deployed in a software project.", "num_citations": "43\n", "authors": ["69"]}
{"title": "Summarizing and measuring development activity\n", "abstract": " Software developers pursue a wide range of activities as part of their work, and making sense of what they did in a given time frame is far from trivial as evidenced by the large number of awareness and coordination tools that have been developed in recent years. To inform tool design for making sense of the information available about a developer's activity, we conducted an empirical study with 156 GitHub users to investigate what information they would expect in a summary of development activity, how they would measure development activity, and what factors influence how such activity can be condensed into textual summaries or numbers. We found that unexpected events are as important as expected events in summaries of what a developer did, and that many developers do not believe in measuring development activity. Among the factors that influence summarization and measurement of development\u00a0\u2026", "num_citations": "36\n", "authors": ["69"]}
{"title": "A comparative exploration of FreeBSD bug lifetimes.\n", "abstract": " In this paper, we explore the viability of mining the basic data provided in bug repositories to predict bug lifetimes. We follow the method of Lucas D. Panjer as described in his paper, Predicting Eclipse Bug Lifetimes. However, in place of Eclipse data, the FreeBSD bug repository is used. We compare the predictive accuracy of five different classification algorithms applied to the two data sets. In addition, we propose future work on whether there is a more informative way of classifying bugs than is considered by current bug tracking systems.", "num_citations": "36\n", "authors": ["69"]}
{"title": "Programming in a socially networked world: the evolution of the social programmer\n", "abstract": " Social media has changed how software developers collaborate, how they coordinate their work, and where they find information. Social media sites, such as the Question and Answer (Q&A) portal Stack Overflow, fill archives with millions of entries that contribute to what we know about software development, covering a wide range of topics. For today\u2019s software developers, reusable code snippets, introductory usage examples, and pertinent libraries are often just a web search away. In this position paper, we discuss the opportunities and challenges for software developers that rely on web content curated by the crowd, and we envision the future of an industry where individual developers benefit from and contribute to a body of knowledge maintained by the crowd using social media.", "num_citations": "34\n", "authors": ["69"]}
{"title": "Blogging developer knowledge: Motivations, challenges, and future directions\n", "abstract": " Why do software developers place so much effort into writing public blog posts about their knowledge, experiences, and opinions on software development? What are the benefits, problems, and tools needed-what can the research community do to help? In this paper, we describe a research agenda aimed at understanding the motivations and issues of software development blogging. We interviewed developers as well as mined and analyzed their blog posts. For this initial study, we selected developers from various backgrounds: IDE plugin development, mobile development, and web development. We found that developers used blogging for a variety of functions such as documentation, technology discussion, and announcing progress. They were motivated by a variety of reasons such as personal branding, knowledge retention, and feedback. Among the challenges for blog authors identified in our initial study\u00a0\u2026", "num_citations": "32\n", "authors": ["69"]}
{"title": "An Exploratory Study of Software Reverse Engineering in a Security Context\n", "abstract": " Illegal cyberspace activities are increasing rapidly and many software engineers are using reverse engineering methods to respond to attacks. The security-sensitive nature of these tasks, such as the understanding of malware or the decryption of encrypted content, brings unique challenges to reverse engineering: work has to be done offline, files can rarely be shared, time pressure is immense, and there is a lack of tool and process support for capturing and sharing the knowledge obtained while trying to understand plain assembly code. To help us gain an understanding of this reverse engineering work, we report on an exploratory study done in a security context at a research and development government organization to explore their work processes, tools, and artifacts. In this paper, we identify challenges, such as the management and navigation of a myriad of artifacts, and we conclude by offering suggestions\u00a0\u2026", "num_citations": "27\n", "authors": ["69"]}
{"title": "The Social Side of Software Platform Ecosystems\n", "abstract": " Software ecosystems as a paradigm for large-scale software development encompass a complex mix of technical, business, and social aspects. While significant research has been conducted to understand both the technical and business aspects, the social aspects of software ecosystems are less well understood. To close this gap, this paper presents the results of an empirical study aimed at understanding the influence of social aspects on developers' participation in software ecosystems. We conducted 25 interviews with mobile software developers and an online survey with 83 respondents from the mobile software development community. Our results point out a complex social system based on continued interaction and mutual support between different actors, including developers, friends, end users, developers from large companies, and online communities. These findings highlight the importance of social\u00a0\u2026", "num_citations": "26\n", "authors": ["69"]}
{"title": "Per-corpus configuration of topic modelling for github and stack overflow collections\n", "abstract": " To make sense of large amounts of textual data, topic modelling is frequently used as a text-mining tool for the discovery of hidden semantic structures in text bodies. Latent Dirichlet allocation (LDA) is a commonly used topic model that aims to explain the structure of a corpus by grouping texts. LDA requires multiple parameters to work well, and there are only rough and sometimes conflicting guidelines available on how these parameters should be set. In this paper, we contribute (i) a broad study of parameters to arrive at good local optima,(ii) an a-posteriori characterisation of text corpora related to eight programming languages from GitHub and Stack Overflow, and (iii) an analysis of corpus feature importance via per-corpus LDA configuration.", "num_citations": "25\n", "authors": ["69"]}
{"title": "Assessing Developer Contribution with Repository Mining-Based Metrics\n", "abstract": " Productivity as a result of individual developers' contributions is an important aspect for software companies to maintain their competitiveness in the market. However, there is no consensus in the literature on how to measure productivity or developer contribution. While some repository mining-based metrics have been proposed, they lack validation in terms of their applicability and usefulness from the individuals who will use them to assess developer contribution: team and project leaders. In this paper, we propose the design of a suite of metrics for the assessment of developer contribution, based on empirical evidence obtained from project and team leaders. In a preliminary evaluation with four software development teams, we found that code contribution and code complexity metrics received the most positive feedback, while participants pointed out several threats of using bug-related metrics for contribution\u00a0\u2026", "num_citations": "22\n", "authors": ["69"]}
{"title": "ConcernLines: A timeline view of co-occurring concerns\n", "abstract": " Understanding the evolution of a software system requires understanding how information about the release history, non-functional requirements and project milestones relates to functional requirements on the software components. This short paper describes a new tool, called CONCERNLINES, that supports this cognitive process by visualizing co-occurring concerns over time.", "num_citations": "19\n", "authors": ["69"]}
{"title": "Mashup environments in software engineering\n", "abstract": " Too often, software engineering (SE) tool research is focused on creating small, stand-alone tools that address rarely understood developer needs. We believe that research should instead provide developers with flexible environments and interoperable tools, and then study how developers appropriate and tailor these tools in practice. Although there has been some prior work on this, we feel that flexible tool environments for SE have not yet been fully explored. In particular, we propose adopting the Web 2.0 idea of mashups and mashup environments to support SE practitioners in analytic activities involving multiple information sources.", "num_citations": "18\n", "authors": ["69"]}
{"title": "Using Gamification as a Collaboration Motivator for Software Development Teams: A Preliminary Framework\n", "abstract": " Gamification is the use of game elements in non-game context to engage and to motivate people to achieve goals. Its use is becoming very popular in software development organizations due to work being based upon human-centric and brain-intensive activity. This paper presents the topics of collaboration and gamification in the context of software engineering, and proposes a framework that identifies the most common collaboration issues that affect software development teams, and how to apply game elements to motivate a change on their behaviors.", "num_citations": "14\n", "authors": ["69"]}
{"title": "Empirical studies on collaboration in software development: A systematic literature review\n", "abstract": " Collaboration in software development is a complex issue that has been examined by various researchers over the last decade. This paper presents a systematic literature review of pertinent literature on empirical studies on collaborative software development. We found that a lot of progress has been achieved in the field of global or distributed development. While there are still many challenges, today\u2019s projects seem to have overcome at least some of those. Also, first steps have been made in understanding the collaborative aspects of requirements engineering and design. Research on tools for collaboration is advanced, having resulted in several successful tools especially in the area of communication. 1.", "num_citations": "14\n", "authors": ["69"]}
{"title": "Automatically generating documentation for lambda expressions in Java\n", "abstract": " When lambda expressions were introduced to the Java programming language as part of the release of Java 8 in 2014, they were the language's first step into functional programming. Since lambda expressions are still relatively new, not all developers use or understand them. In this paper, we first present the results of an empirical study to determine how frequently developers of GitHub repositories make use of lambda expressions and how they are documented. We find that 11% of Java GitHub repositories use lambda expressions, and that only 6% of the lambda expressions are accompanied by source code comments. We then present a tool called LambdaDoc which can automatically detect lambda expressions in a Java repository and generate natural language documentation for them. Our evaluation of LambdaDoc with 23 professional developers shows that they perceive the generated documentation to\u00a0\u2026", "num_citations": "12\n", "authors": ["69"]}
{"title": "Enhancing Python Compiler Error Messages via Stack Overflow\n", "abstract": " Background: Compilers tend to produce cryptic and uninformative error messages, leaving programmers confused and requiring them to spend precious time to resolve the underlying error. To find help, programmers often take to online question-and-answer forums such as Stack Overflow to start discussion threads about the errors they encountered.Aims: We conjecture that information from Stack Overflow threads which discuss compiler errors can be automatically collected and repackaged to provide programmers with enhanced compiler error messages, thus saving programmers' time and energy.Method: We present Pycee, a plugin integrated with the popular Sublime Text IDE to provide enhanced compiler error messages for the Python programming language. Pycee automatically queries Stack Overflow to provide customised and summarised information within the IDE. We evaluated two Pycee variants\u00a0\u2026", "num_citations": "11\n", "authors": ["69"]}
{"title": "Attracting the community's many eyes: an exploration of user involvement in issue tracking\n", "abstract": " A community of users who report bugs and request features provides valuable feedback that can be used in product development. We compare the community involvement in issue tracker usage between the open source project Eclipse and the closed source project IBM Jazz to evaluate if publicly accessible issue trackers work as well in closed source projects. We find that IBM Jazz successfully receives user feedback through this channel. We then explore the differences in work item processing in IBM Jazz between team members, project members and externals. We conclude that making public issue trackers available in closed source projects is a useful approach for eliciting feedback from the community, but that work items created by team members are processed differently from work items created by project members and externals.", "num_citations": "10\n", "authors": ["69"]}
{"title": "Wait for it: identifying \u201cOn-Hold\u201d self-admitted technical debt\n", "abstract": " Self-admitted technical debt refers to situations where a software developer knows that their current implementation is not optimal and indicates this using a source code comment. In this work, we hypothesize that it is possible to develop automated techniques to understand a subset of these comments in more detail, and to propose tool support that can help developers manage self-admitted technical debt more effectively. Based on a qualitative study of 333 comments indicating self-admitted technical debt, we first identify one particular class of debt amenable to automated management: on-hold self-admitted technical debt (on-hold SATD), i.e., debt which contains a condition to indicate that a developer is waiting for a certain event or an updated functionality having been implemented elsewhere. We then design and evaluate an automated classifier which can identify these on-hold instances with an area\u00a0\u2026", "num_citations": "9\n", "authors": ["69"]}
{"title": "Workitemexplorer: Visualizing software development tasks using an interactive exploration environment\n", "abstract": " This demo introduces WorkItemExplorer, an interactive environment to visually explore data from software development tasks. WorkItemExplorer enables developers and managers to investigate activity and correlations in their task management system by making data exploration flexible and interactive, and by utilizing multiple coordinated views. Our preliminary evaluation shows that WorkItemExplorer is able to answer questions that developers ask, while also enabling them to gain new insights through the free exploration of data.", "num_citations": "8\n", "authors": ["69"]}
{"title": "The Role of Social Media Artifacts in Collaborative Software Development\n", "abstract": " Social media mechanisms, such as wikis, blogs, tags and feeds, have transformed the way we communicate, work and play online. Many of these technologies have made their way into collaborative software engineering processes and modern software development platforms, either as an adjunct or integrated into a wide range of tools ranging from code editors and issue trackers to IDEs and web-based portals. Based on the results of several large scale empirical studies, this thesis presents findings on how social media artifacts, such as tags, feeds and dashboards, bridge lightweight and heavyweight task management in software development. Furthermore, this work shows how blogs, developer wikis and Q&A websites are changing the way software is documented. Based on these findings, the thesis describes a model that characterizes social media artifacts along several dimensions, such as content type, intended audience, and review mechanisms. The role of social media artifacts in collaborative software development lies in the timely dissemination of scenarios and concerns to a diverse audience through a process of implicit and informal collaboration, triggered by questions from users or articulation work. These findings lead to tool and process recommendations as well as the implementation of tools that leverage social media artifacts, and they indicate that tool support inspired by social media may play an important role in improving collaborative software development practices.", "num_citations": "8\n", "authors": ["69"]}
{"title": "Unveiling Exception Handling Guidelines Adopted by Java Developers\n", "abstract": " Despite being an old language feature, Java exception handling code is one of the least understood parts of many systems. Several studies have analyzed the characteristics of exception handling code, trying to identify common practices or even link such practices to software bugs. Few works, however, have investigated exception handling issues from the point of view of developers. None of the works have focused on discovering exception handling guidelines adopted by current systems - which are likely to be a driver of common practices. In this work, we conducted a qualitative study based on semi-structured interviews and a survey whose goal was to investigate the guidelines that are (or should be) followed by developers in their projects. Initially, we conducted semi-structured interviews with seven experienced developers, which were used to inform the design of a survey targeting a broader group of Java\u00a0\u2026", "num_citations": "7\n", "authors": ["69"]}
{"title": "UEDashboard: awareness of unusual events in commit histories\n", "abstract": " To be able to respond to source code modifications with large impact or commits that necessitate further examination, developers and managers in a software development team need to be aware of anything unusual happening in their software projects. To address this need, we introduce UEDashboard, a tool which automatically detects unusual events in a commit history based on metrics and smells, and surfaces them in an event feed. Our preliminary evaluation with a team of professional software developers showed that our conceptualization of unusual correlates with developers' perceptions of task difficulty, and that UEDashboard could be useful in supporting development meetings and for pre-commit warnings.", "num_citations": "7\n", "authors": ["69"]}
{"title": "Bridging lightweight and heavyweight task organization: the role of tags in adopting new task categories\n", "abstract": " In collaborative software development projects, tasks are often used as a mechanism to coordinate and track shared development work. Modern development environments provide explicit support for task management where tasks are typically organized and managed through predefined categories. Although there have been many studies that analyze data available from task management systems, there has been relatively little work on the design of task management tools. In this paper we explore how tagging with freely assigned keywords provides developers with a lightweight mechanism to further categorize and annotate development tasks. We investigate how tags that are frequently used over a long period of time reveal the need for additional predefined categories of keywords in task management tool support. Finally, we suggest future work to explore how integrated lightweight tool features in a\u00a0\u2026", "num_citations": "7\n", "authors": ["69"]}
{"title": "Automating the performance deviation analysis for multiple system releases: An evolutionary study\n", "abstract": " This paper presents a scenario-based approach for the evaluation of the quality attribute of performance, measured in terms of execution time (response time). The approach is implemented by a framework that uses dynamic analysis and repository mining techniques to provide an automated way for revealing potential sources of performance degradation of scenarios between releases of a software system. The approach defines four phases: (i) preparation - choosing the scenarios and preparing the target releases; (ii) dynamic analysis - determining the performance of scenarios and methods by calculating their execution time; (iii) degradation analysis - processing and comparing the results of the dynamic analysis for different releases; and (iv) repository mining - identifying development issues and commits associated with performance deviation. The paper also describes an evolutionary study of applying the\u00a0\u2026", "num_citations": "6\n", "authors": ["69"]}
{"title": "Challenges in analyzing software documentation in Portuguese\n", "abstract": " Many tools that automatically analyze, summarize, or transform software artifacts rely on natural language processing tooling for the interpretation of natural language text produced by software developers, such as documentation, code comments, commit messages, or bug reports. Processing natural language text produced by software developers is challenging because of unique characteristics not found in other texts, such as the presence of code terms and the systematic use of incomplete sentences. In addition, texts produced by Portuguese-speaking developers mix languages since many keywords and programming concepts are referred to by their English name. In this paper, we provide empirical insights into the challenges of analyzing software artifacts written in Portuguese. We analyzed 100 question titles from the Portuguese version of Stack Overflow with two Portuguese language tools and identified\u00a0\u2026", "num_citations": "6\n", "authors": ["69"]}
{"title": "A study on the geographical distribution of Brazil\u2019s prestigious software developers\n", "abstract": " Brazil is an emerging economy with many IT initiatives from public and private sectors. To evaluate the progress of such initiatives, we study the geographical distribution of software developers in Brazil, in particular which of the Brazilian states succeed the most in attracting and nurturing them. We compare the prestige of developers with socio-economic data and find that (i) prestigious developers tend to be located in the most economically developed regions of Brazil, (ii) they are likely to follow others in the same state they are located in, (iii) they are likely to follow other prestigious developers, and (iv) they tend to follow more people. We discuss the implications of those findings for the development of the Brazilian software industry.", "num_citations": "6\n", "authors": ["69"]}
{"title": "A preliminary evaluation of a gamification framework to jump start collaboration behavior change\n", "abstract": " In this notes paper we report on a preliminary qualitative evaluation of a gamification framework to address collaboration issues in software engineering. Findings suggest that the use of game elements indeed is prone to motivate software developers to foster the resolution of collaboration issues in their teams. Our preliminary results motivated us to design large scale, in-depth, and longitudinal studies to further evaluate the framework. In a long run, we expect that our findings will be informative for project managers and tool designers and anyone else who is interested in helping software teams to overcome collaboration barriers and succeed on their work.", "num_citations": "5\n", "authors": ["69"]}
{"title": "Developers\u2019 Perceptions on Object-Oriented Design and Architectural Roles\n", "abstract": " Software developers commonly rely on well-known software architecture patterns, such as MVC, to build their applications. In many of these patterns, classes play specific roles in the system, such as Controllers or Entities, which means that each of these classes has specific characteristics in terms of object-oriented class design and implementation. Indeed, as we have shown in a previous study, architectural roles are different from each other in terms of code metrics. In this paper, we present a study in a software development company in which we captured developers' perceptions on object-oriented design aspects of the architectural roles in their system and whether these perceptions match the source code metric analysis. We found that their developers do not have a common perception of how their architectural roles behave in terms of object-oriented design aspects, and that their perceptions also do not\u00a0\u2026", "num_citations": "5\n", "authors": ["69"]}
{"title": "Analyzing the friendliness of exchanges in an online software developer community\n", "abstract": " Many online communities struggle with conflicts - e.g. between newcomers and elders - at some point. In July 2012, the Stack Exchange organization attempted to assess the overall \u201cniceness\u201d of the Stack Overflow community by rating the \u201cfriendliness\u201d of 7,000 comments made on the site over a 4 year period. We performed a deeper examination of the comment dataset published by Stack Exchange. We find a high degree of comment repetition in the Stack Overflow database and suggest some simple heuristics that may help in automatically identifying unfriendly comments, providing managers of developer communities with simple means that could counter hostility.", "num_citations": "5\n", "authors": ["69"]}
{"title": "The implications of how we tag software artifacts: exploring different schemata and metadata for tags\n", "abstract": " Social tagging has been adopted by software developers in various contexts from source code to work items and build definitions. While the success of tagging is usually attributed to the simplicity of tags, the implementation details of tagging systems vary significantly in terms of metadata, schemata and semantics. In this position paper, we argue that academia and industry should be aware of these differences and that we should start to examine their implications.", "num_citations": "5\n", "authors": ["69"]}
{"title": "POSIT: simultaneously tagging natural and programming languages\n", "abstract": " Software developers use a mix of source code and natural language text to communicate with each other: Stack Overflow and Developer mailing lists abound with this mixed text. Tagging this mixed text is essential for making progress on two seminal software engineering problems - traceability, and reuse via precise extraction of code snippets from mixed text. In this paper, we borrow code-switching techniques from Natural Language Processing and adapt them to apply to mixed text to solve two problems: language identification and token tagging. Our technique, POSIT, simultaneously provides abstract syntax tree tags for source code tokens, part-of-speech tags for natural language words, and predicts the source language of a token in mixed text. To realize POSIT, we trained a biLSTM network with a Conditional Random Field output layer using abstract syntax tree tags from the CLANG compiler and part-of\u00a0\u2026", "num_citations": "4\n", "authors": ["69"]}
{"title": "Software Engineering Dashboards: Types, Risks, and Future\n", "abstract": " The large number of artifacts created or modified in a software project and the flood of information exchanged in the process of creating a software product call for tools that aggregate this data to communicate higher-level insights to all stakeholders involved. In many projects -- in software engineering as well as in other domains -- dashboards are used to communicate information that may bring insights on the productivity of project activities and other insights. The goal of dashboards is to transform the raw data contained in an organization\u2019s repositories into consumable information. In software engineering, dashboards are used to provide information related to questions such as \u201cis this project on schedule?\u201d, \u201cwhat are the current bottlenecks?\u201d, and \u201cwhat is the progress of other teams?\u201d. In this chapter, we review the different types of dashboards that are commonly used in software engineering and the risks\u00a0\u2026", "num_citations": "4\n", "authors": ["69"]}
{"title": "Smart media: bridging interactions and services for the smart internet\n", "abstract": " This chapter describes a need for Smart Media to enhance the vision of the Smart Internet. Smart Media is introduced as a mechanism to bridge Smart Services and Smart Interactions. Smart Media extends the existing notions of Media in HCI such as Hypermedia, New Media, Adaptive Hypermedia, and Social Media. There are three main contributions from this paper: (1) A historical perspective of media in HCI and how media could benefit from smartness; (2) through some high level sample scenarios, a proposal for Smart Media to meet the vision of the Smart Internet; and (3) a detailed example of how Smart Media could play a role in software development. The paper concludes by outlining some of the key challenges that need to be faced in realizing and applying Smart Media objects.", "num_citations": "4\n", "authors": ["69"]}
{"title": "AdelaideCyC at SemEval-2020 Task 12: Ensemble of Classifiers for Offensive Language Detection in Social Media\n", "abstract": " This paper describes the systems our team (AdelaideCyC) has developed for SemEval Task 12 (OffensEval 2020) to detect offensive language in social media. The challenge focuses on three subtasks\u2013offensive language identification (subtask A), offense type identification (subtask B), and offense target identification (subtask C). Our team has participated in all the three subtasks. We have developed machine learning and deep learning-based ensembles of models. We have achieved F1-scores of 0.906, 0.552, and 0.623 in subtask A, B, and C respectively. While our performance scores are promising for subtask A, the results demonstrate that subtask B and C still remain challenging to classify.", "num_citations": "3\n", "authors": ["69"]}
{"title": "Beyond accuracy: assessing software documentation quality\n", "abstract": " Good software documentation encourages good software engineering, but the meaning of\" good\" documentation is vaguely defined in the software engineering literature. To clarify this ambiguity, we draw on work from the data and information quality community to propose a framework that decomposes documentation quality into ten dimensions of structure, content, and style. To demonstrate its application, we recruited technical editors to apply the framework when evaluating examples from several genres of software documentation. We summarise their assessments--for example, reference documentation and README files excel in quality whereas blog articles have more problems--and we describe our vision for reasoning about software documentation quality and for the expansion and potential of a unified quality framework.", "num_citations": "3\n", "authors": ["69"]}
{"title": "Essential Sentences for Navigating Stack Overflow Answers\n", "abstract": " Stack Overflow (SO) has become an essential resource for software development. Despite its success and prevalence, navigating SO remains a challenge. Ideally, SO users could benefit from highlighted navigational cues that help them decide if an answer is relevant to their task and context. Such navigational cues could be in the form of essential sentences that help the searcher decide whether they want to read the answer or skip over it. In this paper, we compare four potential approaches for identifying essential sentences. We adopt two existing approaches and develop two new approaches based on the idea that contextual information in a sentence (e.g., \u201cif using windows\u201d) could help identify essential sentences. We compare the four techniques using a survey of 43 participants. Our participants indicate that it is not always easy to figure out what the best solution for their specific problem is, given the options\u00a0\u2026", "num_citations": "3\n", "authors": ["69"]}
{"title": "From Academia to Software Development: Publication Citations in Source Code Comments\n", "abstract": " Academic publications have been evaluated in terms of their impact on research communities based on many metrics, such as the number of citations. On the other hand, the impact of academic publications on industry has been rarely studied. This paper investigates how academic publications contribute to software development by analyzing publication citations in source code comments in open source software repositories. We propose an automated approach for detecting academic publications based on Named Entity Recognition, and achieve 0.90 in  as detection accuracy. We conduct a large-scale study of publication citations with 319,438,977 comments collected from 25,925 active repositories written in seven programming languages. Our findings indicate that academic publications can be knowledge sources for software development. These referenced publications are particularly from journals. In terms of knowledge transfer, algorithm is the most prevalent type of knowledge transferred from the publications, with proposed formulas or equations typically implemented in methods or functions in source code files. In a closer look at GitHub repositories referencing academic publications, we find that science-related repositories are the most frequent among GitHub repositories with publication citations, and that the vast majority of these publications are referenced by repository owners who are different from the publication authors. We also find that referencing older publications can lead to potential issues related to obsolete knowledge.", "num_citations": "3\n", "authors": ["69"]}
{"title": "The role of emergent knowledge structures in collaborative software development\n", "abstract": " Many collaboration features in software development tools draw on lightweight technologies such as tagging and wikis. We propose to study the role of emergent knowledge structures created through these features. Using a mixed-methods approach, we investigate which processes emergent knowledge structures support and how tool support can leverage them.", "num_citations": "3\n", "authors": ["69"]}
{"title": "GitHub discussions: an exploratory study of early adoption\n", "abstract": " Discussions is a new feature of GitHub for asking questions or discussing topics outside of specific Issues or Pull Requests. Before being available to all projects in December 2020, it had been tested on selected open source software projects. To understand how developers use this novel feature, how they perceive it, and how it impacts the development processes, we conducted a mixed-methods study based on early adopters of GitHub discussions from January until July 2020. We found that:(1) errors, unexpected behavior, and code reviews are prevalent discussion categories;(2) there is a positive relationship between project member involvement and discussion frequency;(3) developers consider GitHub Discussions useful but face the problem of topic duplication between Discussions and Issues;(4) Discussions play a crucial role in advancing the development of projects; and (5) positive sentiment in\u00a0\u2026", "num_citations": "2\n", "authors": ["69"]}
{"title": "API method recommendation via explicit matching of functionality verb phrases\n", "abstract": " Due to the lexical gap between functionality descriptions and user queries, documentation-based API retrieval often produces poor results. Verb phrases and their phrase patterns are essential in both describing API functionalities and interpreting user queries. Thus we hypothesize that API retrieval can be facilitated by explicitly recognizing and matching between the fine-grained structures of functionality descriptions and user queries. To verify this hypothesis, we conducted a large-scale empirical study on the functionality descriptions of 14,733 JDK and Android API methods. We identified 356 different functionality verbs from the descriptions, which were grouped into 87 functionality categories, and we extracted 523 phrase patterns from the verb phrases of the descriptions. Building on these findings, we propose an API method recommendation approach based on explicit matching of functionality verb phrases in\u00a0\u2026", "num_citations": "2\n", "authors": ["69"]}