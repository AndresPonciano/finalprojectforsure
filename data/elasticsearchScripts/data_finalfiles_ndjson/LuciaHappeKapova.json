{"title": "Supporting swift reaction: Automatically uncovering performance problems by systematic experiments\n", "abstract": " Performance problems pose a significant risk to software vendors. If left undetected, they can lead to lost customers, increased operational costs, and damaged reputation. Despite all efforts, software engineers cannot fully prevent performance problems being introduced into an application. Detecting and resolving such problems as early as possible with minimal effort is still an open challenge in software performance engineering. In this paper, we present a novel approach for Performance Problem Diagnostics (PPD) that systematically searches for well-known performance problems (also called performance antipatterns) within an application. PPD automatically isolates the problem's root cause, hence facilitating problem solving. We applied PPD to a well established transactional web e-Commerce benchmark (TPC-W) in two deployment scenarios. PPD automatically identified four performance problems in the\u00a0\u2026", "num_citations": "71\n", "authors": ["615"]}
{"title": "Evaluating maintainability with code metrics for model-to-model transformations\n", "abstract": " Using model-to-model transformations to generate analysis models or code from architecture models is sought to promote compliance and reuse of components. The maintainability of transformations is influenced by various characteristics - as with every programming language artifact. Code metrics are often used to estimate code maintainability. However, most of the established metrics do not apply to declarative transformation languages (such as QVT Relations) since they focus on imperative (e.g. object-oriented) coding styles. One way to characterize the maintainability of programs are code metrics. However, the vast majority of these metrics focus on imperative (e.g., object-oriented) coding styles and thus cannot be reused as-is for transformations written in declarative languages. In this paper we propose an initial set of quality metrics to evaluate transformations written in the declarative QVT\u00a0\u2026", "num_citations": "58\n", "authors": ["615"]}
{"title": "View-based model-driven software development with ModelJoin\n", "abstract": " Fragmentation of information across instances of different metamodels poses a significant problem for software developers and leads to a major increase in effort of transformation development. Moreover, compositions of metamodels tend to be incomplete, imprecise, and erroneous, making it impossible to present it to users or use it directly as input for applications. Customized views satisfy information needs by focusing on a particular concern, and filtering out information that is not relevant to this concern. For a broad establishment of view-based approaches, an automated solution to deal with separate metamodels and the high complexity of model transformations is necessary. In this paper, we present the ModelJoin approach for the rapid creation of views. Using a human-readable textual DSL, developers can define custom views declaratively without having to write model transformations or define a bridging\u00a0\u2026", "num_citations": "52\n", "authors": ["615"]}
{"title": "Statistical inference of software performance models for parametric performance completions\n", "abstract": " Software performance engineering (SPE) enables software architects to ensure high performance standards for their applications. However, applying SPE in practice is still challenging. Most enterprise applications include a large software basis, such as middleware and legacy systems. In many cases, the software basis is the determining factor of the system\u2019s overall timing behavior, throughput, and resource utilization. To capture these influences on the overall system\u2019s performance, established performance prediction methods (model-based and analytical) rely on models that describe the performance-relevant aspects of the system under study. Creating such models requires detailed knowledge on the system\u2019s structure and behavior that, in most cases, is not available. In this paper, we abstract from the internal structure of the system under study. We focus on message-oriented middleware (MOM) and\u00a0\u2026", "num_citations": "36\n", "authors": ["615"]}
{"title": "Automated feature model-based generation of refinement transformations\n", "abstract": " Model-driven application engineering builds on the concept of model transformations. To weave additional refinement parts into an application model, so-called refinement transformations are used. In many cases these refinement parts are highly variable and configurable. Such a configuration could depend on application specific features. Today, application developers need to define refinement transformations manually, including all possible configuration combinations. Due to the high number of possible initial requirements such a development method is costly and means significant effort. Therefore configurable refinements should be embedded in an overall model-driven application development process. Currently there is a lack of automated support for integrating these configuration decisions into the development process of refinement transformations. In this paper, we introduce a novel approach for\u00a0\u2026", "num_citations": "28\n", "authors": ["615"]}
{"title": "An empirical study on the perception of metamodel quality\n", "abstract": " Despite the crucial importance of metamodeling for Model-Driven Engineering (MDE), there is still little discussion about the quality of metamodel design and its consequences in model-driven development processes. Presumably, the quality of metamodel design strongly affects the models and transformations that conform to these metamodels. However, so far surprisingly few work has been done to validate the characterization of metamodel quality. A proper characterization is essential to automate quality improvements for metamodels such as metamodel refactorings. In this paper, we present an empirical study to sharpen the understanding of the perception of metamodel quality. In the study, 24 participants created metamodels of two different domains and evaluated the metamodels in a peer review process according to an evaluation sheet. The results show that the perceived quality was mainly driven by the\u00a0\u2026", "num_citations": "25\n", "authors": ["615"]}
{"title": "Using Component Frameworks for Model Transformations by an Internal DSL.\n", "abstract": " To increase the development productivity, possibilities for reuse, maintainability and quality of complex model transformations, modularization techniques are indispensable. Component-Based Software Engineering targets the challenge of modularity and is well-established in languages like Java or C# with component models like .NET, EJB or OSGi. There are still many challenging barriers to overcome in current model transformation languages to provide comparable support for component-based development of model transformations. Therefore, this paper provides a pragmatic solution based on NMF Transformations, a model transformation language realized as an internal DSL embedded in C#. An internal DSL can take advantage of the whole expressiveness and tooling build for the well established and known host language. In this work, we use the component model of the .NET platform to represent reusable components of model transformations to support internal and external model transformation composition. The transformation components are hidden behind transformation rule interfaces that can be exchanged dynamically through configuration. Using this approach we illustrate the possibilities to tackle typical issues of integrity and versioning, such as detecting versioning conflicts for model transformations.", "num_citations": "9\n", "authors": ["615"]}
{"title": "Configurable software performance completions through higher-order model transformations\n", "abstract": " Chillies is a novel approach for variable model transformations closing the gap between abstract architecture models, used for performance prediction, and required low-level details. We enable variability of transformations using chain of generators based on the Higher-Order Transformation (HOT). HOTs target different goals, such as template instantiation or transformation composition. In addition, we discuss state-dependent behavior in prediction models and quality of model transformations.", "num_citations": "8\n", "authors": ["615"]}
{"title": "Difference-based Conformance Checking for Ecore Metamodels\n", "abstract": " During modern model-driven development processes, generators and higherorder transformations are used to create metamodels with short life cycles. Since these metamodels often differ from each other only in small parts, instances as well as metamodels may be re-used if the difference between them does not lead to a violation of instance conformance. Existing co-evolution approaches describe this conformance based on change operators to a metamodel. Thus, they require that changes to the metamodels are carried out using special editors. To use this conformance for arbitrarily generated metamodels, we present a conformance validator for Ecore metamodels that is based on difference-based analysis. The validator has been implemented as a plug-in for the Eclipse framework. We demonstrate the completeness of our approach by covering state-of-the-art co-evolution change operators.", "num_citations": "8\n", "authors": ["615"]}
{"title": "Systematic refinement of performance models for concurrent component-based systems\n", "abstract": " Model-driven performance prediction methods require detailed design models to evaluate the performance of software systems during early development stages. However, the complexity of detailed prediction models and the semantic gap between modelled performance concerns and functional concerns prevents many developers to address performance. As a solution to this problem, systematic model refinements, called completions, hide low-level details from developers. Completions automatically integrate performance-relevant details into component-based architectures using model-to-model transformations. In such scenarios, conflicts between different completions are likely. Therefore, the application order of completions must be determined unambiguously in order to reduce such conflicts. Many existing approaches employ the concept of performance completions to include performance-relevant details to\u00a0\u2026", "num_citations": "8\n", "authors": ["615"]}
{"title": "An NMF solution for the Petri Nets to State Charts case study at the TTC 2013\n", "abstract": " Software systems are getting more and more complex. Model-driven engineering (MDE) offers ways to handle such increased complexity by lifting development to a higher level of abstraction. A key part in MDE are transformations that transform any given model into another. These transformations are used to generate all kinds of software artifacts from models. However, there is little consensus about the transformation tools. Thus, the Transformation Tool Contest (TTC) 2013 aims to compare different transformation engines. This is achieved through three different cases that have to be tackled. One of these cases is the Petri Net to State Chart case. A solution has to transform a Petri Net to a State Chart and has to derive a hierarchical structure within the State Chart. This paper presents the solution for this case using NMF Transformations as transformation engine.", "num_citations": "7\n", "authors": ["615"]}
{"title": "Tool support for model transformations: on solutions using internal languages\n", "abstract": " Model-driven engineering (MDE) has proven to be a useful approach to cope with todays ever growing complexity in the development of software systems, yet it is not widely applied in industry. As suggested by multiple studies, tool support is a major factor for this lack of adoption. Existing tools for MDE, in particular model transformation approaches, are often developed by small teams and cannot keep up with advanced tool support for mainstream languages such as provided by IntelliJ or Visual Studio. In this paper, we propose an approach to leverage existing tool support for model transformation using internal model transformation languages and investigate design decisions and their consequences for inherited tool support. The findings are used for the design of an internal model transformation language on the .NET platform.", "num_citations": "6\n", "authors": ["615"]}
{"title": "Security of electricity supply in 2030\n", "abstract": " The stability and well-operation of a future electricity grid which includes numerous components of smart grid technology is becoming much more dependent on the correct operation of the supporting IT, and in this respect may become more attractive to malicious attacks. To understand the vulnerabilities, interdependencies between the electrical distribution grid and IT components as well as critical infrastructures such as water supply and health care will be simulated and evaluated. Aim of the research activity is to develop a holistic analysis framework to quantify and evaluate requirements and design decisions of the many players in such complex infrastructures. Planning methods and tools will be introduced that provide guidance at the designtime of smart grid infrastructures, allowing for a high level of security even under unfavorable conditions. This paper presents the framework focusing on the methods envisaged and an application scenario dealing with potential threats to and impact of a large-scale and longer-lasting power outage.", "num_citations": "6\n", "authors": ["615"]}
{"title": "An NMF solution for the flowgraphs case at the TTC 2013\n", "abstract": " Software systems are getting more and more complex. Model-driven engineering (MDE) offers ways to handle such increased complexity by lifting development to a higher level of abstraction. A key part in MDE are transformations that transform any given model into another. These transformations are used to generate all kinds of software artifacts from models. However, there is little consensus about the transformation tools. Thus, the Transformation Tool Contest (TTC) 2013 aims to compare different transformation engines. This is achieved through three different cases that have to be tackled. One of these cases is the Flowgraphs case. A solution has to transform a Java code model into a simplified version and has to derive control and data flow. This paper presents the solution for this case using NMF Transformations as transformation engine.", "num_citations": "6\n", "authors": ["615"]}
{"title": "An NMF solution to the Smart Grid Case at the TTC 2017.\n", "abstract": " This paper presents a solution to the Smart Grid case at the Transformation Tool Contest (TTC) 2017 using the .NET Modeling Framework (NMF). The goal of this case was to create incremental views of multiple models relevant in the area of smart grids. Our solution uses the incremental model transformation language NMF Synchronizations and the underlying incrementalization system NMF Expressions.", "num_citations": "5\n", "authors": ["615"]}
{"title": "Compositional performance abstractions of software connectors\n", "abstract": " Typically, to provide accurate predictions, a performance model has to include low-level details such as used communication infrastructure, or connectors and influence of the underlying middleware platform. In order to profit from the research on inter-component communication and connector design, performance prediction approaches need to include models of different kinds of connectors. It is not always feasible to model complex connectors with all their details. The choice of suitable abstraction filter, which reduces the amount of detailed information needed with respect to the model purpose, is crucial to decrease modelling effort. We propose an approach by which an abstract connector model can be augmented with selected adaptations and enhancements using model completions to result in a more detailed connector model. As the purpose of our models is performance prediction, we designed a suitable\u00a0\u2026", "num_citations": "5\n", "authors": ["615"]}
{"title": "Girl-friendly computer science classroom: Czechitas experience report\n", "abstract": " The under-representation of girls within software engineering has far-reaching consequences, from social to economical. For the moment, curriculum design is being widely discussed as the essential factor that teachers can adapt to influence their education\u2019s inclusiveness. However, in building an inclusive learning environment, effective pedagogy is even more crucial, fostering controlled work with students\u2019 strengths, weaknesses, interest in the topic, sense of belonging, and experience of success. In this paper, we collect effective strategies for building a girl-friendly classroom environment that is inclusive towards novice computer science learners, and we pair them with the practical experience from a successful education NGO called Czechitas, specialized in female-tailored computing courses.", "num_citations": "3\n", "authors": ["615"]}
{"title": "Introduction to the theme issue on models for quality of software architecture\n", "abstract": " High quality of system architecture is essential for the longterm success of a software product. Software engineers need to design and implement secure, maintainable, usable, efficient, and reliable software systems. They have to design architectures that can fulfill quality requirements, judge quality tradeoffs, and ensure that the implementation adheres to the architecture. In case of long-living software systems, they have to monitor, evaluate, and improve quality continuously throughout the entire software lifecycle. Models play a key role in supporting software engineers to master these tasks.The goal of this special theme issue is to emphasize the deep relationship between system modeling and the quality of system architecture. For example, how can model-driven techniques for system development be used to assess and improve the quality of system architecture? What are the connections between software\u00a0\u2026", "num_citations": "3\n", "authors": ["615"]}
{"title": "Prediction of quality of user experience for video streaming over IP networks\n", "abstract": " This paper deals with the video quality evaluation of mobile video delivery. It analyzes the current trends in video quality evaluation while trying to shift video quality measurement from service-centered to more user-centered. The attention is in defining the causalities among specific video and network parameters, and perceived video quality. As a part of this target, vast subjective video quality survey has been conducted to define these causalities. These causalities were particularly important in designing of our video quality prediction model based on Bayesian network. Proposed solution and prediction results were then experimentally evaluated compared to video quality results of independent subjective video quality assessment.", "num_citations": "3\n", "authors": ["615"]}
{"title": "Performance-driven stepwise refinement of component-based architectures\n", "abstract": " Detailed models of component-based software architectures are crucial for the accurate evaluation and prediction of systems quality attributes (eg, performance) during early development stages. Ideally, the increased complexity of such models should not incur additional modelling effort for developers. Specific incremental model refinements called completions provide a systematic approach to reduce the modelling effort. Completions transparently integrate low-level details that affect system's quality (eg performance impact of middleware configuration) into component-based architectural models, using model-to-model transformations. When multiple completions are to be applied, the necessary model transformations are executed in a chain. In such scenarios, conflicts between different completions are likely. In current practice, the conflicts are supposed to be resolved by software architects, who decide on the\u00a0\u2026", "num_citations": "3\n", "authors": ["615"]}
{"title": "An NMF Solution to the State Elimination Case at the TTC 2017.\n", "abstract": " This paper presents a solution to the State Elimination case at the Transformation Tool Contest (TTC) 2017 using the .NET Modeling Framework (NMF). The goal of this case was to investigate, to which degree model transformation technology may help to make the specification of state elimination more declarative and faster than the reference implementation in JFLAP for smaller models.", "num_citations": "2\n", "authors": ["615"]}
{"title": "Vergil: Guiding Developers Through Performance and Scalability Inferno\n", "abstract": " Software performance problems, such as high response times and low throughput, are visible to end users and can have a significant impact on the user experience. Solving performance problems is an error-prone and time-consuming task that is ideally done with the help of experienced performance experts. They often provide solutions in the form of work activities to developers such as to move functionality from one component to another in order to solve performance problems. Existing approaches are mostly model-based and mainly neglect the code base and measurement-based techniques. They can miss important details from the implementation, configuration and deployment environment of the application. In this paper, we propose a novel approach in the field of software performance engineering with the goal to solve recurring performance and scalability problems based on a systematic process and formalization of expert knowledge. Starting with a set of detected performance problems in the target system, our proposed approach supports developers by identifying, evaluating and ranking of solutions, and by providing a work plan sketching the implementation of the selected solution. In an example with a Java EE application, we show the solution of a software bottleneck through result caching.", "num_citations": "2\n", "authors": ["615"]}
{"title": "Model-driven Development of Service Oriented Architectures\n", "abstract": " The goal of this paper is to summarize the state of the art in the area of model driven development approaches of service oriented architectures (SOA), which represent today\u2019s standard for business integration. This paper outlines possible directions in development of SOA. We address the idea of automated transformation of a definition of a business process represented in Business Process Modeling Notation (BPMN) to an executable process represented in Business Process Execution Language (BPEL). The result of the transformation is in the last step implemented in component framework as a component architecture. The presented concept builds on advantages provided by these technologies and by component-based platforms as deployment environment. The biggest challenge of proposed solution is to transform automatically unstructured graphical languages to structured textual ones, because these sets represent two fundamentally different classes of languages. Existing methods for mapping metamodels of BPMN to BPEL have limitations and do not support all known workflow patterns used for business process design and implementation.", "num_citations": "2\n", "authors": ["615"]}
{"title": "An NMF solution to the Train Benchmark Case at the TTC 2015\n", "abstract": " Model validation in model-driven development gains in importance as the systems grow in size and complexity. In this situation an efficiency of validation execution and an immediate feedback whether a recent manual edit operation broke a validation rule is desirable. To increase efficiency, incremental model validation tries to minimize the proportions of the model that have to be rechecked by reusing previous validation results. As a benchmark for efficiency of validation tools, the Train Benchmark Case at the Transformation Tool Contest 2015 was created. In this paper, we present a solution using NMF Expressions, a tool for incremental evaluation of arbitrary expressions on the .NET platform.", "num_citations": "1\n", "authors": ["615"]}
{"title": "The 2012 \u201cState of the Journal\u201d Report\n", "abstract": " SoSyM continues to experience an increasing number of submissions. In 2012, 308 new manuscripts were submitted, of which 49% were reviewed for regular issues, while the other 51% were submitted for special or theme sections. The average number of days from submission to a final decision (that is, a final accept or reject) was 136 days in 2012. This is 12 days less than the average in 2011. It should be noted that this time includes the time authors spend on making major and subsequent minor revisions (typically 4 to 5 months). The number of months to online publication of an accepted paper has continued to drop as well, and is now between 3 and 4 weeks. We will continue to work on improving the review turnaround time.The impact factor published this year is 1.061. The current acceptance rate is 14% for regular papers and 31% for special or theme section papers. Due to the increase of submissions the\u00a0\u2026", "num_citations": "1\n", "authors": ["615"]}