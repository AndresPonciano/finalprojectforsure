{"title": "Legacy migration to service-oriented computing with mashups\n", "abstract": " Although service-oriented computing holds great promises, it is still not clear when and how the existing systems will exploit this new computational model. The problem is particularly severe for the software having several years of use. This work provides a roadmap for the migration of legacy software to service-oriented computing by means of right levels of abstraction. The key idea is having integration even at the presentation layer, not only at backend layers such as application or data. This requires re-inventing the popular MASHUP technology of Web 2.0 at the enterprise level. Domain- specific-kits and choreography engine concepts that were originally introduced by the software factory automation approach have been reshaped as another enabling technology towards migrating to the service harmonization platform. The paper also exemplifies the proposed approach on a simple case problem.", "num_citations": "51\n", "authors": ["2208"]}
{"title": "A mashup-based strategy for migration to service-oriented computing\n", "abstract": " Service-Oriented Computing holds great promises to realize the vision of on-demand services available anytime and anywhere. It is still not clear, however, when and how the existing systems will benefit from this new wave. The problem is particularly acute for the software embedded in myriad devices. This work charts a roadmap for migration of legacy software to pervasive service-oriented computing. A key idea is to achieve integration even at the presentation layer, not only at backend layers like application or data. This requires re-inventing the popular mashup technology for the enterprise level. Domain-Specific-Kits, which has been originally introduced within the context of software factory automation, has been reshaped as another enabling technology towards migrating to the service harmonization platform.", "num_citations": "44\n", "authors": ["2208"]}
{"title": "Industrializing Software Development: The \u201cFactory Automation\u201d Way\n", "abstract": " Improving the productivity by means of systematic reuse has been a major challenge particularly for the last decade in software industry. Following the individual techniques like Architecture-Based Development, Model-Driven Development and Software Product Lines, Software Factories have eventually come to the stage as an umbrella solution to software productivity problem by assembling the applications with frameworks, patterns, models and tools. While this theoretically seems quite suitable, it still needs practical guidance at certain points such as defining and orchestrating reusable assets for setting up distinct software factories. This paper proposes a methodical way for such difficulties in establishing software factories as the way other manufacturing industries have been doing for several decades, which is known to be \u201cfactory automation\u201d. We articulate the \u201csoftware factory automation\u201d for managing\u00a0\u2026", "num_citations": "22\n", "authors": ["2208"]}
{"title": "Modeling Product Line Software Assets Using Domain-Specific Kits\n", "abstract": " Software Product Line Engineering (SPLE) is a prominent paradigm for the assembly of a family of products using product line core assets. The modeling of software assets that together form the actual products is critical for achieving the strategic benefits of Software Product Lines (SPLs). We propose a feature-based approach to software asset modeling based on abstractions provided by Domain-Specific Kits (DSKs). This approach involves a software Asset Metamodel (AMM) used to derive Asset Modeling Languages (AMLs) that define reusable software assets in domain-specific terms. The approach also prescribes a roadmap for modeling these software assets in conjunction with the product line reference architecture. Asset capabilities can be modeled using feature diagrams as the external views of the software assets. Internal views can be expressed in terms of Domain-Specific Artifacts (DSAs) with\u00a0\u2026", "num_citations": "20\n", "authors": ["2208"]}
{"title": "Business rules segregation for dynamic process management with an aspect-oriented framework\n", "abstract": " Almost at every tier of software architecture, business rules crosscut several parts of process management such as workflows, task assignments, and business transactions. Managing business rules on its own hence improves the dynamism of processes in the sense of modeling, implementing, executing, and even maintenance. Moreover, seamless integration with the rest of the picture may offer further dynamism, but this requires smart and reasonably reflective application frameworks for industrial systems. Here, aspect orientation comes to rescue since it mainly aims the separation of crosscutting concerns such as business rules. This paper presents a practical Aspect-Oriented Framework for rule-based business process management where all aspects, facts, rules and rule-sets can be defined and managed dynamically by means of a GUI console. Moreover, this lightweight framework has been\u00a0\u2026", "num_citations": "20\n", "authors": ["2208"]}
{"title": "Integrating a software product line with rule-based business process modeling\n", "abstract": " This paper proposes an approach to integrate a software product line (Aurora) with reflective rule-based business process modeling (RUMBA). Aurora is a service-oriented application development and execution platform supporting today\u2019s well known \u201cRich Internet Applications\u201d and \u201cEnterprise Internet Applications\u201d concepts. On the other hand, RUMBA is a rule-based model in which rules and rule-sets can be expressed in terms of dynamic aspects and delegated facts. The proposed approach mainly addresses \u201cReflective Aspect\u201d and \u201cReflective Rule\u201d patterns for the seamless integration of Aurora and RUMBA. Both architectural patterns introduce a \u201cgenerative\u201d approach for developing the basic aspects, dynamic rules and rule-sets so that all can be implemented in the Adaptive Object Model (AOM). The proposed model will be explained in detail and exemplified with existing projects using both Aurora\u00a0\u2026", "num_citations": "17\n", "authors": ["2208"]}
{"title": "Aurora software product line\n", "abstract": " In this paper, an in-house Software Product Line (SPL), so-called Aurora, is introduced as a platform independent multi-tier Web development environment including the core infrastructure based on Rich Internet Application (RIA) and Enterprise Internet Application (EIA) models. Besides Aurora provides a complete roadmap to enterprise scale Web-based applications, it also embodies the SPL within the context of software process management methodology, WYSIWYG (What You See Is What You Get) design and development environments, software lifecycle management techniques and quality management tools. Essential SPL activities\u2013management, core asset development and product development\u2013have been also discussed in addition to the brief descriptions of some real life cases implemented on Aurora.", "num_citations": "16\n", "authors": ["2208"]}
{"title": "An architectural modeling approach with symmetric alignment of multiple concern spaces\n", "abstract": " Architectural modeling identifies several concerns in problem domain and associates them with design decisions in solution domain. There is, however, no commonsense on how to localize problem domain concerns and relate them to the solution domain. This paper proposes a modeling approach to address the architectural concerns in multiple concern spaces both for problem and solution domains, and align them \"symmetrically\". This approach identifies the problem domain in multiple concern spaces by correlating the \"architectural aspects\" and \"quality attributes\". The solution domain is likewise identified in other multiple concern spaces by correlating the \"multi-views\" and \"multi-tiers\" of architectures. Symmetric alignment is used here for the correlation between separate concern spaces instead of mapping individual concerns from problem to solution domain. The paper claims that this alignment helps\u00a0\u2026", "num_citations": "15\n", "authors": ["2208"]}
{"title": "METU Object-Oriented DBMS Kernel\n", "abstract": " This paper describes the design and implementation of a kernel for an OODBMS, namely the METU Object-Oriented DBMS (MOOD). MOOD is developed on the Exodus Storage Manager (ESM). MOOD kernel provides the optimization and interpretation of SQL statements, dynamic linking of functions, and catalog management. SQL statements are interpreted whereas functions (which have been previously compiled with C++) within SQL statements are dynamically linked and executed. Thus the interpretation of functions are avoided increasing the efficiency of the system. A query optimizer is implemented by using the Volcano Query Optimizer Generator. A graphical user interface, namely MoodView, is developed using Motif. MoodView displays both the schema information and the query results graphically. Additionally it is possible to update the database schema and to traverse the references in query\u00a0\u2026", "num_citations": "14\n", "authors": ["2208"]}
{"title": "Managing large scale reuse across multiple software product lines\n", "abstract": " For large scale applications in today\u2019s competitive business environment, partial reuse at class, library, component or module level is still inadequate. Software product lines provide systematic reuse only within a product family. Better gains in productivity and high confidentiality can be achieved by large scale reuse across multiple product lines. This paper puts a methodical way, articulated as \u201cSoftware Factory Automation\u201d, which can manage reusable assets across distinct software product lines based on \u201cdomain specific kits\u201d and \u201csoftware asset meta model\u201d. The approach is validated by analyzing the software asset reuse in two different product lines implemented in banking domain and practically used in real life. The results show that high level of reuse within and across multiple product lines can be achieved with the charted roadmap.", "num_citations": "11\n", "authors": ["2208"]}
{"title": "A Domain Specific Strategy for Complex Dynamic Processes\n", "abstract": " This chapter identifies the issues that might create orthogonal complexities for process dynamism, and decouples the components implementing them in a \u201cdomain specific\u201d way. Authors believe that traditional process management techniques for modeling and executing the processes still fall short to improve the dynamism of an enterprise. Some of the reasons are: using too \u201cgeneric\u201d techniques and tools for process management that are not scalable enough for typical business cases, having lack of architectural coverage to manage the tradeoffs between dynamism and other business quality issues, insufficient support for integrating legacy business processes, and unbalanced guidance between \u201cprimary\u201d and \u201csupportive\u201d processes. In order to improve the business agility particularly with dynamic processes, effective abstraction and composition techniques are needed for the systematic design of primary and\u00a0\u2026", "num_citations": "5\n", "authors": ["2208"]}
{"title": "Feature-based software asset modeling with domain specific kits\n", "abstract": " CiteSeerX \u2014 FEATURE-BASED SOFTWARE ASSET MODELING WITH DOMAIN SPECIFIC KITS Documents Authors Tables Log in Sign up MetaCart DMCA Donate CiteSeerX logo Documents: Advanced Search Include Citations Authors: Advanced Search Include Citations Tables: DMCA FEATURE-BASED SOFTWARE ASSET MODELING WITH DOMAIN SPECIFIC KITS (2007) Cached Download as a PDF Download Links [etd.lib.metu.edu.tr] Save to List Add to Collection Correct Errors Monitor Changes by Nesip Ilker Altinas Summary Citations Active Bibliography Co-citation Clustered Documents Version History Share Facebook Twitter Reddit Bibsonomy OpenURL Abstract Keyphrases academic rule ethical conduct Powered by: Apache Solr About CiteSeerX Submit and Index Documents Privacy Policy Help Data Source Contact Us Developed at and hosted by The College of Information Sciences and \u2026", "num_citations": "5\n", "authors": ["2208"]}
{"title": "OCTOPODA: Building Financial Gateways Family System Using Domain Specific Kits\n", "abstract": " Financial institutions have been progressively challenged by being linked to a network of various internal and external systems through different and complex protocols. The way to manage this challenge is exploiting application-specific gateways known as financial gateways. However, the complexities of switch protocols as well as the variety of internal and external systems make the design of financial gateways quite complicated. This paper briefly summarizes the challenges of building family of financial gateway systems and introduces a systematic approach to design and implement them with \"domain specific kit\" abstraction. This abstraction can separate system design concerns properly, isolate them in discrete building blocks, and finally compose them by means of a structured choreography model. The approach has been implemented within the context of OCTOPODA project and experimented in real life\u00a0\u2026", "num_citations": "1\n", "authors": ["2208"]}