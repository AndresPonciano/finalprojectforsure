{"title": "A Quantitative Study on Characteristics and Effect of Batch Refactoring on Code Smells\n", "abstract": " Background: Code refactoring aims to improve code structures via code transformations. A single transformation rarely suffices to fully remove code smells that reveal poor code structures. Most transformations are applied in batches, i.e. sets of interrelated transformations, rather than in isolation. Nevertheless, empirical knowledge on batch application, or batch refactoring, is scarce. Such scarceness helps little to improve current refactoring practices. Aims: We analyzed 57 open and closed software projects. We aimed to understand batch application from two perspectives: characteristics that typically constitute a batch (e.g., the variety of transformation types employed), and the batch effect on smells. Method: We analyzed 19 smell types and 13 transformation types. We identified 4,607 batches, each applied by the same developer on the same code element (method or class); we expected to have batches whose\u00a0\u2026", "num_citations": "25\n", "authors": ["972"]}
{"title": "Characterizing and identifying composite refactorings: Concepts, heuristics and patterns\n", "abstract": " Refactoring consists of a transformation applied to improve the program internal structure, for instance, by contributing to remove code smells. Developers often apply multiple interrelated refactorings called composite refactoring. Even though composite refactoring is a common practice, an investigation from different points of view on how composite refactoring manifests in practice is missing. Previous empirical studies also neglect how different kinds of composite refactorings affect the removal, prevalence or introduction of smells. To address these matters, we provide a conceptual framework and two heuristics to respectively characterize and identify composite refactorings within and across commits. Then, we mined the commit history of 48 GitHub software projects. We identified and analyzed 24,911 composite refactorings involving 104,505 single refactorings. Amongst several findings, we observed that most\u00a0\u2026", "num_citations": "13\n", "authors": ["972"]}
{"title": "On the customization of batch refactoring\n", "abstract": " Refactorings are program transformations to improve code structure quality. Developers often apply these transformations in a batch, i.e., transformations in a sequence on a certain program location in order to achieve a specific goal. Either individual or batch refactorings often need to be customized to a particular program context. Otherwise, the developer may not be able to achieve his goal. Existing tools provide limited support for refactoring customization. IDE features do not allow developers to properly create their own custom refactoring. As a consequence, developers often feel reluctant to use these tools, and end up applying their refactorings manually. This position paper proposes an approach for developers to customize program transformations for their refactorings. The approach allows a developer to: (i) compose an individual or batch refactoring according to his context's needs, and (ii) reuse the custom\u00a0\u2026", "num_citations": "7\n", "authors": ["972"]}
{"title": "Understanding Characteristics and Structural Effects of Batch Refactorings in Practice\n", "abstract": " Gomes Bibiano, Ana Carla; Garcia, Alessandro (Advisor). Understanding Characteristics and Structural Effects of BatchRefactorings in Practice. Rio de Janeiro, 2019. 82p. Disserta\u00e7\u00e3o de mestrado\u2013Departamento de Inform\u00e1tica, Pontif\u00edcia Universidade Cat\u00f3lica do Rio de Janeiro. Code refactoring means applying transformations on the code structure of a software project. Refactoring usually intends to remove poor code structures that harm the software maintenance. Each single transformation rarely suffices to fully remove poor code structures, even the simplest ones. For instance, shortening a long method often requires many method extractions. Up to 60% of the refactorings in software projects are constituted of a set of interrelated transformations, the so-called batches, rather than single transformations applied in isolation. Although batches are frequent in practice, the knowledge of batch characteristics is fragmented across studies. What is the usual size of batches? How do transformations vary within a batch? There is no summary that helps to address these questions. More critically, there is little empirical evidence of the batch effect on maintenance. Are batches more likely to introduce or remove poor code structures, especially those spotted by code smells? The current answer to questions like this is insufficient to support the batch application in practice. This Master\u2019s dissertation presents two complementary empirical studies that address both aforementioned literature gaps. The dissertation starts with a literature review of batch refactoring with 29 studies. We identified seven batch characteristics such as the scope in which batches are\u00a0\u2026", "num_citations": "1\n", "authors": ["972"]}