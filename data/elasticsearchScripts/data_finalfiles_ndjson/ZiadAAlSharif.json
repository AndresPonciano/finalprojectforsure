{"title": "A new collaborative filtering recommendation algorithm based on dimensionality reduction and clustering techniques\n", "abstract": " With the advent and explosive growth of the Web over the past decade, recommender systems have become at the heart of the business strategies of e-commerce and Internet-based companies such as Google, YouTube, Facebook, Netflix, LinkedIn, Amazon, etc. Hence, the collaborative filtering recommendation algorithms are highly valuable and play a vital role at the success of such businesses in reaching out to new users and promoting their services and products. With the aim of improving the recommendation performance of such an algorithm, this paper proposes a new collaborative filtering recommendation algorithm based on dimensionality reduction and clustering techniques. The \u00bf-means algorithm and Singular Value Decomposition (SVD) are both used to cluster similar users and reduce the dimensionality. It proposes and evaluates an effective two stage recommender system that can generate\u00a0\u2026", "num_citations": "58\n", "authors": ["1855"]}
{"title": "Live forensics of software attacks on cyber physical systems\n", "abstract": " Increasingly, Cyber\u2013physical Systems are expected to operate in different environments and interconnect with a diverse set of systems, equipment, and networks. This openness to heterogeneity, diversity, and complexity introduces a new level of vulnerabilities, which adds to the consistent need for security including the digital forensics capabilities. Digital investigators utilize the information on the attacker\u2019s computer to find clues that may help in proving a case. One aspect is the digital evidence that can be extracted from the main memory (RAM), which includes live information about running programs. A program\u2019s states, represented by variables\u2019 values, vary in their scope and duration. This paper explores RAM artifacts of Java programs. Because JVMs can run on various platforms, we compare the same program on three different implementations of JVM from forensic perspectives. Our investigation model\u00a0\u2026", "num_citations": "30\n", "authors": ["1855"]}
{"title": "Integrating collaborative program development and debugging within a virtual environment\n", "abstract": " A collaborative integrated development environment enables developers to share programming-related tasks. This paper presents the design and implementation of a collaborative IDE named ICI (Idaho Collaborative IDE). ICI enables developers in different locations to collaborate on a variety of software development activities in real-time. It supports software development in C, C++, Java, and Unicon. ICI combines a synchronous collaborative program editor and a real-time collaborative debugger within a 3D multi-user virtual environment. ICI reduces cognitive context switches between tools inside the IDE and between IDE tasks and virtual environment activities, allowing developers to share, in real-time, the process of editing, compiling, running, and debugging of their software projects.", "num_citations": "22\n", "authors": ["1855"]}
{"title": "ACCRS: autonomic based cloud computing resource scaling\n", "abstract": " A cloud computing model gives cloud service providers the ability to retain multiple workloads on a single physical system. However, efficient resource provisioning and possible system fault management in the cloud can be a challenge. Early fault detection can provide room to recover from potential faults before impacting QoS. Current static techniques of fault management in computing systems are not satisfactory enough to safeguard the QoS requested by cloud users. Thus, new smart techniques are needed. This paper presents the ACCRS framework for cloud computing infrastructures to advance system\u2019s utilization level, reduce cost and power consumption and fulfil SLAs. The ACCRS framework employs Autonomic Computing basic components which includes state monitoring, planning, decision making, fault predication, detection, and root cause analysis for recovery actions to improve system\u2019s\u00a0\u2026", "num_citations": "21\n", "authors": ["1855"]}
{"title": "Utilizing data lifetime of tcp buffers in digital forensics: Empirical study\n", "abstract": " Digital Forensics (DF) is vital for providing digital evidence of computer crimes and security violations. As the Internet community grows in size, many individuals are actively and continually committing cyber crimes such as stealing private information, credit card numbers, copyrighted material, and even threatening innocent people. Locating criminals and proving them guilty might involve tracing their IP addresses, identifying their physical locations, and investigating their machines to look for evidence. Inspecting hard drives and solid state disks has been proven useful in DF because they can keep information permanently. Much of information, though, is not stored on permanent storage devices instead are temporarily kept in the physical memory (or RAM). The RAM, though volatile, can also be inspected for evidence. In this paper, we present a study that helps investigators make use of the valuable, stealthy TCP\u00a0\u2026", "num_citations": "21\n", "authors": ["1855"]}
{"title": "Investigating the Detection Capabilities of Antiviruses under Concurrent Attacks\n", "abstract": " Cyber security is a major concern of computing systems. Different security controls are developed to mitigate or prevent cyber attacks. Such controls include cryptography, firewalls, intrusion detection systems, access controls, and strong authentication. These controls mainly protect the secure-system properties: confidentiality, integrity, and availability. The Antivirus software (AV) is considered the last line of defense against variety of security threats. The AV maintains a database of virus signatures against which it checks data. Had a match occurred, the AV would have reacted to the threat. Given the importance of the AV, different attacking techniques have been developed to evade the AV detection and render it useless. In this paper, we want to check how the AV behaves under pressure. We make the AV extremely busy in order to bypass its detection. We test several commercial AVs against three\u00a0\u2026", "num_citations": "19\n", "authors": ["1855"]}
{"title": "Ram forensics against cyber crimes involving files\n", "abstract": " Cyber crimes are explosively increasing as a result of the wide deployment of the Internet. Breaking into others\u2019 machines to steal their valuable information (such as credit card numbers) or execute unwanted code, threatening innocent people, pirating copyrighted software, and distributing malicious software are examples of such crimes. Digital Forensics (DF) techniques are utilized to accuse cyber criminals and prove them guilty. This paper observes that many different violations explicitly or implicitly involve files. A file is a logical entity that might occupy different physical locations in the system. Explicit actions that involve files include directly downloading them from the Internet resources or copying them from external storage devices. On the other hand, viewing some entities (such as pictures, audios, videos, etc.) in web browsers might implicitly involve files. Using peer-to-peer networks (eg, Bit-Torrent), however, requires partitioning a file into different pieces and distributing them among the participating peers. The requesting peer can download the pieces from the other peers. In this case, the involved file is physically partitioned and downloaded from different locations. Finding files in criminals\u2019 machines can be used as an evidence against them. This paper shows that, in many cases, violators\u2019 actions can be thought of as if they are involving files. We design different experiments and examine the state of the physical memory (RAM) after an activity that explicitly or implicitly involves a file. We show that all or some portions of the files can be found in the RAM memory. This research considers the way the Operating System (OS) manages the\u00a0\u2026", "num_citations": "13\n", "authors": ["1855"]}
{"title": "The Use of Machine Learning Techniques to Advance the Detection and Classification of Unknown Malware\n", "abstract": " Relying on technology has grown significantly over the last decade. Subsequently, this motivates attacker to develop new malware that can perform their malicious act, which may cause destruction or gather intelligence and critical information. Thus, malware detection is a crucial factor in the security of systems; including smart and portable devices. Often, an automated malware detection system is one of the first steps that aim to recognize abnormal activities and identify malicious programs. This detection is needed to protect devices from hackers and prevent the information from getting compromised. However, currently applied standard methods, such as signature-based and dynamic-based, do not provide reliable detection of unknown or unaddressed attacks; mainly for malware that can change its forms such as the polymorphic viruses. As a result, the demand for a new detection technique emerges. The\u00a0\u2026", "num_citations": "12\n", "authors": ["1855"]}
{"title": "Towards the memory forensics of ms word documents\n", "abstract": " Memory forensics plays a vital role in digital forensics. It provides important information about user\u2019s activities on a digital device. Various techniques can be used to analyze the RAM and locate evidences in support for legal procedures against digital perpetrators in the court of law. This paper investigates digital evidences in relation to MS Word documents. Our approach utilizes the XML representation used internally by MS Office. Different documents are investigated. A memory dump is created while each of these documents is being viewed or edited and after the document is closed. Used documents are decompressed and the resulting folders and XML files are analyzed. Various unique parts of these extracted files are successfully located in the consequent RAM dumps. Results show that several portions of the MS Word document formats and textual data can be successfully located in RAM and these\u00a0\u2026", "num_citations": "11\n", "authors": ["1855"]}
{"title": "RecDNNing: a recommender system using deep neural network with user and item embeddings\n", "abstract": " The success of applying deep learning to many domains has gained strong interest in developing new revolutionary recommender systems. However, there are little works studying these systems that employ deep learning; additionally, there is no study showing how to combine the users and items embedding with deep learning to enhance the effectiveness of the recommender systems. Therefore, this paper proposes a novel approach called RecDNNing with a combination of embedded users and items combined with deep neural network. The proposed recommendation approach consists of two phases. In the first phase, we create a dens numeric representation for each user and item, called user embedding and item embedding, respectively. Following that, the items and users embedding are averaged and then concatenated before being fed into the deep neural network. In the second phase, we use the\u00a0\u2026", "num_citations": "10\n", "authors": ["1855"]}
{"title": "An agent-oriented source-level debugger on top of a monitoring framework\n", "abstract": " Standard debuggers are usually limited in the amount of analysis that they perform in order to assist with debugging. This paper presents UDB, an agent-oriented source-level debugger for the Unicon programming language with a novel architecture and capabilities. UDB combines classical debugging techniques such as those found in GDB with a growing set of extension agents. The paper tests three hypotheses: 1) a source-level debugger built on top of a monitoring framework can surpass ordinary debuggers with more debugging capabilities, 2) a debugger based on a high-level monitoring framework allows easier and more efficient agent-based extension, and 3) an agent-oriented debugger is easier to extend on the fly with new agents that utilize automatic debugging and dynamic analysis techniques.", "num_citations": "9\n", "authors": ["1855"]}
{"title": "An extensible source-level debugger\n", "abstract": " Standard debuggers are limited in the amount of analysis that they perform in order to assist with debugging. This paper presents UDB, a source-level debugger for the Unicon programming language with a novel architecture and capabilities. UDB combines classical debugging techniques such as those found in GDB with a growing set of automatic debugging extensions. UDB tests the hypotheses that a debugger built on top of a high-level framework enables better debugging capabilities as well as easier and more efficient extension than ordinary debuggers.", "num_citations": "8\n", "authors": ["1855"]}
{"title": "Programming language support for collaborative virtual environments\n", "abstract": " Collaborative virtual environments (CVEs) are a very popular form of entertainment. The high cost of developing CVEs has limited their use in small scale or experimental domains. The 3D graphics, network communications, and audio features of CVEs pose significant challenges for developers. This paper describes very high-level language support for 3D graphics that facilitate rapid development of experimental CVEs.", "num_citations": "8\n", "authors": ["1855"]}
{"title": "Network Reconnaissance Investigation: A Memory Forensic Approach\n", "abstract": " Perpetrators utilize different network reconnaissance techniques in order to discover vulnerabilities and conduct their attacks. Port scanning can be leveraged to conclude open ports, available services, and even running operating systems along with their versions. Even though these techniques are effective, their aggressiveness for information gain could leave an apparent sign of attack, which can be observed by the variety of security controls deployed at the network perimeter of an organization. However, not all such attacks can be stopped nor the corresponding security controls can defend against insiders. In this paper, we tackle the problem of reconnaissance detection using a different approach. We utilize the rich information that is kept in memory (or RAM). We observe that packets sent or received stay in memory for a while. Our results show that inspecting memory for attack signs is beneficial. Furthermore\u00a0\u2026", "num_citations": "7\n", "authors": ["1855"]}
{"title": "A scalable multiple pairwise protein sequence alignment acceleration using hybrid CPU\u2013GPU approach\n", "abstract": " Bioinformatics is an interdisciplinary field that applies trending techniques in information technology, mathematics, and statistics in studying large biological data. Bioinformatics involves several computational techniques such as sequence and structural alignment, data mining, macromolecular geometry, prediction of protein structure and gene finding. Protein structure and sequence analysis are vital to the understanding of cellular processes. Understanding cellular processes contributes to the development of drugs for metabolic pathways. Protein sequence alignment is concerned with identifying the similarities and the relationships among different protein structures. In this paper, we target two well-known protein sequence alignment algorithms, the Needleman\u2013Wunsch and the Smith\u2013Waterman algorithms. These two algorithms are computationally expensive which hinders their applicability for large\u00a0\u2026", "num_citations": "6\n", "authors": ["1855"]}
{"title": "Towards the memory forensics of OOP execution behavior\n", "abstract": " Perpetrators might employ computer programs (software) to perform their offenses or to cover their wrongdoings. Program's source code, in particular variables and their values diverge in their scope and duration in RAM. Object oriented languages encapsulate variables and operations in classes and allow for objects to be instantiated, which simplify software design but add to the complexity of its execution behavior and its data and control flow. This paper explores execution behaviors and information left by program execution in support for legal actions against perpetrators in the court of law. Our investigation model assumes no information is provided by the operating system; only raw RAM dumps. Our methodology employs information from the presumed program source code and its object oriented design. It explores various execution states and scenarios to uncover the evidence of potential software usage\u00a0\u2026", "num_citations": "6\n", "authors": ["1855"]}
{"title": "Collaborative education in a virtual learning environment\n", "abstract": " For the last few decades, there was tremendous interest in harnessing 3D virtual environments for education and training. Multi-user game-like environments make use of non-player characters and quest activities in tutoring and training. This approach incorporates successful active learning and incremental progress. This article presents issues encountered while adapting the multi-user online game genre for educational virtual environments. In this endeavour, non-player characters play a central role in organising and delivering educational content. Educational virtual environments call for additional kinds of extension beyond generic user content creation as delivered in some virtual worlds like Second Life. Support for these environments will emphasise the creation of new activities. A set of libraries and techniques named portable non-player character tutors and quests reduces the effort needed to develop and\u00a0\u2026", "num_citations": "6\n", "authors": ["1855"]}
{"title": "Towards a generic approach for memory forensics\n", "abstract": " The era of information technology has, unfortunately, contributed to the tremendous rise in the number of criminal activities. However, digital artifacts can be utilized in convicting cybercriminal and exposing their activities. The digital forensics science concerns about all aspects related to cybercrimes. It seeks digital evidence by following standard methodologies to be admitted in court rooms. This paper concerns about memory forensics for the unique artifacts it holds. Memory contains information about the current state of systems and applications. Moreover, an application's data explains how a criminal has been interacting the application just before the memory is acquired. Memory forensics at the application level is currently random and cumbersome. Targeting specific applications is what forensic researchers and practitioner are currently striving to provide. This paper suggests a general solution to investigate\u00a0\u2026", "num_citations": "5\n", "authors": ["1855"]}
{"title": "Virtualization vs. containerization: Towards a multithreaded performance evaluation approach\n", "abstract": " Increasingly, hardware visualizations are becoming the norm. This opened the door for new possibilities but placed a new set of challenges that are to be faced by software developers, mainly when it comes to developing different applications in different programming languages and deploying them on various environments; often virtually hosted environments. The performance expectations and requirements might be easily affected by the settings of these virtual machines. This paper aims at evaluating the performance of these virtual environments and measure their impacts on the performance of multithreaded applications. In particular, we evaluate the performance of multithreaded applications and assess how it is influenced by the various virtualization technologies. A multithreaded application is developed in both C and Java and the performance is measured on different platforms; each of which is supported\u00a0\u2026", "num_citations": "5\n", "authors": ["1855"]}
{"title": "The Effects of Platforms and Languages on the Memory Footprint of the Executable Program: A Memory Forensic Approach\n", "abstract": " Identifying the software used in a cybercrime can play a key role in establishing the evidence against the perpetrator in the court of law. This can be achieved by various means, one of which is to utilize the RAM contents. RAM comprises vital information about the current state of a system, including its running processes. Accordingly, the memory footprint of a process can be used as evidence about its usage. However, this evidence can be influenced by several factors. This paper evaluates three of these factors. First, it evaluates how the used programming language affects the evidence. Second, it evaluates how the used platform affects the evidence. Finally, it evaluates how the search for this evidence is influenced by the implicitly used encoding scheme. Our results should assist the investigator in its quest to identify the best amount of evidences about the used software based on its execution logic, host platform, language used, and the encoding of its string values. Results show that the amount of digital evidence is highly affected by these factors. For instance, the memory footprint of a Java based software is often more traceable than the footprints of languages such as C++ and C#. Moreover, the memory footprint of a C# program is more visible on Linux than it is on Windows or Mac OS. Hence, often software related values are successfully identified in RAM memory dumps even after the program is stopped.", "num_citations": "5\n", "authors": ["1855"]}
{"title": "Utilizing Program's Execution Data for Digital Forensics\n", "abstract": " Criminals use computers and software to perform their crimes or to cover their misconducts. Main memory or RAM encompasses vibrant information about a system including its active processes. Program\u2019s variables data and value vary in their scope and duration in RAM. This paper exploits program\u2019s execution state and its dataflow to obtain evidence of the software usage. It extracts information left by program execution in support for legal actions against perpetrators. Our investigation model assumes no information is provided by the operating system; only raw RAM dumps. Our methodology employs information from the target program source code. This paper targets C programs that are used on Unix based systems. Several experiments are designed to show that scope and storage information of various source code variables can be used to identify program\u2019s activities. Results show that investigators have good chances locating various variables\u2019 values even after the process is stopped.", "num_citations": "5\n", "authors": ["1855"]}
{"title": "Debugging with dynamic temporal assertions\n", "abstract": " Bugs vary in their root causes and their revealed behaviors, some may cause a crash or a core dump, while others may cause an incorrect or missing output or an unexpected behavior. Moreover, most bugs are revealed long after their actual cause. A variable might be assigned early in the execution, and that value may cause a bug far from that last assigned place. This often requires users to manually track heuristic information over different execution states. This information may include a trace of specific variables' values and their assigned locations, functions and their returned values, and detailed execution paths. This paper introduces Dynamic Temporal Assertions (DTA) into the conventional source-level debugging session. It extends a typical gdb like source level debugger named UDB with on-the-fly temporal assertions. Each assertion is capable of: 1) validating a sequence of execution states, named\u00a0\u2026", "num_citations": "5\n", "authors": ["1855"]}
{"title": "Language Support for Event-based Debugging.\n", "abstract": " An event-based debugging framework provides high level facilities for debuggers that observe, monitor, control, and change the state and behavior of a buggy program. This paper introduces a set of additions to the Unicon programming language that enables debuggers to be written at a high level of abstraction. The extensions provide in-process debugging support with simple communication and no intrusion on the buggy program space. These language extensions have been tested and refined within a multi-agent debugging architecture called IDEA, and an extensible source-level debugger called UDB.", "num_citations": "5\n", "authors": ["1855"]}
{"title": "CARVING AND CLUSTERING FILES IN RAM FOR MEMORY FORENSICS\n", "abstract": " Memory contains vital information about the current state of a system such as processes, network connections and opened files. The contents of a file can be reconstructed from memory either by following the Operating System\u2019s data structures (which might not be always available) or by carving data based on the file\u2019s internal structure. Unfortunately, the problem gets more complicated when carving several files with the same internal structure that happen to coexist in memory. This paper carves chunks of a certain file type from memory and employs clustering techniques to distribute these chunks into their corresponding files. As a running example, we carve and cluster different PDF files. The paper employs the wording similarities among related portions and shows that the Hierarchical clustering algorithm facilitates grouping of the recovered text pieces within an adequate accuracy.", "num_citations": "4\n", "authors": ["1855"]}
{"title": "Autonomic Cloud Computing Resource Scaling\n", "abstract": " Cloud computing provides computing services on demand with an acceptable QoS. These services are provided and maintained by the Cloud Service Provider (CSP). Therefore, a Cloud User (CU) can focus more on business advancement and less on system maintenance, resource provisioning and service continuity as these became the duties of CSPs. A Cloud computing model gives CSPs the ability to retain multiple workloads on a single physical system. However, efficient resource provisioning and possible system fault management in the cloud can be a challenge to CSPs, which are bounded by SLAs and a very competitive market. Early fault detection provides room to recover from potential faults before impacting QoS. Moreover, current static techniques of fault management in computing systems are not satisfactory to safeguard the QoS required by CUs. Thus, new smart techniques are needed. This paper presents the ACCRS framework for cloud computing infrastructures to advance system\u2019s utilization level, reduce cost and power consumption and fulfil SLAs. The ACCRS framework employs state monitoring, planning, decision making, fault predication, fault detection, root cause analysis, and recovery actions to improve system\u2019s reliability, availability, and utilization level by scaling resources in response to changes in the cloud system state.", "num_citations": "4\n", "authors": ["1855"]}
{"title": "An Extensible Debugging Architecture Based on a Hybrid Debugging Framework\n", "abstract": " The cost of writing debuggers is very high. Most debuggers are written employing low level operating system and hardware specific code, which is hard to port to new platforms or architectures and to extend with new debugging techniques. Moreover, current debuggers are usually limited in the amount of analysis that they perform and the level of detail that they provide in order to assist with debugging. Most debuggers are well suited for a specific class of bugs. Different bugs call for different debugging techniques, so experimentation is needed in order to develop the features that will someday be widely adopted in debuggers. This dissertation contributes three primary results.First, it introduces an event-driven debugging framework named AlamoDE (Alamo\u2014Debug Enabled). The role of this framework is analogous to an abstraction layer upon which to build debuggers. AlamoDE 1) provides in-process debugging support with simple communication and no intrusion on the buggy program space, 2) enables debugging tools to be written at a high level of abstraction, and 3) facilitates developers of experimental automatic debugging features in a very high level language. AlamoDE supports construction of a variety of user-defined debugging tools that range from classical source-level debuggers to automated and dynamic analysis techniques.", "num_citations": "4\n", "authors": ["1855"]}
{"title": "A Post-Mortem Forensic Approach for the Kik Messenger on Android\n", "abstract": " Mobile devices have become an essential part of our life. These devices are a platform for social media and chat apps that are often designed to assist us retain our connection with old and new online friends. However, regardless of their valuable social influence, these apps are a medium in which criminals and perpetrators can exploit to attack innocent people. Nevertheless, these apps can provide a wealth of digital artifacts for law enforcement agencies. Often, well-established digital forensic techniques are used to determine criminal cases in the court of law. Therefore, this paper presents a post-mortem memory forensics and digital investigations for the popular instant messaging application named Kik Messenger. Kik is designed to assist users to connect quickly and easily with the world around them. Statistics such as the number of installations and active users underlines its importance. Moreover, the\u00a0\u2026", "num_citations": "3\n", "authors": ["1855"]}
{"title": "A Multi-agent Debugging Extension Architecture\n", "abstract": " The Idaho Debugging Extension Architecture (IDEA) enables dynamic analysis agents, such as automatic debugging and visualization agents, to be loaded on the fly in a source-level debugger. IDEA is an event-driven debugging architecture that provides a simple interface to load API-compliant external dynamic analysis agents during a debugging session. Multiple standalone agents can be loaded and managed under the control of the source-level debugger. Successful agents can be migrated into the source code of the debugger core as permanent features with higher performance.", "num_citations": "3\n", "authors": ["1855"]}
{"title": "An Effective Model-Based Trust Collaborative Filtering for Explainable Recommendations\n", "abstract": " Nowadays, many companies through the world wide web like YouTube, Netflix, Aliexpress and Amazon, provide personalized services as recommendations. Recommender systems use the related information about products or services to suggest the most relevant of them to particular users. The recommendation is usually made based on the prediction of the users' constraints and interests. Despite that the most of the existing recommender systems give accurate recommendation results, they do not provide explainable recommendation support. Therefore, in this paper we propose a new effective model-based trust collaborative filtering for explainable recommendations that aims not only to improve the quality of recommendation but also to provide an efficient support for explainable recommendations based on trustworthiness modeling. Our solution can both ensure how the item is recommended and why it is\u00a0\u2026", "num_citations": "2\n", "authors": ["1855"]}
{"title": "UDB: An Agent-Oriented Source-Level Debugger\n", "abstract": " Standard debuggers are usually limited in the amount of analysis that they perform in order to assist with debugging. This paper presents UDB, an agent-oriented source-level debugger for the Unicon programming language with a novel architecture and capabilities. UDB combines classical debugging techniques such as those found in GDB with a growing set of extension agents. UDB demonstrates the feasibility of a source-level debugger built on top of a very high level event-based monitoring framework. The debugger is easily extended with new debugging agents that can employ a wide range of automatic debugging and dynamic analysis techniques.", "num_citations": "2\n", "authors": ["1855"]}
{"title": "Adding high level VoIP facilities to the Unicon language\n", "abstract": " Many programming languages have built-in functions for socket programming and data communications. These days, the Internet is widely used for voice communications that employ a voice over Internet protocol (VoIP). A programming language with built-in VoIP functions can accelerate the development of voice enabled applications. Most programmers are familiar with manipulating files; making VoIP connections as simple to create and use as local files simplifies VoIP programming and its applications. This paper describes augmenting the Unicon programming language with very high level VoIP facilities", "num_citations": "2\n", "authors": ["1855"]}
{"title": "Measuring the Impacts of Virtualization on the Performance of Thread-Based Applications\n", "abstract": " The rapid advancements in computer hardware and software facilitated the ability for conventional users and developers to use various virtualization techniques on their common personal computers. For example, users and developers are often using virtualization technologies such as VirtualBox, VMware, Docker, and WSL. These technologies enabled the ability to develop, test, and deploy software across various platforms and computing environments, each of which ensures isolation and security, but may often sacrifice performance due to the extra layer of communication. Thus, this paper presents a performance-based evaluation for thread-based applications that are hosted on different virtualization frameworks. Therefore, it evaluates the effects of virtualization techniques on sequential and multithreaded applications. The performance of the same application is measured on different environments, some of\u00a0\u2026", "num_citations": "1\n", "authors": ["1855"]}
{"title": "Utilizing Debugging Information of Applications in Memory Forensics.\n", "abstract": " The rapid development in the digital world has contributed to the dramatic increase in the number of cybercrimes. An application\u2019s volatile data that is kept in memory (RAM) could give clues on how a criminal has been using the application up to acquisition time. Unfortunately, application-level memory forensics has been conducted in an ad hoc manner because a forensic investigator has to come up with a new technique for a new application. This process has become problematic and exhausting. This paper proposes a general solution to investigate any application in memory. We heavily utilize applications\u2019 debugging information generated by compilers in our solution. Furthermore, we extend Volatility [Walters, 2007], an open-source memory forensic framework, by developing and integrating a plugin to investigate applications in memory. We design several experiments to evaluate the effectiveness of our\u00a0\u2026", "num_citations": "1\n", "authors": ["1855"]}