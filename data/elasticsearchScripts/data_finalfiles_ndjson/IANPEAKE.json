{"title": "Domain-based change propagation analysis: An enterprise system case study\n", "abstract": " Change propagation has mainly been estimated by maintenance history or source code analysis. However, sometimes history and code are inaccessible, or impractical to analyse, such as for heterogeneous sources. Previously we hypothesised that change propagation from modifying domain level components may be predicted purely from information available to domain users. We proposed domain-based change propagation analysis, enabling analysts and domain experts to predict conceptual coupling independent of implementation. This paper reports on application of domain-based analysis to a significant (enterprise) system. We performed both domain- based analysis and a well known history-based analysis and compared the results. Like history-based approaches, domain-based analysis reveals coupling between software components, can assist to prevent errors in software maintenance, and predict\u00a0\u2026", "num_citations": "24\n", "authors": ["97"]}
{"title": "Modelling predictable component-based distributed control architectures\n", "abstract": " Current models of component architectures require extensions to support compositional reasoning about extra-functional properties such as worst-case time. Studying such properties in architectures is complicated since actual components may not yet be chosen during architectural design, and different choices may have significant and hard to predict effects on the system properties. In this paper we show how finite state automata and Petri nets may be extended to provide compositionality of extra-functional properties. We focus on worst-case time and safety. We illustrate the use of these techniques on the well-known production cell case study. In collaboration with industry we are currently applying a prototype analysis system for predicting critical properties of real-time industrial control systems.", "num_citations": "22\n", "authors": ["97"]}
{"title": "Cloud based monitoring of timed events for industrial automation\n", "abstract": " This paper presents ideas towards automatic monitoring of industrial automation devices by using a cloud based monitoring infrastructure. We are in particular aiming at fine grained timed properties that can be described using formal specification techniques such as behavioral types. Possible applications are in the areas of remote maintenance and servicing as well as commissioning and testing. Our work is based in the IEC 61499 standard.", "num_citations": "12\n", "authors": ["97"]}
{"title": "Remote monitoring infrastructure for IEC 61499 based control software\n", "abstract": " In this paper, we present our work on monitoring of control software behavior for PLCs. In particular, we are looking at IEC 61499-based software specifications. Monitoring is done remotely, i.e., the interface behavior of function blocks is streamed to a cloud-based service. Specifications are realized using formal languages such as 1) regular expressions, 2) timed automata, 3) temporal logic. Monitors can be automatically generated from these languages. Using our specifications, we are able to detect abnormal behavior in control software such as timing changes that can, e.g., show the presence of memory leaks or a virus. We demonstrate our ideas using an example.", "num_citations": "11\n", "authors": ["97"]}
{"title": "Re-engineering 4gl-based information system applications\n", "abstract": " Most contemporary fourth generation languages (4GL) are tightly coupled with the database, and other subsystems, that are provided by the vendor. As a result, organisations that wish to change database vendors are typically forced to rewrite their applications using the new vendor's 4GL. The anticipated cost of this redevelopment can deter an organisation from changing vendors, hence denying it the benefits that would otherwise result, e.g., the exploitation of more sophisticated database technology. If software reengineering tools existed that could reduce the rewriting effort, the large upfront cost of migrating the organisation's applications would also be reduced, which could make the shift economically feasible. The paper describes several approaches for migrating 4GL based information system applications. These approaches were developed as part of an industry sponsored research project to construct a\u00a0\u2026", "num_citations": "10\n", "authors": ["97"]}
{"title": "A re-engineering evaluation of software refinery: Architecture, process and technology\n", "abstract": " The quality of software re-engineering tools depends on that of the generic environments used in their construction. Because re-engineering is extremely challenging, too much so for full automation, generic re-engineering environment design criteria emphasise linguistic expressiveness and interaction with persistent repositories for program representations. Existing quality re-engineering environments, such as the Software Refinery tool, go a long way to satisfying these criteria, but fail to meet open systems criteria. One remedial approach is to recreate some of the functionality of these environments by modifying public domain technology, but which runs the risk of limited interoperability and over-investment in development.< >", "num_citations": "10\n", "authors": ["97"]}