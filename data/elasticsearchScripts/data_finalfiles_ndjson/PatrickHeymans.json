{"title": "Feature diagrams: A survey and a formal semantics\n", "abstract": " Feature diagrams (FD) are a family of popular modelling languages used for engineering requirements in software product lines. FD were first introduced by Kang as part of the FODA (feature oriented domain analysis) method back in 1990, Since then, various extensions of FODA FD were devised to compensate for a purported ambiguity and lack of precision and expressiveness. However, they never received a proper formal semantics, which is the hallmark of precision and unambiguity as well as a prerequisite for efficient and safe tool automation, In this paper, we first survey FD variants. Subsequently, we generalize the various syntaxes through a generic construction called free feature diagrams (FFD). Formal semantics is defined at the FFD level, which provides unambiguous definition for ail the surveyed FD variants in one shot. All formalisation choices found a clear answer in the original FODA FD definition\u00a0\u2026", "num_citations": "595\n", "authors": ["1456"]}
{"title": "Generic semantics of feature diagrams\n", "abstract": " Feature Diagrams (FDs) are a family of popular modelling languages used to address the feature interaction problem, particularly in software product lines, FDs were first introduced by Kang as part of the FODA (Feature-Oriented Domain Analysis) method back in 1990. Afterwards, various extensions of FODA FDs were introduced to compensate for a purported ambiguity and lack of precision and expressiveness. However, they never received a formal semantics, which is the hallmark of precision and unambiguity and a prerequisite for efficient and safe tool automation.The reported work is intended to contribute a more rigorous approach to the definition, understanding, evaluation, selection and implementation of FD languages. First, we provide a survey of FD variants. Then, we give them a formal semantics, thanks to a generic construction that we call Free Feature Diagrams (FFDs). This demonstrates that FDs\u00a0\u2026", "num_citations": "497\n", "authors": ["1456"]}
{"title": "Model checking lots of systems: efficient verification of temporal properties in software product lines\n", "abstract": " In product line engineering, systems are developed in families and differences between family members are expressed in terms of features. Formal modelling and verification is an important issue in this context as more and more critical systems are developed this way. Since the number of systems in a family can be exponential in the number of features, two major challenges are the scalable modelling and the efficient verification of system behaviour. Currently, the few attempts to address them fail to recognise the importance of features as a unit of difference, or do not offer means for automated verification.", "num_citations": "388\n", "authors": ["1456"]}
{"title": "Symbolic model checking of software product lines\n", "abstract": " We study the problem of model checking software product line (SPL) behaviours against temporal properties. This is more difficult than for single systems because an SPL with n features yields up to 2 n individual systems to verify. As each individual verification suffers from state explosion, it is crucial to propose efficient formalisms and heuristics.", "num_citations": "275\n", "authors": ["1456"]}
{"title": "Featured transition systems: Foundations for verifying variability-intensive systems and their application to LTL model checking\n", "abstract": " The premise of variability-intensive systems, specifically in software product line engineering, is the ability to produce a large family of different systems efficiently. Many such systems are critical. Thorough quality assurance techniques are thus required. Unfortunately, most quality assurance techniques were not designed with variability in mind. They work for single systems, and are too costly to apply to the whole system family. In this paper, we propose an efficient automata-based approach to linear time logic (LTL) model checking of variability-intensive systems. We build on earlier work in which we proposed featured transitions systems (FTSs), a compact mathematical model for representing the behaviors of a variability-intensive system. The FTS model checking algorithms verify all products of a family at once and pinpoint those that are faulty. This paper complements our earlier work, covering important\u00a0\u2026", "num_citations": "243\n", "authors": ["1456"]}
{"title": "Reprogramming of tumor-associated macrophages with anticancer therapies: radiotherapy versus chemo-and immunotherapies\n", "abstract": " Tumor-associated macrophages (TAMs) play a central role in tumor progression, metastasis and recurrence after treatment. Macrophage plasticity and diversity allow their classification along a M1 \u2013 M2 polarization axis. Tumor\u2013associated macrophages usually display a M2-like phenotype, associated with pro-tumoral features whereas M1 macrophages exert anti-tumor functions. Targeting the reprogramming of TAMs towards M1-like macrophages would thus be an efficient way to promote tumor regression. This can be achieved through therapies including chemotherapy, immunotherapy and radiotherapy. In this review, we first describe how chemo- and immuno-therapies can target TAMs and secondly we detail how radiotherapy modifies macrophage phenotype and present the molecular pathways that may be involved. The identification of irradiation dose inducing macrophage reprogramming and of the underlying mechanisms could lead to the design of novel therapeutic strategies and improve synergy in combined treatments.", "num_citations": "240\n", "authors": ["1456"]}
{"title": "A text-based approach to feature modelling: Syntax and semantics of TVL\n", "abstract": " In the scientific community, feature models are the de-facto standard for representing variability in software product line engineering. This is different from industrial settings where they appear to be used much less frequently. We and other authors found that in a number of cases, they lack concision, naturalness and expressiveness. This is confirmed by industrial experience.When modelling variability, an efficient tool for making models intuitive and concise are feature attributes. Yet, the semantics of feature models with attributes is not well understood and most existing notations do not support them at all. Furthermore, the graphical nature of feature models\u2019 syntax also appears to be a barrier to industrial adoption, both psychological and rational. Existing tool support for graphical feature models is lacking or inadequate, and inferior in many regards to tool support for text-based formats.To overcome these\u00a0\u2026", "num_citations": "233\n", "authors": ["1456"]}
{"title": "What\u2019s in a Feature: A Requirements Engineering Perspective\n", "abstract": " The notion of feature is heavily used in Software Engineering, especially for software product lines. However, this notion appears to be confusing, mixing various aspects of problem and solution. In this paper, we attempt to clarify the notion of feature in the light of Zave and Jackson\u2019s framework for Requirements Engineering. By redefining a problem-level feature as a set of related requirements, specifications and domain assumptions\u2014the three types of statements central to Zave and Jackson\u2019s framework\u2014we also revisit the notion of feature interaction. This clarification work opens new perspectives on formal description and verification of software product lines. An important benefit of the approach is to enable an early identification of feature interactions taking place in the systems\u2019 environment, a notoriously challenging problem. The approach is illustrated through a proof-of-concept prototype tool and\u00a0\u2026", "num_citations": "229\n", "authors": ["1456"]}
{"title": "A systematic approach to define the domain of information system security risk management\n", "abstract": " Today, security concerns are at the heart of information systems, both at technological and organizational levels. With over 200 practitioner-oriented risk management methods and several academic security modelling frameworks available, a major challenge is to select the most suitable approach. Choice is made even more difficult by the absence of a real understanding of the security risk management domain and its ontology of related concepts. This chapter contributes to the emergence of such an ontology. It proposes and applies a rigorous approach to build an ontology, or domain model, of information system security risk management. The proposed domain model can then be used to compare, select or otherwise improve security risk management methods.", "num_citations": "175\n", "authors": ["1456"]}
{"title": "Visual syntax does matter: improving the cognitive effectiveness of the i* visual notation\n", "abstract": " Goal-oriented modelling is one of the most important research developments in the requirements engineering (RE) field. This paper conducts a systematic analysis of the visual syntax of i*, one of the leading goal-oriented languages. Like most RE notations, i* is highly visual. Yet surprisingly, there has been little debate about or modification to its graphical conventions since it was proposed more than a decade ago. We evaluate the i* visual notation using a set of principles for designing cognitively effective visual notations (the Physics of Notations). The analysis reveals some serious flaws in the notation together with some practical recommendations for improvement. The results can be used to improve its effectiveness in practice, particularly for communicating with end users. A broader goal of the paper is to raise awareness about the importance of visual representation in RE research, which has\u00a0\u2026", "num_citations": "174\n", "authors": ["1456"]}
{"title": "Hypoxia-induced modulation of apoptosis and BCL-2 family proteins in different cancer cell types\n", "abstract": " Hypoxia plays an important role in the resistance of tumour cells to chemotherapy. However, the exact mechanisms underlying this process are not well understood. Moreover, according to the cell lines, hypoxia differently influences cell death. The study of the effects of hypoxia on the apoptosis induced by 5 chemotherapeutic drugs in 7 cancer cell types showed that hypoxia generally inhibited the drug-induced apoptosis. In most cases, the effect of hypoxia was the same for all the drugs in one cell type. The expression profile of 93 genes involved in apoptosis as well as the protein level of BCL-2 family proteins were then investigated. In HepG2 cells that are strongly protected against cell death by hypoxia, hypoxia decreased the abundance of nearly all the pro-apoptotic BCL-2 family proteins while none of them are decreased in A549 cells that are not protected against cell death by hypoxia. In HepG2 cells, hypoxia decreased NOXA and BAD abundance and modified the electrophoretic mobility of BIMEL. BIM and NOXA are important mediators of etoposide-induced cell death in HepG2 cells and the hypoxia-induced modification of these proteins abundance or post-translational modifications partly account for chemoresistance. Finally, the modulation of the abundance and/or of the post-translational modifications of most proteins of the BCL-2 family by hypoxia involves p53-dependent and \u2013independent pathways and is cell type-dependent. A better understanding of these cell-to-cell variations is crucial in order to overcome hypoxia-induced resistance and to ameliorate cancer therapy.", "num_citations": "134\n", "authors": ["1456"]}
{"title": "Model checking software product lines with SNIP\n", "abstract": " We present SNIP, an efficient model checker for software product lines (SPLs). Variability in software product lines is generally expressed in terms of features, and the number of potential products is exponential in the number of features. Whereas classical model checkers are only capable of checking properties against each individual product in the product line, SNIP exploits specifically designed algorithms to check all products in a single step. This is done by using a concise mathematical structure for product line behaviour, that exploits similarities and represents the behaviour of all products in a compact manner. Specification of an SPL in SNIP relies on the combination of two specification languages: TVL to describe the variability in the product line, and fPromela to describe the behaviour of the individual products. SNIP is thus one of the first tools equipped with specification languages to formally\u00a0\u2026", "num_citations": "118\n", "authors": ["1456"]}
{"title": "Improving the effectiveness of visual representations in requirements engineering: An evaluation of i* visual syntax\n", "abstract": " Goal-oriented modelling is one of the most important research developments in the RE field. This paper conducts a systematic analysis of the visual syntax of i*, one of the leading goal-oriented languages. Like most RE notations, i* is highly visual. Yet surprisingly, there has been little debate about or modification to its graphical conventions since it was proposed more than a decade ago. We evaluate the notation using a set of evidence-based principles for visual notation design. The paper identifies some serious flaws in the i* visual notation together with some recommendations for improvement. A broader goal of the paper is to raise the level of debate and stimulate discussion about visual representation in RE research.", "num_citations": "116\n", "authors": ["1456"]}
{"title": "Beyond boolean product-line model checking: dealing with feature attributes and multi-features\n", "abstract": " Model checking techniques for software product lines (SPL) are actively researched. A major limitation they currently have is the inability to deal efficiently with non-Boolean features and multi-features. An example of a non-Boolean feature is a numeric attribute such as maximum number of users which can take different numeric values across the range of SPL products. Multi-features are features that can appear several times in the same product, such as processing units which number is variable from one product to another and which can be configured independently. Both constructs are extensively used in practice but currently not supported by existing SPL model checking techniques. To overcome this limitation, we formally define a language that integrates these constructs with SPL behavioural specifications. We generalize SPL model checking algorithms correspondingly and evaluate their applicability. Our\u00a0\u2026", "num_citations": "115\n", "authors": ["1456"]}
{"title": "Introducing TVL, a text-based feature modelling language\n", "abstract": " Feature models are a common way to represent variability in software product line engineering. For this purpose, most authors use a graphical notation based on FODA. The main drawback of those approaches is their lack of scalability: they generally do not fit real-size problems. Indeed, their graphical syntax does not account for attributes or complex constraints and becomes a burden for large feature models. In this paper, we present TVL, a text-based feature modelling notation that is both light and comprehensive, meaning that it covers most constructs of existing languages, including cardinality-based decomposition and feature attributes. The main objective of TVL is to provide engineers with a human-readable language supporting large-scale models through modularisation mechanisms. Furthermore, TVL can serve as an extensible storage format for feature modelling tools. We illustrate the various concepts of the language with short code fragments.", "num_citations": "109\n", "authors": ["1456"]}
{"title": "Semantics of FODA feature diagrams\n", "abstract": " Extended Feature Oriented Domain Analysis (FODA) Feature Diagrams (EFD) were introduced to compensate for a purported ambiguity and lack of precision and expressiveness of the original FODA feature diagrams (OFD). However, EFD never received a formal semantics, which is the hallmark of precision and unambiguity. We propose here a semantics for both diagrams. From this we demonstrate that OFD are precise, unambiguous, and expressively complete, and thus that all extensions add no expressiveness. A finer notion is thus needed to compare these languages. Two solutions are well-established: succinctness and embeddability, that measures naturalness of a language. This tool shows that EFD indeed bring some naturalness, but are harmfully redundant and that the same naturalness can be attained with the simpler varied FD (VFD). We also show that no ambiguity is present, in fact.", "num_citations": "108\n", "authors": ["1456"]}
{"title": "Visual notation design 2.0: Towards user comprehensible requirements engineering notations\n", "abstract": " The success of requirements engineering depends critically on effective communication between business analysts and end users, yet empirical studies show that business stakeholders understand RE notations very poorly. This paper proposes a novel approach to designing RE visual notations that actively involves na\u00efve users in the process. We use i * , one of the most influential RE notations, to demonstrate the approach, but the same approach could be applied to any RE notation. We present the results of 5 related empirical studies that show that novices outperform experts in designing symbols that are comprehensible to novices: the differences are both statistically significant and practically meaningful. Symbols designed by novices increased semantic transparency (their ability to be spontaneously interpreted by other novices) by almost 300% compared to the existing i *  notation. The results challenge the\u00a0\u2026", "num_citations": "105\n", "authors": ["1456"]}
{"title": "Alignment of misuse cases with security risk management\n", "abstract": " It is recognised that security has to be addressed through the whole system development process. However current practices address security only in late stages, i.e., development or maintenance. Due to the success of UML use cases, misuse cases have been accepted by industry as a means to tackle security. However misuse cases, firstly, lack a precise application process, secondly, are too general which results in under-definition or misinterpretation of their concepts. In this paper we examine misuse cases in the light of a reference model for information system security risk management (ISSRM). Using the well-known meeting scheduler example we show how misuse cases can be used to follow a security risk management process. Next we check the misuse case ontology according to the concepts found in current risk management standards. The paper suggests improvements for the conceptual\u00a0\u2026", "num_citations": "103\n", "authors": ["1456"]}
{"title": "Discovering sustainability requirements: an experience report\n", "abstract": " Sustainability has become one of the \u201cgrand challenges\u201d of our civilization. Because of their pervasiveness, the way we design, and consequently use, software-intensive systems has a significant impact on sustainability. This gives software requirements engineering an important role to play in society. However, there is currently no specific support for handling sustainability requirements, while such support exists and has proved useful for other quality requirements like security or usability. This paper reports on a software project in which sustainability requirements were treated as first class quality requirements, and as such systematically elicited, analysed and documented. The authors intended to assess how current techniques support these activities. Beyond raising awareness on the importance of sustainability concerns in requirements engineering, this experience report suggests that, while a lot of\u00a0\u2026", "num_citations": "102\n", "authors": ["1456"]}
{"title": "Adapting secure tropos for security risk management in the early phases of information systems development\n", "abstract": " Security is a major target for today\u2019s information systems (IS) designers. Security modelling languages exist to reason on security in the early phases of IS development, when the most crucial design decisions are made. Reasoning on security involves analysing risk, and effectively communicating risk-related information. However, we think that current languages can be improved in this respect. In this paper, we discuss this issue for Secure Tropos, the language supporting the eponymous agent-based IS development. We analyse it and suggest improvements in the light of an existing reference model for IS security risk management. This allows for checking Secure Tropos concepts and terminology against those of current risk management standards, thereby improving the conceptual appropriateness of the language. The paper follows a running example, called eSAP, located in the healthcare domain.", "num_citations": "100\n", "authors": ["1456"]}
{"title": "From live sequence charts to state machines and back: A guided tour\n", "abstract": " The problem of relating state-based intraagent (or intraobject) behavioral descriptions with scenario-based interagent (interobject) descriptions has recently focused much interest among the software engineering community. This paper compiles the results of our investigation of this problem. As interagent formalism, we adopt a simple variant of live sequence charts. For the intraagent perspective, we consider a game-theoretic foundation, looking at agents as \"strategies,\" which encompasses the popular \"state-based\" paradigm. Three classes of relationships between models are studied: scenario checking (called eLSC checking), synthesis, and verification. We set a formally defined theoretical stage that allows us to express these three problems very simply, to discuss their complexity, and to describe optimal solutions. Our study reveals the intrinsic high computational difficulty of these tasks. Consequently, many\u00a0\u2026", "num_citations": "98\n", "authors": ["1456"]}
{"title": "Evaluating formal properties of feature diagram languages\n", "abstract": " Feature diagrams (FDs) are a family of popular modelling languages, mainly used for managing variability in software product lines. FDs were first introduced by Kang et al. as part of the feature-oriented domain analysis (FODA) method back in 1990. Since then, various extensions of FODA FDs were devised to compensate for purported ambiguity and lack of precision and expressiveness. Recently, the authors surveyed these notations and provided them with a generic formal syntax and semantics, called free feature diagrams (FFDs). The authors also started investigating the comparative semantics of FFD with respect to other recent formalisations of FD languages. Those results were targeted at improving the quality of FD languages and making the comparison between them more objective.The previous results are recalled in a self-contained, better illustrated and better motivated fashion. Most importantly, a\u00a0\u2026", "num_citations": "96\n", "authors": ["1456"]}
{"title": "Formal modelling of feature configuration workflows.\n", "abstract": " In software product line engineering, the configuration process can be a long and complex undertaking that involves many participants. When configuration is supported by feature diagrams, two challenges are to modularise the feature diagram into related chunks, and to schedule them as part of the configuration process. Existing work has only focused on the first of these challenges and, for the rest, assumes that feature diagram modules are configured sequentially. This paper addresses the second challenge. It suggests using YAWL, a state-of-the-art workflow language, to represent the configuration workflow while feature diagrams model the available configuration options. The principal contribution of the paper is a new combined formalism: feature configuration workflows. A formal semantics is provided so as to pave the way for unambiguous tool specification and safer reasoning about of the configuration process. The work is motivated and illustrated through a configuration scenario taken from the space industry.", "num_citations": "91\n", "authors": ["1456"]}
{"title": "The unified enterprise modelling language\u2014overview and further work\n", "abstract": " The Unified Enterprise Modelling Language (UEML) aims at supporting integrated use of enterprise and IS models expressed using different languages. To achieve this aim, UEML offers a hub through which modelling languages can be connected, thereby paving the way for also connecting the models expressed in those languages. This paper motivates and presents the most central parts of the UEML approach: a structured path to describing enterprise and IS modelling constructs; a common ontology to interrelate construct descriptions at the semantic level; a correspondence analysis approach to estimate semantic construct similarity; a quality framework to aid selection of languages; a meta-meta model to integrate the different parts of the approach; and a set of tools to aid its use and evolution. The paper also discusses the benefits of UEML and points to paths for further work.", "num_citations": "90\n", "authors": ["1456"]}
{"title": "ProVeLines: a product line of verifiers for software product lines\n", "abstract": " Software Product Lines (SPLs) are families of similar software products built from a common set of features. As the number of products of an SPL is potentially exponential in the number of its features, the model checking problem is harder than for single software. A practical way to face this exponential blow-up is to reuse common behaviour between products. We previously introduced Featured Transition Systems (FTS), a mathematical model that serves as a basis for efficient SPL model checking techniques. In this paper, we present ProVeLines, a product line of verifiers for SPLs that incorporates the results of over three years of research on formal verification of SPLs. Being itself a product line, our tool is flexible and extensible, and offers a wide range of solutions for SPL modelling and verification.", "num_citations": "88\n", "authors": ["1456"]}
{"title": "A reuse-oriented approach for the construction of scenario bases methods\n", "abstract": " Despite the recent interest in scenarios, the development of new methods and tools for Requirements Engineering integrating scenario based approaches has been limited. This paper reports on four different processes developed from research undertaken as part of the CREWS project which the authors believe will improve scenario use and make it more systematic. Furthermore CREWS aims to integrate these approaches into a method for scenario-based requirements engineering. To achieve this objective and be able to include existing approaches such as use case analysis we develop a component based approach which reflects a shift towards a reuse-centric approach to method engineering. The paper presents CREWS method and meta-method knowledge through the implementation of an SGML database to store, retrieve and dynamically compose chunks of CREWS processes.", "num_citations": "82\n", "authors": ["1456"]}
{"title": "Relating requirements and feature configurations: A systematic approach\n", "abstract": " A feature model captures various possible configurations of products within a product family. When configuring a product, several features are selected and composed. Selecting features at the program level has a general limitation of not being able to relate the resulting configuration to its requirements. As a result, it is difficult to decide whether a given configuration of features is optimal. An optimal configuration satisfies all stakeholder requirements and quantitative constraints, while ensuring that there is no extraneous feature in it. In relating requirements and feature configurations, we use the description of the problem world context in which the software is designed to operate as the intermediate description between them. The advantage of our approach is that feature selection can be done at the requirements level, and an optimal program level configuration can be generated from the requirements selected. Our approach is illustrated with a real-life problem of configuring a satellite communication software. The use of an existing tool to support our approach is also discussed.", "num_citations": "78\n", "authors": ["1456"]}
{"title": "Supporting multiple perspectives in feature-based configuration\n", "abstract": " Feature diagrams have become commonplace in software product line engineering as a means to document variability early in the life cycle. Over the years, their application has also been extended to assist stakeholders in the configuration of software products. However, existing feature-based configuration techniques offer little support for tailoring configuration views to the profiles of the various stakeholders. In this paper, we propose a lightweight, yet formal and flexible, mechanism to leverage multidimensional separation of concerns in feature-based configuration. We propose a technique to specify concerns in feature diagrams and to generate automatically concern-specific configuration views. Three alternative visualisations are proposed. Our contributions are motivated and illustrated through excerpts from a real web-based meeting management application which was also used for a preliminary\u00a0\u2026", "num_citations": "77\n", "authors": ["1456"]}
{"title": "A Formal Semantics for Multi-level Staged Configuration.\n", "abstract": " Multi-level staged configuration (MLSC) of feature diagrams has been proposed as a means to facilitate configuration in software product line engineering. Based on the observation that configuration often is a lengthy undertaking with many participants, MLSC splits it up into different levels that can be assigned to different stakeholders. This makes configuration more scalable to realistic environments. Although its supporting language (cardinality based feature diagrams) received various formal semantics, the MLSC process never received one. Nonetheless, a formal semantics is the primary indicator for precision and unambiguity and an important prerequisite for reliable toolsupport.We present a semantics for MLSC that builds on our earlier work on formal feature model semantics to which it adds the concepts of level and configuration path. With the formal semantics, we were able to make the original definition more precise and to reveal some of its subtleties and incompletenesses. We also discovered some important properties that an MLSC process should possess and a configuration tool should guarantee. Our contribution is primarily of a fundamental nature, clarifying central, yet ambiguous, concepts and properties related to MLSC. Thereby, we intend to pave the way for safer, more efficient and more comprehensive automation of configuration tasks.", "num_citations": "70\n", "authors": ["1456"]}
{"title": "Design of a Modelling Language for Information System Security Risk Management.\n", "abstract": " Nowadays, security has become one of the most demanded characteristics of information systems. However, the ways to address information systems security still lack consensus and integration. On the one hand, researchers have extended various modelling languages and methods with security-oriented constructs in order to take security concerns into account throughout the development lifecycle. On the other hand, practitioners have developed risk management methods to help estimate the relative importance of security risks and the costeffectiveness of solutions to tackle them. They are mainly driven by security standards that help practitioners assess and improve the security level of their organisations. Obviously, those two families of approaches should be unified so as to maximise the return on investment of implementing security requirements, and thereby align business and information technology concerns related to security. This is the challenge that our research aims to address. This paper presents a research agenda and describes the first steps that were undertaken to achieve it: an alignment of the terminology in the risk management literature and the elaboration of a conceptual model of the risk management domain. Those results will then be inputs for the next phases, which aim to integrate security and risk management concepts in information system development methods.", "num_citations": "70\n", "authors": ["1456"]}
{"title": "Turning high-level live sequence charts into automata\n", "abstract": " Turning High-Level Live Sequence Charts into Automata Page 1 Turning High-Level Live Sequence Charts into Automata Yves Bontemps Univ. of Namur - CS Dept rue Grandgagnage, 21 B-5000 - Namur Belgium ybo@info.fundp.ac.be Patrick Heymans CETIC and Univ. of Namur - CS Dept rue Cl\u00e9ment Ader, 8 B-6041 - Gosselies Belgium phe@info.fundp.ac.be ABSTRACT \u00a1\u00a3\u00a2\u00a5\u00a4\u00a6\u00a4\u00a7 \u00a9 \u00a2 \u00a2 \u00a2!#\"!\u00a2% $'&#\u00a7)(\u00a60\u00a42 13\u00a14 #$'\u00a4657 \u00a78(\u00a2% \u00a7@ 9BADC \u00a2!EGFH #\u00a4\u00a6\u00a2!CI \u00a4\u00a6\"!\u00a2\u00a5P #\u00a7)(ARQS Q 06\u00a7)0ARQ UTW VXQ 9'\u00a2!Y`\u00a2\u00a5( a) 9b\u00a2d ce\u00a2!ERAR\u00a2!Y`\u00a2b 0&#\u00a7)0f 0& Ag\u00a4W Eg\u00a7 \u00a9 #\u00a7 \u00a9 \u00a2d Eg\u00a7)\"ihp\u00a4 q\u00a2\u00a5\u00a4\u00a6\u00a4\u00a7 \u00a9 \u00a2% \u00a7)c#\u00a4r0\u00a6(6\u00a7 \"i0AgQ H\u00a7 #Cs 0&#\u00a2t \u00a7 c#ARERAG0uFv E' ( ER\u00a2 T2 UARY`\u00a27 \u00a2 \u00a2!#\"!\u00a2 $'&#\u00a7)(\u00a60\u00a4t 1 #$'\u00a465 Aqx (Q8Y`\u00a2 \u00a14 #$'\u00a4 c F@ \u00a4\u00a6Q ERYpAg \u00a9%", "num_citations": "66\n", "authors": ["1456"]}
{"title": "Scenario-based techniques for supporting the elaboration and the validation of formal requirements\n", "abstract": " Developing complex, safety critical systems requires precise, unambiguous specification of requirements. A formal specification language is thus well suited to this task. Formal specification languages require, but also exacerbate, the need for tools. In particular, tools should support the elaboration (how to build the formal specification) and the validation (how to check the adequacy of the specification towards the informal needs of the various stakeholders). This paper focuses on the language Albert II, a formal language designed for the purpose of expressing requirements for distributed real-time systems. It presents two contributions supporting its use. The first contribution aims at improving the elaboration process by providing a method for constructing an Albert II description from scenarios expressing the stakeholders\u2019 requirements. These are represented through message sequence charts extended to deal with\u00a0\u2026", "num_citations": "65\n", "authors": ["1456"]}
{"title": "Formal semantics, modular specification, and symbolic verification of product-line behaviour\n", "abstract": " Formal techniques for specifying and verifying Software Product Lines (SPL) are actively studied. While the foundations of this domain recently made significant progress with the introduction of Featured Transition Systems (FTSs) and associated algorithms, SPL model checking still faces the well-known state explosion problem. Moreover, there is a need for high-level specification languages usable in industry. We address the state explosion problem by applying the principles of symbolic model checking to FTS-based verification of SPLs. In order to specify properties on specific products only, we extend the temporal logic CTL with feature quantifiers. Next, we show how SPL behaviour can be specified with fSMV, a variant of SMV, the specification language of the industry-strength model checker NuSMV. fSMV is a feature-oriented extension of SMV originally introduced by Plath and Ryan. We prove that fSMV and\u00a0\u2026", "num_citations": "62\n", "authors": ["1456"]}
{"title": "Behavioural modelling and verification of real-time software product lines\n", "abstract": " In Software Product Line (SPL) engineering, software products are build in families rather than individually. Many critical software are nowadays build as SPLs and most of them obey hard real-time requirements. Formal methods for verifying SPLs are thus crucial and actively studied. The verification problem for SPL is, however, more complicated than for individual systems; the large number of different software products multiplies the complexity of SPL model-checking. Recently, promising model-checking approaches have been developed specifically for SPLs. They leverage the commonality between the products to reduce the verification effort. However, none of them considers real time.", "num_citations": "59\n", "authors": ["1456"]}
{"title": "Comparing goal modelling languages: An experiment\n", "abstract": " Although goal modelling is a recognised research area, only few empirical studies are reported. In this work we present an experiment where the quality of two goal languages \u2013 i* and KAOS \u2013 is investigated by means of the semiotic quality framework. We believed that a high quality language would contribute to effective and efficient modelling, and result in high quality models. But the experiment showed that model quality much depends on the particular language characteristics with respect to a given context. The experiment indicated weak and strong properties of goal modelling languages. For researchers, the findings point out possible language improvements. For practitioners, they can facilitate decisions about language selection and use.", "num_citations": "56\n", "authors": ["1456"]}
{"title": "Modelling variability requirements in Software Product Lines: A comparative survey\n", "abstract": " The increase of variability leads to a situation where the complexity of managing it becomes a primary concern during software development. Variability affects the whole product line process, from requirements to code. Clearly, we need specific solutions to support variability during software product line development. However, in current practice, designers often give variability incidental treatments. They typically introduce it during late design or implementation. Even, they express it through myriad of inventive tricks. The point is that variability must be managed already during requirements engineering. Indeed, in initial project\u2019s phases, a key to success is efficient communication between the designers and the stakeholders about requirements and thus variability. Nevertheless, in the software product lines context, a major difficulty can occur because no standard notation has been adopted yet to model variability\u00a0\u2026", "num_citations": "49\n", "authors": ["1456"]}
{"title": "Model checking adaptive software with featured transition systems\n", "abstract": " We propose to see adaptive systems as systems with highly dynamic features. We model as features both the reconfigurations of the system, but also the changes of the environment, such as failure modes. The resilience of the system can then be defined as the fact that the system can select an adequate reconfiguration for each possible change of the environment. We must take into account that reconfiguration is often a major undertaking for the system: it has a high cost and it might make functions of the system unavailable for some time. These constraints are domain-specific. In this paper, we therefore provide a modelling language to describe these aspects, and a property language to describe the requirements on the adaptive system. We design algorithms that determine how the system must reconfigure itself to satisfy its intended requirements.", "num_citations": "48\n", "authors": ["1456"]}
{"title": "Towards multi-view feature-based configuration\n", "abstract": " [Context & motivation] Variability models, feature diagrams ahead, have become commonplace in software product line engineering as a means to document variability early in the lifecycle. Over the years though, their application span has been extended to aid stakeholders in the configuration of software products. [Question/problem] However, current feature-based configuration techniques hardly support the tailoring of configuration views to the profiles of heterogeneous stakeholders. [Principal ideas/results] In this paper, we introduce a lightweight mechanism to leverage multidimensional separation of concerns in feature-based configuration. [Contribution] We propose a technique to specify concerns in feature diagrams and to build automatically concern-specific configuration views, which come with three alternative visualisations.", "num_citations": "47\n", "authors": ["1456"]}
{"title": "Tag and prune: A pragmatic approach to software product line implementation\n", "abstract": " To realise variability at the code level, product line methods classically advocate usage of inheritance, components, frameworks, aspects or generative techniques. However, these might require unaffordable paradigm shifts for the developers if the software was not thought at the outset as a product line. Furthermore, these techniques can be conflicting with a company's coding practices or external regulations.", "num_citations": "41\n", "authors": ["1456"]}
{"title": "Managing evolution in software product lines: A model-checking perspective\n", "abstract": " In Software Product Line (SPL) engineering, similar software products are developed in families rather than individually. Developing similar software at once leads to new challenges. In particular, the model checking problem for SPL is harder because it has to deal with potentially many products and identify exactly which ones do not work properly. In previous work, we introduced Featured Transition Systems as a compact behavioural model for SPL. We also proposed new algorithms that model check all the products of the SPL efficiently, by taking into account the commonality between them to reduce the verification time. However, our current approach does not consider that SPL can evolve. If a new feature is added to the SPL, previous verification results cannot be reused. In this paper, we define formally two particular classes of features. Using simulation relations, we show that we may anticipate the properties\u00a0\u2026", "num_citations": "40\n", "authors": ["1456"]}
{"title": "A toolset for feature-based configuration workflows\n", "abstract": " In software product lines, engineers derive products using feature-based configurators. Such tools do not scale well to complex (non linear, multi-user) configuration processes. We address this issue by extending a feature-based configurator with multi-view support and by integrating it with a workflow management tool.", "num_citations": "39\n", "authors": ["1456"]}
{"title": "Incrementally synthesizing controllers from scenario-based product line specifications\n", "abstract": " Many software-intensive systems consist of components that interact to fulfill complex functionality. Moreover, often many variants of such systems have to be designed at once. This adds complexity to the design task. Recently, we proposed a scenario-based approach to design product lines, which combines feature diagrams and Modal Sequence Diagrams. We proposed a consistency-checking technique based on a dedicated product line model checker. One limitation of this technique is that it is incomplete, ie, it may fail to show the consistency of some consistent specifications. In this paper we propose a new game-based approach that overcomes this incompleteness and, in addition, automatically synthesizes controllers for the consistent product specifications. We exploit the fact that many variants are similar and efficiently synthesize product controllers incrementally. We provide a prototype tool and evaluate\u00a0\u2026", "num_citations": "37\n", "authors": ["1456"]}
{"title": "Syntactic and semantic extensions to secure tropos to support security risk management\n", "abstract": " The need to consider security from the early stages of the development process of information systems has been argued by academics and industrialists alike, and security risk management has been recognised as one of the most prominent techniques for eliciting security requirements. However, although existing security modelling languages provide some means to model security aspects, they do not contain concrete constructs to address vulnerable system assets, their risks, and risk treatments. Furthermore, security languages do not provide a crosscutting viewpoint relating all three\u2013assets, risks and risk treatments\u2013together. This is problematic since, for a security analyst, it is difficult to detect what the potential security flaws could be, and how they need to be fixed. In this paper, we extend the Secure Tropos language, an agentand goal-oriented security modelling language to support modelling of security risks\u00a0\u2026", "num_citations": "35\n", "authors": ["1456"]}
{"title": "Applying LSCs to the specification of an air traffic control system\n", "abstract": " We demonstrate the use of the language of Live Sequence Charts (LSCs) for specifying part of the air traffic control system CTAS (Center TRACON Automation System). We use a recent extension of LSCs to handle symbolic instances, allowing an instance to be associated with a class rather than with an object. This allows us to specify scenario-based requirements that could not have been expressed using concrete objects only. This work can form the basis for applying execution, verification and synthesis methods developed for LSCs, on a real-world case study.", "num_citations": "35\n", "authors": ["1456"]}
{"title": "Counterexample guided abstraction refinement of product-line behavioural models\n", "abstract": " The model-checking problem for Software Products Lines (SPLs) is harder than for single systems: variability constitutes a new source of complexity that exacerbates the state-explosion problem. Abstraction techniques have successfully alleviated state explosion in single-system models. However, they need to be adapted to SPLs, to take into account the set of variants that produce a counterexample. In this paper, we apply CEGAR (Counterexample-Guided Abstraction Refinement) and we design new forms of abstraction specifically for SPLs. We carry out experiments to evaluate the efficiency of our new abstractions. The results show that our abstractions, combined with an appropriate refinement strategy, hold the potential to achieve large reductions in verification time, although they sometimes perform worse. We discuss in which cases a given abstraction should be used.", "num_citations": "34\n", "authors": ["1456"]}
{"title": "Separation of concerns in feature diagram languages: A systematic survey\n", "abstract": " The need for flexible customization of large feature-rich software systems, according to requirements of various stakeholders, has become an important problem in software development. Among the many software engineering approaches dealing with variability management, the notion of Software Product Line (SPL) has emerged as a major unifying concept. Drawing from established disciplines of manufacturing, SPL approaches aim to design repertoires of software artifacts, from which customized software systems for specific stakeholder requirements can be developed. A major difficulty SPL approaches attempt to address is the modularization of software artifacts, which reconciles the user's needs for certain features and the development and technical constraints. Towards this end, many SPL approaches use feature diagrams to describe possible configurations of a feature set. There have been several\u00a0\u2026", "num_citations": "34\n", "authors": ["1456"]}
{"title": "A formal semantics for decision-oriented variability modeling with DOPLER\n", "abstract": " A Formal Semantics for Decision-oriented Variability Modeling with DOPLER \u2014 the Research Portal - University of Namur Skip to main navigation Skip to search Skip to main content the Research Portal - University of Namur Logo English Fran\u00e7ais Home Profiles Research Units Equipment Projects Research Output Student theses Datasets Prizes Activities Press / Media A Formal Semantics for Decision-oriented Variability Modeling with DOPLER Deepak DHUNGANA, Patrick Heymans, Rick RABISER Research Center on Information Systems Engineering Faculty of Computer Science Research output: Contribution in Book/Catalog/Report/Conference proceeding \u203a Conference contribution Overview Projects (2) Original language English Title of host publication Proceedings of the Fourth International Workshop on Variability Modelling of Software-intensive Systems (VaMoS'10), Linz, Austria, January 27-29 Publisher \u2026", "num_citations": "30\n", "authors": ["1456"]}
{"title": "Variability modeling challenges from the trenches of an open source product line re-engineering project\n", "abstract": " Variability models, feature diagrams ahead, have become commonplace in the software product lines engineering literature. Whereas ongoing research keeps improving their expressiveness, formalisation and automation, more experience reports on their usage in real projects are needed. This paper describes some challenges encountered during the re-engineering of PloneMeeting, an Open Source software family, into a software product line. The main challenging issues we could observe were (i) the ambiguity originating from implicit information (missing definitions of feature labels and unclear modelling viewpoint), (ii) the necessity of representing spurious features, (iii) the difficulty of making diagrams and constraints resistant to change, and (iv) the risks of using feature attributes to represent large sets of subfeatures. Our study reveals the limitations of current constructs, and calls for both language and\u00a0\u2026", "num_citations": "30\n", "authors": ["1456"]}
{"title": "Towards more extensible metacase tools\n", "abstract": " In this paper, we suggest a solution to several limitations of current metaCASE technology: (i) the limited number of modelling levels, (ii) the rigid separation between those levels, (iii) the limited bootstrapping possibilities, (iv) the hardcoding of various types of information (e.g. GUI related information), and (v) the inability to record links between semantically related (e.g. referrentially redundant) constructs.               Our proposal is centered around a 2-layer metamodelling language called MetaL. MetaL is characterised by ubiquitous reflexivity (meta-circularity) and extended reification capabilities. The language is presented and applied to illustrative examples. Its pros and cons are discussed and an on-going prototypical metaCASE implementation is reported.", "num_citations": "30\n", "authors": ["1456"]}
{"title": "Towards a Measurement Framework for Security Risk Management.\n", "abstract": " Risk management is currently a key tool for managing Information System (IS) security. In the context of the definition of an IS Security Risk Management (ISSRM) modelling language, we already defined the set of concepts and relationships taking a place in the ISSRM domain within a UML class diagram. To extend this work and to support reasoning at the modelling language level, the objective is now to define the metrics available. A systematic and iterative research method is proposed to determine suited metrics. It consists first of the application of the Goal-Question-Metric (GQM) approach on the domain model. Second a review of the literature aims at completing and validating this first step. The outcome of this work is the enrichment of the class diagram with attributes representing the elicited metrics.", "num_citations": "29\n", "authors": ["1456"]}
{"title": "A code tagging approach to software product line development\n", "abstract": " Software product line engineering seeks to systematise reuse when developing families of similar software systems so as to minimise development time, cost and defects. To realise variability at the code level, product line methods classically advocate usage of inheritance, components, frameworks, aspects or generative techniques. However, these might require unaffordable paradigm shifts for developers if the software was not thought at the outset as a product line. Furthermore, these techniques can be conflicting with a company\u2019s coding practices or external regulations. These concerns were the motivation for the industry\u2013university collaboration described in this paper in which we developed a minimally intrusive coding technique based on tags. The approach was complemented with traceability from code to feature diagrams which were exploited for automated configuration. It is supported by a\u00a0\u2026", "num_citations": "27\n", "authors": ["1456"]}
{"title": "Modelling variability in self-adaptive systems: Towards a research agenda\n", "abstract": " The combination of generative programming and component engineering applied to software product line engineering (SPLE) has focused thus far mostly on static systems (as previous editions of AOPLE indicate), with variability that is bound once. Meanwhile, an emergent paradigm in software engineering deals with self-adaptive and dynamic systems. While there is a well-known and agreed SPLE process for static systems, there has been less focus on dynamically adaptive systems. As such it appears imperative to include it in an extended research agenda. In the present paper we observe limitations related to domain engineering in SPLE and identify what fundamental concepts, such as context and binding time, must be retought in order to achieve SPLE for dynamically adaptive systems. The main contribution of this paper is a set of research questions, aimed at defining a common research agenda for addressing these limitations.", "num_citations": "27\n", "authors": ["1456"]}
{"title": "Evaluating a textual feature modelling language: Four industrial case studies\n", "abstract": " Feature models are commonly used in software product line engineering as a means to document variability. Since their introduction, feature models have been extended and formalised in various ways. The majority of these extensions are variants of the original tree-based graphical notation. But over time, textual dialects have also been proposed. The textual variability language (TVL) was proposed to combine the advantages of both graphical and textual notations. However, its benefits and limitations have not been empirically evaluated up to now. In this paper, we evaluate TVL with four cases from companies of different sizes and application domains. The study shows that practitioners can benefit from TVL. The participants appreciated the notation, the advantages of a textual language and considered the learning curve to be gentle. The study also reveals some limitations of the current version of TVL.", "num_citations": "26\n", "authors": ["1456"]}
{"title": "Efficient consistency checking of scenario-based product-line specifications\n", "abstract": " Modern technical systems typically consist of multiple components and must provide many functions that are realized by the complex interaction of these components. Moreover, very often not only a single product, but a whole product line with different compositions of components and functions must be developed. To cope with this complexity, it is important that engineers have intuitive, but precise means for specifying the requirements for these systems and have tools for automatically finding inconsistencies within the requirements, because these could lead to costly iterations in the later development. We propose a technique for the scenario-based specification of component interactions based on Modal Sequence Diagrams. Moreover, we developed an efficient technique for automatically finding inconsistencies in the scenario-based specification of many variants at once by exploiting recent advances in the\u00a0\u2026", "num_citations": "25\n", "authors": ["1456"]}
{"title": "Towards an incremental automata-based approach for software product-line model checking\n", "abstract": " Most model-checking algorithms are based on automata theory. For instance, determining whether or not a transition system satisfies a Linear Temporal Logic (LTL) formula requires computing strongly connected component of its transition graph. In Software Product-Line (SPL) engineering, the model checking problem is more complex due to the huge amount of software products that may compose the line. Indeed, one has to determine the exact subset of those products that do not satisfy an intended property. Efficient dedicated verification methods have been recently developed to answer this problem. However, most of them does not allow incremental verification. In this paper, we introduce an automata-based incremental approach for SPL model checking. Our method makes use of previous results to determine whether or not the addition of conservative features (ie, features that do not remove behaviour from\u00a0\u2026", "num_citations": "25\n", "authors": ["1456"]}
{"title": "University meets industry: Calling in real stakeholders\n", "abstract": " Teaching the discipline of requirements engineering (RE) is slowly establishing at universities within the software engineering curriculum. While several studies have shown that case study-based education was more efficient in RE, many teachers are still reluctant to change their teaching style, and stay with classical lectures and complementary exercises. These courses often fail to relate the different steps and stages of RE to each other and do not address crucial communication and project management issues that are common in industrial RE practice. They also miss the chance for using the classroom as a near-to-real-settings research lab, and won't show students the stakes existing in doing engineering in our society. We describe our experiences in teaching RE with a case study in two universities, achieving a triple-win: putting students in contact with real stakeholders, showing students their responsibility\u00a0\u2026", "num_citations": "23\n", "authors": ["1456"]}
{"title": "Comparing GRL and KAOS using the UEML Approach\n", "abstract": " Goal-oriented modelling languages are central in the information systems (IS) field, both for aligning new IS with organisational needs and for developing agent-oriented software systems. However, existing goal-oriented languages differ significantly in both syntax and semantics. The paper analyses and compares the syntax and semantics of GRL and KAOS using the UEML approach, providing a systematic and detailed comparison of the two languages, in part based on the Bunge-Wand-Weber (BWW) model and Bunge\u2019s ontology. The work offers a path towards integrated management and use of models expressed in GRL and KAOS, it contributes to incorporating GRL and KAOS into version 2 of the unified enterprise modelling language, which is currently being developed.", "num_citations": "23\n", "authors": ["1456"]}
{"title": "COMPARING GOAL-MODELLING TOOLS WITH THE RE-TOOL EVALUATION APPROACH\u2217\n", "abstract": " Goal modelling usually takes place during the early information systems development phase known as requirements engineering (RE). RE is a key factor for project success where a good tool support is necessary. Several goal-modelling tools exist and several approaches can be used to evaluate them. In this paper, we report on an experiment to evaluate two goal-modelling tools-KAOS/Objectiver and i*/OME. We use an RE-tool evaluation approach (R-TEA) in order to determine which of the tools is better at supporting the creation of goal models. It turns out that KAOS/Objectiver apparently offers better model creation support but the quality of the resulting models is more dependent on situational language characteristics such as the focus on early (vs late) requirements.", "num_citations": "23\n", "authors": ["1456"]}
{"title": "Relationship between leptin content, metabolic hormones and fat deposition in three beef cattle breeds\n", "abstract": " The aim of the study was to determine if cattle breeds differing in their carcass characteristics also differ in the profiles of their leptin and metabolic hormones. Three breeds, Belgian Blue (BB) (n\u00a0=\u00a012), Limousin (L) (n\u00a0=\u00a012) and Aberdeen Angus (AA) (n\u00a0=\u00a012) with varying ability to deposit fat and protein were compared. Blood, muscle and subcutaneous (SC) adipose tissue were sampled. Animal performance, carcass and meat characteristics were determined as well as plasma leptin concentration, leptin gene expression in SC adipose tissue, leptin-receptor gene expression in SC adipose tissue and plasma concentration of insulin, tri-iodothyronin (T3), thyroxin (T4) and cortisol. The BB bulls showed the lowest values of leptin gene expression (P\u00a0<\u00a00.05). Values of plasma leptin concentration and of leptin-receptor gene expression tended to be lower in BB than in the other breeds. For a similar amount of adipose\u00a0\u2026", "num_citations": "21\n", "authors": ["1456"]}
{"title": "Visually effective goal models using KAOS\n", "abstract": " Goal modelling languages are visual modelling languages. To communicate ideas effectively with a visual modelling language, one should follow some basic principles. One is modularity, i.e. organising diagrams in manageable modules to avoid confusing the reader with overly complex diagrams. Another is emphasis, i.e. visually drawing the attention to the most important pieces of information. In this paper, we evaluate how the goal modelling language KAOS and its supporting tool, Objectiver, help modellers respect nine visual modelling principles. From our observations, we formulate recommendations for modellers, language designers and tool developers.", "num_citations": "20\n", "authors": ["1456"]}
{"title": "Towards the comparative evaluation of feature diagram languages\n", "abstract": " This paper proposes a path to defragmenting research on feature diagram languages:(1) a global quality framework to serve as a language quality improvement roadmap;(2) a set of formally defined criteria to assess the semanticsrelated qualities of feature diagram languages;(3) a systematic method to formalise these languages and make them ready for comparison and efficient tool automation. The novelty of this paper resides in the latter point and the integration. The results obtained so far are summed up and future works are identified.", "num_citations": "20\n", "authors": ["1456"]}
{"title": "Ontological Analysis of KAOS using Separation of References\n", "abstract": " Goal modeling is emerging as a central requirements engineering (RE) technique. Unfortunately, current goal-oriented languages are not interoperable with one another or with modeling languages that address other modeling perspectives. This problematic because the emerging generation of model-driven information systems is likely to depend on coordinated use of several modeling languages to represent different perspectives of the enterprise and its proposed information system. The chapter applies a structured approach to describe a well-known goal oriented language, KAOS, by mapping it onto a philosophically grounded ontology. The structured approach facilitates language interoperability because when other languages are described using the same approach, they become mapped onto the same ontology. The approach thereby provides an intermediate language for comparison, consistency\u00a0\u2026", "num_citations": "20\n", "authors": ["1456"]}
{"title": "Analysis of KAOS Meta-model\n", "abstract": " Analysis of KAOS Meta-model \u2014 the Research Portal - University of Namur Skip to main navigation Skip to search Skip to main content the Research Portal - University of Namur Logo English Fran\u00e7ais Home Profiles Research Units Equipment Projects Research Output Student theses Datasets Prizes Activities Press / Media Analysis of KAOS Meta-model Raimundas Matulevicius, Patrick Heymans Research Center on Information Systems Engineering Faculty of Computer Science Research output: Other contribution 108 Downloads (Pure) Overview Projects (1) Original language English Publication status Published - 2005 Access to Document KAOSmetaModel Projects 2010 2010 1 Finished Requirements engineering and business/IT alignment Cleve, A. 1/01/10 \u2192 31/01/10 Project: Research Axis Cite this APA Author BIBTEX Harvard Standard RIS Vancouver Matulevicius, R., & Heymans, P. (2005). Analysis of \u2026", "num_citations": "20\n", "authors": ["1456"]}
{"title": "Generic Semantics of Feature Diagrams Variants.\n", "abstract": " A large number of extensions of Feature Oriented Domain Analysis (FODA) Feature Diagrams were introduced to compensate for a purported ambiguity and lack of precision and expressiveness of the original FODA feature diagrams (OFD). However, they never received a formal semantics, which is the hallmark of precision and unambiguity. We propose here a formal semantics for all these diagrams, thanks to a generic construction that we call Free Feature Diagrams (FFD). From this we demonstrate that OFD are precise, unambiguous, and expressively complete, and thus that all extensions add no expressiveness. A finer notion is thus needed to compare these languages. Two solutions are well-established: succinctness and embeddability, that express naturalness of a language. This tool shows that some extensions indeed bring some naturalness, but are harmfully redundant and that the same naturalness can be attained with the simpler varied FD (VFD).", "num_citations": "20\n", "authors": ["1456"]}
{"title": "As fast as sound (lightweight formal scenario synthesis and verification)\n", "abstract": " Synthesis and Model Checking are classical techniques for relating scenarios (here, Live Sequence Charts) and state machines, in the context of roundtrip Scenario-based Software Engineering. Unfortunately, current approaches do not scale up very well. To improve on this, we propose to lose some precision as a trade-off to gain efficiency. Usual algorithms are turned into sound ones, which act locally on the specification and deliver results in acceptable time.", "num_citations": "17\n", "authors": ["1456"]}
{"title": "Towards a more semantically transparent i* visual syntax\n", "abstract": " [Context and motivation]                         i* is one of the most popular modelling languages in Requirements Engineering. i* models are meant to support communication between technical and non-technical stakeholders about the goals of the future system. Recent research has established that the effectiveness of model-mediated communication heavily depends on the visual syntax of the modelling language. A number of flaws in the visual syntax of i* have been uncovered and possible improvements have been suggested. [Question/problem] Producing effective visual notations is a complex task that requires taking into account various interacting quality criteria. In this paper, we focus on one of those criteria: Semantic Transparency, that is, the ability of notation symbols to suggest their meaning. [Principal ideas/results] Complementarily to previous research, we take an empirical approach. We\u00a0\u2026", "num_citations": "16\n", "authors": ["1456"]}
{"title": "An SMT-based approach to automated configuration\n", "abstract": " In this paper, we explore a novel application domain for SMT solvers: configuration problems. Configuration problems are everywhere and particularly in product lines, where different yet similar products (eg, cars or customizable software) are built from a shared set of assets. Designing a product line requires enumerating the different product features and the constraints that determine their valid combinations. Various categories of constraint solvers exist, but SMT solvers appear to be a solution of choice for configuration problems. This is mostly due to their high efficiency and expressiveness which have already proved useful in a variety of practical applications. In this paper, we recall what configuration problems are, describe a language to represent them, and map from configuration problems to the satisfiability problem over SMT theories.", "num_citations": "16\n", "authors": ["1456"]}
{"title": "The ALBERT II specification animator\n", "abstract": " Writing requirements specifications of complex composite systems makes it necessary to have a language which is both formal to allow reasoning on specifications and declarative enough to allow the analyst to express himself in a natural way. Albert II is a language that tries to achieve these goals and, besides that, provides templates that guide the analyst in writing the specification. However, because of its formality, the resulting specification cannot in general be read by the various stakeholders. Validation tools are therefore required, among which an animator. In this paper we aim at giving an overview of the functionnalities and the architecture of the animator for Albert II specifications.", "num_citations": "16\n", "authors": ["1456"]}
{"title": "Product portfolio scope optimization based on features and goals\n", "abstract": " In this paper we propose a mathematical program able to optimize the product portfolio scope of a software product line and sketch both a development and a release planning. Our model is based on the description of customer needs in terms of goals. We show that this model can be instantiated in several contexts such as a market customization strategy or a mass-customization strategy. It can deal with Software Product Line development from scratch as well as starting from a legacy software base. We demonstrate its applicability with an example based on a case study.", "num_citations": "15\n", "authors": ["1456"]}
{"title": "Comparative semantics of Feature Diagrams: FFD vs. vDFD\n", "abstract": " Feature Diagrams are a popular family of modelling languages used for engineering requirements in software product lines. In our previous research, we advocated the use of formal semantics as an indispensable means to clarify discussions about feature diagrams and to facilitate safe and efficient tool automation. We presented a generic formal semantics for feature diagram languages and criteria to compare them. However, other formal semantics exist. We already informally argued in favour of our semantics which, we think, is more abstract, more concise and not tool dependent. However, some of these claims needed to be further objectified. The purpose of this paper is to compare the semantics proposed by van Deursen and Klint with our own following the methodology of comparative semantics. To be made amenable to comparison, van Deursen and Klint's tool-based definition is first recalled and redefined\u00a0\u2026", "num_citations": "15\n", "authors": ["1456"]}
{"title": "Lightweight formal methods for scenario-based software engineering\n", "abstract": " Two fundamental problems related to Scenario-based Software Engineering (SBSE) are presented: model checking and synthesis. The former is to verify that a design model is consistent with a scenario-based specification. The latter is to build a design model implementing correctly a specification. Model checking is computationally expensive and synthesis of distributed system is undecidable. Two lightweight techniques are thus presented that alleviate this intractability. These approaches sacrifice completeness for efficiency, but keep soundness.", "num_citations": "15\n", "authors": ["1456"]}
{"title": "Features meet scenarios: modeling and consistency-checking scenario-based product line specifications\n", "abstract": " Many modern software-intensive systems consist of multiple components interacting together to deliver the intended functionality. Often, these systems come in many variants (products) and are managed together as a software product line. This variability is the source of additional complexity which can cause inconsistencies and offset the economies of scale promised by product line engineering. Engineers thus need intuitive, yet precise means for specifying requirements and require tools for automatically detecting inconsistencies within these requirements. In recent work, we proposed a technique for the scenario-based specification of interactions in product lines by a combination of Modal Sequence Diagrams and Feature Diagrams. Furthermore, we elaborated an efficient consistency-checking technique based on a dedicated model-checking approach especially tailored for product lines. In this paper\u00a0\u2026", "num_citations": "14\n", "authors": ["1456"]}
{"title": "Feature diagrams for change-oriented programming\n", "abstract": " The idea of feature-oriented programming is to map requirements to features, concepts that can be composed to form a software product. Change-oriented programming (ChOP), in which features are seen as sets of changes that can be applied to a base program, has recently been proposed as an approach to FOP. Changes are recorded as the programmer works and can encapsulate any developer action, including the removing of code.", "num_citations": "14\n", "authors": ["1456"]}
{"title": "A Template-based Analysis of GRL\n", "abstract": " The goal-oriented paradigm is widely popular in Requirements Engineering. However, the central notion of goal remains one of the most controversial in the field. A possible cause might be that research has devoted too little attention to studying the ontological foundations of goal-oriented languages. In this paper, we have studied the case of GRL, the goal-oriented requirements language being standardized by the ITU. Our analysis followed the template-based approach proposed by Opdahl and Henderson-Sellers. After defining a metamodel for GRL, we have applied the template to each of its constructs to extract and formalize detailed syntactic and semantic information. The semantic part of the template focuses on establishing a mapping between a construct and its meaning, defined in term of the Bunge-Wand-Weber ontology. Evaluations of both GRL and the template are provided as well as suggestions to improve them.", "num_citations": "14\n", "authors": ["1456"]}
{"title": "Separating variability concerns in a product line re-engineering project\n", "abstract": " Feature diagrams have now become common variability models in software product lines engineering literature. Whereas ongoing research keeps improving their expressiveness, formalisation, and automation, open studies of their usage in real projects are still missing. This paper intends to (1) present the process we followed to elicit the variability of PloneMeeting, an Open Source project, and (2) report on the initial results obtained when applying variability modelling techniques promoting separation of concerns between software variability and product line variability.", "num_citations": "13\n", "authors": ["1456"]}
{"title": "Choose your creativity: Why and how creativity in requirements engineering means different things to different people\n", "abstract": " [Context and Motivation] The word \u201ccreativity\u201d is used widely in business and academia, but its meaning may differ greatly depending on context. This may cause confusion in the minds of requirements engineers who have to determine which kinds of creativity are relevant to their project and which creativity tools to use. [Question/Problem] The main goal of this work is to understand why and how the meaning of the word \u201ccreativity\u201d varies, and study the impacts of these variations on requirements engineering. [Principal ideas / results]. A comparative review of creativity-related literature from Social Sciences and Requirements Engineering was performed. [Contributions] This study results in a new framework for understanding the precise local meaning of creativity used in a specific context, before deciding on the adequate support for it. Since creativity in RE is still a relatively new topic, research\u00a0\u2026", "num_citations": "12\n", "authors": ["1456"]}
{"title": "Eight Deadly Sins of GRL.\n", "abstract": " Goal modeling languages are now an integral part of requirements engineering. They allow for the systematic capture of rationales for sta eholder needs and enable the reasoning about potential system solutions. The goaloriented Requirement Language (GRL) is both a typical goal modeling language and an international standard, yet it suffers from many shortcomings, a in to deadly sins, that relate to its concrete syntax, semantics, approach to modularity, analysis, and extensibility. Based on 10 years of experience using GRL, we discuss several shortcomings and point to relevant future wor areas.", "num_citations": "12\n", "authors": ["1456"]}
{"title": "The TVL specification\n", "abstract": " In the scientific community, feature models are the de-facto standard for representing variability in software product line engineering. This is different from industrial settings where they appear to be used much less frequently. We have and other authors have argued that feature models lack concision, naturalness and expressiveness. Feature attributes, although an efficient tool for making models intuitive and concise, are not well understood and most existing notations do not support them at all. The graphical nature of feature models\u2019 syntax also appears to be a barrier to industrial adoption. Finally, existing tool support for graphical feature models is lacking or inadequate, and inferior in many regards to tool support for text-based formats.TVL, a text-based feature modelling language, was designed specifically to address these shortcomings. In terms of expressiveness, TVL subsumes most existing dialects. The main goal of designing TVL was to provide engineers with a human-readable language with a rich syntax to make modelling easy and models natural, but also with a formal semantics to avoid ambiguity and allow powerful automations. This report serves as the complete TVL specification and reference, providing its syntax and semantics in every detail.", "num_citations": "12\n", "authors": ["1456"]}
{"title": "The unified enterprise modelling language\u2013overview and further work\n", "abstract": " The Unified Enterprise Modelling Language (UEML) aims to support integrated use of enterprise and IS models expressed in a variety of languages. To achieve this aim, UEML provides a hub through which different languages can be connected, thereby paving the way for connecting the models expressed in those languages. UEML offers a structured approach to describing enterprise and IS modelling constructs, a common ontology to interrelate construct descriptions at the semantic level, a correspondence analysis approach to estimate semantic construct similarity, a quality framework to aid selection of languages, a meta-meta model to organise the UEML and a set of tools to aid its use and evolution. This paper presents an overview of UEML and points to paths for further work.", "num_citations": "12\n", "authors": ["1456"]}
{"title": "Supporting multiple perspectives in feature-based configuration: Foundations\n", "abstract": " [Context & motivation] Feature diagrams have become commonplace in software product line engineering as a means to document variability early in the lifecycle. Over the years, their application span has also been extended to assist stakeholders in the configuration of software products.[Question/problem] However, existing feature-based configuration techniques offer little support for tayloring configuration views to the profiles of the various stakeholders.[Principal ideas/results] In this paper, we propose a lightweight, yet formal and flexible, mechanism to leverage multidimensional separation of concerns in feature-based configuration.[Contribution] We propose a technique to specify concerns in feature diagrams and to generate automatically concern-specific configuration views. Three alternative visualisations are proposed. Our contributions are motivated and illustrated through excerpts of a real web-based meeting management application which was also used for a preliminary evaluation.", "num_citations": "11\n", "authors": ["1456"]}
{"title": "Making it all up: Getting in on the Act to Improvise Creative Requirements\n", "abstract": " This mini-tutorial proposes participants a fun and refreshing learning moment. Through actually playing improvisational theatre games in groups themselves, participants will be given the chance to feel what it takes to innovate in teams, and will learn new ways to generate creative ideas when eliciting requirements.", "num_citations": "10\n", "authors": ["1456"]}
{"title": "THESIS/TH\u00c8SE\n", "abstract": " In software engineering, software reuse has been a popular topic since 1968. Nowa-days, Software Product Line (SPL) engineering promotes systematic reuse throughout the whole software development process. Within SPL, reusability strongly depends on variability. In this context, variability modelling and management are crucial activities that crosscuts all development stages. Different techniques are used to model variability and one of them is Feature Diagrams (FDs). FD languages are a family of popular modelling languages used to model, and reason on, variability. Since the seminal proposal of a FD language, namely FODA, many extensions have been proposed to improve it. However, the pros and cons of these languages are difficult to evaluate for two main reasons:(1) most of them are informally defined and (2) no well defined criteria were used to justify the extensions made to FODA. As a consequence, variability modelling and management techniques proposed in the literature or used by practitioners may be suboptimal.Globally, this work underlines that the current research on FDs is fragmented and provides principles to remedy this situation. A formal approach is proposed to introduce more rigour in the motivation, definition and comparison of FD languages. Thereby, examining their qualities should be more focused and productive. A formal approach guarantees unambiguity and is a prerequisite to define formal quality criteria and to produce efficient and safe tool automation. A quality analysis is necessary to avoid the proliferation of languages and constructs that are an additional source of misinterpretations and\u00a0\u2026", "num_citations": "10\n", "authors": ["1456"]}
{"title": "A bottom-up approach to program variation\n", "abstract": " Peter Ebraert Home Research Publications Teaching CV Extra Publications Books A bottom-up approach to program variation Peter Ebraert Phd thesis published by the ULB press, 2009 download Tool Support for Partial Behavioral Reflection Peter Ebraert Master thesis published by the VUB press, 2003 download Program suggestions based on community profiles Peter Ebraert Licienciaatsthesis published by the VUB press, 2001 download Journal Papers Tranquility: a low disruptive alternative to quiescence for ensuring safe dynamic updates Yves Vandewoude, Peter Ebraert, Yolande Berbers, Theo D'Hondt In \"Transactions On Software Engineering\", vol.33, n. 12, published by IEEE Computer Society, 2007 download Conference Papers Change-based FODA diagrams: Bridging the gap between feature-oriented design and implementation Peter Ebraert, Quinten David Soetens, Dirk Janssens To appear in \"\u2026", "num_citations": "9\n", "authors": ["1456"]}
{"title": "A Template-based Analysis of GRL\n", "abstract": " This chapter applies the template proposed by Opdahl and Henderson-Sellers to the Goal-oriented Requirements Engineering Language (GRL). It proposes a metamodel of GRL that identifies the constructs of the language and the links between them. Each construct is then described through the template in order to extract and formalise detailed syntactic and semantic information. The latter takes the form of a mapping between a construct and its meaning, defined in terms of the Bunge-Wand-Weber ontology. Evaluations of both GRL and the template are provided as well as suggestions for improvements. The purpose of our work is to improve the quality of goal modelling. Indeed, despite the increasing popularity of the goal-oriented paradigm, especially in requirements engineering and enterprise modelling, the central notion of goal remains one of the most controversial. A possible cause might be that\u00a0\u2026", "num_citations": "9\n", "authors": ["1456"]}
{"title": "An extensible platform for product-line behavioural analysis\n", "abstract": " Software Product-Line (SPL) model checking has reached an adequate level of efficiency and expressiveness to be applied on real-world cases. Yet a major challenge remains: model checkers should consist of black-box tools that do not require in-depth expertise to be used. In particular, it is essential to provide engineers with easy-to-learn languages to model both the behaviour of their SPL and the properties to check. In this paper, we propose a framework to build customized product-line verifiers modularly. Our extensible architecture allows one to plug new modelling languages or verifications algorithms without modifying other parts of it. It also provides means of representing and reasoning on variability that can facilitate the development of other SPL quality assurance techniques. We illustrate the benefits of our approach by detailing how we created a new domain-specific SPL modelling language and linked\u00a0\u2026", "num_citations": "8\n", "authors": ["1456"]}
{"title": "Designing a process reference model for information security management systems\n", "abstract": " In spite of growing interest for information security, the adoption of the international standard on information security management (ISO/IEC 27001) is still very low. This standard provides requirements to manage an Information Security Management System. We argue that this standard is too complex to be directly implemented by small structures such as SMEs. We thus propose a process model that aims to describe the processes involved in information security management and facilitate adoption. In order to do this, we reuse process model previously derived from ISO/IEC 20000-1, which is also a management system standard but developed for IT Service Management. In this paper, we determine the generic management system requirements and their corresponding processes by mapping the requirements from ISO/IEC 20000-1 and ISO/IEC 27001 standards. At last, we create the information security\u00a0\u2026", "num_citations": "8\n", "authors": ["1456"]}
{"title": "Snip: An efficient model checker for software product lines\n", "abstract": " In software product lines, systems are developed in families and differences between systems of a product line are expressed in terms of features. The model checking problem for product lines is more difficult than for single systems because a product line with n features yields up to 2n individual systems to verify. This paper introduces SNIP, a tool for model checking product lines against temporal properties. SNIP is the first model checker for software product lines. It relies on an efficient mathematical structure for product line behaviour, that exploits similarities and represents the behaviour of all systems in a compact manner. This structure is used to model check all systems of the product line in a single step. The tool comes together with an intuitive specification language based on Promela. We compare SNIP to classical model checkers.", "num_citations": "8\n", "authors": ["1456"]}
{"title": "Some thoughts about the animation of formal specifications written in the AlbertII language\n", "abstract": " Formally and declaratively specifying requirements on real-time composite systems requires validation by stakeholders. One way to perform such validation is allowing people to experience the dynamic properties of the system to be built by using an animation tool. In this paper, we give an overview of the issues raised by the development of such a tool for the language with the main goal of obtaining feedback on research that is a its very early stages.", "num_citations": "8\n", "authors": ["1456"]}
{"title": "State machine flattening: mapping study and assessment\n", "abstract": " State machine formalisms equipped with hierarchy and parallelism allow to compactly model complex system behaviours. Such models can then be transformed into executable code or inputs for model-based testing and verification techniques. Generated artifacts are mostly flat descriptions of system behaviour. \\emph{Flattening} is thus an essential step of these transformations. To assess the importance of flattening, we have defined and applied a systematic mapping process and 30 publications were finally selected. However, it appeared that flattening is rarely the sole focus of the publications and that care devoted to the description and validation of flattening techniques varies greatly. Preliminary assessment of associated tool support indicated limited tool availability and scalability on challenging models. We see this initial investigation as a first step towards generic flattening techniques and scalable tool support, cornerstones of reliable model-based behavioural development.", "num_citations": "7\n", "authors": ["1456"]}
{"title": "Comparison of Goal-oriented Languages using the UEML Approach\n", "abstract": " Goal-oriented modelling languages are important during requirements engineering (RE). However, goal-oriented languages di\ufb02er signi\ufb01cantly in both syntax and semantics. The paper analyses and compares the semantics of GRL and KAOS using the UEAJL approach, which supports fine-grained analysis and comparison of modelling constructs based on the Bunge-Wand-Weber (B WW) representation model and Bunge\u2019s ontology. The contribution is threefold. It o\ufb02ers precise semantics of both languages\u2019 constructs in relation to the Bunge-Wand-Weber model. It o\ufb01 \u2018ers a path towards automated transformations between models expressed in GRL and KAOS and towards integrated management of such models. It contributes to a broader understanding of goal-based modelling in general.", "num_citations": "7\n", "authors": ["1456"]}
{"title": "Analysis of feature configuration workflows\n", "abstract": " We recently introduced feature configuration workflows, a formalism for modelling the complex configuration processes in software product line engineering. In earlier work we identified obstacles to efficient tool support for which we now outline the main concepts of a solution. These take the form of a set of analysis tasks that can be performed on feature configuration workflows.", "num_citations": "7\n", "authors": ["1456"]}
{"title": "Concerns and their separation in feature diagram languages: An informal survey\n", "abstract": " Feature diagrams describe valid configurations of features in a product. As feature diagrams play a central role in software product line development, several concerns are reflected in them, contributing to their increasing size and complexity. The way that those concerns are recognised and separated in feature diagrams affects our ability to manage them effectively. However, the nature of important concerns in software product line development, and the extent to which the separation of concerns is addressed by current research and practice is not clear. In this paper, we report on our initial survey of important concerns considered by feature diagram languages and guidelines for addressing those concerns.", "num_citations": "7\n", "authors": ["1456"]}
{"title": "Beyond de-facto standards for designing human-computer interactions in configurators\n", "abstract": " A web configurator is an application that allows its users to tailor a customizable product to their own needs by specifying their requirements through a graphical user interface. Configurators have been successfully applied to tangible products (eg, cars, mobile phones) as well as intangible products like software (eg, operating systems, ERPs) and services (eg, insurance). A configurator user faces multiple decisions until she has addressed all the characteristics to be retained in the final product. In order to enable users to make the right decisions, with as low effort as possible, HCIs in configurators must be thoughtfully designed. Researchers have previously identified guidelines for HCI design by conducting empirical studies of existing configurators. In this vision paper we propose to draw HCI guidelines through a different approach, which consists in framing theories from the HCI community into the context of configuration models.", "num_citations": "6\n", "authors": ["1456"]}
{"title": "Verification for reliable product lines\n", "abstract": " Many product lines are critical, and therefore reliability is a vital part of their requirements. Reliability is a probabilistic property. We therefore propose a model for feature-aware discrete-time Markov chains as a basis for verifying probabilistic properties of product lines, including reliability. We compare three verification techniques: The enumerative technique uses PRISM, a state-of-the-art symbolic probabilistic model checker, on each product. The parametric technique exploits our recent advances in parametric model checking. Finally, we propose a new bounded technique that performs a single bounded verification for the whole product line, and thus takes advantage of the common behaviours of the product line. Experimental results confirm the advantages of the last two techniques.", "num_citations": "6\n", "authors": ["1456"]}
{"title": "What\u2019s in a web configurator? empirical results from 111 cases\n", "abstract": " Nowadays, mass customization has been embraced by a large portion of industries. As a result, the web abounds with configurators that help users tailor all kinds of goods and services to their specific needs. These configurators are a privileged interface between customers and companies, and often the single entry point for customer orders. Their reliability is thus crucial. However, the state of the practice lacks guidelines for building reliable and efficient web configurators. To provide these guidelines, empirical data on the current practice is required. The first part of this paper reports on a systematic study of 111 web configurators along three dimensions: configuration options rendering, constraint handling, and configuration process support. It also describes the code inspection tools we developed to reverse engineer this information from web configuration clients. The second part highlights good and bad practices in web configurator engineering. This paper opens avenues for the elaboration of web configurator engineering guidelines and the construction of semi-automated re-engineering tools.", "num_citations": "6\n", "authors": ["1456"]}
{"title": "XToF-A Tool for Tag-based Product Line Implementation.\n", "abstract": " This tool demo paper describes a tool called XToF which is being developed through a collaboration between the University of Victoria, the University of Namur and the University of Waterloo. The purpose of the tool is to let programmers define, maintain, visualise and exploit precise traceability links between a feature diagram and the code base of a software product line. The resulting tool supports automated configuration of a Java or C code base and is minimally intrusive with respect to development practices.", "num_citations": "6\n", "authors": ["1456"]}
{"title": "Engineering configurators for the retail industry: experience report and challenges ahead\n", "abstract": " Mass customization is a widely embraced paradigm through which engineers, sales people and customers can tailor products to specific needs. One typically achieves this task by using a configurator, ie a software application wherein a user can define the product she wants by selecting options and setting parameters. Given their importance, configurators must be dependable and evolvable. Yet, building configurators often constitutes a complex software engineering challenge. In this paper, we report on two configurators developed by a spin-off company of the University of Namur for the retail industry. We highlight the difficulties inherent to such developments and present solutions that can help overcoming them. Finally, we expose open challenges and discuss how future research can address them.", "num_citations": "5\n", "authors": ["1456"]}
{"title": "On the evaluation and improvement of feature-based configuration techniques in software product lines\n", "abstract": " Our work builds upon previous research on software product lines and formal analysis of feature diagrams carried out since several years at the University of Namur. This PhD thesis aims at evaluating and improving existing feature-based configuration techniques to ease their uptake by practitioners and their integration into the software product line engineering process. The affordability and scalability of the delivered languages, methods and tools are major concerns. Evaluation will take place in the context of an open source development project.", "num_citations": "5\n", "authors": ["1456"]}
{"title": "Using the event calculus to reason about problem diagrams\n", "abstract": " Central to the problem frames approach is the distinction of three different descriptions: requirements R, domain assumptions W and specifications S, tied together with the so-called'frame concern', a proof obligation that has to hold between them if a problem diagram is to be correct: S, W|-R. The form this proof should take is not fixed a priori. It might, however, be desirable to automate it in order to allow for an efficient analysis of large diagrams. To make this possible, we follow some earlier suggestions to use the Event Calculus as a suitable formalism for these descriptions. The main contribution of the present paper is a set of consistency rules as well as guidelines for passing from a problem diagram to its formal description.", "num_citations": "5\n", "authors": ["1456"]}
{"title": "An Improvement of Process Reference Model Design and Validation Using Business Process Management\n", "abstract": " During the design of a Process Reference Model (PRM), the modeler needs to describe processes. According to ISO/IEC 15504-2, each process shall be described in terms of a process purpose and process outcomes. The process purpose is \u201cthe high level measurable objectives of performing the process and the likely outcomes of effective implementation of the process\u201d. A process outcome is \u201can observable result of a process\u201d. The set of process outcomes shall be necessary and sufficient to achieve the purpose of the process. However, no method exists as ISO proposes requirements and guidelines (respectively in ISO/IEC 15504-2 and ISO/IEC 24774 for process description) for developing process models. So there is a need to support the development of a process model and the verification of the completeness of the process outcomes in the context of process design. This article proposes a\u00a0\u2026", "num_citations": "4\n", "authors": ["1456"]}
{"title": "Model checking lots of systems\n", "abstract": " In software product line engineering, systems are developed in families and differences between family members are expressed in terms of features. Formal modelling and verification is an important issue in this context as more and more critical systems are developed this way. Since the number of systems in a family can be exponential in the number of features, two major challenges are (a) scaleable modelling and (b) efficient verification of system behaviour. Currently, few approaches attempt to address these challenges in the context of software product lines. Those who do fail to recognise the importance of features as a unit of difference, and do not offer means for automated verification. In this paper, we tackle those challenges at a fundamental level. Our first contribution is a feature-aware extension of transition systems, a formalism designed to describe the combined behaviour of an entire system family. The second contribution is a tool-supported model checking technique which allows to verify LTL properties against such transition systems. An empirical evaluation shows substantial gains over classical approaches.", "num_citations": "4\n", "authors": ["1456"]}
{"title": "MetaL: a formal specification\n", "abstract": " MetaL: a formal specification \u2014 the Research Portal - University of Namur Skip to main navigation Skip to search Skip to main content the Research Portal - University of Namur Logo English Fran\u00e7ais Home Profiles Research Units Projects Research Output Student theses Equipment Datasets Prizes Activities Press / Media Search by expertise, name or affiliation MetaL: a formal specification Vincent Englebert, Patrick Heymans Research Center on Information Systems Engineering Faculty of Computer Science Research output: Other contribution Overview Projects (1) Original language English Publication status Published - 2006 Projects Projects per year 2010 2010 1 Finished Model-driven engineering Cleve, A. 1/01/10 \u2192 31/01/10 Project: Research Axis Cite this APA Author BIBTEX Harvard Standard RIS Vancouver Englebert, V., & Heymans, P. (2006). MetaL: a formal specification. Englebert, Vincent ; Heymans, \u2026", "num_citations": "4\n", "authors": ["1456"]}
{"title": "KAOS Construct Analysis using the UEML Approach Template\n", "abstract": " KAOS Construct Analysis using the UEML Approach Template \u2014 the Research Portal - University of Namur Skip to main navigation Skip to search Skip to main content the Research Portal - University of Namur Logo English Fran\u00e7ais Home Profiles Research Units Equipment Projects Research Output Student theses Datasets Prizes Activities Press / Media KAOS Construct Analysis using the UEML Approach Template Raimundas Matulevicius, Patrick Heymans Research Center on Information Systems Engineering Faculty of Computer Science Research output: Other contribution 61 Downloads (Pure) Overview Projects (1) Original language English Publication status Published - 2005 Access to Document KAOSconstructs Projects 2010 2010 1 Finished Requirements engineering and business/IT alignment Cleve, A. 1/01/10 \u2192 31/01/10 Project: Research Axis Cite this APA Author BIBTEX Harvard Standard RIS \u2026", "num_citations": "4\n", "authors": ["1456"]}
{"title": "Agents as a Key Concept for Information Systems Requirements Engineering\n", "abstract": " Agents as a Key Concept for Information Systems Requirements Engineering \u2014 the Research Portal - University of Namur Skip to main navigation Skip to search Skip to main content the Research Portal - University of Namur Logo English Fran\u00e7ais Home Profiles Research Units Equipment Projects Research Output Student theses Datasets Prizes Activities Press / Media Agents as a Key Concept for Information Systems Requirements Engineering Micha\u00ebl Petit, Patrick Heymans, Pierre-Yves Schobbens Research Center on Information Systems Engineering Faculty of Computer Science Research output: Contribution in Book/Catalog/Report/Conference proceeding \u203a Conference contribution Overview Original language English Title of host publication Agent-Oriented Information Systems'99 Subtitle of host publication AOIS99 Publication status Published - 1999 Access to Document http://www.aois.org/99/petit.html \u2026", "num_citations": "4\n", "authors": ["1456"]}
{"title": "On Studying Bad Practices in Configuration UIs.\n", "abstract": " In today\u2019s businesses, configurators are essential tools that allow customers to personalise a product to their specific needs. Being often the first contact between the retailer and the customer, it is important for a configurator to provide a smooth user experience. However, these software have been studied mostly from the reasoning point of view, that is, how to represent the logical relations between the configuration options and how to automatically ensure that the user makes no configuration error. In this paper, we focus instead on HCI and analyse the occurrence of 11 design flaws that occur in 28 car configurators. These flaws includes violations of general HCI principles as well as lacks of essential, configurator-specific functionalities. Our results indicate that most of the studied configurators contain defects in their UIs including, surprisingly, violations of some basic principles of HCIs. Still, the most frequent problems are inappropriate implementations of configurator-specific functionalities.", "num_citations": "3\n", "authors": ["1456"]}
{"title": "Formal methods for the masses\n", "abstract": " Software product line engineering has brought the mass customization paradigm from manufacturing to the software industry, bearing the promise of delivering individualized software products quickly and at a low unit cost. Although many companies have already successfully achieved this objective, major challenges are still ahead. I will focus on a pressing open issue: effective quality assurance of software product lines. I will provide an overview of the recent progress made in providing sound mathematical foundations to product line verification, and in developing proof-of-concept techniques and tools. I will then elaborate on a tentative research agenda for the years to come, highlighting the main fundamental and practical obstacles yet to overcome. Hopefully, when this agenda is realized, efficient and seamless tools for verifying mass-customized software will be available to the masses.", "num_citations": "3\n", "authors": ["1456"]}
{"title": "Location Consistency model revisited: Problem, solution and prospects\n", "abstract": " Location consistency (LC) is a weak memory consistency model which is defined entirely on partial order execution semantics of parallel programs. Compared with sequential consistency (SC), LC is scalable and provides ample theoretical parallelism. This makes LC an interesting memory model in the upcoming many-core parallel processing era. Previous work has pointed out that LC does not guarantee SC execution behavior for all data race free programs. In this paper, we compare the semantics of LC with PRAM consistency and memory coherence, and prove that LC is strictly weaker than PRAM consistency. For data race free programs, we prove that the semantics of LC is equivalent to memory coherence. In addition, by introducing memory ordering semantics into LC judiciously, we prove that the enhanced model is equivalent to SC for data race free programs. Finally, we discuss possible solutions for\u00a0\u2026", "num_citations": "3\n", "authors": ["1456"]}
{"title": "Class-level behavioral modeling and synthesis\n", "abstract": " When modeling the behavioral requirements of objectoriented distributed systems, one has to take class-level scenarios into account. Those describe interactions that apply to all/some instances of some class. Current scenariobased notations fall short on this problem. They remain at instance level and suitable only for modeling the behavior of a particular population. State machines are often used later in the analysis to factor scenarios classwise. However, when dealing with class-level behavior, state machine models get unnecessarily awkward and implementationoriented, incorporating iterations over instances, for example. This paper brings two contributions solving this crucial issue. First, we propose an obvious extension of current scenario and state machine languages, already envisioned by Harel back in 1984: all notations get extended with universal and existential quantifiers. Second, we upgrade classical synthesis algorithms dealing with class-level notations. This extension preserves properties of instance-level algorithms. 1.", "num_citations": "3\n", "authors": ["1456"]}
{"title": "Representing Repairs in Configuration Interfaces: A Look at Industrial Practices.\n", "abstract": " Configurators are widespread applications where users can tailor products (ie goods or services) to their needs by selecting options and setting parameter values. Constraints over these options exist to avoid building invalid products. Thus, when the user attempts to combine incompatible options, the configurator should raise an error and help the user repair her configuration, that is, change the selected options to obtain a valid product. In this paper, we observe how 54 configurators from different industries handle this repair mechanism. We show that in a majority of cases, the configuration interfaces exhibit bad practices that impede an effective usage of repair, thereby impoverishing user experience.", "num_citations": "2\n", "authors": ["1456"]}
{"title": "Technical Aspect Extraction from Customer Reviews Based on Seeded Word Clustering\n", "abstract": " Online reviews are an important source of information that customers use to make more informed purchase decisions. Attribute-centric reviews, in which the author supports her opinion with comments on the technical attributes of the product, are particularly insightful because they present deeper discussions about how technical specifications can meet the expectations of customers. However, as the number of available reviews grows, it becomes increasingly cumbersome to manually locate attribute-centric reviews as they get lost within a flood of less informative reviews. We propose a word clustering approach that uses the technical specifications of products to identify technical discussions in online reviews. Each output cluster represents a technical aspect of the products and can be used to extract its related attribute-centric reviews. We evaluate our approach by modeling technical aspects for 21,846\u00a0\u2026", "num_citations": "2\n", "authors": ["1456"]}
{"title": "All-at-once-synthesis of controllers from scenario-based product line specifications\n", "abstract": " Software-intensive systems often consist of multiple components that interact to realize complex requirements. An additional dimension of complexity arises when one designs many variants of a system at once, that is, a software product line (SPL). We propose a scenario-based approach to design SPLs, based on a combination of Modal Sequence Diagrams (MSDs) and a feature model. It consists in associating every MSD to the set of variants that have to satisfy its specification. Variability constitutes a new source of complexity, which can lead to inconsistencies in the specification of one or multiple variants. It is therefore crucial to detect these inconsistencies, and to produce a controller for each variant that makes it behave so that it satisfies its specification. We present a new controller synthesis technique that checks the absence of inconsistencies in all variants at once, thereby more radically exploiting the\u00a0\u2026", "num_citations": "2\n", "authors": ["1456"]}
{"title": "Utilisation de la mod\u00e9lisation \u00e0 l\u2019ex\u00e9cution: objectif, challenges et b\u00e9n\u00e9fices\n", "abstract": " Le d\u00e9veloppement logiciel traditionnel, g\u00e9n\u00e9ralement fond\u00e9 sur l\u2019hypoth\u00e8se d\u2019un monde clos d\u00e9finissant une fronti\u00e8re connue et stable entre le syst\u00e8me et son environnement n\u2019est plus tenable. Par opposition, la notion de syst\u00e8me dit ouvert et \u00e9ternel s\u2019est impos\u00e9e \u00e0 la plupart des syst\u00e8mes informatiques. Ces syst\u00e8mes logiciels se caract\u00e9risent par leur besoin d\u2019offrir des capacit\u00e9s d\u2019adaptation qui leur permettent de r\u00e9agir aux changements de leur environnement de mani\u00e8re continue et sans interruption de service. Un des challenges important pour la communaut\u00e9 du g\u00e9nie logiciel est d\u2019identifier et de supprimer progressivement les limites li\u00e9es \u00e0 l\u2019hypoth\u00e8se du monde clos. En partant de cette hypoth\u00e8se de monde ouvert, cette habilitation expose les b\u00e9n\u00e9fices engendr\u00e9s par l\u2019effacement de la fronti\u00e8re entre la phase de conception et la phase d\u2019ex\u00e9cution du logiciel en proposant l\u2019utilisation des travaux li\u00e9s \u00e0 la mod\u00e9lisation non plus uniquement lors de la phase de conception du syst\u00e8me, mais aussi au cours de l\u2019ex\u00e9cution des syst\u00e8mes dits ouverts. Pour ce faire, cette habilitation synth\u00e9tise, dans une premi\u00e8re partie, les fondations d\u2019une approche permettant l\u2019utilisation de techniques de mod\u00e9lisation, \u00e0 l\u2019ex\u00e9cution en se concentrant principalement sur le point de vue de l\u2019architecte logicielle. Nous exposons ensuite les b\u00e9n\u00e9fices attendus en montrant comment des approches avanc\u00e9es de composition logicielle, de v\u00e9rification ou de gestion de la variabilit\u00e9 peuvent \u00eatre b\u00e9n\u00e9fiques pour la compr\u00e9hension et la ma\u00eetrise de l\u2019espace de configuration et de reconfiguration d\u2019un syst\u00e8me dit ouvert. Nous synth\u00e9tisons ensuite les principaux\u00a0\u2026", "num_citations": "2\n", "authors": ["1456"]}
{"title": "Efficient quality assurance of variability-intensive systems\n", "abstract": " Variability is becoming an increasingly important concern in software development but techniques to cost-effectively verify and validate software in the presence of variability have yet to become widespread. This half-day tutorial offers an overview of the state of the art in an emerging discipline at the crossroads of formal methods and software engineering: quality assurance of variability-intensive systems. We will present the most significant results obtained during the last four years or so, ranging from conceptual foundations to readily usable tools. Among the various quality assurance techniques, we focus on model checking, but also extend the discussion to other techniques. With its lightweight usage of mathematics and balance between theory and practice, this tutorial is designed to be accessible to a broad audience. Researchers working in the area, willing to join it, or simply curious, will get a comprehensive\u00a0\u2026", "num_citations": "2\n", "authors": ["1456"]}
{"title": "Improvisational theater for information systems: An agile, experience-based, prototyping technique\n", "abstract": " Collaborative creativity is key to innovative software development. It is however not easy to master, and few techniques have focused on those aspects. Games have recently started to receive serious attention to fill this gap. In this context, this tutorial proposes participants a fun and refreshing learning moment. Through actually playing improvisational theatre (improv) games in group, participants will learn new ways to generate scenarios through a collaborative, cheap, rapid, experience-based, design technique.", "num_citations": "2\n", "authors": ["1456"]}
{"title": "An interactive multi-perspective toolset for non-linear product configuration processes\n", "abstract": " In Software product line engineering (SPLE), feature diagrams (FDs) capture commonality and variability in terms of features and their relationships. The interactive process during which features are selected and excluded is called feature-based configuration. the resulting set of selected features is a high-level specification of the desired product. To facilitate the configuration of large and complex FDs, tools relying on efficient solvers (eg SAT, BDD and CSP) were developed.", "num_citations": "2\n", "authors": ["1456"]}
{"title": "D\u00e9fis de la s\u00e9curit\u00e9 de l'information: Support \u00e0 la gestion des risques de s\u00e9curit\u00e9 par les mod\u00e8les\n", "abstract": " Pascal 001 Exact sciences and technology/001D Applied sciences/001D02 Computer science; control theory; systems/001D02B Software/001D02B07 Memory organisation. Data processing/001D02B07C Memory and file management (including protection and security)", "num_citations": "2\n", "authors": ["1456"]}
{"title": "Experimenting with the Selection of an Off-The-Shelf Conference Management System\n", "abstract": " Experimenting with the Selection of an Off-The-Shelf Conference Management System Page 1 The experiment Preliminary results \u2022 Reusable knowledge base for the Conference Management System domain: \u2013 Information sources analysis \u2013 Domain analysis \u2013 Quality model construction \u2022 Improvement suggested: \u2013 Use of feature model to represent requirements and tool features variability Research questions \u2022 How to select a \u201cgood\u201d Conference Management System? \u2022 How to make this choice easier for future conference organisers? COTS selection methods CAP [Ochs] STACE [Kunda] OTSO [Kontio] PORE [Maiden] R-TEA [Matulevi\u010dius] Chosen because: - Emphasis on knowledge reuse - Reflects current state-of-the-art - Live research subject Quality-model based approach [Franch, Ayala] References [Franch, et al.] X. Franch and JP Carvallo. A quality-model-based approach for describing and evaluating \u2026", "num_citations": "2\n", "authors": ["1456"]}
{"title": "From interaction diagrams to state machines: moving to class-level\n", "abstract": " Scenarios and State Machines offer two complimentary views on the behavior of distributed systems. The former presents a bird\u2019s eye view on objects interactions, whereas the latter describes the complete behavior of every object, thus being closer to implementation. Many algorithms translating scenarios to state machines have been devised. All these algorithms work at instance-level, ie for a fixed finite number of objects. Real-world object-oriented systems may contain arbitrarily many objects. Modeling languages and synthesis algorithms need to be adapted to this situation. We propose a simple and elegant extension of State Machines and Interaction Diagrams, that adds universal/existential quantifiers. This makes it possible to describe protocols such as \u201cwhen some observer detects an event, it notifies all registered clients\u201d. The problem we want to solve is precisely defined and an algorithmic solution is given and proven correct. Our synthesis algorithm is similar to state of the art approaches but adds a novel instantiation step to cope with quantifiers.", "num_citations": "2\n", "authors": ["1456"]}
{"title": "Affordable Model-based Product-Line Engineering of Safety-critical Systems\n", "abstract": " This papers gives an overview of our PhD subject, describes its status about one year after its kick-off, and provides a schedule for the remaining tasks. Our work builds upon a tradition of research on model-driven development carried out since many years at the University of Namur\u2019s CS department. It aims to improve, extend, integrate and apply both old (static modeling related) and recent (dynamic modeling related) results in the context of safety-critical software product-lines. A particular attention is paid to the affordability and scalability of the delivered notations, methods and tools. In particular, usability by small and medium companies is one of our main objectives.", "num_citations": "2\n", "authors": ["1456"]}
{"title": "Do product configurators comply with HCI guidelines? A preliminary study\n", "abstract": " While past research on product configuration has focused on knowledge representation and automated reasoning, researchers have paid less attention to the design and evaluation of user experience (UX). For product configurators like for other interactive applications, UX is of paramount importance. This is all the more true since configurators are often primary points of contact between a merchant and its customers, and business-critical assets meant to maximize sales.", "num_citations": "1\n", "authors": ["1456"]}
{"title": "Dissimilar Test Case Selection for Behavioural Software Product Line Testing\n", "abstract": " Dissimilar test cases have been proven to be effective to reveal faults in software systems. In the Software Product Line (SPL) context, this criteria has been applied successfully to mimic combinatorial interaction testing in an efficient and scalable manner by selecting and prioritising most dissimilar configurations of feature models using evolutionary algorithms. In this paper, we adapt this criteria to behavioural SPLs modelled with Featured Transitions Systems (FTSs). In particular, we devise a distance function based on the dissimilarity between actions of the FTS and products on which a test case may be executed. We evaluate the applicability and fault finding ability of this criteria on injected faults for both real and academic SPL models. Our final results show that for a moderate size model, dissimilarly driven driven test selection generates test sets able to find more faults more rapidly than all-actions coverage test set selection. The main contribution of our approach is the prioritization ability of the algorithm to give sorted test sets that achieves both good fault finding and coverage of a large number of products.", "num_citations": "1\n", "authors": ["1456"]}
{"title": "Positioning Map: a Visual Technique to Improve the Layout of Diagram Contextual Information\n", "abstract": " The presentation of information is a difficult activity. It requires to deal with model complexity, characterised among other things by the number of visual", "num_citations": "1\n", "authors": ["1456"]}
{"title": "DEM4: Tutorial on UEML\n", "abstract": " The present deliverable is mainly devoted to the tutorial for UEML. The deliverable also contains a short overview about the main results achieved throughout the whole project", "num_citations": "1\n", "authors": ["1456"]}
{"title": "Perspectives on the scope and definition process of the Unified Enterprise Modelling Language.\n", "abstract": " Interoperability of Enterprise Applications is a serious and multi-facetted problem. One of the tasks of the recently-started INTEROP Network of Excellence is to address this problem at the modelling level through the elaboration of a Unified Enterprise Modelling Language (UEML). In this paper, some methodological hints and an embryonic mission statement are submitted to discussion with peers.", "num_citations": "1\n", "authors": ["1456"]}
{"title": "Modelling variability requirements in Software Product Lines\n", "abstract": " Modelling Variability Requirements in Software Product Lines \u2014 the Research Portal - University of Namur Skip to main navigation Skip to search Skip to main content the Research Portal - University of Namur Logo English Fran\u00e7ais Home Profiles Research Units Equipment Projects Research Output Student theses Datasets Prizes Activities Press / Media Search by expertise, name or affiliation Modelling Variability Requirements in Software Product Lines Jean-Christophe Trigaux, Patrick Heymans Faculty of Computer Science Research output: Other contribution Overview Projects (2) Original language English Publication status Published - 2003 Projects Projects per year 2010 2010 2 Finished Evolution: Evolution Cleve, A. 1/01/10 \u2192 31/01/10 Project: Research Axis Requirements engineering and business/IT alignment Cleve, A. 1/01/10 \u2192 31/01/10 Project: Research Axis Cite this APA Author BIBTEX Harvard \u2026", "num_citations": "1\n", "authors": ["1456"]}
{"title": "LSCs: That\u2019s the Name of the Game! A Specification Framework based on Live Sequence Charts and Game Theory\n", "abstract": " Message Sequence Charts (MSCs) are a standard, widely adopted scenario-based notation. However, its use for the requirements engineering of reactive systems still suffers fundamental issues about which few researchers and practitioners seem to care:(1) its semantics is too weak to model such basic things as a response pattern,(2) no distinction is made between descriptive and prescriptive statements,(3) it is impossible to deal with class-level scenarios. We take up the seminal work of Harel and Damm on Live Sequence Charts (an extension of MSCs) and elevate the notation to the status of full-fledged requirements engineering language for specifying functional properties of reactive systems. We do this by (1) extending LSCs syntax,(2) providing a semantics based on game theory,(3) defining proof obligations,(4) giving direction for implementing automated verification mechanisms and (5) illustrating our contributions on an air traffic control case-study.", "num_citations": "1\n", "authors": ["1456"]}
{"title": "Comparison of Goal Languages: an Experiment\n", "abstract": " Although goal techniques are a recognised research area, there is little done with their application in practise. Only few case studies are reported to prove usefulness of the goal techniques for modelling. In this work we present an experiment where the quality of two goal languages\u2013i* and KAOS\u2013is investigated by the means of the semiotic quality framework. We believed that a high quality language would contribute to effectiveness and efficiency of modelling and result with high quality models. But the experiment showed that model quality much depends on the particular language characteristics with respect to a given context. The experiment indicated weak and strong properties of goal modelling languages. For researchers the findings highlight trends for language improvements. The results are useful for practitioners because they facilitate decisions about language selection and use.", "num_citations": "1\n", "authors": ["1456"]}
{"title": "MetaDone, a flexible metaCASE to support evolution\n", "abstract": " englebert-metacase and evolution-PAI Page 1 1/23 University of Namur, Belgium Computer Science Faculty MetaDone, a flexible metaCASE to support evolution MetaDone, a flexible metaCASE to support evolution V. Englebert P. Heymans V. Englebert P. Heymans Page 2 2/23 University of Namur, Belgium Computer Science Faculty Plan 1. Motivations with 4 Scenarios 2. The MetaCASE Approach 3. MetaDone: a flexible metaCASE 4. Scenarios support by MetaDone Page 3 3/23 University of Namur, Belgium Computer Science Faculty Part 1 Motivations: 4 Scenarios Which problems metaCASE technologies can address ? Page 4 4/23 University of Namur, Belgium Computer Science Faculty The Vision Software System Business Needs { }n M MM ,,, 2 1 L Models models supports understood as Page 5 5/23 University of Namur, Belgium Computer Science Faculty Model Evolution: several scenarios \u2022 Evolution \u2026", "num_citations": "1\n", "authors": ["1456"]}