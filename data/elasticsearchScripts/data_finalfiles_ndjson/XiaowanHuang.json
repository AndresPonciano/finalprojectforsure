{"title": "Using Integer Clocks to Verify the Timing-Sync Sensor Network Protocol.\n", "abstract": " We use the UPPAAL model checker for Timed Automata to verify the Timing-Sync time-synchronization protocol for sensor networks (TPSN). The TPSN protocol seeks to provide network-wide synchronization of the distributed clocks in a sensor network. Clock-synchronization algorithms for sensor networks such as TPSN must be able to perform arithmetic on clock values to calculate clock drift and network propagation delays. They must be able to read the value of a local clock and assign it to another local clock. Such operations are not directly supported by the theory of Timed Automata. To overcome this formal-modeling obstacle, we augment the UPPAAL specification language with the integer clock derived type. Integer clocks, which are essentially integer variables that are periodically incremented by a global pulse generator, greatly facilitate the encoding of the operations required to synchronize clocks as in the TPSN protocol. With this integer-clock-based model of TPSN in hand, we use UPPAAL to verify that the protocol achieves network-wide time synchronization and is devoid of deadlock. We also use the UPPAAL Tracer tool to illustrate how integer clocks can be used to capture clock drift and resynchronization during protocol execution.", "num_citations": "12\n", "authors": ["1678"]}
{"title": "Compiler-assisted software model checking and monitoring\n", "abstract": " In this dissertation we present a compiler-assisted execution-based software model checking method targeting all languages that are acceptable by the compiler. We treat the intermediate representation of the program under compilation as a language and interpret it using a customized virtual machine. Our model checkers are based on this intermediate representation level virtual machine and have full access to its states. We implemented two model checkers: a stateless Monte Carlo model checker GMC 2 and a bounded concrete-symbolic model checker using the dynamic path reduction algorithm for reachability problems of linear C programs.", "num_citations": "2\n", "authors": ["1678"]}