{"title": "lprof: A non-intrusive request flow profiler for distributed systems\n", "abstract": " Applications implementing cloud services, such as HDFS, Hadoop YARN, Cassandra, and HBase, are mostly built as distributed systems designed to scale. In order to analyze and debug the performance of these systems effectively and efficiently, it is essential to understand the performance behavior of service requests, both in aggregate and individually.", "num_citations": "139\n", "authors": ["1852"]}
{"title": "SAC: exploiting stable set model to enhance cacheFiles\n", "abstract": " Client cache is an important technology for the optimization of distributed and centralized storage systems. As a representative client cache system, the performance of CacheFiles is limited by transition faults. Furthermore, CacheFiles just supports a simple LRU policy with a tightly-coupled design. To overcome these limitations, we propose to employ Stable Set Model (SSM) to improve CacheFiles and design an enhanced CacheFiles, SAC. SSM assumes that data access can be decomposed to access on some stable sets, in which elements are always repeatedly accessed or not accessed together. Using SSM methods can improve the cache management and reduce the effect of transition faults. We also adopt looselycoupled methods to design prefetch and replacement policies. We implement our scheme on Linux 2.6.32 and measure the execution time of the scheme with various file I/O benchmarks\u00a0\u2026", "num_citations": "6\n", "authors": ["1852"]}
{"title": "Stable set model based methods for large-capacity client cache management\n", "abstract": " The performance and scalability of centralized network storage systems cannot follow the processing needs of rapid growing data. Using large-capacity client caches is one of the solutions. This paper points out that the efficiency of \u201cdata exchange\u201d between phases is the most important problem in managing large-capacity cache. And then, it defines Stable Set Model (SSM), which can characterize the phase-transition behaviour of a data access stream, and obtain granularity selection and two localities, so as to increase the efficiency of client caches in \u201cdata exchange\u201d. Using SSM based methods can optimize the backend load and response time of network storage systems. Experimental results show that they can decrease backend load to 2.0%~15.8% and total response time to 0.8%~15.2% compared with traditional ones when cache capacity is large.", "num_citations": "3\n", "authors": ["1852"]}