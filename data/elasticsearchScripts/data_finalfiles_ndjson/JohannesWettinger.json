{"title": "Combining declarative and imperative cloud application provisioning based on TOSCA\n", "abstract": " The automation of application provisioning is one of the most important issues in Cloud Computing. The Topology and Orchestration Specification for Cloud Applications (TOSCA) supports automating provisioning by two different flavors: (i) declarative processing is based on interpreting application topology models by a runtime that infers provisioning logic whereas (ii) imperative processing employs provisioning plans that explicitly describe the provisioning tasks to be executed. Both flavors come with benefits and drawbacks. This paper presents a means to combine both flavors to resolve drawbacks and to profit from benefits of both worlds: we propose a standards-based approach to generate provisioning plans based on TOSCA topology models. These provisioning plans are workflows that can be executed fully automatically and may be customized by application developers after generation. We prove the\u00a0\u2026", "num_citations": "146\n", "authors": ["1937"]}
{"title": "Standards-based DevOps automation and integration using TOSCA\n", "abstract": " DevOps is an emerging paradigm to tightly integrate developers with operations personnel. This is required to enable fast and frequent releases in the sense of continuously delivering software. Users and customers of today's Web applications and mobile apps running in the Cloud expect fast feedback to problems and feature requests. Thus, it is a critical competitive advantage to be able to respond quickly. Beside cultural and organizational changes that are necessary to implement DevOps in practice, tooling is required to implement end-to-end automation of deployment processes. Automation is the key to efficient collaboration and tight integration between development and operations. The DevOps community is constantly pushing new approaches, tools, and open-source artifacts to implement such automated processes. However, as all these proprietary and heterogeneous DevOps automation approaches\u00a0\u2026", "num_citations": "91\n", "authors": ["1937"]}
{"title": "Streamlining DevOps automation for Cloud applications using TOSCA as standardized metamodel\n", "abstract": " DevOps as an emerging paradigm aims to tightly integrate developers with operations personnel. This enables fast and frequent releases in the sense of continuously delivering new iterations of a particular application. Users and customers of today\u2019s Web applications and mobile apps running in the Cloud expect fast feedback to problems and feature requests. Thus, it is a critical competitive advantage to be able to respond quickly. Besides cultural and organizational changes that are necessary to apply DevOps in practice, tooling is required to implement end-to-end automation of deployment processes. Automation is the key to efficient collaboration and tight integration between development and operations. The DevOps community is constantly pushing new approaches, tools, and open-source artifacts to implement such automated processes. However, as all these proprietary and heterogeneous DevOps\u00a0\u2026", "num_citations": "88\n", "authors": ["1937"]}
{"title": "Optimal Distribution of Applications in the Cloud\n", "abstract": " The emergence of the cloud computing paradigm introduces a number of challenges and opportunities to application and system developers. The multiplication and proliferation of available offerings by cloud service providers, for example, makes the selection of an appropriate solution complex and inefficient. On the other hand, this availability of offerings creates additional possibilities in the way that applications can be engineered or re-engineered to take advantage of e.g. the elastic nature, or the pay per use model of cloud computing. This work proposes a formal framework which allows to explore the possibility space of optimally distributing application components across cloud offerings in an efficient and flexible manner. The proposed approach introduces a set of innovative in their use concepts and demonstrates how this framework can be used in practice by means of a running scenario.", "num_citations": "72\n", "authors": ["1937"]}
{"title": "Integrating Configuration Management with Model-driven Cloud Management based on TOSCA.\n", "abstract": " 1Institute of Architecture of Application Systems, University of Stuttgart, Universit\u00e4tsstra\u00dfe 38, Stuttgart, Germany 2IBM Germany Research & Development GmbH, Sch\u00f6naicher Stra\u00dfe 220, B\u00f6blingen, Germany 1wettinger, binz, breitenbuecher, leymannl@ iaas. uni-stuttgart. de, 1michaelbehrendt, gbreiter, smoser, ischwert, thomas. spatzierl@ de. ibm. com", "num_citations": "71\n", "authors": ["1937"]}
{"title": "Declarative vs. imperative: two modeling patterns for the automated deployment of applications\n", "abstract": " In the field of cloud computing, the automated deployment of applications is of vital importance and supported by diverse management technologies. However, currently there is no systematic knowledge collection that points out commonalities, capabilities, and differences of these approaches. This paper aims at identifying common modeling principles employed by technologies to create automatically executable models that describe the deployment of applications. We discuss two fundamental approaches for modeling the automated deployment of applications: imperative procedural models and declarative models. For these two approaches, we identified (i) basic pattern primitives and (ii) documented these approaches as patterns that point out frequently occurring problems in certain contexts including proven modeling solutions. The introduced patterns foster the understanding of common application deployment concepts, are validated regarding their occurrence in established state-of-theart technologies, and enable the transfer of that knowledge.", "num_citations": "69\n", "authors": ["1937"]}
{"title": "DevOpSlang - Bridging the Gap Between Development and Operations\n", "abstract": " DevOps is an emerging paradigm to eliminate the split and barrier between developers and operations personnel that traditionally exists in many enterprises today. The main promise of DevOps is to enable continuous delivery of software in order to enable fast and frequent releases. This enables quick responses to changing requirements of customers and thus may be a critical competitive advantage. In this work we propose a language called DevOpSlang in conjunction with a methodology to implement DevOps as an efficient means for collaboration and automation purposes. Efficient collaboration and automation are the key enablers to implement continuous delivery and thus to react to changing customer requirements quickly.", "num_citations": "67\n", "authors": ["1937"]}
{"title": "Integrated cloud application provisioning: interconnecting service-centric and script-centric management technologies\n", "abstract": " Modern Cloud applications employ a plethora of components and XaaS offerings that need to be configured during provisioning. Due to increased heterogeneity, complexity is growing and existing approaches reach their limits if multiple different provisioning and configuration technologies are involved. They are not able to integrate them in an automated, flexible, and customizable way. Especially combining proprietary management services with script-centric configuration management technologies is currently a major challenge. To enable automated provisioning of such applications, we introduce Generic Lifecycle Management Planlets that provide a means to combine custom provisioning logic with common provisioning tasks. We implemented planlets for provisioning and customization of components and XaaS offerings based on both SOAP and RESTful Web services as well as configuration\u00a0\u2026", "num_citations": "64\n", "authors": ["1937"]}
{"title": "Automated capturing and systematic usage of devops knowledge for cloud applications\n", "abstract": " DevOps is an emerging paradigm to actively foster the collaboration between system developers and operations in order to enable efficient end-to-end automation of software deployment and management processes. DevOps is typically combined with Cloud computing, which enables rapid, on-demand provisioning of underlying resources such as virtual servers, storage, or database instances using APIs in a self-service manner. Today, an ever-growing amount of DevOps tools, reusable artifacts such as scripts, and Cloud services are available to implement DevOps automation. Thus, informed decision making on the appropriate approach (es) for the needs of an application is hard. In this work we present a collaborative and holistic approach to capture DevOps knowledge in a knowledgebase. Beside the ability to capture expert knowledge and utilize crowd sourcing approaches, we implemented a crawling\u00a0\u2026", "num_citations": "57\n", "authors": ["1937"]}
{"title": "Unified Invocation of Scripts and Services for Provisioning, Deployment, and Management of Cloud Applications Based on TOSCA\n", "abstract": " There are several script-centric approaches, APIs, and tools available to implement automated provisioning, deployment, and management of applications in the Cloud. The automation of all these aspects is key for reducing costs. However, most of these approaches are script-centric and provide proprietary solutions employing different invocation mechanisms, interfaces, and state models. Moreover, most Cloud providers offer proprietary Web services or APIs to be used for provisioning and management purposes. Consequently, it is hard to create deployment and management plans integrating several of these approaches. The goal of our work is to come up with an approach for unified invocation of scripts and services without handling each proprietary interface separately. A prototype realizes the presented approach in a standards-based manner using the Topology and Orchestration Specification for Cloud Applications (TOSCA).", "num_citations": "56\n", "authors": ["1937"]}
{"title": "Compensation-based vs. convergent deployment automation for services operated in the cloud\n", "abstract": " Leading paradigms to develop and operate applications such as continuous delivery, configuration management, and the merge of development and operations (DevOps) are the foundation for various techniques and tools to implement automated deployment. To expose such applications as services (SaaS) to users and customers these approaches are typically used in conjunction with Cloud computing to automatically provision and manage underlying resources such as storage or virtual machines. A major class of these automation approaches follows the idea of converging toward a desired state of a resource (e.g., a middleware component deployed on a virtual machine). This is achieved by repeatedly executing idempotent scripts until the desired state is reached. Because of major drawbacks of this approach, we present an alternative deployment automation approach based on compensation and\u00a0\u2026", "num_citations": "28\n", "authors": ["1937"]}
{"title": "Native cloud applications: why monolithic virtualization is not their foundation\n", "abstract": " Due to the current hype around cloud computing, the term \u2018native cloud application\u2019 becomes increasingly popular. It suggests an application to fully benefit from all the advantages of cloud computing. Many users tend to consider their applications as cloud native if the application is just bundled as a monolithic virtual machine or container. Even though virtualization is fundamental for implementing the cloud computing paradigm, a virtualized application does not automatically cover all properties of a native cloud application. In this work, which is an extension of a previous paper, we propose a definition of a native cloud application by specifying the set of characteristic architectural properties, which a native cloud application has to provide. We demonstrate the importance of these properties by introducing a typical scenario from current practice that moves an application to the cloud. The identified properties\u00a0\u2026", "num_citations": "25\n", "authors": ["1937"]}
{"title": "Enabling dynamic deployment of cloud applications using a modular and extensible PaaS environment\n", "abstract": " The Platform as a Service (PaaS) model promotes the development and deployment of applications on top of middleware solutions offered by the provider. Deploying an application in this model entails both the deployment of the application on top of the platform, but potentially also the deployment of the middleware components required by the application. Existing works enable the abstraction from the underlying infrastructure and allow for the creation of generic deployment plans for middleware components that automate the deployment of applications. In this paper we propose a middleware-oriented deployment approach that defines how the deployment of middleware components can be defined in a manner that allows to offer them as PaaS building blocks, and enable the automatic deployment of application components on them. We also present an evaluation of our proposal, together with the lessons\u00a0\u2026", "num_citations": "21\n", "authors": ["1937"]}
{"title": "Middleware-oriented deployment automation for cloud applications\n", "abstract": " Fully automated provisioning and deployment of applications is one of the most essential prerequisites to make use of the benefits of Cloud computing in order to reduce the costs for managing applications. A huge variety of approaches, tools, and providers are available to automate the involved processes. The DevOps community, for instance, provides tooling and reusable artifacts to implement deployment automation in an application-oriented manner. Platform-as-a-Service frameworks are available for the same purpose. In this work we systematically classify and characterize available deployment approaches independently from the underlying technology used. For motivation and evaluation purposes, we choose Web applications with different technology stacks and analyze their specific deployment requirements. Afterwards, we provision these applications using each of the identified types of deployment\u00a0\u2026", "num_citations": "20\n", "authors": ["1937"]}
{"title": "Enabling DevOps collaboration and continuous delivery using diverse application environments\n", "abstract": " Aiming to provide the means for efficient collaboration between development and operations personnel, the DevOps paradigm is backed by an increasingly growing collection of tools and reusable artifacts for application management. Continuous delivery pipelines are established based on these building blocks by implementing fully automated, end-to-end application delivery processes, which significantly shorten release cycles to reduce risks and costs as well as gaining a critical competitive advantage. Diverse application environments need to be managed along the pipeline such as development, build, test, and production environments. In this work we address the need for systematically specifying and maintaining diverse application environment topologies enriched with environment-specific requirements in order to implement continuous delivery pipelines. Beside the representation of such\u00a0\u2026", "num_citations": "19\n", "authors": ["1937"]}
{"title": "Streamlining cloud management automation by unifying the invocation of scripts and services based on TOSCA\n", "abstract": " Today, there is a huge variety of script-centric approaches, APIs, and tools available to implement automated provisioning, deployment, and management of applications in the Cloud. The automation of all these aspects is key for reducing costs. However, most of these approaches are script-centric and provide proprietary solutions employing different invocation mechanisms, interfaces, and state models. Moreover, most Cloud providers offer proprietary APIs to be used for provisioning and management purposes. Consequently, it is hard to create deployment and management plans that integrate multiple of these approaches. The goal of the authors work is to come up with an approach for unifying the invocation of scripts and services without handling each proprietary interface separately. A prototype realizes the presented approach in a standards-based manner using the Topology and Orchestration Specification\u00a0\u2026", "num_citations": "19\n", "authors": ["1937"]}
{"title": "Collaborative gathering and continuous delivery of DevOps solutions through repositories\n", "abstract": " Collaboration is a key aspect for establishing DevOps-oriented processes because diverse experts such as developers and operations personnel need to efficiently work together to deliver applications. For this purpose, highly automated continuous delivery pipelines are established, consisting of several stages and their corresponding application environments (development, test, production, etc.). The DevOps community provides a huge variety of tools and reusable artifacts (i.e. DevOps solutions such as deployment engines, configuration definitions, container images, etc.) to implement such application environments. This paper presents the concept of collaborative solution repositories, which are based on established software engineering practices. This helps to systematically maintain and link diverse solutions. We further discuss how discovery and capturing of such solutions can be automated. To\u00a0\u2026", "num_citations": "18\n", "authors": ["1937"]}
{"title": "DynTail - Dynamically Tailored Deployment Engines for Cloud Applications\n", "abstract": " Shortening software release cycles increasingly becomes a critical competitive advantage, not exclusively for software vendors in the field of Web applications, mobile apps, and the Internet of Things. Today's users, customers, and other stakeholders expect quick responses to occurring issues and feature requests. DevOps and Cloud computing are two key paradigms to enable rapid, continuous deployment and delivery of applications utilizing automated software delivery pipelines. However, it is a highly complex and sophisticated challenge to implement such pipelines by installing, configuring, and integrating corresponding general-purpose deployment automation tooling. Therefore, we present a method in conjunction with a framework and implementation to dynamically generate tailored deployment engines for specific application stacks to deploy corresponding applications. Generated deployment engines\u00a0\u2026", "num_citations": "18\n", "authors": ["1937"]}
{"title": "Characterizing and evaluating different deployment approaches for cloud applications\n", "abstract": " Fully automated provisioning and deployment in order to reduce the costs for managing applications is one of the most essential requirements to make use of the benefits of Cloud computing. Several approaches and tools are available to automate the involved processes. The DevOps community, for example, provides tooling and artifacts to realize deployment automation on Infrastructure as a Service level in a mostly application-oriented manner. Platform as a Service frameworks are also available for the same purpose. In this paper we categorize and characterize available deployment approaches independently from the underlying technology used. For this purpose, we choose Web applications with different technology stacks and analyze their specific deployment requirements. Afterwards, we provision these applications using each of the identified types of deployment approaches in the Cloud. Finally, we\u00a0\u2026", "num_citations": "18\n", "authors": ["1937"]}
{"title": "Dynamic tailoring and cloud-based deployment of containerized service middleware\n", "abstract": " The emergence and consolidation of container-based virtualization techniques has simplified and accelerated the development, provisioning, and deployment of applications for the Cloud. When considering the case of composite service-based applications that rely on service middleware solutions for their operation, container-based virtualization offers the opportunity for rapid and efficient building and deployment of lightweight, optimally configured middleware instances. As such, it provides an ideal tool for the purposes of cloudifying existing middleware solutions and offering them as part of larger PaaS offerings. As part of this effort, our investigation focuses on leveraging and evaluating a container-based virtualization environment towards enabling the assembly, provisioning, and execution of dynamically tailored instances to satisfy service middleware communication requirements of specific applications. For\u00a0\u2026", "num_citations": "12\n", "authors": ["1937"]}
{"title": "Any2API - Automated APIfication\n", "abstract": " APIs are a popular means to expose functionality provided by Cloud-based systems, which are utilized to integrate and orchestrate application as well as management functionality in a programmatic manner. In the domain of application management, they are used to fully automate management processes, for example, to deploy Cloud-based Web applications or back-ends for mobile apps. However, as not all required functionality is exposed through an API natively, such processes additionally involve a multitude of other heterogeneous technologies such as scripting languages and deployment automation tooling. Consequently, combining different technologies in an efficient manner is a complex integration challenge. In this paper, we present a generic approach for automatically generating API implementations for arbitrary executables such as scripts and compiled programs, which are not natively exposed as APIs. This APIfication tackles the aforementioned integration challenges by unifying the invocation of heterogeneous technologies while avoiding the costly and manual wrapping of existing executables because it does not scale. We further present the modular and extensible open-source framework ANY2API that implements our APIfication approach. Furthermore, we evaluate the approach and the framework by measuring the overhead of generating and using API implementations. In addition, we conduct a detailed case study to confirm the technical feasibility of the approach.", "num_citations": "12\n", "authors": ["1937"]}
{"title": "Hybrid TOSCA provisioning plans: integrating declarative and imperative cloud application provisioning technologies\n", "abstract": " The efficient provisioning of complex applications is one of the most challenging issues in Cloud Computing. Therefore, various provisioning and configuration management technologies have been developed that can be categorized as follows: imperative approaches enable a precise specification of the low-level tasks to be executed whereas declarative approaches focus on describing the desired goals and constraints. Since complex applications employ a plethora of heterogeneous components that must be wired and configured, typically multiple of these technologies have to be integrated to automate the entire provisioning process. In a former work, we presented a workflow modelling concept that enables the seamless integration of imperative and declarative technologies. This paper is an extension of that work to integrate the modelling concept with the Cloud standard TOSCA. In particular, we show\u00a0\u2026", "num_citations": "11\n", "authors": ["1937"]}
{"title": "Deployment Aggregates - A Generic Deployment Automation Approach for Applications Operated in the Cloud\n", "abstract": " One of the most essential requirements to make use of the benefits of Cloud computing is fully automated provisioning and deployment of applications including all related resources. This leads to crucial cost reductions when deploying and operating applications in the Cloud because manual processes are slow, error-prone, and thus costly. Both Cloud providers and the open-source community provide a huge variety of tools, APIs, domain-specific languages, and reusable artifacts to implement deployment automation. However, the meta-models behind these approaches are diverse. This diversity makes it challenging to combine different approaches, avoiding vendor lock-in and tooling lock-in. In this work we propose deployment aggregates as a generic means to use and orchestrate different kinds of deployment approaches. We define a generic meta-model and show its relation to existing meta-models in the\u00a0\u2026", "num_citations": "11\n", "authors": ["1937"]}
{"title": "Executing informal processes\n", "abstract": " Processes involving knowledge workers, such as decision-making processes, research processes, development processes, maintenance processes, etc. play a critical role for many organizations because they represent a valuable amount of the work an organization delivers. Therefore, supporting and automating such processes is vitally important for organizations. In our previous work, we have proposed a resource-centric approach called Informal Process Essentials (IPE) to support and to provide a certain degree of automation. The approach enables specifying required resources including autonomous agents of an informal process for accomplishing process goals through creating and initializing IPE models. Initializing an IPE model results in the acquirement of resources that collaboratively work towards the goals specified by the model. In this work, we provide an approach to automating the enactment of\u00a0\u2026", "num_citations": "9\n", "authors": ["1937"]}
{"title": "A Modelling Concept to Integrate Declarative and Imperative Cloud Application Provisioning Technologies.\n", "abstract": " Efficient application provisioning is one of the most important issues in Cloud Computing today. For that purpose, various provisioning automation technologies have been developed that can be generally categorized into two different flavors:(i) declarative approaches are based on describing the desired goals whereas (ii) imperative approaches are used to describe explicit sequences of low-level tasks. Since modern Cloud-based business applications become more and more complex, employ a plethora of heterogeneous components and services that must be wired, and require complex configurations, the two kinds of technologies have to be integrated to model the provisioning of such applications. In this paper, we present a process modelling concept that enables the seamless integration of imperative and declarative provisioning models and their technologies while preserving the strengths of both flavors. We validate the technical feasibility of the approach by applying the concept to the workflow language BPEL and evaluate its features by several criteria.", "num_citations": "9\n", "authors": ["1937"]}
{"title": "Anything to Topology-A Method and System Architecture to Topologize Technology-specific Application Deployment Artifacts.\n", "abstract": " In recent years, many application deployment technologies have emerged such as configuration management tools, eg, Chef and Juju, infrastructure and platform technologies, eg, Cloud Foundry and OpenStack, as well as container-based approaches, eg, Docker. As a result, many repositories exist which contain executable and heavily used artifacts that can be used with these technologies, eg, to deploy a WordPress application. However, to automate the deployment of more complex applications, typically, multiple of these technologies have to be used in combination. Thus, often, diverse artifacts stored in different repositories need to be integrated. This requires expertise about each technology and leads to a manual, complex, and error-prone integration step. In this paper, we tackle these issues: We present a method and system architecture that enables crawling repositories in order to transform the contained artifacts into technology-agnostic topology models, each describing the components that get installed as well as their dependencies. We show how these topologies can be combined to model the deployment of complex applications and how the resulting topology can be deployed automatically by one runtime. To prove the feasibility, we developed and evaluated a prototype based on the TOSCA standard and conducted a case study for Chef artifacts.", "num_citations": "8\n", "authors": ["1937"]}
{"title": "Compensation and convergence\u2014comparing and combining deployment automation approaches\n", "abstract": " Leading paradigms to develop, deploy, and operate applications such as continuous delivery, configuration management, and the merge of development and operations (DevOps) are the foundation for various techniques and tools to implement automated deployment. To make such applications available for users and customers, these approaches are typically used in conjunction with Cloud computing to automatically provision and manage underlying resources such as storage and virtual servers. A major class of these automation approaches follow the idea of converging toward a desired state of a resource (e.g. a middleware component deployed on a virtual machine). This is achieved by repeatedly executing idempotent scripts to reach the desired state. Because of major drawbacks of this approach, we discuss an alternative deployment automation approach based on compensation and fine-grained\u00a0\u2026", "num_citations": "7\n", "authors": ["1937"]}
{"title": "Gathering solutions and providing apis for their orchestration to implement continuous software delivery\n", "abstract": " In traditional IT environments, it is common for software updates and new releases to take up to several weeks or even months to be eventually available to end users. Therefore, many IT vendors and providers of software products and services face the challenge of delivering updates considerably more frequently. This is because users, customers, and other stakeholders expect accelerated feedback loops and significantly faster responses to changing demands and issues that arise. Thus, taking this challenge seriously is of utmost economic importance for IT organizations if they wish to remain competitive. Continuous software delivery is an emerging paradigm adopted by an increasing number of organizations in order to address this challenge. It aims to drastically shorten release cycles while ensuring the delivery of high-quality software. Adopting continuous delivery essentially means to make it economical to constantly deliver changes in small batches. Infrequent high-risk releases with lots of accumulated changes are thereby replaced by a continuous stream of small and low-risk updates. To gain from the benefits of continuous delivery, a high degree of automation is required. This is technically achieved by implementing continuous delivery pipelines consisting of different application-specific stages (build, test, production, etc.) to automate most parts of the application delivery process. Each stage relies on a corresponding application environment such as a build environment or production environment. This work presents concepts and approaches to implement continuous delivery pipelines based on systematically gathered solutions to be\u00a0\u2026", "num_citations": "6\n", "authors": ["1937"]}
{"title": "Streamlining APIfication by generating APIs for diverse executables using any2API\n", "abstract": " For many of today\u2019s systems, diverse application and management functionality is exposed by APIs to be used for integration and orchestration purposes. One important use case is the implementation of fully automated deployment processes that are utilized to create instances of Web applications or back-ends for mobile apps. Not all functionality that needs to be integrated in this context is exposed through APIs natively: such processes typically require a multitude of other heterogeneous technologies such as scripting languages and deployment automation tooling. This makes it hard to seamlessly and efficiently combine and integrate different kinds of building blocks such as scripts and configuration definitions that are required. Therefore, in this paper, we present a generic approach to automatically generate API implementations for arbitrary executables such as scripts and compiled programs, which\u00a0\u2026", "num_citations": "6\n", "authors": ["1937"]}
{"title": "Automated Capturing and Systematic Usage of DevOps Knowledge\n", "abstract": " DevOps is an emerging paradigm to actively foster the collaboration between system developers and operations in order to enable efficient end-to-end automation of software deployment and management processes. DevOps is typically combined with Cloud computing, which enables rapid, on-demand provisioning of underlying resources such as virtual servers, storage, or database instances using APIs in a self-service manner. Today, an ever-growing amount of DevOps tools, reusable artifacts such as scripts, and Cloud services are available to implement DevOps automation. Thus, informed decision making on the appropriate approach (es) for the needs of an application is hard. In this work we present a collaborative and holistic approach to capture DevOps knowledge in a knowledgebase. Beside the ability to capture expert knowledge and utilize crowdsourcing approaches, we implemented a crawling framework to automatically discover and capture DevOps knowledge. Moreover, we show how this knowledge is utilized to deploy and operate Cloud applications.", "num_citations": "6\n", "authors": ["1937"]}
{"title": "Native Cloud Applications: Why Virtual Machines, Images and Containers Miss\n", "abstract": " Due to the current hype around cloud computing, the term \u201cnative cloud application\u201d becomes increasingly popular. It suggests an application to fully benefit from all the advantages of cloud computing. Many users tend to consider their applications as cloud native if the application is just bundled in a virtual machine image or a container. Even though virtualization is fundamental for implementing the cloud computing paradigm, a virtualized application does not automatically cover all properties of a native cloud application. In this work, we propose a definition of a native cloud application by specifying the set of characteristic architectural properties, which a native cloud application has to provide. We demonstrate the importance of these properties by introducing a typical scenario from current practice that moves an application to the cloud. The identified properties and the scenario especially show why virtualization alone is insufficient to build native cloud applications. Finally, we outline how native cloud applications respect the core principles of service-oriented architectures, which are currently hyped a lot in the form of microservice architectures.", "num_citations": "4\n", "authors": ["1937"]}
{"title": "Concepts for integrating DevOps methodologies with model-driven cloud management based on TOSCA\n", "abstract": " The paradigm of Cloud computing introduces new approaches to manage IT services and applications. Those approaches overcome traditional IT infrastructure and service management. One of the main goals of Cloud computing is to automate the whole management of IT services in order to reduce costs and to make the execution of management tasks less error-prone. To make this happen, Cloud providers offer proprietary tools to create and manage services in the Cloud. However, when services get more complex it is hard to manage them because those tools aim to be simple and thus provide limited functionality only. In addition, a particular service that was built based on a certain Cloud offering is bound to this offering including all its management aspects. Consequently, a service cannot be easily moved from one Cloud provider's infrastructure to another one's infrastructure.  Today, tools and frameworks implementing so called \"DevOps methodologies\" can be used to realize management of Cloud services without binding a service to a particular Cloud provider. Nevertheless, complex services are still hard to manage by following those methodologies. To make such services manageable and enable automation of management tasks, a holistic service model is needed. Thus, model-driven Cloud management is an emerging paradigm to realize a holistic management approach for services in the Cloud. Because the DevOps approach and the model-driven approach are originating in different backgrounds, model-driven Cloud management does not cover some aspects of DevOps methodologies that are key for Cloud services.  This thesis\u00a0\u2026", "num_citations": "2\n", "authors": ["1937"]}
{"title": "Enhancing Cloud Application DevOps Using Dynamically Tailored Deployment Engines\n", "abstract": " Shortening software release cycles increasingly becomes a critical competitive advantage as today\u2019s users, customers, and other stakeholders expect quick responses to occurring issues and feature requests. DevOps practices and Cloud computing are two key paradigms to tackle these issues by enabling rapid and continuous delivery of applications, utilizing automated software delivery pipelines. However, it is a complex and sophisticated challenge to implement such pipelines by installing, configuring, orchestrating, and integrating the required deployment automation solutions. Therefore, we present a method in conjunction with a framework and implementation to dynamically generate tailored deployment automation engines for specific application stacks, which are packaged in a portable manner to run them on various platforms and infrastructures. The core of our work is based on generating APIs for arbitrary deployment executables such as scripts and plans that perform different tasks in the automated deployment process. As a result, deployment tasks can be triggered through generated API endpoints, abstracting from lower-level, technical details of diverse deployment automation tooling. Beside a quantitative evaluation, we discuss two case studies in this context, one focusing on microservice architectures, the other one considering application functionality and its relation to deployment functionality.", "num_citations": "1\n", "authors": ["1937"]}
{"title": "A service-oriented and cloud-based statistical analysis framework\n", "abstract": " Cloud Computing has gained popularity among e-Science environments after realizing the propitious use of economical provisions for delivering IT services and the range of resources offered by the cloud for the support, maintenance, and security of running the computation based applications. Cloud Computing being a recently growing technology offers various deployment and service models. In Software as a Service (SaaS) model, the applications and software run on the cloud and are available as 'pay-per-use'. As computing becomes more pervasive within the organization, the increase in complexity to manage the infrastructure of disparate architectures, distributed data and software has made computing very expensive. Cloud offerings promise to deliver all the functionality of existing information technology services at an economical cost. Researchers and scientists use resources provided by the cloud to handle large research datasets and results. The main advantages in Cloud computing are related to dynamic scaling of resources, which are able to adapt to changes based on demand of resources. Another advantage of cloud offering enables the use of multi-tenancy techniques to allow the sharing of resources between different users towards achieving the economy of scale along with considering data isolation as a dominant feature. Representational State Transfer (REST) based architectural style has gained popularity for designing web service features like statelessness, modifiability, portability and simplicity. REST tends to focus on the components involved and their interactions along with interpretation of the significant data\u00a0\u2026", "num_citations": "1\n", "authors": ["1937"]}
{"title": "Dynamic deployment of specialized ESB instances in the cloud\n", "abstract": " In the last years the interaction among heterogeneous applications within one or among multiple enterprises has considerably increased. This fact has arisen several challenges related to how to enable the interaction among enterprises in an interoperable manner. Towards addressing this problem, the Enterprise Service Bus (ESB) has been proposed as an integration middleware capable of wiring all the components of an enterprise system in a transparent and interoperable manner. Enterprise Service Buses are nowadays used to transparently establish and handle interactions among the components within an application or with consumed external services. There are several ESB solutions available in the market as a result of continuously developing message-based approaches aiming at enabling interoperability among enterprise applications. However, the configuration of an ESB is typically custom, and complex. Moreover, there is little support and guidance for developers related to how to efficiently customize and configure the ESB with respect to their application requirements. Consequently, this fact also increments notably the maintenance and operational costs for enterprises. Our target is mainly to simplify the configuration tasks at the same time as provisioning customized ESB instances to satisfy the application's functional and non-functional requirements. Similar works focus on optimizing existing ESB configurations based on runtime reconfiguration rather than offering customized light-weight middleware components. This Master thesis aims at providing the means to build customized and specialized ESB instances following a\u00a0\u2026", "num_citations": "1\n", "authors": ["1937"]}
{"title": "Improving Portability of Cloud Service Topology Models Relying on Script-Based Deployment.\n", "abstract": " Portability is key for services running in the Cloud to prevent vendor lock-in. Today, many Cloud services are portable and can thus be moved from one Cloud provider to another. However, the management of these services is often bound to provider-specific management tooling. Thus, the way of management of a particular Cloud service may completely change when moving it to another Cloud provider. This paper presents concepts to improve the portability of Cloud service topology models that are deployed and managed using scripts. We highlight the challenges of a semi-automatic procedure to generate portable TOSCA-compliant topology model components based on Juju topology model components.", "num_citations": "1\n", "authors": ["1937"]}