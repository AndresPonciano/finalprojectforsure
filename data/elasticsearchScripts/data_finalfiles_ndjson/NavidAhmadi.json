{"title": "Analyzing the learning process in online educational game design: A case study\n", "abstract": " Educational game design environments are used for teaching computational thinking and software engineering concepts to novices. In software engineering education, there has recently been calls for \"innovative methods for software teaching and training in online courses\" (http://2014.icse-conferences.org/seet). However, to date, learning these concepts is tied to a formal learning environment and the presence of a teacher. In line with the new educational opportunities provided by the Web such as massive open online courses (MOOCs) and e-learning 2.0 platforms, we have created an online educational game design environment with integrated learning resources including video tutorials, showcases, and communication tools. To understand the effect of online educational game design environments with integrated support for learning on novices' use of the system and their learning, we conducted a mixed\u00a0\u2026", "num_citations": "11\n", "authors": ["2282"]}
{"title": "End-user programming of web-native interactive applications\n", "abstract": " Web 2.0 has enabled Web users to create and share a variety of hyper-text based artifacts including embedded images, sound, and video on the Web. Creating Web-based interactive artifacts such as computer games, however, has remained a challenge: to end users due to the lack of end user programming tools; and to programmers due to the poor interactivity performance of the Web. With the emergence of HTML5 and improving performance of JavaScript engines, professional Web programmers have only just begun to develop Web-native interactive artifacts. Today's standard Web technologies make the Web a hospitable platform for efficient interactive applications both for professional programmers and end-users. With proper support, in tools and languages, end-user programming of interactive applications is feasible. In this paper, we review the current state of Web application development and the\u00a0\u2026", "num_citations": "11\n", "authors": ["2282"]}
{"title": "Flexible matching and ranking of web service advertisements\n", "abstract": " With the growing number of service advertisements in service marketplaces, there is a need for matchmakers which select and rank functionally similar services based on non-functional properties, such as QoS and reputation parameters. Current matchmakers only support predefined service description languages and predefined third-party repositories of service description documents, which both are hard-coded inside their internal structure, forcing providers to publish their services using a specific service publishing component. Therefore, current matchmakers are not able to look for existing services which are published using different service publishers.", "num_citations": "11\n", "authors": ["2282"]}
{"title": "Helping novice programmers to bootstrap in the cloud: Incorporating support for computational thinking into the game design process\n", "abstract": " Game design environments are traditionally used as means for engaging non-programmers in the learning process. However, these environments lack specific support for teaching computational thinking to novices. Typically, such skills are acquired in ad hoc practical sessions with supervision provided by teachers or peers. The usual scenario is where a teacher guides the students in solving these problems during a game design session. In informal learning settings, step-by-step tutorials for creating existing games are used to compensate for the lack of computer support for solving design and computational problems. In this paper we suggest a game design process that combines support for computational thinking with tool usage, by identifying the most common computational thinking problems and providing a generic solution to them. We have evaluated our solution in the context of AgentWeb, an online cloud\u00a0\u2026", "num_citations": "10\n", "authors": ["2282"]}
{"title": "Collective programming: Making end-user programming (more) social\n", "abstract": " The do-it-yourself Web 2.0 culture is quickly creating and sharing more end-user produced content. Gradually moving from static content, such as pictures and text, to interactive content, such as end-user programmed games, the artifacts created and shared have become significantly more sophisticated. The next frontier to make end-user programming more social is to move beyond the current create, upload, share, download, and repeat Web 2.0 models. Collective Programming is a framework that fuses 100% Web-native end-user programming tools with real-time communication mechanisms into a cloud-based multi end-user programming environment. A prototype built, called CyberCollage, enables groups of students to work on game design projects together: they can play multi-user games, change game worlds in real-time, and engage in virtual pair programming.", "num_citations": "10\n", "authors": ["2282"]}
{"title": "Engineering an open-web educational game design environment\n", "abstract": " Educational game design environments have long been employed as an engaging medium for teaching computer programming and software engineering concepts such as objects, agents, instances, behavior, and interaction. However, in contrast to the collaborative nature of programming, in particular among novice programmers, existing game design environments are solitary desktop-based applications with no or very limited support for sharing and collaboration. We have taken advantage of Web 2.0 technologies and its participative culture to develop a collaborative platform around game design activities that encourages social learning and integrates into the students' online social presence and lifestyle. We have employed open-Web technologies to build a game design environment using only HTML5 and JavaScript that lets users practice the game design and programming activities right inside their\u00a0\u2026", "num_citations": "8\n", "authors": ["2282"]}
{"title": "Collaborative end-user development on handheld devices\n", "abstract": " Web 2.0 has enabled end users to collaborate through their own developed artifacts, moving on from text (e.g., Wikipedia, Blogs) to images (e.g., Flickr) and movies (e.g., YouTube), changing end-userpsilas role from consumer to producer. But still there is no support for collaboration through interactive end-user developed artifacts, especially for emerging handheld devices, which are the next collaborative platform. Featuring fast always-on networks, Web browsers that are as powerful as their desktop counterparts, and innovative user interfaces, the newest generation of handheld devices can run highly interactive content as Web applications. We have created Ristretto  Mobile , a Web-compliant framework for running end-user developed applications on handheld devices. The Web-based Ristretto  Mobile  includes compiler and runtime components to turn end-user applications into Web applications that can run\u00a0\u2026", "num_citations": "7\n", "authors": ["2282"]}
{"title": "Enabling cooperative educational game design on the web\n", "abstract": " Educational game design environments enable end users to create computer games and are used as an engaging medium to teach programming to novice programmers. Although the cooperative dimension of end-user programming has been recognized and collaboration among novice programmers is advised, educational game design environments have remained solitary and desktop based, with only limited support for sharing\u2014at most through a supplementary Website. Inspired by cooperation benefits of Web 2.0, we have developed AgentWeb, a fully Web-based game design environment that incorporates cooperation tools into the game design process. Coupled with the participative nature of Web 2.0 applications, AgentWeb enables a richer class of learning and collaboration in which the download-upload operations are unnecessary and users are given instant access to the design and\u00a0\u2026", "num_citations": "5\n", "authors": ["2282"]}
{"title": "Performance evaluation of user-created open-web games\n", "abstract": " The rise of HTML5 and Web browsers' execution performance has led to the emergence of several open-Web games developed by professional developers but not by end users. To create their games, end users require higher level development environments and domain-specific languages which impose execution performance overhead. This overhead becomes a critical factor in determining whether the Web can be used as a hosting platform for end-user programming of computer games. In this article we present the performance evaluation results of user-created games developed using AgentWeb, an open-Web game design environment for non-programmers. Our findings show that Web is a hospitable environment for executing games built using high-level game design environments.", "num_citations": "5\n", "authors": ["2282"]}
{"title": "Towards democratizing computer science education through social game design\n", "abstract": " Computer science and software engineering education are limited to formal courses that are being taught in the school. Those who do not have access to the educational courses miss the learning context, even if educational tools are accessible for free. Computer game design has been employed as an engaging medium for practicing software engineering and computer programming skills. However, collaborative work is not supported by educational game design environments and peer learning is limited to face-to-face communication in the classroom. In this paper, we suggest democratizing computer science education by incorporating social learning into the educational game design using existing Web 2.0 mechanisms. Consequently, online users will benefit from situated learning in the game design activities that take place in their social networking space. We present AgentWeb, a Web-based game design\u00a0\u2026", "num_citations": "2\n", "authors": ["2282"]}
{"title": "Supporting domain-specific programming in Web 2.0: a case study of smart devices\n", "abstract": " Web 2.0 communities emerge regularly with the growing need for domain-specific programming over Web APIs. Even though Web mashups provide access to Web APIs, they ignore domain-specific programming needs. On the other hand, developing domain-specific languages (DSLs) is costly and not feasible for such ad hoc communities. We propose User Language Domain (ULD): an intermediate Web-based architecture using a domain-specific embedded languages approach that reduces the cost of DSL development to plugging the Web APIs into a host end user programming language. We have implemented the proposed architecture in the context of smart devices, where we plug the functionality of different Lego Mindstorms devices into a Web-based visual programming language. We expect that several domains, such as smart homes or wearable computers can use the ULD architecture to reduce\u00a0\u2026", "num_citations": "2\n", "authors": ["2282"]}
{"title": "Beyond upload and download: enabling game design 2.0\n", "abstract": " The participative culture of Web 2.0 has increased the interest of online users in developing interactive artifacts such as games. However, educational computer games as the media to teach computer programming to end users are not cultivated in this culture yet. While several platforms enable sharing games through the Web, the game design process and its educational values are either lost or limited to downloading and uploading source in order to explore and modify the game program. In this research I present AgentWeb, a first-of-a-kind Web-based game design and programming environment. Targeted for the masses, AgentWeb provides visual programming language and runtime system for developing games inside the browser. Built using open Web technologies, AgentWeb can be easily incorporated into the online social networking environments, enabling users to develop, share, explore and\u00a0\u2026", "num_citations": "1\n", "authors": ["2282"]}