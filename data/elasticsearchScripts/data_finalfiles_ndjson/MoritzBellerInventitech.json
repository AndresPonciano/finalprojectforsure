{"title": "How to Catch \u2019Em All: WatchDog, a Family of IDE Plug-Ins to Assess Testing\n", "abstract": " As software engineering researchers, we are also zealous tool smiths. Building a research prototype is often a daunting task, let alone building an industry-grade family of tools supporting multiple platforms to ensure the generalizability of results. In this paper, we give advice to academic and industrial tool smiths on how to design and build an easy-to-maintain architecture capable of supporting multiple integrated development environments (IDEs). Our experiences stem from WatchDog, a multi-IDE infrastructure that assesses developer testing activities in vivo and that over 2,000 registered developers use. To these software engineering practitioners, WatchDog provides real-time and aggregated feedback in the form of individual testing reports.Project Website: http://www.testroots.org Demonstration Video: https://youtu.be/zXIihnmx3UE.", "num_citations": "12\n", "authors": ["966"]}
{"title": "PR\u00c4ZI: From Package-based to Precise Call-based Dependency Network Analyses\n", "abstract": " Package-based dependency networks model which software packages depend on which other packages. Researchers and practitioners have used them to achieve a great number of analyses, including automatically warning for security vulnerability, ecosystem health and license compliance issues. However, traditional package-based dependency networks are in-precise, severely limiting their use in practice. In this paper, we present a novel and general approach named PR AZI to construct callbased dependency networks beyond a single program, its initial prototypical implementation RUSTPR AZI for the Rust library system CRATES. IO, an evaluation of its soundness and precision, and two sample applications with it. Our case study on security vulnerabilities showed that RUSTPR AZI is three times more accurate than the current state of the art, package-based analyses. PR AZI also opens the door to new applications, eg, an analysis on the prolonged use of deprecated methods. It showed that 48% of the studied dependent packages break when a deprecated function gets removed. Several perils endanger a practical implementation of PR AZI, affecting both its soundness and precision. We discuss and quantify them along the RUSTPR AZI example, equipping researchers and practitioners with guidelines on how to implement PR AZI. Finally, we also show that there is no principal objection to make PR AZI fully sound and precise.", "num_citations": "6\n", "authors": ["966"]}
{"title": "Toward an Empirical Theory of Feedback-Driven Development\n", "abstract": " Software developers today crave for feedback, be it from their peers or even bots in the form of code review, static analysis tools like their compiler, or the local or remote execution of their tests in the Continuous Integration (CI) environment. With the advent of social coding sites like GitHub and tight integration of CI services like Travis CI, software development practices have fundamentally changed. Despite a highly changed software engineering landscape, however, we still lack a suitable description of an individual's contemporary software development practices, that is how an individual code contribution comes to be. Existing descriptions like the v-model are either too coarse-grained to describe an individual contributor's workflow, or only regard a sub-part of the development process like Test-Driven Development. In addition, most existing models are pre-rather than de-scriptive. By contrast, in our thesis, we\u00a0\u2026", "num_citations": "4\n", "authors": ["966"]}
{"title": "What It Would Take to Use Mutation Testing in Industry--A Study at Facebook\n", "abstract": " Traditionally, mutation testing generates an abun-dance of small deviations of a program, called mutants. At industrial systems the scale and size of Facebook\u2019s, doing this is infeasible. We should not create mutants that the test suite would likely fail on or that give no actionable signal to developers. To tackle this problem, in this paper, we semi-automatically learn error-inducing patterns from a corpus of common Java coding errors and from changes that caused operational anomalies at Facebook specifically. We combine the mutations with instrumentation that measures which tests exactly visited the mutated piece of code. Results on more than 15,000 generated mutants show that more than half of the generated mutants survive Facebook\u2019s rigorous test suite of unit, integration, and system tests. Moreover, in a case study with 26 developers, all but two expressed that the mutation exposed a lack of testing in\u00a0\u2026", "num_citations": "3\n", "authors": ["966"]}
{"title": "How Strict is Your Architecture?\n", "abstract": " Software architecture has an important impact on maintainability. One of its key functions is to restrict dependencies between system components. However, there are few objective criteria to quantify how well a given architecture does so. In this paper, we propose an objective measure for architecture strictness and report the findings of our case study on architecture strictness with nine real-world software systems.", "num_citations": "1\n", "authors": ["966"]}