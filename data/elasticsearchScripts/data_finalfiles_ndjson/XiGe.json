{"title": "Reconciling manual and automatic refactoring\n", "abstract": " Although useful and widely available, refactoring tools are underused. One cause of this underuse is that a developer sometimes fails to recognize that she is going to refactor before she begins manually refactoring. To address this issue, we conducted a formative study of developers' manual refactoring process, suggesting that developers' reliance on \u201cchasing error messages\u201d when manually refactoring is an error-prone manual refactoring strategy. Additionally, our study distilled a set of manual refactoring workflow patterns. Using these patterns, we designed a novel refactoring tool called BeneFactor. BeneFactor detects a developer's manual refactoring, reminds her that automatic refactoring is available, and can complete her refactoring automatically. By alleviating the burden of recognizing manual refactoring, BeneFactor is designed to help solve the refactoring tool underuse problem.", "num_citations": "134\n", "authors": ["812"]}
{"title": "BeneFactor: a flexible refactoring tool for eclipse\n", "abstract": " Although broadly available in major software development environments, refactoring tools are still underused. One of the reasons for this underuse is that existing refactoring tools assume that a developer recognizes that she is going to refactor before she even begins. In this paper, we present a flexible refactoring tool called BeneFactor that can be invoked after refactoring begins to safely complete a refactoring change.", "num_citations": "34\n", "authors": ["812"]}
{"title": "One phish, two phish, how to avoid the internet phish: Analysis of training strategies to detect phishing emails\n", "abstract": " Phishing is a social engineering tactic that targets internet users in an attempt to trick them into divulging personal information. When opening an email, users are faced with the decision of determining if an email is legitimate or an attempt at phishing. Although software has been developed to assist the user, studies have shown they are not foolproof, leaving the user vulnerable. Multiple training programs have been developed to educate users in their efforts to make informed decisions; however, training that conveys the real world consequences of phishing or training that increases a user\u2019s fear level have not been developed. Conveying real world consequences of a situation and increasing a user\u2019s fear level have been proven to enhance the effects of training in other fields. Ninety-six participants were recruited and randomly assigned to training programs with phishing consequences, training programs designed\u00a0\u2026", "num_citations": "31\n", "authors": ["812"]}
{"title": "Refactoring-aware code review\n", "abstract": " Code review, where developers manually inspect one another's code changes, improves software quality and transfers knowledge in a team. Unfortunately, tools that support code review treat behavior-preserving changes, or refactorings, and behavior-altering changes, or non-refactorings, the same way, so developers have to spend effort differentiating between the two before they can evaluate the impact of a change set. In this paper, we describe a formative study of 35 developers that motivates the need for separating refactorings from non-refactorings during code review. Then, we present a refactoring-aware code review tool, called ReviewFactor, that differentiates between refactoring and non-refactoring, and allows developers to focus on one of them at a time. Finally, a case study of two open source projects suggests that ReviewFactor detects refactorings in 39% of the commits, and identifies 4.6% of the\u00a0\u2026", "num_citations": "24\n", "authors": ["812"]}
{"title": "Towards refactoring-aware code review\n", "abstract": " Software developers review changes to a code base to prevent new bugs from being introduced. However, some parts of a change are more likely to introduce bugs than others, and thus deserve more care in reviewing. In this short paper, we discuss our ongoing work to build a reviewing tool that automatically determines which changes in a change set are refactorings, uses this information to help the developer distinguish between refactoring and non-refactoring changes, and ultimately reduces the time it takes developers to review code accurately. We also discuss the challenges and opportunities we have faced when building this refactoring-aware code review tool.", "num_citations": "20\n", "authors": ["812"]}
{"title": "How developers use multi-recommendation system in local code search\n", "abstract": " Developers often start programming tasks by searching for relevant code in their local codebase. Previous research suggests that 88% of manually-composed queries retrieve no relevant results. Many searches fail because existing search tools depend solely on string matching with a manually-composed query, which cannot find semantically-related code. To solve this problem, researchers proposed query recommendation techniques to help developers compose queries without the extensive knowledge of the codebase under search. However, few of these techniques are empirically evaluated by the usage data from real-world developers. To fill this gap, we studied several query recommendation techniques by extending Sando and conducting a longitudinal field study. Our study shows that over 30% of all queries were adopted from recommendation; and recommended queries retrieved results 7% more often\u00a0\u2026", "num_citations": "17\n", "authors": ["812"]}
{"title": "Design and evaluation of a multi-recommendation system for local code search\n", "abstract": " Searching for relevant code in the local code base is a common activity during software maintenance. However, previous research indicates that 88% of manually composed search queries retrieve no relevant results. One reason that many searches fail is existing search tools\u2019 dependence on string matching algorithms, which cannot find semantically related code. To solve this problem by helping developers compose better queries, researchers have proposed numerous query recommendation techniques, relying on a variety of dictionaries and algorithms. However, few of these techniques are empirically evaluated by usage data from real-world developers. To fill this gap, we designed a multi-recommendation system that relies on the cooperation between several query recommendation techniques. We implemented and deployed this recommendation system within the Sando code search tool and conducted a\u00a0\u2026", "num_citations": "11\n", "authors": ["812"]}
{"title": "Phishing in international waters: Exploring cross-national differences in phishing conceptualizations between Chinese, Indian and American samples\n", "abstract": " One hundred-sixty four participants from the United States, India and China completed a survey designed to assess past phishing experiences and whether they engaged in certain online safety practices (eg, reading a privacy policy). The study investigated participants' reported agreement regarding the characteristics of phishing attacks, types of media where phishing occurs and the consequences of phishing. A multivariate analysis of covariance indicated that there were significant differences in agreement regarding phishing characteristics, phishing consequences and types of media where phishing occurs for these three nationalities. Chronological age and education did not influence the agreement ratings; therefore, the samples were demographically equivalent with regards to these variables. A logistic regression analysis was conducted to analyze the categorical variables and nationality data. Results\u00a0\u2026", "num_citations": "11\n", "authors": ["812"]}
{"title": "How the Sando search tool recommends queries\n", "abstract": " Developers spend a significant amount of time searching their local codebase. To help them search efficiently, researchers have proposed novel tools that apply state-of-the-art information retrieval algorithms to retrieve relevant code snippets from the local codebase. However, these tools still rely on the developer to craft an effective query, which requires that the developer is familiar with the terms contained in the related code snippets. Our empirical data from a state-of-the-art local code search tool, called Sando, suggests that developers are sometimes unacquainted with their local codebase. In order to bridge the gap between developers and their ever-increasing local codebase, in this paper we demonstrate the recommendation techniques integrated in Sando.", "num_citations": "7\n", "authors": ["812"]}
{"title": "Improving tool support for software developers through refactoring detection\n", "abstract": " With changing software requirements, developers need to maintain the source code of software systems to ensure their continuous usefulness. Maintaining software involves both the functional and nonfunctional improvements of the codebase. The functional improvements, such as adding new features and fixing defects, benefits external clients by enhancing or correcting the behavior of software systems. On the other hand, the nonfunctional improvements enhance the internal quality of the codebase, therefore increasing the longevity of the software under maintenance.", "num_citations": "1\n", "authors": ["812"]}
{"title": "Phishing in international waters\n", "abstract": " One hundred-sixty four participants from the United States, India and China completed a survey designed to assess past phishing experiences and whether they engaged in certain online safety practices (eg, reading a privacy policy). The study investigated participants\u2019 reported agreement regarding the characteristics of phishing attacks, types of media where phishing occurs and the consequences of phishing. A multivariate analysis of covariance indicated that there were significant differences in agreement regarding phishing characteristics, phishing consequences and types of media where phishing occurs for these three nationalities. Chronological age and education did not influence the agreement ratings; therefore, the samples were demographically equivalent with regards to these variables. A logistic regression analysis was conducted to analyze the categorical variables and nationality data. Results based on self-report data indicated that (1) Indians were more likely to be phished than Americans,(2) Americans took protective actions more frequently than Indians by destroying old documents, and (3) Americans were more likely to notice the\" padlock\" security icon than either Indian or Chinese respondents. The potential implications of these results are discussed in terms of designing culturally sensitive anti-phishing solutions.", "num_citations": "1\n", "authors": ["812"]}