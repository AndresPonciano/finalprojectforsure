{"title": "Consistency, independence and consequences in UML and OCL models\n", "abstract": " Properties in UML models are frequently formulated as OCL invariants or OCL pre- and postconditions. The UML-based Specification Environment\u00a0(USE) supports validation and to a certain degree verification of such properties. USE allows the developer to prove the consistency and independence of invariants by building automatically generated test cases. USE also assists the developer in checking consequences and making deductions from invariants by automatically constructing a set of test cases in form of model scenarios. Suspected deductions are either falsified by a counter test case or are shown to be valid in a fixed finite search space.", "num_citations": "95\n", "authors": ["1659"]}
{"title": "OCL tools report based on the ide4OCL feature model\n", "abstract": " Previously we have developed the idea of an Integrated Development Environment for OCL (IDE4OCL). Based on the OCL community's feedback we have also designed and published an IDE4OCL feature model. Here we present a report on selected OCL tools developed by the authors and their teams. Each author gives an overview of their OCL tool, provides a top level architecture, and gives an evaluation of the tool features in a web framework. The framework can also be used by other potential OCL users and tool developers. For users it may serve as an aid to choose a suitable tool for their OCL use scenarios. For tool developers it provides a comparative view for further development of the OCL tools. Our plans are to maintain the collected data and extend this web framework by further OCL tools. Additionally, we would like to encourage sharing of OCL development resources.", "num_citations": "29\n", "authors": ["1659"]}
{"title": "Model-driven standardization of public authority data interchange\n", "abstract": " In the past decade, several electronic data exchange processes between public authorities have been established by the German public administration. In the context of various legacy systems and numerous suppliers of software for public authorities, it is crucial that these interfaces are open and precisely and uniformly defined, in order to foster free competition and interoperability. A community of such projects and specifications for various public administration domains has arisen from an early adopter project in the domain of data interchange between the 5400 German municipal citizen registers. A central coordination office provides a framework for these projects that is put into operation by a unified model-driven method, supported by tools and components, involving UML profiles, model validation, and model-to-text transformations into several technical domains. We report how this model-driven approach has\u00a0\u2026", "num_citations": "25\n", "authors": ["1659"]}
{"title": "Transformation of UML and OCL models into filmstrip models\n", "abstract": " This contribution presents an automatic transformation from UML and OCL models into enriched UML and OCL models, so-called filmstrip models, which embody temporal information when employing OCL while maintaining the same functionality as the original model. The approach uses a combination of object and sequence diagrams that allows for a wide range of possible OCL constraints about sequences of operation calls and their temporal properties. The modeler does not need to account for such properties while creating the original model. Errors found by constraints for the filmstrip model can easily be related back to the original model, as the elements of the filmstrip model are synchronized with the original model and the backwards calculation is generally simple. The approach is implemented in a UML and OCL modeling tool.", "num_citations": "25\n", "authors": ["1659"]}
{"title": "On integrating structure and behavior modeling with OCL\n", "abstract": " Precise modeling with UML and OCL traditionally focuses on structural model features like class invariants. OCL also allows the developer to handle behavioral aspects in form of operation pre- and postconditions. However, behavioral UML models like statecharts have rarely been integrated into UML and OCL modeling tools. This paper discusses an approach that combines precise structure and behavior modeling: Class diagrams together with class invariants restrict the model structure and protocol state machines constrain the model behavior. Protocol state machines can take advantage of OCL in form of OCL state invariants and OCL guards and postconditions for state transitions. Protocol state machines can cover complete object lifecycles in contrast to operation pre- and postconditions which only affect single operation calls. The paper reports on the chosen UML language features and their\u00a0\u2026", "num_citations": "25\n", "authors": ["1659"]}
{"title": "Proving and visualizing OCL invariant independence by automatically generated test cases\n", "abstract": " Within model-driven development, class invariants play a central role. An essential property of a collection of invariants is the independence of each single invariant, i.e., the invariant at hand cannot be deduced from the other invariants. The paper explains with three example models the details of an approach for automatically proving and representing invariant independence on the basis of a script constructing large test cases for the underlying model. Analysis of invariant independence is visualized by means of several diagrams like a \u2018test configuration and result\u2019 diagram, an \u2018invariant dependence detail\u2019 diagram, and an \u2018invariant dependence overview\u2019 diagram. The paper also discusses how to build the test case construction script in a systematic way. The test case construction script is written by the model developer, but a general construction frame for the script is outlined.", "num_citations": "22\n", "authors": ["1659"]}
{"title": "Checking Transformation Model Properties with a UML and OCL Model Validator.\n", "abstract": " This paper studies model transformations in the form of transformation models connecting source and target metamodels. We propose to analyze transformation models with a UML and OCL tool on the basis of an implementation of relational logic on top of Kodkod. Within this approach it is feasible to check for transformation model consistency in different flavors. Certain properties implied by the transformation model, eg whether a particular property is preserved by the transformation, can be inspected as well. As an example, the paper uses the well-known transformation between ER schemata and relational database schemata.", "num_citations": "19\n", "authors": ["1659"]}
{"title": "OCL-based runtime monitoring of JVM hosted applications\n", "abstract": " In this paper we present an approach that enables users to monitor and verify the behavior of an application running on a virtual machine at the model level. Concrete implementations of object-oriented software usually contain a lot of technical", "num_citations": "16\n", "authors": ["1659"]}
{"title": "Ocl-based runtime monitoring of applications with protocol state machines\n", "abstract": " This paper presents an approach that enables users to monitor and verify the behavior of an application running on a virtual machine (like the Java virtual machine) at an abstract model level. Models for object-oriented implementations are often used as a foundation for formal verification approaches. Our work allows the developer to verify whether a model corresponds to a concrete implementation by validating assumptions about model structure and behavior. In previous work, we focused on (a) the validation of static model properties by monitoring invariants and (b) basic dynamic properties by specifying pre- and postconditions of an operation. In this paper, we extend our work in order to verify and validate advanced dynamic properties, i.,e., properties of sequences of operation calls. This is achieved by integrating support for monitoring UML protocol state machines into our basic validation engine.", "num_citations": "14\n", "authors": ["1659"]}
{"title": "Endogenous metamodeling semantics for structural UML 2 concepts\n", "abstract": " A lot of work has been done in order to put the Unified Modeling Language (UML) on a formal basis by translating concepts into various formal languages, e.g., set theory or graph transformation. While the abstract UML syntax is defined by using an endogenous approach, i. e., UML describes its abstract syntax using UML, this approach is rarely used for its semantics. This paper shows how to apply an endogenous approach called metamodeling semantics for central parts of the UML standard. To this end, we enrich existing UML language elements with constraints specified in the Object Constraint Language (OCL) in order to describe a semantic domain model. The UML specification explicitly states that complete runtime semantics is not included in the standard because it would be a major amount of work. However, we believe that certain central concepts, like the ones used in the UML standard and in\u00a0\u2026", "num_citations": "13\n", "authors": ["1659"]}
{"title": "Exploring (Meta-) Model Snapshots by Combining Visual and Textual Techniques\n", "abstract": " One central task in software development by means of graph-based techniques is to inspect and to query the underlying graph. Important issues are, for example, to detect general graph properties like connectivity, to explore more special features like the applicability of left-hand side rules in graph transformations, or to validate snapshots of evolving systems by checking properties in an on-the-fly way. We propose a new approach combining visual and textual techniques for exploring graphs. We emphasize a particular aspect of the underlying graph by showing or hiding nodes and edges. We offer three different ways to explore (meta-) model snapshots which may be combined:(1) selection by object identity and class membership,(2) selection by OCL expression, and (3) selection by path length. One main motivation for our work is to access large or complicated graphs in a systematic way. We evaluate our approach by different middle-sized scenarios. Our evaluation shows that the approach works for large graphs with about 1000 nodes and 2000 edges and for graphs which instantiate metamodels representing software engineering artifacts.", "num_citations": "12\n", "authors": ["1659"]}
{"title": "On Static and Dynamic Analysis of UML and OCL Transformation Models.\n", "abstract": " This contribution discusses model transformations in the form of transformation models that connect a source and a target metamodel. The transformation model is statically analyzed within a UML and OCL tool by giving each constraint an individual representation in the underlying class diagram by highlighting the employed model elements. We also discuss how to analyze transformation models dynamically on the basis of a model validator translating UML and OCL into relational logic. One can specify, for example, the transformation source and let the tool compute automatically the transformation target on the basis of the transformation model without the need for implementing the transformation. Properties like injectivity of the transformation can be checked through the construction of example transformation pairs.", "num_citations": "9\n", "authors": ["1659"]}
{"title": "A benchmark for OCL engine accuracy, determinateness, and efficiency\n", "abstract": " Since several years, the Object Constraint Language (OCL) is a central component in modeling and transformation languages like the Unified Modeling Language, the Meta Object Facility, and Query View Transformation. Consequently, approaches MDE (Model-Driven Engineering) depend on this language. OCL is present not only in areas influenced by the OMG but also in the Eclipse Modeling Framework (EMF). Thus the quality of OCL and its realization in tools seems to be crucial for the success of model-driven development. Surprisingly, up to now a benchmark for OCL to measure quality properties has not been proposed. This paper puts forward in the first part the concepts of a comprehensive OCL benchmark. Our benchmark covers (1) OCL engine accuracy (e.g., for the handling of the undefined value, the use of variables and the implementation of OCL standard operations), (2) OCL engine\u00a0\u2026", "num_citations": "9\n", "authors": ["1659"]}
{"title": "Abstract Runtime Monitoring with USE\n", "abstract": " We present a tool that permits developers to monitor and verify assumptions at an abstract level about an application running on a virtual machine. On the implementation level, a so-called platform aligned model (PAM) described in the UML (Unified Modeling Language) and enriched by OCL (Object Constraint Language) requirements is used to formalize these assumptions. Our solution allows a developer to concentrate on verifying core parts of an implementation while ignoring major parts of peripheral technical details. In order to easily detect a PAM which characterizes the central requirements, we propose a semi-automatic approach. First, a complete program model is generated by analyzing the source code. Afterwards, this model is reduced by the user to central classes and associations. This reduced model is enriched by the assumptions about the expected behavior of the system. The monitor connects to\u00a0\u2026", "num_citations": "9\n", "authors": ["1659"]}
{"title": "On Better Understanding OCL Collections or An OCL Ordered Set Is Not an OCL Set\n", "abstract": " Modeling languages like UML or EMF support textual constraints written in OCL. OCL allows the developer to use various collection kinds for objects and values. OCL\u00a01.4 knows sequences, sets, and bags, while OCL\u00a02.0 adds ordered sets. We argue that this addition in the OCL standard was not carried out in a careful way and worsened conceptional problems that were already present previously. We discuss a new way of establishing the connection between the various collection kinds on the basis of explicitly highlighting and characterizing fundamental collection properties.", "num_citations": "9\n", "authors": ["1659"]}
{"title": "Evaluating and debugging OCL expressions in UML models\n", "abstract": " This paper discusses the relationship between tests and proofs with focus on a tool for UML and OCL models. Tests are thought of as UML object diagrams and theorems or properties which are to be checked are represented as OCL constraints, i.e., class invariants or operation pre- and postconditions. The paper shows for the UML and OCL tool USE\u00a0(UML-based Specification Environment) how to trace and debug the validity of an expected theorem\u00a0(an OCL constraint) within a given test case\u00a0(a state model in the form of a UML object diagram).", "num_citations": "8\n", "authors": ["1659"]}
{"title": "Checking uml and ocl model consistency: An experience report on a middle-sized case study\n", "abstract": " This contribution reports on a middle-sized case study in which the consistency of a UML and OCL class model is checked. The class model restrictions are expressed by UML multiplicity constraints and explicit, non-trivial OCL invariants. Our approach automatically constructs a valid system state that shows that the model can be instantiated and thus proves consistency, i.e., shows that the invariants together with the multiplicity constraints are not contradictory.", "num_citations": "7\n", "authors": ["1659"]}
{"title": "Improving model quality by validating constraints with model unit tests\n", "abstract": " A central part of modern development methods is the use of tests. A well-defined test suite is usually the basis for code refactoring because changes to the system under test can be easily validated against the test suite. In model-based development tests can be derived from the model but possibilities to test the originally specified model and therefore to improve the quality of model refactorings are rare. We propose a method for defining model unit tests which allows a developer to define test suites similar to the well-known xUnit testing frameworks. This gives the developer the possibility to easily check and assess model changes against valid and invalid scenarios.", "num_citations": "7\n", "authors": ["1659"]}
{"title": "Behavior modeling with interaction diagrams in a UML and OCL tool\n", "abstract": " This contribution discusses system modeling with UML behavior diagrams. We consider statecharts and both kinds of interaction diagrams, ie, sequence and communication diagrams. We present new implementation features in a UML and OCL modeling tool:(1) Sequence diagram lifelines are extended with states from statecharts, and (2) communication diagrams are introduced as an alternative to sequence diagrams. We assess the introduced features and propose a systematic set of features which should be available in both kinds of interaction diagrams. We emphasize the role that OCL can play for such a feature set.", "num_citations": "5\n", "authors": ["1659"]}
{"title": "Modeling behavior with interaction diagrams in a UML and OCL tool\n", "abstract": " This paper discusses system modeling with UML behavior diagrams. We consider statecharts and both kinds of interaction diagrams, i.e., sequence and communication diagrams. We present new implementation features in a UML and OCL modeling tool: (1)\u00a0Sequence diagram lifelines are extended with states from statecharts, and (2)\u00a0communication diagrams are introduced as an alternative to sequence diagrams. We assess the introduced features and propose selection mechanisms which should be available in both kinds of interaction diagrams. We emphasize the role that OCL can play for such selection mechanisms.", "num_citations": "4\n", "authors": ["1659"]}
{"title": "On metamodel superstructures employing UML generalization features.\n", "abstract": " We employ UML generalization features in order to describe multi-level metamodels and their connections. The basic idea is to represent several metamodel levels in one UML and OCL model and to connect the metamodels with (what we call) a superstructure. The advantage of having various levels in one model lies in the uniform handling of all levels and in the availability of OCL for constraining models and navigating between them. We establish the connection between the metamodel levels by typing links that represent the instance-of relationship. These typing links are derived from associations that are defined on an abstraction of the metamodel classes and that are restricted by redefines and union constraints in order to achieve level-conformant typing. The abstraction of the metamodel classes together with the connecting associations and generalizations constitutes the superstructure.", "num_citations": "4\n", "authors": ["1659"]}
{"title": "Towards supporting multiple execution environments for uml/ocl models at runtime\n", "abstract": " Our approach allows a developer to verify whether a model corresponds to a concrete implementation in terms of the JVM (Java Virtual Machine) by validating assumptions about model structure and behavior. In previous work, we focused on (a) the validation of static model properties by monitoring invariants,(b) basic dynamic properties by specifying pre-and postconditions of an operation and (c) employment of protocol state machines for validating advanced dynamic properties.", "num_citations": "4\n", "authors": ["1659"]}
{"title": "Zur Validierung von Kompositionsstrukturen in UML mit USE\n", "abstract": " In der Softwareentwicklung r\u00fccken Modelle zunehmend in den Fokus des Entwicklungsprozesses. Dadurch steigen auch die Anforderungen an deren Qualit\u00e4t. Mit dem an der Universit\u00e4t Bremen entwickelten UML/OCL-Werkzeug USE k\u00f6nnen bereits bestimmte Qualit\u00e4tsaspekte von Modellen statisch und dynamisch analysiert werden. Dieser Artikel beschreibt neue Modellierungselemente der UML 2 und zeigt, welchen Beitrag eine Weiterentwicklung von USE auf dem Weg zu einer integrierten Semantik der UML 2 Kompositionsstrukturen leisten kann.", "num_citations": "2\n", "authors": ["1659"]}
{"title": "Monitoring Database Access Constraints with an RBAC Metamodel: a Feasibility Study\n", "abstract": " Role-based access control (RBAC) is widely used in organizations for access management. While basic RBAC concepts are present in modern systems, such as operating systems or database management systems, more advanced concepts like history-based separation of duty are not. In this work, we present an approach that validates advanced organizational RBAC policies using a model-based approach against the technical realization applied within a database. This allows a security officer to examine the correct implementation \u2013 possibly across multiple applications \u2013 of more powerful policies on the database level. We achieve this by monitoring the current state of a database in a UML/OCL validation tool. We assess the applicability of the approach by a non-trivial feasibility study.", "num_citations": "1\n", "authors": ["1659"]}
{"title": "On formalizing UML and OCL features and their employment to runtime verification\n", "abstract": " Model-driven development (MDD) has been identified as  a promising approach for developing software. By using abstract models of a system and by generating parts of the system out of these models, one tries to improve the efficiency of the overall development process and the quality of the resulting software. In the context of MDD the Unified Modeling Language (UML) and its related textual Object Constraint Language (OCL) have gained a high recognition. To be able to generate systems of high quality and to allow for interoperability between modeling tools, a well-defined semantics for these languages is required.    This thesis summarizes published work in this context that employs an endogenous metamodeling approach to define the semantics of newer elements of the UML. While the covered elements are exhaustively used to define relations  between elements of the metamodel of the UML, the UML specification leaves out a precise definition of their semantics. Our proposed approach uses models, not only to define the abstract syntax, but also to define the semantics of UML. By using UML and OCL for this, existing modeling tools can be used to validate the definition.    The second part of this thesis covers work on the usage of UML and OCL models for runtime verification. It is shown how models can still be used at the end of a software development process, i. e., after an implementation has manually been added to generated parts, even though they are not used as central parts of the development process. This work also influenced the integration of protocol state machines into a modeling tool, which lead to publications about the\u00a0\u2026", "num_citations": "1\n", "authors": ["1659"]}
{"title": "Collected Experience and Thoughts on Long Term Development of an Open Source MDE Tool.\n", "abstract": " During 14 years of developing an open source model driven engineering tool at a university we collected some dos and don\u2019ts for such projects, which we are going to describe in this paper. For example, the mentoring of students and afterwards the integration of their results need special treatments, to be able to keep a product of high quality. Beside such quality related issues, we also report on our experience with industrial cooperations. To get an idea about the amount of work that has been put into our tool, we review and visualize its history.", "num_citations": "1\n", "authors": ["1659"]}
{"title": "The secret life of OCL constraints\n", "abstract": " This paper reports on the use of OCL constraints in a German e-government project and focuses on the identification of diverse manifestations of invariants. Beyond invariants' formal content three other manifestations are identified:(a) feedback by a tool based on the processed invariants,(b) the invariant's textual explanation as a basis for a modeler who uses the invariants and (c) implicit assumptions for a model transformation resulting from the invariants.", "num_citations": "1\n", "authors": ["1659"]}
{"title": "Optimierte Suche von Modellinstanzen UML/OCL-Beschreibungen in USE\n", "abstract": " Konzeptuelle Modelle sind ein wichtiges Element modellgetriebener Softwareentwicklung, sowohl in der Beschreibung von Systemen als auch in der Metamodellierung dom\u00e4nenspezifischer Sprachen. Zu ihrer Beschreibung haben sich UML und OCL (und angelehnte Sprachen) als ein de facto Standard durchgesetzt. Validierung und Verifikation der Modelle sind hierbei wichtige Instrumente zur Sicherstellung der Modellqualit\u00e4t. Die Sprache ASSL (A Snapshot Sequence Language) bietet die M\u00f6glichkeit durch imperative Programmierung auf Modellebene und Backtracking konforme Instanzen systematisch zu erzeugen. Der White-Box-Ansatz ASSL erg\u00e4nzt Black-Box-Ans\u00e4tze, welche die Modellinstanziierung durch Abbildung auf (bspw.) ein Problem der relationalen Logik l\u00f6sen. Dieser Beitrag beschreibt, wie die durch ASSL-Programme aufgespannten Suchr\u00e4ume durch Ausnutzung der Modellabdeckung der OCL-Constraints und der Modellstruktur erheblich verkleinert werden k\u00f6nnen und gibt einen Ausblick darauf, wie bestehende Black-Box-Ans\u00e4tze in ASSL integriert werden k\u00f6nnen, um innerhalb eines imperativen Rahmens Teilinstanziierungen deklarativ beschreiben zu k\u00f6nnen.", "num_citations": "1\n", "authors": ["1659"]}
{"title": "Extending ASSL: Making UML Metamodel-based Workflows executable\n", "abstract": " ASSL is a language that enables UML developers to test and certify UML and OCL models [5]. Snapshots of system states are semi-automatically created and main parts of the UML action semantics is implemented by the language. Its interpreter is the well-known UML modeling tool USE. The article proposes a number of language extensions to ASSL. These include (sub) procedure calls and pre-and postcondition checks on entering and exiting of operations using OCL. The paper motivates the need for these extensions as well as their usage and development along the problem of metamodel-based execution of workflow models. Executable workflow models, driven by ASSL procedures, are introduced in detail to present the usage of ASSL and our extensions.", "num_citations": "1\n", "authors": ["1659"]}