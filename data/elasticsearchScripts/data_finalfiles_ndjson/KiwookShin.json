{"title": "Model-based automatic test case generation for automotive embedded software testing\n", "abstract": " We propose a method to automatically generate software and hardware test cases from a UML model developed through a model-based development process. Where languages such as source-code languages are used within the model, input and expected values for each test case are generated using a custom parser. As a next step, unit test cases are combined to generate integration test cases using a bottom-up approach. Then these cases are converted into hardware test cases for approval testing of embedded systems, using XQuery and hardware mapping tables. We demonstrate this process by applying it to the power window switch module of a Hyundai Santa Fe vehicle. Our approach provides an automatic testing procedure for embedded systems developed by model-based methods, and generates test cases efficiently using a recombination of signals. In conclusion, our proposed method\u00a0\u2026", "num_citations": "13\n", "authors": ["2047"]}
{"title": "Automated test case generation for automotive embedded software testing using XMI-based UML model transformations\n", "abstract": " We report a method to automatically generate test cases for automotive embedded software from a UML-based model using XML metadata interchange (XMI). First, the software model created using UML is converted to metadata in XMI format. Then, based on this metadata (which does not depend on a specific language), software test cases for structural testing or requirement-based testing may be generated using an appropriate parser. The model does not need to be implemented using the Object Constraint Language (OCL), and software test cases may be generated using an appropriately defined parser for a given language (which may be C/C++). Because software test cases can be converted to hardware test cases via a stimulus-mapping table, which contains the information on the digital and analog signals, and the communications interface, hardware test cases may also be generated automatically. The\u00a0\u2026", "num_citations": "4\n", "authors": ["2047"]}
{"title": "Model-Based Test Case Prioritization Using an Alternating Variable Method for Regression Testing of a UML-Based Model\n", "abstract": " Many test case prioritization (TCP) studies based on regression testing using a code-based development approach have appeared. However, few studies on model-based mutation testing have explored what kind of fault seeding is appropriate or how much the code-based results differ. In this paper, as automatic seeding for the mutation generation, several mutation operators were employed for the UML statechart. Here, we suggest mutation testing employing the model-based development approach and a new TCP method based on an alternating variable method (AVM). We statistically compare the average percentage of the fault detection (APFD) results of the new method to other TCP methods such as a greedy algorithm for code coverage or fault exposure possibility. Finally, in empirical studies, the model-based TCP results for a power window switch module, a body control module, and a passive entry and start system are derived; these are real industrial challenges in the automotive industry. View Full-Text", "num_citations": "3\n", "authors": ["2047"]}
{"title": "Automatic test-case generation for hardware-in-the-loop testing of automotive body control modules\n", "abstract": " This paper reports an automatic method for creating test cases for hardware-in-the-loop (HIL) testing of the body control module (BCM) for automobiles. First, test cases are generated automatically using Unified Modeling Language (UML) modeling software with an automatic test generation add-on. In this work, Rhapsody from IBM with the automatic test generator (ATG) add-on is used to generate automatic test cases. Then, these test cases are converted into Extensible Markup Language (XML) Metadata Interchange (XMI) format. From this XMI format file, test cases for HIL are generated by mapping stimuli such as digital input/output, analog input/output, and controller area network (CAN) interfaces. For this mapping procedure, the pros and cons of Extensible Stylesheet Language Transformations (XSLT) and XML Query Language (XQuery) are discussed. In addition, the advantages of generating hardware test\u00a0\u2026", "num_citations": "3\n", "authors": ["2047"]}