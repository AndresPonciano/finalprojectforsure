{"title": "A contracting system for hierarchical components\n", "abstract": " This article presents the contracting system ConFract for the open and hierarchical component model Fractal. Contracts are dynamically built from specifications, currently executable assertions, at assembly times, and are updated according to dynamic reconfigurations. These contracts are not restricted to the scope of interfaces, taken separately. On the contrary, new kinds of composition contracts can be built in order to associate several external interfaces of a component, providing an \u201cusage contract\u201d, or several interfaces inside the component, providing an \u201cassembly and implementation contract\u201d. All these contracts identify fine-grained responsibilities and developers can thus easily organize the handling of contract violations and the resulting reconfigurations.", "num_citations": "62\n", "authors": ["1518"]}
{"title": "Managing, multiple feature models: foundations, languages and applications\n", "abstract": " L\u2019ing\u00e9nierie des lignes de produits logiciels (LdPs) est un paradigme pour la mod\u00e9lisation et le d\u00e9veloppement de familles de syst\u00e8mes logiciels plut\u00f4t que de syst\u00e8mes logiciels individuels. Son objectif porte sur les moyens de produire et maintenir efficacement des produits logiciels similaires en exploitant ce qu\u2019ils ont en commun et en g\u00e9rant ce qui varie entre eux. Par analogie, la pratique dans l\u2019industrie automobile est de construire une ligne de production dans laquelle des variations personnalis\u00e9es mais tout de m\u00eame similaires de mod\u00e8les de voitures sont produits. Les feature models (FMs) sont une repr\u00e9sentation fondamentale pour sp\u00e9cifier et raisonner sur la commonalit\u00e9 et la variabilit\u00e9 des LdPs en termes de features (caract\u00e9ristiques). Les FMs deviennent de plus en plus complexes, manipul\u00e9s par plusieurs d\u00e9veloppeurs ou organisations, utilis\u00e9s pour d\u00e9crire des features \u00e0 divers niveaux d\u2019abstraction et qui sont mises en relation de diff\u00e9rentes fa\u00e7ons. Maintenir un seul gros FM n\u2019est ni r\u00e9aliste ni souhaitable. Au contraire une tendance forte est de consid\u00e9rer de multiples FMs. Dans cette th\u00e8se, nous d\u00e9veloppons les fondations th\u00e9oriques et un support pratique pour g\u00e9rer de multiples FMs. Nous concevons et d\u00e9veloppons un ensemble d\u2019op\u00e9rateurs de composition et de d\u00e9composition (aggregate, merge, slice) pour supporter la s\u00e9paration des pr\u00e9occupations. Les op\u00e9rateurs sont formellement d\u00e9finis et impl\u00e9ment\u00e9s avec un algorithme qui garantit des propri\u00e9t\u00e9s s\u00e9mantiques. Nous montrons comment les op\u00e9rateurs de composition et de d\u00e9composition peuvent \u00eatre combin\u00e9s ensemble ou avec d\u2019autres op\u00e9rateurs d\u2019\u00e9dition ou de\u00a0\u2026", "num_citations": "41\n", "authors": ["1518"]}
{"title": "NeuroLOG: a community-driven middleware design\n", "abstract": " The NeuroLOG project designs an ambitious neurosciences middleware, gaining from many existing components and learning from past project experiences. It is targeting a focused application area and adopting a user-centric perspective to meet the neuroscientists expectations. It aims at fostering the adoption of HealthGrids in a pre-clinical community. This paper details the project's design study and methodology which were proposed to achieve the integration of heterogeneous site data schemas and the definition of a site-centric policy. The NeuroLOG middleware will bridge HealthGrid and local resources to match user desires to control their resources and provide a transitional model towards HealthGrids.", "num_citations": "40\n", "authors": ["1518"]}
{"title": "Sensor data visualisation: A composition-based approach to support domain variability\n", "abstract": " In the context of the Internet of Things, sensors are surrounding our environment. These small pieces of electronics are inserted in everyday life\u2019s elements (e.g., cars, doors, radiators, smartphones) and continuously collect information about their environment. One of the biggest challenges is to support the development of accurate monitoring dashboard to visualise such data. The one-size-fits-all paradigm does not apply in this context, as user\u2019s roles are variable and impact the way data should be visualised: a building manager does not need to work on the same data as classical users. This paper presents an approach based on model composition techniques to support the development of such monitoring dashboards, taking into account the domain variability. This variability is supported at both implementation and modelling levels. The results are validated on a case study named SmartCampus\u00a0\u2026", "num_citations": "31\n", "authors": ["1518"]}
{"title": "Components and services: A marriage of reason\n", "abstract": " Component-BasedSoftwareEngineering(CBSE)andService- Oriented Architectures (SOA) are among today\u2019s most prominent soft- ware architecture approaches. This article investigates the focus and characteristics of these approaches based on works conducted in the context of France Telecom activities, then it argues towards bringing them together, and sets up some recommendations for their integration. The article reports, assesses and compares two experiments which were conducted in this line with the Fractal component model: the first one is based on the Axis and kSOAP Web Services platforms, and the second one is based on the Tuscany SCA platform.", "num_citations": "27\n", "authors": ["1518"]}
{"title": "Handling complex configurations in software product lines: a tooled approach\n", "abstract": " As Software Product Lines (SPLs) are now more widely applied in new application fields such as IT or Web systems, complex and large-scale configurations have to be handled. In these fields, the strong domain orientation leads to the need to manage interrelated SPLs and multiple instances of configured sub-products, resulting in complex configurations that cannot be easily represented by simple sets of features. In this paper we propose a tooled approach to manage such SPLs through a domain model that interrelates several feature models in a consistent way. The approach thus shifts part of the domain knowledge to the problem space and supports the derivation of complex configurations with multiple instantiations and associations of sub-products. We also report on the application of our approach to an industrial-strength software development in the field of digital signage.", "num_citations": "25\n", "authors": ["1518"]}
{"title": "Fine-grained contract negotiation for hierarchical software components\n", "abstract": " Component-based development addresses the complexity of large applications by building software systems from reusable software components. To support reuse and successfully combine units of software, the contractual approach turns out to be well-suited to specify and to verify components and their interactions. However, as contracts must support functional and extra-functional aspects, they are frequently challenged by fluctuations in extra-functional properties and dynamic reconfigurations of components. In this paper, we propose a negotiation model in which components have clearly identified roles and interact in order to automatically restore the validity of contracts. The negotiation model currently supports a concession-based negotiation policy and is well-suited to behavioral contracts based on executable assertions. This model is integrated into ConFract, a contracting system for the fractal hierarchical\u00a0\u2026", "num_citations": "22\n", "authors": ["1518"]}
{"title": "Using composite feature models to support agile software product line evolution\n", "abstract": " Managing continuous change in a Software Product Line (SPL) is one of the challenges now faced by the SPL engineering community. On the one hand, the SPL paradigm captures the intrinsic variability of a software based on a systemic vision of the software to model. On the other hand, Agile Software Development advocates the incremental development of software based on constant interaction with a customer community. In this paper, we present an approach based on Composite Feature Models (CFM) to support the agile evolution of a SPL. This study is driven by the refactoring of a daily used application (information broadcasting system), in the context of a nationally funded project. Preliminary results show that CFMs support the incremental development of a SPL based on interactions with a community, tackling the challenge of SPL continuous evolution.", "num_citations": "20\n", "authors": ["1518"]}
{"title": "From sensors to visualization dashboards: need for language composition\n", "abstract": " In the context of the Internet of Things, the SensApp platform is designed to collect data from sensors and support the building of associated monitoring dashboards. Bridging the gap between sensors and visualization involves up to eleven kind of models, from state machine modeling the behavior of a sensor to task diagrams modeling the actions of the end-user. This paper describes this case study, emphasizing the need for domain specific modeling language composition mechanisms to support the activity of modeling modern software-intensive systems.", "num_citations": "17\n", "authors": ["1518"]}
{"title": "Managing a software ecosystem using a multiple software product line: a case study on digital signage systems\n", "abstract": " With the advent of Web 2.0, the growth of developer teams and user communities increases the number of software ecosystems: software platforms developed and maintained in a decentralized way by external contributors. As complexity grows, these large software systems become more and more complex to manage and to adapt to specific user needs. In this paper, we report on a case study on the development of a digital signage software system called Your Cast. Based on several years experience evolving Your Cast from a single system to a medium-scale ecosystem, we show how organizing it as a multiple software product line helps in organizing the software platform, taming some management tasks for a growing community, and giving more capabilities to final users to build their own products.", "num_citations": "16\n", "authors": ["1518"]}
{"title": "Towards efficient support for executing the object constraint language\n", "abstract": " The Object Constraint Language (OCL) forms part of the UML notation as a language to complete graphical models by expressing precise constraints or assertions. As OCL is developed as a non-executable language, expressed properties cannot be embedded as executable assertions in the resulting implementations to provide correctness testing. Nonetheless a large part of OCL seems to be easily executable, but straightforward implementations would be inefficient and detrimental to the approach. The paper proposes a pragmatic solution for an OCL runtime support and determines the origins of potential inefficiency. The evaluation of assertions is streamlined according to their roles and the possibility of sampling quantified assertions. The triggering of assertions is driven by a changed based system that simplifies large scale use while ensuring that unstable parts undergo more controls.", "num_citations": "16\n", "authors": ["1518"]}
{"title": "Non-functional data collection for adaptive business processes and decision making\n", "abstract": " Monitoring application services becomes more and more a transverse key activity in SOA. Beyond traditional human system administration and load control, new activities such as autonomic management as well as SLA enforcement raise the stakes over monitoring requirements. In this paper, we address a new monitoring-based activity which is selecting among competitive service offers based on their currently measured QoS. Starting from this use case, the late binding of service calls in SOA given the current QoS of a set of candidate services, we first elicit the requirements and then describe M4ABP (Monitoring for Adaptive Business Process), a middleware component for monitoring services and delivering monitoring data to business processes wishing to call them. Within this settings, M4ABP provides solutions for general requirements: flexibility as well as performance in data access for clients, coherency of\u00a0\u2026", "num_citations": "15\n", "authors": ["1518"]}
{"title": "Compositional Patterns of Non-Functional Properties for Contract Negotiation.\n", "abstract": " Providing powerful and fine-grained capabilities for the analysis and management of non-functional properties is a major challenge for component-based software systems. This article presents an approach that relies on some integration patterns of non-functional properties in hierarchical software components. These patterns are based on a classification of low-level non-functional properties, which takes into account their nature and lifecycle. They make explicit the implementation of these properties in relation with components. The proposed model also provides appropriate support for some forms of compositional reasoning on theses properties. The compositional patterns have been implemented on a hierarchical component platform and directly exploited in non-functional contract negotiation on a validating application. The proposed patterns enable negotiation processes to be precisely propagated down the component hierarchy, so that better runtime adaptations can be conducted on reaction to non-functional degradations.", "num_citations": "14\n", "authors": ["1518"]}
{"title": "ConFract, un syst\u00e8me pour contractualiser des composants logiciels hi\u00e9rarchiques\n", "abstract": " Sauf mention contraire ci-dessus, le contenu de cette notice bibliographique peut \u00eatre utilis\u00e9 dans le cadre d\u2019une licence CC BY 4.0 Inist-CNRS/Unless otherwise stated above, the content of this bibliographic record may be used under a CC BY 4.0 licence by Inist-CNRS/A menos que se haya se\u00f1alado antes, el contenido de este registro bibliogr\u00e1fico puede ser utilizado al amparo de una licencia CC BY 4.0 Inist-CNRS", "num_citations": "14\n", "authors": ["1518"]}
{"title": "Contract-based testing: from objects to components\n", "abstract": " Contracts on object-oriented classes have been first developed as a software design approach. They were also quickly used for supporting class testing, providing a form of design for testability. In this paper, we identify the tracks to extend the contract-based built-in test technique to hierarchical components. To do that, we build on our previous work on STclass, a framework supporting design by contract and built-in test for Java, and on ConFract, a contracting system for the Fractal component platform. Tests are embedded in the components and are generated with respect to a category of contract (library, interface, composition). In this paper we study how this approach, firstly dedicated to objects, can be valuable for component testability. As a result of the test process, the embedded contracts are more robust and offer an original way to improve the observability of the component-based system. Contracts make it\u00a0\u2026", "num_citations": "14\n", "authors": ["1518"]}
{"title": "On the use of an internal DSL for enriching EMF models\n", "abstract": " The Object Constraint Language (OCL) is widely used to enrich modeling languages with structural constraints, side effect free query operations implementation and contracts. OCL was designed to be small and compact language with appealing short\" to-the-point\" expressions. When trying to apply it to larger EMF models some shortcomings appear in the language expressions, the invariant constructs as well as in the supporting tools.", "num_citations": "13\n", "authors": ["1518"]}
{"title": "Issues and scenarios for self-managing grid middleware\n", "abstract": " Despite significant efforts to achieve reliable grid middlewares, grid infrastructures still encounter important difficulties to implement the promise of ubiquitous, seamless and transparent computing. Identified causes are numerous, such as the complexity of middleware stacks, dependence to many distributed resources, heterogeneity of hardware and software operated or incompatibilities between software components declared as interoperable. Based on failures that occurred during a large data challenge run on a grid dedicated to neuroscience, we identify scenarios that can be handled through autonomic management associated to the grid middleware. We also outline a flexible self-adaptive framework that aims at using model-driven development to facilitate the engineering, integration and reuse of MAPE-K loops in large scale distributed systems.", "num_citations": "13\n", "authors": ["1518"]}
{"title": "Supporting micro-services deployment in a safer way: a static analysis and automated rewriting approach\n", "abstract": " The SOA ecosystem has drastically evolved since its childhood in the early 2000s. From monolithic services, micro-services now cooperate together in ultra-large scale systems. In this context, there is a tremendous need to deploy frequently new services, or new version of existing services. Container-based technologies (eg, Docker) emerged recently to tool such deployments, promoting a black-box reuse mechanism to support off-the-shelf deployments. Unfortunately, from the service deployment point of view, such form of black-box reuse prevent to ensure what is really shipped inside the container with the service to deploy. In this paper, we propose a formalism to model and statically analyze service deployment artifacts based on state of the art deployment platforms. The static analysis mechanism leverages the hierarchy of deployment descriptors to verify a given deployment, as well as rewrite it to\u00a0\u2026", "num_citations": "12\n", "authors": ["1518"]}
{"title": "Enforcing different contracts in hierarchical component-based systems\n", "abstract": " Using different specification formalisms together is necessary to leverage better reliability on component-based systems. The ConFract system provides a contracting system for hierarchical software components, but currently, only executable assertions are supported.             In this paper, we describe how TLA, taken as an instance of behavioral sequence-based formalism, was integrated in ConFract. A domain specific language is proposed in order to enable designers to describe the observations needed to appropriately verify their specifications. These observations are automatically generated for assertions and in the case of TLA, we show what kind of observations must be provided to link the specifications to the concrete application.", "num_citations": "12\n", "authors": ["1518"]}
{"title": "Functional and non-functional contracts support for component-oriented programming\n", "abstract": " This position paper focuses on contracts for component interfaces, looking at both their functional and non-functional aspects. We investigate how the different levels of contract may relate to each other and what properties must be provided on each form of contract. We argue that a meta-level mechanism will be necessary to support these contracts in a Component-Oriented programming language.", "num_citations": "12\n", "authors": ["1518"]}
{"title": "Software development support for shared sensing infrastructures: A generative and dynamic approach\n", "abstract": " Sensors networks are the backbone of large sensing infrastructures such as Smart Cities or Smart Buildings. Classical approaches suffer from several limitations hampering developers\u2019 work (e.g., lack of sensor sharing, lack of dynamicity in data collection policies, need to dig inside big data sets, absence of reuse between implementation platforms). This paper presents a tooled approach that tackles these issues. It couples (i) an abstract model of developers\u2019 requirements in a given infrastructure to (ii) timed automata and code generation techniques, to support the efficient deployment of reusable data collection policies on different infrastructures. The approach has been validated on several real-world scenarios and is currently experimented on an academic campus.", "num_citations": "11\n", "authors": ["1518"]}
{"title": "Composite contract enforcement in hierarchical component systems\n", "abstract": " Abadi and Lamport established a general theorem for composing specifications [1] . Based on an assume-guarantee principle, it enables one to prove the specification of a composite system from the ones of its components. But the general application of this theorem to software composition is not that straightforward because the resulting abstract specification of the composite depends upon the hidden guarantees of its subcomponents. In this paper, we investigate how this result can be exploited without blurring responsibilities between the different participants. Our contributions leverage an existing contracting framework for hierarchical software components [7] , in which contracts are first-class objects during configuration and run times. This framework already associates specifications and responsibilities to software components, within the traditional horizontal form of composition. We show here how the\u00a0\u2026", "num_citations": "11\n", "authors": ["1518"]}
{"title": "On the diversity of capturing variability at the implementation level\n", "abstract": " In many Software product lines (SPLs), if domain variability can be properly specified in terms of features in a feature model (FM), their implementation in core-code assets is hard to capture and maintain, as there are different techniques to implement the variability. Even with an organization in variation points and variants, most of these techniques do not shape the code in terms of features, and inconsistencies appear when the variability evolves at one level with no co-evolution at the other. To help SPL architects, one possible solution is to be able to reconstruct the FM by capturing the variability in core-code assets, but different implementation techniques expose diverse characteristics, hampering the process. We study in this paper the diverse dimensions of the existing variability implementation techniques, and how they can be captured in an abstract way. We then categorize them regarding these dimensions in\u00a0\u2026", "num_citations": "10\n", "authors": ["1518"]}
{"title": "A QoI-aware framework for adaptive monitoring\n", "abstract": " Monitoring application services becomes more and more a transverse key activity in information systems. Beyond traditional system administration and load control, new activities such as autonomic management and decision making systems raise the stakes over monitoring requirements. In this paper, we present ADAMO, an adaptive monitoring framework that tackles different quality of information (QoI)-aware data queries over dynamic data streams and transform them into probe configuration settings under resource constraints. The framework relies on a constraint-solving approach as well as on a component-based approach in order to provide static and dynamic mechanisms with flexible data access for multiple clients with different QoI needs, as well as generation and configuration of QoS and QoI handling components. The monitoring framework also adapts to resource constraints.", "num_citations": "10\n", "authors": ["1518"]}
{"title": "Identifying and visualizing variability in object-oriented variability-rich systems\n", "abstract": " In many variability-intensive systems, variability is implemented in code units provided by a host language, such as classes or functions, which do not align well with the domain features. Annotating or creating an orthogonal decomposition of code in terms of features implies extra effort, as well as massive and cumbersome refactoring activities. In this paper, we introduce an approach for identifying and visualizing the variability implementation places within the main decomposition structure of object-oriented code assets in a single variability-rich system. First, we propose to use symmetry, as a common property of some main implementation techniques, such as inheritance or overloading, to identify uniformly these places. We study symmetry in different constructs (eg, classes), techniques (eg, subtyping, overloading) and design patterns (eg, strategy, factory), and we also show how we can use such symmetries to\u00a0\u2026", "num_citations": "9\n", "authors": ["1518"]}
{"title": "Leveraging live machine learning and deep sleep to support a self-adaptive efficient configuration of battery powered sensors\n", "abstract": " Sensor networks empower Internet of Things (IoT) applications by connecting them to physical world measurements. However, the necessary use of limited bandwidth networks and battery-powered devices makes their optimal configuration challenging. An over-usage of periodic sensors (i.e. too frequent measurements) may easily lead to network congestion or battery drain effects, and conversely, a lower usage is likely to cause poor measurement quality. In this paper we propose a middleware that continuously generates and exposes to the sensor network an energy-efficient sensors configuration based on data live observations. Using a live learning process, our contributions dynamically act on two configuration points: (i) sensors sampling frequency, which is optimized based on machine-learning predictability from previous measurements, (ii) network usage optimization according to the frequency of requests\u00a0\u2026", "num_citations": "9\n", "authors": ["1518"]}
{"title": "A reflective model for architecting feedback control systems\n", "abstract": " Autonomic Computing aims at realizing computing systems that are able to adapt themselves, but the engineering of such systems in the large is rather a challenging task. It is hard to find an appropriate model that controls the adaptation itself and several loops are likely to be coordinated to avoid unexpected and harmful behaviors. This paper presents an approach and a runtime support to architecture self-adaptive systems, in which each part of the feedback control loop is uniformly and explicitly designed as a first-class adaptive element. Making these elements explicit allows the architect to reason about system modeling and to reuse them. Code generation from the architecture model avoids painful details of low-level system implementation.", "num_citations": "9\n", "authors": ["1518"]}
{"title": "\u00abAssertions are Objects too!\u00bb\n", "abstract": " Assertions have experienced varied successes since their introduction in programming Hoa69]. After numerous teaching attempts in the seventies, they have been rarely used in industry until the arrival of languages providing capabilities to check them. They have almost fallen into disuse in universities. Thanks to a long experience with the Ei el language, both in teaching MRR88, BMP+ 90, BR95a] and in several industrial projects BR95b, CFLR95, CFLR96, LJ95], we think, like Bertrand Meyer Mey96b], that assertions are as important as other concepts in object technology, like inheritance, polymorphism or encapsulation.Any improvement of the program semantics knowledge is obviously useful, but provided that verications can be made. This is why assertions are an e cient and reasonable compromise between the knowledge they provide and the realistic handling they allow. Programmers use a language close to their programming habits and tools can check assertions in situ, revealing errors in acceptable time. This provides many uses such as reliability control Gri81], contracts between programmers Mey88, Mey92b, Mck95, MMHH95], automatic generation of internal documentation Mey94a] and according to di erent points of view BM93, BR95b], speci cation of dynamic behaviour during conception WN95], evolution and adaptation management control Mey88, Mey96a], comparison and semiautomatic updating BR95b], consistency constraints GD94]...", "num_citations": "9\n", "authors": ["1518"]}
{"title": "Teaching DevOps at the Graduate Level\n", "abstract": " The massive evolution of IT development towards new Web architectures, from service-oriented to micro-services, clouds and containers, call for changes in the way software is developed, deployed and maintained.", "num_citations": "8\n", "authors": ["1518"]}
{"title": "Exploiting the internet of things to teach domain-specific languages and modeling: The arduinoml project\n", "abstract": " Exploiting the Internet of Things to Teach Domain-Specific Languages and Modeling: The ArduinoML project - Archive ouverte HAL Skip to Main content Skip to Navigation Toggle navigation CCSD HAL HAL HALSHS TEL M\u00e9diHAL Liste des portails AUR\u00e9HAL API Data Documentation Episciences.org Episciences.org Journals Documentation Sciencesconf.org Support hal Home Submit Browse Last submissions By publication type By subject By publication date By structure HAL repositories Search Documentation hal-01273731, version 1 Conference papers Exploiting the Internet of Things to Teach Domain-Specific Languages and Modeling: The ArduinoML project S\u00e9bastien Mosser 1 Philippe Collet 1, 2 Mireille Blay-Fornarino 1 Details 1 Laboratoire d'Informatique, Signaux, et Syst\u00e8mes de Sophia-Antipolis (I3S) / Equipe MODALIS Laboratoire I3S - SPARKS - Scalable and Pervasive softwARe and Knowledge \u2026", "num_citations": "8\n", "authors": ["1518"]}
{"title": "Feature modeling and separation of concerns with FAMILIAR\n", "abstract": " This paper presents a feature-oriented approach to requirement and design modeling using the FAMILIAR Domain Specific Language. This language is aimed at being used within different phases of software development, from early requirement definition to high-level design and in certain cases until runtime. Some experiments also demonstrate its usage when reverse engineering domain or technical variability information from various software artifacts. We illustrate the approach by capturing and composing variability descriptions of several concerns in the bCMS-SPL and by showing how it could be related to some implementation concerns with technical variability. FAMILIAR is available at http://familiar-project.github.io, with associated documentation and references to papers describing innovative operators, the language itself, as well as applications and results from case studies.", "num_citations": "8\n", "authors": ["1518"]}
{"title": "How to exploit domain knowledge in multiple software product lines?\n", "abstract": " As Software Product Lines (SPL) are inevitably moving towards a multiple form to tackle issues of reuse and complexity, variability management across the composed SPLs is still addressed with basic inter-constraints. Based on two disjoint case studies (digital signage and cloud computing), we identified this challenging problem for the SPL community. In this paper we describe how the domain knowledge needs to be exploited to support a more complete definition of Multiple Software Product Lines (MSPL). Such an exploitation implies the definition of a domain-driven definition of configuration and an order independent configuration process.", "num_citations": "8\n", "authors": ["1518"]}
{"title": "Contr\u00f4le d'admission de composants avec des contrats comportementaux.\n", "abstract": " Dans cet article, nous proposons un mod\u00e8le technique et m\u00e9thodologique afin de mieux contr\u00f4ler la compatibilit\u00e9 s\u00e9mantique des interfaces des composants logiciels lors de leur admission sur une plate-forme. Ces contr\u00f4les d\u2019admission portent principalement sur des contrats comportementaux bas\u00e9s sur des assertions ex\u00e9cutables. Leur compatibilit\u00e9 est d\u00e9termin\u00e9e, soit par certification, soit par des tests sur la plate-forme. Compte tenu des nombreux param\u00e8tres pour faire le meilleur choix d\u2019admission, nous pr\u00e9conisons une politique de contractualisation qui repose sur un processus de n\u00e9gociation.", "num_citations": "8\n", "authors": ["1518"]}
{"title": "Mapping features to automatically identified object-oriented variability implementations: the case of ArgoUML-SPL\n", "abstract": " In Software Product Line (SPL) engineering, mapping domain features to existing code assets is essential for variability management. When variability is already implemented through Object-Oriented (OO) techniques, it is too costly and error-prone to refactor assets in terms of features or to use feature annotations. In this work, we delve into the possible usage of automatically identified variation points with variants in an OO code base to enable feature mapping from the domain level. We report on an experiment conducted over ArgoUML-SPL, using its code as input for automatic detection through the symfinder toolchain, and the previously devised domain features as a ground truth. We analyse the relevance of the identified variation points with variants wrt domain features, adapting precision and recall measures. This shows that the approach is feasible, that an automatic mapping can be envisaged, and also that\u00a0\u2026", "num_citations": "7\n", "authors": ["1518"]}
{"title": "Early consistency checking between specification and implementation variabilities\n", "abstract": " In a software product line (SPL) engineering approach, the addressed variability in core-code assets must be consistent with the specified domain variability, usually captured in a variability model, eg, a feature model. Currently, the support for checking such consistency is limited, mostly when a single variability implementation technique is used, eg, preprocessors in C. In realistic SPLs, variability is implemented using a combined set of traditional techniques, eg, inheritance, overloading, design patterns. An inappropriate choice and combination of such techniques become the source of variability inconsistencies. In this paper, we present a tooled approach to check the consistency of variability between the specification and implementation levels, when several variability implementation techniques are used together. The proposed method models the implemented variability in terms of variation points and variants\u00a0\u2026", "num_citations": "7\n", "authors": ["1518"]}
{"title": "Automated Deployment of Data Collection Policies over Heterogeneous Shared Sensing Infrastructures\n", "abstract": " Smart buildings and smart cities rely on interconnected sensor networks that collect data about their environment to support various applications. Developing and deploying the data collection architectures of these systems is a challenging problem. The specificities of the sensor platforms compel software engineers to work at a low level. This makes this activity tedious, producing code that badly exploits the network architecture, and hampering reuse of data collection policies. Moreover, several data collection programs cannot be guaranteed to be deployable on a shared infrastructure. In this paper, we present an automated approach that supports (i) the definition of data collection policies at a higher level of abstraction, (ii) the representation of the diverse platforms and the network topology, and (iii) the automatic composition and deployment of the policies on top of heterogeneous sensing infrastructures following\u00a0\u2026", "num_citations": "7\n", "authors": ["1518"]}
{"title": "Une mod\u00e9lisation de la variabilit\u00e9 multidimensionnelle pour une \u00e9volution incr\u00e9mentale des lignes de produits\n", "abstract": " Le doctorat s'inscrit dans le cadre d'une bourse CIFRE et d'un partenariat entre l'ENSTA Bretagne, l'IRISA et Thales Air Systems. Les pr\u00e9occupations de ce dernier, et plus particuli\u00e8rement de l'\u00e9quipe de rattachement, sont de r\u00e9aliser des syst\u00e8mes \u00e0 logiciels pr\u00e9pond\u00e9rants embarqu\u00e9s. La complexit\u00e9 de ces syst\u00e8mes et les besoins de comp\u00e9titivit\u00e9 associ\u00e9s font \u00e9merger la notion de \"Model-Based Product Lines(MBPLs)\". Celles-ci tendent \u00e0 r\u00e9aliser une synergie de l'abstraction de l'Ing\u00e9nierie Dirig\u00e9e par les Mod\u00e8les (IDM) et de la capacit\u00e9 de gestion de la capitalisation et r\u00e9utilisation des Lignes de Produits (LdPs). La nature irr\u00e9vocablement dynamique des syst\u00e8mes r\u00e9els induit une \u00e9volution permanente des LdPs afin de r\u00e9pondre aux nouvelles exigences des clients et pour refl\u00e9ter les changements des artefacts internes de la LdP. L'objectif de cette th\u00e8se est unique, ma\u00eetriser des incr\u00e9ments d'\u00e9volution d'une ligne de produits de syst\u00e8mes complexes, les contributions pour y parvenir sont duales. La th\u00e8se est que 1) une variabilit\u00e9 multidimensionnelle ainsi qu'une mod\u00e9lisation relationnelle est requise dans le cadre de lignes de produits de syst\u00e8mes complexes pour en am\u00e9liorer la compr\u00e9hension et en faciliter l'\u00e9volution (proposition d'un cadre g\u00e9n\u00e9rique de d\u00e9composition de la mod\u00e9lisation et d'un langage (DSML) nomm\u00e9 PLiMoS, d\u00e9di\u00e9 \u00e0 l'expression relationnelle et intentionnelle dans les MBPLs), et que 2) les efforts de sp\u00e9cialisation lors de la d\u00e9rivation d'un produit ainsi que l'\u00e9volution de la LdP doivent \u00eatre guid\u00e9 par une architecture conceptuelle (introduction de motifs architecturaux autour de PLiMoS et du patron ABCDE) et capitalis\u00e9s\u00a0\u2026", "num_citations": "7\n", "authors": ["1518"]}
{"title": "Patterns for integrating and exploiting some non-functional properties in hierarchical software components\n", "abstract": " Providing powerful and fine-grained capabilities for the analysis and management of non-functional properties is a major challenge for component-based software systems. In this paper, we propose integration patterns for nonfunctional properties of hierarchical software components. These patterns are based on a classification of low-level non-functional properties, which takes into account their nature and lifecycle. They make explicit the implementation of these properties in relation with components and can be used to develop some forms of compositional reasoning. The proposals are exploited in non-functional contract negotiation by enabling a negotiation process to be precisely propagated down the component hierarchy", "num_citations": "7\n", "authors": ["1518"]}
{"title": "On contract monitoring for the verification of component-based systems\n", "abstract": " This position paper focuses on contract monitoring for component interfaces, considering the verification of functional and non-functional properties in the contracts. We investigate what properties are needed on behavioral and Quality of Service contracts. We also define what are the requirements on a monitoring environment to handle properly those contracts. We briefly transpose those requirements to a meta-level architecture.", "num_citations": "7\n", "authors": ["1518"]}
{"title": "Assessing the functional feasibility of variability-intensive data flow-oriented systems\n", "abstract": " Data-flow oriented embedded systems, such as automotive systems used to render HMI (eg, instrument clusters, infotainments), are increasingly built from highly variable specifications while targeting different constrained hardware platforms configurable in a finegrained way. These variabilities at two different levels lead to a huge number of possible embedded system solutions, which feasibility is extremely complex and tedious to predetermine. In this paper, we propose a tooled approach that capture high level specifications as variable dataflows, and targeted platforms as variable component models. Dataflows can then be mapped onto platforms to express a specification of such variability-intensive systems. The proposed tool support transforms this specification into structural and behavioral variability models and reuses automated reasoning techniques to explore and assess the feasibility of all variants in a\u00a0\u2026", "num_citations": "6\n", "authors": ["1518"]}
{"title": "Tracing imperfectly modular variability in software product line implementation\n", "abstract": " When large software product lines are engineered, a combined set of traditional techniques, e.g., inheritance, design patterns, generic types, is likely to be used for realizing the variability at the implementation level. In these techniques the concept of feature, as a reusable unit, does not have a first-class representation in implementation, but still an imperfect form of modularization of variability can be achieved. We present in this paper a framework (i) to explicitly capture and document this imperfectly modular variability \u2013 by several combined techniques \u2013 in a dedicated variability model, and (ii) to establish trace links between this model and the variability model at the specification level. We report on the implementation of the framework through a domain specific language, and show the feasibility of the approach on a real feature-rich system.", "num_citations": "6\n", "authors": ["1518"]}
{"title": "Domain specific languages for managing feature models: Advances and challenges\n", "abstract": " Managing multiple and complex feature models is a tedious and error-prone activity in software product line engineering. Despite many advances in formal methods and analysis techniques, the supporting tools and APIs are not easily usable together, nor unified. In this paper, we report on the development and evolution of the Familiar Domain-Specific Language (DSL). Its toolset is dedicated to the large scale management of feature models through a good support for separating concerns, composing feature models and scripting manipulations. We overview various applications of Familiar and discuss both advantages and identified drawbacks. We then devise salient challenges to improve such DSL support in the near future.", "num_citations": "6\n", "authors": ["1518"]}
{"title": "Interop\u00e9rabilit\u00e9 des syst\u00e8mes d'information: approches dirig\u00e9es par les mod\u00e8les\n", "abstract": " Les systemes d\u2019information sont de plus en plus souvent construitsa partir de l\u2019agr\u00e9gation de systemes informatiques qu\u2019il convient de maintenir et faire \u00e9voluer avec agilit\u00e9 et sans entropie non contr\u00f4l\u00e9e. Ceci n\u2019est pas sans poser des problemes d\u2019interop\u00e9rabilit\u00e9! L\u2019ing\u00e9nierie dirig\u00e9e par les modeles (IDM) a entre autres objectifs d\u2019apporter des solutions aux difficult\u00e9s d\u2019interop\u00e9rabilit\u00e9 entre les systemes. Cet article est le r\u00e9sum\u00e9 des r\u00e9flexions men\u00e9es au sein de l\u2019action sp\u00e9cifique \u00abInterop\u00e9rabilit\u00e9 des Systemes d\u2019Information et ing\u00e9nierie des modeles: quels d\u00e9fis, quelles solutions?\u00bb soutenue par inforsid. Nous proposons une synthese d\u2019un ensemble d\u2019approches bas\u00e9es sur l\u2019IDM et l\u2019ing\u00e9nierie des connaissances r\u00e9pondanta des problemes du monde industriel pos\u00e9s par l\u2019interop\u00e9rabilit\u00e9. De nombreuses questions et limites ont \u00e9t\u00e9 soulev\u00e9es lors de nos rencontres qui sont ici \u00e9galement rapport\u00e9es dans cet article.ABSTRACT. Information systems are more and more often based on aggregation of other systems that must be maintained and evolved in an agile way and with no entropy creation. This is not without interoperability problems! Among others, the aim of Model-Driven Engineering (MDE) is to provide solutions for interoperability issues between systems. This paper summarizes thoughts that have come up from the specific action\u201d Interoperability of information systems and model-driven engineering: What challenges? What solutions?\u201d supported by inforsid. We propose a summary of approaches that are based on MDE and knowledge engineering and that tackle interoperability issues in the industry. Open questions and limitations\u00a0\u2026", "num_citations": "6\n", "authors": ["1518"]}
{"title": "From components to autonomic elements using negotiable contracts\n", "abstract": " Autonomic computing aims at producing software systems that can manage themselves. As component-based development also partly addresses the complexity of large applications, we propose to combine the benefits of both approaches by using components equipped with negotiable contracts. These contracts specify the correct behavior of the components and play a central role in feedback control loops to enforce some autonomic features on components. In this paper, we present ConFract, a contract-based framework for hierarchical components in which contracts are runtime objects that are dynamically built from specifications, and automatically updated according to dynamic reconfigurations. Moreover, contracts clearly define the responsibilities (guarantor, beneficiaries) between their participating components which are exploited by some negotiations to automatically adapt components and\u00a0\u2026", "num_citations": "6\n", "authors": ["1518"]}
{"title": "On contracting different behavioral properties in component-based systems\n", "abstract": " Using different specification formalisms together is necessary to leverage better reliability on component-based systems. The ConFract system provides a contracting system for hierarchical software components, but currently, only executable assertions are supported. In this paper, we describe how to integrate other kinds of formalism in ConFract. We propose a domain specific language and integration tools that enable designers to describe the observations needed to appropriately verify their specifications.", "num_citations": "6\n", "authors": ["1518"]}
{"title": "Towards a consistent viewpoint on consistency for persistent applications\n", "abstract": " Orthogonally persistent systems allow the use of a single object model to handle programs and data independently of their persistent condition. However, there is not yet any means to specify and control consistency in a single way, that is both program correctness and data integrity. This paper describes how the use of assertions can be extended to some important stages of the persistent application\u2019s life cycle: design, implementation, testing and evolution. We present our on-going implementation, the NightCap system, which aims at integrating assertions, with a mapping of the Object Constraint Language to Java, into a orthogonally persistent platform, namely PJama.", "num_citations": "6\n", "authors": ["1518"]}
{"title": "Vers des interfaces graphiques flexibles de configuration\n", "abstract": " Par leur utilisation dans des domaines maintenant tr\u00e8s divers, les lignes de produits logiciels sont de plus en plus confront\u00e9es \u00e0 une forte \u00e9volution coupl\u00e9e \u00e0 des besoins de configuration par des utilisateurs finaux. L'interface graphique de configuration doit alors \u00eatre d\u00e9duite, de mani\u00e8re g\u00e9n\u00e9rique, des mod\u00e8les de variabilit\u00e9 de la ligne, mais les travaux relatifs aux IHM soulignent les faiblesses ergonomiques de ce type d'approche. Dans cet article, nous relatons une exp\u00e9rience de r\u00e9alisation d'une interface de configuration d\u00e9di\u00e9e \u00e0 la cr\u00e9ation de syst\u00e8mes de diffusion d'informations, bas\u00e9e sur une approche mixte m\u00ealant g\u00e9n\u00e9ricit\u00e9 et adaptation de l'interface graphique par annotation des feature models d\u00e9crivant la variabilit\u00e9.", "num_citations": "5\n", "authors": ["1518"]}
{"title": "Vers la n\u00e9gociation de contrats dans les composants logiciels hi\u00e9rarchiques\n", "abstract": " Sauf mention contraire ci-dessus, le contenu de cette notice bibliographique peut \u00eatre utilis\u00e9 dans le cadre d\u2019une licence CC BY 4.0 Inist-CNRS/Unless otherwise stated above, the content of this bibliographic record may be used under a CC BY 4.0 licence by Inist-CNRS/A menos que se haya se\u00f1alado antes, el contenido de este registro bibliogr\u00e1fico puede ser utilizado al amparo de una licencia CC BY 4.0 Inist-CNRS", "num_citations": "5\n", "authors": ["1518"]}
{"title": "Contracting hierarchical components\n", "abstract": " Component-Based Software Engineering is now calling for hierarchical components to build components from components assembly. Ensuring properties of a resulting assembled component from properties of its subcomponents is then a major need. Currently contract-based approaches does not handle hierarchical components and mix up the notion of contract with the specification of a given property. The contract is then somewhat implicit, hampering its use and management. We propose confract, a contracting system for hierarchical components that supports both interface contracts on interface binding and composition contracts on assembly. The model also clearly distinguishes specifications from contracts and has been validated by the integration of a dedicated assertion language.", "num_citations": "5\n", "authors": ["1518"]}
{"title": "Towards sampling and simulation-based analysis of featured weighted automata\n", "abstract": " We consider the problem of model checking Variability-Intensive Systems (VIS) against non-functional requirements. These requirements are typically expressed as an optimization problem over quality attributes of interest, whose value is determined by the executions of the system. Identifying the optimal variant can be hard due to the state-explosion problem inherent to model checking the exponentially growing number of variants in large VIS. In this paper, we lay the foundations for the application of smart sampling and statistical model checking to solve this problem faster. We design a simple method that samples variants and executions in a uniform manner from a featured weighted automaton and that assesses which of the sampled variants/executions are optimal. We implemented our approach on top of ProVeLines, a tool suite for model-checking VIS and carried out a preliminary evaluation on an industrial\u00a0\u2026", "num_citations": "4\n", "authors": ["1518"]}
{"title": "Smart IoT for Mobility: Automating of Mobility Value Chain through the Adoption of Smart Contracts within IoT Platforms\n", "abstract": " Innovative services induced by blockchain technologies have social, economical, legal and technical impacts. For this reason, the project smart Internet of Things (IoT) for mobility has adopted a transdisciplinary scientific approach to investigate how blockchain technology would enhance confidence in IoT based services. More precisely, it focuses on services whose systems are decentralized, mainly based on the adoption of the execution of Smart Contracts (intelligent contracts), the whole being really adaptable to the rising generation of IoT. The study targets the social impacts of smart contracts\u2019 adoption within IoT. Its aim is to design a smart contract based on a well understanding of its social acceptance and its legal context and prerogatives. In this paper, it is presented the context, the social study, the use cases targeted and finally first analysis.", "num_citations": "4\n", "authors": ["1518"]}
{"title": "Uniform and model-driven engineering of feedback control systems\n", "abstract": " Engineering and reusing feedback control systems face challenging issues, such as structuring control loops to allow for fine-grained reasoning about their architecture. We propose a model-driven approach in which all major parts of the feedback control are uniformly designed as first-class adaptive elements. Expected properties of the approach are discussed and illustrated on a real scenario of overload control in a grid middleware.", "num_citations": "4\n", "authors": ["1518"]}
{"title": "Towards a versatile contract model to organize behavioral specifications\n", "abstract": " The dependability of component-based systems mainly relies on the ability to guarantee the safe collaboration of components. Many specification formalisms can then be used and we argue that such specifications should be organized through an appropriate contract model so that guarantees and possible violations can be better exploited. In this paper, we propose a versatile contract model that explicitly reifies the assumptions and guarantees of some behavioral specifications on component assemblies. We briefly illustrate the integration of executable assertions and we detail how Behavior Protocols can be integrated in the contract model.", "num_citations": "4\n", "authors": ["1518"]}
{"title": "N\u00e9gociation de contrats, des syst\u00e8mes multi-agents aux composants logiciels\n", "abstract": " Sauf mention contraire ci-dessus, le contenu de cette notice bibliographique peut \u00eatre utilis\u00e9 dans le cadre d\u2019une licence CC BY 4.0 Inist-CNRS/Unless otherwise stated above, the content of this bibliographic record may be used under a CC BY 4.0 licence by Inist-CNRS/A menos que se haya se\u00f1alado antes, el contenido de este registro bibliogr\u00e1fico puede ser utilizado al amparo de una licencia CC BY 4.0 Inist-CNRS", "num_citations": "4\n", "authors": ["1518"]}
{"title": "symfinder: A Toolchain for the Identification and Visualization of Object-Oriented Variability Implementations\n", "abstract": " When variability is implemented into a single variability-rich system with object-oriented techniques (eg., inheritance, overloading, design patterns), the variation points and variants usually do not align with the domain features. It is then very hard and time consuming to manually identify these variation points to manage variability at the implementation level. symfinder is a toolchain to automatically identify and visualize these variability implementation locations inside a single object-oriented code base. For the identification part, it relies on the notion of symmetry between classes or methods to characterize uniformly some implementation techniques such as inheritance, overloading, or design patterns like Factory. The toolchain also generates an interactive Web-based visualization in which classes that are variation points are nodes linked together through their inheritance relationships, while the size, color, and\u00a0\u2026", "num_citations": "3\n", "authors": ["1518"]}
{"title": "Experiences in teaching variability modeling and model-driven generative techniques\n", "abstract": " Teaching software engineering is an activity that needs to constantly evolve to cope with new paradigms, principles and techniques. In this paper, we briefly report on several years of experience in teaching both generative techniques in a model-driven engineering context and variability modeling related to software-product line engineering. Our current practice relies on making students progress on running projects that they evolve with different techniques along a semester. We also discuss the obtained benefits and some perspectives.", "num_citations": "3\n", "authors": ["1518"]}
{"title": "Model driven engineering for science gateways\n", "abstract": " From n-Tier client/server applications, to more complex academic Grids, or even the most recent and promising industrial Clouds, the last decade has witnessed significant developments in distributed computing. In spite of this conceptual heterogeneity, Service-Oriented Architectures (SOA) seem to have emerged as the common underlying abstraction paradigm. Suitable access to data and applications resident in SOAs via so-called Science Gateways has thus become a pressing need in various fields of science, in order to realize the benefits of Grid and Cloud infrastructures. In this context, authors have consolidated work from three complementary experiences in European projects, which have developed and deployed large-scale production quality infrastructures as Science Gateways to support research in breast cancer, paediatric diseases and neurodegenerative pathologies respectively. In analysing the requirements from these biomedical applications the authors were able to elaborate on commonly faced Grid development issues, while proposing an adaptable and extensible engineering framework for Science Gateways. This paper thus proposes the application of an architecture-centric Model-Driven Engineering (MDE) approach to service-oriented developments, making it possible to define Science Gateways that satisfy quality of service requirements, execution platform and distribution criteria at design time. An novel investigation is presented on the applicability of the resulting grid MDE (gMDE) to specific examples, and conclusions are drawn on the benefits of this approach and its possible application to other areas, in particular\u00a0\u2026", "num_citations": "3\n", "authors": ["1518"]}
{"title": "Taming Complexity of Large Software Systems: Contracting, Self-Adaptation and Feature Modeling\n", "abstract": " Our work stands in the field of software engineering for large scale software intensive systems. We aim at providing techniques and tools to help software architects master the ever-increasing complexity of these systems. Using mainly model-driven engineering approaches, our contribution is organised around three axes. The first axis concerns the development of reliable and flexible hierarchical component-based systems with dynamic reconfiguration capabilities. Through the use of novel forms of software contracts, the proposed systems and frameworks support several specification formalisms and maintain up-to-date contracts at runtime. A second part of our work consists in providing self-adaptive capabilities to these contracting systems, through negotiation mechanisms over contracts and self-adaptive monitoring sub-systems. A third axis is related to software product lines in which feature models are widely used to model variability. Our contribution consists in providing a set of sound and efficiently implemented composition operators for feature models, as well as a dedicated language for their large scale management.", "num_citations": "3\n", "authors": ["1518"]}
{"title": "Identifying and Mapping Implemented Variabilities in Java and C++ Systems using symfinder\n", "abstract": " Variability is present in most modern object-oriented softwareintensive systems, despite that they commonly do not follow a product line approach. In these systems, variability is implicit and hardly documented as it is implemented by different traditional mechanisms, namely inheritance, overloading, or design patterns. This hampers variability management as automatic identification of variation points (vp-s) with variants is very difficult. symfinder is a symmetry-based tooled approach that enables automatic identification of potential vp-s with variants in such systems. Then, it visualizes them relying on their density in code assets. From the Java-only version presented at SPLC'2019, we present here several notable improvements. They concern an added support for C++ systems, the identification of vp-s implemented by Decorator and Template pattern instances, an enhanced visualization (eg, to display all variants\u00a0\u2026", "num_citations": "2\n", "authors": ["1518"]}
{"title": "Exploiting the internet of things to teach domain-specific languages and modeling\n", "abstract": " The Computer Science department of the University of Nice\u2013Sophia Antipolis is offering a course dedicated to Model-Driven Engineering (MDE) in its graduate curriculum. This course exists since 2006, and was usually badly perceived by students, despite many reorganizations of both course contents and teaching methods. This paper is an experience report that describes the latest version of this course. It relies on a case study leveraging domain-specific languages and open-source microcontrollers to support the domain modeling of Internet of Things pieces of software. It exploits domain modeling as a pivot to illustrate MDE concepts (eg, meta-modeling, model transformation), coupled to very practical labs where students experiment their models on real microcontrollers. This new version was well received by students.", "num_citations": "2\n", "authors": ["1518"]}
{"title": "Using Architecture Models to Rapidly Prototype Feedback Control Systems\n", "abstract": " Introduction. Self-Adaptive systems are a promising research direction to address the ever growing complexity and uncertainty of the contemporary software systems. Such systems autonomously (ie, without or with minimal human interactions) adjust their structure and behavior at runtime based on their perception of their state and the state of their environment in order to follow some higher-level objectives [1].While there exist many different forms of self-adaptive systems they are usually organized in some form of Feedback Control Loop (FCL), where measurements of system\u2019s outputs are used to determine the control inputs which in turn should affect again the outputs converging towards the determined goal [2]. However, engineering feedback control systems in a predictive and effective way is a major engineering challenge. Not only it is difficult to find the right control model that drives the system adaptation, but also the process of building the necessary surrounding architecture around the control is tedious and far from being trivial. Our long term goal is to provide researchers and engineers with a tooled approach for rapidly prototyping explicit adaptation strategies while abstracting them from the painful low-level implementation details. We focus on externalized control in which the core system logic is separated from the adaptation behavior. In order to facilitate the rapid prototyping we use model-driven engineering techniques to design, implement and verify several adaptation behaviors based on finegrained architectures that are composed of reusable explicit control loop elements. The resulting architecture models can be then\u00a0\u2026", "num_citations": "2\n", "authors": ["1518"]}
{"title": "Vers l'int\u00e9gration dynamique de contrats dans des architectures orient\u00e9es services: une experience applicative du mod\u00e8le au code\n", "abstract": " La flexibibilit\u00e9 offerte par les nouvelles architectures orient\u00e9es services (SOA) renforce les besoins en contractualisation des services fournis et usages de ces services. L'expression de ces exigences et contrats se situe alors \u00e0 tous les niveaux du cycle de vie des applications et n\u00e9cessite des mises en oeuvre diff\u00e9rentes en fonction de leur nature et des plates-formes cibl\u00e9es. Dans le cadre du RNTL FAROS, nous avons men\u00e9 une premi\u00e8re exp\u00e9rimentation pour l'introduction de contrats dans une application bas\u00e9e sur une architecture SOA. Nous pr\u00e9sentons ici la d\u00e9marche, les mises en oeuvre et discutons les avantages attendus de l'approche dirig\u00e9e par les mod\u00e8les pour g\u00e9rer les \u00e9volutions de l'application.", "num_citations": "2\n", "authors": ["1518"]}
{"title": "Some Autonomic Features of Hierarchica Components with Negotiable Contracts\n", "abstract": " In order to combine autonomic computing and component-based development, we propose to equip components with negotiable contracts. These contracts are automatically updated according to dynamic reconfigurations. Using responsibilities associated to components, negotiation mechanisms are provided, so that components and contracts can be safely adapted. Contracts then play a central role in feedback control loops to enforce some autonomic features.", "num_citations": "2\n", "authors": ["1518"]}
{"title": "Specification of a contract based built-in test framework for fractal\n", "abstract": " Contracts on object-oriented classes have been first developed by B. Meyer [10] as a software documentation and design approach. They were also quickly used to support class testing. At the end of the nineties, an approach of\u201d Contract-Based Testing\u201d was proposed by several authors [9] and is now considered as one of the best testing techniques [2]. In component-based development, the\u201d Design by Contract\u201d approach reveals itself as more relevant, not to say essential. Contracts have been quickly used in the design of components [1].Several proposals have been recently made to construct contract-based built-in tests (CBBT), as a methodological approach [8] or with practical frameworks [11]. To our knowledge, no such framework has been proposed so far for the Fractal component model. We have previously identified [4] how to construct such a framework using the contracting system ConFract [6]. In this\u00a0\u2026", "num_citations": "2\n", "authors": ["1518"]}
{"title": "Capturing the diversity of analyses on the Linux kernel variability\n", "abstract": " As its variability management architecture is complex, the Linux kernel is a constant subject of study for analyzing different aspects of its variability. It relies on a configuration-aware build system, preprocessor directives in the code, and a configuration tool. While many studies have focused on detecting anomalies within these parts or between them, all concepts and denominations are different among contributions, with similar properties devised with varied formalisms, or with no easy relationship between them. This actually hampers the understanding of all variability issues and proposed analyses, as well as their application to other highly configurable systems. In this paper, we analyse the different properties that have been studied on the variability of the kernel and propose a formalism based on the generic concepts of configurator and derivator. We instantiate them to represent the Kconfig, the Kbuild, and CPP\u00a0\u2026", "num_citations": "1\n", "authors": ["1518"]}
{"title": "Extending the identification of object-oriented variability implementations using usage relationships\n", "abstract": " Many variability-rich object-oriented systems rely on multiple traditional techniques (inheritance, patterns) to implement their variability in a single codebase. These variability implementation places are neither explicit nor documented, hampering their detection and variability comprehension. Based on the identification of symmetry property in seven implementation techniques, a first approach was proposed with symfinder to automatically identify and display the variability of a system in a graph-based visualization structured by inheritance. However, composition, or more generally the usage relationship, is extensively used to implement the variability in object-oriented systems, and without this information, comprehending the large amount of variability identified by symfinder is not trivial. In this paper, we present symfinder-2, an extension of the former approach that incorporates the usage relationships to better\u00a0\u2026", "num_citations": "1\n", "authors": ["1518"]}
{"title": "Capturing the diversity of analyses on the Linux kernel variability\u2013Companion Technical Report\n", "abstract": " This technical report comes as a companion to \"Capturing the diversity of analyses on the Linux kernel variability\" published at SPLC '21. In this report, we present additional inconsistencies in terminologies found in the state-of-the-art. We also give the exhaustive list of anomalies present in the five studied papers and detail the application of our formalism on all of them. Finally, we present a synthetic map of the studied anomalies over the Linux build system and their instantiations using our formalism.", "num_citations": "1\n", "authors": ["1518"]}
{"title": "Functional feasibility analysis of variability-intensive data flow-oriented applications over highly-configurable platforms\n", "abstract": " Data-flow oriented embedded systems, such as automotive systems used to render HMI (e.g., instrument clusters, infotainments), are increasingly built from highly variable specifications while targeting different constrained hardware platforms configurable in a fine-grained way. These variabilities at two different levels lead to a huge number of possible embedded system solutions, which functional feasibility is extremely complex and tedious to predetermine. In this paper, we propose a tooled approach that capture high level specifications as variable dataflows, and targeted platforms as variable component models. Dataflows can then be mapped onto platforms to express a specification of such variability-intensive systems. The proposed solution transforms this specification into structural and behavioral variability models and reuses automated reasoning techniques to explore and assess the functional feasibility of\u00a0\u2026", "num_citations": "1\n", "authors": ["1518"]}
{"title": "Contracts-based Control Integration into Software Systems\n", "abstract": " Among the different techniques that are used to design self-adaptive software systems, control theory allows one to design an adaptation policy whose properties, such as stability and accuracy, can be formally guaranteed under certain assumptions. However, in the case of software systems, the integration of these controllers to build complete feedback control loops remains manual. More importantly, it requires an extensive handcrafting of non-trivial implementation code. This may lead to inconsistencies and instabilities as no systematic and automated assurance can be obtained on the fact that the initial assumptions for the designed controller still hold in the resulting system.                 In this chapter, we rely on the principles of design-by-contract to ensure the correction and robustness of a self-adaptive software system built using feedback control loops. Our solution raises the level of abstraction upon\u00a0\u2026", "num_citations": "1\n", "authors": ["1518"]}
{"title": "Solving the TTC'14 FIXML Case Study with SIGMA\n", "abstract": " SIGMA is a family of Scala internal Domain-Specific Languages (DSLs) for model manipulation that provides expressive and efficient API for model consistency checking, model-to-model and model-to-text transformations. In this paper we describe a SIGMA solution for the Transformation Tool Contest 2014 (TTC'14) FIXML case study, a transformation of FIXML XML format into class definitions in Java, C# and C++. The full case study including all three extensions have been realized and are publicly available on Github and in the SHARE environment.", "num_citations": "1\n", "authors": ["1518"]}
{"title": "Feedback Control Definition Language\n", "abstract": " The past two decades have witnessed the proliferation of computing devices alongside with the development of their raw computing capacities growing at exponential rates. While only a few years ago, computer systems had occupied a well delimited part of our lives, today, this is not true anymore as they are present everywhere [Maggio, 2011]. This phenomenal growth together with the expansion of the Internet have opened a new era of information accessibility [IBM, 2006]. However, this boom has been also accompanied with a steep grow of complexity of computing systems, putting enormous demand on the underlying information technology infrastructure that is now reaching the edge of being manageable. In his keynote to National Academy of Engineers at Harvard University in October 2001, IBM senior research vice-president Paul Horn, said:``In fact, the growing complexity of the IT infrastructure threatens to undermine the very benefits information technology aims to provide''[Horn, 2001].To give some examples of this complexity increase, consider the following two aspects of complexity increase: the expansion of the global IP traffic in data centers as a consequence of growing IT infrastructures and the size growth of the software source code. From 2011 the global data center IP traffic has been growing at annual rate of 31% nearly quadrupling from 1.7 ZB to 6.6 ZB by the end of 2016 [Cisco Systems, 2012]. The code size of the most popular HTTP server [Netcraft, 2013], Apache, has been growing steadily about 100K lines-of-code per year over last 7 years; in the case of Linux Kernel it is more than 1M [Ohloh, 2013] lines a year.", "num_citations": "1\n", "authors": ["1518"]}
{"title": "R\u00e9seaux Radiomobiles: Des syst\u00e8mes analogiques au haut d\u00e9bit mobile\n", "abstract": " 72\u25d7 REE N 5/2011 la quatri\u00e8me g\u00e9n\u00e9ration des syst\u00e8mes mobiles cale. Elles apparaissent au cours des ann\u00e9es 1980. Les d\u00e9veloppements de syst\u00e8mes radio mobiles sont la plupart du temps nationaux. Les services qu\u2019ils offrent restent, en g\u00e9n\u00e9ral, co\u00fbteux, et sont souvent r\u00e9serv\u00e9s aux utilisateurs professionnels: les terminaux sont volumineux, et le plus souvent embarqu\u00e9s dans des v\u00e9hicules. On ne parle pas de t\u00e9l\u00e9phones portables, mais plus de t\u00e9l\u00e9phones embarqu\u00e9s ou transportables. Quelques syst\u00e8mes analogiques ont eu un d\u00e9ploiement d\u00e9passant les pays l\u2019ayant promu. On peut citer parmi eux le syst\u00e8me NMT\u2013Nordic Mobile Telephone\u2013sp\u00e9cifi\u00e9 par les pays scandinaves et d\u00e9ploy\u00e9 dans de nombreux pays europ\u00e9ens. En 1985, 110 000 clients scandinaves utilisaient le standard NMT. En Am\u00e9rique du Nord, c\u2019est le syst\u00e8me AMPS\u2013Advanced Mobile Phone System\u2013qui a \u00e9t\u00e9 largement d\u00e9ploy\u00e9. C\u2019est l\u2019op\u00e9rateur historique, France Telecom, qui a d\u00e9ploy\u00e9 le premier r\u00e9seau cellulaire en France. Son syst\u00e8me\u2013Radiocom 2000\u2013fut lanc\u00e9 en 1986. En 1988, la Soci\u00e9t\u00e9 Fran\u00e7aise de Radiot\u00e9l\u00e9phone, d\u00e9ploie le premier r\u00e9seau concurrent de celui de France Telecom. C\u2019est un syst\u00e8me bas\u00e9 sur la norme NMT. En France, ces syst\u00e8mes de premi\u00e8re g\u00e9n\u00e9ration fonctionnaient dans des bandes de fr\u00e9quences autour de 400 Mhz pour Radiocom 2000 et de 450 Mhz pour NMT. Ces syst\u00e8mes fonctionnaient en mode FDMA-Frequency Division Multiple Access: une bande de fr\u00e9quences \u00e9tait r\u00e9serv\u00e9e pour la voie montante et une autre pour la voie descendante. Ces syst\u00e8mes int\u00e9graient \u00e9galement la fonction de handover, qui permettait de\u00a0\u2026", "num_citations": "1\n", "authors": ["1518"]}
{"title": "Un modele fonde sur les assertions pour le genie logiciel et les bases de donnees: application au langage oqual, une extension d'eiffel\n", "abstract": " La reutilisation de composants par une approche objet necessite un haut niveau de qualite de documentation et de fiabilite, qu'il est difficile d'obtenir dans un contexte d'evolution incessante. L'approche assertionnelle constitue un bon compromis entre les preuves et les developpements sans rigueur. Notre introduction des quantifications, sur des collections d'instances et des extensions de types, augmente de maniere significative l'expressivite actuelle des assertions du langage eiffel. Comme leur evolution necessite une technique d'exploration voisine de celle requise pour les bases de donnees, nous proposons un modele et un support d'execution communs a ces deux domaines. Pour determiner les moments et les techniques d'evaluation les plus appropries pour les quantifications, nous proposons une classification des assertions qui exprime les intentions semantiques de chaque assertion. Nous definissons alors oqual comme une extension d'eiffel pour exprimer des formules logiques avec quantification, qui servent aux assertions et aux criteres de requetes de bases de donnees. Des raccourcis de saisie, combines a une presentation proche du langage mathematique, permettent d'ecrire facilement des assertions, expressives et lisibles, ainsi que des requetes selectives avec emboitement. Nous etudions les aspects methodologiques de notre langage a travers des exemples concrets, de specification par assertions et de prototypage a l'aide de requetes. La realisation d'un traducteur d'oqual en eiffel montre la faisabilite de l'approche, en utilisant une technique de reification par necessite. De maniere plus exploratoire, nous proposons\u00a0\u2026", "num_citations": "1\n", "authors": ["1518"]}