{"title": "Automated Vulnerability Prediction in Software Systems and Lightweight Identification of Design Patterns in Source Code\n", "abstract": " Software development companies put a heavy investment in fixing security vulnerabilities in their products after code development. This demands an automated mechanism to identify security vulnerabilities during and after software development. One approach is to include possible solutions like security design patterns during design. This reduces system-wide architectural changes required and enables efficient documentation and maintenance of the software systems. Further, identifying which design patterns already exist in source code can help maintenance engineers determine if new requirements can be satisfied. The current techniques for design pattern identification require either manually labeling training datasets or manually specifying rules or queries for each pattern. As part of this research, we took a two-pronged approach: 1. Pre-implementation: predict vulnerabilities before any source code is written, to increase awareness of possible risks while developing the system. 2. Post-implementation: check the source code to identify any missing security patterns, based on the identified vulnerabilities. For the first approach, we created a Keyword Extraction-based Vulnerability Identification System (KEVIS) that uses natural language processing techniques to extract keywords and n-grams from software documentation to predict security vulnerabilities in software systems. We analyzed the correlation of certain keywords and n-grams with the occurrence of various security vulnerabilities as well as the correlation between different vulnerabilities. Additionally, we analyzed the performance of classification algorithms (Logistic Regression\u00a0\u2026", "num_citations": "0\n", "authors": ["2268"]}
{"title": "Automated Query Generation for Design Pattern Mining in Source Code\n", "abstract": " Identifying which design patterns already exist in source code can help maintenance engineers gain a better understanding of the source code and determine if new requirements can be satisfied. There are current techniques for mining design patterns, but some of these techniques require tedious work of manually labeling training datasets, or manually specifying rules or queries for each pattern. To address this challenge, we introduce Model2Mine, a technique for automatically generating SPARQL queries by parsing UML diagrams, ensuring that all constraints are appropriately addressed. We discuss the underlying architecture of Model2Mine and its functionalities. Our initial results indicate that Model2Mine can automatically generate queries for the three types of design patterns (i.e., creational, behavioral, structural), with a slight performance overhead compared to manually generated queries, and accuracy that is comparable, or perform better than, existing techniques.", "num_citations": "0\n", "authors": ["2268"]}
{"title": "Automated Query Generation for Design Pattern Mining in Source Code\n", "abstract": " Identifying which design patterns already exist in source code can help maintenance engineers gain a better understanding of the source code and determine if new requirements can be satisfied. There are current techniques for mining design patterns, but some of these techniques require tedious work of manually labeling training datasets, or manually specifying rules or queries for each pattern. To address this challenge, we introduce Model2Mine, a technique for automatically generating SPARQL queries by parsing UML diagrams, ensuring that all constraints are appropriately addressed. We discuss the underlying architecture of Model2Mine and its functionalities. Our initial results indicate that Model2Mine can automatically generate queries for the three types of design patterns (ie, creational, behavioral, structural), with a slight performance overhead compared to manually generated queries, and accuracy\u00a0\u2026", "num_citations": "0\n", "authors": ["2268"]}