{"title": "Software model checking takes off\n", "abstract": " A translator framework enables the use of model checking in complex avionics systems and other industrial settings.", "num_citations": "188\n", "authors": ["690"]}
{"title": "Compositional verification of architectural models\n", "abstract": " This paper describes a design flow and supporting tools to significantly improve the design and verification of complex cyber-physical systems. We focus on system architecture models composed from libraries of components and complexity-reducing design patterns having formally verified properties. This allows new system designs to be developed rapidly using patterns that have been shown to reduce unnecessary complexity and coupling between components. Components and patterns are annotated with formal contracts describing their guaranteed behaviors and the contextual assumptions that must be satisfied for their correct operation. We describe the compositional reasoning framework that we have developed for proving the correctness of a system design, and provide a proof of the soundness of our compositional reasoning approach. An example based on an aircraft flight control system is\u00a0\u2026", "num_citations": "133\n", "authors": ["690"]}
{"title": "Method and apparatus for detecting objects\n", "abstract": " An object detection system is provided that projects one or more patterns onto a monitored area, captures one or more live images of the monitored area, and detects objects that enter the monitored area by detecting changes in the one or more patterns in the live images. Such an object detection system may be less susceptible to dynamic lighting conditions, and more sensitive to object motion and/or presence.", "num_citations": "124\n", "authors": ["690"]}
{"title": "Supervisory control of real-time discrete-event systems using lattice theory\n", "abstract": " The behaviour of timed discrete-event systems (DES's) can be described by sequences of event occurrence times. These sequences can be ordered to form a lattice. Since logical (untimed) DES behaviours described by regular languages also form a lattice, questions of controllability for timed DES's may be treated in much the same manner as they are for untimed systems. In this paper we establish conditions for the controllability of timed DES performance specification which are expressed as inequations on the lattice of sequences. These specifications may take the form of sets of acceptable event occurrence times, maximum or minimum occurrence times, or limits on the separation times between events. Optimal behaviours are found as extremal solutions to these inequations using fixed point results for lattices.", "num_citations": "88\n", "authors": ["690"]}
{"title": "Object detection\n", "abstract": " A visual object detection system to provide access and/or presence monitoring of an area of interest. In steady state operation, that is when no object is entering or within the area of interest, only those portions of the incoming images that correspond to the border of the area of interest are analyzed. Once the border is breached by an object, the present invention may begin analyzing the entire area or selected regions inside the border of the area of interest. This may provide some level of presence monitoring of the area of interest. It is contemplated that both modes of analysis can take place simultaneously or sequentially, depending on the application. Once the object leaves the area of interest, the present invention preferably returns to the original steady state, and monitors only the border regions of the incoming images.", "num_citations": "70\n", "authors": ["690"]}
{"title": "Method and apparatus for detecting objects using structured light patterns\n", "abstract": " An object detection system is provided that projects one or more patterns onto a monitored area, captures one or more live images of the monitored area, and detects objects that enter the monitored area by detecting changes in the one or more patterns in the live images. Such an object detection system may be less susceptible to dynamic lighting conditions, and more sensitive to object intrusions. One illustrative example projects a pattern of dots onto an area to be monitored, and captures images corresponding to the monitored area, comparing live images to reference images to determine whether an object has intruded a defined area. The area to be monitored does not consist solely of the area captured in the images and may include a volume illuminated by the pattern as well as a volume corresponding to the captured image area. Objects not in the field of view may be detected by the disclosed systems and\u00a0\u2026", "num_citations": "69\n", "authors": ["690"]}
{"title": "Certification considerations for adaptive systems\n", "abstract": " Advanced capabilities planned for the next generation of unmanned aircraft will be based on complex new algorithms and non-traditional software elements. These aircraft will incorporate adaptive and intelligent control algorithms that will provide enhanced safety, autonomy, and high-level decision-making functions normally performed by human pilots, as well as robustness in the presence of failures and adverse flight conditions. This paper discusses the characteristics of adaptive algorithms and the challenges they present to certification for operation in the National Airspace System (NAS). We provide mitigation strategies that may make it possible to overcome these challenges.", "num_citations": "61\n", "authors": ["690"]}
{"title": "Implementing logical synchrony in integrated modular avionics\n", "abstract": " Many avionics systems must be implemented as redundant, distributed systems in order to provide the necessary level of fault tolerance. To correctly perform their function, the individual nodes of these systems must agree on some part of the global system state. Developing protocols to achieve this agreement is greatly simplified if the nodes execute synchronously relative to each other, but many Integrated Modular Avionics architectures assume nodes will execute asynchronously. This paper presents a simple design pattern, Physically Asynchronous/Logically Synchronous (PALS), that allows developers to design and verify a distributed, redundant system as though all nodes execute synchronously. This synchronous design can then be distributed over a physically asynchronous architecture in such a way that the logical correctness of the design is preserved. Use of this complexity reducing design pattern\u00a0\u2026", "num_citations": "57\n", "authors": ["690"]}
{"title": "Resolute: an assurance case language for architecture models\n", "abstract": " Arguments about the safety, security, and correctness of a complex system are often made in the form of an assurance case. An assurance case is a structured argument, often represented with a graphical interface, that presents and supports claims about a system's behavior. The argument may combine different kinds of evidence to justify its top level claim. While assurance cases deliver some level of guarantee of a system's correctness, they lack the rigor that proofs from formal methods typically provide. Furthermore, changes in the structure of a model during development may result in inconsistencies between a design and its assurance case. Our solution is a framework for automatically generating assurance cases based on 1) a system model specified in an architectural design language, 2) a set of logical rules expressed in a domain specific language that we have developed, and 3) the results of other formal\u00a0\u2026", "num_citations": "54\n", "authors": ["690"]}
{"title": "Machine safety system with mutual exclusion zone\n", "abstract": " A safety system receives access monitoring information from sensors to detect intrusion into a mutual exclusion zone by either an operator or mechanical equipment. The border of the mutual exclusion zone is segmented into portals that allow both the operator and equipment to access a common work area such as for loading material. When intrusion into one of the portals is detected, intrusion into any other selected portals triggers a safety violation. Access to the mutual exclusion zone via the other portals is prohibited until the interior of the zone is determined to be empty again.", "num_citations": "53\n", "authors": ["690"]}
{"title": "Automated configuration of communications for an ordered collection of devices\n", "abstract": " Device configuration information is automatically determined with respect to a physical process that multiple devices monitor or control. The physical process is exercised, with each device tracking progression of the process and determining a preceding device and a successor device. Messages are produced in a configuration mode by each device in a system indicating when some phase of the process monitored by the device begins and ends.", "num_citations": "52\n", "authors": ["690"]}
{"title": "A timed model for the control of discrete event systems involving decisions in the max/plus algebra\n", "abstract": " The class of discrete event systems that can be modeled as timed event graphs may be described by linear equations in nontraditional algebraic systems where the allowed operations are maximization and addition ('max/plus' algebra). Event graphs are deterministic in the sense that no decisions are permitted in the systems modeled. The algebraic approach is extended to a broader class of systems which require decisions to be made at certain times in the evolution. Algebraic tools are introduced for modeling sequences of decisions and it is shown that decision-making systems so represented are linear in the resulting algebra. Using this framework, it is possible to evaluate any arbitrary control policy and compare it against a target output criteria or compute an optimal policy.< >", "num_citations": "44\n", "authors": ["690"]}
{"title": "Object detection\n", "abstract": " A method for object detection that utilizes a patterned background. Patterned backgrounds are chosen such that each reference image analyzed will have both light and dark pixels. The method calculates the difference between the expected value for the light pixels and the expected value of the dark pixels in the reference image. This difference is used to chose a threshold value. The difference in expected values for the corresponding pixels in a live image is calculated and compared to the threshold value. If the difference in expected values of the live image are less than the threshold value, object detection is indicated.", "num_citations": "42\n", "authors": ["690"]}
{"title": "Study on the barriers to the industrial adoption of formal methods\n", "abstract": " The authors conducted an informal survey of contractors, customers, and certification authorities in the United States aerospace domain to identify barriers to the adoption of formal methods and suggested mitigations for those barriers. We surveyed 31 individuals from the following nine organizations: United States Army, Boeing, FAA, Galois, Honeywell, Lockheed Martin, NASA, Rockwell Collins, and Wind River. The top three barrier categories were education, tools, and the industrial environment (i.e., non-technical barriers with respect to personnel changes, contracts, and schedules) The top three mitigation categories were education, improving tool integration, and creating and disseminating evidence of the benefits of formal analysis. Strategies to accelerate adoption of formal methods include making formal methods a part of the undergraduate software engineering curriculum, hosting courses in formal\u00a0\u2026", "num_citations": "41\n", "authors": ["690"]}
{"title": "Adaptive scheduler for anytime tasks\n", "abstract": " Scheduling a set of anytime tasks includes assigning a percentage of at least one resource to each of the set of anytime tasks and allowing each of the set of anytime tasks to use the at least one resource in accordance with the respective assigned fraction. The percentage of the at least one resource assigned to each of the set of anytime tasks is subsequently adapted.", "num_citations": "41\n", "authors": ["690"]}
{"title": "Requirements analysis of a quad-redundant flight control system\n", "abstract": " In this paper we detail our effort to formalize and prove requirements for the Quad-redundant Flight Control System (QFCS) within NASA\u2019s Transport Class Model (TCM). We use a compositional approach with assume-guarantee contracts that correspond to the requirements for software components embedded in an AADL system architecture model. This approach is designed to exploit the verification effort and artifacts that are already part of typical software verification processes in the avionics domain. Our approach is supported by an AADL annex that allows specification of contracts along with a tool, called AGREE, for performing compositional verification. The goal of this paper is to show the benefits of a compositional verification approach applied to a realistic avionics system and to demonstrate the effectiveness of the AGREE tool in performing this analysis.", "num_citations": "34\n", "authors": ["690"]}
{"title": "Towards realizability checking of contracts using theories\n", "abstract": " Virtual integration techniques focus on building architectural models of systems that can be analyzed early in the design cycle to try to lower cost, reduce risk, and improve quality of complex embedded systems. Given appropriate architectural descriptions and compositional reasoning rules, these techniques can be used to prove important safety properties about the architecture prior to system construction. Such proofs build from \u201cleaf-level\u201d assume/guarantee component contracts through architectural layers towards top-level safety properties. The proofs are built upon the premise that each leaf-level component contract is realizable; i.e., it is possible to construct a component such that for any input allowed by the contract assumptions, there is some output value that the component can produce that satisfies the contract guarantees. Without engineering support it is all too easy to write leaf-level\u00a0\u2026", "num_citations": "30\n", "authors": ["690"]}
{"title": "DO-333 certification case studies\n", "abstract": " RTCA DO-333, Formal Methods Supplement to DO-178C and DO-278A, provides guidance for software developers wishing to use formal methods in the certification of airborne systems and air traffic management systems. This paper presents three case studies describing the use of different classes of formal methods to satisfy DO-178C certification objectives. The case studies examine different aspects of a common avionics example, a dual-channel Flight Guidance System (FGS), which is representative of the issues encountered in actual developments. The three case studies illustrate the use of theorem proving, model checking, and abstract interpretation. Each of these techniques has strengths and weaknesses and each could be applied to different life cycle data items and different objectives than those described here. Our purpose is to illustrate a reasonable application of each of these techniques to\u00a0\u2026", "num_citations": "27\n", "authors": ["690"]}
{"title": "The magazine archive includes every article published in Communications of the ACM for over the past 50 years.\n", "abstract": " Although formal methods have been used in the development of safety-and security-critical systems for years, they have not achieved widespread industrial use in software or systems engineering. However, two important trends are making the industrial use of formal methods practical. The first is the growing acceptance of model-based development for the design of embedded systems. Tools such as MATLAB Simulink 6 and Esterel Technologies SCADE Suite 2 are achieving widespread use in the design of avionics and automotive systems. The graphical models produced by these tools provide a formal, or nearly formal, specification that is often amenable to formal analysis.The second is the growing power of formal verification tools, particularly model checkers. For many classes of models they provide a\" push-button\" means of determining if a model meets its requirements. Since these tools examine all possible combinations of inputs and state, they are much more likely to find design errors than testing.", "num_citations": "27\n", "authors": ["690"]}
{"title": "Input prioritization for testing neural networks\n", "abstract": " Deep neural networks (DNNs) are increasingly being adopted for sensing and control functions in a variety of safety and mission-critical systems such as self-driving cars, autonomous air vehicles, medical diagnostics and industrial robotics. Failures of such systems can lead to loss of life or property, which necessitates stringent verification and validation for providing high assurance. Though formal verification approaches are being investigated, testing remains the primary technique for assessing the dependability of such systems. Due to the nature of the tasks handled by DNNs, the cost of obtaining test oracle data-the expected output, a.k.a. label, for a given input-is high, which significantly impacts the amount and quality of testing that can be performed. Thus, prioritizing input data for testing DNNs in meaningful ways to reduce the cost of labeling can go a long way in increasing testing efficacy. This paper\u00a0\u2026", "num_citations": "25\n", "authors": ["690"]}
{"title": "Formal modeling and analysis of advanced scheduling features in an avionics rtos\n", "abstract": " Integrated modular avionics (IMA) architectures found in modern aircraft contain applications of different criticalities executing on the same CPU. The execution of these applications must be scheduled so that they do not inadvertently consume CPU time that has been budgeted for other applications. This scheduling function may be performed by a real-time operating system (RTOS) that provides time partitioning guarantees. The large number of variables affecting application execution interleavings makes it difficult and costly to verify time partitioning by traditional means.             This paper reports on our efforts to use model checking techniques to verify time partitioning properties in an avionics RTOS. Our modeling and analysis is based on the actual embedded software so as to capture the implementation details of the scheduler. We focus here on several advanced scheduling features of the RTOS that are\u00a0\u2026", "num_citations": "25\n", "authors": ["690"]}
{"title": "Formal methods case studies for DO-333\n", "abstract": " RTCA DO-333, Formal Methods Supplement to DO-178C and DO-278A [35] provides guidance for software developers wishing to use formal methods in the certification of airborne systems and air traffic management systems. The supplement identifies the modifications and additions to DO-178C [33] objectives, activities, and software life cycle data that should be addressed when formal methods are used as part of the software development process. This includes artifacts that would be expressed using some formal notation and the verification evidence that could be derived from them.This report presents three case studies describing the use of different classes of formal methods to satisfy DO-178C certification objectives. The material presented is not intended to represent a complete certification effort. Rather, the purpose is to illustrate how formal methods can be used in a realistic avionics software development project, with a focus on the evidence produced that could be used to satisfy the verification objectives found in Section 6 of DO-178C.", "num_citations": "23\n", "authors": ["690"]}
{"title": "Pattern-based composition and analysis of virtually synchronized real-time distributed systems\n", "abstract": " Designing and verifying distributed protocols in a multi-rate asynchronous system is, in general, extremely difficult when the distributed computations require consistent input views, consistent actions and synchronized state transitions. In this paper, we address this problem and introduce a formal, complexity-reducing architectural pattern, called Multi-Rate PALS system, to support virtual synchronization in multi-rate distributed computations. The pattern supports a component to be virtually synchronized with other components in different instantiations of this pattern. We present an application of a hierarchical control system to show that the composition of these instantiations can be used to achieve desired system-level properties, such as distributed consistency and distributed coordination. We verify the logical synchronization guarantee of this pattern, which holds as long as the pattern assumptions are satisfied\u00a0\u2026", "num_citations": "22\n", "authors": ["690"]}
{"title": "Object detection\n", "abstract": " A method for object detection that utilizes a patterned background. Patterned backgrounds are chosen such that each reference image analyzed will have both light and dark pixels. The method calculates the difference between the expected value for the light pixels and the expected value of the dark pixels in the reference image. This difference is used to chose a threshold value. The difference in expected values for the corresponding pixels in a live image is calculated and compared to the threshold value. If the difference in expected values of the live image are less than the threshold value, object detection is indicated.", "num_citations": "22\n", "authors": ["690"]}
{"title": "Formal modeling and analysis of an avionics triplex sensor voter\n", "abstract": " Digital flight control systems utilize redundant hardware to meet high reliability requirements. In this study we use the SMV model checker to assess the design correctness of a sensor voter algorithm used to manage three redundant sensors. The sensor voter design is captured as a Simulink diagram. The requirements verified include normal operation, transient conditions, and fault handling.             The sensor voter algorithm is a realistic example of flight citical embedded software used to manage redundant air data or inertial reference sensors. We are using it to evaluate different design methods, languages, and tools currently available for formal verification. Key issues are 1) integration of formal verification into existing development processes and tools, and 2) synthesis of the correct environment (world abstraction) needed for analysis of normal and off-normal operation conditions.", "num_citations": "22\n", "authors": ["690"]}
{"title": "A generalized max-algebra model for performance analysis of timed and untimed discrete event systems\n", "abstract": " The class of Discrete Event Systems which can be modelled as timed event graphs may be described by linear equations in a non-traditional algebraic systems called a dioid or max-algebra. This paper extends the dioid algebra approach to a broader class of systems including both timed and untimed models, time-varying systems, and decision-making systems. We introduce an algebraic structure called a dioid vector space which allows any number of continuous functions to be included in the system description.", "num_citations": "22\n", "authors": ["690"]}
{"title": "Formal verification of an avionics sensor voter using SCADE\n", "abstract": " Redundancy management is widely utilized in mission critical digital flight control systems. This study focuses on the use of SCADE (Safety Critical Application Development Environment) and its formal verification component, the Design Verifier, to assess the design correctness of a sensor voter algorithm used for management of three redundant sensors. The sensor voter algorithm is representative of embedded software used in many aircraft today. The algorithm, captured as a Simulink diagram, takes input from three sensors and computes an output signal and a hardware flag indicating correctness of the output. This study is part of an overall effort to compare several model checking tools to the same problem. SCADE is used to analyze the voter\u2019s correctness in this part of the study. Since synthesis of a correct environment for analysis of the voter\u2019s normal and off-normal behavior is a key factor when\u00a0\u2026", "num_citations": "21\n", "authors": ["690"]}
{"title": "Model checking: Cleared for take off\n", "abstract": " The increasing popularity of model-based development tools and the growing power of model checkers are making it practical to use formal methods for verification of avionics software. This paper describes a translator framework that enables model checking tools to be easily integrated into a model-based development environment to increase assurance, reduce cost, and satisfy certification objectives. In particular, we describe how formal methods can be used to satisfy certification objectives of DO-178C/ED-12C, the soon-to-be-published guidance document for software aspects of certification for commercial aircraft.", "num_citations": "20\n", "authors": ["690"]}
{"title": "Real-time adaptive resource management for advanced avionics\n", "abstract": " This article considers methods for adaptively controlling computer resources in real time. Such methods may prove useful for enabling the reliable use of high-performance, \"anytime\" control algorithms in avionics systems.", "num_citations": "18\n", "authors": ["690"]}
{"title": "Requirements and architectures for secure vehicles\n", "abstract": " In the High-Assurance Cyber Military Systems project, researchers are investigating how to construct complex networked-vehicle software securely. Experiments demonstrated that careful attention to requirements and system architecture, along with formally verified approaches that remove known security weaknesses, can lead to vehicles that can withstand attacks from even sophisticated attackers with access to vehicle design data. The Web extra at https://youtu.be/EvG7fjdvyro is an audio podcast of author Michael W. Whalen reading the column that he cowrote with Darren Cofer and Andrew Gacek.", "num_citations": "17\n", "authors": ["690"]}
{"title": "Analysis of distributed spin applied to industrial-scale models\n", "abstract": " As software systems become increasingly complex, there is growing interest in the use of formal techniques to obtain higher assurance in their correctness. The most commonly used tools involve model-checking, such as SMV and Spin. But modeling complex systems with a high degree of fidelity implies exceedingly large state spaces that must be analyzed. These state spaces are typically too large for single processing nodes, in spite of great advances in memory reduction techniques. Moreover, approximation techniques such as hash compaction are less well-received where safety-critical systems are concerned. Effective distribution of the problem over many processing nodes has the potential of supporting the huge state spaces. Since our primary interest is in safety-critical software, we have spent considerable time evaluating the performance of distributed implementations of Spin in this context. In\u00a0\u2026", "num_citations": "16\n", "authors": ["690"]}
{"title": "Control and analysis of real-time discrete event systems\n", "abstract": " Many man-made systems such as automated factories, traffic control systems, communication networks, and computer programs are described in terms of discrete-valued variables that may change in highly discontinuous ways. These systems are called discrete event systems (DES) and are characterized by a discrete state set and a collection of events, such as the completion of a job or the arrival of a message. The system state changes only at time instants corresponding to the occurrence of one of these events.", "num_citations": "16\n", "authors": ["690"]}
{"title": "Control of event separation times in discrete event systems\n", "abstract": " The class of timed discrete event systems which can be modelled by automata known as timed event graphs are structurally related to finite state machines. Consequently, supervisory control problems for these timed DES can be addressed using methods similar to those developed for their untimed counterparts. When the desired behavior takes the form of minimum separation times between events, it also can be expressed as a timed event graph. Supervised behavior is then defined by the synchronous operation of the plant and specification automata. Controllability and the existence of optimal behaviors can be evaluated in this framework.", "num_citations": "14\n", "authors": ["690"]}
{"title": "A max-algebra solution to the supervisory control problem for real-time discrete event systems\n", "abstract": " For timed systems the supervisory control problem is to impose delays on controllable events to modify system behavior to meet some specified performance goal. Using the tools of max-algebra it is possible to compute the uncontrolled behavior of a timed event graph, define a specification for some new desired behavior, and determine whether the specification can be realized by any supervisor given the set of controllable events. When the desired behavior cannot be realized (i.e, it is uncontrollable), a minimally restrictive behavior which meets the original specification always exists. All of these concepts have direct analogy in the control of untimed automata.", "num_citations": "14\n", "authors": ["690"]}
{"title": "Complexity-reducing design patterns for cyber-physical systems\n", "abstract": " \u2022 Guarantees correspond to the component requirements\u2022 Assumptions correspond to the environmental constraints that were used in proving the component requirements\u2022 Contract specifies precisely the information that is needed to reason about the component\u2019s interaction with other parts of the system\u2022 Supports hierarchical decomposition of verification process", "num_citations": "11\n", "authors": ["690"]}
{"title": "Taming the complexity beast\n", "abstract": " Advanced capabilities planned for the next generation of aircraft and the Next Generation Air Transportation System (NextGen) will be based on complex new software. Integrated Modular Avionics (IMA) computing platforms already enable the implementation of more functionality in software and tighter integration of these functions to improve aircraft efficiency. In the future, aircraft may use adaptive and intelligent control algorithms to provide enhanced safety and robustness in the presence of failures and adverse flight conditions. Unmanned aircraft will join the National Airspace System (NAS), incorporating advanced control algorithms that will provide enhanced safety, autonomy, and high-level decision-making functions normally performed by human pilots. NextGen will encompass airborne and ground-based nodes with significant computational elements acting in coordination to maintain a safe and efficient airspace. However, there are serious barriers to the deployment of these new capabilities. As these systems have grown in complexity, verification of airborne software has become the single most costly development activity (Crum 2004). The verification costs of even more complex NextGen systems in the future may impact safety, not just through an increasing incidence of errors and unforeseen interactions, but by delaying and preventing the deployment of crucial software-based safety functions.Increasing system complexity therefore poses a threat to the continued safety of manned and unmanned aircraft in the NAS. Testing alone cannot establish strict bounds on all the behaviors that may occur during operation of these software\u00a0\u2026", "num_citations": "10\n", "authors": ["690"]}
{"title": "Formal methods in the aerospace industry: follow the money\n", "abstract": " Modern aircraft contain millions of lines of complex software, much of it performing functions that are critical to safe flight. This software must be verified to function correctly with the highest levels of assurance, and aircraft manufacturers must demonstrate evidence of correctness through a rigorous certification process. Furthermore, the size and complexity of the on-board software are rising exponentially. Current test-based verification methods are becoming more expensive and account for a large fraction of the software development cost. New approaches to verification are needed to cope effectively with the software being developed for next-generation aircraft.               Formal analysis methods such as model checking permit software design models to be evaluated much more completely than is possible through simulation or test. This permits design defects to be identified and eliminated early in the\u00a0\u2026", "num_citations": "10\n", "authors": ["690"]}
{"title": "Applications of model checking at Honeywell Laboratories\n", "abstract": " This paper provides a brief overview of five projects in which Honeywell has successfully used or developed model checking methods in the verification and synthesis of safety-critical systems.", "num_citations": "10\n", "authors": ["690"]}
{"title": "Software certification: Methods and tools (Dagstuhl seminar 13051)\n", "abstract": " With the pervasive deployment of software in dependable systems used in everyday life, society is increasingly demanding that software used in critical systems must meet minimum safety, security and reliability standards. Certification is the procedure by which an authorized person or agency assesses and verifies characteristics of a system or product in accordance with established requirements, standards, or regulations. For software, it encompasses traditional notions of verification, but also includes the evidence, tools, methods, and personnel qualifications that are needed to convince the certification authority that the system or product conforms to the relevant standard. Manufacturers of these systems need consistent and effective guidelines as to what constitutes acceptable evidence of software quality, and how to achieve it. Compared to process-oriented certification procedures, recent approaches provide evidence for dependability by the thorough evaluation of the product itself and the adequacy, coverage and maturity of design and quality assurance methods. Substantial progress has been made in areas including safety and assurance cases, the conceptual foundation of evidence and formal methods, and tooling for software design and verification. New approaches are necessary to develop holistic and cost-effective methodologies and to provide integrated tool support for creating certifiable software-intensive systems, as well as product-focused approaches to certifying these systems. Experts from academia and industrial practitioners met in the Dagstuhl Seminar 13051\" Software Certification: Methods and Tools\" to discuss and\u00a0\u2026", "num_citations": "9\n", "authors": ["690"]}
{"title": "Software model checking for avionics systems\n", "abstract": " The adoption of model-based development tools is changing the cost-benefit equation for the industrial use of formal methods. The integration of formal methods such as model checking into software development environments makes it possible to fight increasing cost and complexity with automation and rigor. This paper describes how formal analysis tools can be inserted into a model-based development process to decrease costs and increase quality of safety-critical avionics software.", "num_citations": "9\n", "authors": ["690"]}
{"title": "Formal verification of overhead accounting in an avionics RTOS\n", "abstract": " This paper describes our work modeling key portions of the safety-critical software infrastructure in an integrated modular avionics (IMA) platform in an effort to analytically establish correctness of important aspects of its design. In particular, we use model checking to verify timing properties of the Deos/spl trade/ real-time operating system in the presence of various advanced scheduling features. We focus here on the addition of scheduler overhead processing time to the Deos model and analyzing its effect on the time partitioning property and the internal assertions (function preconditions) in the model. Our model includes advanced scheduling features (dynamic threads, slack recovery, aperiodic interrupts) and explicitly models the scheduler operations at the same level of detail as the source code. Our findings support the use of formal methods to verify key properties of safety-critical systems that would be difficult\u00a0\u2026", "num_citations": "9\n", "authors": ["690"]}
{"title": "Simulation and verification II: event-triggered environments for verification of real-time systems\n", "abstract": " The growing complexity and the safety-critical requirements of the embedded software in avionics systems present many challenges to current test-based verification technology. The use of formal verification methods can increase design assurance by exploring a larger range of system behaviors and fault conditions than can feasibly be covered by testing or simulation. However, one of the most challenging tasks faced in any formal verification activity is the construction of an adequate model for the environment with which the analyzed system interacts. For real-time systems where the timing characteristics are critical to correct performance this task is even more difficult. In this paper we discuss how an event-triggered model of time (as found in discrete event simulations) can be used as the basis for the environment needed to verify real-time avionics software.", "num_citations": "8\n", "authors": ["690"]}
{"title": "Real-time adaptive resource management for multi-model control\n", "abstract": " Uninhabited air vehicles (UAVs) currently under development for the military present unique challenges that push the limits of current control and software technologies. The objective of our work is to develop advanced control and computational models along with the necessary software infrastructure to fully exploit available onboard computing resources for optimizing the performance of UAV missions.", "num_citations": "8\n", "authors": ["690"]}
{"title": "From design contracts to component requirements verification\n", "abstract": " During the development and verification of complex airborne systems, a variety of languages and development environments are used for different levels of the system hierarchy. As a result, there may be manual steps to translate requirements between these different environments. This paper presents a tool-supported export technique that translates high-level requirements from the software architecture modeling environment into observers of requirements that can be used for verification in the software component environment. This allows efficient verification that the component designs comply with their high-level requirements. It also provides an automated tool chain supporting formal verification from system requirements down to low-level software requirements that is consistent with certification guidance for avionics systems. The effectiveness of the technique has been evaluated and demonstrated\u00a0\u2026", "num_citations": "7\n", "authors": ["690"]}
{"title": "Anytime scheduling for real-time embedded control applications\n", "abstract": " Current real-time scheduling methods focus on periodic tasks with fixed (or at least bounded) execution times. However, many tasks used in control and optimization applications do not fit this pattern. \"Anytime\" or incremental algorithms whose performance is variable and improves as their execution time increases are examples of such tasks. We have developed an adaptive scheduling framework to deal with multiple anytime tasks that compete with each other for processing time. This work explores the issues surrounding anytime tasks, how they are scheduled, how they adapt, and how they interact with more traditional scheduling techniques.", "num_citations": "7\n", "authors": ["690"]}
{"title": "High\u2010confidence control: Ensuring reliability in high\u2010performance real\u2010time systems\n", "abstract": " Technology transfer is an especially difficult proposition for real\u2010time control. To facilitate it, we need to complement the \u201chigh\u2010performance\u201d orientation of control research with an emphasis on establishing \u201chigh confidence\u201d in real\u2010time implementation. Two particular problems are discussed and recent research directed at their solutions is presented. First, the use of anytime algorithms requires dynamic resource management technology that generally is not available today in real\u2010time systems. Second, complex algorithms have unpredictable computational characteristics that, nevertheless, need to be modeled; statistical verification is suggested as a possible approach. In both cases, a synthesis of control engineering and computer science is required if effective solutions are to be devised. Simulation\u2010based demonstrations with uninhabited aerial vehicles (UAVs) serve to illustrate the research efforts. \u00a9 2004\u00a0\u2026", "num_citations": "7\n", "authors": ["690"]}
{"title": "Modeling the ASCB-D synchronization algorithm with SPIN: A case study\n", "abstract": " In this paper, we describe our application of SPIN [1] to model an algorithm used to synchronize the clocks of modules that provide periodic real-time communication over a network. We used the SPIN model to check certain performance properties of the system; in particular, we were able to verify that the algorithm achieves synchronization within a time bound, even in the presence of certain types of faults. Our results suggest that state space explosion in models of time-dependent systems can be most effectively managed by explicit modeling of time; by imposing determinism on execution orderings, and justifying that determinism in a domain-specific manner; and by splitting up the space of execution sequences according to initial conditions.", "num_citations": "7\n", "authors": ["690"]}
{"title": "Supervisory control of timed event graphs\n", "abstract": " The class of timed discrete event systems which can be modelled by automata known as timed event graphs are structurally related to finite state machines. Consequently, supervisory control problems for these timed DES can be addressed using methods similar to those developed for their untimed counterparts. When the desired behavior takes the form of minimum separation times between events, it can also be expressed as a timed event graph. Supervised behavior is then defined by the synchronous operation of the plant and specification automata. Controllability and the existence of optimal behaviors can be evaluated in this framework.< >", "num_citations": "7\n", "authors": ["690"]}
{"title": "Run-Time Assurance for Learning-Based Aircraft Taxiing\n", "abstract": " Aircraft systems that include learning-enabled components (LECs) and their software implementations are not amenable to verification and certification using current methods. We have produced a demonstration of a run-time assurance architecture based on a neural network aircraft taxiing application that shows how several advanced technologies could be used to ensure safe operation.", "num_citations": "5\n", "authors": ["690"]}
{"title": "Run-Time Assurance for Learning-Enabled Systems\n", "abstract": " There has been much publicity surrounding the use of machine learning technologies in self-driving cars and the challenges this presents for guaranteeing safety. These technologies are also being investigated for use in manned and unmanned aircraft. However, systems that include \u201clearning-enabled components\u201d (LECs) and their software implementations are not amenable to verification and certification using current methods. We have produced a demonstration of a run-time assurance architecture based on a neural network aircraft taxiing application that shows how several advanced technologies could be used to ensure safe operation. The demonstration system includes a safety architecture based on the ASTM F3269-17 standard for bounded behavior of complex systems, diverse run-time monitors of system safety, and formal synthesis of critical high-assurance components. The enhanced system\u00a0\u2026", "num_citations": "5\n", "authors": ["690"]}
{"title": "Coordinated control of uninhabited air vehicles with communication and processing power limitations\n", "abstract": " In this paper, we consider coordinated control of uninhabited air vehicles when the vehicles are in a leader/follower configuration. We present steps towards the development of a communication algorithm that transmits the trajectory that the leader intends to fly to the followers using a small amount of bandwidth, and a control law for each of the followers that exploits the leader's intent and which may adapt the amount of CPU time it requires every cycle. The communication algorithm is based upon approximating the leader's intent with polynomial functions of speed and heading rate, and the control law is designed using nonlinear model predictive control. Both the communication algorithm and the control law make use of sequential quadratic programming. Preliminary versions of the communication algorithm and the control law have been tested in simulation with promising results.", "num_citations": "5\n", "authors": ["690"]}
{"title": "Autonomy in automation: trends, technologies, tools\n", "abstract": " Any but the most indomitable technophile today would, we expect, refuse to be a passenger in a pilotless airliner or have an uninhabited yet operational refinery in her neighborhood. But, regardless, the trend toward reducing human involvement in the operation of complex engineering systems, driven as it is by considerations of economics, performance, and safety, appears inexorable.Further substantial improvement in process automation, however, will require more than evolutionary technological advances. Our focus in this paper has been on autonomy, a property absent in today's automation systems. In order to satisfy the demands of industry and society, we will need to make our automation solutions autonomous\u2014they will need to be able to respond appropriately to unforeseen situations, not just limited to precompiled behaviors.We have noted two research directions that are central for engineering\u00a0\u2026", "num_citations": "4\n", "authors": ["690"]}
{"title": "Manifold-based Test Generation for Image Classifiers\n", "abstract": " Neural networks used for image classification tasks in critical applications must be tested with sufficient realistic data to assure their correctness. This raises two challenges: first, an adequate subset of the data points must be carefully chosen to inspire confidence, and second, the implicit requirements must be meaningfully extrapolated to data points beyond those in the explicit training set. This paper proposes a novel framework to address these challenges. Our approach is based on the premise that patterns in a large input data space can be effectively captured in a smaller manifold space, from which similar yet novel test cases\u2014both the input and the label\u2014can be sampled and generated. A variant of Conditional Variational Autoencoder (CVAE) is used for capturing this manifold with a generative function, and a search technique is applied on this manifold space to efficiently find fault-revealing inputs\u00a0\u2026", "num_citations": "3\n", "authors": ["690"]}
{"title": "Hierarchical Circular Compositional Reasoning\n", "abstract": " We describe a composition rule for hierarchically composed components that may involve circular reasoning between the components. It is similar to previous work by McMillan, specialized to component level reasoning. In contrast to McMillan's work, our composition rule can be used in provers that only support safety properties (e.g. k-induction model checkers) as long as the system and component contracts consist of state invariants. The composition rule still holds for richer contracts, but the resulting verification conditions then require a general purpose model checker.", "num_citations": "2\n", "authors": ["690"]}
{"title": "Model-checking of safety-critical software for avionics\n", "abstract": " The adoption of model-based development tools is changing the cost-benefit equation for the industrial use of formal methods. The integration of formal methods such as model checking into software development environments makes it possible to fight increasing cost and complexity with automation and rigour.By any measure, the size and the complexity of the safety-critical software deployed in commercial and military aircraft are rising exponentially. Current verification methods will not be able to cope effectively with the software being developed for next-generation aircraft. New verification processes are being developed that augment testing with analysis techniques such as formal methods. These processes will help ensure that the advanced functionality needed in modern aircraft can be delivered at a reasonable cost and with the required level of safety.", "num_citations": "2\n", "authors": ["690"]}
{"title": "Idempotent structures in the supervisory control of discrete event systems\n", "abstract": " Discrete event systems (DES) are characterized by a collection of events, such as the completion of a job in a manufacturing process or the arrival of a message in a communication network. The system state changes only at time instants corresponding to the occurrence of one of the de\ufb01ned events. At the logical level of abstraction, the behavior of a DES is described by the sequences of events that it performs. However, if time constraints are of explicit concern in the system dynamics and its performance speci\ufb01cation, its behavior can be characterized by sequences of occurrence times for each event. The objective of this paper is to demonstrate how underlying algebraic similarities between certain logical and timed DES can be exploited to study the control of timed DES.Logical DES are often modelled by automata known as \ufb01nite state machines (FSM). A FSM consists of a set of states Q, a collection of events E, and a state transition function 6. The occurrence of an event causes the system to move from one state to another as de\ufb01ned by the transition function. Timed DES which are subject to synchronization constraints can be modelled by automata known as timed event graphs (TEG). A TEG is a timed place Petri net in which forks and joins are permitted only at transitions. A delay or processing time is associated with each place connecting pairs of transitions. Each transition in the graph corresponds to an event in the system. When an event occurs it initiates the processes connecting it to successor events. These events will then occur when all the processes connecting them to their predecessor events are completed. It turns out that TEG and\u00a0\u2026", "num_citations": "2\n", "authors": ["690"]}
{"title": "A Framework of Hierarchical Requirements Patterns for Specifying Systems of Interconnected Simulink/Stateflow Modules.\n", "abstract": " Simulink/Stateflow is a graphical modeling and simulation tool (developed by Matlab) for systems with continuous dynamics mixed with switching logics, and is being widely used in industry for controls and diagnosis applications. Motivated by the need for developing a requirements specification approach for systems of interconnected Simulink/Stateflow modules that supports traceability and formal analysis (such as consistency, completeness, correctness), and that is scalable and also easy to use and to modify, we propose a hierarchical patterns-based approach. The approach supports modularity and hierarchy to handle complex systems. Further, it supports both the formal analysis and the traceability of the requirements, and also facilitates the design process by being mapped to the underlying design space. The patterns are developed following a component-oriented paradigm, and as a result they also facilitate their reuse. We develop and present a number of requirements patterns for commonly used Simulink/Stateflow modules and show how they can be hierarchically composed.", "num_citations": "2\n", "authors": ["690"]}
{"title": "Computing worst-case response times in real-time avionics applications\n", "abstract": " The work in this paper builds upon our prior work to analyze properties of applications running on top of the Deos real-time operating system. We describe how a control application\u2019s worst-case response time to an event can be \u201ccomputed\u201d using the model checker SPIN. We lay out the steps involved in reusing our existing models for this analysis, and our solution to reducing the memory required to perform the analysis. This work highlights the benefit of expanding the use of formal models, and the necessity of changing existing abstractions (such as the timer model in this work) to reflect changed verification goals.", "num_citations": "2\n", "authors": ["690"]}
{"title": "Formal Verification of Avionics Software in a Model-Based Development Process\n", "abstract": " Background\u2022 Results from the AFRL\u2019s VVIACS program forecast dramatic increases in the cost of certification for advanced aircraft platforms.", "num_citations": "2\n", "authors": ["690"]}
{"title": "Affordable implementation of reliable avionics systems\n", "abstract": " Affordable and reliable implementation of the embedded hybrid control systems that are found in current and planned air transport applications is critical to the successful deployment of these systems. The operational procedure method has been shown to be a good method for designing, analyzing, and implementing these hybrid systems. The paper discusses a variety of extensions to the current model. Some of these extensions can be easily implemented in the HOPTs (hierarchical operational procedure tables) tool. These include the graphical visualization, support for managing hierarchical completeness and consistency, limited scope correctness checks, and assistance with self-loop construction to ensure stability.", "num_citations": "2\n", "authors": ["690"]}
{"title": "Resolute assurance arguments for cyber assured systems engineering\n", "abstract": " Resolute is a tool and language for embedding an assurance argument in a system architecture model and evaluating the validity of the associated evidence. In this paper we report on a number of extensions to Resolute that support systems engineers in developing safe and cyber-resilient systems. System requirements are imported as assurance goals to be satisfied. Architectural transforms are applied to the system model to address these requirements, while corresponding assurance strategies and evidence are automatically added to document how the requirements have been satisfied. Subsequent changes to the model that invalidate any of the assurance claims can be detected and corrected. We also use Resolute to check that the model satisfies rules for code generation and other modeling guidelines. We conclude with an application of the Resolute assurance process to the design of a mission planning\u00a0\u2026", "num_citations": "1\n", "authors": ["690"]}
{"title": "You keep using that word\n", "abstract": " Formal methods tools have been shown to be effective at finding defects in and verifying the correctness of safety-critical systems such as avionics systems. The recent release of DO-178C and the accompanying Formal Methods Supplement DO-333 will make it easier for developers of software for commercial aircraft to obtain certification credit for the use of formal methods. However, most developers of avionics systems are unfamiliar with formal methods, and most developers of formal methods tools are unfamiliar with certification requirements and processes. This article provides a brief overview of the certification process for commercial aircraft, as well as some of the issues related to the use of formal methods tools in this context.", "num_citations": "1\n", "authors": ["690"]}
{"title": "Virtual moire interference approach for an industrial safety monitoring system\n", "abstract": " The objective of this work was to determine the feasibility and reliability of using the moire interference phenomenon as a means to detect human intrusion within a monitored zone. We applied moire interference principle for use in low-cost, safety-critical industrial monitoring applications. Moire interference is usually applied in the context of industrial applications for shape measurements. In this framework, we show how we can apply this concept to build a new safety product that detects human intrusion into dangerous areas on the factory floor. We demonstrate that a solution based on moire interference offers the potential for detection true 3D objects while preventing false alarms due to lighting variations or shadows and simplifying the image processing software. In addition, our prosed approach is advantageous in the product certification process because it is an active detection method.", "num_citations": "1\n", "authors": ["690"]}
{"title": "On controlling timed discrete event systems\n", "abstract": " This paper is a survey of our work on controlling discrete event systems modelled by timed event graphs. Such systems are structurally related to finite state machines in that both can be described by linear equations over an appropriate algebra. Using this structural similarity, we have extended supervisory control techniques developed for untimed DES to the timed case. When behavioral constraints are given as a range of acceptable schedules, it is possible to compute an extremal controllable subset or superset of the desired behavior. When constraints are expressed in terms of minimum separation times between events, it is possible to determine whether there is a controllable schedule which realizes the desired behavior.", "num_citations": "1\n", "authors": ["690"]}