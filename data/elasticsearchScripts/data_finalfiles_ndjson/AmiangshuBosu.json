{"title": "Collusive data leak and more: Large-scale threat analysis of inter-app communications\n", "abstract": " Inter-Component Communication (ICC) provides a message passing mechanism for data exchange between Android applications. It has been long believed that inter-app ICCs can be abused by malware writers to launch collusion attacks using two or more apps. However, because of the complexity of performing pairwise program analysis on apps, the scale of existing analyses is too small (eg, up to several hundred) to produce concrete security evidence. In this paper, we report our findings in the first large-scale detection of collusive and vulnerable apps, based on inter-app ICC data flows among 110,150 real-world apps. Our system design aims to balance the accuracy of static ICC resolution/data-flow analysis and run-time scalability. This large-scale analysis provides real-world evidence and deep insights on various types of inter-app ICC abuse. Besides the empirical findings, we make several technical\u00a0\u2026", "num_citations": "111\n", "authors": ["967"]}
{"title": "SentiCR: a customized sentiment analysis tool for code review interactions\n", "abstract": " Sentiment Analysis tools, developed for analyzing social media text or product reviews, work poorly on a Software Engineering (SE) dataset. Since prior studies have found developers expressing sentiments during various SE activities, there is a need for a customized sentiment analysis tool for the SE domain. On this goal, we manually labeled 2000 review comments to build a training dataset and used our dataset to evaluate seven popular sentiment analysis tools. The poor performances of the existing sentiment analysis tools motivated us to build SentiCR, a sentiment analysis tool especially designed for code review comments. We evaluated SentiCR using one hundred 10-fold cross-validations of eight supervised learning algorithms. We found a model, trained using the Gradient Boosting Tree (GBT) algorithm, providing the highest mean accuracy (83%), the highest mean precision (67.8%), and the highest\u00a0\u2026", "num_citations": "83\n", "authors": ["967"]}
{"title": "Understanding the motivations, challenges and needs of blockchain software developers: A survey\n", "abstract": " The blockchain technology has potential applications in various areas such as smart-contracts, Internet of Things (IoT), land registry, supply chain management, storing medical data, and identity management. Although GitHub currently hosts more than six thousand active Blockchain software (BCS) projects, few software engineering researchers have investigated these projects and their contributors. Although the number of BCS projects is growing rapidly, the motivations, challenges, and needs of BCS developers remain a puzzle. Therefore, the primary objective of this study is to understand the motivations, challenges, and needs of BCS developers and analyze the differences between BCS and non-BCS development. On this goal, we sent an online survey to 1,604 active BCS developers identified by mining the GitHub repositories of 145 popular BCS projects. The survey received 156 responses that\u00a0\u2026", "num_citations": "35\n", "authors": ["967"]}
{"title": "Understanding the software development practices of blockchain projects: A survey\n", "abstract": " Background: The application of the blockchain technology has shown promises in various areas, such as smart-contracts, Internet of Things, land registry management, identity management, etc. Although Github currently hosts more than three thousand active blockchain software (BCS) projects, a few software engineering research has been conducted on their software engineering practices. Aims: To bridge this gap, we aim to carry out the first formal survey to explore the software engineering practices including requirement analysis, task assignment, testing, and verification of blockchain software projects. Method: We sent an online survey to 1,604 active BCS developers identified via mining the Github repositories of 145 popular BCS projects. The survey received 156 responses that met our criteria for analysis. Results: We found that code review and unit testing are the two most effective software development\u00a0\u2026", "num_citations": "34\n", "authors": ["967"]}
{"title": "Diversity and inclusion in open source software (OSS) projects: Where do we stand?\n", "abstract": " Background: As the area of computing has thrived over the years, the participation of women in computing declined. Currently women represent less than 24% of the computing workforce and that number is declining. On the other hand, the ratios of women in Open Source Software (OSS) projects are even lower.Aims: The primary objective of this study is to determine the level of gender diversity among popular OSS projects and identify the presence of gender biases that may discourage females' participation.Method: On this goal, we mined the code review repositories of ten popular OSS projects. We used a semi-automated approach followed by a manual validation to identify the genders of the active contributors.Results: Our results suggest that lack of gender diversity remains an ongoing issue among all the ten projects as each of the projects had less than 10% female developers. However, many of the projects\u00a0\u2026", "num_citations": "22\n", "authors": ["967"]}
{"title": "Expressions of sentiments during code reviews: Male vs. female\n", "abstract": " As most of the software development organizations are male-dominated, many female developers encounter negative workplace experiences and report feeling like they \u201cdo not belong\u201d. Exposures to discriminatory expletives or negative critiques from their male colleagues may further exacerbate those feelings. The primary goal of this study is to identify the differences in expressions of sentiments between male and female developers during various software engineering tasks. On this goal, we mined the code review repositories of six popular open source projects. We used a semi-automated approach leveraging the name as well as multiple social networks to identify the gender of a developer. Using SentiSE, a customized and state-of-the-art sentiment analysis tool for the software engineering domain, we classify each communication as negative, positive, or neutral. We also compute the frequencies of\u00a0\u2026", "num_citations": "22\n", "authors": ["967"]}
{"title": "Characteristics of the vulnerable code changes identified through peer code review\n", "abstract": " To effectively utilize the efforts of scarce security experts, this study aims to provide empirical evidence about the characteristics of security vulnerabilities. Using a three-stage, manual analysis of peer code review data from 10 popular Open Source Software (OSS) projects, this study identified 413 potentially vulnerable code changes (VCC). Some key results include: 1) the most experienced contributors authored the majority of the VCCs, 2) while less experienced authors wrote fewer VCCs, their code changes were 1.5 to 24 times more likely to be vulnerable, 3) employees of the organization sponsoring the OSS projects are more likely to write VCCs.", "num_citations": "17\n", "authors": ["967"]}
{"title": "Modeling modern code review practices in open source software development organizations\n", "abstract": " Many Open Source Software (OSS) communities has adopted peer code review as an effective quality improvement practice. The informal, regular, and tool-based code review process has been called\u2019modern code review\u2019. There has not been much research on the modern code review process. This dissertation aims to model the this code review process adopted by the software organizations through 1) understanding, 2) improving, and 3) providing suggestions. I have planned seven steps to achieve the research goal, which includes literature review, exploring OSS code review practices, mining OSS code review repositories, comparing code review metrics across projects, surveying OSS code review participants, analyzing the effectiveness of peer code reviews to prevent security vulnerabilities, and social network analysis. So far, I have completed first three steps and made significant progress towards the next three steps. The research has contributed an empirical evidence that code review helps building accurate peer impressions between the code review participants. The planned future contributions include providing effective strategies to perform peer code review, evaluating the effectiveness of peer code review to prevent security vulnerabilities, and influence of project characteristics/social network structure on the peer code review process.", "num_citations": "5\n", "authors": ["967"]}
{"title": "Android collusive data leaks with flow-sensitive dialdroid dataset\n", "abstract": " We present DIALDroid, a scalable and accurate tool for analyzing inter-app Inter-Component Communication (ICC) among Android apps, which outperforms current state-of-theart ICC analysis tools. Using DIALDroid, we performed the first large-scale detection of collusive and vulnerable apps based on inter-app ICC data flows among 110,150 real-world apps and identified key security insights.", "num_citations": "4\n", "authors": ["967"]}
{"title": "Why security defects go unnoticed during code reviews? a case-control study of the chromium os project\n", "abstract": " Peer code review has been found to be effective in identifying security vulnerabilities. However, despite practicing mandatory code reviews, many Open Source Software (OSS) projects still encounter a large number of post-release security vulnerabilities, as some security defects escape those. Therefore, a project manager may wonder if there was any weakness or inconsistency during a code review that missed a security vulnerability. Answers to this question may help a manager pinpointing areas of concern and taking measures to improve the effectiveness of his/her project\u2019s code reviews in identifying security defects. Therefore, this study aims to identify the factors that differentiate code reviews that successfully identified security defects from those that missed such defects.With this goal, we conduct a case-control study of Chromium OS project. Using multi-stage semi-automated approaches, we build a dataset\u00a0\u2026", "num_citations": "2\n", "authors": ["967"]}
{"title": "A Benchmark Study of the Contemporary Toxicity Detectors on Software Engineering Interactions\n", "abstract": " Automated filtering of toxic conversations may help an Open-source software (OSS) community to maintain healthy interactions among the project participants. Although, several general purpose tools exist to identify toxic contents, those may incorrectly flag some words commonly used in the Software Engineering (SE) context as toxic (e.g., \u2018junk\u2019, \u2018kill\u2019, and \u2018dump\u2019) and vice versa. To encounter this challenge, an SE specific tool has been proposed by the CMU Strudel Lab (referred as the \u2018STRUDEL\u2019 hereinafter) by combining the output of the Perspective API with the output from a customized version of the Stanford's Politeness detector tool. However, since STRUDEL's evaluation was very limited with only 654 SE text, its practical applicability is unclear. Therefore, this study aims to empirically evaluate the Strudel tool as well as four state-of-the-art general purpose toxicity detectors on a large scale SE dataset. On\u00a0\u2026", "num_citations": "2\n", "authors": ["967"]}
{"title": "A comparison of nano-patterns vs. Software metrics in vulnerability prediction\n", "abstract": " Context: Software security is an imperative aspect of software quality. Early detection of vulnerable code during development can better ensure the security of the codebase and minimize testing efforts. Although traditional software metrics are used for early detection of vulnerabilities, they do not clearly address the granularity level of the issue to precisely pinpoint vulnerabilities. The goal of this study is to employ method-level traceable patterns (nano-patterns) in vulnerability prediction and empirically compare their performance with traditional software metrics. The concept of nano-patterns is similar to design patterns, but these constructs can be automatically recognized and extracted from source code. If nano-patterns can better predict vulnerable methods compared to software metrics, they can be used in developing vulnerability prediction models with better accuracy. Aims: This study explores the performance\u00a0\u2026", "num_citations": "2\n", "authors": ["967"]}
{"title": "Mining repositories to reveal the community structures of open source software projects\n", "abstract": " In this paper, I describe a research plan to mine Open Source Software (OSS) repositories to reveal community structure of those projects.", "num_citations": "2\n", "authors": ["967"]}
{"title": "A Dataset of Vulnerable Code Changes of the Chromium OS project\n", "abstract": " This paper presents a an empirically built and validated dataset of code reviews from the Chromium OS project that either identified or missed security vulnerabilities. The dataset includes total 890 vulnerable code changes categorized based on the CWE specification and is publicly available at: https://zenodo.org/record/4539891", "num_citations": "1\n", "authors": ["967"]}
{"title": "Poster: Android collusive data leaks with flow-sensitive DIALDroid dataset\n", "abstract": " We present DIALDroid, a scalable and accurate tool for analyzing inter-app Inter-Component Communication (ICC) among Android apps, which outperforms current stateof-the-art ICC analysis tools. Using DIALDroid, we performed the first large-scale detection of collusive and vulnerable apps based on inter-app ICC data flows among 110,150 real-world apps and identified key security insights.", "num_citations": "1\n", "authors": ["967"]}