{"title": "Formulating Module Assessment for Improved Academic Performance Predictability in Higher Education\n", "abstract": " Various studies have shown that students tend to get higher marks when assessed through coursework based assessment methods which include either modules that are fully assessed through coursework or a mixture of coursework and examinations than assessed by examination alone. There are a large number of educational data mining studies that preprocess data through conventional data mining processes including data preparation process, but they are using transcript data as they stand without looking at examination and coursework results weighting which could affect prediction accuracy. This paper proposes a different data preparation process through investigating more than 230000 student records in order to prepare students marks based on the assessment methods of enrolled modules. The data have been processed through different stages in order to extract a categorical factor through which students module marks are refined during the data preparation process. The results of this work show that students final marks should not be isolated from the nature of the enrolled modules assessment methods. They must rather be investigated thoroughly and considered during EDMs data preprocessing phases. More generally, it is concluded that educational data should not be prepared in the same way as other data types due to differences as data sources, applications, and types of errors in them. Therefore, an attribute, coursework assessment ratio, is proposed to be used in order to take the different modules assessment methods into account while preparing student transcript data. The effect of CAR on prediction process using the\u00a0\u2026", "num_citations": "12\n", "authors": ["946"]}
{"title": "Visualizing object-oriented software for understanding and documentation\n", "abstract": " Understanding or comprehending source code is one of the core activities of software engineering. Understanding object-oriented source code is essential and required when a programmer maintains, migrates, reuses, documents or enhances source code. The source code that is not comprehended cannot be changed. The comprehension of object-oriented source code is a difficult problem solving process. In order to document object-oriented software system there are needs to understand its source code. To do so, it is necessary to mine source code dependencies in addition to quantitative information in source code such as the number of classes. This paper proposes an automatic approach, which aims to document object-oriented software by visualizing its source code. The design of the object-oriented source code and its main characteristics are represented in the visualization. Package content, class information, relationships between classes, dependencies between methods and software metrics is displayed. The extracted views are very helpful to understand and document the object-oriented software. The novelty of this approach is the exploiting of code dependencies and quantitative information in source code to document object-oriented software efficiently by means of a set of graphs. To validate the approach, it has been applied to several case studies. The results of this evaluation showed that most of the object-oriented software systems have been documented correctly.", "num_citations": "8\n", "authors": ["946"]}
{"title": "Tag Clouds for Object-Oriented Source Code Visualization\n", "abstract": " Software visualization helps software engineers to understand and manage the size and complexity of the object-oriented source code. The tag cloud is a simple and popular visualization technique. The main idea of the tag cloud is to represent tags according to their frequency in an alphabetical order where the most important tags are highlighted via a suitable font size. This paper proposes an original approach to visualize software code using a tag cloud. The approach exploits all software identifier names to visualize software code as a tag cloud. Experiments were conducted on several case studies. To validate the approach, it is applied on NanoXML and ArgoUML. The results of this evaluation validate the relevance and the performance of the proposed approach as all tag names and their frequencies were correctly identified. The proposed tag cloud visualization technique is a helpful addition to the software visualization toolkit. The extracted tag cloud supports software engineers as they filter and browse data.", "num_citations": "7\n", "authors": ["946"]}
{"title": "Supporting software documentation with source code summarization\n", "abstract": " Source code summarization is a process of generating summaries that describe software code, the majority of source code summarization usually generated manually, where the summaries are written by software developers. Recently, new automated approaches are becoming more useful. These approaches have been found to be effective in some cases. The main weaknesses of these approaches are that they never exploit code dependencies and summarize either the software classes or methods but not both. This paper proposes a source code summarization approach (Suncode) that produces a short description for each class and method in the software system. To validate the approach, it has been applied to several case studies. Moreover, the generated summaries are compared to summaries that written by human experts and to summaries that written by a state-of-the-art solution. Results of this paper found that Suncode summaries provide better information about code dependencies comparing with other studies. In addition, Suncode summaries can improve and support the current software documentation. The results found that manually written summaries were more precise and short as well.", "num_citations": "6\n", "authors": ["946"]}
{"title": "Automatic labeling of the object-oriented source code: The Lotus approach\n", "abstract": " Most of open-source software systems become available on the internet today. Thus, we need automatic methods to label software code. Software code can be labeled with a set of keywords. These keywords in this paper referred as software labels. The goal of this paper is to provide a quick view of the software code vocabulary. This paper proposes an automatic approach to document the object-oriented software by labeling its code. The approach exploits all software identifiers to label software code. The paper presents the results of study conducted on the ArgoUML and drawing shapes case studies. Results showed that all code labels were correctly identified.", "num_citations": "6\n", "authors": ["946"]}
{"title": "The Impact of the Object-Oriented Software Evolution on Software Metrics: The Iris Approach\n", "abstract": " The Object-Oriented (OO) software system evolves over the time to meet the new requirements. Based on the initial release of software, the continuous modification of software code leads to software evolution. Software needs to evolve over the time to meet the new user's requirements. Software companies often develop variant software of the original one depends on customers' needs. The main hypothesis of this paper states that the software when it evolves over the time, its code continues to grow, change and become more complex. This paper proposes an automatic approach (Iris) to examine the proposed hypothesis. Originality of this approach is the exploiting of the software variants to study the impact of software evolution on the software metrics. This paper presents the results of experiments conducted on three releases of drawing shapes software, sixteen releases of rhino software, eight releases of mobile media software and ten releases of ArgoUML software. Based on the extracted software metrics, It has been found that Iris hypothesis is supported by the computed metrics.", "num_citations": "5\n", "authors": ["946"]}
{"title": "Genetic algorithms as recovering traceability links method between feature models and source code of product variants\n", "abstract": " \u2212 In our case chromosome is a partition as shown.\u2212 Partition is a set of clusters.\u2212 Each cluster is composed of a set of classes that correspond to some feature.\u2212 Any cluster represents a gene (in GAs terminology)\u2212 Number of clusters in each partition refers to number of all product variants features.", "num_citations": "5\n", "authors": ["946"]}
{"title": "A requirement model of local news wap/web application for rural community\n", "abstract": " Mobile news service can be obtained easily and provide flexibility to access the rural news criteria at any time in any location. This research introduces a prototype \u201clocal news WAP/WEB application\u201d that provides the people in the rural communities with the appropriate news services that could help those people to view the various news via this prototype. By using this prototype, the user of this service from the rural communities can easily get necessary information that makes those users in touch with the different news updating in these areas. The proposed prototype provides the user to post the occurred news related for these areas.", "num_citations": "5\n", "authors": ["946"]}
{"title": "Software Evolution Understanding: Automatic Extraction of Software Identifiers Map for Object-Oriented Software Systems\n", "abstract": " Software companies usually develop a set of product variants within the same family that share certain functions and differ in others. Variations across software variants occur to meet different customer requirements. Thus, software product variants evolve overtime to cope with new requirements. A software engineer who deals with this family may find it difficult to understand the evolution scenarios that have taken place over time. In addition, software identifier names are important resources to understand the evolution scenarios in this family. This paper introduces an automatic approach called Juana\u2019s approach to detect the evolution scenario across two product variants at the source code level and identifies the common and unique software identifier names across software variants source code. Juana\u2019s approach refers to common and unique identifier names as a software identifiers map and computes it by comparing software variants to each other. Juana considers all software identifier names such as package, class, attribute, and method. The novelty of this approach is that it exploits common and unique identifier names across the source code of software variants, to understand the evolution scenarios across software family in an efficient way. For validity, Juana was applied on ArgoUML and Mobile Media software variants. The results of this evaluation validate the relevance and the performance of the approach as all evolution scenarios were correctly detected via a software identifiers map.", "num_citations": "2\n", "authors": ["946"]}
{"title": "Tag Clouds for Software Documents Visualization\n", "abstract": " Legacy software documents are hard to understand and visualize. The tag cloud technique helps software developers to visualize the contents of software documents. A tag cloud is a well-known and simple visualization technique. This paper proposes a new method to visualize software documents, using a tag cloud. In this paper, tags visualize in the cloud based on their frequency in an alphabetical order. The most important tags are displayed with a larger font size. The originality of this method is that it visualizes the contents of JavaDoc as a tag cloud. To validate the JavaDocCloud method, it was applied to NanoXML case study, the results of these experiments display the most common and uncommon tags used in the software documents.", "num_citations": "2\n", "authors": ["946"]}
{"title": "A Requirement Model of Local News WEB/WAP Application for Rural Communities\n", "abstract": " Mobile news service for can be obtained easily way and flexibility to access the rural news criteria at any time in any location that this service can provide. This research introduces a prototype \"local news WAP/WEB application\" that provides the people in the rural communities with the appropriate news services that could help those people to view the various news via this prototype. By using this prototype, the user of this service from the rural communities can easily get necessary information that makes those users in touch with the different news updating in these areas. The proposed prototype provide the user to post the occur news that related for these areas.", "num_citations": "2\n", "authors": ["946"]}