{"title": "RTLola Cleared for Take-Off: Monitoring Autonomous Aircraft\n", "abstract": " The autonomous control of unmanned aircraft is a highly safety-critical domain with great economic potential in a wide range of application areas, including logistics, agriculture, civil engineering, and disaster recovery. We report on the development of a dynamic monitoring framework for the DLR ARTIS (Autonomous Rotorcraft Testbed for Intelligent Systems) family of unmanned aircraft based on the formal specification language RTLola. RTLola is a stream-based specification language for real-time properties. An RTLola specification of hazardous situations and system failures is statically analyzed in terms of consistency and resource usage and then automatically translated into an FPGA-based monitor. Our approach leads to highly efficient, parallelized monitors with formal guarantees on the noninterference of the monitor with the normal operation of the autonomous system.", "num_citations": "9\n", "authors": ["1691"]}
{"title": "Let\u2019s not Trust Experience Blindly: Formal Monitoring of Humans and other CPS\n", "abstract": " The control logic of complex systems is based on experience: Trained experts steer a machine directly until they help develop an automated controller. Recently, this process was further improved by successfully incorporating machine learning techniques, where the controller was learned from tremendous amounts of empirical data. The resulting controller excels most of the time, especially in situations similar to ones occurring in the training data. In a safety-critical context, however, this is not enough, so formal guarantees about the behavior of the controller become crucial. When a full static analysis and subsequent verification is infeasible due to the complexity of the system, runtime monitoring is still applicable. It acts as a connecting link between the efficiency of trained controllers and formally verifiable guarantees. A runtime monitor assesses the system health based on sensor readings by using a specification that contains information about desired system states and their expected evolution over time. When the monitor encounters a violation of the specification, it raises an alarm. For complex systems, characterizing the desired behavior requires an expressive language. Moreover, provably correct behavior requires formal semantics and an evaluation algorithm with static guarantees on resource consumption to prevent crashes during runtime. This thesis presents formal semantics for the specification language RTLola and shows that it satisfies the aforementioned criteria by introducing an evaluation algorithm with static time and space bounds. The approach is evaluated based on examples from health monitoring and aircraft controllers.", "num_citations": "9\n", "authors": ["1691"]}
{"title": "Verified rust monitors for lola specifications\n", "abstract": " The safety of cyber-physical systems rests on the correctness of their monitoring mechanisms. This is problematic if the specification of the monitor is implemented manually or interpreted by unreliable software. We present a verifying compiler that translates specifications given in the stream-based monitoring language Lola to implementations in Rust. The generated code contains verification annotations that enable the Viper toolkit to automatically prove functional correctness, absence of memory faults, and guaranteed termination. The compiler parallelizes the evaluation of different streams in the monitor based on a dependency analysis of the specification. We present encouraging experimental results obtained with monitor specifications found in the literature. For every specification, our approach was able to either produce a correctness proof or to uncover errors in the specification.", "num_citations": "6\n", "authors": ["1691"]}
{"title": "From LTL to rLTL Monitoring: Improved Monitorability through Robust Semantics\n", "abstract": " Runtime monitoring is commonly used to detect the violation of desired properties in safety critical cyber-physical systems by observing its executions. Bauer et al. introduced an influential framework for monitoring Linear Temporal Logic (LTL) properties based on a three-valued semantics: the formula is already satisfied by the given prefix, it is already violated, or it is still undetermined, ie, it can still be satisfied and violated by appropriate extensions. However, a wide range of formulas are not monitorable under this approach, meaning that they have a prefix for which satisfaction and violation will always remain undetermined no matter how it is extended. In particular, Bauer et al. report that 44% of the formulas they consider in their experiments fall into this category.", "num_citations": "4\n", "authors": ["1691"]}
{"title": "From OpenCCG to AI Planning: Detecting Infeasible Edges in Sentence Generation\n", "abstract": " The search space in grammar-based natural language generation tasks can get very large, which is particularly problematic when generating long utterances or paragraphs. Using surface realization with OpenCCG as an example, we show that we can effectively detect partial solutions (edges) which cannot ultimately be part of a complete sentence because of their syntactic category. Formulating the completion of an edge into a sentence as finding a solution path in a large state-transition system, we demonstrate a connection to AI Planning which is concerned with this kind of problem. We design a compilation from OpenCCG into AI Planning allowing the detection of infeasible edges via AI Planning dead-end detection methods (proving the absence of a solution to the compilation). Our experiments show that this can filter out large fractions of infeasible edges in, and thus benefit the performance of, complex realization processes.", "num_citations": "4\n", "authors": ["1691"]}
{"title": "Automatic Optimizations for Stream-based Monitoring Languages\n", "abstract": " Runtime monitors that are specified in a stream-based monitoring language tend to be easier to understand, maintain, and reuse than those written in a standard programming language. Because of their formal semantics, such specification languages are also a natural choice for safety-critical applications. Unlike for standard programming languages, there is, however, so far very little support for automatic code optimization. In this paper, we present the first collection of code transformations for the stream-based monitoring language RTLola. We show that classic compiler optimizations, such as Sparse Conditional Constant Propagation and Common Subexpression Elimination, can be adapted to monitoring specifications. We also develop new transformations\u2014Pacing Type Refinement and Filter Refinement\u2014which exploit the specific modular structure of RTLola as well as the implementation freedom\u00a0\u2026", "num_citations": "1\n", "authors": ["1691"]}
{"title": "Monitoring Cyber-Physical Systems: From Design to Integration\n", "abstract": " Cyber-physical systems are inherently safety-critical. The deployment of a runtime monitor significantly increases confidence in their safety. The effectiveness of the monitor can be maximized by considering it an integral component during its development. Thus, in this paper, I given an overview over recent work regarding a development process for runtime monitors alongside a cyber-physical system. This process includes the transformation of desirable safety properties into the formal specification language RTLola. A compiler then generates an executable artifact for monitoring the specification. This artifact can then be integrated into the system.", "num_citations": "1\n", "authors": ["1691"]}
{"title": "Simplex architecture meets RTLola\n", "abstract": " Designing controllers for safety-critical cyber-physical systems is a challenging task due to their complex dynamics and only partial access to information. Despite these difficulties, machine learned controllers show remarkable success. Their outstanding performance is tarnished by an opaque structure that prohibits reasoning about their internals. A remedy for this problem is the Simplex architecture. It embeds an arbitrarily complex controller into a verifiable structure that monitors controller decisions. Upon detection of potentially harmful commands, the architecture falls back to a simple and safe controller. While validation of control decisions is easier than finding them, it still has to account for complex temporal dependencies. At the same time, deployment in embedded safety-critical system requires the monitor to be formally verifiable and to cope with strict resource limitations. In this talk we will discuss the monitoring module of the Simplex architecture on the example of an artificial pancreas and propose using the RTLOLA monitoring framework.", "num_citations": "1\n", "authors": ["1691"]}
{"title": "On the Similarities of Aircraft and Humans: Monitoring CPS with StreamLAB\n", "abstract": " Modern medicine increasingly relies on medical cyber-physical systems for diagnosis and treatment of patients. Yet, misbehavior can have dire consequences raising the need for formal guarantees on the runtime behavior. Static verification would provide such guarantees, but is infeasible due to the complexity of the systems and the human physiology. In these cases, more light-weight verification techniques such as runtime monitoring are still applicable. The monitor analyzes a single execution of the system and raises an alarm as soon as it detects unexpected behavior. The shape of unexpected behavior is described in a formal specification language such as the one provided by the STREAMLAB framework, which can express complex real-time constraints. Yet the language is sufficiently restrictive to allow for static analyses determining an upper bound on the memory consumption. As a result, the underlying monitoring framework STREAMLAB can synthesize an embedded runtime monitor on an FPGA. The practicality of this approach is validated by current case studies on avionics. Moreover, the low memory and energy consumption indicate that a deployment on implantable devices is possible. In this abstract we thus showcase the practicality of STREAMLAB in the medical domain and suggest it as a suitable candidate for runtime monitoring on medical devices.Medical cyber-physical systems (MCPS) are ubiquitous, ranging from large magnetic resonance imaging scanners to implantable artificial cardiac pacemakers. While they constitute an indisputable advancement in diagnosis and treatment, even minor mistakes can lead to\u00a0\u2026", "num_citations": "1\n", "authors": ["1691"]}