{"title": "Software process dynamics\n", "abstract": " This book is designed for professionals and students in software engineering or information technology who are interested in understanding the dynamics of software development in order to assess and optimize their own process strategies. It explains how simulation of interrelated technical and social factors can provide a means for organizations to vastly improve their processes. It is structured for readers to approach the subject from different perspectives, and includes descriptive summaries of the best research and applications.", "num_citations": "320\n", "authors": ["412"]}
{"title": "Process and Product Applications\n", "abstract": " This chapter contains sections titled:   Introduction   Overview of Applications   Peer Reviews   Global Process Feedback (Software Evolution)   Software Reuse   Commercial Off-the-Shelf Software (COTS)-Based Systems   Software Architecting   Quality and Defects   Requirements Volatility   Software Process Improvement   Major References   Provided Models   Chapter 5 Summary   Exercises", "num_citations": "320\n", "authors": ["412"]}
{"title": "Project and Organization Applications\n", "abstract": " This chapter contains sections titled:   Introduction   Overview of Applications   Integrated Project Modeling   Software Business Case Analysis   Personnel Resource Allocation   Staffing   Earned Value   Major References   Provided Models   Chapter 6 Summary   Exercises", "num_citations": "320\n", "authors": ["412"]}
{"title": "People Applications\n", "abstract": " This chapter contains sections titled:   Introduction   Overview of Applications   Project Workforce Modeling   Exhaustion and Burnout   Learning   Team Composition   Other Application Areas   Major References   Chapter 4 Summary   Exercises", "num_citations": "320\n", "authors": ["412"]}
{"title": "A software product line life cycle cost estimation model\n", "abstract": " Most software product line cost estimation models are calibrated only to local product line data rather than to a broad range of product lines. They also underestimate the return on investment for product lines by focusing only on development vs. life-cycle savings, and by applying writing-for-reuse surcharges to the entire product rather that to the portions of the product being reused. This paper offers some insights based on the exploratory development and collaborative refinement of a software product line life cycle economics model, the Constructive Product Line Investment Model (COPLIMO) that addresses these shortfalls. COPLIMO consists of two components: a product line development cost model and an annualized post-development life cycle extension. It focuses on modeling the portions of the software that involve product-specific newly-built software, fully reused black-box product line components, and\u00a0\u2026", "num_citations": "146\n", "authors": ["412"]}
{"title": "System dynamics modeling of an inspection-based process\n", "abstract": " A dynamic simulation model of an inspection-based software lifecycle process has been developed to support quantitative process evaluation. The model serves to examine the effects of inspection practices on cost, scheduling and quality throughout the lifecycle. It uses system dynamics to model the interrelated flows of tasks, errors and personnel throughout different development phases and is calibrated to industrial data. If extends previous software project dynamics research by examining an inspection-based process with an original model, integrating it with a knowledge-based method for risk assessment and cost estimation, and using an alternative modeling platform. While specific enough to investigate inspection practices, it is sufficiently general to incorporate changes for other phenomena. It demonstrates the effects of performing inspections or not, the effectiveness of varied inspection policies, and the\u00a0\u2026", "num_citations": "140\n", "authors": ["412"]}
{"title": "Heuristic risk assessment using cost factors\n", "abstract": " The author describes an expert system tool that can be used to analyze patterns of software cost driver ratings submitted for a Cocomo cost estimate. These results help users determine and rank associated sources of software project risk.", "num_citations": "123\n", "authors": ["412"]}
{"title": "A software project dynamics model for process cost, schedule and risk assessment\n", "abstract": " A dynamic model of an inspection-based software lifecycle process has been developed to support quantitative evaluation of the process. In conjunction with a knowledge-based method that has been developed for cost estimation and project risk assessment, these modeling techniques can support project planning and management, and aid in process improvement.", "num_citations": "119\n", "authors": ["412"]}
{"title": "The ROI of software dependability: The iDAVE model\n", "abstract": " In most organizations, proposed investments in software dependability compete for limited resources with proposed investments in software and system functionality, response time, adaptability, speed of development, ease of use, and other system capabilities. The lack of good return-on-investment models for software dependability makes determining the overall business case for dependability investments difficult. So, with a weak business case, investments in software dependability and the resulting system dependability are frequently inadequate. Dependability models will need to support stakeholders in determining their desired levels for each dependability attribute and estimating the cost, value, and ROI for achieving those. At the University of Southern California, researchers have developed software cost- and quality-estimation models and value-based software engineering processes, methods, and tools\u00a0\u2026", "num_citations": "72\n", "authors": ["412"]}
{"title": "Developing multimedia applications with the WinWin spiral model\n", "abstract": " Fifteen teams recently used the WinWin Spiral Model to perform the system engineering and architecting of a set of multimedia applications for the USC Library Information Systems. Six of the applications were then developed into an Initial Operational Capability. The teams consisted of USC graduate students in computer science. The applications involved extensions of USC's UNIX-based, text-oriented, client-server Library Information System to provide access to various multimedia archives (films, videos, photos, maps, manuscripts, etc.).             Each of the teams produced results which were on schedule and (with one exception) satisfactory to their various Library clients. This paper summarizes the WinWin Spiral Model approach taken by the teams, the experiences of the teams in dealing with project challenges, and the major lessons learned in applying the Model. Overall, the WinWin Spiral Model\u00a0\u2026", "num_citations": "57\n", "authors": ["412"]}
{"title": "Knowledge-based risk assessment and cost estimation\n", "abstract": " A knowledge-based method for software project risk assessment and cost estimation has been implemented on multiple platforms. As an extension to the Constructive Cost Model (COCOMO), it aids in project planning by identifying, categorizing, quantifying and prioritizing project risks. It also detects cost estimate input anomalies and provides risk control advice in addition to conventional COCOMO cost and schedule calculation.               The method has been developed in conjunction with a system dynamics model of the software development process, and serves as an intelligent front end to the simulation model. It extends previous research in the knowledge-based cost estimation domain by focusing on risk assessment, incorporating substantially more rules, going beyond standard COCOMO, performing quantitative validation, providing a user-friendly interface, and integrating it with a dynamic\u00a0\u2026", "num_citations": "38\n", "authors": ["412"]}
{"title": "Case studies in software process modeling with system dynamics\n", "abstract": " Litton's Guidance and Control Systems (GCS) Division has been using system dynamics to create mostly small\u2010scale models for investigating managerial process issues and supporting personnel training. At the project level, these include models for planning specific projects, studying Brooks's Law and hiring issues, an interactive earned value model, requirements volatility and a detailed peer review model. The perspective of some of the models has been at a multi\u2010project or departmental level including domain learning, product\u2010line reuse processes and resource contention among projects. Insights provided by the models have supported decision\u2010making at different levels and helped galvanize process improvement efforts. The training applications have added spark in classes and improved overall learning. The models encapsulate collective knowledge of modeling participants, and support organizational\u00a0\u2026", "num_citations": "36\n", "authors": ["412"]}
{"title": "Effectiveness of kanban approaches in systems engineering within rapid response environments\n", "abstract": " Effective application of systems engineering in rapid response environments has been difficult, particularly those where large, complex brownfield systems or systems of systems exist and are constantly being updated with both short and long term software enhancements. This paper proposes a general case for solving this problem by combining a services approach to systems engineering with a kanban-based scheduling system. It provides the basis for validating the approach with agent-based simulations.", "num_citations": "35\n", "authors": ["412"]}
{"title": "An empirical study of eServices product UML sizing metrics\n", "abstract": " Size is one of the most fundamental measurements of software. For the past two decades, the source line of code (SLOC) and function point (FP) metrics have been dominating software sizing approaches. However both approaches have significant defects. For example, SLOC can only be counted when the software construction is complete, while the FP counting is time consuming, expensive, and subjective. In the late 1990s researchers have been exploring faster, cheaper, and more effective sizing methods, such as Unified Modeling Language (UML) based software sizing. We present an empirical 14-project-study of three different sizing metrics which cover different software life-cycle activities: requirement metrics (requirement), UML metrics (architecture), and SLOC metrics (implementation). Our results show that the software size in terms of SLOC was moderately well correlated with the number of external use\u00a0\u2026", "num_citations": "33\n", "authors": ["412"]}
{"title": "Assessing quality processes with ODC COQUALMO\n", "abstract": " Software quality processes can be assessed with the Orthogonal Defect Classification COnstructive QUALity MOdel (ODC COQUALMO) that predicts defects introduced and removed, classified by ODC types. Using parametric cost and defect removal inputs, static and dynamic versions of the model help one determine the impacts of quality strategies on defect profiles, cost and risk. The dynamic version provides insight into time trends and is suitable for continuous usage on a project. The models are calibrated with empirical data on defect distributions, introduction and removal rates; and supplemented with Delphi results for detailed ODC defect detection efficiencies. This work has supported the development of software risk advisory tools for NASA flight projects. We have demonstrated the integration of ODC COQUALMO with automated risk minimization methods to design higher value quality processes\u00a0\u2026", "num_citations": "31\n", "authors": ["412"]}
{"title": "Distributed global development parametric cost modeling\n", "abstract": " Geographically distributed development processes are becoming ever more pervasive on modern software projects. Software is developed collaboratively in multiple locations around the world, and projects are being contracted out in whole or part for economic leverage. Projects are often split among distributed teams, where the teams contribute different portions of work per phase to take advantage of their skill sets and rates. Thus there is a need for new parametric cost estimation models where effort multipliers are phase-sensitive. Working with industrial partners, a unique model has been developed to better estimate globally distributed projects where work is allocated by phase, rather than along the lines of specific functionality. The distributed development model allows for work distribution by phase per team (and per module), different environmental characteristics of the teams, localized labor\u00a0\u2026", "num_citations": "28\n", "authors": ["412"]}
{"title": "Accurate estimates without local data?\n", "abstract": " Models of software projects input project details and output predictions via their internal tunings. The output predictions, therefore, are affected by variance in the project details P and variance in the internal tunings T. Local data is often used to constrain the internal tunings (reducing T). While constraining internal tunings with local data is always the preferred option, there exist some models for which constraining tuning is optional. We show empirically that, for the USC COCOMO family of models, the effects of P dominate the effects of T i.e. the output variance of these models can be controlled without using local data to constrain the tuning variance (in ten case studies, we show that the estimates generated by only constraining P are very similar to those produced by constraining T with historical data). We conclude that, if possible, models should be designed such that the effects of the project options dominate the\u00a0\u2026", "num_citations": "27\n", "authors": ["412"]}
{"title": "Spiral lifecycle increment modeling for new hybrid processes\n", "abstract": " The spiral lifecycle is being extended to address new challenges for Software-Intensive Systems of Systems (SISOS), such as coping with rapid change while simultaneously assuring high dependability. A hybrid plan-driven and agile process has been outlined to address these conflicting challenges with the need to rapidly field incremental capabilities. A system dynamics model has been developed to assess the incremental hybrid process and support project decision-making. It estimates cost and schedule for multiple increments of a hybrid process that uses three specialized teams. It considers changes due to external volatility and feedback from user-driven change requests, and dynamically re-estimates and allocates resources in response to the volatility. Deferral policies and team sizes can be experimented with, and it includes tradeoff functions between cost and the timing of changes within and\u00a0\u2026", "num_citations": "24\n", "authors": ["412"]}
{"title": "Modeling kanban processes in systems engineering\n", "abstract": " Systems engineering processes using pull scheduling methods (kanban) are being evaluated with hybrid modeling and simulation. We are assessing integrated systems and software engineering at the enterprise level, where rapid response software development projects incrementally evolve capabilities of existing systems and/or systems of systems. A kanban-based scheduling system was defined and implemented with connected discrete, continuous and agent-based models. We are simulating the process performance vs. traditional methods of sharing systems engineering services across projects, and whether the overall value of the systems of systems over time is increased.", "num_citations": "19\n", "authors": ["412"]}
{"title": "Cost modeling of distributed team processes for global development and Software\u2010Intensive Systems of Systems\n", "abstract": " Distributed team processes are becoming more pervasive because of geographically distributed development and complex Software\u2010Intensive Systems of Systems (SISOS) with many layers of breadth and depth. Software is developed collaboratively in multiple locations around the world, and projects are being contracted out in whole or in part for economic leverage. Systems are becoming larger and more complex, leading to distributed processes at many levels. Projects are often split among distributed teams, where the teams contribute different portions of work per phase to take advantage of their skill sets and rates. Thus there is a need for new parametric cost estimation models where effort multipliers are phase sensitive. Working with industrial partners, a set of constructive cost models have been extended to better estimate distributed teams where work is allocated by phase, rather than just along the lines\u00a0\u2026", "num_citations": "16\n", "authors": ["412"]}
{"title": "Assessing hybrid incremental processes for SISOS development\n", "abstract": " New processes are being assessed to address modern challenges for Software\u2010Intensive Systems of Systems (SISOS), such as coping with rapid change while simultaneously assuring high dependability. A hybrid agile and plan\u2010driven process based on the spiral lifecycle has been outlined to address these conflicting challenges with the need to rapidly field incremental capabilities in a value\u2010based framework. A system dynamics model has been developed to assess the incremental hybrid process and support project decision making. It estimates cost and schedule for multiple increments of a hybrid process that uses three specialized teams, and also considers the mission value of software capabilities. It considers changes due to external volatility and feedback from user\u2010driven change requests, and dynamically reestimates and allocates resources in response to the volatility. Deferral policies and team sizes\u00a0\u2026", "num_citations": "16\n", "authors": ["412"]}
{"title": "Reusable model structures and behaviors for software processes\n", "abstract": " An organization of increasingly complex system dynamics model structures and behaviors has been developed to promote modeling reuse for software processes. It uses an object-oriented framework for describing structures in a class hierarchy with inheritance relationships. This original approach provides a set of common assets that can be referenced for a \u201cproduct line\u201d of software process models. The structures and their behaviors are process patterns that frequently occur, and the recurring structures are model building blocks that can be reused. They provide a framework for understanding, modifying and creating system dynamics models regardless of experience. Previous work can be understood easier and the structures incorporated into new models with minimal modification. A goal of this work is to help accelerate software process modeling and simulation activities. Experience indicates that the\u00a0\u2026", "num_citations": "16\n", "authors": ["412"]}
{"title": "Accurate estimates without calibration?\n", "abstract": " Most process models calibrate their internal settings using historical data. Collecting this data is expensive, tedious, and often an incomplete process.               Is it possible to make accurate software process estimates without historical data? Suppose much of uncertainty in a model comes from a small subset of the model variables. If so, then after (a)\u00a0ranking variables by their ability to constrain the output; and (b)\u00a0applying a small number of the top-ranked variables; then it should be possible to (c)\u00a0make stable predictions in the constrained space.               To test that hypothesis, we combined a simulated annealer (to generate random solutions) with a variable ranker. The results where quite dramatic: in one of the studies in this paper, we found process options that reduced the median and variance of the effort estimates by a factor of 20. In ten case studies, we show that the estimates generated in this manner\u00a0\u2026", "num_citations": "11\n", "authors": ["412"]}
{"title": "Impact and contributions of MBASE on software engineering graduate courses\n", "abstract": " As the founding Director of the Center for Software Engineering, Professor Barry Boehm developed courses that have greatly impacted the education of software engineering students. Through the use of the MBASE framework and complementary tools, students have been able to obtain real-life software development experience without leaving campus. Project team clients and the universities have also benefited. This paper provides evidence on the impact of Dr. Boehm\u2019s frameworks on courses at two universities, and identifies major contributions to software engineering education and practice.", "num_citations": "10\n", "authors": ["412"]}
{"title": "Cost Models for Future Software Life Cycle Processes: COCOMO 2.0\n", "abstract": " Current software cost estimation models, such as the 1981 Constructive Cost Model (COCOMO) for software cost estimation and its 1987 Ada COCOMO update, have been experiencing increasing difficulties in estimating the costs of software developed for new life cycle processes and capabilities. These include nonsequential and rapid-development process models; reuse-driven approaches involving commercial off-the-shelf (COTS) packages, re-engineering, applications composition, and applications generation capabilities; object-oriented approaches supported by distributed middleware; and software process maturity initiatives. This article summarizes research in deriving a baseline COCOMO 2.0 model tailored to these new forms of software development, including rationale for the model decisions. The major new modeling capabilities of COCOMO 2.0 are a tailorable family of software sizing models, involving Object Points, Function Points, and Source Lines of Code; nonlinear models for software reuse and re-engineering; an exponent-driver approach for modeling relative software diseconomies of scale; and several additions, deletions and updates to previous COCOMO effort-multiplier cost drivers. This model is serving as a framework for an extensive current data collection and analysis effort to further refine and calibrate the model\u2019s estimation capabilities.", "num_citations": "10\n", "authors": ["412"]}
{"title": "Improving systems engineering effectiveness in rapid response development environments\n", "abstract": " Systems engineering is often ineffective in development environments where large, complex, brownfield systems of systems are evolved through parallel development of new capabilities in response to external, time-sensitive requirements. This paper defines a conceptual framework to improve that effectiveness and better integrate the systems engineering and software engineering processes. The framework is based on a services approach to systems engineering and the use of kanban techniques to schedule scarce enterprise systems engineering resources across multiple related systems and software development projects. The framework also addresses the differing value of work items to multiple stakeholders in the scheduling and coordination processes. Models and simulations are being used to capture, refine and validate the framework prior to in vivo experimentation.", "num_citations": "9\n", "authors": ["412"]}
{"title": "Defense acquisition system simulation studies\n", "abstract": " A systems engineering process model for the acquisition of large, complex systems for the US Department of Defense (DoD) is being adapted for ongoing experiments in acquisition process policies. The discrete-event simulation model of the larger\" enterprise of acquisition\" for weapon systems has a broad scope from program beginning through development. It reveals some of the challenges and risks in weapon system acquisition.", "num_citations": "9\n", "authors": ["412"]}
{"title": "Integrated modeling of business value and software processes\n", "abstract": " Business value attainment should be a key consideration when designing software processes. Ideally they are structured to meet organizational business goals, but it is usually difficult to integrate the process and business perspectives quantitatively. This research uses modeling and simulation to assess process tradeoffs for business case analysis. A model for commercial software enterprises relates the dynamics between product specifications, investment costs, schedule, software quality practices, market size, license retention, pricing and revenue generation. The system dynamics model allows one to experiment with different product strategies, software processes, marketing practices and pricing schemes while tracking financial measures over time. It can be used to determine the appropriate balance of process activities to meet goals. Examples are shown for varying scope, reliability, delivery of\u00a0\u2026", "num_citations": "9\n", "authors": ["412"]}
{"title": "Dynamic simulation modeling of an inspection-based software lifecycle process\n", "abstract": " A dynamic simulation model of an inspection-based software lifecycle process has been developed to support quantitative process evaluation. It can be used in project planning and management, and aid in process improvement. The model serves to examine the effects of inspection practices on cost, schedule, and quality throughout the lifecycle. It uses system dynamics to model the interrelated flows of tasks, errors, and personnel throughout different development phases and is calibrated to industrial data. It demonstrates the effects of performing inspections and other managerial policies. The dynamic effects are tracked throughout the time history of a project to show resource usage, task completions and defect trends per phase. Cumulative metrics and development tradeoffs for decision making are also presented. Several types of validation tests are performed against industrial data, existing theory and other\u00a0\u2026", "num_citations": "9\n", "authors": ["412"]}
{"title": "What Every Engineer Should Know About Modeling and Simulation\n", "abstract": " This practical book presents fundamental concepts and issues in computer modeling and simulation (M&S) in a simple and practical way for engineers, scientists, and managers who wish to apply simulation successfully to their real-world problems. It offers a concise approach to the coverage of generic (tool-independent) M&S concepts and enables engineering practitioners to easily learn, evaluate, and apply various available simulation concepts. Worked out examples are included to illustrate the concepts and an example modeling application is continued throughout the chapters to demonstrate the techniques. The book discusses modeling purposes, scoping a model, levels of modeling abstraction, the benefits and cost of including randomness, types of simulation, and statistical techniques. It also includes a chapter on modeling and simulation projects and how to conduct them for customer and engineer\u00a0\u2026", "num_citations": "7\n", "authors": ["412"]}
{"title": "Simple empirical software effort estimation model\n", "abstract": " Context: An effort estimation model with more than 20 parameters is not very useful at early conceptual phase if you don't have a logical approach for specifying the input values.Goal: This paper presents a simple approach for predicting software development effort.Method: The regression model uses product size and application types to predict effort. Product size is measured in terms of the equivalent source lines of code. The analysis is based on empirical data collected from 317 very recent projects implemented within the United States Department of Defense over the course of nine years beginning in 2004.Result: Statistical results showed that source lines of code and application type are significant contributors to development effort.Conclusion: The equation is simpler and more viable to use for early estimates than traditional parametric cost models. The effect of product size on software effort shall be\u00a0\u2026", "num_citations": "7\n", "authors": ["412"]}
{"title": "Agile-Lean Software Engineering (ALSE) Evaluating Kanban in Systems Engineering\n", "abstract": " This research project evaluates the use of on-demand pull or kanban scheduling approaches in systems engineering SE. Such approaches have been seen to be valuable in software system development. In particular, the research focuses on SE where rapid response software development projects incrementally evolve capabilities of existing systems andor systems of systems. Phase I considered the problem and possible applications of alternative scheduling methods and suggested possible outcomes of on-demand scheduling coupled with a service-oriented approach to SE. It defined a conceptual model and developed initial simulations to capture the model and better understand the impact. Phase II focuses on applying the method to multi-level service-based SE in complex systems of systems. Using the models and simulations from Phase I, Phase II defines a prototype network of kanban-based scheduling systems KSS for a target environment based on a large multi-facility hospital system. The definition is simulated to demonstrate its behavior. Follow on work is planned to use the prototype in comparing performance with traditional SE methods. This will enable determination if SE functions are accomplished more effectively and efficiently, whether the overall value of the systems of systems over time is increased, and whether other expected results are fulfilled.Descriptors:", "num_citations": "6\n", "authors": ["412"]}
{"title": "Automating Systems Engineering Risk Assessment\n", "abstract": " \u2022 The Constructive Systems Engineering Cost Model (COSYSMO) is a parametric cost estimation model for systems engineering effort [Valerdi 2005]\u2022 Constructive: a user can tell why the model gives the estimate it does, and helps the systems engineer understand the job that needs to be done\u2022 Expert COSYSMO leverages on the same cost factors to identify, quantify and mitigate risks\u2022 The dual nature of Expert COSYSMO extends the constructiveness into risk management", "num_citations": "6\n", "authors": ["412"]}
{"title": "Software process concurrence\n", "abstract": " Process concurrence provides a robust framework for modeling software processes and their constraint mechanisms. It is general enough to characterize a broad spectrum of current and emerging methodologies in terms of work available to complete on a project. It is more generally applicable than the Rayleigh curve, provides a detailed view of process dynamics and is meaningful for planning and improvement purposes. With it one can derive optimal staffing profiles for different project types, and as a shared project model it serves to improve stakeholder communication.The software industry is continually introducing new processes, methodologies and tools. Many modern techniques serve to increase concurrence (and thus decrease cycle time) in several ways like increasing task parallelism or automating product elaboration. Process concurrence can evaluate such strategies by modeling task interdependency\u00a0\u2026", "num_citations": "6\n", "authors": ["412"]}
{"title": "Future Trends, Implications in Cost Estimation Models\n", "abstract": " DSpace at KOASAS: Future Trends, Implications in Cost Estimation Models KOASAS menu About KOASAS KAIST Library \uac80\uc0c9 Advanced Search Browse Communities & Collections Researchers at KAIST Titles Subject By Date rss_1.rss_2.atom_1.sherpa SEARCH DSpace at KOASAS College of Engineering(\uacf5\uacfc\ub300\ud559)School of Computing(\uc804\uc0b0\ud559\ubd80)CS-Journal Papers(\uc800\ub110\ub17c\ubb38) Future Trends, Implications in Cost Estimation Models Cited 0 time in webofscience Cited 0 time in scopus Hit : 212 Download : 0 Export DC(XML) Excel Baik, Jongmoonresearcher / Chulani, Sunita / Boehm, Barry / Abts, Chris / Brown, A. Windsor / Clark, Brad / Horowitz, Ellis / Madachy, Ray / Reifer, Don / Steece, Bert Publisher Air Force Software Technology Support Center Issue Date 2000-04 Language English Citation CROSSTALK URI http://hdl.handle.net/10203/78192 Appears in Collection CS-Journal Papers(\uc800\ub110\ub17c\ubb38) Files in This no \u2026", "num_citations": "6\n", "authors": ["412"]}
{"title": "8.3. 1 The Macro Risk Model: An Early Warning Tool for Software\u2010Intensive Systems Projects\n", "abstract": " The Macro Risk Model is a tool for early detection and quantification of project risks associated with Software\u2010Intensive Systems (SIS). It has been calibrated and validated against detailed case studies. Structured questions guide a user in rating evidence and risk impacts with respect to critical project success factors. It provides color\u2010coded risk exposures, and allows for rationale and supporting artifacts. This paper describes the model and the basis of its risk evaluation methods, it reviews case studies of NASA exploration mission failures with respect to the model, it discusses a Delphi consensus\u2010seeking process that was used to analyze factors affecting model accuracy and to calibrate the model, and compares the model to other risk approaches.", "num_citations": "5\n", "authors": ["412"]}
{"title": "The macro risk model: An early warning tool for software-intensive systems projects\n", "abstract": " The Macro Risk Model is a tool for early detection and quantification of project risks associated with Software\u2010Intensive Systems (SIS). It has been calibrated and validated against detailed case studies. Structured questions guide a user in rating evidence and risk impacts with respect to critical project success factors. It provides color\u2010coded risk exposures, and allows for rationale and supporting artifacts. This paper describes the model and the basis of its risk evaluation methods, it reviews case studies of NASA exploration mission failures with respect to the model, it discusses a Delphi consensus\u2010seeking process that was used to analyze factors affecting model accuracy and to calibrate the model, and compares the model to other risk approaches.", "num_citations": "5\n", "authors": ["412"]}
{"title": "System Dynamics Structures for Modeling Lawmaking Processes\n", "abstract": " Modeling and simulation can help improve lawmaking processes. System dynamics is a simulation methodology for modeling continuous systems that provides a rich and integrative framework for investigating lawmaking process phenomena and inter-relationships from a holistic perspective. Structures for modeling these processes are provided as reusable building blocks. These structures and their behaviors are process patterns that frequently occur. Examples are shown assembling these recurring structures into larger models demonstrating behavior patterns of lawmaking processes including feedback loops. The behaviors are visualized as process trends over time. This paper overviews: 1) basic system dynamics elements and their applied instances in lawmaking, 2) generic flow processes which are small microstructures comprised of a few elements serving as modeling molecules with characteristic behaviors, 3) infrastructures composed of several microstructures producing more complex behaviors, 4) flow chains which are infrastructures consisting of a sequence of levels and rates (stocks and flows) that are model portion backbones, and 5) introductory examples of lawmaking process structures. Even small system dynamics models have been shown useful for understanding complex public policy issues, and thus well suited to assess specific laws and/or aspects of local, national and international lawmaking processes. The structures and applied examples are provided as open source models for the community to incorporate, adapt and apply for lawmaking.", "num_citations": "4\n", "authors": ["412"]}
{"title": "A model for educating systems engineers\n", "abstract": " This paper discusses a model for developing a master's degree curriculum for systems engineering professionals. The model provides guidelines and recommendations that can be used for developing a new program or for modifying an existing program. The model was developed as part of the BKCASE (Body of Knowledge and Curriculum to Advance Systems Engineering) project to develop a guide to the Systems Engineering Body of Knowledge (SEBoK) and a Graduate Reference Curriculum for Systems Engineering (GRCSE). This paper describes the content of the SEBoK used to drive the core body of knowledge in a systems engineering program, and discusses the GRCSE purpose, organization, content, development process, and implementation.", "num_citations": "4\n", "authors": ["412"]}
{"title": "Value-Based Design of Software V&V Processes for NASA Flight Projects\n", "abstract": " Software risk advisory tools have been developed to support Verification and Validation (V&V) processes for NASA flight projects on the Constellation program. The Orthogonal Defect Classification COnstructive QUALity MOdel (ODC COQUALMO) predicts software defects introduced and removed classifying them with ODC defect types, allowing various tradeoff analyses. We have been exploring methods to design and optimize V&V processes with static and dynamic versions of the quality model by integrating it with different risk minimization techniques. These techniques allow \u201cwhat-if\u201d experimentation to determine the impact of V&V techniques on specific risks and overall flight risk. V&V techniques are quantified from a value-based perspective when the defect model is integrated with machine learning, strategic optimization and JPL\u2019s Defect Detection and Prevention (DDP) risk management method. Results to\u00a0\u2026", "num_citations": "4\n", "authors": ["412"]}
{"title": "People applications in software process modeling and simulation\n", "abstract": " Focusing on people is one of the highest leverage opportunities to improve process performance. But people issues have been under-represented in process modeling and simulation, as much of the work has dealt with technical aspects. Software processes will always be socio-technical by nature, and due attention should be paid to the human aspects and people dynamics. Simulation using system dynamics is useful to represent and understand some people issues. This position paper describes basic phenomenology and sample simulation results for people considerations. Constructs are discussed for important aspects including motivation, exhaustion, experience and learning curves, training, hiring and retention, communication, stakeholder collaboration, and workforce dynamics at the project and macro levels. A short summary of lessons learned about people issues is also provided.", "num_citations": "4\n", "authors": ["412"]}
{"title": "System Cost Modeling and SysML Integration in Model-Based Systems Engineering\n", "abstract": " \u2013Develop operational and system architectures to capture sets of military scenarios.\u2013Develop the architectures in MBSE environments.\u2013Design and demonstrate UAS ISR tradespace in MBSE and/or M&S environments.\u2013Develop cost model interfaces for components of the architectures in order to evaluate cost effectiveness in an uncertain future environment.", "num_citations": "3\n", "authors": ["412"]}
{"title": "5.6. 2 A Lean Approach to Improving SE Visibility in Large Operational Systems Evolution\n", "abstract": " It is often difficult to understand the status of capability development in large operational systems. Schedules are rarely stable. This is due to factors such as: the size and complexity of capabilities; unexpected changes in priorities; depth of supplier chains; variety and availability of special engineering resources; contract structure; and the inherently complex nature of such operations. Lean approaches use the concepts of work in progress (WIP) and capacity to maximize flow through a process. Under certain circumstances, these concepts can be applied to systems engineering and development processes. This paper describes an example implementation of the concept in a large health care system of systems. To enhance both visibility and flow, the approach utilizes visualization techniques, pull\u2010scheduling processes, and a services approach to systems engineering.", "num_citations": "3\n", "authors": ["412"]}
{"title": "A Lean Approach to Improving SE Visibility in Large Operational Systems Evolution\n", "abstract": " It is often difficult to understand the status of capability development in large operational systems. Schedules are rarely stable. This is due to factors such as: the size and complexity of capabilities; unexpected changes in priorities; depth of supplier chains; variety and availability of special engineering resources; contract structure; and the inherently complex nature of such operations. Lean approaches use the concepts of work in progress (WIP) and capacity to maximize flow through a process. Under certain circumstances, these concepts can be applied to systems engineering and development processes. This paper describes an example implementation of the concept in a large health care system of systems. To enhance both visibility and flow, the approach utilizes visualization techniques, pull\u2010scheduling processes, and a services approach to systems engineering.", "num_citations": "3\n", "authors": ["412"]}
{"title": "Simulation for business value and software process/product tradeoff decisions\n", "abstract": " Business value goals should be considered when making software process and product decisions, but it is usually difficult to integrate the perspectives quantitatively. This research uses simulation to assess product/process tradeoffs for economic business case analysis. A system dynamics model for commercial software enterprises relates the dynamics between product specifications, investment costs, schedule, software quality practices, market size, license retention, pricing and revenue generation. It allows one to experiment with different product strategies, software processes, marketing practices and pricing schemes while tracking financial measures over time. It can be used to determine the appropriate balance of process activities to meet business goals and product criteria. Applications are demonstrated for varying scope, reliability, delivery of multiple releases, and determining the quality sweet spot for\u00a0\u2026", "num_citations": "3\n", "authors": ["412"]}
{"title": "Software Dependability Applications in Process Modeling\n", "abstract": " Software process modeling can be used to reason about strategies for attaining software dependability. The impact of different processes and technologies on dependability attributes can be evaluated through modeling and simulation. Strategies may have overlapping capabilities, and process modeling is useful for assessing mixed strategies. Dependability has many facets, and there is no single software dependability metric that fits all situations. A stakeholder value-based approach is useful for determining relevant dependability measures for different contexts. Analytical models and simulation techniques including continuous systems and discrete event modeling approaches can be applied to dependability. Continuous systems modeling is easier for aggregate analyses. Discrete event has some advantages for dependability applications because multiple attributes related to dependability measures can\u00a0\u2026", "num_citations": "3\n", "authors": ["412"]}
{"title": "A software product business case model\n", "abstract": " A business case model for a commercial software enterprise has been developed relating the dynamics between product development investments, software quality practices, market size, license retention, pricing and revenue generation. The time-based value of the business enterprise is quantified using standard financial measures. The system dynamics model allows one to experiment with different product strategies, development practices, marketing practices and pricing schemes to achieve business value. Results show that optimal product policies depend on opposing market factors and business constraints.", "num_citations": "3\n", "authors": ["412"]}
{"title": "Achieving sustainable development in Southern California: Collaborative learning through system dynamics modeling\n", "abstract": " Southern California's gateway to international commerce is through major ports in the San Pedro Bay. The University of Southern California is working with local business and other port stakeholders to enable collaborative learning about sustainable business practices. We are using system dynamics-based models for participants to locate leverage points that yield the highest CO2 footprint reduction for the lowest cost for the shipping of goods from China through one of the ports. As goods movement is a process in which numerous business entities connect, it also offers an opportunity for a collaborative learning approach. We model key leverage points in the supply chain to explore the affects of potential business decisions on the CO2 footprint of shipping containers. These include options for global route choices and clean technologies for ships, rails and trucks. We are expanding the models for refined route\u00a0\u2026", "num_citations": "2\n", "authors": ["412"]}
{"title": "Naval Combat System Product Line Architecture Economics\n", "abstract": " A Model-Based Systems Engineering (MBSE) approach has been developed at the Naval Postgraduate School that integrates parametric cost and product modeling methods for economic trade-off analysis of system product lines.  The research assesses the economic consequences of DoD product line options and has been refining a framework for others to use and adapt.  This report provides details of the methodology and its application to several empirical case studies. The modeling framework includes a reference architecture and cost model for a general combat system product line that is extensible to other DoD and government domains. It has been applied to assess the economics of Navy combat system product line architecture approaches in coordinated case studies. The case studies were performed for a three-tier cruise missile system, the Aegis ship software product line, and an Anti-Submarine Warfare (ASW) cross-domain product line architecture for air, surface, and sub-surface applications. An overall business case analysis for DoD product line practices was performed synthesizing the case studies with recommendations generated.", "num_citations": "1\n", "authors": ["412"]}
{"title": "Model-Driven UAS ISR Tradespace Analysis\n", "abstract": " IF TBM located, activate Locate TBM (ISR) activity which updates Decision Makers, THEN Decision makers assign appropriate Surveil UAS through Assign Surveil UAS activity, ELSE continue TBM Located? Task UNTIL search is completed. The probability of TBM located is dependent on the Type of Sensors.", "num_citations": "1\n", "authors": ["412"]}
{"title": "An event-driven, value-based, pull systems engineering scheduling approach\n", "abstract": " Effective application of systems engineering in rapid response environments has been difficult, particularly those where large, complex brownfield systems or systems of systems exist and are constantly being updated with both short and long term software enhancements. This paper proposes a general case for solving this problem by combining a services approach to systems engineering with a kanban-based scheduling system. It provides the basis for validating the approach with agent-based simulations.", "num_citations": "1\n", "authors": ["412"]}
{"title": "Agile and Lean Systems Engineering: Kanban in Systems Engineering\n", "abstract": " This research project evaluates the use of on-demand pull or kanban scheduling approaches in systems engineering. In particular, this initial phase focuses on systems engineering where rapid response software development projects incrementally evolve capabilities of existing systems andor systems of systems. It defines and models a kanban-based scheduling system and a services approach to systems engineering among software projects in such an environment. It then reports on simulation of their performance and those of traditional SE methods to understand if systems engineering functions are accomplished more effectively and efficiently, and whether the overall value of the systems of systems over time is increased.Descriptors:", "num_citations": "1\n", "authors": ["412"]}
{"title": "Software Process and Business Value Modeling\n", "abstract": " Business value attainment should be a key consideration when designing software processes. Ideally they are structured to meet organizational business goals, but it is usually difficult to integrate the process and business perspectives quantitatively. This research uses modeling and simulation to assess tradeoffs for business case analysis. An improved model relates the dynamics between product specifications, investment costs, schedule, software quality practices, market size, license retention, pricing and revenue generation. The system dynamics model allows one to experiment with different product strategies, software processes, marketing practices and pricing schemes while tracking financial measures over time. It can be used to determine the appropriate balance of process activities to meet goals. Examples are developed for varying scope, reliability, delivery of multiple releases, and determining the quality sweet spot for different time horizons. Results show that optimal policies depend on various stakeholder value functions, opposing market factors and business constraints. Future model improvements are also identified.", "num_citations": "1\n", "authors": ["412"]}
{"title": "Recent Results in Software Process Modeling\n", "abstract": " Understanding software process interactions and feedback is increasingly important given changing software development and evolution paradigms. Towards this end, a new graduate course in Software Process Modeling was developed by this author at the University of Southern California Center for Software Engineering (USC-CSE)[1]. It was first offered in the Fall of 1999, and the term projects were original investigations into critical process issues. This abstract summarizes the student research projects, and highlights some results in terms of identifying important feedback in software processes. Rather than focus on previous contributions [2],[3], only new and previously unreported student work is described herein. The in-process book Software Process Dynamics [4] was the primary text for the class. Some of the student work incorporates new concepts in the book, such as inter-phase iterative feedback, process concurrence, personnel factors, learning feedback and model calibration techniques.", "num_citations": "1\n", "authors": ["412"]}
{"title": "The Modeling Process with System Dynamics\n", "abstract": " This chapter contains sections titled:   System Dynamics Background   General System Behaviors   Modeling Overview   Problem Definition   Model Conceptualization   Model Formulation and Construction   Simulation   Model Assessment   Policy Analysis   Continuous Model Improvement   Software Metrics Considerations   Project Management Considerations   Modeling Tools   Major References   Chapter 2 Summary   Exercises", "num_citations": "1\n", "authors": ["412"]}