{"title": "Integration of Communication Analysis and the OO-Method: Manual derivation of the conceptual model. The SuperStationery Co. lab demo\n", "abstract": " This document presents a lab demo that exemplifies the manual derivation of an OO Method conceptual model, taking as input a Communication Analysis requirements model. In addition, it is described how the conceptual model is created in the OLIVANOVA Modeler tool. The lab demo corresponds to part of the business processes of a fictional small and medium enterprise named SuperStationery Co. This company provides stationery and office material to its clients. The company acts as a as intermediary: the company has a catalogue of products that are bought from suppliers and sold to clients. This lab demo, besides illustrating the derivation technique, demonstrates that the technique is feasible in practice. Also, the results of this lab demo provide a valuable feedback in order to improve the derivation technique.", "num_citations": "15\n", "authors": ["2260"]}
{"title": "Message Structures: a modelling technique for information systems analysis and design\n", "abstract": " Despite the increasing maturity of model-driven software development (MDD), some research challenges remain open in the field of information systems (IS). For instance, there is a need to improve modelling techniques so that they cover several development stages in an integrated way, and they facilitate the transition from analysis to design. This paper presents Message Structures, a technique for the specification of communicative interactions between the IS and organisational actors. This technique can be used both in the analysis stage and in the design stage. During analysis, it allows abstracting from the technology that will support the IS, and to complement business process diagramming techniques with the specification of the communicational needs of the organisation. During design, Message Structures serves two purposes:(i) it allows to systematically derive a specification of the IS memory (eg a UML class diagram),(ii) and it allows to reason the user interface design using abstract patterns. This technique is part of Communication Analysis, a communication-oriented requirements engineering method, but it can be adopted in order to extend widely-used business process and functional requirements modelling techniques (eg BPMN, Use Cases). Moreover, the paper presents two tools that support Message Structures, one uses the Xtext technology, and the other uses the Eclipse Modelling Framework. Industrial experience has shown us that the technique can be adopted and applied in complex projects.", "num_citations": "12\n", "authors": ["2260"]}
{"title": "Model-driven organisational reengineering A framework to support organisational improvement\n", "abstract": " Companies need to rethink business processes, infrastructures, technologies, staff, etc. according to new demands, strategic goals, and changes in their environment. Information System evolution has been supported by the reengineering process. Since the models are now part of an increasing number of engineering processes and model-driven software development is a well-established paradigm to support information systems, the reengineering process could be improved with the incorporation of the model-driven development paradigm. This paper presents a model-driven organisational reengineering framework to support organisational improvement. The main idea is to get the most out of the existing proposals in model-driven development for the reengineering process (reverse engineering, improvement processes, and forward processes). Methods, techniques, model-driven tools, and perspectives for\u00a0\u2026", "num_citations": "10\n", "authors": ["2260"]}
{"title": "A blockchain-based micro economy platform for distributed infrastructure initiatives\n", "abstract": " Distributed Infrastructure Initiatives (DIIs) are communities that collaboratively produce and consume infrastructure. To develop a healthy ecosystem, DIIs require an economic model that balances supply and demand, but there is currently a lack of tooling to support implementing these. In this research, we propose an architecture for a platform that enables DIIs to implement such models, focused around a digital currency based on blockchain technology. The currency is issued according to the amount participants contribute to the initiative, which is quantified based on operational metrics gathered from the infrastructure. Furthermore, the platform enables participants to deploy smart contracts which encode self-enforcing agreements about the infrastructure services they exchange. The architecture has been evaluated through a case study at The Things Network (TTN) a global distributed crowdsourced Internet of\u00a0\u2026", "num_citations": "7\n", "authors": ["2260"]}
{"title": "Are requirements elicitation sessions influenced by participants' gender? An empirical experiment\n", "abstract": " ContextRequirements elicitation is a crucial phase in the software development life cycle. During requirements elicitation sessions, requirements engineers capture software requirements, and motivate stakeholders to express needs and expected software functionalities. In this context, there is a lack of extensive empirical research reporting the extent to which elicitation sessions can be influenced by participants' gender.ObjectiveThis paper presents our research endeavour to investigate requirements engineers' effort and elicited requirements' accuracy based on participants' gender.MethodWe conducted an experiment in two rounds with a total of 59 students who played the role of requirements engineers. In the first experimental task, the participant watched two videos where men and women stakeholders expressed software requirements. Later on, the participants specified software requirements in the shape of\u00a0\u2026", "num_citations": "3\n", "authors": ["2260"]}
{"title": "A Process for Tailoring Domain-Specific Enterprise Architecture Maturity Models\n", "abstract": " Reference architectures provide strong foundations for the implementation and development of enterprise architecture. It is common for enterprise architects to encounter the challenge of managing an increasingly complex architecture. This management can be enhanced by the application of domain-independent maturity models. Nevertheless, existing maturity models do not provide enterprise architects with metrics and domain-specific solutions to ensure a successful evolution path. This research in progress presents a process for tailoring domain-specific enterprise architecture maturity models. As a proof of concept, we chose the domain of hospitals because of the following reasons: wide variety of interdependencies and many medical disciplines with their own processes, technology, and data requirements; there is no specific maturity model for the enterprise architecture of hospitals; and there are\u00a0\u2026", "num_citations": "3\n", "authors": ["2260"]}
{"title": "From Requirements to Code: A Conceptual Model-based Approach for Automating the Software Production Process\n", "abstract": " Conceptual Models are part of an increasing number of engineering processes. The model driven development approach considers conceptual models as first-class entities and also considers tools, repositories, etc. as models. In order to take full advantage of these ideas, model transformation is a main activity. A sound software production process, conceptual-modelling based, must go from the initial requirements model to the final application code through a well-defined set of conceptual models and transformations between them. Model transformation aims at supporting the production of target models from a number of source models, while keeping a full traceability support. The current paper presents a practical application of these ideas using the Model Centred Architecture contributed by Heinrich C. Mayr. In this line, we present our research efforts on the integration of requirements and executable conceptual models. We reflect on the integration of Communication Analysis (a communication-oriented business process modelling and requirements method) and the OO-Method (an object-oriented model-driven development method).", "num_citations": "3\n", "authors": ["2260"]}
{"title": "Using Conceptual Models in Research Methods Courses: An experience using iStar 2.0\n", "abstract": " Conceptual modelling languages are typically taught in graduate and postgraduate information systems programs. In the specific case of postgraduate information systems students, the lecturer has the opportunity to exploit conceptual modelling for educational purposes that go beyond learning how to apply the modelling paradigm or specific languages. In this paper, we report on our employment of the recently proposed iStar 2.0 in the master-level course Advanced Research Methods at Utrecht University in the Netherlands. During this course, the students conducted a design science project where iStar 2.0 artefacts are evaluated in an experimental setting. We present the course (intended learning objectives, learning materials, etc.), we explain how we employed iStar 2.0 therein, and we discuss our teaching experience including lessons learnt.", "num_citations": "3\n", "authors": ["2260"]}
{"title": "Requirements-Collector: Automating Requirements Specification from Elicitation Sessions and User Feedback\n", "abstract": " In the context of digital transformation, speeding up the time-to-market of high-quality software products is a big challenge. Software quality correlates with the success of requirements engineering (RE) sessions and the ability to collect feedback from end-users in an efficient, dynamic way. Thus, software analysts are tasked to collect all relevant material of RE sessions and user feedback, usually specified on written notes, flip charts, pictures, and user reviews. Afterward comprehensible requirements need to be specified for software implementation and testing. These activities are mostly performed manually, which causes process delays, with a negative effect on software quality attributes such as reliability, usability, comprehensibility. This paper presents Requirements-Collector, a tool for automating the tasks of requirements specification and user feedback analysis. Our tool involves machine learning (ML) and\u00a0\u2026", "num_citations": "2\n", "authors": ["2260"]}
{"title": "Goal-Oriented Models for Teaching and Understanding Data Structures\n", "abstract": " Most computer science curricula include a compulsory course on data structures. Students are prone to memorise facts about data structures instead of understanding the essence of underlying concepts. This can be explained by the fact that learning the basics of each data structure, the difference with each other, and the adequacy of each of them to the most appropriate context of use, is far from trivial. This paper explores the idea of providing adequate levels of abstractions to describe data structures from an intentional point of view. Our hypothesis is that adopting a goal-oriented perspective could emphasise the main goals of each data structure, its qualities, and its relationships with the potential context of use. Following this hypothesis, in this paper we present the use of iStar2.0 to teach and understand data structures. We conducted a comparative quasi-experiment with undergraduate students to\u00a0\u2026", "num_citations": "1\n", "authors": ["2260"]}
{"title": "A Traceability-based Method to Support Conceptual Model Evolution\n", "abstract": " Renewing software systems is one of the most cost-effective ways to protect software investment, which saves time, money and ensures uninterrupted access to technical support and product upgrades. There are several motivations to promote investment and scientific effort for specifying systems by means of conceptual models and supporting its evolution. As an example, the software engineering community is addressing solutions for supporting model traceability, continuous improvement of business process, organisational reengineering, information system maintenance, etc. Model-driven techniques have been developed in order to analyse systems raising the abstraction level of its specification. However, a support for conceptual model evolution by means of model-driven techniques is still needed. This thesis proposes a traceabilitybased method that involves model-driven capabilities for designing and providing guidelines, techniques, and tools to support conceptual model evolution. The main idea is to support information system analysts in the tasks related to: justify why the conceptual models have evolved, report and specify what elements have evolved, and guide how to carry out evolution in certain predefined organisational contexts. We plan to apply our method to guide the evolution of an E-shopping software. This way, we also provide mechanism to facilitate industrial adoption.", "num_citations": "1\n", "authors": ["2260"]}
{"title": "A model driven framework to integrate Communication Analysis and OO-Method: Supporting the model transformation\n", "abstract": " Models are now part of an increasing number of engineering processes. However, in most cases, they are confined to a simple documentation role instead of being actively integrated into the engineering process. The model-driven development approach considers models as first-class entities and also considers tools, repositories, etc. as models. In order to take full advantage of these ideas, model transformation emerges as a main activity. Model transformation aims at supporting the production of target models from a number of source models. Following the model-driven development paradigm, we propose a model-driven framework to integrate Communication Analysis (a communication-oriented business process modelling and requirements method) and OO-Method (an object-oriented model-driven development method). This integration framework is composed of two stages: diagramming support and transformation support. This paper describes the second stage (the first stage was described in previous works). Phases, tasks, technological support and examples are presented. Finally, we conclude with an analysis and discussions about lessons learned and an evaluation proposal to assess the usability of the transformation module.", "num_citations": "1\n", "authors": ["2260"]}