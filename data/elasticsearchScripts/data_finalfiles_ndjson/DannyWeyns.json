{"title": "Environment as a first class abstraction in multiagent systems\n", "abstract": " The current practice in multiagent systems typically associates the environment with resources that are external to agents and their communication infrastructure. Advanced uses of the environment include infrastructures for indirect coordination, such as digital pheromones, or support for governed interaction in electronic institutions. Yet, in general, the notion of environment is not well defined. Functionalities of the environment are often dealt with implicitly or in an ad hoc manner. This is not only poor engineering practice, it also hinders engineers to exploit the full potential of the environment in multiagent systems.                In this paper, we put forward the environment as an explicit part of multiagent systems.We give a definition stating that the environment in a multiagent system is a first-class abstraction with dual roles: (1) the environment provides the surrounding conditions for agents to exist, which implies\u00a0\u2026", "num_citations": "582\n", "authors": ["629"]}
{"title": "Environments for multiagent systems state-of-the-art and research challenges\n", "abstract": " It is generally accepted that the environment is an essential compound of multiagent systems (MASs). Yet the environment is typically assigned limited responsibilities, or even neglected entirely, overlooking a rich potential for the paradigm of MASs.               Opportunities that environments offer, have mostly been researched in the domain of situated MASs. However, the complex principles behind the concepts and responsibilities of the environment and the interplay between agents and environment are not yet fully clarified.               In this paper, we first give an overview of the state-of-the-art on environments in MASs. The survey discusses relevant research tracks on environments that have been explored so far. Each track is illustrated with a number of representative contributions by the research community. Based on this study and the results of our own research, we identify a set of core concerns for\u00a0\u2026", "num_citations": "377\n", "authors": ["629"]}
{"title": "A decentralized approach for anticipatory vehicle routing using delegate multiagent systems\n", "abstract": " Advanced vehicle guidance systems use real-time traffic information to route traffic and to avoid congestion. Unfortunately, these systems can only react upon the presence of traffic jams and not to prevent the creation of unnecessary congestion. Anticipatory vehicle routing is promising in that respect, because this approach allows directing vehicle routing by accounting for traffic forecast information. This paper presents a decentralized approach for anticipatory vehicle routing that is particularly useful in large-scale dynamic environments. The approach is based on delegate multiagent systems, i.e., an environment-centric coordination mechanism that is, in part, inspired by ant behavior. Antlike agents explore the environment on behalf of vehicles and detect a congestion forecast, allowing vehicles to reroute. The approach is explained in depth and is evaluated by comparison with three alternative routing strategies\u00a0\u2026", "num_citations": "267\n", "authors": ["629"]}
{"title": "Multi-Agent systems: Simulation and applications\n", "abstract": " Methodological Guidelines for Modeling and Developing MAS-Based Simulations The intersection of agents, modeling, simulation, and application domains has been the subject of active research for over two decades. Although agents and simulation have been used effectively in a variety of application domains, much of the supporting research remains scattered in the literature, too often leaving scientists to develop multi-agent system (MAS) models and simulations from scratch. Multi-Agent Systems: Simulation and Applications provides an overdue review of the wide ranging facets of MAS simulation, including methodological and application-oriented guidelines. This comprehensive resource reviews two decades of research in the intersection of MAS, simulation, and different application domains. It provides scientists and developers with disciplined engineering approaches to modeling and developing MAS-based simulations. After providing an overview of the field\u2019s history and its basic principles, as well as cataloging the various simulation engines for MAS, the book devotes three sections to current and emerging approaches and applications. Simulation for MAS\u2014explains simulation support for agent decision making, the use of simulation for the design of self-organizing systems, the role of software architecture in simulating MAS, and the use of simulation for studying learning and stigmergic interaction. MAS for Simulation\u2014discusses an agent-based framework for symbiotic simulation, the use of country databases and expert systems for agent-based modeling of social systems, crowd-behavior modeling, agent-based modeling and\u00a0\u2026", "num_citations": "216\n", "authors": ["629"]}
{"title": "A survey of formal methods in self-adaptive systems\n", "abstract": " One major challenge in self-adaptive systems is to assure the required quality properties. Formal methods provide the means to rigorously specify and reason about the behaviors of self-adaptive systems, both at design time and runtime. To the best of our knowledge, no systematic study has been performed on the use of formal methods in self-adaptive systems. As a result, there is no clear view on what methods have been used to verify self-adaptive systems, and what support these methods offer to software developers. As such insight is important for researchers and engineers, we performed a systematic literature review covering 12 main software engineering venues and 4 journals, resulting in 75 papers used for data collection. The study shows that the attention for self-adaptive software systems is gradually increasing, but the number of studies that employ formal methods remains low. The main focus of\u00a0\u2026", "num_citations": "192\n", "authors": ["629"]}
{"title": "Activforms: Active formal models for self-adaptation\n", "abstract": " Self-adaptation enables a software system to deal autonomously with uncertainties, such as dynamic operating conditions that are difficult to predict or changing goals. A common approach to realize self-adaptation is with a MAPE-K feedback loop that consists of four adaptation components: Monitor, Analyze, Plan, and Execute. These components share Knowledge models of the managed system, its goals and environment. To provide guarantees of the adaptation goals, state of the art approaches propose using formal models of the knowledge. However, less attention is given to the formalization of the adaptation components themselves, which is important to provide guarantees of correctness of the adaptation behavior (eg, does the execute component execute the plan correctly?). We propose Active FORmal Models for Self-adaptation (ActivFORMS) that uses an integrated formal model of the adaptation\u00a0\u2026", "num_citations": "159\n", "authors": ["629"]}
{"title": "MAPE-K formal templates to rigorously design behaviors for self-adaptive systems\n", "abstract": " Designing software systems that have to deal with dynamic operating conditions, such as changing availability of resources and faults that are difficult to predict, is complex. A promising approach to handle such dynamics is self-adaptation that can be realized by a MAPE-K feedback loop (Monitor-Analyze-Plan-Execute plus Knowledge). To provide evidence that the system goals are satisfied, given the changing conditions, the state of the art advocates the use of formal methods. However, little research has been done on consolidating design knowledge of self-adaptive systems. To support designers, this paper contributes with a set of formally specified MAPE-K templates that encode design expertise for a family of self-adaptive systems. The templates comprise: (1) behavior specification templates for modeling the different components of a MAPE-K feedback loop (based on networks of timed automata), and (2\u00a0\u2026", "num_citations": "158\n", "authors": ["629"]}
{"title": "A formal model for situated multi-agent systems\n", "abstract": " Contrary to cognitive approaches of agency where a lot of effort is devoted to the formalization of agent concepts, little work has been done on the formalization of situated multi-agent systems (situated MASs). In this paper we present a generic model for situated MASs. This model formally describes an abstract architecture for situated MASs. In this architecture each agent is situated in its local context that it is able to perceive and in which it can act. Since intelligence in situated MASs results from the interactions of agents with the environment rather than from their individual capabilities, the model takes an action-centric approach. The model deals with (1) the actions of agents in the environment,(2) ongoing activities in the environment, such as moving objects, and (3) the interactions between agents and ongoing activities through the environment. One model for situated MASs was described by J. Ferber and JP\u00a0\u2026", "num_citations": "134\n", "authors": ["629"]}
{"title": "Software engineering of self-adaptive systems: an organised tour and future challenges\n", "abstract": " Modern software systems are expected to operate under uncertain conditions, without interruption. Possible causes of uncertainties include changes in the operational environment, dynamics in the availability of resources, and variations of user goals. The aim of self-adaptation is to let the system collect additional data about the uncertainties during operation. The system uses the additional data to resolve uncertainties, to reason about itself, and based on its goals to reconfigure or adjust itself to satisfy the changing conditions, or if necessary to degrade gracefully. In this chapter, we provide a particular perspective on the evolution of the field of self-adaptation in six waves. These waves put complementary aspects of engineering self-adaptive systems in focus that synergistically have contributed to the current knowledge in the field. From the presented perspective on the field, we outline a number of challenges for future research in self-adaptation, both in a short and long term.", "num_citations": "126\n", "authors": ["629"]}
{"title": "Towards active perception in situated multi-agent systems\n", "abstract": " Modeling the environment and agent-environment relationships is not well explored in multi-agent systems, in particular not for software multi-agent systems. This paper aims to contribute with a generic model for active perception in situated multi-agent systems. Active perception enables an agent to direct its perception at the most relevant aspects in the environment, according to its current task. The model decomposes perception into three functionalities: sensing, interpreting, and filtering.             The agent first senses its neighborhood through a set of selected foci, resulting in a representation. A set of perceptual laws enforces domain specific constraints on sensing. Next, the agent interprets the representation by means of descriptions, resulting in a percept. Percepts are expressions that can be understood by the internal machinery of the agent. Finally, the percept is filtered by a set of selected filters, restricting the\u00a0\u2026", "num_citations": "125\n", "authors": ["629"]}
{"title": "Engineering trustworthy self-adaptive software with dynamic assurance cases\n", "abstract": " Building on concepts drawn from control theory, self-adaptive software handles environmental and internal uncertainties by dynamically adjusting its architecture and parameters in response to events such as workload changes and component failures. Self-adaptive software is increasingly expected to meet strict functional and non-functional requirements in applications from areas as diverse as manufacturing, healthcare and finance. To address this need, we introduce a methodology for the systematic ENgineering of TRUstworthy Self-adaptive sofTware (ENTRUST). ENTRUST uses a combination of (1) design-time and runtime modelling and verification, and (2) industry-adopted assurance processes to develop trustworthy self-adaptive software and assurance cases arguing the suitability of the software for its intended application. To evaluate the effectiveness of our methodology, we present a tool-supported\u00a0\u2026", "num_citations": "119\n", "authors": ["629"]}
{"title": "Decentralized control of E'GV transportation systems\n", "abstract": " Egemin NV is a Belgian manufacturer of Automatic Guided Vehicles-named E'GVs-and control software for automating logistics services in warehouses and manufactories using E'GVs. In a joint R&D project, Egemin and the AgentWise research group are developing an innovative version of the E'GVs control system aimed to cope with new and future system requirements such as flexibility and openness. In this project, we exploit principles and mechanisms known from situated multi-agent systems for modelling and implementing a decentralized control system. Instead of a centralistic approach, where one computer system is in charge of numerous complex and time-consuming tasks (such as routing, collision avoidance, deadlock avoidance, etc.), we aim to provide the E'GVs with a considerable amount of autonomy. This allows to obtain a system that is far more flexible than the current software-the E'GVs adapt\u00a0\u2026", "num_citations": "110\n", "authors": ["629"]}
{"title": "The MACODO organization model for context-driven dynamic agent organizations\n", "abstract": " Today's distributed applications such as sensor networks, mobile multimedia applications, and intelligent transportation systems pose huge engineering challenges. Such systems often comprise different components that interact with each other as peers, as such forming a decentralized system. The system components and collaborations change over time, often in unanticipated ways. Multiagent systems belong to a class of decentralized systems that are known for realizing qualities such as adaptability, robustness, and scalability in such environments. A typical way to structure and manage interactions among agents is by means of organizations. Existing approaches usually endow agents with a dual responsibility: on the one hand agents have to play roles providing the associated functionality in the organization, on the other hand agents are responsible for setting up organizations and managing organization\u00a0\u2026", "num_citations": "107\n", "authors": ["629"]}
{"title": "Environments in Multi-Agent Systems\n", "abstract": " There is a growing awareness in the multiagent systems research community that the environment plays a prominent role in multiagent systems. Originating from research on behavior-based agent systems and situated multiagent systems, the importance of the environment is now gradually being accepted in the multiagent system community in general. In this paper, we put forward the environment as a first-order abstraction in multiagent systems. This position is motivated by the fact that several aspects of multiagent systems that conceptually do not belong to agents themselves should not be assigned to, or hosted inside the agents. Examples are infrastructure for communication, the topology of a spatial domain or support for the action model. These and other aspects should be considered explicitly. The environment is the natural candidate to encapsulate these aspects. We elaborate on environment engineering\u00a0\u2026", "num_citations": "93\n", "authors": ["629"]}
{"title": "Self-adaptation using multiagent systems\n", "abstract": " Each decade has its key software technology to advance artificial intelligence, and each technology is highlighted in a novel that sells much better than the underlying technology. Who hasn't read Michael Crichton's Prey and wondered how far multiagent systems might evolve and how they might affect humankind? Our technology column digs into this topic in this issue. Danny Weyns and Michael Georgeff provide a short introduction and show how multiagent systems help master the complexity of self-adaptive systems. They contrast multiagent systems with other current technologies and provide links and hints for practitioners who want to get started with this emerging field.", "num_citations": "91\n", "authors": ["629"]}
{"title": "Gradient field-based task assignment in an agv transportation system\n", "abstract": " Assigning tasks to agents is complex, especially in highly dynamic environments. Typical protocol-based approaches for task assignment such as Contract Net have proven their value, however, they may not be flexible enough to cope with continuously changing circumstances. In this paper we study and validate the feasibility of a field-based approach for task assignment in a complex problem domain. In particular, we apply the field-based approach for task assignment in an AGV transportation system. In this approach, transports emit fields into the environment that attract idle AGVs. To avoid multiple AGVs driving towards the same transport, AGVs emit repulsive fields. AGVs combine received fields and follow the gradient of the combined fields, that guide them towards pick locations of transports. The AGVs continuously reconsider the situation of the environment and task assignment is delayed until the load is\u00a0\u2026", "num_citations": "88\n", "authors": ["629"]}
{"title": "Claims and evidence for architecture-based self-adaptation: A systematic literature review\n", "abstract": " Engineering the upcoming generation of software systems and guaranteeing the required qualities is complex due to the inherent uncertainties at design time, such as new user needs and changing availability of resources. Architecture-based self-adaptation is a promising approach to tackle these challenges. In this approach, a system maintains a model of itself and adapts itself to realize particular quality objectives using a feedback loop. Despite a vast body of work, no systematic study has been performed on the claims associated with architecture-based self-adaptation and the evidence that exists for these claims. As such insight is important for researchers and engineers, we performed a systematic literature review covering 20 leading software engineering conferences and journals in the field, resulting in 121 studies used for data collection. The review shows that self-adaptation is primarily used to\u00a0\u2026", "num_citations": "86\n", "authors": ["629"]}
{"title": "Tele assistance: A self-adaptive service-based system exemplar\n", "abstract": " Research on adaptive and self-managing systems is hindered by a lack of prototypical applications that researchers could use to evaluate and compare new methods, techniques and tools. To address this limitation, we introduce a reference implementation of a Tele Assistance System (TAS) for research on self-adaptation in the domain of service-based systems. Our TAS exemplar of service-based systems comes with pre-defined scenarios for comparing the effectiveness of different self-adaptation solutions. Other researchers can easily exploit the underlying service platform, reusable components and development method we devised for TAS to speed up the engineering of additional research exemplars for service-based systems.", "num_citations": "79\n", "authors": ["629"]}
{"title": "Anticipatory vehicle routing using delegate multi-agent systems\n", "abstract": " This paper presents an agent-based approach, called delegate multi-agent systems, for anticipatory vehicle routing to avoid traffic congestion. In this approach, individual vehicles are represented by agents, which themselves issue lightweight agents that explore alternative routes in the environment on behalf of the vehicles. Based on the evaluation of the alternatives, the vehicles then issue light-weight agents for allocating road segments, spreading the vehicles' intentions and coordinating their behavior. To evaluate the approach, we have developed an initial prototype application. Test results indicate that delegate multi-agent systems are a promising approach for anticipatory vehicle routing.", "num_citations": "79\n", "authors": ["629"]}
{"title": "Architecture-based design of multi-agent systems\n", "abstract": " Multi-agent systems are claimed to be especially suited to the development of software systems that are decentralized, can deal flexibly with dynamic conditions, and are open to system components that come and go. This is why they are used in domains such as manufacturing control, automated vehicles, and e-commerce markets. Danny Weyns' book is organized according to the postulate that\" developing multi-agent systems is 95% software engineering and 5% multi-agent systems theory.\" He presents a software engineering approach for multi-agent systems that is heavily based on software architecture-with, for example, tailored patterns such as\" situated agent\",\" virtual environment\", and\" selective perception\"-and on middleware for distributed coordination\u2013with programming abstractions such as\" views\" and\" roles.\" Next he shows the feasibility and applicability of this approach with the development of an automated transportation system consisting of a number of automatic guided vehicles transporting loads in an industrial setting. Weyns puts the development of multi-agent systems into a larger perspective with traditional software engineering approaches. With this, he opens up opportunities to exploit the body of knowledge developed in the multi-agent systems community to tackle some of the difficult challenges of modern-day software systems, such as decentralized control, location-awareness, self-adaption, and large-scale. Thus his book is of interest for both researchers and industrial software engineers who develop applications in areas such as distributed control systems and mobile applications where such requirements are of\u00a0\u2026", "num_citations": "78\n", "authors": ["629"]}
{"title": "Software engineering of self-adaptive systems\n", "abstract": " Modern software systems are expected to operate under uncertain conditions, without interruption. Possible causes of uncertainties include changes in the operational environment, dynamics in the availability of resources, and variations of user goals. The aim of self-adaptation is to let the system collect additional data about the uncertainties during operation. The system uses the additional data to resolve uncertainties, to reason about itself, and based on its goals to reconfigure or adjust itself to satisfy the changing conditions, or if necessary to degrade gracefully. In this chapter, we provide a particular perspective on the evolution of the field of self-adaptation in six waves. These waves put complementary aspects of engineering self-adaptive systems in focus that synergistically have contributed to the current knowledge in the field. From the presented perspective on the field, we outline a number of\u00a0\u2026", "num_citations": "77\n", "authors": ["629"]}
{"title": "A journey through the land of model-view-design patterns\n", "abstract": " Every software program that interacts with a user requires a user interface. Model-View-Controller (MVC) is a common design pattern to integrate a user interface with the application domain logic. MVC separates the representation of the application domain (Model) from the display of the application's state (View) and user interaction control (Controller). However, studying the literature reveals that a variety of other related patterns exists, which we denote with Model-View- (MV) design patterns. This paper discusses existing MV patterns classified in three main families: Model-View-Controller (MVC), Model-View-View Model (MVVM), and Model-View-Presenter (MVP). We take a practitioners' point of view and emphasize the essentials of each family as well as the differences. The study shows that the selection of patterns should take into account the use cases and quality requirements at hand, and chosen\u00a0\u2026", "num_citations": "76\n", "authors": ["629"]}
{"title": "Control-theoretical software adaptation: A systematic literature review\n", "abstract": " Modern software applications are subject to uncertain operating conditions, such as dynamics in the availability of services and variations of system goals. Consequently, runtime changes cannot be ignored, but often cannot be predicted at design time. Control theory has been identified as a principled way of addressing runtime changes and it has been applied successfully to modify the structure and behavior of software applications. Most of the times, however, the adaptation targeted the resources that the software has available for execution (CPU, storage, etc.) more than the software application itself. This paper investigates the research efforts that have been conducted to make software adaptable by modifying the software rather than the resource allocated to its execution. This paper aims to identify: the focus of research on control-theoretical software adaptation; how software is modeled and what control\u00a0\u2026", "num_citations": "74\n", "authors": ["629"]}
{"title": "Patterns of delegate mas\n", "abstract": " Delegate MAS has been proposed and investigated as an integrated coordination technique for so-called self-organizing coordination-and-control applications. Delegate MAS consist of three types of light weight, ant-like agents that assist domain agents in their coordination tasks - the types are exploration, intention and feasibility ants. The technique is especially suitable for distributed applications in large-scale, dynamic systems. Literature shows that, for various application domains, solution approaches based on self-organization have been proposed that have several similarities to delegate MAS, yet are not identical. In this paper, we specify three reusable solution patterns for coordination in distributed, large-scale, dynamic systems. To motivate the patterns, we first visit several solution approaches from various domains that bear resemblance with respect to coordination. We then identify common application\u00a0\u2026", "num_citations": "73\n", "authors": ["629"]}
{"title": "A case study on formal verification of self-adaptive behaviors in a decentralized system\n", "abstract": " Self-adaptation is a promising approach to manage the complexity of modern software systems. A self-adaptive system is able to adapt autonomously to internal dynamics and changing conditions in the environment to achieve particular quality goals. Our particular interest is in decentralized self-adaptive systems, in which central control of adaptation is not an option. One important challenge in self-adaptive systems, in particular those with decentralized control of adaptation, is to provide guarantees about the intended runtime qualities. In this paper, we present a case study in which we use model checking to verify behavioral properties of a decentralized self-adaptive system. Concretely, we contribute with a formalized architecture model of a decentralized traffic monitoring system and prove a number of self-adaptation properties for flexibility and robustness. To model the main processes in the system we use timed automata, and for the specification of the required properties we use timed computation tree logic. We use the Uppaal tool to specify the system and verify the flexibility and robustness properties.", "num_citations": "71\n", "authors": ["629"]}
{"title": "Deltaiot: A self-adaptive internet of things exemplar\n", "abstract": " Internet of Things (IoT) consists of networked tiny embedded computers (motes) that are capable of monitoring and controlling the physical world. Examples range from building security monitoring to smart factories. A central problem of IoT is minimising the energy consumption of the motes, while guaranteeing high packet delivery performance, regardless of uncertainties such as sudden changes in traffic load and communication interference. Traditionally, to deal with uncertainties the network settings are either hand-tuned or over-provisioned, resulting in continuous network maintenance or inefficiencies. Enhancing the IoT network with self-adaptation can automate these tasks. This paper presents DeltaIoT, an exemplar that enables researchers to evaluate and compare new methods, techniques and tools for self-adaptation in IoT. DeltaIoT is the first exemplar for research on self-adaptation that provides both a\u00a0\u2026", "num_citations": "63\n", "authors": ["629"]}
{"title": "Do external feedback loops improve the design of self-adaptive systems? a controlled experiment\n", "abstract": " Providing high-quality software in the face of uncertainties, such as dealing with new user needs, changing availability of resources, and faults that are difficult to predict, raises fundamental challenges to software engineers. These challenges have motivated the need for self-adaptive systems. One of the primary claimed benefits of self-adaptation is that a design with external feedback loops provide a more effective engineering solution for self-adaptation compared to a design with internal mechanisms. While many efforts indicate the validity of this claim, to the best of our knowledge, no controlled experiments have been performed that provide scientifically founded evidence for it. Such experiments are crucial for researchers and engineers to underpin their claims and improve research. In this paper, we report the results of a controlled experiment performed with 24 final-year students of a Master in Software\u00a0\u2026", "num_citations": "63\n", "authors": ["629"]}
{"title": "Keep it simplex: Satisfying multiple goals with guarantees in control-based self-adaptive systems\n", "abstract": " An increasingly important concern of software engineers is handling uncertainties at design time, such as environment dynamics that may be difficult to predict or requirements that may change during operation. The idea of self-adaptation is to handle such uncertainties at runtime, when the knowledge becomes available. As more systems with strict requirements require self-adaptation, providing guarantees for adaptation has become a high-priority. Providing such guarantees with traditional architecture-based approaches has shown to be challenging. In response, researchers have studied the application of control theory to realize self-adaptation. However, existing control-theoretic approaches applied to adapt software systems have primarily focused on satisfying only a single adaptation goal at a time, which is often too restrictive for real applications. In this paper, we present Simplex Control Adaptation, SimCA\u00a0\u2026", "num_citations": "62\n", "authors": ["629"]}
{"title": "How to get multi-agent systems accepted in industry?\n", "abstract": " With many researchers in the Multi-Agent System (MAS) community, we share the opinion that too much of the quality and relevant research in the area of MAS is underrepresented in the development of complex distributed systems in practice today. In our experience, a Babylonic mismatch is a crucial factor in this fact \u2013 research on MAS profiles itself as an isolated community and, as such, may create artificial thresholds to convince mainstream software developers of its merits. We argue that integrating the concepts and techniques from agent-based software engineering within mainstream software engineering provides opportunities to amplify the industrial adoption of MAS. To ground this position, we discuss MAS engineering from the perspective of the software engineering area that we are most familiar with: software architecture.", "num_citations": "56\n", "authors": ["629"]}
{"title": "Applying the ATAM to an architecture for decentralized control of a transportation system\n", "abstract": " For two years, we have been involved in a challenging project to develop a new architecture for an industrial transportation system. The motivating quality attributes to develop this innovative architecture were flexibility and openness. Taking these quality attributes into account, we proposed a decentralized architecture using multiagent systems (MASs). A MAS consists of multiple autonomous entities that coordinate with each other to achieve decentralized control. The typical advantages attributed to such decentralized architecture are flexibility and openness, the motivating quality attributes to apply MAS in this case.               The Architecture Tradeoff Analysis Method (ATAM) was used to provide insights wether our architecture meets the expected flexibility and openness, and to identify tradeoffs with other quality attributes. Applying the ATAM proved to be a valuable experience. One of the main outcome of\u00a0\u2026", "num_citations": "55\n", "authors": ["629"]}
{"title": "Model-based simulation at runtime for self-adaptive systems\n", "abstract": " \u00a9 2016 IEEE. Modern software systems are subject to uncertainties, such as dynamics in the availability of resources or changes of system goals. Self-adaptation enables a system to reason about runtime models to adapt itself and realises its goals under uncertainties. Our focus is on providing guarantees for adaption goals. A prominent approach to provide such guarantees is automated verification of a stochastic model that encodes up-to-date knowledge of the system and relevant qualities. The verification results allow selecting an adaption option that satisfies the goals. There are two issues with this state of the art approach: i) changing goals at runtime (a challenging type of uncertainty) is difficult, and ii) exhaustive verification suffers from the state space explosion problem. In this paper, we propose a novel modular approach for decision making in self-adaptive systems that combines distinct models for each relevant quality with runtime simulation of the models. Distinct models support on the fly changes of goals. Simulation enables efficient decision making to select an adaptation option that satisfies the system goals. The tradeoff is that simulation results can only provide guarantees with a certain level of accuracy. We demonstrate the benefits and tradeoffs of the approach for a service-based telecare system.", "num_citations": "52\n", "authors": ["629"]}
{"title": "Architectural design of a situated multiagent system for controlling automatic guided vehicles\n", "abstract": " Automatic Guided Vehicles (AGVs) are fully automated vehicles that are able to transport goods in an industrial environment. To cope with new and future system requirements such as flexibility and openness, we have applied a situated Multiagent System (MAS) to develop a decentralised control architecture for AGV transportation systems. In this paper, we give an overview of the software architecture of the system and we zoom in on two specific concerns: transport assignment and collision avoidance. We discuss the evaluation of the software architecture and the test results obtained from realistic simulations and a demonstrator system that we have developed. The architectural design and development of this real-world application teaches us that the primary use of a situated MAS comes from the way in which it structures the software. In particular, the set of adaptive agents that coordinate through the\u00a0\u2026", "num_citations": "51\n", "authors": ["629"]}
{"title": "The packet-world: A test bed for investigating situated multi-agent systems\n", "abstract": " Research on situated multi-agent systems investigates how to model a distributed application as a set of cooperating autonomous entities (agents) which are situated in an environment. Many fundamental issues remain unrevealed in this research area. A profound understanding of these issues, however, is necessary before situated multi-agent systems can be applied to industry-strength applications. We use the abstract application called the Packet-World quite extensively as a test bed for investigating, experimenting and evaluating fundamental concepts and mechanisms. Examples are active perception, decision making of situated agents, synchronization of simultaneous actions and indirect coordination. The Packet-World has direct connections with real-world applications, such as the decentralized control of a warehouse transportation system through unmanned vehicles. In this article, we describe\u00a0\u2026", "num_citations": "51\n", "authors": ["629"]}
{"title": "Agent implementation patterns\n", "abstract": " Our own experience in developing agents and multi-agent systems painfully taught us that there are no instruments to support the implementation of such systems. A thorough literature study confirms the fact that implementation issues, which are definitely non-trivial but clearly underestimated, are mostly achieved in an ad hoc fashion. This obviously results in people reinventing solutions for common problems. In this paper, we propose agent implementation patterns as an instrument to describe problems and generic solutions for implementing agents and multi-agent systems. Agent implementation patterns contrast with other proposals of agent patterns in that the latter typically deal with architectural and conceptual models, and not with the actual implementation of agent characteristics. If we eventually want to come to a best practice for the development and implementation of agent systems, system developers should share their knowledge and experience gained during the implementation of their systems. Agent implementation patterns can contribute to formalize and share such knowledge.", "num_citations": "48\n", "authors": ["629"]}
{"title": "Guest editors\u2019 introduction, special issue on environments for multi-agent systems\n", "abstract": " The first stage is marked by parallel but independent discoveries by individual researchers of some new perspective. It is marked by individual research papers scattered across a range of conferences and journals, and authors are often frustrated with the resistance of the established orthodoxy to their innovations. As these researchers discover one another, they begin to share insights informally, often with a good deal of confusion in vocabulary and methodology. The discovery stage manifests itself through the organization of workshops and other informal gatherings.Discussions and debates over these differences lead to new collaborations among practitioners, from which a consensus begins to emerge on the general lines of the discipline. The differences never disappear, but by this stage researchers typically have a language in which to describe them. This stage is visible in joint papers, in which the authors\u00a0\u2026", "num_citations": "47\n", "authors": ["629"]}
{"title": "A reference architecture for situated multiagent systems\n", "abstract": " A reference architecture integrates a set of architectural patterns that have proven their value for a family of applications. Such family of applications is characterized by specific functionality and quality requirements. A reference architecture provides a blueprint for developing software architectures for applications that share that common base. As such, a reference architecture provides a means for large-scale reuse of architectural design.               This paper gives an overview of a reference architecture for situated multiagent systems we have developed in our research. We discuss various architectural views of the reference architecture. Per view, we zoom in on the main view packets, each of them containing a bundle of information of a part of the reference architecture. For each view packet we explain the rationale for the design choices that were made and we give built-in mechanisms that describe how\u00a0\u2026", "num_citations": "44\n", "authors": ["629"]}
{"title": "Model for simultaneous actions in situated multi-agent systems\n", "abstract": " The main focus of multi-agent research so far has been on concepts and techniques to analyze and specify multi-agent systems. Much less attention has been devoted to the implementation of the concepts and techniques. This paper intends to bridge the gap between the mere concept of simultaneous actions and its implementation. Simultaneous actions are actions that are executed by different agents at the same time. We study simultaneous actions in the context of situated multi-agent systems where agents and objects have an explicit position in the environment. To clarify the concept of simultaneous actions, first we propose a classification for simultaneous actions and illustrate each type with examples. Then we present a generic model for simultaneous actions that is independent of the applied agent architecture. Support for simultaneous actions involves two aspects: first it must enable agents to act\u00a0\u2026", "num_citations": "44\n", "authors": ["629"]}
{"title": "An architecture-centric approach for software engineering with situated multi-agent systems\n", "abstract": " Developing and managing today's distributed applications is hard. Three important reasons for the increasing complexity that characterize a large family of systems are:(1) stakeholders involved in the systems have various, often conflicting quality requirements;(2) the systems are subject to highly dynamic and changing operating conditions;(3) activity in the systems is inherently localized, global control is hard to achieve or even impossible. In this dissertation, we present an approach for developing such complex systems. The approach integrates situated multiagent systems as software architecture in a mainstream software engineering process. Key aspects of the approach are architecture-centric software development, self-management, and decentralized control. Architecture-centric software development compels the stakeholders involved in a system to deal explicitly with quality goals and tradeoffs between the various system requirements. Self-management enables a software system to deal autonomously with the dynamic and changing circumstances in which it has to operate. Key qualities for endowing systems with abilities to manage dynamism and change are flexibility and openness. Decentralized control is essential to cope with the inherent locality of activity. In a system where global control is not an option, the functionality of the system has to be achieved by collaborating subsystems.We present an advanced model for situated multiagent systems that integrates the environment as a firstclass design abstraction with an integral model for situated agents that provides advanced mechanisms for adaptive behavior. These mechanisms\u00a0\u2026", "num_citations": "42\n", "authors": ["629"]}
{"title": "A colored Petri-net for a multi-agent application\n", "abstract": " In this paper we present a Colored Petri Net (CPN) for a multi-agent application. In particular we modeled the Packet-World. In our research we use the packet-world as a case to study the fundamentals of agents' social behavior. Our approach is to combine experiments with conceptual modeling. We start from a very basic model and then add social skills in a modular way. Integrating new social skills by means of adding new modules offers us a clear conceptual view on the evolution of agents and the environment. With a conceptual view we mean:(i) which concepts does an agent need in order to acquire a new kind of social ability,(ii) which infrastructure is necessary in the environment to support these abilities,(iii) how do these concepts relate to each other? With the insights we learn from the case study, we gradually develop a generic conceptual model for social agents situated in a MAS. In this paper we first\u00a0\u2026", "num_citations": "41\n", "authors": ["629"]}
{"title": "A design process for adaptive behavior of situated agents\n", "abstract": " Engineering non-trivial open multi-agent systems is a challenging task. Our research focusses on situated multi-agent systems, i.e.\u00a0systems in which agents are explicitly placed in an environment which agents can perceive and in which they can act. Situated agents do not use long-term planning to decide what action sequence should be executed, but select actions based on the locally perceived state of the world and limited internal state. To cope with change and dynamism of the system, situated agents must be able to adapt their behavior. A well-known family of agent architectures for adaptive behavior are free-flow architectures. However, building a free-flow architecture based on an analysis of the problem domain is a quasi-impossible job for non-trivial agents. To tackle the complexity of designing adaptive agent behavior based on a free-flow architecture, suitable abstractions are needed to describe\u00a0\u2026", "num_citations": "40\n", "authors": ["629"]}
{"title": "Agent environments for multi-agent systems\u2013a research roadmap\n", "abstract": " Ten years ago, researchers in multi-agent systems became more and more aware that agent systems consist of more than only agents. The series of workshops on Environments for Multi-Agent Systems (E4MAS 2004-2006) emerged from this awareness. One of the primary outcomes of this endeavor was a principled understanding that the agent environment should be considered as a primary design abstraction, equally important as the agents. A special issue in JAAMAS 2007 contributed a set of influential papers that define the role of agent environments, describe their engineering, and outline challenges in the field that have been the drivers for numerous follow up research efforts. The goal of this paper is to wrap up what has been achieved in the past 10 years and identify challenges for future research on agent environments. Instead of taking a broad perspective, we focus on three particularly\u00a0\u2026", "num_citations": "38\n", "authors": ["629"]}
{"title": "Decentralized control of automatic guided vehicles: applying multi-agent systems in practice\n", "abstract": " An automatic guided vehicle (AGV) transportation system is a fully automated system that provides logistic services in an industrial environment such as a warehouse or a factory. Traditionally, the AGVs that execute the transportation tasks are controlled by a central server via wireless communication. In a joint effort between Egemin, an industrial manufacturer of AGV transportation systems, and DistriNet Labs research at the Katholieke Universiteit Leuven, we developed an innovative decentralized architecture for controlling AGVs. The driving motivations behind decentralizing the control of AGVs were new and future quality requirements such as flexibility and openness. At the software architectural level, the AGV control system is structured as a multi-agent system; the detailed design and implementation is object-oriented. In this paper, we report our experiences with developing the agent-based control system for\u00a0\u2026", "num_citations": "38\n", "authors": ["629"]}
{"title": "A field-based versus a protocol-based approach for adaptive task assignment\n", "abstract": " Task assignment in multi-agent systems is a complex coordination problem, in particular in systems that are subject to dynamic and changing operating conditions. To enable agents to deal with dynamism and change, adaptive task assignment approaches are needed. In this paper, we study two approaches for adaptive task assignment that are characteristic for two classical families of task assignment approaches. FiTA is a field-based approach in which tasks emit fields in the environment that guide idle agents to tasks. DynCNET is a protocol-based approach that extends Standard Contract Net (CNET). In DynCNET, agents use explicit negotiation to assign tasks. We compare both approaches in a simulation of an industrial automated transportation system. Our experiences show that: (1) the performance of DynCNET and FiTA are similar, while both outperform CNET; (2) the complexity to engineer\u00a0\u2026", "num_citations": "38\n", "authors": ["629"]}
{"title": "Protocol-based communication for situated multi-agent systems\n", "abstract": " In this paper we introduce a model for direct communication in situated multi-agent systems. Direct communication is typically associated with cognitive agents, where the information encoded in the messages is related to a mental state. This generally assumed view on communication however, does not fit the approach of situated, behavior-based agents. We propose a protocol-based communication model for situated agents. Communication specified in terms of protocols, i.e. well-defined sequences of messages, shifts the focus of communication from the reasoning upon messages towards the relationship between the exchanged messages. The model decomposes communication into three functional modules: message decoding, communicating and message encoding. The core of the model, the communicating module (1) interprets decoded messages and reacts to them in accordance with the applicable\u00a0\u2026", "num_citations": "38\n", "authors": ["629"]}
{"title": "Design patterns for multi-agent systems: A systematic literature review\n", "abstract": " Design patterns document a field\u2019s systematic knowledge derived from experiences. Despite the vast body of work in the field of multi-agent systems (MAS), design patterns for MAS are not popular among software practitioners. As MAS have features that are widely considered as key to engineering complex distributed applications, it is important to provide a clear overview of existing patterns to make this knowledge accessible. To that end, we performed a systematic literature review (SLR) covering the main publication venues of the field since 1998, resulting in 206 patterns. The study shows that (1) there is a lack of a standard template for documenting design patterns for MAS, which hampers the use of patterns by practitioners, (2) associations between patterns are poorly described, which results in a lack of overview of the pattern space, (3) patterns for MAS have been used for a variety of application\u00a0\u2026", "num_citations": "37\n", "authors": ["629"]}
{"title": "UNDERSEA: an exemplar for engineering self-adaptive unmanned underwater vehicles\n", "abstract": " Recent advances in embedded systems and underwater communications raised the autonomy levels in unmanned underwater vehicles (UUVs) from human-driven and scripted to adaptive and self-managing. UUVs can execute longer and more challenging missions, and include functionality that enables adaptation to unexpected oceanic or vehicle changes. As such, the simulated UUV exemplar UNDERSEA introduced in our paper facilitates the development, evaluation and comparison of self-adaptation solutions in a new and important application domain. UNDERSEA comes with predefined oceanic surveillance UUV missions, adaptation scenarios, and a reference controller implementation, all of which can easily be extended or replaced.", "num_citations": "36\n", "authors": ["629"]}
{"title": "E pluribus unum: Polyagent and delegate mas architectures\n", "abstract": " For the past few years, our research groups have independently been developing systems in which a multi-agent system (typically of lightweight agents) provides some functionality in service of a higher-level system, and often of a higher-level agent in that system. This paper compares our approaches to develop a more generic architecture of which our individual approaches are special cases. We summarize our existing systems, describe this architecture and the characteristics of problems for which it is attractive, and outline an agenda for further research in this area.", "num_citations": "36\n", "authors": ["629"]}
{"title": "Applying architecture-based adaptation to automate the management of internet-of-things\n", "abstract": " Architecture-based adaptation equips a software-intensive system with a feedback loop that enables the system to adapt itself at runtime to changes to maintain its required quality goals. To guarantee the required goals, existing adaptation approaches apply exhaustive verification techniques at runtime. However these approaches are restricted to small-scale settings, which often limits their applicability in practice. To tackle this problem, we introduce an innovative architecture-based adaptation approach to solve a concrete practical problem of VersaSense: automating the management of Internet-of-Things (IoT). The approach, called MARTAS, equips a software system with a feedback loop that employs Models At Run Time and Statistical techniques to reason about the system and adapt it to ensure the required goals. We apply MARTAS to a building security case system, which is a representative IoT\u00a0\u2026", "num_citations": "35\n", "authors": ["629"]}
{"title": "Towards an integrated approach for validating qualities of self-adaptive systems\n", "abstract": " Self-adaptation has been widely recognized as an effective approach to deal with the increasing complexity and dynamicity of modern software systems. One major challenge in self-adaptive systems is to provide guarantees about the required runtime qualities, such as performance and reliability. Existing research employs formal methods either to provide guarantees about the design of a self-adaptive systems, or to perform runtime analysis supporting adaptations for particular quality goals. Yet, work products of formalization are not exploited over different phases of the software life cycle. In this position paper, we argue for an integrated formally founded approach to validate the required software qualities of self-adaptive systems. This approach integrates three activities:(1) model checking of the behavior of a self-adaptive system during design,(2) model-based testing of the concrete implementation during\u00a0\u2026", "num_citations": "33\n", "authors": ["629"]}
{"title": "An architectural strategy for self-adapting systems\n", "abstract": " Self-adaptation is the ability of a software system to adapt to dynamic and changing operating conditions autonomously. In this paper, we present an architectural strategy for self-adapting systems. An architectural strategy embodies architectural knowledge about a particular solution approach. The architectural strategy for self-adapting systems structures the software into a number of interacting autonomous entities (agents) that are situated in an environment. It integrates a set of architectural patterns that have proved to be valuable in the design of various self-adapting applications. The self-adapting properties of the approach are based on the agents' abilities to adapt their behavior to dynamic and changing circumstances. The architectural strategy provides an asset base architects can draw from when developing new self-adapting applications that share its common base.", "num_citations": "33\n", "authors": ["629"]}
{"title": "Architecture-centric support for adaptive service collaborations\n", "abstract": " In today's volatile business environments, collaboration between information systems, both within and across company borders, has become essential to success. An efficient supply chain, for example, requires the collaboration of distributed and heterogeneous systems of multiple companies. Developing such collaborative applications and building the supporting information systems poses several engineering challenges. A key challenge is to manage the ever-growing design complexity. In this article, we argue that software architecture should play a more prominent role in the development of collaborative applications. This can help to better manage design complexity by modularizing collaborations and separating concerns. State-of-the-art solutions, however, often lack proper abstractions for modeling collaborations at architectural level or do not reify these abstractions at detailed design and implementation\u00a0\u2026", "num_citations": "32\n", "authors": ["629"]}
{"title": "On the role of environments in multiagent systems\n", "abstract": " Danny Weyns and Tom Holvoet AgentWise, DistriNet, Katholieke Universiteit Leuven Celestijnenlaan 200 A, B-3001 Leuven, Belgium E-mail:{danny. weyns, tom. holvoet}@ cs. kuleuven. be", "num_citations": "32\n", "authors": ["629"]}
{"title": "Extending time management support for multi-agent systems\n", "abstract": " Time management is essential when simulating multi-agent systems (MASs) as it allows consistent and repeatable simulation runs. So far, time management lacks support to express the timing requirements of a simulation explicitly and at an abstraction level appropriate for MAS developers. Moreover, integrating time management into a MAS requires the developer to alter the design of the MAS. In this paper, we first propose semantic duration models to capture timing requirements that reflect the semantics of MAS activities in an explicit model. Second, we present a time management infrastructure that starts from a semantic duration model description to integrate all time management functionality into a MAS transparently, i.e. without requiring the developer to alter the design of the MAS. We use aspect-oriented programming technology as it allows separation of concerns, a crucial software engineering\u00a0\u2026", "num_citations": "32\n", "authors": ["629"]}
{"title": "A self-adaptive multi-agent system approach for collaborative mobile learning\n", "abstract": " Mobile technologies have emerged as facilitators in the learning process, extending traditional classroom activities. However, engineering mobile learning applications for outdoor usage poses severe challenges. The requirements of these applications are challenging, as many different aspects need to be catered, such as resource access and sharing, communication between peers, group management, activity flow, etc. Robustness is particularly important for learning scenarios to guarantee undisturbed and smooth user experiences, pushing the technological aspects in the background. Despite significant research in the field of mobile learning, very few efforts have focused on collaborative mobile learning requirements from a software engineering perspective. This paper focuses on aspects of the software architecture, aiming to address the challenges related to resource sharing in collaborative mobile learning\u00a0\u2026", "num_citations": "31\n", "authors": ["629"]}
{"title": "Exploiting a virtual environment in a real-world application\n", "abstract": " In situated multi-agent systems (situated MASs), agents are explicitly placed in an environment. A situated agent does not not use long-term planning to decide what action sequence should be executed, but selects actions on the basis of its current position, the world it perceives and limited internal state. Situated agents exploit the environment to coordinate their behavior and to reach a common goal. In a recent project, we applied situated MASs to the control of an automated transportation system that uses automatic guided vehicles (AGVs) to transport loads in a warehouse. In contrast to traditional approaches where the AGVs are controlled by a central server, in this project we model the AGVs as agents in a situated MAS, aiming to improve flexibility and openness. Since the physical environment of AGVs is very restricted, it offers little opportunities for agents to use the environment. We introduce a virtual\u00a0\u2026", "num_citations": "31\n", "authors": ["629"]}
{"title": "Efficient analysis of large adaptation spaces in self-adaptive systems using machine learning\n", "abstract": " When a self-adaptive system detects that its adaptation goals may be compromised, it needs to determine how to adapt to ensure its goals. To that end, the system can analyze the possible options for adaptation, i.e., the adaptation space, and pick the best option that achieves the goals. Such analysis can be resource and time consuming, in particular when rigorous analysis methods are applied. Hence, exhaustively analyzing all options may be infeasible for systems with large adaptation spaces. This problem is further complicated as the adaptation options typically include uncertainty parameters that can only be resolved at runtime. In this paper, we present a machine learning approach to tackle this problem. This approach enhances the traditional MAPE-K feedback loop with a learning module that selects subsets of adaptation options from a large adaptation space to support the analyzer with performing\u00a0\u2026", "num_citations": "30\n", "authors": ["629"]}
{"title": "Environments for Multi-Agent Systems II: Second International Workshop, E4MAS 2005, Utrecht, The Netherlands, July 25, 2005, Selected Revised and Invited Papers\n", "abstract": " This book constitutes the thoroughly refereed post-proceedings of the Second International Workshop on Environments for Multiagent Systems, E4MAS 2005, held in Utrecht, The Netherlands, in July 2005, as an associated event of AAMAS 2005. The 16 revised papers presented were carefully reviewed and selected from the lectures given at the workshop completed by a number of invited papers of prominent researchers active in the domain. The papers are organized in topical sections on models, architecture, and design, mediated coordination, as well as applications.", "num_citations": "30\n", "authors": ["629"]}
{"title": "Self-managing internet of things\n", "abstract": " Internet of Things (IoT) are in full expansion. Applications range from factory floors to smart city environments. IoT applications consist of battery powered small computing devices (motes) that communicate wirelessly and interact with the environment through sensors and actuators. A key challenge that IoT engineers face is how to manage such systems that are subject to inherent uncertainties in their operation contexts, such as interferences and dynamic traffic in the network. Often these uncertainties are difficult to predict at development time. In practice, IoT applications are therefore typically over-provisioned at deployment; however, this leads to inefficiency. In this paper, we make a case for IoT applications that manage themselves at runtime to deal with uncertainties. We contribute: (1) a set of concerns that motivate the need for self-management for IoT systems, (2) three initial approaches that illustrate\u00a0\u2026", "num_citations": "29\n", "authors": ["629"]}
{"title": "Environments for situated multi-agent systems: Beyond infrastructure\n", "abstract": " There is a lot of confusion on what the environment of a multi-agent system (MAS) comprises. Sometimes, researchers refer to the environment as the logical entity of a MAS in which the agents and other resources are embedded. Sometimes, the notion of environment is used to refer to the software infrastructure on which the MAS is executed. Sometimes, environment even refers to the underlying hardware infrastructure on which the MAS runs.               Our research focuses on situated MASs, i.e.\u00a0MASs in which agents have an explicit position in the environment. In this paper, we propose a three-layer model for situated MASs that considers agents as well as the environment as first-order abstractions. The aim of this model is to clarify the confusion between the concept of the environment and the infrastructure on which the MAS is deployed. The top layer of the model consists of the MAS application logic, the\u00a0\u2026", "num_citations": "29\n", "authors": ["629"]}
{"title": "Environments for multi-agent systems I\n", "abstract": " It is generally accepted that the environment is an essential compound of multiagent systems (MASs). Yet the environment is typically assigned limited responsibilities, or even neglected entirely, overlooking a rich potential for the paradigm of MASs. Opportunities that environments offer, have mostly been researched in the domain of situated MASs. However, the complex principles behind the concepts and responsibilities of the environment and the interplay between agents and environment are not yet fully clarified. In this paper, we first give an overview of the state-of-the-art on environments in MASs. The survey discusses relevant research tracks on environments that have been explored so far. Each track is illustrated with a number of representative contributions by the research community. Based on this study and the results of our own research, we identify a set of core concerns for environments that can be divided in two classes: concerns related to the structure of the environment, and concerns related to the activity in the environment. To conclude, we list a number of research challenges that, in our opinion, are important for further research on environments for MAS.", "num_citations": "29\n", "authors": ["629"]}
{"title": "An architectural approach to support online updates of software product lines\n", "abstract": " Despite the successes of software product lines (SPL), managing the evolution of a SPL remains difficult and error-prone. Our focus of evolution is on the concrete tasks integrators have to perform to update deployed SPL products, in particular products that require runtime updates with minimal interruption. The complexity of updating a deployed SPL product is caused by multiple interdependent concerns, including variability, traceability, versioning, availability, and correctness. Existing approaches typically focus on particular concerns while making abstraction of others, thus offering only partial solutions. An integrated approach that takes into account the different stakeholder concerns is lacking. In this paper, we present an architectural approach for updating SPL products that supports multiple concerns. The approach comprises of two complementary parts: (1) an update viewpoint that defines the conventions for\u00a0\u2026", "num_citations": "27\n", "authors": ["629"]}
{"title": "Distributed threads in Java\n", "abstract": " In this paper, we study the problems of thread identity that arise with adapting a local Java program for execution in a distributed environment. When using a distributed control flow programming model like Java RMI or OMG CORBA, the programmer should take into account an inherent shift of semantics. We experienced a particular problem with shift of thread semantics when extending a serialization mechanism for JVM threads to a distributed setting. More specific, we encountered the problem of losing logical thread identity when the control crosses system boundaries. We solved this problem by introduced the generic notion of distributed thread identity in Java programming. Propagation of a globally unique, distributed thread identity provides a uniform mechanism by which all the program\u2019s constituent objects involved in a distributed control flow can uniquely refer to that distributed thread as one and the same\u00a0\u2026", "num_citations": "27\n", "authors": ["629"]}
{"title": "Characterizing relations between architectural views\n", "abstract": " It is commonly agreed that an architectural description (AD) consists of multiple views. Each view describes the architecture from the perspective of particular stakeholder concerns. Although views are constructed separately, they are related as they describe the same system.               A thorough study of the literature reveals that research on relations between views is fragmented and that a comprehensive study is hampered by an absence of common terminology. This has become apparent in the discussion on inter-view relational concepts in the revision of IEEE\u00a01471 as ISO/IEC\u00a042010 (Systems and Software Engineering \u2014 Architectural Description).               This paper puts forward a framework that employs a consistent terminology to characterize relations between views. The framework sheds light on the usage, scope and mechanisms for relations, and is illustrated using several representative\u00a0\u2026", "num_citations": "26\n", "authors": ["629"]}
{"title": "Endogenous versus exogenous self-management\n", "abstract": " Self-management is considered as one of the crucial means for software systems to deal with changing demands at runtime. Self-management endows a software systems with the ability to adapt its structure or behavior without human intervention. Two different approaches are put forward for self-management:(1) the system components adapt their structure or behavior to changing requirements and cooperatively realize system adaptation-this approach can be considered as endogenous self-management;(2) the system is adapted through a control loop, ie the system is monitored to maintain an explicit representation of the system and based on a set of high-level objectives, the system structure or its behavior is adapted-this approach can be considered as exogenous self-management.", "num_citations": "26\n", "authors": ["629"]}
{"title": "An Introduction to Self-adaptive Systems: A Contemporary Software Engineering Perspective\n", "abstract": " A concise and practical introduction to the foundations and engineering principles of self-adaptation Though it has recently gained significant momentum, the topic of self-adaptation remains largely under-addressed in academic and technical literature. This book changes that. Using a systematic and holistic approach, An Introduction to Self-adaptive Systems: A Contemporary Software Engineering Perspective provides readers with an accessible set of basic principles, engineering foundations, and applications of self-adaptation in software-intensive systems. It places self-adaptation in the context of techniques like uncertainty management, feedback control, online reasoning, and machine learning while acknowledging the growing consensus in the software engineering community that self-adaptation will be a crucial enabling feature in tackling the challenges of new, emerging, and future systems. The author combines cutting-edge technical research with basic principles and real-world insights to create a practical and strategically effective guide to self-adaptation. He includes features such as: An analysis of the foundational engineering principles and applications of self-adaptation in different domains, including the Internet-of-Things, cloud computing, and cyber-physical systems End-of-chapter exercises at four different levels of complexity and difficulty An accompanying author-hosted website with slides, selected exercises and solutions, models, and code Perfect for researchers, students, teachers, industry leaders, and practitioners in fields that directly or peripherally involve software engineering, as well as those in academia involved in a\u00a0\u2026", "num_citations": "25\n", "authors": ["629"]}
{"title": "Guaranteeing robustness in a mobile learning application using formally verified MAPE loops\n", "abstract": " Mobile learning applications support traditional indoor lectures with outdoor activities using mobile devices. An example scenario is a team of students that use triangulation techniques to learn properties of geometrical figures. In previous work, we developed an agent-based mobile learning application in which students use GPS-enabled phones to calculate distances between them. From practical experience, we learned that the required level of GPS accuracy is not always guaranteed, which undermines the use of the application. In this paper, we explain how we have extended the existing application with a self-adaptation layer, making the system robust to degrading GPS accuracy. The self-adaptive layer is conceived as a set of interacting MAPE loops (Monitor-Analysis-Plan-Execute), distributed over the phones. To guarantee the robustness requirements, we formally specify the self-adaptive behaviors using\u00a0\u2026", "num_citations": "24\n", "authors": ["629"]}
{"title": "The future of software engineering and multi-agent systems\n", "abstract": " In spite of the massive research efforts by the multi-agent system community, the state of the art in multi-agent systems is insufficiently reflected in state of the practice of complex distributed systems. Triggered by this observation, leading researchers and engineers in the field came together at the AAMAS 2008 conference to discuss the future of software engineering and multi-agent systems. Technical and organizational obstacles were identified that hamper industrial adoption of multi-agent systems. Prominent obstacles include poor awareness of industrial needs, disconnection from conventional software engineering, immaturity of technology, and a research bias towards scientific challenges. To address these obstacles several opportunities were identified. Organizational opportunities include, among others, improving the communication with conventional software engineers and industrial clients. On the technical side, several topics were proposed to facilitate industrial adoption of multi-agent systems. Topics such as goal-oriented design, architectural patterns, and validation and verification, can be developed as research areas in the field of multi-agent systems.", "num_citations": "24\n", "authors": ["629"]}
{"title": "Role based model for adaptive Agents\n", "abstract": " This paper presents a model for adaptive agents. The model describes the behavior of an agent as a graph of roles, in short a behavior graph. Links between roles provide conditions that determinate whether the agent can switch roles. The behavior graph is assigned at design time, however adaptive role selection takes place at runtime.Adaptivity is achieved through factors in the links of the behavior graph. A factor models a property of the agent or its perceived environment. When an agent can switch roles via different links, the factors determine the role the agent will switch to. By analyzing the effects of its performed actions the agent is able to adjust the values of specific factors, adapting the selection of roles in line with the changing circumstances. Models for adaptive agents typically describe how an agent dynamically selects a behavior (or action) based on the calculation of a probability value as a function of the observed state for each individual behavior (or action). In contrast, the model we propose aims to dynamically adapt logical relations between different behaviors (called roles here) in order to dynamically form paths of behaviors (ie sequences of roles) that are suitable for the current state.", "num_citations": "24\n", "authors": ["629"]}
{"title": "Synchronous versus asynchronous collaboration in situated multi-agent systems\n", "abstract": " According to the taxonomy for agent activity, proposed by V. Parunak, a collaboration is an interaction between agents of a multi-agent system (MAS) whereby the agents explicitly coordinate their actions before they cooperate. We discuss two sub-types of collaboration in the context of situated MASs, namely asynchronous and synchronous collaboration. After setting up collaboration, the interaction between the agents in an asynchronous collaboration happens indirectly through the environment. Agents direct their actions via the perceived state change of their environment. On the other hand, during a synchronous collaboration agents have to act simultaneously and this requires an additional agreement about which actions should be executed. Although they both fit the characteristics of collaboration, the requirements for their implementation is quite different. Whereas agents in an asynchronous collaboration can\u00a0\u2026", "num_citations": "24\n", "authors": ["629"]}
{"title": "Design for sustainability= runtime adaptation\u222a evolution\n", "abstract": " Continuous change changes everything; it introduces various uncertainties, which may harm the sustainability of software systems. We argue that integrating runtime adaptation and evolution is crucial for the sustainability of software systems. Realising this integration calls for a radical change in the way software is developed and operated. Our position is that we need to Design for Sustainability. To that end, we present:(i) the AdEpS model (Adaptation and Evolution processes for Sustainability) to handle and mitigate uncertainties by means of integrating runtime adaptation and evolution, and (ii) a set of engineering principles to design software systems that facilitate the application of the AdEpS model to build sustainable software.", "num_citations": "23\n", "authors": ["629"]}
{"title": "The agent environment in multi-agent systems: A middleware perspective\n", "abstract": " Interaction is at the core of multi-agent systems. We use agent environment as a general term to denote the medium for agent interaction. Over the last years, the agent environment has been subject of active research. In this paper, we reflect on the role of the agent environment in multi-agent systems from a middleware perspective. Our study yields the following observations:(1) multi-agent system engineers consider distributed middleware (RMI, CORBA, etc.) as the basic platform for developing multi-agent systems,(2) common middleware services (security, persistency, etc.) are only minimally considered in multi-agent systems,(3) domain-specific middleware for multi-agent systems such as communication services and support for stigmergic coordination are typically developed as stand-alone services and as such difficult to compose with other services.", "num_citations": "23\n", "authors": ["629"]}
{"title": "Dyncnet: A protocol for dynamic task assignment in multiagent systems\n", "abstract": " Task assignment in multiagent systems is a complex coordination problem, in particular in systems that are subject to dynamic and changing operating conditions. To enable agents to manage dynamism and change, adaptive task assignment approaches are needed. In this paper, we introduce DynCNET, a protocol for dynamic task assignment that extends standard contract net (CNET). DynCNET allows the agents involved in the protocol to switch the assignment of tasks dynamically. We use an industrial automated transportation system as illustration and present results obtained from a real-world test setting that compare DynCNET with standard CNET and afield-based approach for task assignment.", "num_citations": "23\n", "authors": ["629"]}
{"title": "Regional synchronization for simultaneous actions in situated multi-agent systems\n", "abstract": " Agents of a multi-agent system (MAS) must synchronize whenever they want to perform simultaneous actions. In situated MASs, typically, the control over such synchronization is centralized, i.e. one synchronizer has the supervision on all agents of the MAS. As a consequence, all agents are forced to act at a global pace and that does not fit with autonomy of agents. Besides, global synchronization implies centralized control, in general an undesirable property of MASs. In this paper we present an algorithm that allows agents to synchronize with other agents within their perceptual range. The result of the algorithm is the formation of independent groups of synchronized agents. The composition of these groups depends on the locality of the agents and dynamically changes when agents enter or leave each others perceptual range. Since in this approach agents are only synchronized with colleagues in their\u00a0\u2026", "num_citations": "22\n", "authors": ["629"]}
{"title": "Handling new and changing requirements with guarantees in self-adaptive systems using simca\n", "abstract": " Self-adaptation provides a principled way to deal with change during operation. As more systems with strict goals require self-adaptation, the need for guarantees in self-adaptive systems is becoming a high-priority concern. Designing adaptive software using principles from control theory has been identified as one of the approaches to provide guarantees. However, current solutions can only handle pre-specified requirements either in the form of setpoint values (S-reqs) or values to be optimized (O-reqs). This paper presents SimCA* that makes two contributions to control-based self-adaptation: (a) it allows the user to specify a third type of requirement that keeps a value above/below a threshold (T-reqs), and (b) it can deal with requirement sets that change at runtime (i.e., requirements can be adjusted, activated, and deactivated on the fly). SimCA* offers robustness to disturbances and provides adaptation\u00a0\u2026", "num_citations": "21\n", "authors": ["629"]}
{"title": "SimCA vs ActivFORMS: comparing control-and architecture-based adaptation on the TAS exemplar\n", "abstract": " Today customers require software systems to provide particular levels of qualities, while operating under dynamically changing conditions. These requirements can be met with different self-adaptation approaches. Recently, we developed two approaches that are different in nature-control theory-based SimCA and architecture-based ActivFORMS-to endow software systems with self-adaptation, providing guarantees on desired behavior. However, it is unclear which of the two approaches should be used in different adaptation scenarios and how effective they are in comparison to each other. In this paper, we apply SimCA and ActivFORMS to the Tele Assistance System (TAS) exemplar and compare obtained results, demonstrating the difference in achieved qualities and formal guarantees.", "num_citations": "20\n", "authors": ["629"]}
{"title": "Middleware for protocol-based coordination in dynamic networks\n", "abstract": " Pervasive and ad hoc computing applications are frequently deployed in dynamic networks. Due to mobility of the computing nodes, their unreliability, or a limited communication range, at any time a node may enter or leave an interaction between a group of application components. Middleware approaches have been proposed to deal with these dynamics, by supporting the dissemination (or gathering) of information in dynamic networks. In our experience however, applications frequently need to execute a complete protocol to coordinate. Existing middleware can then be used as a discovery mechanism, but offers no support for handling the protocol itself. This paper presents a middleware model that enables an easier implementation of distributed protocols that need to take into account the continuously changing context in the dynamic network. It uses roles as a first order abstraction, handles the distributed\u00a0\u2026", "num_citations": "20\n", "authors": ["629"]}
{"title": "SimCA* A Control-theoretic Approach to Handle Uncertainty in Self-adaptive Systems with Guarantees\n", "abstract": " Self-adaptation provides a principled way to deal with software systems\u2019 uncertainty during operation. Examples of such uncertainties are disturbances in the environment, variations in sensor readings, and changes in user requirements. As more systems with strict goals require self-adaptation, the need for formal guarantees in self-adaptive systems is becoming a high-priority concern. Designing self-adaptive software using principles from control theory has been identified as one of the approaches to provide guarantees. In general, self-adaptation covers a wide range of approaches to maintain system requirements under uncertainty, ranging from dynamic adaptation of system parameters to runtime architectural reconfiguration. Existing control-theoretic approaches have mainly focused on handling requirements in the form of setpoint values or as quantities to be optimized. Furthermore, existing research primarily\u00a0\u2026", "num_citations": "19\n", "authors": ["629"]}
{"title": "From reactive robotics to situated multiagent systems\n", "abstract": " Historically, the idea of situated multiagent systems\u2014in which the environment gets a prominent role\u2014originates from the domain of reactive robotics. In this paper, we give a historical perspective of research on agency that devotes pertinent attention to the environment, and show how the role of the environment evolved along with subsequent evolutions of agent systems. Today, it is quite obvious that the environment offers opportunities and challenges for all types of agency. We discuss recent research in this area, which advocates that the environment is not only an essential part of every multiagent system, but also provides an exploitable design abstraction to build multiagent systems. The notion of environment exceeds specific types of agency, and as such offers opportunities for synergetic research in the interest of multiagent systems in general.", "num_citations": "19\n", "authors": ["629"]}
{"title": "A pattern language for multi-agent systems\n", "abstract": " Developing architectural support for self-adaptive systems, i.e. systems that are able to autonomously adapt to changes in their operating conditions, is a key challenge for software engineers. Multi-agent systems are a class of decentralized systems that are known for realizing qualities such as adaptability and scalability. In this paper, we present a pattern language for multi-agent systems. The pattern language distills domain-specific architectural knowledge derived from extensive experiences with developing various multi-agent systems. The pattern language, consisting of the five interrelated patterns, supports architects with designing software architectures for a family of self-adaptive systems. We illustrate the patterns for a case study in the domain of automated transportation systems.", "num_citations": "18\n", "authors": ["629"]}
{"title": "Maintenance 4.0 framework using self: Adaptive software architecture\n", "abstract": " With the recent advances of manufacturing technologies, referred to as Industry 4.0, maintenance approaches have to be developed to fulfill the new de-mands. The technological complexity associated to Industry 4.0 makes designing maintenance solutions particularly challenging. This paper proposes a novel maintenance framework leveraging principles from self-adaptation and software architecture. The framework was tested in an operational scenario where a bearing condition in an electrical motor needs to be managed, the results showed a proper operation. As a conclusion, the proposed framework could be used to develop maintenance systems for Industry 4.0.", "num_citations": "17\n", "authors": ["629"]}
{"title": "Agents are not part of the problem, agents can solve the problem\n", "abstract": " In this paper, we discuss the position of multi-agent systems (MASs) in the software development process. Basically, MASs provide an approach for solving software problems by decomposing a system into a number of autonomous entities, embedded in an environment, which cooperate in order to achieve the functional and non-functional requirements of the system. As such, MASs are in essence a family of software architectures and hence enter the software development picture in the design phase.Coverage and abstraction are identified as two important dimensions of the architectural design space for MASs. Based on this, we outline a good practice for architectural design with MAS. Given this perspective, we conclude with a critical reflection on state-of-the-art agent-oriented methodologies.", "num_citations": "17\n", "authors": ["629"]}
{"title": "A formal model for self-adaptive and self-healing organizations\n", "abstract": " Multi-agent systems typically consist of autonomous entities, capable of adapting their behavior and interaction patterns in dynamic environments, making them an interesting approach for modeling self-adaptive systems. The interactions among agents, a key challenge in engineering multi-agent systems, are often structured and managed by means of organizations. In previous work we have built a prototype of an organization middleware, which encapsulates the management of dynamic organizations as a reusable service and offers organizations as first-class programming abstractions to application developers. To develop a mature middleware, we face two key challenges: realizing the integration of the middleware with the rest of the system in a disciplined way and assuring properties, such as self-adaptivity and self- healing, of services offered by the middleware. This paper presents a formal specification of an\u00a0\u2026", "num_citations": "16\n", "authors": ["629"]}
{"title": "Environments for Multi-Agent Systems III: Third International Workshop, E4MAS 2006, Hakodate, Japan, May 8, 2006, Selected Revised and Invited Papers\n", "abstract": " This book constitutes the thoroughly refereed post-proceedings of the Third International Workshop on Environments for Multiagent Systems, E4MAS 2006, held in Hakodate, Japan in May 2006. The 15 revised papers in this volume are organized in topical sections on models, architecture, and design, mediated interaction and stigmery, governing environment, and applications.", "num_citations": "16\n", "authors": ["629"]}
{"title": "Empirical research in software architecture: How far have we come?\n", "abstract": " Context: Empirical research helps gain well-founded insights about phenomena. Furthermore, empirical research creates evidence for the validity of research results. Objective: We aim at assessing the state-of-practice of empirical research in software architecture. Method: We conducted a comprehensive survey based on the systematic mapping method. We included all full technical research papers published at major software architecture conferences between 1999 and 2015. Results: 17% of papers report empirical work. The number of empirical studies in software architecture has started to increase in 2005. Looking at the number of papers, empirical studies are about equally frequently used to a) evaluate newly proposed approaches and b) to explore and describe phenomena to better understand software architecture practice. Case studies and experiments are the most frequently used empirical methods\u00a0\u2026", "num_citations": "15\n", "authors": ["629"]}
{"title": "Delegate MAS patterns for large-scale distributed coordination and control applications\n", "abstract": " The patterns in this document are particularly intended for researchers as well as practitioners who study and develop large-scale decentralized systems-including decentralized control systems, internet applications. The reader should be familiar with typical issues and challenges in developing distributed systems, and be acquainted with elementary terminology of agents and multi-agent systems (MAS,[Wooldridge 2009]), and the discrete optimization metaheuristic called Ant Colony Optimization [Dorigo and Di Caro 1999].", "num_citations": "15\n", "authors": ["629"]}
{"title": "Context-driven dynamic organizations applied to coordinated monitoring of traffic jams\n", "abstract": " Organizations are at the heart of multi-agent systems. To deal with the ongoing dynamics and changes in the system, organizations have to adapt. Typically, agents are responsible to deal with the complexity of organization dynamics. In this paper, we present an approach for context-driven dynamic organizations in which the agent environment takes the burden of managing organization dynamics. Driven by the context, the agent environment manages the evolution of organizations and actively advertises roles to the agents, supporting the necessary collaborations between agents needed in the current context. We introduce a conceptual model for context-driven dynamic organizations and present a software architecture that supports the model in a distributed setting. The proposed approach separates the management of dynamic evolution of organizations from the actual functionality provided by the agents playing roles in the organizations. Separating these concerns makes it easier to understand, design, and manage organizations in multi-agent systems. We show how we have applied context-driven dynamic organizations in a concrete case of monitoring traffic jams. In this case, camera agents associated with traffic monitoring cameras collaborate in organizations. Depending on the context, camera agents play different roles, with responsibilities ranging from simple measurement to data aggregation. When a traffic jam covers the viewing range of multiple cameras, organizations are dynamically merged, assuring cameras detecting the same traffic jam can collaborate. Vice versa, when a traffic jam dissolves, the organization is dynamically\u00a0\u2026", "num_citations": "15\n", "authors": ["629"]}
{"title": "Engineering self-adaptive software systems\u2013An organized tour\n", "abstract": " Engineering software that is subject to uncertainties that are difficult to anticipate before deployment is challenging. Self-adaptation extends a software system with an external feedback loop system that monitors the system and adapts its configuration or architecture to ensure that its qualities are met under uncertain operating conditions. In this tutorial, we provide a particular perspective on the evolution of the field of self-adaptation in six waves. These waves put complementary aspects of engineering self-adaptive systems in focus that synergetically have contributed to the current body of knowledge in the field.", "num_citations": "14\n", "authors": ["629"]}
{"title": "Cost-Benefit Analysis at Runtime for Self-adaptive Systems Applied to an Internet of Things Application.\n", "abstract": " Ensuring the qualities of modern software systems, such as the Internet of Things, is challenging due to various uncertainties, such as dynamics in availability of resources or changes in the environment. Self-adaptation is an established approach to deal with such uncertainties. Self-adaptation equips a software system with a feedback loop that tracks changes and adapts the system accordingly to ensure its quality goals. Current research in this area has primarily focussed on the benefits that self-adaptation can offer. However, realising adaption can also incur costs. Ignoring these costs may invalidate the expected benefits. We start with demonstrating that the costs for adaptation can be significant. To that end, we apply a state-of-the-art approach for self-adaptation to an Internet of Things (IoT) application. We then present CB@ R (Cost-Benefit analysis@ Runtime), a novel model-based approach for runtime decision-making in self-adaptive systems. CB@ R is inspired by the Cost-Benefit Analysis Method (CBAM), which is an established approach for analysing costs and benefits of architectural decisions. We evaluate CB@ R for a real world deployed IoT application and compare it with the conservative approach applied in practice and a state-of-the-art self-adaptation approach.", "num_citations": "14\n", "authors": ["629"]}
{"title": "Managing agent interactions with context-driven dynamic organizations\n", "abstract": " Organizations are at the heart of multi-agent systems. To deal with the ongoing dynamics and changes in the system, organizations have to adapt. Typically, agents are responsible to deal with the complexity of organization dynamics. In this paper, we present an approach for context-driven dynamic organizations in which the agent environment takes the burden of managing organization dynamics. Driven by the context, the agent environment manages the evolution of organizations and actively advertises roles to the agents, supporting the necessary collaborations between agents needed in the current context. We introduce a conceptual model for context-driven dynamic organizations and present a software architecture that supports the model in a distributed setting. The proposed approach separates the management of dynamic evolution of organizations from the actual functionality provided by the\u00a0\u2026", "num_citations": "14\n", "authors": ["629"]}
{"title": "A colored petri net for regional synchronization in situated multiagent systems\n", "abstract": " Interaction is central to multi-agent systems. In this paper we look at agents that interact by performing simultaneous actions in their environment. Simultaneous actions are interfering actions that are executed together and that produce a compound result. To act simultaneously agents need to synchronize their actions. Synchronization of actions is typically established by one centralized synchronizer that ensures for each action cycle that the actions of all agents are treated simultaneously. Centralized synchronization is simple, however, its drawbacks are centralized control and poor scalability. We present a Colored Petri Net (CPN) for regional synchronization. With regional synchronization agents synchronize with each other locally, resulting in independent groups of synchronized agents. Regional synchronization is established in a distributed way and ensures that only agents that are able to perform simultaneous actions are synchronized. The algorithm for regional synchronization, that is based on a two-phase commit protocol combined with a logical clock, is not trivial. For a clear explanation of the algorithm, we discuss the CPN for regional synchronization at great length. We also formally prove that for one agent the various steps of the algorithm are executed correctly, and we prove the correctness of the algorithm for two agents. Finally we discuss simulation results of the algorithm for four agents.", "num_citations": "14\n", "authors": ["629"]}
{"title": "ActivFORMS: A runtime environment for architecture-based adaptation with guarantees\n", "abstract": " Modern software systems are exposed to various types of uncertainties, such as dynamics in the available resources that are difficult to predict and goals that may change during operation. Self-adaptation equips a software system with a feedback loop that collects additional knowledge at runtime, monitors the system and adapts it when necessary to maintain its quality goals, regardless of uncertainties. One challenging problem of self-adaptation is to provide guarantees for the goals that are subject of adaptation. In this paper, we present the ActivFORMS runtime environment to realise self-adaptation with guarantees. With ActivFORMS designers model and verify a feedback loop. The verified models can directly be deployed on top of a virtual machine that executes the models to realise adaption. The approach avoids coding of the models, which is an error-prone task. The runtime environment visualises the\u00a0\u2026", "num_citations": "13\n", "authors": ["629"]}
{"title": "Experiences with Theme/UML for architectural design of a multiagent system\n", "abstract": " In a recent R&D project, our research group developed an industrial AGV transportation system using a multiagent system (MAS). The software architecture of this system is modeled using several architectural views. In this paper, we study an alternative way of structuring of the architectural description using Theme/UML. Theme/UML is an aspect-oriented design approach that provides support for advanced separation of concerns. Our goal is twofold.(1) We structure the architectural description based on important architectural concerns (such as coordination and distribution), instead of the current structure based on different viewtypes (module, component, deployment). The goal is to investigate the advantages and trade-offs of separating concerns in architectural design of MASs.(2) Currently, Theme/UML provides only support for detailed design. We aim to evaluate whether Theme/UML can be applied to architectural design. The results of our experience are promising. The advantage of separating architectural concerns is that the resulting architectural description (1) is better aligned with the architectural concerns, and (2) facilitates the investigation of alternatives for those concerns. We illustrate this by changing the distribution schema of the AGV transportation system. A trade-off is that describing the concerns separately makes it more difficult to get an overall view on the system. Finally, the experiment shows that Theme/UML is not ready for architectural design. To improve support for architectural design of MASs, we propose several extensions to Theme/UML.", "num_citations": "13\n", "authors": ["629"]}
{"title": "Architectural design of a distributed application with autonomic quality requirements\n", "abstract": " An autonomic system is essentially characterized by quality requirements that specify that the system should be able to adapt itself (configure optimize, heal, etc.) under varying circumstances and situations. These quality requirements call for an architecture centric software engineering approach. In this paper, we discuss and illustrate the architectural design of a complex real-world distributed application with autonomic quality requirements. In particular, we present an architecture with autonomous entities (agents) for managing warehouse logistics. We illustrate how the subsequent architectural decisions are guided by a reference architecture for situated multi-agent systems on the one hand, and by functional and quality requirements of the application on the other hand.", "num_citations": "13\n", "authors": ["629"]}
{"title": "Blended Modelling-What, why and how\n", "abstract": " Empirical studies indicate that user experience can significantly be improved in model-driven engineering. Blended modelling aims at mitigating this by enabling users to interact with a single model through different notations. Blended modelling contributes to various modelling qualities, including comprehensibility, analysability, and acceptability. In this paper, we define the notion of blended modelling and propose a set of dimensions that characterise blended modelling. The dimensions are grouped in two classes: user-oriented dimensions and realisation-oriented dimensions. Each dimension describes a facet that is relevant to blended modelling together with its domain (i.e., the range of values for that dimension). The dimensions offer a basic vocabulary to support tool developers with making well-informed design decisions as well as users to select appropriate tools and configure them according to the needs\u00a0\u2026", "num_citations": "12\n", "authors": ["629"]}
{"title": "Towards a solution for change impact analysis of software product line products\n", "abstract": " Despite the fact that some practitioners and researchers report successful stories on Software Product Lines (SPL) adaptation, the evolution of SPL remains challenging. In our research we study a specific aspect of SPL adaptation, namely on updating of deployed products. Our particular focus is on the correct execution of updates and minimal interruption of services during the updates. The update process has two stages. First, the products affected by the evolution must be identified. We call this stage SPL-wide change impact analysis. In the second stage, each of the affected products has to be updated. In our previous work we have addressed the second stage of the update process. In this paper we report on our early results of the first stage: change impact analysis. We discuss how existing variability models can be employed to support automated identification of the products that require an update. The\u00a0\u2026", "num_citations": "12\n", "authors": ["629"]}
{"title": "Model for situated multi-agent systems with regional synchronization.\n", "abstract": " In this paper we present a generic model for situated multi-agent systems (MAS). Situated agents live and act in the present: they perform situated actions, ie actions selected on the basis of their position, the state of the world they perceive and limited internal state. The model we discuss is based on the model of influences and reactions to influences developed by J. Ferber and JP M\u00fcller. This model separates what agents do and the reaction of the environment upon this, solving the fundamental problem of handling simultaneous actions. However, the model is limited to synchronous descriptions of MAS evolution. Forcing all agents of the MAS to act in lock step does not fit with autonomy of agents and scalability. Besides, global synchronization implies centralized control, in general an undesirable property of MAS. The model we present is asynchronous. It does not impose all agents to act at one global pace, but instead agents themselves decide when to perform their next actions. The model supports simultaneous actions through\u2019regional synchronization\u2019. With regional synchronization agents form synchronized groups on the basis of their actual locality. Different groups act asynchronously, while agents act synchronously in their group. The result is a model that does not suffer from the drawbacks of global synchronization while it preserves the properties for handling simultaneous actions.", "num_citations": "12\n", "authors": ["629"]}
{"title": "A qos-aware adaptive mobility handling approach for lora-based iot systems\n", "abstract": " Internet-of-Things (IoT) is an emergent paradigm that is increasingly applied in smart cities. A popular technology used in IoT is LoRa that supports long-range wireless communication. In this research, we study LoRa-based IoT systems with battery-powered end nodes that collect and communicate data to a gateway for further processing. Existing approaches in such IoT systems usually only consider stationary end nodes. We focus on systems with mobile end nodes, paving the way to new applications such as target tracking. Key Quality of Service (QoS) requirements for these settings are the reliability of the communication and energy consumption. With mobile end nodes, ensuring these QoS is challenging as the system is subject to continuous changes. In this paper, we investigate how the settings of a mobile end node impact key performance indicators for reliability and energy consumption. Based on insights\u00a0\u2026", "num_citations": "11\n", "authors": ["629"]}
{"title": "A model interpreter for timed automata\n", "abstract": " In the model-centric approach to model-driven development, the models used are sufficiently detailed to be executed. Being able to execute the model directly, without any intermediate model-to-code translation, has a number of advantages. The model is always up-to-date and runtime updates of the model are possible. This paper presents a model interpreter for timed automata, a formalism often used for modeling and verification of real-time systems. The model interpreter supports real-time system features like simultaneous execution, system wide signals, a ticking clock, and time constraints. Many existing formal representations can be verified, and many existing DSMLs can be executed. It is the combination of being both verifiable and executable that makes our approach rather unique.", "num_citations": "11\n", "authors": ["629"]}
{"title": "Codifying architecture knowledge to support online evolution of software product lines\n", "abstract": " A company's architecture knowledge is often personalized across specific people that share experience and knowledge in the field. However, this knowledge may be important for other stakeholders. Omitting the codification of the architecture knowledge may result in ad-hoc practices, which is particularly relevant for software evolution. In a collaboration with Egemin, an industrial manufacturer of logistic systems, we faced the problem with a lack of codified architecture knowledge in the context of the evolution of a software product line (SPL). In particular, maintainers lack the architecture knowledge that is needed to perform the evolution tasks of deployed products correctly and efficiently. Ad-hoc updates increase costs and harm the company's reputation. To address this problem, we developed an automated approach for evolving deployed systems of a SPL. Central in this approach are (1) a meta-model that\u00a0\u2026", "num_citations": "11\n", "authors": ["629"]}
{"title": "Multiagent Systems and Software Architecture.\n", "abstract": " The trend in agent-oriented software engineering is to consider multiagent systems (MASs) as a radically new way of engineering software. This position isolates agent-oriented software engineering from mainstream software engineering and could be one important reason why MASs are not widely adopted in industry yet. In this paper, we present another perspective on software engineering with MASs. We put forward MASs as software architecture. We give an overview of a reference architecture for situated MAS. This reference architecture extracts and generalizes common functions and structures from various applications we have studied and built. The reference architecture provides a blueprint for architectural design of MAS applications that share the come base of the systems it is derived from. Considering MASs essentially as software architecture paves the way to integration with mainstream software engineering.", "num_citations": "11\n", "authors": ["629"]}
{"title": "Integrating free-flow architectures with role models based on statecharts\n", "abstract": " Engineering non-trivial open multi-agent systems is a challenging task. Our research focusses on situated multi-agent systems, i.e.\u00a0systems in which agents are explicitly placed in a context \u2013 an environment \u2013 which agents can perceive and in which they can act. Two concerns are essential in developing such open systems. First, the agents must be adaptive in order to exhibit suitable behavior in changing circumstances of the system: new agents may join the system, others may leave, the environment may change, e.g.\u00a0its topology or its characteristics such as throughput and visibility. A well-known family of agent architectures for adaptive behavior are free-flow architectures. However, building a free-flow architecture based on an analysis of the problem domain is a quasi-impossible job for non-trivial agents. Second, multi-agent systems developers as software engineers require suitable abstractions for\u00a0\u2026", "num_citations": "11\n", "authors": ["629"]}
{"title": "Towards adaptive role selection for behavior-based agents\n", "abstract": " This paper presents a model for adaptive agents. The model describes the behavior of an agent as a graph of roles, in short a behavior graph. Links between roles provide conditions that determine whether the agent can switch roles. The behavior graph is assigned at design time, however adaptive role selection takes place at runtime. Adaptivity is achieved through factors in the links of the behavior graph. A factor models a property of the agent or its perceived environment. When an agent can switch roles via different links, the factors determine the role the agent will switch to. By analyzing the effects of its performed actions the agent is able to adjust the value of specific factors, adapting the selection of roles in line with the changing circumstances. Models for adaptive agents typically describe how an agent dynamically selects a behavior (or action) based on the calculation of a probability value as a\u00a0\u2026", "num_citations": "11\n", "authors": ["629"]}
{"title": "Towards time management adaptability in multi-agent systems\n", "abstract": " So far, the main focus of research on adaptability in multi-agent systems (MASs) has been on the agents\u2019 behavior, for example on developing new learning techniques and more flexible action selection mechanisms. In this paper, we introduce a different type of adaptability in MASs, called time management adaptability. Time management adaptability focuses on adaptability in MASs with respect to execution control. First, time management adaptability allows a MAS to be adaptive with respect to its execution platform, anticipating arbitrary and varying timing delays which can violate correctness. Second, time management adaptability allows the execution policy of a MAS to be customized at will to suit the needs of a particular application. We discuss the essential parts of time management adaptability: (1) we employ time models as a means to explicitly capture the execution policy derived from the\u00a0\u2026", "num_citations": "11\n", "authors": ["629"]}
{"title": "Decentralized allocation of tasks with delayed commencement\n", "abstract": " In this paper we propose an approach for flexible and decentralized task allocation based on a negotiation protocol and applicable in case of delayed commencement of tasks. Delayed task commencement arises when an agent has to make some effort in order to start the task, eg a robot first has to move towards the starting position of its task of moving a packet before the task can be performed. Essentially, our approach consists of a continuous negotiation protocol where the situation and the allocation of tasks is continuously reconsidered until the task is actually started. The approach is described within the context of an industrial automatic guided vehicle system to demonstrate the immediate industrial applicability.", "num_citations": "11\n", "authors": ["629"]}
{"title": "Applying deep learning to reduce large adaptation spaces of self-adaptive systems with multiple types of goals\n", "abstract": " When a self-adaptive system needs to adapt, it has to analyze the possible options for adaptation, ie, the adaptation space. For systems with large adaptation spaces, this analysis process can be resource-and time-consuming. One approach to tackle this problem is using machine learning techniques to reduce the adaptation space to only the relevant adaptation options. However, existing approaches only handle threshold goals, while practical systems often need to address also optimization goals. To tackle this limitation, we propose a two-stage learning approach called Deep Learning for Adaptation Space Reduction (DLASeR). DLASeR applies a deep learner first to reduce the adaptation space for the threshold goals and then ranks these options for the optimization goal. A benefit of deep learning is that it does not require feature engineering. Results on two instances of the DeltaIoT artifact (with different sizes\u00a0\u2026", "num_citations": "10\n", "authors": ["629"]}
{"title": "Designing roles for situated agents\n", "abstract": " Engineering non-trivial open multi-agent systems is a challenging task. Our research focusses on situated multi-agent systems, ie systems in which agents are explicitly placed in an environment which agents can perceive and in which they can act. Situated agents do not use long-term planning to decide what action sequence should be executed, but select actions based on the locally perceived state of the world and limited internal state. To cope with change and dynamism of the system, situated agents must be able to adapt their behavior. A well-known family of agent architectures for adaptive behavior are free-flow architectures. However, building a free-flow architecture based on an analysis of the problem domain is a quasi-impossible job for non-trivial agents. To tackle the complexity of designing adaptive agent behavior based on a free-flow architecture, suitable abstractions are needed to describe and structure the agent behavior. The abstraction of a role is obviously essential in this respect. A modeling language is needed as well to model the behavior of the agents. We propose a statechart modeling language to support the design of roles for situated agents. In this paper we describe a design process for adaptive agent behavior as part of a multi-agent oriented methodology. The design process integrates the abstraction of a role with a free-flow architecture. Starting from the results of analysis of the problem domain, the designer incrementally refines the model of the agent behavior. The resulting class diagram serves as a basis for implementation. We illustrate the subsequent design steps with a case study on controlling a collection of\u00a0\u2026", "num_citations": "10\n", "authors": ["629"]}
{"title": "Pulverization in cyber-physical systems: engineering the self-organizing logic separated from deployment\n", "abstract": " Emerging cyber-physical systems, such as robot swarms, crowds of augmented people, and smart cities, require well-crafted self-organizing behavior to properly deal with dynamic environments and pervasive disturbances. However, the infrastructures providing networking and computing services to support these systems are becoming increasingly complex, layered and heterogeneous\u2014consider the case of the edge\u2013fog\u2013cloud interplay. This typically hinders the application of self-organizing mechanisms and patterns, which are often designed to work on flat networks. To promote reuse of behavior and flexibility in infrastructure exploitation, we argue that self-organizing logic should be largely independent of the specific application deployment. We show that this separation of concerns can be achieved through a proposed \u201cpulverization approach\u201d: the global system behavior of application services gets broken into smaller computational pieces that are continuously executed across the available hosts. This model can then be instantiated in the aggregate computing framework, whereby self-organizing behavior is specified compositionally. We showcase how the proposed approach enables expressing the application logic of a self-organizing cyber-physical system in a deployment-independent fashion, and simulate its deployment on multiple heterogeneous infrastructures that include cloud, edge, and LoRaWAN network elements. View Full-Text", "num_citations": "9\n", "authors": ["629"]}
{"title": "ActivFORMS: A model-based approach to engineer self-adaptive systems\n", "abstract": " Handling change is an increasingly important challenge for software engineers. Our focus is on changes caused by uncertainties in the operating conditions of a system, such as changes in the availability of resources in a highly dynamic environment. To deal with such uncertainties, an external feedback loop system can be added to the system that collects additional data during operation to resolve the uncertainties and adapt the system to achieve particular quality requirements (i.e., adaptation goals); this approach is commonly referred to as self-adaptation. To ensure that the system complies with the adaptation goals, recent research suggests the use of formal techniques at runtime. Existing approaches have three shortcomings that limit their practical applicability: (i) they ignore correctness of the behavior of the feedback loop, (ii) they apply exhaustive verification at runtime to select adaptation options to realize the adaptation goals, which is very resource demanding, and (iii) they provide limited or no support for changing adaptation goals at runtime. To tackle these shortcomings, we present ActivFORMS (Active FORmal Models for Self-adaptation). ActivFORMS: (i) provides guarantees for the correct behavior of the feedback loop with respect to a set of correctness properties at design time and preserves the guarantees at runtime by directly executing the verified models of the feedback loop, (ii) guides the adaptation of the system by selecting adaptation options that realize the adaptation goals in an efficient manner using statistical model checking at runtime, and (iii) offers basic support for changing adaptation goals and updating verified\u00a0\u2026", "num_citations": "9\n", "authors": ["629"]}
{"title": "DingNet: a self-adaptive internet-of-things exemplar\n", "abstract": " Recent efforts have shown that research on self-adaptive systems can benefit from exemplars to evaluate and compare new methods, techniques and tools. One highly relevant application domain for self-adaptation is the Internet-of-Things (IoT). While some initial exemplars have been proposed for IoT, these exemplars are limited in scope to support research in realistic IoT domains, such as smart cities. To address this limitation, we introduce the DingNet exemplar, a reference implementation for research on self-adaptation in the domain of IoT. DingNet offers a simulator that maps directly to a physical IoT system that is deployed in the area of Leuven, Belgium. DingNet models a set of geographically distributed gateways, which are connected to a user application that is deployed at a front-end server. The gateways can interact over a LoRaWAN network with local stationary and mobile motes that can be equipped\u00a0\u2026", "num_citations": "9\n", "authors": ["629"]}
{"title": "Self-adaptation of software using automatically generated control-theoretical solutions\n", "abstract": " Control theory has contributed a set of foundational techniques to handle \u201cchange\u201d at runtime in software applications. These techniques however have fundamental limitations as well: (i) they require the development and understanding of mathematical models; (ii) synthesizing solutions is often done on a per-problem basis, discouraging flexibility and generality. Software engineering, as a discipline, has always aimed at finding reusable and modular solutions. The combination of the desire to apply formally grounded control-theoretical principles and reuse existing solutions has motivated research on the topic of automatically generated control solutions. This research aims at designing control strategies in an automated way from data that qualifies the given problem at hand. This chapter provides an overview of the research topic of automatically generated control-theoretical solutions, explaining the key\u00a0\u2026", "num_citations": "9\n", "authors": ["629"]}
{"title": "Composition of architectural models: Empirical analysis and language support\n", "abstract": " Managing the architectural description (AD) of a complex software system and maintaining consistency among the different models is a demanding task. To understand the underlying problems, we analyse several non-trivial software architectures. The empirical study shows that a substantial amount of information of ADs is repeated, mainly by integrating information of different models in new models. Closer examination reveals that the absence of rigorously specified dependencies among models and the lack of support for automated composition of models are primary causes of management and consistency problems in software architecture. To tackle these problems, we introduce an approach in which compositions of models, together with relations among models, are explicitly supported in the ADL. We introduce these concepts formally and discuss a proof-of-concept instantiation of composition in xADL and its\u00a0\u2026", "num_citations": "9\n", "authors": ["629"]}
{"title": "DynCNET: A protocol for flexible transport assignment in AGV transportation systems\n", "abstract": " In this work, the experiences with the proposed communication protocol DynCNET are reported. The idea of the communication protocol is based on the different states and actions an agent has to accomplish during his tasks. All the states are in a scheme: the statemachine. First, using XML, the statemachines are interpreted by the program. Second, the AGV agents and Transport agents are constructed with their own statemachine and integrated in the simulator. Finally the behaviour of the agents is implemented. The result is a standalone program that simulates the behaviour of AGV agents and Transport agents in a simulated environment. Several tests are conducted with the DynCNET protocol. The results of the tests are compared with the CNET protocol and the Field-based approach. The DynCNET protocol outperforms CNET on all performance measures. The cost of this increase in efficiency is a doubling of the required bandwidth. Contrary to the expectations, DynCNET is in general not able to outperform the Field-based approach. At best, DynCNET is able to equal the performance of Field-based transport assignment. With respect to exibility, DynCNET and the Field-based approach are of the same quality. A statistical analysis has been performed. This shows, with a significance of 95%, that the results are statistically significant and that the influence of time can be ruled out. The tests show that DynCNET is able to assign transports more flexible and that the efficiency of transport assignment is increased. A great advantage of the DynCNET protocol is the explicitness of the protocol. This leads to better understanding of the overall\u00a0\u2026", "num_citations": "9\n", "authors": ["629"]}
{"title": "Applying the Architecture Tradeoff Analysis Method (ATAM) to an industrial multi-agent system application\n", "abstract": " This technical report contains the documents used in the course of applying the Architectural Tradeoff Analysis Method (ATAM) to a real world case of Automatic Guided Vehicle (AGV) control, during the EMC2 project. The EMC2 project is a cooperation between KU Leuven-DistriNet and Egemin NV, a manufacturer of AGVs. One of the goals of the project is to propose a decentralized architecture for the control of AGVs, giving them more autonomy than in the current centralized architecture. The decentralized architecture is described thoroughly in this document. As a milestone in the EMC2 project, a one-day ATAM workshop with participation from all stakeholders and architects was held. The goal of the workshop was to discuss the proposed architecture based on the functional and quality attributes. The experiences obtained from the ATAM were then used by the architects to guide their work. The goal of this report is to summarize the application of the ATAM in the AGV case. The ATAM workshop was held in June 16th, 2005. This report contains the presentations given that day, the architectural document that was used (describing the requirements, the specific project chosen, and the software architecture), as well as our experiences with the ATAM, and work that was done in response to the ATAM workshop.", "num_citations": "9\n", "authors": ["629"]}
{"title": "Assuring system goals under uncertainty with active formal models of self-adaptation\n", "abstract": " Designing software systems with uncertainties, such as incomplete knowledge about changing system goals, is challenging. One approach to handle uncertainties is self-adaptation, where a system consists of a managed system and a managing system that realizes a feedback loop. The promise of self-adaptation is to enable a system to adapt itself realizing the system goals, regarding uncertainties. To realize this promise it is critical to provide assurances for the self-adaptive behaviours. Several approaches have been proposed that exploit formal methods to provide these assurances. However, an integrated approach that combines:(1) seamless integration of offline and online verification (to deal with inherent limitations of verification), with (2) support for runtime evolution of the system (to deal with new or changing goals) is lacking. In this paper, we outline a new approach named Active FORmal Models of Self\u00a0\u2026", "num_citations": "8\n", "authors": ["629"]}
{"title": "A self-adaptive software system to support elderly care\n", "abstract": " Providing social care to elderly people poses increasing challenges to the society. In this research, we focus on the challenges of night care services provided by welfare helpers to elderly people living in their own houses. We study a self-adaptive software system that exploits smart home technology and provides innovative services to the stakeholders by collecting data at the homes of the elderly people and providing welfare helpers with the information they need to act. Self-adaptation enables the system to configure itself when new technology or services are provided, and adapt to the context of use. To guarantee sustainable solutions, we follow a multi-disciplinary approach with close involvement of stakeholders.Setting and Motivation. Providing support for well-being and care of the growing ageing population poses one of the major societal challenges. Studies have shown that worldwide the number of elderly people above 60 has increased significantly over the last 50 years and will keep increasing the following decades. Innovations in the field of Information and Communication Technologies (ICT) are both a driver and a support to tackle some of the demographic challenges [1]. Challenges and Goal. A decade of vast research on well-being and elderly care has taught us the need for a multidisciplinary and integrated approach to realize sustainable solutions for promoting and supporting socio-technical innovation. We identified the following key research challenges: 1. How can we translate social needs of elderly people and care providers into requirements for innovative socio-technical solutions?", "num_citations": "8\n", "authors": ["629"]}
{"title": "SA-MAS: Self-adaptation to enhance software qualities in multi-agent systems\n", "abstract": " Engineering multi-agent systems (MAS) is known to be a complex task. One of the reasons lays in the complexity to combine multiple concerns that a MAS has to address, such as system functionality, coordination, robustness, etc. A well-recognized approach to manage system complexity is the use of self-adaptation (SA). Self-adaptation extends a system with support to monitor and adapt itself to realize a concern of interest (optimization, fault-tolerance, etc.). We present SA-MAS, an architectural approach that integrates MAS with SA. We present a reference model for SA-MAS and illustrate it with an excerpt from our research.", "num_citations": "8\n", "authors": ["629"]}
{"title": "Architecture-centric development of an AGV transportation system\n", "abstract": " Architectural design plays a key role in software engineering. The software architecture is the backbone of the designed solution, it has the functional requirements of the system and satisfies the quality requirements. In our research, we put forward situated multiagent systems (situated MAS) as an approach to build distributed applications with demanding quality requirements such as flexibility and openness. In this paper we illustrate how we apply situated MAS to an Automatic Guided Vehicle (AGV) transportation system. We discuss the high-level structure of the software architecture and explain how the architecture aims to meet important quality requirements.", "num_citations": "8\n", "authors": ["629"]}
{"title": "Serialization of distributed execution-state in Java\n", "abstract": " In this paper we present a mechanism for serializing the execution-state of a distributed Java application that is implemented on a conventional Object Request Broker (ORB)architecture such as Java Remote Method Invocation (RMI).To support capturing and reestablishment of distributed execution-state,we developed a byte code transformer that adds this functionality to a Java application by extracting execution-state from the application code.An important benefit of the serialization mechanism is its portability.It can transparently be integrated into any legacy Java application.Furthermore,it does require no modifications to the Java Virtual Machine (JVM)or to the underlying ORB.The serialization mechanism can serve many purposes such as migrating execution-state over the network or storing it on disk.In particular,we describe the implementation of a prototype for repartitioning distributed Java\u00a0\u2026", "num_citations": "8\n", "authors": ["629"]}
{"title": "Look, talk and do: a synchronization scheme for situated multi-agent systems\n", "abstract": " Look, Talk and Do: A Synchronization Scheme for Situated Multi-Agent Systems Page 1 Look, Talk and Do: A Synchronization Scheme for Situated Multi-Agent Systems Danny Weyns AgentWise, DistriNet Department of Computer Science, KULeuven Celestijnenlaan 200A B-3001 Leuven, Belgium danny.weyns@cs.kuleuven.ac.be Tom Holvoet AgentWise, DistriNet Department of Computer Science, KULeuven Celestijnenlaan 200A B-3001 Leuven, Belgium tom.holvoet@cs.kuleuven.ac.be ABSTRACT \u00a2\u00a1\u00a4 \u00a3\u00a6\u00a5\u00a7 \u00a9 ! \" # \u00a6 $\u00a9% $\u00a1&\u00a3' ( \u00a90)1\u00a123\u00a51 \u00a645\u00a1 \u00a7768 9\u00a3\u00a6\u00a7745\u00a1@ \u00a9%2A\u00a5 BC \" DE4F GB\u00a4H IP\u00a3\u00a6\u00a7PQ FR5 $\u00a1&\u00a3# \u00a90)1\u00a90\u00a3\u00a6 $BC\u00a9T SVUXW`\u0178a \u00a3\u00a6\u00a5b 9\u00a3c \u00a9%H 4 %\u00a3\u00a6\u00a9G 2$45BC I7 de DE4F \u00a6BC\u00a9\" 4FDf FR5 $\u00a1&\u00a3 \u00a77\u00a1&\u00a3\u00a6 A F2 \u00a3\u00a6\u00a7745\u00a1hgX Yi)1\u00a123\u00a51 \u00a645\u00a1 \u00a7768 9\u00a3\u00a6\u00a7745\u00a1p \u00a77\u00a1q X UXW`Yr \u00a77\u00a9s \u00a1 2$ $\u00a9%\u00a9\u00a6 F %)rt\u00a5 \u00a1Q uv t \u00a3\u00a6\u00a5 w FR5 $\u00a1&\u00a3\u00a6\u00a9x 4 D! \u00a3\u00a6\u00a5 F\u00a3T UXW`Yy F \u00a6 s I7 s \u00a3\u00a64e 2 \u00a3x \u00a9%\u00a77B@HI7\u00a3AF\u00a1 $4 H \u00a9%IP) F\u00a1b \u00a77\u00a3 \u00a77\u00a9 $\u2026", "num_citations": "8\n", "authors": ["629"]}
{"title": "Applying machine learning in self-adaptive systems: A systematic literature review\n", "abstract": " Recently, we witness a rapid increase in the use of machine learning in self-adaptive systems. Machine learning has been used for a variety of reasons, ranging from learning a model of the environment of a system during operation to filtering large sets of possible configurations before analysing them. While a body of work on the use of machine learning in self-adaptive systems exists, there is currently no systematic overview of this area. Such overview is important for researchers to understand the state of the art and direct future research efforts. This paper reports the results of a systematic literature review that aims at providing such an overview. We focus on self-adaptive systems that are based on a traditional Monitor-Analyze-Plan-Execute feedback loop (MAPE). The research questions are centred on the problems that motivate the use of machine learning in self-adaptive systems, the key engineering aspects of learning in self-adaptation, and open challenges. The search resulted in 6709 papers, of which 109 were retained for data collection. Analysis of the collected data shows that machine learning is mostly used for updating adaptation rules and policies to improve system qualities, and managing resources to better balance qualities and resources. These problems are primarily solved using supervised and interactive learning with classification, regression and reinforcement learning as the dominant methods. Surprisingly, unsupervised learning that naturally fits automation is only applied in a small number of studies. Key open challenges in this area include the performance of learning, managing the effects of learning, and dealing with\u00a0\u2026", "num_citations": "7\n", "authors": ["629"]}
{"title": "Multiagent systems as software architecture: another perspective on software engineering with multiagent systems\n", "abstract": " The trend in agent-oriented software engineering is to consider multiagent systems (MASs) as a radically new way of engineering software. This position isolates agent-oriented software engineering from mainstream software engineering and could be one important reason why MASs are not widely adopted in industry yet. In this paper, we present another perspective on software engineering with MASs. We put forward MASs as software architecture. We give an overview of a reference architecture for situated MAS. This reference architecture extracts and generalizes common functions and structures from various applications we have studied and built. The reference architecture provides a blueprint for architectural design of MAS applications that share the come base of the systems it is derived from. Considering MASs essentially as software architecture paves the way to integration with mainstream software\u00a0\u2026", "num_citations": "7\n", "authors": ["629"]}
{"title": "A model for active perception in situated multi-agent systems\n", "abstract": " In this paper we present a generic model for active perception in situated multi-agent systems. Active perception enables an agent to direct its perception at the most relevant aspects in the environment according to its current task. The model decomposes perception into three functionalities: sensing, interpreting and filtering. Sensing takes place at the agent-environment interface and maps the state of the environment to a representation. This mapping depends on two factors. First the sensing agent can select a set of foci. Focus selection enables an agent to sense specific types of data in the environment. Second, the representation of the state is composed according to a set of perceptual laws. Perceptual laws enforce domain specific constraints on perception. Whereas physical sensing naturally incorporates such constraints, in software multi-agent systems the constraints have to be modeled explicitely.The second functionality is interpreting. Agents interpret representations by means of descriptions. Descriptions are blueprints that map representations onto percepts. Percepts are expressions that can be understood by the internal machinery of the agent. The third functionality of perception is filtering. By selecting a set of filters an agent is able to improve its perception by restricting the perceived data according to specific context relevant selection criteria.", "num_citations": "7\n", "authors": ["629"]}
{"title": "Towards runtime statistical model checking for self-adaptive systems\n", "abstract": " With the increasing demand for self-adaptation in applications with critical goals, providing guarantees for these goals at runtime has become an important subject of research. One of the prominent proposed approaches is automated verification at runtime that allows verifying goals on the fly, typically by exhaustive traversal of the state graph of the system model. However, this approach suffers from the well-known state space explosion problem. We put forward runtime statistical model checking (RSMC) as an efficient alternative to provide guarantees for self-adaptive systems. Using statistical methods, RSMC enables the system to verify properties at runtime with a required accuracy and level of confidence. An important benefit of RSMC is that it allows to tradeoff between the accuracy and confidence of the guarantees it provides with the computation time and system resources it requires. We provide a model for RSMC in self-adaptive systems based on MAPE-based feedback loops and illustrate the benefits of the approach using the Tele Assistance System exemplar.", "num_citations": "6\n", "authors": ["629"]}
{"title": "Providing assurances for self-adaptation in a mobile digital storytelling application using ActivFORMS\n", "abstract": " Self-adaptability enables a system to adapt itself to changes in its execution conditions and user requirements in order to achieve particular quality goals. However, assuring that the adaptation goals are satisfied poses complex challenges. We recently developed the ActivFORMS approach that aims to tackle some of these challenges, but further research is required to evaluate the approach. This paper presents the results of a study in which we applied ActivFORMS to a mobile storytelling application that employs a social recommender. The initial version of the application used a static recommender that could not deal with changing environment conditions, or take into account preferences of users. To that end, we added a self-adaptive layer on top of the application. The study results show that self-adaptation significantly increases the quality of recommendations compared to the initial version by: (1) enabling the\u00a0\u2026", "num_citations": "6\n", "authors": ["629"]}
{"title": "Supporting online updates of software product lines: A controlled experiment\n", "abstract": " The evolution of Software Product Lines (SPL) is challenging because stakeholders have to deal with both regular evolution and the co-existence of different products. Our focus of product evolution is on the tasks integrators have to perform to update deployed SPL products with minimal interruption of services. In case of Egemin, our industrial partner, the updates of SPL products is further hampered as a consequence of outdated and imprecise architectural knowledge of deployed products. To facilitate the updates of products, we have developed the architecture-centric approach which comprises two complementary parts: an update viewpoint and a supporting tool. In this paper we present an evaluation of the architecture-centric approach. The approach is compared with the Egemin's current update approach in a controlled experiment. In the experiment 17 professionals were asked to perform 68 updates of\u00a0\u2026", "num_citations": "6\n", "authors": ["629"]}
{"title": "Prediction of congested traffic on the critical density point using machine learning and decentralised collaborating cameras\n", "abstract": " In this paper we discuss short term traffic congestion prediction, more specifically, prediction of the sudden speed drop when traffic resides at the critical density point. We approach this problem using standard machine learning techniques combining information from multiple sensors measuring density and average velocity. The model used for prediction is learned offline. Our goal is to implement (and possibly update) the predictive model in a multi-agent system, where coupled with each sensor, there is an agent that monitors the condition of traffic, starts to collect data from other sensors located nearby when necessary and is able to predict local sudden speed drops so that drivers can be warned ahead of time. We evaluate Gaussian processes, support vector machines and decision trees not only limited to predictive accuracy, but also the suitability of the learned model in the setup as described above, ie, keeping in mind that we want the warning system to be decentralized and want to ensure scalability and robustness.", "num_citations": "6\n", "authors": ["629"]}
{"title": "Engineering Environment-Mediated Multi-Agent Systems: International Workshop, EEMMAS 2007, Dresden, Germany, October 5, 2007, Selected Revised and Invited Papers\n", "abstract": " Software intensive systems are increasingly expected to deal with changing user needs and dynamic operating conditions at run time. Examples are the need for life recon? gurations, management of resource variability, and dealing with p-ticular failure modes. Endowing systems with these kinds of capabilities poses severe challenges to software engineers and necessitates the development of new techniques, practices, and tools that build upon sound engineering principles. The? eld of multi-agent systems focuses on the foundations and engineering of systems that consists of a network of autonomous entities (agents) that int-act to achieve the system goals. One line of research in multi-agent systems, inspired by biological, physical and other naturally occurring systems, concerns multi-agent systems in which agents share information and coordinate their-havior througha shared medium called an agentenvironment. Typical examples are gradient? elds and digital pheromones that guide agents in their local c-text and as such facilitate the coordination of a community of agents. Since environment-mediation in multi-agent systems has shown to result in mana-able solutions with very adaptable qualities, it is a promising paradigm to deal with the increasing complexity and dynamism of distributed applications. Control in environment-mediated multi-agent systems is decentralized, ie, noneofthecomponentshasfullaccessorcontroloverthesystem. Self-organization isanapproachtoengineerdecentralized, distributedandresource-limitedsystems thatarecapableofdynamicallyadaptingtochangingconditionsandrequirements without external intervention\u00a0\u2026", "num_citations": "6\n", "authors": ["629"]}
{"title": "Middleware for protocol-based coordination in mobile applications\n", "abstract": " In distributed mobile applications, component interaction is complicated by dynamics in the environment. In mobile applications, nodes continuously come and go and change interaction partners, complicating this exchange. For protocol-based coordination, existing middleware approaches - such as publish/subscribe systems or tuplespaces-based systems - support the initial interaction partner discovery, but don't support interaction partner maintenance over prolonged interaction sessions or easy protocol modularization. We propose extending these middleware approaches with suitable abstractions to better support protocol-based interaction in mobile applications. To test our approach, we created ObjectPlaces, a middleware that uses roles as its main abstraction. ObjectPlaces middleware supports the development of interaction protocols in dynamic, mobile environments to facilitate component coordination", "num_citations": "6\n", "authors": ["629"]}
{"title": "Environments for Multi-Agent Systems: First International Workshop, E4MAS, 2004, New York, NY, July 19, 2004, Revised Selected Papers\n", "abstract": " The modern field of multiagent systems has developed from two main lines of earlier research.Its practitioners generally regard it as a form of artificial intelligence (AI). Some of its earliest work was reported in a series of workshops in the US dating from 1980, revealingly entitled,\u201cDistributed Artificial Intelligence,\u201d and pioneers often quoted a statement attributed to Nils Nilsson that \u201call AI is distributed.\u201d The locus of classical AI was what happens in the head of a single agent, and much MAS research reflects this heritage with its emphasis on detailed modeling of the mental state and processes of individual agents. From this perspective, intelligence is ultimately the purview of a single mind, though it can be amplified by appropriate interactions with other minds. These interactions are typically mediated by structured protocols of various sorts, modeled on human conversational behavior.", "num_citations": "6\n", "authors": ["629"]}
{"title": "Environments for Multi-Agent Systems First International Workshop, E4MAS 2004, New York, NY, July 19, 2004, Revised Selected Papers\n", "abstract": " The modern field of multiagent systems has developed from two main lines of earlier research.Its practitioners generally regard it as a form of artificial intelligence (AI). Some of its earliest work was reported in a series of workshops in the US dating from 1980, revealingly entitled,\u201cDistributed Artificial Intelligence,\u201d and pioneers often quoted a statement attributed to Nils Nilsson that \u201call AI is distributed.\u201d The locus of classical AI was what happens in the head of a single agent, and much MAS research reflects this heritage with its emphasis on detailed modeling of the mental state and processes of individual agents. From this perspective, intelligence is ultimately the purview of a single mind, though it can be amplified by appropriate interactions with other minds. These interactions are typically mediated by structured protocols of various sorts, modeled on human conversational behavior.", "num_citations": "6\n", "authors": ["629"]}
{"title": "Towards secure architecture-based adaptations\n", "abstract": " As any software system, a self-adaptive system is subject to security threats. However, applying self-adaptation may introduce additional threats. So far, little research has been devoted to this important problem. In this paper, we propose an approach for vulnerability analysis of architecture-based adaptations in self-adaptive systems using threat modeling and analysis techniques. To this end, we specify components' vulnerabilities and the system architecture formally and generate an attack model that describes the attacker's strategies to attack the system by exploiting different vulnerabilities. We use a set of security metrics to quantitatively assess the security risks of adaptations based on the produced attack model which enables the system to consider security aspects while choosing an adaptation to apply to the system. We automate and incorporate our approach into the Rainbow framework, allowing for secure\u00a0\u2026", "num_citations": "5\n", "authors": ["629"]}
{"title": "Variability: from software product lines to self-adaptive systems.\n", "abstract": " -Assess evidence of variability research, identify open problems and new opportunities-Obtain a more rigorous understanding of variability in software engineering", "num_citations": "5\n", "authors": ["629"]}
{"title": "On the problems with evolving Egemin's software product line\n", "abstract": " Egemin, an industrial manufacturer of logistic systems is adopting a Software Product Line (SPL) approach to manage the development of their product portfolio. However, due to the intrinsic complexity of the logistic systems and lack of explicitly documented architectural knowledge evolution of the products is error-prone. Faulty updates increase maintenance costs and harm the company's reputation. Therefore, Egemin searches for a systematic solution that can improve their SPL evolution strategy.", "num_citations": "5\n", "authors": ["629"]}
{"title": "A middleware model in Alloy for supply chain-wide agent interactions\n", "abstract": " To support the complex coordination activities involved in supply chain management, more and more companies have autonomous software agents acting on their behalf. Due to confidentiality concerns, such as hiding sensitive information from competitors, agents typically only have a local view on the supply chain. In many situations, however, companies would like to expand the view of their agents to share valuable information such as transportation tracking and service delays. Non of the participating companies, however, has enough knowledge or authority to realize such interactions in a controlled manner.               In this paper, we present an organization middleware that offers a collaboration platform and enables agents to interact across the boundary of local interactions. Policies and laws enable companies to define the scope of interactions of their agents and the restrictions on their exposed\u00a0\u2026", "num_citations": "5\n", "authors": ["629"]}
{"title": "A formal specification of an organization model and management model for context-driven dynamic organizations\n", "abstract": " An organization middleware encapsulates the management of dynamic organizations and offers roles and organizations as high-level abstractions to application developers. This report presents a complete formal specification in Z of an organization model and management model for context-driven dynamic organizations, a particular class of dynamic organizations. The organization model describes the abstractions offered by the organization middleware, while the management model describes the desired behavior of the middleware with respect to the management of dynamic organizations. Context-driven dynamic organizations, allow developers to group agents in organizations which represent collaborations that are driven by a dynamic context. As the context changes, the required collaborations change and the organizations have to be adapted. The management model identifies external inputs, such as changes in context, and a set of reflective adaptation processes, which will adapt the organizations accordingly. We use a decentralized traffic monitoring case to illustrate the organization and management model.", "num_citations": "5\n", "authors": ["629"]}
{"title": "Towards of software product line for automated transportation systems\n", "abstract": " Since the seventies, Egemin has successfully been providing full life cycle support for automated transportation systems (ATS) used to automate internal logistics in production and warehousing environments. With increasing customer demands a number of considerable problems related to the company\u2019s engineering practice came to the surface. Examples are duplication of solutions and erosion of the software and its architecture. With the introduction of a software product line (SPL) Egemin aims to shift the focus of its activities from developing individual products (ATS for clients) towards the development of a repository of core assets for a family of ATS supported by an explicitly defined production process. The objective is to establish planned reuse aiming to improve the quality of the software and ultimately to increase productivity. A particular challenge with the introduction of the SPL is support for runtime variability that allows an ATS to dynamically adapt its behavior to changes in the operating environment. In this paper, we outline how Egemin is introducing a dynamic SPL for ATS. We give particular attention to support for runtime variability.", "num_citations": "5\n", "authors": ["629"]}
{"title": "DynCNET: A Protocol for Flexible Task Assignment Applied in an AGV Transportation System.\n", "abstract": " The work presented in this paper is part of an ongoing effort to study suitable task assignment mechanisms for decentralized MAS. Our focus is on systems that are characterized by tasks with delayed commencement. Such a task requires a preceding effort before the agent can start executing the task. An example is a robot that first has to move to the location of a task before it can start executing that task. Important quality requirements for assigning tasks with delayed commencement are flexibility (enable agents to adapt task assignment with changing circumstances) and openness (enable agents to take into account other agents that come and go during the process of task assignment). In previous work, we have studied Contract Net (CNET) and a field-based approach for task assignment (FiTA). CNET does not provide the required flexibility and openness. FiTA satisfies the required qualities, however, the field-based approach provides an emergent solution for task assignment. It is well known that emergent solutions are difficult to engineer and reason about. This raises the question whether it is not easier to extend CNET to take dynamics and changes into account. This paper presents the DynCNET protocol. DynCNET is an extention of CNET, with \u201cDyn\u201d referring to support for dynamic task assignment. DynCNET provides flexibility and openness for assigning tasks with delayed commencement. We compare the DynCNET protocol with CNET and FiTA in an AGV transportation system. Our experiences in this real-world setting show that:(1) the performance of DynCNET and FiTA are similar, while both outperform CNET;(2) extending CNET to\u00a0\u2026", "num_citations": "5\n", "authors": ["629"]}
{"title": "Gradient field based order assignment in AGV systems\n", "abstract": " This research examines the feasibility of using a field-based approach, within the multi-agent system (MAS) paradigm, to achieve transport assignment in an automatic guided vehicle (AGV) system. In a field-based approach, transports emit fields into the environment. The AGV\u2019s behavior consists of continuously combining received fields and following the gradient of these combined fields. This will guide towards pick locations of transports, much like a ball rolls towards a valley in a (continuously changing) mountainous landscape. To avoid multiple AGVs driving towards the same transport, AGVs emit repulsive fields. The AGVs continuously reconsider the situation of the environment and transport assignment is delayed until a pickup, which benefits the flexibility of the system. The field-based approach is implemented in the AGV simulator developed by the AgentWise task force and its performance is examined. Experiments indicate that the field-based approach outperforms a Contract Net based protocol on various performance measures, such as the average time a transport has to wait for execution and the throughput, and in various circumstances, such as a varying number of AGVs and transports in the system. However, limitations of the field-based approach include AGVs driving superfluous distance and an unequal distribution of wait times across different pick locations. Also, it is not feasible to control, predict or reason about the emergent system-wide behavior or to provide guaranteed reaction times. Additionally, the tuning of the parameters of the approach often proved to require a time consuming trail-and-error approach. Finally, it\u00a0\u2026", "num_citations": "5\n", "authors": ["629"]}
{"title": "Time management support for simulating multi-agent systems\n", "abstract": " Time management is essential when simulating multi-agent systems (MASs) as it allows consistent and repeatable simulation runs. So far, time management lacks explicit support to express the timing characteristics of a simulation at the level of activities within a MAS. Moreover, integrating a MAS into a simulation platform requires the developer to alter the design of a MAS. In this paper, we first propose semantic duration models to capture timing characteristics that reflect the semantics of MAS activities in an explicit model. Second, we describe a simulation platform prototype that supports semantic duration models and integrates time management into a MAS without requiring the developer to alter the design of a MAS. We employ aspect-oriented programming technology as it allows separation of concerns, a crucial software engineering requirement. We use the Packet World as a case to illustrate our approach.", "num_citations": "5\n", "authors": ["629"]}
{"title": "HeyCitI: Healthy Cycling in a City using Self-Adaptive Internet-of-Things\n", "abstract": " Air pollution is the biggest environmental health risk in Europe. Smart city initiatives that rely on the Internet-of-Things (IoT) can help addressing the problem. In this paper, we introduce HeyCitI, short for Healthy Cycling in a City using IoT. HeyCitI finds the most healthy path in a city and dynamically adapts the path on the way avoiding areas with higher pollution. To that end, HeyCitI uses up to date information from pollution sensors deployed in the city to dynamically adapt the path. We developed a simulator of HeyCitI that is compatible with DingNet, an IoT infrastructure deployed in Leuven. We give an overview of the HeyCitI and illustrate how self-adaptation improves the air quality for cyclists in a typical scenario.", "num_citations": "4\n", "authors": ["629"]}
{"title": "Towards a code of ethics for autonomous and self-adaptive systems\n", "abstract": " Software systems are playing an increasingly important role in many domains of our society. To ensure that software will support the public good, software engineers, who create and maintain the software, shall adhere to ethical principles. A joint task force of IEEE and ACM has brought such a set of principles together in a Code of Ethics. These principles describe responsibilities for software engineers and guidelines to assist them when making decisions in the benefit of public good. With the emergence of computing systems that take autonomous decisions, there is growing consensus that new ethical principles will be required. Since self-adaptive systems are characterized by autonomy, the need for new principles applies to these systems. Based on the Code of Ethics and leveraging on ongoing initiatives, we suggest an initial set of new ethical principles for autonomous and self-adaptive systems as an\u00a0\u2026", "num_citations": "4\n", "authors": ["629"]}
{"title": "From craft to science: The road ahead for empirical software engineering research\n", "abstract": " Empirical software engineering (SE) research is often criticized for poorly designed and reported studies, a lack of replications to build up bodies of knowledge, and little practical relevance. In this paper, we discuss issues in empirical software architecture research as an illustration of these issues in one subfield of SE and as a step towards better understanding empirical research in SE in general. Based on feedback from software architecture researchers and practitioners, we explore why, despite persistent discussions in the SE research community, there are still disagreements about why and how to conduct empirical research. Then, we explore how empirical SE research can progress beyond \"one-off\" studies and endless \"new and exciting\" results toward SE research as a mature science. This would allow us to establish foundations for evaluating existing and future empirical research and help researchers\u00a0\u2026", "num_citations": "4\n", "authors": ["629"]}
{"title": "Effective decision making in self-adaptive systems using cost-benefit analysis at runtime and online learning of adaptation spaces\n", "abstract": " Self-adaptation is an established approach to deal with uncertainties that are difficult to predict before a system is deployed. A self-adaptative system employs a feedback loop that tracks changes and adapts the system accordingly to ensure its quality goals. However, making effective adaptation decisions at runtime is challenging. In this chapter we tackle two problems of effective decision making in self-adaptive systems. First, current research typically focusses on the benefits adaptaton can bring but ignores the cost of adaptation, which may invalidate the expected benefits. To tackle this problem, we introduce CB@R (Cost-Benefit analysis @ Runtime), a novel model-based approach for runtime decision-making in self-adaptive systems that handles both the benefits and costs of adaptation as first-class citizens in decision making. Second, we look into the adaptation space of self-adaptive systems, i.e. the\u00a0\u2026", "num_citations": "4\n", "authors": ["629"]}
{"title": "Deltaiot: A real world exemplar for self-adaptive Internet of Things (artifact)\n", "abstract": " The DeltaIoT exemplar enables researchers to evaluate and compare new methods, techniques and tools for self-adaptation in Internet of Things (IoT). The exemplar applies multi-hop communication, where each IoT mote must have a path towards the gateway along other motes. Our motes use LoRa radio technology supporting long range communication. The focus is on dynamically adapting the network settings of the IoT motes (eg, transmission power and spreading factor) to reduce the energy consumption of the motes and guaranteeing high packet delivery performance, regardless of uncertainties such as sudden changes in traffic load and communication interference. Traditionally, to deal with uncertainties the network settings are either hand-tuned or over-provisioned, resulting in continuous network maintenance. Self-adaptation can automate these tasks. The exemplar provides several reference scenarios for experimentation. DeltaIoT comprises a simulator for offline experimentation and a physical setup of 25 motes that can be accessed remotely for experimentation in the field. This IoT system is deployed at the Computer Science Department Campus of KU Leuven.", "num_citations": "4\n", "authors": ["629"]}
{"title": "Hierarchical Organizations and a Supporting Software Architecture for Floating Car Data\n", "abstract": " The use of floating car data is an interesting method to monitor traffic. Vehicles act as local traffic sensors and data from individual vehicles is aggregated into higher-level information. We propose a number of reusable organization abstractions and a software architecture to support a multi-agent approach applied to floating car data. The abstractions are based on the idea of hierarchical organizations which are used as units of data aggregation. In this approach, an agent is deployed on each vehicle. At the lowest level, nearby vehicle agents collaborate to aggregate individual traffic data and distribute it to local clients such as traffic light controllers. At higher-levels, organizations are built up from lower-level organizations and represent specific aggregation interests such as the total congestion level in a specific area. A prototype was built, supporting a two-level organization structure, and is used in a simulated\u00a0\u2026", "num_citations": "4\n", "authors": ["629"]}
{"title": "Architecture-centric software development of situated multiagent systems\n", "abstract": " A multiagent system (MAS) structures a software system as a set of autonomous agents that interact through a shared environment. Software architecture is generally considered as the structures of a system which comprise software elements and the relationships among the elements. So there is a clear connection between MAS and software architecture. In our research, we study situated MAS, i.e.\u00a0systems in which agents have an explicit position in the environment. We apply situated MAS to domains that are characterized by highly dynamic operating conditions and an inherent distribution of resources. We use an architecture-centric approach for developing such MAS. From our experiences with building various applications, we have developed a reference architecture for situated MAS. The reference architecture provides an asset base architects can draw from when developing new systems that share\u00a0\u2026", "num_citations": "4\n", "authors": ["629"]}
{"title": "Serialization of Distributed Threads in Java\n", "abstract": " In this paper we present a mechanism for serializing the execution-state of a distributed Java application that is implemented on a conventional Object Request Broker (ORB) architecture such as Java Remote Method Invocation (RMI). To support serialization of distributed execution-state, we developed a byte code transformer and associated management subsystem that adds this functionality to a Java application by extracting execution-state from the application code. An important benefit of our mechanism is its portability. It can transparently be integrated into any legacy Java application. Furthermore, it does require no modifications to the Java Virtual Machine (JVM) or to the underlying ORB. Our serialization mechanism can serve many purposes such as migrating execution-state over the network or storing it on disk. In particular, we describe the implementation of a prototype for repartitioning distributed Java applications at run-time. Proper partitioning of distributed objects over the different machines is critical to the global performance of the distributed application. Methods for partitioning exist, and employ a graph-based model of the application being partitioned. Our mechanism enables then applying these methods at any point in an ongoing distributed computation. In the implementation of the management subsystem, we experienced the problem of losing logical thread identity when the distributed control flow crosses address space boundaries. We solved this well known problem by introducing the generic notion of distributed thread identity in Java programming. Propagation of a globally unique, distributed thread identity provides a\u00a0\u2026", "num_citations": "4\n", "authors": ["629"]}
{"title": "Towards commitments for situated agents\n", "abstract": " Traditional architectures for situated, behavior-based agents take the viewpoint of the individual agent to select the most appropriate action. Action selection is typically based on internal stimuli and stimuli from the agent's neighboring environment. As such collaborations between agents have to emerge from the individually selected actions of the agents. In this paper we study the research problem of how to enable explicit collaborations between situated agents. Explicit collaborations are reflected in mutual commitments. Contrary to the traditional approaches of commitment that are based on the mutually dependent menial states of the involved agents and a goal-oriented plan, we introduce the notion of a situated commitment that is based on the roles of the involved agents and the local context they are placed in. Activating mutual situated commitments in a collaboration results in more consistent behavior of the\u00a0\u2026", "num_citations": "4\n", "authors": ["629"]}
{"title": "A formal model for situated multi-agent systems\n", "abstract": " Contrary to cognitive approaches of agency where a lot of effort is devoted to the formalization of agent concepts, little work has been done on the formalization of situated multi-agent systems (situated MASs). In this paper we present a generic model for situated MASs. This model formally describes an abstract architecture for situated MASs. In this architecture each agent is situated in his local context that he is able to perceive and in which he can act. Since intelligence in situated MASs results from the interactions of agents with the environment rather than from their individual capabilities, the model takes an action-centric approach. The model deals with (1) the actions of agents in the environment,(2) ongoing activities in the environment, such as moving objects, and (3) the interactions between agents and ongoing activities through the environment.One model for situated MASs was described by J. Ferber and JP M\u00fcller. In this model all agents of the MAS act at one global pace, ie the agents are globally synchronized. Drawbacks of global synchronization are centralized control and poor scalability. We present a model that allows agents to synchronize locally. In this model there is no centralized entity that imposes all agents to act at one global pace, but instead agents themselves decide when they perform their next actions. The model supports simultaneous actions through regional synchronization. With regional synchronization agents form synchronized groups on the basis of their actual locality. Different groups can act asynchronously, while agents within one group act synchronously. The result is a model that does not suffer from the\u00a0\u2026", "num_citations": "4\n", "authors": ["629"]}
{"title": "When natural language processing jumps into collaborative software engineering\n", "abstract": " Software engineering is an intrinsically collaborative activity, especially in the era of Agile Software Development. Many actors are partaking in development activities, such that a common understanding should be reached at numerous stages during the overall development life-cycle. For a few years now, Natural Language Processing techniques have been employed either to extract key information from free-form text or to generate models from the analysis of text in order to ease the sharing of knowledge across all parties. A significant part of these approaches focuses on retrieving lost domain and architectural knowledge through the analysis of documents, issue management systems or other forms of knowledge management systems. However, these post-processing methods are time-consuming by nature since they require to invest significant resources into the validation of the extracted knowledge. In this\u00a0\u2026", "num_citations": "3\n", "authors": ["629"]}
{"title": "Quantum enhanced k-fold cross-validation\n", "abstract": " In this work, we propose a quantum-classical algorithm able to perform a k-fold cross-validation with linear speedup. The proposed method creates a quantum superposition with patterns from a dataset and a classifier can evaluate all patterns at once. We used a probabilistic quantum memory in order to conduct the performance evaluation. The proposed method was verified through a reduced experimental analysis conducted classically.", "num_citations": "3\n", "authors": ["629"]}
{"title": "Engineering multi-agent systems Anno 2025\n", "abstract": " Modern software-intensive systems are increasingly blending cyber, physical, and social elements, demanding higher degrees of autonomy and adaptability than ever before. In combination with the ever growing integration and scale of systems, and the inherent uncertainties modern systems face, the principles from MAS engineering remain particularly attractive for engineering systems in a wide variety of domains today. In this chapter, we reflect on the role and potential of MAS engineering on a selection of key facets that characterize modern software engineering practice. We focus at facets that we believe are important in relation to MAS engineering. Concretely, we look at agile development, Cloud and edge computing, distributed ledgers and blockchain, Cyber-Physical Systems and Internet-of-Things, and finally green computing. For each of these facets we highlight opportunities to EMAS\u00a0\u2026", "num_citations": "3\n", "authors": ["629"]}
{"title": "ENTRUST: engineering trustworthy self-adaptive software with dynamic assurance cases\n", "abstract": " Software systems are increasingly expected to cope with variable workloads, component failures and other uncertainties through self-adaptation. As such, self-adaptive software has been the subject of intense research over the past decade [3, 4, 9, 10].", "num_citations": "3\n", "authors": ["629"]}
{"title": "Engineering multi-agent systems\n", "abstract": " The workshop on Engineering Multi-Agent Systems (EMAS) has a threefold goal:(i) To enhance our knowledge and expertise in MAS engineering to move forward the state-of-the-art;(ii) define new directions for MAS engineering, relying on results and recommendations stemming from a diverse range of research areas; and (iii) investigate how practitioners can use or adapt established processes and methodologies for the engineering of large-scale and open MAS. The EMAS workshop has been held as part of AAMAS since 2013, and was previously affiliated with AAMAS through the AOSE, ProMAS and DALT workshops since their inception. This 6th edition of the EMAS workshop, which was co-located for the first time with IJCAI/ECAI and ICML alongside AAMAS, took place in Stockholm, Sweden, during July 14\u201315, 2018. On average, around 40 people attended the different sessions of the workshop.EMAS\u00a0\u2026", "num_citations": "3\n", "authors": ["629"]}
{"title": "Advanced Agent Technology: AAMAS Workshops 2011, AMPLE, AOSE, ARMS, DOCM3AS, ITMAS, Taipei, Taiwan, May 2-6, 2011. Revised Selected Papers\n", "abstract": " This book constitutes the thoroughly refereed post-workshop proceedings of 5 workshops, held at the 10th International Conference on Autonomous Agents and Multiagent Systems, AAMAS 2011, in Taipei, Taiwan, May 2-6, 2011. The 37 revised full papers presented together with 1 invited paper were carefully reviewed and selected from numerous submissions. The papers are organized in sections on the workshops Agent-Based Modeling for Policy Engineering (AMPLE), Agent-Oriented Software Engineering (AOSE), Autonomous Robots and Multirobot Systems (ARMS), Data Oriented Constructive Mining and Multi-Agent Simulation, Massively Multi-Agent Systems: Models, Methods and Tools (DOCM3AS), and Infrastructures and Tools for Multiagent Systems (ITMAS).", "num_citations": "3\n", "authors": ["629"]}
{"title": "On adls and tool support for documenting view-based architectural descriptions\n", "abstract": " DistriNet is a research lab with+ 60 researchers. The general domain of expertise and innovation of DistriNet is the development of advanced open and distributed software applications. The research is application driven and is conducted in close collaboration with industry. One particular class of applications we target are decentralized systems that are characterized by a high degree of dynamism and change in either the problem or the system's environment. Example domains of interest are manufacturing control, supply chains, inland shipping, and traffic control.To document software architecture, we follow the approach of views and beyond (V&B). V&B is an approach for documenting software architecture by means of a set of relevant views and adding information that applies to more than one view. Views describe (parts of) the system from different perspectives, exposing different quality attributes that are of interest for particular stakeholders.", "num_citations": "3\n", "authors": ["629"]}
{"title": "Delta framework cookbook\n", "abstract": " The Delta framework was built to help software developers to develop situated multi-agent systems. This framework is based on the reference-architecture for situated multi-agent systems that was developed by the AgentWise taskforce at DistriNet labs, KU Leuven. The Delta framework can be used for very different kinds of multiagent systems. Multi-agent systems using a software environment as well as multi-agent systems in the physical world are supported. A framework is organized in two parts: a core (also called frozenspot) that is common to all applications derived from the framework, and hot-spots that represent the variable parts which allow a framework to be instantiated for a particular application. Because the Delta framework contains a high number of hot spots, its application is not an easy task. This cookbook gives a general description of the Delta framework, together with a set of recipes. Each recipe explains how a particular hot-spot of the framework can be applied. Illustrative examples show how the developer can instantiate the various hot-spots for an application at hand.", "num_citations": "3\n", "authors": ["629"]}
{"title": "Combining Adaptive Behavior and Role Modeling with Statecharts\n", "abstract": " Engineering non-trivial open multi-agent systems is a challenging task. Our research focuses on situated multiagent systems, i.e. systems in which agents are explicitly placed in a context - an environment - which agents can perceive and in which they can act. Two concerns are essential in developing such open systems. First, the agents must be adaptive in order to exhibit suitable behavior in changing circumstances of the system: new agents may join the system, others may leave, the environment may change, e.g. its topology or its characteristics such as throughput and visibility. A well-known family of agent architectures for adaptive behavior are free-flow architectures. However, building a free-flow architecture based on an analysis of the problem domain is a quasi-impossible job for non-trivial agents. Second, multi-agent systems developers as software engineers require suitable abstractions for describing\u00a0\u2026", "num_citations": "3\n", "authors": ["629"]}
{"title": "Evaluation of Macodo: A controlled experiment\n", "abstract": " In today\u2019s volatile business environments, collaboration between information systems, both within and across company borders, has become essential to success. Developing such collaborative applications and building the supporting information systems poses several engineering challenges. A key challenge is to manage the ever growing design complexity. State of the art solutions, however, often lack proper abstractions for modeling collaborations at architectural level or do not reify these abstractions at detailed design and implementation level. Developers, on the other hand, rely on middleware, business process management, and Web services, techniques that mainly focus on low-level infrastructure. Macodo addresses the problem of managing the design complexity of collaborative applications with three contributions:(1) a set of abstractions for modeling dynamic collaborations,(2) a set of architectural views, the main contribution of this paper, that reify these abstractions at architectural level, and (3) a proof of concept middleware infrastructure that supports the architectural abstractions at design and implementation level. In this document, we report on an empirical study that evaluates the main contribution of Macodo, the architectural views. The study is performed with 67 final year students of a Master in Software Engineering program from a university in Sweden and 2 universities in Ukraine. Results show that the use of Macodo can reduce fault density and design complexity, and improve reuse and productivity.", "num_citations": "2\n", "authors": ["629"]}
{"title": "Formal verification of self-adaptive behaviors in decentralized systems with uppaal: An initial study\n", "abstract": " Ensuring the required qualities of software systems that have to operate in highly dynamic environments poses a tremendous engineering challenge. Self-adaptive software is generally considered as one of the most promising approaches to manage the complexity of modern software systems. Our particular interest is in decentralized self-adaptive systems, in which central control of adaptation is not an option. One major challenge in self-adaptive systems, in particular those with decentralized control of adaptation, is to provide guarantees about the intended runtime quality properties. This paper reports a first step of our research on a formally founded approach to validate behavioral properties of decentralized self-adaptive systems to guarantee the required systems qualities. We contribute with a formal model of a decentralized traffic monitoring system and prove a number of self-adaptation properties for flexibility and robustness. To model the main processes in the system, we use timed automata, and for the specification of the required properties, we use timed computation tree logic. For the actual modeling, we use the Uppaal tool that provides an integrated environment for modeling, simulation and verification of the system.", "num_citations": "2\n", "authors": ["629"]}
{"title": "Overview of architecture-based design of multi-agent systems\n", "abstract": " Architecture-based design of multi-agent systems puts software architecture at the center of the software development activities. In this chapter, we give an overview of the approach. We start by situating architecture-based design in a software development life cycle and we give an overview of the methods used in the different steps of architecture-based design of multi-agent systems. Next, we zoom in on the different steps in the approach, including requirements elicitation, architectural design, architecture documentation, and evaluation. For each step, we give the necessary background and we introduce the different techniques and methods that are used. We conclude with a brief explanation of how software architecture serves as a blueprint for system development and a summary.", "num_citations": "2\n", "authors": ["629"]}
{"title": "Capturing expertise in multi-agent system engineering with architectural patterns\n", "abstract": " An architectural pattern is a key concept in architectural design.                              It specifies a generic solution scheme for a recurring design problem. A solution scheme describes a set of components, their responsibilities and relationships, and the way in which they collaborate. Architectural patterns exhibit various properties: patterns address different quality requirements, they help to document the architectural design decisions, and facilitate communication between stakeholders through a common vocabulary. A coherent set of related architectural patterns that describe good design practices within a particular domain makes up a pattern language [37]. Making explicit the relationships among the patterns gives the architect guidance about how to combine the patterns to construct a software architecture for a concrete system.", "num_citations": "2\n", "authors": ["629"]}
{"title": "Traceable and information-preserving composition of architectural models\n", "abstract": " C&C and deployment are base views for describing software architectures. Both views typically exist of several models that highlight particular aspects of the software. From our experience, managing the dependencies between architectural models is a challenging, yet crucial task for maintaining consistency of an architectural description. In this paper, we focus on the composition of architectural models and managing dependencies between models in such a composition. We formally define four basic relations between models and a composition operator that enables integration of several C&C models based on these relations. We elaborate on several semantic preserving properties of the composition operator, including traceability, consistency, and completeness. The relations and composition operator have been integrated in the xADL language and the AchStudio tool. We use excerpts of a distributed video-on-demand system designed with the tool as an illustrative case.", "num_citations": "2\n", "authors": ["629"]}
{"title": "Special track on Agent-oriented Programming, Systems, Languages, and Applications (APSLA) editorial message\n", "abstract": " The requirements of distributed software systems become increasingly complex. Among the aspects that characterize such a complexity are the inherent distribution of resources and activity-that makes global control practically infeasible and emphasizes the need for decentralized control-and the highly dynamic and changing operating conditions in which today's distributed applications operate-that calls for open and adaptive software.", "num_citations": "2\n", "authors": ["629"]}
{"title": "DynCNET: A protocol for flexible task assignment in situated multiagent systems\n", "abstract": " The work presented in this paper is part of an ongoing effort to study suitable task assignment mechanisms for decentralized MAS. Our focus is on systems that are characterized by tasks with delayed commencement. Such a task requires a preceding effort before the agent can start executing the task. An example is a robot that first has to move to the location of a task before it can start executing that task. Important quality requirements for assigning tasks with delayed commencement are flexibility (enable agents to adapt task assignment with changing circumstances) and openness (enable agents to take into account other agents that come and go during the process of task assignment). In previous work, we have studied Contract Net (CNET) and a field-based approach for task assignment (FiTA). CNET does not provide the required flexibility and openness. FiTA satisfies the required qualities, however, the field-based approach provides an emergent solution for task assignment. It is well known that emergent solutions are difficult to engineer and reason about. This raises the question whether it is not easier to extend CNET to take dynamics and changes into account. This paper presents the DynCNET protocol. DynCNET is an extention of CNET, with \u201cDyn\u201d referring to support for dynamic task assignment. DynCNET provides flexibility and openness for assigning tasks with delayed commencement. We compare the DynCNET protocol with CNET and FiTA in an AGV transportation system. Our experiences in this real-world setting show that:(1) the performance of DynCNET and FiTA are similar, while both outperform CNET;(2) extending CNET to\u00a0\u2026", "num_citations": "2\n", "authors": ["629"]}
{"title": "Environments for Multi-Agent Systems II\n", "abstract": " In the past two years the environment in multiagent systems has become increasingly important and is now becoming a focus of research in its own right. Yet, the environment in multiagent systems has been studied before. So the obvious question then is: Why does the environment attract the attention of a broader community of researchers right now?The answer to this question is manifold. First, current research on environments is built on the receptive ground of early work. Pioneers such as Demazeau, Parunak, Ferber, Odell, Omicini and Zambonelli have been stressing the importance of the environment in multiagent systems for almost a decade. Second, current research on environments is well organized. The workshop series on Environments for Multiagent Systems (E4MAS) provides the breeding ground for coordinating research on environments. E4MAS provides an active forum for discussion and\u00a0\u2026", "num_citations": "2\n", "authors": ["629"]}
{"title": "Research on environments in multiagent systems: reflection on the state-of-the-art\n", "abstract": " Recently, the perspective on the role of the environment in multiagent systems has undergone a fundamental change. Whereas functionalities of the environment are often dealt with implicitly or in an ad-hoc manner, recent research puts forward the environment as a first-order design abstraction in multiagent systems. Several researchers have demonstrated that the environment can be used in a creative manner in the design of multiagent system applications. Distinguishing between agent and environment responsibilities ameliorates separation of concerns in multiagent systems and improves engineering practice. In this paper, we reflect on state-of-the-art research on environments in multiagent systems. We explain what is meant by the environment as a first-order abstraction. We reflect on models and responsibilities of the environment, environment engineering, and applications. For each of these research tracks, we give pointers for further reading. To conclude, we point to a number of challenges for future research on environments in multiagent systems.", "num_citations": "2\n", "authors": ["629"]}
{"title": "E4MAS 2005: Environments for Multiagent Systems\n", "abstract": " During the discussion, regulating properties of the environment were related to a deployment model of multiagent systems that was presented at the workshop. This model distinguishes three layers in a multiagent system (from top to bottom): Multiagent System Application layer; Execution Platform, and Physical Infrastructure. Different kinds of regulation pertain to each layer:\u2022 Specific multiagent system application rules: eg norms, interaction laws, etc.\u2022 Execution platform rules: eg coordination rules of middleware, scheduling policies, etc.\u2022 Physical infrastructure rules: communication bandwidth, topological constraints, physical laws, etc.", "num_citations": "2\n", "authors": ["629"]}
{"title": "An Introduction To Self-Adaptive Systems\n", "abstract": " Modern software-intensive systems1 are expected to operate under uncertain conditions, without interruption. Possible causes of uncertainties include changes in the operational environment, dynamics in the availability of resources, and variations of user goals. Traditionally, it is the task of system operators to deal with such uncertainties. However, such management tasks can be complex, error-prone, and expensive. The aim of self-adaptation is to let the system collect additional data about the uncertainties during operation in order to manage itself based on high-level goals. The system uses the additional data to resolve uncertainties and based on its goals re-configures or adjusts itself to satisfy the changing conditions.Consider as an example a simple service-based health assistance system as shown in Figure 1.1. The system takes samples of vital parameters of patients; it also enables patients to invoke a panic button in case of an emergency. The parameters are analyzed by a medical service that may invoke additional services to take actions when needed; for instance, a drug service may need to notify a local pharmacy to deliver new medication to a patient. Each service type can be realized by one of multiple service instances provided by third-party service providers. These service instances are characterized by different quality properties, such as failure rate and cost. Typical examples of uncertainties in this system are the patterns that particular paths in the workflow are invoked by, which are based on the health conditions of the users and their behavior. Other uncertainties are the available service instances, their actual failure rates\u00a0\u2026", "num_citations": "1\n", "authors": ["629"]}
{"title": "Self-protection against business logic vulnerabilities\n", "abstract": " Attacks against business logic rules occur when the attacker exploits the domain rules in a malicious way. Such attacks have not received sufficient attention in research so far. In this paper, we propose a novel self-protecting approach that defends a system against the exploitation of business logic vulnerabilities. The approach empowers a system with a self-protecting layer to protect it against attacks aimed at misusing business logic rules. The approach maintains up-to-date domain knowledge which is analyzed using runtime verification to detect logical attacks. When attacks are discovered they are dynamically mitigated by applying proper system reconfigurations at runtime. We evaluate the approach using a case from the domain of hotel booking systems.", "num_citations": "1\n", "authors": ["629"]}
{"title": "Fostering responsibility-centered learning in a software engineering course with flipped classroom\n", "abstract": " A recurring issue we observe with traditional teaching methods in basic software engineering courses at KU Leuven is poor engagement of students that may result in superficial knowledge. To investigate and tackle this issue, wedesigned a responsibility-centered learning approach using flipped classroom. Flipped classroom is a pedagogical approach that has shown to enhance student engagement in the learning process. We designed a flipped classroom approach centered on enhancing student\u2019s responsibility in the learning process, targeting the specific challenges of poor engagement of students in the courses. The approach combines guided self-study of the learning material with student-driven elaboration of the material during deepening sessions. We have applied the approach in a basic software engineering course in two academic years. Student feedback of the first year indicated that the workload was perceived too high, so we adapted the approach for the second year resolving this issue. The experience shows that flipping the classroom had no direct effect on study results, but, by making students owners of the learning process, they report that the approach fosters their engagement and enables them to obtain deeper understanding of the course material.", "num_citations": "1\n", "authors": ["629"]}
{"title": "SimCA*: A control-theoretic approach to handle uncertainty in self-adaptive systems with guarantees\n", "abstract": " Modern software applications need, more than ever, being able to deal with change [14, 39]. The need for continuous availability of software applications requires developers to consider change as part of the development process. Software is expected to deal seamlessly with different types of", "num_citations": "1\n", "authors": ["629"]}
{"title": "Verification of Complex Adaptive Systems\n", "abstract": " In our working group in Dagstuhl, we first identified the major issues and more interesting challenges that arise in the process of verification of CAS. Afterwards, we divided in two subgroups to discuss in detail specific topics related to this general framework. In particular, we chose to investigate:(1) the quantitative or stochastic model checking in the presence of uncertainty, and (2) the specifications and logics which capture the spatial arrangements of systems, characterising the impact of those arrangements on collective behaviour. A brief account of each subgroup is given below.", "num_citations": "1\n", "authors": ["629"]}
{"title": "Architecture-Centric Support for Dynamic Service Collaborations\n", "abstract": " Dynamic collaborations between information systems have become an essential element in today\u2019s business environments. In modern supply chains, for example, companies rely on a multitude of systems. The arrival of a new order can no longer be handled by a single system, but requires complex collaborations among distributed and heterogeneous systems. In addition, the dynamic and unpredictable market is causing a constant change in supply chain networks, requiring collaborations to be easily adapted to current market needs. One of the primary goals of information technology", "num_citations": "1\n", "authors": ["629"]}
{"title": "A case study on formal verification of self-adaptive behaviors in a decentralized system\n", "abstract": " Self-adaptation is a promising approach to manage the complexity of modern software systems. A self-adaptive system is able to adapt autonomously to internal dynamics and changing conditions in the environment to achieve particular quality goals. Our particular interest is in decentralized self-adaptive systems, in which central control of adaptation is not an option. One important challenge in self-adaptive systems, in particular those with decentralized control of adaptation, is to provide guarantees about the intended runtime qualities. In this paper, we present a case study in which we use model checking to verify behavioral properties of a decentralized self-adaptive system. Concretely, we contribute with a formalized architecture model of a decentralized traffic monitoring system and prove a number of self-adaptation properties for flexibility and robustness. To model the main processes in the system we use\u00a0\u2026", "num_citations": "1\n", "authors": ["629"]}
{"title": "Enhancing software qualities in multi-agent systems using self-adaptation\n", "abstract": " Engineering multi-agent systems (MAS) is known to be a complex task. One of the reasons lays in the complexity to combine multiple concerns that a MAS is expected to address, such as system functionality, coordination, robustness, etc. A well-recognized approach to manage system complexity is the use of self-adaptive (SA) mechanisms. Self-adaptation allows to adjust the system behavior in order to achieve certain software qualities (optimization, fault-tolerance, etc.). The key idea behind self-adaptation is complexity management through separation of concerns. In this paper we introduce SA-MAS, an architectural approach that integrates the functionalities provided by a MAS with software qualities offered by a SA solution. The paper presents a reference model for SA-MAS and applies it to a Mobile learning case, in which we deal with robustness properties. In addition, we apply formal verification techniques as an approach to guarantee the requirements of the SA-MAS application.", "num_citations": "1\n", "authors": ["629"]}
{"title": "Agent-Oriented Software Engineering XI: 11th International Workshop, AOSE XI, Toronto, Canada, May 10-11, 2010, Revised Selected Papers\n", "abstract": " Since the mid 1980s, software agents and multi-agent systems have grown into a very active area of research and also commercial development activity. One of the limiting factors in industry take-up of agent-technology, however, is the lack of adequate software engineering support. The Agent-Oriented Software Engineering Workshop, AOSE, focuses on the synergies and cross fertilization between software engineering and agent research. This volume presents both thoroughly revised selected papers from the AOSE 2010 workshop held at AAMAS 2010 in Toronto, Canada in May 2010 as well as invited articles by leading researchers in the field. The papers cover a broad range of topics related to software engineering and agent-based systems, with particular attention to the integration of concepts and techniques from multi-agent systems with conventional engineering approaches on the one hand, and to the integration of agent-oriented software engineering and methodologies with conventional engineering processes on the other hand.", "num_citations": "1\n", "authors": ["629"]}
{"title": "On-demand generation of views to support online evolution of software product lines\n", "abstract": " It is difficult to achieve assured conformance between architecture and code. We lacked proper architecture descriptions in the context of the evolution of an industrial software product line of logistic systems. As a result, a lack of explicit architecture documentation about the deployed products led to ad hoc update practices, which were error prone and resulted in unnecessary and undesirable shutdowns. To tackle these problems, we have codified the architecture knowledge required for evolving products in a viewpoint. Based on this viewpoint, we developed a supporting tool that allows generating on-demand architecture models. These models guide maintainers by listing the concrete tasks they need to perform when upgrading a system and by showing inconsistencies when they fail to do so. The evaluation of 68 updates of industrial logistic systems demonstrates a significant improvement in the quality of system updates with respect to the correct execution of updates and a reduced interruption of services.", "num_citations": "1\n", "authors": ["629"]}
{"title": "Related Approaches\n", "abstract": " Architecture-based design of multi-agent systems takes an architecture-centric perspective on the engineering of agent-based systems. The approach integrates multi-agent system concepts with state-of-the-art principles and methods of conventional software engineering. Although architectural design is considered as an explicit phase in several agent-oriented methodologies, none of them puts software architecture in the center of the engineering activities.", "num_citations": "1\n", "authors": ["629"]}
{"title": "Middleware for Distributed Multi-agent Systems\n", "abstract": " One of the major challenges in the software development of a distributed multi-agent system is the coordination necessary to align the behavior of the agents. Since coordination determines whether agents cooperate effectively, it has a direct impact on the satisfaction of a distributed application\u2019s functional requirements. Furthermore, since coordination is realized primarily by communication, coordination has a large impact on quality attributes such as efficiency and resource usage.", "num_citations": "1\n", "authors": ["629"]}
{"title": "DynCNET: a negotiation and coordination protocol for dynamic task assignment\n", "abstract": " Task assignment in Multi-Agent Systems is a complex coordination problem, especially in systems that operate under dynamic and changing conditions. Adaptive task assignment is used to handle these dynamic and changing circumstances. This technical document describes an adaptive task assignment protocol, DynCNET which is an extension of the Contract Net Protocol. In this document, the DynCNET protocol will be build step by step, starting from the Contract Net protocol. We will add dynamic task assignment, synchronization of abort messages and scope handling. The final result will be the DynCNET protocol with support for synchronization of abort messages and scope handling.", "num_citations": "1\n", "authors": ["629"]}
{"title": "Traceable and information-preserving composition of structural models\n", "abstract": " A structural view is a base view for describing software architectures. A structural view typically comprises several structural models that highlight particular aspects of the software. From our experience, managing the dependencies between structural models is a challenging, yet crucial task for maintaining consistency of an architectural description. In this paper, we focus on the composition of structural models and managing dependencies between models in such a composition. We formally define three basic relations between structural models and a composition operator that enables integration of several structural models based on these relations. We elaborate on several information preserving properties of the composition operator, including traceability, consistency, and completeness. The relations and composition operator have been integrated in the xADL language and the AchStudio tool. We use excerpts of a distributed video-on-demand system designed with the tool as an illustrative case.", "num_citations": "1\n", "authors": ["629"]}
{"title": "Hierarchical Organizations for Decentralized Traffic Monitoring\n", "abstract": " The use of floating car data is an interesting method to monitor traffic. Vehicles act as local traffic sensors and data from individual vehicles is aggregated into higher-level information. We propose a number of reusable organization abstractions and a software architecture to support a multi-agent approach for floating car data. The abstractions are based on the idea of hierarchical organizations which are used as units of data aggregation. In this approach, an agent is deployed on each vehicle. At the lowest level, nearby vehicle agents collaborate to aggregate individual traffic data and distribute it to local clients such as traffic light controllers. At higher-levels, organizations are built up from lower-level organizations and represent specific aggregation interests such as the total congestion level in a specific area. This decentralized approach avoids the bottleneck of a centralized control center and makes the system more robust and scalable. A prototype was built, supporting a two-level organization structure, and is used in a simulated traffic environment as initial validation.", "num_citations": "1\n", "authors": ["629"]}
{"title": "ENGINEERING ENVIRONMENT-MEDIATED MULTIAGENT SYSTEMS\n", "abstract": " The advances in computing and communication technology have paved the way to large scale integration of distributed software systems. As a result, new generations of software applications are rapidly permeating our society. Yet, the development and management of these software applications introduce increasing levels of complexity. Addressing the challenges requires the development of new techniques, practices, and tools that build upon sound engineering principles. The fundamental results from complex system research provide a rich potential to software engineering of complex distributed systems. The field of multi-agent systems (MAS) studies the foundations and engineering of software systems that consists of a network of autonomous entities (agents) that are situated in an environment and that interact with one another to achieve the system goals. Inspired by biological systems, MAS researchers have demonstrated how environment-mediated interaction among agents enables to build adaptive, robust, and scalable solutions. Computational fields and digital pheromones can guide agents in their local context and as such facilitate the coordination of a community of agents in a distributed manner, providing a promising approach to deal with the increasingly complexity of distributed applications. Key issues to develop environment-mediated multi-agent systems are (1) the need for proper infrastructure to support mediated interaction among agents,(2) understanding of self-organization and emergence, and (3) the need for disciplined engineering approaches. The goal of EEMMAS is to advance state of the art theory and practice in\u00a0\u2026", "num_citations": "1\n", "authors": ["629"]}
{"title": "The role of the environment in simulating multi-agent systems\n", "abstract": " Simulation is important to support the development of multi-agent systems (MAS). Simulation offers a safe and cost-effective way for studying, evaluating and configuring the behavior of a MAS in a simulated environment before the MAS is deployed in the real world. Such simulations are often referred to as software-in-the-loop simulations [2]: the software of the real MAS application is embedded in the simulation. The MAS is not substituted by a model, but the MAS software itself is part of the simulation loop.", "num_citations": "1\n", "authors": ["629"]}
{"title": "Laws for Mediating Agents' Activities in Situated Multiagent Systems\n", "abstract": " Research on situated multiagent systems (situated MAS) investigates decentralized architectures for software systems that have to deal with highly dynamic operating conditions. To realize the system requirements, the agents of a situated MAS have to coordinate their behavior. The agent environment provides a means to mediate (i.e., enable and constrain) agents' activities in the system. Laws embedded in the agent environment allow to define application specific constrains on agents activities. In this paper, we declaratively specify the semantics of laws for perception, action, and communication in situated MAS. We illustrate the laws with concrete examples in an automated transportation system that we have developed. Mediation of agents' activities via the agent environment improves separation of concerns in MAS and helps to manage complexity, especially in open and pervasive environments.", "num_citations": "1\n", "authors": ["629"]}
{"title": "Transferring research into practice: Experiences in the EMC2 project\n", "abstract": " DistriNet is a research lab with 65 researchers. The general domain of expertise and innovation of DistriNet is the development of advanced open and distributed software [1]. The research is application driven and is conducted in close collaboration with industry. One particular class of applications we target are multiagent systems. A multiagent system consists of \u201ca loosely coupled network of problem solvers (agents) that interact to solve problems that are beyond the individual capabilities or knowledge of each problem solver\u201d[2]. In a joint R&D project called EMC 2, DistriNet and Egemin, a manufacturer of automated transportation systems, have applied a multiagent system for controlling automatic guided vehicles (AGVs)[3]. The driving motivations behind decentralizing the control of AGVs were new and future quality requirements such as flexibility (deal autonomously with dynamic operating conditions) and openness (deal autonomously with AGVs entering and leaving the system). At the software architectural level, the AGV control system is structured as a multiagent system; the detailed design and implementation is object-oriented. For a detailed discussion of the technical aspects of the application we refer to [4, 5]. Here we reflect on our experiences with transferring research into practice.", "num_citations": "1\n", "authors": ["629"]}
{"title": "View composition as a first-class concept in architectural descriptions\n", "abstract": " Our position is that architectural descriptions lack composition of views, preventing a proper separation of concerns. This position took shape from experiences with building several complex distributed software systems. Our claim is that view composition should be a first-class entity in architectural descriptions. As a first step, we propose an extension of the conceptual model of IEEE Recommended Practice for Architectural Description of Software-Intensive Systems with view composition.", "num_citations": "1\n", "authors": ["629"]}
{"title": "A Framework for Situated Multiagent Systems\n", "abstract": " In this paper, we present an object-oriented framework for situated multiagent systems. The framework integrates various mechanisms for adaptivity we have developed and applied in our research, including selective perception, protocol-based communication, behavior-based decision making with roles and situated commitments, and laws that mediate the activities of agents in the environment. The framework provides a reusable design asset that facilitates the development of new multiagent system applications that share the common base more reliable and cost efficiently. We give an overview of the framework, and we zoom in on two particular features: decision making with a free-flow tree and support for simultaneous actions. Finally, we show how the framework is applied to an experimental robot application.", "num_citations": "1\n", "authors": ["629"]}
{"title": "Decentralized control of autonomous guided vehicles scalable warehouse systems\n", "abstract": " In an R&D project with both the AgentWise/DistriNet research group and Egemin N.V., the feasibility of an innovative, decentralized solution for managing and controlling warehouse management using automated guided vehicles, called E'GVs is investigated. The study is triggered by new and future system requirements such as scalability and flexibility. We exploit principles and mechanisms known from situated multi-agent systems for modelling and implementing a decentralized control system. We aim to provide the E'GVs with a considerable amount of autonomy. Besides a scalable solution, this allows to obtain a system that is far more flexible than the current software - the E'GVs adapt themselves to the current situation in their direct vicinity, order assignment is dynamic, the system can cope with EOVs leaving the system (e.g. for maintenance) or adding new E'GVs, and so on. In this paper, we describe the\u00a0\u2026", "num_citations": "1\n", "authors": ["629"]}
{"title": "Environments for Multi-Agent Systems\n", "abstract": " Universidad de Buenos Aires (UBA), Argentina Facultad de Agronom\u00eda B\u00fasqueda general: Formato: Cantidad a desplegar: Orden ascendente: B\u00fasqueda por diccionario: Cantidad a desplegar: Alianza SIDALC 1 / 1 Seleccione referencia / Select reference [ Texto Completo / Full Text ] Autor: Michel, Fabien, ed. Parunak, Van Dyke H., ed. Weyns, Danny, ed. Conferencia: International Workshop E4MAS. 1. 19 July 2004. New York. US. T\u00edtulo: Environments for multi - agent systems. I. P.imprenta: Springer-Verlag Berlin Heidelberg. Heidelberg. (DE) C2005. 279 p., il. Serie: Lecture Notes in Artificial Intelligence. Subseries of Lecture Notes in Computer Science Lecture Notes in Computer Science. 3374. Descriptores: MEDIO AMBIENTE; APLICACIONES DEL ORDENADOR; SISTEMAS INTELIGENTES Total de registros: 1 BD BIBUN Ayuda MegaBase Agropecuaria Alianza SIDALC \u2026", "num_citations": "1\n", "authors": ["629"]}
{"title": "Byte code Transformations for Distributed Threads in Java\n", "abstract": " In this paper, we study the shift of thread semantics that arises when adapting a centralized Java program for execution in a distributed environment. More specifically we focus on distributed applications that are developed by means of a distributed control flow programming model like Java RMI or OMG CORBA. The shift in thread semantics causes unexpected execution results or run-time errors if these differences were not taken into account by the programmer. We overcome this semantical gap between local and distributed programming by extending Java programming with the notion of distributed thread identity. Propagation of a globally unique, distributed thread identity provides a uniform mechanism by which all the program\u2019s constituent objects involved in a distributed control flow can uniquely refer to that distributed thread as one and the same computational entity. We have implemented distributed thread identity by means of byte code transformation of application programs.", "num_citations": "1\n", "authors": ["629"]}
{"title": "Environments for Multi-Agent Systems 2004\n", "abstract": " Models and conceptualizations are necessary to understand and design ubiquitous systems that are context\u2013aware not just from a technological point of view. The current technological trend depicts a scenario in which space, movement and more generally the environment represent aspects that should be considered as first class concepts. The aim of this paper is to propose the Multilayered Multi Agent Situated System (MMASS) model as a suitable support for the definition of conceptual architectures for ubiquitous systems. The model provides a strong concept of agent environment, which represents an abstraction of a physical environment and conceptual aspects as well, and the agent interaction model is strongly dependant on the spatial structure of the environment. After a brief presentation of MMASS, related concepts and mechanisms, a sample application domain illustrating how it can be adopted to model an ubiquitous system will be given. 1", "num_citations": "1\n", "authors": ["629"]}