{"title": "Are automatically-detected code anomalies relevant to architectural modularity?: an exploratory analysis of evolving systems\n", "abstract": " As software systems are maintained, their architecture modularity often degrades through architectural erosion and drift. More directly, however, the modularity of software implementations degrades through the introduction of code anomalies, informally known as code smells. A number of strategies have been developed for supporting the automatic identification of implementation anomalies when only the source code is available. However, it is still unknown how reliable these strategies are when revealing code anomalies related to erosion and drift processes. In this paper, we present an exploratory analysis that investigates to what extent the automatically-detected code anomalies are related to problems that occur with an evolving system's architecture. We analyzed code anomaly occurrences in 38 versions of 5 applications using existing detection strategies. The outcome of our evaluation suggests that many\u00a0\u2026", "num_citations": "128\n", "authors": ["81"]}
{"title": "A unified framework for studying architectural decay of software systems\n", "abstract": " The effort and cost of software maintenance tends to dominate other activities in a software system's lifecycle. A critical aspect of maintenance is understanding and updating a software system's architecture. However, the maintenance of a system's architecture is exacerbated by the related phenomena of architectural drift and erosion\u2014collectively called architectural decay\u2014which are caused by careless, unintended addition, removal, and/or modification of architectural design decisions. These phenomena make the architecture more difficult to understand and maintain and, in more severe cases, can lead to errors that result in wasted effort or loss of time or money. To deal with architectural decay, an engineer must be able to obtain (1) the current architecture of her system and understand (2) the symptoms of decay that may occur in a software system and (3) the manner in which architectures tend to change and\u00a0\u2026", "num_citations": "13\n", "authors": ["81"]}
{"title": "Helios: Impact analysis for event-based systems\n", "abstract": " Event-based software systems contain highly-decoupled components that interact by exchanging messages via implicit invocation, thus allowing flexible system composition and adaptation. At the same time, these inherently desirable properties render an event-based system more difficult to understand and evolve since, in the absence of explicit dependency information, an engineer has to assume that any component in the system may potentially interact with, and thus depend on, any other component. Software analysis techniques that have been used successfully in traditional, explicit invocation-based systems are of little use in this domain. In order to aid the understandability of, and assess the impact of changes in, event-based systems, we propose Helios, a technique that combines component-level (1) controlflow and (2) state-based dependency analysis with systemlevel (3) structural analysis to produce a complete and accurate message dependence graph for a system. We have applied Helios to applications constructed on top of four different event-based implementation platforms. We summarize the results of several such applications. We demonstrate that Helios enables effective event-based impact analysis and quantify its improvements over existing alternatives. 1.", "num_citations": "3\n", "authors": ["81"]}
{"title": "Too Quiet in the Library: An Empirical Study of Security Updates in Android Apps\u2019 Native Code\n", "abstract": " Android apps include third-party native libraries to increase performance and to reuse functionality. Native code is directly executed from apps through the Java Native Interface or the Android Native Development Kit. Android developers add precompiled native libraries to their projects, enabling their use. Unfortunately, developers often struggle or simply neglect to update these libraries in a timely manner. This results in the continuous use of outdated native libraries with unpatched security vulnerabilities years after patches became available. To further understand such phenomena, we study the security updates in native libraries in the most popular 200 free apps on Google Play from Sept. 2013 to May 2020. A core difficulty we face in this study is the identification of libraries and their versions. Developers often rename or modify libraries, making their identification challenging. We create an approach called LibRARIAN\u00a0\u2026", "num_citations": "2\n", "authors": ["81"]}
{"title": "Forecasting Architectural Decay from Evolutionary History\n", "abstract": " As a software system evolves, its architecture tends to decay, leading to the occurrence of architectural elements that become resistant to maintenance or prone to defects. To address this problem, engineers can significantly benefit from determining which architectural elements will decay before that decay actually occurs. Forecasting decay allows engineers to take steps to prevent decay, such as focusing maintenance resources on the architectural elements most likely to decay. To that end, we construct novel models that predict the quality of an architectural element by utilizing multiple architectural views (both structural and semantic) and architectural metrics as features for prediction. We conduct an empirical study using our prediction models on 38 versions of five systems. Our findings show that we can predict low architectural quality, i.e., architectural decay, with high performanceeven for cases of decay that\u00a0\u2026", "num_citations": "2\n", "authors": ["81"]}
{"title": "Too Quiet in the Library: A Study of Native Third-Party Libraries in Android\n", "abstract": " Android applications (\u201capps\u201d) make avid use of third-party native libraries to increase performance and to reuse already implemented functionality. Native code can be directly executed from apps through the Java Native Interface or the Android Native Development Kit. Android developers drop precompiled native libraries into their projects, enabling their use. Unfortunately, developers are often not aware that these libraries (or their dependencies) must be updated. This results in the continuous use of outdated native libraries with unpatched security vulnerabilities years after patches are available. To assess the severity of the use of outdated and vulnerable libraries in the Android ecosystem, we study the prevalence of native libraries in the top applications of the Google Play market over time, correlating the time when native libraries are updated with the availability of security patches. A core difficulty we have to\u00a0\u2026", "num_citations": "2\n", "authors": ["81"]}
{"title": "Too Afraid to Drive: Systematic Discovery of Semantic DoS Vulnerability in Autonomous Driving Planning under Physical-World Attacks\n", "abstract": " In high-level Autonomous Driving (AD) systems, behavioral planning is in charge of making high-level driving decisions such as cruising and stopping, and thus highly securitycritical. In this work, we perform the first systematic study of semantic security vulnerabilities specific to overly-conservative AD behavioral planning behaviors, i.e., those that can cause failed or significantly-degraded mission performance, which can be critical for AD services such as robo-taxi/delivery. We call them semantic Denial-of-Service (DoS) vulnerabilities, which we envision to be most generally exposed in practical AD systems due to the tendency for conservativeness to avoid safety incidents. To achieve high practicality and realism, we assume that the attacker can only introduce seemingly-benign external physical objects to the driving environment, e.g., off-road dumped cardboard boxes. To systematically discover such vulnerabilities, we design PlanFuzz, a novel dynamic testing approach that addresses various problem-specific design challenges. Specifically, we propose and identify planning invariants as novel testing oracles, and design new input generation to systematically enforce problemspecific constraints for attacker-introduced physical objects. We also design a novel behavioral planning vulnerability distance metric to effectively guide the discovery. We evaluate PlanFuzz on 3 planning implementations from practical open-source AD systems, and find that it can effectively discover 9 previouslyunknown semantic DoS vulnerabilities without false positives. We find all our new designs necessary, as without each design, statistically significant\u00a0\u2026", "num_citations": "0\n", "authors": ["81"]}
{"title": "scenoRITA: Generating Less-Redundant, Safety-Critical and Motion Sickness-Inducing Scenarios for Autonomous Vehicles\n", "abstract": " There is tremendous global enthusiasm for research, development, and deployment of autonomous vehicles (AVs), e.g., self-driving taxis and trucks from Waymo and Baidu. The current practice for testing AVs uses virtual tests-where AVs are tested in software simulations-since they offer a more efficient and safer alternative compared to field operational tests. Specifically, search-based approaches are used to find particularly critical situations. These approaches provide an opportunity to automatically generate tests; however, systematically creating valid and effective tests for AV software remains a major challenge. To address this challenge, we introduce scenoRITA, a test generation approach for AVs that uses evolutionary algorithms with (1) a novel gene representation that allows obstacles to be fully mutable, hence, resulting in more reported violations, (2) 5 test oracles to determine both safety and motion sickness-inducing violations, and (3) a novel technique to identify and eliminate duplicate tests. Our extensive evaluation shows that scenoRITA can produce effective driving scenarios that expose an ego car to safety critical situations. scenoRITA generated tests that resulted in a total of 1,026 unique violations, increasing the number of reported violations by 23.47% and 24.21% compared to random test generation and state-of-the-art partially-mutable test generation, respectively.", "num_citations": "0\n", "authors": ["81"]}
{"title": "Architectural Archipelagos: Technical Debt in Long-Lived Software Research Platforms\n", "abstract": " This paper identifies a model of software evolution that is prevalent in large, long-lived academic research tool suites (3L-ARTS). This model results in an \"archipelago\" of related but haphazardly organized architectural \"islands\", and inherently induces technical debt. We illustrate the archipelago model with examples from two 3L-ARTS archipelagos identified in literature.", "num_citations": "0\n", "authors": ["81"]}
{"title": "Compressive strength and microstructure of concretes manufactured with supersulfated cement based on materials of volcanic origin exposed to a sulfate environment\n", "abstract": " This paper presents the results of concretes manufactured with supersulfated cement (SSC) based on volcanic materials. The concretes were cured under two regimes, one for 24 h at 25 C and another for 22 h at 60 C and then at 25 C. The specimens were exposed to two conditions: dry laboratory conditions and immersed in a solution with 3.5% CaSO 4 at 25 C for up to 180 days. After 180 days, the concrete with a cementitious compound of 5% An-10% PC-10% CaO-75% PM reached a compressive strength of 46 MPa exposed to CaSO 4 solution and of 44 MPa in dry laboratory conditions. The microstructure was analyzed by scanning electron microscopy, energy-dispersive X-ray spectroscopy and X-ray diffraction, which showed that the main hydration products are CSH and ettringite.", "num_citations": "0\n", "authors": ["81"]}
{"title": "Institute for Software Research\n", "abstract": " Java is one of the most widely used programming languages. However, the absence of explicit support for architectural constructs, such as software components, in the programming language itself has prevented software developers from achieving the many benefits that come with architecturebased development. To address this issue, Java 9 has introduced the Java Platform Module System (JPMS), resulting in the first instance of encapsulation of modules with rich software architectural interfaces added to a mainstream programming language. The primary goal of JPMS is to construct and maintain large applications efficiently\u2014as well as improve the encapsulation, security, and maintainability of Java applications in general and the JDK itself. A challenge, however, is that module declarations do not necessarily reflect actual usage of modules in an application, allowing developers to mistakenly specify inconsistent dependencies among the modules. In this paper, we formally define 8 inconsistent modular dependencies that may arise in Java-9 applications. We also present DARCY, an approach that leverages these definitions and static program analyses to automatically (1) detect the specified inconsistent dependencies within Java applications and (2) repair those identified inconsistencies. The results of our experiments, conducted over 38 open-source Java-9 applications, indicate that architectural inconsistencies are widespread and demonstrate the benefits of DARCY in automated detection and repair of these inconsistencies. 1", "num_citations": "0\n", "authors": ["81"]}
{"title": "1st International Workshop on Establishing the Community-Wide Infrastructure for Architecture-Based Software Engineering (ECASE 2017)\n", "abstract": " Summary form only given, as follows. The complete presentation was not made available for publication as part of the conference proceedings. ECASE 2017 Workshop Summary. Software architecture plays an important role in facilitating the maintenance of a software system. Over the past two decades, software architecture research has yielded many different tools and techniques for understanding and maintaining the architectures of large, complex software systems. However, empirical research and technology transfer are impeded by myriad disjoint research and development environments, lack of a shared infrastructure, high initial costs associated with developing robust tools, and a lack of datasets needed to conduct empirical research in this domain. ECASE gathers researchers and practitioners from two areas-software architecture and empirical software engineering-to explore the issues at the intersection\u00a0\u2026", "num_citations": "0\n", "authors": ["81"]}
{"title": "Institute for Software Research\n", "abstract": " As a software system evolves, its architecture tends to decay, leading to the occurrence of defects or architectural elements that become resistant to maintenance. To address this problem, engineers can significantly benefit from determining which architectural elements will decay before that decay actually occurs. Forecasting decay allows engineers to take steps to prevent decay, such as focusing maintenance resources on the architectural elements most likely to decay. To that end, we construct novel models that predict the quality of an architectural element by utilizing multiple architectural views (both structural and semantic) and architectural metrics as features for prediction. We conduct an empirical study using our prediction models on 38 versions of five systems. Our findings show that we can predict low architectural quality, ie, architectural decay, with high performance\u2014even for cases of decay that suddenly occur in an architectural module. We further report the factors that best predict architectural quality.", "num_citations": "0\n", "authors": ["81"]}
{"title": "Institute for Software Research\n", "abstract": " In parallel with the meteoric rise of mobile software, we are witnessing an alarming escalation in the number and sophistication of the security threats targeted at mobile platforms, particularly Android, as the dominant platform. While existing research has made significant progress towards detection and mitigation of Android security, gaps and challenges remain. This paper contributes a comprehensive taxonomy to classify and characterize the state-of-the-art research in this area. We have carefully followed the systematic literature review process, and analyzed the results of more than 100 research papers, resulting in the most comprehensive and elaborate investigation of the literature in this area of research. The systematic analysis of the research literature has revealed patterns, trends, and gaps in the existing literature, and underlined key challenges and opportunities that will shape the focus of future research efforts.", "num_citations": "0\n", "authors": ["81"]}
{"title": "Architectural Smell Definitions and Formalizations\n", "abstract": " In this section, we provide definitions of basic software architectural concepts and use them to define architectural smells. Our definitions are not intended to be complete; they are restricted to those architectural concepts that will be useful for identifying smells. We also provide shorthand predicates in Figure 1 that we use to help us define architectural smells. A software system\u2019s architecture is a graph G whose vertices are \u201cbricks\u201d(software components and connectors) and whose topology represents the interconnections among those bricks. In order to represent and detect architectural smells, we model a system\u2019s architecture as a tuple comprising G, the nonempty set of \u201cwords\u201d W that are used to \u201cdescribe\u201d(ie, implement) the system modeled by the architecture, and the nonempty set of \u201ctopics\u201d T addressed by the system; each topic is defined as a probability distribution over the system\u2019s words. By examining the\u00a0\u2026", "num_citations": "0\n", "authors": ["81"]}
{"title": "2021 IEEE 18th International Conference on Software Architecture (ICSA)| 978-1-7281-6260-7/20/$31.00\u00a9 2021 IEEE| DOI: 10.1109/ICSA51549. 2021.00025\n", "abstract": " Presents an index of the authors whose articles are published in the conference proceedings record.", "num_citations": "0\n", "authors": ["81"]}
{"title": "Ahmadjee, Sabreen 6 Alhusain, Sultan 55 Arcelli Fontana, Francesca 16 Arias, Jos\u00e9\n", "abstract": " Author Index Page 1 Author Index Ahmadjee, Sabreen 6 Alhusain, Sultan 55 Arcelli Fontana, Francesca 16 Arias, Jos\u00e9 1 Bahsoon, Rami 6 Bi, Fandi 26 Bogner, Justus 64 Capilla, Rafael 16 Carrillo, Carlos 16 Crespo, Yania 99 do Nascimento Ribeiro, Rafael 74 Falessi, Davide 45 Garcia, Joshua 94 Gerostathopoulos, Ilias 64 Gonzalez-Escribano, Arturo 99 Heuschkel, Jens 109 Kazman, Rick 45 Kulesza, Uir\u00e1 74 Lenarduzzi, Valentina 16 Malakuti, Somayeh 109 Martinez, Jabier 1 Martinez de Soria, Iker 1 Medvidovic, Nenad 94 Mera-G\u00f3mez, Carlos 6 Mikkonen, Tommi 16, 36 Minh Le, Duc 94 Piattini, Mario 99 Pigazzini, Ilaria 16 Quintano, Nuria 1 Ramirez Lahti, Jacinto 36 Rebou\u00e7as de Almeida, Rodrigo 74 Riebisch, Matthias 84 Ruiz, Alejandra 1 Santamaria, Izaskun 1 Schmitt Laser, Marcelo 94 Schwarze, Julian 84 Treude, Christoph 74 Tuovinen, Antti-Pekka 36 Verdecchia, Roberto 64 Vogel-Heuser, Birgit 26 Wiese\u2026", "num_citations": "0\n", "authors": ["81"]}
{"title": "The anatomy and physiology of the grid revisited\n", "abstract": " A domain-specific software architecture (DSSA) represents an effective, generalized, reusable solution to constructing software systems within a given application domain. In this paper, we revisit the widely cited DSSA for the domain of grid computing. We have studied systems in this domain over the past five years. During this time, we have repeatedly observed that, while individual grid systems are widely used and deemed successful, the grid DSSA is actually underspecified to the point where providing a precise answer regarding what makes a software system a grid system is nearly impossible. Moreover, every one of the existing purported grid technologies actually violates the published grid DSSA. In response to this, based on an analysis of the source code, documentation, and usage of eighteen of the most pervasive grid technologies, we have significantly refined the original grid DSSA. We demonstrate that this DSSA much more closely matches the grid technologies studied. Our refinements allow us to more definitively identify a software system as a grid technology, and distinguish it from software libraries, middleware, and frameworks.", "num_citations": "0\n", "authors": ["81"]}
{"title": "Technical Track\n", "abstract": " List of Names - Program Committee Page 1 Program Committee Technical Track Aldeida Aleti, Monash University, Australia Nour Ali, Brunel University London, United Kingdom Claudine Allen, University of West Indies, Jamaica Paris Avgeriou, University of Groningen, The Netherlands Ali Babar, The University of Adelaide, Australia Hamid Bagheri, University of Nebraska Lincoln, USA Rami Bahsoon, University of Birmingham, United Kingdom Luciano Baresi, Politecnico di Milano, Italy Thais Batista, Federal University of Rio Grande do Norte, Brazil Alexandre Bergel, University of Chile, Chile Rodrigo Bonif\u00e1cio, University of Bras\u00edlia, Brazil Uwe Breitenb\u00fccher, University of Stuttgart, Germany Barbora Buhnova, Masaryk University, Czech Republic Tomas Bures, Charles University, Czech Republic Rafael Capilla, Universidad Rey Juan Carlos, Spain Thelma Elita Colanzi, State University of Maring\u00e1, Brazil Vittorio \u2026", "num_citations": "0\n", "authors": ["81"]}
{"title": "Program Committee\u2013Main Track\n", "abstract": " List of Names - Program Committee Page 1 Program Committee \u2013 Main Track Nazareno Aguirre University of Rio Cuarto, Argentina Iftekhar Ahmed University of California at Irvine, USA Amin Alipour University of Houston, USA Cyrille Artho KTH Royal Institute of Technology, Sweden Alberto Bacchelli University of Zurich, Switzerland Gabriele Bavota Universit\u00e0 della Svizzera italiana (USI), Switzerland Jonathan Bell George Mason University, USA Tegawend\u00e9 F. Bissyand\u00e9 SnT, University of Luxembourg, Luxembourg Marcel B\u00f6hme Monash University, Australia Haipeng Cai Washington State University Pullman, USA Marsha Chechik University of Toronto, Canada Feifei Chen Deakin University, Australia Maria Christakis MPI-SWS, Germany J\u00fcrgen Cito MIT, USA James Clause University of Delaware, USA Lucas C. Cordeiro University of Manchester, UK Christoph Csallner University of Texas at Arlington, USA \u2026", "num_citations": "0\n", "authors": ["81"]}
{"title": "ECASE 2019 Organizing Committee\n", "abstract": " ECASE 2019 Organizing Committee IEEE.org Help Cart Jobs Board Create Account Toggle navigation IEEE Computer Society Digital Library Jobs Tech News Resource Center Press Room Browse By Date Advertising About Us IEEE IEEE Computer Society IEEE Computer Society Digital Library My Subscriptions Magazines Journals Conference Proceedings Institutional Subscriptions IEEE IEEE Computer Society More Jobs Tech News Resource Center Press Room Browse By Date Advertising About Us Cart All Advanced Search Conference Cover Image Download 1.Home 2.Proceedings 3.ecase 2019 ECASE 2019 Organizing Committee 2019, pp. 8-8, DOI Bookmark: 10.1109/ECASE.2019.00006 Keywords Authors ECASE 2019 Organizing Committee , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,Nenad Medvidovic ,University of Southern California, USA ,neno@usc.edu , ,Mehdi Mirakhorli ,Rochester Institute of \u2026", "num_citations": "0\n", "authors": ["81"]}
{"title": "Welcome from the ECASE 2019 Workshop Organizers\n", "abstract": " It is our great pleasure to welcome you to the Second International Workshop on Establishing the Community-Wide Infrastructure for Architecture-Based Software Engineering, ECASE-2019, held at ICSE-2019 on 28 May 2019 in Montreal, Canada. We are very pleased that the workshop will also be held at the International Conference on Software Engineering, for the second time. Its first edition at ICSE 2017 has shown that there is great interest in the area in the software engineering community.Software architecture plays an important role in facilitating the maintenance of a software system. Over the past two decades, software engineering research has yielded many different tools and techniques for understanding and maintaining the architectures of large, complex software systems. However, empirical research and technology transfer are impeded by myriad disjoint research and development environments, lack\u00a0\u2026", "num_citations": "0\n", "authors": ["81"]}
{"title": "Artifact Evaluation Committee of ICSE 2019\n", "abstract": " Artifact Evaluation Committee of ICSE 2019 IEEE.org Help Cart Jobs Board Create Account Toggle navigation IEEE Computer Society Digital Library Jobs Tech News Resource Center Press Room Browse By Date Advertising About Us IEEE IEEE Computer Society IEEE Computer Society Digital Library My Subscriptions Magazines Journals Conference Proceedings Institutional Subscriptions IEEE IEEE Computer Society More Jobs Tech News Resource Center Press Room Browse By Date Advertising About Us Cart All Advanced Search Conference Cover Image Download 1.Home 2.Proceedings 3.icse 2019 Artifact Evaluation Committee of ICSE 2019 2019, pp. 43-43, DOI Bookmark: 10.1109/ICSE.2019.00017 Keywords Authors Artifact Evaluation Committee of ICSE 2019 , ,Silvia Abrah\u00e3o , ,Universitat Polit\u00e8cnica de Val\u00e8ncia, Spain ,Hamid Bagheri , ,University of Nebraska-Lincoln, USA ,David Benavides ,\u2026", "num_citations": "0\n", "authors": ["81"]}
{"title": "Swarup Mohalik\n", "abstract": " Subreviewers Page 1 Subreviewers Ahmad Abdellatif Concordia University, USA Alexandre Bartel University of Luxembourg, Luxembourg Kang Chen Southwest University, China Lu\u00eds Cruz University of Porto, Portugal Amleto Di Salle University of L\u2019Aquila, Italy Sebasti\u00e1n Echeverr\u00eda Carnegie Mellon Software Engineering Institute, USA Mirco Franzago University of L\u2019Aquila, Italy Ari Gam Tel Aviv University, Israel Joshua Garcia University of California - Irvine, USA Negar Ghorbani University of California - Irvine, USA Maayan Goldstein Nokia Bell Labs Simon Greiner Karlsruhe Institute of Technology, Israel Sarra Habchi University Lille 1 \u2013 Inria, France Marinos Kintis University of Luxembourg, Luxembourg Clemens Lachner TU Wien, Austria Francesco Leotta Sapienza University of Rome, Italy Kirshan Luhana Luhana Graz University of Technology, Austria Andrea Marrella Sapienza University of Rome, Italy H\u00e9ctor \u2026", "num_citations": "0\n", "authors": ["81"]}
{"title": "ECASE 2017\n", "abstract": " Presents the introductory welcome message from the conference proceedings. May include the conference officers' congratulations to all involved with the conference event and publication of the proceedings record.", "num_citations": "0\n", "authors": ["81"]}
{"title": "A framework that supports software architecture-based development of robotic systems is accessible to nonexperts in robotics, deals effec-tively with heterogeneity in\u00a0\u2026\n", "abstract": " 62 resulting in reusable design and implementation frameworks. However, these approaches tend to neglect critical software engineering issues, including\u2022 exploration of the design space and of the effective software design solutions within that space, needed both for the initial system design and subsequent dynamic runtime adaptations;\u2022 modeling the distributed software-intensive system that is deployed on a set of robot (and possibly traditional) platforms as opposed to modeling robotic algorithms;\u2022 analysis of the system models for key properties before constructing and deploying the system and during dynamic adaptations;\u2022 traceability of the design-time artifacts, such as components and connectors to implementation constructs; and\u2022 support for heterogeneous development and deployment platforms.Our approach aims to remedy these shortcomings. The basis of this work is software architecture, 3 a set of\u00a0\u2026", "num_citations": "0\n", "authors": ["81"]}
{"title": "ICSE 2016\n", "abstract": " Demonstrations Committee IEEE.org Help Cart Jobs Board Create Account Toggle navigation IEEE Computer Society Digital Library Jobs Tech News Resource Center Press Room Browse By Date Advertising About Us IEEE IEEE Computer Society IEEE Computer Society Digital Library My Subscriptions Magazines Journals Conference Proceedings Institutional Subscriptions IEEE IEEE Computer Society More Jobs Tech News Resource Center Press Room Browse By Date Advertising About Us Cart All Advanced Search Conference Cover Image Download 1.Home 2.Proceedings 3.icse-c 2016 Demonstrations Committee 2016, pp. xxxiii-xxxiii, DOI Bookmark: Keywords Authors Abstract Provides a listing of current committee members and society officers. Demonstrations Committee ,ICSE 2016 , , ,Aditya Nori (Co-Chair) ,Microsoft Research, UK ,Yuanfang Cai (Co-Chair) ,Drexel University, USA ,Aws Albarghouthi ,\u2026", "num_citations": "0\n", "authors": ["81"]}
{"title": "ECASE 2017\n", "abstract": " ECASE 2017 Steering Committee | IEEE Conference Publication | IEEE Xplore ECASE 2017 Steering Committee Abstract: Provides a listing of current committee members and society officers. Published in: 2017 IEEE/ACM 1st International Workshop on Establishing the Community-Wide Infrastructure for Architecture-Based Software Engineering (ECASE) Article #: Date of Conference: 22-22 May 2017 Date Added to IEEE Xplore: 07 July 2017 ISBN Information: Electronic ISBN: 978-1-5386-0417-5 Print on Demand(PoD) ISBN: 978-1-5386-0418-2 INSPEC Accession Number: Persistent Link: https://xplorestaging.ieee.org/servlet/opac?punumber=7964631 More \u00bb Publisher: IEEE IEEE Account Change Username/Password Update Address Purchase Details Payment Options Order History View Purchased Documents Profile Information Communications Preferences Profession and Education Technical Interests Need \u2026", "num_citations": "0\n", "authors": ["81"]}
{"title": "2017 IEEE/ACM 1st International Workshop on Establishing the Community-Wide Infrastructure for Architecture-Based Software Engineering (ECASE 2017)\n", "abstract": " The following topics are dealt with: software engineering; software design; software testing; and software architecture.", "num_citations": "0\n", "authors": ["81"]}
{"title": "Economic Research Team Event\n", "abstract": " The US economy has been changing over the years because of outsourcing. In addition, companies have decided to move their businesses offshore. This has had a negative effect on the US economy because of decreased GDP and a higher unemployment rate. And in order to solve this problem, we propose that the United States lower taxes on businesses, create more free-trade agreements with other countries and establish a 3-month tax-free policy for businesses.", "num_citations": "0\n", "authors": ["81"]}
{"title": "RoboPrism, a framework that supports software-architecture-based de-velopment of robotic systems, is accessible to nonexperts in robotics, deals effectively with heterogeneity\u00a0\u2026\n", "abstract": " 63 MAY 2011 resulting in reusable design and implementation frameworks. However, these approaches tend to neglect critical software engineering issues, including\u2022 exploration of the design space and of the effective software design solutions within that space, needed both for the initial system design and subsequent dynamic runtime adaptations;\u2022 modeling the distributed software-intensive system that is deployed on a set of robot (and possibly traditional) platforms as opposed to modeling robotic algorithms;\u2022 analysis of the system models for key properties before constructing and deploying the system and during dynamic adaptations;\u2022 traceability of the design-time artifacts, such as components and connectors to implementation constructs; and\u2022 support for heterogeneous development and deployment platforms.Our approach aims to remedy these shortcomings. The basis of this work is software architecture, 3 a set of principal design decisions about a software-intensive system embodied in the system\u2019s components (operational entities that perform computation), connectors (entities that facilitate interaction and coordination among components), and configurations (assemblies of components and connectors into system-specific topologies). Our approach uses a robotics system\u2019s architectural basis to address the five problem areas.", "num_citations": "0\n", "authors": ["81"]}
{"title": "1 Mobile Security, Testing, and Analysis\n", "abstract": " Among mobile devices, Android has become the dominant platform, capturing a large majority of the mobile smartphone market. The widespread use of Android and the lower barrier to entry for amateur and professional developers alike has resulted in a wide variety of defects and vulnerabilities in Android apps. Android\u2019s popularity has also made it a target of malicious apps. To address these security challenges with respect to Android apps, I have constructed or worked on techniques that automatically generate exploits for Android apps [3]; perform lightweight, accurate, and obfuscation-resilient analysis of Android apps to determine if they are malicious by analyzing managed code (ie, Java code), code that uses reflection, and native code [4]; and perform analysis for apps that work together to escalate privileges [1]. I have further worked on a taxonomy and qualitative comparison of the literature about program\u00a0\u2026", "num_citations": "0\n", "authors": ["81"]}