{"title": "OWL 2 web ontology language: Structural specification and functional-style syntax\n", "abstract": " The OWL 2 Web Ontology Language, informally OWL 2, is an ontology language for the Semantic Web with formally defined meaning. OWL 2 ontologies provide classes, properties, individuals, and data values and are stored as Semantic Web documents. OWL 2 ontologies can be used along with information written in RDF,", "num_citations": "1033\n", "authors": ["1862"]}
{"title": "ConGolog, a concurrent programming language based on the situation calculus\n", "abstract": " As an alternative to planning, an approach to high-level agent control based on concurrent program execution is considered. A formal definition in the situation calculus of such a programming language is presented and illustrated with some examples. The language includes facilities for prioritizing the execution of concurrent processes, interrupting the execution when certain conditions become true, and dealing with exogenous actions. The language differs from other procedural formalisms for concurrency in that the initial state can be incompletely specified and the primitive actions can be user-defined by axioms in the situation calculus. Some mathematical properties of the language are proven, for instance, that the proposed semantics is equivalent to that given earlier for the portion of the language without concurrency.", "num_citations": "747\n", "authors": ["1862"]}
{"title": "OWL 2 web ontology language profiles\n", "abstract": " The OWL 2 Web Ontology Language, informally OWL 2, is an ontology language for the Semantic Web with formally defined meaning. OWL 2 ontologies provide classes, properties, individuals, and data values and are stored as Semantic Web", "num_citations": "606\n", "authors": ["1862"]}
{"title": "Linear temporal logic and linear dynamic logic on finite traces\n", "abstract": " In this paper we look into the assumption of interpreting LTL over finite traces. In particular we show that LTL f, ie, LTL under this assumption, is less expressive than what might appear at first sight, and that at essentially no computational cost one can make a significant increase in expressiveness while maintaining the same intuitiveness of LTL f. Indeed, we propose a logic, LDL f for Linear Dynamic Logic over finite traces, which borrows the syntax from Propositional Dynamic Logic PDL, but is interpreted over finite traces. Satisfiability, validity and logical implication (as well as model checking) for LDL f are PSPACE-completeas for LTL f (and LTL).", "num_citations": "382\n", "authors": ["1862"]}
{"title": "TBox and ABox reasoning in expressive description logics.\n", "abstract": " A Description Logic (DL) system is characterized by four fundamental aspects: the set of constructs used in concept and role expressions, the kind of assertions allowed in the TBox (assertions on concepts) and the ABox (assertions on individuals), and the inference mechanisms for reasoning on both the TBox and the ABox. Most of the research done in the last decade made several simplifying assumptions on the above aspects. However, the recent interest in DLs exhibited in many application areas (databases, software engineering, intelligent access to the network, planning, etc.) calls for investigating DL systems with full capabilities. The work presented in this paper represents a step in this direction. We present a sound, complete, and terminating (in worst-case EXPTIME) inference procedure that solves the problem of reasoning in a DL system with the following characteristics: it comes equipped with a very expressive language, it allows the most general form of TBox assertions, and it takes into account instance assertions on both concepts and roles in the ABox.", "num_citations": "275\n", "authors": ["1862"]}