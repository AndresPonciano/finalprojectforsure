{"title": "On the definition of software system architecture\n", "abstract": " Although several defi nitions of \u201csoftware architecture\u201d have been presented, none of them to date enable a reviewer confronted with a complex of diagrams and symbols to determine whether it is an architecture for a system or not. We present a defi nition of \u201csoftware system architecture\u201d which provides a set of criteria for making this determination. It is based on making the architectural rationale a fi rst-class citizen in the defi nition, and on requiring the rationale to ensure that the architecture\u2019s components, connections, and constraints defi ne a system that will satisfy a set of defi ned stakeholder needs for the system.", "num_citations": "148\n", "authors": ["413"]}
{"title": "The COCOMO 2.0 software cost estimation model\n", "abstract": " CiNii \u8ad6\u6587 - The COCOMO 2.0 software cost estimation model CiNii \u56fd\u7acb\u60c5\u5831\u5b66\u7814\u7a76\u6240 \u5b66\u8853 \u60c5\u5831\u30ca\u30d3\u30b2\u30fc\u30bf[\u30b5\u30a4\u30cb\u30a3] \u65e5\u672c\u306e\u8ad6\u6587\u3092\u3055\u304c\u3059 \u5927\u5b66\u56f3\u66f8\u9928\u306e\u672c\u3092\u3055\u304c\u3059 \u65e5\u672c\u306e\u535a\u58eb\u8ad6\u6587\u3092\u3055\u304c\u3059 \u65b0\u898f\u767b\u9332 \u30ed\u30b0\u30a4\u30f3 English \u691c\u7d22 \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u9589\u3058\u308b \u30bf\u30a4\u30c8\u30eb \u8457\u8005\u540d \u8457\u8005ID \u8457\u8005 \u6240\u5c5e \u520a\u884c\u7269\u540d ISSN \u5dfb\u53f7\u30da\u30fc\u30b8 \u51fa\u7248\u8005 \u53c2\u8003\u6587\u732e \u51fa\u7248\u5e74 \u5e74\u304b\u3089 \u5e74\u307e\u3067 \u691c\u7d22 \u691c\u7d22 \u691c\u7d22 CiNii\u7a93\u53e3 \u696d\u52d9\u306e\u518d\u958b\u306b\u3064\u3044\u3066 The COCOMO 2.0 software cost estimation model BOEHM Barry \u88ab\u5f15\u7528 \u6587\u732e: 1\u4ef6 \u8457\u8005 BOEHM Barry \u53ce\u9332\u520a\u884c\u7269 American Programmer American Programmer, 1996 \u88ab\u5f15\u7528\u6587\u732e: 1\u4ef6\u4e2d 1-1\u4ef6\u3092 \u8868\u793a 1 \u7d44\u8fbc\u307f\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u6539\u9020\u6642\u306e\u4f5c\u696d\u914d\u5206\u3092\u5bb9\u6613\u306b\u3059\u308b\u5c0f\u898f\u6a21\u306a\u6539\u9020 \u5de5\u6570\u306e\u898b\u7a4d\u3082\u308a\u5c3a\u5ea6\u306e\u63d0\u6848 \u962a\u4e95 \u8aa0 , \u4e45\u4fdd\u7530 \u76ca\u53f2 , \u677e\u672c \u5065\u4e00 , \u9ce5\u5c45 \u5b8f\u6b21 \u96fb\u5b50\u60c5\u5831\u901a\u4fe1\u5b66\u4f1a\u6280\u8853 \u7814\u7a76\u5831\u544a. SS, \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b5\u30a4\u30a8\u30f3\u30b9 98(675), 39-46, 1999-03-18 \u53c2\u8003\u6587\u732e15\u4ef6 \u5927\u5b66\u5171\u540c\u5229\u7528 \u6a5f\u95a2\u30b7\u30f3\u30dd\u30b8\u30a6\u30e0 Tweet \u5404\u7a2e\u30b3\u30fc\u30c9 NII\u8ad6\u6587ID(NAID) 10022232477 \u8cc7\u6599\u7a2e\u5225 \u96d1\u8a8c\u8ad6\u6587 \u30c7\u30fc\u30bf\u306b/\u2026", "num_citations": "118\n", "authors": ["413"]}
{"title": "Quantifying the Effects of Process Improvement on Effort\n", "abstract": " When organizations make many improvements concurrently, software project managers have no way of determining how much improvement is due to process maturity versus other factors. Using a 161-project sample, the article isolates the effects on effort of process maturity versus other effects, concluding that an increase of one process maturity level can reduce development effort by 4% to 11%.", "num_citations": "94\n", "authors": ["413"]}
{"title": "The Effects of Software Process Maturity on Software Development Effort\n", "abstract": " A software product is often behind schedule, over budget, non-conforming to requirements and of poor quality. Controlling and improving the processes used to develop software has been proposed as a primary remedy to these problems. The Software Engineering Institute at Carnegie Mellon University has published the Software Capability Maturity Model (SW-CMM) for use as a set of criteria to evaluate an organization's Process Maturity. The model is also used as a roadmap to improve a software development process's maturity. The premise of the CMM is that mature development processes deliver products on time, within budget, within requirements, and of high quality.", "num_citations": "92\n", "authors": ["413"]}
{"title": "Added Sources of Costs in Maintaining COTS-Intensive Systems\n", "abstract": " Ten years ago, work was begun at the Center for Systems and Software Engineering at the University of Southern California to develop a cost model for commercial off-the-shelf (COTS)-based software systems1. A series of interviews were conducted to collect data to calibrate this model 2. A total of 25 project managers were interviewed; for eight of these projects, data was collected during the original system development and maintenance phases. A common sentiment heard from the people maintaining these systems was that they turned out to be more expensive to maintain than originally envisioned and, in fact, were more costly than a comparable custom-built system. At the same time, several people expressed frustration about the difficulty of communicating to upper management the reasons why COTS-based systems were so expensive to maintain. Anecdotal evidence from these interviews is used to discuss the added sources of maintenance cost. Three different approaches or strategies for system maintenance were observed and are summarized in this article.", "num_citations": "27\n", "authors": ["413"]}
{"title": "Cost modeling process maturity-COCOMO 2.0\n", "abstract": " This paper discusses a research effort to determine the effect that Software Process Maturity has on software development effort. Case studies to date report a cumulative positive effect when increasing the Process Maturity on a project and across an Organization. A new software cost estimation model, COCOMO 2.0, is used to account of all of the factors that influence effort thus permitting the isolation of Process Maturity's effects. The results of this research will identify a short-term gain from investing in software process improvement.", "num_citations": "9\n", "authors": ["413"]}
{"title": "Calibration Approach and Results of the COCOMO II Post-Architecture Model\n", "abstract": " Calibration Approach and Results of the COCOMO II Post- Architecture Model Page 1 1 Calibration Approach and Results of the COCOMO II PostArchitecture Model Sunita Devnani-Chulani (sdevnani@sunset.usc.edu), Brad Clark, Barry Boehm, Bert Steece ISPA \u201898 Copyright USC-CSE 1998 Page 2 Outline \u00b2 Brief History of COCOMO x COCOMO II.1997 \u2013 Process \u2013 Prediction Accuracies \u2013 Comparison with COCOMO \u201881 x Updates and Plans \u2013 Plans for Improving Prediction Accuracies \u2013 COCOMO II Research Aim \u2013 Effects of Process Maturity on Effort x Information Sources 2 Copyright USC-CSE 1998 Page 3 COnstructive COst MOdel (COCOMO) x COCOMO published since 1981 x Commercial implementations of COCOMO y CoCoPro, CB COCOMO, COCOMOID, COSTMODL, GECOMO Plus, SECOMO, etc. x Other models based on COCOMO y REVIC, Gulezian x COCOMO II y Research effort started in 1994 to \u2019\u2026", "num_citations": "4\n", "authors": ["413"]}
{"title": "Agile software development cost modeling for the US DoD\n", "abstract": " In this presentation, Dr. Boehm proposes a model for estimating the effort that will be needed to complete Agile software development projects. Previous estimation capabilities often require information such as function points, story points, or lines of code that are not available early for agile projects. For this work the team used initial and final Software Resource Data Reports from the Cost Assessment Data Enterprise or CADE (of the Office of the Secretary of Defense (OSD) Cost Assessment and Program Evaluation (CAPE) initiative) to tie actual effort and processes to initial estimates. The proposed Agile Effort Estimation Model uses a combination of three variables to provide estimates, including the number of software requirements at contract start, an initial estimate of peak staffing, and which \u201csuper-domain\u201d the project fits within.", "num_citations": "1\n", "authors": ["413"]}
{"title": "An Overview of the Schedule Compliance Risk Assessment Methodology (SCRAM)\n", "abstract": " Methodology (SCRAM) provides a framework for identifying and communicating the root causes of schedule slippage and recommendations for going forward to Program and Executive-level management. It is based on a repeatable process that uses a root cause analysis of schedule slippage model to locate factors that impact program schedule along with a \u201chealth check\u201d of the documented schedule, assessing its preparation and probability distribution of completion dates. SCRAM can be used at the commencement of a program to validate a proposed schedule and identify potential risks, during program execution as a \u201chealth check\u201d, or as a diagnostic tool to identify root causes when schedule slippage occurs. To date, SCRAM has been applied to a number of major development acquisition programs in Australia and the United States.", "num_citations": "1\n", "authors": ["413"]}
{"title": "Reconfigurable software development\n", "abstract": " Offers a concept called reconfigurable software to save on software costs. Reconfigurable software is software for real-time embedded systems that is characterized as portable, modular and schedulable. Portability is achieved by use of a high-order language and machine-independent time management. Modularity is achieved using abstract data types. The rate monotonic scheduling theory is used for analysis of schedulability. Ada is the most suitable high-order language to meet the characteristics of reconfigurable software.< >", "num_citations": "1\n", "authors": ["413"]}