{"title": "Self-organizing urban traffic control architecture with swarm-self organizing map in Jakarta: Signal control system and simulator\n", "abstract": " Urban traffic control is the main factor that contributes to traffic jam. Approach in distributed Urban traffic control has been developed in several research, but the coordinating controller factor is basically a quite complicated task to tackle, because between intersection have dependency, so required a method of distributed control system capable for synchronizing between intersections. In this paper we present architecture of decentralized self-organizing traffic control with swarm-self organizing map in real situation even on non-structure intersections like in Jakarta (Indonesia). Based on the proposed architecture we have been implemented Traffic Signal Control System for controlling traffic lights in which the coordination between the intersections is implemented using distributed swarm self-organizing map. Traffic Signal Control System were tested in a simulated real-road scenario of Jakarta. By means of the computer simulation, the application of distributed swarm signal self-organizing control is proved effective in urban traffic.", "num_citations": "20\n", "authors": ["1260"]}
{"title": "A framework for modelling variable microservices as software product lines\n", "abstract": " Microservices architecture is a software development style that divides software into several small, independently deployable services. Every service can be invoked by standard protocols such as HTTP, so it can be used on a variety of platforms (e.g. mobile, web, desktop). The diversity of users of microservices-based software causes an increased variation in software requirements. In order to accommodate this variability, we propose a framework for microservices-based software based on the Software Product Line Engineering (SPLE) approach. We call this framework ABS Microservices Framework, as it relies on the Abstract Behavioral Specification (ABS) language development platform that readily supports SPLE. The framework created in this research has shown more flexibility to accommodate software variability than other microservices frameworks. Hence, the ABS Microservices Framework can\u00a0\u2026", "num_citations": "19\n", "authors": ["1260"]}
{"title": "A survey on embedding programming logics in a theorem prover\n", "abstract": " Theorem provers were also called 'proof checkers' because that is what they were in the beginning. They have grown powerful, however, capable in many cases to automatically produce complicated proofs. In particular, higher order logic based theorem provers such as HOL and PVS became popular because the logic is well known and very expressive. They are generally considered to be potential platforms to embed a programming logic for the purpose of formal verification. In this paper we investigate a number of most commonly used methods of embedding programming logics in such theorem provers and expose problems we discover. We will also propose an alternative approach : hybrid embedding.", "num_citations": "19\n", "authors": ["1260"]}
{"title": "A platform for charities system generation with SPL approach\n", "abstract": " There has been an increasing number of charities worldwide. However, transparency and imbalanced distribution are still critical issues in this sector. Despite the Web has been exploited for several purposes in numerous sectors, its potential has not been fully employed by not-for-profit organizations. Due to the variability of the organizations, it is not easy to provide a one application-fit-all open source applications. Many small organizations are very active but still lack of qualified resources to provide IT supports. Thus, we endeavour to develop an adaptive system for different charity organizations in a single development with Software Product Lines (SPL) as its approach to deal with the charities problems. In this paper, we introduce a platform to generate the charities systems with ABS as a core architecture to support SPL. We present how the products are generated by the system. However, the system does not\u00a0\u2026", "num_citations": "7\n", "authors": ["1260"]}
{"title": "A unity-based framework towards component based systems\n", "abstract": " Compositionality provides the foundation of software modularity, re-usability and separate verification of software components. One of the known difficulties, when separately verifying components, is producing compositional proofs for progress properties of distributed systems. This paper offers a UNITY-based framework to model distributed applications which are built with a component based approach. The framework enables components to be abstractly specified in terms of contracts. Temporal properties are expressed and proven in the UNITY style. Compositional reasoning about components\u2019 properties, including progress, is supported. The semantical model is simple and intuitive.", "num_citations": "7\n", "authors": ["1260"]}
{"title": "Model-Driven Engineering for Delta-Oriented Software Product Lines\n", "abstract": " Software product line engineering (SPLE) is an approach in software development that produces various products based on commonality and variability. SPLE maintains the product variations within two main phases: domain engineering and application engineering. Lack of adequate technology and tools support is one of the problems in adopting SPLE. In this research, a model-driven approach based on delta-oriented programming is proposed for SPLE. The process starts with the domain analysis phase by defining a feature diagram and Unified Modeling Language (UML) based on existing systems. While those models represent the problem domain, delta-oriented programming with abstract behavioral specification? (ABS) language is used in the solution domain. This approach is supported by automated model transformations, which transform the feature diagram and UML to ABS models. A code generator\u00a0\u2026", "num_citations": "4\n", "authors": ["1260"]}
{"title": "Modeling multi software product lines using UML\n", "abstract": " We choose Unified Modeling Language (UML) as the foundation to model the proposed solution of the Multi Software Product Lines (MPL) interoperability challenge. The proposed pseudo-code is modeled as an extension of the UML meta-model to support MPL. The model serves to provide a standard representation of MPL and an intuitive transformation to an Object-Oriented Programming (OOP) language. Some extension to the UML that yet to have intuitive translation into common OO language are augmented with a mechanism using a build automation system. This mechanism provides manual transformation that gives us some hints whether the proposed solution fulfilled the evaluation criteria. The given challenge case has been written in our proposed pseudo-code, modeled in our UML extension, and translated into Java source code and Gradle build scripts. By invoking Gradle tasks, we can simulate\u00a0\u2026", "num_citations": "4\n", "authors": ["1260"]}
{"title": "Theorem prover supported logics for small imperative languages\n", "abstract": " This report describes a simple imperative programming language L0 and its logic, which are integrated to the theorem prover HOL through syntactical embedding. The approach allows HOL\u2019s own type checker to be reused and its concrete syntax to be, to some degree, customized. The logic of L0 is Hoare-based and is completely syntax driven. Depending on how we limit its assertion language it can be made first order. A possible application of L0 is to use it as a core in rapid prototyping of small imperative languages with integrated verification support. This report gives two examples of new languages built on L0: a language to write a suite of L0-unit tests and a language for scripting database transactions.", "num_citations": "4\n", "authors": ["1260"]}
{"title": "Self-organizing Control of Urban Traffic Signal Based on Multiway Intersection Offset-setting Model\n", "abstract": " This paper proposes a model of distributed self-organizing traffic control with self-organizing map in real situation. This model can be used as a general setting for controlling almost any type of intersection. It uses nonlinear coupled oscillator with multiway intersection and automatically adjusts the cycle time, split, and offset parameter of the controller. Results show increased speed and reduced delay under all traffic conditions.", "num_citations": "3\n", "authors": ["1260"]}
{"title": "Mechanization of invasive software composition in F-logic\n", "abstract": " F-Logic is originally developed to bridge between computational formalism and data specification language while providing clear object-oriented semantic. F-Logic provides partiality on attributes and methods. This partiality is also required by software composition in practice. Invasive Software Composition composes software component by applying invasive composition operator (composer) to adapt the component. This adaptation may involve partiality. The combination of object-oriented and partiality characteristic of F-Logic provides a promising framework for the mechanization of Invasive Software Composition including aspect separation.", "num_citations": "3\n", "authors": ["1260"]}
{"title": "A preliminary report on xMECH\n", "abstract": " This document reports the current development status of xMECH. It is an implementation of the so-called skin or hybrid embedding approach [1] for HOL. Its purpose is to enhance HOL's power and interaction to do software verification. xMECH features languages and logics to describe and verify sequential and distributed programs, a reasonably rich expression language to write specifications, and optimized verification condition generators. It is available for public use, but it is still in a prototype phase, with limited features and user support. It comes with some simple demos, but doing a serious project with xMECH is not (yet) recommended for an inexperienced user.", "num_citations": "3\n", "authors": ["1260"]}
{"title": "Database Generator to Support Product Derivation in SPL\n", "abstract": " Software product line (SPL) is a methodology to develop application variants with feature variability to accommodate user needs in a specific market. This methodology can be supported by the Abstract Behavioral Specification (ABS) modeling language. With the use of delta-oriented programming (DOP) in ABS, the development process to produce application variants in SPL can be automated. However, feature variability of an application variant could affect the design and implementation of the database schema of the application during product derivation phase in SPL, if the feature is related to the data storage of the application. This crucial thing is not handled by the management technique of variability in SPL which makes database schema might be inconsistent and incompatible with the application requirements. In this study, we successfully implement a tool to generate a compatible relational database\u00a0\u2026", "num_citations": "2\n", "authors": ["1260"]}
{"title": "Feature grouping using the abstract behavioral specification language\n", "abstract": " Software Product Line Engineering (SPLE) aims to produce variant-rich software with features based on diverse user requirements. SPLE uses the term feature to express system commonalities and variabilities. The Abstract Behavioral Specification (ABS) is an executable modeling language that supports SPLE. It uses feature models to declare and organize software variability as a tree of nested features. Users select the specific features they need based on this feature model. Such a selection process can be a too complex task if the number of features is quite large. In this research we propose to apply a grouping mechanism to the features of a feature model in order to reduce the complexity of the feature selection performed by the user. Using this mechanism the user selects the features in a software product based on groups instead of the more complex original feature model structure. We implemented the\u00a0\u2026", "num_citations": "2\n", "authors": ["1260"]}
{"title": "Feature model-to-ontology for spl application realisation\n", "abstract": " Feature model are widely used to capture commonalities and variabilities of artefacts in Software Product Line (SPL). Several studies have discussed the formal representation of feature diagram using ontologies with different styles of mapping. However, they still focused on the ontology approach for problem space and keep the solution space aside. In this paper, we present the modelling of feature model using OWL ontology and produce an application based on the ontology. Firstly, we map the features in a running example feature diagram to OWL classes and properties. Secondly, we verify the consistency of the OWL ontology by using reasoning engines. Finally, we use the ontology as an input of Zotonic framework for application realisation.", "num_citations": "2\n", "authors": ["1260"]}
{"title": "Developing artifact with concept relationship oriented methodology: A progress report\n", "abstract": " In this paper we report partial progress of our research about system comprehension. We used levels of abstraction and decomposition strategy to reduce system complexity. Concept Relationship Oriented methodology is one of its result, the methodology can be used, to develop new artifact for reverse engineering. There are two significant reported activities: searching Concept Representation, and searching Structure of Concept. Searching Concept Representation was a process, to find a representation, proper or might exist less depend on artifact types (for example: unique concepts). In this stage dependency on level of abstraction still tight, but at the second stage we found the representation, Structure of Concept.", "num_citations": "2\n", "authors": ["1260"]}
{"title": "Towards Reliable Component Software: Light-weight Formalism\n", "abstract": " The component software technology is a promising trend for rapid software development. However, one of the problems of software engineering is still inherited, which is the high cost of program verification. Moreover, not just the component, but also the composition of components is a subject for verification. In the direction of component software free-trade market, verification concerns become more important. A well defined formal foundation on component framework is required to solve it. We introduce a formal lightweight framework to analyse and verify the use of software component. We define some agreements on developing the component and its composition within a framework. By obeying those agreements, we argue that the verification cost, especially on progress property can be reduced. Some theorems that provide the judgement of those agreements are described. We first discuss how the underlying formalism is developed based on a variant of UNITY logic. This work reported in this extended abstract is part of an ongoing research. It contributes to a more reliable software product in the future.", "num_citations": "2\n", "authors": ["1260"]}
{"title": "A formalism for component framework\n", "abstract": " ARIANE 5 Flight 501 Failure Report said: 3.2 The failure of the Ariane 501 was caused by the complete loss of guidance and attitude information 37 seconds after start of the main engine ignition sequence (30 seconds after lift-off). This loss of information was due to specification and design errors in the software of the inertial reference system.... occurred 36.7 seconds after launch, when the guidance system's own computer tried to convert one piece of data--the sideways velocity of the rocket--from a 64-bit format to a 16-bit format.", "num_citations": "2\n", "authors": ["1260"]}
{"title": "Variability management: re-engineering microservices with delta-oriented software product lines\n", "abstract": " Combining microservices and software product line engineering (SPLE) is a challenge in variability management. This paper proposes a solution to that challenge by re-engineering existing webshop systems into a product line application. We first perform feature identification to analyze the features of subject systems. We introduce a mechanism that models the variability and designs a software product line architecture based on existing features. We use a UML diagram with the UML-DOP profile to abstract microservice variability in SPLE. Then, a transformation into a product line application is conducted to generate running applications based on selected features. We utilize a preliminary framework of microservice variability based on delta-oriented programming.", "num_citations": "1\n", "authors": ["1260"]}
{"title": "Modeling Requirements of Multiple Single Products to Feature Model\n", "abstract": " This work investigates how the requirements of multiple single products can be modeled into a feature model as part of domain engineering process in software product line engineering (SPLE) methodology. It adopts an extractive strategy in devising a two-step process for creating the feature model. The first step is by identifying the business process and list of features across all products into a product roadmap. The second step is identifying the commonality and variability of features based on the product roadmap into a feature model. The proposed approach may help a software company that produces software products for certain domain to migrate from traditional single product development lifecycle to software product line development lifecycle.", "num_citations": "1\n", "authors": ["1260"]}
{"title": "Proposed User Interface Generation for Software Product Lines Engineering\n", "abstract": " Software Product Line Engineering (SPLE) is an approach that enables user to create multiple products in a single development. The combination of features in a SPLE application causes variation in the user interface. It needs an adaptive user interface with each configuration of the selected features. Interaction Flow Modeling Language (IFML) is a modeling language of Object Management Group (OMG), used to model User Interface (UI) of an application. Using IFML as a modeling language, an abstract UI model will be created to model each feature of the SPLE application. This study uses AISCO (Adaptive Information System for Charity Organizations) as a real case study. This research aims to analyze SPLE application modeling using abstract UI model model and propose a new strategy to generate UI in SPLE. The result of this research is the process of generating UI using IFML in SPLE.", "num_citations": "1\n", "authors": ["1260"]}
{"title": "Generating adaptable user interface in SPLE: using delta-oriented programming and interaction flow modeling language\n", "abstract": " We explore the possibility of including Delta-Oriented Programming (DOP) and Abstract User Interface (AUI) model during product generation in Software Product Line Engineering (SPLE). Previous work showed that DOP is applicable in a SPLE for Web applications albeit User Interface (UI) elements in derived product are still manually created without UI modeling. AUI model is proven to be successful for modeling UI elements for products in SPLE as it can model generic UI elements while still encouraging customization. Therefore, we pick an existing AUI modeling language called Interaction Flow Modeling Language (IFML) to create model of UI elements in a SPLE. We also suggest a new SPLE design that follows DOP and the proposed UI modeling language to generate adaptable UI given product configuration. The process of designing UI for each feature in the product line is based on reference\u00a0\u2026", "num_citations": "1\n", "authors": ["1260"]}
{"title": "Abs microservices and ontology-zotonic integration for spl implementation in information system\n", "abstract": " Software Product Line (SPL) promises to accelerate the development process with higher quality of product and low budget of production. The essential key of SPL is feature diagram which describes the relation between features for the domain and captures the commonalities and variabilities. The approach gains numerous attention in research and industry area. However, the implementation of SPL approach for information system development is still inadequate. Some works explain the inclusion of ontology for SPL such as having feature diagram in ontology language. The inclusion benefits to produce an information system automatically. On the other side, the executable modelling language such as Abstract Behavioural Specification (ABS) can be utilized to implement the feature diagram for distributed object-oriented systems. The trend of ABS expands to accommodate micro-services-based software\u00a0\u2026", "num_citations": "1\n", "authors": ["1260"]}
{"title": "LinguSQL: A Verification and Transformation Tool for Database Application\n", "abstract": " Lingu is an experimental abstract language for programming database scripting. This language includes verification and validation as an integral part of its programming. The verification and validation ensures the application is capable to be used in critical operation. The programming of Lingu itself does not produces a working code, instead it produce an abstract code that describes program logic. This abstract language is transformed into a concrete language, such as C or Java, intended to be used in real operation. This paper discuss about the development of LinguSQL. LinguSQL is a tool for verifying and transforming Lingu script. Currently the development of LinguSQL is in prototyping phase. We hope that the prototype will provide a clear guidance in further development.", "num_citations": "1\n", "authors": ["1260"]}
{"title": "Towards Automated Verification of Database Scripts\n", "abstract": " The article reports on our preliminary research activities towards the verification of database transaction scripts. It gives a first order specification language for database transaction scripts and its accompanying logic. The logic is expressed in terms of weakest pre-condition rules and is quite simple and intuitive. The logic is sound, and, if the underlying basic expression language is limited, specifications in our language are decidable. Tables in a database are usually guarded by various integrity constraints. At the moment the logic only supports single attribute primary key constraint. The language has been embedded in HOL theorem prover. A verification case study on Student Entrance Test Application is described.", "num_citations": "1\n", "authors": ["1260"]}
{"title": "! UNITY: A Theory of General UNITY\n", "abstract": " UNITY is a simple programming logic to reason about distributed systems. It is especially attractive because of its elegant axiomatical style. Since its power is limited, people introduce variants to extends it with various new functionalities. However, in the axiomatical style it is easy to make a mistake: a seemingly very logical new inference rule may turn out to be unsound. Formal verification is often necessary, but it is a time consuming task.\u2200 UNITYis a generalization of UNITY. It provides the same set of inference rules, but they are now derived from much more primitive (weaker) rules.\u2200 UNITYis provided as a HOL (a theorem prover) library, with all its derived rules mechanically verified. Using\u2200 UNITYa sound and complete UNITY variant (instance) can be quickly created by showing that the instance upholds\u2200 UNITYprimitive rules. Moreover, all theories one subsequently derives from\u2200 UNITYwill be valid for all\u2200 UNITYinstances.", "num_citations": "1\n", "authors": ["1260"]}