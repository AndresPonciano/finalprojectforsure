{"title": "Evaluation and Measurement of Software Process Improvement-A Systematic Literature Review\n", "abstract": " BACKGROUND-Software Process Improvement (SPI) is a systematic approach to increase the efficiency and effectiveness of a software development organization and to enhance software products. OBJECTIVE-This paper aims to identify and characterize evaluation strategies and measurements used to assess the impact of different SPI initiatives. METHOD-The systematic literature review includes 148 papers published between 1991 and 2008. The selected papers were classified according to SPI initiative, applied evaluation strategies, and measurement perspectives. Potential confounding factors interfering with the evaluation of the improvement effort were assessed. RESULTS-Seven distinct evaluation strategies were identified, wherein the most common one, \u201cPre-Post Comparison,\u201d was applied in 49 percent of the inspected papers. Quality was the most measured attribute (62 percent), followed by Cost (41\u00a0\u2026", "num_citations": "334\n", "authors": ["1466"]}
{"title": "A method for evaluating rigor and industrial relevance of technology evaluations\n", "abstract": " One of the main goals of an applied research field such as software engineering is the transfer and widespread use of research results in industry. To impact industry, researchers developing technologies in academia need to provide tangible evidence of the advantages of using them. This can be done trough step-wise validation, enabling researchers to gradually test and evaluate technologies to finally try them in real settings with real users and applications. The evidence obtained, together with detailed information on how the validation was conducted, offers rich decision support material for industry practitioners seeking to adopt new technologies and researchers looking for an empirical basis on which to build new or refined technologies. This paper presents model for evaluating the rigor and industrial relevance of technology evaluations in software engineering. The model is applied and validated in\u00a0\u2026", "num_citations": "319\n", "authors": ["1466"]}
{"title": "Requirements abstraction model\n", "abstract": " Software requirements arrive in different shapes and forms to development organizations. This is particularly the case in market-driven requirements engineering, where the requirements are on products rather than directed towards projects. This results in challenges related to making different requirements comparable. In particular, this situation was identified in a collaborative effort between academia and industry. A model, with four abstraction levels, was developed as a response to the industrial need. The model allows for placement of requirements on different levels and supports abstraction or break down of requirements to make them comparable to each other. The model was successfully validated in several steps at a company. The results from the industrial validation point to the usefulness of the model. The model will allow companies to ensure comparability between requirements, and hence it\u00a0\u2026", "num_citations": "292\n", "authors": ["1466"]}
{"title": "A practitioner's guide to light weight software process assessment and improvement planning\n", "abstract": " Software process improvement (SPI) is challenging, particularly for small and medium sized enterprises. Most existing SPI frameworks are either too expensive to deploy, or do not take an organizations\u2019 specific needs into consideration. There is a need for light weight SPI frameworks that enable practitioners to base improvement efforts on the issues that are the most critical for the specific organization.This paper presents a step-by-step guide to process assessment and improvement planning using improvement framework utilizing light weight assessment and improvement planning (iFLAP), aimed at practitioners undertaking SPI initiatives. In addition to the guide itself the industrial application of iFLAP is shown through two industrial cases. iFLAP is a packaged improvement framework, containing both assessment and improvement planning capabilities, explicitly developed to be light weight in nature\u00a0\u2026", "num_citations": "168\n", "authors": ["1466"]}
{"title": "Requirements engineering: In search of the dependent variables\n", "abstract": " When software development teams modify their requirements engineering process as an independent variable, they often examine the implications of these process changes by assessing the quality of the products of the requirements engineering process, e.g., a software requirements specification (SRS). Using the quality of the SRS as the dependent variable is flawed. As an alternative, this paper presents a framework of dependent variables that serves as a full range for requirements engineering quality assessment. In this framework, the quality of the SRS itself is just the first level. Other higher, and more significant levels, include whether the project was successful and whether the resulting product was successful. And still higher levels include whether or not the company was successful and whether there was a positive or negative impact on society as a whole.", "num_citations": "114\n", "authors": ["1466"]}
{"title": "The impact of agile principles on market\u2010driven software product development\n", "abstract": " Agile development methods such as extreme programming (XP), SCRUM, Lean Software Development (Lean SD) and others have gained much popularity during the last years. Agile methodologies promise faster time\u2010to\u2010market, satisfied customers and high quality software. While these prospects are appealing, the suitability of agile practices to different domains and business contexts still remains unclear. In this article we investigate the applicability of agile principles in the context of market\u2010driven software product development (MDPD), focusing on pre\u2010project activities. This article presents results of a comparison between typical properties of agile methods to the needs of MDPD, as well as findings of a case study conducted at Ericsson, an early adopter of agile product development. The results show misalignment between the agile principles and needs of pre\u2010project activities in market\u2010driven development\u00a0\u2026", "num_citations": "109\n", "authors": ["1466"]}
{"title": "Technology transfer decision support in requirements engineering research: a systematic review of REj\n", "abstract": " One of the main goals of an applied research field such as requirements engineering is the transfer of research results to industrial use. To promote industrial adoption of technologies developed in academia, researchers need to provide tangible evidence of the advantages of using them. This can be done through industry validation, enabling researchers to test and validate technologies in a real setting with real users and applications. The evidence obtained, together with detailed information on how the validation was conducted, offers rich decision support material for industrial practitioners seeking to adopt new technologies. This paper presents a comprehensive systematic literature review of all papers published in the Requirements Engineering journal containing any type of technology evaluation. The aim is to gauge the support for technology transfer, i.e., to what degree industrial practitioners can\u00a0\u2026", "num_citations": "106\n", "authors": ["1466"]}
{"title": "Requirements engineering for safety-critical systems: A systematic literature review\n", "abstract": " ContextSafety-Critical Systems (SCS) are becoming increasingly present in our society. A considerable amount of research effort has been invested into improving the SCS requirements engineering process as it is critical to the successful development of SCS and, in particular, the engineering of safety aspects.ObjectiveThis article aims to investigate which approaches have been proposed to elicit, model, specify and validate safety requirements in the context of SCS, as well as to what extent such approaches have been validated in industrial settings. The paper will also investigate how the usability and usefulness of the reported approaches have been explored, and to what extent they enable requirements communication among the development project/team actors in the development of SCS.MethodWe conducted a systematic literature review by selecting 151 papers published between 1983 and 2014. The\u00a0\u2026", "num_citations": "83\n", "authors": ["1466"]}
{"title": "Industry evaluation of the requirements abstraction model\n", "abstract": " Software requirements are often formulated on different levels and hence they are difficult to compare to each other. To address this issue, a model that allows for placing requirements on different levels has been developed. The model supports both abstraction and refinement of requirements, and hence requirements can both be compared with each other and to product strategies. Comparison between requirements will allow for prioritization of requirements, which in many cases is impossible if the requirements are described on different abstraction levels. Comparison to product strategies will enable early and systematic acceptance or dismissal of requirements, minimizing the risk for overloading. This paper presents an industrial evaluation of the model. It has been evaluated in two different companies, and the experiences and findings are presented. It is concluded that the requirements abstraction\u00a0\u2026", "num_citations": "60\n", "authors": ["1466"]}
{"title": "Solutions in global software engineering: A systematic literature review\n", "abstract": " Global software engineering (GSE) has received increased attention, as globalization enables and encourages increased distribution of product development. Many empirical studies and systematic literature reviews (SLRs) focus on the identification of challenges, this paper however presents the first SLR collecting and analyzing solutions associated with GSE, while also evaluating the level of empirical validation of said solutions. As a starting point the paper presents a GSE model, designed to categorize solutions into process areas, useful for the analysis of the research community's contributions to state-of-the-art and identifying fundamental gaps in research. In addition, the model categorizing the solutions is populated with references and good-examples, useful for practitioners, which can use the model to find solutions to overall challenges in various process areas. The overall results of the systematic review\u00a0\u2026", "num_citations": "59\n", "authors": ["1466"]}
{"title": "Introduction of a process maturity model for market-driven product management and requirements engineering\n", "abstract": " The area of software product development of software intensive products has received much attention, especially in the area of requirements engineering and product management. Many companies are faced with new challenges when operating in an environment where potential requirements number in thousands or even tens of thousands, and where a product does not have a customer, but any number of customers or markets. The development organization carries not only all the costs of development, but also takes all the risks. In this environment traditional bespoke requirements engineering, together with traditional process assessment and improvement models fall short as they do not address the unique challenges of a market\u2010driven environment. This paper introduces the Market\u2010driven Requirements Engineering Process Model, aimed at enabling process improvement and process assurance for\u00a0\u2026", "num_citations": "58\n", "authors": ["1466"]}
{"title": "Requirements engineering supporting technical product management\n", "abstract": " Market-Driven Requirements Engineering (MDRE) handles the continuous flow of requirements in an engineering effort, and is not limited to a development instance but part of technical product management as a whole. The market-driven environment generates large amounts of requirements from multiple sources, internal and external, threatening to overload the technical management of products. MDRE involves requirements analysis, resource estimation, prioritization, and ultimately release planning. These activities allow for effectively deciding which customers get what features and quality at what point in time, making the accuracy and efficiency of MDRE a major determinant of the success of a product. This thesis presents research aimed at supporting technical product management in MDRE, based on needs identified in industry. One contribution of the thesis is the development and validation of a process assessment and improvement planning framework, making the identification of process improvement issues possible. The major characteristics of the framework can be described as resource efficiency and relative accuracy by utilizing multiple perspectives and data point triangulation. As a complement to the assessment, the improvement planning enables industry professionals to focus their efforts on one improvement package at a time, supporting step-by-step evolution with less time to return on investment. Challenges identified during process assessment using the framework resulted in the development of the Requirements Abstraction Model (RAM), which is the central contribution of the thesis. RAM employs multiple levels of\u00a0\u2026", "num_citations": "54\n", "authors": ["1466"]}
{"title": "Packaging software process improvement issues: a method and a case study\n", "abstract": " Software process improvement is a challenge in general and in particular for small\u2010 and medium\u2010sized companies. Assessment is one important step in improvement. However, given that a list of improvement issues has been derived, it is often very important to be able to prioritize the improvement proposals and also look at the potential dependencies between them. This paper comes from an industrial need to enable prioritization of improvement proposals and to identify their dependencies. The need was identified in a small\u2010 and medium\u2010sized software development company. Based on the need, a method for prioritization and identification of dependencies of improvement proposals was developed. The prioritization part of the method is based on a multi\u2010decision criteria method and the dependencies are identified using a dependency graph. The developed method has been successfully applied in the\u00a0\u2026", "num_citations": "51\n", "authors": ["1466"]}
{"title": "Requirements engineering for safety-critical systems: Overview and challenges\n", "abstract": " In a world that depends increasingly on complex, critical, and intertwined systems, requirements engineering is crucial to developing and maintaining safety-critical systems (SCSs). Researchers studied the state of the art (through the literature) and the state of the practice (through in-depth interviews with practitioners) to discover what approaches are available for capturing, specifying, and communicating safety requirements throughout the SCS lifecycle and to determine the remaining challenges.", "num_citations": "46\n", "authors": ["1466"]}
{"title": "A Method for Assessing Requirements Engineering Process Maturity in Software Projects\n", "abstract": " The area of Requirements Engineering is often underestimated in value in the area of Software Engineering. According to certain sources the failure rate of IT investments is over 60%. In addition problems introduced through the Requirements Engineering of a project accounts for something like 50% of the total debugging costs. The main reason for this is a low level of maturity pertaining to the Requirements Engineering process.This thesis introduces a model that can help organizations improve their Requirements Engineering process. A first step in process improvement is process evaluation. The REPM model has the purpose of measuring the maturity level of the Requirements Engineering process in projects, and to give a basis for what steps to take in order to improve on it. In addition to the model a method for using the model is introduced. The model and method are subsequently designed, implemented and validated.", "num_citations": "37\n", "authors": ["1466"]}
{"title": "Tool support for disseminating and improving development practices\n", "abstract": " Knowledge management in software engineering and software process improvement activities pose challenges as initiatives are deployed. Most existing approaches are either too expensive to deploy or do not take an organization\u2019s specific needs into consideration. There is thus a need for scalable improvement approaches that leverage knowledge already residing in the organizations. This paper presents tool support for an Experience Factory approach for disseminating and improving practices used in an organization. Experiences from using practices in development projects are captured in postmortems and provide iteratively improved decision support for identifying what practices work well and what needs improvement. An initial evaluation of using the tool for organizational improvement has been performed utilizing both academia and industry. The results from the evaluation indicate that\u00a0\u2026", "num_citations": "36\n", "authors": ["1466"]}
{"title": "Obsolete software requirements\n", "abstract": " ContextCoping with rapid requirements change is crucial for staying competitive in the software business. Frequently changing customer needs and fierce competition are typical drivers of rapid requirements evolution resulting in requirements obsolescence even before project completion.ObjectiveAlthough the obsolete requirements phenomenon and the implications of not addressing them are known, there is a lack of empirical research dedicated to understanding the nature of obsolete software requirements and their role in requirements management.MethodIn this paper, we report results from an empirical investigation with 219 respondents aimed at investigating the phenomenon of obsolete software requirements.ResultsOur results contain, but are not limited to, defining the phenomenon of obsolete software requirements, investigating how they are handled in industry today and their potential impact\u00a0\u2026", "num_citations": "35\n", "authors": ["1466"]}
{"title": "A study investigating challenges in the interface between product development and manufacturing in the development of software-intensive automotive systems\n", "abstract": " The automotive industry is facing a tremendous growth in the engineering of software-intensive systems, giving rise to various challenges. To prevent problems related to the fit of new software technologies in vehicles and the manufacturing processes, a well functioning interaction between the functions for product development and manufacturing is crucial. This is complicated by the fact that the changeable nature of software development causes unprecedented needs for collaboration and coordination between these two functions. This paper reports on a process assessment that focuses on the interface between the functions for product development and manufacturing in the development and design of software-intensive automotive systems. The main purpose of the study was to identify the key issues for improvement in the area assessed. The assessment was performed at two Swedish automotive companies\u00a0\u2026", "num_citations": "29\n", "authors": ["1466"]}
{"title": "Uni-REPM: a framework for requirements engineering process assessment\n", "abstract": " It has been shown that potential business benefits could be achieved by assessing and improving the requirements engineering (RE) process. However, process assessment models such as CMMI and ISO9000 only cover RE shallowly. Tailored models such as REGPG and REPM, on the other hand, do not cover market-driven requirements engineering. Other attempts such as MDREPM covers market-driven requirements engineering, but correspondingly neglects bespoke requirements engineering. Moreover, the area itself has evolved so practices that once were cutting edge are now commonplace. In this article, we develop and evaluate a unified requirements engineering process maturity model (Uni-REPM) that can be used in a market-driven as well as a bespoke context. This model is based on REPM, but has evolved to reflect contemporary requirements engineering practices. Uni-REPM is\u00a0\u2026", "num_citations": "24\n", "authors": ["1466"]}
{"title": "Identification of improvement issues using a lightweight triangulation approach\n", "abstract": " One of the challenges in requirements engineering is the ability to improve the process and establish one that is \u201cgood-enough\u201d. The objective of this paper is to present a lightweight approach to identify process improvement issues. The approach is developed to capture both the views of different stakeholders and different sources of information. An industrial investigation from a small company is presented. In the investigation both projects and the line organization have been interviewed and documentation from them has been studied to capture key issues for improvement. The issues identified from one source are checked against other sources. The dependencies between the issues have been studied. In total nine issues for improvement of the requirements engineering work at the company were identified. It is concluded that the approach is effective in capturing issues, and that the approach helps different stakeholders to get their view represented in the process improvement work.", "num_citations": "24\n", "authors": ["1466"]}
{"title": "Uni-REPM: validated and improved\n", "abstract": " Software products are usually developed for either a specific customer (bespoke) or a broader market (market-driven). Due to their characteristic, bespoke and market-driven development face different challenges, especially concerning requirements engineering. Many challenges are caused by an inadequate requirements engineering process, and hence there is a need for process improvement frameworks based on empirical research and industry needs. In a previous article we introduced Uni-REPM, a lightweight requirements engineering process assessment framework based on a review of empirically motivated practices in market-driven and bespoke requirements engineering literature. In this article, we validate this framework in academia as well as industry, in order to prepare Uni-REPM for widespread industry use. We conduct two validations; a static validation based on interviews with seven\u00a0\u2026", "num_citations": "23\n", "authors": ["1466"]}
{"title": "A literature review on the effectiveness and efficiency of business modeling\n", "abstract": " EN Background: Achieving and maintaining a strategic competitive advantage through business and technology innovation via continually improving effectiveness and efficiency of the operations are the critical survival factors for software-intensive product development companies. These companies invest in business modeling and tool support for integrating business models into their product development, but remain uncertain, if such investments generate desired results. Aim: This study explores the effects of business modeling on effectiveness and efficiency for companies developing software-intensive products. Method: We conducted a Systematic Literature Review using the snowballing methodology, followed by thematic and narrative analysis. 57 papers were selected for analysis and synthesis, after screening 16320 papers from multiple research fields. Results: We analyzed the literature based on purpose, benefit, challenge, effectiveness, and efficiency with software and software-intensive products as the unit of analysis. The alignment between strategy and execution is the primary challenge, and we found no evidence that business modeling increases effectiveness and efficiency for a company. Any outcome variations may simply be a result of fluctuating contextual or environmental factors rather than the application of a specific business modeling method. Therefore, we argue that governance is the fundamental challenge needed for business modeling, as it must efficiently support simultaneous experimentation with products and business models while turning experiences into knowledge. Conclusion: We propose a conceptual\u00a0\u2026", "num_citations": "21\n", "authors": ["1466"]}
{"title": "Requirements experience in practice: Studies of six companies\n", "abstract": " To understand how to apply different requirements engineering practices and where difficulties may arise when implementing a set of requirements engineering practices, it is often useful to consider how others have done and the troubles they have encountered. This chapter describes six industry cases of applied requirements engineering, with a focus on areas where further improvements are desired by or recommended to the companies. Many of these improvement areas are also identified by other, independent, requirements engineering state of practice surveys, and thus indicate areas that warrant special attention when constructing a requirements engineering process for an organization.", "num_citations": "20\n", "authors": ["1466"]}
{"title": "Software Process Assessment & Improvement in Industrial Requirements Engineering\n", "abstract": " Requirements Engineering (RE) is a crucial part of any product management and product development activity, and as such deficiencies in the RE process may have severe consequences. There are reports from industry that point towards inadequate requirements being one of the leading sources for project failure.Software Process Improvement (SPI) is generally seen as the main tool to address process deficiencies in general and within RE. Assessments lead to establishing plans for improvements that are subsequently implemented and evaluated, and then the SPI cycle starts again, in an optimal case being incremental and continuous.", "num_citations": "20\n", "authors": ["1466"]}
{"title": "Test-case Driven versus Checklist-based Inspections of Software Requirements\u2013An Experimental Evaluation\n", "abstract": " Software inspections have proved to be an effective means to find faults in different software artifacts, and the application of software inspections on requirements specifications is believed to give a high return on investment as problems are caught early. However, despite the existing evidence of positive effects requirements inspections are not a common practice in industry. The reason is believed to be the cost associated with inspections as a technology. This paper presents an evaluation of test-case driven inspections (TCD)-an emerging inspection technique that aims to cut costs associated with traditional requirements inspections. To formally test the efficiency and effectiveness of TCD inspections an experiment was conducted, in a controlled environment, where checklist based inspections was used as a point of reference. The experiment results indicate that TCD inspections perform better when it comes to effectiveness in finding major faults in a requirements specification.", "num_citations": "19\n", "authors": ["1466"]}
{"title": "Selecting component sourcing options: A survey of software engineering\u2019s broader make-or-buy decisions\n", "abstract": " ContextComponent-based software engineering (CBSE) is a common approach to develop and evolve contemporary software systems. When evolving a system based on components, make-or-buy decisions are frequent, i.e., whether to develop components internally or to acquire them from external sources. In CBSE, several different sourcing options are available: (1) developing software in-house, (2) outsourcing development, (3) buying commercial-off-the-shelf software, and (4) integrating open source software components.ObjectiveUnfortunately, there is little available research on how organizations select component sourcing options (CSO) in industry practice. In this work, we seek to contribute empirical evidence to CSO selection.MethodWe conduct a cross-domain survey on CSO selection in industry, implemented as an online questionnaire.ResultsBased on 188 responses, we find that most organizations\u00a0\u2026", "num_citations": "14\n", "authors": ["1466"]}
{"title": "Investigating impact of business risk on requirements selection decisions\n", "abstract": " In market-driven software product development, requirements that can potentially go into a product or a product release represent different kinds of investments. Requirements differ in the type of value that they provide and level of risk associated to investing in them. In this paper we investigate how business risk associated with different requirement types is considered by the decision makers and how it affects requirement selection decisions. The results of the conducted case study indicate that due to lacking methods for handling the requirements business risk, requirements with low level of risk are preferred over other type of requirements such as innovations and architectural improvements.", "num_citations": "14\n", "authors": ["1466"]}
{"title": "Requirements engineering for safety-critical systems: An interview study with industry practitioners\n", "abstract": " We have conducted in-depth interviews with experienced practitioners in the Safety-Critical Systems (SCS) domain in order to investigate several aspects related to requirements specification and safety analysis for SCS. We interviewed 19 practitioners from eleven SCS companies in different domains with the intention of verifying which approaches they use day-to-day, and what their perceptions are in relation to the approaches used to elicit, analyze, specify and validate safety requirements. The aim of this study is to obtain an in-depth understanding of how requirements engineering is carried out in companies that develop SCS.", "num_citations": "13\n", "authors": ["1466"]}
{"title": "Component selection in Software Engineering-Which attributes are the most important in the decision process?\n", "abstract": " Component-based software engineering is a common approach to develop and evolve contemporary software systems where different component sourcing options are available: 1)Software developed internally (in-house), 2)Software developed outsourced, 3)Commercial of the shelf software, and 4) Open Source Software. However, there is little available research on what attributes of a component are the most important ones when selecting new components. The object of the present study is to investigate what matters the most to industry practitioners during component selection. We conducted a cross-domain anonymous survey with industry practitioners involved in component selection. First, the practitioners selected the most important attributes from a list. Next, they prioritized their selection using the Hundred-Dollar ($100) test. We analyzed the results using Compositional Data Analysis. The descriptive\u00a0\u2026", "num_citations": "12\n", "authors": ["1466"]}
{"title": "Systematic Review of Solutions Proposed for Product Line Economics\n", "abstract": " This paper presents a systematic review of all the solutions addressing different economic aspect of software product lines (SPL), eg SPL adoption cost-benefits, PL architecture decisions, SPL test strategies project cost overrun and so on, presented for the years 2000 to 2007. The goal of the review is to analyze the level of empirical application and/or validation of the proposed solutions with the purpose of mapping maturity as well as to what extent proposed solutions might be proven in terms of usability and usefulness. The important finding of this review is that although many economic solutions for SPL have been proposed over the years, the absence of qualitative and quantitative results from empirical application and/or validation makes it difficult to evaluate the potential of proposed solutions with respect to their usability and/or usefulness in relation to industry adoption. Suggestions have been presented to improve the existing situation.", "num_citations": "12\n", "authors": ["1466"]}
{"title": "Component attributes and their importance in decisions and component selection\n", "abstract": " Component-based software engineering is a common approach in the development and evolution of contemporary software systems. Different component sourcing options are available, such as: (1) Software developed internally (in-house), (2) Software developed outsourced, (3) Commercial off-the-shelf software, and (4) Open-Source Software. However, there is little available research on what attributes of a component are the most important ones when selecting new components. The objective of this study is to investigate what matters the most to industry practitioners when they decide to select a component. We conducted a cross-domain anonymous survey with industry practitioners involved in component selection. First, the practitioners selected the most important attributes from a list. Next, they prioritized their selection using the Hundred-Dollar ($100) test. We analyzed the results using compositional data\u00a0\u2026", "num_citations": "11\n", "authors": ["1466"]}
{"title": "An empirical study on decision making for quality requirements\n", "abstract": " ContextQuality requirements are important for product success yet often handled poorly. The problems with scope decision lead to delayed handling and an unbalanced scope.ObjectiveThis study characterizes the scope decision process to understand influencing factors and properties affecting the scope decision of quality requirements.MethodWe studied one company's scope decision process over a period of five years. We analyzed the decisions artifacts and interviewed experienced engineers involved in the scope decision process.ResultsFeatures addressing quality aspects explicitly are a minor part (4.41%) of all features handled. The phase of the product line seems to influence the prevalence and acceptance rate of quality features. Lastly, relying on external stakeholders and upfront analysis seems to lead to long lead-times and an insufficient quality requirements scope.ConclusionsThere is a need to\u00a0\u2026", "num_citations": "10\n", "authors": ["1466"]}
{"title": "Practice selection framework\n", "abstract": " Knowledge management (KM) in software engineering and software process improvement (SPI) are challenging. Most existing KM and SPI frameworks are too expensive to deploy or do not take an organization's specific needs or knowledge into consideration. There is thus a need for scalable improvement approaches that leverage knowledge already residing in the organizations.         This paper presents the Practice Selection Framework (PSF), an Experience Factory approach, enabling lightweight experience capture and use by utilizing postmortem reviews. Experiences gathered concern performance and applicability of practices used in the organization, gained from concluded projects. Project managers use these as decision support for selecting practices to use in future projects, enabling explicit knowledge transfer across projects and the development organization as a whole. Process managers use the\u00a0\u2026", "num_citations": "10\n", "authors": ["1466"]}
{"title": "Dzamashvili\u2013Fogelstr\u00f6m,\u201cTest-case Driven Inspection of Preproject Requirements-Process Proposal and Industry Experience Report\n", "abstract": " Requirements inspections can be used not only for defect removal in projects but also applied pre-project. This to assure that managers have good-enough requirements for product and subsequent project planning activities, such as requirements selection for realization and estimation. This paper introduces an inspection process designed to address the needs of companies with limited resources operating in a market-driven environment. The inspection technique presented here utilizes well-known and recognized concepts like perspective based reading, while also introducing new application ideas. The reuse of testing expertise and inspection artifacts help spread the cost and benefit of inspections over several development phases. Initial experiences from industry application report on positive reactions from managers, testers and developers.", "num_citations": "10\n", "authors": ["1466"]}
{"title": "Multi-perspective requirements engineering education with focus on industry relevance\n", "abstract": " Requirements engineering education should be based on best-practices and techniques, but it also needs to be anchored in state of the art research and the reality of industry practice. Preparing students for practice involves giving them an accurate view of reality as well as giving them the tools and the critical mindset needed to perform and improve on requirements engineering practices in industry. By utilizing experiences close to students it is possible to put abstract theory and practices in a context, as well as accomplish a deeper learning. In this article, we present a complete requirements engineering course aimed towards mature students.", "num_citations": "10\n", "authors": ["1466"]}
{"title": "Utilising CI environment for efficient and effective testing of NFRs\n", "abstract": " ContextContinuous integration (CI) is a practice that aims to continuously verify quality aspects of a software intensive system both for functional and non-functional requirements (NFRs). Functional requirements are the inputs of development and can be tested in isolation, utilising either manual or automated tests. In contrast, some NFRs are difficult to test without functionality, for NFRs are often aspects of functionality and express quality aspects. Lacking this testability attribute makes NFR testing complicated and, therefore, underrepresented in industrial practice. However, the emergence of CI has radically affected software development and created new avenues for software quality evaluation and quality information acquisition. Research has, consequently, been devoted to the utilisation of this additional information for more efficient and effective NFR verification.ObjectiveWe aim to identify the state-of-the-art of\u00a0\u2026", "num_citations": "8\n", "authors": ["1466"]}
{"title": "A model for assessing and re\u2010assessing the value of software reuse\n", "abstract": " Background Software reuse is often seen as a cost avoidance rather than a gained value. This results in a rather one\u2010sided debate where issues such a resource control, release schedule, quality, or reuse in more than one release are neglected.   Aims We propose a reuse value assessment framework, intended to provide a more nuanced view of the value and costs associated with different reuse candidates.   Method This framework is constructed based on findings from an interview study at a large software development company.   Results The framework considers the functionality, compliance to standards, provided quality, and provided support of a reuse candidate, thus enabling an informed comparison between different reuse candidates. Furthermore, the framework provides means for tracking the value of the reused asset throughout subsequent releases.   Conclusions The reuse value assessment\u00a0\u2026", "num_citations": "6\n", "authors": ["1466"]}
{"title": "Technology transfer-Requirements Engineering research to industrial practice an open (ended) debate\n", "abstract": " Technology and knowledge have been recognized as main sources of competitive advantage of corporations, industries and nations, particularly in the software domain. They have led to the creation of local ecosystems devoted to development and transfer activities, which ensure not only personal and institutional motivation/recognition, but also social and economic gains. An open (ended) debate panel is proposed in order to develop greater awareness and seek deeper understanding of such activities from Requirements Engineering research to industrial practice. The panel involves researchers and practitioners with the perspective of eliciting: (i) experiences in knowledge and technology development and transfer; (ii) awareness and effectiveness of models and patterns; and (iii) factors for having successful collaboration between research institutions and industry. The organizers also plan to run a survey\u00a0\u2026", "num_citations": "6\n", "authors": ["1466"]}
{"title": "How to Increase the Likelihood of Successful Transfer to Industry--Going Beyond the Empirical\n", "abstract": " The field of Empirical Software Engineering has undergone a much-needed expansion the last decade, and papers of all shapes and sizes are more or less mandated to have an \"empirical\" part to be published in premiere venues. The positive trend has researchers realizing the benefits, but also the investments needed, inherent to industry collaboration. That is, real practitioners, involved in the development of software intensive product, system, and service development. This paper shortly summarizes lessons learned from over ten years experience of industrial collaboration, and knowledge and technology exchange between applied researchers and industry.", "num_citations": "5\n", "authors": ["1466"]}
{"title": "Needs Oriented Framework for Producing Requirements Decision Material-NORM\n", "abstract": " The need of understanding and supporting requirements engineering decisions in market-driven product development is motivated by the complexity and economical impact of these decisions. While being a key for success, correct and timely decisions are dependent on the availability and the quality of decision material (requirements, business cases, cost-value estimations etc). This paper presents a needs-oriented framework (NORM) for identifying and assuring the creation of appropriate decision material for RE decisions. NORM is based on analysis of the applied RE process and characteristics of separate RE decisions, focusing mainly on pre-project activities. The framework is developed in close cooperation with industry with the intention to ensure that resources are spent on producing just-the-necessary information at the right time and to be able to monitor and control this production effort.", "num_citations": "4\n", "authors": ["1466"]}
{"title": "Evolution toward soft (er) products\n", "abstract": " As software becomes a larger part of all products, traditional (hardware) manufacturers are becoming, in essence, software companies.", "num_citations": "3\n", "authors": ["1466"]}
{"title": "International Software Product Management Association: Towards a Software Product Management certification\n", "abstract": " Software Product Management (SPM) excellence is recognized as a key success factor for software organizations-both in industries delivering software as a product, software and IT as a service, or software embedded in other products. The International Software Product Management Association (ISPMA) is a group of SPM experts from academia and industry that aims at fostering software product management excellence across industries by establishing software product management as a discipline of its own in both academia and industry. This presentation will report on the progress towards establishing, disseminating and maintaining a curriculum and a certifiable body of knowledge on SPM (SPM BoK) that is recognized as the premier source on SPM by all stakeholders.", "num_citations": "3\n", "authors": ["1466"]}
{"title": "Third Generation Industrial Co-production in Software Engineering\n", "abstract": " Industry\u2013academia collaboration is one of the cornerstones of empirical software engineering. The role of researchers should be developing new practices and principles that enable industry in meeting the engineering challenges today and in the future. This chapter describes the third generation of industrial co-production in software engineering that includes seven steps. The co-production model and experiences associated with its use represent deep and long-term co-production with over thirty companies, many of which are still active partners in Software Engineering Research Lab (SERL).", "num_citations": "2\n", "authors": ["1466"]}
{"title": "Selecting software component sourcing options: Detailed survey description and analysis\n", "abstract": " Component-based software engineering (CBSE) is a common approach to develop and evolve contemporary software systems. When evolving a system based on components, make-or-buy decisions are frequent, ie, whether to develop components internally or to acquire them from external sources. In CBSE, several different sourcing options are available: 1) developing software in-house, 2) outsourcing development, 3) buying commercial-off-the-shelf software, and 4) integrating open source software components. Unfortunately, there is little available research on how organizations select component sourcing options (CSO) in industry practice. In this work, we seek to contribute empirical evidence to CSO selection. Method: We conduct a cross-domain survey on CSO selection in industry, implemented as an online questionnaire. Based on 188 responses, we find that most organizations consider multiple CSOs during software evolution, and that the CSO decisions in industry are dominated by expert judgment. When choosing between candidate components, functional suitability acts as an initial filter, then reliability is the most important quality. We stress that future solution-oriented work on decision support has to account for the dominance of expert judgment in industry. Moreover, we identify considerable variation in CSO decision processes in industry. Finally, we encourage software development organizations to reflect on their decision processes when choosing whether to make or buy components, and we recommend using our survey for a first benchmarking.", "num_citations": "2\n", "authors": ["1466"]}
{"title": "Success Evaluation and Measures in Software Process Improvement\n", "abstract": " Purpose: Investigate and examine industry practice with regards to evaluation of process improvement, identification of measures and methods for success evaluations. The main reasoning is to use empirical data from industry, data from academia and research as input for suggesting proposals for improvement and discussion new avenues for future research in a field not addressed by eg traditional investment theory or marketing research. Method: Interviews were used and several data sources were elicited to gather empirical data. Literature surveys complemented this. Ultimately a triangulation approach was adopted to gradually and continuously compare and identify the chasms between academia and the reality and needs of industry. Results: The results can be described in three parts. First, there is a empirical investigation showing what measures and models are used in industry. These are discussed and put against literature (the academic view) in both the software engineering field, but relevant research is also scrutinized in business management field, eg investment theory. The second contribution is the concrete proposal of three methods for evaluating process improvement success. The first two of these are actually useable and take notice of the limitations identified in industry through the empirical investigation, ie no assumptions and theoretical models are presented in the first part of the proposal. The second part of the proposal is designed to present an outlook of the overall potential, provoking a discussion and ultimately leading out to a conclusion of future research needed in the field.", "num_citations": "2\n", "authors": ["1466"]}
{"title": "A replicated controlled empirical evaluation of a requirements abstraction model\n", "abstract": " Requirement engineers in industry are faced with the complexity of handling large amounts of requirements as development moves from traditional bespoke projects towards marketdriven development. There is a need for usable and useful models that recognize this reality and support the engineers in the continuous effort of choosing which requirements to accept and which to dismiss off hand using the goals and product strategies put forward by management. This paper replicates an evaluation of such a model that is built based on needs identified in industry. The evaluation\u2019s primary goal is to test the model\u2019s usability and usefulness in a lab environment prior to large scale industry piloting, and is a part of a large technology transfer effort. The replication uses 179 subjects from three different Swedish Universities, which is a large portion of the university students educated in requirements engineering in\u00a0\u2026", "num_citations": "2\n", "authors": ["1466"]}
{"title": "Towards an anatomy of software craftsmanship\n", "abstract": " Context: The concept of software craftsmanship has early roots in computing, and in 2009, the Manifesto for Software Craftsmanship was formulated as a reaction to how the Agile methods were practiced and taught. But software craftsmanship has seldom been studied from a software engineering perspective. Objective: The objective of this article is to systematize an anatomy of software craftsmanship through literature studies and a longitudinal case study. Method: We performed a snowballing literature review based on an initial set of nine papers, resulting in\u00a018 papers and 11 books. We also performed a case study following seven years of software development of a product for the financial market, eliciting qualitative, and quantitative results. We used thematic coding to synthesize the results into categories. Results: The resulting anatomy is centered around four themes, containing 17 principles and 47\u00a0\u2026", "num_citations": "1\n", "authors": ["1466"]}
{"title": "The state-of-practice in requirements elicitation: an extended interview study at 12 companies\n", "abstract": " Requirements engineering remains a discipline that is faced with a large number of challenges, including the implementation of a requirements elicitation process in industry. Although several proposals have been suggested by researchers and academics, little is known of the practices that are actually followed in industry. Our objective is to investigate the state-of-practice with respect to requirements elicitation, by closely examining practitioners\u2019 current practices. To this aim, we focus on the techniques that are used in industry, the roles that requirements elicitation involves, and the challenges that the requirements elicitation process is faced with. As method, we conducted an interview-based survey study involving 24 practitioners from 12 different Swedish IT companies, and we recorded the interviews and analyzed these recordings by using quantitative and qualitative methods. Several results emerged from the\u00a0\u2026", "num_citations": "1\n", "authors": ["1466"]}
{"title": "On the requirements engineer role\n", "abstract": " The requirements engineer role is defined differently within most organizations.", "num_citations": "1\n", "authors": ["1466"]}
{"title": "An interview study on the state-of-the-practice in requirements elicitation and specification: protocol\n", "abstract": " This document details the protocol used in an interview-based study on requirements engineering practices related to elicitation and specification. It presents the different parts of such protocol as well as the interview guide used in the study and population characteristics.", "num_citations": "1\n", "authors": ["1466"]}
{"title": "Correlation between Pre-study and Level of Project Failure in System Development Projects\n", "abstract": " The project paradigm 1 is fairly wide spread in most industry domains. Everything from software development to construction work is designated as using the project form for the organization and the distribution of resources. This makes \u201cthe project\u201d in general and project management in particular a very important issue as it speaks directly to the success of an undertaken enterprise. If one draws a parallel to an assembly line in a factory, the project can be seen as the line itself, and project management can be seen as the maintenance and upkeep of this line, as well as the planning concerning its physical characteristics and speed. If the maintenance of the line is faulty the line can break down and the work is halted. The same is true for projects concerning project management, if it does not work the project is in trouble.The project form is not a modern invention however. Organizing tasks into projects can be traced\u00a0\u2026", "num_citations": "1\n", "authors": ["1466"]}