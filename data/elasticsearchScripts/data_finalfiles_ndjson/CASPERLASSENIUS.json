{"title": "A taxonomy and an initial empirical study of bad smells in code\n", "abstract": " This paper presents research in progress, as well as tentative findings related to the empirical study of so called bad code smells. We present a taxonomy that categorizes similar bad smells. We believe that taxonomy makes the smells more understandable and recognizes the relationships between smells. Additionally, we present our initial findings from an empirical study of the use of the smells for evaluating code quality in a small Finnish software product company. Our findings indicate that the taxonomy for the smells could help explain the identified correlations between the subjective evaluations of the existence of the smells.", "num_citations": "223\n", "authors": ["173"]}
{"title": "What types of defects are really discovered in code reviews?\n", "abstract": " Research on code reviews has often focused on defect counts instead of defect types, which offers an imperfect view of code review benefits. In this paper, we classified the defects of nine industrial (C/C++) and 23 student (Java) code reviews, detecting 388 and 371 defects, respectively. First, we discovered that 75 percent of defects found during the review do not affect the visible functionality of the software. Instead, these defects improved software evolvability by making it easier to understand and modify. Second, we created a defect classification consisting of functional and evolvability defects. The evolvability defect classification is based on the defect types found in this study, but, for the functional defects, we studied and compared existing functional defect classifications. The classification can be useful for assigning code review roles, creating checklists, assessing software evolvability, and building software\u00a0\u2026", "num_citations": "218\n", "authors": ["173"]}
{"title": "Subjective evaluation of software evolvability using code smells: An empirical study\n", "abstract": " This paper presents the results of an empirical study on the subjective evaluation of code smells that identify poorly evolvable structures in software. We propose use of the term software evolvability to describe the ease of further developing a piece of software and outline the research area based on four different viewpoints. Furthermore, we describe the differences between human evaluations and automatic program analysis based on software evolvability metrics. The empirical component is based on a case study in a Finnish software product company, in which we studied two topics. First, we looked at the effect of the evaluator when subjectively evaluating the existence of smells in code modules. We found that the use of smells for code evaluation purposes can be difficult due to conflicting perceptions of different evaluators. However, the demographics of the evaluators partly explain the variation\u00a0\u2026", "num_citations": "178\n", "authors": ["173"]}
{"title": "Perceived causes of software project failures\u2013An analysis of their relationships\n", "abstract": " ContextSoftware project failures are common. Even though the reasons for failures have been widely studied, the analysis of their causal relationships is lacking. This creates an illusion that the causes of project failures are unrelated.ObjectiveThe aim of this study is to conduct in-depth analysis of software project failures in four software product companies in order to understand the causes of failures and their relationships. For each failure, we want to understand which causes, so called bridge causes, interconnect different process areas, and which causes were perceived as the most promising targets for process improvement.MethodThe causes of failures were detected by conducting root cause analysis. For each cause, we classified its type, process area, and interconnectedness to other causes. We quantitatively analyzed which type, process area, and interconnectedness categories (bridge, local) were\u00a0\u2026", "num_citations": "174\n", "authors": ["173"]}
{"title": "Bad smells-humans as code critics\n", "abstract": " This work presents the results of an initial empirical study on the subjective evaluation of bad code smells, which identify poor structures in software. Based on a case study in a Finnish software product company, we make two contributions. First, we studied the evaluator effect when subjectively evaluating the existence of smells in code modules. We found that the use of smells for code evaluation purposes is hard due to conflicting perceptions of different evaluators. Second, we applied source code metrics for identifying three smells and compared these results to the subjective evaluations. Surprisingly, the metrics and smell evaluations did not correlate.", "num_citations": "127\n", "authors": ["173"]}
{"title": "Problems, causes and solutions when adopting continuous delivery\u2014A systematic literature review\n", "abstract": " Context: Continuous delivery is a software development discipline in which software is always kept releasable. The literature contains instructions on how to adopt continuous delivery, but the adoption has been challenging in practice.Objective: In this study, a systematic literature review is conducted to survey the faced problems when adopting continuous delivery. In addition, we identify causes for and solutions to the problems.Method: By searching five major bibliographic databases, we identified 293 articles related to continuous delivery. We selected 30 of them for further analysis based on them containing empirical evidence of adoption of continuous delivery, and focus on practice instead of only tooling. We analyzed the selected articles qualitatively and extracted problems, causes and solutions. The problems and solutions were thematically synthesized into seven themes: build design, system design\u00a0\u2026", "num_citations": "122\n", "authors": ["173"]}
{"title": "Defect detection efficiency: Test case based vs. exploratory testing\n", "abstract": " This paper presents a controlled experiment comparing the defect detection efficiency of exploratory testing (ET) and test case based testing (TCT). While traditional testing literature emphasizes test cases, ET stresses the individual tester's skills during test execution and does not rely upon predesigned test cases. In the experiment, 79 advanced software engineering students performed manual functional testing on an open-source application with actual and seeded defects. Each student participated in two 90-minute controlled sessions, using ET in one and TCT in the other. We found no significant differences in defect detection efficiency between TCT and ET. The distributions of detected defects did not differ significantly regarding technical type, detection difficulty, or severity. However, TCT produced significantly more false defect reports than ET. Surprisingly, our results show no benefit of using predesigned test\u00a0\u2026", "num_citations": "110\n", "authors": ["173"]}
{"title": "The role of the tester's knowledge in exploratory software testing\n", "abstract": " We present a field study on how testers use knowledge while performing exploratory software testing (ET) in industrial settings. We video recorded 12 testing sessions in four industrial organizations, having our subjects think aloud while performing their usual functional testing work. Using applied grounded theory, we analyzed how the subjects performed tests and what type of knowledge they utilized. We discuss how testers recognize failures based on their personal knowledge without detailed test case descriptions. The knowledge is classified under the categories of domain knowledge, system knowledge, and general software engineering knowledge. We found that testers applied their knowledge either as a test oracle to determine whether a result was correct or not, or for test design, to guide them in selecting objects for test and designing tests. Interestingly, a large number of failures, windfall failures, were\u00a0\u2026", "num_citations": "103\n", "authors": ["173"]}
{"title": "How do testers do it? An exploratory study on manual testing practices\n", "abstract": " We present the results of a qualitative observation study on the manual testing practices in four software development companies. Manual testing practices are seldom studied, and based on the literature we conjecture that they have a strong effect on the effectiveness of manual testing. We observed testing sessions of 11 software professionals performing system level functional testing. As a result we identified 22 manual testing practices that we classified into 9 test session strategies and 13 detailed test execution techniques. Many of the identified techniques were based on similar ideas as traditional test case design techniques. However, the subjects applied these techniques during manual testing without separate test design phase. The results indicate that software professionals use a wide set of strategies and techniques when performing manual testing. Testers seem to need and use techniques even if\u00a0\u2026", "num_citations": "98\n", "authors": ["173"]}
{"title": "Effects of pair programming at the development team level: an experiment\n", "abstract": " We studied the effects of pair programming in a team context on productivity, defects, design quality, knowledge transfer and enjoyment of work. Randomly formed three pair programming and two solo programming teams performed the same 400-hour fixed-effort project. Pair programming increased the development effort of the first tasks considerably compared to solo programming, but later the differences were small. Due to this learning time the pair programming teams had worse overall project productivity. Task complexity did not affect the effort differences between solo and pair programming. The pair programming teams wrote code with fewer defects, but were less careful in system testing, and therefore delivered systems with more defects. They may have relied too much on the peer review taking place during programming. Knowledge transfer seemed to be higher within the pair programming teams. Finally\u00a0\u2026", "num_citations": "82\n", "authors": ["173"]}
{"title": "Drivers for software refactoring decisions\n", "abstract": " This paper presents an empirical study of drivers for software refactoring decisions. We studied the refactoring decisions made by 37 students evaluating ten methods of a purposefully constructed Java program. The decision rationales reported by the evaluators were coded to identify the drivers behind the decisions. The identified drivers were categorized into Structure, Documentation, Visual Representation, and General drivers. The evaluators had conflicting opinions both regarding the internal quality of the methods and refactoring decisions. Complex code problems were detected only by experienced evaluators. Using regression analysis, we looked at the predictive value of drivers explaining the refactoring decisions. The most salient driver leading to a favourable refactoring decision was method size. This study provides information of the refactoring decisions and helps form a basis for creating code problem\u00a0\u2026", "num_citations": "66\n", "authors": ["173"]}
{"title": "An approach to product roadmapping in small software product businesses\n", "abstract": " Success in software product business requires the release of new products and product upgrades with the right amount of features and quality within an open market window. For this, a systematic approach for managing the contents, timing and roles of future product releases as well as the product architecture is needed. In practice, such an approach is often missing, especially in small companies, due to inexperience, unclear priorities, time-tomarket pressures, or the lack of suitable process infrastructure. In this paper, we present an approach based on product roadmapping that can aid such companies in their product planning. We also discuss initial experiences from using the approach in three small software companies. The product roadmap expresses the release and development schedules, composition of individual releases, changes to the underlying technology, services requiring attention from product development and the planned resource usage.", "num_citations": "54\n", "authors": ["173"]}
{"title": "Perceived effects of pair programming in an industrial context\n", "abstract": " We studied the perceived effects of pair programming (PP) compared to solo programming in a large scale, industrial software development context. We surveyed developers (N=28) regarding effects of PP on learning, quality, effort, schedule, and human factors. Our findings support earlier results from studies done with students, or professionals doing small tasks. The positive effects of PP were largest for learning, schedule adherence of tasks, getting to know other developers, and team spirit. A small but clearly positive effect was perceived for various quality aspects, discipline in following work practices, and enjoyment of work. The improvement of estimation accuracy was almost negligible. The amount of refactoring did not change. On the negative side, the development effort for individual features was higher. In the beginning of the adoption, the exhaustiveness of work was perceived higher, but over time it\u00a0\u2026", "num_citations": "51\n", "authors": ["173"]}
{"title": "Factors affecting audio and text-based communication media choice in global software development projects\n", "abstract": " Software development as a knowledge intensive activity involves high requirements for communication and collaboration between its practitioners. In global software development, geographical, cultural and language distances bring additional challenges to communication. While text-based communication is very common in global software projects, recent improvements in telecommunications technology and network infrastructure have enabled ad-hoc audio conferencing as an economically feasible and available communication medium. Media richness theory suggests audio conferencing as a richer medium to have potential in leveraging uncertainty and equivocality, while media synchronicity theory suggests using multiple communication media to accomplish a task. This empirical qualitative study is based on 57 interviews from eight global software development projects. We discovered that self-conception of\u00a0\u2026", "num_citations": "50\n", "authors": ["173"]}
{"title": "4CC: A framework for managing software product development\n", "abstract": " Managing software product development is challenging, especially for small companies in which a balance has to be struck between development flexibility and management control while working under tight schedule and resource constraints. While there exists several approaches to software process improvement, such as the CMM and SPICE reference frameworks, these models focus on the software process for customer projects in large organizations. Small product-oriented companies require a more holistic and practical view to software engineering management that combines business and development considerations and has a clear product focus. This article presents a general framework for managing software product development in small organizations. The framework combines business and process management through four cycles of control: (1) strategic release management provides the interface\u00a0\u2026", "num_citations": "48\n", "authors": ["173"]}
{"title": "Measuring social capital in creative teams through sociometric sensors\n", "abstract": " We describe the results of an experiment capturing the face-to-face \u2018honest signals\u2019 of knowledge workers through sociometric badges. We find that collective creativity of teams is a function of the aggregated social capital of members. The higher it is, the higher their creative output. We collected communication data of 14 graduate students and their instructor during a one-week seminar, comparing it against the creative output of their teamwork. As a second component of social capital we also measured the level of trust team members show to each other through surveys. We find that the more team members directly interact with each other face-to-face, and the more they trust other team members, the more creative and of higher quality the result of their teamwork is.", "num_citations": "46\n", "authors": ["173"]}
{"title": "Teaching real-world software engineering through a capstone project course with industrial customers\n", "abstract": " In this paper, we describe how we teach real-world software engineering to students using a project course simulating in-vivo software development projects. The course gives the students an opportunity to try out in practice the skills gained on other computer science and software engineering courses. The students execute projects in teams consisting of seven to ten students, developing software for a real customer. Students spend more than 150 hours each on the project. The main stakeholders of the projects are the project team, customer, and mentor. The mentor represents the course personnel and provides practical guidance for the project team during the project. During the course, the students are supported by mentoring and experience exchange sessions. While laborious, the course is consistently ranked in the top three in the CS curriculum by the students.", "num_citations": "44\n", "authors": ["173"]}
{"title": "Experiences of instant messaging in global software development projects: A multiple case study\n", "abstract": " Instant messaging (IM) has become a significant tool for communication in global software development (GSD) projects. In this paper, we describe experiences of IM use based on 39 semi-structured interviews of participants in six GSD projects. Our results indicate that in successful projects, IM use was more wide-spread and systematical. IM status information was used to assess availability, even though the information was not always up-to-date. IM was used to facilitate multitasking and communication with multiple people simultaneously, and as a side channel in meetings. Many considered the communication initiation barrier lower for IM than for other synchronous communication media, such as the telephone. Saving the transcripts from significant discussions and decisions made during IM sessions was considered important, and failure to do so systematically was a major driving force to use other media, such\u00a0\u2026", "num_citations": "40\n", "authors": ["173"]}
{"title": "A tentative framework for managing software product development in small companies\n", "abstract": " Deploying an appropriate software process can improve the effectiveness of software engineering. Still, small companies find it hard to allocate resources to software process improvement and tailor existing process models for their needs. We present a tentative framework for managing software product development in small companies. The framework combines business and process management through four cycles of control: (1) strategic release management provides the interface between business management and product development; (2) release project management handles the development of individual product versions; (3) iteration management deals with the incremental development of product functionality within release projects; and (4) mini-milestones are used to get an indication of system status during development.", "num_citations": "40\n", "authors": ["173"]}
{"title": "Towards \u201chonest signals\u201d of creativity\u2013identifying personality characteristics through microscopic social network analysis\n", "abstract": " This paper presents preliminary results on predicting individual creativity based on interpersonal interaction patterns. We combine insights from analyzing communication in an E-mail student network of a distributed course with measurements of interaction by sociometric badges for 23 programmers in Northern Europe. In the first case study we measure communication patterns of 23 software developers in a Nordic country through sociometric badges over a period of 4 weeks, associating it with creativity and productivity collected by a daily questionnaire. At the same time we collected individual trust through another questionnaire. We found that the more central people are in the network, the more trusting they are, and the less they oscillate between low and high states of energy, the more trusting they are. The second case study is based on a sample of 17 students from a German university participating in a\u00a0\u2026", "num_citations": "38\n", "authors": ["173"]}
{"title": "Continuous and collaborative technology transfer: Software engineering research with real-time industry impact\n", "abstract": " Context: Traditional technology transfer models rely on the assumption that innovations are created in academia, after which they are transferred to industry using a sequential flow of activities. This model is outdated in contemporary software engineering research that is done in close collaboration between academia and industry and in large consortia rather than on a one-on-one basis. In the new setup, research can be viewed as continuous co-experimentation, where industry and academia closely collaborate and iteratively and jointly discover problems and develop, test, and improve solutions.Objective: The objective of the paper is to answer the following research questions: How can high-quality, ambitious software engineering research in a collaborative setup be conducted quickly and on a large scale? How can real-time business feedback to continuously improve candidate solutions be gained?Method\u00a0\u2026", "num_citations": "35\n", "authors": ["173"]}
{"title": "Face-to-face, email and instant messaging in distributed agile software development project\n", "abstract": " This paper presents our preliminary results from a single case study on face-to-face, email and instant messaging (IM) communication in a distributed agile software development (DASD) project. The project had 13 team members during the time of study, and it was distributed between three different sites: Finland, Norway and Czech Republic. The team was using Scrum process model with three week sprints. We studied face-to-face communication with sociometric badges and email and IM communication by analyzing the project-related communication logs provided by each individual team member. We were interested both in the amount of communication and the communication patterns via different communication media. We found differences in the daily variation of communication amounts across different media as well as different network structure of communication with different media. Specifically, we found\u00a0\u2026", "num_citations": "34\n", "authors": ["173"]}
{"title": "Towards understanding quality assurance in agile software development\n", "abstract": " Agile software development stresses individuals and interaction, customer collaboration, short development cycles and frequent deliveries of valuable software. From the testing and quality assurance viewpoint these principles are challenging, and agile methods seem to lack aspects that traditionally are considered important and fundamental to successful quality assurance. In this paper we identify these theoretical challenges and shortcomings in agile methods. We describe the quality assurance practices of four agile methods and show that agile methods emphasise constructive quality building practices. Quality evaluating practices, based on a destructive attitude, are few, if any. We think that agile development processes could benefit from the introduction of additional testing practices, and as examples of such practices we propose the role of an independent tester and the session-based exploratory testing approach.", "num_citations": "32\n", "authors": ["173"]}
{"title": "Small software organizations need explicit project portfolio management\n", "abstract": " The concept of managing new product development projects as an explicit portfolio originates from the context of large organizations. However, the question as to whether explicit portfolio management is relevant for small organizations is rarely discussed. We conducted a qualitative multiple-case study of six small organizations (with 15\u201340 people) that developed software and provided related services. Five of the organizations did not practice explicit portfolio management. They also seemed to suffer from problems that, in the literature, are considered symptomatic of inadequate portfolio management, such as having too many simultaneous projects, overcommitment in terms of workload, and ineffective executive decision making. In one of the studied organizations, the management personnel had recognized the need for explicit portfolio management and introduced portfolio management practices such as\u00a0\u2026", "num_citations": "29\n", "authors": ["173"]}
{"title": "Fear and distrust in global software engineering projects\n", "abstract": " When global software engineering (GSE) is understood as knowledge intensive collaborative work, many of the reasons for the problems encountered in GSE projects can be traced back to the social conditions framing the collaboration between people at different physical sites. A total of 59 interviews were conducted in eight GSE projects of two large software companies with sites in Finland and other countries. As a result of categorization of problems related to group relations, the lack of trust between the main site and the other sites, and the fear of negative personal consequences among the project employees at the main site due to introduction of GSE were found to be the major problems in the projects. Our analysis suggests that poorly communicated reasoning for GSE can lay the ground for fear and for distrust between employees at remote sites. Unfulfilled cognitive expectations and fear related to one's\u00a0\u2026", "num_citations": "28\n", "authors": ["173"]}
{"title": "Descriptive analysis of fear and distrust in early phases of GSD projects\n", "abstract": " When globally distributed software development (GSD) is understood as knowledge intensive collaborative work, many of the reasons for problems encountered in GSD projects can be traced back to social conditions framing the collaboration between people at onsite and offsite. A total of 59 interviews were conducted in 8 GSD projects of two major software companies located in Finland. As a result of categorization of problems related to group relations in GSD projects, the lack of trust between onsite and offsite and fears of losing jobs at onsite was found as major problems in the early phases of the projects. Our analysis suggests that poorly communicated reasons GSD can cause severe problems in collaboration between people by laying the ground for fears and for distrust between sites. The study contributes to the GSD research by creating a novel empirical description of the linkages between fear and\u00a0\u2026", "num_citations": "27\n", "authors": ["173"]}
{"title": "An experience in combining flexibility and control in a small company's software product development process\n", "abstract": " This paper presents a longitudinal case study at Smartner Information Systems, a small software product company operating in a dynamic and uncertain environment. Smartner successfully combines flexibility and control in their product development process. Flexibility is gained with monthly sprints, after which new decisions about project scope can be made in planning the following sprint. Control is achieved through mapping the sprints to management decision points, where the management team makes decisions concerning the whole project portfolio. The development team and other stakeholders of the product participate in sprint planning, facilitating communication of business/customer needs to development. Product roadmapping and sprint demonstrations give visibility of development plans and progress to the whole organization. Freezing the development scope for a month at a time helps in giving the\u00a0\u2026", "num_citations": "25\n", "authors": ["173"]}
{"title": "Process enactment support in a distributed environment\n", "abstract": " This paper proposes a conceptual framework and supporting architecture for general-purpose process modeling and enactment. The framework includes abstractions of all critical entities and their relationships needed to model complex tasks in a distributed environment. We are able to support multi-paradigm process descriptions, since the support system only sees process execution as operations executed by agents. We do, however, support division and delegation of activities.The supporting architecture utilizes industry-standard communication and distribution mechanisms (CORBA) in order to make the services available to a wide variety of computers, operating systems, and communication protocols. We propose a way to integrate process modeling and enactment with existing configuration management systems and other repositories responsible for the storage and management of the artifacts handled by\u00a0\u2026", "num_citations": "21\n", "authors": ["173"]}
{"title": "A tool supporting root cause analysis for synchronous retrospectives in distributed software teams\n", "abstract": " ContextRoot cause analysis (RCA) is a useful practice for software project retrospectives, and is typically carried out in synchronous collocated face-to-face meetings. Conducting RCA with distributed teams is challenging, as face-to-face meetings are infeasible. Lack of adequate real-time tool support exacerbates this problem. Furthermore, there are no empirical studies on using RCA in synchronous retrospectives of geographically distributed teams.ObjectiveThis paper presents a real-time cloud-based software tool (ARCA-tool) we developed to support RCA in distributed teams and its initial empirical evaluation. The feasibility of using RCA with distributed teams is also evaluated.MethodWe compared our tool with 35 existing RCA software tools. We conducted field studies of four distributed agile software teams at two international software product companies. The teams conducted RCA collaboratively in\u00a0\u2026", "num_citations": "17\n", "authors": ["173"]}
{"title": "Recurring opinions or productive improvements\u2014what agile teams actually discuss in retrospectives\n", "abstract": " Team-level retrospectives are widely used in agile and lean software development, yet little is known about what is actually discussed during retrospectives or their outcomes. In this paper, we synthesise the outcomes of sprint retrospectives in a large, distributed, agile software development organisation. This longitudinal case study analyses data from 37 team-level retrospectives for almost 3\u00a0years. We report the outcomes of the retrospectives, their perceived importance for process improvement and relatVed action proposals. Most discussions were related to topics close to and controllable by the team. However, the discussions might suffer from participant bias, and in cases where they are not supported by hard evidence, they might not reflect reality, but rather the sometimes strong opinions of the participants. Some discussions were related to topics that could not be resolved at the team level due to their\u00a0\u2026", "num_citations": "15\n", "authors": ["173"]}
{"title": "Practical guide to managing distributed software development projects\n", "abstract": " Practical Guide to Managing Distributed Software Development Projects \u2014 Aalto University's research portal Skip to main navigation Skip to search Skip to main content Aalto University's research portal Logo Accessibility statement English Suomi Home Profiles Research output Datasets Projects Prizes Activities Press / Media Infrastructure Research Units Impacts Search by expertise, name or affiliation Practical Guide to Managing Distributed Software Development Projects Maria Paasivaara, Nico Hiort af Orn\u00e4s, Peitsa Hynninen, Casper Lassenius, Tuomas Niinim\u00e4ki, Arttu Piri Research output: Working paper \u203a Professional Overview Original language English Place of Publication Espoo Pages 156 ISBN (Electronic) 978-952-3043-2 Publication status Published - 2010 MoE publication type D4 Published development or research report or study Publication series Name Helsinki University of Technology Software of (\u2026", "num_citations": "15\n", "authors": ["173"]}
{"title": "Improving multi-project management in two product development organizations\n", "abstract": " We describe how two product development organizations have started improving their multi-project management. A typical problem in new product development (NPD) organizations is that too many projects are launched. NPD projects can range from advanced research to enhancements to existing product lines. Each type of project should have its own role and add its own contribution to the strategic mission and competitiveness of the company. The product strategy of a company should serve as the guideline for planning the right sequence, number, and mix of projects. Together with the product strategy, portfolio management should provide the basis for fund allocation and prioritization between the different types of projects. With a project classification system, the various needs of the different project types can be considered.", "num_citations": "15\n", "authors": ["173"]}
{"title": "Software engineering problems and their relationship to perceived learning and customer satisfaction on a software capstone project\n", "abstract": " In educational projects, having students encounter problems is desirable, if it increases learning. However, in capstone projects with industrial customers, negative effects problems can have on customer satisfaction must be considered. We conducted a survey in a capstone project course in order to study problems, learning and customer satisfaction related to eleven software engineering topics. On the average, students working in the managerial roles learned quite a lot about each topic, and the developers learned moderately, but the degree of learning varied a lot among the teams, and among the team members. The most extensively encountered problems were related to testing, task management, effort estimation and technology skills. The developers contributed quite a lot to solving problems with technology skills, but only moderately or less with other topics, whereas the managers contributed quite a lot with\u00a0\u2026", "num_citations": "14\n", "authors": ["173"]}
{"title": "Perceived Benefits of Adopting Continuous Delivery Practices.\n", "abstract": " Context: In continuous delivery, the aim is that every feature passes through the integration and deployment pipeline, resulting in an immediately deployable product. This practice has been proposed to accelerate value delivery, improve software quality and increase developer productivity. Goal: We investigate the adoption of continuous delivery practices and evaluate the related benefits in a single customer-supplier organization. We focus on the perceived benefits of supplier and customer organizations during a fiveyear transition period.Method: We performed an exploratory case study. We used semi-structured interviews and thematic analysis. Results: Increased communication and collaboration between developers and customer was perceived as one of the core benefits. Other reported benefits were increased productivity, improved product quality, improved developer morale as well as infrastructural independence and organizational agnosticism.Conclusions: The results indicate that the adoption of continuous software engineering practices bring various benefits for both customers and developers, beyond mere increased pace of production deployments.", "num_citations": "14\n", "authors": ["173"]}
{"title": "Finnish software product business: Results from the national software industry survey 2002\n", "abstract": " Finnish Software Product Business: Results from the national Software Industry Survey 2002 \u2014 Aalto University's research portal Skip to main navigation Skip to search Skip to main content Aalto University's research portal Logo Accessibility statement English Suomi Home Profiles Research output Datasets Projects Prizes Activities Press / Media Infrastructure Research Units Impacts Search by expertise, name or affiliation Finnish Software Product Business: Results from the national Software Industry Survey 2002 Juhana Heitala, Markku Maula, Jussi Autere, Casper Lassenius, Erkko Autio Department of Industrial Engineering and Management Research output: Working paper \u203a Professional Overview Original language English Place of Publication Espoo Publication status Published - 2002 MoE publication type D4 Published development or research report or study Cite this APA Author BIBTEX Harvard Standard , .'\u2026", "num_citations": "13\n", "authors": ["173"]}
{"title": "Analyzing the flow of knowledge with sociometric badges\n", "abstract": " This paper presents a collection of \"best practices\" for the use of \"Sociometric Badges\" that support automatic collection of face-to-face interaction between workers within an organization. The practices presented aim to improve data quality over legacy methods allowing insights into the processes and structures of an enterprise's de-facto communication networks. Our approach uses dynamic Social Network Analysis (dSNA) to make it easier for executives to analyze and manage communications networks. The practical applicability of the approach was evaluated by case studies conducted in three different organizations: (1) the marketing department of a medium sized bank in Germany, (2) the post-anesthesia care unit at a large US hospital, (3) teams of software developers in a Nordic European country. For the analysis, we tracked, amongst others, all personal interactions between the knowledge workers in a department or team using sociometric badges worn by each employee for the duration of the case studies. We analyzed this sociometric data as well as emails and instant messages exchanged between the employees and compared it with performance data of individuals and teams. The paper highlights 16 key lessons learnt during these studies. The first nine lessons focus on overcoming the employee's privacy concerns to set up the necessary technology infrastructure, and the final seven provide general findings for efficient management of knowledge workers based upon the results of the case studies. Keywords: sociometric badges; social network analysis; knowledge flow optimization", "num_citations": "12\n", "authors": ["173"]}
{"title": "Studying communication in agile software development: a research framework and pilot study\n", "abstract": " Agile software development practices have gained significant importance during last few years as a methodology for implementing software projects. At the same time, software businesses have started to exploit the potential of global software development, most commonly to lower development costs and to access larger pools of competent labor. Global software development has proven to be difficult to implement efficiently, and while several different methods and practices have been proposed, many challenges, most of which are related to communication, still remain.", "num_citations": "12\n", "authors": ["173"]}
{"title": "The interactive goal panel: A methodology for aligning r&d activities with corporate strategy\n", "abstract": " This paper presents a goal-centered, participative approach for the development of R&D metrics that reflect the strategic goals of the company, helping to align the R&D efforts with corporate strategy. The approach combines two popular methods: the balanced scorecard from strategic management; and the goal question metric paradigm from software engineering. The approach uses the balanced scorecard as a framework for aligning the goals to corporate strategy. GQM is applied to each perspective, defining the goals, and deriving the associated questions and metrics. Benefits of the approach are that we get a balanced set of metrics, which is linked to corporate strategic goals, making strategy visible at multiple organizational levels. The participative nature of the approach increases commitment, and enhances organizational learning. The paper concludes with the authors' first experiences in applying this\u00a0\u2026", "num_citations": "12\n", "authors": ["173"]}
{"title": "Rethinking replication in software engineering: Can we see the forest for the trees\n", "abstract": " In this paper, we argue that the concept of replication of empirical studies in software engineering should be understood more broadly than it currently is. In particular, the replication of case studies and surveys as a way of validating and extending theories should be incorporated in the mainstream view of replication, which at present is mostly focused on controlled experiments. A small-sample study of papers in IEEE Transactions on Software Engineering shows that about 10% of studies published in 2009 can be considered replications. However, none of these was self-labeled as replication. We think that the authors believed that labeling their work as replication might decrease its value in the eyes of reviewers and editors. We conclude that there is no acute shortage of replication studies in software engineering if taking a broader viewpoint to replication, but the definition and valuation of \u2018replication studies\u2019 need to be re-evaluated in the software engineering community.", "num_citations": "9\n", "authors": ["173"]}
{"title": "Using the internet to communicate software metrics in a large organization\n", "abstract": " Many companies face serious problems in implementing their software process improvement (SPI) programs. Often, the problems are related to human factors such as lack of knowledge, communication, or motivation. Not providing suitable tools can also hinder implementation as SPI activities often include some overhead to the normal job. Good tools can help lower the adoption barrier by minimizing the cost of, for example, metrics data collection and by providing immediate feedback to the practitioners. This paper discusses how Ericsson in Finland used a WWW-based tool to improve its software inspection process and how, based on those experiences, it is further developing software process support based on Internet technology.", "num_citations": "9\n", "authors": ["173"]}
{"title": "Pacing software product development: a framework and practical implementation guidelines\n", "abstract": " Pacing Software Product Development: A Framework and Practical Implementation Guidelines \u2014 Aalto University's research portal Skip to main navigation Skip to search Skip to main content Aalto University's research portal Logo Accessibility statement English Suomi Home Profiles Research output Datasets Projects Prizes Activities Press / Media Infrastructure Research Units Impacts Search by expertise, name or affiliation Pacing Software Product Development: A Framework and Practical Implementation Guidelines Kristian Rautiainen, Casper Lassenius, Juha Itkonen, Mika V. M\u00e4ntyl\u00e4, Mikko Rusama, Jari Vanhanen, Jarno V\u00e4h\u00e4niitty Research output: Book/Report \u203a Book \u203a Professional Overview Original language English Place of Publication Espoo Publisher Helsinki University of Technology, Software Business and Engineering Institute ISBN (Electronic) 951-22-8382-4 ISBN (Print) 951-22-7069-2 Publication - , :\u2026", "num_citations": "7\n", "authors": ["173"]}
{"title": "Integrating process modeling with configuration management\n", "abstract": " Integrating Process Modeling with Configuration Management \u2014 Aalto University's research portal Skip to main navigation Skip to search Skip to main content Aalto University's research portal Logo Accessibility statement English Suomi Home Profiles Research output Datasets Projects Prizes Activities Press / Media Infrastructure Research Units Impacts Search by expertise, name or affiliation Integrating Process Modeling with Configuration Management Casper Lassenius, Reijo Sulonen, Kari Alho, V. W\u00e4yrynen Research output: Chapter in Book/Report/Conference proceeding \u203a Conference contribution \u203a Scientific \u203a peer-review Overview Original language English Title of host publication 5th International Workshop on Software Configuration Management, Seattle, Washington, April 24-25, 1995 Pages 187-195 Publication status Published - 1995 MoE publication type A4 Article in a conference publication Keywords .\u2026", "num_citations": "6\n", "authors": ["173"]}
{"title": "Long-Term Planning of Development Efforts by Roadmapping\u2013A Model and Experiences from Small Software Companies\n", "abstract": " Success in the software product business requires timely release of new products and upgrades with proper quality and the right features. For this, a systematic approach for managing the contents, timing and roles of future product releases as well as the product architecture is needed. In practice, such an approach is often missing, especially in small companies, due to inexperience, unclear priorities, time-to-market pressures, or the lack of suitable process infra-structure. In this paper, we present a model to visualize product roadmaps developed together with three small software companies and experiences from its use. The model depicts release and development schedules, the composition of individual releases, services that require attention from the developers, changes to the underlying technology and the planned resource usage. We also present lessons learned from the case companies and outline\u00a0\u2026", "num_citations": "5\n", "authors": ["173"]}
{"title": "Key Issues in New Product Development Controllability Improvement\u2013Lessons Learned from European High-Tech Industries\n", "abstract": " An interview study reveals the problems companies face trying to improve the controllability of their new product development (NPD). The primary improvement area at the moment is the front end of the NPD process. Other improvement areas include the visibility and tracking of projects, and communication between people and projects.", "num_citations": "4\n", "authors": ["173"]}
{"title": "The Design of the Software Workmate Process-Centered Software Engineering Environment\n", "abstract": " This thesis has been written at Helsinki University of Technology as a part of the ProHAKE research project at the Laboratory of Information Processing Science.ProHAKE was a Finnish national research program which aimed at advances in four main areas: process assessment, process modeling, process measurement, and process improvement. The research was carried out by a consortium consisting of Nokia Research Center, the University of Oulu, CCC Software Professionals, VTT Electronics, the Information Technology Development Center (TIEKE) and Helsinki University of Technology. The program was funded by the Technology Development Center of Finland (TEKES) and by the participating companies.", "num_citations": "4\n", "authors": ["173"]}
{"title": "Divide and delegate (DaD)\u2014an application for coordinating team activities\n", "abstract": " This paper presents an application called DaD (Divide and Delegate) for coordinating team activities in a distributed environment. The application is actually a simple user interface to a more versatile process support system currently under development. The conceptual framework and supporting architecture of the process support system is also briefly discussed in this paper. The framework includes abstractions of all critical entities and their relationships needed to model complex tasks in a distributed environment. We are able to support multi-paradigm process descriptions, since the support system only sees process execution as operations executed by agents. We do, however, support division and delegation of activities.", "num_citations": "4\n", "authors": ["173"]}
{"title": "Software development control panels: concepts, a toolset and experiences\n", "abstract": " This thesis discusses a concepts, guidelines, a toolset and experiences with defining and implementing on-line visual displays of software development progress, control panels. Control panels group sets of measurement visualizations providing a multi-dimensional, integrated view of development status. Control panels are developed at various organizational levels, serving the information needs of different stakeholders. Navigation between different control panels enables users to drill down to view more detailed information on, e.g., a particular project or on the progress of a particular development activity.  In the constructive part of the work, I describe concepts, and a toolset that can be used for defining and implementing control panels. In addition, I provide guidelines for grouping measures into control panels, and discuss how measurement programs can be partitioned into control panels. The toolset, built as a \"proof-of-concept\" consists of a central measurement database, a visualization client, and a set of data importers that transfer data from external corporate repositories into the measurement database.  The empirical part discusses our efforts to define and implement control panels in four high-technology companies in Finland. Framed in the context of \"constructive action research\", the cases are first described individually, according to the main steps of the action research cycle, then compared in a cross-case analysis. Our results\u2014we succeeded in implementing control panels in only one of four organizations\u2014indicate that the development of control panels requires a substantial investment and commitment by the organization, but that\u00a0\u2026", "num_citations": "3\n", "authors": ["173"]}
{"title": "The visualisation client applet-a tool for increasing the visibility of product development\n", "abstract": " This paper presents a WWW-based metrics data visualisation system that can help increase the visibility of new product development (NPD) in an organisation, and our experiences in deploying it in one Finnish company. The visualisation system can be used at all organisational levels and it provides different stakeholders with tailored data views, allowing managers, process owners and practitioners to focus on the aspects of NPD they are involved with or interested in. Navigation between views facilitates tracking aggregated metrics providing a way of monitoring progress towards strategic goals on multiple organisational levels.", "num_citations": "3\n", "authors": ["173"]}
{"title": "Enabling team autonomy in a large public organization\n", "abstract": " This paper describes how autonomy emerged in a team in a large public organization and which factors were important in this process. The organization has back sourced software development and abandoned a stagebased software development process with many handovers between business, IT and vendors. We collected data in four semi-structured interviews and analyzed information on changes in the structure and responsibilities of the team. The team has refined its portfolio for better cohesion, stepwise taken over the responsibility for software development from the vendor and in parallel recruited software developers, UX designers and testers. Product owners have joined the team as well. Supported by changes to the financing model, the team has transformed from mediating between business and vendors to a crossfunctional product team with autonomy over its budget, backlog and software development process. As a result, the team can better balance between delivering new features and quality improvements, continuously deliver software with less overhead and focus on its mission to deliver user-friendly services with increased involvement of domain experts. Defining a clear product boundary and reducing dependencies on other teams, developing necessary skills and changing the financing model are recognized as the main success factors, as well as the main challenges in the transition process.", "num_citations": "2\n", "authors": ["173"]}
{"title": "Preface to the special section on software business\n", "abstract": " Preface to the special section on software business | Journal of Systems and Software ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Journal of Systems and Software Periodical Home Latest Issue Archive Authors Affiliations Award Winners More HomeBrowse by TitlePeriodicalsJournal of Systems and SoftwareVol. , No. CPreface to the special section on software business research-article Preface to the special section on software business Share on Authors: Kari Smolander profile image Kari Smolander Innovation and Software, School of Business and Management, Lappeenranta University of Technology, PO Box 20, FI-53851 Finland Innovation and Software, School of Business and Management, of \u2026", "num_citations": "2\n", "authors": ["173"]}
{"title": "Scientific Writing\n", "abstract": " \u2022 Background\u2022 why is the research done & interesting (create a research space, citing literature)\u2022\u201cNot studied earlier, but is important\u2026\u201d\u2022 Objective", "num_citations": "2\n", "authors": ["173"]}
{"title": "Software Business\n", "abstract": " Software business refers to commercial activities in and around the software industry, aimed at generating income from the delivery of software products and software services. Although the software business shares common features with other international knowledge-intensive businesses, it carries many inherent features making it a challenging domain for research. In particular, software companies have to depend on one another to deliver a unique value proposition to their customers or a unique experience to their users. Moreover, recent developments like the emerging app economy offer a variety of opportunities for entrepreneurs and/or start-up companies. The recent acquisition of the three-year\u2013old Finnish mobile game start-up Supercell with the total value of 2.2 billion euro shows that the future of software is not only in utility, productivity, connection, and interchange, and but also in entertainment and free\u00a0\u2026", "num_citations": "2\n", "authors": ["173"]}
{"title": "Software Business. Towards Continuous Value Delivery: 5th International Conference, ICSOB 2014, Paphos, Cyprus, June 16-18, 2014, Proceedings\n", "abstract": " This book contains the refereed proceedings of the 5th International Conference on Software Business (ICSOB) held in Paphos, Cyprus, in June 2014. The theme of the event was\" Shortening the Time to Market: From Short Cycle Times to Continuous Value Delivery.\" The 18 full papers, two short papers, two industrial papers, and two doctoral consortium abstracts accepted for ICSOB were selected from 45 submissions and are organized in sections on: strategic aspects, start-ups and software business, products and service business, software development, ecosystems, and platforms and enterprises.", "num_citations": "1\n", "authors": ["173"]}
{"title": "Research Plan-Planning Product Releases in Global Multi-team Agile Development Projects\n", "abstract": " Release planning is a challenging part of market-driven product development and a success factor in agile software development projects. Release planning in an environment where multiple globally distributed teams are developing the same product requires careful coordination of responsibilities and technical dependencies. Existing release planning research has concentrated on mathematical model-based big upfront planning, which conflicts with agile methods. The goals of this research are to describe the release planning state-of-art in scientific literature and in real globally distributed agile software development projects, and to build a model for efficient release planning in globally distributed agile software development projects.", "num_citations": "1\n", "authors": ["173"]}
{"title": "Pacing Software Product Development: A Framework and Practical Implementation Guidelines\n", "abstract": " Software product business is big business\u2014and it is rapidly growing even bigger. The companies producing and selling packaged software, ie, software products that are developed once and then sold \u201cas is\u201d to a large number of customers constitute the most aggressively growing segment in the whole software industry. In 2002, the world markets for packaged software was estimated at 184 billion USD. In Europe, the market value of the software product industry in 2002 was estimated at 54 billion\u20ac. It was the fastest growing segment in the Western European information and communication technology markets. The annual growth for the software product industry has been over 10% during the last decade, and the rapid growth is expected to continue. In Finland, the software product industry is still young, immature, and economically quite insignificant. Most companies are young and small, and are struggling with the challenge of developing highly productised pieces of software for international markets. The overall value of the Finnish software product industry has been evaluated at 1 billion\u20ac in 2002, with a potential to reach up to 8 billion\u20ac by 2010. Of the total turnover, about 40% comes from exports. Despite the economic importance and promising outlook of the software product business, the software engineering community has been slow to react to the specific needs of companies doing software product development as opposed to customer projects. Most existing models, such as the CMM and most standards, share two common traits that are challenging from the point of view of adopting them in Finnish software product businesses. Firstly\u00a0\u2026", "num_citations": "1\n", "authors": ["173"]}
{"title": "Combining data from existing company sources: architecture and experiences\n", "abstract": " Combining data from existing company sources: architecture and experiences \u2014 Aalto University's research portal Skip to main navigation Skip to search Skip to main content Aalto University's research portal Logo Accessibility statement English Suomi Home Profiles Research output Datasets Projects Prizes Activities Press / Media Infrastructure Research Units Impacts Search by expertise, name or affiliation Combining data from existing company sources: architecture and experiences Jari Vanhanen, Casper Lassenius, Kristian Rautiainen Research output: Chapter in Book/Report/Conference proceeding \u203a Chapter \u203a Scientific 2 Citations (Scopus) Overview Original language English Title of host publication Knowledge Management Systems: Theory and Practice Editors Stuart Barnes Place of Publication London Publisher Thomson Learning Pages 161-176 ISBN (Print) 1-86152-616-4 Publication status Published - \u2026", "num_citations": "1\n", "authors": ["173"]}