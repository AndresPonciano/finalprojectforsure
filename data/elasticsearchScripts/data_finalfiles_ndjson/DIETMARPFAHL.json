{"title": "Reporting experiments in software engineering\n", "abstract": " Background: One major problem for integrating study results into a common body of knowledge is the heterogeneity of reporting styles: (1) It is difficult to locate relevant information and (2) important information is often missing.                            Objective: A guideline for reporting results from controlled experiments is expected to support a systematic, standardized presentation of empirical research, thus improving reporting in order to support readers in (1) finding the information they are looking for, (2) understanding how an experiment is conducted, and (3) assessing the validity of its results.                            Method: The guideline for reporting is based on (1) a survey of the most prominent published proposals for reporting guidelines in software engineering and (2) an iterative development incorporating feedback from members of the research community.                            Result: This chapter presents the\u00a0\u2026", "num_citations": "396\n", "authors": ["185"]}
{"title": "Reporting guidelines for controlled experiments in software engineering\n", "abstract": " One major problem for integrating study results into a common body of knowledge is the heterogeneity of reporting styles: (1) it is difficult to locate relevant information and (2) important information is often missing. Reporting guidelines are expected to support a systematic, standardized presentation of empirical research, thus improving reporting in order to support readers in (1) finding the information they are looking for, (2) understanding how an experiment is conducted, and (3) assessing the validity of its results. The objective of this paper is to survey the most prominent published proposals for reporting guidelines, and to derive a unified standard that which can serve as a starting point for further discussion. We provide detailed guidance on the expected content of the sections and subsections for reporting a specific type of empirical studies, i.e., controlled experiments. Before the guidelines can be evaluated\u00a0\u2026", "num_citations": "340\n", "authors": ["185"]}
{"title": "How do scientists develop and use scientific software?\n", "abstract": " New knowledge in science and engineering relies increasingly on results produced by scientific software. Therefore, knowing how scientists develop and use software in their research is critical to assessing the necessity for improving current development practices and to making decisions about the future allocation of resources. To that end, this paper presents the results of a survey conducted online in October-December 2008 which received almost 2000 responses. Our main conclusions are that (1) the knowledge required to develop and use scientific software is primarily acquired from peers and through self-study, rather than from formal education and training; (2) the number of scientists using supercomputers is small compared to the number using desktop or intermediate computers; (3) most scientists rely primarily on software with a large user base; (4) while many scientists believe that software testing is\u00a0\u2026", "num_citations": "293\n", "authors": ["185"]}
{"title": "Using simulation to analyse the impact of software requirement volatility on project performance\n", "abstract": " During the last decade, software process simulation has been used to address a variety of management issues and questions. These include: understanding; training and learning; planning; control and operational management; strategic management; process improvement and technology adoption.This paper presents a simulation model that was developed to demonstrate the impact of unstable software requirements on project performance, and to analyse how much money should be invested in stabilising software requirements in order to achieve optimal cost effectiveness. The paper reports on all steps of model building, describes the structure of the final simulation model, and presents the most interesting simulation results of an industrial application.", "num_citations": "127\n", "authors": ["185"]}
{"title": "Reflections on 10 years of software process simulation modeling: A systematic review\n", "abstract": " Software process simulation modeling (SPSM) has become an increasingly active research area since its introduction in the late 1980s. Particularly during the last ten years the related research community and the number of publications have been growing. The objective of this research is to provide insights about the evolution of SPSM research during the last 10 years. A systematic literature review was proposed with two subsequent stages to achieve this goal. This paper presents the preliminary results of the first stage of the review that is exclusively focusing on a core set of publication sources. More than 200 relevant publications were analyzed in order to find answers to the research questions, including the purposes and scopes of SPSM, application domains, and predominant research issues. From the analysis the following conclusions could be drawn: (1) Categories for classifying software process\u00a0\u2026", "num_citations": "121\n", "authors": ["185"]}
{"title": "A COTS acquisition process: Definition and application experience\n", "abstract": " The use of Commercial-Off-The-Shelf (COTS) software products in state-of-the-practice software development has shown a substantial increase during the last few years. The benefits of COTS usage are clear: reduced development cost and shorter time-to-market. However, using COTS software in development activities also raises risks such as using software that does not sufficiently satisfy the requirements regarding, eg, reliability, fault tolerance, functionality. Thus, a sound method that helps to decide which COTS software will be used in a specific development context has become mandatory. This report introduces and describes a well-defined, systematic, and repeatable COTS acquisition process (CAP) and experience of using a tailored version of the process in a Siemens Business Unit. This includes the definition of the process, a brief description of the activities, and the description of the heuristics for effectiveness and efficiency integrated with the process. Moreover, we present data on cost, benefit, and quality aspects originating from an industrial case study in which the process was applied. From this data collected during the pilot project, conclusions are drawn on the process performance and whether it is worthwhile to apply the CAP.", "num_citations": "108\n", "authors": ["185"]}
{"title": "A method for efficient measurement-based COTS assessment and selection: method description and evaluation results\n", "abstract": " The use of commercial-off-the-shelf (COTS) software has become more and more important in state-of-the-art and state-of-the-practice software and system development. The use of COTS software promises faster time-to-market, reduced development costs, increased productivity, and the possibility for companies to focus on their own core competencies. At the same time, COTS software increases risks, such as the economic instability of the COTS software vendor, unknown quality properties of the COTS software in use, and side-effects of the COTS software on the final product. Typically, COTS-based development, in parallel with the traditional development cycle (e.g. waterfall, spiral), consists of four phases. The first phase (COTS assessment and selection) is the most crucial phase in the COTS-based cycle, since long-term decisions about which COTS software to use in a software system are made there. A late\u00a0\u2026", "num_citations": "84\n", "authors": ["185"]}
{"title": "Using simulation for assessing the real impact of test-coverage on defect-coverage\n", "abstract": " The use of test coverage measures (e.g. block coverage) to control the software test process has become an increasingly common practice. This is justified by the assumption that higher test coverage helps achieve higher defect coverage and therefore improves software quality. In practice, data often shows that defect coverage and test coverage grow over time, as additional testing is performed. However, it is unclear whether this phenomenon of concurrent growth can be attributed to a causal dependency or if it is coincidental, simply due to the cumulative nature of both measures. Answering such a question is important as it determines whether a given test coverage measure should be monitored for quality control and used to drive testing. Although this is no general answer to the problem above, we propose a procedure to investigate whether any test coverage criterion has a genuine additional impact on defect\u00a0\u2026", "num_citations": "82\n", "authors": ["185"]}
{"title": "Software process simulation modeling: an extended systematic review\n", "abstract": " Software Process Simulation Modeling (SPSM) research has increased in the past two decades, especially since the first ProSim Workshop held in 1998. Our research aims to systematically assess how SPSM has evolved during the past 10 years in particular whether the purposes for SPSM, the simulation paradigms, tools, research topics, and the model scopes and outputs have changed. We performed a systematic literature review of the SPSM research in two subsequent stages, and identified 156 relevant studies in four categories. This paper reports the review process of the second stage and the preliminary results by aggregating studies from the two stages. Although the load of SPSM studies was dominated in ProSim/ICSP community, the outside research presented more diversity in some aspects. We also perceived an immediate need for refining and updating the reasons and the classification\u00a0\u2026", "num_citations": "74\n", "authors": ["185"]}
{"title": "What Do We Know about Scientific Software Development's Agile Practices?\n", "abstract": " The development of scientific software has similarities with processes that follow the software engineering \"agile manifesto\": responsiveness to change and collaboration are of utmost importance. But how well do current scientific software-development processes match the practices found in agile development methods, and what are the effects of using agile practices in such processes?", "num_citations": "63\n", "authors": ["185"]}
{"title": "A literature review of agile practices and their effects in scientific software development\n", "abstract": " The nature of scientific research and the development of scientific software have similarities with processes that follow the agile manifesto: responsiveness to change and collaboration are of the utmost importance. But how well do current scientific software development processes match the practices found in agile development methods, and what are the effects of using agile practices in such processes? In order to investigate this, we conduct a literature review, focusing on evaluating the agility present in a selection of scientific software projects. Both projects with intentionally agile practices and projects with a certain degree of agile elements are taken into consideration. In the agility assessment, we define and utilize an agile mapping chart. The elements of the mapping chart are based on Scrum and XP, thus covering two of the most prominent agile reference models. We compared the findings of the literature\u00a0\u2026", "num_citations": "60\n", "authors": ["185"]}
{"title": "An integrated approach to simulation based learning in support of strategic and project management in software organisations\n", "abstract": " Industrial software development is a highly complex, dynamic task, which is not only determined by the choice of the right technologies but also\u2013to a large degree\u2013by the knowledge and skills of the people involved. The success of software organisations depends on its ability to facilitate continuous improvement of products and processes (strategic level) and on the effectiveness and efficiency of product development (project level). On both levels management takes the key role.", "num_citations": "57\n", "authors": ["185"]}
{"title": "Using Dynamic and Contextual Features to Predict Issue Lifetime in GitHub Projects\n", "abstract": " Methods for predicting issue lifetime can help software project managers to prioritize issues and allocate resources accordingly. Previous studies on issue lifetime prediction have focused on models built from static features, meaning features calculated at one snapshot of the issue's lifetime based on data associated to the issue itself. However, during its lifetime, an issue typically receives comments from various stakeholders, which may carry valuable insights into its perceived priority and difficulty and may thus be exploited to update lifetime predictions. Moreover, the lifetime of an issue depends not only on characteristics of the issue itself, but also on the state of the project as a whole. Hence, issue lifetime prediction may benefit from taking into account features capturing the issue's context (contextual features). In this work, we analyze issues from more than 4000 GitHub projects and build models to predict, at\u00a0\u2026", "num_citations": "55\n", "authors": ["185"]}
{"title": "Software process simulation modeling: Facts, trends and directions\n", "abstract": " Software process simulation modeling (SPSM) research has increased since the first ProSim workshop held in 1998 and Kellner, Madachy and Raffo (KMR) discussed the \"why, what and how\" of process simulation. This paper aims to assess how SPSM has evolved during the past 10 years in particular whether the reasons for SPSM, the simulation paradigms, tools, problem domains, and model scopes have changed. We performed a systematic literature review of software process simulation papers from the ProSim series publications in the last decade. We identified 96 studies from the sources and included them in this review. The papers were categorized into four major types and data needed to address each research question was extracted. We found a need for refining the reasons and the classification scheme for SPSM introduced by KMR. More emerging SPSM paradigms and model scopes were added to\u00a0\u2026", "num_citations": "54\n", "authors": ["185"]}
{"title": "Integration of system dynamics modelling with descriptive process modelling and goal-oriented measurement\n", "abstract": " One of the obstacles that seem to impede a more frequent application of the modelling and simulation approach system dynamics (SD) in the software engineering community is the lack of well-defined and repeatable procedures for generating or using information that (a) stems from real industrial software development practice and (b) is suitable for SD model building. This problem can be resolved, at least partially, by combining SD modelling with already existing and commonly used static modelling methods, namely software process modelling and measurement-based quantitative modelling. To illustrate the feasibility of such a combination, in this paper, an approach is proposed that complements SD modelling with descriptive process modelling and goal-oriented measurement performed according to the principles of the well-established goal/question/metric (GQM) paradigm. The new approach is called\u00a0\u2026", "num_citations": "54\n", "authors": ["185"]}
{"title": "Simulation Methods\n", "abstract": " This chapter aims to raise awareness about the usefulness and importance of simulation in support of software engineering. Simulation is applied in many critical engineering areas and enables one to address issues before they become problems. Simulation \u2013 in particular process simulation \u2013 is a state of the art technology to analyze process behaviour, risks and complex systems with their inherent uncertainties. Simulation provides insights into the designs of development processes and projects before significant time and cost has been invested, and can be of great benefit in support of training. The systematic combination of simulation methods with empirical research has the potential for becoming a powerful tool in applied software engineering research. The creation of virtual software engineering laboratories helps to allocate available resources of both industry and academia more effectively.", "num_citations": "42\n", "authors": ["185"]}
{"title": "How can open source software development help requirements management gain the potential of open innovation: an exploratory study\n", "abstract": " A key component in successfully managing software products is to properly, and in a timely manner, identify and secure competitive advantage by innovation via feature differentiation. Although open source software (OSS) is not a new idea, several product development companies that operate in a market-driven context have started to use open source solutions as core software components in their products. Adopting open source core components implies a lower degree of control over software development and increased business risk associated with integrating differentiating contributions into the core release stream. Whether and how to adjust the current requirements management practices after the adoption of OSS components to fully benefit from the concept of open innovation has not yet been empirically explored. We outline experiences and challenges related to leveraging open innovation via engaging\u00a0\u2026", "num_citations": "32\n", "authors": ["185"]}
{"title": "How is exploratory testing used? A state-of-the-practice survey\n", "abstract": " Context: Exploratory Testing has experienced a rise in popularity in the industry with the emergence of agile development practices, yet it remains unclear, in which domains and how it is used in practice.Goal: To study how software engineers understand and apply the principles of exploratory testing, as well as the specific advantages and difficulties they experience.Method: We conducted an online survey in the period June to August 2013 among Estonian and Finnish software developers and testers.Results: Our main findings are that the majority of testers, developers, and test managers using ET,(1) apply ET to usability-critical, performance-critical, security-critical and safety-critical software to a high degree;(2) use ET very flexibly in all types of test levels, activities, and phases;(3) perceive ET as an approach that supports creativity during testing and that is effective and efficient; and (4) find that ET is not easy to\u00a0\u2026", "num_citations": "30\n", "authors": ["185"]}
{"title": "A systematic approach to produce small courseware modules for combined learning and knowledge management environments\n", "abstract": " Combining technology enabled learning and knowledge management is a very promising strategy to systematic competence building in software organizations. In order to set-up a combined learning and knowledge management environment and to support organization members in packaging small chunks of knowledge into courseware modules, Fraunhofer IESE developed the IntView-KM methodology. IntView-KM defines how to provide the organizational, methodological, and technological prerequisites that enable software engineers to produce small courseware modules (contents) as a byproduct of their daily work. This paper presents the two phases of the IntView-KM methodology. Furthermore, tool support for courseware module production is recommended and the existing tool support summarized. Finally, experiences in applying IntView-KM and results of a first evaluation of the tool support for IntView\u00a0\u2026", "num_citations": "29\n", "authors": ["185"]}
{"title": "Knowledge acquisition and process guidance for building system dynamics simulation models: an experience report from software industry\n", "abstract": " System Dynamics (SD) is a method that allows for integrated modelling of technical as well as managerial aspects responsible for the dynamic complexity of systems. Therefore, simulation of SD models can also be a tool for problem analysis within software organisations.         In this paper, experience with SD modelling of software processes and projects within Siemens is reported. Special focus is put on problems encountered during knowledge acquisition for SD model building, like inadequate guidance while conducting SD modelling projects, and insufficient methodical support for re-using available or generating missing knowledge. Both problems were addressed in a research project, jointly conducted by Fraunhofer IESE and Siemens Corporate Technology. One of the results of this project is a prescriptive process model for building SD models. This process model, which is briefly outlined in the paper\u00a0\u2026", "num_citations": "27\n", "authors": ["185"]}
{"title": "PROFES: A product driven process improvement methodology\n", "abstract": " PROFES: A product driven process improvement methodology \u2014 VTT's Research Information Portal Skip to main navigation Skip to search Skip to main content VTT's Research Information Portal Logo Home Profiles Research output Projects Datasets Research Units Research Infrastructures Activities Prizes Press / Media Impacts Search by expertise, name or affiliation PROFES: A product driven process improvement methodology Andreas Birk, Janne J\u00e4rvinen, Seija Komi-Sirvi\u00f6, Pasi Kuvaja, Markku Oivo, Dietmar Pfahl VTT Technical Research Centre of Finland Research output: Chapter in Book/Report/Conference proceeding \u203a Conference article in proceedings \u203a Scientific Overview Fingerprint Original language English Title of host publication Proceedings of the European Conference on Software Process Improvement, SPI '98 Place of Publication Monaco Publication status Published - 1998 MoE publication B3 -'\u2026", "num_citations": "27\n", "authors": ["185"]}
{"title": "Development of Scientific Software: A Systematic Mapping, a Bibliometrics Study, and a Paper Repository\n", "abstract": " Scientific and engineering research is heavily dependent on effective development and use of software artifacts. Many of these artifacts are produced by the scientists themselves, rather than by trained software engineers. To address the challenges in this area, a research community often referred to as \"Development of Scientific Software\" has emerged in the last few decades. As this research area has matured, there has been a sharp increase in the number of papers and results made available, and it has thus become important to summarize and provide an overview about those studies. Through a systematic mapping and bibliometrics study, we have reviewed 130 papers in this area. We present the results of our study in this paper. Also we have made the mapping data available on an online repository which is planned to be updated on a regular basis. The results of our study seem to suggest that many\u00a0\u2026", "num_citations": "26\n", "authors": ["185"]}
{"title": "System dynamics applied to the modeling of software projects\n", "abstract": " System dynamics is an approach to the modelling and simulation of non-physical systems. In the past, typical application domains were social, biological, or economical systems. Recently, a new application domain has emerged: software development. The report summarises the major results of a study performed to review world-wide activities in the field of system dynamics modelling and simulation applied to software development projects. The basic concepts of the system dynamics approach are presented. Five potential uses of the method for software development projects are identified, discussed and judged with respect to their relevance. The most promising application areas for industrial purposes are training and management support for strategic decisions.", "num_citations": "25\n", "authors": ["185"]}
{"title": "Operational planning, re-planning and risk analysis for software releases\n", "abstract": " Software release planning takes place on strategic and operational levels. Strategic release planning aims at assigning features to subsequent releases such that technical, resource, risk and budget constraints are met. Operational release planning focuses on the realization of a single software release. Its purpose is to assign resources to feature development tasks such that total release duration is minimized under given process and project constraints. Re-planning becomes necessary on operational level due to addition or deletion of features during release development, or due to changes in the workforce. The allocation of resources to feature development tasks may depend on the accurate estimation of planning parameters such as feature size, developer productivity or development task dependencies. Risk analysis can help assess the vulnerability of a chosen release plan due to these\u00a0\u2026", "num_citations": "23\n", "authors": ["185"]}
{"title": "A product-process dependency definition method\n", "abstract": " The success of most software companies depends largely on software product quality. High product quality is usually a result of advanced software development processes. Hence, improvement actions should be selected based on sound knowledge about the dependencies between software product quality attributes and software development processes. The article describes a method for developing product/process dependency models (PPDMs) for product driven software process improvement. The basic idea of the PPDM approach is that there are dependencies between product quality attributes, which are examined according to ISO 9126, and the software processes, which are assessed with the BOOTSTRAP methodology for example. The Goal-Question-Metric approach is used for product/process dependency hypothesis generation, analysis, and validation. We claim that after finding and using these\u00a0\u2026", "num_citations": "22\n", "authors": ["185"]}
{"title": "Feature-based evaluation of competing apps\n", "abstract": " App marketplaces, ie Google Play Store and Apple AppStore, comprise many competing apps offering a fair set of similar features. Users of competing apps can submit feedback in the form of ratings and textual comments. The feedback is useful for app developers to get a better understanding of where their app stands in the competition. However, app ratings don\u2019t provide concrete information regarding users\u2019 perceptions about an app\u2019s features compared to similar apps. Studies have shown that users express sentiments on app features in app reviews. Therefore, user reviews are a valuable information source to compare competing apps based on users' sentiments regarding features. So far, researchers have analyzed app reviews to summarize the users\u2019 sentiments on app features but the existing approaches have not been used for the comparison of competing apps. In this direction, we analyze app reviews\u00a0\u2026", "num_citations": "21\n", "authors": ["185"]}
{"title": "When to automate software testing? A decision-support approach based on process simulation\n", "abstract": " Software test processes are complex and costly. To reduce testing effort without compromising effectiveness and product quality, automation of test activities has been adopted as a popular approach in software industry. However, because test automation usually requires substantial upfront investments, automation is not always more cost\u2010effective than manual testing. To support decision\u2010makers in finding the optimal degree of test automation in a given project, we recently proposed a process simulation model using the System Dynamics modeling technique and used the simulation model in the context of a case study with a software company in Calgary, Canada. With the help of the simulation model, we were able to evaluate the performance of test processes with varying degrees of automation of test activities and help testers choose the most optimal cases. The goal of the earlier study was to investigate how\u00a0\u2026", "num_citations": "21\n", "authors": ["185"]}
{"title": "ProSim/RA\u2013Software Process Simulation in Support of Risk Assessment\n", "abstract": " Software development generates and maintains a wide range of artifacts, such as documentation, requirements, design models, and test scenarios; all of which add value to the understanding of the software system. Trace dependencies identify the relationships among these artifacts. They contribute to the better understanding of a software system as they link its distributed knowledge. Trace dependencies are also vital for many automated analyses including the impact of change and consistency checking. This chapter compares the problem of manual traceability versus automated traceability with the Trace/Analyzer approach. This chapter also explores how to tailor precision, completeness, correctness, and timeliness to adjust the trace analysis to value-based needs.", "num_citations": "21\n", "authors": ["185"]}
{"title": "Using text clustering to predict defect resolution time: a conceptual replication and an evaluation of prediction accuracy\n", "abstract": " Defect management is a central task in software maintenance. When a defect is reported, appropriate resources must be allocated to analyze and resolve the defect. An important issue in resource allocation is the estimation of Defect Resolution Time (DRT). Prior research has considered different approaches for DRT prediction exploiting information retrieval techniques and similarity in textual defect descriptions. In this article, we investigate the potential of text clustering for DRT prediction. We build on a study published by Raja (2013) which demonstrated that clusters of similar defect reports had statistically significant differences in DRT. Raja\u2019s study also suggested that this difference between clusters could be used for DRT prediction. Our aims are twofold: First, to conceptually replicate Raja\u2019s study and to assess the repeatability of its results in different settings; Second, to investigate the potential of\u00a0\u2026", "num_citations": "19\n", "authors": ["185"]}
{"title": "Making software process simulation modeling agile and pattern-based\n", "abstract": " Though being the origin or predecessor of all process simulation modeling (PSM) approaches used in software engineering today, until recently, there did not exist a detailed and to software engineering needs adjusted simulation modeling methodology around the System Dynamics (SD) simulation modeling approach. The fact that existing process guidance for SD model development was only on informal and coarse grain level stimulated the development of a framework for SDM development, IMMoS (Integrated Measurement, Modeling, and Simulation)[11][12].The IMMoS methodology supports managers to cope with the dynamic complexity of software development by providing guidance on constructing simulation models and using them as a source for learning and improvement. This was achieved by enhancing existing guidance for SD modeling with an additional component that enforces goal-orientation and with a refined process model that details description of activities, entry/exit criteria, input/output products, and roles involved. To smoothly close the gap to methods already established in empirical software engineering, IMMoS describes how to combine SD modeling with goal-oriented measurement and descriptive process modeling. IMMoS methodology consists of four phases and seventeen main activities distributed among the phases to guide the users in constructing an SD model. Unfortunately, software PSM is still considered a time-consuming and expensive task not yet widely accepted in software engineering. This is partly due to the specific nature of software development as compared to other engineering discipline where\u00a0\u2026", "num_citations": "19\n", "authors": ["185"]}
{"title": "Virtual software engineering laboratories in support of trade-off analyses\n", "abstract": " Due to demanding customer needs and evolving technology, software organizations are forced to trade individual functional and non-functional product quality profiles against other factors such as cost, time, or productivity. The ability to influence or even control these factors requires a deep understanding of the complex relations between process and product attributes in relevant contexts. Based on such understanding, decision support is needed to adjust processes so that they match the product quality goals without violating given project constraints. We propose to use a Virtual Software Engineering Laboratory (VSEL) to establish such decision support cost-effectively. VSELs can be considered as being complementary to existing (empirical) Software Engineering Laboratories. This paper gives an introduction into the cornerstones of VSELs, discusses how they complement traditional empirically based\u00a0\u2026", "num_citations": "18\n", "authors": ["185"]}
{"title": "Experience-based model-driven improvement management with combined data sources from industry and academia\n", "abstract": " Experience-based improvement using various modeling techniques is an important issue in software engineering. Many approaches have been proposed and applied in both industry and academia, e.g., case studies, pilot projects, controlled experiments, assessments, expert opinion polls, experience bases, goal-oriented measurement, process modeling, statistical modeling, data mining, and simulation. Although these approaches can be combined and organized according to the principles of the quality improvement paradigm (QIP) and the associated experience factory (EF) concepts, there are serious problems with: a) effective and efficient integration of the various approaches; and, b) the exchange of experience and data between industry and academia. In particular, the second problem strongly limits opportunities for joint research efforts and cross-organizational synergy. Based upon lessons learned from\u00a0\u2026", "num_citations": "18\n", "authors": ["185"]}
{"title": "Using developers' features to estimate story points\n", "abstract": " Effort estimation is important to correctly plan the use of resources in a software project. In agile projects, a correct effort estimation helps decide which issues have to be fixed or finished during the next iteration. However, estimating issues can be a complex task and developers may make inaccurate estimates. Therefore, the use of automatic approaches that aim to support developers in the estimation process is worth to be studied. We explore the use of a predictive model that use developers' features to assign story points to issue reports. The performance of the model is compared with the performance of models based on features extracted from the text of issues. We assessed the models with different performance metrics including Accuracy, Mean Absolute Error, and Standardized Accuracy. The preliminary results show that the model that uses developers' features sightly outperforms the models based on text\u00a0\u2026", "num_citations": "17\n", "authors": ["185"]}
{"title": "Issue dynamics in github projects\n", "abstract": " Issue repositories are used to keep of track of bugs, development tasks and feature requests in software development projects. In the case of open source projects, everyone can submit a new issue in the tracker. This practice can lead to situations where more issues are created than what can be effectively handled by the project members, raising the question of how issues are treated as the capacity of the project members is exceeded. In this paper, we study the temporal dynamics of issues in a popular open source development platform, namely Github, based on a sample of 4000 projects. We specifically analyze how the rate of issue creation, the amount of pending issues, and their average lifetime evolve over the course of time. The results show that more issues are opened shortly after the creation of a project repository and that the amount of pending issues increases inexorably due to forgotten\u00a0\u2026", "num_citations": "16\n", "authors": ["185"]}
{"title": "Making software engineering competence development sustained through systematic experience management\n", "abstract": " Applying systematic experience management to innovative e-learning approaches provides means for more efficient and effective competence development of software professionals-on-the-job, on-demand, and geographically distributed. Adequately packaged experience provides the starting point for the preparation and design of learning resources and for efficient reuse. Systematic evaluation during usage helps improve the quality of learning resources and identify best practice use cases, which then can be exploited to proactively offer best-matching learning resources in a given learning setting. By improving e-learning through integrated experience management, eventually qualification programs for the software workforce will develop longer lasting effects and thus will be considered more sustained by the responsible management levels. Inspired by an innovative system for collaborative learning in\u00a0\u2026", "num_citations": "15\n", "authors": ["185"]}
{"title": "A systems perspective on software process improvement\n", "abstract": " Software process improvement often lacks strong links to project management and control activities, which are concerned with identifying the need of process change and triggering improvement initiatives. Project management, on the other hand, often fails at selecting appropriate software engineering methods and technology that help to ensure project success. This paper proposes a model that guides project managers (1) to set up a project so that it can reach its specific goals and (2) to identify corrective actions (or changes) once a project is at risk of failing its goals. The model complements established improvement methods such as CMMI, GQM, and Experience Factory and links them to those project management activities that often are the starting point of improvement initiatives.", "num_citations": "15\n", "authors": ["185"]}
{"title": "Do better IR tools improve the accuracy of engineers' traceability recovery?\n", "abstract": " Large-scale software development generates an ever-growing amount of information. Multiple research groups have proposed using approaches from the domain of information retrieval (IR) to recover traceability. Several enhancement strategies have been initially explored using the laboratory model of IR evaluation for performance assessment. We conducted a pilot experiment using printed candidate lists from the tools RETRO and ReqSimile to investigate how different quality levels of tool output affect the tracing accuracy of engineers. Statistical testing of equivalence, commonly used in medicine, has been conducted to analyze the data. The low number of subjects in this pilot experiment resulted neither in statistically significant equivalence nor difference. While our results are not conclusive, there are indications that it is worthwhile to investigate further into the actual value of improving tool support for semi\u00a0\u2026", "num_citations": "14\n", "authors": ["185"]}
{"title": "Using simulation to visualise and analyse product-process dependencies in software development projects\n", "abstract": " The core element of the PROFES improvement methodology is the concept of product-process dependency (PPD) models. The purpose of PPD models is to help focus process improvement activities to those development technologies and processes that are most effective with regards to achieving specific customer-defined product quality goals. This paper describes how system dynamics simulation models can be used to check the plausibility of achieving positive effects on software product quality when implementing improvement actions derived from PPD models. Basically, this is done through extending an existing generic software project simulation model with structures that represent expected local cause-effect mechanisms of the PPD models. By running simulations with the extended software project simulation model, the potential effects of the PPD models on product quality can be investigated at\u00a0\u2026", "num_citations": "13\n", "authors": ["185"]}
{"title": "Modeling Software Processes Using BPMN: When and When Not?\n", "abstract": " Software process models capture structural and behavioral properties of software development activities, supporting the elicitation, analysis, simulation, and improvement of software development processes. Various approaches for the modeling and model-driven analysis of software development processes have been proposed but little progress has been made regarding standardization. With increasing demands regarding flexibility and adaptability of development processes, the constant evolution of development methods and tools, and the trend toward continuous product deployment, better support for process engineers in terms of universally applicable modeling notations as well as simulation and enactment mechanisms has become more desirable than ever. In contrast to software process modeling, the discipline of business process modeling has attained a greater level of consensus and\u00a0\u2026", "num_citations": "12\n", "authors": ["185"]}
{"title": "Integrating Needs Assessment Within Next Generation E-learning Systems\n", "abstract": " In this paper we outline a method for systematically addressing needs assessment (QUALISEM-PEOPLE), alongside a case study of its use within a medium sized, German company. The method was designed in order to provide guidance in analysing skill and role competences, particularly when e-learning systems are being considered for training purposes. The method proved to be successful within the company and helped to profile actual and target qualification needs, as well as employee preferences. In addition, there were also a number of overall lessons that could be learnt from the case study. These mainly relate to the need to integrate needs assessment within the broader context of Human Resource Management (HRM) systems, as well as the importance of employee participation within the process. We end the paper with a discussion of possible extensions to our work as well as outstanding\u00a0\u2026", "num_citations": "12\n", "authors": ["185"]}
{"title": "PL-SIM: A generic simulation model for studying strategic SPI in the automotive industry\n", "abstract": " We present the approach, results and conclusions of a simulation modelling activity conducted by Fraunhofer IESE in collaboration with DaimlerChrysler AG. The purpose of this activity was to support DaimlerChrysler Research and Technology in performing a study that aimed at exploring the level of process leadership (PL) that can he achieved by one of DaimlerChiysler's car divisions within the next five years. A crucial issue of the study was the identification and determination of influence factors and measures expected to have an impact on the level of PL. In order to help focus discussion and provide a quantitative basis for analyses, Fraunhofer IESE and DaimlerChrysler Research and Technology jointly developed a system dynamics simulation model, PL-SIM. In a first assessment, the model was found to be useful for running experiments that qualitatively reflect the fundamental dynamics of the factors\u00a0\u2026", "num_citations": "12\n", "authors": ["185"]}
{"title": "Agile software process improvement by learning from financial and fintech companies: LHV bank case study\n", "abstract": " A large shift towards the use of agile software development in different industrial sectors is evident nowadays. Financial institutions are not unfamiliar with this tendency since they have the need to respond faster to the changes in their business environments. This is partly due to the new generation of financial technology (fintech) companies that have shown a significant difference in time to market and in speeding up software development. To compete with fintech companies, financial institutions are looking for improving their software development processes focusing on applying agile practices in a better way. This article presents a set of proposals to improve software development in the LHV Bank. The set of proposals has been determined through a literature review and interviews conducted in two leading financial institutions and two fintech companies. The analysis done allowed us to understand the\u00a0\u2026", "num_citations": "11\n", "authors": ["185"]}
{"title": "Problems and solutions in mobile application testing\n", "abstract": " In recent years the amount of literature published about mobile application testing has significantly grown. However, it is unclear to what degree stated problems and proposed solutions are relevant to industry. To shed light on this issue, we conducted a literature survey to provide an overview of what current scientific literature considers problems and potential solutions in mobile application testing, and how often proposed solutions were reportedly evaluated in industry. Then we conducted a case study involving six software companies in Estonia to find out which of the problems are considered relevant by professionals, and which of the proposed solutions are considered novel and applicable. In total, we identified 49 potential problems or challenges in the mobile application testing domain and 39 potential solutions, some of which were implemented software tools while others were just theoretical\u00a0\u2026", "num_citations": "11\n", "authors": ["185"]}
{"title": "Industrial Comparability of Student Artifacts in Traceability Recovery Research-An Exploratory Survey\n", "abstract": " About a hundred studies on traceability recovery have been published in software engineering fora. In roughly half of them, software artifacts developed by students have been used as input. To what extent student artifacts differ from industrial counterparts has not been fully explored in the literature. We conducted a survey among authors of studies on traceability recovery, including both academics and practitioners, to explore their perspectives on the matter. Our results indicate that a majority of authors consider software artifacts originating from student projects to be only partly representative to industrial artifacts. Moreover, only few respondents validated student artifacts for industrial representativeness. Furthermore, our respondents made suggestions for improving the description of artifact sets used in studies by adding contextual, domain-specific and artifact-centric information. Example suggestions include\u00a0\u2026", "num_citations": "11\n", "authors": ["185"]}
{"title": "The collaborative learning methodology CORONET-train: implementation and guidance\n", "abstract": " The introduction of new methodologies into a software organization is a non-trivial problem because it usually requires the alteration of existing business and development processes and the change of habits and beliefs of software engineers and managers. This is particularly true for comprehensive methodologies that integrate e-learning and knowledge management. An example is the web-based collaborative learning methodology CORONET-Train recently developed in an international research project. This paper describes how CORONET-Train and its supporting software infrastructure WBT-Master can be successfully established and retained in a software organization by using adequate implementation and guidance processes, which take into account aspects of organizational culture. In addition, the paper summarizes results gained from industrial case studies that provide evidence for the\u00a0\u2026", "num_citations": "11\n", "authors": ["185"]}
{"title": "Experience with explicit modelling of relationships between process and product quality\n", "abstract": " Experience with explicit modelling of relationships between process and product quality \u2014 VTT's Research Information Portal Skip to main navigation Skip to search Skip to main content VTT's Research Information Portal Logo Home Profiles Research output Projects Datasets Research Units Research Infrastructures Activities Prizes Press / Media Impacts Search by expertise, name or affiliation Experience with explicit modelling of relationships between process and product quality Dirk Hamann, Janne J\u00e4rvinen, Markku Oivo, Dietmar Pfahl Research output: Chapter in Book/Report/Conference proceeding \u203a Conference article in proceedings \u203a Scientific Overview Original language English Title of host publication Proceedings of the 4th European Software Process Improvement Conference Publication status Published - 1998 MoE publication type B3 Non-refereed article in conference proceedings Event 4th European '\u2026", "num_citations": "11\n", "authors": ["185"]}
{"title": "Using app reviews for competitive analysis: tool support\n", "abstract": " Play Store and App Store have a large number of apps that are in competition as they share a fair amount of common features. User reviews of apps contain important information such as feature evaluation, bug report and feature request, which is useful input for the improvement of app quality. Automatic extraction and summarization of this information could offer app developers opportunities for understanding the strengths and weaknesses of their app and/or prioritizing the app features for the next release cycle. To support these goals, we developed the tool REVSUM which automatically identifies developer-relevant information from reviews, such as reported bugs or requested features. Then, app features are extracted automatically from these reviews using the recently proposed rule based approach SAFE. Finally, a summary is generated that supports the application of the following three use cases:(1) view\u00a0\u2026", "num_citations": "10\n", "authors": ["185"]}
{"title": "Initial results of the HELENA survey conducted in Estonia with comparison to results from Sweden and worldwide\n", "abstract": " The way how software is developed in industry has considerably changed with the advent of the agile development paradigm about 20 years ago. The HELENA initiative tries to investigate the current state of practice in software and system development. This paper reports about initial results of an online survey that was conducted in 26 countries simultaneously, focusing on results from Estonia and comparing these results with results from Sweden as well as with the joint results from all participating countries worldwide.", "num_citations": "10\n", "authors": ["185"]}
{"title": "Towards Greener Software Engineering Using Software Analytics: A Systematic Mapping\n", "abstract": " Sustainability in software engineering is a relatively new and fast growing field of research. Green software engineering aims to produce sustainable software products with minimum negative impact on the environment. In order to make greener software products, software practitioners need actionable timely information, to make useful trade-offs between energy efficiency and other quality attributes, like performance, during development. Software analytics could be used to provide this support, as it combines information from different software artifacts and converts it into useful information. The objective of this paper is to provide an overview of the sub-domains, contribution types, research types, research methods, future research potentials and the role of software analytics in the field of green software engineering in 2015-16. We applied the systematic mapping method and conducted a search for studies in six\u00a0\u2026", "num_citations": "10\n", "authors": ["185"]}
{"title": "Simple App Review Classification with Only Lexical Features\n", "abstract": " User reviews submitted to app marketplaces contain information that falls into different categories, eg, feature evaluation, feature request, and bug report. The information is valuable for developers to improve the quality of mobile applications. However, due to the large volume of reviews received every day, manual classification of user reviews into these categories is not feasible. Therefore, developing automatic classification methods using machine learning approaches is desirable. In this study, we compare the simplest textual machine learning classifier using only lexical features\u2014the so-called Bag-of-Words (BoW) approach\u2014with the more complex models used in previous works adopting rich linguistic features. We find that the performance of the simple BoW model is very competitive and has the advantage of not requiring any external linguistic tools to extract the features. Moreover, we experiment with deep learning based Convolutional Neural Network (CNN) models that have recently achieved state-of-the-art results in many classification tasks. We find that, on average the CNN models do not perform better than the simple BoW model\u2014it is possible that for the CNN model to gain an advantage, a larger training set would have been necessary.", "num_citations": "9\n", "authors": ["185"]}
{"title": "Is the SAFE Approach Too Simple for App Feature Extraction? A Replication Study\n", "abstract": " [Context and motivation] Automatic extraction and analysis of app features from user reviews is helpful for software developers to better understand users perceptions of delivered app features. Recently, a rule-based approach called safe was proposed to automatically extract app features from user reviews. safe was reported to obtain superior performance in terms of precision and recall over previously proposed techniques. However, the procedure used to evaluate safe was in part subjective and not repeatable and thus the whole evaluation might not be reliable. [Question/problem] The goal of our study is to perform an external replication of the safe evaluation using an objective and repeatable approach. [Principal ideas/results] To this end, we first implemented safe and checked the correctness of our implementation on the set of app descriptions that were used and published by the authors of the\u00a0\u2026", "num_citations": "8\n", "authors": ["185"]}
{"title": "Evaluating the Impact of Code Smell Refactoring on the Energy Consumption of Android Applications\n", "abstract": " Energy consumption of mobile apps is receiving a lot of attention from researchers. Recent studies indicate that energy consumption of mobile devices could be lowered by improving the quality of mobile apps. Frequent refactoring is one way of achieving this goal. We explore the performance and energy impact of several common code refactorings in Android apps. Experimental results indicate that some code smell refactorings positively impact the energy consumption of Android apps. Refactoring of the code smells 'Duplicated code' and 'Type checking' reduce energy consumption by up to 10.8%. Significant reduction in energy consumption, however, does not seem to be directly related to the increase or decrease of execution time. In addition, the energy impact over permutations of code smell refactorings in the selected Android apps was small. When analyzing the order in which refactorings were made across\u00a0\u2026", "num_citations": "8\n", "authors": ["185"]}
{"title": "Erfolgsfaktoren f\u00fcr effektives E-Learning - Ergebnisse einer empirischen Studie.\n", "abstract": " Web-basierte Trainings werfen viele Fragen auf bez\u00fcglich des zu erwartenden Nutzungsverhaltens von Kursteilnehmenden. Bisher liegen nur wenige Studien mit wenigen Aussagen dar\u00fcber vor, wie Web-basierte Trainings im Rahmen berufsbegleitender Weiterbildungsma\u00dfnahmen genutzt werden. Auf Basis einer Analyse des Nutzungsverhaltens von Studenten des Studienganges WINFOLine macht der vorliegende Beitrag Aussagen \u00fcber Nutzungsprofile, bevorzugte Diskussionsfunktionen, die Rolle von \u00dcbungsaufgaben sowie die Intensit\u00e4t der Nutzung von Teilen des Kursangebotes. Diese Aussagen werden mit dem Lernerfolg der Teilnehmenden in Beziehung gesetzt um so Einflussfaktoren zu identifizieren, deren Ber\u00fccksichtigung zur Verbesserung zuk\u00fcnftiger Lernangebote beitragen kann.", "num_citations": "8\n", "authors": ["185"]}
{"title": "Simulating the Impact of Annotation Guidelines and Annotated Data on Extracting App Features from App Reviews\n", "abstract": " The quality of automatic app feature extraction from app reviews depends on various aspects, eg the feature extraction method, training and evaluation datasets, evaluation method etc. Annotation guidelines used to guide the annotation of training and evaluation datasets can have a considerable impact to the quality of the whole system but it is one of the aspects that is often overlooked. We conducted a study in which we explore the effects of annotation guidelines to the quality of app feature extraction. We propose several changes to the existing annotation guidelines with the goal of making the extracted app features more useful to app developers. We test the proposed changes via simulating the application of the new annotation guidelines and evaluating the performance of the supervised machine learning models trained on datasets annotated with initial and simulated annotation guidelines. While the overall performance of automatic app feature extraction remains the same as compared to the model trained on the dataset with initial annotations, the features extracted by the model trained on the dataset with simulated new annotations are less noisy and more informative to app developers.", "num_citations": "7\n", "authors": ["185"]}
{"title": "Evaluation of Kano-like models defined for using data extracted from online sources\n", "abstract": " The Kano model is a frequently used method to classify user preferences according to their importance, and by doing so support requirements prioritization. To implement the Kano model, a representative set of users must answer for each feature under evaluation a functional and dysfunctional question. Unfortunately, finding and interviewing users is difficult and time-consuming. Thus, the core idea of our proposed approach is to extract automatically opinions about product features from online open sources (e.g., Q & A sites, App reviews, etc.) and to feed them into the Kano questionnaire to prioritize software requirements following the principles of the Kano model. One problem with our proposed approach is how to pair input extracted from the internet into paired answers to the functional dysfunctional questions. This problem arises because the reviews and comments from online sources that we plan to\u00a0\u2026", "num_citations": "7\n", "authors": ["185"]}
{"title": "Improving expert prediction of issue resolution time\n", "abstract": " Predicting the resolution times of issue reports in software development is important, because it helps allocate resources adequately. However, issue resolution time (IRT) prediction is difficult and prediction quality is limited. A common approach in industry is to base predictions on expert knowledge. While this manual approach requires the availability and effort of experts, automated approaches using data mining and machine learning techniques require a small upfront investment for setting up the data collection and analysis infrastructure as well as the availability of sufficient past data for model building. Several approaches for automated IRT prediction have been proposed and evaluated. The aim of our study was (1) to compare the prediction quality of expert-based IRT prediction in a software company located in Estonia with that of various fully automated IRT prediction approaches proposed and used by other\u00a0\u2026", "num_citations": "7\n", "authors": ["185"]}
{"title": "Evaluating and Improving Software Quality Using Text Analysis Techniques-A Mapping Study\n", "abstract": " Improvement and evaluation of software quality is a recurring and crucial activity in the software development life-cycle. During software development, software artifacts such as requirement documents, comments in source code, design documents, and change requests are created containing natural language text. For analyzing natural text, specialized text analysis techniques are available. However, a consolidated body of knowledge about research using text analysis techniques to improve and evaluate software quality still needs to be established.To contribute to the establishment of such a body of knowledge, we aimed at extracting relevant information from the scientific literature about data sources, research contributions, and the usage of text analysis techniques for the improvement and evaluation of software quality. We conducted a mapping study by performing the following steps: define research questions, prepare search string and find relevant literature, apply screening process, classify, and extract data. Bug classification and bug severity assignment activities within defect management are frequently improved using the text analysis techniques of classification and concept extraction. Non-functional requirements elicitation activity of requirements engineering is mostly improved using the technique of concept extraction. The quality characteristic which is frequently evaluated for the product quality model is operability. The most commonly used data sources are: bug report, requirement documents, and software reviews. The dominant type of research contributions are solution proposals and validation research. In our mapping study we\u00a0\u2026", "num_citations": "7\n", "authors": ["185"]}
{"title": "Monitoring Bottlenecks in Achieving Release Readiness\u2013A Retrospective Case Study across Ten OSS Projects\n", "abstract": " Context: Not releasing software on time can cause substantial loss in revenue. Continuous awareness of the product release status is required. Release readiness is a time-dependent attribute of the status of the product release, which aggregates the degree of satisfaction of a portfolio of release process and product measures.Goal: At different stages of a release cycle, the goal is to understand frequencies and pattern of occurrence of factors affecting project success by restricting the status of release readiness (called bottlenecks).Method: As a form of explorative case study research, we analyzed ten open source software (OSS) projects taken from the GitHub repository. As a retrospective study covering a period of 28 weeks, we monitored eight release readiness attributes and identified their impact on release readiness over time across the ten projects.Results: Feature completion rate, Bug fixing rate, and\u00a0\u2026", "num_citations": "7\n", "authors": ["185"]}
{"title": "Software Process Modelling - Socio-Technical Perspectives\n", "abstract": " In this chapter we describe how the socio-technical systems (STS) approach has been applied to the software process, as well as attempts that have been made to simulate and model the process as a whole. We also outline previous attempts to use socio-technical criteria and guidelines in order to make improvements to the process of constructing software. We first provide a broad outline of the STS approach followed by a number of examples drawn from the areas of COTS-based selection, the People Capability Maturity Model (P-CMM), competency programmes and process simulation. We conclude the chapter with a set of future research issues that are most likely to occupy researchers in the coming years. These issues are drawn partly from the theoretical literature within software engineering, as well as recent developments within industrial practice.", "num_citations": "7\n", "authors": ["185"]}
{"title": "Towards comprehensive experience-based decision support\n", "abstract": " In today\u2019s software development organizations, methods and tools are employed that frequently lack sufficient evidence regarding their suitability, limits, qualities, costs, and associated risks. The need to select the best-suited method, technique or tool in a given business context is becoming more and more important. From a business perspective the trade-off between time-to-market, quality, and cost is a crucial factor for the decision process. While new findings from research await their transfer into industrial practice, systematic assessment, selection and infusion of these findings with regard to business objectives and context is lacking. This paper presents ongoing research towards the development of a decision support system that aims at improving software engineering technology selection by software managers with regard to business goals. The focus of this paper is on presenting the problems at hand\u00a0\u2026", "num_citations": "6\n", "authors": ["185"]}
{"title": "A framework for experience-based decision support for software engineering technology selection\n", "abstract": " A framework for experience-based decision support for software engineering technology selection LUND UNIVERSITY LUND UNIVERSITY LIBRARIES Lund University Lund University Publications LUND UNIVERSITY LIBRARIES Register publications | Statistics | Marked list 0 | Saved searches 0 Advanced Home | Publications | Departments A framework for experience-based decision support for software engineering technology selection Jedlitschka, Andreas ; Pfahl, Dietmar LU and Bomarius, Frank (2004) SEKE 2004 - Sixteenth International Conference on Software Engineering & Knowledge Engineering p.342-345 Mark Links Research Portal page Google Scholar find title Please use this url to cite or link to this publication: http://lup.lub.lu.se/record/1691642 Details BibTeX author Jedlitschka, Andreas ; Pfahl, Dietmar LU and Bomarius, Frank publishing date 2004 type Chapter in Book/Report/Conference status [] \u2026", "num_citations": "6\n", "authors": ["185"]}
{"title": "The CORONET System: A Methodology-driven Infrastructure for Collaborative Learning at the Workplace\n", "abstract": " Skills, knowledge, and motivation of the software engineering workforce are essential prerequisites for maturing software development. But lack of adequately educated human resources has become an obstacle for growth of the software industry. The CORONET approach aims at relieving the difficult situation by facilitating an innovative methodology and tool support for webbased collaborative learning at the workplace. This paper describes the most important features of the CORONET system consisting of the learning methodology CORONET-Train and the e-learning platform WBT-Master. Particular focus is put on innovative functionality that supports collaborative learning at the workplace and on knowledge management aspects.", "num_citations": "6\n", "authors": ["185"]}
{"title": "Product focused process improvement: Experiences of applying the PROFES improvement methodology at Dr\u00e4ger\n", "abstract": " In this paper the principles and contents of a new product characteristics driven improvement methodology for embedded systems and product development (PROFES 5) is introduced. The paper includes also experiences of application of the methodology in practice. The methodology was recently developed in an ESPRIT Project called PROFES (PROduct Focused improvement of Embedded Software processes). The methodology aims at helping organisations improve their product quality characteristics through improving just those characteristics of their software development processes that most effectively affect the product improvement. The methodology was developed through an experimental approach in three industrial organisations developing commercial products including embedded systems. 1.", "num_citations": "6\n", "authors": ["185"]}
{"title": "Pains and gains of peer-reviewing in software engineering\n", "abstract": " Standard Reviewing Procedures The final acceptance decision for a paper can be taken by following different alternative peer-reviewing processes (these review processes are implemented for both conferences and journals). The standard setup can be described as follows: while authors are usually not aware of the reviewers' identity (so-called blind review setting), reviewers may be aware of the authors' identity or not, resulting in single-blind or double-blind review processes, respectively. In the rare cases when the authors are aware of the reviewers' identity, the reviewing process is considered zero-blind. Other feasible alternatives are characterized by the amount of stages implemented before the acceptance decision is made (single-stage vs. multi-stage review processes) and the public visibility of review comments (open/public vs. closed review processes). The actual process of finding agreement regarding\u00a0\u2026", "num_citations": "5\n", "authors": ["185"]}
{"title": "Exploring the individual project progress of scrum software developers\n", "abstract": " Scrum based software development has become increasingly popular in recent years. Scrum requires teams following agile practices and their principles. One of them includes having room for the reflection of the team on how to become more effective. In this context, measuring and enhancing the performance of teams is still an area of interest for the Scrum community. Traditional Scrum metrics have often been used to measure the performance and productivity; however, individual contributions of team members to the project are often shaded by the team overall performance. In this paper, we propose a metric for measuring individual differences in project progress based on the traditional Burndown chart. We also show preliminary results of applying it in a particular training context, highlighting how learning-styles based instruction can improve the individual project progress of students.", "num_citations": "5\n", "authors": ["185"]}
{"title": "Process Simulation\u2013A Tool for Software Project Managers?\n", "abstract": " Process simulation has been introduced as a tool in support of software project management more than 25 years ago. Since then, it has been considered an approach with high potential for making software project managers\u2019 work more effective and successful. Unfortunately, despite high expectations and many reports on prototypical process simulation applications in industrial contexts, little evidence exists that process simulation has become an accepted and regularly used tool of software project managers. This chapter investigates the reasons for lacking impact of process simulation in the software industry. This is done with the help of an in-depth description of a software process simulation application example. The application example focuses on the effects of various workforce allocation strategies on project performance, expressed in terms of project duration, effort consumption, and product quality\u00a0\u2026", "num_citations": "5\n", "authors": ["185"]}
{"title": "Applications of a generic work-test-rework component for software process simulation\n", "abstract": " Software process simulation can be a valuable support for process analysis and improvement provided the respective model development can focus on the issues at hand without spending effort on basically modeling everything from scratch. Rather, the modeling groundwork should readily be available as building blocks for (re)use. In the domain of software engineering, the work-test-rework cycle is one of the most important reoccurring patterns \u2013 at the level of a individual tasks as well as at the level of process phases or projects in general. Therefore, a generic reusable simulation component, which captures and represents this pattern, has been realized as part of the SimSWE library. This WorkTestRework component is designed such that it provides comprehensive adaptability and flexibility to be used in different simulation scenarios and process contexts. This paper introduces the component and\u00a0\u2026", "num_citations": "5\n", "authors": ["185"]}
{"title": "eLearning Market Potential in the German IT Sector: An explorative study\n", "abstract": " During the past few years, eLearning has been an extremely fast growing market. In the course of the project CORONET (Corporate Software Engineering Knowledge Networks for Improved Training of the Work Force), which is a European Union funded project (No. IST-1999-11634), a market survey of the German eLearning market in the Information Technology and Software Engineering domain was conducted. This report presents the major findings of the explorative study, in which a total of 3,400 German IT companies was asked to describe their usage of, demand for, and benefits seen in methods and tools for eLearning. The market survey concludes that market (and therefore customer) demands will be headed towards a different focus in the future: moving away from\" plain\" eLearning tool support towards process integration for eLearning. The CORONET products CORONET-Train and WBT-Master offer\u00a0\u2026", "num_citations": "5\n", "authors": ["185"]}
{"title": "Empirical Study on Code Smells in iOS Applications\n", "abstract": " Code smells are recurring patterns in code that have been identified as bad practices. They have been analysed extensively in Java desktop applications. For mobile applications most of the research has been done for Android with very little research done for iOS. Although Android has the largest market share, iOS is a very popular platform. Our goal is to understand the distribution of code smells in iOS applications. For this analysis we used a collaborative list of open source iOS applications from GitHub. We combined code smells defined by Fowler and object oriented code smells studied on Android. We developed a tool that can detect these code smells in Swift applications. We discovered that iOS applications are most often affected by Lazy Class, Long Method and Message Chain code smells. Most often occurring code smells are Internal Duplication, Lazy Class and Long Method.", "num_citations": "4\n", "authors": ["185"]}
{"title": "How has SPI Changed in Times of Agile Development?\u2013Results from a Multi-Method Study\n", "abstract": " The emergence of agile methods and practices has not only changed the development processes but might also have affected how companies conduct software process improvement (SPI). Through a set of complementary studies, we aim to understand how SPI has changed in times of agile software development. Specifically, we aim (a) to identify and characterize the set of publications that connect elements of agility to SPI, (b) to explore to which extent agile methods/practices have been used in the context of SPI, and (c) to understand whether the topics addressed in the literature are relevant and useful for industry professionals. To study these questions, we conducted an in\u2010depth analysis of the literature identified in a previous mapping study, an interview study, and an analysis of the responses given by industry professionals to SPI\u2010related questions stemming from an independently conducted survey study\u00a0\u2026", "num_citations": "4\n", "authors": ["185"]}
{"title": "Simkit\u2013a software process simulation model construction kit in support of empirical research\n", "abstract": " SIMKIT \u2013 a software process simulation model construction kit in support of empirical research - Lund University Accessibility statement Login for staff Lund University IN ENGLISH P\u00c5 SVENSKA Research Portal Find researchers, research outputs (eg publications), projects, infrastructures and units at Lund University People Research Outputs Projects Infrastructure Organisation HomeResearch Outputs SIMKIT \u2013 a software process simulation model construction ki... SIMKIT \u2013 a software process simulation model construction kit in support of empirical research Research output: Chapter in Book/Report/Conference proceeding \u203a Paper in conference proceeding Overview Cite Details Authors Dietmar Pfahl External organisations External Organization - Unknown Research areas and keywords Subject classification (UK\u00c4) \u2013 MANDATORY Computer Science Original language English Title of host publication [Host title ] for (\u2026", "num_citations": "4\n", "authors": ["185"]}
{"title": "A methodology-driven software infrastructure for work-based learning\n", "abstract": " methodology-driven software infrastructure web-based learning knowledge worker web-based collaboration software organisation busy work environment self-organised learning traditional training course applicable form financial reason work-based method many company smooth technical solution people workplace work-based learning various form", "num_citations": "4\n", "authors": ["185"]}
{"title": "Productivity, Turnover, and Team Stability of Agile Teams in Open-Source Software Projects\n", "abstract": " Productivity in software development has been studied for a long time and is still a topic of interest. Many factors, ranging from team size to music listened by developers, have been studied regarding their effect on productivity. Surprisingly, little is known about how the dynamics of open-source projects that use agile practices are related to the productivity of the developer teams. Our study aims to close this gap by analyzing the productivity of open-source projects using measures that are popular in the context of agile software development. To do this, we study data from seven open-source projects and calculated both the individual velocity of developers and focus factor of teams per iteration. First, we applied statistical process control to identify iterations with out-of-control velocity and focus factor values. Then, we studied these iterations regarding four context factors that partly characterize the dynamics of open\u00a0\u2026", "num_citations": "3\n", "authors": ["185"]}
{"title": "The OIRE Method-Overview and Initial Validation\n", "abstract": " Context: To lower the cost of Requirements Engineering (RE) and to help software organizations, in particular, small / start-up companies with small teams and little marketing and customer research budget, gain a better understanding of user satisfaction with existing products, we propose the Open Innovation in Requirements Engineering (OIRE) method to systematically analyze information that is openly available in the Internet. Goal: In this article, we describe the components of the OIRE method, explain what it can do and how it provides useful information to help software engineers and managers make better informed decisions. In addition, we present three typical use cases and a proof-of-concept of the method demonstrating the applicability of the method using real-world data collected from the Internet. Method: First, we choose app reviews from app stores and app monitoring platforms as the sources of\u00a0\u2026", "num_citations": "3\n", "authors": ["185"]}
{"title": "Simplifying the classification of app reviews using only lexical features\n", "abstract": " User reviews submitted to app marketplaces contain information that falls into different categories, e.g., feature evaluation, feature request, and bug report. This information is valuable for developers to improve the quality of mobile applications. However, due to the large volume of reviews received every day, manual classification of user reviews into these categories is not feasible. Therefore, developing automatic classification methods using machine learning approaches is desirable. In this study, we address the problem of automatic classification of app review sentences (as opposed to full reviews) into different categories. We compare the simplest textual machine learning classifier using only lexical features \u2013 the so-called Bag-of-Words (BoW) approach \u2013 with more complex models used in previous work adopting rich linguistic features. We find that the performance of the simple BoW model is very\u00a0\u2026", "num_citations": "3\n", "authors": ["185"]}
{"title": "A method to transform automatically extracted product features into inputs for kano-like models\n", "abstract": " Background: In the context of a larger research project, we plan to automatically extract user needs (i.e., functional requirements) from online open sources and classify them using the principles of the Kano model. In this paper, we present a two-step method for automatically transforming feature related text extracted from online open sources into inputs for Kano-like models. Goal: The problem we are facing is how to transform requirements and related sentiments extracted from raw texts collected from an online open source into the input format required by our Kano-like models. To solve this problem, we need a method that transforms requirements and related sentiments into a format that corresponds to answers that would be given to either the functional or dysfunctional question of the Kano method on a specific requirement. Method: We propose a method consisting of two steps. In the first step, we\u00a0\u2026", "num_citations": "3\n", "authors": ["185"]}
{"title": "Open innovation in software requirements engineering: A mapping study\n", "abstract": " Background: Since 2003, when the concept of open innovation (OI) was introduced, OI has been applied in many industrial fields. Previous research indicates that the use of OI in computer science is less diverse than in other fields. Especially, the role of OI in software requirements engineering (RE) seems to be little explored. Goals: This study aimed to summarize the body of knowledge about the use of OI in the field of RE. More specifically, we analyzed what uses of OI in the context of RE have been reported and how OI has contributed to individual steps of the RE process. Method: We conduct a mapping study on the literature provided in four scientific databases (ISI Web of Science, IEEE Xplore, ACM Digital Library, and Science Direct). Results: We identified 20 relevant papers. We found: 1) 20 primary studies from the period 2003-2016 report on results about applying OI in RE. 2) Half of the studies report on\u00a0\u2026", "num_citations": "3\n", "authors": ["185"]}
{"title": "A preliminary study on the suitability of stack overflow for open innovation in requirements engineering\n", "abstract": " Due to lack of resources (funds, social influence, user feedback etc.), small companies, in particular, start-up companies, almost exclusively must rely on their own expertise with regards to technological innovation. Therefore, it could be beneficial for them to analyze big companies or competitors' products in order to get a better understanding of what users think about them. The core idea of my research project is to use opinions voiced by users about strengths and weaknesses of competitors' products to improve the understanding of actual user needs and thus help focus the requirements definition of the small, especially start-up company's own product. In order to lower the cost of analysis, we investigate how user needs can be distilled from online open sources. Since there are different types of online open sources, as a starting point of our current stage of research, we focused on one type of online open sources\u00a0\u2026", "num_citations": "3\n", "authors": ["185"]}
{"title": "Special issue on ProSim 2005, The 6th international workshop on software process simulation and modeling, St. Louis, Missouri, USA may 2005\n", "abstract": " Organizations that develop software systems or software intensive systems are increasingly forced to gain control over their development processes and the evolution of these processes. This implies the establishment of advanced process management capabilities and an adequate understanding of the impact of the processes on the generated products, services, and business values in different situations. Recent trends enforce the establishment of such capabilities: More and more systems are being developed in distributed, global environments with many customer\u2013supplier relations in the development chain. Outsourcing, offshoring, and near-shoring aggravate this trend. In addition, systems are being built from components from multiple disciplines (such as electronics, mechanics, optics). Supporting such distributed and multidisciplinary development requires well-understood and accurately implemented\u00a0\u2026", "num_citations": "3\n", "authors": ["185"]}
{"title": "Special issue on ProSim 2004, The 5th International Workshop on Software Process Simulation and Modeling, Edinburgh, Scotland, May 2004\n", "abstract": " While software is of paramount importance for market success in all high-tech and service domains, software engineering practice does not always live up to this challenge. The need for further improvement of software engineering practices within companies adds to the demand for systematic learning. Learning in software organizations takes place on individual, project and organizational levels. Generally, the goal of learning is to gain knowledge, skills, and experiences in order to solve problems better and faster. On the cognitive level, learning is facilitated by constructing mental models, and by matching observations, experiences, and knowledge from the real word with these mental models. By building explicit (formal) models of reality that adequately capture essential features of the system and relationships of its components, this form of learning can be considerably enhanced. Models contained in scientific\u00a0\u2026", "num_citations": "3\n", "authors": ["185"]}
{"title": "Data science and empirical software engineering\n", "abstract": " Empirical Software Engineering (ESE) roots back to the 1970s and has since then gained growing recognition as the standard approach to scientific inquiry in the context of software engineering. Many different quantitative and qualitative research methods have been described and supplied with guidelines and checklists and several books have been written about good practice in ESE. With the emerging amount of data being produced during software development, a new paradigm of scientific inquiry has gained much attention, i.e., Data Science (DS). The goal of this chapter is to discuss whether DS could replace traditional ESE or, if it does not replace it, how traditional ESE could benefit from adopting DS practices\u2014and vice versa. In this chapter, we first give some general background information about ESE and DS, then we describe in more detail how both paradigms are typically used in the context of\u00a0\u2026", "num_citations": "2\n", "authors": ["185"]}
{"title": "Tool Support for Green Android Development: A Systematic Mapping Study\n", "abstract": " In order to make mobile apps energy efficient, we must find ways to support energy efficient app development. While there is a lack of support tools that aid practitioners in moving towards green Android development. Our goal is to establish the state of the art with respect to support tools that aid green Android development and to identify opportunities for further research. To achieve this goal, we conduct a systematic mapping study. After applying inclusion, exclusion and quality criteria we selected 21 studies for further analysis. Current support tools to aid green Android development were classified into three categories: Profiler, Detector and Optimizer. Most Profiler tools provide a graphical representation of energy consumed over time at various levels. Most Detector tools provide a list of energy bugs/code smells to be manually corrected by a developer for the improvement of energy. Most Optimizer tools automatically generate refactored version (s) of APK/SC. The most typical technique used by Detector and Optimizer tools is static source code analysis using a predefined set of rules. Profiler tools use a wide range of techniques to measure energy consumption. However, these tools have limitations in terms of code smell/energy bug coverage, accuracy, and usability.", "num_citations": "2\n", "authors": ["185"]}
{"title": "An Investigation into the Energy Consumption of HTTP POST Request Methods for Android App Development\n", "abstract": " Producing energy efficient applications without compromising performance is a difficult job for developers as it affects the utility of smart devices. In this paper, we conducted a small-scale evaluation of selected implementations using different methods for making HTTP POST requests. In the evaluation, we measured how much energy is consumed by each implementation and how varying message payload size effects the energy consumption of each implementation. Our results provide useful guidance for mobile app developers. In particular, we found that implementation using OkHttp consumes less energy than the implementation using HttpURLConnection or Volley libraries. These results serve to inform the developers about the energy consumption of different HTTP POST request methods.", "num_citations": "2\n", "authors": ["185"]}
{"title": "Performing operational release planning, replanning and risk analysis using a system dynamics simulation model\n", "abstract": " Software release planning takes place on strategic and operational levels. Strategic release planning aims at assigning features to subsequent releases such that technical, resource, risk and budget constraints are met. Operational release planning focuses on the development of a single software release. Its purpose is to assign resources to feature development tasks such that total release duration is minimized under given process and project constraints. Replanning becomes necessary on the operational level because of addition or deletion of features during release development, due to changes in the workforce, or due to changes in process and project constraints. The allocation of resources to feature development tasks depends on the accurate estimation of planning parameters like task size, developer productivity or dependencies between task types. Risk analysis can help assess the reliability of a\u00a0\u2026", "num_citations": "2\n", "authors": ["185"]}
{"title": "Software process simulation frameworks in support of packaging and transferring empirical evidence\n", "abstract": " Empirical research is essential for developing a theory of software development, and\u2013subsequently\u2013for transforming the art of software development into engineering. In particular the latter point deals with providing evidence on the efficiency and effectiveness of tools and techniques in different application contexts. The number of tools and techniques is constantly growing, and even more contexts emerge in which a tool or technique might be applied. An application context is defined, firstly, by organizational aspects such as process organization, resource allocation, developer team size and quality, management rules, etc., and secondly, by the set of all other tools and techniques applied in a development project.Since most activities in software development are strongly human-based, the actual efficiency and effectiveness of a tool or technique can only be determined through real-world experiments. Controlled experiments are a means for assessing local efficiency and effectiveness, for example, typical defect detection rates of an inspection or test technique applied to a specific type of development document, by a typical class of developers (with adequate training and experience levels). Global efficiency and effectiveness of a tool or technique relates to its impact on the overall development project performance, ie, total project duration, total project effort consumption (or cost), and quality of the end product delivered to the customers. Typically, global efficiency and effectiveness are evaluated through case studies. Controlled experiments and case studies are expensive in terms of effort and time consumption. Support for making decisions on\u00a0\u2026", "num_citations": "2\n", "authors": ["185"]}
{"title": "CORONET: an Australian software engineering experience in collaborative research with the European Community\n", "abstract": " The purpose of the paper is two fold. Firstly, to inform the Australian software engineering community of the European Fifth Framework research structure and the involvement of an Australian partner in a fifth framework project, CORONET. Secondly to describe the CORONET project. CORONET develops a new approach for software engineering training in knowledge networks. CORONET aims to support on-demand, collaborative, life-long learning by supporting knowledge generation in corporate knowledge networks, accompanied by pedagogically sound improvements of the underlying learning process. By relating the experience of CAESAR's involvement in the CORONET project, the paper aims to educate the software engineering community in opportunities that exist for collaboration with European research projects as well as inform the community on how such projects are managed.", "num_citations": "2\n", "authors": ["185"]}
{"title": "Should energy consumption influence the choice of Android third-party HTTP libraries?\n", "abstract": " In mobile devices, the battery is a limited resource and mobile apps are designed with this constraint in mind. To speed up development, app developers often use third-party libraries. Researchers have found that third-party libraries for ads and billing excessively use mobile resources. Other often used third-party libraries such as Android third-party HTTP libraries have received less attention from research regarding energy consumption. To fill this gap, we investigated whether popular Android third-party HTTP libraries vary in energy consumption. In addition, we checked whether there is a correlation between performance and energy consumption. To achieve this goal, we performed a controlled experiment. We created 45 different versions of a custom app and explored the energy consumption and performance of eight popular Android third-party HTTP libraries in five typical use cases. We found that there is a\u00a0\u2026", "num_citations": "1\n", "authors": ["185"]}
{"title": "Evaluation of the OIRE Method in a Case Study\n", "abstract": " To (semi-)automatically classify user needs collected from online open sources, we propose the Open Innovation in Requirements Engineering (OIRE) method. OIRE is mimicking the well-known Kano-model exclusively using data from online reviews instead of conducting interviews with select focus groups. In our previous research, we introduced the design, implementation and preliminary validation of the OIRE method. In this paper, we introduce the tool support for the OIRE method, OIRE-System (OIRE-S), and evaluate the OIRE method using OIRE-S. For that purpose, we conducted a case study with two Chinese companies using OIRE-S as tool support when applying the OIRE method. Based on the results of the case study, we conclude that the analysis results of the OIRE method provide valuable information for stakeholders and, thus, is useful to decision-makers in the industry, in particular as a\u00a0\u2026", "num_citations": "1\n", "authors": ["185"]}
{"title": "19th International Conference on Product-Focused Software Process Improvement (PROFES 2018)\n", "abstract": " The 19th International Conference on Product-Focused Software Process Improvement (PROFES 2018) brought together software researchers and industrial practitioners to Wolfsburg, Germany, during November 28\u201330, 2018. The hosting institutions were Clausthal University of Technology (TUC) and Leibniz Universit\u00e4t Hannover (LUH) in Germany. In the spirit of the PROFES conference series, PROFES 2018 provided a premier forum for practitioners, researchers, and educators to present and discuss experiences, ideas, innovations, as well as concerns related to professional software process improvement motivated by product and service quality needs. PROFES 2018 had an international committee of well-known experts in software quality and process improvement carefully peer-reviewing the scientific submissions. This year, we received 65 submissions for the scientific paper track of which 16 were\u00a0\u2026", "num_citations": "1\n", "authors": ["185"]}
{"title": "A preliminary study into research about open innovation with focus on the field of computer science\n", "abstract": " This paper describes preliminary results regarding research on Open Innovation (OI) in peer reviewed literature. Special focus is put on the field of computer science as compared to other fields using the categorization scheme of Thomson Reuters\u2019 Web of Science Core Collection (ISI Core Collection). The study was triggered by the observation that peer reviewed literature on OI seems to have a less distinct growth in recent years than publications included in Google Scholar which involves non-peer reviewed literature to a much larger extent. When analyzing peer reviewed literature on OI, we observed that the field of Computer Science seems to have significantly less diversity than all other fields with more than ten publications indexed in the ISI Core Collection. Our preliminary interpretation of this observation is that the topic \u2018Open Innovation\u2019has not yet been researched and discussed in depth and breadth\u00a0\u2026", "num_citations": "1\n", "authors": ["185"]}
{"title": "Making Modern Scientific Software Development Explicitly Agile\n", "abstract": " The nature of scientific research and the development of scientific software have similarities with processes that follow the agile manifesto: responsiveness to change and collaboration are of the utmost importance. But how well do current scientific software development processes match the practices found in agile development methods? As a representative for a modern scientific software project, we briefly outline the FEniCS project whose objective is to automate solution of differential equations. Based on initial investigations, we propose a casestudy where we investigate how the development process in FEniCS can be mapped to agile development methods, and whether SCRUM can be suitable to administer such a project. The case study will use another project, the more traditional Dalton project, as a contrast.", "num_citations": "1\n", "authors": ["185"]}
{"title": "A semantics-based evidence portal for learning software organizations\n", "abstract": " The amount of methods, techniques, and tools in software engineering is increasingly growing. In order to keep track of the progress of these technologies and methodologies, a software engineering manager needs an easy and fast access to evidence about their effectiveness and efficiency. A semanticsbased evidence portal for software organizations helps them to continuously gather and aggregate evidence about software engineering technologies and methodologies. The information provided through the portal is targeted to support managers in planning software process improvement activities based on data collected semi-automatically from published evidence.", "num_citations": "1\n", "authors": ["185"]}