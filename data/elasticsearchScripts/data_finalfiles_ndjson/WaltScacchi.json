{"title": "The web of computing: Computer technology as social organization\n", "abstract": " Publisher SummaryThis chapter examines web models for understanding the dynamics of computing development and its use in organizational life. The chapter describes the study of the relative explanatory power of the discrete-entity model and web model by drawing upon the existing research literature and three case studies. The chapter explores different kinds of insights each model provides into the social dynamics of computing development and use. The chapter also illustrates the ways by which each model provides analytical power for making evaluations and predictions. Five major propositions that web analysts essentially make about the dynamics of computing development and use are also presented. The chapter concludes by examining two additional cases of computer developmentand use. It is noted that web models allow better predictions of the outcomes of using socially-complex computing\u00a0\u2026", "num_citations": "955\n", "authors": ["885"]}
{"title": "Understanding the requirements for developing open source software systems\n", "abstract": " Presents an initial set of findings from an empirical study of social processes, technical system configurations, organisational contexts and interrelationships that give rise to open software. The focus is directed at understanding the requirements for open software development efforts, and how the development of these requirements differs from those traditional to software engineering and requirements engineering. Four open software development communities are described, examined and compared to help discover what these differences may be. Eight kinds of software informalisms are found to play a critical role in the elicitation, analysis, specification, validation and management of requirements for developing open software systems. Subsequently, understanding the roles these software informalisms take in a new formulation of the requirements development process for open source software is the focus of the\u00a0\u2026", "num_citations": "579\n", "authors": ["885"]}
{"title": "Process models in software engineering\n", "abstract": " Software systems come and go through a series of passages that account for their inception, initial development, productive operation, upkeep, and retirement from one generation to another. This article categorizes and examines a number of methods for describing or modeling how software systems are developed. It begins with background and definitions of traditional software life\u2010cycle models that dominate most textbook discussions and current software development practices. This is followed by a more comprehensive review of the alternative models of software evolution that are of current use as the basis for organizing software engineering projects and technologies.", "num_citations": "308\n", "authors": ["885"]}
{"title": "Extracting and restructuring the design of large systems\n", "abstract": " Extraction of the structural and, to a lesser degree, functional and dynamic properties of systems composed of modules and subsystems is treated. The process is equivalent to reverse engineering a system-level design description. The approach used is to map the resource exchange among modules and then derive a hierarchical design description using a system-restructuring algorithm. The medium for the design description is a module interconnection language, NuMIL. The performance of the algorithm shows that it is practical.< >", "num_citations": "256\n", "authors": ["885"]}
{"title": "Free and open source development practices in the game community\n", "abstract": " The free and open source software (FOSS) approach lets community of like-minded participants develop software systems and related artifacts that are shared freely instead of offered as closed-source commercial products. Free (as in freedom) software and open source are closely related but slightly different approaches and licensing schemes for developing publicly shared software. FOSS development communities don't seem to adopt modern software engineering processes. FOSS communities develop software that's extremely valuable, generally reliable, globally distributed, made available for acquisition at little or no cost, and readily used in its community. Free and open source software development practices gives rise to new view of how complex software systems can be constructed, deployed, and evolved. They rely on lean electronic communication media, virtual project management, and version\u00a0\u2026", "num_citations": "255\n", "authors": ["885"]}
{"title": "Role migration and advancement processes in OSSD projects: A comparative case study\n", "abstract": " Socio-technical processes have come to the forefront of recent analysis of the open source software development (OSSD) world. Interest in making these processes explicit is mounting, from industry and the software process community, as well as among those who may become contributors to OSSD organization. This paper serves to close this gap by providing an empirical analysis of the role migration and project career advancement process, and role-sets within, that we have observed through comparative case studies within three large OSSD project organizations: Mozilla.org, Apache.org, and NetBeans.org.", "num_citations": "221\n", "authors": ["885"]}
{"title": "Free/open source software development\n", "abstract": " The focus of this paper is to review what is known about free and open source software development (FOSSD) work practices, development processes, project and community dynamics, and other socio-technical relationships. It focuses on exploring how FOSS is developed and evolved based on an extensive review of a set of empirical studies of FOSSD projects that articulate different levels of analysis. These characterize what has been analyzed in FOSSD studies across levels that examine (i) why individuals participate;(ii) resources and capabilities supporting development activities;(iii) how cooperation, coordination, and control are realized in projects;(iv) alliance formation and inter-project social networking;(v) FOSS as a multi-project software ecosystem, and (vi) FOSS as a social movement. Next, there is a discussion of limitations and constraints in the FOSSD studies so far. Last, attention shifts to identifying\u00a0\u2026", "num_citations": "203\n", "authors": ["885"]}
{"title": "A hypertext system to manage software life-cycle documents\n", "abstract": " The Documents Integration Facility, an environment based on objects and relationships between objects that was constructed for the development, use, and maintenance of large-scale systems and their life-cycle documents, is presented. DIF helps integrate and manage the documents produced and used throughout the life cycle: requirements specifications, functional specifications, architectural designs (structural specifications), detailed designs, source code, testing information, and user and maintenance manuals. DIF supports information management in large systems where there is much natural-language text. The documentation method used by DIF and DIF's structure are described. How DIF is used is discussed, and the DIF environment is examined. Issues that were encountered in the design of DIF are considered.< >", "num_citations": "200\n", "authors": ["885"]}
{"title": "A knowledge-based environment for modeling and simulating software engineering processes\n", "abstract": " We describe the design and representation schemes used in constructing a prototype computational environment for modeling and simulating multi-agent software engineering processes. We refer to this environment as the Articulator. We provide an overview of the Articulator's architecture which identi es ve principal components. Three of these components, the knowledge meta-model, the software process behavior simulator, and a knowledge base querying mechanism are detailed and examples are included. The conclusion reiterates what is novel to this approach in applying knowledge engineering techniques to the problems of understanding the statics and dynamics of complex software engineering processes.", "num_citations": "181\n", "authors": ["885"]}
{"title": "Report from the NSF workshop on workflow and process automation in information systems\n", "abstract": " An interdisciplinary research community needs to address challenging issues raised by applying workflow management technology in information systems. This conclusion results from the NSF workshop on Workflow and Process Automation in Information Systems which was held at the State Botanical Garden of Georgia during May 8-10, 1996. The workshop brought together active researchers and practitioners from several communities, with significant representation from database and distributed systems, software process and software engineering, and computer supported cooperative work. The presentations given at the workshop are available in the form of an electronic proceedings of this workshop at http://lsdis.cs.uga.edu/activities/). This report is the joint work of selected representatives from the workshop and it documents the results of significant group discussions and exchange of ideas.", "num_citations": "169\n", "authors": ["885"]}
{"title": "Computer game mods, modders, modding, and the mod scene\n", "abstract": " Computer games have increasingly been the focus of user-led innovations in the form of game mods. This paper examines how different kinds of socio-technical affordances serve to organize the actions of the people who develop and share their game mods. The affordances examined include customization and tailoring mechanisms, software and content copyright licenses, game software infrastructure and development tools, career contingencies and organizational practices of mod teams, and social worlds intersecting the mod scene. Numerous examples will be used to ground this review and highlight how such affordances can organize, facilitate or constrain what can be done. Overall, this study helps to provide a deeper understanding of how a web of associated affordances collectively serve to govern what mods get made, how modding practices emerge and flourish, and how modders and the game industry serve each others' interests, though not always in equivocal terms.", "num_citations": "149\n", "authors": ["885"]}
{"title": "Free/open source software development: Recent research results and methods\n", "abstract": " The focus of this chapter is to review what is known about free and open source software development (FOSSD) work practices, development processes, project and community dynamics, and other socio-technical relationships. It does not focus on specific properties or technical attributes of different FOSS systems, but it does seek to explore how FOSS is developed and evolved. The chapter provides a brief background on what FOSS is and how free software and open source software development efforts are similar and different. From there attention shifts to an extensive review of a set of empirical studies of FOSSD that articulate different levels of analysis. These characterize what has been analyzed in FOSSD studies across levels that examine why individuals participate; resources and capabilities supporting development activities; how cooperation, coordination, and control are realized in projects; alliance\u00a0\u2026", "num_citations": "149\n", "authors": ["885"]}
{"title": "Managing software engineering projects: A social analysis\n", "abstract": " Managing software engineering projects requires an ability to comprehend and balance the technological, economic, and social bases through which large software systems are developed. It requires people who can formulate strategies for developing systems in the presence of ill-defined requirements, new computing technologies, and recurring dilemmas with existing computing arrangements. This necessarily assumes skill in acquiring adequate computing resources, controlling projects, coordinating development schedules, and employing and directing competent staff. It also requires people who can organize the process for developing and evolving software products with locally available resources. Managing software engineering projects is as much a job of social interaction as it is one of technical direction. This paper examines the social arrangements that a software manager must deal with in developing\u00a0\u2026", "num_citations": "141\n", "authors": ["885"]}
{"title": "Computing as social action: The social dynamics of computing in complex organizations\n", "abstract": " Publisher SummaryThis chapter examines the ways in that the behavior of people and groups in organizations influences the development, use, and consequences of computing. The chapter presents an examination of the usefulness of different social perspectives for explaining how computing developments work in complex organizations. The chapter also presents that the six perspectives are best introduced by indicating how they help explain a complex case of computer use. The six theoretical perspectives help to understand the assumptions behind the questions asked and the answers different analysts have found. The rational perspective dominates the majority of analyses of computing, particularly those that are written by practitioners and found in trade journals or the internal documents of organizations. The development, use, and impact of computing in organizations are examined in light of the six\u00a0\u2026", "num_citations": "129\n", "authors": ["885"]}
{"title": "Free software developers as an occupational community: resolving conflicts and fostering collaboration\n", "abstract": " In this paper, we present results from the study of a free software development virtual organization, the GNU Enterprise (GNUe) project, and how they develop software in a globally distributed free software development project. In particular, examples of how they mitigate and resolve conflict are presented. Conflict arises over the use of a non-free tool to create GNUe graphic, and over the use of a non-free tool for GNUe documentation. The GNUe developers resolve the conflict using internet relay chat (IRC), threaded email discussions, and community digests. We characterize the GNUe developers as an occupational subculture within the occupational community of free/open source software (F/OSS) developers and show how the beliefs in free software and freedom of choice, and values in cooperative work and community assist GNUe contributors in mitigating and resolving conflict. In addition, we show how\u00a0\u2026", "num_citations": "128\n", "authors": ["885"]}
{"title": "Process integration in CASE environments\n", "abstract": " Research in CASE environments has focused on two kinds of integration: tool and object. A higher level of integration, process integration, which represents development activities explicitly in a software process model to guide and coordinate development and to integrate tools and objects, is proposed. Process integration uses software process models (SPMs) a process driver, a tool set, and interfaces for both developers and managers to form the backbone of a process-driven CASE environment. The developer's interface, a working environment that lets developers enact an SPM, and the manager's interface which gives managers and analysts the tools to define, monitor, and control the SPMs that developers are working on concurrently are discussed. The Softman environment experiment, an implementation of process-driven CASE environments with existing CASE environments, is reviewed.< >", "num_citations": "120\n", "authors": ["885"]}
{"title": "Socio-technical design\n", "abstract": " Socio-technical design is concerned with advocacy of the direct participation of end-users in the information system design process. The system includes the network of users, developers, information technology at hand, and the environments in which the system will be used and supported. The process includes the design of the human-computer interface and patterns of human-computer interaction. It stands in opposition to traditional system or software engineering design methods that focus attention exclusively or primarily to activities of system engineers who design the computational functions and features of a new system, and who use computer-aided design tools and notations to capture and formalize the results of such a design process. This article first provides a brief review of the history of socio-technical design approaches in order to establish a context for discussing contemporary issues in sociotechnical design of information systems, and for identifying a sample of research directions that embody or build from recent approaches, results, and concepts for modern socio-technical systems (STS) design practices.", "num_citations": "119\n", "authors": ["885"]}
{"title": "Understanding software productivity\n", "abstract": " What affects software productivity and how do we improve it? This report examines the current state of the art in software productivity measurement. In turn, it describes a framework for understanding software productivity, some fundamentals of measurement, surveys empirical studies of software productivity, and identifies challenges involved in measuring software productivity. A radical alternative to current approaches is suggested: to construct , evaluate, deploy, and evolve a knowledge-based \"software productivity modeling and simulation system\" using tools and techniques from the domain of software process engineering.", "num_citations": "116\n", "authors": ["885"]}
{"title": "Maintaining configurations of evolving software systems\n", "abstract": " Software configuration management ( SCM) is an emerging discipline. An important aspect of realizing SCM is the task of maintaining the configurations of evolving software systems. In this paper, we provide an approach to resolving some of the conceptual and technical problems in maintaining configurations of evolving software systems. The approach provides a formal basis for existing notions of system architecture. The formal properties of this view of configurations provide the underpinnings for a rigorous notion of system integrity, and mechanisms to control the evolution of configurations. This approach is embodied in a language, NuMIL, to describe software system configurations, and a prototype environment to maintain software system configurations. We believe that the approach and the prototype environment offer a firm base to maintain software system configurations and, therefore, to implement SCM.", "num_citations": "107\n", "authors": ["885"]}
{"title": "Efficacy of home-based telerehabilitation vs in-clinic therapy for adults after stroke: a randomized clinical trial\n", "abstract": " ImportanceMany patients receive suboptimal rehabilitation therapy doses after stroke owing to limited access to therapists and difficulty with transportation, and their knowledge about stroke is often limited. Telehealth can potentially address these issues.ObjectivesTo determine whether treatment targeting arm movement delivered via a home-based telerehabilitation (TR) system has comparable efficacy with dose-matched, intensity-matched therapy delivered in a traditional in-clinic (IC) setting, and to examine whether this system has comparable efficacy for providing stroke education.Design, Setting, and ParticipantsIn this randomized, assessor-blinded, noninferiority trial across 11 US sites, 124 patients who had experienced stroke 4 to 36 weeks prior and had arm motor deficits (Fugl-Meyer [FM] score, 22-56 of 66) were enrolled between September 18, 2015, and December 28, 2017, to receive telerehabilitation\u00a0\u2026", "num_citations": "106\n", "authors": ["885"]}
{"title": "Free software development: Cooperation and conflict in a virtual organizational culture\n", "abstract": " This chapter presents an empirical study of a free software development community and how its virtual organizational culture influences its work practices. Results show that beliefs in free software and freedom of choice, and values in cooperative work and community influence work practices and norms. The authors wish to convey the importance of understanding the deeply held beliefs and values of the free software movement by showing how a free software development community uses computer-mediated communication in the form of IRC (instant messaging), mailing lists, and summary digests to mitigate and resolve conflicts, build a community, reinforce beliefs, and facilitate teamwork. Results are intended to assist future contributors and managers of free/open source software development projects in understanding the social world surrounding free/open source software development.", "num_citations": "106\n", "authors": ["885"]}
{"title": "Mobilization of software developers: the free software movement\n", "abstract": " Purpose \u2013 The paper has three purposes: the first is to provide a deeper understanding of the ideology and work practices of free and open source software development, the second to characterize the free software movement as a new type of computerization movement and the third to present a conceptual diagram and framework with an analysis showing how the free software computerization movement has evolved into an occupational community.Design/methodology/approach \u2013 Qualitative data were collected over a four year period using a virtual ethnography in a study of free and open source software development and, in particular, a study of a free software community, GNUenterprise, located at www.gnuenterprise.org, which has the goal of developing a free enterprise resource planning software system.Findings \u2013 It is concluded that the ideology of the free software movement continues to be one of the\u00a0\u2026", "num_citations": "105\n", "authors": ["885"]}
{"title": "Socio-technical interaction networks in free/open source software development processes\n", "abstract": " This chapter explores patterns of social and technological interaction that emerge in free/open source software development (F/OSSD) projects found in different research and development communities. F/OSSD is a relatively new way for building and deploying large software systems on a global basis, and differs in many interesting ways from the principles and practices traditionally advocated for software engineering. Hundreds of F/OSS systems are now in use by thousands to millions of end-users, and some of these F/OSS systems entail hundreds-of-thousands to millions of lines of source code. So what's going on here, and how are F/OSSD processes that are being used to build and sustain these projects different? One of the more significant features of F/OSSD is the formation and enactment of complex software development processes performed by loosely coordinated software developers and contributors\u00a0\u2026", "num_citations": "103\n", "authors": ["885"]}
{"title": "On designing intelligent software hypertext systems\n", "abstract": " The web of computing. We seek to gather, into a unified framework, knowledge regarding the effects of various circumstances influencing the software life cycle. In turn, this unified framework will provide an experimental basis for exploring solutions to some hard problems in software engineering. To describe this framework, Kling and Scacchi have coined the term \u201cweb of computing.\"* The following", "num_citations": "103\n", "authors": ["885"]}
{"title": "A meta-model for formulating knowledge-based models of software development\n", "abstract": " In this paper, we introduce a knowledge-based meta-model which serves as a unified resource model for integrating characteristics of major types of objects appearing in software development models (SDMs). The URM consists of resource classes and a web of relations that link different types of resources found in different kinds of models of software development. The URM includes specialized models for software models for software systems, documents, agents, tools, and development processes. The URM has served as the basis for integrating and interoperating a number of process-centered CASE environments. The major benefit of the URM is twofold: First, it forms a higher level of abstraction supporting SDM formulation that subsumes many typical models of software development objects. Hence, it enables a higher level of reusability for existing support mechanisms of these models. Second, it provides a\u00a0\u2026", "num_citations": "97\n", "authors": ["885"]}
{"title": "Modeling articulation work in software engineering processes\n", "abstract": " Current software process modeling techniques do not generally support articulation work. Articulation work is the diagnosis, recovery and resumption of development activities that unexpectedly fail. It is an integral part of software process enactment since software processes can sometimes fail or breakdown. This paper presents a knowledge-based model of articulation work in software engineering processes. It uses empirically-grounded heuristics to address three problems in articulation work: diagnosing failed development activities, determining appropriate recovery, and resuming software processes. We first investigate the role and importance of articulation work with respect to planned software development activities. We then outline a knowledge-based model of articulation work. The model has been implemented in a knowledgebased software process modeling environment called the Articulator. Combining\u00a0\u2026", "num_citations": "89\n", "authors": ["885"]}
{"title": "Understanding open source software evolution\n", "abstract": " This chapter examines the evolution of open source software and how their evolutionary patterns compare to prior studies of software evolution of proprietary (or closed source) software. Free or open source software (F/OSS) development focuses attention to systems like the GNU/Linux operating system, Apache Web server, and Mozilla Web browser, though there are now thousands of F/OSS projects under way. As these systems are being ever more widely used, questions regarding their evolution are of considerable interest. This chapter is organized around four themes. First, it presents a brief survey of empirical studies of software evolution. As the majority of published studies of this kind are associated with the development of the laws of software evolution due to Lehman and colleagues, the kinds of findings they provide are described. Additionally, a sample of other empirical studies of software evolution are provided as well, in order to round out what is presently known about software evolution, at least in terms of studies of closed source software systems developed within centralized software development centers. Second, it presents selected data and evidence that has begun to appear that characterizes change and evolution patterns associated with the evolution of F/OSS. Along the way, attention shifts to an analysis of where, how and why the evolution of F/OSS does or does not conform to prior empirical studies, models or theories of software evolution. Without revealing too much at this point, it is fair to say that there are patterns of data from studies of F/OSS that are not fully explained by prior studies of software evolution, as\u00a0\u2026", "num_citations": "86\n", "authors": ["885"]}
{"title": "Understanding requirements for open source software\n", "abstract": " This study presents findings from an empirical study directed at understanding the roles, forms, and consequences arising in requirements for open source software (OSS) development efforts. Five open source software development communities are described, examined, and compared to help discover what differences may be observed. At least two dozen kinds of software informalisms are found to play a critical role in the elicitation, analysis, specification, validation, and management of requirements for developing OSS systems. Subsequently, understanding the roles these software informalisms take in a new formulation of the requirements development process for OSS is the focus of this study. This focus enables considering a reformulation of the requirements engineering process and its associated artifacts or (in)formalisms to better account for the requirements when developing OSS systems. Other\u00a0\u2026", "num_citations": "84\n", "authors": ["885"]}
{"title": "Analyzing software licenses in open architecture software systems\n", "abstract": " A substantial number of enterprises and independent software vendors are adopting a strategy in which software-intensive systems are developed with an open architecture (OA) that may contain open source software (OSS) components or components with open APIs. The emerging challenge is to realize the benefits of openness when components are subject to different copyright or property licenses. In this position paper, we identify key properties of OSS licenses, present a license analysis scheme, and discuss our approach for automatically analyzing license interactions.", "num_citations": "79\n", "authors": ["885"]}
{"title": "Collaboration, leadership, control, and conflict negotiation and the netbeans. org open source software development community\n", "abstract": " Large open source software development communities are quickly learning that, to be successful, they must integrate efforts not only among the organizations investing developers within the community and unaffiliated volunteer contributors, but also negotiate relationships with external groups hoping to sway the social and technical direction of the community and its products. Leadership and control sharing across organizations and individuals in and between communities are common sources of conflict. Such conflict often leads to breakdowns in collaboration. This paper seeks to explore the negotiation of these conflicts, collaborative efforts, and leadership and control structures in the Netbeans.org community.", "num_citations": "77\n", "authors": ["885"]}
{"title": "Experience with software process simulation and modeling\n", "abstract": " In this paper, I describe an approach and experiences in developing and applying simulation and modeling technologies to software processes. Processes for both software development and use have been investigated. The focus of this paper is organized around three topics for software process simulation and modeling. First, I describe an approach and examples of software simulation and modeling as investigated with knowledge-based process engineering environment developed at USC. Second, I describe how by focusing on process modeling, analysis and simulation, we are led to expand the scope of work with software processes toward a more comprehensive software process life cycle engineering. Third, I describe some of the lessons learned from applying modeling and simulation concepts, techniques and tools to software processes in a variety of organizational settings. Conclusions then stress the\u00a0\u2026", "num_citations": "75\n", "authors": ["885"]}
{"title": "Understanding the role of licenses and evolution in open architecture software ecosystems\n", "abstract": " The role of software ecosystems in the development and evolution of open architecture systems whose components are subject to different licenses has received insufficient consideration. Such systems are composed of components potentially under two or more licenses, open source or proprietary or both, in an architecture in which evolution can occur by evolving existing components, replacing them, or refactoring. The software licenses of the components both facilitate and constrain the system's ecosystem and its evolution, and the licenses\u2019 rights and obligations are crucial in producing an acceptable system. Consequently, software component licenses and the architectural composition of a system help to better define the software ecosystem niche in which a given system lies. Understanding and describing software ecosystem niches for open architecture systems is a key contribution of this work. An example\u00a0\u2026", "num_citations": "70\n", "authors": ["885"]}
{"title": "Software licenses in context: The challenge of heterogeneously-licensed systems\n", "abstract": " The prevailing approach to free/open source software and licenses has been that each system is developed, distributed, and used under the terms of a single license. But it is increasingly common for information systems and other software to be composed with components from a variety of sources, and with a diversity of licenses. This may result in possible license conflicts and organizational liability for failure to fulfill license obligations. Research and practice to date have not kept up with this sea-change in software licensing arising from free/open source software development. System consumers and users consequently rely on ad hoc heuristics (or costly legal advice) to determine which license rights and obligations are in effect, often with less than optimal results; consulting services are offered to identify unknowing unauthorized use of licensed software in information systems; and researchers have shown how the choice of a (single) specific license for a product affects project success and system adoption. Legal scholars have examined how pairs of software licenses conflict but only in simple contexts. We present an approach for understanding and modeling software licenses, as well as for analyzing conflicts among groups of licenses in realistic system contexts, and for guiding the acquisition, integration, or development of systems with free/open source components in such an environment. This work is based on an empirical analysis of representative software licenses and of heterogeneously-licensed systems. Our approach provides guidance for achieving a \u201cbest-of-breed\u201d component strategy while obtaining desired license rights in\u00a0\u2026", "num_citations": "69\n", "authors": ["885"]}
{"title": "Process modeling across the web information infrastructure\n", "abstract": " Web\u2010based open source software development (OSSD) project communities provide interesting and unique opportunities for software process modeling and simulation. While most studies focus on analyzing processes in a single organization, we focus on modeling software development processes both within and across three distinct but related OSSD project communities: Mozilla, a Web artifact consumer; the Apache HTTP server that handles the transactions of Web artifacts to consumers such as the Mozilla browser; and NetBeans, a Java\u2010based integrated development environment (IDE) for creating Web artifacts and application systems. In this article, we look at the process relationships within and between these communities as components of a Web information infrastructure. We employ expressive and comparative techniques for modeling such processes that facilitate and enhance understanding of the\u00a0\u2026", "num_citations": "69\n", "authors": ["885"]}
{"title": "Process life cycle engineering: a knowledge\u2010based approach and environment\n", "abstract": " We describe our approach and mechanisms to support the engineering of organizational processes throughout their life cycle, and our current understanding of what activities are included in the process life cycle. We then go on to discuss our approach, computational mechanisms, and experiences in supporting many of these life cycle activities, as well as compare it to other related efforts. Along the way, we present examples drawn from a recent study that uses the approach and the mechanisms of our knowledge\u2010based process engineering environment to support the (re)engineering of corporate financial operations in a mid\u2010size consumer products organization.\u00a9 1997 John Wiley & Sons, Ltd.", "num_citations": "67\n", "authors": ["885"]}
{"title": "Work structures and shifts: An empirical analysis of software specification teamwork\n", "abstract": " The study and support of teamwork in upstream software development activities (eg, specification, design) have been approached from a variety of perspectives. Those which address aspects of the division of labor typically focus on authority or communication structures. In this paper, we examine how teams of engineers develop software specifications, from a perspective emphasizing the division of labor in terms of the work structures themselves. We present a new typology of work structures and report on an empirical investigation of these work structures. We examine the teamwork process followed by each of five comparable teams of specification developers. The teams worked over a ten-day period with state-of-theart specification resources to deliver functional specification documents meeting prescribed quality standards. Our data and analysis show the recurrence of various kinds of shifts in the teams\u2019 work\u00a0\u2026", "num_citations": "63\n", "authors": ["885"]}
{"title": "Intellectual property rights requirements for heterogeneously-licensed systems\n", "abstract": " Heterogeneously-licensed systems pose new challenges to analysts and system architects. Appropriate intellectual property rights must be available for the installed system, but without unnecessarily restricting other requirements, the system architecture, and the choice of components both initially and as it evolves. Such systems are increasingly common and important in e-business, game development, and other domains. Our semantic parameterization analysis of open-source licenses confirms that while most licenses present few roadblocks, reciprocal licenses such as the GNU General Public License produce knotty constraints that cannot be effectively managed without analysis of the system's license architecture. Our automated tool supports intellectual property requirements management and license architecture evolution. We validate our approach on an existing heterogeneously-licensed system.", "num_citations": "62\n", "authors": ["885"]}
{"title": "On designing intelligent hypertext systems for information management in software engineering\n", "abstract": " Information management in large scale software engineering is a challenging problem. Hypertext systems are best suited for this purpose because of the diversity in information types that is permitted in the nodes of a hypertext. The integration of a hypertext system with software engineering tools results in a software hypertext system. We describe the design of such a system called DIF. Based on our experiences in using DIF, we recognized the need and the potential for developing a hypertext system that could utilize knowledge about its users and their software tasks and products. Such a system might then be able to act as an active participant in the software process, rather than being just a passive, albeit useful storage facility. As such, we define an Intelligent Software Hypertext System (I-SHYS 1) as a software hypertext system which is knowledgeable about its environment and can use such knowledge to\u00a0\u2026", "num_citations": "62\n", "authors": ["885"]}
{"title": "Recurrent dilemmas of computer use in complex organizations\n", "abstract": " Computer technology is usually spoken of as a problem solving tool, 33 , 36 a helpful device used to ease the burdens and expand the flexibility of information processing. In this narrow sense, computer technologies have in fact increased the capabilities of people and organizations to carry out complex calculations, manipulate large sets of data and access data from geographically remote locations.", "num_citations": "62\n", "authors": ["885"]}
{"title": "Data Mining for Software Process Discovery in Open Source Software Development Communities.\n", "abstract": " Software process discovery has historically been an intensive task, either done through exhaustive empirical studies or in an automated fashion using techniques such as logging and analysis of command shell operations. While empirical studies have been fruitful, data collection has proven to be tedious and time consuming. Existing automated approaches have expedited collection of fine-grained data, but do so at the cost of impinging on the developer's work environment, few of who may be observed. In this paper, we explore techniques for discovering development processes from publicly available open source software development repositories that exploit advances in artificial intelligence. Our goal is to facilitate process discovery in ways that are less cumbersome than empirical techniques and offer a more holistic, task-oriented view of the process than current automated systems provide.", "num_citations": "58\n", "authors": ["885"]}
{"title": "Ongoing software development without classical requirements\n", "abstract": " Many prominent open source software (OSS) development projects produce systems without overt requirements artifacts or processes, contrary to expectations resulting from classical software development experience and research, and a growing number of critical software systems are evolved and sustained in this way yet provide quality and rich functional capabilities to users and integrators that accept them without question. We examine data from several OSS projects to investigate this conundrum, and discuss the results of research into OSS outcomes that sheds light on the consequences of this approach to software requirements in terms of risk of development failure and quality of the resulting system.", "num_citations": "56\n", "authors": ["885"]}
{"title": "Understanding continuous design in F/OSS projects\n", "abstract": " Open Source Software (OSS) is in regular widespread use supporting critical applications and infrastructure, including the Internet and World Wide Web themselves. The communities of OSS users and developers are often interwoven. The deep engagement of users and developers, coupled with the openness of systems lead to community-based system design and re-design activities that are continuous. Continuous redesign is facilitated by communication and knowledgesharing infrastructures such as persistent chat rooms, newsgroups, issuereporting/tracking repositories, sharable design representations and many kinds of\" software informalisms.\" These tools are arenas for managing the extensive, varied, multimedia community knowledge that forms the foundation and the substance of system requirements. Active community-based design processes and knowledge repositories create new ways of learning about, representing, and defining systems that challenge current models of representation and design. This paper presents several aspects of our research into continuous, open, community-based design practices. We discuss several new insights into how communities represent knowledge and capture requirements that derive from our qualitative empirical studies of large (ca. 2GB+) repositories of problem-report data, primarily from the Mozilla project.", "num_citations": "54\n", "authors": ["885"]}
{"title": "Understanding software process redesign using modeling, analysis and simulation\n", "abstract": " Software process redesign (SPR) is concerned with the development and application of concepts, techniques and tools for dramatically improving or optimizing software processes. This paper introduces how software process modeling, analysis and simulation may be used to support software process redesign. This includes an approach to explicitly modeling process redesign knowledge, analyzing processes for redesign, and simulating processes before, during and after redesign. A discussion follows which identifies a number of topic areas that require further study in order to make SPR a subject of software process research and practice. Copyright\u00a9 2000 John Wiley & Sons Ltd", "num_citations": "51\n", "authors": ["885"]}
{"title": "Collaboration practices and affordances in free/open source software development\n", "abstract": " This chapter examines collaborative work practices, development processes, project and community dynamics, and other socio-technical relationships in free and open source software development                (FOSSD). It also describes what kinds of collaboration affordances                facilitate collaborative work in FOSSD projects. It reviews a set of empirical studies of FOSSD that articulate different levels of analysis. Finally, there is discussion of limitations and constraints in understanding what collaboration practices and affordances arise in FOSSD studies and how they work, and then to emerging opportunities for future FOSSD studies.", "num_citations": "48\n", "authors": ["885"]}
{"title": "The SMART approach for software process engineering\n", "abstract": " Describes a methodology for software process engineering and an environment, SMART, that supports it. SMART supports a process life-cycle that includes the modeling, analysis, and execution of software processes. SMART's process monitoring capabilities can be used to provide feedback from the process execution to the process model. SMART represents the integration of three separately developed process mechanisms, and it uses two modeling formalisms (object-oriented data representation and imperative-style programming language) to bridge the gap between process modeling, analysis, and execution. SMART demonstrates the meta-environment concept, using a process modeling formalism as input specification to a generator that produces process-centered software engineering environments (PSEEs). Furthermore, SMART supports a team-oriented approach for process modeling, analysis, and\u00a0\u2026", "num_citations": "48\n", "authors": ["885"]}
{"title": "Fault tolerance analysis and self-healing strategy of autonomous, evolvable hardware systems\n", "abstract": " This paper presents an analysis of the fault tolerance achieved by an autonomous, fully embedded evolvable hardware system, which uses a combination of partial dynamic reconfiguration and an evolutionary algorithm (EA). It demonstrates that the system may self-recover from both transient and cumulative permanent faults. This self-adaptive system, based on a 2D array of 16 (4\u00d74) Processing Elements (PEs), is tested with an image filtering application. Results show that it may properly recover from faults in up to 3 PEs, that is, more than 18% cumulative permanent faults. Two fault models are used for testing purposes, at PE and CLB levels. Two self-healing strategies are also introduced, depending on whether fault diagnosis is available or not. They are based on scrubbing, fitness evaluation, dynamic partial reconfiguration and in-system evolutionary adaptation. Since most of these adaptability features are\u00a0\u2026", "num_citations": "47\n", "authors": ["885"]}
{"title": "Software development practices in open software development communities: a comparative case study\n", "abstract": " Software Development Practices in Open Software Development Communities: A Comparative Case Study Overview Understanding open so Page 1 1 Software Development Practices in Open Software Development Communities: A Comparative Case Study (Position Paper) Walt Scacchi Institute for Software Research University of California, Irvine Irvine, CA 92697-3425 USA http://www.ics.uci.edu/~wscacchi wscacchi@ics.uci.edu April 2001 \u00a9 Copyright 2001, Walt Scacchi Overview This study presents an initial set of findings from an empirical study of social processes, technical system configurations, organizational contexts, and interrelationships that give rise to open software. \"Open software\", or more narrowly, open source software, represents an approach for communities of like-minded participants to develop software system representations that are intended to be shared freely, rather than offered as closed \u2026", "num_citations": "45\n", "authors": ["885"]}
{"title": "Modeling and simulating software acquisition process architectures\n", "abstract": " In this paper, we describe our efforts to support the modeling and simulation of processes associated with software system acquisition activities. Software acquisition is generally a multi-organization endeavor concerned with the funding, management, engineering, system integration, deployment and long-term support of large software systems. We first describe our approach supporting the modeling and simulation of software acquisition processes using a software process architecture (SPA). We then introduce how we support the distribution, concurrent execution and interoperation of multiple software process simulations using the high-level architecture (HLA) and run-time infrastructure (RTI) to address the complexity of software acquisition process architectures. To illustrate this, we provide examples from the design and prototyping of a Web-based environment that supports the modeling and simulation of\u00a0\u2026", "num_citations": "44\n", "authors": ["885"]}
{"title": "Governance in open source software development projects: A comparative multi-level analysis\n", "abstract": " Open source software (OSS) development is a community-oriented, network-centric approach to building complex software systems. OSS projects are typically organized as edge organizations lacking an explicit management regime to control and coordinate decentralized project work. However, a growing number of OSS projects are developing, delivering, and supporting large-scale software systems, displacing proprietary software alternatives. Recent empirical studies of OSS projects reveal that OSS developers often self-organize into organizational forms we characterize as evolving socio-technical interaction networks (STINs). STINs emerge in ways that effectively control semi-autonomous OSS developers and coordinate project activities, producing reliable and adaptive software systems. In this paper, we examine how practices and processes enable and govern OSS projects when coalesced and\u00a0\u2026", "num_citations": "40\n", "authors": ["885"]}
{"title": "Institute for Software Research\n", "abstract": " This study is part of an ongoing comparative study of various types of open software communities including both free and open source software projects. This study examines how the organizational cultural beliefs and values of a free software virtual organization influence software development processes. It provides examples that illustrate the importance of personal motivation and a sense of working as a team in the perpetuation of a virtual work community. It presents the world of the GNUenterprise. org project as a virtual organizational culture that embodies the beliefs of free software and freedom of choice, and the values of community building and cooperative work. A close study of this project shows how these beliefs and values are manifested in software development methods, artifacts, and tool choice, as well as how dispersed developers cooperate and resolve conflict in a virtual community. Data collection includes the content analysis of Internet Relay Chat archives; kernel cousins archives (summary digests of IRC and mailing list archives); mailing list archives; email interviews; Web site documents and observations; and personal interviews conducted at two open source conferences. Two cases from IRC and mailing list archives of the GNUe virtual community at work are presented for in-depth analyses and comparison. Cultural beliefs and values combined with motivations directly influence the processes of free software development. Results show evidence of consensus-building and consistency across practices and artifacts. In addition, the beliefs and values are consistent with each other\u2013all working in concert to form the ideology\u00a0\u2026", "num_citations": "38\n", "authors": ["885"]}
{"title": "Understanding open source software evolution. Applying, breaking and rethinking the laws of software evolution\n", "abstract": " This chapter examines whether or how the evolution of open source software conforms to the laws of software evolution that have been in development for more than 30 years. The laws of software evolution and their development as the basis for a theory of software evolution represents a major intellectual contribution and challenge to the software engineering research community, and to the broader community of computer science. The principal developer and advocate for the laws of software evolution is Professor MM (Manny) Lehman from Imperial College in London, and over the years his work has been expanded and refined by a growing list of students and scholars of software evolution. However, the emerging trend of free or open source software (F/OSS) development, often focusing attention to popular software systems like the GNU/Linux operating system, the Apache Web server, the Mozilla Web browser, and many others, raises the question as to whether F/OSS conforms to or breaks the laws of software evolution as currently formulated. Finding conformance would be reassuring to the current outstanding effort representing decades of study, whereas finding breakdowns, inconsistencies, or failures might point to refutations of the laws/theory, or at least the need to rethink, refine, and reformulate the laws/theory to account for the evolution of F/OSS.This chapter is organized around five themes. First, it presents a brief review of models and theories of evolution from domains outside of software. This is to help set the stage for understanding some of the challenges and alternative historical groundings that might be used to shape our\u00a0\u2026", "num_citations": "38\n", "authors": ["885"]}
{"title": "Modding as an open source approach to extending computer game systems\n", "abstract": " This paper examines what is known so far about the role of open source software development within the world of game mods and modding practices. Game modding has become a leading method for developing games by customizing or creating OSS extensions to game software in general, and to proprietary closed source software games in particular. What, why, and how OSS and CSS come together within an application system is the subject for this study. The research method is observational and qualitative, so as to highlight current practices and issues that can be associated with software engineering and game studies foundations. Numerous examples of different game mods and modding practices are identified throughout.", "num_citations": "36\n", "authors": ["885"]}
{"title": "Collaboration, Leadership, Control-, and Con\ufb02ict Negotiation in the Netbeans. org Community\n", "abstract": " Large open source software development communities are quickly learning that, to be successful, they must integrate efforts not only among the organizations investing developers within the community and una\ufb02iliated volunteer contributors, but also negotiate relationships with external groups hoping to sway the social and technical direction of the community and its products. Leadership and control sharing across organizations and individuals in and between communities are common sources of conflict. Such con\ufb02ict often leads to breakdowns in collaboration. This paper seeks to explore the negotiation of these con\ufb02icts, collaborative e\ufb02orts, and leadership and control structures in the Netbeans. org community. Keywords", "num_citations": "36\n", "authors": ["885"]}
{"title": "Modeling recruitment and role migration processes in OSSD projects\n", "abstract": " Socio-technical processes have come to the forefront of recent analyses of the open source software development (OSSD) world. Though there many anecdotal accounts of these processes, such narratives lack the precision of more formal modeling techniques, which are needed if these processes are going to be systematically analyzed, simulated, or re-enacted. Interest in making these processes explicit is mounting, both from the commercial side of the industry, as well as among spectators who may become contributors to OSSD organization. Thus, the work we will discuss in this paper serves to close this gap by analyzing and modeling recruitment and role transition processes across three prominent OSSD communities whose software development processes we've previously examined: Mozilla. org, the Apache community, and NetBeans.", "num_citations": "35\n", "authors": ["885"]}
{"title": "Requirements for an extensible object-oriented tree/graph editor\n", "abstract": " Software engineers use graphs to represent many types of information. This paper describes a tool which is used to rapidly extend base classes to create graph editors as a user-interface to these information domains. This paper also presents requirements for extensible graph editors. These requirements establish a basis of comparison for extensible graph editors. An object-oriented programming language and an object-oriented user interface toolkit provide a great degree of flexibility for creating graph editors. Users create instances of a graph editor by specifying global and local functionality. Global functionality takes the form of graph layout algorithms, user interaction, and interaction with other tools. Local functionality is the description of the meaning and pictorial representation of nodes and arcs. As such, this paper describes a number of example graph editors that have been developed with these\u00a0\u2026", "num_citations": "35\n", "authors": ["885"]}
{"title": "Modding as a basis for developing game systems\n", "abstract": " This paper seeks to briefly examine what is known so far about game mods and modding practices. Game modding has become a leading method for developing games by customizing extensions to game software. The research method in this study is observational and qualitative, so as to highlight current practices and issues that can be associated with software engineering foundations. Numerous examples of different game mods and modding practices are identified throughout.", "num_citations": "34\n", "authors": ["885"]}
{"title": "On the power of domain\u2010specific hypertext environments\n", "abstract": " What is the potential power of hypertext technology? This article examines this question and outlines the answer by focussing attention to a domain\u2010specific view of hypertext environments. The author first defines what domain\u2010specific hypertext environments (DSHE) represent. Next, the author examines DSHE for the domains of journal and book publishing, insurance policy management, and software engineering. Then the author describes in more detail the structure of information to evolve within a DSHE for software engineering in terms of document products, processing tasks and mechanisms, and workplace attributes. In turn, this examination provides the basis for identifying seven dimensions along which the power of DSHE can be defined, experienced, and accumulated. The author also addresses the organizational costs that may be borne to realize this power. The author concludes with observations as\u00a0\u2026", "num_citations": "31\n", "authors": ["885"]}
{"title": "The future of research in free/open source software development\n", "abstract": " Free/Open Source Software (FOSS) development is not the same an Software Engineering (SE). Why this is so is unclear and open to various interpretations. Both address the challenges of developing large software systems, but the development processes, work practices, and project forms differ significantly and in intersting ways according to recent empirical studies. This paper reports on highlights from a workshop held in early 2010 on the future of research in FOSS, and how such research relates to or informs our understanding of FOSS and SE, collaborative software development work, software evolution, and new software ecosystems. FOSS and SE are complementary in many ways, yet different in others, so understanding these complements and differences can help advance the future of research in both FOSS and SE. Some of these complements and differences are identified in this paper.", "num_citations": "30\n", "authors": ["885"]}
{"title": "Experiences in discovering, modeling, and reenacting open source software development processes\n", "abstract": " Process discovery has been shown to be a challenging problem offering limited results. This paper describes a new approach to process discovery that examines the Internet information spaces of open source software development projects. In particular, we examine challenges, strengths, weaknesses and findings when seeking to discover, model, and re-enact processes associated with large, global OSSD projects like NetBeans.org. The longer-term goal of this approach is to determine the requirements and design of more fully integrated process discovery and modeling mechanisms that can be applied to Web-based, open source software development projects.", "num_citations": "30\n", "authors": ["885"]}
{"title": "Emerging issues in the acquisition of open source software within the US Department of Defense\n", "abstract": " In the past five or so years, it has become clear that the US Air Force, Army, and Navy have all committed to a strategy of acquiring software-intensive systems that require or utilize an open architecture OA and open technology OT that may incorporate OSS technology or OSS development processes. There are many perceived benefits and anticipated cost savings associated with an OA strategy. However, the challenge for acquisition program managers is how to realize the savings and benefits through requirements that can be brought into system development practice. As such, the central problem we examine in this paper is to identify principles of software architecture and OSS copyright licenses that facilitate or inhibit the success of an OA strategy when OSS and open APIs are required or otherwise employed. By examining and analyzing this problem, we can begin to identify additional requirements that may be needed to fulfill an OA strategy during program acquisition.Descriptors:", "num_citations": "29\n", "authors": ["885"]}
{"title": "Is open source software development faster, better, and cheaper than software engineering\n", "abstract": " In this paper, I draw attention to the question of determining how open source software development may represent a significant alternative to modern software engineering techniques for developing large-scale software systems. OSSD often entails shorter time frames, producing higher quality systems, and incurring lower costs than may be realized through developing systems according SE techniques. Understanding why and how this may arise is the focus of this paper.", "num_citations": "29\n", "authors": ["885"]}
{"title": "Models of software evolution: life cycle and process\n", "abstract": " This module presents an introduction to models of software system evolution and their role in structuring software development. It includes a review of traditional software life cycle models as well as software process models that have been recently proposed. It identifies three kinds of alternative models of software evolution that focus attention to either the products, production processes, or production settings as the major source of influence. It examines how different software engineering tools and techniques can support life cycle or process approaches. It also identifies techniques for evaluating the practical utility of a given model of software evolution for development projects in different kinds of organizational settings.Descriptors:", "num_citations": "28\n", "authors": ["885"]}
{"title": "Mobilization of software developers: The free software movement\n", "abstract": " Free/open source software (F/OSS) development projects are growing at a rapid rate. Globally dispersed virtual communities with large groups of software developers contribute time and effort often without pay. One force behind this phenomenon is the Free Software Movement (FSM), a 20 year-old social movement whose purpose is to promote the use of free software instead of proprietary software. We show how the ideology of the FSM influences software development work practices in F/OSS communities and how an occupational community of F/OSS developers has emerged from this movement. We present results from an empirical study of a F/OSS development community, GNUenterprise (GNUe) whose purpose is to build an Enterprise Resource Planning system. We show how the beliefs in freedom and freedom of choice, and the values of cooperative work and community building are manifested in the GNUe norms of informal self-management, immediate acceptance of fellow contributors, and open disclosure.", "num_citations": "27\n", "authors": ["885"]}
{"title": "Simulating an automated approach to discovery and modeling of open source software development processes\n", "abstract": " Process discovery has been shown to be a challenging problem offering limited results, however, most work has been conducted in closed source systems. This paper describes a new approach to process discovery that examines the Internet information spaces of open source software development projects. In searching for an automated solution to the process discovery problem, we first have simulated it manually by searching the Web space for evidence of process activities and reconstructing process fragments based on the clues discovered. The goal of this approach is to help reveal its challenges, strengths, weaknesses and findings such that they may be employed to determine the requirements and design of more fully automated process discovery and modeling mechanisms that can be applied to Web-based software development projects.", "num_citations": "27\n", "authors": ["885"]}
{"title": "Meta-Environments for Software Production\n", "abstract": " Researchers who create software production environments face considerable problems. Software production environments are large systems that are very costly to develop. Furthermore, software production environments which support particular software engineering methods may not be applicable to a large number of software production projects. These conditions have formed a trend towards research into ways which will lessen the cost of developing software production environments. In particular, the trend has been towards the construction of meta-environments. In this paper, we attempt to categorize current meta-environment approaches. For each of the categories, we review research efforts which illustrate different approaches within that category. We conclude by presenting an emerging common thread of requirements which links this field together.", "num_citations": "27\n", "authors": ["885"]}
{"title": "Understanding software productivity: towards a knowledge-based approach\n", "abstract": " What affects software productivity and how do we improve it? This report examines the current state of the art in understanding and measuring software productivity. In turn, it describes a framework for understanding software productivity, identifies some fundamentals of measurement, surveys selected studies of software productivity, and identifies variables that affect software productivity. Then, a radical alternative to current approaches is suggested: to construct, evaluate, deploy, and evolve a knowledge-based \"software productivity modeling and simulation system.\"", "num_citations": "27\n", "authors": ["885"]}
{"title": "The software infrastructure for a Distributed System Factory\n", "abstract": " This paper describes an innovative approach to the construction, application and deployment of software factories. Based on experience in creating and evolving the System Factory project at USC, we present a new experimental project, whose technological and organisational objectives are wide-ranging. This effort is called the Distributed System Factory (DSF) project. The DSF project is intended to provide a software infrastructure suitable for engineering large-scale software systems with dispersed teams working over wide-area networks. This software infrastructure is the central focus of this paper. As such, this paper describes the information structures that can be used to model and create the infrastructure, as well as target software applications. It also describes an electronic market-place of logically centralised software services which populate and execute within this infrastructure. Finally, it describes a brief\u00a0\u2026", "num_citations": "26\n", "authors": ["885"]}
{"title": "Communicating and mitigating conflict in open source software development projects\n", "abstract": " In this paper, we present results from a study of how conflict emerges, is communicated, mitigated and resolved in a globally dispersed open source software development project. In the study, conflict appears in development of an open source business office system (BOS). The BOS open source developers are characterized as an occupational subculture. These developers resolve their conflict through interactions communicated via Internet-Relay Chat, persistent chat logs, threaded email discussions, and community digests. We show how cultural beliefs in\" free software\" are manifested in software development methods, artifacts, and tool choice, as well as how dispersed developers cooperate.", "num_citations": "25\n", "authors": ["885"]}
{"title": "When is free/open source software development faster, better, and cheaper than software engineering?\n", "abstract": " This chapter draws attention to the question of determining the conditions when free/open source software development may represent a significant alternative to modern software engineering techniques for developing large-scale software systems. F/OSSD often entails shorter development times that can produce higher quality systems, and incur lower costs than may be realized through developing systems according SE techniques. Understanding why and how this may arise is the focus of this chapter. It presents, analyzes, and compares data collected from different F/OSSD projects, including an in-depth case study, to help develop such an understanding. The goal of this chapter is to determine the circumstances and conditions when F/OSSD represents a viable alternative to SE for the development of complex software systems. In particular, the chapter seeks to contrast differences observed in the arrangement and tooling of their respective software development practices, production resources, technical regimes, and community practices in which they are embedded. This in turn may then help identify how the practice and principles of SE might be improved.", "num_citations": "24\n", "authors": ["885"]}
{"title": "Articulation: an integrated approach to the diagnosis, replanning, and rescheduling of software process failures\n", "abstract": " The paper presents an integrated approach to articulate software process plans that fail. Articulation repairs a plan when a diagnosed failure occurs and reschedules changes that ensure the plan's continuation. In implementing articulation, we combine diagnosis, replanning, and rescheduling into a powerful mechanism supporting adaptive process-based software development. Use of articulation in plan execution supports recovery and repair of anticipated failures, as well as revising and improving the plans to become more effective. We also describe how a prototype knowledge-based system we developed implements the articulation approach.< >", "num_citations": "24\n", "authors": ["885"]}
{"title": "Assuring the correctness of configured software descriptions\n", "abstract": " In previous work, we described the design and implementation of a software hypertext environment for managing configured software descriptions [5]. That environment served as a basis for providing a facility for creating, managing, and revising the descriptions (ie, documentation) associated with the engineering of a software system\u2019s life cycle. It described the structures we employed for organizing, linking, and visualizing software life cycle documents as configured descriptions. It further described how this visualization mechanism utilizes a module interconnection language (NuMIL) based description of a large program in order to graphically depict (sub) system configuration structures, as well as to graphically or logically browse relations between the configuration and its source code. This paper describes a new set of concepts and mechanisms which add a more rigorous, correctness-preserving foundation to\u00a0\u2026", "num_citations": "24\n", "authors": ["885"]}
{"title": "Redesigning contracted service procurement for internet-based electronic commerce: A case study\n", "abstract": " This paper describes a case study focused on redesigning procurement processes for research grants management at the U.S. Office of Naval Research. These processes focus on the procurement of R&D services, and how they can be redesigned and supported using Web-based capabilities. Through the application of empirical results and theoretical concepts from business process reengineering, electronic commerce, and IT-based process management, we gain insight into issues and challenges to be addressed in redesigning the procurement of contracted services with Web-based EC capabilities. Accordingly, four research questions are identified and addressed which build from these results and concepts. Finally, in collaboration with other participants in this effort, the case study reveals that we could contribute to a substantial reduction in process cycle time and operational costs associated with\u00a0\u2026", "num_citations": "23\n", "authors": ["885"]}
{"title": "The USC system factory project\n", "abstract": " Developing the next generation of large-scale software systems will change the patterns of work in system development organizations. We therefore expect the major systems engineering problems to be solved will require organizational solutions that accomodate advanced software development tools, flexible manufacturing techniques for system life cycle engineering, and knowledge-intensive strategies for managing large system development projects. Over the past seven years, we have created an experimental organizational environment for developing large software systems that allow us to encounter these problems, and find effective solutions or interventions. We call this organizational environment the System Factory. We have developed and evolved the System Factory through seven generations of graduate student staff, totaling more than 500 in number. In this report, we describe what the System\u00a0\u2026", "num_citations": "21\n", "authors": ["885"]}
{"title": "A database foundation to support software system evolution\n", "abstract": " Most software engineering researchers focus on supporting the maintenance of large-scale software systems to tackle problems such as managing source code alterations or automating the reconstruction and release of incrementally altered systems from descriptions of their configurations. In this paper, we take the view that information pertaining to the configurations of a system constitute a basic source of knowledge about the system's design and how its component modules fit together. This knowledge is articulated by the use of a special language called NuMIL, which captures the interdependencies between the interfaces of components within a system. We then use a relational database system to store the descriptions. This enables management of the description of large software configurations in an elegant manner, and it facilitates the interactive use of the descriptions in analyzing incremental system\u00a0\u2026", "num_citations": "21\n", "authors": ["885"]}
{"title": "Research challenges at the intersection of computer games and software engineering\n", "abstract": " This paper provides an overview and review of R&D studies, findings, and practices that identify important problems that constitute an emerging program of future R&D opportunities relevant to established scholars and new students interested in computer games and software engineering (CGSE). This includes examining how computer games may be used to address longstanding, grand challenge problems in software engineering in new ways. The review also examines other challenges in game software requirements engineering, game software design, game software testing, teamwork processes in CGSE, global CGSE, and other closely related areas for CGSE research. From these results, it becomes possible to identify and outline possible areas for future CGSE research opportunities that may be appropriate for consideration by students, scholars, or research agencies seeking to build up scientific and technological capabilities in CGSE research and educational practice.", "num_citations": "20\n", "authors": ["885"]}
{"title": "SOFTMAN: environment for forward and reverse CASE\n", "abstract": " The design and operation of a computer-aided software engineering (CASE) environment called SOFTMAN is described. SOFTMAN is designed to support both forward and reverse engineering of large software systems. In the authors' view, tools and techniques for forward and reverse CASE are complementary and therefore should be integrated into the same environment. SOFTMAN provides support for correctness-assuring forward engineering through the incremental verification and validation of evolving software systems under its management. This applies to both formal and informal software system descriptions. Further, SOFTMAN support for reverse software engineering provides mechanisms that enables the SOFTMAN-based evolution of pre-existing software systems. As such, the authors describe their approach to both forward and reverse CASE, as well as the tools and a scenario for their use that\u00a0\u2026", "num_citations": "20\n", "authors": ["885"]}
{"title": "Modeling, simulating, and enacting complex organizational processes: a life cycle approach\n", "abstract": " I describe our approach and mechanisms to support the engineering of organizational processes throughout their life cycle. I describe our current understanding of what activities are included in the process life cycle. I then go on to describe our approach, computational mechanisms, and experiences in supporting many of these life cycle activities, as well as compare it to other related e orts. Along the way, I present examples drawn from a current study aimed at modeling, analyzing, and integrating an order ful llment process in a product development organization.", "num_citations": "19\n", "authors": ["885"]}
{"title": "Advances in the acquisition of secure systems based on open architectures\n", "abstract": " The role of software ecosystems in the development and evolution of secure open architecture systems has received insufficient consideration. Such systems are composed of software components subject to different security requirements in an architecture in which evolution can occur by evolving existing components or by replacing them. But this may result in possible security requirements conflicts and organizational liability for failure to fulfill security obligations. We have developed an approach for understanding and modeling software security requirements as security licenses, as well as for analyzing conflicts among groups of such licenses in realistic system contexts and for guiding the acquisition, integration, or development of systems with open source components in such an environment. Consequently, this paper reports on our efforts to extend our existing approach to specifying and analyzing software intellectual property licenses to now address software security licenses that can be associated with secure OA systems.Descriptors:", "num_citations": "18\n", "authors": ["885"]}
{"title": "Computer games and software engineering\n", "abstract": " Computer games represent a significant software application domain for innovative research in software engineering techniques and technologies. Game developers, whether focusing on entertainment-market opportunities or game-based applications in non-entertainment domains, thus share a common interest with software engineers and developers on how to", "num_citations": "17\n", "authors": ["885"]}
{"title": "The process of innovation in computing: A study of the social dynamics of computing\n", "abstract": " What is the nature of the process of innovation in computing? This research investigates this process within organizational settings. Computing innovations enhance or add to the existing supplies of computing resources within an organization. Nine computing innovations were examined in a comparative case study. Three cases of hardware-based innovations, three cases of software-based innovations, and three cases of organizational-based innovations were selected for systematic qualitative examination. These innovations took place in three different organizational settings; a science organization, a commercial insurance organization, and an academic computer science organization. Based on this comparative case study, subprocesses of innovation in computing were delineated according to a multi-level analytical framework. These subprocesses were then examined in light of two alternative models for\u00a0\u2026", "num_citations": "17\n", "authors": ["885"]}
{"title": "The Use of Game Development in Computer Science and Software Engineering Education\n", "abstract": " This chapter presents the results of a literature survey on the use of game development in software engineering (SE) and computer science (CS) education. Games and game development have been used in recent years to increase motivation, engagement, and learning, and to promote careers in software and computers. The authors present a bird\u2019s eye perspective on how game development has been used in recent years to teach other things than just game development. The literature survey includes research articles from the period 2004 to 2012, and it investigates among other things in what context game development has been used, the subjects and topics taught through game development, and what tools and frameworks are being used for game development to learn SE and CS. Further, this chapter includes a description of how game development was used in our software architecture course at the\u00a0\u2026", "num_citations": "16\n", "authors": ["885"]}
{"title": "Processes in securing open architecture software systems\n", "abstract": " Our goal is to identify and understand issues that arise in the development and evolution processes for securing open architecture (OA) software systems. OA software systems are those developed with a mix of closed source and open source software components that are configured via an explicit system architectural specification. Such a specification may serve as a reference model or product line model for a family of concurrently sustained OA system versions/variants. We employ a case study focusing on an OA software system whose security must be continually sustained throughout its ongoing development and evolution. We limit our focus to software processes surrounding the architectural design, continuous integration, release deployment, and evolution found in the OA system case study. We also focus on the role automated tools, software development support mechanisms, and development practices\u00a0\u2026", "num_citations": "16\n", "authors": ["885"]}
{"title": "Composition of hypertext nodes\n", "abstract": " Sauf mention contraire ci-dessus, le contenu de cette notice bibliographique peut \u00eatre utilis\u00e9 dans le cadre d\u2019une licence CC BY 4.0 Inist-CNRS/Unless otherwise stated above, the content of this bibliographic record may be used under a CC BY 4.0 licence by Inist-CNRS/A menos que se haya se\u00f1alado antes, el contenido de este registro bibliogr\u00e1fico puede ser utilizado al amparo de una licencia CC BY 4.0 Inist-CNRS", "num_citations": "16\n", "authors": ["885"]}
{"title": "Towards a knowledge-based system factory: Issues and implementations\n", "abstract": " So oftware development is labor intensive, and recent attempts to automate programming tasks often view software production as a form of organizational factory. Researchers using a factory-oriented analogy can focus on critical software development issues both similar and dissimilar to those involved in factory processes, thereby reusing valuable lessons learned in the structuring and automating of factory work. This article examines many underlying assumptions that relate factory work to the software arena, providing insights into advantages and disadvantages of this powerful metaphor. It describes the USC system factory, discussing extensions to existing automation-extensions incorporating knowledge-based mechanisms, in particular.", "num_citations": "16\n", "authors": ["885"]}
{"title": "The DoD common high order programming language effort (DoD-1) what will the impacts be?\n", "abstract": " 7he ana1yt1c 5ty1e 0f th15 paper d1ffer5 fr0m that 0f many 5tud1e5 1n c0mputer 5c1ence 0r en91neer1n9. Auth0r5 u5ua11y 1ntr0duce the reader t0 a part1cu1ar pr061em and then pr0ceed t0 pre5ent a 501ut10n wh1ch 15 5h0wn, 0r 51mp1y a55erted, t0 501ve the pr061em at hand. Many 0f\u2022 the paper5 de5cr161n9 D0D-1 f0110w th15 pattern. 7he man1fe5t pr061em 0f c0mputer u5e that the auth0r5 1ntr0duce 15 the h19h c05t 0f 50ftware ma1ntenance. And D0D-1 15 1ntr0duced a5 a 501ut10n t0 the 1dent1f1ed pr061em. 7he ana1y5e5 pre5ented here ad0pt a d1fferent p05ture. F1r5t, we 6e11eve that very 11tt1e 15 kn0wn a60ut the pr061em 1dent1f1ed 1n the D0D-1 11terature, the c05t5 0f 50ftware ma1ntenance. 50 we 5pend 50me eff0rt 1n 1dent1fy1n9 d1fferent e1ement5 0f Pr09ramm1n9 deve10pment and u5e that can 1nf1uence ma1ntenance c05t5. Here we are try1n9 t0 under5tand the extent t0\u00a0\u2026", "num_citations": "16\n", "authors": ["885"]}
{"title": "Predicting gains with visuospatial training after stroke using an EEG measure of frontoparietal circuit function\n", "abstract": " The heterogeneity of stroke prompts the need for predictors of individual treatment response to rehabilitation therapies. We previously studied healthy subjects with EEG and identified a frontoparietal circuit in which activity predicted training-related gains in visuomotor tracking. Here we asked whether activity in this same frontoparietal circuit also predicts training-related gains in visuomotor tracking in patients with chronic hemiparetic stroke. Subjects (n=12) underwent dense-array EEG recording at rest, then received 8 sessions of visuomotor tracking training delivered via home-based telehealth methods. Subjects showed significant training-related gains in the primary behavioral endpoint, Success Rate score on a standardized test of visuomotor tracking, increasing an average of 24.2\u00b121.9% (p=0.003). Activity in the circuit of interest, measured as coherence (20-30Hz) between leads overlying ipsilesional frontal (motor cortex) and parietal lobe, significantly predicted training-related gains in visuomotor tracking change, measured as change in Success Rate score (r=0.61, p=0.037), supporting the main study hypothesis. Results were specific to the hypothesized ipsilesional motor-parietal circuit, as coherence within other circuits did not predict training-related gains. Analyses were repeated after removing the four subjects with injury to motor or parietal areas; this increased the strength of the association between activity in the circuit of interest and training-related gains. The current study found that (1) Eight sessions of training can significantly improve performance on a visuomotor task in patients with chronic stroke, (2) this improvement can be\u00a0\u2026", "num_citations": "15\n", "authors": ["885"]}
{"title": "The challenge of heterogeneously-licensed systems in open architecture software ecosystems\n", "abstract": " A substantial number of development organizations are adopting a strategy in which a software-intensive system is developed with an open architecture (OA)(Oreizy, 2000), whose components may be open source software (OSS) or proprietary with open application programming interfaces (APIs). Such systems evolve not only through the evolution of their individual components, but also through replacement of one component by another, possibly from a different producer or under a different license. With this approach, the organization becomes an integrator of components largely produced elsewhere that are interconnected through open APIs as necessary to achieve the desired result. An OA development process results in an ecosystem in which the integrator is influenced from one direction by the goals, interfaces, license choices, and release cycles of the component producers, and in another direction by the\u00a0\u2026", "num_citations": "15\n", "authors": ["885"]}
{"title": "Software licenses, open source components, and open architectures\n", "abstract": " A substantial number of enterprises and independent software vendors are adopting a strategy in which software-intensive systems are developed with an open architecture (OA) that may contain open source software (OSS) components or components with open APIs. The emerging challenge is to realize the benefits of openness when components are subject to different copyright or property licenses. In this chapter, the authors identify key properties of OSS licenses, present a license analysis scheme to identify license conflicts arising from composed software elements, and apply it to provide guidance for software architectural design choices whose goal is to enable specific licensed component configurations. The scheme has been implemented in an operational environment and demonstrates a practical, automated solution to the problem of determining overall rights and obligations for alternative OAs as a\u00a0\u2026", "num_citations": "15\n", "authors": ["885"]}
{"title": "The future of research in computer games and virtual world environments\n", "abstract": " More than 30 scholars engaged in research on topics related to Computer Games and Virtual Worlds (CGVWs) participated in a workshop to identify future research problems and opportunities in this arena. Six working group topics were identified based on the scholarship and interests of the invited participants. The groups were then tasked to meet, discuss, and debate their respective topics, the results of which appear as the first six chapters of this report. The six CGVW chapter topics are:", "num_citations": "15\n", "authors": ["885"]}
{"title": "Free/Open Source Software Development Practices in the Computer Game Community\n", "abstract": " This study presents findings from empirical studies of software development practices, social processes, technical system configurations, organizational contexts, and interrelationships that give rise to free or open source 1 software (F/OSS) systems in different communities. F/OSS represents an approach for communities of like-minded participants to develop software systems and related artifacts that are intended to be shared freely, rather than offered as closed commercial products. While there is a growing popular literature attesting to F/OSS [2, 11], there are a small but growing number systematic empirical studies that informs how these communities produce software (see Sidebar at the end of this document for a study sample). Similarly, little is known about how people in these communities coordinate software development across different settings, or about what software processes, work practices, and organizational contexts are necessary to their success. To the extent that academic communities, commercial enterprises, or government agencies seek the supposed efficacy of F/OSS, they will need grounded models of the processes and practices of F/OSS development to allow effective investment of their limited resources. Therefore this article investigates processes and practices that arise in F/OSS projects in different communities, and specifically focuses on F/OSS computer game community to provide examples of these common practices.", "num_citations": "15\n", "authors": ["885"]}
{"title": "Practices and technologies in computer game software engineering\n", "abstract": " Computer games are rich, complex, and often large-scale software applications. They're a significant, interesting, and often compelling domain for innovative research in software engineering techniques and technologies. Computer games are progressively changing the everyday world in many positive ways. Game developers, whether focusing on entertainment market opportunities or game-based applications in nonentertainment domains such as education, healthcare, defense, or scientific research (that is, serious games), thus share a common interest in how best to engineer game software. This article examines techniques and technologies that inform contemporary computer game software engineering.", "num_citations": "14\n", "authors": ["885"]}
{"title": "II. Presenting Software License Conflicts through Argumentation\n", "abstract": " Heterogeneously licensed systems pose new challenges to architects and designers seeking to develop systems with appropriate intellectual property rights and obligations. In extreme cases, license conflicts may prevent a system\u2019s legal use. Our previous work showed that rights, obligations, and conflicts can be calculated. However, architects benefit from fuller information than simply (for example) a list of conflicts. In this work we demonstrate an approach for presenting intellectual property results in terms of the arguments supporting them. The network of argumentation provides not only an explanation of each conclusion, but also a guide to the tradeoffs available in choosing among design alternatives with different licensing results. The approach has been integrated into the ArchStudio software architecture environment. We present an illustrative example of its use.", "num_citations": "14\n", "authors": ["885"]}
{"title": "Issues and experiences in modeling open source software development processes\n", "abstract": " This study presents selected analyses and findings from a multi-year study into the development processes, work practices, and community dynamics that arise in open source software development (OSSD) projects. Previous results from this study have identified socio-technical development processes that shape OSSD projects [Scacchi 2001]; the use of software informalisms as both OSSD artifacts and communication media in developing the requirements for OSSD projects [Scacchi 2002a]; investigation of the comparative advantages that arise in OSSD versus traditional software engineering [Scacchi 2002b]; and others [Elliott and Scacchi 2003, Scacchi 2002c].", "num_citations": "14\n", "authors": ["885"]}
{"title": "A knowledge-based software process library for process-driven software development.\n", "abstract": " Process-driven software development represents a new technique for software production, in which a conceptual knowledge representation. called a software process, is used to represent and guide development activities. Management and reuse of software processes therefore becomes a requirement for process-driven software development. In this paper, we present a knowledge-based process library (SPLib) that supports the organization, access and reuse of software processes. SPLib consists of a knowledge base of software process representations. It also provides a set of process operations that support browsing, searching composition and abstraction. These operations reason about the content of software processes as well as maintain proper interdependency relationships among the software processes. To demonstrate the use of SPLib in process-driven software development, we provide a usage scenario where SPLib facilitates the access and reuse of software processes in real applications.", "num_citations": "14\n", "authors": ["885"]}
{"title": "Game-based virtual worlds as decentralized virtual activity systems\n", "abstract": " There is widespread interest in the development and use of decentralized systems and virtual world environments as possible new places for engaging in collaborative work activities. Similarly, there is widespread interest in stimulating new technological innovations that enable people to come together through social networking, file/media sharing, and networked multi-player computer game play. A decentralized virtual activity system (DVAS) is a networked computer supported work/play system whose elements and social activities can be both virtual and decentralized (Scacchi et al. 2008b). Massively multi-player online games (MMOGs) such as World of Warcraft and online virtual worlds such as Second Life are each popular examples of a DVAS. Furthermore, these systems are beginning to be used for research, deve-lopment, and education activities in different science, technology, and engineering\u00a0\u2026", "num_citations": "13\n", "authors": ["885"]}
{"title": "Applying a Reference Framework to Open Source Software Process Discovery\n", "abstract": " The successes of open source software development have inspired commercial organizations to adopt similar techniques in hopes of improving their own processes without regard to the software process context that provided this success. This paper describes a reference framework for software process discovery in open source software development communities that provides this context. The reference framework given here characterizes the entities present in open source communities that interplay in the form of software processes, discusses how these entities are encoded in data found in community Web spaces, and demonstrates how it can be applied in discovery.", "num_citations": "13\n", "authors": ["885"]}
{"title": "Open EC/B: A Case Study in Electronic Commerce and Open Source Software Development\n", "abstract": " CiteSeerX \u2014 Open EC/B: A Case Study in Electronic Commerce and Open Source Software Development Documents Authors Tables Log in Sign up MetaCart DMCA Donate CiteSeerX logo Documents: Advanced Search Include Citations Authors: Advanced Search Include Citations Tables: DMCA Open EC/B: A Case Study in Electronic Commerce and Open Source Software Development (2002) Cached Download as a PDF Download Links [www.ics.uci.edu] [www.ics.uci.edu] [www.ics.uci.edu] [opensource.mit.edu] Save to List Add to Collection Correct Errors Monitor Changes by Walt Scacchi Citations: 3 - 1 self Summary Citations Active Bibliography Co-citation Clustered Documents Version History Share Facebook Twitter Reddit Bibsonomy OpenURL Abstract Acknowledgements: The research described in this report is supported by grants from Keyphrases electronic commerce case study open ec open source \u2026", "num_citations": "13\n", "authors": ["885"]}
{"title": "Understanding software productivity: a comparative empirical review\n", "abstract": " The current state of the art in software productivity measurement is examined. A framework for understanding software productivity and some fundamentals of measurement are described. Selected studies of software productivity are surveyed, and challenges involved in measuring software productivity are identified. Alternatives for understanding software productivity that attempt to overcome the limitations of current approaches are discussed.< >", "num_citations": "13\n", "authors": ["885"]}
{"title": "PROBLEMS AND STRATEGIES IN ORGANIZING COMPUTER-AIDED DESIGN WORK.\n", "abstract": " PROBLEMS AND STRATEGIES IN ORGANIZING COMPUTER-AIDED DESIGN WORK. \u2014 University of Illinois at Urbana-Champaign Skip to main navigation Skip to search Skip to main content University of Illinois at Urbana-Champaign Logo Help & FAQ Home Profiles Research Units Research & Scholarship Datasets Activities Press / Media Honors PROBLEMS AND STRATEGIES IN ORGANIZING COMPUTER-AIDED DESIGN WORK. Walt Scacchi, Les Gasser, Elihu M. Gerson School of Information Sciences Research output: Chapter in Book/Report/Conference proceeding \u203a Conference contribution Overview Fingerprint Original language English (US) Title of host publication Unknown Host Publication Title Publisher IEEE Pages 166-167 Number of pages 2 ISBN (Print) Access to Document Link to publication in Scopus Link \u2026", "num_citations": "13\n", "authors": ["885"]}
{"title": "Towards a global research infrastructure for multidisciplinary study of free/open source software development\n", "abstract": " The Free/Open Source Software (F/OSS) research community is growing across and within multiple disciplines. This community faces a new and unusual situation. The traditional difficulties of gathering enough empirical data have been replaced by issues of dealing with enormous amounts of freely available public data from many disparate sources (online discussion forums, source code directories, bug reports, OSS Web portals, etc.). Consequently, these data are being discovered, gathered, analyzed, and used to support multidisciplinary research. However at present, no means exist for assembling these data under common access points and frameworks for comparative, longitudinal, and collaborative research across disciplines. Gathering and maintaining large F/OSS data collections reliably and making them usable present several research challenges. For example, current projects usually rely on\u00a0\u2026", "num_citations": "12\n", "authors": ["885"]}
{"title": "Discovering, Modeling, and Re-enacting Open Source Software Development Processes: A Case Study\n", "abstract": " Software process discovery has historically been a labor and time intensive task, either done through exhaustive empirical studies or in an automated fashion using techniques such as logging and analysis of command shell operations. While empirical studies have been fruitful, data collection has proven to be tedious and time consuming. Existing automated approaches have very detailed, low level but not rich results. We are interested in process discovery in large, globally distributed organizations such as the NetBeans open source software development community, which currently engages over twenty thousand developers distributed over several continents working collaboratively, sometimes across several stages of the software lifecycle in parallel. This presents a challenge for those who want to join the community and participate in, as well as for those who want to understand these processes. This chapter\u00a0\u2026", "num_citations": "12\n", "authors": ["885"]}
{"title": "Learning game design and software engineering through a game prototyping experience: A Case Study\n", "abstract": " This report describes a case study of small-scale effort in employing game playtesting as a starting point for learning about mainstream issues and challenges found in modern software engineering projects and practices. The goal is to be descriptive and informing through a qualitative rendering, rather than prescriptive and quantitative analysis. This study draws attention to the case of where a student with no prior experience in software development or programming must take on the task of learning how to make a game, and along the way learn about many common challenges in modern SE practice through personal discovery and experience. The game itself also imposes challenges in that we have chosen a new, unfamiliar game genre and domain that emphasizes science learning as its purpose for play. Along the way, we discuss issues in requirements, design, prototyping, testing, user experience\u00a0\u2026", "num_citations": "11\n", "authors": ["885"]}
{"title": "Understanding the Social, Technological, and Policy Implications of Open Source Software Development\n", "abstract": " Interest in open source software has emerged in many different research communities. Much of this interest has focused attention primarily onto the products of open software development (source code), and secondarily onto the processes and productive units that facilitate such development. My research is focused to understanding the processes, practices, and communities that give rise to open source software. My research group is studying (a) the role of software informalisms (vs. formalisms and standards found in software engineering),(b) the emergence and articulation of open software requirements,(c) the forms and constituencies of the social worlds of open software, and (d) other processes and practices across multiple open software development communities [Scacchi 2001b, 2002]. I am prepared to discuss early results, work in progress, and the need for further research on all of these topics at the workshop. However, the remainder of this position paper identifies what I believe are areas, topics, or basic questions requiring further research in the arena of open source software development. These follow in an unordered manner.", "num_citations": "11\n", "authors": ["885"]}
{"title": "A unix-based gist specification processor: The system factory experience\n", "abstract": " The Gist specification language emerged at USC/ISI from more than five years of research into the development of operational specification languages and environments. We designed and implemented a Gist processor through extensive utilization of language development tools and a relational database management system available in a UNIX environment. We describe the architecture of this UNIX-based Gist language processor and investigate the process of system specification by examining usage of Gist language constructs in specifying nine software projects. This paper provides a preliminary empirical assessment of the system specification effort using Gist, and outlines directions for enhancements to the processor. To our knowledge, this is the first such analysis of a formal specification language.", "num_citations": "11\n", "authors": ["885"]}
{"title": "Evaluation of software development life cycle: Methodology implementation\n", "abstract": " The cost of developing, maintaining and enhancing software is a major cost factor in many projects. The inability to understand, on a quantitative basis, what factors affect this process severely limits the ability of an organization to make changes that will have a predictable affect on improving quality and productivity of software products.In the past decade most software organizations have developed a life cycle approach for their organization. The approaches whic h describe the actions and decisions of the life cycle phases have been formalized as a methodology. Little has been done, however, to define a basis for comparison of these methodologies or even portions of these methodologies. Therefore, there is little data to guide management to direct its organization on what methodologies should be used in the life cycle phases in order to enhanc e performance in terms of cost, schedule, and technical quality.", "num_citations": "11\n", "authors": ["885"]}
{"title": "Understanding the requirements for information system documentation: an empirical investigation\n", "abstract": " Software and Information Systems (IS) documents are a common product of large IS development efforts. These documents are produced and consumed through a variety of documentation processes. These processes involve developers and users working within complex organizational settings, as well as with the focal system under development. These organizational settings facilitate and constrain IS documentation and development efforts in complicated ways. Accordingly, we present, analyze, and compare cases from field studies of three different IS development efforts in a large industrial corporation. Based on these studies, we identify a new set of variables and hypotheses that we believe represent a more plausible set of requirements for IS documentation products and processes in different organizational settings. In this regard, we utilize the concept of viewing IS documentation requirements as\u00a0\u2026", "num_citations": "10\n", "authors": ["885"]}
{"title": "Governance in open source software development projects: Towards a model for network-centric edge organizations\n", "abstract": " Open source software development OSSD is a community-oriented, network-centric approach to building complex software systems. OSSD projects are typically organized as edge organizations that lack an explicit management regime to control and coordinate decentralized project work. However, a growing number of OSSD projects are developing, delivering, and supporting large-scale software systems that are displacing proprietary software alternatives. The US Department of Defense is now committed to the adoption and deployment of software-intensive systems with open architectures and OSS components for application areas including command and control systems. Recent empirical studies of OSSD projects reveal that OSS developers often self-organize into organizational forms we characterize as evolving socio-technical interaction networks STINs. These STINs emerge in ways that effectively control semi-autonomous OSS developers and coordinate project activities to produce reliable and adaptive software systems. In this paper, we examine how practices and processes enable and govern edge organizations like OSSD projects when coalesced and configured as contingent, sociotechnical interaction networks. In so doing, we draw on results from two ongoing case studies of governance activities and elements in a small and a large OSSD project.Descriptors:", "num_citations": "9\n", "authors": ["885"]}
{"title": "Collaborative game environments for informal science education: DinoQuest and DinoQuest Online\n", "abstract": " We describe concepts and results that arose from the development and deployment of a large-scale collaborative game environment called DinoQuest and DinoQuest Online. As interoperable game environments, DQ and DQO provide a unique experience and approach to informal science education. DQ and DQO are games for helping school-age children to learn about science (or more specifically, life science and dinosaurs). In this paper, we identify and examine different collaborative group forms that emerged to play DQ and DQO, as well as the affordances that help facilitate collaborative game play. Along the way we provide examples of the collaborative groups, affordances, and game play from DQ and DQO.", "num_citations": "9\n", "authors": ["885"]}
{"title": "Understanding the development of free e-commerce/e-business software: A resource-based view\n", "abstract": " This study examines the development of open source software supporting e-commerce (EC) or e-business (EB) capabilities. This entails a case study within a virtual organization engaged in an organizational initiative to develop, deploy, and support free/open source software systems for EC or EB services, like those supporting enterprise resource planning. The objective of this study is to identify and characterize the resource-based software product development capabilities that lie at the center of the initiative, rather than the software itself, or the effectiveness of its operation in a business enterprise. By learning what these resources are, and how they are arrayed into product development capabilities, we can provide the knowledge needed to understand what resources are required to realize the potential of free EC and EB software applications. In addition, the resource-based view draws attention to those\u00a0\u2026", "num_citations": "9\n", "authors": ["885"]}
{"title": "Intense arm rehabilitation therapy improves the modified Rankin Scale score: association between gains in impairment and function\n", "abstract": " Objective To evaluate the effect of intensive rehabilitation on the modified Rankin Scale (mRS), a measure of activities limitation commonly used in acute stroke studies, and to define the specific changes in body structure/function (motor impairment) most related to mRS gains.Methods Patients were enrolled >90 days poststroke. Each was evaluated before and 30 days after a 6-week course of daily rehabilitation targeting the arm. Activity gains, measured using the mRS, were examined and compared to body structure/function gains, measured using the Fugl-Meyer (FM) motor scale. Additional analyses examined whether activity gains were more strongly related to specific body structure/function gains.Results At baseline (160 \u00b1 48 days poststroke), patients (n = 77) had median mRS score of 3 (interquartile range, 2\u20133), decreasing to 2 [2\u20133] 30 days posttherapy (p < 0.0001). Similarly, the proportion of patients with\u00a0\u2026", "num_citations": "8\n", "authors": ["885"]}
{"title": "License update and migration processes in open source software projects\n", "abstract": " Open source software (OSS) has increasingly been the subject of research efforts. Central to this focus is the nature under which the software can be distributed, used, and modified and the causes and consequent effects on software development, usage, and distribution. At present, we have little understanding of, what happens when these licenses change, what motivates such changes, and how new licenses are created, updated, and deployed. Similarly, little attention has been paid to the agreements under which contributions are made to OSS projects and the impacts of changes to these agreements. We might also ask these same questions regarding the licenses governing how individuals and groups contribute to OSS projects. This paper focuses on addressing these questions with case studies of processes by which the Apache Software Foundation\u2019s creation and migration to Version 2.0 of the\u00a0\u2026", "num_citations": "8\n", "authors": ["885"]}
{"title": "Understanding and improving Software Productivity\n", "abstract": " \u2013Software productivity has been one of the most studied aspects of software engineering\u2013Goal: review sample of empirical studies of software productivity for large-scale software systems from the 1970's through the early 2000's.", "num_citations": "8\n", "authors": ["885"]}
{"title": "Understanding free/open source software evolution: applying, breaking and rethinking the laws of software evolution\n", "abstract": " This study examines whether the evolution of open source software conforms to the laws of software evolution that have been in development for more than 30 years. Given evidence and data that may not conform, it becomes necessary to consider how the laws and theory might be revamped to better account for the data that characterizes both conventional closed source software and F/OSS system evolution.", "num_citations": "8\n", "authors": ["885"]}
{"title": "An environment for the development and maintenance of large software systems\n", "abstract": " An environment for the development and maintenance of large software systems | Proceedings of the second conference on Software development tools, techniques, and alternatives ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleProceedingsProceedings of the second conference on Software development tools, techniques, and alternativesAn environment for the development and maintenance of large software systems Article An environment for the development and maintenance of large software systems Share on Authors: K Narayanaswamy profile image K. Narayanaswamy View Profile , Walt Stewart Scacchi profile image W. \u2026", "num_citations": "8\n", "authors": ["885"]}
{"title": "The system factory approach to VLSI and software engineering\n", "abstract": " Producing the next generation of advanced large-scale software and VLSI systems will require changes in the work styles, structure and operation of system development organizations. Our approach is to bring together a set of automated software tools, development methodologies and project management strategies as an organizational form supporting system development. This paper describes a set of automated tools organized as a system engineering environment (SEE) that can support the development life-cycle for both software and VLSI systems. The tools are language-independent so they can be specialized to process different system description languages. By using a development methodology that incorporates language-based descriptions for each life-cycle activity, we can engineer software or VLSI systems with our language-directed SEE.", "num_citations": "8\n", "authors": ["885"]}
{"title": "The social dynamics of instrumental computer use\n", "abstract": " During the last three decades, computing has far surpassed its early role as a laboratory device for scientific computation. Computers are presently used for a wide array of purposes. In most of its uses it is portrayed as a problem-solving tool and as a material or intellectual object. Despite continuing technical advances, computer use is still costly in its demands for attention and special skills by people (instrumental users) who try to use it to further their own work, whether they program or not. These problems occur because much computer use is inextricably embedded in a complex set of problematic social relationships between groups of service providers and consumers. In particular, serious and continual use of computing forces users to attend to issues associated with:1. The work setting of computer use;2. Understanding the capabilities of computing;3. The scope and rate of technical change;4. Insuring that\u00a0\u2026", "num_citations": "8\n", "authors": ["885"]}
{"title": "A Feasibility Study of Expanded Home-Based Telerehabilitation After Stroke\n", "abstract": " Introduction: High doses of activity-based rehabilitation therapy improve outcomes after stroke, but many patients do not receive this for various reasons such as poor access, transportation difficulties, and low compliance. Home-based telerehabilitation (TR) can address these issues. The current study evaluated the feasibility of an expanded TR program. Methods: Under the supervision of a licensed therapist, adults with stroke and limb weakness received home-based TR (1 hour/day, 6 days/week) delivered using games and exercises. New features examined include extending therapy to 12 weeks duration, treating both arm and leg motor deficits, patient assessments performed with no therapist supervision, adding sensors to real objects, ingesting a daily experimental (placebo) pill, and generating automated actionable reports. Results: Enrollees (n=13) were median age 61 [IQR 52-65.5], and 129 [52-486] days post-stroke. Patients initiated therapy on 79.9% of assigned days and completed therapy on 65.7% of days; median therapy dose was 50.4 [33.3 - 56.7] hours. Non-compliance doubled during weeks 7-12. Modified Rankin scores improved in 6/13 patients, 3 of whom were > 3 months post-stroke. Fugl-Meyer motor scores increased by 6 [2.5-12.5] points in the arm and 1 [-0.5 - 5] point in the leg. Assessments spanning numerous dimensions of stroke outcomes were successfully implemented; some, including a weekly measure that documented a decline in fatigue (p=0.004), were successfully scored without therapist supervision. Using data from an attached sensor, real objects could be used to drive game play. The experimental pill\u00a0\u2026", "num_citations": "7\n", "authors": ["885"]}
{"title": "Autonomous emotorsports racing games: Emerging practices as speculative fictions\n", "abstract": " Motorsports games and simulated automobile racing occupy a dynamic genre of computer games for entertaining play, critical game studies and \u2018auto-play\u2019. This article utilizes the lens of speculative design to present six scenarios that seek to motivate the design of autonomous eMotorsports games and play experiences through alternative design fictions. These fictions serve to help identify and tease out how different socio-technical configurations emerging around autonomous vehicles, motorsports games, sim racing user interfaces and user experiences, embrace or exclude different stakeholders. These stakeholders can shape how autonomous eMotorsports games, game play and game viewing will emerge and prosper. These fictions also serve as a narrative web of possible socio-technical configurations open to critical review through: (1) transhumanist spectacle and spectating; (2) technofeminist and\u00a0\u2026", "num_citations": "7\n", "authors": ["885"]}
{"title": "Achieving Better Buying Power through Acquisition of Open Architecture Software Systems for Web and Mobile Devices\n", "abstract": " Our research objective was to develop new ways and means for identifying, tracking, and analyzing the costs and other better buying opportunities associated with the acquisition life cycle of OA software systems for Web-based or mobile devices.Descriptors:", "num_citations": "7\n", "authors": ["885"]}
{"title": "Software licenses, coverage, and subsumption\n", "abstract": " Software licensing issues for a system design, instantiation, or configuration are often complex and difficult to evaluate, and mistakes can be costly. Automated assistance requires a formal representation of the significant features of the software licenses involved. We present results from an analysis directed toward a formal representation capable of covering an entire license. The key to such a representation is to identify the license's actions, and relate them to the actions for exclusive rights defined in law and to the actions defined in other licenses. Parameterizing each action by the object(s) acted on, the instrumental entities through which the action is performed, and similar contextual variables enables a subsumption relation among the actions. The resulting formalism is lightweight, flexible enough to support the scope of legal interpretations, and extensible to a wide range of software licenses. We discuss the\u00a0\u2026", "num_citations": "7\n", "authors": ["885"]}
{"title": "Exploring the potential of virtual worlds for decentralized command and control\n", "abstract": " This report describes results from a research study investigating how virtual world (VW) concepts, techniques, and tools can be employed to create an online environment that supports experiments in Decentralized Command and Control (DCC). We refer to this project and the VW we have prototyped collectively as the DECENT project and system platform. DECENT is a platform for exercising and assessing the potential of a game\u2010based VW approach to decentralized C2, as well as for comparing our efforts with others closely related. Overall, we find this effort gives rise to very promising results that point to additional opportunities and system extensions for new ways to consider the potential of decentralized approaches to C2 that merit further systematic investigation and experimentation. This report provides a description of the approach to prototyping and initially evaluating some of the potential of DCC systems based on VW technologies.", "num_citations": "7\n", "authors": ["885"]}
{"title": "A Collaborative Science Learning Game Environment for Informal Science Education:DinoQuest Online\n", "abstract": " We describe concepts and results that arose from the development and deployment of a large-scale collaborative game environment called DinoQuest Online. DQO provides an entertaining experience and approach to informal science education. DQO represents a collection of 13 games for helping school-age children to learn about science (or more specifically, life science and dinosaurs).In this paper, we identify and examine different collaborative group forms that emerged to play DQO. Along the way we provided examples of the collaborative groups and game play from DQO.", "num_citations": "7\n", "authors": ["885"]}
{"title": "Expert systems and hypertext\n", "abstract": " The relationships between expert systems and hypertext are many and varied. Expert systems have been proposed as authoring environments and navigational aids for hypertext systems and hypertext systems have been proposed as knowledge representation vehicles and rule editors for expert systems. These interrelationships should come as no surprise given the similarity of intellectual challenges confronting investigators in the two respective disciplines. In each, issues of knowledge representation, control of inference, and computational complexity are central. This panel will attempt to explore some of these overlapping issues from the perspective of both basic research and commercial applications. Although some primary data will be presented, the session will be more one of making links between other Hypertext 89 Proceedings presentations and a larger body of work. Audience participation will be\u00a0\u2026", "num_citations": "7\n", "authors": ["885"]}
{"title": "Modelling software evolution: a knowledge-based approach\n", "abstract": " Software evolution represents the cycle of activities involved in the development, use, and maintenance of software systems. Modelling how software systems evolve is a complex undertaking. Our approach is to capture and make explicit an empirically-grounded understanding of software evolution in a computational form. As such, this approach embodies a framework for acquiring, representing, and operationalizing knowledge of how software systems are produced, what gets produced, and how the organizational and computational settings of software system evolution constrain their evolution. This paper briefly describes this approach. To help motivate our approach, we first provide some background which guides our efforts.Our framework for developing a computational model of software system evolution is derived from recent results in the organizational analysis of software project work [1, 2, 5, 6, 8, 9]. Our\u00a0\u2026", "num_citations": "7\n", "authors": ["885"]}
{"title": "Achieving better buying power for mobile open architecture software systems through diverse acquisition scenarios\n", "abstract": " The U.S. Defense Community denotes an ecosystem of system or software component producers, system integrators and customer organizations. For a variety of reasons this community now embraces the need to utilize open source software (OSS) and proprietary closed source software (CSS) in the system capabilities or software components it acquires, design, develops, deploys, and sustains. But the long-term transition to agile and adaptive capabilities that integrate bespoke or legacy, OSS and CSS components, has surfaced a number of issues that require acquisition-research-led approaches and solutions. In this paper, we identify and describe six key issues now found in the Defense software ecosystem: (1) unknown or unclear software architectural representations; (2) how to best deal with diverse, heterogeneous software IP licenses; (3) how to address cybersecurity requirements; (4) challenges arising in software integration and release pipelines; (5) how OSS evolution patterns transform software IP and cybersecurity requirements; and (6) the emergence of new business models for software distribution and cost accounting. We use the domain of command and control systems under different acquisition scenarios as our focus to help illuminate these issues along the way. We close with suggestions for how to resolve them.", "num_citations": "6\n", "authors": ["885"]}
{"title": "Convergence Platforms: Human-Scale Convergence and the Quality of Life\n", "abstract": " Information technology is experiencing a particularly significant growth and impact on society, but it is nevertheless inspired by and built upon convergences with other technologies. This chapter focuses on the interdependencies between information technology and nanotechnology, especially in electronics, visualization and simulation of data, and computational tools; it notes connections of information technology to biotechnology as well, and also gives attention to the connections between information technology and cognitive and social sciences. Examples of societal impacts are \u201ccreative disruption\u201d in economy and society, the gradual democratization of the Internet via open-source software and the expansion of \u201ccitizen science\u201d; the broadening of the global information infrastructure built of participatory communities of users of shared content; evolution of \u201cconsumer robotics,\u201d and conceptualization of\u00a0\u2026", "num_citations": "6\n", "authors": ["885"]}
{"title": "Challenges in the development and evolution of secure open architecture command and control systems\n", "abstract": " Challenges in the Development and Evolution of Secure Open Architecture Command and Control Systems Page 1 Challenges in the Development and Evolution of Secure Open Architecture Command and Control Systems Walt Scacchi and Thomas Alspaugh Institute for Software Research University of California, Irvine Irvine, CA 92697-3455 USA Page 2 2 Overview \u25cf Challenges of securing open architecture (OA) systems \u25cf Specifying security requirements for software systems \u25cf Case study: Securing the development and evolution of an OA C2 system within an agile, adaptive software ecosystem \u25cf Discussion and conclusions Page 3 3 Challenges of securing open architecture (OA) C2 systems Scacchi, W., Brown, C. and Nies, K. (2012). Understanding the Potential of Virtual Worlds for Decentralized Command and Control, Proc. 17th. Intern. Command and Control Research and Technology Symposium (\u2026", "num_citations": "6\n", "authors": ["885"]}
{"title": "The future of research in computer games and virtual worlds\n", "abstract": " \u25cf Background\u25cf Future CGVW research and challenge topics\u25cf Recent CGVW research project topics\u25cf Advance CGVW development technologies\u25cf Media, Art, Culture, and History (MACH) learning games", "num_citations": "6\n", "authors": ["885"]}
{"title": "Guest editorial open-source software for engineering education: Pedagogical strategies that leverage open-source tools\n", "abstract": " VAST numbers of students and other people interested in learning resources can now exploit learning infrastructures and learning designs on the Web. Even larger learning resources reside in universities\u2019 and organizations\u2019 intranets and Web-accessible e-learning systems. As the amount of learning content available on the Web continues to grow rapidly, it is increasingly important to define effective methods and strategies that will exploit this content for the promotion of sound pedagogy. Especially in computer engineering education, this requirement relates to the critical need to enhance and promote the development of student skills and competencies. The open-source software (OSS) paradigm encompasses a new philosophy for the enhancement of collaborative efforts and also provides a wide range of solutions to real-world problems. The technical approaches underlying such solutions usually come from communities of researchers and reflect their consensus on the social character of IT artifacts. Just as OSS is beginning to empower and energize learning solutions, the underlying principles and technologies can enhance a new era of pedagogical strategies. In this special issue of IEEE TRANSACTIONS ON EDUCATION, we focus on the new possibilities the OSS paradigm affords for improved computer engineering education and technology-enhanced learning.", "num_citations": "6\n", "authors": ["885"]}
{"title": "Guiding the discovery of open source software processes with a reference model\n", "abstract": " This paper describes a reference model for open source software (OSS) processes and its application towards discovering such processes from OSS project artifacts. This reference model is the means to map evidence of an enacted process to a classification of agents, resources, tools, and activities that characterize the process.", "num_citations": "6\n", "authors": ["885"]}
{"title": "OpenEC/B: electronic commerce and free/open source software development\n", "abstract": " This report investigates Open Source E-Commerce or E-Business capabilities. This entails a case study within one firm that has undertaken an organizational initiative to develop, deploy, use, and support free/open source software systems for Enterprise Resource Planning (ERP), E-Commerce (EC) or E-Business (EB) services. The objective is to identify and characterize the resource-based software product development capabilities that lie at the center of the initiative.", "num_citations": "6\n", "authors": ["885"]}
{"title": "Business processes can be software too: some initial lessons learned\n", "abstract": " The author discusses how his research team at USC has been investigating how and why software process engineering tools and techniques might be applied to problems of understanding and engineering of complex business processes. They have been engaged in process engineering research studies in business domains such as corporate finance, new product development, order fulfilment, supply chain logistics, and military procurement as well as large-scale software development and maintenance.<>", "num_citations": "6\n", "authors": ["885"]}
{"title": "Engineering large-scale software systems: an organizational knowledge base approach\n", "abstract": " The author discusses software-engineering hypertext environments (SEHE), which offer a viable information management medium for organizing, structuring, retrieving, and processing the complex networks of software object descriptions that arise within large software engineering projects. SEHE represent the merger of hypertext systems with an ensemble of software engineering tools, techniques, and strategies. An organizational knowledge-based SEHE codifies and configures a software application's domain agents, objects, attributes, relations, constraints, tasks/processes, transaction event rules, mechanisms, and resources into the information structures that are woven together to form a software hypertext. Accordingly, the author describes briefly how such a knowledge-based SEHE can be utilized in a large development project.<>", "num_citations": "6\n", "authors": ["885"]}
{"title": "Environments for VLSI and software engineering\n", "abstract": " A description of environments for VLSI and software development is provided. Many similarities exist because of the common difficulties of building complex systems in either software or hardware. These similarities include support for the complete system life cycle as well as the differences, e.g., the overwhelming need for simulation aids in the VLSI design domain. Development environments of the future will have to be able to support both disciplines because distinctions between the two continue to disappear, and because large systems need to incorporate both hardware and software components in their designs.", "num_citations": "6\n", "authors": ["885"]}
{"title": "Issues in development and maintenance of open architecture software systems\n", "abstract": " This article identifies and describes a set of six emerging issues that affect the engineering of open architecture software systems that integrate proprietary and open source software components. These interdependent issues identify problems for software engineering research and practice associated with:(a) unknown or unclear open architecture software representations;(b) systems subject to heterogeneous software licenses;(c) cybersecurity of open architecture software systems;(d) build, release, and deployment processes and process automation;(e) evolution practices for open architecture software; and (f) new business models affecting the acquisition costs of open architecture software components.", "num_citations": "5\n", "authors": ["885"]}
{"title": "Emerging Research Challenges in Computer Games and Software Engineering.\n", "abstract": " 12.1 OVERVIEW There are many possible future directions for research in computer games and software engineering (CGSE). Computer games may well be the quintessential domain for computer science (CS) and SE R&D. Why? Modern multiplayer online games must address core issues in just about every major area of CS research and education. Such games entail the development, integration, and balancing of software capabilities drawn from algorithm design and complexity, artificial intelligence (AI), computer graphics, computersupported cooperative work/play, database management systems, human\u2013computer interaction and interface design, operating systems and resource/storage management, networking, programming/scripting language design and interpretation, performance monitoring, and more. Few other software system application arenas demand such technical mastery and integration skill\u00a0\u2026", "num_citations": "5\n", "authors": ["885"]}
{"title": "Heterogeneously-licensed system requirements, acquisition and governance\n", "abstract": " Increasingly, software-intensive systems are being constructed from components subject to different licenses. As software reuse, component-based software development, and open source software components come into more widespread use during system development, developers and consumers are faced with a complex array of legal rights and obligations that they have difficulty tracking, yet alone comprehending. We outline aspects of this problem and an approach for managing it from the points of view of architects, analysts, acquisition managers, and regulators.", "num_citations": "5\n", "authors": ["885"]}
{"title": "Emerging Patterns of Intersection and Segmentation When Computerization Movements\n", "abstract": " Rob Kling and Suzanne Iacono introduced and investigated comput-erization movements, counter-computerization movements, and comput-erization organizations in a series of papers starting in the late 1980s. Their analyses focus on characterizing structural properties, ideologies, and consequences of computerization movements and organizations. This chapter starts from their foundations to investigate a set of three new computerization movements: open source software development, computer games, and grid computing. I focus attention on examining not only structural properties, ideologies, and consequences of these three computerization movements and associated organizations but also structural processes that characterize what happens when computeriza-tion movements come together, and consequences that emerge as a result of these intersecting movements. This focus on identifying emerg-ing patterns of intersecting computerization movements, as well as the segmenting of these computerization movements, is the principal con-tribution of this chapter.", "num_citations": "5\n", "authors": ["885"]}
{"title": "A first look at the NetBeans requirements and release process\n", "abstract": " Web-based OSSD communities provide unique and interesting opportunities for process modeling based on hypermedia documents in the community\u2019s Web information space. These hypermedia documents serve as artifacts of development that encode information about the agents, activities, resources, and tools in, of, and used by the community to tell a story-the story of how they develop software. By examining the artifacts of development, we can tease out the development process. This paper describes the techniques used in our ongoing efforts to discover and model the software requirements and release process of the NetBeans open source community. Not only do we model the relationships between the hypermedia documents of the community Web, but our models, themselves, are navigable, nonlinear hypermedia expressions of the process selected, as well. Our belief is that the richness provided by\u00a0\u2026", "num_citations": "5\n", "authors": ["885"]}
{"title": "Issues and experiences in modeling open source software processes\n", "abstract": " This study presents selected analyses and findings from a multi-year study into the development processes, work practices, and community dynamics that arise in open source software development (OSSD) projects. In this paper, emphasis is directed to presenting preliminary findings as to the kinds issues that arise in the modeling of the techno-social processes found in different OSSD projects. We highlight results from the examination, discovery, and modeling of software engineering processes [Scacchi 2002d] within the Apache HTTP (Web) server, Mozilla Web browser, and in particular, the NetBeans interactive development environment (IDE) project.", "num_citations": "5\n", "authors": ["885"]}
{"title": "Developing software systems to facilitate social organization\n", "abstract": " Developing the next generation of advanced computing systems will change the patterns of work in software system development organizations. Based on empirical studies of how new computing systems are developed, we find that major system engineering problems require organizational solutions rather than just technical solutions. We continue to investigate organizational settings where large software systems are being developed to study these problems and examine possible solutions. Our experience to date indicates that we can successfully incorporate findings from social analyses of computing into system development, and use them to find more effective ways to organize system development work. Further, we believe that system development strategies that follow from such findings when applied may lead to a more participatory, democratic workplace, rather than one that is just increasingly automated and bureaucratic.", "num_citations": "5\n", "authors": ["885"]}
{"title": "The system factory approach to software engineering education\n", "abstract": " The System Factory project seeks to investigate the problems of large-scale software engineering through a combine effort in research, development and education. This report describes the System Factory approach to software engineering education as developed and practiced at USC. It describes the genesis and history of the System Factory project the SF approach to software engineering, our experiences in softwre technology transfer, and concludes with some observations and potentials for large-scale software engineering projects in academic settings. Central to the SF approach is a joint focus on three key determinants of the outcomes of large-scale software development: the products developed, the process through the products are developed, and the production setting where the process of creating products occurs. Accordingly, we outline the software tools we employ, the techniques we\u00a0\u2026", "num_citations": "5\n", "authors": ["885"]}
{"title": "Toward a social framework for understanding personal computing\n", "abstract": " Since the emergence of technologies to support personal computing in the mid seventies, there has been much speculation about the potentials and impacts of widespread personal computing use. In this paper we analyze two perspectives for understanding the dissemination, uses, and impacts of personal computing, which we term the \"tool\" and \"package\" views.On the basis of empirical data we and others have gathered, we illustrate how focus - on a simple task-technology fit masks a wide variety of phenomena often found to accompany personal computing use. Using the broad scope of issues provided by a package perspective, a social analysis of personal computing can help assure a better fit between a technology like personal computers and the actual settings where it will be used.", "num_citations": "5\n", "authors": ["885"]}
{"title": "Securing software ecosystem architectures: Challenges and opportunities\n", "abstract": " We identify the challenges and opportunities for improving the security of software ecosystems and supply chain processes. Every software ecosystem has one or more architectural models that can be visually mapped, communicated, and understood to improve supply chain process security.", "num_citations": "4\n", "authors": ["885"]}
{"title": "Telerehabilitation in the home versus therapy in\u2010clinic for patients with stroke\n", "abstract": " A biomedical or health-related research study is performed to answer specific questions about a disease.Before you agree to participate in this research study, it is important that you be told the purpose, procedures, benefits, risks, discomforts, and precautions of the research. You should also be told what alternative procedures are available to you if you do not participate in the research study. The informed consent document is a written summary of this information. Be sure to ask questions while you read this consent document and ask questions if there is anything that you do not understand.", "num_citations": "4\n", "authors": ["885"]}
{"title": "Introducing computer games and software engineering\n", "abstract": " 1.1 EMERGING FIELD OF COMPUTER GAMES AND SOFTWARE ENGINEERING Computer games (CGs) are rich, complex, and often large-scale software applications. CGs are a significant, interesting, and often compelling software application domain for innovative research in software engineering (SE) techniques and technologies. CGs are progressively changing", "num_citations": "4\n", "authors": ["885"]}
{"title": "Implications: societal collective outcomes, including manufacturing\n", "abstract": " The convergences in advanced science and engineering interconnect with a number of core social issues that include the arrangement of means and modes of production and the associated labor skill requirements, training, costs of investments, and other matters. This chapter suggests that a highly customized, modularized, and broadly distributed manufacturing model is emerging that has great potential globally to open up creativity and access at the same time as it allows establishment of small-scale operations that benefit small communities by enabling them to fulfill their own immediate needs, drawing on local talent and labor, with reasonable investment costs. The trends in manufacturing technology that will contribute to establishment of new models of production include additive and other advanced manufacturing processes; small-scale multifunctional manufacturing; human-like smart robotic\u00a0\u2026", "num_citations": "4\n", "authors": ["885"]}
{"title": "Special Issue on ProSim 2003, The 4th International Workshop on Software Process Simulation and Modeling, Portland, OR, May 2003\n", "abstract": " In the special issue of Journal of Systems and Software (Vol. 59 (3)) for ProSim 2000, the editors noted that \u2018The software industry has been assailed by numerous accounts of schedule and cost overruns, and of poor product quality delivered by software development organizations in the commercial and government sectors. At the same time, the increasing complexity of software systems and heightened customer demands for \u2018\u2018better, faster, cheaper\u2019\u2019have significantly \u2018\u2018raised the bar\u2019\u2019for software developers to improve performance\u2019. They also referred to the failure of purely technical approaches to the solution of these problems. Improvement in software quality, productivity, and cost has been slow. The growing use of object-oriented development tools and languages smoothes the path from design to code, but has not by itself provided a major improvement in software process performance. Changes in the software\u00a0\u2026", "num_citations": "4\n", "authors": ["885"]}
{"title": "Free software development: A case study of software development in a virtual organizational culture\n", "abstract": " This study examines how organizational cultural beliefs and values of a free software virtual organization influence software development processes. This study shows how these beliefs and values are manifested in software development methods, artifacts, and tool choice, as well as how dispersed developers cooperate and resolve conflict in a virtual community.", "num_citations": "4\n", "authors": ["885"]}
{"title": "Hypertext for software engineering\n", "abstract": " What is the power of hypertext in supporting software engineering? (The term \u201chypertext\u201d is treated throughout as synonymous with \u201chypermedia,\u201d which denotes the nonlinear representation of interrelated textual, graphic, filmic, or auditory information.) Power in other contexts usually refers to the ability of some entity or agent to affect the behavior of another or to achieve advantage over another in ways that the other cannot avoid. Following this, one might expect that as a technology, hypertext systems offer relative advantage over alternatives to automated text/document information systems, including conventional word processing systems, file systems, and database management systems. Hypertext systems offer a degree of information processing power that enables new kinds of applications, much like the advent of expert system shells enabled the creation of expert applications for domains such as computer\u00a0\u2026", "num_citations": "4\n", "authors": ["885"]}
{"title": "Developing a knowledge web for business process redesign\n", "abstract": " BackgroundKnowledge management (KM) within modern or virtual enterprises is an emerging area for research investigations, as well as for the development and deployment of commercially available systems [O98]. Commercial systems like Lotus Notes focus on capturing and managing unstructured information that is created and shared by people in enterprises. This information serves as a narrative knowledge base that is to be organized and managed. Other systems from KM tool vendors such as Autonomy Inc. and InXight Inc. provide computational mechanisms that process unstructured information in a Lotus Notes text base or corporate Intranet repository. These mechanisms add value by automatically constructing category (word phrases or cooccurrences) hierarchies and hypertext indices/links that characterize a set of related documents. This is possible in that these mechanisms employ term clustering or classification techniques based on statistical, information theoretic and linguistic analyses of a text database. By their very nature, text analysis techniques such as these provide their value through a shallow syntactic or surface-level processing of a document or text base. However, this value can be enhanced through use of synonym tables, thesauri, domain keyword vocabularies or other weak models to augment the analyses. Nonetheless, these significant capabilities are now commercially available to enterprises that want to begin to manage their text-based knowledge assets.On the research front, much work in KM remains to be done that builds on results from knowledge engineering, reasoning and problem-solving mechanisms\u00a0\u2026", "num_citations": "4\n", "authors": ["885"]}
{"title": "Experiences in the Modeling, Analysis, and Simulation of Formalized Software Processes.\n", "abstract": " Business process redesign, enterprise integration, and teamwork support are among the current generic goals for advanced information technology (IT) within organizations. Organizations are looking for ways to respond to competitive pressures by redesigning and continuously improving their production and operational processes. Organizations are also looking into IT as a strategy for establishing, sustaining and expanding presence in electronic markets for their goods and services. Such endeavors must therefore address complex organizational processes that entail tens, hundreds, or even thousands of organizational participants, as well as support the integration of a heterogeneous collections of both legacy and emerging ITs. Thus, we are faced with the problem of how to realize these goals in a coherent, scalable, and evolutionary manner.", "num_citations": "4\n", "authors": ["885"]}
{"title": "Articulation: supporting dynamic evolution of software engineering processes\n", "abstract": " Process-aware information systems are used to execute business processes to reach the operational goals of an organization. In this context, access control policies are defined to govern the choice in behavior of such systems. In a role engineering process these access control policies can be defined and customized. This paper introduces a new automated approach to derive current state access control policies from event logs extracted from process-aware information systems. For this purpose, the two standard formats for event logs called MXML and XES are used. It is demonstrated how this derivation can ease certain steps in the scenario-driven role engineering process, that are otherwise time-consuming and can get tedious if conducted manually.", "num_citations": "4\n", "authors": ["885"]}
{"title": "Achieving Better Buying Power through Cost-Sensitive Acquisition of Open Architecture Software Systems\n", "abstract": " Achieving Better Buying Power through Cost- Sensitive Acquisition of Open Architecture Software Systems Page 1 Achieving Better Buying Power through CostSensitive Acquisition of Open Architecture Software Systems Walt Scacchi and Thomas Alspaugh Institute for Software Research University of California, Irvine Irvine, CA 92697-3455 USA Page 2 Overview \u25cf Recent trends in open architecture (OA) software systems \u25cf Emerging challenges in achieving Better Buying Power (BBP) via OA software systems \u25cf New practices to realize cost-effective acquisition of OA software systems \u25cf Conclusions Page 3 Recent trends in OA software systems \u25cf Multi-party acquisition and OA development ecosystems \u25cf Shared development of Apps and Widgets as OA system components \u25cf Growing diversity of challenges in cybersecurity \u25cf New business models for OA software component development and use Page 4 \u2026", "num_citations": "3\n", "authors": ["885"]}
{"title": "Licensing security\n", "abstract": " There exist legal structures defining the exclusive rights of authors, and means for licensing portions of them to others in exchange for appropriate obligations. We propose an analogous approach for security, in which portions of exclusive security rights owned by system stakeholders may be licensed as needed to others, in exchange for appropriate security obligations. Copyright defines exclusive rights to reproduce, distribute, and produce derivative works, among others. We envision exclusive security rights that might include the right to access a system, the right to run specific programs, and the right to update specific programs or data, among others. Such an approach uses the existing legal structures of licenses and contracts to manage security, as copyright licenses are used to manage copyrights. At present there is no law of \u201csecurity right\u201d as there is a law of copyright, but with the increasing prevalence and\u00a0\u2026", "num_citations": "3\n", "authors": ["885"]}
{"title": "Exploring the potential of computer games for decentralized command and control\n", "abstract": " Exploring the Potential of Computer Games for Decentralized Command and Control Page 1 Exploring the Potential of Computer Games for Decentralized Command and Control Walt Scacchi, Craig Brown and Kari Nies Institute for Software Research and Center for Computer Games and Virtual Worlds University of California, Irvine Irvine, CA 92697-3455 USA Presented at the 17th. International Command and Control Research and Technology Symposium, Fairfax, VA 19-21 June 2012 Page 2 Overview \u25cf Decentralized Command and Control (DCC) \u25cf DECENT: a prototype platform for research and experimentation with DCC \u25cf C2 game play in DECENT \u25cf Features in development for DECENT game play \u25cf Extending DECENT C2 functionality \u25cf Conclusions and recommendations for future studies Page 3 Decentralized Command and Control (DCC) \u25cf DCC emerging as a new strategic thrust [DoD JOAC 2012\u2026", "num_citations": "3\n", "authors": ["885"]}
{"title": "Addressing challenges in the acquisition of secure software systems with open architectures\n", "abstract": " We seek to articulate and address a number of emerging challenges in continuously assuring the security of open architecture OA software systems throughout the system acquisition life-cycle. It is now clear that future system must resist coordinated international attacks on vulnerable software-intensive systems that are of high value, and control complex systems. But current approaches to system security are most often piecemeal with little or no support for guiding what system security requirements must address across different system processing elements and data levels, and how those can be manifest during the design building, and deployment of OA software systems. We present a framework that organizes OA system security elements and mechanisms in forms that can be aligned with different stages of acquisition spanning system design, building, and run-time deployment, as well as system evolution. We provide a case study to show our scheme and how it can be applied to common enterprise systems.Descriptors:", "num_citations": "3\n", "authors": ["885"]}
{"title": "Open Source Software Development\n", "abstract": " This article examines and reviews what is known so far about freeopen source software development FOSSD. FOSSD is not the same as software engineering as that is portrayed in common textbooks. Instead, it is a complementary approach to address the many challenges that arise in the development of complex software systems that are often built outside of a traditional corporate software development environment. This article highlights some of the basic understandings for how FOSSD works based on empirical studies of FOSSD projects, processes, and work practices in different communities. This includes identification of different types of informal online artifacts that facilitate and constrain FOSSD projects. This article also identifies what different studies examine as well as the approaches used to sample and systematically study FOSSD. Next, opportunities for constructive crossover studies of software engineering and FOSSD help reveal new directions for further research study. Finally, the last section presents limitations and conclusions regarding studies of FOSSD.Descriptors:", "num_citations": "3\n", "authors": ["885"]}
{"title": "Reference model based open source software process discovery\n", "abstract": " This paper describes a reference model for open source software (OSS) processes and its application towards discovering such processes from project artifacts. This reference model is the means to map evidence of an enacted process to a classification of agents, resources, tools, and activities that characterize the process.", "num_citations": "3\n", "authors": ["885"]}
{"title": "Collaboration, Leadership, Control, and Conflict Negotiation Processes in the NetBeans. org Open Source Software Development Community\n", "abstract": " Large open source software development (OSSD) communities are quickly learning that, to be successful, they must integrate efforts not only among developers within the community and unaffiliated volunteer contributors, but also negotiate relationships with external groups hoping to sway the social and technical direction of the community and its products. Leadership and control sharing across organizations and individuals in and between communities are common sources of conflict within these socio-technical processes. Such conflict often leads to breakdowns in the technical development process which these social processes seek to repair or articulate. This paper seeks to explore social processes associated with negotiation of these conflicts, collaboration, and leadership and control and how they related to technical development processes in the NetBeans. org OSSD project community.", "num_citations": "3\n", "authors": ["885"]}
{"title": "Strategies for Developing and Deploying Free/Open Source Software\n", "abstract": " Strategies for Developing and Deploying Free/Open Source Software Page 1 1 Strategies for Developing and Deploying Free/Open Source Software Walt Scacchi Institute for Software Research School of Information and Computer Science University of California, Irvine Irvine, CA 92697-3425 USA wscacchi@uci.edu http://www.ics.uci.edu/~wscacchi http://www.ics.uci.edu/~wscacchi/Presentations/OSS-Strategies/ Page 2 2 Overview \u2022 Background \u2022 Results from recent studies \u2022 Open Laboratory \u2022 Open Source Processes \u2022 Strategies \u2022 References Page 3 3 Research methodology \u2022 Individual case studies: significant details, but limited (and premature) generalization, little/no comparative analysis. \u2022 Few studies examine multiple OSSD projects in multiple domains \u2013 Such studies offer higher degree of comparative analyses and generalization of results. Page 4 4 Page 5 5 Page 6 6 Page 7 7 Page 8 8 Configuration \u2026", "num_citations": "3\n", "authors": ["885"]}
{"title": "Automating the discovery and modeling of open source software development processes\n", "abstract": " Chris Jensen and Walt Scacchi Institute for Software Research University of California, Irvine Irvine, CA USA 92697-3425 {cjensen, wscacchi}@ ics. uci. edu", "num_citations": "3\n", "authors": ["885"]}
{"title": "Qualitative techniques and tools for measuring, analyzing, and simulating software processes\n", "abstract": " Much of the current effort directed at empirical assessments of software production processes and their associated artifacts focuses on the use of quantitative measures or metrics as a basis for understanding. I believe that empirical studies of software engineering processes can benefit in a fundamental way through the use of qualitative research methods and tools.Quantitative metrics are fundamentally limited to the measurement of the values, frequency, and distribution of data or events in ways that can then be subjected to descriptive or inferential statistical analysis. When examining software processes, this means that one can measure the occurence of product characterists, process states or events, but it becomes very difficult to infer what the process and how it affected the product characteristics unless the process was previously known. Surveys, questionnaires, and online performance measures are not well\u00a0\u2026", "num_citations": "3\n", "authors": ["885"]}
{"title": "Abstract WP193: A Pilot Study of Expanded Home-Based Telerehabilitation After Stroke\n", "abstract": " Introduction: High doses of activity-based rehabilitation therapy help but many patients do not receive this, e.g., due to access, cost, and low compliance. Home-based telerehabilitation (TR) can address these issues. A prior study found 6 weeks of TR targeting arm motor deficits after stroke comparably efficacious vs. therapy delivered in-clinic. Here, we evaluated a program expanded in TR dose and scope. Methods: Adults with stroke and arm motor deficits saw a licensed OT/PT who performed a live exam then supervised home-based TR (6 days/week, 1 hour/day) through games, exercises, and education. New features examined herein included (a) extending therapy to 12 weeks, (b) treating both arm and leg motor deficits, (c) augmented reality games, (d) wireless smart devices, (e) ingesting a daily experimental (placebo) pill, (f) using functional objects, (g) evaluating social networks, and (h) automated\u00a0\u2026", "num_citations": "2\n", "authors": ["885"]}
{"title": "Systems and methods for facilitating rehabilitation therapy\n", "abstract": " A rehabilitation system includes a portable patient workstation configured to facilitate in-home rehabilitation therapy. In some embodiments, the workstation includes a computer configured to host computer-based activities that provide rehabilitative exercise to a patient when the patient participates in the activities, a monitor electrically connected to the computer and configured to display screens of the computer-based activities, a table upon which the monitor can be supported, a tabletop console supported on the table, the console including multiple integral user interface devices that are connected to the computer and adapted to receive patient inputs while the patient is participating in the activities, and a network interface device with which data can be transmitted and received by the patient workstation via a network.", "num_citations": "2\n", "authors": ["885"]}
{"title": "Virtual Meetings.\n", "abstract": " This chapter reviews and examines virtual meetings (VM). VM are meetings where participants are distributed across physical space or time yet seek/act as virtually colocated in a commonplace. Computer-mediated VM are the common form or mode of interest. Many millions of people regularly engage in such meetings worldwide, most often in small groups with others known to them. This chapter focuses attention on two different recurring forms of such meetings: VM conducted through online documents or artifacts that may be stored, accessed, or transacted via their associated systems and repositories and VM where participants employ computer-rendered avatars in immersive virtual worlds to denote their presence, identity, and ability to interact with other avatars through online media or experiences.", "num_citations": "2\n", "authors": ["885"]}
{"title": "Repurposing Game Play Mechanics as a Technique for Designing Game-based Virtual Worlds\n", "abstract": " 11.1 OVERVIEW This chapter examines the concept and practice of repurposing game play mechanics as a game design technique. Section 11.2 begins with a review of related research that informs this view of repurposing as a game design technique that may be adopted and practiced by new game developers or game players who want to engage in end-user game software development. Next, the chapter describes five game design case studies where different forms of repurposing are employed. These case studies include the identification of the example games and play mechanics that served to inform the resulting game designs from each. Each case study also categorizes the kinds of repurposing methods that were employed in reusing and adapting the source game mechanics into those employed in the new game design. Finally, the chapter includes a simple comparative analysis and a summary of\u00a0\u2026", "num_citations": "2\n", "authors": ["885"]}
{"title": "Streamlining the process of acquiring secure open architecture software systems\n", "abstract": " The goal of this research was continuing to investigate a new approach to address challenges in the acquisition of secure open architecture (OA) software systems for the Department of Defense (DoD; Department of Defense Open Systems Architecture [DoDOSA], 2011). Program managers, acquisition officers, and contract managers will increasingly be called on to review and approve security measures employed during the design, implementation, and deployment of OA systems. Our efforts sought to make this a simpler, more transparent, and more tractable process. Such a process must be easy to reuse, adapt, and streamline for different system application domains in order to realize cost reductions and improve acquisition workforce capabilities. Our research described in this report focuses on two problems for acquisition research: (1) how best to acquire secure OA software systems that include reusable software product line components (Mactall & Spruill, 2012; Womble, Schmidt, Arendt, & Fain, 2011); and (2) how to articulate and streamline a process for identifying and reviewing the security of OA software systems. Our overall research results presented in the following chapter stipulate that the best ways to streamline the process for acquiring secure OA systems in line with DoD's Better Buying Power 2.0 (What is Better Buying Power? 2013) guidelines are those that: (a) encourage the adoption of open (source) business models; (b) provide open source models of acquisition processes; and (c) employ techniques for streamlining acquisition processes for secure OA systems through direct measurement and assessment of acquisition\u00a0\u2026", "num_citations": "2\n", "authors": ["885"]}
{"title": "Designing secure systems based on open architectures with open source and closed source components\n", "abstract": " The development and evolution of secure open architecture systems has received insufficient consideration. Such systems are composed of both open source and closed software software components subject to different security requirements in an architecture in which evolution can occur by evolving existing components, replacing them, or refactoring their interfaces, interconnections and configuration. But this may result in possible security requirements conflicts and organizational liability for failure to fulfill security obligations. We are developing an approach for understanding and modeling software security requirements as security licenses, as well as for analyzing conflicts among groups of such licenses in realistic system contexts and for guiding the acquisition, integration, or development of systems with open source components in such an environment. Consequently, this paper reports on our\u00a0\u2026", "num_citations": "2\n", "authors": ["885"]}
{"title": "Computer Games and Virtual Worlds: New Modalities of Rehabilitation and Therapy\n", "abstract": " Computer Games and Virtual Worlds: New Modalities of Rehabilitation and Therapy Page 1 Computer Games and Virtual Worlds: New Modalities of Rehabilitation and Therapy Walt Scacchi Institute for Software Research and Center for Computer Games and Virtual Worlds University of California, Irvine Orange County Stroke Rehab Network Continuing Education Workshop 5 November 2011 Page 2 2 \u2022 Games for Health \u2022 Game play devices with possible therapeutic applications \u2022 Games for assisted therapeutic rehabilitation and physical performance training \u2022 Games and tele-rehabilitation \u2022 Recommendations Overview Page 3 3 SimHealth \u2013 A National Health Care System Game Page 4 4 Wellness game from Health Care Insurer Page 5 5 Quest for the Code: (from Starbright Foundation) Game for learning about asthma Learning objectives: \u2022 Early warning signs and symptoms \u2022 Identifying and avoiding asthma \u2026", "num_citations": "2\n", "authors": ["885"]}
{"title": "Investigating the Use of Computer Games and Virtual Worlds for Decentralized Command and Control\n", "abstract": " This report serves to document results from a one year research study (July 2010-June 2011) that investigates how computer games and virtual world (CGVW) concepts, techniques, and tools can be employed to create an online virtual world (VW) that supports experiments in decentralized command and control (DCC). We refer to this project and the CGVW we have prototyped collectively as the DECENT project and system platform. DECENT is a platform for exercising and assessing the potential of a VW-based approach to decentralized C2, as well as to compare our efforts with others closely related. Overall, we find this effort gives rise to very promising results that point to additional opportunities and system extensions for new ways to consider the potential of decentralized approaches to C2 that merit further systematic investigation and experimentation.DCC is envisioned as a new approach and model for how to organize and experience command and control systems, mission planning and scheduling processes, and physically decentralized user practices using low-cost or free (no-cost) software technologies. Our choice to employ CGVW technologies is in part influenced by the growing pervasiveness of such technologies, their availability as open source software and/or in user modifiable forms, and their widespread use by a new generation of online computer users who may see/anticipate that such technologies will become ubiquitous in future enterprise settings.", "num_citations": "2\n", "authors": ["885"]}
{"title": "Towards a science of open source systems\n", "abstract": " We seek to establish a national program for research into the science of open source systems.Open source systems are beginning to appear in many diverse disciplines, though perhaps the area with the highest level of activity, visibility, and impact is free/open source software (FOSS) systems. FOSS systems are being researched and developed by fast growing communities of academic and industrial practitioners in different disciplines. However, FOSS systems are much more than just source code, or software applications; they are better understood as packages of interrelated social and technical resources that interact and overlap, and that can occasionally give rise to profound consequences. This report addresses and elaborates on the nature of FOSS systems in order to identify the questions and problems that will guide research in this domain over the next five to ten years. Further, it provides a set of recommendations for action targeted to FOSS researchers, research agencies, and others involved in scientific research and technology development.", "num_citations": "2\n", "authors": ["885"]}
{"title": "Opportunities and Challenges for Modeling and Simulating Free/Open Source Software Processes\n", "abstract": " The focus of this article is on identifying what is known about the processes found in free and open source software development (F/OSSD) projects. The results and findings from a survey of empirical studies of F/OSSD give rise to an interesting variety of opportunities and challenges for modeling and simulating these processes, which are identified along the way. The article also presents a framework for organizing new studies according to their research focus, sampling strategy, data collection methods, modeling and simulation approach, and the strategy used to assure the quality of the modeling and simulation results. This framework thus serves to help guide research into F/OSSD processes in ways that maximize and bound their contribution.", "num_citations": "2\n", "authors": ["885"]}
{"title": "Understanding the social, technological, and public policy implications of open source software development\n", "abstract": " Interest in open source software has emerged in many different communities. Much of this interest has focused attention primarily onto the products of open software development (source code), and secondarily onto the processes and productive units that facilitate such development. My research is focused to understanding the processes, practices, and communities that give rise to open source software. My research group is studying (a) the role of software informalisms (vs. formalisms and standards found in software engineering),(b) the emergence and articulation of open software requirements,(c) the forms and constituencies of the social worlds of open software, and (d) other processes and practices across multiple open software development communities [Scacchi 2001b, 2002a, b, c]. I am prepared to discuss our results, work in progress, and the need for further research on all of these topics. However, the remainder of this position paper identifies what I believe are areas, topics, or basic questions requiring further research in the arena of open source software development and how it may impinge on government policies. These follow in an unordered manner.", "num_citations": "2\n", "authors": ["885"]}
{"title": "Open acquisition: Combining open source software development with system acquisition\n", "abstract": " This study explores and develops concepts leading to the combination of best practices from open source software development (OSSD) projects with emerging capabilities for virtual system acquisition. Virtual system acquisition is an evolving approach to demonstrate significant improvements in reducing the cost and cycle time for acquiring software-intensive systems, while improving their quality. It employs techniques and advanced information technology (IT) for electronic government applications. Open source software development is a relatively new approach to the development, deployment, and ongoing evolution of complex software system applications. The open source approach rethinks what are the resources, products, processes, and production environments necessary to develop large-scale, easy to use, and highly reliable software system applications. Open acquisition is a new concept that combines the best practices from advanced electronic government techniques with those from open source software development. The study described in this paper thus develops, demonstrates initial capabilities, and outlines further steps needed to make open acquisition techniques part of the evolving framework for realizing virtual system acquisition.", "num_citations": "2\n", "authors": ["885"]}
{"title": "Exploring open software system acquisition processes and architectures\n", "abstract": " This study explores and develops concepts leading to the combination of best practices from open source software development (OSSD) projects with emerging capabilities for virtual system acquisition. Virtual system acquisition is an evolving approach to demonstrate significant improvements in reducing the cost and cycle time for acquiring software-intensive systems, while improving their quality. It employs techniques and advanced information technology (IT) for electronic government applications. Open source software development is a relatively new approach to the development, deployment, and ongoing evolution of complex software system applications. The open source approach rethinks what are the resources, products, processes, and production environments necessary to develop large-scale, easy to use, and highly reliable software system applications. Open acquisition is a new concept that\u00a0\u2026", "num_citations": "2\n", "authors": ["885"]}
{"title": "EXperience in Migrating Legacy Systems to the Web\n", "abstract": " NCC relies on portable applications running on multiple platforms, mobile data accessed via highspeed network connections and small footprint information appliances for local processing. Of particular interest are holistic techniques for Webenabling existing applications that integrate various reengineering aspects into a\" whole system\" modernization process. Furthermore, workshop participants have been asked to contribute and exchange on information related to research and empirical results in areas including:", "num_citations": "2\n", "authors": ["885"]}
{"title": "The emergence of electronic commerce on the Internet\n", "abstract": " In this article, three questions are addressed. First, what is the Internet and what are its implications for modern businesses or strategic planners? Second, what are the current opportunities for using the Internet in different business activities? Third, what research is being persued in the USC School of Business Administration that can help better answer the preceding two questions?", "num_citations": "2\n", "authors": ["885"]}
{"title": "Expert systems for software engineering?\n", "abstract": " Issues that need to be addressed concerning the application of expert-system technology to software engineering are discussed. It is concluded that one should approach expert system use in software engineering with great caution, realizing that software engineering problems are ill-structured. A strong relationship abides between the specificity of software development methodology and the applicability of expert technology. If the methodology is to be very specific, no probable need for an expert system exists due to the availability of stronger methods. If the methodology is too weak, on the other hand, the problem is likely to be too ill-defined for expert system solutions.<>", "num_citations": "2\n", "authors": ["885"]}
{"title": "Targeted Training of a Motor-parietal Circuit Improves Its Behavioral Output\n", "abstract": " Introduction: Emerging brain mapping methods measure function of individual brain circuits and have the potential to predict a patient\u2019s gains and needs in the context of stroke rehabilitation. We recently described a motor-parietal circuit underlying visuomotor tracking and defined an EEG coherence measure (reflecting connectivity) that predicts visuomotor learning. Here we test the hypothesis that this EEG metric predicts visuomotor learning after stroke. Methods: After baseline dense-array resting EEG, patients with chronic hemiparetic stroke were provided with a home-based gaming system. During 9 half-hour training sessions, patients played games in which the stroke-affected arm tracked objects moving on the tabletop. Games were implemented using augmented reality, which we have found has advantages for motor training and in which virtual objects are projected into the real world and modified during\u00a0\u2026", "num_citations": "1\n", "authors": ["885"]}
{"title": "Adaptive serious games\n", "abstract": " Learning is associated with a lot of effort and perseverance. In learning theories, motivation can be observed as a key factor for successful learning. Serious games can increase motivation because they involve use of a variety of elements, such as visual environments, storylines, challenges, and interactions with nonplayer characters. This makes serious", "num_citations": "1\n", "authors": ["885"]}
{"title": "3rd International workshop on games and software engineering: Engineering computer games to Enable Positive, Progressive Change (GAS 2013)\n", "abstract": " We present a summary of the 3 rd  ICSE Workshop on Games and Software Engineering: Engineering Computer Games to Enable Positive, Progressive Change in this article. The full day workshop is planned to include a keynote speaker, panel discussion, and paper presentations on game software engineering topics related to requirements specification and verification, software engineering education, re-use, and infrastructure. The accepted papers are overviewed here.", "num_citations": "1\n", "authors": ["885"]}
{"title": "Open Source Systems: Long-Term Sustainability\n", "abstract": " IFIP was founded in 1960 under the auspices of UNESCO, following the First World Computer Congress held in Paris the previous year. An umbrella organization for societies working in information processing, IFIP\u2019s aim is two-fold: to support information processing within its member countries and to encourage technology transfer to developing nations. As its mission statement clearly states,", "num_citations": "1\n", "authors": ["885"]}
{"title": "Software engineering challenges of multi-player outdoor smartphone games\n", "abstract": " Physical inactivity and social isolation are the demons of computer gaming. To combat these and similar problems, my goal is to create attractive game experiences that require play outdoors, encourage multi-player interaction, and incorporate vigorous physical activity inherently. However, play outdoors in large scale naturalistic environments, using only the equipment (eg, smartphones) people normally carry with them in the world, brings new challenges to game design. Gone is the central server that coordinates all activities and manages evolution of the game state; gone is perfect communication among all players at all times; and gone are specialized sensors and controllers purpose built for games. This paper lays out the motivation for this style of gaming, as well as the challenges we face in engineering them, from requirements capture through design, coding, and validation. Finally, I summarize first steps\u00a0\u2026", "num_citations": "1\n", "authors": ["885"]}
{"title": "The challenge of heterogeneously licensed systems in open architecture software ecosystems\n", "abstract": " The role of software ecosystems in the development and evolution of open architecture systems has received insufficient consideration. Such systems are composed of heterogeneously licensed components, open source or proprietary or both, in an architecture in which evolution can occur by evolving existing components or by replacing them. But this may result in possible license conflicts and organizational liability for failure to fulfill license obligations. We have developed an approach for understanding and modeling software licenses, as well as for analyzing conflicts among groups of licenses in realistic system contexts and for guiding the acquisition, integration, or development of systems with open-source components in such an environment. This work is based on empirical analysis of representative software licenses and heterogeneously licensed systems, and collaboration with researchers in the legal world. Our approach provides guidance for achieving a best-of-breed component strategy while obtaining desired license rights in exchange for acceptable obligations.Descriptors:", "num_citations": "1\n", "authors": ["885"]}
{"title": "Governing the Mod Squad\n", "abstract": " Computer games have increasingly been the focus of user-led innovations in form of games mods. This paper examines how different kinds of socio-technical affordances serve to organize and govern the actions of the people who develop and share their game mods. The affordances examined include customization and tailoring mechanisms, software and content copyright licenses, game software infrastructure and development tools, career contingencies and organizational practices of mod teams, and social worlds intersecting the mod scene. Numerous examples will be used to ground the analytical framing presented. Overall, this study helps to provide a deeper understanding of how a web of associated affordances collectively serve to govern what mods get made, how modding practices emerge and flourish, and how modders and the game industry serve each others interests, though not always in equivocal terms.", "num_citations": "1\n", "authors": ["885"]}
{"title": "Computer support for discovering OSS processes\n", "abstract": " Large scale open source software (OSS) projects offer a wide range of documentation of the software processes that have enabled their success. Discovering these processes has been shown to be difficult to achieve. This paper describes our experiences with providing computer support for discovering OSS processes from project data. We discuss challenges of collecting and analyzing data from multiple types of project artifacts and how to address them.", "num_citations": "1\n", "authors": ["885"]}
{"title": "Modeling and navigating a simulated semiconductor fabrication laboratory using a game engine\n", "abstract": " Purpose:The purpose of this system is to assist in the identification of spilled puddles of liquid in microchip, semiconductor, or nanotechnology device manufacturing plants (FabLabs). This is an important problem to solve because while some puddles in the plant may be relatively harmless (leaking water from a fire sprinkler pipe), others may be potential biohazards (any of the over sixty dangerous acids, solvents, caustics, etc.). This danger means that any puddle not immediately recognized must be treated as a potential biohazard. This may cause the FabLab to be closed down until a cleanup team can determine the puddle\u2019s origin, composition, and means for remediation. This may result in a shut down of the FabLab down for the remainder of the day, resulting in monetary loss for the company that owns and operates the FabLab. Being able to determine the composition of a liquid spill without shutting down the plant and waiting for a cleanup intervention effectively increases the daily utilization and productivity of the FabLab.Features:", "num_citations": "1\n", "authors": ["885"]}
{"title": "A Global Research Infrastructure for Multidisciplinary Empirical Science of Free/Open Source Software: A Position Paper\n", "abstract": " The Free/Open Source Software (F/OSS) research community is growing across and within multiple disciplines. This community faces a new and unusual situation. The traditional difficulties of gathering enough empirical data have been replaced by issues of dealing with enormous amounts of freely available public data from many disparate sources (online discussion forums, source code directories, bug reports, OSS Web portals, etc.). Consequently, these data are being discovered, gathered, analyzed, and used to support multidisciplinary research. However at present, no means exist for assembling these data under common access points and frameworks for comparative, longitudinal, and collaborative research across disciplines. Gathering and maintaining large F/OSS data collections reliably and making them usable present several research challenges. For example, current projects usually rely on direct access to, and mining of raw data from groups that generate it, and both of these methods require unique effort for each new corpus, or even for updating existing corpora. In this paper we identify several common needs and critical factors in F/OSS empirical research across disciplines, and suggest orientations and recommendations for the design of a shared research infrastructure for multi-disciplinary research into F/OSS.", "num_citations": "1\n", "authors": ["885"]}
{"title": "Continuous Design of Free/Open Source Software: Preliminary Workshop Report and Research Agenda\n", "abstract": " The PIs received an NSF research grant (IIS-# 0350754) for a collaborative project and workshop focused on identifying research directions for Continuous (Re) Design of Free/Open Source Software. This report presents the preliminary results from a workshop held in two locations (UCI, 23 Sept 03 and UIUC, 8-9 Oct 03). The aim of this distributed workshop was to explore and organize the sense of the community in this research area, in relation to establishing a new\" Science of Design.\" A total of 46 academic scientists and industrial researchers from across the US came together in the workshop (18 at UCI, 28 at UIUC) to discuss, debate, and identify the critical issues and research directions. This preliminary report summarizes the findings of the workshop in five areas: motivations; areas/topics needing research; needed research collaborations and shared research infrastructure/testbeds; required investment\u00a0\u2026", "num_citations": "1\n", "authors": ["885"]}
{"title": "Understanding the Requirements for Developing and Designing Open Source Software\n", "abstract": " Understanding the Requirements for Open Source Software Development Page 1 1 Understanding the Requirements for Developing and Designing Open Source Software Walt Scacchi Institute for Software Research University of California, Irvine Irvine, CA 92697-3425 Wscacchi@ics.uci.edu ISR-NSF Workshop on Continuous Design of Open Source Software 8 October 2003 http://www.ics.uci.edu/~wscacchi/Presentations/Workshop2003/OSS-Req-Design-Process Page 2 2 Overview \u2022 Research methodology \u2022 Open source processes for Requirements \u2022 Software development informalisms \u2022 Implications \u2022 Conclusions Page 3 3 Research methodology \u2022 Prior empirical (case) studies of Open Source Software Development (OSSD) Projects \u2013 Mockus, Fielding, Herbsleb, 2000, 2002, Apache httpd server \u2013 Reis and Fortes, 2002, Mozilla Web browser \u2013 Schach et al., 2002; Holt et al., 2000, Linux Kernel \u2013 Koch and \u2026", "num_citations": "1\n", "authors": ["885"]}
{"title": "Free software developers as an occupational community: resolving conflicts and fostering collaboration [3]\n", "abstract": " In this paper, we present results from the study of a free software development virtual organization, the GNU Enterprise (GNUe) project, and how they develop software in a globally distributed free software development project. In particular, examples of how they mitigate and resolve conflict are presented. Conflict arises over the use of a non-free tool to create GNUe graphic, and over the use of a non-free tool for GNUe documentation. The GNUe developers resolve the conflict using internet relay chat (IRC), threaded email discussions, and community digests. We characterize the GNUe developers as an occupational subculture within the occupational community of free/open source software (F/OSS) developers and show how the beliefs in free software and freedom of choice, and values in cooperative work and community assist GNUe contributors in mitigating and resolving conflict. In addition, we show how\u00a0\u2026", "num_citations": "1\n", "authors": ["885"]}
{"title": "Continuous design of free/open source software: Workshop report and research agenda\n", "abstract": " The aim of this distributed workshop was to explore and organize the sense of the community in this research area, in relation to establishing a new\" Science of Design.\" A total of 46 academic scientists and industrial researchers from across the US came together in the workshop (18 at UCI, 28 at UIUC) to discuss, debate, and identify the critical issues and research directions. This preliminary report summarizes the findings of the workshop in five areas: motivations; areas/topics needing research; needed research collaborations and shared research infrastructure/testbeds; required investment; and other recommendations for action. As critical research in this area proceeds, it will have significant scientific, technological, educational, social, and economic benefits to the US", "num_citations": "1\n", "authors": ["885"]}
{"title": "Automating the Discovery and Modeling of Open Source Software Processes\n", "abstract": " The goal of our work is to develop new techniques for discovering, modeling, analyzing, and simulating software development processes based on information, events, and contexts that can be observed through public information sources on the Web. Our domain examines processes in open source software development (OSSD) projects, such as those associated with the Apache Web server, Mozilla Web browser, and interactive development environments like NetBeans and Eclipse. In our previous work, we demonstrated the ability via manual search and analysis methods to discover (fragments of) process workflows in projects like NetBeans [9] by analyzing the content of their web information spaces, including informal task prescriptions, community structure and work roles, overall project organization, product histories, and communications among community members.", "num_citations": "1\n", "authors": ["885"]}
{"title": "Conflict Management in an Occupational Community for Free Software Development\n", "abstract": " In this paper, we present results from the study of how conflict is managed in a globally distributed free software development project. Conflict arises over the use of a nonfree tool to create a GNU Enterprise (GNUe) Website graphic. The GNUe developers resolve the conflict using Internet Relay Chat (IRC), persistent relay chats, threaded email discussions, and community digests. We characterize the GNUe virtual organization as an occupational community and show how the beliefs in free software and freedom of choice, and values in cooperative work and community assist GNUe contributors in managing and resolving conflict.", "num_citations": "1\n", "authors": ["885"]}
{"title": "Special section on software maintenance\n", "abstract": " Sauf mention contraire ci-dessus, le contenu de cette notice bibliographique peut \u00eatre utilis\u00e9 dans le cadre d\u2019une licence CC BY 4.0 Inist-CNRS/Unless otherwise stated above, the content of this bibliographic record may be used under a CC BY 4.0 licence by Inist-CNRS/A menos que se haya se\u00f1alado antes, el contenido de este registro bibliogr\u00e1fico puede ser utilizado al amparo de una licencia CC BY 4.0 Inist-CNRS", "num_citations": "1\n", "authors": ["885"]}
{"title": "The life cycle costs of personal computing in an educational institution: A comparative case study\n", "abstract": " The widespread adoption of personal computers (PCs) may be attributable to their low purchase and operational costs. However, significant procedural costs arise in fitting a PC application into a work setting. Our investigation of the adoption and use of PCs in several departments of a complex organization reveals a large number of unanticipated costs. These indirect, deferred, and governance costs are chiefly borne by users not responsible for acquiring PCs. The costs represent demands for users' time, skill, expertise, and attention as well as money. We find that the distribution of deferred costs determines the viability of PC systems. We also find that the integration of PCs can alter the way people do their jobs. These changes in turn give rise to additional social and political costs within the organization. Subsequently, we find that the true costs of personal computing are typically underestimated and unaccounted.", "num_citations": "1\n", "authors": ["885"]}
{"title": "Difficulties in realizing large-scale educational computing projects\n", "abstract": " Many initiatives spurring the development and use of new computing technologies are beginning to appear in numerous higher educational settings. National recognition, the need to maintain or increase student enrollments, the increased availability of industrial grants and gifts, and persistent national forecasts of computing-skilled labor shortages are all apparent motivating reasons for the initiatives. However, in the public presentations and debates of these educational computing initiatives, a number of unsettling dilemmas appear which threaten the success of the initiatives, as well as raise the possibilities of significant social costs that may also be likely outcomes. This analysis draws upon studies of the production and consumption of computing technologies within a variety of organizations in the United States to help understand these dilemmas. Attention is directed at first to understanding some of the\u00a0\u2026", "num_citations": "1\n", "authors": ["885"]}