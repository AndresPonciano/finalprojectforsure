{"title": "Mapping-aware megamodeling: Design patterns and laws\n", "abstract": " Megamodeling is the activity of specifying systems of models and mappings, their properties, and operations over them. The latter functionality is the most important for applications, and megamodels are often used as an abstract workflow language for model processing. To be independent of a particular modeling language, typical megamodels reduce relationships between models to unstructured edges encoding nothing but a labeled pair of models, thus creating a significant gap between megamodels and code implementing them. To bridge the gap, we propose mapping-aware megamodels, which treat edges as model mappings: structured sets of links (pairs of model elements) rather than pairs of models. The workflow can then be represented as an algebraic term built from elementary operations with models and model mappings.", "num_citations": "42\n", "authors": ["2274"]}
{"title": "Analysis of Source-to-Target Model Transformations in QueST.\n", "abstract": " Query Structured Model Transformation (QueST) is a framework for defining source-to-target Model Transformations (MTs) in a structured and declarative manner. In this paper, we study how MT-related properties can be analyzed in QueST. Each MT in QueST is equivalent to a logical theory and checking properties for the MT is equivalent to analyzing correctness of such properties (ie, demonstrating that they are theorems) in this theory. We will explain the idea by encoding an underlying theory of a simple MT example as an Alloy specification and defining three sample properties. We show that the correctness of one of the properties is refuted by the Alloy analyzer, and provide a manual proof for the other two.", "num_citations": "7\n", "authors": ["2274"]}
{"title": "Managing Assurance Cases in Model Based Software Systems\n", "abstract": " Software has emerged as a significant part of many domains, including financial service platforms, social networks, medical devices and vehicle control. In critical domains, standards organizations have responded to this by creating regulations to address issues such as safety, security and privacy. In this context, compliance of software with standards has emerged as a key issue. For companies, compliance is a complex and costly goal to achieve and is often accomplished by producing so-called assurance cases, which demonstrate that the system indeed satisfies the property imposed by a standard (e.g., safety, security, privacy) by linking evidence to support claims made about the system. However, as systems undergo evolution for a variety of reasons, including fixing bugs, adding functionality or improving system quality, maintaining assurance cases multiplies the effort. Increasingly, models and model-driven engineering are being used as a means to facilitate communication and collaboration between the stakeholders in the compliance value chain and, further, to introduce automation into regulatory compliance tasks. A complexity problem also exists with the proliferation of software models in model-based software development, and the field of Model Management has emerged to address this challenge. Model Management focuses on a high-level view in which entire models and their relationships (i.e., mappings between models) can be manipulated using specialized operators to achieve useful outcomes. In this thesis, we exploit this connection between model driven engineering and regulatory compliance, and explore how to use\u00a0\u2026", "num_citations": "5\n", "authors": ["2274"]}