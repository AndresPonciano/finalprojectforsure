{"title": "A precise model for google cloud platform\n", "abstract": " Today, Google Cloud Platform (GCP) is one of the leaders among cloud APIs. Although it was established only five years ago, GCP has gained notable expansion due to its suite of public cloud services that it based on a huge, solid infrastructure. GCP allows developers to use these services by accessing GCP RESTful API that is described through HTML pages on its website. However, the documentation of GCP API is written in natural language (English prose) and therefore shows several drawbacks, such as Informal Heterogeneous Documentation, Imprecise Types, Implicit Attribute Metadata, Hidden Links, Redundancy and Lack of Visual Support. To avoid confusion and misunderstandings, the cloud developers obviously need a precise specification of the knowledge and activities in GCP. Therefore, this paper introduces GCP Model, an inferred formal model-driven specification of GCP which describes without\u00a0\u2026", "num_citations": "19\n", "authors": ["1433"]}
{"title": "Formal verification integration approach for DSML\n", "abstract": " The application of formal methods (especially, model checking and static analysis techniques) for the verification of safety critical embedded systems has produced very good results and raised the interest of system designers up to the application of these technologies in real size projects. However, these methods usually rely on specific verification oriented formal languages that most designers do not master. It is thus mandatory to embed the associated tools in automated verification toolchains that allow designers to rely on their usual domain-specific modeling languages (DSMLs) while enjoying the benefits of these powerful methods. More precisely, we propose a language to formally express system requirements and interpret verification results so that system designers (DSML end-users) avoid the burden of learning some formal verification technologies. Formal verification is achieved through\u00a0\u2026", "num_citations": "19\n", "authors": ["1433"]}
{"title": "Coordinating vertical elasticity of both containers and virtual machines\n", "abstract": " Elasticity is a key feature in cloud computing as it enables the automatic and timely provisioning and depro- visioning of computing resources. To achieve elasticity, clouds rely on virtualization techniques including Virtual Machines (VMs) and containers. While many studies address the vertical elasticity of VMs and other few works handle vertical elasticity of containers, no work manages the coordination between these two ver- tical elasticities. In this paper, we present the first approach to coordinate vertical elasticity of both VMs and containers. We propose an auto-scaling technique that allows containerized applications to adjust their resources at both container and VM levels. This work has been evaluated and validated using the RUBiS benchmark application. The results show that our approach reacts quickly and improves application perfor- mance. Our coordinated elastic controller outperforms container vertical elasticity controller by 18.34% and VM vertical elasticity controller by 70%. It also outperforms container horizontal elasticity by 39.6%.", "num_citations": "17\n", "authors": ["1433"]}
{"title": "Leveraging formal verification tools for DSML users: a process modeling case study\n", "abstract": " In the last decade, Model Driven Engineering (MDE) has been used to improve the development of safety critical systems by providing early Validation and Verification (V&V) tools for Domain Specific Modeling Languages (DSML). Verification of behavioral models is mainly addressed by translating domain specific models to formal verification dedicated languages in order to use the sophisticated associated tools such as model-checkers. This approach has been successfully applied in many different contexts, but it has a major drawback: the user has to interact with the formal tools. In this paper, we present an illustrated approach that allows the designer to formally express the expected behavioral properties using a user oriented language \u2014 a temporal extension of OCL \u2014, that is automatically translated into the formal language; and then to get feedback from the assessment of these properties using its\u00a0\u2026", "num_citations": "17\n", "authors": ["1433"]}
{"title": "Model-driven cloud resource management with OCCIware\n", "abstract": " Cloud computing has emerged as the main paradigm for hosting and delivering computing resources as services over Internet. It provides a delivery model for computing resources at infrastructure, platform, and software levels. However, there is a plethora of cloud providers offering different resource management interfaces. Due to this diversity, the consumption, provisioning, management, and supervision of cloud resources are subjected to four key issues, i.e., heterogeneity, interoperability, integration, and portability. To cope with these issues, Open Cloud Computing Interface (OCCI) is proposed as a community-based and open recommendation standard for managing any kind of cloud resources. Currently, only runtime implementations exist for OCCI, and each one targets a specific cloud service model such as Infrastructure as a Service (IaaS), Platform as a Service (PaaS), or Software as a Service (SaaS\u00a0\u2026", "num_citations": "16\n", "authors": ["1433"]}
{"title": "A model-driven tool chain for OCCI\n", "abstract": " Open Cloud Computing Interface (OCCI) is the only open standard for managing any kinds of cloud resources, e.g., Infrastructure as a Service, Platform as a Service, and Software as a Service. However, no model-driven tooling exists to assist OCCI users in designing, editing, validating, generating, and managing OCCI artifacts (i.e., extensions that represent specific application domains and configurations that define running systems). In this paper, we propose the first model-driven tool chain for OCCI called OCCIware Studio. This tool chain is based on a metamodel defining the static semantics for the OCCI standard in Ecore and OCL. OCCIware Studio provides OCCI users facilities for designing, editing, validating, generating, and managing OCCI artifacts. We detail the tooled process to define an OCCI extension. In addition, we show how the cloud user can leverage the generated tooling for this\u00a0\u2026", "num_citations": "16\n", "authors": ["1433"]}
{"title": "Specifying semantic interoperability between heterogeneous cloud resources with the FCLOUDS formal language\n", "abstract": " With the advent of cloud computing, different cloud providers with heterogeneous services and Application Programming Interfaces (APIs) have emerged. Hence, building an interoperable multi-cloud system becomes a complex task. Our idea is to design fclouds framework to achieve semantic interoperability in multi-clouds, i.e., to identify the common concepts between cloud APIs and to reason over them. In this paper, we propose to take advantage of the Open Cloud Computing Interface (OCCI) standard and the Alloy formal specification language to define the fclouds language, which is a formal language for specifying heterogeneous cloud APIs. To do so, we formalize OCCI concepts and operational semantics, then we identify and validate five properties (consistency, sequentiality, reversibility, idempotence and safety) that denote their characteristics. To demonstrate the effectiveness of our cloud formal\u00a0\u2026", "num_citations": "9\n", "authors": ["1433"]}
{"title": "A transformation-driven approach to automate feedback verification results\n", "abstract": " The integration of formal verification methods in modeling activities is a key issue to ensure the correctness of complex system design models. In this purpose, the most common approach consists in defining a translational semantics mapping the abstract syntax of the designer dedicated Domain-Specific Modeling Language (DSML) to a formal verification dedicated semantic domain in order to reuse the available powerful verification technologies. Formal verification is thus usually achieved using model transformations. However, the verification results are available in the formal domain which significantly impairs their use by the system designer which is usually not an expert of the formal technologies.             In this paper, we introduce a novel approach based on Higher-Order transformations that analyze and instrument the transformation that expresses the semantics in order to produce traceability data to\u00a0\u2026", "num_citations": "9\n", "authors": ["1433"]}
{"title": "Verification results feedback for FIACRE intermediate language\n", "abstract": " Model verification through a translational semantics is experienced to check safety and liveness properties of software architectures with some Domain-Specific Modelling Languages (DSML) like for example UML, AADL, SysML or SDL in order to reuse modelchecking tools. This approach has two barriers:(1) the semantic gap between the two areas, and (2) feedback and interpretation of verification results at the DSML level. Some intermediate languages, like for example Fiacre, are proposed in order to reduce the important semantic gap and to facilitate the definition of translational semantics. Nevertheless, feedbacks are still to be done. In this paper, we address the interpretation of results generated by the model checking tools and their feedback at the intermediate language level (Fiacre in our case) as scenarios that will be the basis to leverage the feedback at the DSML level.", "num_citations": "5\n", "authors": ["1433"]}
{"title": "Model-driven elasticity management with occi\n", "abstract": " Elasticity is considered as a fundamental feature of cloud computing where the system capacity can adjust to the current application workloads by provisioning or de-provisioning computing resources automatically and timely. Many studies have been already conducted to elasticity management systems, however, almost all lack to offer a complete modular solution. In this article, we propose MoDEMO, a new elasticity management system powering both vertical and horizontal elasticities, both VM and Container virtualization technologies, multiple cloud providers simultaneously, and various elasticity policies. MoDEMO is characterized by the following features: it represents (i) the first system that manages elasticity using Open Cloud Computing Interface (OCCI) model with respect to the OCCI standard specifications, (ii) the first unified system which combines the functionalities of the worldwide cloud providers\u00a0\u2026", "num_citations": "4\n", "authors": ["1433"]}
{"title": "Teaching MDE through the Formal Verification of Process Models\n", "abstract": " Model Driven Engineering (MDE) and formal methods (FM) play a key role in the development of Safety Critical Systems (SCS). They promote user ori-ented abstraction and formal specification using Domain Specific Modeling Lan-guages (DSML), early Validation and formal Verification (V&V) using efficient dedicated technologies and Automatic Code and Documentation Generation. Their combined use allow to improve system qualities and reduce development costs. However, in most computer science curriculae, both domains are usually taught independently. MDE is associated to practical software engineering and FM to the-oretical computer science. This contribution relates a course about MDE for SCS development that bridges the gap between these domains. It describes the content of the course and provides the lessons learned from its teaching. It focuses on early formal verification using model checking of a DSML for development process mod-eling. MDE technologies are illustrated both on language engineering for CASE tool development and on development process modeling. The case study also highlights the unification power of MDE as it does not target traditional executable software.", "num_citations": "4\n", "authors": ["1433"]}
{"title": "A DSL to Feedback Formal Verification Results.\n", "abstract": " The integration of early formal validation and verification (V&V) tools (model checking, static analysis, etc.) in the V&V activities for domain-specific modeling languages (DSMLs) is a key asset to improve safety and reduce development and maintenance costs. However, system designers (DSMLs endusers) expect a seamless approach embedding transparently these tools in automated toolchains while enjoying their benefits. Thus, a mandatory task for DSML designer is to feedback at the DSML level the verification results generated by these tools. This contribution highlights a domain-specific language (DSL) to describe this feedback and the associated tools that helps the DSML designer in integrating the V&V tools. A translational semantics is given\u2014as a higher-order transformation\u2014for this DSL in order to automatically generate a model transformation which builds verification results at the DSML level from the ones produced at the formal level.", "num_citations": "3\n", "authors": ["1433"]}
{"title": "Methods and tools for the integration of formal verification in domain-specific languages\n", "abstract": " Domain specific Modeling Languages (DSMLs) are increasingly used at the early phases in the development of complex systems, in particular, for safety critical systems. The goal is to be able to reason early in the development on these models and, in particular, to fulfill verification and validation activities (V&V). A widely used technique is the exhaustive behavioral model verification using model-checking by providing a translational semantics to build a formal model from DSML conforming models in order to reuse powerful tools available for this formal domain. Defining a translational semantics, expressing formal properties to be assessed and analysing such verification results require such an expertise in formal methods that it restricts their adoption and may discourage the designers. It is thus necessary to build for each DSML, a toolchain which hides formal aspects for DSML end-users. The goal of this thesis consists in easing the development of such verification toolchains. Our contribution includes 1) expressing behavioral properties in the DSML level by relying on TOCL (Temporal Object Constraint Language), a temporal extension of OCL; 2) An automated transformation of these properties on formal properties while reusing the key elements of the translational semantics; 3) the feedback of verification results thanks to a higher-order transformation and a language which defines mappings between DSML and formal levels; 4) the associated process implementation. Our approach was validated by the experimentation on a subset of the development process modeling language SPEM, and on Ladder Diagram language used to specify\u00a0\u2026", "num_citations": "3\n", "authors": ["1433"]}
{"title": "Model driven simulation of elastic OCCI cloud resources\n", "abstract": " Deploying a cloud configuration in a real cloud platform is mostly cost-and time-consuming, as large number of cloud resources have to be rent for the time needed to run the configuration. Thereafter, cloud simulation tools are used as a cheap alternative to test Cloud configuration. However, most of existing cloud simulation tools require extensive technical skills and does not support simulation of any kind of cloud resources. In this context, using a model-driven approach can be helpful as it allows developers to efficiently describe their needs at a high level of abstraction. To do, we propose, in this article, a Model-Driven Engineering (MDE) approach based on the OCCI (Open Cloud Computing Interface) standard metamodel and CloudSim toolkit. We firstly extend OCCI metamodel for supporting simulation of any kind of cloud resources. Afterward, to illustrate the extensibility of our approach, we enrich the proposed metamodel by new simulation capabilities. As proof of concept, we study the elasticity and pricing strategies of Amazon Web Services (AWS). This article benefits from OCCIware Studio to design an OCCI simulation extension and to provide a simulation designer for designing cloud configurations to be simulated. We detail the approach process from defining an OCCI simulation extension until the generation and the simulation of the OCCI cloud configurations. Finally, we validate the proposed approach by providing a realistic experimentation to study its usability, the resources coverage rate and the cost. The results is compared with the ones computed from AWS.", "num_citations": "2\n", "authors": ["1433"]}
{"title": "Model Execution and Debugging - A Process to Leverage Existing Tools\n", "abstract": " Model checking is an effective technique for the verification of critical systems. However, it relies on behavioral models which writing and verification is most of time costly. Thus, those models shall be validated and debugged thoroughly, and simulation, i.e. model execution, can be used for that purpose. To reduce the development costs of simulators and ensure their behavioral consistency with model verifiers, we advocate the reuse of parts of the model verification toolchain to implement them. To support this claim, this paper proposes a method illustrated with a realistic case study applied to FIACRE behavioral models. The approach relies on the creation and exploitation of relations between models representing the information required by the user on the one hand, and information produced by the tools, on the other hand.", "num_citations": "1\n", "authors": ["1433"]}