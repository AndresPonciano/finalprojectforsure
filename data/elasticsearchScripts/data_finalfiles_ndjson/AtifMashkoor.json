{"title": "The hemodialysis machine case study\n", "abstract": " This documents presents a description of a case study concerning the control of a hemodialysis (HD) machine. It provides an overview of the requirements and the design of an HD machine including a sketch of the machine\u2019s functionality, related safety conditions, and a top-level system architectural description.", "num_citations": "44\n", "authors": ["1411"]}
{"title": "Transformation heuristics for formal requirements validation by animation\n", "abstract": " Safety critical software systems are regulated by stringent certification requirements. The use of formal methods is the part of standard recommendations in particular for higher safety integrity levels. An important issue with formal methods is the problem of the validation of requirements: do they accurately capture the stakeholder needs? While proof tools guarantee the consistency of a specification, they are of little help to check if the specification models the desired behavior. This paper addresses the problem of the validation of Event-B specifications by animation. Once the specifications have been verified using the RODIN platform, they have to be transformed in order to be animated by the Brama animator. We propose transformation heuristics in order to produce a derived animatable specification which may be non-provable, but exhibiting the same behavior as the original specification.", "num_citations": "30\n", "authors": ["1411"]}
{"title": "Utilizing Event-B for domain engineering: a critical analysis\n", "abstract": " This paper presents our experience of modeling land transportation domain in the formal framework of Event-B. Well-specified requirements are crucial for good software design; they depend on the understanding of the domain. Thus, domain engineering becomes an essential activity. The possibility to have a formal model of a domain, consistent with the use of formal methods for developing critical software working within it, is an important issue. Safety-critical domains, like transportation, exhibit interesting features, such as high levels of nondeterminism, complex interactions, stringent safety properties, and multifaceted timing attributes. The formal representation of these features is a challenging task. We explore the possibility of utilizing Event-B as a domain engineering tool. We discuss the problems we faced during this exercise and how we tackled them. Special attention is devoted to the issue of the\u00a0\u2026", "num_citations": "29\n", "authors": ["1411"]}
{"title": "Integrating formal methods into medical software development: The ASM approach\n", "abstract": " Medical devices are safety-critical systems since their malfunctions can seriously compromise human safety. Correct operation of a medical device depends upon the controlling software, whose development should adhere to certification standards. However, these standards provide general descriptions of common software engineering activities without any indication regarding particular methods and techniques to assure safety and reliability.This paper discusses how to integrate the use of a formal approach into the current normative for the medical software development. The rigorous process is based on the Abstract State Machine (ASM) formal method, its refinement principle, and model analysis approaches the method supports. The hemodialysis machine case study is used to show how the ASM-based design process covers most of the engineering activities required by the related standards, and provides\u00a0\u2026", "num_citations": "23\n", "authors": ["1411"]}
{"title": "Asm2C++: A Tool for Code Generation from Abstract State Machines to Arduino\n", "abstract": " This paper presents Asm2C++, a tool that automatically generates executable C++ code for Arduino from a formal specification given as Abstract State Machines (ASMs). The code generation process follows the model-driven engineering approach, where the code is obtained from a formal abstract model by applying certain transformation rules. The translation process is highly configurable in order to correctly integrate the underlying hardware. The advantage of the Asm2C++ tool is that it is part of the Asmeta framework that allows to analyze, verify, and validate the correctness of a formal model.", "num_citations": "22\n", "authors": ["1411"]}
{"title": "Formal validation and verification of a medical software critical component\n", "abstract": " Medical device software malfunctioning can lead to injuries or death for humans and, therefore, its development should adhere to certification standards. However, these standards establish general guidelines on the use of common software engineering activities without any indication regarding methods and techniques to assure safety and reliability. This paper presents a formal development process, based on the Abstract State Machine method, that integrates most of the activities required by the standards. The process permits to obtain, through a sequence of refinements, more detailed models that can be formally validated and verified. Offline and online testing techniques permit to check the conformance of the implementation w.r.t. the specification. The process is applied to the validation of the SAM medical software, that is used to measure the patients' stereoacuity in the diagnosis of amblyopia.", "num_citations": "21\n", "authors": ["1411"]}
{"title": "Refinement-based validation of Event-B specifications\n", "abstract": " The validation of formal specifications is a challenging task. It is one of the factors that impede the penetration of formal methods into the common practices of software development. This paper discusses the issue of validating formal models by executing them in the context of Event-B. The most important problem lies in the non-determinism which often prevents purely automatic tools to execute models. In this paper, we first present and discuss the techniques we have created to allow the execution of models at all levels of abstraction. These techniques rely on users to overcome the barriers resulting from non-deterministic features by either modifying the model or providing ad hoc implementations. Then, we present our main contribution, the formal definition of the notion of fidelity, that guarantees that all the observable behaviors of the executable models are indeed specified by the original (non\u00a0\u2026", "num_citations": "20\n", "authors": ["1411"]}
{"title": "B \u00e9v\u00e9nementiel pour la mod\u00e9lisation du domaine: application au transport\n", "abstract": " Ce papier rapporte sur l'utilisation de B \u00e9v\u00e9nementiel pour la mod\u00e9lisation du domaine dans le cas particulier des transports. Le d\u00e9veloppement de nouveaux syst\u00e8mes de transports urbains, tels que les v\u00e9hicules autonomes en libre-service, pose des probl\u00e8mes difficiles d'homologation, d'acceptabilit\u00e9, de s\u00e9curisation et de certification. La sp\u00e9cification formelle de ces syst\u00e8mes comme de leur environnement (ou domaine) est incontournable. Nous rapportons les premi\u00e8res observations r\u00e9alis\u00e9es lors de la mod\u00e9lisation d'un domaine complexe en utilisant un langage formel non sp\u00e9cifiquement con\u00e7u pour cet usage. Au del\u00e0 des observations techniques sur l'outillage, Rodin en l'occurrence, nous mettons en \u00e9vidence des points d'ordre m\u00e9thodologique, en particulier la n\u00e9cessite de distinguer la notion de raffinement de celle de niveaux d'observation.", "num_citations": "20\n", "authors": ["1411"]}
{"title": "How to select the suitable formal method for an industrial application: a survey\n", "abstract": " The share of formal methods is still marginal in contemporary systems and software engineering. One of the reasons is the absence of systematic guidelines and evaluation criteria that help software practitioners choose the right formal method for the problem at hand. In this paper, we present a comprehensive set of criteria, based on a systematic literature review and decade-long personal experience in industrial projects, for evaluating and comparing different formal methods. We argue that besides technical grounds (e.g., modeling capabilities and supported development phases), formal methods should also be evaluated from social and industrial perspectives. At the end of the paper, we present an evaluation of \u201cABZ\u201d methods based on the stipulated criteria.", "num_citations": "17\n", "authors": ["1411"]}
{"title": "Improving the understandability of formal specifications: An experience report\n", "abstract": " [Context and motivation] The understandability of formal specifications is often considered as one of the main factors that limit the employment of formal methods in industrial applications. [Question/problem] Two reasons account for this issue: intricate notations and a coarse style of writing specifications. [Principal ideas/results] In this paper, we present our experience of rendering formal specifications understandable yet rigorous. [Contribution] The main contribution of the paper is the proposition of intuitive writing style guidelines, based on the ASM method, that enable formal specifications to become understandable.", "num_citations": "17\n", "authors": ["1411"]}
{"title": "Domain engineering with Event-B: some lessons we learned\n", "abstract": " Well specified requirements are crucial for good software design and domain engineering helps better understanding and specification of requirements. Safety critical domains, such as transportation, exhibit interesting features, such as high levels of non-determinism, complex interactions, stringent safety properties, multifaceted timing attributes, etc. The formal representation of these features is a challenging task. This paper presents our experience of modeling land transportation domain in the formal framework of Event-B. We explore the possibility of using Event-B as a domain engineering tool. We discuss the problems posed by the introduction of time and how we tackle it. We design a technique based on animation to validate domain models.", "num_citations": "16\n", "authors": ["1411"]}
{"title": "Towards validation of requirements models\n", "abstract": " The aim of this paper is to gradually introduce formalism in the requirement engineering phase in order to facilitate its validation. We analyze and elicit our requirements with KAOS, specify them into Event-B language, and then use the animation technique to rigourously validate the derived formal specification and consequently its semi-formal counterpart goal model against original customers' requirements.", "num_citations": "16\n", "authors": ["1411"]}
{"title": "Validation of formal specifications through transformation and animation\n", "abstract": " A significant impediment to the uptake of formal refinement-based methods among practitioners is the challenge of validating that the formal specifications of these methods capture the desired intents. Animation of specifications is widely recognized as an effective way of addressing such validation. However, animation tools are unable to directly execute (and thus animate) the typical uses of several of the specification constructs often found in ideal formal specifications. To address this problem, we have developed transformation heuristics that, starting with an ideal formal specification, guide its conversion into an animatable form. We show several of these heuristics and address the need to prove that the application of these transformations preserves the relevant behavior of the original specification. Portions of several case studies illustrate this approach.", "num_citations": "15\n", "authors": ["1411"]}
{"title": "Design and validation of a C++ code generator from abstract state machines specifications\n", "abstract": " According to best practices of model\u2010driven engineering, the implementation of a system should be obtained from its model through a systematic model\u2010to\u2010code transformation. We present in this paper a methodology supported by the Asm2C++ tool, which allows the users to generate C++ code from abstract state machine models. Thanks to Asm2C++, the implementation is generated in a seamless manner with an assurance of potential bug freeness of the generated code. Following the same approach, model\u2010based testing suggests deriving also (unit) tests from abstract models. We extend the Asm2C++ tool such that it can automatically produce unit tests for the generated code. Abstract test sequences, either generated randomly or through model checking, are translated to concrete C++ unit tests using the Boost library. In a similar manner, also, scenarios are generated in a behavior\u2010driven development (BDD\u00a0\u2026", "num_citations": "14\n", "authors": ["1411"]}
{"title": "Evaluating the suitability of state\u2010based formal methods for industrial deployment\n", "abstract": " After a number of success stories in safety\u2010critical domains, we are starting to witness applications of formal methods in contemporary systems and software engineering. However, one thing that is still missing is the evaluation criteria that help software practitioners choose the right formal method for the problem at hand. In this paper, we present the criteria for evaluating and comparing different formal methods. The criteria were chosen through a literature review, discussions with experts from academia and practitioners from industry, and decade\u2010long personal experience with the application of formal methods in industrial and academic projects. The criteria were then evaluated on several model\u2010oriented state\u2010based formal methods. Our research shows that besides technical grounds (eg, modeling capabilities and supported development phases), formal methods should also be evaluated from social and\u00a0\u2026", "num_citations": "13\n", "authors": ["1411"]}
{"title": "Formal probabilistic analysis of cyber-physical transportation systems\n", "abstract": " Formal specification and verification of cyber-physical transportation systems is inherently a complex task. A fail-safe specification of such systems not only includes intricate formalizations of assumptions and requirements but also a fine-grained analysis of their unpredictable and random components, at times at different levels of abstraction. Traditional techniques of verification and validation, such as simulation or model checking, do not cope very well with the posed challenges. In fact, sometimes it becomes merely impossible to guarantee certain properties, such as liveness, under all possible scenarios. We propose an approach based on higher-order logic for formal modelling and reasoning of cyber-physical transportation systems. In this approach, we express the unpredictable elements of the model by appropriate random variables. Instead of guaranteeing absolute correctness, these randomized\u00a0\u2026", "num_citations": "13\n", "authors": ["1411"]}
{"title": "Guidelines for formal domain modeling in Event-B\n", "abstract": " In this paper, we explore the possibility to use Event-B as a formal domain modeling tool. We identify the areas where domain modelers can struggle and present some guidelines to avoid these pitfalls. We mainly address three questions about domain modeling: what to specify, how to refine, and how to verify. We discuss the strategy to express domain assumptions, protocols, time, and temporal properties. We also analyze the refinement and proof system of Event-B in this realm. We advocate small incremental steps and alternative refinement mechanisms, such as \"observation levels. \" We find animation a very helpful activity to complement the verification process.", "num_citations": "13\n", "authors": ["1411"]}
{"title": "Model-driven development of high-assurance active medical devices\n", "abstract": " Advanced medical devices exploit the advantages of embedded software whose development is subject to compliance with stringent requirements of standardization and certification regimes due to the critical nature of such systems. This paper presents initial results and lessons learned from an ongoing project focusing on the development of a formal model of a subsystem of a software-controlled safety-critical active medical device (AMD) responsible for renal replacement therapy. The use of formal approaches for the development of AMDs is highly recommended by standards and regulations, and motivates the recent advancement of the state of the art of related methods and tools including Event-B and Rodin applied in this paper. It is expected that the presented model development approach and the specification of a high-confidence medical system will contribute to the still sparse experience base\u00a0\u2026", "num_citations": "12\n", "authors": ["1411"]}
{"title": "Incremental construction of realizable choreographies\n", "abstract": " This paper proposes a correct-by-construction method to build realizable choreographies described using conversation protocols (s). We define a new language consisting of an operators set for incremental construction of CPs. We suggest an asynchronous model described with the Event-B method and its refinement strategy, ensuring the scalability of our approach.", "num_citations": "10\n", "authors": ["1411"]}
{"title": "Collaboratively enhanced consistency checking in a cloud-based engineering environment\n", "abstract": " Software systems engineering involves many engineers, often from different engineering disciplines. Efficient collaboration among these engineers is a vital necessity. Tool support for such collaboration is often lacking, especially with regards to consistency between different engineering artifacts (eg, between model and code or requirements and specifications). Current collaboration tools, such as version control systems, are not able to address these cross-artifact consistency concerns. The consequence is unnecessarily complex consistency maintenance during engineering. This paper explores consistent handling of engineering artifacts during collaborative engineering. This work presumes that all engineers collaborate using a joint, cloud-based engineering environment and engineering artifacts are continuously synchronized with this environment. The artifacts can be read and modified by both engineers and\u00a0\u2026", "num_citations": "9\n", "authors": ["1411"]}
{"title": "Live and global consistency checking in a collaborative engineering environment\n", "abstract": " During software and systems engineering, engineers have to rely on different engineering tools in order to capture different kinds of artifacts, such as requirement specifications, design models or code. Even though the artifacts that engineers capture with these tools are interdependent, the tools have limited abilities to detect inconsistencies among them. Today no approach exists that is able to provide live inconsistency feedback of engineering artifacts---captured and maintained in different engineering tools---without disrupting the engineers' workflow. The work presented in this paper introduces a novel approach for live, multi-tool, consistency checking where engineers continue to use their respective tools and receive inconsistency feedback across their tools' artifacts in a live manner. The approach uses a cloud-based engineering platform to replicate the tool's artifacts and to detect inconsistencies there. Within\u00a0\u2026", "num_citations": "9\n", "authors": ["1411"]}
{"title": "Stepwise validation of formal specifications\n", "abstract": " This paper explores the possibility to incorporate validation in the stepwise development process of formal specifications. Formal methods based on refinement break the intractable proof of the correctness of implementation into a sequence of many smaller proofs. Likewise, the validation of the specification could be broken into smaller steps associated to refinements with the technique of animation. Animating an abstract specification often requires to alter it in ways that proof obligations cannot be discharged anymore. So, we have developed a process and a set of transformation rules whose application produces an anima table specification which may be non-provable, but which is assured to have the same behavior. Guaranteeing behavioral preservation requires us to define an ad-hoc relationship between specifications based on a kind of trace semantics. 10 rules have been identified and proven to preserve\u00a0\u2026", "num_citations": "9\n", "authors": ["1411"]}
{"title": "A systematic literature review of the use of formal methods in medical software systems\n", "abstract": " The use of formal methods is often recommended to guarantee the provision of necessary services and to assess the correctness of critical properties, such as functional safety, cybersecurity, and reliability, in medical and health care devices. In the past, several formal and rigorous methods have been proposed and consequently applied for trustworthy development of medical software and systems. In this paper, we perform a systematic literature review on the available state of the art in this domain. We collect the relevant literature on the use of formal methods for modeling, design, development, verification, and validation of software\u2010intensive medical systems. We apply standard systematic literature review techniques and run several queries in well\u2010known repositories to obtain information that can be useful for people who are either already working in this field or planning to start. Our study covers both\u00a0\u2026", "num_citations": "8\n", "authors": ["1411"]}
{"title": "Generation of C++ unit tests from abstract state machines specifications\n", "abstract": " According to best practices of model-driven engineering, the implementation of a system should be obtained from its model through a systematic model-to-code transformation. Following the same approach, model-based testing suggests deriving also (unit) tests from abstract models. Previously, we have presented Asm2C++ - a tool that translates Abstract State Machines (ASMs) to C++ code. In this paper, we extend the Asm2C++ tool such that it can now automatically produce unit tests for the generated code. Abstract test sequences, either generated randomly or through model checking, are translated to concrete C++ unit tests using the BOOST library. We also present some experiments that prove the feasibility of the proposed approach.", "num_citations": "8\n", "authors": ["1411"]}
{"title": "Rigorous modeling and analysis of interoperable medical devices\n", "abstract": " Medical Devices (MDs) are by definition safety-critical and increasingly also become security-critical when interoperating, ie, when communicating in some form. Finding errors, inconsistencies, or vulnerabilities in MDs before deployment can significantly decrease costs, and increase quality and reliability. In this paper, we present a rigorous \u201ccorrect-byconstruction\u201d approach for modeling and analyzing interoperating MDs by considering various abstraction levels, ie, the functional, the safety, and the security level. The approach is illustrated using sample requirements of a hemodialysis device.", "num_citations": "8\n", "authors": ["1411"]}
{"title": "Formal domain engineering: from specification to validation\n", "abstract": " The main theme of this research is to study and develop techniques for modeling of software-controlled safety-critical systems. The area we focus in this thesis is the specification of a domain, where such systems are supposed to operate, and its validation. The contribution of this thesis is twofold: First, we model the land transport domain, a good candidate for this study because of its safety-critical nature, in the formal framework of Event-B and propose some guidelines for it. Second, we present an approach, based on the technique of animation and low-cost transformations, for stepwise validation of formal specifications.", "num_citations": "8\n", "authors": ["1411"]}
{"title": "Observation-level-driven formal modeling\n", "abstract": " Refinement-based formal methods provide a systematic process to develop software that is correct by construction through a gradual enrichment of models. However, their waterfall-like linear sequence of refinements makes it difficult to express properties at the desired level of abstraction without cluttering the models' specification. Consequently, models become difficult to develop, organize and understand. In this paper, we present an approach based on the notion of \"observation levels\" to organize the model development in such a way that facilitates the inclusion of new properties into the model without compromising its understand ability. The approach is demonstrated by its application on two real-life high-assurance case studies.", "num_citations": "7\n", "authors": ["1411"]}
{"title": "Incorporating animation in stepwise development of formal specification\n", "abstract": " This paper explores the possibility to incorporate validation of formal specifications into their step-wise development process. The key idea in formal methods to assess that an implementation is correct is to break the verification into smaller proofs associated with each refinement step. Likewise, the technique of animation could be used with each refinement step to break its validation into smaller assessments. Animating an abstract specification often requires to alter it in ways that proof obligations cannot be discharged anymore. So, we have developed a process and a set of transformation rules whose application produce an animatable specification which may be non-provable, but which is guaranteed to have the same behavior. 10 rules have been identified; they are presented and discussed with a special emphasis on their validity. We relate how step-wise animation is used in two case studies and what we gain from this.", "num_citations": "7\n", "authors": ["1411"]}
{"title": "Ensuring safe and consistent coengineering of cyber\u2010physical production systems: A case study\n", "abstract": " In today's engineering projects, companies continuously have to adapt their systems to changing customers or dynamic market requirements. This requires a flexible, iterative development process in which different parts of the system under construction are built and updated concurrently. However, concurrent engineering becomes quite challenging in domains where different engineering artifacts from different disciplines come into play, such as safety\u2010critical cyber\u2010physical systems, where the involved engineering artifacts are quite heterogeneous in nature. In such systems, it is of utmost importance that different artifacts remain consistent in order to guarantee a correctly functioning end product. In this article, we discuss our experiences (with a leading company working in the areas of production automation and product processing) in maintaining the consistency between electrical models and the corresponding\u00a0\u2026", "num_citations": "6\n", "authors": ["1411"]}
{"title": "Machine learning for software engineering: A systematic mapping\n", "abstract": " Context: The software development industry is rapidly adopting machine learning for transitioning modern day software systems towards highly intelligent and self-learning systems. However, the full potential of machine learning for improving the software engineering life cycle itself is yet to be discovered, i.e., up to what extent machine learning can help reducing the effort/complexity of software engineering and improving the quality of resulting software systems. To date, no comprehensive study exists that explores the current state-of-the-art on the adoption of machine learning across software engineering life cycle stages. Objective: This article addresses the aforementioned problem and aims to present a state-of-the-art on the growing number of uses of machine learning in software engineering. Method: We conduct a systematic mapping study on applications of machine learning to software engineering following the standard guidelines and principles of empirical software engineering. Results: This study introduces a machine learning for software engineering (MLSE) taxonomy classifying the state-of-the-art machine learning techniques according to their applicability to various software engineering life cycle stages. Overall, 227 articles were rigorously selected and analyzed as a result of this study. Conclusion: From the selected articles, we explore a variety of aspects that should be helpful to academics and practitioners alike in understanding the potential of adopting machine learning techniques during software engineering projects.", "num_citations": "6\n", "authors": ["1411"]}
{"title": "Multifaceted consistency checking of collaborative engineering artifacts\n", "abstract": " In modern day engineering projects, different engineers collaborate on creating a vast multitude of different artifacts such as requirements, design specifications and code. While these artifacts are strongly interdependent, they are often treated in isolation and with little regard to their semantical overlappings. Automatic consistency checking approaches between these artifacts are rare and often not feasible. Therefore, artifacts become inconsistent and the consequences are costly errors. This work proposes a multifaceted consistency checking approach for different kinds of engineering artifacts, with the help of a collaborative engineering platform. The proposed approach enables engineers to automatically check the consistency of their individual artifacts against the work results of other engineers, without using different tools than the established ones of their fields and without merging their artifacts with those of\u00a0\u2026", "num_citations": "6\n", "authors": ["1411"]}
{"title": "Investigating model driven architecture\n", "abstract": " would like to thank my supervisor Magnus Eriksson for his help, valuable suggestions and timely advices, which played important role in the fulfillment of this thesis. 2", "num_citations": "6\n", "authors": ["1411"]}
{"title": "Generation of behavior-driven development C++ tests from Abstract State Machine scenarios\n", "abstract": " In this paper, we present the AsmetaVBDD tool that automatically translates the scenarios written in the AValLa language (used by the asmeta validator (AsmetaV)) into Behavior-Driven Development scenarios for C++.", "num_citations": "5\n", "authors": ["1411"]}
{"title": "Unified syntax for abstract state machines\n", "abstract": " The paper presents our efforts in defining UASM, a unified syntax for Abstract State Machines (ASMs), based on the syntaxes of two of the main ASM frameworks, CoreASM and ASMETA, which have been adapted to accept UASM as input syntax of all their validation and verification tools.", "num_citations": "5\n", "authors": ["1411"]}
{"title": "Formal design of scalable conversation protocols using Event\u2010B: Validation, experiments, and benchmarks\n", "abstract": " Contemporary interaction\u2010based complex systems are often built by reusing existing distributed peers, which have to coordinate with each other to fulfill the client, system, and environment requirements. In this paper, we address the design of distributed systems composed of peers (state\u2010transitions systems) communicating through message exchanges. We consider choreographies as the formal model, allowing a developer to describe and specify peers coordination as a set of conversations; ie, all sequences of messages exchanged between the communicating peers. Proceeding this way requires building neither the individual peers nor their composition as they may be obtained by the choreography projection. The correctness of the preservation of such messages exchanges by each peer obtained after projection is a key issue, known as the realizability problem. Checking choreography realizability is\u00a0\u2026", "num_citations": "4\n", "authors": ["1411"]}
{"title": "Validation of transformation from abstract state machine models to C++ code\n", "abstract": " The automatic transformation of models to code is one of the most important cornerstones in the model-driven engineering paradigm. Starting from system models, users are able to automatically generate machine code in a seamless manner with an assurance of potential bug freeness of the generated code. Asm2C++ [4] is the tool that transforms Abstract State Machine models to code. However, no validation activities have been performed in the past to guarantee the correctness of the transformation process. In this paper, we define a mechanism to test the correctness of the model-to-code transformation with respect to two main criteria: syntactical correctness and semantic correctness, which is based on the definition of conformance between the specification and the code. Using this approach, we have devised a process able to test the generated code by reusing unit tests. Coverage measures give a user the\u00a0\u2026", "num_citations": "4\n", "authors": ["1411"]}
{"title": "AsmetaA: animator for abstract state machines\n", "abstract": " In this paper, we present AsmetaA \u00a0\u2013 a graphical animator for Abstract State Machines integrated within the ASMETA framework. The execution of formal specifications through animation provides several advantages, e.g., it provides an immediate feedback about system behavior, it helps understand system evolution, and it increases the overall acceptability of formal methods.", "num_citations": "4\n", "authors": ["1411"]}
{"title": "Conceptual modelling of hybrid systems\n", "abstract": " Complex systems comprising hardware, software, facilities and personnel are gaining more and more importance. Such systems are hybrid, as some components are characterised by continuous behaviour, whereas the behaviour of others is discrete. In this paper we present a concise conceptual model that is capable to capture structure and behaviour of such systems. We show that structural modelling can be based on well-known concepts of the entity-relationship model requiring only some extensions to constraints. We further show that behavioural modelling requires only a careful separation of synchronous and asynchronous interaction and high-level means for the integration of continuous functions. We show that all these concepts can be captured by defining a semantics in hybrid Event-B. The paper illustrates the modelling method by a sophisticated industrial example of a hemodialysis machine.", "num_citations": "4\n", "authors": ["1411"]}
{"title": "Model-driven Engineering of Safety and Security Systems: A Systematic Mapping Study\n", "abstract": " This paper presents a systematic mapping study on the model-driven engineering of safety and security concerns in systems. Integrated modeling and development of both safety and security concerns is an emerging field of research. Our mapping study provides an overview of the current state-of-the-art in this field. Through a rigorous and systematic process, this study carefully selected 95 publications out of 17,927 relevant papers published between 1992 and 2018. This paper then proposes and answers several relevant research questions about frequently used methods, development stages where these concerns are typically investigated in, or application domains. Additionally, we identify the community's preference for publication venues and trends.", "num_citations": "3\n", "authors": ["1411"]}
{"title": "The role of validation in refinement-based formal software development\n", "abstract": " In this chapter, we consider the issue of validation in the context of formal software development. Although validation is a standard practice in all industrial software development processes, this activity is somehow less well addressed within formal methods. As the needs for formal languages, tools and environments are increasing in producing real-life software, the validation issue must be addressed. In this chapter, we discuss what the place of validation within formal methods, what specific issues there are associated with formal methods as far as validation is concerned, and what tools can be used in this regard. We then present a few examples of the usefulness of validation from the case studies we have developed. The chapter is concluded with a few open research problems associated with validation and future work.", "num_citations": "3\n", "authors": ["1411"]}
{"title": "Using probabilistic analysis for the certification of machine control systems\n", "abstract": " Traditional testing techniques often reach their limits when employed for the assessment of critical Machine Control Systems as they contain a large amount of random and unpredictable components. The probabilistic analysis approach can assist in their evaluation by providing a subjective evidence of their safety and reliability. The synergy of probabilistic analysis and expressiveness of higher-order logic theorem proving results into convincing modelling and reasoning of several stringent safety cases that contribute towards the certification of high-assurance systems.", "num_citations": "3\n", "authors": ["1411"]}
{"title": "A synthesis of existing approaches to specify non-functional properties\n", "abstract": " The main objective of this deliverable is to make a synthesis of existing approaches to specify non-functional properties. The term non-functional requirement has been in use for more than 20 years, there is still no consensus in the requirements and software engineering community what non-functional requirements are and how we should elicit, document, and validate them. On the other hand, there is a unanimous consensus that non-functional requirements and properties are important and can be critical for the success of a project.", "num_citations": "3\n", "authors": ["1411"]}
{"title": "Domain Modeling with Event-B: An Experience with Transportation Domain\n", "abstract": " This paper presents preliminary results of utilization of Event-B for domain modeling. The development of new urban transport systems, based on autonomous vehicles, strongly requires the formal description of land transportation domain. Certification, safety, or security, for instance, crucially depend upon formal assessment that systems meet the required properties and constraints of the domain. Though Event-B has not been designed for domain modeling, yet, it was discovered that its notions of events and non determinism are well suited to formalize a domain with many autonomous agents. Refinements and systematically constructed proof obligations work well in this context, but we also need other operations in the modeling process, such as, \"abstraction leaps\" which have been introduced as a part of domain specification.", "num_citations": "3\n", "authors": ["1411"]}
{"title": "Validation obligations: a novel approach to check compliance between requirements and their formal specification\n", "abstract": " Traditionally, practitioners use formal methods predominately for one half of the quality-assurance process: verification (do we build the software right?). The other half \u2013 validation (do we build the right software?) \u2013 has been given comparatively little attention. While verification is the core of refinement-based formal methods, where each new refinement step must preserve all properties of its abstract model, validation is usually postponed until the latest stages of the development, when models can be automatically executed. Thus mistakes in requirements or in their interpretation are caught too late: usually at the end of the development process. In this paper, we present a novel approach to check compliance between requirements and their formal refinement-based specification during the earlier stages of development. Our proposed approach \u2013 \u201cvalidation obligations\u201d \u2013 is based on the simple idea that both\u00a0\u2026", "num_citations": "2\n", "authors": ["1411"]}
{"title": "Do Communities in Developer Interaction Networks align with Subsystem Developer Teams? An Empirical Study of Open Source Systems\n", "abstract": " Studies over the past decade demonstrated that developers contributing to open source software systems tend to self-organize in \"emerging\" communities. This latent community structure has a significant impact on software quality. While several approaches address the analysis of developer interaction networks, the question of whether these emerging communities align with the developer teams working on various subsystems remains unanswered. Work on socio-technical congruence implies that people that work on the same task or artifact need to coordinate and thus communicate, potentially forming stronger interaction ties. Our empirical study of 10 open source projects revealed that developer communities change considerably across a project's lifetime (hence implying that relevant relations between developers change) and that their alignment with subsystem developer teams is mostly low. However, subsystems teams tend to remain more stable. These insights are useful for practitioners and researchers to better understand developer interaction structure of open source systems.", "num_citations": "2\n", "authors": ["1411"]}
{"title": "TaskAllocator: A Recommendation Approach for Role-based Tasks Allocation in Agile Software Development\n", "abstract": " In this paper, we propose a recommendation approach -- TaskAllocator -- in order to predict the assignment of incoming tasks to potential befitting roles. The proposed approach, identifying team roles rather than individual persons, allows project managers to perform better tasks allocation in case the individual developers are over-utilized or moved on to different roles/projects. We evaluated our approach on ten agile case study projects obtained from the Taiga.io repository. In order to determine the TaskAllocator's performance, we have conducted a benchmark study by comparing it with contemporary machine learning models. The applicability of the TaskAllocator was assessed through a plugin that can be integrated with JIRA and provides recommendations about suitable roles whenever a new task is added to the project. Lastly, the source code of the plugin and the dataset employed have been made public.", "num_citations": "2\n", "authors": ["1411"]}
{"title": "Evaluating the alignment of sequence diagrams with system behavior\n", "abstract": " In model-driven engineering, sequence diagrams are commonly used to describe a system\u2019s expected behavior in different scenarios. Indeed, the information flow described in sequence diagrams should actually take place during a real execution of the system in order to ensure its safety, security and correctness. If it does not, this may lead to serious consequences. In this short paper, we present a novel generic approach for addressing this issue by observing the live execution of a system and checking whether the exhibited information flow correctly follows what has been specified in sequence diagrams.", "num_citations": "2\n", "authors": ["1411"]}
{"title": "Towards Optimal Assembly Line Order Sequencing with Reinforcement Learning: A Case Study\n", "abstract": " The new era of Industry 4.0 is leading towards self-learning and adaptable production systems requiring efficient and intelligent decision making. Achieving high production rate in a short span of time, continuous improvement, and better utilization of resources is crucial for such systems. This paper discusses an approach to achieve production optimization by finding optimal sequences of orders, which yield high throughput using reinforcement learning. The feasibility of our approach is evaluated by simulating a plant modelled on a higher level of abstraction taken from a real assembly line. The applicability of the proposed approach is demonstrated in the form of code utilizing the simulation model. The obtained results show promising accuracy of sequences against corresponding throughput during the simulation process.", "num_citations": "2\n", "authors": ["1411"]}
{"title": "Scalable Correct-by-Construction Conversation Protocols with Event-B: Validation, Experiments and Benchmarks\n", "abstract": " In this paper, we address the design of distributed systems composed of peers (state-transitions systems) communicating through message exchanges. We consider choreographies as the ground formal model allowing a developer to describe and specify peers coordination as a set of conversations, i.e., all sequences of messages exchanged between the communicating peers. Proceeding this way does not require building the individual peers, nor their composition; they may be obtained by choreography projection. The correctness of the preservation of such messages exchanges by each peer obtained after projection is a key issue, known as the realizability problem. In our previous work [1], we have proposed a set of composition operators allowing designers to build realizable choreographies that are represented by conversation protocols (CPs). We rely on the correct-by-construction Event-B method to prove\u00a0\u2026", "num_citations": "2\n", "authors": ["1411"]}
{"title": "An Event-B-based approach to hybrid systems engineering and its application to a hemodialysis machine case study\n", "abstract": " Systems engineering concerns the complete process for the development of complex systems comprising hardware, software, facilities and personnel. Such systems are hybrid, as some components are characterized by continuous behavior, whereas the behavior of others is discrete. In this paper we present a concise conceptual model for hybrid systems engineering with semantics grounded in a hybrid extension of Event-B. We show that structural modeling can be based on well-known concepts of the entity-relationship model requiring only some extensions to data types and constraints, while behavioral modeling requires a careful separation of synchronous and asynchronous interaction and high-level means for the integration of continuous functions. On these grounds we address the separation of concerns for continuous and hybrid components. The article uses a sophisticated industrial example of a\u00a0\u2026", "num_citations": "2\n", "authors": ["1411"]}
{"title": "Handling reparation in incremental construction of realizable conversation protocols\n", "abstract": " A main concern, already addressed by the research community, relates to the verification of Conversation Protocol (CP) realizability, which means the existence of a set of peers whose communication behavior is equivalent to a given conversation protocol.", "num_citations": "2\n", "authors": ["1411"]}
{"title": "Analysis of experiences with the engineering of a medical device using state-based formal methods\n", "abstract": " The use of software has become ubiquitous and prevalent in modern medical devices such as hemodialysis machines. Consequently, the failure rate of medical devices due to software faults is also increasing. While next-generation software-intensive medical devices contribute to providing better health care and ease of use, their development is becoming unprecedentedly complex and challenging. The critical nature of this domain - particularly its direct implications on health and safety - requires extraordinary measures to ensure the correct and reliable function of such systems. Formal methods are proven to provide approaches, techniques, and tools for correct engineering of software and systems. However, their use in the contemporary medical software engineering is still marginal. In order to promote the use of (state-based) formal methods and showcase their effectiveness in design and development of\u00a0\u2026", "num_citations": "2\n", "authors": ["1411"]}
{"title": "Formal verification and safety assessment of a hemodialysis machine\n", "abstract": " Given the safety-critical nature of healthcare systems, their rigorous safety assessment, in terms of studying their behavior in the presence of potential faults and how the malfunctioning components cause system failures, is of paramount importance. Traditionally, the safety assessment of a system is done analytically or using simulation based tools. However, the former is prone to human error and the later does not provide a complete analysis, which makes them inappropriate for the safety assessment of healthcare systems. These limitations can be overcome by using formal methods based safety assessment. This paper presents our experience of applying model based safety assessment and system verification tools on a hemodialysis machine. In particular, we use the nuXmv model checker to formally verify a formal model of the given hemodialysis machine. The formal model of the given system is then\u00a0\u2026", "num_citations": "2\n", "authors": ["1411"]}
{"title": "A systematic literature review of the use of formal methods in medical software systems\n", "abstract": " The use of formal methods is often recommended to guarantee the provision of necessary services and to assess the correctness of critical properties, such as functional safety, cybersecurity and reliability, in medical and health-care devices. In the past, several formal and rigorous methods have been proposed and consequently applied for trustworthy development of medical software and systems. In this paper, we perform a systematic literature review on the available state of the art in this domain. We collect the relevant literature on the use of formal methods for modeling, design, development, verification and validation of software-intensive medical systems. We apply standard systematic literature review techniques and run several queries in well-known repositories in order to obtain information that can be useful for people who are either already working in this field or planning to start. Our study covers both quantitative and qualitative aspects of the subject. Copyright c 2017 John Wiley & Sons, Ltd.", "num_citations": "2\n", "authors": ["1411"]}
{"title": "A preliminary systematic literature review of the use of formal methods in medical software systems\n", "abstract": " \" Today we stand on each other's feet.\" Perhaps the central problem we face in all of computer science is how we are to get to the situation where we build on top of the work of others rather than redoing so much of it in a trivially different way. Science is supposed to be cumulative, not almost endless duplication of the same kind of things\".", "num_citations": "2\n", "authors": ["1411"]}
{"title": "Formal Domain Modeling: From Specification to Validation\n", "abstract": " The main theme of this research is to study and develop techniques for the modeling of software controlled safety critical systems. In this work, we formally specify different entities, phenomena and their inter-relationships, and specially non functional properties related to land transportation systems with refinement based approach at domain level.We also introduce a stepwise validation process to maintain seamlessness between environment and its captured models. We apply our results on two safety critical case studies", "num_citations": "2\n", "authors": ["1411"]}
{"title": "Deriving Software Architectures for CRUD Applications: The FPL Tower Interface Case Study\n", "abstract": " The main aim of this paper is to present how to derive logical software architectures for CRUD (Create, Read, Update and Delete) applications using a specific technique called 4SRS. In this technique, a component diagram, which is obtained through transformations of use cases, is used to represent the logical software architecture. To show that the 4SRS technique, which was initially devised for behavior-intensive reactive systems, is also effective and gives seamless results for other software domains, it is being experimented on data processing systems, which typically follow a CRUD pattern. For demonstration purposes, the FPL tower interface system, which is responsible for communication between air traffic control operators and flight data processing system on airports of Portugal, has been used as a case study.", "num_citations": "2\n", "authors": ["1411"]}
{"title": "Validation of Formal Models by Timed Probabilistic Simulation\n", "abstract": " The validation of a formal model consists of checking its conformance with actual requirements. In the context of (Event-) B, some temporal aspects can typically be validated by LTL or CTL model checking, while other properties can be validated via interactive animation or trace replay. In this paper, we present a new simulation-based validation technique for (Event-) B models called SimB. The proposed technique uses annotations to construct simulations, taking probabilistic and real-time aspects of the models into account. In this fashion, statistical properties of a single simulation run or a series of runs can be checked (eg, Monte Carlo estimation or hypothesis tests). SimB complements animation and model checking, and its usability has been assessed via several case studies.", "num_citations": "1\n", "authors": ["1411"]}
{"title": "On the effect of incompleteness to check requirement-to-method traces\n", "abstract": " Requirement-to-method traces reveal the code location (s) where a requirement is implemented. This is helpful to software engineers when they have to perform tasks such as software maintenance or bug fixing. Indeed, being aware of the method (s) that implement a requirement saves engineers' time, as it pinpoints the exact code region that needs to be edited to perform a bug fix or a maintenance task. Engineers produce traces manually as well as automatically. Nevertheless, traces are incomplete. This limits the amount of information that could be used by an automated technique to check further traces. Therefore, since traces are incomplete, we would like to study the effect of incompleteness on the automated assessment of requirement-to-method traces. In this paper, we apply machine learning on either incomplete or complete tracing information and we evaluate the effect of incompleteness on checking\u00a0\u2026", "num_citations": "1\n", "authors": ["1411"]}
{"title": "Instant distribution of consistency-relevant change information in a hierarchical multi-developer engineering environment\n", "abstract": " Engineering artifacts share interdependent properties, which must be kept consistent during the engineering process. Existing works propose the unification of heterogeneous artifacts in a single collaborative engineering environment where artifacts are analysed for consistency. The work presented in this paper expands such environments by adopting hierarchically organized work areas storing artifact changes. Engineers are provided with a unique perspective on their engineering artifacts, which is immediately checked for consistency whenever new changes are made within the hierarchy.", "num_citations": "1\n", "authors": ["1411"]}
{"title": "Security Risk Mitigation of Cyber Physical Systems: A Case Study of a Flight Simulator\n", "abstract": " Avionics has seen a greatest shift in technology over the last two decades. The severity of the consequences resulting from a lack of risk management in avionics can be seen from recent incidents of unmanned aerial vehicles being hacked or in the hacking of vendor-controlled systems installed in commercial aircrafts. Over a million incidents related to security breaches at cyber layer have been recorded over the last decade, among which 350,000 cyber-attacks alone have taken place in the year 2018. Unfortunately, only a limited set of studies have been conducted on security risk management, particularly specific to avionics. In this article, we aim to identify, analyze and mitigate the security risks of 6 Degree of Freedom Flight Simulator. As a result, we identify 8 risks of level 3\u20134 as per the IEC 61508 standard. Further analysis of the identified risks yields in another 34 risks. We then mitigate the severity of\u00a0\u2026", "num_citations": "1\n", "authors": ["1411"]}
{"title": "Database and Expert Systems Applications: DEXA 2019 International Workshops BIOKDD, IWCFS, MLKgraphs and TIR, Linz, Austria, August 26\u201329, 2019, Proceedings\n", "abstract": " This volume constitutes the refereed proceedings of the four workshops held at the 30th International Conference on Database and Expert Systems Applications, DEXA 2019, held in Linz, Austria, in August 2019: The 10th International Workshop on Biological Knowledge Discovery from Data, BIOKDD 2019, the 3rd International Workshop on Cyber-Security and Functional Safety in Cyber-Physical Systems, IWCFS 2019, the 1st International Workshop on Machine Learning and Knowledge Graphs, MLKgraphs2019, and the 16th International Workshop on Technologies for Information Retrieval, TIR 2019. The 26 selected papers discuss a range of topics including: knowledge discovery, biological data, cyber security, cyber-physical system, machine learning, knowledge graphs, information retriever, data base, and artificial intelligent.", "num_citations": "1\n", "authors": ["1411"]}
{"title": "Transformational Heuristics for Animation-Towards Stepwise Validation of Specications\n", "abstract": " In formal methods, a key idea to assess that an implementation is correct is to break its verification into smaller proofs associated with each refinement step. Likewise, the technique of animation could be used during refinement process to break its validation into smaller assessments. Animating an abstract specification often requires to alter it in order to make it animatable. So we design a set of heuristics whose application transforms non-animatable specifications into animatable specifications and then based on these transformational heuristics, we develop a rigorous validation framework for stepwise validation of formal specifications.", "num_citations": "1\n", "authors": ["1411"]}