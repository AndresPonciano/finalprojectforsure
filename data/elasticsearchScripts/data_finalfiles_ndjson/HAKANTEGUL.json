{"title": "Assessing kidney stone composition using smartphone microscopy and deep neural networks\n", "abstract": " Objectives To propose a point\u2010of\u2010care image recognition system for kidney stone composition classification using smartphone microscopy and deep convolutional neural networks.   Materials and methods A total of 37 surgically extracted human kidney stones consisting of calcium oxalate (CaOx), cystine, uric acid (UA) and struvite stones were included in the study. All of the stones were fragmented from percutaneous nephrolithotomy (PCNL). The stones were classified using Fourier transform infrared spectroscopy (FTIR) analysis before obtaining smartphone microscope images. The size of the stones ranged from 5 to 10\u2009mm in diameter. Nurugo 400\u00d7 smartphone microscope (Nurugo, Seoul, Republic of Korea) was functionalized to acquire microscopic images (magnification\u2009=\u200925\u00d7) of dry kidney stones using iPhone 6s+ (Apple, Cupertino, CA, USA). Each kidney stone was imaged in six different locations. In\u00a0\u2026", "num_citations": "0\n", "authors": ["2056"]}
{"title": "Instruction-level Reliability Improvement for Embedded Systems\n", "abstract": " With the increasing number of applications in embedded computing systems, it became indispensable for the system designers to consider multiple objectives including power, performance, and reliability. Among these, reliability is a bigger constraint for safety critical applications. For example, fault tolerance of transportation systems has become very critical with the use of many embedded on-board devices. There are many techniques proposed in the past decade to increase the fault tolerance of such systems. However, many of these techniques come with a significant overhead, which make them infeasible in most of the embedded execution scenarios. Motivated by this observation, our main contribution in this paper is to propose and evaluate an instruction criticality based reliable source code generation algorithm. Specifically, we propose an instruction ranking formula based on our detailed fault injection\u00a0\u2026", "num_citations": "0\n", "authors": ["2056"]}
{"title": "A quantitative study of mutation and fault tolerance of pyro inference programs\n", "abstract": " Probabilistic programming allows users to model complex probability distributions and perform inference on such models. Since probabilistic reasoning and inference is a foundational technology of statistical learning programs, adoption of probabilistic programming systems has been growing in the past few years. Pyro is a commonly used probabilistic programming system written in Python that is based on the PyTorch deep learning framework and has become very popular for machine learning applications. However, since Pyro uses a deep learning framework to sample from distributions, there is a need to evaluate the approximate nature of computations and the resilience of probabilistic programs. Additionally, there is also a significant need to systemically test probabilistic programs to identify major errors. In this thesis, we systemically evaluate, test, and analyze Pyro probabilistic inference functions and programs. Since mutation testing is a well-established approach to test software against fault injections, we apply mutations to Pyro inference functions by using MutPy, a mutation testing tool for Python programs. Specifically, we use three popular inference programs as our testing suite and conduct mutation injection experiments on the Pyro inference library. Next, we analyze the data corruption and the amount of error introduced by mutations on inference programs. We provide a collective study of mutation tolerance of Pyro inference functions and programs where we also analyze mutation operators of MutPy and high-order mutations.", "num_citations": "0\n", "authors": ["2056"]}