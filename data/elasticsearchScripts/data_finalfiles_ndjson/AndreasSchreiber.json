{"title": "The provenance of electronic data\n", "abstract": " It would include details of the processes that produced electronic data as far back as the beginning of time or at least the epoch of provenance awareness.", "num_citations": "297\n", "authors": ["930"]}
{"title": "UNICORE 6\u2014recent and future advancements\n", "abstract": " UNICORE is a European Grid Technology with more than 10\u00a0years of history. Originating from the Supercomputing domain, the latest version UNICORE 6 has turned into a general-purpose Grid technology that follows established standards and offers a rich set of features to its users. The paper starts with an architectural insight into UNICORE 6, highlighting the workflow features, standards and the different clients. Next, the current state of advancement is presented by describing recent developments. The paper closes with an outlook on future planned developments.", "num_citations": "118\n", "authors": ["930"]}
{"title": "Open source software framework for applications in aeronautics and space\n", "abstract": " The DLR developed the open source software framework RCE to support the collaborative and distributed work in the shipyard industry. From a technology side of view a software from the shipbuilding field has many requirements in common with aerospace software projects. Accordingly, RCE has become the basis for further projects within the DLR. Over the last years of usage a subset of frequently used software components could be derived and are provided by the RCE framework. In particular, the workflow engine, allowing the integration of different domain-specific tools from local and remote locations into one overall calculation has become important for various projects. We present RCE and show how its software components are reused in two aerospace applications.", "num_citations": "92\n", "authors": ["930"]}
{"title": "Advances in generalization and decoupling of software parts in a scientific simulation workflow system\n", "abstract": " Scientific simulation workflows today consist of a pool of simulation models of different domains that are linked together. In the past this was often done with highly specific connections between the simulation models, e. g., batch-scripts or use of commercial integrated systems prescribing certain procedures. This strong coupling led to several problems like the non-reusability of a simulation model in other contexts or other software environments. To address this situation a concept called Chameleon was developed to provide a general decoupled approach between the models. The separation of concerns principle was applied to disconnect the models, their data and a underlying simulation framework as clearly as possible. The Chameleon ideas have been realized on top of the integration frameworks ModelCenter and Remote Component Environment. The feasibility and the advantages of this concept will be pointed out in this paper. After discussing our experiences with drawbacks and merits of the currently used commercial framework and the transition to an open-source framework we give an outlook on future topics, which are relevant for a simulation software integration in scientific collaboration on a daily basis.", "num_citations": "32\n", "authors": ["930"]}
{"title": "Provenance implementation in a scientific simulation environment\n", "abstract": " Many of today\u2019s engineering applications for simulations are lacking machanisms to trace the generation of results and the underlying processes. Especially computations conducted in distribued computing environments as Grids are lacking suitable means to keep track of used resources. Trust of engineers in results produced within distribued simulation environments is very limited without this information.               This paper will demonstrate how trust and confidence in simulation results could be achived for engineering applications. It will highlight the backgrounds of the application, of provenance recording, the mapping to the application, and finally the implementation of provenance awareness for the application. Additionally it will present examples of analyzing the information stored to be of further use to the engineer.", "num_citations": "31\n", "authors": ["930"]}
{"title": "Visualizing modules and dependencies of osgi-based applications\n", "abstract": " The architecture of software it not tangible, but in different situations it is preferable to have it tangible. For example, while reviewing it against the intended design, introducing the software to others, or starting to develop on a new part. Basic aspects of a software architecture are the modules the software is constructed of and the dependencies between them. To comprehend these aspects is important especially for software using a technology such as OSGi, which key concept is modularization. In this paper, we describe interactive visualization tools that we developed to comprehend large OSGi-based applications with their modules and dependencies. We applied our solution for OSGi-based applications with hundreds of modules containing multiple submodules each. With the resulting visualizations, we can explore the modularization of the software architecture.", "num_citations": "30\n", "authors": ["930"]}
{"title": "The integrated simulation environment TENT\n", "abstract": " This paper describes recent development efforts on the integrated simulation environment TENT. TENT is a component\u2010based software integration and workflow management system using the capabilities of CORBA and Java. It is used to integrate the applications required to form complex workflows, which are typical of multidisciplinary simulations in engineering, in which different simulation codes have to be coupled. We present our work in integrating TENT with the Globus Toolkit to create a Grid computing environment. The Java Commodity Grid  Toolkit has been especially useful for this work. Copyright \u00a9 2002 John Wiley & Sons, Ltd.", "num_citations": "30\n", "authors": ["930"]}
{"title": "A conversational user interface for software visualization\n", "abstract": " Software visualizations provide many different complex views with different filters and metrics. But often users have a specific question to which they want to have an answer or they need to find the best visualization by themselves and are not aware of other metrics and possibilities of the visualization tool. We propose an interaction with software visualizations based on a conversational interface. The developed tool extracts meta information from natural language sentences and displays the best fitting software visualization by adjusting metrics and filter settings.", "num_citations": "27\n", "authors": ["930"]}
{"title": "Concurrent systems engineering in aerospace: From excel-based to model driven design\n", "abstract": " Concurrent engineering is a modern and very effective discipline of systems engineering. In the European space domain, the European Space Agency is the pioneer in this area and has performed early design studies for 10 years now. The Integrated Design Model (IDM) is still the state of the art in concurrent engineering software environments. It is based on Microsoft Excel, which induces several benefits and drawbacks related to concurrent engineering.  The German Aerospace Center has used the IDM for several design studies and has identified two promising approaches to further increase the effectiveness of the concurrent engineering software environment by using modern model driven software technologies. Both concepts were implemented, and in this paper they are compared to each other and opposed to the IDM.", "num_citations": "25\n", "authors": ["930"]}
{"title": "Requirements for a provenance visualization component\n", "abstract": " The need for interpretation of provenance data increases with the introduction of further provenance related IT-systems. The interpretation of data only becomes intuitively with providing good and efficient visualization possibilities. During the development of general provenance visualization techniques, provenance users are classified into groups regarding their view to provenance information. The end-user requirements are evaluated on an abstract level to have a basis for research. Different intentions of end-users regarding provenance are identified and put into relationship with standard visualization types. Examples for standard visualization types are given and a brief forecast to future achievements is made.", "num_citations": "24\n", "authors": ["930"]}
{"title": "Provenance of software development processes\n", "abstract": " \u201dWhy does the build fail currently?\u201d - This and similar questions arise on a daily basis in software development processes (SDP). There is no easy way to answer these questions, the required information is stored throughout different tools, the version control and continuous integration systems in this example. The tools mainly live in isolated worlds and no direct connection between their data exists. This paper proposes a solution to such problems, based on provenance technologies. After outlining the complexity of a SDP, the questions arising on a daily basis are categorized. Finally an approach to make the SDP provenance-aware is proposed based on PRiME, the Open Provenance Model and a SOA architecture using Neo4j to store the data, Gremlin to query it and REST webservices as connection to the tools.", "num_citations": "23\n", "authors": ["930"]}
{"title": "A python library for provenance recording and querying\n", "abstract": " In many application domains the provenance of data plays an important role. It is often required to get store detailed information of the underlying processes that led to the data (e.g., results of numerical simulations) for the purpose of documentation or checking the process for compliance to applicable regulations. Especially in science and engineering more and more applications are being developed in Python, which is used either for development of the whole application or as a glue language for coordinating codes written in other programming languages. To easily integrate provenance recording into applications developed in Python, a provenance client library with a suitable Python API is useful. In this paper we present such a Python client library for recording and querying provenance information. We show an exemplary application, explain the overall architecture of the library, and give some details\u00a0\u2026", "num_citations": "23\n", "authors": ["930"]}
{"title": "The distributed engineering framework TENT\n", "abstract": " The paper describes TENT, a component-based framework for the integration of technical applications. TENT allows the engineer to design, automate, control, and steer technical workflows interactively. The applications are therefore encapsulated in order to build components which conform to the TENT component architecture. The engineer can combine the components to workflows in a graphical user interface. The framework manages and controls a distributed workflow on arbitrary computing resources within the network. Due to the utilization of CORBA, TENT supports all state-of-the-art programming languages, operating systems, and hardware architectures. It is designed to deal with parallel and sequential programming paradigms, as well as with massive data exchange. TENT is used for workflow integration in several projects, for CFD workflows in turbine engine and aircraft design, in the modeling\u00a0\u2026", "num_citations": "22\n", "authors": ["930"]}
{"title": "DataFinder\u2013a scientific data management solution\n", "abstract": " The data management system DataFinder primarily targets the management of scientific technical data. Data can be attached with individual meta data that is based on a free-definable hierarchical data model to achieve data structuring and ordering. Moreover, the system is able to handle large amounts of data and can be easily integrated in existing working environments.The purpose of this paper is to present the key concepts of the DataFinder as well as current and future usage scenarios. In addition, the paper shows the extension of the existing architecture to integrate the Grid transport protocol GridFTP and the archiving system Tivoli Storage Manager (TSM) which leads in a general Grid-enabled data management application that is capable of handling distributed storage resources and archives.", "num_citations": "20\n", "authors": ["930"]}
{"title": "Interactive visualization of software components with virtual reality headsets\n", "abstract": " In large software projects, it can be hard to understand the actual architecture of the implemented software systems if current design documents are outdated or do not exist at all. For systems based on the OSGi component specification, which are used to build quite large applications with back-end and front-end services, tools for visualizing the actual architecture can help to understand the system. We provide an interactive tool that visualizes OSGi-based systems with their components, packages, services, and dependencies in 3D using Virtual Reality headsets. It uses the metaphor of modular electronic systems. The tool allows software engineers, project managers, or clients to explore the architecture and get a first impression about component sizes and their dependencies.", "num_citations": "19\n", "authors": ["930"]}
{"title": "A problem solving environment for multidisciplinary coupled simulations in computational grids\n", "abstract": " This paper describes a software environment for doing multidisciplinary coupled simulations in computational grids using a combination of various existing software tools.The environment consists of the software integration system TENT for setting up, steering and monitoring the simulation, the code coupling library MpCCI for the numerical coupling of simulation codes, and the MPI implementation MPICH-G2 and the Globus Toolkit for running the coupled codes in distributed environments.", "num_citations": "18\n", "authors": ["930"]}
{"title": "Repoguard: a framework for integration of development tools with source code repositories\n", "abstract": " Today modern software development is not possible without the aid of tools like version control systems, bug tracking systems or instruments that ensure the compliance with code conventions. Unfortunately, all of these tools ldquolive in their own worldrdquo, are only loosely coupled and do not interact with each other. RepoGuard addresses this problem by linking version control systems to other software development tools. It is implemented as an extension to several version control systems and provides interfaces to integrate other tools. The use of RepoGuard allows maximum control and validation of all committed resources before they are permanently stored. Additionally, RepoGuard provides communication channels in order to inform all relevant stakeholders about the failure or success of the process. Overall, RepoGuard provides simple but effective means to guarantee software quality standards in\u00a0\u2026", "num_citations": "17\n", "authors": ["930"]}
{"title": "Techniques for wrapping scientific applications to corba components\n", "abstract": " This paper presents wrapping techniques that we have developed in order to integrate applications into the scientific workflow management system TENT. These techniques take into account the varying degrees of controllability found for each application and utilize various kinds of communication mechanisms between application and the associated wrapper. We also give an outline of the principles of component technology employed in the CORBA based TENT environment. In addition, the means by which applications can be connected through their associated wrappers and TENT components to form distributed workflows are presented. It is demonstrated how TENT provides the user with a homogeneous perspective on scientific workflows running in a distributed environment and how he is enabled to efficiently configure and control these workflows by means of the TENT component model.", "num_citations": "15\n", "authors": ["930"]}
{"title": "Visualizing software architectures in virtual reality with an island metaphor\n", "abstract": " Software architecture is abstract and intangible. Tools for visualizing software architecture can help to comprehend the implemented architecture but they need an effective and feasible visual metaphor, which maps all relevant aspects of a software architecture and fits all types of software. We focus on the visualization of module-based software\u2014such as OSGi, which underlies many large software systems\u2014in virtual reality, since this offers a much higher comprehension potential compared to classical 3D visualizations. Particularly, we present an approach for visualizing OSGi-based software architectures in virtual reality based on an island metaphor. The software modules are visualized as islands on a water surface. The island system is displayed in the confines of a virtual table where users can explore the software visualization on multiple levels of granularity by performing intuitive navigational tasks\u00a0\u2026", "num_citations": "14\n", "authors": ["930"]}
{"title": "Visualization of software architectures in virtual reality and augmented reality\n", "abstract": " Software architecture is abstract and intangible. Tools for visualizing software architecture can help to comprehend the implemented architecture but they need an effective and feasible visual metaphor, which maps all relevant aspects of a software architecture and fits all types of software. We present the visualization of component-based software architectures in Virtual Reality (VR) and Augmented Reality (AR). We describe how to get all relevant data for the visualization by data mining on the whole source tree and on source code level of OSGi-based projects. The data is stored in a graph database for further analysis and visualization. The software visualization uses an island metaphor, which represents every module as a distinct island. The whole island is displayed in the confines of a virtual table, where users can explore the software visualization on multiple levels of granularity by performing navigational\u00a0\u2026", "num_citations": "12\n", "authors": ["930"]}
{"title": "Islandviz: A tool for visualizing modular software systems in virtual reality\n", "abstract": " We propose the tool IslandViz for exploring modular software systems in virtual reality. We use an island metaphor, which represents every module as a distinct island. The resulting island system is displayed in the confines of a virtual table, where users can explore the software visualization on multiple levels of granularity by performing navigational tasks. Our approach allows users to get a first overview about the complexity of an OSGi-based software system by interactively exploring its modules as well as the dependencies between them.", "num_citations": "12\n", "authors": ["930"]}
{"title": "A dynamic data integration approach to build scientific workflow systems\n", "abstract": " The need for collaboration between individual scientific fields increases with the wish for more global engineering optimizations and assessment requirements. Since areas of research become more and more fine-grained domains of there own, it is still very desirable to cooperate with other experts with more chance than ever to gain synergies when science is scattered as today. But this exchange of knowledge comes only into consideration if it can be used in a simple way with at most an moderate initial effort. To this end a framework is developed that lets scientists easily use knowledge of others without the need to understand their work and technology completely. Furthermore a generic common data format based on XML technology is developed for exchanging and storing data between different domain-specific applications. To support all implementers,a twofold abstraction layer was introduced to encapsulate\u00a0\u2026", "num_citations": "12\n", "authors": ["930"]}
{"title": "Java for controlling and configuring a distributed turbine simulation system\n", "abstract": " This paper describes some Java releated aspects of TENT (TEstbed for Numerical Turbine simulation), a system designed for integrating various codes and tools of a Computational Fluid Dynamics (CFD) simulation system. TENT provides a distributed simulation environment for simulation tasks in energy and propulsion technology, and it allows to connect the di erent tools to an application scenario.TENT uses a component architecture inspired mainly by the JavaBeans speci cation. It is based on the Common Object Request Broker Architecture (CORBA, 1]) which is used for the communication of the components in the distributed environment. In this paper we will describe the TENT system architecture, the component architecture, and the application component interface. We also describe the use of Java for controlling the simulation system. This includes a graphical user interface, which is realized using JavaBean components, for con guring the components and running the simulation.", "num_citations": "12\n", "authors": ["930"]}
{"title": "Immersive exploration of osgi-based software systems in virtual reality\n", "abstract": " We present an approach for exploring OSGi-based software systems in virtual reality. We employ an island metaphor, which represents every module as a distinct island. The resulting island system is displayed in the confines of a virtual table, where users can explore the software visualization on multiple levels of granularity by performing intuitive navigational tasks. Our approach allows users to get a first overview about the complexity of an OSGi-based software system by interactively exploring its modules as well as the dependencies between them.", "num_citations": "11\n", "authors": ["930"]}
{"title": "Visualizing provenance using comics\n", "abstract": " Understanding how a piece of data was produced, where it was stored, and by whom it was accessed, is crucial information in many processes. To understand the trace of data, the provenance of that data can be recorded and analyzed. But it is sometimes hard to understand this provenance information, especially for people who are not familiar with software or computer science. To close this gap, we present a visualization technique for data provenance using comics strips. Each strip of the comic represents an activity of the provenance graph, for example, using an app, storing or retrieving data on a cloud service, or generating a diagram. The comic strips are generated automatically using recorded provenance graphs. These provenance comics are intended to enable people to understand the provenance of their data and realize crucial points more easily.", "num_citations": "11\n", "authors": ["930"]}
{"title": "Tracing personal data using comics\n", "abstract": " Personal health data is acquired, processed, stored, and accessed using a variety of different devices, apps, and services. These are often complex and highly connected. Therefore, privacy violations and other use or misuse of the data are hard to detect for many people, because they are not able to understand the trace (i.e., the provenance) of that data. We present a visualization technique for personal health data provenance using comics strips. Each strip of the comic represents a certain activity, such as entering data using an app, storing or retrieving data on a cloud service, or generating a diagram from the data. The comic strips are generated automatically using recorded provenance graphs. The easy-to-understand comics enable all people to realize crucial points regarding their data.", "num_citations": "10\n", "authors": ["930"]}
{"title": "HICFD: highly efficient implementation of CFD codes for HPC Many-Core architectures\n", "abstract": " The objective of the German BMBF research project Highly Efficient Implementation of CFD Codes for HPC Many-Core Architectures (HICFD) is to develop new methods and tools for the analysis and optimization of the performance of parallel computational fluid dynamics (CFD) codes on high performance computer systems with many-core processors. In the work packages of the project it is investigated how the performance of parallel CFD codes written in C can be increased by the optimal use of all parallelism levels. On the highest level Message Passing Interface (MPI) is utilized. Furthermore, on the level of the many-core architecture, highly scaling, hybrid OpenMP/MPI methods are implemented. On the level of the processor cores the parallel Single Instruction Multiple Data (SIMD) units provided by modern CPUs are exploited.", "num_citations": "10\n", "authors": ["930"]}
{"title": "Automation of aircraft pre-design using a versatile data transfer and storage format in a distributed computing environment\n", "abstract": " In the aerospace field one often has to deal with a host of highly specialized software applications that need to be orchestrated into one optimization process to produce e. g., an optimized aircraft model. This optimization process combines engineering knowledge from fields as diverse as aerodynamics, aeroelasticity, engine building, environmental impact assessment, material science and structural issues. For each field of science there are highly performant problem solvers available, but yet they don't share the same data exchange formats. The specialized knowledge in each institution involved in a larger project cannot be leveraged easily by other project partners, thus calling for a software and data integration solution to enable global interconnection of local tools. At the German Aerospace Center (DLR) there have been carried out several projects linked with this challenge. We will present here shortly the\u00a0\u2026", "num_citations": "10\n", "authors": ["930"]}
{"title": "A provenance model for quantified self data\n", "abstract": " Quantified Self became popular in recent years. People are tracking themselves with Wearables, smartphone apps, or desktop applications. They collect, process and store huge amounts of personal data for medical and other reasons. Due to the complexity of different data sources, apps, and cloud services, it is hard to follow the data flow and to have trust in data integrity and safety. We present a solution that helps to get insight in Quantified Self data flows and to answer questions related to data security. We provide a provenance model for Quantified Self data based on the W3C standard PROV. Using that model, developers and users can record provenance of Quantified Self apps and services with a standardized notation. We show the feasibility of the presented provenance model with a small workflow using steps data from Fitbit fitness tracker.", "num_citations": "9\n", "authors": ["930"]}
{"title": "The provenance store proost for the open provenance model\n", "abstract": " This paper presents the provenance storing system prOOst which uses a semi-structured approach to store the provenance data based on the Open Provenance Model (OPM). It uses the graph database \u201cNeo4j\u201d for storage and the graph traversal language \u201cGremlin\u201d for querying. Furthermore, it provides a REST interface to record data into the store, and a web front end to query the database. The prOOst provenance system was published as Open Source software and is available on SourceForge.", "num_citations": "9\n", "authors": ["930"]}
{"title": "RCE: an integration environment for engineering and science\n", "abstract": " Engineering complex systems such as air- and spacecraft is a multidisciplinary effort that requires the collaboration of engineers from a multitude of specializations working in concert. Typically, each engineer uses one or more specialized software tools to analyze some data set and passes, in an ad-hoc manner, the results on to their colleagues who require these results as input for their respective tools. This process is time-consuming, error-prone, and not replicable.To alleviate this problem, we present RCE (Remote Component Environment), an open-source application developed primarily at DLR, that enables its users to intuitively integrate disciplinary tools, to define dependencies between them via an easy-to-use graphical interface, and to execute the resulting multidisciplinary engineering workflow. All data produced are stored centrally for provenance, subsequent analysis, and post-processing. Hence\u00a0\u2026", "num_citations": "8\n", "authors": ["930"]}
{"title": "Speak to your software visualization\u2014exploring component-based software architectures in augmented reality with a conversational interface\n", "abstract": " Exploring of software architectures with software visualization in Augmented Reality (AR) is possible with different interaction methods, such gesture, gaze, and speech. For interaction with speech (i.e., natural language), we present an architecture and an implementation of conversational interfaces for the Microsoft HoloLens device. We aim to remedy some peculiarities of AR devices, but also enhancing the exploration task at hand. To implement the conversational interface different natural language processing (NLP) components such as natural language generation and intent recognition are typically required. Our proposed architecture integrates conversational components with the AR-based software visualization. We describe its implementation based on different user utterances, where the system provides information about the to-be-explored component-based software architecture in the form of adjusted\u00a0\u2026", "num_citations": "8\n", "authors": ["930"]}
{"title": "Adopting conversational interfaces for exploring OSGi-based software architectures in augmented reality\n", "abstract": " We propose conversational interfaces as a convenient and complementary way for users to explore OSGi-based software architectures in immersive Augmented Reality (AR). By providing a conversational interface we aim to remedy some peculiarities of AR devices, but also enhancing the exploration task at hand. We exemplify a use case and sketch how different user utterances can be used to retrieve information about the to-be-explored OSGi-based software architecture. We identify crucial components such as natural language generation and intent recognition which are required to implement the user story and we outline the status of our implementation.", "num_citations": "8\n", "authors": ["930"]}
{"title": "Modelling knowledge about software processes using provenance graphs and its application to git-based version control systems\n", "abstract": " Using the W3C PROV data model, we present a general provenance model for software development processes and---as an example---specialized models for git services, for which we generate provenance graphs. Provenance graphs are knowledge graphs, since they have defined semantics, and can be analyzed with graph algorithms or semantic reasoning to get insights into processes.", "num_citations": "7\n", "authors": ["930"]}
{"title": "Visualization and exploration of deep learning networks in 3d and virtual reality\n", "abstract": " Understanding of artificial intelligence (AI) systems becomes more important as their use cases in real-world applications growth. Today\u2019s AI systems are increasingly complex and ubiquitous. They will be responsible for making decisions that directly affect individuals. Explainable AI can potentially help by explaining actions, decisions and behaviours of AI systems to users. Our approach is to provide a tool with an interactive user interface in 3D. The tool visualizes deep learning network layers and allows interactive exploration on different levels of detail. The visualization then improves transparency and opacity of AI systems for experts and non-experts.", "num_citations": "6\n", "authors": ["930"]}
{"title": "An open source software directory for aeronautics and space\n", "abstract": " In aerospace engineering, as well as in many other disciplines, many software tools are developed. Often, it is hard to get an overview of already existing software. Sometimes this leads to multiple development of software, if nobody is able to determine whether a software for a specific tasks exist already or not. Therefore, in companies and organizations there is a need for a directory of exiting software. The German Aerospace Center has built such a directory based on the Open Source software Allura, which is the base software that drives the Open Source hosting platform SourceForge. net. Allura has been customized to the needs of the aerospace domain. The result is a software portal for the aerospace research community, that allow to register and categorize software. It is intendend to be used both for Open Source and proprietary software. Employees of the German Aerospace Center as well as the public can\u00a0\u2026", "num_citations": "6\n", "authors": ["930"]}
{"title": "A data management system for unicore 6\n", "abstract": " Data produced in scientific and industrial applications is growing exponentially but most resource middleware systems lack of appropriate support for data and metadata management. In particular easy and intuitive retrieval of data for later use is a serious problem.               In this context the paper proposes a pragmatic approach for data management of distributed data with focus on appropriate means for data organization improving data retrieval.               The paper presents the key concepts and architecture of a dedicated data management system for sharing data located on heterogeneous storage resources. The different specifics of storage systems such as data object names, data locations, and data access methods are abstracted to allow transparent data access. Moreover, the system provides means for data structuring and organization by supporting custom data models and annotation of individual\u00a0\u2026", "num_citations": "6\n", "authors": ["930"]}
{"title": "Using visualization of convolutional neural networks in virtual reality for machine learning newcomers\n", "abstract": " Software systems and components are increasingly based on machine learning methods, such as Convolutional Neural Networks (CNNs). Thus, there is a growing need for common programmers and machine learning newcomers to understand the general functioning of these algorithms. However, as neural networks are complex in nature, novel presentation means are required to enable rapid access to the functionality. For that purpose, we examine how CNNs can be visualized in Virtual Reality (VR), as it offers the opportunity to focus users on content through effects such as immersion and presence. With a first exploratory study, we confirmed that our visualization approach is both intuitive to use and conductive to learning. Moreover, users indicated an increased motivation to learning due to the unusual virtual environment. Based on our findings, we propose a follow-up study that specifically compares the\u00a0\u2026", "num_citations": "5\n", "authors": ["930"]}
{"title": "Visualizing and exploring OSGi-based software architectures in augmented reality\n", "abstract": " This demo presents an immersive augmented reality solution for visualizing OSGi-based software architectures. By employing an island metaphor, we map abstract software entities to tangible real-world objects. Using advanced input modalities, such as voice and gesture control, our approach allows for interactive exploration and examination of complex software systems.", "num_citations": "5\n", "authors": ["930"]}
{"title": "AMANDA-A Distributed System for Aircraft Design\n", "abstract": " In the AMANDA project a component-based framework for the integration of coupled technical applications, running distributed in a programs and massive data exchange between the integrated programs. Two pilot applications will be implemented to show the feasibility of the chosen approach: a trimmed, freely flying, elastic airplane and an aircooled turbine. Beside using the integration systems, the MpCCI1 library is used for the coupling of the codes, each simulating single physical processes.", "num_citations": "5\n", "authors": ["930"]}
{"title": "Visualization of software components and dependency graphs in virtual reality\n", "abstract": " We present the visualization of component-based software architectures in Virtual Reality (VR) to understand complex software systems. We describe how to get all relevant data for the visualization by data mining on the whole source tree and on source code level. The data is stored in a graph database for further analysis and visualization. The software visualization uses an island metaphor. Storing the data in a graph database allows to easily query for different aspects of the software architecture.", "num_citations": "4\n", "authors": ["930"]}
{"title": "Visualization of neural networks in virtual reality using Unreal Engine\n", "abstract": " Many applications today use deep learning to provide intelligent behavior. To understand and explain how deep learning models come to certain decisions can be hard or completely in-transparent. We propose a visualization of convolutional neural networks in Virtual Reality (VR). The interactive application shows the internal processes and allows to inspect the results. Large networks can be visualized in real-time with special rendering techniques.", "num_citations": "4\n", "authors": ["930"]}
{"title": "Towards provenance capturing of quantified self data\n", "abstract": " Quantified Self or self-tracking is a growing movement where people are tracking data about themselves. Tracking the provenance of Quantified Self data is hard because usually many different devices, apps, and services are involved. Nevertheless receiving insights how the data has been acquired, how it has been processed, and who has stored and accessed it is crucial for people. We present concepts for tracking provenance in typical Quantified Self workflows. We use a provenance model based on PROV and show its feasibility with an example.", "num_citations": "4\n", "authors": ["930"]}
{"title": "Provenance-based trust for grid computing: Position paper\n", "abstract": " Current evolutions of Internet technology such as Web Services, ebXML, peer-to-peer and Grid computing all point to the development of large-scale open networks of diverse computing systems interacting with one another to perform tasks. Grid systems (and Web Services) are exemplary in this respect and are perhaps some of the first largescale open computing systems to see widespread use-making them an important testing ground for problems in trust management which are likely to arise. From this perspective, today\u2019s grid architectures suffer from limitations, such as lack of a mechanism to trace results and lack of infrastructure to build up trust networks. These are important concerns in open grids, in which \u201ccommunity resources\u201d are owned and managed by multiple stakeholders, and are dynamically organised in virtual organisations. Provenance enables users to trace how a particular result has been arrived at by identifying the individual services and the aggregation of services that produced such a particular output. Against this background, we present a research agenda to design, conceive and implement an industrial-strength open provenance architecture for grid systems. We motivate its use with three complex grid applications, namely aerospace engineering, organ transplant management and bioinformatics. Industrial-strength provenance support includes a scalable and secure architecture, an open proposal for standardising the protocols and data structures, a set of tools for configuring and using the provenance architecture, an open source reference implementation, and a deployment and validation in industrial context. The\u00a0\u2026", "num_citations": "4\n", "authors": ["930"]}
{"title": "Script wrapper for software integration systems\n", "abstract": " This paper describes a flexible way to integrate existing applications and tools into a component-based integration framework which uses CORBA as communication middleware. To integrate an application into this framework it must be encapsulated in order to build components which conform to its component architecture. The new concept described here is based on the scripting language Python which is used to control the execution of the encapsulated application. The CORBA DSI is used to create the application dependent component interface which can be extended by the Python script.", "num_citations": "4\n", "authors": ["930"]}
{"title": "{GitLab2PROV\u2014Provenance} of Software Projects hosted on {GitLab}\n", "abstract": " Assertions about quality, reliability, or trustworthiness of software systems are important for many software applications. In addition to typical quality assurance measures, we extract the provenance of software artifacts from source code repository's\u2014especially git-based repository's. Software repository's contain information about source code changes, the software development processes, and team interactions. We focus on the web-based DevOps life-cycle tool GITLAB, which provides a git-repository manager and other development tools. We propose a provenance model defined using W3C PROV data model and an implementation: GITLAB2PROV.", "num_citations": "3\n", "authors": ["930"]}
{"title": "Scientific developers v/s static analysis tools: vision and position paper\n", "abstract": " Usability and the use of automated static analysis tools in the software development process have been an evolving subject of research in the last decades. Several studies shed light on issues like high false positive rates and low comprehensibility, which hinder tool adoption for even software engineers. Yet, the tools' perceived usefulness and ease of use play a much larger role when it comes to untrained software developers, as is usually the case in scientific software development. In this paper, we outline a multi-stage interview study to learn more about how scientists come to accept and use static analysis tools.", "num_citations": "3\n", "authors": ["930"]}
{"title": "Enabling a conceptual data model and workflow integration environment for concurrent launch vehicle analysis\n", "abstract": " Concurrent Engineering (CE) and Model Based Systems Engineering (MBSE) have increased the efficiency of spacecraft, and satellite design in particular. Early design of satellites in Concurrent Engineering Centers (CEC) has almost become business as usual. However, such progress has still to be achieved for the design of launchers. Applying the same approaches as used for satellites has not led to the same amount of improvement, yet. To address this, DLR initiated the project Concurrent Launch Vehicle Analysis (CLAVA) to investigate the shortcomings and to improve the efficiency of conceptual launcher design and analysis. From an MBSE point of view, investigations show that concurrent modelling requires new Conceptual Data Models. In contrast to designing satellites, they are focused on a much more physical abstraction rather than a functional one. Regarding simulations, it has become clear that the conceptual design phase of launchers requires far more computationally intense simulations in a sequential order. With this knowledge, it is possible to outline a new process for CE studies allowing for concurrent design phases and sequential simulation phases. For this, an adjusted architecture of tools is required as well. The data model used for satellite studies within DLR's Concurrent Engineering Facility (CEF) does not fit to the requirements of launcher design and has been adapted. Additionally, DLR's aeronautics divisions have already made substantial progress in increasing the efficiency of their simulations. They employ automated simulation workflows using a parametric model for information exchange between integrated\u00a0\u2026", "num_citations": "3\n", "authors": ["930"]}
{"title": "Advantages of an integrated simulation environment\n", "abstract": " Numerical simulation software in the  eld of aircraft design can be classi ed as  rst, sec- ond or third generation Multi-Disciplinary Anal- ysis and Optimatzion (MDAO) system. The most challenging task nowadays is to create a third generation MDAO because there are no good-practice rules how to create a useful soft- ware system. The prerequisite for a success- story of such a software is a successful consider- ation of the dependency of simulation scenario (work ow), simulation models and the simula- tion data. Some good-practice rules for de- veloping a third generation MDAO can be ex- tracted from monolithic  rst generation systems regarding this dependency. The still under de- velopment software RCE for CPACS is a system for applied numerical aviation pre-design simu- lations and a technology carrier for evolving a third generation MDAO. The current state of RCE for CPACS regarding the good-practice rules will be outlined. A future state will be sketched considering possible next steps on the way to a successful third generation MDAO.", "num_citations": "3\n", "authors": ["930"]}
{"title": "Using provenance to support good laboratory practice in grid environments\n", "abstract": " Conducting experiments and documenting results is daily business of scientists. Good and traceable documentation enables other scientists to confirm procedures and results for increased credibility. Documentation and scientific conduct are regulated and termed as \u201cgood laboratory practice.\u201d Laboratory notebooks are used to record each step in conducting an experiment and processing data. Originally, these notebooks were paper based. Due to computerised research systems, acquired data became more elaborate, thus increasing the need for electronic notebooks with data storage, computational features and reliable electronic documentation. As a new approach to this, a scientific data management system (DataFinder) is enhanced with features for traceable documentation. Provenance recording is used to meet requirements of traceability, and this information can later be queried for further analysis\u00a0\u2026", "num_citations": "3\n", "authors": ["930"]}
{"title": "Evaluation of aspect-oriented frameworks in Python for extending a project with provenance documentation features\n", "abstract": " In this paper we describe two sides of a real life use case of introducing an aspect-oriented framework into an industrial-grade project. This paper is divided into two parts: the selection process for an AOP framework in the Python programming language, and its use for modularized non-invasive recording of provenance data in a distributed data management tool. Criteria for the choice of such a framework are discussed and the background of provenance documentation is laid out.", "num_citations": "3\n", "authors": ["930"]}
{"title": "Scientific data and knowledge management in aerospace engineering\n", "abstract": " In aerospace engineering, simulation is a key technology. Examples are pre-design studies, optimization, systems simulation, or mission simulations of aircrafts and space vehicles. These kinds of complex simulations need two distinct technologies. First, highly sophisticated simulation codes for each involved discipline (for example, codes for computational fluid dynamics, structural analysis, or flight mechanics) to simulate the various physical effects. Secondly, a simulation infrastructure and well-designed supporting tools to work effectively with all simulation codes. This paper focuses on the infrastructure and the supporting tools, especially for managing both the data resulting from large-scale simulation and the necessary knowledge for conducting complex simulation tasks. Examples of recent developments at the German Aerospace Center in the fields of data and knowledge management to support aerospace\u00a0\u2026", "num_citations": "3\n", "authors": ["930"]}
{"title": "Pinguin in Flugformation\n", "abstract": " Keine andere Wissenschaftsdisziplin besitzt f\u00fcr Laien ein solches Gl\u00e4nzende-Augen-Potenzial wie die Luft- und Raumfahrt. Zwei DLR-Angeh\u00f6rige berichten \u00fcber Str\u00f6mungssimulationen und Satellitensoftware. In einem Kasten beschreibt ein anderer Autor, wie die ESA auf den Nachhall des Big Bang horcht.", "num_citations": "3\n", "authors": ["930"]}
{"title": "Automatic generation of wrapper code and test scripts for problem solving environments\n", "abstract": " Problem Solving Environments are useful tools to support complex simulation tasks in the field of engineering and research (e. g. aerospace, automotive, etc.). The TENT environment represents this type of system, into which external applications are being integrated. In this paper two software engineering issues are addressed, which are dealing with the automation of specific tasks while developing and extending the TENT system.                 First, we will deal with the automatic generation of code for integrating new applications into the system. This is important for reducing the effort of the manual creation of new application components. Code generation is implemented as a plug-in for the open source development platform Eclipse.                 Second, the automatic test case generation and execution for system tests. This feature of test generation is embedded within the TENT graphical user interface. It\u00a0\u2026", "num_citations": "3\n", "authors": ["930"]}
{"title": "Visualization of contributions to open-source projects\n", "abstract": " We analyze visually, to what extend team members and external developers contribute to open-source projects to have a high-level impression about collaboration in that projects. For that, we record the provenance of the development process and draw the resulting property graph. Our graph drawings show, which developers are jointly changed the same files what we apply to Germany's COVID-19 exposure notification app'Corona-Warn-App'.", "num_citations": "2\n", "authors": ["930"]}
{"title": "DLR secure software engineering: position and vision paper\n", "abstract": " DLR as research organization increasingly faces the task to share its self-developed software with partners or publish openly. Hence, it is very important to harden the softwares to avoid opening attack vectors. Especially since DLR software is typically not developed by software engineering or security experts. In this paper we describe the data-oriented approach of our new found secure software engineering group to improve the software development process towards more secure software. Therefore, we have a look at the automated security evaluation of software as well as the possibilities to capture information about the development process. Our aim is to use our information sources to improve software development processes to produce high quality secure software.", "num_citations": "2\n", "authors": ["930"]}
{"title": "Raising awareness about open source licensing at the german aerospace center\n", "abstract": " Using open source software in projects and publishing software under an open source license became common in science and engineering. Scientists and engineers therefore have to know about open source licenses, their requirements and restrictions as well as the resultant license compatibility issues. In most cases, this is not the case. Especially if more than one open source license is involved. At the German Aerospace Center, we developed a comprehensive approach to empower and support our space and aerospace scientists in using and publishing open source software without facing licensing problems. Our bottom up strategy is based on providing hands-on material and training courses first, instead of starting off with \u201cofficial\u201d but impractical process guides. We focus on creating a community between peer scientists using online tools as well as face-to-face workshops, supported by a foundation of\u00a0\u2026", "num_citations": "2\n", "authors": ["930"]}
{"title": "Visualizing the Provenance of Personal Data Using Comics\n", "abstract": " Personal health data is acquired, processed, stored, and accessed using a variety of different devices, applications, and services. These are often complex and highly connected. Therefore, use or misuse of the data is hard to detect for people, if they are not capable to understand the trace (ie, the provenance) of that data. We present a visualization technique for personal health data provenance using comic strips. Each strip of the comic represents a certain activity, such as entering data using a smartphone application, storing or retrieving data on a cloud service, or generating a diagram from the data. The comic strips are generated automatically using recorded provenance graphs. The easy-to-understand comics enable all people to notice crucial points regarding their data such as, for example, privacy violations. View Full-Text", "num_citations": "2\n", "authors": ["930"]}
{"title": "Sharing knowledge about open source licenses at DLR\n", "abstract": " In science, more and more software is published as Open Source software or uses Open Source projects. Therefore, scientists must be aware of requirements, restrictions and compatibility issues of Open Source licenses. We describe our strategy at the German Aerospace Center (DLR) to awake the awareness among our domain scientists and to enable and support them in publishing Open Source software, which is free of license issues. We provide hands-on material, offer training courses, and foster knowledge sharing between peer scientists. Findings and feedback prove the usefulness and effectiveness.", "num_citations": "2\n", "authors": ["930"]}
{"title": "A framework to model metadata for knowledge management tools\n", "abstract": " In recent years many kinds of knowledge management tools are being developed. Most of them have in common that they provide an interface to acquire artifacts along with a certain set of metadata. In this paper, a new framework is presented to model metadata for knowledge management tools and to generate metadata-related program code from this model for different components of the target tool. These components include graphical user interfaces for desktop applications, data base schemes, and metadata-related web client code. Finally, two applications from the knowledge management domain are presented, where this framework is successfully integrated to reduce development time substantially.", "num_citations": "2\n", "authors": ["930"]}
{"title": "Embedding Existing Heterogeneous Monitoring Techniques into a Lightweight, Distributed Integration Platform\n", "abstract": " In the computer aided engineering field high performance computing clusters are essential for today's work. In order to use them efficiently, monitoring systems are required. There are a lot of software systems for different monitoring purposes. The task of managing all of them at the same time usually becomes very complex, because they all have different administration requirements. In order to reduce the complexity and thus increase the manageability of high performance computing clusters for engineering applications, we propose a solution that bundles all monitoring activities into a single monitoring environment based upon an integration platform. As the base of the monitoring environment, the distributed integration platform RCE (Reconfigurable Computing Environment) is chosen. Thereby, many things like distribution or privilege management are already available. As it is a requirement to reuse existing\u00a0\u2026", "num_citations": "2\n", "authors": ["930"]}
{"title": "HICFD\u2013Hocheffiziente Implementierung von CFD-Codes f\u00fcr HPC-Many-Core-Architekturen\n", "abstract": " Bei dem Forschungsprojekt HICFD handelt es sich um ein Verbundprojekt des vom Bundesministerium f\u00fcr Bildung und Forschung gef\u00f6rderten Programms \u201eIKT 2020 \u2013 Forschung und Innovation\u201c. Das Forschungsprojekt hat zum Ziel, neue Methoden und Werkzeuge zur Analyse und Optimierung des Leistungsverm\u00f6gens str\u00f6mungsmechanischer, paralleler Programme auf Hochleistungsrechnern mit Prozessoren mit einer Vielzahl von Kernen zu entwickeln und diese exemplarisch auf die str\u00f6mungsmechanischen Codes TAU und TRACE des Projektpartners DLR anzuwenden. Die wesentlichen Ziele des Projektes werden in dieser Arbeit vorgestellt. Das Leistungsverm\u00f6gen str\u00f6mungsmechanischer, paralleler Programme soll in diesem Projekt durch eine optimale Ausnutzung aller Parallelit\u00e4tsebenen verbessert werden. Auf der obersten Ebene (MPI) soll eine intelligente Gitteraufteilung den Lastausgleich zwischen den MPI-Prozessen verbessern. F\u00fcr blockstrukturierte Gitter soll hier ein Multi-Core-kompatibles Partitionierungswerkzeug entwickelt werden. Auf der Ebene der Multi-Core-Architektur sollen exemplarisch f\u00fcr die beiden Str\u00f6mungsl\u00f6ser TAU und TRACE hochskalierende hybride OpenMP/MPI-Verfahren implementiert werden. Auf Prozessorkern- Ebene soll ein Pr\u00e4prozessor entwickelt werden, der die komfortable Nutzung paralleler SIMD-Einheiten (\u201eSingle Instruction Multiple Data\u201c) auch f\u00fcr komplexe Anwendungen erm\u00f6glicht. Um zu \u00fcberpr\u00fcfen, in welchem Umfang die Anwendung des Pr\u00e4prozessors das Leistungsverm\u00f6gen paralleler Programme beeinflusst, soll die Leistungsanalyse-Software Vampir in Richtung SIMD erweitert\u00a0\u2026", "num_citations": "2\n", "authors": ["930"]}
{"title": "Analyzing Software Engineering Processes with Provenance-based Knowledge Graphs\n", "abstract": " Insights and assessments about the quality, reliability, or trustworthiness of software systems is important for many software applications. Especially for large or mission-critical software systems, reliable measures and assertions are crucial. Since software repositories contain information about source code, software development processes, and team interactions, we extract the provenance of software artifacts from those repositories and store the provenance according to a provenance model defined using W3C PROV data model. We use the recorded provenance to discover insights about the software and its development process, which we apply and evaluate for a large aerospace software system.", "num_citations": "1\n", "authors": ["930"]}
{"title": "Visualization of Component-Based Software Architectures: A Comparative Evaluation of the Usability in Virtual Reality and 2D\n", "abstract": " Software visualization provides a good opportunity to explore complex software architectures. But to reach a high level of usability it is important to evaluate such visualizations properly. We present the results of an usability study that we conducted to compare the visualization of component-based software architectures in both 2D and Virtual Reality (VR), based on different representations. Study participants had to conduct five interactive tasks. The results of our study shows that users are more likely able to complete the tasks in 2D than in VR, that they are more likely able to faster complete the tasks in 2D than in VR, and that they experience more satisfaction while using 2D than VR. Because evaluations of software visualization approaches are still rare, our results might help to create further study designs and offers some advice for the development of future visualizations\u2014especially in VR.", "num_citations": "1\n", "authors": ["930"]}
{"title": "Analytics and insights about cultivating a software engineering community at dlr\n", "abstract": " Software development increasingly became part of the daily work of many researchers in science and engineering. They are faced with software engineering challenges for which they are not trained. In 2005, the German Aerospace Center (DLR) started the \u201cDLR Software Engineering Initiative\u201d to support their researchers addressing these challenges. One of the initiative's core element is to setup and establish an active software engineering community within DLR. Improving the activities of the DLR software engineering initiative is an ongoing challenge. For this purpose, a good understanding of the software engineering community within DLR is required. We present insights about the DLR software engineering community through an analysis of the participation at the annual software engineering knowledge exchange workshops. These workshops can be considered as the annual software engineering\u00a0\u2026", "num_citations": "1\n", "authors": ["930"]}
{"title": "Scientific Developers v/s Static Analysis Tools\n", "abstract": " Usability and the use of automated static analysis tools in the software development process have been an evolving subject of research in the last decades. Several studies shed light on issues like high false positive rates and low comprehensibility, which hinder tool adoption for even software engineers. Yet, the tools\u2019 perceived usefulness and ease of use play a much larger role when it comes to untrained software developers, as is usually the case in scientific software development. In this paper, we outline a multi-stage survey experiment to learn more about how scientists come to accept and use static analysis tools when developing software.", "num_citations": "1\n", "authors": ["930"]}
{"title": "Scientific Software-the role of best practices and recommendations\n", "abstract": " In Geosciences-like in most other communities-scientific work strongly depends on software. For big data analysis, existing (closed or open source) program packages are often mixed with newly developed codes. Different versions of software components and varying configurations can influence the result of data analysis. This often makes reproducibility of results and reuse of codes very difficult. Policies for publication and documentation of used and newly developed software, along with best practices, can help tackle this problem. Within the Helmholtz Association a Task Group\" Access to and Re-use of scientific software\" was implemented by the Open Science Working Group in 2016. The aim of the Task Group is to foster the discussion about scientific software in the Open Science context and to formulate recommendations for the production and publication of scientific software, ensuring open access to it. As a\u00a0\u2026", "num_citations": "1\n", "authors": ["930"]}
{"title": "PyHPC2016: 6th workshop on python for high-performance and scientific computing\n", "abstract": " PyHPC2016: 6th workshop on python for high-performance and scientific computing \u2014 University of Illinois at Urbana-Champaign Skip to main navigation Skip to search Skip to main content University of Illinois at Urbana-Champaign Logo Help & FAQ Home Profiles Research Units Research Output Datasets Activities Press / Media Honors PyHPC2016: 6th workshop on python for high-performance and scientific computing Andreas Schreiber, William Scullin, Bill Spotz, Andy R. Terrel, Achim Basermann, Yung Yu Chen, S. Foley, Cyrus Harrison, Konrad Hinsen, Michael Klemm, Andreas Kloeckner, Maurice Ling, Mike Muller Computer Science Electrical and Computer Engineering Research output: Contribution to journal \u203a Editorial Original language English (US) Article number 7836837 Pages (from-to) v-vi Journal Proceedings of PyHPC 2016: 6th Workshop on Python for High-Performance and Scientific Computing \u2026", "num_citations": "1\n", "authors": ["930"]}
{"title": "Helmholtz Open Science Workshop \u201eZugang zu und Nachnutzung von wissenschaftlicher Software \u201c# hgfos16\n", "abstract": " Der Report des Helmholtz Open Science Workshops \u201eZugang zu und Nachnutzung von wissenschaftlicher Software\u201c #hgfos16 behandelt die Themen Standards und Qualit\u00e4tssicherung; Reproduzierbarkeit; Lizenzierung und weitere rechtliche Aspekte; Zitation und Anerkennung; Sichtbarkeit und Modularit\u00e4t; Gesch\u00e4ftsmodelle; Personal, Ausbildung, Karrierewege. Diese Themen sind eng miteinander verzahnt. F\u00fcr jeden Themenbereich werden jeweils die Relevanz, Fragestellungen, Herausforderungen, m\u00f6gliche L\u00f6sungsans\u00e4tze und Handlungsempfehlungen betrachtet.", "num_citations": "1\n", "authors": ["930"]}
{"title": "Quantified self: Analyzing the big data of our daily life\n", "abstract": " Applications for self tracking that collect, analyze, or publish personal and medical data are getting more popular. This includes either a broad variety of medical and healthcare apps in the fields of telemedicine, remote care, treatment, or interaction with patients, and a huge increasing number of self tracking apps that aims to acquire data form from people\u2019s daily life. The Quantified Self movement goes far beyond collecting or generating medical data. It aims in gathering data of all kinds of activities, habits, or relations that could help to understand and improve one\u2019s behavior, health, or well-being. Both, health apps as well as Quantified Self apps use either just the smartphone as data source (e.g., questionnaires, manual data input, smartphone sensors) or external devices and sensors such as \u2018classical\u2019 medical devices (e.g,. blood pressure meters) or wearable devices (e.g., wristbands or eye glasses). The data can be used to get insights into the medical condition or one\u2019s personal life and behavior. This talk will provide an overview of the various data sources and data formats that are relevant for self tracking as well as strategies and examples for analyzing that data with Python.", "num_citations": "1\n", "authors": ["930"]}
{"title": "Increasing software quality using the provenance of software development processes\n", "abstract": " Today\u2019s software development processes are complex. A lot of interaction occurs between developers, the tools they use, and even automatically between different tools.  Examples of those interactions are entering a new requirement into the bug tracking system, committing new source code to the repository or automatic code style check during a check-in. To trace and understand the full process is hard. To get insight into these processes and to increase the quality of the resulting software release, we record information about the process during run-time. This information is called the Provenance of the process. With Provenance we can analyze and audit the software development process with the goals error detection, quality assurance, process validation, monitoring, statistical analysis, process optimization, or developer rating. For example, we can answer question such as \u201cWhich requirement causes most bugs in release version X?\u201d or \u201cHow many commits did developer Y contribute to release Z?\u201d  The presentation describes the concepts of the Provenance data model and a software infrastructure for recording Provenance of software development processes. We show how the Provenance information helps to increase the quality of software releases and helps to give deep insight into the development process.", "num_citations": "1\n", "authors": ["930"]}
{"title": "Developing Apps for Android and Other Platforms with Kivy and Python\n", "abstract": " Kivy is an open source framework for developing apps for natural user interfaces such as touch screens and multi-touch displays. The Kivy framework is platform independent. Implementations exist for Android, iOS, Linux, Mac OS-X, and Windows. The programming language Python is used to develop apps based on Kivy. Since Kivy sits on top of OpenGL, it is very well suited for graphics applications such as games or information displays. Kivy can be used both to develop prototypes as well as products that are available through the usual app stores. In this talk you will learn all the basics about the Kivy framework including live demonstrations of some Kivy-based apps. We will also show how you can package Kivy-based apps to distribute via app stores. Some examples for real-world apps shows you how we are using Kivy to develop prototypes and products for health, medicine and biology. Of course, you learn about benefits and limitations of using Kivy for app development.", "num_citations": "1\n", "authors": ["930"]}
{"title": "Analysis of Software-Engineering-Processes\n", "abstract": " The German Aerospace Center (DLR) is one of the biggest software development facilities in Germany. Its employees create complex software using various development processes. To assure high software quality, innovative software engineering methods and tools need to be incorporated.  A current problem in the field of computer science is to identify the effectiveness of those methods and tools to ensure quality. An analysis of the incorporated processes is needed to determine which parts support the development and which parts can be improved. For this purpose, a system to record data provenance has been established in the past.  The goal of this thesis is the enhancement of the current analysis of provenance data. The existing model and infrastructure is revised by examining former work at the DLR, developing new questions about the process and analyzing the recorded data.  As a result, this thesis presents an overview of the software development process as a provenance graph. Existing and new questions are implemented in the graph query language Cypher. A compilation of model and recording flaws is exposed and convenient solutions are given.  The outcome of this thesis supports the verification of the development process and gives an overview of the capabilities and problems of the current provenance model. Further development is necessary to expand the expressiveness of the model and to answer more complex questions.", "num_citations": "1\n", "authors": ["930"]}
{"title": "Quantified Self: Self Tracking for Health\n", "abstract": " Self tracking is a trend where individual persons use sensors and mobile apps to collect and visualize personal data. The data is used to monitor or manage personal health. This talk explains motivations for self tracking, available (wearable) sensors and apps, and possible insights by analyzing the personal data.", "num_citations": "1\n", "authors": ["930"]}
{"title": "JavaGAT Adaptor for UNICORE 6\u2013Development and Evaluation in the Project AeroGrid\n", "abstract": " Making applications Grid-aware (or Grid-enabled) requires the knowledge of the API of different Grid middlewares. The complexity of these systems, both in terms of underlying technology and functionality, remains high. Moreover, Grid middlewares like Globus and UNICORE are still undergoing many changes. Grid Application Toolkit (GAT), a high-level API for accessing Grid services, provides application developers with a unified, simple and middleware-independent interface to the Grid.               In this paper, we present a newly developed adaptor for GAT to access UNICORE services. We also describe how the data management client DataFinder has been Grid-enabled with GAT to access remote files and submit computational jobs to the Grid. DataFinder provides primarily an easy-to-use tool for scientific data management in distributed environments. Within the project AeroGrid, a BMBF-funded project\u00a0\u2026", "num_citations": "1\n", "authors": ["930"]}
{"title": "An MpCCI-based Software Integration Environment for Hypersonic Fluid-Structure Problems\n", "abstract": " The paper describes the techniques used for fluid-structure interaction analyses in the project IMENS+ (DLR, TU Braunschweig), with emphasis on the software concept used. The project's aim is the development of an integrated environment for the multidisciplinary design of hot structures, targeting hypersonic aerospace applications.", "num_citations": "1\n", "authors": ["930"]}
{"title": "TENT-Eine Softwareintegrationsumgebung f\u00fcr multidisziplin\u00e4re Simulationen\n", "abstract": " electronic library - TENT - Eine Softwareintegrationsumgebung f\u00fcr multidisziplin\u00e4re Simulationen elib DLR-Header DLR-Logo -> http://www.dlr.de DLR Portal Home | Impressum | Datenschutz | Kontakt | English Schriftgr\u00f6\u00dfe: [-] Text [+] Erweiterte Suche Versenden Drucken TENT - Eine Softwareintegrationsumgebung f\u00fcr multidisziplin\u00e4re Simulationen Kersken, Hans-Peter und Schreiber, Andreas und Heinrich, Ralf und K\u00fcgeler, Edmund und Mack, Andreas und Neumann, Jens und Sch\u00e4fer, Roger (2002) TENT - Eine Softwareintegrationsumgebung f\u00fcr multidisziplin\u00e4re Simulationen. In: Tagungsband Deutscher Luft- und Raumfahrtkongress 2002. Deutscher Luft- und Raumfahrtkongress 2002, 2002-09-26, Stuttgart. Dieses Archiv kann nicht den gesamten Text zur Verf\u00fcgung stellen. elib-URL des Eintrags: https://elib.dlr.de/19269/ Dokumentart: Konferenzbeitrag (Vortrag) Titel: TENT - Eine \u2026", "num_citations": "1\n", "authors": ["930"]}
{"title": "TENT-Eine Integrations-und Testumgebung f\u00fcr Simulation und Visualisierung\n", "abstract": " electronic library - TENT - Eine Integrations- und Testumgebung f\u00fcr Simulation und Visualisierung elib DLR-Header DLR-Logo -> http://www.dlr.de DLR Portal Home | Impressum | Datenschutz | Kontakt | English Schriftgr\u00f6\u00dfe: [-] Text [+] Erweiterte Suche Versenden Drucken TENT - Eine Integrations- und Testumgebung f\u00fcr Simulation und Visualisierung Padur, Volker und Schreiber, Andreas (2001) TENT - Eine Integrations- und Testumgebung f\u00fcr Simulation und Visualisierung. In: 12. M\u00e4rztagung Simulation und Visualisierung 2001, Seiten 140-145. SimVis2001, 2001-03-22 - 2001-03-23, Magdeburg. Dieses Archiv kann nicht den gesamten Text zur Verf\u00fcgung stellen. elib-URL des Eintrags: https://elib.dlr.de/19233/ Dokumentart: Konferenzbeitrag (Vortrag, Paper) Titel: TENT - Eine Integrations- und Testumgebung f\u00fcr Simulation und Visualisierung Autoren: Autoren Institution oder E-Mail-Adresse Autoren-ORCID-iD \u2026", "num_citations": "1\n", "authors": ["930"]}