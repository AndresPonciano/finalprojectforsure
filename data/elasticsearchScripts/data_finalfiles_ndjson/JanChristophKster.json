{"title": "Pattern-based support for context establishment and asset identification of the ISO 27000 in the field of cloud computing\n", "abstract": " The ISO 27000 is a well-established series of information security standards. The scope for applying these standards can be an organisation as a whole, single business processes or even an IT application or IT infrastructure. The context establishment and the asset identification are among the first steps to be performed. The quality of the results produced when performing these steps has a crucial influence on the subsequent steps such as identifying loss, vulnerabilities, possible attacks and defining countermeasures. Thus, a context analysis to gather all necessary information in the initial steps is important, but is not offered in the standard. In this paper, we focus on the scope of cloud computing systems and present a way to support the context establishment and the asset identification described in ISO 27005. A cloud system analysis pattern and different kinds of stakeholder templates serve to understand and\u00a0\u2026", "num_citations": "60\n", "authors": ["1672"]}
{"title": "A pattern-based method for identifying and analyzing laws\n", "abstract": " Nowadays many legislators decided to enact different laws, which all enforce legal and natural persons to deal more carefully with IT systems. Hence, there is a need for techniques to identify and analyze laws which are relevant for an IT system. But identifying relevant compliance regulations for an IT system and aligning it to be compliant is a challenging task. This paper presents a novel method for identifying and analyzing laws. The method makes use of different kinds of law analysis patterns that allow legal experts and software and system developers to understand and elicit relevant laws for the given development problem. Our approach also helps to detect dependent laws. We illustrate our method using an online-banking cloud scenario.", "num_citations": "24\n", "authors": ["1672"]}
{"title": "Supporting the development and documentation of ISO 27001 information security management systems through security requirements engineering approaches\n", "abstract": " Assembling an information security management system according to the ISO 27001 standard is difficult, because the standard provides only sparse support for system development and documentation.             We analyse the ISO 27001 standard to determine what techniques and documentation are necessary and instrumental to develop and document systems according to this standard. Based on these insights, we inspect a number of current security requirements engineering approaches to evaluate whether and to what extent these approaches support ISO 27001 system development and documentation. We re-use a conceptual framework originally developed for comparing security requirements engineering methods to relate important terms, techniques, and documentation artifacts of the security requirements engineering methods to the ISO 27001.", "num_citations": "21\n", "authors": ["1672"]}
{"title": "The ins and outs of first-order runtime verification\n", "abstract": " The main purpose of this paper is to introduce a first-order temporal logic, , and a corresponding monitor construction based on a new type of automaton, called spawning automaton. Specifically, we show that monitoring a specification in  boils down to an undecidable decision problem. The proof of this result revolves around specific ideas on what we consider a \u201cproper\u201d monitor. As these ideas are general, we outline them first in the setting of standard LTL, before lifting them to the setting of first-order logic and . Although due to the above result one cannot hope to obtain a complete monitor for , we prove the soundness of our automata-based construction and give experimental results from an implementation. These seem to substantiate our hypothesis that the automata-based construction leads to efficient runtime monitors whose size does not grow with increasing trace lengths (as is\u00a0\u2026", "num_citations": "16\n", "authors": ["1672"]}
{"title": "Monitoring real android malware\n", "abstract": " In the most comprehensive study on Android attacks so far (undertaken by the Android Malware Genome Project), the behaviour of more than 1,\u00a0200 malwares was analysed and categorised into common, recurring groups of attacks. Based on this work (and the corresponding actual malware files), we present an approach for specifying and identifying these (and similar) attacks using runtime verification.                 While formally, our approach is based on a first-order logic abstraction of malware behaviour, it practically relies on our Android event interception tool, MonitorMe, which lets us capture almost any system event that can be triggered by apps on a user\u2019s Android device.                 This paper details on MonitorMe, our formal specification of malware behaviour and practical experiments, undertaken with various different Android devices and versions on a wide range of actual malware incarnations from\u00a0\u2026", "num_citations": "14\n", "authors": ["1672"]}
{"title": "Platform-Centric Android Monitoring---Modular and Efficient\n", "abstract": " We present an add-on for the Android platform, capable of intercepting nearly all interactions between apps or apps with the platform, including arguments of method invocations in a human-readable format. A preliminary performance evaluation shows that the performance penalty of our solution is roughly comparable with similar tools in that area. The advantage of our solution, however, is that it is truly modular in the sense that we do not actually modify the Android platform itself, and can include it even with an already running system. Possible uses of such an add-on are manifold; we discuss one from the area of runtime verification that aims at improving system security.", "num_citations": "6\n", "authors": ["1672"]}
{"title": "Runtime verification on data-carrying traces\n", "abstract": " Malfunctioning software systems can cause severe loss of money,     sensitive data, or even human life. The ambition is therefore to     verify these systems not only statically, but also monitor their     behaviour at runtime. For the latter case, the temporal logic     LTL---a de facto standard specification formalism in runtime     verification---is widely used and well-understood. However,     propositional variables are usually not a natural nor sufficient     model to represent the behaviour of complex, interactive systems     that can process arbitrary input values. Consequently, there is a     demand for more expressive formalisms that are defined what we     call traces with data, i.e., traces that contain propositions     enriched with values from a (possibly) infinite domain.          This thesis studies the runtime monitoring with data for a     natural extension of LTL that includes first-order     quantification, called LTLFO. The logic's quantifiers range over     values that appear in a trace. Under assumptions laid out of what     should arguably be considered a ``proper'' runtime monitor, this     thesis first identifies and analyses the underlying decision     problems of monitoring properties in LTL and LTLFO. Moreover, it     proposes a monitoring procedure for the latter. A result is that     LTLFO is undecidable, and the prefix problem too, which an online     monitor has to preferably solve to coincide with monotonicity.     Hence, the obtained monitor cannot be complete for LTLFO;     however, this thesis proves the soundness of its construction and     gives experimental results from an implementation, in order to     justify its usefulness and efficiency in practice. The monitor is\u00a0\u2026", "num_citations": "3\n", "authors": ["1672"]}