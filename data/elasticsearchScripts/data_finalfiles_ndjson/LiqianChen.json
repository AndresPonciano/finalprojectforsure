{"title": "Data race detection for interrupt-driven programs via bounded model checking\n", "abstract": " In Cyber-Physical Systems with interrupt mechanism, interrupts may cause unexpected interleaving executions and even wrong execution results. A kind of frequently occurred errors are caused by data race. We present an approach under the framework of bounded model checking (BMC) to detect data race for interrupt driven programs. The key idea is to automatically serialize a concurrent interrupt driven program as a non-deterministic sequential program, whose possible execution set includes all the possible executions of the interrupt driven program. Moreover, our approach checks data race in the sequential program and collects all the path condition of the data race location. On this basis, we leverage bounded model checking to convert all the path conditions into SMT formulae. Furthermore, our analysis uses a decision procedure to determine whether the formula is satisfiable, from which the analysis\u00a0\u2026", "num_citations": "22\n", "authors": ["2112"]}
{"title": "Recent advances on trusted computing in China\n", "abstract": " This article highlights some recent research advances on trusted computing in China, focusing mainly on the methodologies and technologies related to trusted computing module, trusted computing platform, trusted network connection, trusted storage, and trustworthy software.", "num_citations": "8\n", "authors": ["2112"]}
{"title": "Block-wise abstract interpretation by combining abstract domains with smt\n", "abstract": " Statement-wise abstract interpretation that calculates the abstract semantics of a program statement by statement, is scalable but may cause precision loss due to limited local information attached to each statement. While Satisfiability Modulo Theories (SMT) can be used to characterize precisely the semantics of a loop-free program fragment, it is challenging to analyze loops efficiently using plainly SMT formula. In this paper, we propose a block-wise abstract interpretation framework to analyze a program block by block via combining abstract domains with SMT. We first partition a program into blocks, encode the transfer semantics of a block through SMT formula, and at the exit of a block we abstract the SMT formula that encodes the post-state of a block w.r.t. a given pre-state into an abstract element in a chosen abstract domain. We leverage the widening operator of abstract domains to deal with loops\u00a0\u2026", "num_citations": "5\n", "authors": ["2112"]}
{"title": "Simple and precise widenings for H-polyhedra\n", "abstract": " While the definition of the revised widening for polyhedra is defined in terms of inequalities, most implementations use the double description method as a means to an efficient implementation. We show how standard widening can be implemented in a simple and efficient way using a normalized H-representation (constraint-only) which has become popular in recent approximations to polyhedral analysis. We then detail a novel heuristic for this representation that is tuned to capture linear transformations of the state space while ensuring quick convergence for non-linear transformations for which no precise linear invariants exist.", "num_citations": "5\n", "authors": ["2112"]}
{"title": "Static analysis of list-manipulating programs via bit-vectors and numerical abstractions\n", "abstract": " We present an approach under the framework of abstract interpretation to analyze list-manipulating programs by combining shape and numerical abstractions. The analysis automatically divides a list into non-overlapping list segments according to the reachability property of pointer variables to list nodes. The list nodes in each segment are abstracted by a bit-vector wherein each bit corresponds to a pointer variable and indicates whether the nodes can be reached by that pointer variable. Moreover, for each bit-vector, we introduce an auxiliary integer variable, namely a counter variable, to record the number of nodes in the segment abstracted by that bit-vector. On this basis, we leverage the power of numerical abstractions to discover numerical relations among counter variables, so as to infer relational length properties among list segments. Our approach stands out in its ability to find intricate properties that\u00a0\u2026", "num_citations": "4\n", "authors": ["2112"]}
{"title": "An abstract domain to infer symbolic ranges over nonnegative parameters\n", "abstract": " The value range information of program variables is useful in many applications such as compiler optimization and program analysis. In the framework of abstract interpretation, the interval abstract domain infers numerical bounds for each program variable. However, in certain applications such as automatic parallelization, symbolic ranges are often desired. In this paper, we present a new numerical abstract domain, namely the abstract domain of parametric ranges, to infer symbolic ranges over nonnegative parameters for each program variable. The new domain is designed based on the insight that in certain contexts, program procedures often have nonnegative parameters, such as the length of an input list and the size of an input array. The domain of parametric ranges seeks to infer the lower and upper bounds for each program variable where each bound is a linear expression over nonnegative parameters\u00a0\u2026", "num_citations": "3\n", "authors": ["2112"]}
{"title": "Invalid Pointer Dereferences Detection for CPS Software Based on Extended Pointer Structures\n", "abstract": " Invalid pointer dereferences, such as null pointer dereferences, dangling pointer dereferences and double frees, are a prevalent source of software bugs in CPS software, due to flexible dereferencing pointers along various pointer fields. Existing tools have high overhead or are incomplete, thereby limiting their efficiency in checking the kind of CPS software with shared and mutable memory. In this paper, we present a novel extended pointer structure for detecting all invalid pointer dereferences in this kind of CPS software. We propose an invalid pointer dereferences detection algorithm based on the uniform transformation of abstract heap states. Experimental evaluation about a set of large C benchmark programs shows that the proposed approach is sufficiently efficient in detecting invalid pointer dereferences of CPS software with shared and mutable memory.", "num_citations": "3\n", "authors": ["2112"]}
{"title": "Floating-point program analysis based on floating-point powerset of intervals abstract domain\n", "abstract": " The value range of floating-point variables in the program is very important for analyzing properties and finding run-time errors in floating-point programs. The inexactness of floating-point computation makes it challenging to analyze value range of floating-point variables. The theory of abstract interpretation provides a general framework to analyze the value range of program variables. Under this framework, this paper proposes a new numerical abstract domain, namely powerset of intervals abstract domain, which uses disjunctions of finite numbers of intervals to express the value range of a variable. It is more expressive than the classic interval abstract domain, and can infer some non-convex properties that are beyond the ability of most numerical abstract domains. On this basis, this paper gives a sound floating-point implementation for the new domain, and shows how to analyze floating-point programs soundly\u00a0\u2026", "num_citations": "2\n", "authors": ["2112"]}
{"title": "Static analysis of lists by combining shape and numerical abstractions\n", "abstract": " We present an approach in the framework of abstract interpretation to analyze list-manipulating programs by combining shape and numerical abstractions. The analysis automatically divides a list into non-overlapping list segments according to the reachability property of pointer variables to list nodes. The list nodes in each segment are abstracted by a bit-vector wherein each bit corresponds to a pointer variable and indicates whether the nodes can be reached by that pointer variable. Moreover, for each bit-vector, we introduce an auxiliary integer variable, namely a counter variable, to record the number of nodes in the segment abstracted by that bit-vector. On this basis, we leverage the power of numerical abstractions to discover numerical relations among counter variables, so as to infer relational length properties among list segments. Furthermore, we show how our approach works for circular lists. Our\u00a0\u2026", "num_citations": "1\n", "authors": ["2112"]}
{"title": "Modular Heap Abstraction-Based Memory Leak Detection for Heap-Manipulating Programs\n", "abstract": " Heap-manipulating programs allow flexible manipulations over dynamically allocated, shared, and mutable heap cells via pointers that point to not only linked data structures but also their pointer fields. Therefore, memory leak detection for these programs requires precise field-sensitive pointer alias information, which make the problem more challenging. In this paper, we present a field and context sensitive algorithm for detecting memory leaks in heap-manipulating programs. First, we propose a modular heap abstraction based on member-access distances and alias bit-vector domain as the escape model of each procedure, Then, based on procedural summaries characterized by this modular heap abstraction, an efficient context-sensitive memory leak detection is proposed in an on-demand way. Experimental evaluation about a set of large C benchmark programs shows that the proposed approach is scalable\u00a0\u2026", "num_citations": "1\n", "authors": ["2112"]}
{"title": "Modular heap abstraction-based code clone detection for heap-manipulating programs\n", "abstract": " Code clone is a prevalent activity during the development of softwares. However, it is harmful to the maintenance and evolution of softwares. Current techniques for detecting code clones are most syntax-based, and cannot detect all code clones. In this paper, we present a novel semantic-based clone detection technique by obtaining the similarity about the precondition and post condition of each procedure, which are computed by a context and field sensitive fix point iteration algorithm based on modular heap abstraction in heap-manipulating programs. Experimental evaluation about a set of C benchmark programs shows that the proposed approach can be scalable to detect various clones that existing syntax-based clone detectors have missed.", "num_citations": "1\n", "authors": ["2112"]}
{"title": "Quantitative analysis for symbolic heap bounds of CPS software\n", "abstract": " One important quantitative property of CPS (Cyber-Physical Systems) software    is its heap bound for which a precise analysis result needs to combine shape    analysis and numeric reasoning. In this paper, we present a framework for    statically finding symbolic heap bounds of CPS software. The basic idea is to    separate numeric reasoning from shape analysis by first constructing an ASTG    (Abstract State Transition Graph) and then extracting a pure numeric    representation which can be analyzed for the heap bounds. A quantitative    shape analysis method based on symbolic execution is defined in the framework    to generate the ASTG. The numeric representation is extracted based on    program slicing technique and inputted into an abstract interpretation tool    for computing the heap bounds. We take list manipulating programs as an    example to explain how to instantiate the framework for important data    structures and to exhibit its practicability. A novel list abstraction method    is also presented to support the instantiation of the framework.", "num_citations": "1\n", "authors": ["2112"]}