{"title": "Dynamic reprioritization of test cases during test execution\n", "abstract": " Systems and methods are described that dynamically reprioritize test cases for Model-Based Testing (MBT) during test execution. Test case execution is prioritized according to their potential to detect uncovered failures within a design model.", "num_citations": "40\n", "authors": ["2029"]}
{"title": "Supporting concern-based regression testing and prioritization in a model-driven environment\n", "abstract": " Traditional regression testing and prioritization approaches are bottom-up (or white-box). They rely on the analysis of the impact of changes in source code artifacts, identifying corresponding parts of software to retest. While effective in minimizing the amount of testing required to validate code changes, they do not leverage on specification-level design and requirements concerns that motivated these changes. Model-based testing approaches support a top-down (or black box) testing approach, where design and requirements models are used in support of test generation. They augment code-based approaches with the ability to test from a higher-level design and requirements perspective. In this paper, we present a model-based regression testing and prioritization approach that efficiently selects test cases for regression testing based on different concerns. It relies on traceability links between models, test cases\u00a0\u2026", "num_citations": "16\n", "authors": ["2029"]}
{"title": "Peer-to-peer comparison of model-based test tools\n", "abstract": " The aim is to understand the differences between TDE/UML and peer tools available on the market to assess strength and weakness of TDE/UML. Evaluation comparison criteria are modeling, test case generation and extensibility of the model-based testing tools under consideration. The methodology can be adopted using tools other than TDE as a baseline for similar comparisons.", "num_citations": "10\n", "authors": ["2029"]}
{"title": "Automated testing of mechatronic systems\n", "abstract": " An arrangement for providing integrated, model-based testing of industrial systems in the form of a model-based test design module, a test execution engine and an automated test infrastructure (ATI) component. The ATI component includes a keyword processor that interfaces with test commands created by the design module to implement the testing of a specific industrial system. Configuration and deployment information is also automatically created by the design module and used by the ATI component to set up and control the specific industrial system being tested.", "num_citations": "6\n", "authors": ["2029"]}
{"title": "Design principles for integration of model-driven quality assurance tools\n", "abstract": " The engineering of software systems is supported by tools in different phases of the software development. The integration of these tools is crucial to assure the trace ability of existing models and artifacts, and to support the automation of critical software development phases such as software testing and validation. In particular, the integration of novel software quality assurance tools into existing environments must be performed in a way that minimizes its impact on existing software process, while the benefits of the tool are leveraged. This guarantees the adoption of new methodologies with minimal interference in existing production workflow. In this paper we discuss our experience in integrating a model-driven software testing tool developed within SIEMENS with a widely-adopted model-driven design tool. In particular, we establish a set of design principles from the lessons learned in this integration. We\u00a0\u2026", "num_citations": "6\n", "authors": ["2029"]}
{"title": "Industrial requirements to benefit from test automation tools for GUI testing\n", "abstract": " In addition to the growing complexity of software systems, test effort takes increasing amounts of time and correspondingly more money. Testing costs may be reduced without compromising on software quality by minimizing test sets through optimal selection of test cases and introducing more powerful test tools. Attaining high levels of test automation is the objective. There are problems which make the introduction of test automation in industry quite difficult. Solution providers and tool developers often do not understand the requirements in industry for test automation. Otherwise introducing test automation could become counterproductive. This paper points out essential demands on GUI test tools for industrial purpose.", "num_citations": "5\n", "authors": ["2029"]}
{"title": "Guided test case generation through ai enabled output space exploration\n", "abstract": " Black-box software testing is a crucial part of quality assurance for industrial products. To verify the reliable behavior of software intensive systems, testing needs to ensure that the system produces the correct outputs from a variety of inputs. Even more critical, it needs to ensure that unexpected corner cases are tested. Existing approaches attempt to address this problem by the generation of input data to known outputs based on the domain knowledge of an expert. Such input space exploration, however, does not guarantee an adequate coverage of the output space as the test input data generation is done independently of the system output. The paper discusses a novel test case generation approach enabled by neural networks which promises higher probability of exposing system faults by systematically exploring the output space of the system under test. As such, the approach potentially improves the defect\u00a0\u2026", "num_citations": "4\n", "authors": ["2029"]}
{"title": "Software testing, software quality and trust in software-based systems\n", "abstract": " In our daily life we increasingly depend on software-based systems deployed as embedded software control systems in the automotive domain, or the numerous health or government applications. Software-based systems are more and more developed by reusable components available as commercial off-the-shelf components or open source components. The successful introduction of such integrated systems into businesses however does depend whether we trust the system or not. Trust and therewith the quality of software-based systems is determined by many properties such as completeness, consistency, maintainability, security, safety, reliability, and usability, among others. However during the development of software-based systems there are many opportunities to introduce errors in the different phases of the software development lifecycle. Testing is commonly applied as the predominant activity in\u00a0\u2026", "num_citations": "4\n", "authors": ["2029"]}
{"title": "An integrated model-driven approach for mechatronic systems testing\n", "abstract": " Mechatronic systems integrate mechanical, electrical and software subsystems. They are increasingly important in mission-critical infrastructures in different domains including automotive, healthcare, energy and transportation sectors. As such, the adequate testing and validation of such infrastructures are of prime importance. Mechatronic systems testing has been supported by different isolated industrial and research approaches including automated test infrastructures, model-based testing, and test execution engines. While these approaches have individual benefits, they are usually applied in isolation, suffering from different weaknesses. This paper reports on an integrated model-driven approach for mechatronic systems testing, where existing approaches are combined and enhanced. The result is unprecedented levels of automation and testability. We discuss the design and implementation of our approach\u00a0\u2026", "num_citations": "4\n", "authors": ["2029"]}
{"title": "Test Model Abstraction For Testability in Product Line Engineering\n", "abstract": " Product line engineering testing is provided by segmenting a workflow into variable and common activity areas. A workflow decision node can be generated to isolate the segmented variable area, and a stub activity is generated and substituted into the workflow in place of the segmented variable activities. The stub activity can be configured to generate valid output for the substituted variable activities, and can be configured for black-box, gray-box, and white-box behavior.", "num_citations": "3\n", "authors": ["2029"]}
{"title": "Test selection prioritization strategy\n", "abstract": " A wide divergence is observed in projects between test activities planned in the test plan and the actual tests that can be executed. Estimates for test execution computed during the planning are inaccurate without test design. The actual time and resources available are usually less than planned. Assuming that time and resources cannot be changed, a dynamic selection of tests for execution that maximizes quality is required.", "num_citations": "3\n", "authors": ["2029"]}
{"title": "Testbed for Model-based Verification of Cyber-physical Production Systems.\n", "abstract": " Cyber-physical production systems (CPPS) build a network of industrial automation components and systems to enable individualized products at mass production costs. Failures or vulnerabilities in CPPS can be life threatening and can cause physical damage while hiding the effects from monitors. Thus, software verification and validation methods need to analyze the dynamics and behavior of CPPS. In this work, we present a hybrid testbed used in Siemens Corporate Technology. The testbed combines a physical CPPS together with its virtual simulated counterpart, allowing us to verify the system using runtime monitoring, model-based testing, simulation and formal techniques.", "num_citations": "2\n", "authors": ["2029"]}
{"title": "Experiences using Tedeso: an extensible and interoperable model-based testing platform\n", "abstract": " The integration of novel software quality assurance tools into existing development environments must be performed in ways that leverage the benefits of the tools while minimizing their impact on existing software processes. This supports the adoption of new methodologies with minimal interference into core business practices. This paper discusses the design of Tedeso, an extensible and interoperable model-based testing platform developed to facilitate the automatic generation of tests, while supporting the needs of different stakeholders in a diverse and broad organization. We discuss Tedeso key design characteristics, in particular its extensibility and interoperability, provided through the use of a workflow-driven service-oriented architecture, and show how it has enabled and facilitated the adoption of model-based testing techniques in different business units in different sectors within SIEMENS. We\u00a0\u2026", "num_citations": "2\n", "authors": ["2029"]}
{"title": "Guest editors\u2019 introduction to the special section on exploring the boundaries of software test automation\n", "abstract": " This special section includes five papers that are substantially extended and revised versions of the best papers presented at AST 2010. Since the first AST workshop held at ICSE 2006 in Shanghai, China, the research on the automation of software testing has developed significantly. The papers in this special section cover a wide range of topics related to software testing. They clearly reflect this trend of diversity in research on software test automation.Test case generation is still one of the most active research topics in the research on software test automation. Two papers in this special section are devoted to test case generation. The paper by Mike Papadakis and Nicos Malevris entitled Automatically Performing Weak Mutation with the Aid of Symbolic Execution, Concolic and Search Based Testing combines symbolic execution, concolic testing and mutation testing techniques from a search-based approach to\u00a0\u2026", "num_citations": "1\n", "authors": ["2029"]}
{"title": "Scalable V&V Effort Estimation for Ultra-Large-Scale Systems\n", "abstract": " Project planning requires early-on effort estimation. As such, predictions into the future are made with some degree of unavoidable uncertainty. It is likely that some of those predictions will be proven wrong. Thus, solid techniques and concrete procedures are needed to reduce the inaccuracy of estimates. This paper is motivated by practical industrial experiences. It presents a scalable technique that enables scalable effort estimation and is used within an industrial project. The approach determines the critical factors that have to be considered when estimating the V&V effort for systems.", "num_citations": "1\n", "authors": ["2029"]}
{"title": "Test generation using event sequence graphs.\n", "abstract": " Software testing is a widely used method in practice for quality assurance. But the required test inputs are still not systematically generated in an efficient manner, and testing becomes an uncontrollable process and therefore unusable. The reasons are missing models from the design or a present informal specification so that adequate test inputs cannot be derived systematically. This drawback can be solved by the present approach with the help of an graph model called Event Sequence Graph (ESG) which has been introduced by F. Belli. An ESG is a simple albeit powerful formalism for capturing the behavior of a variety of interactive systems that include real-time, embedded systems, and graphical user interfaces. A collection of ESGs is proposed as a model of an interactive system. This collection is used for the generation of tests to check for the correctness of system behavior in the presence of expected and unexpected input event sequences. The proposed test generation algorithm (supported by specifically developed tools) is customizable in the sense that it allows a tester to generate test sequences based on an evaluation of their cost of execution and the benefit derived. Two case studies assess the fault detection effectiveness of the approach considering also statecharts to extend the approach. Moreover, a comprehensive example is to demonstrate the power of ESGs in modeling and risk analysis.", "num_citations": "1\n", "authors": ["2029"]}