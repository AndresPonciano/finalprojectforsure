{"title": "Towards a runtime verification approach for Internet of Things systems\n", "abstract": " Internet of Things systems are evolving at a rapid pace and their impact on our society grows every day. In this context developing IoT systems that are reliable and compliant with the requirements is of paramount importance. Unfortunately, few proposals for assuring the quality of these complex and often safety-critical systems are present in the literature. To this aim, runtime verification can be a valuable support to tackle such a complex task and to complement other software verification techniques based on static analysis and testing. This paper is a first step towards the application of runtime verification to IoT systems. In particular, we describe our approach based on a Prolog monitor, the definition of a formal specification (using trace expressions) describing the expected behaviour of the system, and the definition of appropriate input scenarios. Furthermore, we describe its application and preliminary\u00a0\u2026", "num_citations": "10\n", "authors": ["1283"]}
{"title": "Two experiments for evaluating the impact of Hamcrest and AssertJ on assertion development\n", "abstract": " Test automation enables continuous testing, a cornerstone of agile methods, and DevOps. Assertions play a fundamental role in test automation, and recently competing assertion libraries for unit testing frameworks, such as, for example, JUnit or TestNG, emerged. Thus, it is imperative to gauge assertion libraries in terms of developer/tester productivity, allowing SQA managers and software testers to select the best. The goal of this work is comparing two assertion libraries having a different approach (matchers vs. fluent assertions) w.r.t. two dependent variables: correctness of developed assertions and time to develop them. We conducted two controlled experiments with Bachelor students in Computer Science and Master students in Computer Engineering. AssertJ (fluent assertions approach) is compared with Hamcrest (matchers), in a test development scenario with the Java language where 672 assertions were\u00a0\u2026", "num_citations": "4\n", "authors": ["1283"]}
{"title": "How do implementation bugs affect the results of machine learning algorithms?\n", "abstract": " Applications based on Machine learning (ML) are growing in popularity in a multitude of different contexts such as medicine, bioinformatics, and finance. However, there is a lack of established approaches and strategies able to assure the reliability of this category of software. This has a big impact since nowadays our society relies on (potentially) unreliable applications that could cause, in extreme cases, catastrophic events (eg, loss of life due to a wrong diagnosis of an ML-based cancer classifier).", "num_citations": "3\n", "authors": ["1283"]}
{"title": "Fluent vs basic assertions in Java: an empirical study\n", "abstract": " Context. Tests are becoming more and more central to the development process, so that their comprehensibility is of paramount importance. In particular, assertions, which express the test expected results, must be immediately understandable. Thus, recently several libraries emerged for making assertions \"fluent\", i.e., more comprehensible and easy to develop. However, there is no empirical evidence for the claimed advantages and benefits, that could convince SQA Managers and Testers for their adoption. Objective. The aim of this work is gauging one of the claimed benefits of fluent assertions, namely improvement in comprehensibility, with respect to basic assertions. Method. We conducted a controlled experiment involving 51 Bachelor students. AssertJ - a library supporting fluent assertions - is compared with JUnit Basic assertions, in a test comprehension scenario. We analysed the level of comprehension of\u00a0\u2026", "num_citations": "2\n", "authors": ["1283"]}
{"title": "Reducing Flakiness in End-to-End Test Suites: An Experience Report\n", "abstract": " End-to-end (E2E) testing, a technique employed to assure quality of web applications, is cost-effective only if the test suite is not flaky. Flaky test scripts produce non-deterministic results that undermine testers\u2019 trust and thus the usefulness of the entire test suite.", "num_citations": "1\n", "authors": ["1283"]}
{"title": "An Approach and a Prototype Tool for Generating Executable IoT System Test Cases\n", "abstract": " Internet of Things (IoT) systems are becoming ubiquitous and assuring their quality is of paramount importance, especially in safety-critical contexts. Unfortunately, few quality assurance proposals are present in the literature.               In this paper, we propose an approach for semi-automated model-based generation of executable test cases, oriented to system-level acceptance testing of IoT systems. Our approach is supported by a prototype tool taking in input a UML model of the system under test and some additional artifacts, and produces in output a test suite that checks if the behavior of the system is compliant with such a model.               The empirical evaluation of the approach executed on a mobile health IoT system for diabetic patients \u2013 involving sensors, actuators, a smartphone, and a remote cloud system \u2013 shows that the test suite generated with our tool has been able to kill between 87% and 98\u00a0\u2026", "num_citations": "1\n", "authors": ["1283"]}
{"title": "Hamcrest vs AssertJ: an empirical assessment of tester productivity\n", "abstract": " Context. Extensive unit testing is worth its costs in terms of the higher quality of the final product and reduced development expenses, though it may consume more than fifty percent of the overall project budget. Thus, even a tiny percentage of saving can significantly decrease the costs. Since recently competing assertion libraries emerged, we need empirical evidence to gauge them in terms of developer productivity, allowing SQA Managers and Testers to select the best.               Objective. The aim of this work is comparing two assertion frameworks having a different approach (matchers vs. fluent assertions) w.r.t. tester productivity.               Method. We conducted a controlled experiment involving 41 Bachelor students. AssertJ is compared with Hamcrest, in a test development scenario with the Java language. We analysed the number of correct assertions developed in a tight time frame and used this\u00a0\u2026", "num_citations": "1\n", "authors": ["1283"]}