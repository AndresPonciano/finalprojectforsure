{"title": "Where is current research on blockchain technology?\u2014a systematic review\n", "abstract": " Blockchain is a decentralized transaction and data management technology developed first for Bitcoin cryptocurrency. The interest in Blockchain technology has been increasing since the idea was coined in 2008. The reason for the interest in Blockchain is its central attributes that provide security, anonymity and data integrity without any third party organization in control of the transactions, and therefore it creates interesting research areas, especially from the perspective of technical challenges and limitations. In this research, we have conducted a systematic mapping study with the goal of collecting all relevant research on Blockchain technology. Our objective is to understand the current research topics, challenges and future directions regarding Blockchain technology from the technical perspective. We have extracted 41 primary papers from scientific databases. The results show that focus in over 80% of the papers is on Bitcoin system and less than 20% deals with other Blockchain applications including e.g. smart contracts and licensing. The majority of research is focusing on revealing and improving limitations of Blockchain from privacy and security perspectives, but many of the proposed solutions lack concrete evaluation on their effectiveness. Many other Blockchain scalability related challenges including throughput and latency have been left unstudied. On the basis of this study, recommendations on future research directions are provided for researchers.", "num_citations": "1677\n", "authors": ["1318"]}
{"title": "From platform dominance to weakened ownership: how external regulation changed Finnish e-identification\n", "abstract": " Background There is substantial interest among scholars in digital platforms and the ecosystems around them. Digital platforms are open, continuously evolving, sociotechnical structures that can be sensitive to various changes.   Aim We take one-step further and investigate the post-dominance phase of platforms. The electronic identification (eID) ecosystem in Finland provides a good example of ecosystem transformation due to external changes from EU and national regulation.   Method We engage in an extensive case study of a nation-wide monopolistic eID platform. We first take a retrospective view to understand the historical context and then examine in detail how an external driver leads to changes in the ecosystem.   Results We explicate the platform evolution process, from a phase of dominance with centralized control structures to a more federated governance approach. We find that the introduction of\u00a0\u2026", "num_citations": "15\n", "authors": ["1318"]}
{"title": "Suomi. fi\u2013Towards government 3.0 with a national service platform\n", "abstract": " The KaPa (Kansallinen Palveluarkkitehtuuri, in Finnish) program establishes the national e-government service platform in Finland. The platform, Suomi.fi, provides a one-stop portal for citizens and organizations to access both public and related private sector services. This research reports a case study of the platform by analyzing it in light of recent characteristics identified with the emerging concept of Government 3.0: openness and transparency, sharing, increased communication and collaboration, government re-organization through integration and interoperability, and use of new technologies. Our results contribute by concretizing the hitherto abstract and loosely defined concept of Government 3.0 by describing a timely and complex national e-government implementation in detail in light of such characteristics. Our study also suggests three emergent themes in relation to contemporary Government\u00a0\u2026", "num_citations": "12\n", "authors": ["1318"]}
{"title": "Decision-making framework for refactoring\n", "abstract": " Refactoring has been defined as improving code quality without affecting its functionality. When refactoring is overlooked in daily development, the likelihood of larger refactorings increases with time. Disadvantages of larger refactorings include that they disrupt the daily work, require additional planning effort, and often they need to be justified to stakeholders. In this paper, we investigate with interviews how professionals make refactoring decisions. As a result, we present a framework for decision making for larger refactoring operations describing the key stages in a refactoring workflow. Furthermore, one actual industry case of refactoring decision making is presented in detail.", "num_citations": "10\n", "authors": ["1318"]}
{"title": "Love and hate relationships in a platform ecosystem: a case of finnish electronic identity management\n", "abstract": " There has been a substantial interest among scholars in digital platforms and their governance. This paper proposes a different perspective on the phenomenon, by providing observations on non-focal firms\u2019 dependencies to external platforms. Using the case study results of Finnish firms\u2019 utilization of a monopolistic BankID authentication platform, we describe the platform ecosystem and its transformation on organizational and technology aspects. We show how legislation can transform the roles and relations between ecosystem participants and lead to the longtime dominant legacy platform weakening. Our study extends existing research on platforms and contributes new knowledge about the enforced adoption of the platform by heterogeneous organizations. These findings have important managerial implications, as they inform how non-focal firms can understand the use of existing and coming digital platforms.", "num_citations": "9\n", "authors": ["1318"]}
{"title": "The role of technical debt in software development\n", "abstract": " Technical debt refers to a concept in software development where extra development work arises, through intentional decision or unintentional side-effect, when code that is easy to implement in short-run is used instead of applying the best overall solution. Technical debt is an essential part of software development, which has to be acknowledged by software companies. The goal of this is thesis is to address the role of technical debt in software and software development. Empirical research methodologies are applied in the study. The data has been collected through case studies and semi-structured interviews with practitioners from software development teams. The research process consisted of one preliminary phase and three main phases. In the preliminary phase, the existing literature on technical debt and technical debt management was examined. In the first main phase, the causes and effects of technical debt were studied. The second main phase focused on technical debt management practices. The third main phase aimed at developing and testing technical debt management processes. The results of the study revealed multiple examples indicating that technical debt is a relevant phenomenon in software engineering. Several reasons and causes for technical debt were identified, and the results indicated that there is not one specific reason for companies to have technical debt in software. In addition, several short-term and longterm effects of technical debt, both beneficial and detrimental, were identified. The results were used to develop a technical debt management framework, which describes the activities, practices, tools\u00a0\u2026", "num_citations": "7\n", "authors": ["1318"]}
{"title": "Changes and challenges of technical debt and its management during ongoing digital transformation\n", "abstract": " In this paper, we look how changes and challenges in technical debt and its management that could emerge from the ongoing digital transformation. The digital transformation ensues from companies' opportunities to join various digital ecosystems and use external digital infrastructures to extend business operations and capabilities. Those external infrastructures cannot be controlled by their users, which is interesting especially from the service, systems and software development viewpoint. This will have also impact on technical debt and its management. We outline these changes and challenges with possible scenarios that could occur with technical debt during this change.", "num_citations": "7\n", "authors": ["1318"]}
{"title": "How do practitioners understand external platforms and services? A Grounded Theory investigation\n", "abstract": " In this article, we investigate how practitioners understand external platforms, whose core offering is shared and utilized by a number of heterogeneous and interconnected organizations in an ecosystem. We especially look into situations where organizations wish to extend their own capability instead of building services that extend the functionality of the platform. Such dependencies to external platforms can be envisioned as the contemporary evolution from traditional outsourcing service models. We interviewed twenty-four practitioners from eight IT organizations and discovered a considerable ambiguity in understanding of what are the external platforms utilized by the organizations. We further elaborate that the diversified meanings that various stakeholders give to the concept of external platforms, can hinder efficient communication and may have implications on important strategic decision making.", "num_citations": "3\n", "authors": ["1318"]}
{"title": "Software development methods and quality assurance: Special focus on South Korea\n", "abstract": " South Korea is well-known for big global hardware companies and now software companies are ready to follow. The purpose of this study was to explore software development methods and quality assurance practices used by South Korean software industry. Empirical data was collected by conducting a survey that focused on three main parts: software life cycle models and methods, software quality assurance including quality standards, the strengths and weaknesses of South Korean software industry. The results of the completed survey showed that the use of agile methods is slightly surpassing the use of traditional software development methods. Also the use of so called hybrid methods that include aspects from both development methods is popular. The survey also revealed an interesting result that almost half of the South Korean companies do not use any software quality assurance plan in their\u00a0\u2026", "num_citations": "1\n", "authors": ["1318"]}