{"title": "Postmortem: Never leave a project without it\n", "abstract": " Postmortem analysis (PMA) is a practical method for initiating knowledge management by capturing experience and improvement suggestions from completed projects. It requires little effort and quickly provides initial results, making it suitable even for small- and medium-size projects and companies. The authors describe their experiences with applying PMA techniques for collecting and analyzing experience in software organizations.", "num_citations": "237\n", "authors": ["156"]}
{"title": "A survey of case studies of the use of knowledge management in software engineering\n", "abstract": " This article examines the literature on case studies of knowledge management systems in use in organisations that develop software. We investigate knowledge management approaches in eight case studies, and what the reported benefits are. Surprisingly, very few organisations claim to have lowered software production costs or increased the quality of the software. But many claim to have improved the work situation for software developers and managers.", "num_citations": "176\n", "authors": ["156"]}
{"title": "Postmortem reviews: purpose and approaches in software engineering\n", "abstract": " Conducting postmortems is a simple and practical method for organisational learning. Yet, not many companies have implemented such practices, and in a survey, few expressed satisfaction with how postmortems were conducted. In this article, we discuss the importance of postmortem reviews as a method for knowledge sharing in software projects, and give an overview of known such processes in the field of software engineering. In particular, we present three lightweight methods for conducting postmortems found in the literature, and discuss what criteria companies should use in defining their way of conducting postmortems.", "num_citations": "136\n", "authors": ["156"]}
{"title": "What is large in large-scale? A taxonomy of scale for agile software development\n", "abstract": " Positive experience of agile development methods in smaller projects has created interest in the applicability of such methods in larger scale projects. However, there is a lack of conceptual clarity regarding what large-scale agile software development is. This inhibits effective collaboration and progress in the research area. In this paper, we suggest a taxonomy of scale for agile software development projects that has the potential to clarify what topics researchers are studying and ease discussion of research priorities.", "num_citations": "109\n", "authors": ["156"]}
{"title": "An empirical study of an informal knowledge repository in a medium-sized software consulting company\n", "abstract": " Numerous studies have been conducted on design and architecture of knowledge repositories. This paper addresses the need for looking at practices where knowledge repositories are actually used in concrete work situations. This insight should be used when developing knowledge repositories in the future. Through methods inspired by ethnography this paper investigates how an unstructured knowledge repository is used for different purposes by software developers and managers in a medium-sized software consulting company. The repository is a part of the company's knowledge management tool suite on the Intranet. We found five distinct ways of using the tool, from solving specific technical problems to getting an overview of competence in the company. We highlight the importance of informal organization and the social integration of the tool in the daily work practices of the company.", "num_citations": "83\n", "authors": ["156"]}
{"title": "Knowledge management in medium-sized software consulting companies\n", "abstract": " This thesis investigates how Intranet-based knowledge management tools are used for various strategies in medium-sized software consultancy companies. It consists of three main parts: A survey of empirical work on knowledge management in software engineering, a multicase study of four medium-sized companies, and finally a thorough study on tool usage in two companies.", "num_citations": "75\n", "authors": ["156"]}
{"title": "Extending agile methods: postmortem reviews as extended feedback\n", "abstract": " Agile software development methods, such as Extreme Programming, focus on informal learning mechanisms like pair programming. Yet powerful methods, new knowledge that is gained in a project will not spread rapidly in an organisation if knowledge and experience is not externalised. We propose to combine a lightweight externalisation method: postmortem reviews with agile methods to strengthen the overall learning, and suggest how this can be done. We use practical experience from an Extreme Programming development project, and from conducting postmortem analysis in several companies in our discussion.", "num_citations": "75\n", "authors": ["156"]}
{"title": "Agile development at scale: the next frontier\n", "abstract": " Agile methods have transformed the way software is developed, emphasizing active end-user involvement, tolerance to change, and evolutionary delivery of products. The first special issue on agile development described the methods as focusing on feedback and change.1 These methods have led to major changes in how software is developed. Scrum is now the most common framework for development in most countries, and other methods such as extreme programming (XP), elements of lean software development, and Kanban are widely used. What started as a bottom-up movement among software practitioners and consultants has been taken up by major international consulting companies who prescribe agile development, particularly for contexts where learning and innovation are key. Agile development methods have attracted interest primarily in software engineering1, 2 but also in a number of other\u00a0\u2026", "num_citations": "72\n", "authors": ["156"]}
{"title": "Practical knowledge management tool use in a software consulting company\n", "abstract": " Assessing the contribution of a technical skills management tool for supporting organizational learning.", "num_citations": "54\n", "authors": ["156"]}
{"title": "Experiences with conducting project postmortems: Reports versus stories\n", "abstract": " The most popular unit of work in organizations is a project. Managing knowledge in and about projects is salient for successful project management. In this article, we will discuss how postmortems can be used to capture tacit experiences in projects. Conducting a postmortem, either after a milestone or at the end of a project, is salient in order to gauge what has been learnt, what were the main issues faced, and what can be used to improve the processes of work in the future. The conducting of postmortems aids in articulation of tacit experiences into explicit forms. This enables for experiences to be better re\u2010used in the future. Re\u2010using of postmortem findings depends heavily on the nature of the postmortem outcome. We will compare two kinds of postmortem outcomes\u2014traditional reports and stories. Both types have their pros and cons, and management must choose the right kind of postmortem report to calibrate\u00a0\u2026", "num_citations": "44\n", "authors": ["156"]}
{"title": "Team performance in agile development teams: Findings from 18 focus groups\n", "abstract": " How to make teams perform well is increasingly important in software development, as agile development methods prescribe development in small teams. Team performance has been studied in a number of research fields, and there are many models of what enables team performance. A central question then is how relevant these models are for agile development teams. This article investigates the following research question: What factors do agile software practitioners perceive to influence effective teamwork, through a focus group study with 92 participants in 18 groups. The main findings are that what agile practitioners perceive foster and hinder team performance seems to comply well with what is stated in an existing research-based model. However, agile practitioners seem to place insufficient focus on backup behaviour. Agile practitioners place much emphasis on physical and technical\u00a0\u2026", "num_citations": "41\n", "authors": ["156"]}
{"title": "Skills management as knowledge technology in a software consultancy company\n", "abstract": " This paper presents a skills management system in a medium-sized software consulting company, and how it is used. We found four different types of usage: Searching for competence to solve problems, allocating resources, finding areas for new projects, and to develop competence. Most people in the company seem to regard this tool as useful, both for themselves, and for the company as a whole.", "num_citations": "40\n", "authors": ["156"]}
{"title": "Software experience bases: a consolidated evaluation and status report\n", "abstract": " The paper studies the potential success of using software experience bases for organizational learning. First, a survey of some previous efforts in the area is presented, together with experiences from related fields. The NASA-SEL Experience Factory will be especially commented. We note, that, modern network technologies like the Web provide new possibilities for distributed storage, access and dissemination of relevant knowledge. However, the main problem lies in internalizing formal knowledge (learning), not in externalizing experiences (model building). Then we present an empirical study of four software experience bases in the Norwegian SPIQ project for software process improvement, done in 1997-99. The SPIQ project proposes a pragmatical, overall method for how to plan, establish, use and evaluate software experience bases. The actual hypotheses and research method are presented\u00a0\u2026", "num_citations": "36\n", "authors": ["156"]}
{"title": "Experiences with conducting project postmortems: Reports vs. Stories and practitioner perspective\n", "abstract": " The most popular unit of work in organizations is a project. Managing knowledge in and about projects is salient for successful project management. Explicit knowledge is easier to manage than tacit knowledge as it is an outcome of work. Tacit knowledge is abstract and is managed in a cursory mode in projects. In this paper, we will discuss how postmortems can be used to capture tacit experiences in projects. Conducting a postmortem, either after a milestone or at the end of a project, is salient in order to gauge what has been learnt, what were the main issues faced, and what can be used to improve the processes of work in the future. The conducting of postmortems aids in articulation of tacit experiences into explicit forms, this enables for experiences to be better re-used in the future. Re-using of postmortem findings depends heavily on the nature of the postmortem outcome. We will compare two kinds of\u00a0\u2026", "num_citations": "33\n", "authors": ["156"]}
{"title": "An evaluation of research on experience factory\n", "abstract": " This paper examines the literature on reuse of experiences in software organisations in the form of experience factories. We examine case studies reported from different organisations, see what claims have been made on the fitness of an experience factory, and evaluate the scientific method used to validate the claims. We conclude that there is a great interest in developing technology to support experience reuse, but empirical analysis of how experience sharing actually works is lacking.", "num_citations": "33\n", "authors": ["156"]}
{"title": "Knowledge management in medium-sized software consulting companies: An investigation of intranet-based knowledge management tools for knowledge cartography and knowledge\u00a0\u2026\n", "abstract": " Companies that develop software have a pressure from customers to deliver better solutions, and to deliver solutions faster and cheaper. Many researchers have worked with suggestions on how to improve the development process; software process improvement. As software development is a very knowledge intensive task, both researchers and industry have recently turned their attention to knowledge management as a means to improve software development. This often involves developing technical tools, which many companies have spent resources on. But the tools are often not used in practise by developers and managers in the companies, and it is often unknown if the tools improve how knowledge is managed. In order to build efficient knowledge management tools, we need a better understanding of how the tools that exist are applied and used in software development. We present and analyse eight case studies of knowledge management initiatives from the literature. We found evidence of improved software quality, reduced development costs and evidence of a better working environment for developers as a result of these initiatives. Further, we examine success criteria in knowledge management codification initiatives, based on Intranet tools in medium-sized software companies. In addition, we investigate how knowledge management tools are used for different purposes by different groups of users in two software consulting companies. They use tools both as support for personalization and codification strategies. The consulting companies are two medium-sized Norwegian companies with 40 and 150 employees, which work in\u00a0\u2026", "num_citations": "25\n", "authors": ["156"]}
{"title": "Introduction to software architecture and knowledge management\n", "abstract": " Designing the global structure of a software intensive system \u2013 the software architecture \u2013 is a knowledge-intensive process. The knowledge produced and consumed during this process is broad and complex, and needs to be shared and reused among different stakeholders, and across different life-cycle phases. Managing architectural knowledge is the topic of this book. This introductory chapter discusses the two fields that form the underlying basis for the topic of this book: software architecture, and knowledge management.", "num_citations": "22\n", "authors": ["156"]}
{"title": "Agile transformation: a summary and research agenda from the first international workshop\n", "abstract": " Organisations are up-scaling their use of agile. Agile ways of working are used in larger projects and also in organisational units outside IT. This paper reports on the results of the first international workshop on agile transformation, which aimed to focus research on practice in a field which currently receives great attention. We report on participants\u2019 definitions of agile transformation, summaries of experiences from such transformations, and the challenges that require research attention.", "num_citations": "19\n", "authors": ["156"]}
{"title": "Teamwork quality and team performance: Exploring differences between small and large agile projects\n", "abstract": " Agile principles were originally developed for small projects but are now widely used in larger projects with hundreds of developers. Teamwork quality is essential in any development work, but how does teamwork quality differ in small and large agile projects? We report from an explorative survey with 64 agile teams and 320 team members and team leaders, from 31 teams in small projects and 33 teams in large projects. For small projects, teamwork quality was considered by both team members and team leaders to primarily affect product quality. For large projects, the effect of teamwork quality on product quality was positive when it was rated by team members but was negative when rated by team leaders. At a finer granularity, the six dimensions of teamwork quality that we investigated affected team performance differently in small and large projects. These findings question to what extent findings from previous studies on teamwork in agile development in small projects apply to large projects.", "num_citations": "17\n", "authors": ["156"]}
{"title": "Teaching software process improvement through a case study\n", "abstract": " This article describes the main design choices of a software process improvement course. The course is organized around an industrial case study, and is based on lectures and group exercises. The case study is centered around four questions: Why is process improvement important? Which processes does the company have? Which improvement initiatives does the company implement? Which relationships exist between software improvement and software quality? The article describes experiences with this course organization, and provides suggestions for improvements. \u00a9 2000 John Wiley & Sons, Inc. Comput Appl Eng Educ 8: 229\u2013234, 2000", "num_citations": "16\n", "authors": ["156"]}
{"title": "Learning in the large-an exploratory study of retrospectives in large-scale agile development\n", "abstract": " Many see retrospectives as the most important practice of agile software development. Previous studies of retrospectives have focused on process and outcome at team level. In this article, we study how a large-scale agile development project uses retrospectives through an analysis of retrospective reports identifying a total of 109 issues and 36 action items as a part of a longitudinal case study. We find that most of the issues identified relate to team-level learning and improvement, and discuss these findings in relation to current advice to improve learning outcome in large-scale agile development.", "num_citations": "12\n", "authors": ["156"]}
{"title": "Usage of intranet tools for knowledge management in a medium-sized software consulting company\n", "abstract": " Many software companies have invested in or developed knowledge management tools. This chapter examines intranet-based knowledge management tools in a medium-sized software consulting company. We present four tools: the Project Guide, a structured knowledge repository designed to help developers and managers carry out projects; the \u201cWell of Experience\u201d, an unstructured knowledge repository containing more than 600 experience notes; the Competence Block manager for organizing internal courses; the Skills Manager, which gives an overview of employee competence. In addition to presenting the tools, we describe how developers and managers use the tools, and find that knowledge management tool usage depends on what work tasks an employee has, as well as the employee\u2019s personal preferences. We argue that medium-sized software companies should choose a knowledge\u00a0\u2026", "num_citations": "11\n", "authors": ["156"]}
{"title": "A Lifecycle Process for Experience Databases.\n", "abstract": " A process model for developing, using and maintaining a database for reusing experience from software engineering is suggested. Special emphasis is placed on introducing the experience database in a company.", "num_citations": "11\n", "authors": ["156"]}
{"title": "Learning Software Organisations and Requirements Engineering: First International Workshop\n", "abstract": " Requirements engineering has grown into a focus topic for most software-dependent companies. Both outsourcing and in-house development call for effective elicitation of requirements, and for rich communication between customers and software developers. Organizational learning is, therefore, a natural complement when we discuss requirements engineering practice and its improvement. Through organizational learning, processes and tools are systematically improved, reflection and explicit learning becomes part of the company culture. Many companies are still struggling to reach this goal. The LSO+ RE workshop has provided a forum for discussing the intersection of requirements engineering and learning software organizations in depth. This article introduces the topic and the articles from the LSO+ RE workshop that have been selected for this special issue of J. UKM.", "num_citations": "10\n", "authors": ["156"]}
{"title": "The Benefits and Limitations of Knowledge Management in Global Software Development\n", "abstract": " The role of knowledge management practices and tools in global software development will be explored by empirical investigations. These investigations will look at global software development processes by taking into special account multicultural factors and will rely on both quantitative methods for project selection and qualitative methods for in depth study of the single project contexts.", "num_citations": "9\n", "authors": ["156"]}
{"title": "Retrieval of cases by using a Bayesian network\n", "abstract": " A framework for integrating methods for decision support; Case-Based Reasoning (CBR) and Data Mining (DM) is outlined. The integration approaches are divided according to which method that is considered to be mas~ er and which is the slave. A system using Bayesian networks for computing similarity metrics is implemented and compared to a traditional CBR system. Data are taken from a database from the oil industry. The retrieved cases vary greatly between the systems, especially on features that are unspecified in the\" new case\". If many features of the\" new case\" are specified, the new system performs better, according to an evaluation by a domain expert.", "num_citations": "7\n", "authors": ["156"]}
{"title": "Integration of data mining and case-based reasoning\n", "abstract": " A framework for integrating methods for decision support; Case-Based Reasoning (CBR) and Data Mining (DM) is outlined. The integration approaches are divided on which method that is considered to be master and which is the slave. A system using Bayesian networks for computing similarity metrics is implemented and compared to a traditional CBR system. The data that are used are taken from a database from the oil industry. The retrieved cases vary greatly between the systems, especially on features that are unspecified in the\" new case\". If many features of the\" new case\" are specified, the new system performs better, according to an evaluation by a database expert.", "num_citations": "7\n", "authors": ["156"]}
{"title": "High level test driven development\u2013Shift left\n", "abstract": " Agile development methods are increasingly used in large projects, with many development teams. Because acceptance testing can require a large chain of features to be completed, testing is often carried out late in such projects. In this experience report, we describe a large project where 11 development teams delivered a system in 12 three week iterations. We also describe how the focus of test activities was shifted towards the earlier phases of development, what we call \u201cshift left\u201d. This involved shifting the focus both within the iterations, and in how the overall testing work was organized. We describe the results of this change, and provide recommendations for how to organize test work in future large-scale development projects.", "num_citations": "6\n", "authors": ["156"]}
{"title": "Strategies and approaches for managing architectural knowledge\n", "abstract": " Knowledge management is a large interdisciplinary field, and for companies focusing on knowledge management, there are different possible strategies and approaches. This chapter seeks to give an overview of the main approaches of knowledge management that has been studied in other research disciplines, with emphasis to research that has been done in software engineering. In particular, this chapter will identify the main pros and cons of approaches in relation to managing architectural knowledge.", "num_citations": "6\n", "authors": ["156"]}
{"title": "Value-based knowledge management: the contribution of group processes\n", "abstract": " Knowledge management has recently received much attention in software engineering, but the main focus has been on information systems to support learning. For most software companies, the most valuable knowledge remains in the people, and this knowledge needs different methods to be managed. In this chapter, we discuss the learning contribution of two people-oriented methods: postmortem reviews and process workshops.", "num_citations": "3\n", "authors": ["156"]}
{"title": "Future studies of learning software organizations\n", "abstract": " We suggest to study learning software organizations in three projects; one to analyse the current situation for local software and system houses, one to study improvement and learning through examining knowledge flows, and a third to study the impact of a large-scale interaction process: Open Space Technology to share domain knowledge.", "num_citations": "3\n", "authors": ["156"]}
{"title": "Knowledge Management Systems as a Feedback Mechanism in Software Development Processes: A Search for Success Criteria\n", "abstract": " Knowledge management is a major feedback mechanism in many companies that develop software. Here we look at success criteria for introducing knowledge management systems in such organisations. We present our work with four different companies in Norway, and find that important criteria for success are: Getting a culture for sharing knowledge, having a stable focus on knowledge management, develop systems incrementally, and couple the efforts well to the business goals of the company. We compare our success factors to more general studies of knowledge management, and find that having multiple channels for knowledge transfer, and a good technical and organisational infrastructure, as well as involving employees in knowledge management programs are also considered important.", "num_citations": "3\n", "authors": ["156"]}
{"title": "Postmortem Reviews\n", "abstract": " Postmortem reviews are collective learning activities which can be organized for projects either when they end a phase or are terminated. The main motivation is to reflect on what happened in the project in order to improve future practice\u2014for the individuals that have participated in the project and for the organization as a whole. Projects are the typical way of working in most knowledge-intensive organizations, and postmortems provide a possibility to learn from the projects with little effort, which makes it ideal as an initial knowledge management activity in a company.", "num_citations": "2\n", "authors": ["156"]}
{"title": "Software process improvement in Europe: selected articles from EuroSPI 2004\n", "abstract": " It is a pleasure to introduce this special issue of Software Process Improvement and Practice with selected articles from the research track of the European Software Process Improvement Conference (EuroSPI), 2004 (Dings\u00f8yr 2004). In 2004, the conference was in its 11th year, and had become the main meeting place in Europe between the software industry and academia to discuss software process improvement (SPI). The success of SPI is influenced by organizational issues as well as technology (Dyb\u00e5 2005). The conference dealt with SPI in a broad sense, investigating organizational issues as well as methods and tools for SPI. The first year when EuroSPI had a separate research track was 2004. The goal of this track was to present innovative and significant research articles in SPI, relevant to the software industry. Another goal was to make articles readable for a scientific and industrial audience, and that\u00a0\u2026", "num_citations": "2\n", "authors": ["156"]}
{"title": "Trends in learning software organizations: Current needs and future solutions\n", "abstract": " The 7th learning software organizations workshop focused on interdisciplinary research on several aspects of learning: From personal competence development to cultural and technological frameworks for organization-wide knowledge-sharing (\u201cknowledge management in software engineering\u201d). We put special emphasis on experience reports and empirical work.               We define what a learning software organization is, present lessons learned from workshop sessions and suggest some ideas for the future development of the field.", "num_citations": "2\n", "authors": ["156"]}
{"title": "An Analysis of Process Support in Knowledge Management Tools for Software Engineering\n", "abstract": " Seven tools for knowledge management of experiences from the software engineering domain are analysed to examine the extent to which techniques from the process modeling community are used. We investigate what process model technology is used in the tools, and how these tools represent context. We also examine if the context information used to identify information that is suitable for reuse. Some process elements like information on projects are widely used, as well as support for elicitation. Enactment is supported in one of the seven tools. Context is mostly represented as text, and not with languages that are similar to process modeling languages. Context information is used to a great extent to identify if information is suitable for reuse.", "num_citations": "2\n", "authors": ["156"]}
{"title": "Focus for planned research: Knowledge Management for Software Process Improvement\n", "abstract": " Here, we outline planned research on knowledge management for software process improvement. We want to look at software tools that are in use for knowledge management in companies that produce software, and look at what processes are present in companies around these products. Further, we want to study what impact knowledge management has on products that are delivered. For this investigation, we plan to use both observation and historical research methods.", "num_citations": "2\n", "authors": ["156"]}
{"title": "The Issue of Competence in Transforming the Norwegian Welfare Sector: Some implications for future e-government initiatives\n", "abstract": " In this paper we argue that e-government initiatives need to take the competence involved in producing high-quality services for citizens into account. We draw on insights from a Pilot project in a Norwegian municipal aiming at radically re-structuring the Norwegian welfare sector and show how the competence to provide high-quality services rely on the collective achievement of individuals\u2019 knowing-in-practice when dealing with particular cases and situations. Furthermore, we show how competence in terms of \u2018processes of knowing\u2019is intrinsically related to organization structure and existing information systems (IS). Transforming the Norwegian Welfare Sector then, involves transforming a socio-technical network of heterogeneous elements, where existing processes of knowing plays an important role. Based on this, we then discuss some implications for implementing e-government in local municipals, and in particular e-government initiatives that aim at introducing all-embracing integrated IT-solutions across organizational and geographical borders. The paper concludes by sketching some implications for future research on e-government.", "num_citations": "1\n", "authors": ["156"]}
{"title": "Software Process Improvement: 11th European Conference, EuroSPI 2004, Trondheim, Norway, November 10-12, 2004. Proceedings\n", "abstract": " This was the first year that the European Software Process Improvement Conference-EuroSPI-had a separate research track with its own proceedings. The EuroSPI conference is in its eleventh year, and has become the main meeting place in Europe for the software industry and academia to discuss software process improvement. The conference deals with software process improvement in a broad sense, investigating organizational issues as well as methods and tools for software process improvement. Euro SPI is an initiative financed by a consortium of Nordic research centers and user networks (SINTEF, DELTA and STTF), ASQF, a German quality assurance association, and ISCN in Ireland, the coordinating network partner. The research papers describe innovative and significant work in software process improvement, which is relevant to the software industry. The papers are readable for a scientific and industrial audience, and support claims with appropriately described evidence or references to relevant literature. Thirty-one papers were submitted in this year's research track, and each paper was sent to three or four members of the program committee or additional reviewers. Papers were evaluated according to originality, significance of the contribution, quality of the written and graphical presentation, research method applied, and appropriateness of comparison to relevant research and literature. Almost 100 reviews were received and 18 papers were selected for presentation in the research track, giving a rejection rate of 42%. Many high-quality submissions had to be rejected because of limited space in the conference program. The\u00a0\u2026", "num_citations": "1\n", "authors": ["156"]}
{"title": "Using Groupware to learn Software Process Improvement\n", "abstract": " This paper describes the learning goals and organisation of a course in software process improvement given at the Norwegian University of Science and Technology, and what we see as the learning improvement after introducing a groupware tool for distributing course information and collecting hand-ins from the students. Software process improvement is a subfield of software engineering in Computer Science that aims to improve the quality of software products. This involves examining the way software is produced, the work process. A major challenge when giving a course in software process improvement is to learn students who are used to taking academic courses about problems that you normally find in an industrial setting. In order to encourage more discussion on the topics in the course, we started to use a groupware tool for handling exercises two years ago. This tool is accesses through the World Wide Web, and students have access to all course-related information. They are also told to publish their hand-ins here, where everyone has the possibility to see them. The comments given by teaching assistants is also shown here. During the last semester, we measured the usage of the groupware system, and find several interesting patterns: The most accessed documents are related to course organization and curriculum. Slides from class and exercises are downloaded a lot less. And it seems that the students read each other's exercises.", "num_citations": "1\n", "authors": ["156"]}
{"title": "Software Experience Bases: Some Results and Recommendations\n", "abstract": " The paper studies the potential success of using software experience bases for organizational learning. First, a survey of some previous efforts in the area is presented, together with experiences from related fields. We note, that, modern network technologies like the Web provide new possibilities for distributed storage, access and dissemination of relevant knowledge. However, the main problem lies in internalizing formal knowledge (learning), not in externalizing experiences (model building). Then we present the main results from an empirical study of four software experience bases in the Norwegian SPIQ project for software process improvement, done in 1997-99. The SPIQ project proposes a pragmatical, overall method for how to plan, establish, use and evaluate software experience bases. The hypotheses and research method are briefly presented, followed by a characterization of the studied experience bases and their actual usage and role in the associated companies. The most critical success factors are found to be incremental startup with a low ambition level, usefulness of the knowledge being offered, and, most importantly, stable company strategies and key personnel (all of this may seem obvious, but still not easy). Some advice for introducing and evaluating software experience bases are finally given.", "num_citations": "1\n", "authors": ["156"]}