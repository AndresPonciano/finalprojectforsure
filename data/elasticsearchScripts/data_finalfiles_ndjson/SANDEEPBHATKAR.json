{"title": "Address Obfuscation: An Efficient Approach to Combat a Broad Range of Memory Error Exploits.\n", "abstract": " Attacks which exploit memory programming errors (such as buffer overflows) are one of today's most serious security threats. These attacks require an attacker to have an in-depth understanding of the internal details of a victim program, including the locations of critical data and/or code. Program obfuscation is a general technique for securing programs by making it difficult for attackers to acquire such a detailed understanding. This paper develops a systematic study of a particular kind of obfuscation called address obfuscation that randomizes the location of victim program data and code. We discuss different implementation strategies to randomize the absolute locations of data and code, as well as relative distances between data locations. We then present our implementation that transforms object files and executables at link-time and load-time. It requires no changes to the OS kernel or compilers, and can be applied to individual applications without affecting the rest of the system. It can be implemented with low runtime overheads. Address obfuscation can reduce the probability of successful attacks to be as low as a small fraction of a percent for most memory-error related attacks. Moreover, the randomization ensures that an attack that succeeds against one victim will likely not succeed against another victim, or even for a second time against the same victim. Each failed attempt will typically crash the victim program, thereby making it easy to detect attack attempts. These aspects make it particularly effective against large-scale attacks such as Code Red, since each infection attempt requires significantly more resources, thereby slowing down\u00a0\u2026", "num_citations": "836\n", "authors": ["354"]}
{"title": "Taint-Enhanced Policy Enforcement: A Practical Approach to Defeat a Wide Range of Attacks.\n", "abstract": " Policy-based confinement, employed in SELinux and specification-based intrusion detection systems, is a popular approach for defending against exploitation of vulnerabilities in benign software. Conventional access control policies employed in these approaches are effective in detecting privilege escalation attacks. However, they are unable to detect attacks that``hijack''legitimate access privileges granted to a program, eg, an attack that subverts an FTP server to download the password file.(Note that an FTP server would normally need to access the password file for performing user authentication.) Some of the common attack types reported today, such as SQL injection and cross-site scripting, involve such subversion of legitimate access privileges. In this paper, we present a new approach to strengthen policy enforcement by augmenting security policies with information about the trustworthiness of data used in security-sensitive operations. We evaluated this technique using 9 available exploits involving several popular software packages containing the above types of vulnerabilities. Our technique sucessfully defeated these exploits.", "num_citations": "485\n", "authors": ["354"]}
{"title": "Efficient Techniques for Comprehensive Protection from Memory Error Exploits.\n", "abstract": " Despite the wide publicity received by buffer overflow attacks, the vast majority of today\u2019s security vulnerabilities continue to be caused by memory errors, with a significant shift away from stack-smashing exploits to newer attacks such as heap overflows, integer overflows, and format-string attacks. While comprehensive solutions have been developed to handle memory errors, these solutions suffer from one or more of the following problems: high overheads (often exceeding 100%), incompatibility with legacy C code, and changes to the memory model to use garbage collection. Address space randomization (ASR) is a technique that avoids these drawbacks, but existing techniques for ASR do not offer a level of protection comparable to the above techniques. In particular, attacks that exploit relative distances between memory objects aren\u2019t tackled by existing techniques. Moreover, these techniques are susceptible to information leakage and brute-force attacks. To overcome these limitations, we develop a new approach in this paper that supports comprehensive randomization, whereby the absolute locations of all (code and data) objects, as well as their relative distances are randomized. We argue that this approach provides probabilistic protection against all memory error exploits, whether they be known or novel. Our approach is implemented as a fully automatic source-to-source transformation which is compatible with legacy C code. The address-space randomizations take place at load-time or runtime, so the same copy of the binaries can be distributed to everyone\u2014this ensures compatibility with today\u2019s software distribution model\u00a0\u2026", "num_citations": "421\n", "authors": ["354"]}
{"title": "Model-carrying code: a practical approach for safe execution of untrusted applications\n", "abstract": " This paper presents a new approach called model-carrying code (MCC) for safe execution of untrusted code. At the heart of MCC is the idea that untrusted code comes equipped with a concise high-level model of its security-relevant behavior. This model helps bridge the gap between high-level security policies and low-level binary code, thereby enabling analyses which would otherwise be impractical. For instance, users can use a fully automated verification procedure to determine if the code satisfies their security policies. Alternatively, an automated procedure can sift through a catalog of acceptable policies to identify one that is compatible with the model. Once a suitable policy is selected, MCC guarantees that the policy will not be violated by the code. Unlike previous approaches, the MCC framework enables code producers and consumers to collaborate in order to achieve safety. Moreover, it provides\u00a0\u2026", "num_citations": "274\n", "authors": ["354"]}
{"title": "Data space randomization\n", "abstract": " Over the past several years, US-CERT advisories, as well as most critical updates from software vendors, have been due to memory corruption vulnerabilities such as buffer overflows, heap overflows, etc. Several techniques have been developed to defend against the exploitation of these vulnerabilities, with the most promising defenses being based on randomization. Two randomization techniques have been explored so far: address space randomization (ASR) that randomizes the location of objects in virtual memory, and instruction set randomization (ISR) that randomizes the representation of code. We explore a third form of randomization called data space randomization (DSR) that randomizes the representation of data stored in program memory. Unlike ISR, DSR is effective against non-control data attacks as well as code injection attacks. Unlike ASR, it can protect against corruption of non-pointer\u00a0\u2026", "num_citations": "201\n", "authors": ["354"]}
{"title": "Dataflow anomaly detection\n", "abstract": " Beginning with the work of Forrest et al, several researchers have developed intrusion detection techniques based on modeling program behaviors in terms of system calls. A weakness of these techniques is that they focus on control flows involving system calls, but not their arguments. This weakness makes them susceptible to several classes of attacks, including attacks on security-critical data, race-condition and symbolic link attacks, and mimicry attacks. To address this weakness, we develop a new approach for learning dataflow behaviors of programs. The novelty in our approach, as compared to previous system-call argument learning techniques, is that it learns temporal properties involving the arguments of different system calls, thus capturing the flow of security-sensitive data through the program. An interesting aspect of our technique is that it can be uniformly layered on top of most existing control-flow\u00a0\u2026", "num_citations": "181\n", "authors": ["354"]}
{"title": "Mutantx-s: Scalable malware clustering based on static features\n", "abstract": " The current lack of automatic and speedy labeling of a large number (thousands) of malware samples seen everyday delays the generation of malware signatures and has become a major challenge for anti-virus industries. In this paper, we design, implement and evaluate a novel, scalable framework, called MutantX-S, that can efficiently cluster a large number of samples into families based on programs\u2019 static features, ie, code instruction sequences. MutantX-S is a unique combination of several novel techniques to address the practical challenges of malware clustering. Specifically, it exploits the instruction format of x86 architecture and represents a program as a sequence of opcodes, facilitating the extraction of N-gram features. It also exploits the hashing trick recently developed in the machine learning community to reduce the dimensionality of extracted feature vectors, thus significantly lowering the memory requirement and computation costs. Our comprehensive evaluation on a MutantX-S prototype using a database of more than 130,000 malware samples has shown its ability to correctly cluster over 80% of samples within 2 hours, achieving a good balance between accuracy and scalability. Applying MutantX-S on malware samples created at different times, we also demonstrate that MutantX-S achieves high accuracy in predicting labels for previously unknown malware.", "num_citations": "130\n", "authors": ["354"]}
{"title": "Techniques for behavior based malware analysis\n", "abstract": " Techniques for behavior based malware analysis are disclosed. In one particular exemplary embodiment, the techniques may be realized as a method for behavior based analysis comprising receiving trace data, analyzing, using at least one computer processor, observable events to identify low level actions, analyzing a plurality of low level actions to identify at least one high level behavior, and providing an output of the at least one high level behavior.", "num_citations": "104\n", "authors": ["354"]}
{"title": "Systems and methods for using event-correlation graphs to detect attacks on computing systems\n", "abstract": " A computer-implemented method for using event-correlation graphs to detect attacks on computing systems may include (1) detecting a suspicious event involving a first actor within a computing system,(2) constructing an event-correlation graph that includes a first node that represents the first actor, a second node that represents a second actor, and an edge that interconnects the first node and the second node and represents a suspicious event involving the first actor and the second actor,(3) calculating, based at least in part on the additional suspicious event, an attack score for the event-correlation graph,(4) determining that the attack score is greater than a predetermined threshold, and (5) determining, based at least in part on the attack score being greater than the predetermined threshold, that the suspicious event may be part of an attack on the computing system. Various other methods, systems, and\u00a0\u2026", "num_citations": "54\n", "authors": ["354"]}
{"title": "Systems and methods for using event-correlation graphs to generate remediation procedures\n", "abstract": " A computer-implemented method for using event-correlation graphs to generate remediation procedures may include (1) detecting a suspicious event involving a first actor within a computing system,(2) constructing, in response to detecting the suspicious event involving the first actor, an event-correlation graph that includes (i) a first node that represents the first actor,(ii) a second node that represents a second actor, and (iii) an edge that interconnects the first node and the second node and represents an additional suspicious event involving the first actor and the second actor, and (3) using the event-correlation graph to generate a procedure for remediating an effect of an attack on the computing system that is reflected in the event-correlation graph. Various other methods, systems, and computer-readable media are also disclosed.", "num_citations": "53\n", "authors": ["354"]}
{"title": "Systems and methods for classifying security events as targeted attacks\n", "abstract": " The disclosed computer-implemented method for classifying security events as targeted attacks may include (1) detecting a security event in connection with at least one organization,(2) comparing the security event against a targeted-attack taxonomy that identifies a plurality of characteristics of targeted attacks,(3) determining that the security event is likely targeting the organization based at least in part on comparing the security event against the targeted-attack taxonomy, and then in response to determining that the security event is likely targeting the organization,(4) classifying the security event as a targeted attack. Various other methods, systems, and computer-readable media are also disclosed.", "num_citations": "48\n", "authors": ["354"]}
{"title": "Systems and methods for reducing false positives when using event-correlation graphs to detect attacks on computing systems\n", "abstract": " A computer-implemented method for reducing false positives when using event-correlation graphs to detect attacks on computing systems may include (1) detecting a suspicious event involving a first actor within a computing system,(2) constructing an event-correlation graph that includes a first node that represents the first actor, a second node that represents a second actor, and an edge that represents an additional suspicious event involving the first actor and the second actor,(3) comparing the event-correlation graph with at least one additional event-correlation graph that represents events on at least one additional computing system,(4) determining that a similarity of the event-correlation graph and the additional event-correlation graph exceeds a predetermined threshold, and (5) classifying the suspicious event as benign based on determining that the similarity of the event-correlation graph and the additional\u00a0\u2026", "num_citations": "43\n", "authors": ["354"]}
{"title": "Encoding machine code instructions for static feature based malware clustering\n", "abstract": " Machine language instruction sequences of computer files are extracted and encoded into standardized opcode sequences. The standardized opcodes in the sequences are of the same length and do not include operands. A multi-dimension vector is generated as a static feature for each computer file, where each element in the vector corresponds to the number of occurrences of a unique N-gram (ie, unique sequence of N consecutive standardized opcodes) in the standardized opcode sequence for that computer file. The computer files are clustered into clusters of similarly classified files based on similarities of their static features. An unknown computer file can be classified by first grouping the file into a cluster of files with similar static features (eg, into the cluster with the shortest average distance), and then determining the classification of that file based on the classifications of other files that belong to the same\u00a0\u2026", "num_citations": "36\n", "authors": ["354"]}
{"title": "Systems and methods for adjusting suspiciousness scores in event-correlation graphs\n", "abstract": " A computer-implemented method for adjusting suspiciousness scores in event-correlation graphs may include (1) detecting a suspicious event involving a first actor and a second actor within a computing system,(2) constructing an event-correlation graph that includes (i) a representation of the first actor,(ii) a representation of the suspicious event, and (iii) a representation of the second actor, and (3) adjusting a suspiciousness score associated with at least one representation in the event-correlation graph based at least in part on a suspiciousness score associated with at least one other representation in the event-correlation graph such that the adjusted suspiciousness score associated with the at least one representation is influenced by the suspicious event. Various other methods, systems, and computer-readable media are also disclosed.", "num_citations": "33\n", "authors": ["354"]}
{"title": "Systems and methods for detecting security threats based on user profiles\n", "abstract": " A computer-implemented method for detecting security threats based on user profiles may include 1) identifying behavior on a computing system that is potentially indicative of a security threat, 2) identifying a user profile for a user of the computing system that estimates a level of the user's technical sophistication, 3) comparing the identified behavior with the estimated level of the user's technical sophistication, and 4) determining whether the identified behavior indicates a security threat based at least in part on the comparison of the identified behavior with the estimated level of the user's technical sophistication. Various other methods, systems, and computer-readable media are also disclosed.", "num_citations": "31\n", "authors": ["354"]}
{"title": "Practical dynamic taint analysis for countering input validation attacks on web applications\n", "abstract": " Errors in validation of user inputs lead to serious security vulnerabilities. Many web applications contain such errors, making them vulnerable to remotely exploitable input validation attacks such as SQL injection, and cross site scripting. In this paper, we present a dynamic taint analysis technique to detect the input validation attacks. More specifically, our technique is based on tracking flow of taint information from untrusted input into the parts of the generated output (or commands). A unique benefit of our approach is that it can be applied to all of the web application development languages whose interpreters are implemented in C. We demonstrate this ability by applying our technique on web applications which use PHP, and bash scripts. Our technique is implemented as a fully automatic source-to-source transformation. We present experimental evaluation to establish effectiveness of our approach, paying particular attention to its attack detection ability. Experiments demonstrate that our technique detects all the attacks accurately with no false alarms.", "num_citations": "30\n", "authors": ["354"]}
{"title": "SELF: a transparent security extension for ELF binaries\n", "abstract": " The ability to analyze and modify binaries is often very useful from a security viewpoint. Security operations one would like to perform on binaries include the ability to extract models of program behavior and insert inline reference monitors. Unfortunately, the existing manner in which binary code is packaged prevents even the simplest of analyses, such as distinguishing code from data, from succeeding 100 percent of the time. In this paper, we propose SELF, a security-enhanced ELF (Executable and Linking Format), which is simply ELF with an extra section added. The extra section contains information about (among other things) the address, size, and alignment requirements of each code and static data item in the program. This information is somewhat similar to traditional debugging information, but contains additional information specifically needed for binary analysis that debugging information lacks. It is also\u00a0\u2026", "num_citations": "29\n", "authors": ["354"]}
{"title": "Method and system for improving data quality in large hyperlinked text databases using pagelets and templates\n", "abstract": " A computing system and method clean a set of hypertext documents to minimize violations of a Hypertext Information Retrieval (IR) rule set. Then, the system and method performs an information retrieval operation on the resulting cleaned data. The cleaning process includes decomposing each page of the set of hypertext documents into one or more pagelets; identifying possible templates; and eliminating the templates from the data. Traditional IR search and mining algorithms can then be used to search on the remaining pagelets, as opposed to the original pages, to provide cleaner, more precise results.", "num_citations": "26\n", "authors": ["354"]}
{"title": "Improving attack detection in host-based IDS by learning properties of system call arguments\n", "abstract": " Beginning with the work of Forrest et al, several researchers have developed intrusion detection techniques based on modeling program behaviors in terms of system calls. A weakness of these techniques is that they focus primarily on system call names, and not the arguments. This weakness makes them susceptible to several classes of attacks, including mimicry attacks, attacks on securitycritical data, and race-condition attacks. To address this weakness, we present an approach for capturing data-flow behaviors of programs. We provide a formal definition of data-flow behaviors on system call traces, and describe efficient algorithms for building such models. Our algorithm can be layered on top of most existing control-flow models. This layering increases the precision of models by exploting control-flow context to refine data-flow properties. We present a detailed experimental evaluation to establish the effectiveness of the approach, paying particular attention to detection of sophisticated attacks. A unique benefit of our approach is that the models contain sufficient information regarding resources (such as files) accessed by a program to make it feasible to formally reason about the security assurances provided by the model.", "num_citations": "23\n", "authors": ["354"]}
{"title": "Method to Detect Malicious Behavior by Computing the Likelihood of Data Accesses\n", "abstract": " A method, performed by a processor to detect malicious or risky data accesses is provided. The method includes modeling user accesses to a content repository as to probability of a user accessing data in the content repository, based on a history of user accesses to the content repository. The method includes scoring a singular user access to the content repository, based on probability of access according to the modeling and alerting in accordance with the scoring.", "num_citations": "17\n", "authors": ["354"]}
{"title": "Techniques for classifying non-process threats\n", "abstract": " Techniques for classifying non-process threats are disclosed. In one particular exemplary embodiment, the techniques may be realized as a method for classifying non-process threats comprising generating trace data of at least one observable event associated with execution of a process, representing a first feature of the at least one observable event of the trace data, calculating, using a computer processor, a similarity between the first feature and at least one sample feature, and classifying the process based on the similarity.", "num_citations": "16\n", "authors": ["354"]}
{"title": "Improving scalability of personalized recommendation systems for enterprise knowledge workers\n", "abstract": " Enterprise knowledge workers have been overwhelmed by the growing rate of incoming data in recent years. In this paper, we present a recommendation system with the goal of helping knowledge workers in discovering useful new content. In particular, our system builds personalized user models based on file activities on enterprise network file servers. Our models use novel features that are derived from file metadata and user collaboration. Through extensive evaluation on real-world enterprise data, we demonstrate the effectiveness of our system with high precision and recall values. Unfortunately, our experiments reveal that per-user models are unable to handle heavy workloads. To address this limitation, we propose a novel optimization technique, active feature-based model selection, that predicts the user models that should be applied on each test file. Such a technique can reduce the classification time\u00a0\u2026", "num_citations": "16\n", "authors": ["354"]}
{"title": "A unified approach for preventing attacks exploiting a range of software vulnerabilities\n", "abstract": " Software implementation bugs are behind most security vulnerabilities reported today. Our analysis of CVE vulnerabilities in 2003 and 2004 indicate that 20% of them were classified as DOS attacks, 30% are due to design errors, and almost every thing else is due to implementation errors. Among implementation errors, 84% are due to generalized injection vulnerabilities that allow an attacker to modify the values of security-sensitive variables using carefully crafted inputs to vulnerable programs. Attacks in this category include buffer overflows, format-string attacks, SQL and shell-code injection attacks, directory traversal attacks, and cross-site scripting. In this paper, we present a unified approach that can stop exploitation of these vulnerabilities. Our approach is based on a dynamic taint analysis technique for C-programs that is capable of tracking information flow at the level of individual bytes. By leveraging the low-level features of C-language, our technique achieves soundness even in the presence of memory errors such as buffer overflows. At the same time, we exploit the higher-level features of C to optimize tainttracking to achieve low overheads of about 10% for server programs, and moderate overheads of between 25% and 60% for most CPU-intensive applications. Our experimental evaluation shows the effectiveness of the approach in stopping 9 real-world attacks that span the above categories.", "num_citations": "12\n", "authors": ["354"]}
{"title": "Systems and methods for dynamic access control over shared resources\n", "abstract": " The disclosed computer-implemented method for dynamic access control over shared resources may include (1) detecting an attempt by a user to access a resource via a computing environment,(2) identifying a risk level of the user attempting to access the resource,(3) identifying a sensitivity level of the resource,(4) identifying a risk level of the computing environment through which the user is attempting to access the resource,(5) determining an overall risk level for the attempt to access the resource based at least in part on (A) the risk level of the user,(B) the sensitivity level of the resource, and (C) the risk level of the computing environment, and then (6) determining, based at least in part on the overall risk level, whether to grant the user access to the resource via the computing environment. Various other methods, systems, and computer-readable media are also disclosed.", "num_citations": "10\n", "authors": ["354"]}
{"title": "Systems and methods for anomaly-based detection of compromised IT administration accounts\n", "abstract": " A computer-implemented method for anomaly-based detection of compromised information technology (IT) administration accounts may (1) include establishing a set of permissible IT administration tasks for an IT administration account,(2) monitoring the IT administration account for activities outside the set of permissible IT administration tasks,(3) detecting a suspicious activity by identifying an activity that is outside the set of permissible IT administration tasks and therefore indicative of the IT administration account being compromised, and (4) in response to detecting the suspicious activity, performing a security action with respect to the potentially compromised IT administration account. Various other methods, systems, and computer-readable media are also disclosed.", "num_citations": "10\n", "authors": ["354"]}
{"title": "Measuring confidence of file clustering and clustering based file classification\n", "abstract": " A uniformity of a cluster of samples is determined, and a corresponding raw confidence value is calculated. A confidence interval weight is calculated using a confidence interval to determine reliability of the uniformity. A trace length weight is calculated, as a function of traces of the samples. An n-gram weight is calculated, as a function of numbers of n-grams generated by the samples. A compactness weight is calculated, as a function of the similarity of the samples. A cluster weight is calculated as a function of the four above-described weights. A cluster confidence measurement is calculated as a function of the cluster weight and the raw confidence value. When a new sample is assigned to the cluster, an assignment confidence measurement is calculated, as a function of the cluster's confidence measurement and the sample's trace length, n-grams and similarity.", "num_citations": "10\n", "authors": ["354"]}
{"title": "Systems and methods for detecting malware\n", "abstract": " A computer-implemented method for detecting malware may include (1) identifying a behavioral trace of a program, the behavioral trace including a sequence of runtime behaviors exhibited by the program,(2) dividing the behavioral trace to identify a plurality of n-grams within the behavioral trace, each runtime behavior within the sequence of runtime behaviors corresponding to an n-gram token,(3) analyzing the plurality of n-grams to generate a feature vector of the behavioral trace, and (4) classifying the program based at least in part on the feature vector of the behavioral trace to determine whether the program is malicious. Various other methods, systems, and computer-readable media are also disclosed.", "num_citations": "8\n", "authors": ["354"]}
{"title": "Systems and methods for creating security profiles\n", "abstract": " A computer-implemented method for creating security profiles may include (1) identifying, within a computing environment, a new actor as a target for creating a new security behavior profile that defines expected behavior for the new actor,(2) identifying a weighted graph that connects the new actor as a node to other actors,(3) creating, by analyzing the weighted graph, the new security behavior profile based on the new actor's specific position within the weighted graph,(4) detecting a security anomaly by comparing actual behavior of the new actor within the computing environment with the new security behavior profile that defines expected behavior for the new actor, and (5) performing, by a computer security system, a remedial action in response to detecting the security anomaly. Various other methods, systems, and computer-readable media are also disclosed.", "num_citations": "8\n", "authors": ["354"]}
{"title": "Systems and methods for detecting malicious documents based on component-object reuse\n", "abstract": " A computer-implemented method for detecting malicious documents based on component-object reuse may include (1) identifying a plurality of malicious documents,(2) identifying a plurality of component objects that are contained within at least one malicious document from the plurality of malicious documents,(3) receiving an unknown document,(4) determining that at least one component object from the plurality of component objects was used to create the unknown document, and (5) performing a security action on the unknown document in response to determining that the component object was used to create the unknown document. Various other methods, systems, and computer-readable media are also disclosed.", "num_citations": "6\n", "authors": ["354"]}
{"title": "Defeating Memory Error Expolits Using Automated Software Diversity\n", "abstract": " In recent years, a vast majority of the security attacks have targeted vulnerabilities due to memory errors in C and C++ programs. Since 2003, CERT/CC (now US-CERT)[10] has issued 136 distinct advisories involving COTS software, of which 119 (around 88%) are due to memory errors. We can totally avoid these vulnerabilities by developing more reliable and secure software using type-safe and memory-safe languages such as Java and ML. However, these languages provide little control over memory management and data representation. This control is the main reason that C and C++ are continued to be preferred languages for writing systems software. Moreover, software producers are obsessed with faster runtime performance of C and C++ programs. These facts indicate that C and C++ languages will continue to be used, and hence memory errors will be a dominant source of vulnerabilities in the foreseeable future.To date, a number of attacks which exploit memory errors have been developed. The earliest of these to achieve widespread popularity was the stack smashing attack [17, 33], in which a stack-allocated buffer is intentionally overflowed so that a return address stored on the stack is overwritten with the address of injected malicious code (see Figure 1). To thwart such attacks, several attack-specific approaches were developed, which, in one way or another, prevent undetected modifications to a function\u2019s return address. They include the StackGuard [17] approach of putting canary values around", "num_citations": "6\n", "authors": ["354"]}
{"title": "Systems and methods for threat detection using a software program update profile\n", "abstract": " The disclosed computer-implemented method for threat detection using a software program update profile may include (1) building an update behavioral model that identifies legitimate update behavior for a software application by (a) monitoring client devices for update events associated with the software application and (b) analyzing the update events to identify the legitimate update behavior of the software application,(2) using the update behavioral model to identify suspicious behavior on a computing system by (a) detecting an update instance on the computing system,(b) comparing the update instance with the legitimate update behavior identified in the update behavioral model, and (c) determining, based on the comparison of the update instance with the legitimate update behavior, that the update instance is suspicious, and (3) in response to determining that the update instance is suspicious, performing a\u00a0\u2026", "num_citations": "5\n", "authors": ["354"]}
{"title": "Systems and methods for protecting data files\n", "abstract": " A method for protecting data files may include (1) identifying a data file to be protected against data loss,(2) identifying a set of software programs permitted to open the data file by (a) identifying a format of the data file and (b) identifying at least one software program capable of opening files of the format of the data file,(3) detecting an attempt to open the data file by a software program not included in the set of software programs, and (4) performing a security action in response to detecting the attempt to open the data file. Various other methods, systems, and computer-readable media are also disclosed.", "num_citations": "5\n", "authors": ["354"]}
{"title": "Access Prediction for Knowledge Workers in Enterprise Data Repositories.\n", "abstract": " The data which knowledge workers need to conduct their work is stored across an increasing number of repositories and grows annually at a significant rate. It is therefore unreasonable to expect that knowledge workers can efficiently search and identify what they need across a myriad of locations where upwards of hundreds of thousands of items can be created daily. This paper describes a system which can observe user activity and train models to predict which items a user will access in order to help knowledge workers discover content. We specifically investigate network file systems and determine how well we can predict future access to newly created or modified content. Utilizing file metadata to construct access prediction models, we show how the performance of these models can be improved for shares demonstrating high collaboration among its users. Experiments on eight enterprise shares reveal that models based on file metadata can achieve F scores upwards of 99%. Furthermore, on an average, collaboration aware models can correctly predict nearly half of new file accesses by users while ensuring a precision of 75%, thus validating that the proposed system can be utilized to help knowledge workers discover new or modified content.", "num_citations": "4\n", "authors": ["354"]}
{"title": "Insider threat detection under user-resource bi-partite graphs\n", "abstract": " A method for insider threat detection under user-resource bi-partite graphs is described. A computing device evaluates a bi-partite mapping of a set of users and a set of files, and performs a random-walk procedure initiating from a selected user of the set of users. The computing device computes a probability distribution associated with the access frequency of each alternate user and file of the random-walk procedure, and compares the probability distribution to one or more distributions associated with temporal periods prior to the initiated procedure. Based on the comparison, the computing device identifies points of maximum variance of the distribution. The computing device identifies the files of the set of files and users of the set of users associated with the points of maximum variance and access raw data to identify activity associated with the selected user and the identified resources.", "num_citations": "3\n", "authors": ["354"]}
{"title": "Systems and methods for generating contextually meaningful animated visualizations of computer security events\n", "abstract": " The disclosed computer-implemented method for generating contextually meaningful animated visualizations of computer security events may include (1) detecting a security-related event that involves an actor and a target within a computing environment,(2) identifying certain characteristics of the security-related event that collectively describe a context of the security-related event with respect to the actor and the target within the computing environment,(3) generating, based at least in part on the certain characteristics of the security-related event, a graphical animation of the security-related event that graphically represents the context of the security-related event with respect to the actor and the target within the computing environment, and then (4) providing, for presentation to a user, the graphical animation of the security-related event to facilitate visualizing the context of the security-related event with respect to\u00a0\u2026", "num_citations": "3\n", "authors": ["354"]}
{"title": "Techniques for detecting anomalous network traffic\n", "abstract": " Techniques for detecting anomalous network traffic are disclosed. In one particular embodiment, the techniques may be realized as a method for detecting anomalous network traffic comprising the steps of receiving a list including a plurality of processes and, for each process, a list of approved types of network traffic; monitoring network traffic of each process on the list of processes; upon detecting network traffic for a process on the list of processes, determining that the type of network traffic detected is not on the list of approved types for that process; and identifying the process as infected based on determining that the type of network traffic detected is not on the list of approved types for that process.", "num_citations": "3\n", "authors": ["354"]}
{"title": "Systems and methods for neutralizing file-format-specific exploits included within files contained within electronic communications\n", "abstract": " A computer-implemented method for neutralizing file-format-specific exploits contained within electronic communications may include (1) identifying an electronic communication,(2) identifying at least one file contained within the electronic communication, and then (3) neutralizing any file-format-specific exploits contained within the file. In one example, neutralizing any file-format-specific exploits contained within the file may include applying at least one file-format-conversion operation to the file. Additionally or alternatively, neutralizing any file-format-specific exploits contained within the file may include constructing a sterile version of the file that selectively omits at least a portion of any exploitable content contained within the file. Various other methods, systems, and computer-readable media are also disclosed.", "num_citations": "3\n", "authors": ["354"]}
{"title": "Modeling malicious behavior that occurs in the absence of users\n", "abstract": " Systems, apparatuses, methods, and computer readable mediums for modeling malicious behavior that occurs in the absence of users. A system trains an anomaly detection model using attributes associated with a first plurality of events representing system activity on one or more clean machines when users are not present. Next, the system utilizes the trained anomaly detection model to remove benign events from a second plurality of events captured from infected machines when users are not present. Then, the system utilizes malicious events, from the second plurality of events, to train a classifier. Next, the classifier identifies a first set of attributes which are able to predict if an event is caused by malware with a predictive power greater than a threshold.", "num_citations": "2\n", "authors": ["354"]}
{"title": "Systems and methods for detecting anomalous behavior in shared data repositories\n", "abstract": " The disclosed computer-implemented method for detecting anomalous behavior in shared data repositories may include (i) identifying a shared data repository that comprises files,(ii) monitoring access to the files for a predetermined time period in order to determine which files are accessed by each user,(iii) creating a graph of the access to the files, wherein each vertex represents a user and each edge that connects two vertices represents that one or more files were accessed by both users represented by the two vertices,(iv) deriving, from the graph, a set of communities, wherein each community represents a set of users that collaborated on one or more files during the predetermined time period, and (v) determining that a collaboration pattern of a user does not match a collaboration pattern for the user's community observed during the predetermined time period. Various other methods, systems, and computer\u00a0\u2026", "num_citations": "2\n", "authors": ["354"]}
{"title": "Automatically detecting insider threats using user collaboration patterns\n", "abstract": " Automatically detecting insider threats using user collaboration patterns. In one embodiment, a method may include identifying collaborative access of one or more network resources in a network between a target user using a target network device and other users using other network devices in the network during multiple prior time periods and during a current time period, generating prior collaboration graphs for the prior time periods, generating an average collaboration graph by combining the prior collaboration graphs, generating a current collaboration graph for the current time period, generating an anomaly score by comparing the current collaboration graph to the average collaboration graph, determining that the collaborative access of the one or more network resources during the current time period is anomalous by determining that the anomaly score exceeds a threshold, and, in response to the anomaly\u00a0\u2026", "num_citations": "2\n", "authors": ["354"]}
{"title": "Systems and methods for identifying non-malicious files on computing devices within organizations\n", "abstract": " The disclosed computer-implemented method for identifying non-malicious files on computing devices within organizations may include (1) identifying a file on at least one computing device within multiple computing devices managed by an organization,(2) identifying a source of the file based on examining a relationship between the file and the organization,(3) determining that the source of the file is trusted within the organization, and then (4) concluding, based on the source of the file being trusted within the organization, that the file is not malicious. Various other methods, systems, and computer-readable media are also disclosed.", "num_citations": "2\n", "authors": ["354"]}
{"title": "Systems and methods for detecting selective malware attacks\n", "abstract": " A computer-implemented method for detecting selective malware attacks is described. A website visited by a user is identified based on a number of visits to the website satisfying a predetermined threshold. A web crawl is performed on the identified website. Results of the web crawl are analyzed to determine whether the identified website includes a malicious software attack designed to selectively attack visitors to the website.", "num_citations": "2\n", "authors": ["354"]}
{"title": "Systems and methods for protecting document files from macro threats\n", "abstract": " A computer-implemented method for protecting document files from macro threats may include (1) identifying a document file that contains an embedded macro,(2) locating an event-driven programming language module that stores the embedded macro for the document file, and (3) cleaning the event-driven programming language module by removing procedures for the embedded macro within the event-driven programming language module and retaining variable definitions within the event-driven programming language module. Various other methods, systems, and computer-readable media are also disclosed.", "num_citations": "2\n", "authors": ["354"]}
{"title": "Data Space Randomization (DSR)\n", "abstract": " \u25c6 Stack: allocate local OCOs on disjoint stacks (buffer stacks) if small in number; allocate in heap if the number is high\u25c6 Static: number of disjoint memory areas statically known\u25c6 Heap: heap OCOs allocations (typically large in number) randomly distributed in a fixed number of heap memory regions", "num_citations": "2\n", "authors": ["354"]}
{"title": "Using telemetry data to detect false positives\n", "abstract": " Telemetry data concerning multiple samples convicted as malware by different endpoints is tracked over time. During a period of time in which telemetry data concerning convicted samples are tracked, specific samples can be convicted multiple times, both on a single endpoint and/or on multiple endpoints. The tracked telemetry data concerning the convicted samples is analyzed, and data that is indicative of false positives is identified. Convictions of samples can be exonerated as false positives, based on the results of analyzing the tracked telemetry data. More specifically, multiple data points from the tracked telemetry data that comprise evidence of false positives can be quantified and weighted. Where the evidence of false positives exceeds a given threshold, convictions of a given sample can be exonerated.", "num_citations": "1\n", "authors": ["354"]}
{"title": "Practical and dynamic approach to enterprise hardening\n", "abstract": " Techniques are disclosed for dynamically managing hardening policies in a client computer (eg, of an enterprise network). A hardening management application monitors activity on the client computer that is associated with a first hardening policy. The monitored activity is evaluated based on one or more metrics. Upon determining that at least one of the metrics is outside of a tolerance specified in the first hardening policy, the client computer is associated with a second hardening policy. The client computer is reconfigured based on the second hardening policy.", "num_citations": "1\n", "authors": ["354"]}
{"title": "Systems and methods for healing infected document files\n", "abstract": " A computer-implemented method for healing infected document files may include (1) receiving an electronic message directed to a target client computing system, the electronic message including a document file,(2) in response to receiving the electronic message, discovering, by a security program, that the document file is infected with potentially malicious content by, parsing the document file into separate objects and detecting that one of the separate objects is infected with potentially malicious content,(3) healing, by the security program, the infected object by removing the potentially malicious content from the object,(4) reconstructing, by the security program, the document file by reuniting the healed separate object with a remainder of the separate objects in a manner that preserves readability of the document, and (5) providing access to the readable reconstructed document file at the target client computing\u00a0\u2026", "num_citations": "1\n", "authors": ["354"]}
{"title": "Systems and methods for distinguishing code of a program obfuscated within a packed program\n", "abstract": " A computer-implemented method for distinguishing code of a program obfuscated within a packed program may include (1) retrieving memory of the packed program that includes the code of the obfuscated program in an unobfuscated state and unpacking code that unpacks the code of the obfuscated program when the packed program is executed,(2) identifying an import address table within the memory of the packed program,(3) determining that the import address table is an import address table of the code of the obfuscated program,(4) determining that a region of code within the memory of the packed program may be the code of the obfuscated program by determining that the region of code uses the import address table, and (5) performing a security operation on the region of code. Various other methods, systems, and computer-readable media are also disclosed.", "num_citations": "1\n", "authors": ["354"]}