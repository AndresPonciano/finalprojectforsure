{"title": "Arguing from hazard analysis in safety cases: a modular argument pattern\n", "abstract": " We observed that safety arguments are prone tostay too abstract, e.g. solutions refer to large packages, argumentstrategies to complex reasoning steps, contexts and assumptionslack traceability. These issues can reduce the confidence werequire of such arguments. In this paper, we investigate theconstruction of confident arguments from (i) hazard analysis(HA) results and (ii) the design of safety measures, i.e., bothused for confidence evaluation. We present an argument patternintegrating three HA techniques, i.e., FTA, FMEA, and STPA, aswell as the reactions on the results of these analyses, i.e., safetyrequirements and design increments. We provide an example ofhow our pattern can help in argument construction and discusssteps towards using our pattern in formal analysis and computer-assisted construction of safety cases.", "num_citations": "17\n", "authors": ["2276"]}
{"title": "Towards modular certification using integrated model-based safety cases\n", "abstract": " Software-intensive systems are characterized by an increasing number of features implementing complex functionalities. In many domains, these new functionalities perform more and more safety-critical tasks. To argue about the safety of such systems, Safety Cases are a proven technique that allows a systematic argumentation. Safety Cases may contain complex arguments that can be decomposed corresponding to modular system artifacts.This paper illustrates how a model-based system design can be tightly integrated with safety case arguments, to demonstrate both how safety cases link safety-specific analysis techniques like FMEA or FTA to architectural elements to provide evidence for safety argumentation, as well as how safety cases can be directly applied to efficiently guide the construction of the system architecture wrt the claims given in the safety case. We demonstrate how existing information about the system and toolassisted techniques (eg formal verification, statistical testing) can be integrated into a safety case for a convincing argument in a seamless model-based development environment.", "num_citations": "15\n", "authors": ["2276"]}
{"title": "On using results of code-level bounded model checking in assurance cases\n", "abstract": " Software bounded model checkers (BMC) are today powerful tools to perform verification at unit level, but are not used at their potential in the safety critical context. One reason for this is that model checkers often provide only incomplete results when used on real code due to restrictions placed on the environment of the system in order to facilitate the verification. In order to use these results as evidence in an assurance case, one needs to characterize the incompleteness and mitigate the assurance deficits. In this paper we present an assurance case pattern which addresses the disciplined use of successful but possibly incomplete verification results obtained through C-level bounded model checking as evidence in certification. We propose a strategy to express the confidence in incomplete verification results by complementing them with classical testing, and to mitigate the assurance deficits with\u00a0\u2026", "num_citations": "12\n", "authors": ["2276"]}
{"title": "Arguing on software-level verification techniques appropriateness\n", "abstract": " In this paper, we investigate the pondered selection of innovative software verification technology in the safety-critical domain and its implications. Verification tools perform analyses, testing or simulation activities. The compliance of the techniques implemented by these tools to fulfill standard-mandated objectives (i.e., to be means of compliance in the context of DO-178C and related supplements) should be explained to the certification body. It is thereby difficult for practitioners to use novel techniques, without a systematic method for arguing their appropriateness. Thus, we offer a method for arguing the appropriate application of a certain verification technique (potentially in combination with other techniques) to produce the evidence needed to satisfy certification objectives regarding fault detection and mitigation in a realistic avionics application via safety cases. We use this method for the choice of an\u00a0\u2026", "num_citations": "9\n", "authors": ["2276"]}
{"title": "Roadblocks on the highway to secure cars: An exploratory survey on the current safety and security practice of the automotive industry\n", "abstract": " With various advances in technology, cars evolved to highly interconnected and complex Cyber-Physical Systems. Due to this development, the security of involved components and systems needs to be addressed in a rigorous way. The resulting necessity of combining safety and security aspects during the development processes has proven to be non-trivial due to the high interference between these aspects and their respective treatment. This paper discusses the results of an exploratory survey on how organizations from the automotive industry in the Euroregion tackle the challenge of integrating safety and security aspects during system development. The observed state of practice shows that there are significant deficits in the integration of both domains. The results of the exploratory survey enabled us to identify the most common challenges of realizing an integrated approach in a practical setting\u00a0\u2026", "num_citations": "7\n", "authors": ["2276"]}
{"title": "A Safety Case Pattern for Systems with Machine Learning Components\n", "abstract": " Several standards from the domain of safety critical systems, in order to support the argumentation of the safety assurance of a system under development, recommend the construction of a safety case. This activity is guided by the objectives to be met, recommended or required by the standards along the safety lifecycle. Ongoing attempts to use Machine Learning (ML) for safety critical functionality revealed certain deficits. For instance, the widely recognized standard for functional safety of automotive systems, ISO 26262, which can be used as a basis to construct a safety case, does not reason about ML. To this end, the goal of this work is to provide a pattern for arguing about the correct implementation of safety requirements in system components based on ML. The pattern is integrated within an overall encompassing approach for safety case generation for automotive systems and its applicability is showcased on\u00a0\u2026", "num_citations": "6\n", "authors": ["2276"]}
{"title": "On computer-aided techniques for supporting safety and security co-engineering\n", "abstract": " With the increasing system interconnectivity, cyberattacks on safety-critical systems can lead to catastrophic events. This calls for a better safety and security integration. Indeed, a safety assessment contains security relevant information, such as, key safety hazards, that shall not be triggered by cyber-attacks. Guidelines, such as, SAE J3061 and ED202A, already recommend to exchange information gathered by safety and security engineers during different phases of development. However, these guidelines do not specify exactly how and which information shall be exchanged. We propose a methodology for enabling computer aided techniques for extracting security relevant information from safety analysis. In particular, we propose techniques for automatically constructing Attack Trees from safety artefacts such as fault trees, hazard analysis and safety patterns. Lastly, we illustrate these techniques on an Industry\u00a0\u2026", "num_citations": "6\n", "authors": ["2276"]}
{"title": "ExplicitCase: integrated model-based development of system and safety cases\n", "abstract": " Tools for creating safety cases currently on the market target safety experts, whose main concern is the management of safety cases. However, for safety assurance, safety experts should collaborate with technical experts, who have better understanding of technical and operational hazards. Thus, there should be a closer collaboration between the management of safety cases and technical expertise. Technical expertise may be retrieved, among others, from model-based system artifacts and processes. In order to close the gap between safety and technical expertise, we present ExplicitCase, an open-source tool for semi-automatic modeling, maintenance, and verification of safety cases integrated with system models. The advantage of this tool is two-fold. First, it enables its users to capture safety relevant information from model-based artifacts into safety cases. Second, it makes the safety cases rationale\u00a0\u2026", "num_citations": "6\n", "authors": ["2276"]}
{"title": "Integrated formal methods for constructing assurance cases\n", "abstract": " The use of formal methods in verification activities is well established in various dedicated safety standards. Deficits in the verification process may have a negative impact on the confidence of verification results. Safety standards promote the use of integrated formal methods when a single method cannot achieve the verification objective without specifying how. In this paper, we take on the problem of using outputs from integrated formal methods as evidence in assurance cases, which are used in certification of safety-critical systems. We first present two workflows that employ integrated formal methods - code review workflow and code coverage workflow - corresponding to two of the most important activities of the verification phase. Then, we show how each workflow and the outputs from its integrated formal methods can be used in creating an assurance argument. These assurance arguments offer evidence for\u00a0\u2026", "num_citations": "6\n", "authors": ["2276"]}
{"title": "FASTEN.Safe: A Model-Driven Engineering Tool to Experiment with Checkable Assurance Cases\n", "abstract": " The Goal Structuring Notation (GSN) is popular among safety engineers for modeling assurance cases. GSN elements are specified using plain natural language text, this giving safety engineers great flexibility to express their arguments. However, pure textual arguments introduce ambiguities and prevent automation. Currently, assurance cases are verified by manual reviews, which are error prone, time consuming, and not adequate for today\u2019s systems complexity and agile development methodologies. In this paper we present our research tool FASTEN.Safe, which extends GSN with a set of higher-level modeling language constructs capturing recurring argumentation patterns and integrating formal system models. This allows automatically checking 1) the intrinsic consistency of assurance models, 2) the consistency of arguments with system models and 3) the verification of safety claims themselves by using\u00a0\u2026", "num_citations": "4\n", "authors": ["2276"]}
{"title": "Checkable Safety Cases: Enabling Automated Consistency Checks between Safety Work Products\n", "abstract": " In the automotive domain, the employment of agile development is currently hindered by the fact that the safety lifecycle, which implies the creation and maintenance of safety work products, is manually executed, being a complex and expensive process. Given a change in the system under consideration, ISO 26262 recommends that the impact of that change on the safety case of the system shall be assessed and that the safety case shall be correspondingly updated. To this end, in this paper, while assuming a model-based system and safety engineering context, we propose checkable safety case models, which are semantically rich safety case models integrated with system and safety engineering models (i.e., work products of a model-based safety lifecycle). The semantically rich specification and the model integration allow for automated consistency checks between the safety case and the system, specifically\u00a0\u2026", "num_citations": "3\n", "authors": ["2276"]}
{"title": "ExplicitCase: Tool-support for Creating and Maintaining Assurance Arguments Integrated with System Models\n", "abstract": " Assurance cases are collections of standard-mandated documents that entail the specification of system's objectives and a collection of processes, development or verification evidence regarding the satisfaction of the respective objectives. A considerable amount of work has been done in the direction of modelling assurance cases, to support communication and reasoning regarding the system's safety. In this work, we present a set of features of ExplicitCase - a tool for modeling assurance cases. While there is a plethora of tools for creating and managing model-based assurance cases, the uniqueness of our tool is that it integrates assurance case models with system models created in AutoFOCUS3 (AF3) - an open-source model-based development tool for embedded software systems. While trying to keep up with state-of-the-art assurance case editors, the newly implemented features support assurance case\u00a0\u2026", "num_citations": "3\n", "authors": ["2276"]}
{"title": "Safety case driven model-based systems construction\n", "abstract": " Cyber-physical systems are characterized by an increasing number of interconnected features implementing complex functionalities. In many domains, these new functionalities perform more and more safety-critical tasks. To argue about the safety of such systems Safety Cases are a proven technique that allows a systematic argumentation. Safety Cases may contain complex arguments that can be decomposed corresponding to modular system artifacts. However, in some domains, safety cases are not well-integrated into system models and as such do not provide comprehensible and reproducible argumentation nor any evidence for argument correctness.This paper illustrates how model-based system design can be tightly integrated with safety case arguments to automatically guide the construction of the system architecture wrt the claims given in the safety case. Based on claims given by (instantiated) safety case patterns, we use model-to-model transformations to guide the construction of a safe system architecture. We demonstrate the feasibility of the introduced approach by implementing it in the AutoFOCUS3 framework, illustrating how integrated model-based design and safety cases forms a convincing argument in a seamless model-based development environment.", "num_citations": "2\n", "authors": ["2276"]}
{"title": "Safety case maintenance: A systematic literature review\n", "abstract": " Safety standards from different domains recommend the execution of a process for keeping the system safety case up\u00a0to date, whenever the system undergoes a change, however, without providing any more specific guidelines on how to do this. Even if several (semi)automated safety case maintenance approaches have been proposed in the literature, currently, in the industry, the execution of this process is still manual, being error prone and expensive. To this end, we present in this paper the results of what is, to the best of our knowledge, the first Systematic Literature Review (SLR) conducted with the goal to provide a holistic overview of state-of-the-art safety case maintenance approaches. For each identified approach, we analyze its strengths and weaknesses. We observe that existing approaches are pessimistic, identifying a larger number of safety case elements as impacted by a change than the\u00a0\u2026", "num_citations": "1\n", "authors": ["2276"]}
{"title": "Enhancing state-of-the-art safety case patterns to support change impact analysis\n", "abstract": " The new generation of safety-critical systems will be interconnected, having other systems as collaborating partners for achieving common goals (eg, interconnected cyber-physical systems such as connected cars, or collaborative embedded systems such as an advanced driver assistance system connected with different sensors). Frequent new business goals of such systems are to enable new collaborations with new types of technical systems, thus changing their operating context, which triggers the need for agile development in automotive. In safety-critical domains, a change in the operating context triggers the need for impact analysis on the artefacts generated during the safety lifecycle. Impact analyses are time and resource consuming, hindering agile development. Hence, the need for automation. Safety cases comprise safety arguments explicitly specifying the traces among the artefacts generated during the safety lifecycle. Our longer term goal is to support the automated identification of the artefacts affected by changes in the system's operating context, while proposing an automated change impact analysis executed on the system's safety case. To ensure completeness of the results of such analysis, in this work, we enhance state-ofthe-art safety case patterns by referencing all artefacts generated during the safety lifecycle. Further, we enable the explicit specification of the properties of the operating context for which we foresee certain changes. We evaluate our patterns by using them for the construction of the safety case of a simplified airbag system.", "num_citations": "1\n", "authors": ["2276"]}