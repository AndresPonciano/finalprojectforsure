{"title": "A web-based tool for managing architectural design decisions\n", "abstract": " Software architectures represent the design for describing the main parts of a software system. In software projects, different stakeholders with different roles may need to share the documentation generated during the project. Also, during the architecture construction phase we need to communicate the architecture to the stakeholders involved in the process, but the lack of tools for documenting, managing and sharing this architectural knowledge constitutes a big barrier. In other cases it can be useful to recreate the design decisions taken because such decisions are frequently lost during the development process. To cover these issues, we outline in this paper a web-based tool able to record and manage architecture design decisions.", "num_citations": "175\n", "authors": ["121"]}
{"title": "Materials for photovoltaics: State of art and recent developments\n", "abstract": " In recent years, photovoltaic cell technology has grown extraordinarily as a sustainable source of energy, as a consequence of the increasing concern over the impact of fossil fuel-based energy on global warming and climate change. The different photovoltaic cells developed up to date can be classified into four main categories called generations (GEN), and the current market is mainly covered by the first two GEN. The 1GEN (mono or polycrystalline silicon cells and gallium arsenide) comprises well-known medium/low cost technologies that lead to moderate yields. The 2GEN (thin-film technologies) includes devices that have lower efficiency albeit are cheaper to manufacture. The 3GEN presents the use of novel materials, as well as a great variability of designs, and comprises expensive but very efficient cells. The 4GEN, also known as \u201cinorganics-in-organics\u201d, combines the low cost/flexibility of polymer thin films with the stability of novel inorganic nanostructures (ie, metal nanoparticles and metal oxides) with organic-based nanomaterials (ie, carbon nanotubes, graphene and its derivatives), and are currently under investigation. The main goal of this review is to show the current state of art on photovoltaic cell technology in terms of the materials used for the manufacture, efficiency and production costs. A comprehensive comparative analysis of the four generations is performed, including the device architectures, their advantages and limitations. Special emphasis is placed on the 4GEN, where the diverse roles of the organic and nano-components are discussed. Finally, conclusions and future perspectives are summarized. View Full-Text", "num_citations": "142\n", "authors": ["121"]}
{"title": "Modeling and documenting the evolution of architectural design decisions\n", "abstract": " All software systems are built as a result of a set of design decisions that are made during the architecting phase. At present, there is still a lack of appropriate notations, methods and tools for recording and exploiting these architectural design decisions. In addition, the need for maintaining and evolving the decisions made in the past turns critical for the success of the evolution of the system. In this research paper we extend a previous work to detail those issues related to the evolution of architectural design decisions.", "num_citations": "92\n", "authors": ["121"]}
{"title": "The decision view of software architecture\n", "abstract": " Documenting software architectures is a key aspect to achieve success when communicating the architecture to different stakeholders. Several architectural views have been used with different purposes during the design process. The traditional view on software architecture defines this in terms of components and connectors. Also, the \u201c4+1\u201d view model proposes several views from the same design to satisfy the interests of the different stakeholders involved in the modelling process. In this position paper we try to go a step beyond previous proposals, to detail the idea of considering the architecture as a composition of architectural design decisions. We will propose a set of elements, information and graphical notation to record the design decisions during the modelling process.", "num_citations": "81\n", "authors": ["121"]}
{"title": "Software sustainability: Research and practice from a software architecture viewpoint\n", "abstract": " ContextModern societies are highly dependent on complex, large-scale, software-intensive systems that increasingly operate within an environment of continuous availability, which is challenging to maintain and evolve in response to the inevitable changes in stakeholder goals and requirements of the system. Software architectures are the foundation of any software system and provide a mechanism for reasoning about core software quality requirements. Their sustainability \u2013 the capacity to endure in changing environments \u2013 is a critical concern for software architecture research and practice.ProblemAccidental software complexity accrues both naturally and gradually over time as part of the overall software design and development process. From a software architecture perspective, this allows several issues to overlap including, but not limited to: the accumulation of technical debt design decisions of individual\u00a0\u2026", "num_citations": "77\n", "authors": ["121"]}
{"title": "Recent developments in graphene/polymer nanocomposites for application in polymer solar cells\n", "abstract": " Graphene (G) and its derivatives, graphene oxide (GO) and reduced graphene oxide (rGO) have enormous potential for energy applications owing to their 2D structure, large specific surface area, high electrical and thermal conductivity, optical transparency, and huge mechanical strength combined with inherent flexibility. The combination of G-based materials with polymers leads to new nanocomposites with enhanced structural and functional properties due to synergistic effects. This review briefly summarizes recent progress in the development of G/polymer nanocomposites for use in polymer solar cells (PSCs). These nanocomposites have been explored as transparent conducting electrodes (TCEs), active layers (ALs) and interfacial layers (IFLs) of PSCs. Photovoltaic parameters, such as the open-circuit voltage (V oc), short-circuit current density (J sc), fill factor (FF) and power-conversion efficiency (PCE) are compared for different device structures. Finally, future perspectives are discussed. View Full-Text", "num_citations": "71\n", "authors": ["121"]}
{"title": "Light-weight product-lines for evolution and maintenance of web sites\n", "abstract": " Software reengineering and maintenance are two classical activities in software engineering. Today, software maintenance is a time consuming task because requirements change and evolve frequently. Moreover, in certain domains, such as the Web domain is, these changes happen very often. In this way, new techniques to engineer Web sites are needed in order to reduce the time to market of Web products. In this work we describe the process of creation of a product-line using reengineering techniques, from already available products, applied to the Web domain. The aims of setting-up this product-line are to ease the maintenance of Web sites, and to accelerate the development of new ones. A product-line captures the common and variable aspects of software systems as key assets, under a common architecture in order to reduce the time to market of new software products; and software companies are\u00a0\u2026", "num_citations": "46\n", "authors": ["121"]}
{"title": "Context variability for context-aware systems\n", "abstract": " Many software systems must adapt to suit the particular context in which they are operating. Runtime variability mechanisms are suitable for systems that must configure optimally during execution.", "num_citations": "43\n", "authors": ["121"]}
{"title": "Modeling the variability of web services from a pattern point of view\n", "abstract": " In the last couple of years, Web services have been used in the development of Web systems, which are often composed by interoperable components. These interoperable components cooperate under a Client/Server style to accomplish the application integration and it is aimed to use the service components in several systems. Therefore, the development of such Web services, as high quality and reusable components is a goal to achieve. In this sense, suitable design and modeling techniques can improve the customisation of similar services built by one or more service provider. On the other hand, the development, the management and evolution of many modern software systems rely on the notion of variability and pattern-based approaches as suitable design techniques. In this work we will try to describe how the development of Web systems using Web services can be improved with a suitable\u00a0\u2026", "num_citations": "40\n", "authors": ["121"]}
{"title": "A meta-model for requirements engineering in system family context for software process improvement using CMMI\n", "abstract": " Software industries are pursuing the development of software intensive systems with a greater degree of re-use, reduction of costs, and shorter time to market. One of the successful approaches taken is based on the development of sets of similar systems where development efforts are shared. This approach is known as System Families. This article discusses an important issue in system family engineering activities: requirements modelling in system family context. The requirements must contain both the common and variable parts. Also, functional and non-functional aspects have to be considered in system family approach. Besides, an organization framework must be taken into account for requirements management. Some meta-models for these issues in system family are proposed and discussed. Based on the proposed model, a process for requirements management and development according to\u00a0\u2026", "num_citations": "28\n", "authors": ["121"]}
{"title": "A value-based approach for documenting design decisions rationale: a replicated experiment\n", "abstract": " The explicit documentation of the rationale of design decisions is a practice generally encouraged but rarely implemented in industry because of a variety of inhibitors. Known methods for Design Decisions Rationale Documentation (DDRD) are aimed to maximize the benefits for practitioners who should utilize the DDRD by imposing the burden on the developers of documenting all the potentially useful information. In our view, the adoption of a tailored DDRD, consisting only of the required set of information, would mitigate the effects of DDRD inhibitors. This paper focuses on confirming empirically the feasibility of a value-based approach for documenting the rationale behind design decisions, and the importance of different DDRD information categories. In this context, this work describes a replicated experiment carried out at the University Rey Juan Carlos of Madrid (Spain) aimed to validate previous results from\u00a0\u2026", "num_citations": "27\n", "authors": ["121"]}
{"title": "Product lines for supporting the composition and evolution of service oriented applications\n", "abstract": " In the recent years, the idea of realizing software as a service is getting wide acceptance in the software engineering community. Web services are reusable software components which can be discovered and invoked using standard Internet protocols. The development and use of service oriented systems differ from the traditional approach used in other kind of Web applications. In this position paper we try to improve the development and evolution of service oriented systems. To achieve this we propose a modification of the traditional product line approach to support composite services. We use a lightweight product line with specific variability information to facilitate Web service composition as well as the evolution of such systems.", "num_citations": "27\n", "authors": ["121"]}
{"title": "Effort estimation in capturing architectural knowledge\n", "abstract": " Capturing and using design rationale is becoming a hot topic for software architects, as architectural design decisions are now considered first class entities that should be recorded and documented explicitly. Capturing such architecture knowledge has been underestimated for several years as architects have been only focused on documenting their architectures and neglecting the rationale that led to them. The importance of recording design rationale becomes enormous for maintenance and evolution activities, as design decisions can be replayed in order to avoid highly cost architecture recovery processes. Hence, in this work we describe how architecture design decisions can be captured and documented with specific tool support. We also provide effort estimation in capturing such knowledge and we compare this with architecture modeling efforts in order to analyze the viability of knowledge capturing\u00a0\u2026", "num_citations": "25\n", "authors": ["121"]}
{"title": "Modelling variability with features in distributed architectures\n", "abstract": " Modelling the variable aspects of software architectures (SA) is key to develop product families (P-F) or product-lines (P-L). The difficulty to model this variability impacts the full life cycle of the product family, and specially its architecture. In addition, the physical view of architecture reflects most of the variability of the system. This work outlines the use of the concept of features for modelling the variable aspects in distributed systems. The goal we state here is to define the attributes needed to permit a description of system properties as well as quality-of-service (QoS) parameters, which can be applied to different parts of a distributed architecture. To do this we have extended the ideas and concepts of the FODA (Featured-Oriented Domain Analysis) features model to include numerical values able to represent the variability needed by software systems.", "num_citations": "25\n", "authors": ["121"]}
{"title": "High-Performance PEDOT: PSS/hexamethylene diisocyanate-functionalized graphene oxide nanocomposites: Preparation and properties\n", "abstract": " Graphene oxide (GO) has emerged as an ideal filler to reinforce polymeric matrices owing to its large specific surface area, transparency, flexibility, and very high mechanical strength. Nonetheless, functionalization is required to improve its solubility in common solvents and expand its practical uses. In this work, hexamethylene diisocyanate (HDI)-functionalized GO (HDI-GO) has been used as filler of a conductive polymer matrix, poly (3, 4-ethylenedioxythiophene): poly (styrenesulfonate)(PEDOT: PSS). The nanocomposites have been prepared via a simple solution casting method, and have been characterized by scanning electron microscopy (SEM), UV\u2013Vis and Raman spectroscopies, X-ray diffraction (XRD), thermogravimetric analysis (TGA), tensile tests, and four-point probe measurements to get information about how the HDI-GO functionalization degree (FD) and the HDI-GO concentration in the nanocomposite influence the final properties. SEM analysis showed a very homogenous dispersion of the HDI-GO nanosheets with the highest FD within the matrix, and the Raman spectra revealed the existence of very strong HDI-GO-PEDOT: PSS interactions. A gradual improvement in thermal stability was found with increasing HDI-GO concentration, with only a small loss in transparency. A reduction in the sheet resistance of PEDOT: PSS was found at low HDI-GO contents, whilst increasing moderately at the highest loading tested. The nanocomposites showed a good combination of stiffness, strength, ductility, and toughness. The optimum balance of properties was attained for samples incorporating 2 and 5 wt% HDI-GO with the highest FD\u00a0\u2026", "num_citations": "24\n", "authors": ["121"]}
{"title": "An ontology-based product architecture derivation approach\n", "abstract": " Software product line (SPL) engineering has proven to improve software quality and shorten development cycles, cost and time. In product line engineering, product derivation is concerned with the realization of the variability at the implementation level. However, the majority of research works focuses on instantiating the variants selected in the final product, while the derivation at the architecture level has been poorly explored. As product line engineers often customize the product architecture by hand during the application engineering phase, the derivation and customization processes of the product line architecture (PLA) might be in some cases error-prone. Consequently, in this research we present an Ontology-based product Architecture Derivation (OntoAD) framework which automates the derivation of product-specific architectures from an SPL architecture. Our solution uses a language-independent model\u00a0\u2026", "num_citations": "20\n", "authors": ["121"]}
{"title": "Context-aware architectures for building service-oriented systems\n", "abstract": " The increasing importance of Web-based applications and the use of new Internet protocols for building service oriented applications point to new directions in the construction of this kind of systems. New challenges and problems arise when moving to a service oriented approach. Many times, the implementation of real scenarios using Web services involves the use of context information according to the user needs. In this paper, we provide a scalable software architecture that can be used for different types of context-aware systems and in particular in service-oriented applications", "num_citations": "19\n", "authors": ["121"]}
{"title": "Attributes for characterizing the evolution of architectural design decisions\n", "abstract": " Software architecture has been widely used to describe the design of a software system. Its maintenance over time can be costly, especially when maintainers have to recover software architecture knowledge due to poor design documentation. Capturing design decisions is one important aspect in documenting design and even though there has been some work in this area, there has been little emphasis on the evolution of design decisions. In this paper, we analyze design decision models and the issues of not capturing evolving decisions. To tackle these issues, we propose a set of decision attributes that can be used to support evolving decision models.", "num_citations": "18\n", "authors": ["121"]}
{"title": "An analysis of variability modeling and management tools for product line development\n", "abstract": " Software variability is considered a key technique for modelling the variable parts of a software system. The importance for representing this variability is well recognized in product lines architectures. The advantage for producing multiple products under strong time to market conditions is reached through the definition of appropriate variation points as configurable options of the system. In industry, the development of large software systems requires an enormous effort for modelling and configuring multiple products. To face this problem, variability modelling tools have been proposed and used for representing and managing the variations of a system. In this work we analyze the current state of practice of some of these tools to identify their capabilities and limits and we provide suggestions for future second-generation tools.", "num_citations": "18\n", "authors": ["121"]}
{"title": "Model driven testing in product family context\n", "abstract": " The software development community pursues the development of software systems with a higher degree of reuse, reduction of costs, and shorter time to market. One of the successful mechanisms followed to achieve these goals is based on sharing the development efforts, producing sets of similar products. This approach is known as Product Family Engineering (PFE). Although the concept is a fertile ground for the application of the Model Driven Engineering, up to date testing activities have been little addressed. This paper contains a proposal of metamodel for testing, based on the UML profile for testing, but capable of being used in a Product Family Engineering context, where the identification and modelling of both the parts that are shared by all the products in the family, and those that are specific to any product is a must. The work is based on some of our experiences in the application of this approach in several industrial fields.", "num_citations": "18\n", "authors": ["121"]}
{"title": "The effect of hexamethylene diisocyanate-modified graphene oxide as a nanofiller material on the properties of conductive polyaniline\n", "abstract": " Conducting polymers like polyaniline (PANI) have gained a lot of interest due to their outstanding electrical and optoelectronic properties combined with their low cost and easy synthesis. To further exploit the performance of PANI, carbon-based nanomaterials like graphene, graphene oxide (GO) and their derivatives can be incorporated in a PANI matrix. In this study, hexamethylene diisocyanate-modified GO (HDI-GO) nanosheets with two different functionalization degrees have been used as nanofillers to develop high-performance PANI/HDI-GO nanocomposites via in situ polymerization of aniline in the presence of HDI-GO followed by ultrasonication and solution casting. The influence of the HDI-GO concentration and functionalization degree on the nanocomposite properties has been examined by scanning electron microscopy (SEM), Raman spectroscopy, X-ray diffraction (XRD), thermogravimetric analysis (TGA), tensile tests, zeta potential and four-point probe measurements. SEM analysis demonstrated a homogenous dispersion of the HDI-GO nanosheets that were coated by the matrix particles during the in situ polymerization. Raman spectra revealed the existence of very strong PANI-HDI-GO interactions via \u03c0-\u03c0 stacking, H-bonding, and hydrophobic and electrostatic charge-transfer complexes. A steady enhancement in thermal stability and electrical conductivity was found with increasing nanofiller concentration, the improvements being higher with increasing HDI-GO functionalization level. The nanocomposites showed a very good combination of rigidity, strength, ductility and toughness, and the best equilibrium of properties was\u00a0\u2026", "num_citations": "17\n", "authors": ["121"]}
{"title": "An experience report on detecting and repairing software architecture erosion\n", "abstract": " Architecture erosion constitutes the most visible effect of the degradation of design. It is a major reason to address the design debt, often caused by architectural mismatch problems. Today, the identification of design erosion is a major concern for designers and software maintainers. Adequate tools are necessary to identify and repair the debt. This paper describes our experience on identifying architectural erosion problems on existing open source software applications through the support of two well known tools. Moreover, we outline if the tools provide useful hints in repairing some of the detected problems.", "num_citations": "16\n", "authors": ["121"]}
{"title": "Software architectures for designing virtual reality applications\n", "abstract": " Software architectures are particularly useful when designing complex systems. Apart from facilitating the design, development and evolution processes, software architectures help developers who are new in the domain to understand the design issues involved, reducing the learning effort. In this work we present a software architecture for virtual reality systems. This architecture applies patterns common in other interactive systems, such as the Model-View- Controller, and also identifies new patterns proper of the VR domain, such as the scene graph. In addition, in the proposed architecture we have identified the variability points needed for adapting and evolving such VR systems.", "num_citations": "16\n", "authors": ["121"]}
{"title": "Opportunities for software reuse in an uncertain world: From past to emerging trends\n", "abstract": " Much has been investigated about software reuse since the software crisis. The development of software reuse methods, implementation techniques, and cost models has resulted in a significant amount of research over years. Nevertheless, the increasing adoption of reuse techniques, many of them subsumed under higher level software engineering processes, and advanced programming techniques that ease the way to reuse software assets, have hidden somehow in the recent years new research trends on the practice of reuse and caused the disappearance of several reuse conferences. Also, new forms of reuse like open data and feature models have brought new opportunities for reuse beyond the traditional software components. From past to present, we summarize in this research the recent history of software reuse, and we report new research areas and forms of reuse according to current needs in\u00a0\u2026", "num_citations": "15\n", "authors": ["121"]}
{"title": "Dynamic variability meets robotics\n", "abstract": " The complexity necessary for robotics software systems to dynamically respond to or handle a variety of evolving scenarios translates into serious development costs and engineering challenges. Dynamic variability is one new strategy for supporting the dynamic behavior of robotics control systems.", "num_citations": "14\n", "authors": ["121"]}
{"title": "Viability for codifying and documenting architectural design decisions with tool support\n", "abstract": " Current software architecture practices have been focused on modeling and documenting the architecture of a software system by means of several architectural views. In practice, the standard architecture documentation lacks explicit description of the decisions made and their underlying rationale, which often leads to knowledge loss. This fact strongly affects the maintenance activities as we need to spend additional effort to replay the decisions made as well as to understand the changes performed in the design. Hence, codifying this architectural knowledge is a challenging task that requires adequate tool support. In this research, we test the capabilities of Architecture Design Decision Support System (ADDSS), a web\u2010based tool for supporting the creation, maintenance, use, and documentation of architectural design decisions (ADD) with their architectures. We used ADDSS to codify architectural knowledge\u00a0\u2026", "num_citations": "14\n", "authors": ["121"]}
{"title": "Architectural modelling in product family context\n", "abstract": " The software development community pursues the development of software systems with a higher degree of reuse, reduction of costs, and shorter time to market. One of the successful mechanisms followed to achieve these goals is based on sharing the development efforts, producing sets of similar products. This approach is known as Product Family Engineering (PFE). Architectural modeling (producing architectural models) in product families is a key issue in PFE activities and it will be the main focus of this paper. First, we will propose an architectural UML meta-model for PFE, able to represent the different variations in products. This meta-model will set up the conceptual basis for two valuable sets of activities that reflect industrial best practices: one deals with effectively building and maintaining the product family architecture and the other with the automatic derivation of architectures of specific products\u00a0\u2026", "num_citations": "14\n", "authors": ["121"]}
{"title": "Collaborative context features for critical systems\n", "abstract": " Feature models and their extensions have been proposed and used over the past 20 years for modeling the commonality and variability of software systems. However, the increasing runtime demands and post-deployment configuration procedures of self-adaptive, context-aware and pervasive systems has brought the need for modeling context features. In addition, many critical systems that demand stringent collaborative features at runtime need also to share information dynamically. In this research-in-progress paper, we sketch our vision of where feature modeling should go to support collaborative aspects of systems. Our proposal suggests identifying and annotating context features models with collaborative information that becomes particularly useful for critical and swarm-based systems that require information exchange at runtime.", "num_citations": "12\n", "authors": ["121"]}
{"title": "Embedded design rationale in software architecture\n", "abstract": " The increasing interest to consider design decisions and its rationale as an inherent part of the software architecture development process has led to a number of research works that promote the capturing and use of the architecturally significant decisions. Hence, the stakeholders can keep track of the reasons of changes. This paper explores a variety of initiatives from previous works and advocates for an ldquoembedded use of design rationalerdquo in software architecting activities with tool support.", "num_citations": "12\n", "authors": ["121"]}
{"title": "An overview on quality evaluation of self-adaptive systems\n", "abstract": " Evaluation is an important concern for building and monitoring the quality of software. The complex nature of self-adaptive systems demands continuous monitoring of their behavior and execution environment, which challenge the quality of their adaptations in dynamic environments. The characteristics of self-adaptive systems demand a continuous evaluation of their performances and improvement of the adaptation process. In this chapter our objective is to identify general guidelines for the evaluation of self-adaptive systems independent of their type, application domain, or implementation details. We propose a taxonomy for the evaluation of the quality of self-adaptive systems based on five dimensions: scope, time, mechanisms, perspective, and type. Further, we identify and introduce the main available evaluation approaches and analyze them based on the proposed taxonomy. Finally, we discuss several trade\u00a0\u2026", "num_citations": "11\n", "authors": ["121"]}
{"title": "Ripple effect to evaluate the impact of changes in architectural design decisions\n", "abstract": " Software architectures are affected by evolution cycles when requirements or the system change. When architectural elements are modified other parts of the design can be impacted by these changes, and be propagated to all software products. As the frequency and depth of architectural changes may affect the stability of the architecture, it becomes important to estimate how stable or unstable an architecture is during evolution cycles. Although this problem has been addressed at the class level there are no clues how the underpinning design decisions that lead to architectural changes impact on the stability of designs. Existing ripple effect algorithms aimed to estimate the effect of changes in code are rarely used in architecture and to the best of our knowledge never used to analyze the stability of design decisions. We suggest in the paper a new ripple effect technique to evaluate how a change in a design\u00a0\u2026", "num_citations": "9\n", "authors": ["121"]}
{"title": "Two perspectives on reference architecture sustainability\n", "abstract": " In the context of software architectures, sustainability has been investigated as an important quality property to assess how well these architectures support changes over time. Several initiatives to achieve sustainable software architectures/systems can be already found. In parallel, reference architectures have served as an effective support to facilitate and standardize the development and evolution of software systems, including in complex, critical application domains. By encompassing valuable knowledge of specific domains, the reference architectures survival is considered of utmost importance, however, the most of such architectures have not been updated since their first version. Furthermore, there is a lack of works investigating how a reference architectures, by itself, can become sustainable and/or can contribute to develop sustainable systems in a domain. The main contribution of this paper is to provide a\u00a0\u2026", "num_citations": "9\n", "authors": ["121"]}
{"title": "Addss: Architecture design decision support system tool\n", "abstract": " This paper describes the ADDSS tool which enables capturing and documenting architectural design decisions in order to avoid knowledge vaporization", "num_citations": "9\n", "authors": ["121"]}
{"title": "Application of domain analysis to knowledge reuse\n", "abstract": " This paper outlines an attempt to improve problem-oriented systematic reuse methods. This work, which is part of my doctorate, consists of a model for reusing knowledge from di erent types of problems using domain analysis methods. The proposed model attempts to reuse the knowledge of analysis and design information from several types of problems grouped in several domains. It tries to improve systematic reuse so we can unify not only domain analysis methods but also classi cation methods.", "num_citations": "8\n", "authors": ["121"]}
{"title": "On opportunistic software reuse\n", "abstract": " The availability of open source assets for almost all imaginable domains has led the software industry to opportunistic design\u2014an approach in which people develop new software systems in an ad hoc fashion by reusing and combining components that were not designed to be used together. In this paper we investigate this emerging approach. We demonstrate the approach with an industrial example in which Node.js modules and various subsystems are used in an opportunistic way. Furthermore, to study opportunistic reuse as a phenomenon, we present the results of three contextual interviews and a survey with reuse practitioners to understand to what extent opportunistic reuse offers improvements over traditional systematic reuse approaches.", "num_citations": "7\n", "authors": ["121"]}
{"title": "Recent advances in healthcare software: Toward context-aware and smart solutions\n", "abstract": " This theme issue presents some of the most recent advances in and applications of software for context-aware and smart healthcare, so as to provide a view of the state of the technology.", "num_citations": "7\n", "authors": ["121"]}
{"title": "Addressing usability requirements in mobile software development\n", "abstract": " Usability is an important quality requirement for many of today\u2019s software applications, with the complexity of modern user interfaces and the quick reaction required by users demanding highly usable software. However, usability is many times poorly addressed because usability requirements often require an additional implementation effort. In addition, usability is sometimes rarely described in the software architecture so it is difficult to perceive where and how usability impacts the software design. In this chapter, we analyze the impact of two usability mechanisms in the software architecture of a mobile software application, because this kind of software demands stringent usability requirements. We also map the generic architectural responsibilities of the usability mechanisms analyzed to concrete classes in the software architecture of the mobile application supporting such functionality.", "num_citations": "7\n", "authors": ["121"]}
{"title": "Industry 4.0 reference architectures: State of the art and future trends\n", "abstract": " Industry 4.0 has led to a dramatic shift in manufacturing processes, which must be accomplished by interacting end-to-end industrial systems. While Industry 4.0 is still a big challenge for many manufacturing companies, reference architectures have been increasingly adopted in different domains to guide engineers on how their systems should interoperate and be structured. Companies have made different experiences with reference architectures for Industry 4.0. However, depending on the use cases addressed, a reference architecture may be more or less suited to support the transformation of a particular company. Besides, a complete understanding of existing representative architectures does not exist. The main goal of this work is to review existing reference architectures for Industry 4.0 and analyze them concerning their suitability for supporting Industry 4.0 processes and solutions. For this, we systematically\u00a0\u2026", "num_citations": "6\n", "authors": ["121"]}
{"title": "Towards the dynamic evolution of context-based systems-of-systems\n", "abstract": " Systems engineering has invested considerable efforts in the development of complex-large systems, often known as Systems-of-Systems (SoS). However, the systematization of current engineering practices based on the inherent complexity and size of these systems is still challenging for software engineers. In this light we focus in this paper on the evolution aspects of SoS using dynamic variability techniques. We suggest paths where runtime variability mechanisms can help to manage the evolution of such complexlarge systems.", "num_citations": "6\n", "authors": ["121"]}
{"title": "Managing software development information in global configuration management activities\n", "abstract": " Software Configuration Management (SCM) techniques have been considered the entry point to rigorous software engineering, where multiple organizations cooperate in a decentralized mode to save resources, ensure the quality of the diversity of software products, and manage corporate information to get a better return of investment. The incessant trend of Global Software Development (GSD) and the complexity of implementing a correct SCM solution grow not only because of the changing circumstances, but also because of the interactions and the forces related to GSD activities. This paper addresses the role SCM plays in the development of commercial products and systems, and introduces a SCM reference model to describe the relationships between the different technical, organizational, and product concerns any software development company should support in the global market. \u00a9 2012 Wiley\u00a0\u2026", "num_citations": "6\n", "authors": ["121"]}
{"title": "Processes for creating and exploiting architectural design decisions with tool support\n", "abstract": " Software architectures suffer of a serious lack of documented design decisions, but also an explicit definition of the processes needed to create and exploit such architectural knowledge. To address these issues, we focus on the specification of those activities that we believe should be implemented to support the creation and use of design rationale with tool support.", "num_citations": "6\n", "authors": ["121"]}
{"title": "Using dynamic software variability to manage wireless sensor and actuator networks\n", "abstract": " This paper explores the use of dynamic software variability techniques to manage Wireless Sensor and Actuator Networks (WSANs), and we describe both an architecture and a dynamic software variability mechanism that can be integrated in WSAN scenarios. Our main goal is to apply runtime variability to describe the context-aware properties of a WSAN family and manage this more efficiently by supporting dynamic changes in the structural variability that can be reflected in the configuration of the WSAN at runtime. Our approach contributes to increase self-management of WSANs based on dynamic configurable system options.", "num_citations": "5\n", "authors": ["121"]}
{"title": "Variability realization techniques and product derivation\n", "abstract": " One of the ultimate goals of the usage of variability techniques is to allow the configuration of the software products under the product line approach. As different binding times are possible, different variability implementation mechanisms can be used to realize the variability at different stages in the software development lifecycle. Once variability is defined in the architecture and implemented in code, products can be configured at the end of the product line or even reconfigured at runtime.", "num_citations": "5\n", "authors": ["121"]}
{"title": "Using map for recovering the architecture of web systems of a spanish insurance company\n", "abstract": " Software maintenance is a key activity for supporting the evolution of existing software systems but in many cases they are considered time consuming tasks. In certain systems (e.g., Web applications), changes must be performed very often and the time to carry out the maintenance activities is very short. In such cases, the need to count with suitable software architectures able to support the dynamicity of changes or new requirements becomes a need for every software project. In this work we describe how we applied the MAP method for building the architecture of a Web-based application of a Spanish insurance company. One of the goals of the company was to reduce the maintenance costs of the existing systems, which motivated to move to a product line approach and fostering the usage of reusable components. We describe a case study carried out in a Spanish insurance company to obtain a single\u00a0\u2026", "num_citations": "5\n", "authors": ["121"]}
{"title": "Current research topics and trends in the software architecture community: ICSA 2017 workshops summary\n", "abstract": " This summary reports the workshops accepted in the 1st International Conference on Software Architecture (ICSA 2017), held by Chalmers University at Gothenburg (Sweden). We gather the description of current and new research trends in different software architecture topics to provide a wide view to researchers and practitioners about the current status and trends in the field. ICSA is a premier software architecture conference that encompasses WICSA and COMPARCH conferences in one single event.", "num_citations": "4\n", "authors": ["121"]}
{"title": "A retrospective view of software maintenance and reengineering research\u2013a selection of papers from European Conference on Software Maintenance and Reengineering 2010\n", "abstract": " As a summary of past, current, and future trends in software maintenance and reengineering research, we give in this editorial a retrospective look from the past 14\u2009years to now. We provide insight on how software maintenance has evolved and on the most important research topics presented in the series of the European Conference on Software Maintenance and Reengineering. Copyright \u00a9 2011 John Wiley & Sons, Ltd.", "num_citations": "4\n", "authors": ["121"]}
{"title": "Representing variability issues in web applications: A pattern approach\n", "abstract": " Web applications have unique characteristics that require suitable software engineering practices in the development process. In this way, software architectures and pattern-based approaches are suitable design techniques for modeling purposes. But if we want to build sets of similar systems, we need to represent the common and variable aspects of such systems under an architectural point of view. Therefore, representing and managing those variable issues is a goal to achieve when designing similar software applications. In this work we will try to deal with the variability problem from a pattern point of view as well as applying this to web software products.", "num_citations": "4\n", "authors": ["121"]}
{"title": "Teaching students software architecture decision making\n", "abstract": " Making the right decisions is challenging for architects on all levels of seniority. Less experienced architects in particular perceive the transition from design problems to their solutions as hard; it is not always clear how to find suitable concepts and technologies, how to compare alternatives, and how to build consensus. Lack of experience makes it difficult to train software engineering students in the identification, selection, and collective evaluation of design alternatives. Moreover, human factors such as cognitive bias make \u201csoft\u201d topics like architecture decisions rather hard to teach. To overcome these issues and let students gain the required experience, a Spanish University ran two experiments. Undergraduate computer science students assumed different roles in collaborative decision-making tasks and design activities. They used a novel decision-modeling tool to capture and challenge the relevant\u00a0\u2026", "num_citations": "3\n", "authors": ["121"]}
{"title": "A runtime variability mechanism based on supertypes\n", "abstract": " Current runtime variability mechanisms are still maturing, and the paradigm of dynamic software product lines demand adequate solutions based on effective dynamic variability mechanisms able to manage the variability at runtime. Today, few approaches have been proposed and tested in real dynamic software products lines. In practice, the solutions suggested can be understood as runtime managers able to deal with variability at runtime. In this approach we advance previous works and we suggest an implementation of a runtime variability mechanism using the notion of Supertypes to demonstrate the effectiveness of a previous and prove how variants and variation points can be managed at runtime. This mechanism can be used to support the evolution of dynamic software product lines.", "num_citations": "3\n", "authors": ["121"]}
{"title": "Multilingual Information Access on the Web.\n", "abstract": " One way to alleviate these problems is to leverage named entities (NEs) in multilingual Web queries to better recognize and efficiently classify the relevant terms to be translated into different languages. NEs are proper nouns that can refer to, for instance, people (Barack Obama), locations (Rome), organizations (Microsoft), ideologies (capitalism), religion (Buddhism), or some domain-specific category (such as proteins, drugs, or genes in the biomedical domain). Currently, the three universally accepted categories of NE taxonomies are person, location, and organization. Today, more than half of all Web queries are related to NEs. 2 This makes identifying and classifying NEs crucial to successful information access and processing in a wide range of applications. For instance, extracting relevant NEs from tweets\u2014of which there are more than 100 million daily\u2014could help a company to assess a new product\u2019s success, health authorities to track a disease\u2019s evolution, or security agencies to identify and locate a potential terrorist. NEs are identified and categorized in raw text using a named entity recognition and classification (NERC) system. Figure 1 outlines how a NERC system works. It first splits the text into sentences, and then subdivides each sentence into lexical units called tokens. Next, the system tags parts of speech (POS) in the tokenized sentences: nouns, verbs, adjectives, and so on. Finally, it identifies and classifies", "num_citations": "3\n", "authors": ["121"]}
{"title": "Extending software architecting processes with decision-making activities\n", "abstract": " The traditional perspective on software architecture has paid much attention to architecting as a development process aimed at creating the architecture of a software system, as well as the documentation used to communicate the architecture to the stakeholders by means of several architectural views. Recently, the software architecture research community has faced the need to record, manage, and document the design decisions and the rationale that lead to such architecture. Because architectures are the result of a set of design decisions, this design rationale must be properly recorded and managed as a complementary process to the modelling activity. In this paper we detail different types of decision-making activities aimed at creating and using design decisions and how these can be supported with tool support.", "num_citations": "3\n", "authors": ["121"]}
{"title": "Evolution and maintenance of web sites: A product line model\n", "abstract": " In this chapter we describe the product line models, and show how to apply them for developing and evolving Web products. A product line captures the common and variable aspects of software systems as key assets under a common architecture. Software companies are increasingly adopting this approach in order to accelerate the development of families of similar software products. In certain domains, such as the Web systems, development and maintenance operations are required more often. New techniques to engineer Web sites are needed in order to reduce the time to market for the Web products and to maintain the systems afterward. The authors believe that understanding the notion of lightweight product line and the role that the architecture plays will help software engineers in the construction of software products, and they will be able to manage the evolution effectively against future changes.", "num_citations": "3\n", "authors": ["121"]}
{"title": "OVIBUS: A Scalable Platform for Combining Heterogeneous Components ICSR7 2002 Workshop on Component-based Software Development Processes\n", "abstract": " Component-based software development processes have achieved a great importance in the construction of software systems. Moreover, the development of applications using reusable components can reduce time-to-market. One of the main problems for developing software components is how they can inter-operate in different and heterogeneous platforms or systems. To solve this problem, several solutions have been proposed. From our point of view we believe that common platforms that make transparent the interoperability of components are necessary. In this work we outline a platform so-called OVIBUS that makes possible components interoperability between different technologies, such as: CCM, COM+, EJB, etc., in order to improve component-based software development.", "num_citations": "3\n", "authors": ["121"]}
{"title": "The new era of software reuse\n", "abstract": " For more than 40 years, software reuse has been considered the cornerstone of many software development processes in order to save development effort and costs and to increase the quality of software. The evolution of different kinds of reusable assets has been wide. For instance, on one hand, diverse and modern programming languages have brought different ways to achieve reusable code more efficiently and adapted to modern software platforms. On the other hand, diverse and modern family-oriented engineering methods have enabled the reuse of not only code but also any other engineering software-related development artefact. However, although software reuse is not mainstream in current software conferences, researchers and developers still build software with reuse in mind. Nowadays, the challenge for building smart software systems that exploit contextual information to provide a smart reaction\u00a0\u2026", "num_citations": "2\n", "authors": ["121"]}
{"title": "Software variability in dynamic environments\n", "abstract": " Software variability in dynamic environments - TUbiblio TUbiblio TU Darmstadt / ULB / TUbiblio Software variability in dynamic environments Capilla, Rafael ; Fuentes, Lidia ; Lochau, Malte (2019): Software variability in dynamic environments. In: Journal of Systems and Software, 156, S. 62-64. Elsevier, DOI: 10.1016/j.jss.., [Artikel] Offizielle URL: https://doi.org/10.1016/j.jss.. Typ des Eintrags: Artikel Erschienen: 2019 Autor(en): Capilla, Rafael ; Fuentes, Lidia ; Lochau, Malte Titel: Software variability in dynamic environments Sprache: Englisch Titel der Zeitschrift, Zeitung oder Schriftenreihe: Journal of Systems and Software Jahrgang/Volume einer Zeitschrift: 156 Verlag: Elsevier Fachbereich(e)/-gebiet(e): 18 Fachbereich Elektrotechnik und Informationstechnik 18 Fachbereich Elektrotechnik und Informationstechnik > Institut f\u00fcr Datentechnik > Echtzeitsysteme 18 Fachbereich Elektrotechnik und Informationstechnik > f\u00fcr \u2026", "num_citations": "2\n", "authors": ["121"]}
{"title": "Automating the deployment of componentized systems\n", "abstract": " Embedded and self-adaptive systems demand continuous adaptation and reconfiguration activities based on changing quality conditions and context information. As a consequence, systems have to be (re) deployed several times and software components need to be mapped onto new or existing hardware pieces. Today, the way to determine an optimal deployment in complex systems, often performed at runtime, constitutes a well-known challenge. In this paper we highlight the major problems of automatic deployment and present a research plan to reach for an UML-based solution for the deployment of componentized systems. As a first step towards a solution, we use the UML superstructure to suggest a way to redeploy UML component diagrams based on the inputs and outputs required to enact an automatic deployment process.", "num_citations": "2\n", "authors": ["121"]}
{"title": "Reengineering towards Product Lines (R2PL 2005)\n", "abstract": " Today, software intensive systems are developed more and more using product line approaches. These approaches require the definition of a product line architecture that implicitly or explicitly specifies some degree of variability. This variability is used to instantiate concrete software product instances. A product line approach not only implies reuse of architecture-level design knowledge, it also facilitates reuse of implementation-level artefacts, such as source code and executable components. The use of software product lines can reduce the cost of developing new products significantly.In practice software products are usually not developed from scratch. Also software product lines are typically introduced following an evolutionary approach. First a product line architecture is defined based on an initial set of products. Subsequently the scope of the product line is gradually extended by incorporating more existing\u00a0\u2026", "num_citations": "2\n", "authors": ["121"]}
{"title": "Variability Description in Requirements for Product Family Support\n", "abstract": " Product Lines and Product Family Engineering are a very promising area for developing intensive software systems. The construction of these software products and reusable components are supported by a software architecture that provides the means for customizing similar products from the same design. One of the problems for deriving a suitable software architecture is the transition from the requirements to the design because of the existence of requirements common to the domain and a set of different requirements for the variety of products we want to build. This variability makes complex the trace from the analysis to the design phase and vice-versa. In this work we deal with the problem of representing these requirements and how they can be enriched for supporting the variability of the products we want to build. Also, this would have positive effects for traceability purposes under common maintenance processes.", "num_citations": "2\n", "authors": ["121"]}
{"title": "A Hierarchical Domain Classification System for Reuse, 6th SCI\n", "abstract": " Knowledge reuse is one of the most difficult areas in the reuse field. The reuse of high abstraction level information such as analysis and design information among others is not an easy task. The lack of systematic knowledge reuse methods as well as formalization problems related with domain modelling topics are key questions we need to solve. One of these problems is how to perform a classification process of high level information or in other words which classification system should we use to organize the knowledge we want to retireve in a effective way. The classification of similar problems grouped by domains is key for search and retrieval tasks and for finding reusable solutions belonging to similar problems. The lack of classification systems concerning to analysis and design information as well as domain and problems knowledge have take us to propose in this paper a classification method to organize\u00a0\u2026", "num_citations": "2\n", "authors": ["121"]}
{"title": "A variability modeling and transformation approach for safety-critical systems\n", "abstract": " Safety-critical autonomous systems are becoming highly variant-intensive with thousands of variations points within a single product. Modeling these systems requires the specification of safety properties, but the diversity of these properties makes hard to configure these systems manually to prevent emerging hazards and fault behaviors. Because existing software variability techniques provide rudimentary mechanisms for mapping variability constructs to functional safety models, we describe in this paper an experience report showing how a novel annotative modeling approach and tool can be used to derive system models enriched with functional safety information. We validate our approach using a case study from the automotive domain and we estimate the effort reduction in the tasks comparing our approach with two similar tools.", "num_citations": "1\n", "authors": ["121"]}
{"title": "Usability implications in software architecture: The case study of a mobile app\n", "abstract": " Usability is a highly desired but often ignored software quality. Effective user interfaces tend to increase learnability, effectiveness and user satisfaction. But usability is often neglected in the early stages of software development and is thus frequently not address in a system\u2019s architectural design. Furthermore, because usability is often neglected or deferred, it is difficult to estimate the effort specifically spent on adding or improving usability mechanisms in the software architecture and in code. In this work, we present a case study where we analyze the impact of introducing a variety of usability mechanisms to a mobile application and we report on the architectural changes that must be made in the software architecture to accommodate them. We also report on the additional code required to implement these usability mechanisms and we investigate the users\u2019 satisfaction of combining and using several usability\u00a0\u2026", "num_citations": "1\n", "authors": ["121"]}
{"title": "Experience in the Use of Social Software to Support Student Learning in University Courses of Science and Engineering Degrees\n", "abstract": " A wiki is an easy-to-use online tool for teachers and students, as it is a collaborative website that provides the opportunity to develop and modify its content to every member in an interactive and fast way. This paper comparatively describes experiences in the implementation of wikis as voluntary activities in first-year courses in a degree in Chemistry and third-year courses in a degree in Telecommunication System Engineering. The main goal of using the wikis was to achieve collaboration among students to generate knowledge. The developed methodology was applied to the resolution of exercises, problems, and test questions, as well as to the elaboration of class notes and a bilingual glossary. The approach turned the students into active learners, increasing their interest in the course contents, promoting knowledge exchange among students and encouraging the self-management of their learning process. The role of the teacher was to provide feedback to the students in order to ensure the accuracy of the contents. Four different patterns were distinguished among the students according to their participation level in the wiki. The students who were most committed to the courses were also the most involved in the wikis, and the combination resulted in the students\u2019 success. The results obtained for the degree in Chemistry were better than those of the degree in Telecommunication System Engineering, which was ascribed to the increased connection among the first-year students. The didactic strategy was very positive, although the percentage of participation in the wikis was somewhat low, in particular for the third-year students, who were\u00a0\u2026", "num_citations": "1\n", "authors": ["121"]}
{"title": "New Opportunities for Software Reuse: 17th International Conference, ICSR 2018, Madrid, Spain, May 21-23, 2018, Proceedings\n", "abstract": " This book constitutes the refereed proceedings of the 17th International Conference on Software Reuse, ICSR 2018, held in Madrid, Spain, in May 2018. The 9 revised full papers and 2 short papers presented were carefully reviewed and selected from 29 submissions. The papers are organized in the following topical sections: variability management; hierarchies and reuse measures; dependencies and traceability; and software product lines, features and reuse of code rewriters.", "num_citations": "1\n", "authors": ["121"]}
{"title": "Utilizaci\u00f3n de wikis como recurso docente en estudios universitarios de Ingenier\u00eda en Telecomunicaci\u00f3n\n", "abstract": " [ES] Una wiki es una herramienta on-line de uso sencillo para profesores y alumnos. Este software gratuito permite la edici\u00f3n de p\u00e1ginas web a todos los usuarios, no requiriendo coincidencia ni espacial ni temporal. El objetivo principal para su empleo en docencia universitaria es lograr la colaboraci\u00f3n entre estudiantes en la generaci\u00f3n de contenidos. Con esta metodolog\u00eda los estudiantes se convierten en los editores exclusivos y responsables directos del producto final, fomentando as\u00ed el autocontrol y la autogesti\u00f3n sobre su propio aprendizaje. Los contenidos a desarrollar en una wiki cubren un amplio espectro: apuntes de la asignatura, ensayos, material audiovisual o ejercicios propuestos para resolver de forma colaborativa. El profesorado que asiste la wiki proporciona feedback a sus alumnos, los tutoriza y gu\u00eda velando por la veracidad del material.", "num_citations": "1\n", "authors": ["121"]}
{"title": "Architecting Virtual Reality Systems\n", "abstract": " Virtual reality systems are a kind of complex software systems that need a lot of effort and resources during its development phase. Because rigid and monolithic approaches for these systems have been used in the past, maintenance and evolution activities become difficult tasks to carry out. Today, software architectures are used for designing more maintainable and modular systems, but previous experiences in the virtual reality field didn\u2019t pay much attention to the usage of appropriate architecture descriptions. In this chapter we describe how the design of virtual reality systems can be improved with software architectures. Our main goal is to provide guidance in the design of virtual reality systems that can be reused for similar applications. A software architecture-centric approach is proposed and used to tackle certain problems that affect the construction of this kind of software intensive systems.", "num_citations": "1\n", "authors": ["121"]}
{"title": "An User Model for an Effective Medical Information Search in the Web\n", "abstract": " IVbboclyquestions the power ofinjbrmation dissemination, of'lhternet, Likewise, nobocij, probably could say preciselyneither the quantityofitzlbrmationpresent on, theIVettoddy, nor ofwhat kindit is,", "num_citations": "1\n", "authors": ["121"]}