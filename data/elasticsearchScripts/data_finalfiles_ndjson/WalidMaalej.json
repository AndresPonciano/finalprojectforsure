{"title": "How do users like this feature? a fine grained sentiment analysis of app reviews\n", "abstract": " App stores allow users to submit feedback for downloaded apps in form of star ratings and text reviews. Recent studies analyzed this feedback and found that it includes information useful for app developers, such as user requirements, ideas for improvements, user sentiments about specific features, and descriptions of experiences with these features. However, for many apps, the amount of reviews is too large to be processed manually and their quality varies largely. The star ratings are given to the whole app and developers do not have a mean to analyze the feedback for the single features. In this paper we propose an automated approach that helps developers filter, aggregate, and analyze user reviews. We use natural language processing techniques to identify fine-grained app features in the reviews. We then extract the user sentiments about the identified features and give them a general score across all\u00a0\u2026", "num_citations": "568\n", "authors": ["1473"]}
{"title": "User feedback in the appstore: An empirical stud\n", "abstract": " Application distribution platforms - or app stores - such as Google Play or Apple AppStore allow users to submit feedback in form of ratings and reviews to downloaded applications. In the last few years, these platforms have become very popular to both application developers and users. However, their real potential for and impact on requirements engineering processes are not yet well understood. This paper reports on an exploratory study, which analyzes over one million reviews from the Apple AppStore. We investigated how and when users provide feedback, inspected the feedback content, and analyzed its impact on the user community. We found that most of the feedback is provided shortly after new releases, with a quickly decreasing frequency over time. Reviews typically contain multiple topics, such as user experience, bug reports, and feature requests. The quality and constructiveness vary widely, from\u00a0\u2026", "num_citations": "546\n", "authors": ["1473"]}
{"title": "Bug report, feature request, or simply praise? on automatically classifying app reviews\n", "abstract": " App stores like Google Play and Apple AppStore have over 3 Million apps covering nearly every kind of software and service. Billions of users regularly download, use, and review these apps. Recent studies have shown that reviews written by the users represent a rich source of information for the app vendors and the developers, as they include information about bugs, ideas for new features, or documentation of released features. This paper introduces several probabilistic techniques to classify app reviews into four types: bug reports, feature requests, user experiences, and ratings. For this we use review metadata such as the star rating and the tense, as well as, text classification, natural language processing, and sentiment analysis techniques. We conducted a series of experiments to compare the accuracy of the techniques and compared them with simple string matching. We found that metadata alone results\u00a0\u2026", "num_citations": "413\n", "authors": ["1473"]}
{"title": "On the automatic classification of app reviews\n", "abstract": " App stores like Google Play and Apple AppStore have over 3\u00a0million apps covering nearly every kind of software and service. Billions of users regularly download, use, and review these apps. Recent studies have shown that reviews written by the users represent a rich source of information for the app vendors and the developers, as they include information about bugs, ideas for new features, or documentation of released features. The majority of the reviews, however, is rather non-informative just praising the app and repeating to the star ratings in words. This paper introduces several probabilistic techniques to classify app reviews into four types: bug reports, feature requests, user experiences, and text ratings. For this, we use review metadata such as the star rating and the tense, as well as, text classification, natural language processing, and sentiment analysis techniques. We conducted a series of\u00a0\u2026", "num_citations": "189\n", "authors": ["1473"]}
{"title": "Automatically classifying functional and non-functional requirements using supervised machine learning\n", "abstract": " In this paper, we take up the second RE17 data challenge: the identification of requirements types using the \"Quality attributes (NFR)\" dataset provided. We studied how accurately we can automatically classify requirements as functional (FR) and non-functional (NFR) in the dataset with supervised machine learning. Furthermore, we assessed how accurately we can identify various types of NFRs, in particular usability, security, operational, and performance requirements. We developed and evaluated a supervised machine learning approach employing meta-data, lexical, and syntactical features. We employed under-and over-sampling strategies to handle the imbalanced classes in the dataset and cross-validated the classifiers using precision, recall, and F1 metrics in a series of experiments based on the Support Vector Machine classifier algorithm. We achieve a precision and recall up to ~92% for automatically\u00a0\u2026", "num_citations": "121\n", "authors": ["1473"]}
{"title": "When users become collaborators: towards continuous and context-aware user input\n", "abstract": " Current requirements engineering practices for gathering user input are characterized by a number of communication gaps between users and engineers, which might lead to wrong requirements. The problem situations and context which underlie user input are either gathered back in time, or submitted with wrong a level of details. We think that making user input a first order concern of both software processes and software systems harbours many innovation opportunities. We propose and discuss a continuous and context-aware approach for communicating user input to engineering teams and other users, by a) instrumenting the problem domain, b) proactively recommending to share feedback and c) annotating graphical interfaces.", "num_citations": "100\n", "authors": ["1473"]}
{"title": "Safe: A simple approach for feature extraction from app descriptions and app reviews\n", "abstract": " A main advantage of app stores is that they aggregate important information created by both developers and users. In the app store product pages, developers usually describe and maintain the features of their apps. In the app reviews, users comment these features. Recent studies focused on mining app features either as described by developers or as reviewed by users. However, extracting and matching the features from the app descriptions and the reviews is essential to bear the app store advantages, e.g. allowing analysts to identify which app features are actually being reviewed and which are not. In this paper, we propose SAFE, a novel uniform approach to extract app features from the single app pages, the single reviews and to match them. We manually build 18 part-of-speech patterns and 5 sentence patterns that are frequently used in text referring to app features. We then apply these patterns with\u00a0\u2026", "num_citations": "97\n", "authors": ["1473"]}
{"title": "Potentials and challenges of recommendation systems for software development\n", "abstract": " By surveying recommendation systems in software development, we found that existing approaches have been focusing on\" you might like what similar developers like\" scenarios. However structured artifacts and semantically well-defined development activities bear large potentials for further recommendation scenarios. We introduce a novel\" landscape\" of software development recommendation systems and line out several scenarios for knowledge sharing and collaboration. Basic challenges are improving context-awareness and particularly addressing information providers.", "num_citations": "83\n", "authors": ["1473"]}
{"title": "On the socialness of software\n", "abstract": " Conventional software engineering processes are rather transactional and lack a common theory for the involvement of users and their communities. Users are regarded as pure consumers, who are, at most, able to report issues. In the age of easy knowledge access and social media, discounting the users of software might threaten its success. Potentially valuable experiences and volunteered resources get lost. Frustrated users might even meet in social communities to argue against the software and harm its reputation. The goal of this research is to revolutionize the role of users, dissolving the boundaries to software engineers. We propose a novel framework for increasing the software social ness, being the degree of user and community involvement in the software lifecycle. Our framework consists of a benchmark, a process, and a reference architecture. The benchmark includes metrics for assessing and\u00a0\u2026", "num_citations": "78\n", "authors": ["1473"]}
{"title": "Group decision support for requirements negotiation\n", "abstract": " Requirements engineering is one of the most critical phases in software development. Requirements verbalize decision alternatives that are negotiated by stakeholders. In this paper we present the results of an empirical analysis of the effects of applying group recommendation technologies to requirements negotiation. This analysis has been conducted within the scope of software development projects at our university where development teams were supported with group recommendation technologies when deciding which requirements should be implemented. A major result of the study is that group recommendation technologies can improve the perceived usability (in certain cases) and the perceived quality of decision support. Furthermore, it is not recommended to disclose preferences of individual group members at the beginning of a decision process \u2013 this could lead to an insufficient exchange of\u00a0\u2026", "num_citations": "65\n", "authors": ["1473"]}
{"title": "How do developers blog? an exploratory study\n", "abstract": " We report on an exploratory study, which aims at understanding how software developers use social media compared to conventional development infrastructures. We analyzed the blogging and the committing behavior of 1,100 developers in four large open source communities. We observed that these communities intensively use blogs with one new entry about every 8 hours. A blog entry includes 14 times more words than a commit message. When analyzing the content of the blogs, we found that most popular topics represent high-level concepts such as functional requirements and domain concepts. Source code related topics are covered in less than 15% of the posts. Our results also show that developers are more likely to blog after corrective engineering and management activities than after forward engineering and re-engineering activities. Our findings call for a hypothesis-driven research to further\u00a0\u2026", "num_citations": "62\n", "authors": ["1473"]}
{"title": "Mining user rationale from software reviews\n", "abstract": " Rationale refers to the reasoning and justification behind human decisions, opinions, and beliefs. In software engineering, rationale management focuses on capturing design and requirements decisions and on organizing and reusing project knowledge. This paper takes a different view on rationale written by users in online reviews. We studied 32,414 reviews for 52 software applications in the Amazon Store. Through a grounded theory approach and peer content analysis, we investigated how users argue and justify their decisions, e.g. about upgrading, installing, or switching software applications. We also studied the occurrence frequency of rationale concepts such as issues encountered or alternatives considered in the reviews and found that assessment criteria like performance, compatibility, and usability represent the most pervasive concept. We then used the truth set of manually labeled review sentences\u00a0\u2026", "num_citations": "61\n", "authors": ["1473"]}
{"title": "Can development work describe itself?\n", "abstract": " Work descriptions are informal notes taken by developers to summarize work achieved in a particular session. Existing studies indicate that maintaining them is a distracting task, which costs a developer more than 30 min. a day. The goal of this research is to analyze the purposes of work descriptions, and find out if automated tools can assist developers in efficiently creating them. For this, we mine a large dataset of heterogeneous work descriptions from open source and commercial projects. We analyze the semantics of these documents and identify common information entities and granularity levels. Information on performed actions, concerned artifacts, references and new work, shows the work management purpose of work descriptions. Information on problems, rationale and experience shows their knowledge sharing purpose. We discuss how work description information, in particular information used for\u00a0\u2026", "num_citations": "57\n", "authors": ["1473"]}
{"title": "Towards a research agenda for recommendation systems in requirements engineering\n", "abstract": " To push the right information to the right person at the right time, classical work on recommendation systems focuses on optimizing the rating of recommended items. Recent research on context-awareness and knowledge exchange shows potentials of recommendation systems in engineering work. Requirements engineering can also profit from recommendation systems in several scenarios, including maintaining requirements, sharing collaboration information and reusing templates. By describing these scenarios and identifying key realization challenges, this paper presents a vision on recommendation systems in requirements engineering.", "num_citations": "56\n", "authors": ["1473"]}
{"title": "Democratic mass participation of users in requirements engineering?\n", "abstract": " A large part of Requirements Engineering is concerned with involving system users, capturing their needs, and getting their feedback. As users are becoming more and more demanding, markets and technologies are evolving fast, and systems are getting more and more individual, a broad and systematic user involvement in Requirements Engineering is becoming more important than ever. This paper presents the idea of pushing user involvement in Requirements Engineering to its extreme by systematically delegating the responsibility for developing the requirements and deciding about future releases to the crowd of users. We summarize the pros and cons of this vision, its main challenges, and sketch promising solution concepts, which have been proposed and used in E-Participation and E-Democracy. We discussed our vision with ten experts from the fields of Requirements Engineering, politics, psychology\u00a0\u2026", "num_citations": "54\n", "authors": ["1473"]}
{"title": "Recommendation and decision technologies for requirements engineering\n", "abstract": " Requirements engineering (RE) is considered as one of the most critical phases in the software life-cycle, and poorly implemented RE processes are among the major risks for project failure. Stakeholders are often faced with the challenge that the complexity of information outstrips their capability to survey it and to decide about which requirements should be taken into account. Additionally, preferences regarding a set of requirements are typically not known beforehand but constructed within the scope of a decision making process. In this paper we introduce a simple application scenario and discuss recommendation and decision technologies which can be exploited for proactively supporting stakeholders in their decision making.", "num_citations": "52\n", "authors": ["1473"]}
{"title": "A lightweight approach for knowledge sharing in distributed software teams\n", "abstract": " In collocated software development teams, informal communication is the key enabler for sharing knowledge. In distributed teams, development infrastructures have to fill communication gaps with light-weight articulation and sharing facilities for evolving development knowledge. We propose an ontology-based framework to capture, access and share developers\u2019 experiences in a decentralized, contextualized manner. Capturing developers\u2019 interaction with related artifacts and providing a Wiki-like annotation approach triggers knowledge capture. Integrated semantic search and recommendation fosters knowledge access and sharing. Our framework enables distributed teams to become more effective by learning from each other\u2019s experiences, e.g. on reusing specific components and handling semantic errors.", "num_citations": "51\n", "authors": ["1473"]}
{"title": "How do open source communities blog?\n", "abstract": " We report on an exploratory study, which aims at understanding how software communities use blogs compared to conventional development infrastructures. We analyzed the behavior of 1,100 bloggers in four large open source communities, distinguishing between committing bloggers and other community members. We observed that these communities intensively use blogs with one new entry every 8 h. A blog entry includes 14 times more words than a commit message. When analyzing the content of the blogs, we found that committers and others bloggers write about similar topics. Most popular topics in committers\u2019 blogs represent high-level concepts such as features and domain concepts, while source code related topics are discussed in 15% of their posts. Other community members frequently write about community events and conferences as well as configuration and deployment topics. We found\u00a0\u2026", "num_citations": "50\n", "authors": ["1473"]}
{"title": "From work to word: How do software developers describe their work?\n", "abstract": " Developers take notes about their work sessions, either to remember the work status and share it with collaborators, or because employers explicitly require this for project management matters. We report on an exploratory study which aims at understanding how software developers describe their work. We analyzed more than 750,000 work descriptions of about 2,000 professionals taken over 8 years in three settings. We observed several similarities in the content and time meta-data of work descriptions. Most frequent terms, such as top-30 performed activities, are used consistently. Particular templates such as ldquoACTION concerning ARTIFACT because of CAUSErdquo occur frequently. Developers described sessions that last 30-120 min. 4-16 times a day. Maintaining diaries seems to consume between 3-6% of the total work time, and in 10% of the sessions, developers did not describe their work in sufficient\u00a0\u2026", "num_citations": "49\n", "authors": ["1473"]}
{"title": "Task-first or context-first? tool integration revisited\n", "abstract": " If software engineering tools are not \"properly integrated\", they can reduce engineers' productivity. Associating and retrieving information scattered across the tools become unsystematic and inefficient. Our work provides empirical evidence on what is a \"poor\" and a \"proper\" tool integration, focusing on practitioners' perspectives. We interviewed 62 engineers and analyzed the content of their project artifacts. We identified problem situations and practices related to tool integration. Engineers agreed that tool integration approaches must support change, heterogeneity and automatic linking of change to context. To quantify our results, we conducted a field experiment with 27 and a survey with 782 subjects. We found a strong correlation between change frequency and preferred integration approaches. Particularly in projects with short release cycles, tasks should be used to link information handled by different tools\u00a0\u2026", "num_citations": "44\n", "authors": ["1473"]}
{"title": "Understanding usage states on mobile devices\n", "abstract": " Nowadays, mobile apps are used for nearly every situation: for planning the day, communicating with colleagues, ordering goods, or entertaining and socializing. To understand users expectations in each situation and to provide context-aware services, researchers and app vendors started to capture users' interaction with the smartphone and to model user's behavior. This paper reports on a behavioral study based on app usage data logged over one year and the corresponding apps descriptions from the app store. Using Topic Modeling and clustering techniques, we segmented the usage data into meaningful clusters that correspond to different\" states\", in which users normally use their smartphone, eg socializing or consuming media. Researchers and app-vendors can use the insights from our work to improve their contextual recommendation techniques and the overall usage experience.", "num_citations": "42\n", "authors": ["1473"]}
{"title": "Towards understanding and detecting fake reviews in app stores\n", "abstract": " App stores include an increasing amount of user feedback in form of app ratings and reviews. Research and recently also tool vendors have proposed analytics and data mining solutions to leverage this feedback to developers and analysts, e.g., for supporting release decisions. Research also showed that positive feedback improves apps\u2019 downloads and sales figures and thus their success. As a side effect, a market for fake, incentivized app reviews emerged with yet unclear consequences for developers, app users, and app store operators. This paper studies fake reviews, their providers, characteristics, and how well they can be automatically detected. We conducted disguised questionnaires with 43 fake review providers and studied their review policies to understand their strategies and offers. By comparing 60,000 fake reviews with 62 million reviews from the Apple App Store we found significant differences\u00a0\u2026", "num_citations": "37\n", "authors": ["1473"]}
{"title": "Which traceability visualization is suitable in this context? a comparative study\n", "abstract": " Traceability supports users in describing and tracking the relationships between software artifacts. Techniques such as traceability matrices and graphs visualize these relationships and help users to access and understand them. Researchers agree that different visualization techniques add valuable information in different contexts. However, there is an ambiguity which visualization is suitable for which context. To clarify this we conducted a comparative study of common visualization techniques, including an experiment and interviews with 24 participants.               We found that traceability matrices and graphs are most preferred in management tasks, while hyperlinks are preferred in implementation and testing tasks. Traceability lists seem to be the least attractive technique for most participants. Graphs are preferred to navigate linked artifacts, while matrices are appropriate for overview. Hyperlinks are\u00a0\u2026", "num_citations": "35\n", "authors": ["1473"]}
{"title": "Classifying multilingual user feedback using traditional machine learning and deep learning\n", "abstract": " With the rise of social media like Twitter and of software distribution platforms like app stores, users got various ways to express their opinion about software products. Popular software vendors get user feedback thousandfold per day. Research has shown that such feedback contains valuable information for software development teams such as problem reports or feature and support inquires. Since the manual analysis of user feedback is cumbersome and hard to manage many researchers and tool vendors suggested to use automated analyses based on traditional supervised machine learning approaches. In this work, we compare the results of traditional machine learning and deep learning in classifying user feedback in English and Italian into problem reports, inquiries, and irrelevant. Our results show that using traditional machine learning, we can still achieve comparable results to deep learning, although we\u00a0\u2026", "num_citations": "32\n", "authors": ["1473"]}
{"title": "Managing requirements knowledge\n", "abstract": " This book synthesizes the work of the managing requirements knowledge (MARK) community during the last 5 years. The first idea to organize a workshop on this topic came to our minds in winter 2007. We were both working on our Ph. D. projects at the Technische Universit\u00e4t M\u00fcnchen (TUM) under the supervision of Bernd Br\u00fcgge. Anil was focusing on software product lines, while Walid was looking at the application of ontologies and machine learning to collaborative software engineering, in particular during bug fixing and API reuse. Our fields of interest seemed divergent at first glance. However, after a couple of discussions\u2013also with colleagues from industry\u2013we found that some of the problems we were trying to address are very similar. Valuable experiences and knowledge gained in the course of software projects, in particular during the work with requirements, remain tacit in the mind of people. The same\u00a0\u2026", "num_citations": "32\n", "authors": ["1473"]}
{"title": "An overview of recommender systems in requirements engineering\n", "abstract": " Requirements engineering (RE) is considered as one of the most critical phases in software development. Poorly implemented RE processes are still one of the major risks for project failure. As a consequence, we can observe an increasing demand for intelligent software components that support stakeholders in the completion of RE tasks. In this chapter, we give an overview of the research dedicated to the application of recommendation technologies in RE. On the basis of a literature analysis, we exemplify the application of recommendation technologies in different scenarios. In this context, the approaches of collaborative filtering, content-based filtering, clustering, knowledge-based recommendation, group-based recommendation, and social network analysis are discussed. With the goal to stimulate further related research, we conclude the chapter with a discussion of issues for future work.", "num_citations": "30\n", "authors": ["1473"]}
{"title": "On user rationale in software engineering\n", "abstract": " Rationale refers to the reasoning and justification behind human decisions, opinions, and beliefs. In software engineering, rationale management focuses on capturing design and requirements decisions and on organizing and reusing project knowledge. This paper takes a different view on rationale written by users in online reviews. We studied 32,414 reviews for 52 software applications in the Amazon Store. Through a grounded theory approach and peer content analysis, we investigated how users argue and justify their decisions, e.g., about upgrading, installing, or switching software applications. We also studied the occurrence frequency of rationale concepts such as issues encountered or alternatives considered in the reviews and found that assessment criteria like performance, compatibility, and usability represent the most pervasive concept. We identified a moderate positive correlation between\u00a0\u2026", "num_citations": "28\n", "authors": ["1473"]}
{"title": "Towards effective management of software knowledge exploiting the semantic wiki paradigm\n", "abstract": " The increasing number of distributed software projects together with the success of agile development methodologies raise new challenges for collaboration and knowledge sharing. While traditional centralized knowledge management solutions fail to address these challenges, Semantic Wikis bring new potentials, pro- viding lightweight, incremental and machine-readable knowledge articulation and sharing facilities. In this paper we survey the state-of-the-art of Semantic Wikis. We then discuss how they can cope with difficulties of conventional Wikis to efficiently manage knowledge created in software engineering projects.", "num_citations": "27\n", "authors": ["1473"]}
{"title": "Making sense of user comments: Identifying journalists\u2019 requirements for a comment analysis framework\n", "abstract": " study design. We first developed a mock-up of a software framework for the analysis of user comments based on a literature review and our own preliminary research on audience participation in journalism and user review analysis. We then conducted two group discussions within a large German online newsroom, in which we surveyed the practices around user comments within dai-3 For further information see also our project website: https://scan. informatik. uni-hamburg. de 338 SCM, 6. Jg., 4/2017 Full Paper ly working routines, discussed the mock-up, and identified additional requirements members of the newsroom may have for user comment analysis tools. Finally, we consolidated the requirements for such a framework and reiterated a mock-up that visualizes those requirements. 2. Related research: How journalism and other fields handle user comments User comments on news websites integrate more\u00a0\u2026", "num_citations": "26\n", "authors": ["1473"]}
{"title": "On lawful disclosure of personal user data: What should app developers do?\n", "abstract": " The proliferation of mobile devices and apps together with the increasing public interest in privacy and data protection matters necessitate a more careful precaution for legal compliance. As apps are becoming more popular, app developers can expect an increased scrutiny of privacy practices in the future. In this paper, we focus on the problem of the disclosure of personal data to third parties and the role of app developers to enhance user privacy and data protection in the app ecosystem. We discuss the EU data protection principles and apply them to the mobile app context. We then derive requirements and guidelines for app developers on how to contribute to the protection of their users' data.", "num_citations": "26\n", "authors": ["1473"]}
{"title": "Applications of ontologies in collaborative software development\n", "abstract": " Making distributed teams more efficient is one main goal of Collaborative Software Development (CSD) research. To this end, ontologies, which are models that capture a shared understanding of a specific domain, provide key benefits. Ontologies have formal, machine-interpretable semantics that allow to define semantic mappings for heterogeneous data and to infer implicit knowledge at run-time. Extending development infrastructures and software architectures with ontologies (of problem and solution domains) will address coordination and knowledge sharing challenges in activities such as documentation, requirements specification               , component reuse, error handling, and test case management. The purpose of this article is to provide systematic account of how ontologies can be applied in CSD, and to describe benefits of both existing applications such as \u201csemantic wikis               \u201d as well as\u00a0\u2026", "num_citations": "25\n", "authors": ["1473"]}
{"title": "Towards context-aware surveys using bluetooth beacons\n", "abstract": " Surveys are nowadays used for a variety of physical and digital services to collect feedback from users. They are often difficult to fill in and might have only a limited value since users\u2019 context is often either missing or tedious to be entered manually. Research has shown that simplifying the forms and enriching them with contextual information can improve the quality and quantity of user feedback. We propose a context-aware survey approach by monitoring the user context with Bluetooth Low Energy devices. We implemented and evaluated a prototype that infers the location and usage context and adapts the feedback forms accordingly.", "num_citations": "20\n", "authors": ["1473"]}
{"title": "Assisting engineers in switching artifacts by using task semantic and interaction history\n", "abstract": " Recent empirical studies show that software engineers use 5 tools and 14 artifacts on average for a single task. As development work is frequently interrupted and several simultaneous tasks are performed in parallel, engineers need to switch many times between these tools and artifacts. A lot of time gets wasted in repeatedly locating, reopening or selecting the right artifacts needed next. To address this problem we introduce Switch!, a context-aware artifact recommendation and switching tool. Switch! assists engineers in switching artifacts based on the type of the development task and the interaction history.", "num_citations": "19\n", "authors": ["1473"]}
{"title": "Position paper: The social dimension of sustainability in requirements engineering\n", "abstract": " Nowadays mobile phones and smartphones are common not only in mega cities in developed countries but also in rural areas in emerging and developing countries. Technological progress will enable more and more people from different socio-cultural backgrounds and with different needs to use software services with up-to-date technical devices. End users are increasingly expecting to use software services in their \u201cown way\u201d. They expect to customize the functionality, contribute to the content, and share information with others. The requirements of users differ drastically depending on the socio-cultural context. This is why we must raise the following questions: What is the impact of a society or an economy on software and vice versa? Do we need new approaches in requirements engineering to deal with the social dimension of sustainability? In this paper we aim to bringing forth a discussion about social sustainable software.", "num_citations": "18\n", "authors": ["1473"]}
{"title": "Find, understand, and extend development screencasts on youtube\n", "abstract": " A software development screencast is a video that captures the screen of a developer working on a particular task and explaining implementation details. Due to the increased popularity of development screencasts eg, on YouTube, we study how and to what extent they can be used as additional source of knowledge to answer developers\u2019 questions, for example about the use of a specific API. We first study the difference between development screencasts and other types of screencasts using video frame analysis. When comparing frames with the Cosine algorithm, developers can expect ten development screencasts in the top 20 out of 100 different YouTube videos. We then extracted popular development topics. These were: database operations, system set-up, plug-in development, game development, and testing. We also identified six recurring tasks performed in development screencasts, such as object\u00a0\u2026", "num_citations": "17\n", "authors": ["1473"]}
{"title": "A survey about user requirements for biometric authentication on smartphones\n", "abstract": " The increasing number of smartphone users stresses the need for an improved protection of users' personal data, such as health information, personal identifiers and financial data. One trend to address this need is the adoption of biometric authentication techniques such as fingerprint and iris recognition. We report on a study that examines user requirements and preferences for biometric authentication on smartphones with the focus on iris recognition. We surveyed users about their perception of different biometric authentication techniques in terms of trust, information security, and data privacy. Furthermore, we assessed tradeoffs that users are willing to accept for additional security. We also examined usability requirements for iris recognition and identified trends between different demographic groups. We discuss the findings and emphasize the need for an improved, data-driven, understanding of the emerging\u00a0\u2026", "num_citations": "17\n", "authors": ["1473"]}
{"title": "How does a typical tutorial for mobile development look like?\n", "abstract": " We report on an exploratory study, which aims at understanding how development tutorials are structured, what types of tutorials exist, and how official tutorials differ from tutorials written by development communities. We analyzed over 1.200 tutorials for mobile application development provided by six different sources for the three major platforms: Android, Apple iOS, and Windows Phone. We found that a typical tutorial contains around 2700 words distributed over 4 pages and including a list of instructions with 18 items. Overall, 70% of the tutorials contain source code examples and a similar fraction contain images. On average, one tutorial has 6 images. When analyzing the images, we found that the studied iOS community posted the largest number of images, 14 images per tutorial, on average, from which 74% are plain images, ie, mainly screenshots without stencils, diagrams, or highlights. In contrast, 36% of\u00a0\u2026", "num_citations": "17\n", "authors": ["1473"]}
{"title": "A simple nlp-based approach to support onboarding and retention in open source communities\n", "abstract": " Successful open source communities are constantly looking for new members and helping them become active developers. A common approach for developer onboarding in open source projects is to let newcomers focus on relevant yet easy-to-solve issues to familiarize themselves with the code and the community. The goal of this research is twofold. First, we aim at automatically identifying issues that newcomers can resolve by analyzing the history of resolved issues by simply using the title and description of issues. Second, we aim at automatically identifying issues, that can be resolved by newcomers who later become active developers. We mined the issue trackers of three large open source projects and extracted natural language features from the title and description of resolved issues. In a series of experiments, we optimized and compared the accuracy of four supervised classifiers to address our research\u00a0\u2026", "num_citations": "14\n", "authors": ["1473"]}
{"title": "An introduction to requirements knowledge\n", "abstract": " Requirements represent a verbalisation of decision alternatives on the functionality and quality of a system. Engineering, planning, and implementing requirements are collaborative, problem-solving activities, where stakeholders consume and produce considerable amounts of knowledge. Managing requirements knowledge is about efficiently identifying, accessing, externalising, and sharing this knowledge by and to all stakeholders, including analysts, developers, and users. This chapter introduces five foundations of managing requirements knowledge, which are discussed in the book parts. First, identifying requirements knowledge aims at externalising tacit knowledge such as rationale or presuppositions. Second, representing requirements knowledge targets an efficient information access and artefact reuse within and between projects. Third, sharing requirements knowledge improves stakeholders\u00a0\u2026", "num_citations": "14\n", "authors": ["1473"]}
{"title": "On using machine learning to identify knowledge in API reference documentation\n", "abstract": " Using API reference documentation like JavaDoc is an integral part of software development. Previous research introduced a grounded taxonomy that organizes API documentation knowledge in 12 types, including knowledge about the Functionality, Structure, and Quality of an API. We study how well modern text classification approaches can automatically identify documentation containing specific knowledge types. We compared conventional machine learning (k-NN and SVM) with deep learning approaches trained on manually-annotated Java and .NET API documentation (n= 5,574). When classifying the knowledge types individually (ie, multiple binary classifiers) the best AUPRC was up to 87", "num_citations": "13\n", "authors": ["1473"]}
{"title": "A first implementation of a design thinking workshop during a mobile app development course project\n", "abstract": " Millennials prefer learning-by-doing and social learning, and project-based learning. At the same time, software engineering educators should take into account that software development projects require not only technical skills but also creativity---Design Thinking can help in achieving the latter. We conducted a workshop, following the Design Thinking approach of the d. school, to help students generate ideas for a mobile app development project course. In addition to the details for implementing the workshop, we report our observations and lessons learned. Moreover, we provide suggestions for further implementation of Design Thinking in similar courses.", "num_citations": "13\n", "authors": ["1473"]}
{"title": "What stakeholders need to know about requirements\n", "abstract": " Working with requirements is a knowledge-intensive task. Stakeholders need various information, e.g., for understanding or negotiating the requirements. To understand the information needs of stakeholders we conducted two case studies and interviewed 6 stakeholders. We identified 26 unique information needs, which we represented as questions asked by stakeholders such as \u201cAre there redundant requirements?\u201d or \u201cHow did other stakeholders prioritize the requirements\u201d. We grouped the needs into five situations in which they were encountered. These were defining, understanding, evaluating, negotiating, and planning requirements. We then surveyed 307 practitioners to quantify the frequencies of these needs and assess how well current tools satisfy them. About 60% of the respondents confirmed that they frequently encounter the needs while their tool support was poor or absent. Requirements engineers\u00a0\u2026", "num_citations": "13\n", "authors": ["1473"]}
{"title": "Release Early, Release Often, and Watch Your Users' Emotions: Lessons From Emotional Patterns\n", "abstract": " App stores are highly competitive markets, and unexpected app changes might incite even loyal users to explore alternative apps. In this article, we present five release lessons, from emotional patterns identified using sentiment analysis tools, to assist app vendors maintain positive emotions and gain competitive advantages.", "num_citations": "12\n", "authors": ["1473"]}
{"title": "Who is addressed in this comment? automatically classifying meta-comments in news comments\n", "abstract": " User comments have become an essential part of online journalism. However, newsrooms are often overwhelmed by the vast number of diverse comments, for which a manual analysis is barely feasible. Identifying meta-comments that address or mention newsrooms, individual journalists, or moderators and that may call for reactions is particularly critical. In this paper, we present an automated approach to identify and classify meta-comments. We compare comment classification based on manually extracted features with an end-to-end learning approach. We develop, optimize, and evaluate multiple classifiers on a comment dataset of the large German online newsroom SPIEGEL Online and the \"One Million Posts\" corpus of DER STANDARD, an Austrian newspaper. Both optimized classification approaches achieved encouraging F0.5 values between 76% and 91%. We report on the most significant classification\u00a0\u2026", "num_citations": "12\n", "authors": ["1473"]}
{"title": "Needs and challenges for a platform to support large-scale requirements engineering: A multiple-case study\n", "abstract": " Background: Requirement engineering is often considered a critical activity in system development projects. The increasing complexity of software as well as number and heterogeneity of stakeholders motivate the development of methods and tools for improving large-scale requirement engineering. Aims: The empirical study presented in this paper aim to identify and understand the characteristics and challenges of a platform, as desired by experts, to support requirement engineering for individual stakeholders, based on the current pain-points of their organizations when dealing with a large number requirements. Method: We conducted a multiple case study with three companies in different domains. We collected data through ten semi-structured interviews with experts from these companies. Results: The main pain-point for stakeholders is handling the vast amount of data from different sources. The foreseen\u00a0\u2026", "num_citations": "11\n", "authors": ["1473"]}
{"title": "Reviewchain: untampered product reviews on the blockchain\n", "abstract": " Online portals include an increasing amount of user feedback in form of ratings and reviews. Recent research highlighted the importance of this feedback and confirmed that positive feedback improves product sales figures and thus its success. Online portals' operators act as central authorities throughout the overall review process. In the worst case, operators can exclude users from submitting reviews, modify existing reviews, and introduce fake reviews by fictional users. This paper presents ReviewChain, a decentralized review approach. Our approach avoids central authorities by using blockchain technologies, decentralized apps and storage. It enables users to submit and retrieve untampered reviews. We highlight the implementation challenges encountered when realizing our approach on the public Ethereum blockchain. Then, we discuss possible design alternatives and their trade-offs regarding costs\u00a0\u2026", "num_citations": "11\n", "authors": ["1473"]}
{"title": "Team: towards a software engineering semantic web\n", "abstract": " Large software development projects are complex endeavours that involve numerous participants which can work across several sites and act in various roles. Each participant produces and consumes information relevant for the success of the project. In such settings, an effective and efficient allocation of knowledge is a hard challenge, especially if there is no central authority, which enforces standards for the whole ecosystem. We consider semantic technologies as an important enabler to improve information and knowledge sharing in such scenarios, by helping to exchange and interconnect software engineering knowledge across the web. In this paper, we describe the corresponding vision of a Software Engineering Semantic Web and the role of intelligent IDEs in order to benefit from and contribute to it.", "num_citations": "11\n", "authors": ["1473"]}
{"title": "Reconciling practice and rigour in ontology-based heterogeneous information systems construction\n", "abstract": " Ontology integration addresses the problem of reconciling into one single semantic framework different knowledge chunks defined according to its own ontology. This field has been subject of analysis and many consolidated theoretical results are available. Still, in practice, ontology integration is difficult in heterogeneous information systems (HIS) that need to integrate assets already built and running which cannot be changed. Furthermore, in practice, the composed assets are usually not really defined according to an ontology but to a data model which is less rigorous but fit for the purpose of defining a data schema. In this paper, we propose a method for integrating assets participating in a HIS using a domain ontology, aimed at finding an optimal balance between semantic rigour and feasibility in terms of adoption in a real-world setting. The method proposes the use of data models describing the\u00a0\u2026", "num_citations": "10\n", "authors": ["1473"]}
{"title": "Requirements intelligence with openreq analytics\n", "abstract": " With the rise of social media like Twitter and distribution platforms like app stores, users have various ways to express their opinions about software products. Popular software vendors get user feedback thousandfold per day. Research has shown that such feedback contains valuable information for software development teams. However, a manual analysis of user feedback is cumbersome and hard to manage. We present OpenReq Analytics, a software requirements intelligence service, that collects, processes, analyzes, and visualizes user feedback.", "num_citations": "9\n", "authors": ["1473"]}
{"title": "Extracting and analyzing context information in user-support conversations on twitter\n", "abstract": " While many apps include built-in options to report bugs or request features, users still provide an increasing amount of feedback via social media, like Twitter. Compared to traditional issue trackers, the reporting process in social media is unstructured and the feedback often lacks basic context information, such as the app version or the device concerned when experiencing the issue. To make this feedback actionable to developers, support teams engage in recurring, effortful conversations with app users to clarify missing context items. This paper introduces a simple approach that accurately extracts basic context information from unstructured, informal user feedback on mobile apps, including the platform, device, app version, and system version. Evaluated against a truthset of 3014 tweets from official Twitter support accounts of the 3 popular apps Netflix, Snapchat, and Spotify, our approach achieved precisions\u00a0\u2026", "num_citations": "8\n", "authors": ["1473"]}
{"title": "On the similarity of task contexts\n", "abstract": " Developers work on parallel tasks and switch between them due to interruptions and dependencies. For each task, developers interact with artifacts that constitute the task context. The more dissimilar tasks are, the more time is needed for switches to restore the contexts and adjust the mindset. Organizing tasks by their similarity can increase the efficiency of task switches. Moreover, knowing similar tasks of other developers might also save coordination effort. This paper studies the concept of tasks similarity based on the similarity of task contexts. We define task context as set or vector of the artifacts used in the task and apply popular similarity measures to compare the sets or vectors corresponding to the tasks. Instead of only counting the artifacts in the intersection and union of two contexts, we scale the artifacts with their relevance to the task using the degree-of-interest model. In a field study, a simulation, and an\u00a0\u2026", "num_citations": "8\n", "authors": ["1473"]}
{"title": "Intention-Based Integration of Software Engineering Tools\n", "abstract": " Tool integration aims at providing seamless software engineering workflows. It enables developers to organize, trace, and retrieve information from different tools. Current integration approaches lacks the support for frequent changes and interruptions. Moreover, changes cannot be systematically linked to the context.", "num_citations": "8\n", "authors": ["1473"]}
{"title": "Switch! recommending artifacts needed next based on personal and shared context\n", "abstract": " While performing a certain task software developers use multiple tools, read different artifacts and change others. As software developers are often interrupted during a task, they end up simultaneously using a vast set of tools and artifacts. They need to switch between those artifacts many times until a task is completed. In sum a lot of time gets wasted due to locating, reopening or selecting the right artifact needed next. To address this problem we introduce Switch!, a context aware artifact recommendation and switching tool for software developers. Switch! recommends artifacts that are likely needed in the current situation, based on task semantics, interaction history and community profile.", "num_citations": "6\n", "authors": ["1473"]}
{"title": "Smart re: using smart devices to support face-to-face meetings\n", "abstract": " Communication barriers in Requirements Engineering (RE) are various, including different levels of experience, different backgrounds, cultures, and personalities of stakeholders. Such barriers can lead to communication gaps and project failures. This paper introduces the Smart RE framework, an approach to reduce communication gaps in RE by using the advantages of personal smart devices, which are very popular nowadays. As RE communication often occurs in regular face-to-face meetings, which commonly involve presentations and discussions, the framework captures the meeting context on the stakeholder's smart devices and provides personalized additional information such as explanations of the discussed terms.", "num_citations": "5\n", "authors": ["1473"]}
{"title": "Managing Requirements Knowledge (MaRK_08)\n", "abstract": " MaRK_08 focuses on potentials and benefits of lightweight knowledge management approaches, such as ontology-based annotation, semantic Wikis and rationale management techniques, applied to requirements engineering. Methodologies, processes and tools for capturing, externalizing, sharing and reusing of knowledge in (distributed) requirements engineering processes are discussed. Furthermore, the workshop is an interactive exchange platform between the knowledge management community, requirements engineering community and industrial practitioners. This proceeding includes selected and refereed contributions.", "num_citations": "5\n", "authors": ["1473"]}
{"title": "ShapeRE: Towards a Multi-Dimensional Representation for Requirements of Sustainable Software\n", "abstract": " In this paper we introduce the preliminary design of a new framework named ShapeRE, which will address two problems potentially impeding the development of sustainable software. The first problem is the common differentiation between \u201cfunctional\u201d and \u201cnon-functional\u201d requirements, which hides relevant sustainability requirements and hampers their identification. The second problem is the lack of developer-oriented representation approaches to ensure that all requirements relevant to sustainable software will be finally implemented. To address these two issues ShapeRE provides an alternative multi-dimensional approach for identifying requirements and a developer-oriented representation guideline. We suggest nine dimensions which are social, economic, environmental, technical, individual, purpose, design-aesthetics, integrative and legal. The design of our frame-work relies on insights from the fields of\u00a0\u2026", "num_citations": "4\n", "authors": ["1473"]}
{"title": "Capturing and sharing domain knowledge with business rules lessons learned from a global software vendor\n", "abstract": " Business rules represent constraints in a domain, which need to be taken into account either during the development or the usage of a system. Motivated by the knowledge reuse potentials when developing systems within the same domain, we studied business rules in a large software company. We interviewed 11 experienced practitioners on how they understand, capture, and use business rules. We also studied the role of business rules in requirements engineering in the host organization. We found that practitioners have a very broad perception for this term, ranging from flows of business processes to directives for calling external system interfaces. We identified 27 types of rules, which are typically captured as a free text in requirements documents and other project documentation. Practitioners stated the need to capture this tacit form of domain knowledge and to trace it to other artifacts as it impacts all\u00a0\u2026", "num_citations": "4\n", "authors": ["1473"]}
{"title": "Managing requirements knowledge: Conclusion and outlook\n", "abstract": " This chapter summarises the Managing Requirements Knowledge book and concludes with the future work. For this purpose, we performed a case-by-case review of the book chapters as well as other relevant publications and extracted the research issues, main contributions, benefits or lessons learned, and future research directions.", "num_citations": "4\n", "authors": ["1473"]}
{"title": "Word-Level Uncertainty Estimation for Black-Box Text Classifiers using RNNs\n", "abstract": " Estimating uncertainties of Neural Network predictions paves the way towards more reliable and trustful text classifications. However, common uncertainty estimation approaches remain as black-boxes without explaining which features have led to the uncertainty of a prediction. This hinders users from understanding the cause of unreliable model behaviour. We introduce an approach to decompose and visualize the uncertainty of text classifiers at the level of words. Our approach builds on top of Recurrent Neural Networks and Bayesian modelling in order to provide detailed explanations of uncertainties, enabling a deeper reasoning about unreliable model behaviours. We conduct a preliminary experiment to check the impact and correctness of our approach. By explaining and investigating the predictive uncertainties of a sentiment analysis task, we argue that our approach is able to provide a more profound understanding of artificial decision making.", "num_citations": "3\n", "authors": ["1473"]}
{"title": "Openreq issue link map: A tool to visualize issue links in jira\n", "abstract": " Managing software projects gets more and more complicated with an increasing project and product size. To cope with this complexity, many organizations use issue tracking systems, where tasks, bugs, and requirements are stored as issues. Unfortunately, managing software projects might remain chaotic even when using issue trackers. Particularly for long lasting projects with a large number of issues and links between them, it is often hard to maintain an overview of the dependencies, especially when dozens of new issues get reported every day. We present a Jira plug-in that supports developers, project managers, and product owners in managing and overviewing issues and their dependencies. Our tool visualizes the issue links, helps to find missing or unknown links between issues, and detects inconsistencies.", "num_citations": "3\n", "authors": ["1473"]}
{"title": "DUFICE: Guidelines for a Lightweight Management of Requirements Knowledge\n", "abstract": " Working with requirements is a knowledge-intensive task. During the elicitation, comprehension, or management of requirements, practitioners often consume and produce additional information such as domain knowledge, rationale, requirements dependencies, \u201cwho knows what\u201d, or how-to\u2019s. However, current requirements engineering processes and tools lack a systematic support for the management of knowledge about requirements. This makes it difficult for practitioners to capture and share such knowledge.             This chapter summarises our experience on implementing a lightweight, pragmatic approach to capture and share requirements knowledge. We recommend practitioners to Draw a knowledge landscape, Use lightweight tools, Follow a simple iterative process, Interact with external communities, Capture tacit knowledge, and Establish a knowledge culture. We introduce these guidelines\u00a0\u2026", "num_citations": "3\n", "authors": ["1473"]}
{"title": "From informal project management artifacts to formal system models\n", "abstract": " Software systems are specified with formal artifacts such as requirements or architecture models. However, informal project artifacts such as bug reports, tasks or discussion threads also include relevant information about the respective software systems and their development. It is beneficial to externalize such information in formalized representations, eg to increase the automation of development activities.In this paper we describe a model that integrates formal system models and informal artifacts of software development projects. We show how this integration eases the manual transition of information from project management artifacts to system models, and discuss how this transition can be automated. To facilitate this transition we propose an approach for the automated identification of informal management artifacts, which contain information about functional requirements and other system specifications such as classes.", "num_citations": "3\n", "authors": ["1473"]}
{"title": "D6: Report describing state-of-the art in search mechanism and context similarity\n", "abstract": " This report describes the state of research and practice regarding Search in Software Engineering. Special focus is given to similarity in terms of reusing knowledge in software development and considering context information in the search process.", "num_citations": "3\n", "authors": ["1473"]}
{"title": "Automatically Matching Bug Reports With Related App Reviews\n", "abstract": " App stores allow users to give valuable feedback on apps, and developers to find this feedback and use it for the software evolution. However, finding user feedback that matches existing bug reports in issue trackers is challenging as users and developers often use a different language. In this work, we introduce DeepMatcher, an automatic approach using state-of- the-art deep learning methods to match problem reports in app reviews to bug reports in issue trackers. We evaluated DeepMatcher with four open-source apps quantitatively and qualitatively. On average, DeepMatcher achieved a hit ratio of 0.71 and a Mean Average Precision of 0.55. For 91 problem reports, DeepMatcher did not find any matching bug report. When manually analyzing these 91 problem reports and the issue trackers of the studied apps, we found that in 47 cases, users actually described a problem before developers discovered and\u00a0\u2026", "num_citations": "2\n", "authors": ["1473"]}
{"title": "The second international workshop on affective computing for requirements engineering (affectre2019)\n", "abstract": " This paper presents an overview of the 2nd edition of the workshop, co-located with the 27th IEEE International Requirements Engineering Conference (RE 2019)", "num_citations": "2\n", "authors": ["1473"]}
{"title": "An Overview of Recommender Systems in Requirements Engineering\n", "abstract": " Requirements engineering (RE) is considered as one of the most critical phases in software development. Poorly implemented RE processes are still one of the major risks for project failure. As a consequence, we can observe an increasing demand for intelligent software components that support stakeholders in the completion of RE tasks. In this chapter, we give an overview of the research dedicated to the application of recommendation technologies in RE. On the basis of a literature analysis, we exemplify the application of recommendation technologies in different scenarios. In this context, the approaches of collaborative \ufb01ltering, content-based \ufb01ltering, clustering, knowledge-based recommendation, group-based recommendation, and social network analysis are discussed. With the goal to stimulate further related research, we conclude the chapter with a discussion of issues for future work.", "num_citations": "2\n", "authors": ["1473"]}
{"title": "FastFix: a control theoretic view of self-healing for automatic corrective software maintenance\n", "abstract": " One of the main objectives of self-adaptive systems is to reduce maintenance costs through automatic adaptation. Self-healing is a self-adapting property that helps systems return to a normal state after a fault or vulnerability exploit has been detected. The problem is intuitively appealing as a way to automate the different type of maintenance processes (corrective, adaptive and perfective) and forms an interesting area of research that has inspired many initiatives. As a result, several surveys on self-healing have been published to describe the state of the art in this field. According to those surveys, the major trend towards finding a solution of the self-healing problem relies on redundancy that may concern both architecture and code resources. These approaches are therefore better suited to address adaptive and perfective maintenance. As part of the EU FP7 FastFix project, we focus on self-healing for corrective maintenance. We propose a framework for automating corrective maintenance that is based on software control principles. Our approach automates the engineering of self-healing systems as it does not require the system to be designed in a specific way. Instead it can be applied to legacy systems and automatically equip them with observation and control points. Moreover, the proposed approach relies on a sound control theory developed for Discrete Event Systems. Finally, this paper contributes to the field by introducing challenges to the effective application of this approach to relevant industrial systems. Some of these challenges are currently being tackled within FastFix.", "num_citations": "2\n", "authors": ["1473"]}
{"title": "Social aspects in software engineering\n", "abstract": " Social Aspects in Software Engineering was a joint event of the workshops \u201cSoftware Engineering within Social Software Environments (SENSE)\u201d and \u201cCollaboration and Knowledge Sharing in Software Development Teams (SofTEAM)\u201d that was held in conjunction with SE 2009 in Kaiserslautern on March 3rd. The full-day program covered issues of collaboration and knowledge exchange in the development of software systems. In particular, it focused on social approaches of software engineering, engineering of social software as well as new business models and community-oriented ways of collaborative software development in the Web 2.0 era.The goal of the event was to bring together researchers and practitioners working on different collaboration aspects, community interaction and knowledge exchange with respect to software projects. The workshop covered both novel results and future challenges of collaboration in software engineering. The event consisted of four thematic sessions and additional round table discussions.", "num_citations": "2\n", "authors": ["1473"]}
{"title": "D5: Report describing State-of-the-Art in Metadata Management\n", "abstract": " This report describes the state of the research and practice in the areas of metadata management systems. Open source and industrial products are presented and compared. Thereout we identified functional and non-functional requirements relevant for the TEAM project.", "num_citations": "2\n", "authors": ["1473"]}
{"title": "Unsupervised Topic Discovery in User Comments\n", "abstract": " On social media platforms like Twitter, users regularly share their opinions and comments with software vendors and service providers. Popular software products might get thousands of user comments per day. Research has shown that such comments contain valuable information for stakeholders, such as feature ideas, problem reports, or support inquiries. However, it is hard to manually manage and grasp a large amount of user comments, which can be redundant and of a different quality. Consequently, researchers suggested automated approaches to extract valuable comments, e.g., through problem report classifiers. However, these approaches do not aggregate semantically similar comments into specific aspects to provide insights like how often users reported a certain problem.We introduce an approach for automatically discovering topics composed of semantically similar user comments based on deep\u00a0\u2026", "num_citations": "1\n", "authors": ["1473"]}
{"title": "Which App Features Are Being Used? Learning App Feature Usages from Interaction Data\n", "abstract": " In the dynamic and fast-growing app market, monitoring and understanding how past releases are actually being used is indispensable for successful app maintenance and evolution. Current app usage analytics tools either log execution events, e.g., in stack traces, or general usage information such as the app activation time, location, and device. In this paper, we focus on analyzing the usages of the single app features as described in release notes and app pages. We suggest monitoring nine app-independent, privacy-friendly interaction events for training a machine learning model to learn app feature usages. We conducted a crowdsourcing study with 55 participants who labeled 5,815 feature usages of 170 unique apps for 18 days. Our within-apps evaluation shows that we could achieve encouraging precision and recall values already with ten labeled feature usages. For certain popular features such as\u00a0\u2026", "num_citations": "1\n", "authors": ["1473"]}
{"title": "Two Decades of Empirical Research on Developers' Information Needs: A Preliminary Analysis\n", "abstract": " Over the last two decades, developers' daily intake of information has been constantly on the rise and so has the interest of research in investigating the information needs of developers. Knowledge about what information they seek and which sources they rely on is scarce and has to be updated regularly to match the rapid changes in development practices. In this paper, we reflect on the scientific studies published in this field over the last two decades. We present preliminary results of our analysis of a study sample where we particularly focus on the research methods used, the number of recruited participants, and the organisational context in which they emerged. We have investigated a total of 54 studies from 41 publications and found that convenience sampling is the predominant sampling strategy with a prevalence of the industrial organisational context. Moreover, the majority of studies had a reduced sample\u00a0\u2026", "num_citations": "1\n", "authors": ["1473"]}
{"title": "A First Implementation of a Design Thinking Workshop During a Mobile App Development Project Course\n", "abstract": " Due to their characteristics, millennials prefer learning-by-doing and social learning, such as project-based learning. However, software development projects require not only technical skills but also creativity; Design Thinking can serve such purpose. We conducted a workshop following the Design Thinking approach of the d. school, to help students generating ideas for a mobile app development project course. On top of the details for implementing the workshop, we report our observations, lessons learned, and provide suggestions for further implementation.", "num_citations": "1\n", "authors": ["1473"]}
{"title": "Research on NLP for RE at the University of Hamburg: A Report.\n", "abstract": " The Mobile Applied Software Technology (MAST) group at the University of Hamburg focuses its research on context-aware adaptive systems and the social side of software engineering. In the context of natural language processing for requirements engineering, the group has mostly focused on mining app stores reviews. Currently, the group is involved in the OpenReq project where natural language processing is being used to recommend requirements from diverse sources (eg, social media, issue trackers), and to improve the structural quality of existing requirements.", "num_citations": "1\n", "authors": ["1473"]}
{"title": "Liquid Democracy for a Sustainable and Scalable Participation in Requirements Engineering.\n", "abstract": " The last decade was characterized by a boom in the quantity and quality of the web sites\u2013something that has been summarized with the buzzword \u201cWeb 2.0\u201d. This immense growth was possible through the massive participation of users, who were able to easily create, share, and interact with content of any kind. But when looking at software, there are only few possibilities for users to participate and get involved. In software lifecycles, requirements engineering is the activity concerned with the involvement of users and stakeholders. However, requirements engineering typically involves a selective group of people and is not open to the public. It lacks methods and tools that allow for a massive user participation in a scalable, fair, and simple way. We argue that this inherently restricts the social sustainability of software. On the other hand, concepts of scalable and sustainable participation are already applied in other domains, particularly in political, democratic systems. This paper initiates a discussion on how these concepts can be mapped to requirements engineering.", "num_citations": "1\n", "authors": ["1473"]}
{"title": "D6. 1-Conceptual Model of User Observation, Application Monitoring Tools, and Context Actuators\n", "abstract": " This document describes the requirements and proposed conceptual model of the user and application observation component in MUSES. With an overview of previous literature in context-awareness, this deliverable first provides a general definition and description of context and context-awareness. Based on this general notion of context and context-awareness the functional and non-functional requirements for context observation component in compliance with general requirements of MUSES framework are provided. According to the requirements two architectural concepts, namely a model for representation and processing of context, and different possible approaches for sensing user\u2019s context are discussed. The context actuators, as means of applying MUSES decisions on the endpoint device, are also discussed in this document. This discussion includes the different roles of context actuators, namely risk\u00a0\u2026", "num_citations": "1\n", "authors": ["1473"]}
{"title": "The 4th international workshop on social software engineering (SSE'11)\n", "abstract": " Software is created by people and for people. People are heterogeneous in their beliefs, backgrounds, and preferences. Accommodating and exploiting the social variety is crucial for successful engineering and usage of software. On the one hand, software engineering is a social activity, performed by different individuals and teams. This necessitates methodologies and tools to deal with issues such as communication, coordination, knowledge sharing, compensation, and reconciliation. On the other hand, Social Software (Internet Forums, Wikis, Social Networks, Blogs, etc.) is an expanding computing paradigm, which inherently incorporates intensive social interactions and implications. Engineering Social Software magnifies a spectrum of challenges like group requirements engineering, social-awareness, privacy, security, and trust.", "num_citations": "1\n", "authors": ["1473"]}
{"title": "Improving knowledge sharing in distributed teams by capturing and recommending informal knowledge\n", "abstract": " Due to an increasingly distributed workforce, teams are often separated by organizational, geographical or temporal boundaries, which cause substantial collaboration and knowledge exchange problems. Accordingly, tool-support for collaboration and knowledge sharing is particularly important for distributed teams. In this paper, we discuss how knowledge exchange in the domain of software development can be improved by capturing informal knowledge and recommending to share or access it.", "num_citations": "1\n", "authors": ["1473"]}
{"title": "From research to practice: How to txt e-solutions plan to deploy innovations in sharing development knowledge\n", "abstract": " The research project TEAM aims at developing lightweight knowledge sharing mechanisms, optimized for distributed software teams. This paper describes how the software development company TXT e-solutions plans to evaluate and deploy innovative results from this project. First, we introduce the as-is situation for collaboration and knowledge sharing inside the company. Then, we discuss expectations as well as evaluation environments for TEAM and similar research initiatives.", "num_citations": "1\n", "authors": ["1473"]}