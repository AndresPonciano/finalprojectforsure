{"title": "* MOD\u2014a language for distributed programming\n", "abstract": " Distributed programming is characterized by high communications costs and the inability to use shared variables and procedures for interprocessor synchronization and communication. *MOD is a high-level language system which attempts to address these problems by creating an environment conducive to efficient and reliable network software construction. Several of the *MOD distributed programming constructs are discussed as well as an interprocessor communication methodology. Examples illustrating these concepts are drawn from the areas of network communication and distributed process synchronization.", "num_citations": "150\n", "authors": ["2197"]}
{"title": "Dual-homing multicast protection\n", "abstract": " We propose a novel multicast protection scheme based on a dual-homing architecture where each destination host is connected to two edge routers. Under such an architecture, the two paths from the source of the multicast session to the two edge routers provide certain protection for the data traffic from the source to the destination host. Two problems are associated with the proposed dual-homing multicast protection scheme. One is to calculate the individual survivability for a destination host that is connected to two edge routers. The other is to assign two edge routers for each destination host such that the total survivability is maximized for the multicast session subject to the port number constraint of edge routers. We propose an optimal algorithm to solve the first problem and a heuristic algorithm to solve the second problem. Through simulations, we show that the proposed heuristic algorithm achieves a\u00a0\u2026", "num_citations": "19\n", "authors": ["2197"]}
{"title": "An analysis of language models for high-performance communication in local-area networks\n", "abstract": " In this paper we present an empirical analysis of language models for communication in distributed systems. We consider a computing environment in which a high-level, distributed programming language kernel is sufficient support for high-performance programming applications. We propose programming language support for such an environment and present the performance results of an implementation.", "num_citations": "15\n", "authors": ["2197"]}
{"title": "Concurrency control in real-time database systems\n", "abstract": " The design and implementation of real-time database systems presents many new and challenging problems. Compared with traditional databases, real-time database systems have a distinct feature: they must satisfy timing constraints associated with transactions. Transactions in real-time database systems should be scheduled considering both data consistency and timing constraints. In addition, a real-time database system must adapt to changes in the operating environment and guarantee the completion of critical transactions. In this paper, we address some of the issues associated with scheduling and concurrency control for real-time database systems, and present an optimistic algorithm for priority-based locking.", "num_citations": "14\n", "authors": ["2197"]}
{"title": "Enhancing learning in a data communication and networking course with laboratory experiments\n", "abstract": " This paper introduces a set of laboratory experiments developed for a senior-level data communication course at Georgia Southern University. The goal is to enhance understanding of network protocols and their applications. The experiments are designed to provide rapid feedback and learning. Furthermore, students will have a clear view of issues associated with the design and implementation of protocols, simulation and performance evaluation techniques and packet analysis.", "num_citations": "11\n", "authors": ["2197"]}
{"title": "An experiment to improve operand addressing\n", "abstract": " MCODE is a high-level language, stack machine designed to support strongly-typed, Pascal-based languages with a variety of data types in a modular programming environment. The instruction set, constructed for efficiency and extensibility, is based on an analysis of 120,000 lines of Pascal programs. The design was compared for efficiency with the instruction sets of the Digital Equipment PDP-11 and VAX by examining the generated code from the same compiler for all three machines. In addition, the original design choices were tested by analyzing the generated code from 19,000 lines of StarMod programs. As a result of this iterative experiment, we have summarized our observations in an efficient reorganization of the VAX's addressing modes.", "num_citations": "11\n", "authors": ["2197"]}
{"title": "Scheduling and consistency in real-time database systems\n", "abstract": " Scheduling and consistency in real-time database systems | IEEE Real-Time Systems Newsletter ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search IEEE Real-Time Systems Newsletter Periodical Home Latest Issue Archive Authors Affiliations Award Winners More HomeBrowse by TitlePeriodicalsIEEE Real-Time Systems NewsletterVol. , No. -3Scheduling and consistency in real-time database systems article Scheduling and consistency in real-time database systems Share on Authors: S. Son View Profile , R. Cook View Profile Authors Info & Affiliations Publication: IEEE Real-Time Systems NewsletterMay 1989", "num_citations": "10\n", "authors": ["2197"]}
{"title": "The starmod distributed programming kernel\n", "abstract": " This paper describes the design and implementation of a kernel for the distributed programming language StarMod. The distributed programming kernel was written in a subset of StarMod supported by a concurrent programming kernel. Kernel issues addressed include process representation, I/O device management, signal semantics, system utilities, network communication and the implementation of high\u2010level language communication primitives. We conclude with a summary of our experiences in the development of a \u2018bare machine\u2019 kernel for a network of microprocessors.", "num_citations": "10\n", "authors": ["2197"]}
{"title": "The Crystal Nugget-Part I of the First Report on the Crystal Project\n", "abstract": " 1. Introduction to Crystal The University of Wisconsin Crystal project was funded starting in 1981 by the National Science Foundation Experimental Connputer Science Program to construct a multicomputer with a large number of substantial processing nodes. The original proposal called for the nodes to be interconnected using broadband, frequency-agile local network interfaces. Each node was to be a high performance 32 bit computer with a approximately 1 megabyte of memory and floating-point hardware. The total communications bandwidth was expected to be approximately 100 Mbits/second. During the first year of the project, these specifications have been refined. We have decided to buy approximately 40 node machines, each a VAX-11/750. The inter-connection hardware will be the Proteon ProNet. Currently, the ProNet is available in a 10 Mbits/second version. We have contracted with Proteon to\u00a0\u2026", "num_citations": "10\n", "authors": ["2197"]}
{"title": "High-level broadcast communication for local area networks\n", "abstract": " Even for LANs without collision-detection hardware, this implementation of StarMod offers improvements of from 1.1 to 7.8 over pointto-point message transmission-and that's the worst-case gain.", "num_citations": "9\n", "authors": ["2197"]}
{"title": "A symbol table abstraction to implement languages with explicit scope control\n", "abstract": " We are concerned with languages in which the programmer has explicit control over the referencing environment of a name. Several modern programming languages, including Ada, Euclid, Mesa, and Modula, implement these control capabilities. This paper describes a simple technique which uses the traditional concepts of a hashed symbol table and lexical level to solve many of the symbol table implemen-tation problems associated with explicit scope control. The primary ad-vantage of this technique is that a single symbol table abstraction can be used to simply and efficiently solve most problems in scope control.", "num_citations": "9\n", "authors": ["2197"]}
{"title": "Neural network control for a fire-fighting robot\n", "abstract": " The paper discusses the development of an associative, neural network as an on-line algorithm to train and control a fire-fighting robot. Learning is externally supervised with encoded target actions. The robot acquires basic navigation skills as well as the ability to detect a fire and to extinguish it.", "num_citations": "7\n", "authors": ["2197"]}
{"title": "The starlite project\n", "abstract": " The StarLite Project has the goal of constructing a program library for real-time applications. The initial focus of the project is on operating system and database support. The project also involves the construction of a prototyping environment that supports experimentation with concurrent and distributed algorithms in a host environment before down-loading to a target system for performance testing. The components of the project include a Modula-2 compiler, a symbolic Modula-2 debugger, an interpreterruntime, package, the Phoenix operating system, the meta-file system, a visual simulation package, a database system, and documentation. Subtitles Semantic Information and Consistency in Distributed Realtime Systems An Adaptive Check-pointing Scheme for Distributed Database with Mixed Type Transactions The Starlite Prototyping Architecture.Descriptors:", "num_citations": "7\n", "authors": ["2197"]}
{"title": "The kernel computational model of the alpha real-time distributed operating system\n", "abstract": " Alpha is a non-proprietary experimental operating system which extends the real-time domain to encompass distributed applications, such as performing system integration and operation, and mission management, for telecommunications, factory automation, and defense. Distributed real-time systems are inherently asynchro nous, dynamic, and non-deterministic, and yet are nonetheless mission-critical. Traditional real-time OS technology is based on asserting or imposing determinism of not just the ends but also the means, for centralized low-level sampled-data monitoring and control. Conventional distributed OS technology is based on two-party client/server hierarchies for explicit resource sharing in networks of autonomous users. These two technological approaches are special cases which cannot be combined and scaled up cost-effectively to accommodate distributed real-time systems. Alpha's new paradigm for real-time distributed computing is founded on\" best-effort\" management of all resources directly with result completion time constraints which are exp\" benefit functions;\" and multiparty, peer-structured, distributed (trans-node) computations employing transactional-style support for maintaining application-specific correctness of distributed execution and mutual consistency of distributed data.", "num_citations": "6\n", "authors": ["2197"]}
{"title": "StarLite, a visual simulation package for software prototyping\n", "abstract": " We describe a software prototyping environment implemented on the Lilith computer. By isolating hardware dependencies, the environment supports the development and testing of concurrent and distributed algorithms on a host as well as on the target hardware. A library of generic devices, which includes clocks, disks and EtherNets, is provided to support experimentation. The paper describes how any programming language can be extended to provide such an environment by adding subroutine packages for concurrent programming, simulation, and window management.", "num_citations": "6\n", "authors": ["2197"]}
{"title": "An OpenMP library for Java\n", "abstract": " The design and implementation of an OpenMP library for Java is described. The library not only encodes OpenMP semantics as open source but also provides a simple platform to enable further experimentation. The Java OpenMP library design was tested against OpenMPC programs using Visual Studio 2010 and gcc.", "num_citations": "5\n", "authors": ["2197"]}