{"title": "Case Study Research\n", "abstract": " Case Study Research Page 1 1 Lund University / Faculty of Engineering / Department of Computer Science / Software Engineering Research Group Case Study Research in Software Engineering Professor Per Runeson Lund University Lund University / Faculty of Engineering / Department of Computer Science / Software Engineering Research Group Who am I? \u2022 Professor in Software Engineering, Lund University \u2022 Leader for the Software Engineering Research Group at LU and the EASE industrial excellence center \u2022 Sabbatical at North Carolina State University, 2011-12 \u2022 Sony Ericsson, part time 2010 \u2022 LU since 1998 \u2022 Q-Labs 1991-1998 SWELL - Swedish V&V Excellence Page 2 2 Lund University / Faculty of Engineering / Department of Computer Science / Software Engineering Research Group Research interests 1995 2011 \u2022 Reliability testing \u2022 Inspection methods \u2022 System validation \u2022 Agile management \u2022 \u2022 \u2022 / \u2026", "num_citations": "1449\n", "authors": ["145"]}
{"title": "Using students as subjects\u2014a comparative study of students and professionals in lead-time impact assessment\n", "abstract": " In many studiesin software engineering students are used instead of professionalsoftware developers, although the objective is to draw conclusionsvalid for professional software developers. This paper presentsa study where the difference between the two groups is evaluated.People from the two groups have individually carried out a non-trivialsoftware engineering judgement task involving the assessmentof how ten different factors affect the lead-time of softwaredevelopment projects. It is found that the differences are onlyminor, and it is concluded that software engineering studentsmay be used instead of professional software developers undercertain conditions. These conditions are identified and describedbased on generally accepted criteria for validity evaluationof empirical studies.", "num_citations": "763\n", "authors": ["145"]}
{"title": "An industrial survey of requirements interdependencies in software product release planning\n", "abstract": " The task of finding an optimal selection of requirements for the next release of a software system is difficult as requirements may depend on each other in complex ways. The paper presents the results from an in-depth study of the interdependencies within 5 distinct sets of requirements, each including 20 high-priority requirements of 5 distinct products from 5 different companies. The results show that: (1) roughly 20% of the requirements are responsible for 75% of the interdependencies; (2) only a few requirements are singular; (3) customer-specific bespoke development tend to include more functionality- related dependencies whereas market-driven product development have an emphasis on value-related dependencies. Several strategies for reducing the effort needed for identifying and managing interdependencies are outlined. A technique for visualization of interdependencies with the aim of supporting\u00a0\u2026", "num_citations": "388\n", "authors": ["145"]}
{"title": "An industrial case study on distributed prioritisation in market-driven requirements engineering for packaged software\n", "abstract": " When developing packaged software, which is sold \u2018off-the-shelf\u2019 on a worldwide marketplace, it is essential to collect needs and opportunities from different market segments and use this information in the prioritisation of requirements for the next software release. This paper presents an industrial case study where a distributed prioritisation process is proposed, observed and evaluated. The stakeholders in the requirements prioritisation process include marketing offices distributed around the world. A major objective of the distributed prioritisation is to gather and highlight the differences and similarities in the requirement priorities of the different market segments. The evaluation through questionnaires shows that the stakeholders found the process useful. The paper also presents novel approaches to visualise the priority distribution among stakeholders, together with measures on disagreement and satisfaction\u00a0\u2026", "num_citations": "250\n", "authors": ["145"]}
{"title": "Requirements engineering challenges in market-driven software development\u2013An interview study with practitioners\n", "abstract": " Requirements engineering for market-driven software development entails special challenges. This paper presents results from an empirical study that investigates these challenges, taking a qualitative approach using interviews with fourteen employees at eight software companies and a focus group meeting with practitioners. The objective of the study is to increase the understanding of the area of market-driven requirements engineering and provide suggestions for future research by describing encountered challenges. A number of challenging issues were found, including bridging communication gaps between marketing and development, selecting the right level of process support, basing the release plan on uncertain estimates, and managing the constant flow of requirements.", "num_citations": "215\n", "authors": ["145"]}
{"title": "Improving the use case driven approach to requirements engineering\n", "abstract": " The paper presents the idea of usage oriented requirements engineering, an extension of use case driven analysis. The main objective is to achieve a requirements engineering process resulting in a model which captures both functional requirements and system usage aspects in a comprehensive manner. The paper presents the basic concepts and the process of usage oriented requirements engineering, and the synthesized usage model resulting from this process. The role of this model in system development, and its potential applications are also discussed.", "num_citations": "165\n", "authors": ["145"]}
{"title": "A hierarchical use case model with graphical representation\n", "abstract": " Use case modelling is gaining increasing interest in computer-based systems engineering, especially in the earliest stages of system development, where requirements are elicited, documented and validated. The paper presents a conceptual framework for use case modelling and a new use case model with graphical representation, including support for different abstraction levels and mechanisms for managing large use case models. Current application of use cases in requirements engineering is discussed, as well as ontological and methodological issues related to use case modelling.", "num_citations": "157\n", "authors": ["145"]}
{"title": "Challenges in market-driven requirements engineering-an industrial interview study\n", "abstract": " Requirements engineering for commercial off-the-shelf software packages entails special challenges. This paper presents preliminary results from an empirical study investigating these challenges through a qualitative approach using semi-structured interviews. The survey is exploratory with the objective of eliciting relevant topics for further research. Seven employees at five software companies with a market-driven development focus were interviewed. The areas of interest include process-related issues on release planning, requirements quality and decision support, as well as artefact-related issues regarding requirements as discrete entities and their representation. The paper also contains a characterization of each company, regarding aspects such as products, processes and customers. A number of challenging issues were elicited, including communication gaps between marketing and development, the problem of balancing the influence between marketing and development on requirements decisions, as well as the limited value of monolithic requirements specifications and the problem of requirements overloading.", "num_citations": "153\n", "authors": ["145"]}
{"title": "Requirements lifecycle management and release planning in market-driven requirements engineering processes\n", "abstract": " In market-driven software evolution, the objectives of a requirements engineering process include the continuous management of new and changed requirements in a way that ensures competitiveness in the market place. This paper compares two independently developed industrial market-driven requirements engineering processes, which both apply continuous requirements management using state-oriented life cycle models in the fostering of requirements from invention to release. Similarities and differences between the models are identified, and opportunities of lifecycle-oriented requirements management are recognized. The challenge of release planning is elaborated, with a particular focus on the crucial task of managing requirements dependencies.", "num_citations": "147\n", "authors": ["145"]}
{"title": "Requirements are slipping through the gaps\u2014A case study on causes & effects of communication gaps in large-scale software development\n", "abstract": " Communication is essential for software development as its efficiency throughout the entire project life-cycle is a key factor in developing and releasing successful software products to the market. This paper reports on findings from an explanatory case study aiming at a deeper understanding of the causes and effects of communication gaps in a large-scale industrial set up. Based on an assumption of what causes gaps in communication of requirements and what effects such gaps have, a semi-structured interview study was performed with nine practitioners at a large market-driven software company. We found four main factors that affect the requirements communication, namely scale, temporal aspects, common views and decision structures. The results also show that communication gaps lead to failure to meet the customers' expectations, quality issues and wasted effort. An increased awareness of these factors\u00a0\u2026", "num_citations": "145\n", "authors": ["145"]}
{"title": "A market-driven requirements engineering process: results from an industrial process improvement programme\n", "abstract": " In market-driven software evolution, the objective of a requirements engineering process include the envisioning and fostering of new requirements on existing packaged software products in a way that ensures competitiveness in the marketplace. This paper describes an industrial, market-driven requirements engineering process which incorporates continuous requirements elicitation and prioritisation together with expert cost estimation as a basis for release planning. The company has gained a measurable improvement in delivery precision and product quality of their packaged software. The described process will act as a baseline against which promising new techniques can be evaluated in the continuation of the improvement programme.", "num_citations": "129\n", "authors": ["145"]}
{"title": "A case study on benefits and side-effects of agile practices in large-scale requirements engineering\n", "abstract": " In the software industry, there is a strong shift from traditional phase-based development towards agile methods and practices. This paper reports on a case study aimed at investigating if, and how, agile Requirements Engineering (RE) can remedy the challenges of traditional RE, and what new challenges agile RE may pose. The results from an initial case study with 9 practitioners from a large software development company, which is transitioning towards agile-inspired processes, show that agile practices address some RE challenges such as communication gaps and overscoping, but also cause new challenges, such as striking a good balance between agility and stability, and ensuring sufficient competence in cross-functional development teams.", "num_citations": "120\n", "authors": ["145"]}
{"title": "A feasibility study of automated natural language requirements analysis in market-driven development\n", "abstract": " In market-driven software development there is a strong need for support to handle congestion in the requirements engineering process, which may occur as the demand for short time-to-market is combined with a rapid arrival of new requirements from many different sources. Automated analysis of the continuous flow of incoming requirements provides an opportunity to increase the efficiency of the requirements engineering process. This paper presents empirical evaluations of the benefit of automated similarity analysis of textual requirements, where existing information retrieval techniques are used to statistically measure requirements similarity. The results show that automated analysis of similarity among textual requirements is a promising technique that may provide effective support in identifying relationships between requirements.", "num_citations": "100\n", "authors": ["145"]}
{"title": "Quality Requirements in Industrial Practice - An Extended Interview Study at Eleven Companies\n", "abstract": " In order to create a successful software product and assure its quality, it is not enough to fulfill the functional requirements, it is also crucial to find the right balance among competing quality requirements (QR). An extended, previously piloted, interview study was performed to identify specific challenges associated with the selection, tradeoff, and management of QR in industrial practice. Data were collected through semistructured interviews with 11 product managers and 11 project leaders from 11 software companies. The contribution of this study is fourfold: First, it compares how QR are handled in two cases, companies working in business-to-business markets and companies that are working in business-to-consumer markets. These two are also compared in terms of impact on the handling of QR. Second, it compares the perceptions and priorities of QR by product and project management, respectively. Third, it\u00a0\u2026", "num_citations": "99\n", "authors": ["145"]}
{"title": "Exploring bottlenecks in market-driven requirements management processes with discrete event simulation\n", "abstract": " This paper presents a study where a market-driven requirements management process is simulated. In market-driven software development, generic software packages are released to a market with many customers. New requirements are continuously issued, and the objective of the requirements management process is to elicit, manage, and prioritize the requirements. In the presented study, a specific requirements management process is modelled using discrete event simulation, and the parameters of the model are estimated based on interviews with people from the specific organisation where the process is used. Based on the results from simulations, conditions that result in an overload situation are identified. Simulations are also used to find process change proposals that can result in a non-overloaded process. The risk of overload can be avoided if the capacity of the requirements management process is\u00a0\u2026", "num_citations": "99\n", "authors": ["145"]}
{"title": "Is a design rationale vital when predicting change impact?\u2013a controlled experiment on software architecture evolution\n", "abstract": " Software process improvement efforts often seek to shorten development lead-time. A potential means is to facilitate architectural changes by providing a design rationale, i.e. a documentation of why the architecture is built as it is. The hypothesis is that changes will be faster and more correct if such information is available during change impact analysis. This paper presents a controlled experiment where the value of having access to a retrospective design rationale is evaluated both quantitatively and qualitatively. Realistic change tasks are applied by 17 subjects from both industry and academia on two complex systems from the domain of embedded real-time systems. The results from the quantitative analysis show that, for one of the systems, there is a significant improvement in correctness and speed when subjects have access to a design rationale document. In the qualitative analysis, design rationale\u00a0\u2026", "num_citations": "89\n", "authors": ["145"]}
{"title": "Are you biting off more than you can chew? A case study on causes and effects of overscoping in large-scale software engineering\n", "abstract": " ContextScope management is a core part of software release management and often a key factor in releasing successful software products to the market. In a market-driven case, when only a few requirements are known a priori, the risk of overscoping may increase.ObjectiveThis paper reports on findings from a case study aimed at understanding overscoping in large-scale, market-driven software development projects, and how agile requirements engineering practices may affect this situation.MethodBased on a hypothesis of which factors that may be involved in an overscoping situation, semi-structured interviews were performed with nine practitioners at a large, market-driven software company. The results from the interviews were validated by six (other) practitioners at the case company via a questionnaire.ResultsThe results provide a detailed picture of overscoping as a phenomenon including a number of\u00a0\u2026", "num_citations": "81\n", "authors": ["145"]}
{"title": "An analytical model for requirements selection quality evaluation in product software development\n", "abstract": " In market-driven development of product software, a crucial decision for each candidate requirement is whether or not to select it for implementation in the next release. We present an analytical model of the requirements selection process, which is used for reasoning about decision quality. A network of queues, with two classes of jobs, models the selection of requirements of different quality. The feasibility of model parameter estimation is validated in a survey involving product managers and system engineers. The results show that some of the respondents have made internally consistent parameter estimations, indicating that the model is relevant and its parameters understandable. It is also shown that a majority of the consistent respondents estimate that most of their implemented product requirements are incorrectly selected. The main objective of the model is to provide tools for evaluation of improvement\u00a0\u2026", "num_citations": "62\n", "authors": ["145"]}
{"title": "Development of object-oriented frameworks\n", "abstract": " An object-oriented framework is a reusable software component providing large scale reuse, including reuse of analysis and design.", "num_citations": "53\n", "authors": ["145"]}
{"title": "Market-driven requirements engineering processes for software products\u2013a report on current practices\n", "abstract": " This paper reports on some preliminary results from the first stage of an interview survey, focusing on current practices and challenges in market-driven RE. The interviews are analysed based on the characteristics of market-driven RE presented in the literature.The interviews correspond largely with the literature. Identified discrepancies compared with the literature concerns the time-to-market attribute and documentation of requirements. Two major groupings among the participating companies were found. The RE processes of one of these groupings are focused on facilitating the activities fundamental in market-driven RE, eg the release planning activity, while the other is more document-driven. The results of the interviews also include some ideas on how market-driven RE activities may be performed.", "num_citations": "50\n", "authors": ["145"]}
{"title": "What happened to our features? Visualization and understanding of scope change dynamics in a large-scale industrial setting\n", "abstract": " When developing software platforms for product lines, decisions on which features to implement are affected by factors such as changing markets and evolving technologies. Effective scoping thus requires continuous assessment of how changes in the domain impact scoping decisions. Decisions may have to be changed as circumstances change, resulting in a dynamic evolution of the scope of software asset investments. This paper presents an industrial case study in a large-scale setting where a technique called feature survival charts for visualization of scoping change dynamics has been implemented and evaluated in three projects. The evaluation demonstrated that the charts can effectively focus investigations of reasons behind scoping decisions, valuable for future process improvements. A set of scoping measurements is also proposed, analyzed theoretically and evaluated empirically with data from the\u00a0\u2026", "num_citations": "49\n", "authors": ["145"]}
{"title": "Evaluating the practical use of different measurement scales in requirements prioritisation\n", "abstract": " The importance of prioritising requirements is widely recognised. A number of different techniques for prioritising requirements have been proposed, some based on an ordinal scale, others on a ratio scale. Some measurement scales provide more information than others, ie the ratio scale is richer than the ordinal scale. This paper aims to investigate the differences between the scales used in prioritisation. This is important since techniques using a richer scale tend to be more time-consuming and complex to use. Thus, there is a trade-off between simple techniques only providing ranks and complex techniques providing information about the relative distance between requirements priorities. The paper suggests an approach to measure the skewness of the ratio distribution and a way to use the cost-value approach on ordinal scale data. Four different empirical data sets were used to verify the suggested\u00a0\u2026", "num_citations": "46\n", "authors": ["145"]}
{"title": "Introducing programming and digital competence in Swedish K-9 education\n", "abstract": " The role of computer science and IT in Swedish schools has varied throughout the years. In fall 2014, the Swedish government gave the National Agency for Education (Skolverket) the task of preparing a proposal for K\u20139 education on how to better address the competences required in a digitalized society. In June 2016, Skolverket handed over a proposal introducing digital competence and programming as interdisciplinary traits, also providing explicit formulations in subjects such as mathematics (programming, algorithms and problem-solving), technology (controlling physical artifacts) and social sciences (fostering aware and critical citizens in a digital society). In March 2017, the government approved the new curriculum, which needs to be implemented by fall 2018 at the latest. We present the new K\u20139 curriculum and put it in a historical context. We also describe and analyze the process of developing\u00a0\u2026", "num_citations": "43\n", "authors": ["145"]}
{"title": "Scaling up requirements engineering\u2013exploring the challenges of increasing size and complexity in market-driven software development\n", "abstract": " [Context & motivation] Growing software companies with increasing product complexity face the issue of how to scale up their Requirements Engineering (RE) practices. In market-driven requirements engineering, release planning and scoping decisions are increasingly challenging as the size and complexity increases. [Problem] This paper presents initial results of an on-going exploratory, qualitative investigation of three market-driven, industrial cases with the objective of increasing our understanding of challenges in scaling up requirements engineering and how these challenges are addressed by the studied companies. [Results] Through 13 interviews in three companies, requirements engineering scalability issues are explored related to scoping and the structure of RE artifacts. [Contribution] The main contribution are findings related to increasing RE scale based on interpretations of the experienced\u00a0\u2026", "num_citations": "43\n", "authors": ["145"]}
{"title": "Requirements engineering with use cases-A basis for software development\n", "abstract": " Successful development of software systems depends on the quality of the requirements engineering process. Use cases and scenarios are promising vehicles for eliciting, specifying and validating requirements. This thesis investigates the role of use case modelling in requirements engineering and its relation to system verification and validation. The thesis includes studies of concepts and representations in use case modelling. Semantic issues are discussed and notations based on natural and graphical languages are provided, which allow a hierarchical structure and enable representation at different abstraction levels. Two different strategies for integrating use case modelling with system testing are presented and evaluated, showing how use cases can be a basis for test case generation and reliability assessment. An experiment on requirements validation using inspections with perspective-based reading is also reported, where one of the perspectives applies use case modelling. The results of the experiment indicate that a combination of multiple perspectives may not give higher defect detection rate compared to single perspective reading. Pilot studies of the transition from use case based requirements to high-level design are described, where use cases are successfully applied for documenting how functional requirements are distributed on architectural elements. The investigation of an industrial requirements engineering process improvement programme is also reported, where the introduction of a release-driven prioritisation method contributed to a measurable improvement in delivery precision and product quality. The results\u00a0\u2026", "num_citations": "42\n", "authors": ["145"]}
{"title": "A project effort estimation study\n", "abstract": " This paper outlines a four step effort estimation study and focuses on the first and second step. The four steps are formulated to successively introduce a more formal effort experience base. The objective of the study is to evaluate the needed formalism to improve effort estimation and to study different approaches to record and reuse experiences from effort planning in software projects. In the first step (including seven projects), the objective is to compare estimation of effort based on a rough figure (indicating approximate size of the projects) with an informal experience base. The objective of the second step is on reuse of experiences from an effort experience base, where the outcomes of seven previous projects were stored. Seven new projects are planned based on the previous experiences.The plans are, after project completion, compared with the initial plans and with the data from six out of the seven new\u00a0\u2026", "num_citations": "42\n", "authors": ["145"]}
{"title": "Strategies for industrial relevance in software engineering education\n", "abstract": " This paper presents a collection of experiences related to success factors in graduate and postgraduate education. The experiences are mainly concerned with how to make the education relevant from an industrial viewpoint. This is emphasized as a key issue in software engineering education and research, as the main objective is to give the students a good basis for large-scale software development in an industrial environment. The presentation is divided into experiences at the graduate and postgraduate levels, respectively. For each level a number of strategies to achieve industrial relevance are presented. On the graduate level a course in large-scale software development is described to exemplify how industrial relevance can be achieved on the graduate level. The strategies on the postgraduate level have been successful, but it is concluded that more can be done regarding industrial collaboration in the\u00a0\u2026", "num_citations": "37\n", "authors": ["145"]}
{"title": "An experiment on linguistic tool support for consolidation of requirements from multiple sources in market-driven product development\n", "abstract": " This paper presents an experiment with a linguistic support tool for consolidation of requirements sets. The experiment is designed based on the requirements management process at a large market-driven software development company that develops generic solutions to satisfy many different customers. New requirements and requests for information are continuously issued, which must be analyzed and responded to. The new requirements should first be consolidated with the old to avoid reanalysis of previously elicited requirements and to complement existing requirements with new information. In the presented experiment, a new open-source tool is evaluated in a laboratory setting. The tool uses linguistic engineering techniques to calculate similarities between requirements and presents a ranked list of suggested similar requirements, between which links may be assigned. It is hypothesized that the\u00a0\u2026", "num_citations": "36\n", "authors": ["145"]}
{"title": "Evaluating automated support for requirements similarity analysis in market-driven development\n", "abstract": " In market-driven software development, there is a considerable risk for congestion in the requirements engineering process, as the demand of short time-to-market is combined with a rapid arrival of new requirements from many different sources. Automated analysis of the continuous flow of incoming requirements provides an opportunity to increase the efficiency of the requirements engineering process. This paper presents empirical evaluations of the benefit of automated similarity analysis of textual requirements, where existing Information Retrieval techniques are used to statistically measure requirements similarity. The results show that automated analysis of similarity among textual requirements is a promising technique that may provide effective support in both requirements duplicate identification and requirements interdependency analysis.", "num_citations": "34\n", "authors": ["145"]}
{"title": "Architecting and coordinating thousands of requirements\u2013an industrial case study\n", "abstract": " [Context & motivation] When large organizations develop systems for large markets, the size and complexity of the work artefacts of requirements engineering impose critical challenges. [Problem] This paper presents an industrial case study with the goal to increase our understanding of large-scale requirements engineering practice. We focus on a senior requirements engineering role at our case company, called requirements architect, responsible for quality and coordination of large requirements repositories.[Results] Based on interviews with 7 requirements architects, we present their tasks and views on architecture quality. [Contribution] Our results imply further research opportunities in large-scale requirements engineering.", "num_citations": "33\n", "authors": ["145"]}
{"title": "Computing at school in Sweden\u2013experiences from introducing computer science within existing subjects\n", "abstract": " Computing is no longer considered a subject area only relevant for a narrow group of professionals, but rather as a vital part of general education that should be available to all children and youth. Since making changes to national curricula takes time, people are trying to find other ways of introducing children and youth to computing. In Sweden, several current initiatives by researchers and teachers aim at finding ways of working with computing within the current curriculum. In this paper we present case studies based on a selection of these initiatives from four major regions in Sweden and based on these case studies we present our ideas for how to move forward on introducing computational thinking on a larger scale in Swedish education.", "num_citations": "32\n", "authors": ["145"]}
{"title": "Overscoping: Reasons and consequences\u2014A case study on decision making in software product management\n", "abstract": " Efficient scope management is a core part of software release management and often a key factor in releasing successful software products to the market. In a case when not all the requirements for the next software product release are known `a priori' and when new requirements are issued throughout the project, the risk of overscoping by including more functionality than can be implemented increases. In this paper, we report on findings from an empirical interview study about understanding the causes and effects of overscoping in a large-scale industrial set up. Six main causes of overscoping have been identified in this work, complemented by root cause analysis of the causes and concluded by effects of overscoping. The results provide an increased understanding of the scoping activity as a continuous activity and outline risks and issues that can lead to a situation of overscoping.", "num_citations": "32\n", "authors": ["145"]}
{"title": "Post-Release Analysis Of Requirements Selection Quality: An Industrial Case Study\n", "abstract": " The process of selecting requirements for a release of a software product is challenging as the decision-making is based on uncertain predictions of issues such as market value and development cost. This paper presents a method aimed at supporting software product development organisations in the identification of process improvement proposals to increase requirements selection quality. The method is based on an in-depth analysis of requirements selection decision outcomes after the release has been launched to the market and is in use by customers. The method is validated in a case study involving real requirements and industrial requirements engineering experts.", "num_citations": "30\n", "authors": ["145"]}
{"title": "Exploring software product management decision problems with constraint solving-opportunities for prioritization and release planning\n", "abstract": " Decision-making is central to Software Product Management (SPM) and includes deciding on requirements priorities and the content of coming releases. Several algorithms for prioritization and release planning have been proposed, where humans with or without machine support enact a series of steps to produce a decision outcome. Instead of applying some specific algorithm to find an acceptable solution to a decision problem, we propose to model SPM decision-making as a Constraint Satisfaction Problem (CSP), where relative and absolute priorities, interdependencies, and other constraints are expressed as relations among variables representing entities such as feature priorities, stakeholder preferences, and resource constraints. The solution space is then explored with the help of a constraint solver without humans needing to care about specific algorithms. This paper discusses advantages and limitations\u00a0\u2026", "num_citations": "27\n", "authors": ["145"]}
{"title": "Visualization of agreement and satisfaction in distributed prioritization of market requirements\n", "abstract": " When developing packaged software which is sold \u201coff-the-shelf\u201d on a worldwide market place, it is essential to collect needs and opportunities from different market segments and use this information in the prioritization of requirements for the next software release. This paper presents an industrial case study where a distributed prioritization process is proposed, observed and evaluated. The stakeholders in the requirements prioritization process include marketing offices, which are distributed around the world. A major objective of the distributed prioritization is to gather and high-light the differences and similarities in the requirement priorities of the different market segments. The evaluation through questionnaires show that the stakeholders found the process useful. The paper also presents the novel approaches to visualize the priority distribution among stakeholders, together with measures on disagreement and satisfaction. Product management found the proposed charts valuable as decision support when selecting requirements for the next release.", "num_citations": "26\n", "authors": ["145"]}
{"title": "How firms adapt and interact in open source ecosystems: Analyzing stakeholder influence and collaboration patterns\n", "abstract": " [Context and motivation] Ecosystems developed as Open Source Software (OSS) are considered to be highly innovative and reactive to new market trends due to their openness and wide-ranging contributor base. Participation in OSS often implies opening up of the software development process and exposure towards new stakeholders. [Question/Problem] Firms considering to engage in such an environment should carefully consider potential opportunities and challenges upfront. The openness may lead to higher innovation potential but also to frictional losses for engaged firms. Further, as an ecosystem progresses, power structures and influence on feature selection may fluctuate accordingly. [Principal ideas/results] We analyze the Apache Hadoop ecosystem in a quantitative longitudinal case study to investigate changing stakeholder influence and collaboration patterns. Further, we investigate how\u00a0\u2026", "num_citations": "25\n", "authors": ["145"]}
{"title": "Non-functional requirements metrics in practice-an empirical document analysis\n", "abstract": " Non-functional requirements metrics in practice - an empirical document analysis LUND UNIVERSITY LUND UNIVERSITY LIBRARIES Lund University Lund University Publications LUND UNIVERSITY LIBRARIES Register publications | Statistics | Marked list 0 | Saved searches 0 Advanced Home | Publications | Departments Non-functional requirements metrics in practice - an empirical document analysis Olsson, Thomas ; Berntsson Svensson, Richard LU and Regnell, Bj\u00f6rn LU (2007) Workshop on Measuring Requirements for Project and Product Success Mark Links Research Portal page Google Scholar find title Please use this url to cite or link to this publication: http://lup.lub.lu.se/record/1615536 Details BibTeX author Olsson, Thomas ; Berntsson Svensson, Richard LU and Regnell, Bj\u00f6rn LU organization Department of Computer Science Software Engineering-lup-obsolete (research group) publishing date in //-\u2026", "num_citations": "24\n", "authors": ["145"]}
{"title": "Case studies in process improvement through retrospective analysis of release planning decisions\n", "abstract": " The process of selecting requirements for a release of a software product is challenging as the decision-making is based on uncertain predictions of customer value and development cost. This paper presents a method aimed at supporting software product development organisations in the identification of process improvement proposals to increase requirements selection quality. The method is based on an in-depth analysis of requirements selection decision outcomes after the release has been launched to the users. The method is validated in two separate case studies involving real requirements and industrial requirements engineering experts. The conclusions from the two case studies are that the method seems valuable in situations with complex release planning decisions, such as in market-driven projects. It also appears essential that participants with different viewpoints attend the root cause discussion\u00a0\u2026", "num_citations": "24\n", "authors": ["145"]}
{"title": "Evidence-based timelines for agile project Retrospectives\u2013A method proposal\n", "abstract": " Retrospective analysis of agile projects can support identification of issues through team reflection and may enable learning and process improvements. Basing retrospectives primarily on experiences poses a risk of memory bias as people may remember events differently, which can lead to incorrect conclusions. This bias is enhanced in project retrospectives which cover a longer period compared to iteration retrospectives. To support teams in recalling accurate and joint views of projects, we propose using an evidence-based timeline with historical data as input to project retrospectives. The proposed method was developed together with a large software development company in the telecommunications domain. This paper outlines a method for visualizing an evidence-based project timeline by illustrating aspects such as business priority, iterations and test activities. Our method complements an\u00a0\u2026", "num_citations": "16\n", "authors": ["145"]}
{"title": "A measurement framework for team level assessment of innovation capability in early requirements engineering\n", "abstract": " When developing software-intensive products for a market-place it is important for a development organisation to create innovative features for coming releases in order to achieve advantage over competitors. This paper focuses on assessment of innovation capability at team level in relation to the requirements engineering that is taking place before the actual product development projects are decided, when new business models, technology opportunities and intellectual property rights are created and investigated through e.g. prototyping and concept development. The result is a measurement framework focusing on four areas: innovation elicitation, selection, impact and ways-of-working. For each area, candidate measurements were derived from interviews to be used as inspiration in the development of a tailored measurement program. The framework is based on interviews with participants of a\u00a0\u2026", "num_citations": "16\n", "authors": ["145"]}
{"title": "Requirements engineering in open innovation: a research agenda\n", "abstract": " In recent years Open Innovation (OI) has gained much attention and made firms aware that they need to consider the open environment surrounding them. To facilitate this shift Requirements Engineering (RE) needs to be adapted in order to manage the increase and complexity of new requirements sources as well as networks of stakeholders. In response we build on and advance an earlier proposed software engineering framework for fostering OI, focusing on stakeholder management, when to open up, and prioritization and release planning. Literature in open source RE is contrasted against recent findings of OI in software engineering to establish a current view of the area. Based on the synthesized findings we propose a research agenda within the areas under focus, along with a framing-model to help researchers frame and break down their research questions to consider the different angles implied by the\u00a0\u2026", "num_citations": "15\n", "authors": ["145"]}
{"title": "Measuring for innovation: a guide for innovative teams\n", "abstract": " Experience constantly tells us that \u201cWhat is measured, gets done!\u201d. However when it comes to innovation the measurement indicators available are rarely useful. The classical indicators are made for follow-up at best (eg number of patents or ideas) while indicators used for driving innovative activities are absent. When developing products and services for a marketplace it is important for any organization to create innovative features and solutions in order to achieve an advantage over its competitors.", "num_citations": "15\n", "authors": ["145"]}
{"title": "Replication of an experiment on linguistic tool support for consolidation of requirements from multiple sources\n", "abstract": " Large market-driven software companies continuously receive large numbers of requirements and change requests from multiple sources. The task of analyzing those requests against each other and against already analyzed or implemented functionality then recording similarities between them, also called the requirements consolidation task, may be challenging and time consuming. This paper presents a replicated experiment designed to further investigate the linguistic tool support for the requirements consolidation task. In this replication study, 45 subjects, working in pairs on the same set of requirements as in the original study, were assigned to use two methods for the requirements consolidation: (1) lexical similarity and (2) searching and filtering. The results show that the linguistic method used in this experiment is not more efficient in consolidating requirements than the searching and filtering\u00a0\u2026", "num_citations": "14\n", "authors": ["145"]}
{"title": "Teaching programming to young learners using scala and kojo\n", "abstract": " This paper presents an approach to teaching programming and abstract thinking to young learners using Scala and Kojo. Kojo is an open source IDE for the Scala programming language. The approach is based on Scala APIs for turtle graphics and functional pictures, a process of interactive exploration and discovery, and structured learning material that guides learners. The approach encourages playful self-learning of basic programming principles such as sequential execution, repetition, primitives, composition, abstraction, parametrized abstraction, and nested abstractions. It also includes tools to help children read and understand programs. Results from the use of Kojo and Scala in the teaching of young learners in Sweden and India are presented, along with a discussion of experiences and future development.", "num_citations": "13\n", "authors": ["145"]}
{"title": "Feature transition charts for visualization of cross-project scope evolution in large-scale requirements engineering for product lines\n", "abstract": " In large-scale multi-project software engineering it is a challenge to provide a comprehensive overview of the complexity and dynamics of the requirements engineering process. This paper presents a visualization technique called Feature Transition Charts (FTC) that gives an overview of scoping decisions involving changes across multiple projects based on previous work on within-project visualization of feature survival. FTC is initially validated using industrial data from the embedded systems domain in a multi-project product line engineering context in dialogue with practitioners. The initial validation provided specific improvement proposals for further work and indicated a positive view on the general feasibility and usefulness of FTC.", "num_citations": "13\n", "authors": ["145"]}
{"title": "Visualization of feature survival in platform-based embedded systems development for improved understanding of scope dynamics\n", "abstract": " This paper presents a method for visualizing the scoping process in platform-based development of embedded systems. The proposed visualization shows the decision process of including or excluding features that are candidates for the next release. The presented visualization charts are evaluated in a large-size embedded system platform project. The evaluation indicates that the visualization of feature survival and scope dynamics can improve the understanding of the decision process of platform scoping in real industrial projects. Future work includes dealing with the relations between features and system requirements, improving user interaction as well as visualizing statistical measures of efficiency of the scoping process.", "num_citations": "13\n", "authors": ["145"]}
{"title": "Assessing requirements compliance scenarios in system platform subcontracting\n", "abstract": " In the mobile industry, system platforms are offered to device developers to enable rapid product development while sharing expensive technology development investments. This paper presents a framework for assessment of requirements engineering collaboration related to statements-of-compliance negotiation in platform subcontracting. The framework includes a classification of platform compliance scenarios and results from analysis of interviews with engineers at two collaborating companies, a device vendor and a platform vendor. Case study findings particular to the compliance scenarios of the framework are provided. The purpose of the framework is to provide a basis for process improvement in collaborative requirements engineering.", "num_citations": "12\n", "authors": ["145"]}
{"title": "Reqt. org\u2013towards a semi-formal, open and scalable requirements modeling tool\n", "abstract": " [Context and motivation] This research preview presents ongoing work on a free software requirements modeling tool called reqT that is developed in an educational context. [Question/problem] The work aims to engage computer science students in Requirements Engineering (RE) through a tool that captures essential RE concepts in executable code. [Principal ideas] Requirements are modeled using an internal DSL in the Scala programming language that blends natural language strings with a graph-oriented formalism. [Contribution] The metamodel of reqT and its main features are presented and modeling examples are provided together with a discussion on initial experiences from student projects, limitations and directions of further research.", "num_citations": "10\n", "authors": ["145"]}
{"title": "Guiding requirements scoping using ROI: towards agility, openness and waste reduction\n", "abstract": " We present a model for supporting scoping decisions that is based on an analysis of the ROI for a given feature. Employing a ROI threshold value for making scoping decisions, the utility of the model was investigated using data from a single large project and identified a group of outlying features responsible for a disproportionate wasted investment. These initial results are promising and indicate that further investigation and validation efforts are warranted.", "num_citations": "10\n", "authors": ["145"]}
{"title": "From Requirements to Design with Use Cases-Experiences from Industrial Pilot Projects\n", "abstract": " In systems evolution, new requirements are distributed on existing architectures. This paper describes a method for modelling how new requirements are distributed on a hierarchy of existing system components. The method applies use case modelling in the transition from requirements to design, with focus on requirements traceability and dynamic system behaviour modelling. The method is based on a recursive process where functionality specification and distribution activities are applied at different abstraction levels in the component hierarchy. The method has been evaluated in three realistic projects, concerned with the evolution of a complex real-time cellular switching system. The subjective conclusions from these evaluations suggest that use case modelling is useful in requirements analysis and distribution within the studied domain.", "num_citations": "8\n", "authors": ["145"]}
{"title": "Controlling lost opportunity costs in agile development\u2013the basic lost opportunity estimation model for requirements scoping\n", "abstract": " We present a model for estimating the final keep/cancel decision point, on a per-feature basis, for scope inclusion in a future release. The Basic Lost Opportunity Estimation Model (BLOEM), based on data from a company that uses an agile-inspired software development model, supports feature selection when the time-dependent business value estimates change as the requirements analysis progresses. The initial BLOEM validation, conducted on a set of 166 features, suggests that the model can valuable input to the feature selection process for a given release, helping to control lost opportunity costs due to feature cancellation. Limitations of BLOEM are discussed and issues for further research are presented.", "num_citations": "7\n", "authors": ["145"]}
{"title": "A framework for simulation of requirements engineering processes\n", "abstract": " The objective of the work presented in this paper is to design and develop a framework for simulation of requirements engineering processes. The framework is intended to be a support when simulation models are built by guiding the modeler in which components to use in this type of models and to speed up the process of developing simulation models. The framework was developed through an iterative process where it was used to model two processes that previously have been represented in simulation models. The resulting framework consists of three layers; one representing general process modeling concepts, one representing software process concepts, and one representing requirements engineering concepts.", "num_citations": "7\n", "authors": ["145"]}
{"title": "Comparing ordinal and ratio scale data in requirements prioritisation\n", "abstract": " The importance of prioritising requirements is widely recognised. A number of different techniques for prioritising requirements have been proposed, some based on an ordinal scale, others on a ratio scale. Different scales provide different levels of information, eg the ratio scale is richer than the ordinal scale. This paper aims to investigate the difference in information and aim to find ways to measure and compare the different levels of information. This is important since techniques using a richer scale tend to be more time-consuming and complex to use. Thus, there is a trade-off between simple techniques yielding less information and complex techniques yielding more information. The paper suggests three approaches to compare the level of information inherent in the two scales, and one way to design the cost-value diagram when the priorities are based on ranks. An empirical data set was used to verify the suggested approaches.", "num_citations": "7\n", "authors": ["145"]}
{"title": "Improving requirements-test alignment by prescribing practices that mitigate communication gaps\n", "abstract": " The communication of requirements within software development is vital for project success. Requirements engineering and testing are two processes that when aligned can enable the discovery of issues and misunderstandings earlier, rather than later, and avoid costly and time-consuming rework and delays. There are a number of practices that support requirements-test alignment. However, each organisation and project is different and there is no one-fits-all set of practices. The software process improvement method called Gap Finder is designed to increase requirements-test alignment. The method contains two parts: an assessment part and a prescriptive part. It detects potential communication gaps between people and between artefacts (the assessment part), and identifies practices for mitigating these gaps (the prescriptive part). This paper presents the design and formative evaluation of the\u00a0\u2026", "num_citations": "6\n", "authors": ["145"]}
{"title": "A scala embedded DSL for combinatorial optimization in software requirements engineering\n", "abstract": " The goal of the presented work is to provide support for software requirements engineering domain experts in modeling combinatorial optimization problems that arise in requirements prioritization and release planning. A Domain-Specific Language (DSL), called reqT/CSP, is presented that integrates constraints modeling with requirements modeling. The DSL is embedded in the object-functional Scala programming language. The DSL is demonstrated using principal examples of priority ranking and release planning. Benefits, limitations and future work are discussed.", "num_citations": "6\n", "authors": ["145"]}
{"title": "Investigation of requirements selection quality in market-driven software processes using an open source discrete event simulation framework\n", "abstract": " When developing commercial software products it is crucial to select the right requirements for the right release and to have a short mean-time-to-market (MTTM) in order to be competitive. We report on a simulation of a model of market-driven requirements engineering processes with requirements selection quality as a key aspect. The simulator is built using an open source simulation framework and an evaluation of this framework is provided. The simulator enables investigation of how MTTM is affected by variations of internal and external process parameters. The results indicate that it is beneficial to put resources on a requirements screening phase, as this reduces the risk of process overload.", "num_citations": "5\n", "authors": ["145"]}
{"title": "A case study in retrospective analysis of release planning in an agile project\n", "abstract": " This paper presents a case study evaluating a retrospective analysis method, aimed at improving the release planning activity in project management. The method is based on a re-evaluation of candidate requirements for prior releases in order to uncover release planning decisions that would have been made differently today. The method aims at using the lessons learned during the analysis to find improvement possibilities for the release planning in future projects. The release planning in the investigated project turned out as successful in the retrospective analysis. This may be due to the in-house project type, as the users in an in-house project are few and tangible, and have more similar requirements, compared to in a marketdriven project. It may also be due to the iterative approach used during development as it provides possibilities of continual re-prioritisation of requirements.", "num_citations": "4\n", "authors": ["145"]}
{"title": "A contribution management framework for firms engaged in open source software ecosystems-a research preview\n", "abstract": " Context and motivation: Contribution Management helps firms engaged in Open Source Software (OSS) ecosystems to motivate what they should contribute and when, but also what they should focus their resources on and to what extent. Such guidelines are also referred to as contribution strategies. The motivation for developing tailored contribution strategies is to maximize return on investment and sustain the influence needed in the ecosystem. Question/Problem: We aim to develop a framework to help firms understand their current situation and create a starting point to develop an effective contribution management process. Principal ideas/results: Through a design science approach, a prototype framework is created based on literature and validated iteratively with expert opinions through interviews. Contribution: In this research preview, we present our initial results after our first design cycle and\u00a0\u2026", "num_citations": "3\n", "authors": ["145"]}
{"title": "Variations on the evidence-based timeline retrospective method: a comparison of two cases\n", "abstract": " Project retrospectives can be a powerful tool for process improvement through obtaining new insights. However pure experience-based reflections may lead to incorrect conclusions. Our method, evidence-based timeline retrospectives (EBTR), mitigates this risk by providing a pre-generated timeline that visualises project history based on evidence rather than relying on subjective opinions and biased memories. Through a comparative study of two cases, a set of variation points has been evaluated. The variation points enable configuring the EBTR method to different contexts and retrospective goals. The results indicate that by selecting certain variations the EBTR method can be configured to support either wide assessments (e.g. the overall impact of a new process) or assessments of a specific process area. For example, through using open or semi-structured discussions, or by varying the applied timeline\u00a0\u2026", "num_citations": "3\n", "authors": ["145"]}
{"title": "An analytical model of requirements selection quality in software product development\n", "abstract": " In market-driven requirements engineering a crucial decision is whether or not to select a requirement for implementation in the next software release. The selection process is part of the release planning process and can be viewed as a series of refinement steps resulting in either rejection or propagation to the next step. This paper presents an analytical model of the selection process which takes the quality of the decision-making into account. The model is a network of queues with multiclass jobs corresponding to requirements of different quality. The analytical model can act as a baseline for simulation of more realistic models where no analytical solution is possible. Further work includes empirical assessment of the model and further experiments using simulation. The long-term objective of the presented research is to provide means for practitioners to optimize the selection process in terms of minimizing wasted effort.", "num_citations": "3\n", "authors": ["145"]}
{"title": "A Market-driven Requirements Engineering Process\n", "abstract": " In market-driven software evolution, the objectives of a requirements engineering process include the envisioning and fostering of new requirements on existing packaged software products in a way that ensures competitiveness in the market place. This paper describes an industrial, market-driven requirements engineering process which incorporates continuous requirements elicitation and prioritisation together with expert cost estimation as a basis for release planning. The company has gained a measurable improvement in delivery precision and product quality of their packaged software. The described process will act as a baseline against which new promising techniques can be evaluated in the continuation of the improvement programme.", "num_citations": "3\n", "authors": ["145"]}
{"title": "What to share, when, and where: balancing the objectives and complexities of open source software contributions\n", "abstract": " Context:                 Software-intensive organizations\u2019 rationale for sharing Open Source Software (OSS) may be driven by both idealistic, strategic and commercial objectives, and include both monetary as well as non-monetary benefits. To gain the potential benefits, an organization may need to consider what they share and how, while taking into account risks, costs and other complexities.                                               Objective:                 This study aims to empirically investigate objectives and complexities organizations need to consider and balance between when deciding on what software to share as OSS, when to share it, and whether to create a new or contribute to an existing community.                                               Method:                 A multiple-case study of three case organizations was conducted in two research cycles, with data gathered from interviews with 20 practitioners from these\u00a0\u2026", "num_citations": "2\n", "authors": ["145"]}
{"title": "A prototype tool for QUPER to support release planning of quality requirements\n", "abstract": " A prototype tool for QUPER to support release planning of quality requirements LUND UNIVERSITY LUND UNIVERSITY LIBRARIES Lund University Lund University Publications LUND UNIVERSITY LIBRARIES Register publications | Statistics | Marked list 0 | Saved searches planning of quality requirements Berntsson Svensson, Richard LU ; Lindberg Parker, Pontus and Regnell, Bj\u00f6rn LU (2011) Fifth International Workshop on Software Product Management Mark Links Research Portal page Google Scholar find title Please use this url to cite or link to this publication: https://lup.lub.lu.se/record/2167807 Details BibTeX author Berntsson Svensson, Richard LU ; Lindberg Parker, Pontus and Regnell, Bj\u00f6rn LU organization Department of Computer Science Software Engineering-lup-obsolete (research group) ELLIIT: the -on , \u2026", "num_citations": "2\n", "authors": ["145"]}
{"title": "Requirements are slipping through the Gaps\n", "abstract": " Communication is essential for software development as its efficiency throughout the entire project life-cycle is a key factor in developing and releasing successful software products to the market. This paper reports on findings from an explanatory case study aiming at a deeper understanding of the causes and effects of communication gaps in a large-scale industrial set up. Based on an assumption of what causes gaps in communication of requirements and what effects such gaps have, a semi-structured interview study was performed with nine practitioners at a large market-driven software company. We found four main factors that affect the requirements communication, namely scale, temporal aspects, common views and decision structures. The results also show that communication gaps lead to failure to meet the customers\u2019 expectations, quality issues and wasted effort. An increased awareness of these factors is a help in identifying what to address to achieve a more efficient requirements management, and ultimately more efficient and successful software development. By closing the communication gaps the requirements may continue all the way through the project life-cycle and be more likely to result in software that meets the customers\u2019 expectations.", "num_citations": "2\n", "authors": ["145"]}
{"title": "SoftwareBusinessSecond International Conference, ICSOB 2011Brussels, Belgium June 8-10, 2011Proceedings\n", "abstract": " The Second International Conference on Software Business (ICSOB 2011) was organized in Brussels, Belgium: the heart of Europe and administrative center of the European Union. The conference theme \u201cManaging Software Innovation for Tomorrow\u2019s Business\u201d reflects the specific challenges in the research domain of software business. Although the software business shares common features with other international knowledge-intensive businesses, it carries many inherent features making it a challenging domain for research. The goal of the ICSOB conference series is to bring together researchers with a specific focus on this domain.We received 27 scientific paper submissions in various categories. Each submission was reviewed by at least three members from the Program Committee. During the Program Committee meeting, held in Utrecht, The Netherlands, 12 participants from various countries discussed\u00a0\u2026", "num_citations": "2\n", "authors": ["145"]}
{"title": "What is essential?\u2013A pilot survey on views about the requirements metamodel of reqT. org\n", "abstract": " [Context & motivation] This research preview paper presents ongoing work on the metamodel of a free software requirements modeling tool called reqT that is developed in an educational context. The work aims to make an initial validation of a survey instrument that elicits views on the metamodel of the reqT tool, which aims to engage computer science students in Requirements Engineering (RE) through an open source DSL embedded in the Scala programming language. [Question] The research question is: Which RE concepts are essential to include in the metamodel for a requirements engineering tool in an educational context? [Principal ideas] A survey instrument is developed, with a list of 92 concepts (49 entities, 15 relations and 28 attributes) and a set of questions for each concept, to elicit the respondents\u2019 views on the usage and interpretation of each concept. [Contribution] The survey is initially\u00a0\u2026", "num_citations": "1\n", "authors": ["145"]}
{"title": "Are You Biting Off More Than You Can Chew?\n", "abstract": " Context: Scope management is a core part of software release management and often a key factor in releasing successful software products to the market. In a market-driven case, when not all the requirements are known \u2018a priori\u2019, the risk of overscoping may increase.Objective: This paper reports on findings from a case study aimed at understanding overscoping in a largescale industrial set up, and how agile requirements engineering practices may affect this situation.Method: Based on an assumption of what factors are involved in an overscoping situation, semi-structured interviews were performed with nine practitioners at a large market-driven software company. The results from the interviews were then presented to six (other) practitioners at the case company and their level of agreement was gathered via a questionnaire.Results: Six main causes of overscoping have been identified in this study:(1) continuous requirements inflow;(2) no overview of software resource availability;(3) low development team involvement;(4) requirements not agreed;(5) requirements specification produced upfront; and (6) unclear vision of overall goal. In addition, the results include six main effects of overscoping, namely (1) many requirement changes;(2) quality issues;(3) delays;(4) customer expectations are not always met;(5) communication gaps; and (6) challenge to keep the SRS updated. Furthermore, the study points to three agile requirements engineering practices that may address overscoping, namely one continuous scope & release-planning flow; crossfunctional and integrated development teams; and gradual & iterative detailing of requirements\u00a0\u2026", "num_citations": "1\n", "authors": ["145"]}
{"title": "An Industrial Case Study on Large-Scale Variability Management for Product Configuration in the Mobile Handset Domain.\n", "abstract": " Efficient variability management is a key issue in large-scale product line engineering, where products with different propositions are built on a common platform. Variability management implies challenges both on requirements engineering and configuration management. This paper presents findings from an improvement effort in an industrial case study including the following contributions: problem statements based on an interview study of current practice, an improvement proposal that addresses the challenges found, and an initial validation of the proposal based on interviews with experts from the case company.", "num_citations": "1\n", "authors": ["145"]}
{"title": "Praktikprojekt och n\u00e4ringslivssamverkan f\u00f6r motivation och djupinl\u00e4rning\n", "abstract": " I kursen ETS170 kravhantering erbjuds studenterna m\u00f6jligheten att genomf\u00f6ra praktikprojekt i samarbete med n\u00e4ringslivet. Praktikprojekten utg\u00f6r 2 av 5 po\u00e4ng och genomf\u00f6rs i grupper av 3-5 studenter. I dessa skarpa projekt till\u00e4mpar studenterna teorin i kursen p\u00e5 verkliga industriella problem och f\u00e5r genom stort eget ansvar prova sina f\u00f6rm\u00e5gor att g\u00e5 fr\u00e5n teori till praktisk handling i en verklig ingenj\u00f6rssituation. Det lokala n\u00e4ringslivet bidrar med problemformuleringar och handledning. L\u00e4rarna vid LTH bidrar med coaching av projektgruppen och stimulerar till sj\u00e4lvst\u00e4ndig v\u00e4rdering av kurslitteraturens v\u00e4rldsbild. Praktikprojekten examineras i huvudsak baserat p\u00e5 en erfarenhetsrapport som varje projektgrupp f\u00f6rfattar d\u00e4r studenterna l\u00e4rande redovisas i relation till kursens inl\u00e4rningsm\u00e5l. F\u00f6r att sprida l\u00e4rdomarna mellan grupperna till\u00e4mpas korsvis kamratgranskning. Dessutom redovisas projekten p\u00e5 en avslutande konferens d\u00e4r \u00e4ven n\u00e4ringslivet deltar. En sv\u00e5righet \u00e4r beroendet av l\u00e4rarnas industriella kontaktn\u00e4t, en annan de omfattande f\u00f6rberedelser som kr\u00e4vs. Enligt kursutv\u00e4rderingarna \u00e4r projektet en ov\u00e4rderlig motivationsskapare och inriktningen mot djupinl\u00e4rning hos studenterna \u00e4r tydlig.", "num_citations": "1\n", "authors": ["145"]}
{"title": "Ska teknologen tillverka tentan?\u2013Erfarenheter av studentmedverkan i utformningen av skriftlig examination\n", "abstract": " Kravhantering har i grupp, veckovis l\u00e4mnat in f\u00f6rslag p\u00e5 tentamensproblem med tillh\u00f6rande bed\u00f6mningsmall. Om dessa \u00e4r av tillr\u00e4ckligt h\u00f6g kvalitet enligt givna riktlinjer renderar de bonuspo\u00e4ng som tillgodor\u00e4knas tentamen och problemen har ocks\u00e5 en reell chans att bli inkluderade i sj\u00e4lva tentamen. I denna artikel beskrivs det praktiska uppl\u00e4gget och erfarenheterna fr\u00e5n tv\u00e5 till\u00e4mpningar av studentmedverkan i tentamensutformningen. Erfarenheterna visar att n\u00e4stan alla studenter \u00e4r villiga att f\u00f6rs\u00f6ka uppn\u00e5 bonus. Genom riktlinjerna f\u00f6r vad som kr\u00e4vs f\u00f6r att f\u00e5 bonus ges en m\u00f6jlighet att styra mot djupinl\u00e4rning och samtidigt ge tydliga m\u00e5l f\u00f6r vad som kr\u00e4vs vid examinationen. Studenternas arbetsbelastning blir j\u00e4mnare f\u00f6rdelad \u00f6ver tiden och de f\u00e5r en kontinuerlig \u00e5terkoppling p\u00e5 var de st\u00e5r i l\u00e4randeprocessen. En diskussion ges kring resursbehovet f\u00f6r detta kursmoment. Slutsatsen \u00e4r att arbetsinsatsen fr\u00e5n examinator vid bed\u00f6mningen av studenternas tentamensproblemf\u00f6rslag \u00e4r ytterst v\u00e4l investerad tid med tanke p\u00e5 l\u00e4randeutfallet.", "num_citations": "1\n", "authors": ["145"]}
{"title": "Aligning the requirements engineering process with the maturity of markets and products\n", "abstract": " This paper describes the product life cycle and its implications for the requirements engineering process, and proposes a research agenda for increasing the understanding of market and product maturity implications on requirements engineering. A product life cycle comprises four stages of maturity: Introduction, Growth, Maturity and Decline. All products go through these four stages of maturity during its lifetime, and we believe it is necessary to take the maturity into account when deciding on requirements engineering issues. User behaviour differs between the stages, the organisation goes through drastic changes and the product itself evolves. Thus, these characteristics force different demands on the requirements engineering process, and this position paper suggests strategies for requirements engineering in the different stages.", "num_citations": "1\n", "authors": ["145"]}
{"title": "A case study on scenario-based process flexibility assessment for risk reduction\n", "abstract": " Flexibility is a desired quality of software processes. Process flexibility implies a capability to adapt to new contexts. Another aspect of flexibility is the cost of maintaining process effectiveness as new situations arise. A lack of preparedness for future events may constitute a high risk to a software development organization. This paper presents a method for assessing the flexibility of an organization and its processes. The assessment method is scenario-based and provides an estimate of process flexibility in terms of risk. The method is evaluated in a case study, where the process flexibility at a telecommunication software developer has been assessed. The case study indicates that the method is feasible and effective, and that the cost of conducting scenario-based process flexibility assessment is reasonable. The proposed method was able to identify a number of relevant areas to be improved in order to\u00a0\u2026", "num_citations": "1\n", "authors": ["145"]}
{"title": "An industrial case study of usability engineering in market-driven packaged software development\n", "abstract": " In market-driven software development it is crucial to produce the best product as quickly as possible in order to reach customer satisfaction. Requirements arrive at a high rate and the main focus tends to be on the functional requirements. The functional requirements are important, but their usefulness relies on their usability, which may be a rewarding competitive means on its own. Existing methods help software development companies to improve the usability of their product. However, companies that have little experience in usability still find them to be difficult to use, unreliable, and expensive. In this study we present results and experiences on conducting two known usability evaluations, using a questionnaire and a heuristic evaluation, at a large software development company. We have found that the two methods complement each other very well, the first giving scientific measures of usability attributes, and the second revealing actual usability deficiencies in the software. Although we did not use any usability experts, evaluations performed by company employees produced valuable results. The company, who had no prior experience in usability evaluation, found the results both useful and meaningful. We can conclude that the evaluators need a brief introduction on usability to receive even better results from the heuristic evaluation, but this may not be required in the initial stages.", "num_citations": "1\n", "authors": ["145"]}