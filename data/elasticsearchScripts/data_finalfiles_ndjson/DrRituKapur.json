{"title": "A cost effective approach for resource scheduling in cloud computing\n", "abstract": " Cloud Computing is a major area of research. Cost and Load balancing has become an important QoS parameter. Load Balancing directly affects the Reliability, Response Time, Throughput and Energy Efficiency of a Server. A good Load Balanced architecture implies minimized overall time, less server failure, minimized response time, increased throughput and less wastage of energy. Such architecture also implies a better scheduling of jobs and achieving a better Quality of Service (QoS). The paper states that Load Balanced Resource Scheduling also leads to a decreased overall cost. A new modified cost effective algorithm is proposed which minimizes the overall resource cost. Various Simulations demonstrated in the paper prove the above fact. Also as the approach deals with the energy efficiency concept, it is also a move towards Green IT.", "num_citations": "19\n", "authors": ["1921"]}
{"title": "A workload balanced approach for resource scheduling in cloud computing\n", "abstract": " The era of cloud based multimedia applications has lead to a huge increase in the no. of requests on cloud. The increased no. of requests on cloud leads to an increased workload, making workload balancing an important QoS Parameter. Workload Balancing also leads to a judicious use of resources like electricity etc. and thus promotes the concept of Green IT. The paper presents a new Load Balanced Resource Scheduling Algorithm (LBRS) which performs the resource scheduling in a balanced banner. The simulations and results demonstrated in the paper prove that the LBRS algorithm outperforms an existing approach.", "num_citations": "16\n", "authors": ["1921"]}
{"title": "Review of nature inspired algorithms in cloud computing\n", "abstract": " Cloud Computing is a major area of research. Nature Inspired Algorithms (NIAs) form the major portion of research going on in the Cloud today. NIAs as the name suggests are the algorithms whose source of inspiration is nature. NIAs can further be classified into algorithms based on Swarm Intelligence (SI), Biological Phenomena (called Bio-inspired BI), Physics and Chemistry systems or based on some other things. SI based algorithms are called intelligent because they are known to learn and improve their performance by observing the output on previous moves made by them. NIAs provide an efficient solution to many real-world optimization problems which are categorized to be NP-Hard Problems. NIAs have a huge list of applications and most of them prove to be more efficient than other algorithms and thus are many a time used in combination to other algorithms in order to improve performance and thus\u00a0\u2026", "num_citations": "12\n", "authors": ["1921"]}
{"title": "Estimating defectiveness of source code: A predictive model using github content\n", "abstract": " Two key contributions presented in this paper are: i) A method for building a dataset containing source code features extracted from source files taken from Open Source Software (OSS) and associated bug reports, ii) A predictive model for estimating defectiveness of a given source code. These artifacts can be useful for building tools and techniques pertaining to several automated software engineering areas such as bug localization, code review, and recommendation and program repair. In order to achieve our goal, we first extract coding style information (e.g. related to programming language constructs used in the source code) for source code files present on GitHub. Then the information available in bug reports (if any) associated with these source code files are extracted. Thus fetched un(/ semi)-structured information is then transformed into a structured knowledge base. We considered more than 30400 source code files from 20 different GitHub repositories with about 14950 associated bug reports across 4 bug tracking portals. The source code files considered are written in four programming languages (viz., C, C++, Java, and Python) and belong to different types of applications. A machine learning (ML) model for estimating the defectiveness of a given input source code is then trained using the knowledge base. In order to pick the best ML model, we evaluated 8 different ML algorithms such as Random Forest, K Nearest Neighbour and SVM with around 50 parameter configurations to compare their performance on our tasks. One of our findings shows that best K-fold (with k=5) cross-validation results are obtained with the NuSVM\u00a0\u2026", "num_citations": "9\n", "authors": ["1921"]}
{"title": "A Defect Estimator for Source Code: Linking Bug Reports With Programming Constructs Usage Metrics\n", "abstract": " An important issue faced during software development is to identify defects and the properties of those defects, if found, in a given source file. Determining defectiveness of source code assumes significance due to its implications on software development and maintenance cost. We present a novel system to estimate the presence of defects in source code and detect attributes of the possible defects, such as the severity of defects. The salient elements of our system are: (i) a dataset of newly introduced source code metrics, called PROgramming CONstruct (PROCON) metrics, and (ii) a novel Machine-Learning (ML)-based system, called Defect Estimator for Source Code (DESCo), that makes use of PROCON dataset for predicting defectiveness in a given scenario. The dataset was created by processing 30,400+ source files written in four popular programming languages, viz., C, C++, Java, and Python. The results\u00a0\u2026", "num_citations": "8\n", "authors": ["1921"]}
{"title": "Towards a Knowledge warehouse and expert system for the automation of SDLC tasks\n", "abstract": " Cost of a skilled and competent software developer is high, and it is desirable to minimize dependency on such costly human resources. One of the ways to minimize such costs is via automation of various software development tasks. Recent advances in Artificial Intelligence (AI) and the availability of a large volume of knowledge bearing data at various software development related venues present a ripe opportunity for building tools that can automate software development tasks. For instance, there is significant latent knowledge present in raw or unstructured data associated with items such as source files, code commit logs, defect reports, comments, and so on, available in the Open Source Software (OSS) repositories. We aim to leverage such knowledge-bearing data, the latest advances in AI and hardware to create knowledge warehouses and expert systems for the software development domain. Such tools\u00a0\u2026", "num_citations": "8\n", "authors": ["1921"]}
{"title": "Review of various Load Balancing and Green Computing Techniques in Cloud\n", "abstract": " With huge amount of energy being wasted in the form of heat during the processing of various tasks on cloud, Green Computing has become the need of hour. Huge amount of energy is wasted at various Data Centres and Data Servers in Cloud. Techniques like Load Balancing, Server Consolidation, VM Migration etc. can be used to employ a more sustainable use of energy. Algorithms employing these techniques proposed by different authors are presented in this paper. Various Green Computing Techniques like air cooling etc. and Various Meta-Heuristic Algorithms performing Load Balancing like Genetic Algorithms, Ant Colony Optimization (ACO) and Particle Swarm Optimization (PSO) are also discussed in this paper. A greener use of energy will lead to a better society in the long run.", "num_citations": "5\n", "authors": ["1921"]}
{"title": "Using Paragraph Vectors to improve our existing code review assisting tool-CRUSO\n", "abstract": " Code reviews are one of the effective methods to estimate defectiveness in source code. However, the existing methods are dependent on experts or inefficient. In this paper, we improve the performance (in terms of speed and memory usage) of our existing code review assisting tool\u2013CRUSO. The central idea of the approach is to estimate the defectiveness for an input source code by using the defectiveness score of similar code fragments present in various StackOverflow (SO) posts.", "num_citations": "1\n", "authors": ["1921"]}
{"title": "Quantum Computing Platforms: Assessing the Impact on Quality Attributes and SDLC Activities\n", "abstract": " Practical quantum computing is rapidly becoming a reality. To harness quantum computers\u2019 real potential in software applications, one needs to have an in-depth understanding of all such characteristics of quantum computing platforms (QCPs), relevant from the Software Engineering (SE) perspective. Restrictions on copying, deletion, the transmission of qubit states, a hard dependency on quantum algorithms are few, out of many, examples of QCP characteristics that have significant implications for building quantum software.Thus, developing quantum software requires a paradigm shift in thinking by software engineers. This paper presents the key findings from the SE perspective, resulting from an in-depth examination of state-of-the-art QCPs available today. The main contributions that we present include i) Proposing a general architecture of the QCPs, ii) Proposing a programming model for developing\u00a0\u2026", "num_citations": "1\n", "authors": ["1921"]}