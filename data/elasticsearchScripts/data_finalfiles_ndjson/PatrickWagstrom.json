{"title": "GSFL: A workflow framework for grid services\n", "abstract": " The Open Grid Services Architecture (OGSA) is addressing the challenge of integrating services spread across distributed, heterogeneous, dynamic virtual organizations, using the concepts and technologies from both the Grid and Web service communities. The Web service community has realized that Web services can reach their full potential only if there exists a mechanism to describe the various interactions between the services and dynamically compose new services out of existing ones. This situation is true in the case of Grid services as well. In this paper, we analyze existing technologies that address workflow for Web services, and try to leverage them for Grid services, which have different needs from standard Web services. We discuss these special needs and present the Grid Services Flow Language (GSFL), which addresses them for Grid services within the OGSA framework.", "num_citations": "251\n", "authors": ["916"]}
{"title": "Tesseract: Interactive visual exploration of socio-technical relationships in software development\n", "abstract": " Software developers have long known that project success requires a robust understanding of both technical and social linkages. However, research has largely considered these independently. Research on networks of technical artifacts focuses on techniques like code analysis or mining project archives. Social network analysis has been used to capture information about relations among people. Yet, each type of information is often far more useful when combined, as when the ldquogoodnessrdquo of social networks is judged by the patterns of dependencies in the technical artifacts. To bring such information together, we have developed Tesseract, an interactive exploratory environment that utilizes cross-linked displays to visualize the myriad relationships between artifacts, developers, bugs, and communications. We evaluated Tesseract by (1) demonstrating its feasibility with GNOME project data (2\u00a0\u2026", "num_citations": "208\n", "authors": ["916"]}
{"title": "The onion patch: migration in open source ecosystems\n", "abstract": " Past research established that individuals joining an Open Source community typically follow a socialization process called\" the onion model\": newcomers join a project by first contributing at the periphery through mailing list discussions and bug trackers and as they develop skill and reputation within the community they advance to central roles of contributing code and making design decisions. However, the modern Open Source landscape has fewer projects that operate independently and many projects under the umbrella of software ecosystems that bring together projects with common underlying components, technology, and social norms. Participants in such an ecosystems may be able to utilize a significant amount of transferrable knowledge when moving between projects in the ecosystem and, thereby, skip steps in the onion model. In this paper, we examine whether the onion model of joining and\u00a0\u2026", "num_citations": "135\n", "authors": ["916"]}
{"title": "An enterprise perspective on technical debt\n", "abstract": " Technical debt is a term that has been used to describe the increased cost of changing or maintaining a system due to expedient shortcuts taken during its development. Much of the research on technical debt has focused on decisions made by project architects and individual developers who choose to trade off short-term gain for a longer-term cost. However, in the context of enterprise software development, such a model may be too narrow. We explore the premise that technical debt within the enterprise should be viewed as a tool similar to financial leverage, allowing the organization to incur debt to pursue options that it couldn't otherwise afford. We test this premise by interviewing a set of experienced architects to understand how decisions to acquire technical debt are made within an enterprise, and to what extent the acquisition of technical debt provides leverage. We find that in many cases, the decision to\u00a0\u2026", "num_citations": "105\n", "authors": ["916"]}
{"title": "Gestalt of the Grid\n", "abstract": " The Grid approach is an important development in the discipline of computer science and engineering. Rapid progress is being made on several levels, including the definition of terminology, the design of an architecture and framework, the application in the scientific problem-solving process, and the creation of physical instantiations of Grids on a production level. In this chapter we provide an overview of important influences, developments, and technologies that are shaping state-of-the-art Grid computing. In particular, we address the following questions:", "num_citations": "57\n", "authors": ["916"]}
{"title": "Dependency forecasting in the distributed agile organization\n", "abstract": " 56 October 2006/Vol. 49, No. 10 COMMUNICATIONS OF THE ACM dependencies that drive the need to communicate may shift frequently depending on the content of each delivery increment. One way to identify dependencies that trigger the need to communicate is through extraction from the project code. Traditional dependency methods\u2014identifying common data structures and calls\u2014are labor intensive and may capture only a subset of the important dependencies. We have found that using an automated system that builds links strictly on whether or not developers have modified the same file produces excellent results at little cost to project staff. In this model, a time window, such as the last two weeks, is chosen based on the frequency of team change in the organization. Any two developers who have modified the same file in the time window are assumed to have a need to coordinate their work, and are given\u00a0\u2026", "num_citations": "34\n", "authors": ["916"]}
{"title": "Vertical Interaction in Open Software Engineering Communities\n", "abstract": " Software engineering is still a relatively young field, struggling to develop consistent standards and methods across the domain. For a given project, developers can choose from dozens of models, tools, platforms, and languages for specification, design, implementation, and testing. The globalization of software engineering and the rise of Open Source further complicate the issues as firms now must collaborate and coordinate with other firms and individuals possessing a myriad of goals, norms, values, expertise, and preferences. This thesis uses four empirical studies to take a vertical examination of Open Source ecosystems and identify the way that foundations, firms, and individuals come together to create large scale software ecosystems and produce world class software despite their differing goals and values. First, I examine Open Source as a collaborative phenomenon between firms and non-profit foundations that support many communities and identify the ways in which non-profit foundations enable member firms to create value in the ecosystem. Next, an empirical study of direct collaboration between firms within the Eclipse system reveals that most firms operate relatively independently but there is still heavy reliance on a single dominant player for core portions of the ecosystem. I then evaluate how the presence of commercial firms affects the attraction and retention of volunteer developers in an Open Source community. The final study examines how individual developers manage their dependencies in Open Source and extends the socio-technical congruence metric to address changing requirements and facilitate the metric as a tool\u00a0\u2026", "num_citations": "30\n", "authors": ["916"]}
{"title": "COMMUNICATION, TEAM PERFORMANCE, AND THE INDIVIDUAL: BRIDGING TECHNICAL DEPENDENCIES.\n", "abstract": " Failure of software development projects is common. Often one of the major factors is poor communication between individuals on the development team. However, improving coordination requires more than just increasing communication. The Socio-Technical Congruence (STC) metric helps make sense out of the complicated highly-dynamic coordination requirements between team members by analyzing the relationship between communication and task dependencies obtained from work artifacts (Cataldo, Herbsleb, & Carley, 2008). Previous research computed STC from data contained in software repositories and found that high values of STC in a commercial software engineering setting led to higher team performance (Cataldo, Wagstrom, Herbsleb, & Carley, 2006), but did not differentiate cleanly between the effects of communication aligned with coordination requirements and that which was not. In this\u00a0\u2026", "num_citations": "24\n", "authors": ["916"]}
{"title": "A network of Rails a graph dataset of Ruby on Rails and associated projects\n", "abstract": " Software projects, whether open source, proprietary, or a combination thereof, rarely exist in isolation. Rather, most projects build on a network of people and ideas from dozens, hundreds, or even thousands of other projects. Using the GitHub APIs it is possible to extract these relationships for millions of users and projects. In this paper we present a dataset of a large network of open source projects centered around Ruby on Rails. This dataset provides insight into the relationships between Ruby on Rails and an ecosystem involving 1116 projects. To facilitate understanding of this data in the context of relationships between projects, users, and their activities, it is provided as a graph database suitable for assessing network properties of the community and individuals within those communities and can be found at https://github.com/pridkett/gitminer-data-rails.", "num_citations": "19\n", "authors": ["916"]}
{"title": "Supporting enterprise stakeholders in software projects\n", "abstract": " Today, large enterprises create a significant body of commercially available software. As a result, the key stakeholders include not only those typically responsible for software development, but also stakeholders not typically involved in software engineering discussions. Current software development approaches ignore or poorly manage these enterprise level concerns. This hampers the ability to create connections among the stakeholders responsible for enterprise wide issues, the development team, and the artifacts with which they are concerned. In this paper we identify a set of propositions for coordination in enterprise software engineering environments and describe a preliminary framework to support such interactions.", "num_citations": "18\n", "authors": ["916"]}
{"title": "A Framework for Building Scientific Knowledge Grids Applied to Thermochemical Tables\n", "abstract": " An important part of enabling the future information infrastructure is to provide                convenient services for application users that make such an environment highly                functional and easy to use for the non-expert. In other words, the scientist should                be able to focus on the science but should have sophisticated tools at hand that                enable new and enhanced modalities in which science can be performed. We describe a                general architecture that provides access to scientific applications. We demonstrate                how such services can interact with each other and be reused by the scientific                application architect to orchestrate Grid services. Our architecture is implemented                by reusing concepts, infrastructures, and middleware from Web and Grid services, as                well as from the newest Globus Toolkit and the Java CoG Kit.We apply our general architecture to a specific\u00a0\u2026", "num_citations": "17\n", "authors": ["916"]}
{"title": "Does latitude hurt while longitude kills? geographical and temporal separation in a large scale software development project\n", "abstract": " Distributed software development allows firms to leverage cost advantages and place work near centers of competency. This distribution comes at a cost--distributed teams face challenges from differing cultures, skill levels, and a lack of shared working hours. In this paper we examine whether and how geographic and temporal separation in a large scale distributed software development influences developer interactions. We mine the work item trackers for a large commercial software project with a globally distributed development team. We examine both the time to respond and the propensity of individuals to respond and find that when taken together, geographic distance has little effect, while temporal separation has a significant negative impact on the time to respond. However, both have little impact on the social network of individuals in the organization. These results suggest that while temporally distributed\u00a0\u2026", "num_citations": "16\n", "authors": ["916"]}
{"title": "A grid service-based active thermochemical table framework\n", "abstract": " In this paper we report ourwork on the integration of existing scientific applications using Grid Services.We describe a general architecture that provides access to these applications via Web services-based application factories. Furthermore, we demonstrate how such services can interact with each other. These interactions enable a level of integration that assists the scientific application architect in leveraging applications running in heterogeneous runtime environments. Our architecture is implemented by using existing infrastructures and middleware, such as Web services, the Globus Toolkit, and the Java CoG Kit.We test our architecture on a thermochemistry application that provides a number of requirements, such as batch processing, interactive and collaborative steering, use of multiple platforms, visualization through large displays, and access via a portal framework. Besides the innovative use of the\u00a0\u2026", "num_citations": "16\n", "authors": ["916"]}
{"title": "New opportunities for extracting insights from cloud based IDEs\n", "abstract": " Traditional integrated development environments (IDEs) provide developers with robust environments for writing, testing, debugging, and deploying code. As the world becomes increasingly networked and more services are delivered via the cloud, it is only natural that the functionality of IDEs be delivered via the cloud. In addition to simplifying the provisioning and deployment of new IDE features, and making it easier to integrate with other web native tools, cloud based IDEs provide some fundamental advantages when it comes to understanding the behavior of a wide community of software developers. One of these advantages for the IDE provider is the ability to transparently monitor and analyze the real-time fine-grained actions of a large number of developers. In this paper, we explore how to leverage these transparent monitoring capabilities of cloud based IDEs to develop advanced analytics to understand\u00a0\u2026", "num_citations": "11\n", "authors": ["916"]}
{"title": "Reverse metadata viewing by multiple parties\n", "abstract": " Reverse metadata viewing by multiple parties, in one aspect, determines one or more second users that share one or more concerns of the first user, enable the first user to select said one or more second users. One or more concerns of said selected one or more second users are determined based on metadata information in electronic artifacts associated with said selected one or more second users. The first user is enabled to explore said one or more concerns of said selected one or more second users.", "num_citations": "7\n", "authors": ["916"]}
{"title": "Coordination in innovative design and engineering: observations from a lunar robotics project\n", "abstract": " Coordinating activities across groups in systems engineering or product development projects is critical to project success, but substantially more difficult when the work is innovative and dynamic. It is not clear how technology should best support cross-group collaboration on these types of projects. Recent work on coordination in dynamic settings has identified cross-boundary knowledge exchange as a critical mechanism for aligning activities. In order to inform the design of collaboration technology for creative work settings, we examined the nature of cross-group knowledge exchange in an innovative engineering research project developing a lunar rover robot as part of the Google Lunar X-Prize competition. Our study extends the understanding of communication and coordination in creative design work, and contributes to theory on coordination. We introduce four types of cross-team knowledge exchange\u00a0\u2026", "num_citations": "7\n", "authors": ["916"]}
{"title": "Roles in a networked software development ecosystem: A case study in GitHub\n", "abstract": " Open source software development has evolved beyond single projects into complex networked ecosystems of projects that share portions of their code, social norms, and developer communities. This networked nature allows developers moving into a new project to easily leverage knowledge about process and social norms along with reputation gained in related projects. In this paper we examine a subset of the communities found in GitHub, a large software development community that focuses on \u201csocial coding\u201d. We identify a variety of roles in the ecosystem that go beyond the previous user/developer dichotomy and find that these roles often persist across sub-communities in the GitHub ecosystem. This has dramatic implications for the way that we view open source and related software development processes and suggests that a more nuanced view of the roles and relationships in these communities would be beneficial.", "num_citations": "6\n", "authors": ["916"]}
{"title": "Event scheduler based on real-time analytics and business rules\n", "abstract": " Scheduling a given event, in one aspect, may include obtaining a set of one or more business rules, obtaining analytics, and obtaining an event specification. The event specification may include at least one content specification and two or more transmission modes. The event may be scheduled based on the event specification, the analytics and the business rules. The scheduling may be indicated by a tuple comprising event content, one or more communication modes selected from the two or more transmission modes, and timing of the scheduled event.", "num_citations": "4\n", "authors": ["916"]}
{"title": "Path-sensitive contextual help system\n", "abstract": " Embodiments include method, systems and computer program products for a path-sensitive contextual help system. In some embodiments, user actions are obtained from a user session of a user. A concrete user action trace is captured using the obtained user actions, wherein the concrete user action trace is a subset of user actions from the user session. An abstract user action trace is generated using the concrete user action trace. A help action corresponding to the abstract user action trace is identified and, in some embodiments, is presented to the user.", "num_citations": "2\n", "authors": ["916"]}
{"title": "Method for personalized breaking news feed\n", "abstract": " In an approach to personalizing a news feed, a computing device monitors a user accessing content. The computing device determines a personal knowledge graph for the user based on the accessed content. Responsive to receiving a new piece of content that the user has not accessed, the computing device determines a novelty score for the new piece of content based on the personal knowledge graph. The computing device filters the new piece of content based on the novelty score.", "num_citations": "2\n", "authors": ["916"]}
{"title": "A dive into online community properties\n", "abstract": " As digital communities grow in size their feature sets also grow with them. Different users have different experiences with the same tools and communities. Enterprises and other organizations seeking to leverage these communities need a straightforward way to analyze and compare a variety of salient attributes of these communities. We describe a taxonomy and tool for crowd-sourcing user based evaluations of enterprise relevant attributes of digital communities and present the results of a small scale study on its usefulness and stability across multiple raters.", "num_citations": "2\n", "authors": ["916"]}
{"title": "Individualized Socio-Technical Congruence\n", "abstract": " At a macro level, congruence between a team\u2019s actual communication and coordination dependencies, a metric called socio-technical congruence (STC), is related to higher team performance. However, at an individual level, the calculation of STC may seem opaque, leaving individuals confused about how their communication patterns affect the STC metric and impact overall team performance. We propose two methods of calculating individualized STC based on previous work in the field. Examining this relationship further, we find that when the individualized STC metrics are broken into their constituent parts, individuals with high amounts of coordination requirements tend to have higher performance, while individuals with higher levels of communication have lower performance.", "num_citations": "2\n", "authors": ["916"]}
{"title": "Toward a simulation model of open source software development\n", "abstract": " Open Source software development is a highly decentralized, primarily volunteer form of software development that has managed to produce software that is of such a quality that it is integral to the world\u2019s information economy. The volunteer nature of Open Source and the lack of central organizing body for many pieces of software has led to interesting questions about the viability of Open Source. Current computer models of software development are not able to contend with the new issues put forth by Open Source software development. This paper presents a preliminary model that exhibits some of the properties of Open Source software development and will be expanded to model the entire Open Source ecosystem. Contact:", "num_citations": "2\n", "authors": ["916"]}
{"title": "Evaluating and comparing the requirements of a task with the capabilities of an entity\n", "abstract": " A method for evaluating the requirements of a task with the capabilities of an entity includes generating a first visual representation, creating a mask based on the first visual representation, applying the mask to a second visual representation, and generating a third visual representation conveying which task requirements the entity is capable of satisfying. The first visual representation includes the requirements of the task, the second visual representation includes the capabilities of the entity, and the third visual representation is generated based on the application of the mask to the second visual representation.", "num_citations": "1\n", "authors": ["916"]}
{"title": "Engineering software engineering teams\n", "abstract": " This paper presents novel ideas for understanding how software engineering teams communicate and coordinate. We utilize these ideas to understand how these teams should be constructed and what individuals and managers can do to ensure that teams perform at high levels. Our view is based on numerous observations and interactions with enterprise software engineering teams and influenced by economic models of information sharing. We propose that neither a fully top-down nor bottom-up approach is entirely suitable for teams; rather teams must be cognizant of this issue and work to embrace both models of information flow. This, in turn, can be facilitated by the role of intercessor who seeks to properly guide, direct, and curate both top-down and bottom-up information flows.", "num_citations": "1\n", "authors": ["916"]}
{"title": "Success in Online Production Systems: A Longitudinal Analysis of the Socio-Technical Duality of Development Projects\n", "abstract": " Online production systems represent a new and innovative approach for producing information goods. However, the success of such endeavors depends on a careful interrelationship between their social and technical dimensions. In this paper, we explore how various aspects of those dimensions impact the success of online production systems. We collected data from the open source community GNOME and we used the inclusion of a product into an official release as indicator for the success of a project. Our analyses revealed that structural characteristics of the individual project\u2019s communication and task dependency (coordination needs) networks, the position of individuals in the overall ecosystem communication network as well as the technical structure of the product, are all significantly associated with project success. Our novel results represent an important step in understanding the success drivers of online production systems as well as a starting point for reshaping traditional models for producing information goods typically used in corporate settings.", "num_citations": "1\n", "authors": ["916"]}