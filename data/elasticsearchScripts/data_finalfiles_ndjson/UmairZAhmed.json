{"title": "Challenges in designing input method editors for indian lan-guages: The role of word-origin and context\n", "abstract": " Back-transliteration based Input Method Editors are very popular for Indian Languages. In this paper we evaluate two such Indic language systems to help understand the challenge of designing a back-transliteration based IME. Through a detailed error-analysis of Hindi, Bangla and Telugu data, we study the role of phonological features of Indian scripts that are reflected as variations and ambiguity in the transliteration. The impact of word-origin on back-transliteration is discussed in the context of codeswitching. We also explore the role of word-level context to help overcome some of these challenges.", "num_citations": "41\n", "authors": ["2113"]}
{"title": "Targeted example generation for compilation errors\n", "abstract": " We present TEGCER, an automated feedback tool for novice programmers. TEGCER uses supervised classification to match compilation errors in new code submissions with relevant pre-existing errors, submitted by other students before. The dense neural network used to perform this classification task is trained on 15000+ error-repair code examples. The proposed model yields a test set classification Pred@3 accuracy of 97.7% across 212 error category labels. Using this model as its base, TEGCER presents students with the closest relevant examples of solutions for their specific error on demand. A large scale (N>230) usability study shows that students who use TEGCER are able to resolve errors more than 25% faster on average than students being assisted by human tutors.", "num_citations": "9\n", "authors": ["2113"]}
{"title": "MACER: a modular framework for accelerated compilation error repair\n", "abstract": " Automated compilation error repair, the problem of suggesting fixes to buggy programs that fail to compile, has pedagogical applications for novice programmers who find compiler error messages cryptic and unhelpful. Existing works frequently involve black-box application of generative models, e.g. sequence-to-sequence prediction (TRACER) or reinforcement learning (RLAssist). Although convenient, this approach is inefficient at targeting specific error types as well as increases training costs. We present MACER, a novel technique for accelerated error repair based on a modular segregation of the repair process into repair identification and repair application. MACER uses powerful yet inexpensive learning techniques such as multi-label classifiers and rankers to first identify the type of repair required and then apply the suggested repair. Experiments indicate that this fine-grained approach offers not only superior error\u00a0\u2026", "num_citations": "5\n", "authors": ["2113"]}
{"title": "Characterizing the pedagogical benefits of adaptive feedback for compilation errors by novice programmers\n", "abstract": " Can automated adaptive feedback for correcting erroneous programs help novice programmers learn to code better? In a large-scale experiment, we compare student performance when tutored by human tutors, and when receiving automated adaptive feedback. The automated feedback was designed using one of two well-known instructional principles:(i) presenting the correct solution for the immediate problem, or (ii) presenting generated examples or analogies that guide towards the correct solution. We report empirical results from a large-scale (N= 480, 10,000+ person hour) experiment assessing the efficacy of these automated compilation-error feedback tools. Using the survival analysis on error rates of students measured over seven weeks, we found that automated feedback allows students to resolve errors in their code more efficiently than students receiving manual feedback. However, we also found that\u00a0\u2026", "num_citations": "5\n", "authors": ["2113"]}
{"title": "Sentiment analysis in Hindi\n", "abstract": " The basic task of Sentiment Analysis is to classify the polarity of the opinion expressed in a given text into positive or negative. With the rise of social networks, blogs, online ratings websites, etc, this task has become even more important in recent times to provide succinct summary of the online expression. In this project, we use Semi-Supervised approaches to train a Deep Belief Network on a small percentage of labelled data and assign polarity to unlabelled data. We report accuracies on the IIT-Bombay Hindi movie review dataset and also on online movie reviews manually collected and annotated by us. We are able to achieve an accuracy of 64% on test set, by training on as few as 150 labeled reviews.", "num_citations": "4\n", "authors": ["2113"]}
{"title": "Synthesizing Tasks for Block-based Programming\n", "abstract": " Block-based visual programming environments play a critical role in introducing computing concepts to K-12 students. One of the key pedagogical challenges in these environments is in designing new practice tasks for a student that match a desired level of difficulty and exercise specific programming concepts. In this paper, we formalize the problem of synthesizing visual programming tasks. In particular, given a reference visual task  and its solution code , we propose a novel methodology to automatically generate a set  of new tasks along with solution codes such that tasks  and  are conceptually similar but visually dissimilar. Our methodology is based on the realization that the mapping from the space of visual tasks to their solution codes is highly discontinuous; hence, directly mutating reference task  to generate new tasks is futile. Our task synthesis algorithm operates by first mutating code  to obtain a set of codes . Then, the algorithm performs symbolic execution over a code  to obtain a visual task ; this step uses the Monte Carlo Tree Search (MCTS) procedure to guide the search in the symbolic tree. We demonstrate the effectiveness of our algorithm through an extensive empirical evaluation and user study on reference tasks taken from the \\emph{Hour of Code: Classic Maze} challenge by \\emph{Code.org} and the \\emph{Intro to Programming with Karel} course by \\emph{CodeHS.com}.", "num_citations": "2\n", "authors": ["2113"]}
{"title": "Can modern statistical parsers lead to better natural language understanding for education?\n", "abstract": " We use state-of-the-art parsing technology to build GeoSynth \u2013 a system that can automatically solve word problems in geometric constructions. Through our experiments we show that even though off-the-shelf parsers perform poorly on texts containing specialized vocabulary and long sentences, appropriate preprocessing of text before applying the parser and use of extensive domain knowledge while interpreting the parse tree can together help us circumvent parser errors and build robust domain specific natural language understanding modules useful for various educational applications.", "num_citations": "2\n", "authors": ["2113"]}