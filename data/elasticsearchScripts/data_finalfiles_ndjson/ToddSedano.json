{"title": "Software development waste\n", "abstract": " Context: Since software development is a complex socio-technical activity that involves coordinating different disciplines and skill sets, it provides ample opportunities for waste to emerge. Waste is any activity that produces no value for the customer or user. Objective: The purpose of this paper is to identify and describe different types of waste in software development. Method: Following Constructivist Grounded Theory, we conducted a two-year five-month participant-observation study of eight software development projects at Pivotal, a software development consultancy. We also interviewed 33 software engineers, interaction designers, and product managers, and analyzed one year of retrospection topics. We iterated between analysis and theoretical sampling until achieving theoretical saturation. Results: This paper introduces the first empirical waste taxonomy. It identifies nine wastes and explores their causes\u00a0\u2026", "num_citations": "78\n", "authors": ["2253"]}
{"title": "The product backlog\n", "abstract": " Context: One of the most common artifacts in contemporary software projects is a product backlog comprising user stories, bugs, chores or other work items. However, little research has investigated how the backlog is generated or the precise role it plays in a project. Objective: The purpose of this paper is to determine what is a product backlog, what is its role, and how does it emerge? Method: Following Constructivist Grounded Theory, we conducted a two-year, five-month participant-observation study of eight software development projects at Pivotal, a large, international software company. We interviewed 56 software engineers, product designers, and product managers.We conducted a survey of 27 product designers. We alternated between analysis and theoretical sampling until achieving theoretical saturation. Results: We observed 13 practices and 6 obstacles related to product backlog generation\u00a0\u2026", "num_citations": "43\n", "authors": ["2253"]}
{"title": "Comparing extreme programming and Waterfall project results\n", "abstract": " Waterfall and Extreme Programming are two software project methods used for project management. Although there are a number of opinions comparing the two methods regarding how they should be applied, none have used project data to clearly conclude which one is better. In this paper, we present the results of a controlled empirical study conducted at Carnegie Mellon University in Silicon Valley to learn about the effective transition from traditional development to agile development. We conducted a comparison research against these two approaches. Multiple teams were assigned a project; some used Waterfall development, others used Extreme Programming. The purpose of this research is to look at advantages and disadvantages based upon the outcomes, generated artifacts, and metrics produced by the teams.", "num_citations": "38\n", "authors": ["2253"]}
{"title": "Code readability testing, an empirical study\n", "abstract": " Context: One of the factors that leads to improved code maintainability is its readability. When code is difficult to read, it is difficult for subsequent developers to understand its flow and its side effects. They are likely to introduce new bugs while trying to fix old bugs or adding new features. But how do software developers know they have written readable code? Objective: This paper presents a new technique, Code Readability Testing, to determine whether code is readable and evaluates whether the technique increases programmers' ability to write readable code. Method: The researcher conducted a field study using 21 software engineering master students and followed the Code Readability Testing with each student in four separate sessions evaluating different \"production ready\" software. After the observations, a questionnaire evaluated the programmer's perspective. Results: By following Code Readability\u00a0\u2026", "num_citations": "34\n", "authors": ["2253"]}
{"title": "State-based monitoring and goal-driven project steering: Field study of the semat essence framework\n", "abstract": " At Carnegie Mellon University in Silicon Valley, the graduate master program ends with a practicum project during which students serve as software engineering consultants for an industry client. In this context, students are challenged to demonstrate their ability to work on self-managing and self-organizing teams. This paper presents a field study of the Software Engineering Method and Theory (SEMAT) Essence framework. The objective is to evaluate the effectiveness of the Essence\u2019s novel state-based monitoring and goal-driven steering approach provided by the Essence kernel alphas and their states. The researchers conducted the study on seven graduate master student teams applying the approach throughout their practicum projects. The research methodology involves weekly observation and recording of each team\u2019s state progression and collecting students\u2019 reflection on the application of the approach\u00a0\u2026", "num_citations": "30\n", "authors": ["2253"]}
{"title": "Sustainable software development through overlapping pair rotation\n", "abstract": " Context: Conventional wisdom says that team disruptions (like team churn) should be avoided. However, we have observed software development projects that succeed despite high disruption.Objective: The purpose of this paper is to understand how to develop software effectively, even in the face of team disruption.Method: We followed Constructivist Grounded Theory. The primary researcher conducted participant-observation of several projects at Pivotal (a software development company), and interviewed 21 software engineers, interaction designers, and product managers. The researcher iteratively sampled and analyzed the collected data until achieving theoretical saturation.Results: This paper introduces a descriptive theory of Sustainable Software Development. The theory encompasses principles, policies, and practices aiming at removing knowledge silos and improving code quality (including\u00a0\u2026", "num_citations": "20\n", "authors": ["2253"]}
{"title": "Essence reflection meetings: Field study\n", "abstract": " This paper presents an empirical evaluation of the team reflection support provided by the Software Engineering Method and Theory (SEMAT) Essence framework, and compares Essence reflection meetings to other types of team reflection meetings. The researchers conducted a field study involving seven graduate master student teams running Essence reflection meetings throughout their practicum projects aiming at delivering a working product for an industry client. The main result validates that Essence meetings generate reflective team discussions through a thinking framework that is holistic, state-based, goal-driven, and method-agnostic. Student teams benefit from stepping back and assessing the project holistically throughout its lifecycle. The goals set by the framework's checklists lead the teams to address critical aspects of the project that have not been considered. All team members are encouraged to\u00a0\u2026", "num_citations": "18\n", "authors": ["2253"]}
{"title": "Practice and perception of team code ownership\n", "abstract": " Context: Team code ownership is a software development practice where any team member can modify any part of the team's code. However, many factors beyond official policy affect a developer's sense of ownership.Objective: The purpose of this paper is to understand the factors that affect a team's sense of code ownership.Method: Following Constructivist Grounded Theory, the first author conducted participant-observation of several software development projects, and interviewed 21 software engineers, interaction designers, and product managers. Iterating between theoretical sampling and analysis continued until achieving theoretical saturation.Results: Team code ownership is a feeling. Developers feel team code ownership more when they understand the system context, have contributed to the code in question, perceive code quality as high, believe the product will satisfy the user needs, and perceive\u00a0\u2026", "num_citations": "16\n", "authors": ["2253"]}
{"title": "Lessons learned from an extended participant observation grounded theory study\n", "abstract": " Context: Conducting a Grounded Theory study is rigorous, demanding, and challenging. Misperceptions exist within the software engineering community [1]. Objective: The purpose of this paper is to describe one extended participant observation Grounded Theory study for aiding new empirical researchers wanting to run similar research studies. Method: Following Constructivist Grounded Theory, we conducted a two-year five-month participant-observation of eight software development projects at Pivotal, a software development organization; interviewed 33 software engineers, interaction designers, and product managers; and analyzed one year of retrospection topics. We iterated between analysis and theoretical sampling until achieving theoretical saturation, publishing papers on team code ownership [2], sustainable software development through overlapping code ownership [3], and software development\u00a0\u2026", "num_citations": "11\n", "authors": ["2253"]}
{"title": "Green-lighting proposals for software engineering team-based project courses\n", "abstract": " Many software engineering curriculum conclude with a practicum or capstone project course. For courses involving external clients, the course owner typically follows a Request for Proposal process to vet (or green-light) qualified clients and projects. Even though green-lighting projects does not guarantee project success, the goal is to reduce risks by systematically examining each proposal to identify potential problems that the instructor could solve, mitigate against, or simply decide not to deal with by rejecting the proposal. We propose and evaluate a Green-Lighting Approach based on the SEMAT (Software Engineering Method and Theory) Essence framework. Our objective is to identify if such a framework could improve the Request for Proposal process at Carnegie Mellon University in Silicon Valley and other universities. We conducted a case study by observing and interviewing the course owner, examining\u00a0\u2026", "num_citations": "10\n", "authors": ["2253"]}
{"title": "Improving mobile application development\n", "abstract": " Many mobile app developers act more like end-\u2010user programmers\u2013professionals in disciplines other than software development who create computer programs as pragmatic tools to solve work-\u2010related problems\u2013 than like professional software engineers. They want the quick gratification of creating a program rather than what they view as the drudgery of following engineering processes. They focus on the construction phase of software development, slighting other phases such as requirements, design, testing, and debugging.", "num_citations": "8\n", "authors": ["2253"]}
{"title": "Removing software development waste to improve productivity\n", "abstract": " One way to improve productivity is to reduce waste: objects, properties, conditions, activities, or processes that consume resources without benefiting stakeholders. However, reducing waste can be very challenging. People quickly acclimate to wasteful practices and waste is often hidden by bureaucracy, multitasking, poor prioritization, and invisible cognitive processes. To better understand software development waste, we conducted an in-depth study of waste at Pivotal Software, a large American software development organization, known for using and evolving Extreme Programming. This chapter describes the different kinds of waste we discovered and recommends a variety of strategies for waste removal.", "num_citations": "6\n", "authors": ["2253"]}
{"title": "Sustainable software development: Evolving extreme programming\n", "abstract": " Context: Software development is a complex socio-technical endeavor that involves coordinating different disciplines and skill sets. Practitioners experiment with and adopt processes and practices with a goal of making their work more effective.Objective: To observe, describe, and analyze software development processes and practices in an industrial setting. Our goal is to generate a descriptive theory of software engineering development, which is rooted in empirical data.Method: Following Constructivist Grounded Theory, we conducted a 2.5 year participant-observation of eight software projects at Pivotal, a software development company. We interviewed 33 software engineers, interaction designers, and product managers, and analyzed one year of retrospection topics. We iterated between data collection, data analysis and theoretical sampling until achieving theoretical saturation and generating a descriptive\u00a0\u2026", "num_citations": "6\n", "authors": ["2253"]}
{"title": "Changes in transferable knowledge resulting from study in a graduate software engineering curriculum\n", "abstract": " This paper presents the initial results of a study of the evolution of students' knowledge of software engineering from the beginning to the end of a master's degree curriculum in software engineering. Students were presented with a problem involving the initiation of a complex new project at the beginning of the program and again at the end of the program's formal coursework. After considering the problem each time, students were asked what questions they had as the senior software engineer, which software engineering processes need to be put into place, and to enumerate any other issues they saw. Statistical analysis indicates that their enumeration of software processes in the post condition is very significantly richer than in the pre condition. They also gave significantly more responses about requirements, design, and engineering management in the post condition. Qualitative analysis suggests that the\u00a0\u2026", "num_citations": "5\n", "authors": ["2253"]}
{"title": "Enhancing Student Experience in Team-Based Project Courses Using Essence Reflection Meetings\n", "abstract": " Background: Many software engineering curriculum contain a team-based project course. This is the case of Carnegie Mellon University Silicon Valley's masters of science in software engineering. In this context, we have been using Essence Reflection Meetings for five semesters with 17 teams and approximately 70 students. During these meetings, the teams reflect on various project's dimensions based on a systems thinking framework. The positive results have been published in research papers.Activity and Discussions: Participants will learn about Essence Reflection Meetings for team-based project courses by practicing in a classroom environment. They will discuss challenges and solutions for team-based project courses, and how the proposed approach could potentially be leveraged in their own teaching environment.Organization: We will start the workshop with a discussion revealing the participants\u00a0\u2026", "num_citations": "4\n", "authors": ["2253"]}
{"title": "Towards generating essence kernels using genetic algorithms\n", "abstract": " The Software Engineering Method and Theory (SEMAT) community created the Essence kernel as a unifying framework for describing and analyzing software engineering endeavors. The Essence kernel is based upon human experience and judgment, not empirical data.BackgroundAt Carnegie Mellon University in Silicon Valley, we have collected data from masters of science in software engineering students as they complete a team-based project course as their capstone or practicum project using the Essence kernel. Each week, the team recorded their progress in an Essence Reflection meeting. This data serves as training data for evaluating the Essence kernel and alternative candidate kernels.ObjectiveGenerate candidate replacement kernels by using a fitness function based on empirical data.MethodUsing genetic programming, the kernel genotype is represented as a collection of linear state machines\u00a0\u2026", "num_citations": "4\n", "authors": ["2253"]}
{"title": "A gentle introduction to learn by doing\n", "abstract": " We believe the master's program in Software Engineering offered by Carnegie Mellon University's Silicon Valley Campus to be unique in that it is entirely team-based and project-centered [1]. Students learn by doing as they are coached just in time by faculty in the context of authentic projects, and they are evaluated on the work they produce. Student satisfaction is high: 94% believe that the program has given them a competitive advantage with respect to their professional peers, and their promotion and salary histories bear out this belief. This tutorial introduces the attendees to our learn-by-doing instructional approach through participation in a learn by doing experience, performing a usability analysis of a commercial website, followed by discussion to highlight what we believe to be important principles of teaching by coaching.", "num_citations": "4\n", "authors": ["2253"]}
{"title": "Dual-Track Development.\n", "abstract": " Researchers and professionals have learned much about designing good software products and building software efficiently. However, the best way to design good products (human-centered design) assumes a waterfall process, which is incompatible with more efficient ways of building software (agile methods). This article therefore synthesizes Dual-Track Development\u2014a framework for reconciling human-centered design with agile methods\u2014from a three-year field study at VMware Pivotal Labs as well as numerous behavioral theories and empirical findings. While VMware Pivotal Labs practices illustrate Dual-Track, conceptualizing software engineering as two parallel, interconnected processes is widely applicable.", "num_citations": "3\n", "authors": ["2253"]}
{"title": "Towards Teaching Software Craftsmanship\n", "abstract": " We report on the experience of the first offering of the course, \"The Craft of Software Development.\" The purpose of the course is to identify and remediate individual weaknesses as software developers. Each student was asked to pick a personal learning focus in an area of known software development weakness for that student. Through a \"maiden speech\" they asked their class community for help in creating a learning plan to address their area of weakness. Learning plans typically incorporated known apprenticeship patterns such as \"Find a Coach,\" \"Breakable Toys,\" and \"Practice, Practice, Practice.\" After creating their learning plan, students identified metrics to track their progress towards their goal. While executing their individual learning plans, the class performed programming katas which are specific programming exercises to work on issues relevant for the entire class. Several issues emerged in the first\u00a0\u2026", "num_citations": "3\n", "authors": ["2253"]}
{"title": "Recent Trends in Graduate Software Engineering\n", "abstract": " This panel will discuss recent trends in graduate software engineering programs, including adoption of GSwE2009, cooperative programs between schools, increasing use of distance education formats, and specialization of programs for industry partners. Panelists will also discuss the evolving relationship of software engineering to other disciplines, such as computer science and systems engineering.", "num_citations": "2\n", "authors": ["2253"]}