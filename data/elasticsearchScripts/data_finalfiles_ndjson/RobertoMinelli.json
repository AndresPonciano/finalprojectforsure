{"title": "Software Analytics for Mobile Applications \u2014 Insights & Lessons Learned\n", "abstract": " Mobile applications, known as apps, are software systems running on handheld devices, such as smartphones and tablet PCs. The market of apps has rapidly expanded in the past few years into a multi-billion dollar business. Being a new phenomenon, it is unclear whether approaches to maintain and comprehend traditional software systems can be ported to the context of apps. We present a novel approach to comprehend apps from a structural and historical perspective, leveraging three factors for the analysis: source code, usage of third-party APIs, and historical data. We implemented our approach in a web-based software analytics platform named SAMOA. We detail our approach and the supporting tool, and present a number of findings obtained while investigating a corpus of mobile applications. Our findings reveal that apps differ significantly from traditional software systems in a number of ways, which\u00a0\u2026", "num_citations": "145\n", "authors": ["940"]}
{"title": "I Know What You Did Last Summer \u2014 An Investigation of How Developers Spend Their Time\n", "abstract": " Developing software is a complex mental activity, requiring extensive technical knowledge and abstraction capabilities. The tangible part of development is the use of tools to read, inspect, edit, and manipulate source code, usually through an IDE (integrated development environment). Common claims about software development include that program comprehension takes up half of the time of a developer, or that certain UI (user interface) paradigms of IDEs offer insufficient support to developers. Such claims are often based on anecdotal evidence, throwing up the question of whether they can be corroborated on more solid grounds. We present an in-depth analysis of how developers spend their time, based on a fine-grained IDE interaction dataset consisting of ca. 740 development sessions by 18 developers, amounting to 200 hours of development time and 5 million of IDE events. We propose an inference\u00a0\u2026", "num_citations": "130\n", "authors": ["940"]}
{"title": "Visualizing Developer Interactions\n", "abstract": " Integrated Development Environments (IDEs) have become the de facto standard vehicle to develop software systems. The user interface (UI) of an IDE offers a staggering amount of facilities to manipulate source code, such as inspectors, debuggers, recommenders, alternative viewers, etc. It is unclear how developers use the UI of an IDE and whether such UIs actually give appropriate support to the developers. We present a visual approach to understand and characterize development sessions from the UI perspective. The tool supporting our approach mines and processes the finest-grained UI-level events making up development sessions and presents them visually. We have collected, visualized, and analyzed hundreds of development sessions and report on our findings.", "num_citations": "41\n", "authors": ["940"]}
{"title": "Visualizing the Workflow of Developers\n", "abstract": " Developers use the Integrated Development Environment (IDE) to develop a system at hand, by reading, understanding, and writing its source code. They do so by exploiting the tools and facilities provided by the IDE. This also allows them to build a mental model of the system to perform informed changes. It is however not clear how and when developers use which facility and tool, and to what extent the current services offered by the IDE appropriately support the navigation. We present an approach to visualize the activities of developers within the IDE, implemented in a tool: DFLow. DFLOW records all IDE interactions that occur during a development session and visualizes them through a web-based visualization platform.", "num_citations": "29\n", "authors": ["940"]}
{"title": "Quantifying Program Comprehension with Interaction Data\n", "abstract": " It is common knowledge that program comprehension takes up a substantial part of software development. This \"urban legend\" is based on work that dates back decades, which throws up the question whether the advances in software development tools, techniques, and methodologies that have emerged since then may invalidate or confirm the claim. We present an empirical investigation which goal is to confirm or reject the claim, based on interaction data which captures the user interface activities of developers. We use interaction data to empirically quantify the distribution of different developer activities during software development: In particular, we focus on estimating the role of program comprehension. In addition, we investigate if and how different developers and session types influence the duration of such activities. We analyze interaction data from two different contexts: One comes from the ECLIPSE IDE\u00a0\u2026", "num_citations": "24\n", "authors": ["940"]}
{"title": "SAMOA \u2014 A Visual Software Analytics Platform for Mobile Applications\n", "abstract": " Mobile applications, also known as apps, are dedicated software systems that run on handheld devices, such as smartphones and tablet computers. The apps business has in a few years turned into a multi-billion dollar market. From a software engineering perspective apps represent a new phenomenon, and there is a need for tools and techniques to analyze apps. We present SAMOA, a visual web-based software analytics platform for mobile applications. It mines software repositories of apps and uses a set of visualization techniques to present the mined data. We describe SAMOA, detail the analyses it supports, and describe a methodology to understand apps from a structural and historical perspective. The website of SAMOA, containing the screen cast of the tool demo, is located at http://samoa.inf.usi.ch/about.", "num_citations": "22\n", "authors": ["940"]}
{"title": "Blended, Not Stirred: Multi-Concern Visualization of Large Software Systems\n", "abstract": " While constructing and evolving software systems, developers generate directly and indirectly a large amount of data of diverse nature, such as source code changes, bug tracking information, IDE interactions, stack traces, etc. Often these diverse data sources are processed and visualized in isolation, leading to a partial view of systems. We present a blended approach to visualize several data \u201cingredients\u201d at once, to give as complete an answer as possible to the question \u201cWhat happened to the system in the last few days?\u201d. The goal is to enable a quick and comprehensive assessment of what happened to a software system in any given time frame.", "num_citations": "12\n", "authors": ["940"]}
{"title": "Software Analytics for MObile Applications\n", "abstract": " \u201cApp\u201d is a term used to describe software that runs on smartphones and other handheld devices. Apps vary in theme from games to music players to productivity tools. Apps development gained momentum starting in 2007, when Apple launched its \ufb01rst iPhone. Nowadays the impact of mobile applications in the software industry is signi\ufb01cant, considering that nearly one million apps are available from the Apple and Android stores.", "num_citations": "10\n", "authors": ["940"]}
{"title": "The Plague Doctor: A Promising Cure for the Window Plague\n", "abstract": " Modern Integrated Development Environments (IDEs) are often affected by the \"window plague\", an overly crowded workspace with many open windows and tabs. The main cause is the lack of navigation support in IDEs, also due to the many -- and not always obvious -- complex relationships that exist between program entities. Researchers have shown that it is possible to mitigate the window plague by exploiting the data obtained by monitoring how developers interact with the user interface of the IDE. However, despite initial results the approach was never fully integrated in an IDE. In our previous work, we implemented DFlow, an automatic interaction profiler that monitors all the fine-grained interactions of the developer with the IDE. Here we present a first prototype of the Plague Doctor, a tool that seamlessly detects the windows that are less likely to be used in the future and automatically closes them. We\u00a0\u2026", "num_citations": "9\n", "authors": ["940"]}
{"title": "Visual Storytelling of Development Sessions\n", "abstract": " Most development activities, like program understanding, source code navigation and editing, are supported by Integrated Development Environments (IDEs). They provide different tools and user interfaces (UI) to interact with the source code, such as browsers, debuggers, and inspectors. It is uncertain how and when programmers use different UI elements of an IDE and to what extent they appropriately support development. Previously we developed DFLOW, a tool that seamlessly records and processes interaction data. Our long-term goal is to assess to what extent the UIs of IDEs support the workflow of developers and whether they can be improved. As a first step we present our approach to analyze development sessions in the form of visual storytelling. We illustrate our initial catalogue of visualizations through two development stories.", "num_citations": "9\n", "authors": ["940"]}
{"title": "Measuring Navigation Efficiency in the IDE\n", "abstract": " While coding, developers construct and maintain mental models of software systems to support the task at hand. Although source code is the main product of software development, the process involves navigating and inspecting entities beyond the ones that are edited by the end of a task. Developers use various user interfaces (UI) offered by the Integrated Development Environment (IDE) to navigate the complex, and often hidden, relationships between program entities. These UIs impose fixed navigation costs, in terms of the number of interactions that a developer is required to perform to reach an entity of interest. It is unclear to what extent the actual navigation effort differs from an ideal setting, and if there is any room for actual improvement. We present a preliminary empirical study, where we analyzed a corpus of IDE interaction data coming from 6 developers totaling more than 20 days of development activity\u00a0\u2026", "num_citations": "6\n", "authors": ["940"]}
{"title": "Visualizing Evolving Software Cities\n", "abstract": " Visualization approaches that leverage a 3D city metaphor have become popular. Numerous variations, including virtual and augmented reality have emerged. Despite its popularity, the city metaphor falls short when depicting the evolution of a system, which results in buildings and districts moving around in unpredictable ways. We present a novel approach to visualize software systems as evolving cities that treats evolution as a first-class concept. It renders with fidelity not only changes but also refactorings in a comprehensive way. To do so, we developed custom ways to traverse time. We implemented our approach in a publicly accessible web-based platform named m3triCity.", "num_citations": "5\n", "authors": ["940"]}
{"title": "Free Hugs \u2014 Praising Developers for Their Actions\n", "abstract": " Developing software is a complex, intrinsically intellectual, and therefore ephemeral activity, also due to the intangible nature of the end product, the source code. There is a thin red line between a productive development session, where a developer actually does something useful and productive, and a session where the developer essentially produces \"fried air\", pieces of code whose quality and usefulness are doubtful at best. We believe that well-thought mechanisms of gamification built on fine-grained interaction information mined from the IDE can crystallize and reward good coding behavior. We present our preliminary experience with the design and implementation of a micro-gamification layer built into an object-oriented IDE, which at the end of each development session not only helps the developer to understand what he actually produced, but also praises him in case the development session was\u00a0\u2026", "num_citations": "5\n", "authors": ["940"]}
{"title": "Towards Self-Adaptive IDEs\n", "abstract": " Developers use Integrated Development Environments (IDEs) to maintain and evolve software systems. IDEs facilitate development activities such as navigating, reading, understanding, and writing source code. Development activities are composed of many basic events, such as browsing the source code of a method or editing the body of a method. We call these actions \"interaction data\". We believe that collecting, processing, and exploiting these interactions at run-time can potentially augment the productivity of developers. Our goal is to create self-adaptive IDEs: IDEs that collect, mine, and leverage the interactions of developers to better support the developers' workflow. We envision a development environment that automatically and seamlessly adapts itself to support developers while maintaining and evolving software systems. To reach our goal, we will develop means to reshape the user interface of the IDE\u00a0\u2026", "num_citations": "5\n", "authors": ["940"]}
{"title": "Interaction-Aware Development Environments: Recording, Mining, and Leveraging IDE Interactions to Analyze and Support the Development Flow\n", "abstract": " Nowadays, software development is largely carried out using Integrated Development Environments, or IDEs. An IDE is a collection of tools and facilities to support the most diverse software engineering activities, such as writing code, debugging, and program understanding. The fact that they are integrated enables developers to find all the tools needed for the development in the same place. Each activity is composed of many basic events, such as clicking on a menu item in the IDE, opening a new user interface to browse the source code of a method, or adding a new statement in the body of a method. While working, developers generate thousands of these interactions, that we call fine-grained IDE interaction data. We believe this data is a valuable source of information that can be leveraged to enable better analyses and to offer novel support to developers. However, this data is largely neglected by modern IDEs. In this dissertation we propose the concept of\" Interaction-Aware Development Environments\": IDEs that collect, mine, and leverage the interactions of developers to support and simplify their workflow. We formulate our thesis as follows: Interaction-Aware Development Environments enable novel and in-depth analyses of the behavior of software developers and set the ground to provide developers with effective and actionable support for their activities inside the IDE. For example, by monitoring how developers navigate source code, the IDE could suggest the program entities that are potentially relevant for a particular task. Our research focuses on three main directions: 1. Modeling and Persisting Interaction Data. The first step to\u00a0\u2026", "num_citations": "4\n", "authors": ["940"]}
{"title": "DFlow \u2014 Towards the understanding of the workflow of developers\n", "abstract": " Developers interact with the Integrated Development Environment (IDE) to read, understand, and write source code; essentially navigating the system at hand. While doing so, they construct a mental model of the system using the tools and facilities provided by the IDE. It is unclear how developers navigate the system and whether the current facilities provided by the IDE appropriately support the navigation. Our goal is to investigate how, when, and why developers use certain tools to explore and modify the system, and to provide the means to retrospectively analyze and understand development sessions. We present our initial steps towards an approach to track the activities of developers while performing software engineering tasks, implemented as an extension of the Pharo Smalltalk IDE.Introduction. Developers interact with the Integrated Development Environment (IDE) to read, understand, and write source code, essentially navigating the system at hand. While interacting with the tools and facilities provided by the IDE, developers construct a mental model of the system that eases the comprehension of the system itself. However, it remains to be investigated how developers navigate the system and whether the current tools and IDE extensions (eg, plug-ins) conveniently support the navigation tasks.", "num_citations": "4\n", "authors": ["940"]}
{"title": "Visualizing the Evolution of Working Sets\n", "abstract": " As part of their daily work, developers interact with Integrated Development Environments (IDE), generating thousands of events. Together with other aspects of development, this data also captures the modus operandi of the developer, including all the program entities she interacted with during a development session. This \"working set\" (or context) is leveraged by developers to create and maintain their mental model of the software system at hand. Understanding how developers navigate and interact with source code during a development session is an open question. We present a novel visual approach to understand how working sets evolve during a development session. The visualization incrementally depicts all the program entities involved in a development session, the intensity of the developer activity on them, and the navigation paths that occurred between them. We visualized about a thousand\u00a0\u2026", "num_citations": "2\n", "authors": ["940"]}
{"title": "SODA: The Stack Overflow Dataset Almanac\n", "abstract": " Stack Overflow has become a fundamental resource for developers, becoming the de facto Question and Answer (Q&A) website, and one of the standard unstructured data sources for software engineering research to mine knowledge about development. We present SODA, the Stack Overflow Dataset Almanac, a tool that helps researchers and developers to better understand the trends of discussion topics in Stack Overflow, based on the available tagging system. SODA provides an effective visualization to support the analysis of topics in different time intervals and frames, leveraging single or co-occurrent tags. We show, through simple usage scenarios, how SODA can be used to find interesting peculiar moments in the evolution of Stack Overflow discussions that closely match specific recent events in the area of software development. SODA is available at http://rio.inf.usi.ch/soda/.", "num_citations": "2\n", "authors": ["940"]}
{"title": "UrbanIt: Visualizing Repositories Everywhere\n", "abstract": " Software evolution is supported by a variety of tools that help developers understand the structure of a software system, analyze its history and support specific classes of analyses. However, the increasingly distributed nature of software development requires basic repository analyses to be always available to developers, even when they cannot access their workstation with full-fledged applications and command-line tools. We present URBANIT, a gesture-based tablet application for the iPad that supports the visualization of software repositories together with useful evolutionary analyses (e.g., version diff) and basic sharing features in a portable and mobile setting. URBANIT is paired with a web application that manages synchronization of multiple repositories.", "num_citations": "2\n", "authors": ["940"]}
{"title": "Visualizing GitHub Issues\n", "abstract": " The rise of distributed version control systems, such as git, and platforms built on top of it, such as GitHub, has triggered a change in how software is developed. Most notably, state-of-the-art practice foresees the use of pull requests and issues, enriched by means to enable discussions among the involved people. Platforms like GitHub and GitLab have thus turned into comprehensive and cohesive modern software development environments, also offering additional mechanisms, such as code review tools and a transversal support for continuous integration and deployment. However, the plethora of concepts, mechanisms, and their interconnections are stored and presented in textual form, which makes the understanding of the underlying evolutionary processes difficult.We introduce the notion of an issue tale, a visual narrative of the events and actors revolving around any GitHub issue, and present an approach\u00a0\u2026", "num_citations": "1\n", "authors": ["940"]}