{"title": "Benefits and limitations of automated software testing: Systematic literature review and practitioner survey\n", "abstract": " There is a documented gap between academic and practitioner views on software testing. This paper tries to close the gap by investigating both views regarding the benefits and limits of test automation. The academic views are studied with a systematic literature review while the practitioners views are assessed with a survey, where we received responses from 115 software professionals. The results of the systematic literature review show that the source of evidence regarding benefits and limitations is quite shallow as only 25 papers provide the evidence. Furthermore, it was found that benefits often originated from stronger sources of evidence (experiments and case studies), while limitations often originated from experience reports. We believe that this is caused by publication bias of positive results. The survey showed that benefits of test automation were related to test reusability, repeatability, test coverage and\u00a0\u2026", "num_citations": "264\n", "authors": ["334"]}
{"title": "The effect of moving from a plan-driven to an incremental software development approach with agile practices\n", "abstract": " So far, only few in-depth studies focused on the direct comparison of process models in general, and between plan-driven and incremental/agile approaches in particular. That is, it is not made explicit what the effect is of moving from one model to another model. Furthermore, there is limited evidence on advantages and issues encountered in agile software development, this is specifically true in the context of large-scale development. The objective of the paper is to investigate how the perception of bottlenecks, unnecessary work, and rework (from hereon referred to as issues) changes when migrating from a plan-driven to an incremental software development approach with agile practices (flexible product backlog, face-to-face interaction, and frequent integration), and how commonly perceived these practices are across different systems and development roles. The context in which the objective should\u00a0\u2026", "num_citations": "221\n", "authors": ["334"]}
{"title": "What is DevOps? A systematic mapping study on definitions and practices\n", "abstract": " Context: DevOps, the combination of Development and Operations, is a new way of thinking in the software engineering domain that recently received much attention. Given that DevOps is a new term and novel concept recently introduced, no common understanding of what it entails has been achieved yet. Consequently, definitions of DevOps often only represent a part that is relevant to the concept.Objective: This study aims to characterize DevOps by exploring central components of DevOps definitions reported in the literature, specifying practices explicitly proposed for DevOps and investigating the similarities and differences between DevOps and other existing methods in software engineering.Method: A systematic mapping study was conducted that used six electronic databases: IEEE, ACM, Inspec, Scopus, Wiley Online Library and Web of Science.Result: 44 studies have been selected that report a definition\u00a0\u2026", "num_citations": "218\n", "authors": ["334"]}
{"title": "Measuring and predicting software productivity: A systematic map and review\n", "abstract": " ContextSoftware productivity measurement is essential in order to control and improve the performance of software development. For example, by identifying role models (e.g. projects, individuals, tasks) when comparing productivity data. The prediction is of relevance to determine whether corrective actions are needed, and to discover which alternative improvement action would yield the best results.ObjectiveIn this study we identify studies for software productivity prediction and measurement. Based on the identified studies we first create a classification scheme and map the studies into the scheme (systematic map). Thereafter, a detailed analysis and synthesis of the studies is conducted.MethodAs a research method for systematically identifying and aggregating the evidence of productivity measurement and prediction approaches systematic mapping and systematic review have been used.ResultsIn total 38\u00a0\u2026", "num_citations": "172\n", "authors": ["334"]}
{"title": "Measuring the flow in lean software development\n", "abstract": " Responsiveness to customer needs is an important goal in agile and lean software development. One major aspect is to have a continuous and smooth flow that quickly delivers value to the customer. In this paper we apply cumulative flow diagrams to visualize the flow of lean software development. The main contribution is the definition of novel measures connected to the diagrams to achieve the following goals: (1) increase throughput and reduce lead\u2010time to achieve high responsiveness to customers' needs and (2) to provide a tracking system that shows the progress/status of software product development. An evaluation of the measures in an industrial case study showed that practitioners found them useful and identify improvements based on the measurements, which were in line with lean and agile principles. Furthermore, the practitioners found the measures useful in seeing the progress of development for\u00a0\u2026", "num_citations": "159\n", "authors": ["334"]}
{"title": "Software process improvement through the Lean Measurement (SPI-LEAM) method\n", "abstract": " Software process improvement methods help to continuously refine and adjust the software process to improve its performance (e.g., in terms of lead-time, quality of the software product, reduction of change requests, and so forth). Lean software development propagates two important principles that help process improvement, namely identification of waste in the process and considering interactions between the individual parts of the software process from an end-to-end perspective. A large shift of thinking about the own way of working is often required to adopt lean. One of the potential main sources of failure is to try to make a too large shift about the ways of working at once. Therefore, the change to lean has to be done in a continuous and incremental way. In response to this we propose a novel approach to bring together the quality improvement paradigm and lean software development practices, the approach\u00a0\u2026", "num_citations": "132\n", "authors": ["334"]}
{"title": "Considering rigor and relevance when evaluating test driven development: A systematic review\n", "abstract": " ContextTest driven development (TDD) has been extensively researched and compared to traditional approaches (test last development, TLD). Existing literature reviews show varying results for TDD.ObjectiveThis study investigates how the conclusions of existing literature reviews change when taking two study quality dimension into account, namely rigor and relevance.MethodIn this study a systematic literature review has been conducted and the results of the identified primary studies have been analyzed with respect to rigor and relevance scores using the assessment rubric proposed by Ivarsson and Gorschek 2011. Rigor and relevance are rated on a scale, which is explained in this paper. Four categories of studies were defined based on high/low rigor and relevance.ResultsWe found that studies in the four categories come to different conclusions. In particular, studies with a high rigor and relevance scores\u00a0\u2026", "num_citations": "107\n", "authors": ["334"]}
{"title": "Prioritizing agile benefits and limitations in relation to practice usage\n", "abstract": " In recent years, there has been significant shift from rigid development (RD) toward agile. However, it has also been spotted that agile methodologies are hardly ever followed in their pure form. Hybrid processes as combinations of RD and agile practices emerge. In addition, agile adoption has been reported to result in both benefits and limitations. This exploratory study (a) identifies development models based on RD and agile practice usage by practitioners; (b) identifies agile practice adoption scenarios based on eliciting practice usage over time; (c) prioritizes agile benefits and limitations in relation to (a) and (b). Practitioners provided answers through a questionnaire. The development models are determined using hierarchical cluster analysis. The use of practices over time is captured through an interactive board with practices and time indication sliders. This study uses the extended hierarchical\u00a0\u2026", "num_citations": "77\n", "authors": ["334"]}
{"title": "Static code analysis to detect software security vulnerabilities-does experience matter?\n", "abstract": " Code reviews with static analysis tools are today recommended by several security development processes. Developers are expected to use the tools' output to detect the security threats they themselves have introduced in the source code. This approach assumes that all developers can correctly identify a warning from a static analysis tool (SAT) as a security threat that needs to be corrected. We have conducted an industry experiment with a state of the art static analysis tool and real vulnerabilities. We have found that average developers do not correctly identify the security warnings and only developers with specific experiences are better than chance in detecting the security vulnerabilities. Specific SAT experience more than doubled the number of correct answers and a combination of security experience and SAT experience almost tripled the number of correct security answers.", "num_citations": "77\n", "authors": ["334"]}
{"title": "Agile software development practice adoption survey\n", "abstract": " Agile methodologies are often not used \u201cout of the box\u201d by practitioners, instead they select the practices that fit their needs best. However, little is known which agile practices the practitioners choose. This study investigates agile practice adoption by asking practitioners which practices they are using on project and organizational level. We investigated how commonly used individual agile practices are, combinations of practices and their frequency of usage, as well as the degree of compliance to agile methodologies (Scrum and XP), and as how successful practitioners perceive the adoption. The research method used is survey. The survey has been sent to over 600 respondents, and has been posted on LinkedIn, Yahoo, and Google groups. In total 109 answers have been received. Practitioners can use the knowledge of the commonality of individual practices and combinations of practices as support in\u00a0\u2026", "num_citations": "72\n", "authors": ["334"]}
{"title": "Is lean agile and agile lean?: a comparison between two software development paradigms\n", "abstract": " Lean and agile development are two development paradigms that were proposed to help dealing with highly dynamic markets and the resulting rapid changes in customer needs. As both paradigms address a similar problem, it is interesting to compare them and by that, determine what both paradigms can learn from each other. This chapter compares the paradigms with regard to goals, principles, practices, and processes. The outcome of the comparison is:(1) both paradigms share the same goals;(2) the paradigms define similar principles, with one principle (\u201csee the whole\u201d) being unique to lean;(3) both paradigms have unique as well as shared principles;(4) lean does not define processes, while agile has proposed different ones such eXtreme programming and SCRUM.", "num_citations": "64\n", "authors": ["334"]}
{"title": "Analyzing an automotive testing process with evidence-based software engineering\n", "abstract": " ContextEvidence-based software engineering (EBSE) provides a process for solving practical problems based on a rigorous research approach. The primary focus so far was on mapping and aggregating evidence through systematic reviews.ObjectivesWe extend existing work on evidence-based software engineering by using the EBSE process in an industrial case to help an organization to improve its automotive testing process. With this we contribute in (1) providing experiences on using evidence based processes to analyze a real world automotive test process and (2) provide evidence of challenges and related solutions for automotive software testing processes.MethodsIn this study we perform an in-depth investigation of an automotive test process using an extended EBSE process including case study research (gain an understanding of practical questions to define a research scope), systematic literature\u00a0\u2026", "num_citations": "62\n", "authors": ["334"]}
{"title": "A systematic literature review of software requirements reuse approaches\n", "abstract": " ContextEarly software reuse is considered as the most beneficial form of software reuse. Hence, previous research has focused on supporting the reuse of software requirements.ObjectiveThis study aims to identify and investigate the current state of the art with respect to (a) what requirement reuse approaches have been proposed, (b) the methods used to evaluate the approaches, (c) the characteristics of the approaches, and (d) the quality of empirical studies on requirements reuse with respect to rigor and relevance.MethodWe conducted a systematic review and a combination of snowball sampling and database search have been used to identify the studies. The rigor and relevance scoring rubric has been used to assess the quality of the empirical studies. Multiple researchers have been involved in each step to increase the reliability of the study.ResultsSixty-nine studies were identified that describe\u00a0\u2026", "num_citations": "59\n", "authors": ["334"]}
{"title": "Survey research in software engineering: Problems and mitigation strategies\n", "abstract": " Background: The need for empirical investigations in software engineering is growing. Many researchers nowadays, conduct and validate their solutions using empirical research. The Survey is an empirical method which enables researchers to collect data from a large population. The main aim of the survey is to generalize the findings. Aims: In this study, we aim to identify the problems researchers face during survey design and mitigation strategies. Method: A literature review, as well as semi-structured interviews with nine software engineering researchers, were conducted to elicit their views on problems and mitigation strategies. The researchers are all focused on empirical software engineering. Results: We identified 24 problems and 65 strategies, structured according to the survey research process. The most commonly discussed problem was sampling, in particular, the ability to obtain a sufficiently large\u00a0\u2026", "num_citations": "42\n", "authors": ["334"]}
{"title": "Improving software security with static automated code analysis in an industry setting\n", "abstract": " Software security can be improved by identifying and correcting vulnerabilities. In order to reduce the cost of rework, vulnerabilities should be detected as early and efficiently as possible. Static automated code analysis is an approach for early detection. So far, only few empirical studies have been conducted in an industrial context to evaluate static automated code analysis. A case study was conducted to evaluate static code analysis in industry focusing on defect detection capability, deployment, and usage of static automated code analysis with a focus on software security. We identified that the tool was capable of detecting memory related vulnerabilities, but few vulnerabilities of other types. The deployment of the tool played an important role in its success as an early vulnerability detector, but also the developers perception of the tools merit. Classifying the warnings from the tool was harder for the developers\u00a0\u2026", "num_citations": "42\n", "authors": ["334"]}
{"title": "A palette of lean indicators to detect waste in software maintenance: A case study\n", "abstract": " Software maintenance is a key activity in software development requiring considerable effort and time. Hence, it is important to increase the efficiency and effectiveness of the maintenance process. The objective of this article is to introduce a palette of indicators to assess the maintenance process based on indicators lean indicators. Four indicators aiming at detecting waste have been proposed, namely the inflow of maintenance requests, the flow of maintenance requests through the maintenance process with regard to continuous value creation and high throughput, the analysis of lead-times, and the analysis of workload. The research method is case study in which the proposed indicators were applied on the maintenance process of one case company (Ericsson AB).", "num_citations": "42\n", "authors": ["334"]}
{"title": "Implementing lean and agile software development in industry\n", "abstract": " Background: The software market is becoming more dynamic which can be seen in frequently changing customer needs. Hence, software companies need to be able to quickly respond to these changes. For software companies this means that they have to become agile with the objective of developing features with very short lead-time and of high quality. A consequence of this challenge is the appearance of agile and lean software development. Practices and principles of agile software development aim at increasing flexibility with regard to changing requirements. Lean software development aims at systematically identifying waste to focus all resources on value adding activities. Objective: The objective of the thesis is to evaluate the usefulness of agile practices in a large-scale industrial setting. In particular, with regard to agile the goal is to understand the effect of migrating from a plan-driven to an agile development approach. A positive effect would underline the usefulness of agile practices. With regard to lean software development the goal is to propose novel solutions inspired by lean manufacturing and product development, and to evaluate their usefulness in further improving agile development. Method: The primary research method used throughout the thesis is case study. As secondary methods for data collection a variety of approaches have been used, such as semi-structured interviews, workshops, study of process documentation, and use of quantitative data. Results: The agile situation was investigated through a series of case studies. The baseline situation (plan-driven development) was evaluated and the effect of the\u00a0\u2026", "num_citations": "41\n", "authors": ["334"]}
{"title": "An experimental evaluation of test driven development vs. test-last development with industry professionals\n", "abstract": " Test-Driven Development (TDD) is a software development approach where test cases are written before actual development of the code in iterative cycles. Context: TDD has gained attention of many software practitioners during the last decade since it has contributed several benefits to the software development process. However, empirical evidence of its dominance in terms of internal code quality, external code quality and productivity is fairly limited. Objective: The aim behind conducting this controlled experiment with professional Java developers is to see the impact of Test-Driven Development (TDD) on internal code quality, external code quality and productivity compared to Test-Last Development (TLD). Results: Experiment results indicate that values found related to number of acceptance test cases passed, McCabe's Cyclomatic complexity, branch coverage, number of lines of code per person hours\u00a0\u2026", "num_citations": "32\n", "authors": ["334"]}
{"title": "Prioritizing countermeasures through the countermeasure method for software security (CM-Sec)\n", "abstract": " Software security is an important quality aspect of a software system. Therefore, it is important to integrate software security touch points throughout the development life-cycle. So far, the focus of touch points in the early phases has been on the identification of threats and attacks. In this paper we propose a novel method focusing on the end product by prioritizing countermeasures. The method provides an extension to attack trees and a process for identification and prioritization of countermeasures. The approach has been applied on an open-source application and showed that countermeasures could be identified. Furthermore, an analysis of the effectiveness and cost-efficiency of the countermeasures could be provided.", "num_citations": "32\n", "authors": ["334"]}
{"title": "Countermeasure graphs for software security risk assessment: An action research\n", "abstract": " Software security risk analysis is an important part of improving software quality. In previous research we proposed countermeasure graphs (CGs), an approach to conduct risk analysis, combining the ideas of different risk analysis approaches. The approach was designed for reuse and easy evolvability to support agile software development.CGs have not been evaluated in industry practice in agile software development. In this research we evaluate the ability of CGs to support practitioners in identifying the most critical threats and countermeasures.The research method used is participatory action research where CGs were evaluated in a series of risk analyses on four different telecom products.With Peltier (used prior to the use of CGs at the company) the practitioners identified attacks with low to medium risk level. CGs allowed practitioners to identify more serious risks (in the first iteration 1 serious threat, 5 high\u00a0\u2026", "num_citations": "30\n", "authors": ["334"]}
{"title": "An exploratory case study of testing in an automotive electrical system release process\n", "abstract": " The release process is a crucial element in the development of software-intensive systems, as it bridges the gap between the development of a system and its operational use. A short release process enables a fast time to market, but also puts high demands on the efficiency of integration and testing, which typically constitue principal release process steps. This paper reports findings from an exploratory industrial case study focusing on system testing in an automotive electrical system release process. We provide a description of how system testing is performed and integrated in the release process in the automotive domain, and identify a set of challenges observed in the studied setting. The case being studied is Scania, a major Swedish automotive company.", "num_citations": "24\n", "authors": ["334"]}
{"title": "Lean software development measures and indicators-a systematic mapping study\n", "abstract": " Background: Lean Software Development (LSD) aims for improvement, yet this improvement requires measures to identify whether a difference has been achieved, and provide decision support for further improvement.                                        Objective: This study identifies measures and indicators proposed in literature on LSD, then structures them according to ISO/IEC 15939, allowing for comparability due to a use of a standard.                                        Method: Systematic mapping is the research methodology.                                        Result: The published literature on LSD measures has significantly increased since 2010. The two pre-dominant study types are evaluation research and experience reports. 22 base measures, 13 derived measures, and 14 indicators were identified.                                        Conclusion: Gaps exist with respect to LSD principles. In particular: deferring commitment\u00a0\u2026", "num_citations": "22\n", "authors": ["334"]}
{"title": "Heterogeneous systems testing techniques: An exploratory survey\n", "abstract": " Heterogeneous systems comprising sets of inherent subsystems are challenging to integrate. In particular, testing for interoperability and conformance is a challenge. Furthermore, the complexities of such systems amplify traditional testing challenges. We explore (1) which techniques are frequently discussed in literature in context of heterogeneous system testing that practitioners use to test their heterogeneous systems; (2) the perception of the practitioners on the usefulness of the techniques with respect to a defined set of outcome variables. For that, we conducted an exploratory survey. A total of 27 complete survey answers have been received. Search-based testing has been used by 14 out of 27 respondents, indicating the practical relevance of the approach for testing heterogeneous systems, which itself is relatively new and has only recently been studied extensively. The most frequently used\u00a0\u2026", "num_citations": "21\n", "authors": ["334"]}
{"title": "Finding relevant research solutions for practical problems: the serp taxonomy architecture\n", "abstract": " Background: Experience and research indicates that there exist a communication gap between research and industry in software engineering.Objective: We propose the Software Engineering Research and Practice (SERP) taxonomy architecture to support communication between practitioners and researchers. The taxonomy architecture provides a basis for classifying research from a problem perspective which in turn supports the breaking down of complex practical challenges to researchable units. Thus such taxonomy may support the mapping of challenges in industry to research solutions in the software engineering context.Method: In this paper we present SERP and exemplifies its usage based on two literature studies in the field of software engineering. Further, we discuss how a taxonomy based on this architecture could have helped us in two past research projects that were conducted in close\u00a0\u2026", "num_citations": "19\n", "authors": ["334"]}
{"title": "Why do users install and delete Apps? A survey study\n", "abstract": " Practitioners on the area of mobile application development usually rely on set of app-related success factors, the majority of which are directly related to their economical/business profit (e.g., number of downloads, or the in-app purchases revenue). However, gathering also the user-related success factors, that explain the reasons why users choose, download, and install apps as well as the user-related failure factors that explain the reasons why users delete apps, might help practitioners understand how to improve the market impact of their apps. The objectives were to: identify (i) the reasons why users choose and installing mobile apps from app stores; (ii) the reasons why users uninstall the apps. A questionnaire-based survey involving 121 users from 26 different countries was conducted.", "num_citations": "17\n", "authors": ["334"]}
{"title": "Structuring automotive product lines and feature models: an exploratory study at Opel\n", "abstract": " Automotive systems are highly complex and customized systems containing a vast amount of variability.  Feature modeling plays a key role in customization. Empirical evidence through industry application, and in particular methodological guidance of how to structure automotive product lines and their feature models is needed. The overall aim of this work is to provide guidance to practitioners how to structure automotive product lines and their feature models, understanding strengths and weaknesses of alternative structures. The research was conducted in three phases. In the first phase, the context situation was understood using interviews and workshops. In the second phase, possible structures of product lines and feature models were evaluated based on industry feedback collected in workshops. In the third phase, the structures were implemented in the tool GEARS and practitioner feedback was\u00a0\u2026", "num_citations": "15\n", "authors": ["334"]}
{"title": "An empirical study of lead-times in incremental and agile software development\n", "abstract": " Short lead-times are essential in order to have a first-move advantages and to be able to react on changes on a fast-paced market. Agile software development is a development paradigm that aims at being able to respond quickly to changes in customer needs. So far, to the best of our knowledge no empirical study has investigated lead-times with regard to different aspects (distribution between phases, difference of lead-time with regard to architecture dependencies, and size). However, in order to improve lead-times it is important to understand the behavior of lead-times. In this study the lead-times of a large-scale company employing incremental and agile practices are analyzed. The analysis focuses on 12 systems at Ericsson AB, Sweden.", "num_citations": "15\n", "authors": ["334"]}
{"title": "Handover of managerial responsibilities in global software development: a case study of source code evolution and quality\n", "abstract": " Studies report on the negative effect on quality in global software development (GSD) due to communication and coordination-related challenges. However, empirical studies reporting on the magnitude of the effect are scarce. This paper presents findings from an embedded explanatory case study on the change in quality over time, across multiple releases, for products that were developed in a GSD setting. The GSD setting involved periods of distributed development between geographically dispersed sites as well as a handover of project management responsibilities between the involved sites. Investigations were performed on two medium-sized products from a company that is part of a large multinational corporation. Quality is investigated quantitatively using defect data and measures that quantify two source code properties, size and complexity. Observations were triangulated with subjective views\u00a0\u2026", "num_citations": "14\n", "authors": ["334"]}
{"title": "Mapping software testing practice with software testing research\u2014SERP-test taxonomy\n", "abstract": " There is a gap between software testing research and practice. One reason is the discrepancy between how testing research is reported and how testing challenges are perceived in industry. We propose the SERP-test taxonomy to structure information on testing interventions and practical testing challenges from a common perspective and thus bridge the communication gap. To develop the taxonomy we follow a systematic incremental approach. The SERP-test taxonomy may be used by both researchers and practitioners to classify and search for testing challenges or interventions. The SERP-test taxonomy also supports comparison of testing interventions by providing an instrument for assessing the distance between them and thus identify relevant points of comparisons.", "num_citations": "14\n", "authors": ["334"]}
{"title": "The impact of time controlled reading on software inspection effectiveness and efficiency: a controlled experiment\n", "abstract": " Reading techniques help to guide reviewers during individual software inspections. In this experiment, we completely transfer the principle of statistical usage testing to inspection reading techniques for the first time. Statistical usage testing relies on a usage profile to determine how intensively certain parts of the system shall be tested from the users' perspective. Usage-based reading applies statistical usage testing principles by utilizing prioritized use cases as a driver for inspecting software artifacts (eg, design). In order to reflect how intensively certain use cases should be inspected, time budgets are introduced to usage-based reading where a maximum inspection time is assigned to each use case. High priority use cases receive more time than low priority use cases. A controlled experiment is conducted with 23 Software Engineering M. Sc. students inspecting a design document. In this experiment, usage\u00a0\u2026", "num_citations": "14\n", "authors": ["334"]}
{"title": "Checklists to support test charter design in exploratory testing\n", "abstract": " During exploratory testing sessions the tester simultaneously learns, designs and executes tests. The activity is iterative and utilizes the skills of the tester and provides flexibility and creativity. Test charters are used as a vehicle to support the testers during the testing. The aim of this study is to support practitioners in the design of test charters through checklists. We aimed to identify factors allowing practitioners to critically reflect on their designs and contents of test charters to support practitioners in making informed decisions of what to include in test charters. The factors and contents have been elicited through interviews. Overall, 30 factors and 35 content elements have been elicited.", "num_citations": "13\n", "authors": ["334"]}
{"title": "A context model for architectural decision support\n", "abstract": " Developing efficient and effective decision making support includes identifying means to reduce repeated manual work and providing possibilities to take advantage of the experience gained in previous decision situations. For this to be possible, there is a need to explicitly model the context of a decision case, for example to determine how much the evidence from one decision case can be trusted in another, similar context. In earlier work, context has been recognized as important when transferring and understanding outcomes between cases. The contribution of this paper is threefold. First, we describe different ways of utilizing context in an envisioned decision support system. Thereby, we distinguish between internal and external context usage, possibilities of context representation, and context inheritance. Second, we present a systematically developed context model comprised of five types of context\u00a0\u2026", "num_citations": "12\n", "authors": ["334"]}
{"title": "Issues and advantages of using agile and incremental practices\n", "abstract": " The importance of agile methods increased in recent years due to the need of being more flexible due to unstable requirements and high competitive pressure. Therefore, recent empirical studies have been conducted identifying a number of issues and advantages of incremental and agile methods. However, the majority of studies focused on one model (Extreme Programming) and small projects. Thus, in order to draw more general conclusions there is a need to also study large scale implementations of agile and incremental practices. Therefore, this paper 1) investigates a large-scale implementation of agile and incremental practices and identified issues and advantages and 2) compares them with the findings of previous studies mainly focusing on small-scale agile implementations.", "num_citations": "7\n", "authors": ["334"]}
{"title": "Variability-driven selection of services for service compositions\n", "abstract": " In order to deliver services that realize their requirements at low cost, in short time, and with high quality, service engineers reuse existing services for building composite services. For each service that is part of such a composite service and which is offered by a service provider, a service level agreement has to be established and the quality of service has to be monitored. Therefore, in order to keep service management controllable, the overall number of services across all service compositions that are maintained by an organization should be as small as possible. However, currently there exists no technique that would support service engineers in selecting such a minimal set of services when building composite services. By drawing on research results from software product line engineering, we define a service selection process (SeVAR) that exploits the similarities in the requirements in order to select\u00a0\u2026", "num_citations": "6\n", "authors": ["334"]}
{"title": "# Covid-19: An Exploratory Investigation of Hashtag Usage on Twitter\n", "abstract": " BackgroundThe literature highlights Twitter as a vital instrument tool for health policy-makers for health communication and promotion. Furthermore, Twitter is a tool allowing us to understand the focus of people regarding a topic of interest.ObjectiveTo provide health policy-makers with insights concerning key topics of interest in the Twitter community regarding Covid-19, and to support information search and health communication.MethodA total of 28.5M tweets have been retrieved, of which 6.9M tweets included hashtags. The data was analyzed using data science and natural language processing libraries. Qualitative analysis was performed using thematic analysis.Results907k different hashtags were used. Of these, only 1192 hashtags were used more than 1000 times. The qualitative analysis resulted in 13 themes. The top three themes regarding the number of hashtags used were related to Covid-19\u00a0\u2026", "num_citations": "5\n", "authors": ["334"]}
{"title": "Operationalizing the requirements selection process with study selection procedures from systematic literature reviews\n", "abstract": " Context: Software organizations working in a market-driven environment have to select requirements from a large pool to be prioritized and put into backlogs for the development organization. Objective: This paper proposes an approach based on study selection in systematic literature reviews and translates the concept to requirements engineering. The rational for doing so is that the selection processes used there have been effective (selecting and finding relevant papers) and efficient (possible to use for a high number of studies, in some cases 10,000 research contributions had to be evaluated). Method: This paper can be classified as a solution proposal, and utilizes hypothetical examples to explain and argue for the method design decisions.Results: The process proposed consists of three main phases, namely establish selection criteria, evaluate selection criteria, and apply selection. On a more fine-grained level, nine activities are specified. Conclusion: Given that the process has been effective and efficient in a similar context, our proposition to be evaluated in future research contributions is that the process leads to effective and efficient decision making in requirements selection.", "num_citations": "5\n", "authors": ["334"]}
{"title": "Supporting refactoring of BDD specifications\u2014An empirical study\n", "abstract": " Context:Behavior-driven development (BDD) is a variant of test-driven development where specifications are described in a structured domain-specific natural language. Although refactoring is a crucial activity of BDD, little research is available on the topic.Objective:To support practitioners in refactoring BDD specifications by (1) proposing semi-automated approaches to identify refactoring candidates; (2) defining refactoring techniques for BDD specifications; and (3) evaluating the proposed identification approaches in an industry context.Method:Using Action Research, we have developed an approach for identifying refactoring candidates in BDD specifications based on two measures of similarity and applied the approach in two projects of a large software organization. The accuracy of the measures for identifying refactoring candidates was then evaluated against an approach based on machine learning and a\u00a0\u2026", "num_citations": "2\n", "authors": ["334"]}
{"title": "Metrics for the evaluation of feature models in an industrial context: A case study at opel\n", "abstract": " [Context & motivation] Feature models are used in product line engineering to document possible product configurations on the feature level. [Problem] In order to quantify the success of adopting feature modeling in practice, we need to understand the industry relevant metrics for feature model evaluation. [Solution] In order to identify the metrics a Goal-Question-Metric approach was used in the context of a case study conducted at Adam Opel AG. [Contribution:] We identified seven goals (quality criteria) we should strive for and evaluate when using feature models. Furthermore, we identified 18 sub-goals, 27 questions and corresponding metrics. The metrics were used to reflect on the feature modeling conducted at the company.", "num_citations": "2\n", "authors": ["334"]}
{"title": "The Relationship between Immediacy, Trust and Students\u2019 Choice of Supervisors in the Software Engineering Context\n", "abstract": " This study aims to bring into light how much the non-verbal immediacy level of supervisors and their perceived trustworthiness by students are associated, and whether this influences students\u2019 choice of their supervisors. A survey was conducted with 78 second-year Software Engineering and Computer Science MSc students at the Blekinge Institute of Technology in Sweden. The students were randomly assigned candidate supervisors. They were asked to fill in a questionnaire, which included two measurement instruments: 1) Generalized Immediacy Scale (GI) to measure the perceived non-verbal immediacy level and 2) Individualized Trust Scale (ITS) to measure trustworthiness of the assigned supervisor. Our analysis showed a strong positive association between the non-verbal immediacy level and the perceived trustworthiness of supervisors by students. We further observed that there was low variance between the students in how they perceived each individual supervisor in terms of non-verbal immediacy and trustworthiness. Thus, we conclude that if supervisors make conscious decisions to improve their non-verbal immediacy skills, this most likely would affect increasing their perceived trustworthiness by overall students and hence could attract good students for their supervision.", "num_citations": "2\n", "authors": ["334"]}
{"title": "Service engineering methodology\n", "abstract": " Today, enterprises have to keep pace with increasing business changes in every sphere\u2014customer preferences, competition, technology, economic conditions, sourcing and development strategy, distribution and service models, regulatory requirements, pricing models, and market scope. According to statements of most CEOs, their companies are neither responsive enough to these changing business conditions nor agile enough to pursue new market opportunities.", "num_citations": "2\n", "authors": ["334"]}
{"title": "Guidelines for Case Survey Research in Software Engineering\n", "abstract": " This chapter presents guidelines for case survey research. The chapter includes a description of the research process and provides examples for each step of the process. The process comprises the following steps: (1) define research scope, (2) case identification and selection, (3) case extraction, (4) case analysis, and (5) reporting. In addition, we also present a checklist for the quality assessment of case surveys.", "num_citations": "1\n", "authors": ["334"]}
{"title": "Semantic Knowledge Management System to Support Software Engineers: Implementation and Static Evaluation through Interviews at Ericsson\n", "abstract": " EN Background: In large-scale corporations in the software engineering context information overload problems occur as stakeholders continuously produce useful information on process life-cycle issues, matters related to specific products under development, etc. Information overload makes finding relevant information (eg, how did the company apply the requirements process for product X?) challenging, which is in the primary focus of this paper. Contribution: In this study the authors aimed at evaluating the ease of implementing a semantic knowledge management system at Ericsson, including the essential components of such systems (such as text processing, ontologies, semantic annotation and semantic search). Thereafter, feedback on the usefulness of the system was collected from practitioners. Method: A single case study was conducted at a development site of Ericsson AB in Sweden. Results: It was found that semantic knowledge management systems are challenging to implement, this refers in particular to the implementation and integration of ontologies. Specific ontologies for structuring and filtering are essential, such as domain ontologies and ontologies distinct to the organization. Conclusion: To be readily adopted and transferable to practice, desired ontologies need to be implemented and integrated into semantic knowledge management frameworks with ease, given that the desired ontologies are dependent on organizations and domains.", "num_citations": "1\n", "authors": ["334"]}
{"title": "State of the Practice for Sustainability as an Explicit Objective\n", "abstract": " Sustainability in its various facets has become an important aspect of engineering software. However, we have only few guidelines on how to incorporate sustainability as an overall objective from the very beginning of software systems development. In previous work, we provide a discussion on including sustainability during requirements engineering and while taking software product management decisions. To gather further information about the state of practice, we propose this questionnaire to investigate more real life examples from the experience of the survey participants. These data points will facilitate insights on the state of practice and allow us to improve the description of a systematic guidance. Both makes incorporating sustainability easier to apply for requirements engineers.", "num_citations": "1\n", "authors": ["334"]}
{"title": "Quality Technique: Prototyping\n", "abstract": " Prototyping is a technique already known since several years for example in production industry. During software development it is also possible to develop prototypes to evaluate or identify possible solutions. Complete prototype based software development models exist. In this article we present the prototyping technique. We discuss the various different types of prototypes. We show that prototypes can be used to prevent defects and also to make use of software metrics early in development. Connections to quality systems are presented as well. At the end we discuss project we participated in and how they could have been improved applying different prototyping techniques.", "num_citations": "1\n", "authors": ["334"]}