{"title": "Predicting defect-prone software modules using support vector machines\n", "abstract": " Effective prediction of defect-prone software modules can enable software developers to focus quality assurance activities and allocate effort and resources more efficiently. Support vector machines (SVM) have been successfully applied for solving both classification and regression problems in many applications. This paper evaluates the capability of SVM in predicting defect-prone software modules and compares its prediction performance against eight statistical and machine learning models in the context of four NASA datasets. The results indicate that the prediction performance of SVM is generally better than, or at least, is competitive against the compared models.", "num_citations": "564\n", "authors": ["86"]}
{"title": "Improved estimation of software project effort using multiple additive regression trees\n", "abstract": " Accurate estimation of software project effort is crucial for successful management and control of a software project. Recently, multiple additive regression trees (MART) has been proposed as a novel advance in data mining that extends and improves the classification and regression trees (CART) model using stochastic gradient boosting. This paper empirically evaluates the potential of MART as a novel software effort estimation model when compared with recently published models, in terms of accuracy. The comparison is based on a well-known and respected NASA software project dataset. The results indicate that improved estimation accuracy of software project effort has been achieved using MART when compared with linear regression, radial basis function neural networks, and support vector regression models.", "num_citations": "102\n", "authors": ["86"]}
{"title": "Application of treenet in predicting object-oriented software maintainability: A comparative study\n", "abstract": " There is an increasing interest in more accurate prediction of software maintainability in order to better manage and control software maintenance. Recently, TreeNet has been proposed as a novel advance in data mining that extends and improves the CART (classification and regression trees) model using stochastic gradient boosting. This paper empirically investigates whether the TreeNet model yields improved prediction accuracy over the recently published object-oriented software maintainability prediction models: multivariate adaptive regression splines, multivariate linear regression, support vector regression, artificial neural network, and regression tree. The results indicate that improved, or at least competitive, prediction accuracy has been achieved when applying the TreeNet model.", "num_citations": "98\n", "authors": ["86"]}
{"title": "A suite of metrics for quantifying historical changes to predict future change\u2010prone classes in object\u2010oriented software\n", "abstract": " Software systems are subject to series of changes during their evolution as they move from one release to the next. The change histories of software systems hold useful information that describes how artifacts evolved. Evolution\u2010based metrics, which are the means to quantify the change history, are potentially good indicators of the changes in a software system. The objective of this paper is to derive and validate (theoretically and empirically) a set of evolution\u2010based metrics as potential indicators of the change\u2010prone classes of an object\u2010oriented system when moving from one release to the next. Release\u2010by\u2010release statistical prediction models were built in different ways. The results indicate that the proposed evolution\u2010based metrics measure different dimensions from those of typical product metrics. Additionally, several evolution\u2010based metrics were found to be correlated with the change\u2010proneness of classes\u00a0\u2026", "num_citations": "55\n", "authors": ["86"]}
{"title": "Investigation of metrics for object-oriented design logical stability\n", "abstract": " As changes are made to an object-oriented design, its structure and/or behavior may be affected. Modifications made to one class can have ripple effects on other classes in the design. The stability of an object-oriented design indicates its resistance to interclass propagation of changes that the design would have when it is modified There are two aspects of design stability: logical stability and performance stability. Logical stability is concerned with design structure, whereas performance stability is concerned with design behavior. In this study, the object-oriented design metrics proposed by Chidamber and Kemerer (1994) were adopted as candidate indicators of the logical stability of object-oriented designs. The objective was to investigate whether or not there are correlations between these metrics and the logical stability of classes. The experimental results indicated that WMC, DIT CBO, RFC, and LCOM metrics\u00a0\u2026", "num_citations": "53\n", "authors": ["86"]}
{"title": "Three empirical studies on predicting software maintainability using ensemble methods\n", "abstract": " More accurate prediction of software maintenance effort contributes to better management and control of software maintenance. Several research studies have recently investigated the use of computational intelligence models for software maintainability prediction. The performance of these models, however, may vary from dataset to dataset. Consequently, ensemble methods have become increasingly popular as they take advantage of the capabilities of their constituent computational intelligence models toward a dataset to come up with more accurate or at least competitive prediction accuracy compared to individual models. This paper investigates and empirically evaluates different homogenous and heterogeneous ensemble methods in predicting software maintenance effort and change proneness. Three major empirical studies were designed and conducted taken into consideration different design\u00a0\u2026", "num_citations": "51\n", "authors": ["86"]}
{"title": "Empirical comparison of three metrics suites for fault prediction in packages of object-oriented systems: A case study of eclipse\n", "abstract": " Packages are important high-level organizational units for large object-oriented systems. Package-level metrics characterize the attributes of packages such as size, complexity, and coupling. There is a need for empirical evidence to support the collection of these metrics and using them as early indicators of some important external software quality attributes. In this paper, three suites of package-level metrics (Martin, MOOD and CK) are evaluated and compared empirically in predicting the number of pre-release faults and the number of post-release faults in packages. Eclipse, one of the largest open source systems, is used as a case study. The results indicate that the prediction models that are based on Martin suite are more accurate than those that are based on MOOD and CK suites across releases of Eclipse.", "num_citations": "50\n", "authors": ["86"]}
{"title": "A comparative literature survey of design patterns impact on software quality\n", "abstract": " Many different factors influence the quality of software systems. One factor is the use of design patterns. In this paper we survey the literature for the existing empirical evidence on the impact of the GoF design patterns on software quality attributes. There are two objectives of conducting this survey. The first objective is to evaluate the coverage of the empirical evidence in terms of quality attributes and in terms of design patterns. The second objective is to provide a summary of the impact of design patterns on software quality attributes. The results show that the impact of design patterns have been investigated only on four quality attributes and there is no consensus on the impact of design patterns on them. Furthermore, the results show that not all the GoF design patterns were covered in the literature.", "num_citations": "43\n", "authors": ["86"]}
{"title": "Empirical study of homogeneous and heterogeneous ensemble models for software development effort estimation\n", "abstract": " Accurate estimation of software development effort is essential for effective management and control of software development projects. Many software effort estimation methods have been proposed in the literature including computational intelligence models. However, none of the existing models proved to be suitable under all circumstances; that is, their performance varies from one dataset to another. The goal of an ensemble model is to manage each of its individual models\u2019 strengths and weaknesses automatically, leading to the best possible decision being taken overall. In this paper, we have developed different homogeneous and heterogeneous ensembles of optimized hybrid computational intelligence models for software development effort estimation. Different linear and nonlinear combiners have been used to combine the base hybrid learners. We have conducted an empirical study to evaluate and compare the performance of these ensembles using five popular datasets. The results confirm that individual models are not reliable as their performance is inconsistent and unstable across different datasets. Although none of the ensemble models was consistently the best, many of them were frequently among the best models for each dataset. The homogeneous ensemble of support vector regression (SVR), with the nonlinear combiner adaptive neurofuzzy inference systems-subtractive clustering (ANFIS-SC), was the best model when considering the average rank of each model across the five datasets.", "num_citations": "41\n", "authors": ["86"]}
{"title": "An empirical study of bagging and boosting ensembles for identifying faulty classes in object-oriented software\n", "abstract": " Identifying faulty classes in object-oriented software is one of the important software quality assurance activities. This paper empirically investigates the application of two popular ensemble techniques (bagging and boosting) in identifying faulty classes in object-oriented software, and evaluates the extent to which these ensemble techniques offer an increase in classification accuracy over single classifiers. As base classifiers, we used multilayer perceptron, radial basis function network, Bayesian belief network, nave Bayes, support vector machines, and decision tree. The experiment was based on well-known and respected NASA dataset. The results indicate that bagging and boosting yield improved classification accuracy over most of the investigated single classifiers. In some cases, bagging outperforms boosting, while in some other cases, boosting outperforms bagging. However, in case of support vector\u00a0\u2026", "num_citations": "39\n", "authors": ["86"]}
{"title": "A comparative study of fault density prediction in aspect-oriented systems using MLP, RBF, KNN, RT, DENFIS and SVR models\n", "abstract": " This paper investigates and empirically evaluates and compares six popular computational intelligence models in the context of fault density prediction in aspect-oriented systems. These models are multi-layer perceptron (MLP), radial basis function (RBF), k-nearest neighbor (KNN), regression tree (RT), dynamic evolving neuro-fuzzy inference system (DENFIS), and support vector regression (SVR). The models were trained and tested, using leave-one-out procedure, on a dataset that consists of twelve aspect-level metrics (explanatory variables) that measure different structural properties of an aspect. It was observed that the DENFIS, SVR, and RT models were more accurate in predicting fault density compared to the MLP, RBF, and KNN models. The MLP model was the worst model, and all the other models were significantly better than it.", "num_citations": "32\n", "authors": ["86"]}
{"title": "Exploring the relationships between design metrics and package understandability: A case study\n", "abstract": " In object-oriented designs, packages represent important high-level organization units that group classes. This paper explores the relationships between five package-level metrics and the average effort required to understand a package in object-oriented design. These metrics measure different structural properties of a package such as size, coupling and stability. A case study was conducted using eighteen packages taken from two open source software systems. Correlation, collinearity, and multivariate regression analyses were performed. The results obtained from this study indicate statistically significant correlation between most of the metrics and understandability of a package.", "num_citations": "28\n", "authors": ["86"]}
{"title": "Assessment of voting ensemble for estimating software development effort\n", "abstract": " This paper reports and discusses the results of an assessment study, which aimed to determine the extent to which the voting ensemble model offers reliable and improved estimation accuracy over five individual models (MLP, RBF, RT, KNN and SVR) in estimating software development effort. Five datasets were used for this purpose. The results confirm that individual models are not reliable as their performance is inconsistence and unstable across different datasets. However, the ensemble model provides more reliable performance than individual models. In three out of the five datasets that were used in this study, the ensemble model outperformed the individual models. In the other two datasets, the ensemble model achieved the second best performance, which was still very competitive as there was no statistically significant difference between it and the best models in these two datasets.", "num_citations": "21\n", "authors": ["86"]}
{"title": "Indicators of structural stability of object-oriented designs: A case study\n", "abstract": " The structural stability of an object-oriented design (OOD) refers to the extent to which the structure of the design is preserved throughout the evolution of the software from one release to the next. This paper empirically investigates potential indicators of measures of structural stability of OODs. Both product-related and process-related indicators are considered. These indicators were evaluated through a case study that involves 13 successive releases of Apache Ant. The results showed that each one of the stability metrics is significantly correlated with at least one of the investigated indicators. To make early predictions of the values of each one of the stability metrics, statistically significant regression models were constructed from subsets of the investigated indicators", "num_citations": "18\n", "authors": ["86"]}
{"title": "Quantitative analysis of fault density in design patterns: An empirical study\n", "abstract": " ContextThere are many claimed advantages for the use of design patterns and their impact on software quality. However, there is no enough empirical evidence that supports these claimed benefits and some studies have found contrary results.ObjectiveThis empirical study aims to quantitatively measure and compare the fault density of motifs of design patterns in object-oriented systems at different levels: design level, category level, motif level, and role level.MethodAn empirical study was conducted that involved five open-source software systems. Data were analyzed using appropriate statistical test of significance differences.ResultsThere is no consistent difference in fault density between classes that participate in design motifs and non-participant classes. However, classes that participate in structural design motifs tend to be less fault-dense. For creational design motifs, it was found that there is no clear\u00a0\u2026", "num_citations": "16\n", "authors": ["86"]}
{"title": "An ensemble of computational intelligence models for software maintenance effort prediction\n", "abstract": " More accurate prediction of software maintenance effort contributes to better management and control of software maintenance. Several research studies have recently investigated the use of computational intelligence models for software maintainability prediction. The performance of these models however may vary from dataset to dataset. Consequently, computational intelligence ensemble techniques have become increasingly popular as they take advantage of the capabilities of their constituent models toward a dataset to come up with more accurate or at least competitive prediction accuracy compared to individual models. This paper proposes and empirically evaluates an ensemble of computational intelligence models for predicting software maintenance effort. The results confirm that the proposed ensemble technique provides more accurate prediction compared to individual models, and thus it is\u00a0\u2026", "num_citations": "15\n", "authors": ["86"]}
{"title": "Do structural design patterns promote design stability?\n", "abstract": " Stability is one of the most desirable quality attributes of any software design. The stability of a class diagram indicates its resistance to interclass propagation of changes that the diagram would have when it is modified. This short paper discusses with examples the impact of four structural design patterns (adapter, bridge, composite and facade) on the stability of class diagrams", "num_citations": "14\n", "authors": ["86"]}
{"title": "Design structural stability metrics and post-release defect density: An empirical study\n", "abstract": " This paper empirically explores the correlations between a suite of structural stability metrics for object-oriented designs and post-release defect density. The investigated stability metrics measure the extent to which the structure of a design is preserved throughout the evolution of the software from one release to the next. As a case study, thirteen successive releases of Apache Ant were analyzed. The results indicate that some of the stability metrics are significantly correlated with post-release defect density. It was possible to construct statistically significant regression models to estimate post-release defect density from subsets of these metrics. The results reveal the practical significance and usefulness of some of the investigated stability metrics as early indicators of one of the important software quality outcomes, which is post-release defect density.", "num_citations": "8\n", "authors": ["86"]}
{"title": "Is in-depth object-oriented knowledge necessary to develop quality robustness diagrams?\n", "abstract": " PURPOSE: Robustness analysis is a technique that can be performed to help ensure the correctness, completeness and consistency of use case and domain models. Robustness analysis also helps bridge the gap between the analysis and design phases by providing a guided approach to identify a first-guess set of objects that will realize scenarios described in use cases. It is necessary to perform robustness analysis in the early phases of the development lifecycle in order to reap its benefits. In particular, robustness analysis needs to be performed by business analysts during the requirements phase to improve the quality of their models as well as help provide a seamless transition to the design phase. However, a core skill that is required to develop robustness diagrams is knowledge of OO concepts which business analysts normally do not have. To overcome this limitation, business analysts acquire brief knowledge of OO concepts via a small learning curve in order to develop and reap the benefits of creating robustness diagrams. However, is this brief knowledge of OO concepts attained through a small learning curve enough to allow business analysts to develop quality robustness diagrams?DESIGN: In this paper we present a controlled studentbased experiment to empirically evaluate the requirement of in-depth OO knowledge to produce quality robustness diagrams.FINDINGS: The results show that business analysts can indeed produce quality robustness diagrams without indepth OO knowledge.ORIGINALITY: The results of this experiment will aid in embracing the technique of robustness analysis amongst business analysts in order\u00a0\u2026", "num_citations": "6\n", "authors": ["86"]}
{"title": "Effectiveness of Coupling Metrics in Identifying Change-Prone Object-Oriented Classes\n", "abstract": " This paper empirically evaluate the effectiveness of a set of coupling metrics, identified in a literature survey, as early indicators of change-prone classes from one release to the next in object-oriented software evolution process. Several hypotheses were tested, and different logistic regression models were constructed for predicting change-prone classes. Coupling metrics were found to be statistically correlated with change-proneness of classes. The results also indicate that a prediction model based on coupling metrics is generally more accurate than a model based on cohesion metrics. Furthermore, a prediction model based on import coupling metrics is more accurate than a model based on export coupling metrics. We also found that the coupling metrics in the C&K suite are not necessarily more accurate than other metrics in the suite in identifying change-prone classes in evolving objectoriented software. Moreover, there is no confounding effect of class size in the validity of some of the investigated coupling metrics.", "num_citations": "5\n", "authors": ["86"]}
{"title": "A case study on structural characteristics of object-oriented design and its stability\n", "abstract": " Design structural stability refers to the extent to which the structure of a design is preserved throughout the evolution of the software from one release to the next. This paper investigates whether there are some structural characteristics (metrics) of object-oriented design that are indicators of its structural stability. Investigated metrics are related to size, inheritance, cohesion, and coupling. Design structural stability was assessed from each software release to the next using two metrics: a classbased metric and a relationship-based metric. As a case study, measures were collected from 13 successive releases of Apache Ant.", "num_citations": "4\n", "authors": ["86"]}
{"title": "Measuring inheritance coupling in object-oriented systems\n", "abstract": " The increasing importance being placed on software quality has led to a large number of new measures being proposed for quality design principles such as coupling. Given the importance of object-oriented development techniques, object-oriented metrics are needed to measure different aspects in object-oriented systems. Measuring class coupling is one way to evaluate the quality of such systems. In object-oriented design, three types of coupling may exist between classes: inheritance coupling, interaction coupling, and component coupling. Object-oriented metrics as other metrics need to be collected, stored, analyzed, and validated by suitable tools. However, there is lack of tools and thus developing tools to support these requirements is mandatory.", "num_citations": "4\n", "authors": ["86"]}
{"title": "Enhanced prediction of vulnerable Web components using Stochastic Gradient Boosting Trees\n", "abstract": " PurposeEffective and efficient software security inspection is crucial as the existence of vulnerabilities represents severe risks to software users. The purpose of this paper is to empirically evaluate the potential application of Stochastic Gradient Boosting Trees (SGBT) as a novel model for enhanced prediction of vulnerable Web components compared to common, popular and recent machine learning models.Design/methodology/approachAn empirical study was conducted where the SGBT and 16 other prediction models have been trained, optimized and cross validated using vulnerability data sets from multiple versions of two open-source Web applications written in PHP. The prediction performance of these models have been evaluated and compared based on accuracy, precision, recall and F-measure.FindingsThe results indicate that the SGBT models offer improved prediction over the other 16 models and\u00a0\u2026", "num_citations": "3\n", "authors": ["86"]}
{"title": "Abductive network ensembles for improved prediction of future change-prone classes in object-oriented software.\n", "abstract": " Software systems are subject to a series of changes due to a variety of maintenance goals. Some parts of the software system are more prone to changes than others. These change-prone parts need to be identified so that maintenance resources can be allocated effectively. This paper proposes the use of Group Method of Data Handling (GMDH)-based abductive networks for modeling and predicting change proneness of classes in object-oriented software using both software structural properties (quantified by the C&K metrics) and software change history (quantified by a set of evolution-based metrics) as predictors. The empirical results derived from an experiment conducted on a case study of an open-source system show that the proposed approach improves the prediction accuracy as compared to statistical-based prediction models.", "num_citations": "3\n", "authors": ["86"]}
{"title": "Fault density analysis of object-oriented classes in presence of code clones\n", "abstract": " Code cloning has been a typical practice during software development, by which code fragments are reused with or without changes by copying and pasting. It has been a questionable issue whether cloning has a destructive impact or not on software development and the quality of the delivered software. This paper empirically investigates the relationship between code clones and fault density of object-oriented classes. More than 3000 classes from five open source software systems were analyzed. The results suggest that classes that have clones were less fault dense on average than the classes that do not have clones. However, there was no association between intra/inter-class clone fragments within a class and its fault density. The results also indicate that among the groups of classes that have only one type of clones, the group of classes with Type III clones was the least fault dense. Minor, although\u00a0\u2026", "num_citations": "3\n", "authors": ["86"]}
{"title": "Evaluating collaborative software in supporting organizational learning with Bayesian Networks\n", "abstract": " Many collaborative software tools have been developed in the recent years to accelerate the growing interest of many organizations to become learning organizations. Selecting a collaborative tool that best suits an organization's needs is a challenging task, given that there are no evaluation criteria against which these tools could be evaluated with respect to various organizational learning concepts. The objective of this paper is twofold. First, it derives a generic set of criteria required to evaluate the suitability of a given collaborative tool in supporting the mental model concept of organizational learning. Second, it investigates the possibility of using Bayesian Networks as an evaluation methodology to rate the suitability of a given collaborative tool with respect to how well it meets the derived evaluation criteria.", "num_citations": "2\n", "authors": ["86"]}
{"title": "Empirical assessment of design patterns' fault-proneness at different granularity levels\n", "abstract": " There are several claimed benefits for the impact of design patterns (DPs) on software quality. However, the association between design patterns and fault-proneness has been a controversial issue. In this work, we evaluate the fault-proneness of design patterns at four levels: the design level, category level, pattern level, and role level. We used five subject systems in our empirical study. As a result, we found that, at the design level, the classes that participate in the design patterns are less fault-prone than the nonparticipant classes. At the category level, we found that the classes that participate in the behavioral and structural categories are less fault-prone than the non-participant classes. In addition, we found that the classes that participate in the structural design patterns are less fault-prone than the classes that participate in the other categories. At the pattern level, we found that only five patterns show significant associations with fault-proneness: builder, factory method, adapter, composite, and decorator. All of these patterns except for builder show that the classes that participate in each one of them are less fault-prone than the non-participant classes in that pattern. The classes that participate in the builder design pattern were more fault-prone than the non-participant classes and the classes that participate in several patterns: the adapter, the composite, and the decorator design patterns. At the role level, the most significant differences were between the classes that participate in some roles and the non-participant classes. Only three pairs of design pattern roles show significant differences. These roles are concrete-product vs. concrete\u00a0\u2026", "num_citations": "1\n", "authors": ["86"]}
{"title": "On the association between code cloning and fault-proneness: An empirical investigation\n", "abstract": " During software development projects, the reuse of code fragments with or without modification by copying and pasting is a common practice, which is known as code clones. It has been an arguable issue whether cloning has a harmful impact or not on software development and the quality of the produced software. This paper empirically explores the association between code clones and fault-proneness of object-oriented classes. An empirical investigation was conducted using data from more than 3000 classes in five open source software projects. It was found that classes with clones are significantly more fault-prone than the classes without clones. In addition, the classes with intra-class clones, regardless of whether they also have inter-class clones or not, were found to be significantly more fault-prone than the classes with inter-class clones only. Moreover, among the groups of classes that have only one type\u00a0\u2026", "num_citations": "1\n", "authors": ["86"]}
{"title": "Association between JPL Coding Standard Violations and Software Faults: An Exploratory Study\n", "abstract": " Since the software community has realised the importance of adopting coding standards during the development process for improved software quality, many coding standards have been proposed and used during the software development. The main objective of this paper is to explore the association between Java Programming Language (JPL) coding standard and fault density of classes in object-oriented software. For this purpose, a set of metrics that quantify the violations of coding standards has been proposed. An exploratory study was then conducted in which data were collected from six open source software systems. The study involved principal component analysis, bivariate correlation analysis, and univariate regression analysis. The principle component analysis has shown that many of the proposed metrics fall into the first two components which in turn reflects the importance and diversity of these metrics. Furthermore, associations between some metrics and fault density have been observed across all systems, and thus indicate that these metrics can be useful predictors for improved early estimation of faulty density of object-oriented classes.", "num_citations": "1\n", "authors": ["86"]}
{"title": "An exploratory study of package metrics as change size indicators in evolving object-oriented software\n", "abstract": " Software change size prediction can be very useful and helpful in guiding the maintenance team; distributing the resources more efficiently; and, thus, enabling project managers and their teams to focus their effort and attention on the highly unstable artifacts during the software evolution process. This paper empirically explores a set of package-level metrics as change size indicators in evolving object-oriented software. Both structural properties (SP) metrics and historical changes (HC) metrics were explored. Metrics were collected and evaluated in the context of seven major releases of Apache Ant. The results indicate that there are statistically significant correlations between each of the HC metrics and packages\u2019 change size in multiple, sequential releases of Apache Ant. In addition, it was observed that the HC metrics are more accurate than the SP metrics in predicting change size in packages throughout the releases. Furthermore, there was no confounding effect of package size in the validity of some of the metrics.", "num_citations": "1\n", "authors": ["86"]}
{"title": "Design requirements in software and engineering systems\n", "abstract": " The subject of\" Design Requirements\"(DR) is central to the design of software and engineering systems. The main reason for this is that quality aspects are usually closely tied to requirements, among other things. In this review paper, we consider how the subject of requirements is being managed in these two seemingly different design disciplines. Two important aspects are covered, namely:(a) requirements development, describing various activities leading to requirements documentation, and (b) requirements change management, describing various activities needed for the proper treatment of the inevitable changes in requirements. Similarities and differences on how these two aspects are handled in software and engineering systems are highlighted. It is concluded from this literature survey that the management of software requirements is quite coherent and well established as a science. On the other hand, management of engineering systems requirements suffer from being unstructured, in particular when requirements changes are involved. Important gaps and future important research areas are identified.", "num_citations": "1\n", "authors": ["86"]}
{"title": "A systematic review on the relationships between ck metrics and external software quality attributes\n", "abstract": " The Chidamber and Kemerer (CK) metrics suite is one of the most popular and highly cited suites for measuring Object-Oriented (OO) designs. A great amount of empirical studies have been conducted to evaluate these metrics as indicators of external software quality attributes (ESQAs). However, there has been no attempt to systematically review and report these empirical evidences. To identify the relation of CK metrics with ESQAs, we have performed a systematic review of empirical evidences published in the literature that support or reject CK metrics as indicators of ESQAs. Our search strategy identified 413 papers, out of which 31 papers were identified as reporting empirical evidence showing relation between CK metrics and ESQAs. Our results conclude that WMC, CBO, RFC and LCOM are good indicators of functional correctness. Inheritance metrics, DIT and NOC are not useful indicators of functional correctness. Overall, the CK metrics are good indicators of maintainability. WMC, CBO, RFC and LCOM are useful indicators of testability, whereas DIT is not useful.", "num_citations": "1\n", "authors": ["86"]}
{"title": "Structural stability-based metrics of object-oriented design\n", "abstract": " Software often undergoes necessary changes that lead to the distribution of software releases. Each software release will in general include changes of related end-user requirements, developer design and code level entities. In one scenario, end-user requirements only undergo extensions, and it is important that the design solution from earlier releases also undergoes only changes involving extensions so as to preserve the stability of the software. Preservation of such early design solutions may lead to return on investments in design for the earlier releases and less rework and maintenance on earlier design. This scenario is one of several assumed as context for the research reported.", "num_citations": "1\n", "authors": ["86"]}