{"title": "Interactive, evolutionary search in upstream object-oriented class design\n", "abstract": " Although much evidence exists to suggest that early life cycle software engineering design is a difficult task for software engineers to perform, current computational tool support for software engineers is limited. To address this limitation, interactive search-based approaches using evolutionary computation and software agents are investigated in experimental upstream design episodes for two example design domains. Results show that interactive evolutionary search, supported by software agents, appears highly promising. As an open system, search is steered jointly by designer preferences and software agents. Directly traceable to the design problem domain, a mass of useful and interesting class designs is arrived at which may be visualized by the designer with quantitative measures of structural integrity, such as design coupling and class cohesion. The class designs are found to be of equivalent or better\u00a0\u2026", "num_citations": "105\n", "authors": ["807"]}
{"title": "Elegant object-oriented software design via interactive, evolutionary computation\n", "abstract": " Design is fundamental to software development but can be demanding to perform. Thus, to assist the software designer, evolutionary computing is being increasingly applied using machine-based, quantitative fitness functions to evolve software designs. However, in nature, elegance and symmetry play a crucial role in the reproductive fitness of various organisms. In addition, subjective evaluation has also been exploited in interactive evolutionary computation (IEC). Therefore, to investigate the role of elegance and symmetry in software design, four novel elegance measures are proposed which are based on the evenness of distribution of design elements. In controlled experiments in a dynamic IEC environment, designers are presented with visualizations of object-oriented software designs, which they rank according to a subjective assessment of elegance. For three out of the four elegance measures proposed\u00a0\u2026", "num_citations": "63\n", "authors": ["807"]}
{"title": "A systematic review of interaction in search-based software engineering\n", "abstract": " Search-Based Software Engineering (SBSE) has been successfully applied to automate a wide range of software development activities. Nevertheless, in those software engineering problems where human evaluation and preference are crucial, such insights have proved difficult to characterize in search, and solutions might not look natural when that is the expectation. In an attempt to address this, an increasing number of researchers have reported the incorporation of the 'human-in-the-loop' during search and interactive SBSE has attracted significant attention recently. However, reported results are fragmented over different development phases, and a great variety of novel interactive approaches and algorithmic techniques have emerged. To better integrate these results, we have performed a systematic literature review of interactive SBSE. From a total of 669 papers, 26 primary studies were identified. To\u00a0\u2026", "num_citations": "42\n", "authors": ["807"]}
{"title": "Interactive Ant Colony Optimization (iACO) for Early Lifecycle Software Design\n", "abstract": " Finding good designs in the early stages of the software development lifecycle is a demanding multi-objective problem that is crucial to success. Previously, both interactive and non-interactive techniques based on evolutionary algorithms (EAs) have been successfully applied to assist the designer. However, recently ant colony optimization was shown to outperform EAs at optimising quantitative measures of software designs with a limited computational budget. In this paper, we propose a novel interactive ACO (iACO) approach, in which the search is steered jointly by an adaptive model that combines subjective and objective measures. Results show that iACO is speedy, responsive and effective in enabling interactive, dynamic multi-objective search. Indeed, study participants rate the iACO search experience as compelling. Moreover, inspection of the learned model facilitates understanding of factors\u00a0\u2026", "num_citations": "38\n", "authors": ["807"]}
{"title": "A cross-disciplinary technology transfer for search-based evolutionary computing: from engineering design to software engineering design\n", "abstract": " Although object-oriented conceptual software design is difficult to learn and perform, computational tool support for the conceptual software designer is limited. In conceptual engineering design, however, computational tools exploiting interactive evolutionary computation (EC) have shown significant utility. This article investigates the cross-disciplinary technology transfer of search-based EC from engineering design to software engineering design in an attempt to provide support for the conceptual software designer. Firstly, genetic operators inspired by genetic algorithms (GAs) and evolutionary programming are evaluated for their effectiveness against a conceptual software design representation using structural cohesion as an objective fitness function. Building on this evaluation, a multi-objective GA inspired by a non-dominated Pareto sorting approach is investigated for an industrial-scale conceptual design\u00a0\u2026", "num_citations": "35\n", "authors": ["807"]}
{"title": "Single and multi-objective genetic operators in object-oriented conceptual software design\n", "abstract": " This poster paper investigates the potential of single and multi-objective genetic operators with an object-oriented conceptual design space. Using cohesion as an objective fitness function, genetic operators inspired by genetic algorithms and evolutionary programming are compared against a simple case study. Also, using both cohesion and coupling as objective fitness functions, multi-objective genetic operators inspired by a non-dominated sorting algorithm have been developed. Cohesion and coupling values achieved are similar to human performed designs and a large number and variety of optimal solutions are arrived at, which could not have been produced by the human software engineer. We conclude that this mass of optimal design variants offers significant potential for design support when integrated with user-centric, computationally intelligent tools.", "num_citations": "30\n", "authors": ["807"]}
{"title": "User-centered, evolutionary search in conceptual software design\n", "abstract": " Although much evidence exists to suggest that conceptual software engineering design is a difficult task for software engineers to perform, current computationally intelligent tool support for software engineers is limited. While search-based approaches involving module clustering and refactoring have been proposed and show promise, such approaches are downstream in terms of the software development lifecycle - the designer must manually produce a design before search-based clustering and refactoring can take place. Interactive, user-centered search-based approaches, on the other hand, support the designer at the beginning of, and during, conceptual software design, and are investigated in this paper by means of a case study. Results show that interactive evolutionary search, supported by software agents, appears highly promising. As an open system, search is steered jointly by designer preferences\u00a0\u2026", "num_citations": "25\n", "authors": ["807"]}
{"title": "35 years on: to what extent has software engineering design achieved its goals?\n", "abstract": " The term \u2018software engineering\u2019 was coined in 1968 to introduce the disciplines of established branches of engineering design to software manufacture. Some 35 years on, this paper attempts to gauge the success of software engineering against its original goals, with particular respect to the adoption of an industrial design process. The design issues raised in the 1968 NATO conference are examined and then modern examples of engineering design and software engineering are compared. While many aspects of design are found to be similar between the two, significant dissimilarities are also evident. Knowledge of such similarities and dissimilarities may offer opportunities for software engineering to learn lessons from engineering design, for example in the generation and evaluation of solution variants. Field studies are reviewed for empirical evidence of the success or failure of software engineering; results\u00a0\u2026", "num_citations": "21\n", "authors": ["807"]}
{"title": "Interactive evolutionary computing in early lifecycle software engineering design\n", "abstract": " Design is fundamental to software development. Indeed, early lifecycle software engineering design is crucial and has significant impact of subsequent development activities. Inferior designs can result in deleterious down-stream consequences. Therefore improving the traceability, structural integrity and elegance of software design has significant potential for enhancing software development productivity. However, early lifecycle software design is a demanding and non-trivial task for software engineers to perform and current computational tool support for software engineers is limited. Thus to address this limitation, this thesis investigates the potential of interactive evolutionary search and complementary computational intelligence to enable the exploration and discovery of useful and interesting software designs relating to the design problem at hand. To enable evolutionary search and exploration of possible design solutions, a novel, discrete, object-based representation of both design problem and design solution is proposed. Associated genetic operators including self-adapting mutation are also proposed. Experiments show that this novel representation enables highly effective search and exploration of the software design solution space. Next, software agents are introduced to facilitate an interactive framework for natural collaborative designer / computer interaction. Empirical investigations reveal that colourful visualisation of software designs engages the designer. Furthermore, with enhanced generation of multiple candidate designs, opportunities for periods of designer reflection are presented thus enabling sudden design discovery\u00a0\u2026", "num_citations": "15\n", "authors": ["807"]}
{"title": "Metaheuristic design patterns: new perspectives for larger-scale search architectures\n", "abstract": " Design patterns capture the essentials of recurring best practice in an abstract form. Their merits are well established in domains as diverse as architecture and software development. They offer significant benefits, not least a common conceptual vocabulary for designers, enabling greater communication of high-level concerns and increased software reuse. Inspired by the success of software design patterns, this chapter seeks to promote the merits of a pattern-based method to the development of metaheuristic search software components. To achieve this, a catalog of patterns is presented, organized into the families of structural, behavioral, methodological and component-based patterns. As an alternative to the increasing specialization associated with individual metaheuristic search components, the authors encourage computer scientists to embrace the \u2018cross cutting'benefits of a pattern-based perspective to\u00a0\u2026", "num_citations": "14\n", "authors": ["807"]}
{"title": "A comparison of meta-heuristic search for interactive software design\n", "abstract": " Advances in processing capacity, coupled with the desire to tackle problems where a human subjective judgment plays an important role in determining the value of a proposed solution, has led to a dramatic rise in the number of applications of Interactive Artificial Intelligence. Of particular note is the coupling of meta-heuristic search engines with user-provided evaluation and rating of solutions, usually in the form of Interactive Evolutionary Algorithms (IEAs). These have a well-documented history of successes, but arguably the preponderance of IEAs stems from this history, rather than as a conscious design choice of meta-heuristic based on the characteristics of the problem at hand. This paper sets out to examine the basis for that assumption, taking as a case study the domain of interactive software design. We consider a range of factors that should affect the design choice including ease of use, scalability\u00a0\u2026", "num_citations": "13\n", "authors": ["807"]}
{"title": "Metaheuristic design pattern: Preference\n", "abstract": " In interactive metaheuristic search, the human helps to steer the trajectory of the search by providing qualitative evaluation to assist in the selection of solution individuals. It can be challenging to design mechanisms to exploit human qualitative evaluation taking into account human trade-off judgments among competing criteria and implicit knowledge and experience. This paper addresses this challenge by proposing the Preference metaheuristic design pattern involving six abstractions across two dimensions: explicit and implicit knowledge and a priori, interactive and a posteriori timings.", "num_citations": "12\n", "authors": ["807"]}
{"title": "Metaheuristic design pattern: Interactive solution presentation\n", "abstract": " In interactive metaheuristic search, the human helps to steer the trajectory of search by providing qualitative evaluations of solution individuals in the population. Given that much metaheuristic search is typically population-based, it is challenging to design the presentation of solutions such that the human can provide effective qualitative evaluation [1]. Naively presenting each individual in a large population at each generation causes evaluation fatigue and a subsequent non-linearity of user focus making search trajectory inconsistent and ineffective [2].Interactive search relies either on solely user-provided qualitative evaluation or a combination of user qualitative evaluation and machine-based quantitative fitness measures. User qualitative evaluation is often \u201cmulti-subjective\u201d in that many fitness concerns are simultaneously evaluated [3]. Some evaluative concerns may be explicitly articulated by the user, although\u00a0\u2026", "num_citations": "12\n", "authors": ["807"]}
{"title": "Dynamic parameter control of interactive local search in UML software design\n", "abstract": " User-centered Interactive Evolutionary Computation (IEC) has been applied to a wide variety of areas, including UML software design. The performance of evolutionary search is important as user interaction fatigue remains an on-going challenge in IEC. However, to obtain optimal search performance, it is usually necessary to \u201ctune\u201d evolutionary control parameters manually, although tuning control parameters can be time-consuming and error-prone. To address this issue in other fields of evolutionary computation, dynamic parameter control including deterministic, adaptive and self-adaptive mechanisms have been applied extensively to real-valued representations. This paper postulates that dynamic parameter control may be highly beneficial to IEC in general, and UML software design in particular, wherein a novel object-based solution representation is used. Three software design problems from differing\u00a0\u2026", "num_citations": "11\n", "authors": ["807"]}
{"title": "An empirical investigation of search-based computational support for conceptual software engineering design\n", "abstract": " Conceptual software engineering design is an intensely people-oriented and non-trivial activity, yet current computational tool support is limited. While a number of search-based software engineering approaches to support software design have been reported, few empirical studies into their application have been described. This paper reports the findings of an observational study of conceptual design episodes in a UK higher education problem domain. When compared with a manual design episode, a design episode enabled by a user-interactive, search-based, evolutionary computation tool generates a large number of useful and interesting candidate designs, and provides enhanced qualitative and quantitative evaluation. It is also found that tool-supported visualization of UML class designs offers opportunities for sudden design discovery, and that designers respond positively to opportunities to explore and\u00a0\u2026", "num_citations": "11\n", "authors": ["807"]}
{"title": "A comparison of two memetic algorithms for software class modelling\n", "abstract": " Recent research has demonstrated that the problem of class modelling within early cycle object orientated software engineering can be successfully tackled by posing it as a search problem to be tackled with meta-heuristics. This\" Search Based Software Engineering\" approach has been illustrated using both Evolutionary Algorithms and Ant Colony Optimisation to perform the underlying search. Each has been shown to display strengths and weaknesses-both in terms of how easily\" standard\" algorithms can be applied to the domain, and of optimisation performance. This paper extends that work by considering the effect of incorporating Local Search. Specifically we examine the hypothesis that within a memetic framework the choice of global search heuristic does not significantly affect search performance, freeing the decision to be made on other more subjective factors.", "num_citations": "10\n", "authors": ["807"]}
{"title": "Agent-based support for interactive search in conceptual software engineering design\n", "abstract": " While recent attempts to search a conceptual software engineering design search space with multi-objective evolutionary algorithms have yielded promising results, the practical application of such search-based techniques remains to be addressed. This paper reports initial findings of the application of software agents in support of an interactive, user-centered conceptual software design scenario. The supporting role of a number of single responsibility agents is described and results for a case study indicate that the application of such agents to search-based design scenarios provides efficient, high performance and effective support. The notion of interactive, joint human-computer activity appears to map well to conceptual software design scenarios: focus on superior design concepts and thence to useful and interesting designs provides a natural and effective way of narrowing the population based search. In\u00a0\u2026", "num_citations": "8\n", "authors": ["807"]}
{"title": "Exploiting antipheromone in ant colony optimisation for interactive search-based software design and refactoring\n", "abstract": " Preventing user-fatigue in interactive meta-heuristic search places as great an emphasis on efficiency as it does on effectiveness. Engagement may also be boosted if the system provides a sense of\" responsiveness\"-for example, avoiding unpopular solutions as well as exploiting preferred ones. In this paper we explore one possible way of achieving these goals using the concept of\" anti-pheromones\" in different forms of Ant Colony Optimisation. Taking search-based software design and refactoring as a case study, we use extensive offline experiments to investigate differences of timescale and method for applying anti-pheromones. Results confirm our predictions that most combinations are in fact counter-productive. However, applying high levels of anti-pheromone, only in the initial stages of a run, can rapidly steer the search away from unproductive regions, reducing the number of evaluations required by up to\u00a0\u2026", "num_citations": "7\n", "authors": ["807"]}
{"title": "A comparison of evolutionary algorithms and ant colony optimization for interactive software design\n", "abstract": " Evolutionary algorithms have a well-documented history of success in Search-Based Software Engineering, but arguably the preponderance of evolutionary algorithms stems from history rather than as a conscious design choice of meta-heuristic based on the characteristics of the problem at hand. This paper sets out to examine the basis for that assumption, taking as a case study the domain of object-oriented software design. We consider a range of factors that should affect the design choice including representation, scalability, and of course, performance, ie that ability to generate good solutions within the limited number of evaluations. We then evaluate Evolutionary Algorithms and Ant Colony Optimization with a variety of representations for candidate solutions. Results show that after suitable parameter tuning, Ant Colony Optimization is highly effective and out-performs Evolutionary Algorithms with respect to increasing numbers of attributes and methods in the software design problem. However, when larger numbers of classes are present in the software design, an evolutionary algorithm using an integer-based representation appears more scalable.", "num_citations": "7\n", "authors": ["807"]}
{"title": "The influence of search components and problem characteristics in early life cycle class modelling\n", "abstract": " This paper examines the factors affecting the quality of solution found by meta-heuristic search when optimising object-oriented software class models. From the algorithmic perspective, we examine the effect of encoding, choice of components such as the global search heuristic, and various means of incorporating problem- and instance-specific information. We also consider the effect of problem characteristics on the (estimated) cost of the global optimum, and the quality and distribution of local optima. The choice of global search component appears important, and adding problem and instance-specific information is generally beneficial to an evolutionary algorithm but detrimental to ant colony optimisation. The effect of problem characteristics is more complex. Neither scale nor complexity have a significant effect on the global optimum as estimated by the best solution ever found. However, using local search to\u00a0\u2026", "num_citations": "6\n", "authors": ["807"]}
{"title": "Discovery in design: Developing a people-centred computational approach\n", "abstract": " The paper describes activities of the Discovery in Design (DiD): People-centred Computational Issues Cluster established under the UK AHRC/EPSRC 'Design for the 21st Century' initiative. The objective of the Cluster has been to identify primary research aspects concerning development of people-centred computational design environments that engender concept and knowledge discovery across diverse domains. The Cluster has investigated the utility of established and emerging computational intelligence, enabling computational technologies and people-centred issues across diverse design domains relating to widely differing disciplines including engineering, drug design, software engineering, biosensors, material design and virtual product design.", "num_citations": "5\n", "authors": ["807"]}
{"title": "Whither (away) software engineers in SBSE?\n", "abstract": " This challenges and open problems paper discusses the role of software engineers when combining modeling with Search-Based Software Engineering (SBSE). With SBSE techniques increasingly providing insights into difficult software modeling problems, the role of the software engineer might be thought of as diminishing. However, given the crucial role of the model understanding in SBSE, we argue that the role of the software engineer will become more important through interactive SBSE, although exploiting this interaction remains a challenge for the field.", "num_citations": "3\n", "authors": ["807"]}
{"title": "Defining the search space for conceptual software designs\n", "abstract": " Conceptual software designs are widely expressed using notations specified by the Unified Modelling Language (UML)[1]. However, UML notations are inadequate as an effective basis for searchbased approaches for design. The richness and expressiveness of UML notation exist primarily for human comprehension and precision rather than the systematic exploration of the design space. Building upon the fundamentals of UML notation, this technical report defines a representation of the search space for conceptual software designs in a systematic manner that enables search and the quantification of the search space.", "num_citations": "3\n", "authors": ["807"]}
{"title": "Using evolutionary computation to shed light on the effect of scale and complexity on object-oriented software design\n", "abstract": " Early lifecycle software design is an intensely human activity in which design scale and complexity can place a high cognitive load on the software designer. Recently, the use of evolutionary search has been suggested to yield insights in the nature of software engineering problems generally, and so we have applied dynamic evolutionary computation using self-adaptive mutation to the object-oriented software design search space. Using three design problem instances of varying scale and complexity, initial investigations of the discrete search landscape reveal a redundancy in genotype-to-phenotype mapping enabling flexible and effective exploration. In further experiments, mutation probabilities and population diversity are observed to significantly increase in the face of increasing problem scale, but not for increasing complexity (in problems of the same scale). Based on these findings, we conclude that design\u00a0\u2026", "num_citations": "2\n", "authors": ["807"]}
{"title": "A forward look at computational support for conceptual design\n", "abstract": " Future research needs for computational support for conceptual design are examined. The material is the result of the work of a so called design cluster. The cluster has, through a series of workshops, defined what it believes are the salient areas in which further research is needed. The work has a strong people centred approach as it is believed that, for the near future, it is only through a combination of man and machine that acceptable designs will be achieved. The cluster has identified 5 key areas and 39 sub-classes. The discussion focuses on the key areas and how these link to future research requirements in people centred computation for conceptual design.", "num_citations": "2\n", "authors": ["807"]}
{"title": "Looking for novelty in SBSE problems\n", "abstract": " Search-based software engineering (SBSE) was conceived to support engineers searching for innovative ideas to solve recurrent software engineering problems along the software project lifecycle. However, current approaches require the engineer to formulate and quantify their search objectives, which may be challenging. As SBSE consolidates as a discipline, problems become more demanding, and consequently the definition of the search problem and the characteristics of the search space remain oversimplified. Thus the evaluation of problem solutions by means of a fitness function could be failing to address essential aspects that can cause disappointment for the engineer after reaching final results. This position paper launches the idea that novelty search opens up a new scenario, as it rewards solution novelty, a concept mapping to problem characteristics other than fitness and whose definition might be more intuitive to the engineer. We explore its applicability to SBSE and discuss some preliminary findings of interest to the SBSE community.", "num_citations": "1\n", "authors": ["807"]}
{"title": "Beneficial role of humans and AI in a machine learning age of the Telco ecosystem\n", "abstract": " The adoption of new technology in the telecommunications industry raises challenges, particularly when exploiting advances in artificial intelligence (AI)(eg dynamic optimisation and machine learning). Indeed, opinions have been expressed that AI will either replace everyone, gain sentience or not be able to contribute to anything meaningful where human creativity and innovation are required. Nonetheless, the need to exploit recent advances in AI in a dynamic telecommunications ecosystem of Internet of Things (IoT), 5G and rapidly diminishing margins should be unquestionable. In a recent panel of automation in Software Defined Networks (SDN) and Network Function Virtualisation (NFV), the CTO of a large European Operator cited the most significant problem to solve was not the use of AI in automation but rather its introduction alongside human operators. However, recent research in the area of interactive optimisation and machine learning at the University of the West of England, Bristol, UK, has incorporated humans \u201cin-the-loop\u201d with AI and found that superior solutions can be achieved by humans and AI working together rather than separately. To examine these issues, we present relevant case studies from BT Research Laboratories and Aria Networks/Facebook. We analyse the case study evidence and recent advances in AI research to carefully discern the crucial causative factors that underpin the situation. Based on the analysis, we conclude that the case for engineers working collaboratively \u201cin-the-loop\u201d with AI is compelling, and will be of great benefit to telecommunications businesses and the people involved in the areas of\u00a0\u2026", "num_citations": "1\n", "authors": ["807"]}
{"title": "A metaheuristic search framework to derive Cancer Care Services from business process models\n", "abstract": " Cancer Care involves not only handling patients' medical or physical needs but also other services to facilitate patient needs which are underpinned by appropriate software systems that assist in patient care processes. The Service-Oriented Architecture (SOA) model of computing has become widely adopted and can provide efficient and agile business solutions in the face of rapid changes to business requirements. Instead of adopting a more traditional way of building an IT system for Cancer Care by rigidly piecing together a collection of hardware, software and networking, SOA offers the opportunity to build the IT systems in an increasingly flexible and reconfigurable way. However, current service identification methods can suffer from shortcomings such as a lack of computational support, and not being able to address all the necessary activities of the service identification. To address these shortcomings, this\u00a0\u2026", "num_citations": "1\n", "authors": ["807"]}
{"title": "Machine learning with Python\n", "abstract": " Machine Learning with Python Page 1 1 Machine Learning with Python Knowledge Transfer Partnership between University of West of England (UWE) and Paxport by Pedro Ferreira April 28, 2017 Page 2 2 Outline \u25cf Case Study \u25cf Approach \u25cf Implementation \u25cf Results Page 3 3 Case Study \u25cf Bring Artificial Intelligence to Paxport \u2013 Travel industry \u25cf Back-end service for searches and bookings of flights and accommodations \u2013 3 years of stored bookings data \u2013 Improve holiday searches relevance/performance Page 4 4 Case Study \u25cf Challenges \u2013 Scale, millions of daily searches \u2013 Seasonality, preferences change overtime \u2013 No user tracking \u25cf Main Tools \u2013 Framework - Python (3.5.1) with Jupyter (4.0.6) \u2013 Data manipulation - Pandas (0.17.1) \u2013 Machine Learning resources - Scikit learn (0.16.1) \u2013 Supporting - Numpy (1.11), Scipy (0.16.0) Page 5 5 Approach \u25cf Collaborative Filtering \u2013 Data organized in a User, \u2026", "num_citations": "1\n", "authors": ["807"]}
{"title": "The truth is out there: Reflections on search in software engineering\n", "abstract": " In the popular science fiction horror drama TV series \u201cThe X-Files\u201d, two FBI agents (Mulder and Skully) investigate unsolved case files relating to emerging paranormal phenomena and possible alien life. Many explanations and conspiracy theories abound. Although the intrepid investigators struggle to put the disparate pieces together, they believe that \u201cthe truth is out there\u201d. Search-based software engineering has attracted much research attention recently and many theories also abound relating to the application of metaheuristic search techniques to software engineering problems. Some 15 years since the term \u2018search-based software engineering\u2019was suggested, it is perhaps timely to reflect on some of these emerging phenomena in the field of search-based software engineering and examine some of the theories, fallacies and facts in a wider software engineering context. Is there truth out there? This presentation suggests some possible fallacies of search with respect to software engineering, before reviewing some more established facts about the progress of search-based software engineering, 15 years on. The application of search-based software engineering techniques within different phases of the software engineering life cycle is discussed, with a particular emphasis on agile development methodologies. Finally, attempts are made to put the disparate pieces together to speculate on areas of future industrial adoption of searchbased software engineering.", "num_citations": "1\n", "authors": ["807"]}
{"title": "Multi-objective genetic algorithms in object-oriented conceptual software design\n", "abstract": " The conceptual design of object-oriented software is difficult to learn and perform yet has a crucial impact on subsequent downstream software development. In an attempt to support the human designer during conceptual object-oriented software design, a multi-objective genetic algorithm has been developed to search and explore the design space. Two case studies arc investigated using class cohesion and size as multi-objective fitness functions, and the generated solutions arc compared with those from manual designs. While cohesion values arc broadly similar, the genetic algorithm also produces avariety of interesting design variants of equivalent fitness that have not been identified by manual design. These promising results, when combined with favorable performance limes, suggest that the multi-objective genetic algorithms offer potential as the basis of computational tool support for interactive human/machine search and exploration of the conceptual objectoriented design space.", "num_citations": "1\n", "authors": ["807"]}