{"title": "Lifting metamodels to ontologies: A step to the semantic integration of modeling languages\n", "abstract": " The use of different modeling languages in software development makes their integration a must. Most existing integration approaches are metamodel-based with these metamodels representing both an abstract syntax of the corresponding modeling language and also a data structure for storing models. This implementation specific focus, however, does not make explicit certain language concepts, which can complicate integration tasks. Hence, we propose a process which semi-automatically lifts metamodels into ontologies by making implicit concepts in the metamodel explicit in the ontology. Thus, a shift of focus from the implementation of a certain modeling language towards the explicit reification of the concepts covered by this language is made. This allows matching on a solely conceptual level, which helps to achieve better results in terms of mappings that can in turn be a basis for deriving\u00a0\u2026", "num_citations": "199\n", "authors": ["789"]}
{"title": "Towards model transformation generation by-example\n", "abstract": " With the advent of model-driven engineering (MDE) several model transformation approaches and languages have been developed in the previous 5 years. Most of these existing approaches are metamodel-based with metamodels representing both an abstract syntax of the corresponding modeling language and also a data structure for storing models. However, this implementation specific focus makes it difficult for modelers to develop model transformations, because metamodels do not necessarily define all language concepts explicitly which are available for notation purposes. Therefore, we propose a by-example approach for defining inter-model mappings representing semantic correspondences between concrete domain models, which is more user-friendly, then directly specifying model transformation rules or mappings based on the abstract syntax. The inter-model mappings between domain models can\u00a0\u2026", "num_citations": "176\n", "authors": ["789"]}
{"title": "Bridging grammarware and modelware\n", "abstract": " In Software Engineering many text-based languages and supporting tools are used, forming the grammarware technical space. Currently model driven engineering is the new emerging paradigm for software engineering, which uses modelling languages and tools, forming the modelware technical space. Transition to the new technical space and interoperability between these two technical spaces is needed in many development scenarios. Building a bridge between these two technical spaces is a tedious task, that has to be repeated for each language to be transformed. Therefore, we propose a generic bridge between grammarware and modelware technical spaces, that can generate a specific bridge based on the EBNF of a given language semi-automatically. The generation comprises of two steps, (1) automatic generation of metamodel corresponding to the EBNF and (2) annotations to provide the\u00a0\u2026", "num_citations": "144\n", "authors": ["789"]}
{"title": "Model transformation intents and their properties\n", "abstract": " The notion of model transformation intent is proposed to capture the purpose of a transformation. In this paper, a framework for the description of model transformation intents is defined, which includes, for instance, a description of properties a model transformation has to satisfy to qualify as a suitable realization of an intent. Several common model transformation intents are identified, and the framework is used to describe six of them in detail. A case study from the automotive industry is used to demonstrate the usefulness of the proposed framework for identifying crucial properties of model transformations with different intents and to illustrate the wide variety of model transformation intents that an industrial model-driven software development process typically encompasses.", "num_citations": "122\n", "authors": ["789"]}
{"title": "Automated verification of model transformations based on visual contracts\n", "abstract": " Model-Driven Engineering promotes the use of models to conduct the different phases of the software development. In this way, models are transformed between different languages and notations until code is generated for the final application. Hence, the construction of correct Model-to-Model (M2M) transformations becomes a crucial aspect in this approach.               Even though many languages and tools have been proposed to build and execute M2M transformations, there is scarce support to specify correctness requirements for such transformations in an implementation-independent way, i.e., irrespective of the actual transformation language used.               In this paper we fill this gap by proposing a declarative language for the specification of visual contracts, enabling the verification of transformations defined with any transformation language. The verification is performed by compiling the contracts\u00a0\u2026", "num_citations": "115\n", "authors": ["789"]}
{"title": "A survey on UML-based aspect-oriented design modeling\n", "abstract": " Aspect-orientation provides a new way of modularization by clearly separating crosscutting concerns from noncrosscutting ones. While aspect-orientation originally has emerged at the programming level, it now stretches also over other development phases. There are, for example, already several proposals for Aspect-Oriented Modeling (AOM), most of them pursuing distinguished goals, providing different concepts as well as notations, and showing various levels of maturity. Consequently, there is an urgent need to provide an in-depth survey, clearly identifying commonalities and differences between current AOM approaches. Existing surveys in this area focus more on comprehensibility with respect to development phases or evaluated approaches rather than on comparability on bases of a detailed evaluation framework. This article tries to fill this gap focusing on aspect-oriented design modeling. As a\u00a0\u2026", "num_citations": "113\n", "authors": ["789"]}
{"title": "Model transformation by-example: a survey of the first wave\n", "abstract": " Model-Driven Engineering (MDE) places models as first-class artifacts throughout the software lifecycle. In this context, model transformations are crucial for the success of MDE, being comparable in role and importance to compilers for high-level programming languages. Thus, several model transformation approaches have been developed in the last decade, whereby originally most of them are based on the abstract syntax of modeling languages. However, this implementation specific focus makes it difficult for modelers to develop model transformations, because they are familiar with the concrete syntax but not with its computer internal representation.             To tackle this problem, model transformation by-example approaches have been proposed which follow the same fundamental idea as query by-example and programming by-example approaches. Instead of using the computer internal\u00a0\u2026", "num_citations": "108\n", "authors": ["789"]}
{"title": "A survey on aspect-oriented modeling approaches\n", "abstract": " Aspect-orientation provides a new way of modularization by clearly separating crosscutting concerns from non-crosscutting ones. While aspect-orientation originally has emerged at the programming level, it now stretches also over other development phases. There are, for example, already several proposals to Aspect-Oriented Modeling (AOM), most of them pursuing distinguished goals, providing different concepts as well as notations, and showing various levels of maturity. Consequently, there is an urgent need for both, academia and practice, to provide an in-depth survey, clearly identifying commonalities and differences between current AOM approaches. Existing surveys in this area focus more on comprehensibility with respect to development phases or evaluated approaches rather than on comparability at a fine-grained level.This paper tries to fill this gap. As a prerequisite for an in-depth evaluation, a conceptual reference model is presented, capturing the basic concepts of AOM and their interrelationships in terms of a UML class diagram. Based on this conceptual reference model, an evaluation framework has been designed by deriving a detailed and well-defined catalogue of evaluation criteria. The actual evaluation by means of this criteria catalogue and by employing a running example is done on the basis of a carefully selected set of eight AOM approaches, each of them having already reached a certain level of maturity. This per approach evaluation is complemented with an extensive report on lessons learned, summarizing the approaches\u2019 strengths and shortcomings.", "num_citations": "103\n", "authors": ["789"]}
{"title": "A systematic review of cloud modeling languages\n", "abstract": " Modern cloud computing environments support a relatively high degree of automation in service provisioning, which allows cloud service customers (CSCs) to dynamically acquire services required for deploying cloud applications. Cloud modeling languages (CMLs) have been proposed to address the diversity of features provided by cloud computing environments and support different application scenarios, such as migrating existing applications to the cloud, developing new cloud applications, or optimizing them. There is, however, still much debate in the research community on what a CML is, and what aspects of a cloud application and its target cloud computing environment should be modeled by a CML. Furthermore, the distinction between CMLs on a fine-grain level exposing their modeling concepts is rarely made. In this article, we investigate the diverse features currently provided by existing CMLs. We\u00a0\u2026", "num_citations": "101\n", "authors": ["789"]}
{"title": "xMOF: Executable DSMLs based on fUML\n", "abstract": " The basic ingredients of a domain-specific modeling language (DSML) are its syntax and semantics. For defining the abstract syntax in terms of metamodels, MOF constitutes a standardized language. For specifying the behavioral semantics, however, no standardized language exists, which hampers the emergence of model execution facilities, such as debugging and simulation support. The contribution of this paper is an integrated approach for specifying the abstract syntax and behavioral semantics of DSMLs based exclusively on standardized modeling languages. In particular, we integrate fUML, a standardized executable subset of UML, with MOF leading to a new metamodeling language xMOF. Moreover, we propose a methodology for developing executable DSMLs fostering the separation of abstract syntax and behavioral semantics. To evaluate our approach, we provide an EMF-based\u00a0\u2026", "num_citations": "93\n", "authors": ["789"]}
{"title": "Explicit transformation modeling\n", "abstract": " Despite the pivotal significance of transformations for model-driven approaches, there have not been any attempts to explicitly model transformation languages yet. This paper presents a novel approach for the specification of transformations by modeling model transformation languages as domain-specific languages. For each pair of domain, the metamodel of the rules are (quasi-)automatically generated to create a language tailored to the transformation. Moreover, this method is very efficient when the transformation domains are the transformation rules themselves, which facilitates the design of higher-order transformations.", "num_citations": "87\n", "authors": ["789"]}
{"title": "Reuse in model-to-model transformation languages: are we there yet?\n", "abstract": " In the area of model-driven engineering, model transformations are proposed as the technique to systematically manipulate models. For increasing development productivity as well as quality of model transformations, reuse mechanisms are indispensable. Although numerous mechanisms have been proposed, no systematic comparison exists, making it unclear, which reuse mechanisms may be best employed in a certain situation. Thus, this paper provides an in-depth comparison of reuse mechanisms in model-to-model transformation languages and categorizes them along their intended scope of application. Finally, current barriers and facilitators to model transformation reuse are discussed.", "num_citations": "83\n", "authors": ["789"]}
{"title": "A fundamental approach to model versioning based on graph modifications: from theory to implementation\n", "abstract": " In model-driven engineering, models are primary artifacts that can evolve heavily during their life cycle. Therefore, versioning of models is a key technique to be offered by integrated development environments for model-driven engineering. In contrast to text-based versioning systems, we present an approach that takes model structures and their changes over time into account. Considering model structures as graphs, we define a fundamental approach where model revisions are considered as graph modifications consisting of delete and insert actions. Two different kinds of conflict detection are presented: (1) the check for operation-based conflicts between different graph modifications, and (2) the check for state-based conflicts on merged graph modifications. For the merging of graph modifications, a two-phase approach is proposed: First, operational conflicts are temporarily resolved by always giving\u00a0\u2026", "num_citations": "73\n", "authors": ["789"]}