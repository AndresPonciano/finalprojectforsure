{"title": "leanTAP: Lean tableau-based deduction\n", "abstract": " \u201cprove ((E, F), A, B, C, D) : - !, prove (E, [F \u2223 A], B, C, D).               prove ((E; F), A, B, C, D) : - !, prove (E, A, B, C, D), prove (F, A, B, C, D).               prove (all(H, I), A, B, C, D) : - !, \u2216+ length (C, D), copy_term ((H, I, C), (G, F, C)), append (A, [all (H, I)], E), prove(F, E, B, [G \u2223 C], D).               prove (A,_, [C \u2223 D] ,_, _) :-((A= \u2212 (B); \u2212 (A) = B)) -> (unify(B, C); prove (A, [], D,_,_)).               prove (A, [E \u2223 F], B, C, D): - prove (E, F, [A\u2223B], C,D).\u201d               implements a first-order theorem prover based on free-variable semantic tableaux. It is complete, sound, and efficient.", "num_citations": "250\n", "authors": ["1746"]}
{"title": "Translating the Object Constraint Language into first-order predicate logic\n", "abstract": " In this paper, we define a translation of UML class diagrams with OCL constraints into first-order predicate logic. The goal is logical reasoning about UML models, realized by an interactive theorem prover. We put an emphasis on usability of the formulas resulting from the translation, and we have developed optimisations and heuristics to enhance the efficiency of the theorem proving process. The translation has been implemented as part of the KeY system, but our implementation can also be used stand-alone.", "num_citations": "177\n", "authors": ["1746"]}
{"title": "A Dynamic Logic for the Formal Verification of Java Card Programs\n", "abstract": " In this paper, we define a program logic (an instance of Dynamic Logic) for formalising properties of Java Card programs, and we give a sequent calculus for formally verifying such properties. The purpose of this work is to provide a framework for software verification that can be integrated into real-world software development processes.", "num_citations": "123\n", "authors": ["1746"]}
{"title": "Free variable tableaux for propositional modal logics\n", "abstract": " We present a sound, complete, modular and lean labelled tableau calculus for many propositional modal logics where the labels contain \u201cfree\u201d and \u201cuniversal\u201d variables. Our \u201clean\u201d Prolog implementation is not only surprisingly short, but compares favourably with other considerably more complex implementations for modal deduction.", "num_citations": "75\n", "authors": ["1746"]}
{"title": "Formal verification of a microkernel used in dependable software systems\n", "abstract": " In recent years, deductive program verification has improved to a degree that makes it feasible for real-world programs. Following this observation, the main goal of the BMBF-supported Verisoft XT project is (a)\u00a0the creation of methods and tools which allow the pervasive formal verification of integrated computer systems, and (b)\u00a0the prototypical realization of four concrete, industrial application tasks.               In this paper, we report on the Verisoft XT subproject Avionics, where formal verification is being applied to a commercial embedded operating system. The goal is to use deductive techniques to verify functional correctness of the PikeOS system, which is a microkernel-based partitioning hypervisor.               We present our approach to verifying the microkernel\u2019s system calls, using a system call for changing the priority of threads as an example. In particular, (a)\u00a0we give an overview of the tool chain and the\u00a0\u2026", "num_citations": "59\n", "authors": ["1746"]}
{"title": "The tableau-based theorem prover 3TAP: Version 4.0\n", "abstract": " Overview3774/9 is a tableau-based theorem prover for many-valued first-order logics with sorts (in the two-valued version with equality); it is implemented in Prolog. This paper gives an overview of the system with a special focus on the new features of 3TAP Version 4.0, including: efficient completion-based equality reasoning, methods for handling redundant axiom sets, utilization of pragmatic information contained in axioms to rearrange the search space, and a graphical user interface for controlling 3T4P and visualizing its output,. 37z4P has been developed at the University of Karlsruhe. In 1989 the project started in cooperation with the Institute for Knowledge Based Systems of IBM Germany. Since 1992 the system is maintained and improved as part of a new project at the University'of Ka. rlsruhe fimded by the Deutsche Forschungsgemeinschaft (DFG).", "num_citations": "57\n", "authors": ["1746"]}
{"title": "Dynamic Logic with Non-rigid Functions\n", "abstract": " We introduce a dynamic logic that is enriched by non-rigid functions, i.e., functions that may change their value from state to state (during program execution), and we present a (relatively) complete sequent calculus for this logic. In conjunction with dynamically typed object enumerators, non-rigid functions allow to embed notions of object-orientation in dynamic logic, thereby forming a basis for verification of object-oriented programs. A semantical generalisation of substitutions, called state update, which we add to the logic, constitutes the central technical device for dealing with object aliasing during function modification. With these few extensions, our dynamic logic captures the essential aspects of the complex verification system KeY and, hence, constitutes a foundation for object-oriented verification with the principles of reasoning that underly the successful KeY case studies.", "num_citations": "54\n", "authors": ["1746"]}