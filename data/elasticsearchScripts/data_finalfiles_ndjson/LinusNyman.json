{"title": "The development of open access journal publishing from 1993 to 2009\n", "abstract": " Open Access (OA) is a model for publishing scholarly peer reviewed journals, made possible by the Internet. The full text of OA journals and articles can be freely read, as the publishing is funded through means other than subscriptions. Empirical research concerning the quantitative development of OA publishing has so far consisted of scattered individual studies providing brief snapshots, using varying methods and data sources. This study adopts a systematic method for studying the development of OA journals from their beginnings in the early 1990s until 2009. Because no comprehensive index of OA articles exists, systematic manual data collection from journal web sites was conducted based on journal-level data extracted from the Directory of Open Access Journals (DOAJ). Due to the high number of journals registered in the DOAJ, almost 5000 at the time of the study, stratified random sampling was used. A separate sample of verified early pioneer OA journals was also studied. The results show a very rapid growth of OA publishing during the period 1993\u20132009. During the last year an estimated 191 000 articles were published in 4769 journals. Since the year 2000, the average annual growth rate has been 18% for the number of journals and 30% for the number of articles. This can be contrasted to the reported 3,5% yearly volume increase in journal publishing in general. In 2009 the share of articles in OA journals, of all peer reviewed journal articles, reached 7,7%. Overall, the results document a rapid growth in OA journal publishing over the last fifteen years. Based on the sampling results and qualitative data a division into three\u00a0\u2026", "num_citations": "794\n", "authors": ["871"]}
{"title": "To fork or not to fork: Fork motivations in SourceForge projects\n", "abstract": " A project fork occurs when software developers take a copy of source code from one software package and use it to begin an independent development work that is maintained separately. Although forking in open source software does not require the permission of the original authors, the new version competes for the attention of the same developers that have worked on the original version. The motivations developers have for performing forks are many, but in general they have received little attention. The authors present the results of a study of forks performed in SourceForge (http://sourceforge. net/) and list the developers\u2019 motivations for their actions.", "num_citations": "56\n", "authors": ["871"]}
{"title": "The Internet of (Vulnerable) Things: On Hypponen's law, security engineering, and IoT legislation\n", "abstract": " As security expert Bruce Schneier (2015) has noted, the appliances and gadgets that are part of our everyday lives are becoming computers that can do other things. Our phones have become computers that can also make phone calls. Our cars are becoming computers that can also drive. Our washing machines are becoming computers that can also wash clothes. These computers are commonly connected to a network\u2013often, though not necessarily, the Internet. The phenomenon as a whole is called the Internet of Things (IoT; tinyurl. com/lqdsl4n). Between 2014 and 2020, the number of these connected things has been projected to grow at an annual compound rate of 23.1%, reaching 50.1 billion things in 2020 (Press, 2016).", "num_citations": "34\n", "authors": ["871"]}
{"title": "Notes on the History of Fork and Join\n", "abstract": " The fork call allows a process (or running program) to create new processes. On multiprocessor systems, these processes can run concurrently in parallel. Since its birth 50 years ago, the fork has remained a central element of modern computing, both with regard to software development principles and, by extension, to hardware design, which increasingly accommodates parallelism in process execution. This article looks back at the birth of the fork system call to share, as remembered by its pioneers.", "num_citations": "20\n", "authors": ["871"]}
{"title": "Information Security Best Practices\n", "abstract": " This article identifies important first steps toward understanding and implementing information security. From the broad selection of existing best practices, we introduce a lightweight yet comprehensive security framework with four useful first steps: identifying assets and risks; protecting accounts, systems, clouds, and data; implementing a continuity plan; and monitoring and reviewing. This article is intended primarily for startups and less mature companies, but it is likely to be of interest to any reader seeking an introduction to basic information security concepts and principles as well as their implementation.", "num_citations": "17\n", "authors": ["871"]}
{"title": "Hackers on Forking\n", "abstract": " All open source licenses allow the copying of an existing body of code for use as the basis of a separate development project. This practice is commonly known as forking the code. This paper presents the results of a study in which 11 programmers were interviewed about their opinions on the right to fork and the impact of forking on open source software development.", "num_citations": "17\n", "authors": ["871"]}
{"title": "Understanding code forking in open source software\n", "abstract": " The right to fork code is one of the central rights of open source software. Among the implications of this right, which can be used by anyone, are that entire codebases can be forked and used in the creation of new programs; or, if someone is not pleased with how a project is being managed, they can fork a new version of the project. Despite its significance, code forking in open source has seen little study. My doctoral thesis strives to increase our understanding of code forking in open source software. The two main areas of interest are 1) the motivations behind code forking: what reasons do developers have for forking? What are the main categories of reasons, and how common are they? And, 2) how is forking perceived: when is it acceptable to fork a program and when is it not? Are these perceptions tied to the forks ramifications for the community? In addition to these questions, my thesis seeks to explore the problematic issue of defining a fork and present a typology of forks for use in academic study of the phenomenon.", "num_citations": "14\n", "authors": ["871"]}
{"title": "Exploring the relationship between research and BIM standardization: a systematic mapping of early studies on the IFC standard (1997\u20132007)\n", "abstract": " It has long been argued that the Industry Foundation Classes (IFC) data model standard is the key to unlocking the potential of interoperable Building Information Modeling (BIM). Despite a wealth of published research literature incorporating IFC, there have been no attempts at systematically summarizing the literature related to the standard. Targeting both summation and analysis of thematic developments over time, we performed a comprehensive systematic literature review of IFC\u2010related research published between 1997 and 2007: the first 11 years of research on the standard. Through a systematic web\u2010retrieval process, 170 unique publications were collected, read, and mapped to a custom framework. The results reveal that journals and conferences have been an integral part of the technical evaluation and development of the standard. The full classification data is provided as an appendix to facilitate future research on IFC and other standards. View Full-Text", "num_citations": "11\n", "authors": ["871"]}
{"title": "Innovation opportunities: An overview of standards and platforms in the video game industry\n", "abstract": " The video game industry offers insights into the significance of standards and platforms. Furthermore, it shows examples of how new entrants can offer innovative services, while reducing their own risk, through bridging the boundaries between standards. Through an exploration of both past and present, this article aims to serve as a primer for understanding, firstly, the technological standards and platforms of the video game industry, and secondly, the recent innovations within the video game industry that have enabled products to be made available across platforms.", "num_citations": "11\n", "authors": ["871"]}
{"title": "The business of open source software: a primer\n", "abstract": " This article is meant as a primer for those interested in gaining a basic understanding of the business of open source software. Thus, we cover four main areas: i) what motivates businesses to get involved in open source; ii) common open source licenses and how they relate to community and corporate interests; iii) issues regarding the monetization of an open source program; and iv) open source business models currently employed. This article is particularly suitable for people who want a general understanding of the business of open source software; people who want to understand the significant issues regarding an open source program's potential to generate income; and entrepreneurs who want to create a company around open source code.", "num_citations": "9\n", "authors": ["871"]}
{"title": "Freedom and forking in open source software: the MariaDB story\n", "abstract": " While significant factors that affect the open source community\u2019s interest to participate in a development project have been studied, there has been little focus on the motivating factors that can cause a contributor to become a competitor by utilizing the right to fork a program i.e., to copy an existing program\u2019s code base and use it to begin a separate development. The right to copy an existing program\u2019s code base and use it to begin a separate development is guaranteed by all open source licenses. However, this right to fork a program is rarely exercised. Indeed, there is strong social pressure against code forking stemming from the negative side effects of code forking, such as conflict and duplicated efforts among developers. This paper details the events that led Widenius, the founder of the MySQL project, to decide to fork MariaDB from MySQL. Our findings confirm the previously held notion that there is a high threshold for starting a competing fork. While the few studies that exist of competitive forks find the reasons to be due to disagreement among developers, in the case of MariaDB the fork was caused by Widenius\u2019 concerns regarding the uncertainty of the future freedom and openness of the MySQL codebase. This article makes three contributions. Firstly, it further validates the existing notion that there is a strong threshold to starting a competing fork. Secondly, it offers an in-depth analysis of the events and motivations behind the birth of a fork. Thirdly, it contributes to theory by introducing the freedom factor hypothesis: limiting either developers\u2019 freedoms to contribute to a project or the freedom inherent in a project's license increases the\u00a0\u2026", "num_citations": "8\n", "authors": ["871"]}
{"title": "Understanding Code Forking in Open Source Software: An examination of code forking, its effect on open source software, and how it is viewed and practiced by developers\n", "abstract": " Open source software is everywhere. From phones, tablets, TVs, and game consoles to less self-evident examples like cars, washing machines, and the International Space Station. However, what makes open source software remarkable is not where it can be found, but rather what can be done with it. One of the most astounding rights guaranteed by all open source software licenses is the right to fork the source code. In other words, the right to copy any program, either in part or in its entirety, and use that program to create a new, modified version of it. The right to fork has an enormous impact on both the development and governance of open source software. Despite its significance, code forking has seen little academic study. This dissertation examines the right to fork, its impact and significance, and how it is viewed and practiced by developers. The study draws on data consisting of hundreds of forks, interviews with open source software programmers, and an in-depth analysis of the birth of the MariaDB fork. This dissertation is relevant to anyone seeking a greater general understanding of how open source works and why it is considered a superior software development model. It may also serve as a useful resource for firms seeking to harness the power of open source software. Furthermore, it offers important insights to those who want to better understand how code forking is practiced and viewed by developers. This study finds that forks are primarily started for non-competitive reasons, with unique features or goals that distinguish them from their parent projects. Competitive forks are rare but do exist, with some motivating factors being to\u00a0\u2026", "num_citations": "7\n", "authors": ["871"]}
{"title": "Look Who's Tracking\n", "abstract": " Avainsanat: ev\u00e4steet [http://www. yso. fi/onto/yso/p8439], seuranta [http://www. yso. fi/onto/yso/p17497], et\u00e4seuranta [http://www. yso. fi/onto/yso/p34193], WWW-sivut [http://www. yso. fi/onto/yso/p4050], yksityisyys [http://www. yso. fi/onto/yso/p10909]", "num_citations": "2\n", "authors": ["871"]}
{"title": "Introducing\" Business Source\"\n", "abstract": " The benefits of the open source development model have been proven by the test of time; however, making this development model economically feasible can be challenging. In this article, Monty Widenius puts forth a suggestion for a new type of license, which is the result of the lessons learned from decades of work on open source, both as programmer and entrepreneur. The result, \u201cbusiness source\u201d, is a license that seeks to enable a business model that can both harness the benefits of open source while generating sufficient income for the program\u2019s continued development. The business source license automatically changes terms after a given period: an initial non-open source license with specific usage restrictions that transforms to a fully open source license on a specific future date. In this article, we contribute a proposal for a novel license, a set of recommendations for managers, and a sample text of a business source license. This work will be of relevance to four main groups: i) those developing or managing a closed source program but who are interested in the benefits open source offers; ii) those managing open core programs; iii) projects in development; and iv) investors interested in funding open source projects.", "num_citations": "2\n", "authors": ["871"]}
{"title": "Assembling your SeaGlass IMSI-catcher detector\u2013a beginner's guide\n", "abstract": " IMSI-catchers, sometimes called cell-site simulators or Stingrays, can eavesdrop on cell phone communications. IMSI-catchers do this by pretending to be a cell tower, thereby tricking nearby cell phones into connecting to them. The SeaGlass IMSI-catcher detector (which we from now on will call \u201cSeaGlass sensor\u201d or just \u201csensor\u201d) gathers data from surrounding cell towers. Thus, the sensor should also pick up nearby IMSI-catchers. Analyzing SeaGlass sensor data for anomalies can enable identifying IMSI-catchers. The SeaGlass sensor is built using off-the-shelf parts. It is based on a Raspberry Pi and requires no soldering. This guide covers the steps to assemble a SeaGlass sensor, including both hardware and software requirements. The guide also covers the installation of software, on a separate computer, that can be used to analyze data gathered by the SeaGlass sensor.", "num_citations": "1\n", "authors": ["871"]}