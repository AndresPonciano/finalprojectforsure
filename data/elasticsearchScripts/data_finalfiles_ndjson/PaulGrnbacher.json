{"title": "Value-based Software Engineering\n", "abstract": " The IT community has always struggled with questions concerning the value of an organization\u2019s investment in software and hardware. It is the goal of value-based software engineering (VBSE) to develop models and measures of value which are of use for managers, developers and users as they make tradeoff decisions between, for example, quality and cost or functionality and schedule\u2013such decisions must be economically feasible and comprehensible to the stakeholders with differing value perspectives. VBSE has its roots in work on software engineering economics, pioneered by Barry Boehm in the early 1980s. However, the emergence of a wider scope that defines VBSE is more recent. VBSE extends the merely technical ISO software engineering definition with elements not only from economics, but also from cognitive science, finance, management science, behavioral sciences, and decision sciences\u00a0\u2026", "num_citations": "511\n", "authors": ["1462"]}
{"title": "Developing groupware for requirements negotiation: lessons learned\n", "abstract": " Defining requirements is a complex and difficult process, and defects in the process often lead to costly project failures. There is no complete and well-defined set of requirements waiting to be discovered in system development. Different stakeholders: users, customers, managers, domain experts, and developers, come to the project with diverse expectations and interests. Requirements emerge in a highly collaborative, interactive, and interdisciplinary negotiation process that involves heterogeneous stakeholders. At the University of Southern California's Center for Software Engineering, we have developed a series of groupware implementations for the WinWin requirements negotiation approach. The WinWin approach involves having a system's success-critical stakeholders participate in a negotiation process so they can converge on a mutually satisfactory or win-win set of requirements. The WinWin groupware\u00a0\u2026", "num_citations": "375\n", "authors": ["1462"]}
{"title": "Automating requirements traceability: Beyond the record & replay paradigm\n", "abstract": " Requirements traceability (RT) aims at defining relationships between stakeholder requirements and artifacts produced during the software development life-cycle. Although techniques for generating and validating RT are available, RT in practice often suffers from the enormous effort and complexity of creating and maintaining traces or from incomplete trace information that cannot assist engineers in real-world problems. In this paper we will present a tool-supported technique easing trace acquisition by generating trace information automatically. We will explain the approach using a video-on-demand system and show that the generated traces can be used in various engineering scenarios to solve RT-related problems.", "num_citations": "216\n", "authors": ["1462"]}
{"title": "The DOPLER meta-tool for decision-oriented variability modeling: a multiple case study\n", "abstract": " The variability of a product line is typically defined in models. However, many existing variability modeling approaches are rigid and don\u2019t allow sufficient domain-specific adaptations. We have thus been developing a flexible and extensible approach for defining product line variability models. Its main purposes are to guide stakeholders through product derivation and to automatically generate product configurations. Our approach is supported by the DOPLER (Decision-Oriented Product Line Engineering for effective Reuse) meta-tool that allows modelers to specify the types of reusable assets, their attributes, and dependencies for their specific system and context. The aim of this paper is to investigate the suitability of our approach for different domains. More specifically, we explored two research questions regarding the implementation of variability and the utility of DOPLER for variability modeling in\u00a0\u2026", "num_citations": "201\n", "authors": ["1462"]}
{"title": "Identifying requirements conflicts and cooperation: How quality attributes and automated traceability can help\n", "abstract": " Requirements about software attributes have numerous complex and nontrivial interdependencies. Requirements conflict with each other when they make contradicting statements about common software attributes, and they cooperate when they mutually enforce such attributes. Because software developers rarely apply formal requirements specification techniques in practice, and because reliable techniques for natural language understanding aren't available, it's generally infeasible to automatically identify conflicts and cooperation among requirements. In software development and maintenance, identifying conflicts and cooperation among requirements is challenging. Fortunately, quality attributes can help. In addition, automated traceability techniques can eliminate falsely identified conflicts and cooperation efficiently.", "num_citations": "157\n", "authors": ["1462"]}
{"title": "EasyWinWin: Managing complexity in requirements negotiation with GSS\n", "abstract": " More than 3/4 of large software projects suffer large cost and schedule overruns or fail outright. Deficits in project requirements cause more than half of these failures and overruns. This is in part because the establishment of software requirements is fraught with complexity. Finding ways to manage that complexity might be an important step in reducing the risk of software development. Group support systems (GSS) offer functionality that may reduce some aspects of complexity and reduce the cognitive load of addressing other aspects of complexity. We examine the sources of causes of complexity in software requirements in the context of EasyWinWin, a requirements negotiation methodology supported by GSS. Early field trials suggest that EasyWinWin is a significant step forward in managing the complexity of establishing requirements, and that further advantage could be gained by combining a GSS solution with\u00a0\u2026", "num_citations": "142\n", "authors": ["1462"]}
{"title": "A systematic review and an expert survey on capabilities supporting multi product lines\n", "abstract": " ContextComplex software-intensive systems comprise many subsystems that are often based on heterogeneous technological platforms and managed by different organizational units. Multi product lines (MPLs) are an emerging area of research addressing variability management for such large-scale or ultra-large-scale systems. Despite the increasing number of publications addressing MPLs the research area is still quite fragmented.ObjectiveThe aims of this paper are thus to identify, describe, and classify existing approaches supporting MPLs and to increase the understanding of the underlying research issues. Furthermore, the paper aims at defining success-critical capabilities of infrastructures supporting MPLs.MethodUsing a systematic literature review we identify and analyze existing approaches and research issues regarding MPLs. Approaches described in the literature support capabilities needed to\u00a0\u2026", "num_citations": "139\n", "authors": ["1462"]}
{"title": "Requirements for product derivation support: Results from a systematic literature review and an expert survey\n", "abstract": " ContextAn increasing number of publications in product line engineering address product derivation, i.e., the process of building products from reusable assets. Despite its importance, there is still no consensus regarding the requirements for product derivation support.ObjectiveOur aim is to identify and validate requirements for tool-supported product derivation.MethodWe identify the requirements through a systematic literature review and validate them with an expert survey.ResultsWe discuss the resulting requirements and provide implementation examples from existing product derivation approaches.ConclusionsWe conclude that key requirements are emerging in the research literature and are also considered relevant by experts in the field.", "num_citations": "136\n", "authors": ["1462"]}
{"title": "Structuring the modeling space and supporting evolution in software product line engineering\n", "abstract": " The scale and complexity of product lines means that it is practically infeasible to develop a single model of the entire system, regardless of the languages or notations used. The dynamic nature of real-world systems means that product line models need to evolve continuously to meet new customer requirements and to reflect changes of product line artifacts. To address these challenges, product line engineers need to apply different strategies for structuring the modeling space to ease the creation and maintenance of models. This paper presents an approach that aims at reducing the maintenance effort by organizing product lines as a set of interrelated model fragments defining the variability of particular parts of the system. We provide support to semi-automatically merge fragments into complete product line models. We also provide support to automatically detect inconsistencies between product line artifacts\u00a0\u2026", "num_citations": "126\n", "authors": ["1462"]}
{"title": "Supporting product derivation by adapting and augmenting variability models\n", "abstract": " Product derivation is the process of constructing products from the core assets in a product line. Guidance and support are needed to increase efficiency and to deal with the complexity of product derivation. Research has, however, devoted comparatively little attention to this process. In this paper we describe an approach for supporting product derivation. We show that variability models need to be prepared for concrete projects before they can be effectively utilized in the derivation process. Project-specific information and sales knowledge should be added and irrelevant variability should be pruned. We also present tool support and illustrate the approach using examples from ongoing research collaboration.", "num_citations": "126\n", "authors": ["1462"]}
{"title": "Surfacing tacit knowledge in requirements negotiation: experiences using EasyWinWin\n", "abstract": " Defects in the requirements definition process often lead to costly project failures. One eminent problem is that it can be difficult to take deliberate advantage of important tacit knowledge of success-critical stakeholders. People know more that they can ever tell. Implicit stakeholder goals, hidden assumptions, unshared expectations often result in severe problems in the later stages of software development. We present a set of collaborative techniques that support a team of success-critical stakeholders in surfacing tacit knowledge during systems development projects. We discuss these techniques in the context of the EasyWinWin requirements negotiation methodology and illustrate our approach with examples from real-world negotiations.", "num_citations": "120\n", "authors": ["1462"]}
{"title": "Collaborative requirements negotiation with EasyWinWin\n", "abstract": " The EasyWinWin methodology supports collaborative elaboration, prioritization, and negotiation of system requirements. The approach enhances the WinWin negotiation model by integrating group productivity techniques and collaborative tools. EasyWinWin has been used in real-client custom development projects and for real-world COTS product release planning. Our experience shows that EasyWinWin helps to improve stakeholder involvement in the requirements engineering process and enhances the frequency, directness, and extent of stakeholder interactions. This helps to develop a deeper and broader set of deliverables in a shorter time and to identify and mitigate risks earlier in the life cycle.", "num_citations": "115\n", "authors": ["1462"]}
{"title": "Agile product line planning: A collaborative approach and a case study\n", "abstract": " Agile methods and product line engineering (PLE) have both proven successful in increasing customer satisfaction and decreasing time to market under certain conditions. Key characteristics of agile methods are lean and highly iterative development with a strong emphasis on stakeholder involvement. PLE leverages reuse through systematic approaches such as variability modeling or product derivation. Integrating agile approaches with product line engineering is an interesting proposition which \u2013 not surprisingly \u2013 entails several challenges: Product lines (PL) rely on complex plans and models to ensure their long-term evolution while agile methods emphasize simplicity and short-term value-creation for customers. When incorporating agility in product line engineering, it is thus essential to define carefully how agile principles can support particular PLE processes. For instance, the processes of defining and\u00a0\u2026", "num_citations": "107\n", "authors": ["1462"]}
{"title": "Supporting software understanding with automated requirements traceability\n", "abstract": " Requirements traceability (RT) aims at defining and utilizing relationships between stakeholder requirements and artifacts produced during the software development life-cycle and provides an important means to foster software understanding. Although techniques for generating and validating traceability information are available, RT in practice often suffers from the enormous effort and complexity of creating and maintaining traces. This results in invalid or incomplete trace information which cannot support engineers in real-world problems. In this paper we present a tool-supported approach that requires the designer to specify some trace dependencies but eases trace acquisition by generating others automatically. We illustrate the approach using a video-on-demand system and show how the generated traces can be used in various engineering scenarios to improve software understanding. In a case study\u00a0\u2026", "num_citations": "90\n", "authors": ["1462"]}
{"title": "Requirements negotiation\n", "abstract": " Negotiation is regarded as crucial in many disciplines, and negotiation methods and tools are increasingly studied by requirements engineering researchers and practitioners. The objectives of this chapter are to motivate the need for negotiation in requirements engineering, to introduce fundamental concepts and terminology, and to provide an overview about negotiation research. We structure the existing research (a) by presenting a general negotiation process highlighting typical negotiation stages; (b) by introducing a framework covering important dimensions of requirements negotiation comprising the conflict resolution strategy, the collaboration situation of the stakeholders, and the degree of negotiation tool support; and (c) by discussing and classifying existing negotiation tools using the general process and framework.", "num_citations": "86\n", "authors": ["1462"]}
{"title": "Flexible and scalable consistency checking on product line variability models\n", "abstract": " The complexity of product line variability models makes it hard to maintain their consistency over time regardless of the modeling approach used. Engineers thus need support for detecting and resolving inconsistencies. We describe experiences of applying a tool-supported approach for incremental consistency checking on variability models. Our approach significantly improves the overall performance and scalability compared to batch-oriented techniques and allows providing immediate feedback to modelers. It is extensible as new consistency constraints can easily be added. Furthermore, the approach is flexible as it is not limited to variability models and it also checks the consistency of the models with the underlying code base of the product line. We report the results of a thorough evaluation based on real-world product line models and discuss lessons learned.", "num_citations": "79\n", "authors": ["1462"]}
{"title": "Value-based requirements traceability: Lessons learned\n", "abstract": " Traceability from requirements to code is mandated by numerous software development standards. These standards, however, are not explicit about the appropriate level of quality of trace links. From a technical perspective, trace quality should meet the needs of the intended trace utilizations. Unfortunately, long-term trace utilizations are typically unknown at the time of trace acquisition which represents a dilemma for many companies. This chapter suggests ways to balance the cost and benefits of requirements traceability. We present data from three case studies demonstrating that trace acquisition requires broad coverage but can tolerate imprecision. With this trade-off our lessons learned suggest a traceability strategy that (1) provides trace links more quickly, (2) refines trace links according to user-defined value considerations, and (3) supports the later refinement of trace links in case the initial value\u00a0\u2026", "num_citations": "77\n", "authors": ["1462"]}
{"title": "Supporting runtime system adaptation through product line engineering and plug-in techniques\n", "abstract": " Product line engineering and plug-in techniques pursue different but complementary goals. Software product line engineering strives for modeling the variability of software systems on different levels of abstraction, whereas plug-in systems support software extensibility, customizability, and evolution. We present an approach demonstrating the benefits of integrating those two areas and discuss the integration of a plug-in platform for enterprise software with an existing product line engineering tool suite. The plug-in platform provides extensibility as well as runtime reconfiguration and adaptation mechanisms on the .NET platform. Automatic runtime adaptations are attained by using the knowledge documented in variability models. We discuss several usage scenarios developed in cooperation with our industry partner illustrating the need of our approach in the enterprise software domain. Finally, we validate the\u00a0\u2026", "num_citations": "74\n", "authors": ["1462"]}
{"title": "A qualitative study on user guidance capabilities in product configuration tools\n", "abstract": " Software systems are nowadays often configured by sales people, domain experts, or even customers instead of engineers. Configuration tools communicate the systems' variability to these end users and provide guidance for selecting and customizing the available features. However, even if a configuration tool creates technically correct systems, addressing the specific needs of business-oriented users remains challenging. We analyze existing configuration tools to identify key capabilities for guiding end users and discuss these capabilities using the cognitive dimensions of notations framework. We present an implementation of the capabilities in our configuration tool DOPLER CW. We performed a qualitative investigation on the usefulness of the tool's capabilities for user guidance in product configuration by involving nine business-oriented experts of two industry partners from the domain of industrial\u00a0\u2026", "num_citations": "70\n", "authors": ["1462"]}
{"title": "Exploring how to use scenarios to discover requirements\n", "abstract": " This paper investigates the effectiveness of different uses of scenarios on requirements discovery using results from requirements processes in two projects. The first specified requirements on a new aircraft management system at a regional UK airport to reduce its environmental impact. The second specified new work-based learning tools to be adopted by a consortium of organizations. In both projects scenarios were walked through both in facilitated workshops and in the stakeholders\u2019 workplaces using different forms of a scenario tool. In the second project, scenarios were also walked through with a software prototype and creativity prompts. Results revealed both qualitative and quantitative differences in discovered requirements that have potential implications for models of scenario-based requirements discovery and the design of scenario tools.", "num_citations": "66\n", "authors": ["1462"]}
{"title": "Automating software traceability in very small companies: A case study and lessons learne\n", "abstract": " There is a wide consensus on the benefits of software traceability. However, traceability techniques are still not commonly used in industry $typically only in larger companies and if mandated by standards such as the CMMI or ISO 15504. Success stories in small companies are quite rare. However, small companies represent a significant share of the IT industry and a better understanding of their needs is essential for the research community. This paper presents APIS, a traceability environment we developed and introduced in a very small software company. We discuss the traceability approach and report on key lessons learned. We have found in the project that comparably simple automation techniques are surprisingly effective. We believe that the lessons learned in this project are relevant for researchers and practitioners facing similar challenges", "num_citations": "66\n", "authors": ["1462"]}
{"title": "ReMinds: A flexible runtime monitoring framework for systems of systems\n", "abstract": " Many software-intensive systems today can be characterized as systems of systems (SoS) comprising complex, interrelated, and heterogeneous systems. The behavior of SoS often only emerges at runtime due to complex interactions between the involved systems and their environment. It is thus necessary to determine unexpected behavior by monitoring SoS at runtime, i.e., collecting and analyzing events and data at different layers and levels of granularity. Existing monitoring approaches are often limited to individual systems, particular architectural styles, or technologies. In this paper we thus derive challenges for monitoring SoS based on an industrial case. We present a flexible framework adaptable to different system architectures and technologies. We discuss its capabilities for instrumenting systems, collecting and persisting events and data, checking constraints on events and data, and visualizing the\u00a0\u2026", "num_citations": "62\n", "authors": ["1462"]}
{"title": "Determining the cost-quality trade-off for automated software traceability\n", "abstract": " Major software development standards mandate the establishment of trace links among software artifacts such as requirements, architectural elements, or source code without explicitly stating the required level of detail of these links. However, the level of detail vastly affects the cost and quality of trace link generation and important applications of trace analysis such as conflict analysis, consistency checking, or change impact analysis. In this paper, we explore these cost-quality trade-offs with three case study systems from different contexts-the open-source ArgoUML modeling tool, an industrial route-planning system, and a movie player. We report the cost-quality trade-off of automated trace generation with the Trace Analyzer approach and discuss its expected impact onto several applications that consume its trace information. In the study we explore simple techniques to predict and manipulate the cost-benefit\u00a0\u2026", "num_citations": "61\n", "authors": ["1462"]}
{"title": "Integrating collaborative processes and quality assurance techniques: experiences from requirements negotiation\n", "abstract": " Collaboration is essential in many mission-critical activities. Consequently, numerous methods and tools are available supporting collaborative processes such as strategic planning, risk management, requirements definition, and so on. These methods typically emphasize the collaborative, value-creating activities, but there is often less emphasis on quality aspects. Quality assurance (QA) techniques have been wellknown in engineering for a long time, and their effectiveness and efficiency has been empirically evaluated in many domains. In this paper, we propose to integrate repeatable QA techniques and collaborative processes. We evaluate our idea in the context of a collaborative process for requirements negotiation. We propose pre-process techniques to be used before the actual negotiation, in-process techniques for checking quality during a negotiation, as well as post-process inspection techniques\u00a0\u2026", "num_citations": "61\n", "authors": ["1462"]}
{"title": "Effort and quality of recovering requirements-to-code traces: Two exploratory experiments\n", "abstract": " Trace links between requirements and code are essential for many software development and maintenance activities. Despite significant advances in traceability research, creating links remains a human-intensive activity and surprisingly little is known about how humans perform basic tracing tasks. We investigate fundamental research questions regarding the effort and quality of recovering traces between requirements and code. Our paper presents two exploratory experiments conducted with 100 subjects who recovered trace links for two open source software systems in a controlled environment. In the first experiment, subjects recovered trace links between the two systems' requirements and classes of the implementation. In the second experiment, trace links were established between requirements and individual methods of the implementation. In order to assess the validity of the trace links cast by subjects\u00a0\u2026", "num_citations": "59\n", "authors": ["1462"]}
{"title": "DecisionKing: A Flexible and Extensible Tool for Integrated Variability Modeling.\n", "abstract": " Variability modeling is at the heart of product line engineering. Variability models entail features and architectural elements, technical customization aspects, sales and marketing decisions, as well as complex traceability information. In this paper we describe DecisionKing, a variability modeling tool that offers a great degree of flexibility and extensibility and allows the creation of variability modeling tools for different domains and organizations. The tool is part of the DOPLER approach (Decision-Oriented Product Line Engineering for Effective Reuse) developed in an industrial research cooperation with Siemens VAI. We report on ongoing tool development and present experiences of using DecisionKing.", "num_citations": "59\n", "authors": ["1462"]}
{"title": "A value-based approach for understanding cost-benefit trade-offs during automated software traceability\n", "abstract": " Many software development standards mandate establishing trace links among software artifacts such as requirements, architectural elements, or source code. However, for typical real-world systems it is currently too expensive and error prone to generate highly detailed trace links. We previously developed an approach to semi-automatically generate trace links and analyzed cost-benefit trade-offs in this context. We consider it as imperative to include value considerations into planning the generation of trace dependencies. This paper discusses three key trade-off decisions for planning the trace generation process:(a) the level of detail of traces among artifacts;(b) the value of the artifacts that are traced; and (c) the points in time of trace generation (early vs. late). We present cost-benefit considerations, empirical data, and argue for a pragmatic value-based planning approach.", "num_citations": "58\n", "authors": ["1462"]}
{"title": "A comparison framework for runtime monitoring approaches\n", "abstract": " The full behavior of complex software systems often only emerges during operation. They thus need to be monitored at run time to check that they adhere to their requirements. Diverse runtime monitoring approaches have been developed in various domains and for different purposes. Their sheer number and heterogeneity, however, make it hard to find the right approach for a specific application or purpose. The aim of our research therefore was to develop a comparison framework for runtime monitoring approaches. Our framework is based on an analysis of the literature and existing taxonomies for monitoring languages and patterns. We use examples from existing monitoring approaches to explain the framework. We demonstrate its usefulness by applying it to 32 existing approaches and by comparing 3 selected approaches in the light of different monitoring scenarios. We also discuss perspectives for researchers.", "num_citations": "50\n", "authors": ["1462"]}
{"title": "System dynamics modelling and simulation of collaborative requirements engineering\n", "abstract": " Requirements engineering is generally seen as a success-critical activity in the software development process. Within this context, the paper presents selected aspects of the System Dynamics modelling and simulation of the EasyWinWin requirements negotiation methodology. EasyWinWin approaches requirements definition as a learning rather than a gathering activity and aims at fostering stakeholder co-operation and involvement. It is based on the WinWin requirements negotiation model and provides a set of collaborative techniques and tools to enable stakeholder interaction. The major goal behind the modelling and simulation effort is to assess the issues associated with the social and behavioural aspects of the EasyWinWin process and to explore how these issues affect the overall outcome of the process. In this paper, we introduce the EasyWinWin process and describe its major activities. We present the\u00a0\u2026", "num_citations": "50\n", "authors": ["1462"]}
{"title": "A case study on software ecosystem characteristics in industrial automation software\n", "abstract": " In software ecosystems (SECOs) both internal and external developers build software solutions for specific market segments based on common technological platforms. Despite a significant body of research on SECOs there is still a need to empirically investigate the characteristics of SECOs in specific industrial environments to understand and improve development processes. In particular, when defining software processes understanding the roles of the participants in the SECO is crucial. This paper thus reports results of an exploratory case study in the industrial automation domain. We explore two research questions on SECO characteristics and discuss research issues we derived from our analyses. While our study confirms key SECO characteristics reported in the literature we also identify additional properties relevant for development processes in the domain of industrial automation.", "num_citations": "48\n", "authors": ["1462"]}
{"title": "Integrated tool support for software product line engineering\n", "abstract": " Product line engineering comprises many heterogeneous activities such as capturing the variability of reusable assets, supporting the derivation of products from the product line, evolving the product line, or tailoring the approach to the specifics of a domain. The inherent complexity of product lines implicates that tool support is inevitable to facilitate smooth performance and to avoid costly errors. Product line engineering tools have to support heterogeneous stakeholders involved in diverse activities. Tool integration therefore is of particular importance to foster their seamless cooperation. However, the integration is difficult to achieve due to the diversity of models and work products. This paper describes the DOPLER tool suite which has been developed to provide such integrated support. The tool suite is flexible and extensible to support domain-specific needs", "num_citations": "45\n", "authors": ["1462"]}
{"title": "Domain-specific adaptations of product line variability modeling\n", "abstract": " Despite its increasing popularity the widespread adoption of product line engineering is still hampered by a lack of flexible and extensible approaches that can be tailored to deal with diverse organizational specifics such as architectural styles, languages, or modeling notations. Many existing product line approaches focus on process aspects and provide general-purpose modeling approaches. In this paper we present a flexible and extensible variability modeling approach that can be adapted to domain-specific needs. The approach is supported by the meta-tool DecisionKing. The tool treats variability as a prime modeling concept and supports the domain-specific definition of dependencies between model elements. We demonstrate the feasibility of our approach with two case studies in the areas of industrial automation and service-oriented systems.", "num_citations": "43\n", "authors": ["1462"]}
{"title": "Stakeholder value proposition elicitation and reconciliation\n", "abstract": " This chapter motivates the need of methods and tools for understanding and reconciling stakeholder value propositions in software engineering. We present EasyWinWin, an example of a groupware-supported negotiation method that provides process structure and mediation to stakeholders. We identify challenges of stakeholder value proposition elicitation and negotiation and discuss possible extensions to EasyWinWin that address these challenges.", "num_citations": "43\n", "authors": ["1462"]}
{"title": "Supporting evolution in model-based product line engineering\n", "abstract": " Software maintenance and evolution are among the most challenging and cost-intensive activities in software engineering. This is not different for software product lines due to their complexity and long life-span. New customer requirements, technology changes and internal enhancements lead to the continuous evolution of a product line's reusable assets. Due to the size of product lines, single stakeholders or teams can only maintain a small part of a system which poses additional challenges for evolution. This paper presents an approach supporting product line evolution by organizing variability models of large-scale product lines as a set of interrelated model fragments defining the variability of particular parts of the system. The approach allows semi-automatic merging of fragments into complete variability models. We also provide tool support to automatically detect changes that would make models and the\u00a0\u2026", "num_citations": "42\n", "authors": ["1462"]}
{"title": "Tool support for distributed requirements negotiation\n", "abstract": " The development of software systems will increasingly become distributed with little possibility for stakeholders to meet at the same time in the same place. This has major implications in particular for the joint definition of requirements. This paper discusses negotiation techniques and collaborative tools for synchronous and asynchronous requirements definition. We have developed tool support for face-to-face negotiations based on a Group Support System and are now complementing our approach with web-based tools for distributed requirements negotiation.", "num_citations": "41\n", "authors": ["1462"]}
{"title": "Requirements monitoring frameworks: A systematic review\n", "abstract": " ContextSoftware systems today often interoperate with each other, thus forming a system of systems (SoS). Due to the scale, complexity, and heterogeneity of SoS, determining compliance with their requirements is challenging, despite the range of existing monitoring approaches. The fragmented research landscape and the diversity of existing approaches, however, make it hard to understand and analyze existing research regarding its suitability for SoS.ObjectiveThe aims of this paper are thus to systematically identify, describe, and classify existing approaches for requirements-based monitoring of software systems at runtime. Specifically, we (i) analyze the characteristics and application areas of monitoring approaches proposed in different domains, we (ii) systematically identify frameworks supporting requirements monitoring, and finally (iii) analyze their support for requirements monitoring in SoS.MethodWe\u00a0\u2026", "num_citations": "39\n", "authors": ["1462"]}
{"title": "Three-level customization of software products using a product line approach\n", "abstract": " Many office and enterprise business applications are overloaded with features. As a result users struggle in finding the functionality needed to support their tasks. Customization support for existing applications is often limited and hard to accomplish for end users. Software product lines provide support for customizing complex applications. However, they typically support vendors deriving customized products for customers from reusable components rather than supporting end users. In this paper we show how a decision-oriented software product line approach can support (1) software vendors deriving products for customers, (2) customers configuring products to the needs of specific user groups, and (3) end users personalizing a system to their needs. We describe tool support and illustrate the approach with a feasibility study.", "num_citations": "39\n", "authors": ["1462"]}
{"title": "An economic approach for improving requirements negotiation models with inspection\n", "abstract": " Stakeholder goals identified during requirements elicitation are usually informal and incomplete statements about a system considered for development. There are numerous approaches for capturing such informal models. For example, we have found the EasyWinWin requirements negotiation method to be an efficient way for attaining consensus among the success-critical stakeholders. The WinWin negotiation model captures stakeholder goals as win conditions, issues, options and agreements. When such a model has to be transformed into more formal representations, quality becomes particularly important. Approaches for validating such informal models can increase quality and provide guidance for further refinement of requirements. Inspection is a proven approach to identify defects and is also applicable to early life cycle artifacts. This paper reports on an empirical study demonstrating the\u00a0\u2026", "num_citations": "39\n", "authors": ["1462"]}
{"title": "Model-based customization and deployment of Eclipse-based tools: Industrial experiences\n", "abstract": " Developers of software engineering tools are facing high expectations regarding capabilities and usability. Users expect tools tailored to their specific needs and integrated in their working environment. This increases tools' complexity and complicates their customization and deployment despite available mechanisms for adaptability and extensibility. A main challenge lies in understanding and managing the dependencies between different technical mechanisms for realizing tool variability. We report on industrial experiences of applying a model-based and tool-supported product line approach for the customization and deployment of two Eclipse-based tools. We illustrate challenges of customizing these tools to different development contexts: In the first case study we developed variability models of a product line tool suite used by an industry partner and utilized these models for tool customization and deployment\u00a0\u2026", "num_citations": "38\n", "authors": ["1462"]}
{"title": "A case study on testing, commissioning, and operation of very-large-scale software systems\n", "abstract": " An increasing number of software systems today are very-large-scale software systems (VLSS) with system-of-systems (SoS) architectures. Due to their heterogeneity and complexity VLSS are difficult to understand and analyze, which results in various challenges for development and evolution. Existing software engineering processes, methods, and tools do not sufficiently address the characteristics of VLSS. Also, there are only a few empirical studies on software engineering for VLSS. We report on results of an exploratory case study involving engineers and technical project managers of an industrial automation VLSS for metallurgical plants. The paper provides empirical evidence on how VLSS are tested, commissioned, and operated in practice. The paper discusses practical challenges and reports industrial requirements regarding process and tool support. In particular, software processes and tools need to\u00a0\u2026", "num_citations": "36\n", "authors": ["1462"]}
{"title": "Decision-oriented modeling of product line architectures\n", "abstract": " Understanding and modeling architectural variability is fundamental in product line engineering. Various extensions have been proposed to architecture description languages (ADLs) to deal with variability. Although these extensions are useful, we argue in this paper that decisions need to be treated as first-class citizens for modeling architectural variability. Decisions that have to be taken by different stakeholders during product derivation are an essential source to understand the variability at different levels (e.g., features, architecture, and implementation). We outline a decision-oriented approach to variability modeling and illustrate it with an example from our ongoing research collaboration with Siemens VAI.", "num_citations": "36\n", "authors": ["1462"]}
{"title": "An empirical study on groupware support for software inspection meetings\n", "abstract": " Software inspection is an effective way to assess product quality and to reduce the number of defects. In a software inspection, the inspection meeting is a key activity to agree on collated defects, to eliminate false positives, and to disseminate knowledge among the team members. However, inspection meetings often require high effort and may lose defects found in earlier inspection steps due to ineffective meeting techniques. Only few tools are available for this task. We have thus been developing a set of groupware tools to lower the effort of inspection meetings and to increase their efficiency. We conducted an experiment in an academic environment with 37 subjects to empirically investigate the effect of groupware tool support for inspection meetings. The main findings of the experiment are that tool support considerably lowered the meeting effort, supported inspectors in identifying false positives, and reduced\u00a0\u2026", "num_citations": "36\n", "authors": ["1462"]}
{"title": "Managing the life-cycle of industrial automation systems with product line variability models\n", "abstract": " The current trend towards component-based software architectures has also influenced the development of industrial automation systems (IAS). Despite many advances, the life-cycle management of large-scale, component-based IAS still remains a big challenge. The knowledge required for the maintenance and runtime reconfiguration is often tacit and relies on individual stakeholders' capabilities - an error-prone and risky strategy in safety critical environments. This paper presents an approach based on product line variability models to manage the lifecycle of IAS and to automate the maintenance and reconfiguration process. We complement the standard IEC 61499 with a variability modeling approach to support both initial deployment and runtime reconfiguration. We illustrate the automated model-based life-cycle management and maintenance process using sample IAS usage scenarios.", "num_citations": "35\n", "authors": ["1462"]}
{"title": "Architectural Knowledge in Product Line Engineering: An Industrial Case Stu\n", "abstract": " Capturing and sharing architectural knowledge is already a complex endeavor when dealing with conventional software systems for single customers. In product line engineering, however, the situation is even more difficult due to architectural variability and complex relationships between features and technical solution components. In this paper, we present our experiences and approaches taken in eliciting and sharing architectural knowledge for the software product line infrastructure of a company in the plant building domain. An important lesson learned is the necessity of capturing architectural knowledge and making this knowledge available appropriately to various stakeholders in the product line environment", "num_citations": "34\n", "authors": ["1462"]}
{"title": "Applying a consistency checking framework for heterogeneous models and artifacts in industrial product lines\n", "abstract": " Product line engineering relies on heterogeneous models and artifacts to define and implement the product line\u2019s reusable assets. The complexity and heterogeneity of product line artifacts as well as their interdependencies make it hard to maintain consistency during development and evolution, regardless of the modeling approaches used. Engineers thus need support for detecting and resolving inconsistencies within and between the various artifacts. In this paper we present a framework for checking and maintaining consistency of arbitrary product line artifacts. Our approach is flexible and extensible regarding the supported artifact types and the definition of constraints. We discuss tool support developed for the DOPLER product line tool suite. We report the results of applying the approach to sales support applications of industrial product lines.", "num_citations": "33\n", "authors": ["1462"]}
{"title": "Using regression testing to analyze the impact of changes to variability models on products\n", "abstract": " Industrial product lines are typically maintained for a long time and evolve continuously to address changing requirements and new technologies. Already derived products often have to be re-derived after such changes to benefit from new and updated features. Product line engineers thus frequently need to analyze the impact of changes to variability models to prevent unexpected changes of re-derived products. In this paper we present a tool-supported approach that informs engineers about the impacts of variability model changes on existing products. Regression tests are used to determine whether existing product configurations and generated product outputs can be re-derived without unexpected effects. We evaluate the feasibility of the approach based on changes observed in a real-world software product line. More specifically, we show how our approach helps engineers performing specific evolution tasks\u00a0\u2026", "num_citations": "33\n", "authors": ["1462"]}
{"title": "Mobile discovery of requirements for context-aware systems\n", "abstract": " Understanding the work context of future system users is essential in requirements engineering. It is particularly crucial when developing ubiquitous systems that react on context changes. This paper discusses the need for in-situ requirements elicitation approaches to build mobile and context-aware systems. We identify three different levels of support: The first level covers contextual techniques without tool support. Second level support is based on existing RE approaches and mobile tools. Third level support utilizes context-aware tools receiving context-specific information to guide analysts in the field. These tools enhance requirements gathering for ubiquitous systems. We present a context-aware tool prototype for on-site scenario walkthroughs and discuss how the underlying scenario-based approach needs to be adapted. Our tool-based approach was tested in an initial evaluation study. Finally, the\u00a0\u2026", "num_citations": "32\n", "authors": ["1462"]}
{"title": "A software assessment process for small software enterprises\n", "abstract": " Quality software products fulfilling the combined expectations of the customer are essential for success in the market, particularly for small software enterprises. The quality of a complex software product can only be based on performing a mature development process. The assessment of the software processes helps to determine the capability of an organization and to initiate a process improvement. For the assessment of organizations, several methodologies have been proposed. Examples include the CMM (Capability Maturity Model), BOOTSTRAP and the new standard ISO 15504, formerly called SPICE (Software Process Improvement Capability dEtermination). For small enterprises, however, high-priced and sophisticated assessment methods depending on several external consultants are inviable. This paper reports on the experiences of an assessment and improvement process in a small software\u00a0\u2026", "num_citations": "32\n", "authors": ["1462"]}
{"title": "Strada: A tool for scenario-based feature-to-code trace detection and analysis\n", "abstract": " Software engineers frequently struggle with understanding the relationships between the source code of a system and its requirements or high-level features. These relationships are commonly referred to as trace links. The creation and maintenance of trace links is a largely manual, time-consuming, and error- prone process. This paper presents STRADA (Scenario-based TRAce Detection and Analysis) - a tool that helps software engineers explore traces links to source code through testing. While testing is predominantly done to ensure the correctness of a software system, STRADA demonstrates a vital secondary benefit: by executing source code during testing it can be linked to requirements and features, thus establishing traceability automatically.", "num_citations": "31\n", "authors": ["1462"]}
{"title": "Configuration-aware change impact analysis (t)\n", "abstract": " Understanding variability is essential to allow the configuration of software systems to diverse requirements. Variability-aware program analysis techniques have been proposed for analyzing the space of program variants. Such techniques are highly beneficial, e.g., to determine the potential impact of changes during maintenance. This paper presents an interprocedural and configuration-aware change impact analysis (CIA) approach for determining possibly impacted products when changing source code of a product family. The approach further supports engineers, who are adapting specific product variants after an initial pre-configuration. The approach can be adapted to work with different variability mechanism, it provides more precise results than existing CIA approaches, and it can be implemented using standard control flow and data flow analysis. Using an industrial product line we report evaluation results\u00a0\u2026", "num_citations": "30\n", "authors": ["1462"]}
{"title": "Tailoring a COTS group support system for software requirements inspection\n", "abstract": " The inspection of early life-cycle artifacts such as requirement documents promises great benefits. However, research demonstrates that the inspection process is complex and expensive and that tool support would be highly desirable. Existing inspection tools focus largely on the inspection of source code. We have therefore devised groupware support for inspecting requirements. Based on our experience with adopting a group support system (GSS) for requirements negotiation, we decided to tailor this commercial GSS to support inspection of requirements. The paper discusses our concept of a Groupware-supported Requirements Inspection Process (GRIP) and shows that tailoring a COTS GSS works well to automate this process.", "num_citations": "30\n", "authors": ["1462"]}
{"title": "Complementing XP with requirements negotiation\n", "abstract": " Attaining consensus among the success-critical stakeholders is crucial for the success of any software engineering project. Extreme Programming (XP) addresses this fact by providing a set of negotiation-oriented practices. In this paper we discuss negotiation techniques that would nicely complement XP. We present the EasyWinWin requirements negotiation approach and discuss its potential benefits for XP.", "num_citations": "29\n", "authors": ["1462"]}
{"title": "Determining stakeholder needs in the workplace: How mobile technologies can help\n", "abstract": " Mobile technologies offer exciting new opportunities to improve important requirements processes. However, providing usable, useful mobile requirements engineering (RE) tools is challenging due to mobile devices' limitations and limited knowledge on successfully using mobile RE tools in the field. You can use the reported lessons learned as an initial guide to develop and use mobile RE tools successfully. We believe that mobile RE tools will complement rather than replace traditional approaches, and the combination of context-aware and conventional elicitation and negotiation approaches has the potential to improve the quality of requirements. Evaluation studies also revealed several issues, including biases arising from the limited information available on mobile devices; integrated training, process guidance, and tool support for analysts; and guidance for end users to discover and document their own\u00a0\u2026", "num_citations": "28\n", "authors": ["1462"]}
{"title": "Making mobile requirements engineering tools usable and useful\n", "abstract": " Recent advances in mobile computing technologies mean that mobile tools have the potential to support scenario-based techniques in the workplace, with potential benefits to requirements processes. However, mobile requirements engineering (RE) tools are a new idea, and little is known about their advantages and weaknesses. This paper reports empirical research to explore the use of mobile RE tools in practice. It describes a mobile scenario tool that we developed to discover requirements directly in the user's work context. It also describes the results from 3 evaluation studies that demonstrate that these tools can support workplace requirements discovery and documentation, although mobile RE tools pose new challenges that remain to be overcome", "num_citations": "28\n", "authors": ["1462"]}
{"title": "Developing a dsl-based approach for event-based monitoring of systems of systems: Experiences and lessons learned (e)\n", "abstract": " Complex software-intensive systems are often described as systems of systems (SoS) comprising heterogeneous architectural elements. As SoS behavior fully emerges during operation only, runtime monitoring is needed to detect deviations from requirements. Today, diverse approaches exist to define and check runtime behavior and performance characteristics. However, existing approaches often focus on specific types of systems and address certain kinds of checks, thus impeding their use in industrial SoS. Furthermore, as many SoS need to run continuously for long periods, the dynamic definition and deployment of constraints needs to be supported. In this paper we describe experiences of developing and applying a DSL-based approach for monitoring an SoS in the domain of industrial automation software. We evaluate both the expressiveness of our DSL as well as the scalability of the constraint checker\u00a0\u2026", "num_citations": "26\n", "authors": ["1462"]}
{"title": "A collaborative approach for product line scoping: A case study in collaboration engineering\n", "abstract": " Collaboration engineering facilitates the design of work practices for mission-critical tasks which are performed by groups rather than individuals. For example, product line scoping is a complex task which must balance the interests of stakeholders representing market, financial, and technical issues simultaneously with technical constraints arising from the reuse of typically complex legacy systems. Existing scoping approaches provide thorough guidelines but do not emphasize the collaborative aspects of this process. We propose a collaborative product line scoping approach for reengineering-based product line adoption which is based on involving success-critical stakeholders to balance business and technical concerns. The approach builds on guidelines and patterns from collaboration engineering and practices of existing scoping approaches. Our research also tests the usefulness and applicability of collaboration engineering concepts and its process design framework.", "num_citations": "26\n", "authors": ["1462"]}
{"title": "A collaborative approach for reengineering-based product line scoping\n", "abstract": " Product line scoping is an important activity in reengineering-based software product line adoption. Both business issues and technical concerns have to be handled adequately. However, involving stakeholders representing these different concerns is not straightforward. Agile methods strongly emphasize stakeholder involvement and customer collaboration. In this paper we propose a collaborative approach which is intended to complement existing approaches for reengineering of legacy products in product line engineering. It supports success-critical stakeholders working collaboratively to converge on a product map and a definition of reusable infrastructures. Our approach is based on the WinWin requirements negotiation method which facilitates stakeholder collaboration and guidance towards mutually acceptable solutions.", "num_citations": "26\n", "authors": ["1462"]}
{"title": "Evolution in dynamic software product lines: challenges and perspectives\n", "abstract": " In many domains systems need to run continuously and cannot be shut down for reconfiguration or maintenance tasks. Cyber-physical or cloud-based systems, for instance, thus often provide means to support their adaptation at runtime. The required flexibility and adaptability of systems suggests the application of Software Product Line (spl) principles to manage their variability and to support their reconfiguration. Specifically, Dynamic Software Product Lines (dspl) have been proposed to support the management and binding of variability at runtime. While spl evolution has been widely studied, it has so far not been investigated in detail in a dspl context. Variability models that are used in a dspl have to co-evolve and be kept consistent with the systems they represent to support reconfiguration even after changes to the systems at runtime. In this short paper we present a classification of the required operations for\u00a0\u2026", "num_citations": "25\n", "authors": ["1462"]}
{"title": "Software evolution in an industrial automation ecosystem: An exploratory study\n", "abstract": " In software ecosystems (SECOs) both internal and external engineers develop software solutions for specific market segments and customers based on common technological platforms. SECOs pose new challenges for software engineering as the platforms are evolved by different development teams and communities. Despite a significant body of research only few empirical results are available on software evolution in SECOs. This paper reports results of an exploratory case study on change characteristics in an industrial automation SECO. We apply Buckley et al.'s framework of software change to characterize evolution in an industrial automation SECO. We further discuss evolution challenges we derived from our analyses.", "num_citations": "25\n", "authors": ["1462"]}
{"title": "Facilitating the evolution of products in product line engineering by capturing and replaying configuration decisions\n", "abstract": " Software product lines rely on developing reusable artifacts and defining their variability in models to support and accelerate the derivation of individual products. A major challenge in product lines is the continuous evolution of both the reusable artifacts and derived products. Products that have been derived from a product line have to be updated regularly, e.g., after bugfixes or the development of new features. Changes to reusable artifacts and variability models have to be propagated to derived products. The aim of our research is to provide automated support for the evolution of products derived from product lines by capturing and replaying configuration decisions. Our PUPLE (Product Updates in Product Line Engineering) approach supports updating derived products after changes to the product line they have been derived from. It exploits the structure of variability models and uses change-tracking\u00a0\u2026", "num_citations": "25\n", "authors": ["1462"]}
{"title": "Feature-oriented evolution of automation software systems in industrial software ecosystems\n", "abstract": " In the domain of industrial automation many companies nowadays need to serve a mass market while at the same time customers demand individual customer-specific solutions. Such customizations often apply to individual products only but may also be needed at the level of product lines for whole market segments. To handle this problem, development is frequently organized in software ecosystems (SECOs), i.e., interrelated software product lines involving internal and external developers. This paper introduces an approach supporting feature-oriented, distributed development and evolution in industrial SECOs. It is common industrial practice to first derive initial products from a product line, then adding and adapting features to satisfy individual customer requirements, possibly followed by merging back these changes into the original product line. Our approach goes beyond this practice and also allows to\u00a0\u2026", "num_citations": "24\n", "authors": ["1462"]}
{"title": "A requirements monitoring model for systems of systems\n", "abstract": " Many software systems today can be characterized as systems of systems (SoS) comprising interrelated and heterogeneous systems developed by diverse teams over many years. Due to their scale, complexity, and heterogeneity engineers face significant challenges when determining the compliance of SoS with their requirements. Requirements monitoring approaches are a viable solution for checking system properties at runtime. However, existing approaches do not adequately consider the characteristics of SoS: different types of requirements exist at different levels and across different systems; requirements are maintained by different stakeholders; and systems are implemented using diverse technologies. This paper describes a three-dimensional requirements monitoring model (RMM) for SoS providing the following contributions: (i) our approach allows modeling the monitoring scopes of requirements with\u00a0\u2026", "num_citations": "24\n", "authors": ["1462"]}
{"title": "Identifying inactive code in product lines with configuration-aware system dependence graphs\n", "abstract": " Application engineers frequently create customer-specific products in two stages: the required software components are first selected to create an initial product which is then evolved by refining the selected features and adapting the code to meet the customers' requirements. For instance, developers frequently set configuration options in the code to adjust the product. However, given that such changes are often necessary in the entire code base it is hard to know which part of the code is still relevant for the chosen configuration options. This means that engineers need to understand and maintain a lot of code that is potentially inactive in a particular product variant. Existing approaches provide only partial solutions: for instance, feature-to-code mappings do not adequately consider complex code dependencies of the implemented features. Static analysis techniques provide better results but usually do not consider\u00a0\u2026", "num_citations": "24\n", "authors": ["1462"]}
{"title": "Success factors for empirical studies in industry-academia collaboration: A reflection\n", "abstract": " We conducted several empirical studies over the last couple of years as part of a collaboration with industrial partners in the area of software product lines. Our studies differed regarding their motivation and goals, their scope, the research methods applied, and the involved subjects. In this experience paper we briefly summarize the studies and their key characteristics. We reflect on our experiences based on the success factors for industry-academia collaborations by Wohlin et al. We discuss the role of empirical studies in long-term industry-academia collaborations and present lessons learned.", "num_citations": "24\n", "authors": ["1462"]}
{"title": "Scenarios in the wild: Experiences with a contextual requirements discovery method\n", "abstract": " [Context and motivation] A number of ethnographic approaches are available to gather requirements where they emerge, i.e. in the workplace of future system users. [Question/problem] Most of these approaches do not provide guidance and software tool support for on-site analysts. [Principal ideas/results] In this paper we present a tool-supported contextual method that combines key benefits of contextual inquiry and scenario-based techniques. It aims to improve guidance and support for on-site analysts performing a contextual requirements discovery. [Contribution] We applied this method in the Austrian Alps to discover stakeholder\u2019s requirements for a ski tour navigation system. This paper reports on this inquiry and analyses its results. Moreover, we discuss lessons learned and conclusions.", "num_citations": "24\n", "authors": ["1462"]}
{"title": "Dealing with changes in service-oriented computing through integrated goal and variability modelling\n", "abstract": " Variability modelling and service- orientation are important approaches for achieving both the flexibility and adaptability required by stakeholders of software systems. In this paper we present an approach that integrates domain models captured in the i* modelling framework with variability models to support runtime monitoring and adaptation of service-oriented systems. We believe that approaches integrating goal-oriented modelling and variability management are needed to build, operate, and evolve such systems. We illustrate our approach using two scenarios and present a tentative tool architecture based on an existing product line engineering tool suite.", "num_citations": "24\n", "authors": ["1462"]}
{"title": "A family of experiments to investigate the effects of groupware for software inspection\n", "abstract": " It is widely accepted that the inspection of software artifacts can find defects early in the development process and gather information on the quality of the evolving product. However, the inspection process is resource-intensive and involves tedious tasks, such as searching, sorting, and checking. Tool support for inspections can help accelerating these tasks and allows inspectors to concentrate on tasks particularly needing human attention. Only few tools are available for inspections. We have thus developed a set of groupware tools for both individual defect detection and inspection meetings to lower the effort of inspections and to increase their efficiency. This paper presents the Groupware-supported Inspection Process (GrIP) and describes tools for inspecting software requirements. As only little empirical work exists that directly compares paper-based and tool-based software inspection, we conducted a\u00a0\u2026", "num_citations": "24\n", "authors": ["1462"]}
{"title": "Multi-purpose, multi-level feature modeling of large-scale industrial software systems\n", "abstract": " Feature models are frequently used to capture the knowledge about configurable software systems and product lines. However, feature modeling of large-scale systems is challenging as models are needed for diverse purposes. For instance, feature models can be used to reflect the perspectives of product management, technical solution architecture, or product configuration. Furthermore, models are required at different levels of granularity. Although numerous approaches and tools are available, it remains hard to define the purpose, scope, and granularity of feature models. This paper first reports results and experiences of an exploratory case study on developing feature models for two large-scale industrial automation software systems. We report results on the characteristics and modularity of the feature models, including metrics about model dependencies. Based on the findings from the study, we\u00a0\u2026", "num_citations": "23\n", "authors": ["1462"]}
{"title": "A flexible framework for runtime monitoring of system-of-systems architectures\n", "abstract": " Many software systems today have system-of systems (SoS) architectures comprising interrelated and heterogeneous systems, which are developed by multiple teams and companies. Such systems emerge gradually and it is hard to analyze or predict their behavior due to their scale and complexity. In particular, certain behavior only emerges at runtime due to complex interactions between the involved systems and their environment. Monitoring the behavior of SoS at runtime is thus essential during development and evolution. However, existing monitoring approaches are often limited to particular architectural styles or technologies and are thus hard to apply in SoS architectures. In this paper we first analyze the challenges for monitoring SoS based on an industrial SoS for the automation of metallurgical plants. We then propose a flexible framework for monitoring heterogeneous systems within a SoS. We\u00a0\u2026", "num_citations": "23\n", "authors": ["1462"]}
{"title": "Custom-developed vs. model-based configuration tools: Experiences from an industrial automation ecosystem\n", "abstract": " High demands regarding the variability of automation software motivate organizations to automate the configuration process. In practice, this often leads to the development of custom configuration tools designed specifically for configuring the automation software they were developed for. This approach works well as long as both, the development of the software and the configurator are under the full control of the organization. However, software platforms are increasingly open, ie, key customers add capabilities and thereby change the platform's variability. Often, these customers create a new platform themselves, which they offer to their customers. Moving from a closed platform to a software ecosystem means that development and variability management happen at multiple layers involving multiple teams with different backgrounds. This poses new requirements regarding the flexibility of configuration tools. In\u00a0\u2026", "num_citations": "23\n", "authors": ["1462"]}
{"title": "Goal-driven adaptation of service-based systems from runtime monitoring data\n", "abstract": " Service-based systems need to provide flexibility to adapt both to evolving requirements from multiple, often conflicting, ephemeral and unknown stakeholders, as well as to changes in the runtime behavior of their component services. Goal-oriented models allow representing the requirements of the system whilst keeping information about alternatives. We present the MAESoS approach which uses i* diagrams to identify quality of service requirements over services. The alternatives are extracted and kept in a variability model. A monitoring infrastructure identifies changes in runtime behavior that can propagate up to the level of stakeholder goals and trigger the required adaptations. We illustrate the approach with a scenario of use.", "num_citations": "23\n", "authors": ["1462"]}
{"title": "Integrating groupware and CASE capabilities for improving stakeholder involvement in requirements engineering\n", "abstract": " A methodology for collaborative requirements engineering has to provide intuitive and straightforward means for involving success-critical stakeholders like customers, users, and developers. A promising approach is to provide a set of views presenting comprehensible portions of the evolving requirements model to the stakeholders. We have developed such views for requirements negotiation in the course of the EasyWinWin project. Tools supporting these views need to provide support for stakeholder collaboration as well as modeling and analysis. We have therefore integrated two COTS products: a collaboration platform and a CASE environment.", "num_citations": "23\n", "authors": ["1462"]}
{"title": "Supporting the evolution of product line architectures with variability model fragments\n", "abstract": " Evolution is a permanent challenge in product line engineering. Reusable assets such as software components or documents evolve continuously due to new customer requirements or technology changes. This leads to modifications or extensions of the product line's variability models describing the reference architecture. Due to the large size of product lines, single stakeholders or teams can only maintain a small part of a system which poses additional challenges for evolution. This paper presents a tool-supported approach for building and maintaining variability models of large-scale product lines. We structure variability models into multiple model fragments of manageable size that can be created and maintained by individual teams. Model fragments can be merged semi- automatically into a variability model. We illustrate the approach with examples from ongoing industry collaboration.", "num_citations": "22\n", "authors": ["1462"]}
{"title": "Requirements engineering tools go mobile\n", "abstract": " Software tools that support or automate software engineering tasks are typically available on traditional desktop-based workstations. In contrast, mobile tools for requirements engineers offer considerable potential. In the last few years the capabilities of mobile devices such as personal digital assistants (PDAs) have advanced considerably. These devices now provide faster processing, increased storage, and improved connectivity. Hence, mobile computing will become a dominant computing paradigm. These developments let us envision mobile tools for RE that are sophisticated enough to be used in real-world projects.", "num_citations": "22\n", "authors": ["1462"]}
{"title": "A groupware-supported inspection process for active inspection management\n", "abstract": " Inspection is an important approach to reduce defects in software engineering artifacts. However, research and practice show that the performance of manual inspections fluctuates considerably. Based on experiences we gained in large-scale controlled inspection experiments we propose a concept for improved inspection management relying on (a) the transparent collection of detailed data on the actual inspection process and (b) groupware support for the flexible combination of inspection process modeling and data-driven process analysis. We expect an automated approach to be of versatile help both for researchers who use it for monitoring controlled experiments and for practitioners who may use it as part Of their infrastructure for inspection management and transparent data collection.", "num_citations": "22\n", "authors": ["1462"]}
{"title": "The mobile scenario presenter: Integrating contextual inquiry and structured walkthroughs\n", "abstract": " Rapid advances in the capabilities of mobile computing devices provide new opportunities to overcome limitations with existing desktop-based requirements engineering tools. In particular mobile tools allow analysts to take acquisition, analysis and modelling tools to the stakeholders in their workplace, with potential benefits for requirements completeness and correctness. In this paper we describe the Mobile Scenario Presenter, an extension to the ART-SCENE environment designed to undertake scenario walkthroughs in the workplace using mobile computing devices, report some lessons learned during the design of the tool, and discuss future research directions.", "num_citations": "21\n", "authors": ["1462"]}
{"title": "Mining constraints for event-based monitoring in systems of systems\n", "abstract": " The full behavior of software-intensive systems of systems (SoS) emerges during operation only. Runtime monitoring approaches have thus been proposed to detect deviations from the expected behavior. They commonly rely on temporal logic or domain-specific languages to formally define requirements, which are then checked by analyzing the stream of monitored events and event data. Some approaches also allow developers to generate constraints from declarative specifications of the expected behavior. However, independent of the approach, deep domain knowledge is required to specify the desired behavior. This knowledge is often not accessible in SoS environments with multiple development teams independently working on different, heterogeneous systems. In this New Ideas Paper we thus describe an approach that automatically mines constraints for runtime monitoring from event logs recorded in\u00a0\u2026", "num_citations": "20\n", "authors": ["1462"]}
{"title": "Simulating evolution in model-based product line engineering\n", "abstract": " ContextNumerous approaches are available for modeling product lines and their variability. However, the long-term impacts of model-based development on maintenance effort and model complexity can hardly be investigated due to a lack of empirical data. Conducting empirical research in product line engineering is difficult as companies are typically reluctant to provide access to data from their product lines. Also, many benefits of product lines can be measured only in longitudinal studies, which are difficult to perform in most environments.ObjectiveIn this paper, we thus aim to explore the benefit of simulation to investigate the evolution of model-based product lines.MethodWe present a simulation approach for exploring the effects of product line evolution on model complexity and maintenance effort. Our simulation considers characteristics of product lines (e.g., size, dependencies in models) and we experiment\u00a0\u2026", "num_citations": "20\n", "authors": ["1462"]}
{"title": "Feature modeling of two large-scale industrial software systems: Experiences and lessons learned\n", "abstract": " Feature models are frequently used to capture the knowledge about configurable software systems and product lines. However, feature modeling of large-scale systems is challenging as many models are needed for diverse purposes. For instance, feature models can be used to reflect the perspectives of product management, technical solution architecture, or product configuration. Furthermore, models are required at different levels of granularity. Although numerous approaches and tools are available, it remains hard to define the purpose, scope, and granularity of feature models. In this paper we thus present experiences of developing feature models for two large-scale industrial automation software systems. Specifically, we extended an existing feature modeling tool to support models for different purposes and at multiple levels. We report results on the characteristics and modularity of the feature models\u00a0\u2026", "num_citations": "19\n", "authors": ["1462"]}
{"title": "Modifiers for quality assurance in group facilitation\n", "abstract": " A key task of a professional facilitator is to assure the quality of the knowledge products created through collaborative effort. To manage the quality of the knowledge a group generates, facilitators attend to, judge, and question the quality of the contributions a group makes, the decisions it makes and the commitments its members make toward achieving the group\u2019s goals. When facilitators or group members detect deficiencies in ideas, decisions, agreements, or artifacts, facilitators may need to intervene to support the group in improving the quality of their output, without disrupting the flow of the group process. In this paper we present a framework for quality assessment and a toolbox with flexible interventions that can be added to a collaborative process on the fly as soon as quality deficiencies are detected. The toolbox is a set of conditional adjustment interventions that a facilitator can add to other\u00a0\u2026", "num_citations": "19\n", "authors": ["1462"]}
{"title": "Product line bundles for tool support in multi product lines\n", "abstract": " Many organizations adopt a product line approach to increase the degree of reuse in software development and to deal with the variability of their systems. Large-scale systems are often composed of multiple heterogeneous subsystems that are based on diverse technological platforms. Providing product line engineering tools for such multi product line environments is challenging as tool requirements of stakeholders can differ significantly. In this paper we present product line bundles (PLiBs), an approach that supports developers in tailoring and extending product line tools in a multi product line context. Based on an industrial example, we examine the specific requirements and challenges of using PLiBs to manage tool extensions in multi product lines and to simplify the integration and deployment of system-specific tool features.", "num_citations": "19\n", "authors": ["1462"]}
{"title": "Flexibility and end-user support in model-based product line tools\n", "abstract": " Software product lines aim at reducing time-to-market and increasing quality through extensive reuse. Effective tool support is essential in product line engineering. Tools need to be flexible and adaptable to support specific needs of engineers in different domains and development contexts. As product lines cover both business and technical aspects, tools need to meet the needs of both business-oriented and technical users. We discuss these challenges using four practical examples, present the DOPLER product line tool suite, and report results of using it in the four examples.", "num_citations": "18\n", "authors": ["1462"]}
{"title": "Product line tools are product lines too: Lessons learned from developing a tool suite\n", "abstract": " Tool developers are facing high expectations regarding the capabilities and usability of software engineering tools. Users expect tools which are tailored to their specific needs and integrated in their environment. This increases the complexity of tools and makes their customization more difficult, although numerous mechanisms supporting adaptability and extensibility are available. In this experience paper we report on the lessons we have learned when developing a tool suite for product line engineering. Our experiences suggest that software engineering tools should be designed as product lines.", "num_citations": "18\n", "authors": ["1462"]}
{"title": "Understanding Decision-Oriented Variability Modelling.\n", "abstract": " Researchers and practitioners have been developing a wide range of techniques and tools to model and manage variability as a response to the heterogeneity of application areas and the diversity of implementation practices in different domains. In our own research we have been developing a tool-supported approach to decision-oriented variability modelling, which is highly customizable to domain-specific needs. In the past we have reported on our experiences on using the approach and its benefits in diverse industrial contexts. In this paper we present a more formal description of our approach and define the execution semantics of decisionoriented variability models.", "num_citations": "18\n", "authors": ["1462"]}
{"title": "Making every student a winner: The WinWin approach in software engineering education\n", "abstract": " This paper shows how Theory-W and the WinWin requirements negotiation approach are used in software engineering education at several universities in the US, Europe, and Asia. We briefly describe Theory-W, the WinWin negotiation model, available processes, and tool support. We then discuss how students can benefit from WinWin in their software engineering education. We explore different options for teaching the approach and present concrete examples and experiences from the different universities.", "num_citations": "18\n", "authors": ["1462"]}
{"title": "Groupware support for software requirements inspection\n", "abstract": " The inspection of software products has proven to be an effective approach to find defects. Inspecting requirements documents offers especially large benefits as it removes defects very early in the development process. On the other hand inspection is also an expensive and sometimes cumbersome process resulting in a large amount of inspection material that has to be sorted, searched, and consolidated. Existing inspection tools whose success has been empirically evaluated are focused on code inspection and fall short for inspection needs of early life cycle documents like requirements specifications. Based (a) on empirical data from our experiments with paperbased inspection of requirements documents and (b) on our experience with groupware support for software requirements negotiation, we have developed a concept for a groupwaresupported requirements inspection process. In this paper we present our concept, discuss potential benefits for software requirements inspection, and propose an approach for empirical evaluation.", "num_citations": "18\n", "authors": ["1462"]}
{"title": "Assessing the usefulness of a requirements monitoring tool: a study involving industrial software engineers\n", "abstract": " Requirements monitoring approaches support defining and checking the run-time behavior and performance characteristics of complex software systems. However, although numerous monitoring tools have been described in the literature, hardly any empirical studies exist on their usefulness for software engineering practitioners. Empirical data on usefulness, however, is important for practitioners to select and adapt the capabilities of monitoring tools for their application context. This paper first describes common capabilities of requirements monitoring tools and then empirically assesses the usefulness of these capabilities as implemented in the monitoring tool REMINDS. We report findings from an initial assessment of the tool we performed using the Cognitive Dimensions of Notations Framework. We then present results of a usefulness study involving software engineers of a large company from the domain of\u00a0\u2026", "num_citations": "17\n", "authors": ["1462"]}
{"title": "Exploring scenario forms and ways of use to discover requirements on airports that minimize environmental impact\n", "abstract": " This scientific evaluation paper investigates the effectiveness of different scenario forms and uses on requirements discovery. Lt reports results from the application of scenario tools during the specification of requirements on socio-technical systems to improve the environmental impact of aircraft operations at a regional UK airport. Stakeholders walked through scenarios in both text and visual simulation form, and discovered requirements during workshops and whilst observing actors in their workplace. Results revealed both qualitative and quantitative differences in discovered requirements that have potential implications for models of scenario-based requirements discovery and the design of scenario tools.", "num_citations": "17\n", "authors": ["1462"]}
{"title": "Capturing multimedia requirements descriptions with mobile RE tools\n", "abstract": " As tools for requirements engineering (RE) become available on mobile devices using their multimedia capabilities to capture requirements descriptions is an obvious opportunity. This paper reports on two different approaches enabling mobile analysts and endusers to add multimedia descriptions to requirements. Based on our mobile tool for scenario-based RE we compare a solution based on the COTS package Microsoft Pocket Word with a novel plug-in solution providing more flexibility for tool users.", "num_citations": "17\n", "authors": ["1462"]}
{"title": "Enhancing GSS-based requirements negotiation with distributed and mobile tools\n", "abstract": " Conventional team processes in software engineering are typically designed to support face-to-face interactions among stakeholders. This paradigm has changed and distributed software development (DSE) becomes a dominant approach in many settings. Despite the fact that distributed software engineering is inevitable in today's software engineering practice there are still many unsolved issues. This paper reports our research in distributed and mobile requirement negotiation. We describe the EasyWinWin (EWW) negotiation approach and identify issues in face-to-face negotiations and discuss how we aim to overcome these with distributed and mobile tools. We also report the results of an empirical exploration study examining the usability of our tools.", "num_citations": "17\n", "authors": ["1462"]}
{"title": "A case study on the evolution of a component-based product line\n", "abstract": " Product line engineering is an approach that works well for managing the anticipated variability of software systems as demonstrated in numerous studies. However, little empirical research and few approaches exist for dealing with the unanticipated evolution of product lines. As a result, the understanding of product line evolution is still weak and the maturity of approaches and tools supporting evolution is often insufficient. In this paper we present results of a case study on impact analyses and desired tool support in product line evolution. Our findings are based on observing 30 person months of development. We analyzed changes made to a product line in typical evolution scenarios by involving the key developers. We used empirical data on observed development activities and impact analyses to derive a trace information model showing frequently desired trace links. We discuss lessons learned and\u00a0\u2026", "num_citations": "16\n", "authors": ["1462"]}
{"title": "Improving awareness during product derivation in multi-user multi product line environments\n", "abstract": " Existing product derivation approaches focus on support for single users resolving variability based on a single variability model. However, in practice multiple users perform product derivation of large-scale systems with system-of-systems architectures in a distributed and asynchronous man-ner. It is infeasible to describe the variability of such multi product lines with one integrated model. Rather, several mod-els are needed. Existing research mainly focuses on supporting modeling in multi product lines. The aim of our ongoing re-search is however to improve awareness for multiple users involved in product derivation in such environments, ie, to make users configuring one subsystem aware of the relevant configuration decisions made for other subsystems. In this paper we describe an industrial scenario of a multi product line and derive requirements for awareness support. We present a preliminary approach based on the\" pub-lish/subscribe\" pattern and a tool prototype that aims at im-proving awareness in product derivation by sharing decisions across different derivation projects. Keywords-multi product lines; product derivation; awareness I.", "num_citations": "16\n", "authors": ["1462"]}
{"title": "Development and adaptation of IEC 61499 automation and control applications with runtime variability models\n", "abstract": " Developers maintaining distributed control systems are facing significant problems when dealing with changing customer requirements during the development and operation of industrial production facilities. Research has so far largely focused on implementation-level engineering challenges. Model-driven approaches are seen as promising for dealing with the increasing complexity of adapting distributed control systems. We present an approach for capturing architectural variability of distributed IEC 61499 automation and control systems based on product line variability models. Our automated approach supports decision-driven derivation and adaptation of systems at runtime.", "num_citations": "16\n", "authors": ["1462"]}
{"title": "A collaborative method for reuse potential assessment in reengineering-based product line adoption\n", "abstract": " Software product lines are rarely developed from scratch. Instead the development of a product line by reengineering existing systems is a more common scenario, which relies on the collaboration of diverse stakeholders to lay its foundations. The paper describes a collaborative scoping approach for organizations migrating existing products to a product line. The approach uses established practices from the field of reengineering and architectural recovery and synthesizes them in a collaborative process. The proposed approach employs best practices and tools from the area of collaboration engineering to achieve effective collaboration. The paper presents a case study as initial validation of the proposed approach.", "num_citations": "16\n", "authors": ["1462"]}
{"title": "Developing and evolving a DSL-based approach for runtime monitoring of systems of systems\n", "abstract": " Complex software-intensive systems are often described as systems of systems (SoS) due to their heterogeneous architectural elements. As SoS behavior is often only understandable during operation, runtime monitoring is needed to detect deviations from requirements. Today, while diverse monitoring approaches exist, most do not provide what is needed to monitor SoS, e.g., support for dynamically defining and deploying diverse checks across multiple systems. In this paper we report on our experiences of developing, applying, and evolving an approach for monitoring an SoS in the domain of industrial automation software, that is based on a domain-specific language (DSL). We first describe our initial approach to dynamically define and check constraints in SoS at runtime and then motivate and describe its evolution based on requirements elicited in an industry collaboration project. We furthermore\u00a0\u2026", "num_citations": "15\n", "authors": ["1462"]}
{"title": "Modeling multiplicity and hierarchy in product line architectures: Extending a decision-oriented approach\n", "abstract": " Engineers developing large-scale industrial software systems need to instantiate, configure, and deploy many different types of reusable components. The number of component instances required is typically unknown when defining the systems' architecture and variability but depends on customer requirements only known during configuration. The hierarchy of dynamically created component instances further results in complex dependencies between configuration decisions. To deal with the multiplicity and hierarchy of components product line engineers thus need a modeling approach capable of expressing the dependencies among dynamically instantiated components and related configuration decisions. Decision-oriented variability modeling approaches are highly useful in product line engineering to support product derivation and to guide users through the configuration process. However, current\u00a0\u2026", "num_citations": "15\n", "authors": ["1462"]}
{"title": "Supporting program analysis for non-mainstream languages: experiences and lessons learned\n", "abstract": " Static code analysis techniques are widely and successfully used for mainstream programming languages. However, domain-specific languages and company-specific variations of languages often lack the same level of support. An example is the domain of industrial automation, where programmable logic controller programs are mainly written in languages conforming to the IEC 61131-3 standard, a non-mainstream family of languages. This experience paper reports about the development of a program analysis framework for the IEC 61131-3 languages. We use OMG's Abstract Syntax Tree Meta-Model (ASTM) as an abstract representation and show our extensions of this model to represent the different IEC 61131-3 languages. Using this representation our approach generates Jimple code, an intermediate representation used by the Soot program analysis framework. We use Soot's standard analysis methods\u00a0\u2026", "num_citations": "14\n", "authors": ["1462"]}
{"title": "Using feature feeds to improve developer awareness in software ecosystem evolution\n", "abstract": " In many domains organizations need to serve a mass market while at the same time customers request highly individual solutions. Companies thus form software ecosystems (SECOs) comprising various related hardware and software product lines (SPLs). Technology changes, internal enhancements, and customer requests drive the evolution of such SECOs. Multiple projects are conducted in parallel to deliver customized solutions to customers. Developers often adhere to a staged configuration process: first, required software components are selected to derive an initial product, which is then evolved by refining features and adapting source code to meet customer requirements. These customer-specific solutions are often created using a clone-and-own approach and typically contain features potentially reusable in other solutions. However, the awareness of developers about such platform extensions is typically\u00a0\u2026", "num_citations": "14\n", "authors": ["1462"]}
{"title": "Requirements modelling for multi-stakeholder distributed systems: Challenges and techniques\n", "abstract": " Multi-Stakeholder Distributed Systems (MSDS) are distributed systems in which subsets of the nodes are designed, owned, or operated by distinct stakeholders. New computing paradigms such as service-oriented computing mean that challenges posed by MSDS will be more dominant in the future. These challenges have particular implications for requirements engineering (RE). For example, in MSDS decisions about the system architecture are increasingly shifted from system design to system operation. In this paper we discuss the characteristics of MSDS and present a framework for structuring the MSDS research issues. Using an example we illustrate that existing RE approaches for goal modelling, variability modelling, and negotiation techniques can be used successfully if used in an integrated manner to address the identified challenges.", "num_citations": "14\n", "authors": ["1462"]}
{"title": "Tracking evolution in model-based product lines\n", "abstract": " Software product lines are complex and need to be maintained and evolved over many years. New customer requirements, new products derived, technology changes, and internal enhancements lead to continuous changes of the artifacts and models constituting a product line. Managing such changes therefore becomes a key issue during a product line\u2019s evolution. We propose an approach that supports multi-level monitoring of product line artifacts and models and continuous tracking of changes. We present tool support for evolution tracking in Eclipse workspaces and illustrate our approach with examples from DOPLER, an existing Eclipse-based product line environment. Keywords-product line engineering; evolution; change tracking I.", "num_citations": "13\n", "authors": ["1462"]}
{"title": "Value-based elicitation of product line variability: An experience report\n", "abstract": " Understanding and modeling the variability of an existing system is a highly critical and challenging task when adopting a product line approach. Only little guidance is available for identifying the variable elements in a complex system and for choosing the appropriate level of granularity for modeling. Also, product line engineers have to find a balance between the technically feasible variability and the externally visible variability reflecting the business perspective of an organization. In this paper we describe experiences in developing and applying a value-based process for eliciting product line variability which aims at integrating the technical and business perspectives in product line engineering. We developed the process in a series of workshops carried out with our industry partner Siemens VAI, the world\u2019s leading company in plant building for the iron, steel, and aluminum industries. 1.", "num_citations": "13\n", "authors": ["1462"]}
{"title": "Change impact analysis for maintenance and evolution of variable software systems\n", "abstract": " Understanding variability is essential to allow the configuration of software systems to diverse requirements. Variability-aware program analysis techniques have been proposed for analyzing the space of program variants. Such techniques are highly beneficial, e.g., to determine the potential impact of changes during maintenance. This article presents an interprocedural and configuration-aware change impact analysis (CIA) approach for determining the possibly impacted source code elements when changing the source code of a product family. The approach also supports engineers, who are adapting the code of specific product variants after an initial pre-configuration. The approach can be adapted to work with different variability mechanisms, it is more precise than existing CIA approaches, and it can be implemented using standard control flow and data flow analysis. We report evaluation results on the\u00a0\u2026", "num_citations": "12\n", "authors": ["1462"]}
{"title": "Variability management for a runtime monitoring infrastructure\n", "abstract": " Many software systems today are systems of systems (SoS), which are difficult to analyze due to their size, complexity, heterogeneity, and variability. For instance, unexpected behavior of SoS is often caused by the complex interactions between the involved systems and their environment at runtime. Monitoring infrastructures (MIs) provide support for engineers and support staff analyzing the behavior of SoS during development and operation. Variability plays an important role in MIs, however, while some approaches exist, managing variability of MIs remains challenging. In this paper, we describe how we applied a variability management approach to support the reconfiguration of a SoS monitoring infrastructure (MI) at runtime. Our approach provides configuration support for setting up the MI to reflect system variability. It also supports runtime reconfiguration of the MI to reflect the different monitoring tasks of users\u00a0\u2026", "num_citations": "12\n", "authors": ["1462"]}
{"title": "Monitoring and adaptation of service-oriented systems with goal and variability models\n", "abstract": " Variability modelling and service-orientation are important approaches for achieving both flexibility and adaptability required by stakeholders of software systems. In this paper, we present the MAESoS approach that utilizes goal and variability models to support runtime monitoring and adaptation of service-oriented systems. We illustrate our approach using two scenarios and present a tool architecture that integrates a monitoring tool and an existing tool for defining and executing variability models.", "num_citations": "12\n", "authors": ["1462"]}
{"title": "Feature-oriented development in industrial automation software ecosystems: Development scenarios and tool support\n", "abstract": " Due to increased market demands for highly customized and machine-specific solutions in manufacturing, industrial software systems are often developed as software product lines (SPL) and organized as software ecosystems (SECO) with internal and external developers composing individual solutions based on a common technological platform. In such settings, software development usually occurs in a multistage process: system variants initially derived from a platform are adapted and extended to meet specific requirements. This common approach, however, results in significant challenges for software development and maintenance. In this paper we review key challenges we have been observing when investigating our industrial partner's software ecosystems. We then present a feature-oriented development approach we have been developing to tackle those. Our approach is backed with static analysis\u00a0\u2026", "num_citations": "11\n", "authors": ["1462"]}
{"title": "Where has all my memory gone? determining memory characteristics of product variants using virtual-machine-level monitoring\n", "abstract": " Non-functional properties such as memory footprint have recently gained importance in software product line research. However, determining the memory characteristics of individual features and product variants is extremely challenging. We present an approach that supports the monitoring of memory characteristics of individual features at the level of Java virtual machines. Our approach provides extensions to Java virtual machines to track memory allocations and deal-locations of individual features based on a feature-to-code mapping. The approach enables continuous monitoring at the level of features to detect anomalies such as memory leaks, excessive memory consumption, or abnormal garbage collection times in product variants. We provide an evaluation of our approach based on different product variants of the DesktopSearcher product line. Our experiment with different program inputs demonstrates\u00a0\u2026", "num_citations": "11\n", "authors": ["1462"]}
{"title": "Evolving systems of systems: Industrial challenges and research perspectives\n", "abstract": " An increasing number of software systems today are systems of systems (SoS) comprising decentralized and heterogeneous systems with operational and managerial independence. The evolution of SoS is the rule and not the exception in practice due to frequently changing requirements, technologies, and markets. However, providing adequate support for the evolution of SoS is rather challenging as their behavior often emerges at runtime and is difficult to predict. Hence, SoS must be monitored during simulation and operation to ensure compliance with its requirements. In this position paper, we present challenges for SoS evolution from the domain of industrial automation. We discuss existing approaches supporting SoS evolution and derive research issues. We outline requirements for SoS evolution support and present key capabilities of a flexible monitoring and evolution infrastructure. We conclude with a\u00a0\u2026", "num_citations": "11\n", "authors": ["1462"]}
{"title": "An experiment family to investigate the defect detection effect of tool-support for requirements inspection\n", "abstract": " The inspection of software products can help to find defects early in the development process and to gather valuable information on product quality. An inspection is rather resource intensive and involves several tedious tasks like navigating, sorting, or checking. Tool support is thus hoped to increase effectiveness and efficiency. However, little empirical work is available that directly compares paper-based (i.e., manual) and tool-based software inspections. Existing reports on tool support for inspection generally tend to focus on code inspections while little can be found on requirements or design inspection. We report on an experiment family: two experiments on paper-based inspection and a third experiment to empirically investigate the effect of tool support regarding defect detection effectiveness and inspection effort in an academic environment with 40 subjects. Main results of the experiment family are: (a) The\u00a0\u2026", "num_citations": "11\n", "authors": ["1462"]}
{"title": "The role of valuation in value-based software engineering\n", "abstract": " Current state-of-the-practice and state-of-the-art in software engineering (SE) typically focuses on cost issues and technical considerations for decisionmaking as costs are generally easier to measure than benefits. Value-based SE emphasizes the concept of \u2018value\u2019in SE. However, so far the concept of value in SE is not well analyzed in its various dimensions. Furthermore, the process of measuring value, ie valuation, has mostly been discussed in the SE community from a mathematical perspective. In order to establish a comprehensive value-oriented valuation approach in SE we aim at applying valuation concepts from finance and economy, which try to appropriately quantify benefits, costs, and risks of a project or a project portfolio. We put a special focus on the value of information and individual preferences. We expect that such a value-oriented concept allows developing a more complete approach for project risk management.", "num_citations": "11\n", "authors": ["1462"]}
{"title": "Evaluating an Interactive Memory Analysis Tool: Findings from a Cognitive Walkthrough and a User Study\n", "abstract": " Memory analysis tools are essential for finding and fixing anomalies in the memory usage of software systems (e.g., memory leaks). Although numerous tools are available, hardly any empirical studies exist on their usefulness for developers in typical usage scenarios. Instead, most evaluations are limited to reporting performance metrics. We thus conducted a study to empirically assess the usefulness of the interactive memory analysis tool AntTracks Analyzer. Specifically, we first report findings from assessing the tool using a cognitive walkthrough, guided by the Cognitive Dimensions of Notations Framework. We then present the results of a qualitative user study involving 14 subjects who used AntTracks to detect and resolve memory anomalies. We report lessons learned from the study and implications for developers of interactive memory analysis tools. We hope that our results will help researchers and\u00a0\u2026", "num_citations": "10\n", "authors": ["1462"]}
{"title": "A prototype-based approach for managing clones in clone-and-own product lines\n", "abstract": " Feature models are commonly used in industrial contexts to guide and automate the derivation of product variants. However, in real-world product lines the derivation process goes beyond selecting and composing product features. Specifically, developers often perform clone-and-own reuse, ie, they copy, modify, and extend existing code to provide the functionality required by customers. Clones are created at different levels of granularity, ranging from individual features to entire systems. Refactoring and reverse engineering approaches have been proposed for dealing with cloned product variants. However, managing clones has not been addressed in the context of feature models. For instance, if clones are created to address customer requirements in specific product variants, the connection to the original feature models is frequently lost. We thus present a modeling approach based on prototypes, ie\u00a0\u2026", "num_citations": "10\n", "authors": ["1462"]}
{"title": "Reconciling requirements and architectures with the CBSP approach in an iPhone app project\n", "abstract": " There are only few methods available that help refining software requirements to software architectures. An example is the CBSP (Component-Bus-System-Property) approach that uses general architectural concerns to classify and refine requirements and to capture architectural trade-off issues and options. This paper reports about experiences of applying CBSP in an industrial project in the area of mobile applications. We illustrate CBSP using project examples. We discuss how the approach was tailored and present extensions we developed. In particular, we show how CBSP can be used together with the Goal-Question-Metric approach to guide architectural decisions. We close our paper with a discussion of lessons learned during this project.", "num_citations": "10\n", "authors": ["1462"]}
{"title": "A deployment infrastructure for product line models and tools\n", "abstract": " Industrial experiences show that support for sharing and deploying product line models and tools is essential when institutionalizing product line engineering. This paper presents key workflows together with an infrastructure providing support for this purpose. Our approach supports distributed users sharing work products during variability modeling, product derivation, and product line evolution. The approach is based on product line bundles (PLiBs) for packaging models and tool support for specific product lines. Using three industrial scenarios and an industrial product line example we demonstrate how our infrastructure supports the deployment of models and tools in practical settings.", "num_citations": "10\n", "authors": ["1462"]}
{"title": "Involving non-technicians in product derivation and requirements engineering: A tool suite for product line engineering\n", "abstract": " Deriving a product from a product line requires the involvement and cooperation of heterogeneous stakeholders such as customers, sales people, or engineers. Taking their different roles and needs into account is essential to exploit the possible benefits of product lines. In this paper we present the tool-supported product line engineering approach DOPLER. We demonstrate how the approach supports both non- technicians and engineers in product derivation and requirements engineering through a set of integrated tools.", "num_citations": "10\n", "authors": ["1462"]}
{"title": "Coordinating Multi-Team Variability Modeling in Product Line Engineering\n", "abstract": " In product line engineering variability models capture the commonalities and variability of core assets and guide product derivation. In large-scale systems the knowledge that is required for creating and evolving variability models is typically distributed among different heterogeneous stakeholders. For example, sales people usually think in terms of features and monetary resources while developers emphasize architectural elements, software resources, and configuration parameters. This paper is based on experiences from an ongoing industrial research project and proposes an approach for sharing variability knowledge in a multi-team development organization. Our approach allows different teams to create a variability model from their point of view (eg, for a subsystem they are responsible for). Subsequently all created models are combined to one integrated variability model. 1.", "num_citations": "10\n", "authors": ["1462"]}
{"title": "Variability and consistency in mechatronic design\n", "abstract": " Mechatronic products combine hardware and software; and today, much of software engineering is directly or indirectly involved to support mechatronic design. Due to the high level of standardization, especially among its hardware, the design of mechatronic products is strongly characterized by integrating standardized components and thus seems an ideal environment for product line engineering techniques, which allow dealing with the variability of reusable components if fully definable a priori. However, while many aspects of mechatronic design are standardized, there is also the need for the continuous construction of new components. However, today, it is difficult to seamlessly integrate the reuse of standardized components with the development of new components. This article presents a model-based approach for integrating component variants with user-defined components to better support the\u00a0\u2026", "num_citations": "9\n", "authors": ["1462"]}
{"title": "Take your mobile device out from behind the requirements desk\n", "abstract": " Mobile computing devices are everywhere. Recent technological improvements let most wireless devices connect to the Internet and many Web services. This presents exciting new opportunities for requirements analysts. Shouldn't we be able to capture requirements anywhere, anytime using our mobile devices? Why not capture requirements on your mobile telephone and then phone them in? You can do a lot of neat things with mobile devices in your requirements process. Some of these ideas draw on and demonstrate research that we've undertaken when implementing several requirements applications on mobile devices", "num_citations": "9\n", "authors": ["1462"]}
{"title": "Can we Predict Performance Events with Time Series Data from Monitoring Multiple Systems?\n", "abstract": " Predicting performance-related events is an important part of proactive fault management. As a result, many approaches exist for the context of single systems. Surprisingly, despite its potential benefits, multi-system event prediction, ie, using data from multiple, independent systems, has received less attention. We present ongoing work towards an approach for multi-system event prediction that works with limited data and can predict events for new systems. We present initial results showing the feasibility of our approach. Our preliminary evaluation is based on 20 days of continuous, preprocessed monitoring time series data of 90 independent systems. We created five multi-system machine learning models and compared them to the performance of single-system machine learning models. The results show promising prediction capabilities with accuracies and F1-scores over 90% and false-positive-rates below 10%.", "num_citations": "8\n", "authors": ["1462"]}
{"title": "Visualization support for requirements monitoring in systems of systems\n", "abstract": " Industrial software systems are often systems of systems (SoS) whose full behavior only emerges at runtime. The systems and their interactions thus need to be continuously monitored and checked during operation to determine compliance with requirements. Many requirements monitoring approaches have been proposed. However, only few of these come with tools that present and visualize monitoring results and details on requirements violations to end users such as industrial engineers. In this tool demo paper we present visualization capabilities we have been developing motivated by industrial scenarios. Our tool complements ReMinds, an existing requirements monitoring framework, which supports collecting, aggregating, and analyzing events and event data in architecturally heterogeneous SoS. Our visualizations support a `drill-down' scenario for monitoring and diagnosis: starting from a graphical status\u00a0\u2026", "num_citations": "8\n", "authors": ["1462"]}
{"title": "Supporting multiplicity and hierarchy in model-based configuration: experiences and lessons learned\n", "abstract": " When developing large-scale industrial software systems engineers need to instantiate, configure, and deploy diverse reusable components. The number of component instances required depends on customer requirements only known during configuration and is typically unknown when modeling the systems\u2019 variability. Also, the hierarchy of dynamically created component instances leads to complex dependencies between configuration decisions. Dealing with component multiplicity and hierarchy thus requires an approach capable of expressing the dependencies among dynamically instantiated components and configuration decisions. Furthermore, users need tool support for navigating the complex decision space during configuration. In this experience paper we report on applying a decision-oriented modeling approach for defining component variability, multiplicity, and hierarchy. We further present\u00a0\u2026", "num_citations": "8\n", "authors": ["1462"]}
{"title": "A constraint mining approach to support monitoring cyber-physical systems\n", "abstract": " The full behavior of cyber-physical systems\u00a0(CPS) emerges during operation only, when the systems interact with their environment. Runtime monitoring approaches are used to detect deviations from the expected behavior. While most monitoring approaches assume that engineers define the expected behavior as constraints, the deep domain knowledge required for this task is often not available. We describe an approach that automatically mines constraint candidates for runtime monitoring from event logs recorded from CPS. Our approach extracts different types of constraints on event occurrence, timing, data, and combinations of these. The approach further presents the mined constraint candidates to users and offers filtering and ranking strategies. We demonstrate the usefulness and scalability of our approach by applying it to event logs from two real-world CPS: a plant automation software system\u00a0\u2026", "num_citations": "7\n", "authors": ["1462"]}
{"title": "Supporting model maintenance in component-based product lines\n", "abstract": " Software product line engineering aims at increasing software quality and development productivity by mastering the variability of large software systems. Models are frequently used to define the reusable assets and the restrictions regarding asset composition in different products. However, product line engineering is challenged by evolution. Reusable assets such as software components need to be adapted to meet new customer or market requirements as well as technological needs. In this paper we present an approach that supports the maintenance of product line models by checking their consistency with the available components. We describe algorithms and heuristics for creating and updating the models defining a product line's features and components. We evaluate our approach using realistic change scenarios from a product line of time recorder applications.", "num_citations": "7\n", "authors": ["1462"]}
{"title": "Evolution-driven trace acquisition in eclipse-based product line workspaces\n", "abstract": " Software product lines typically are large-scale systems that are maintained and evolved over many years. New customer requirements, technology changes, and internal enhancements lead to continuous changes of product line artifacts. Managing these changes represents a key issue during evolution and traceability is success-critical for this process. In this chapter we discuss traceability challenges from a product line perspective and propose an approach that supports trace acquisition in product lines. The approach builds on our highly extensible EvoKing framework for the continuous tracking of changes in Eclipse workspaces. It supports both prospective and retrospective tracing at multiple levels of granularity. We demonstrate our approach using the mobile phone product line example.", "num_citations": "6\n", "authors": ["1462"]}
{"title": "Negotiation constellations in reactive product line evolution\n", "abstract": " Software product lines are inevitably subject to continuous evolution due to changing customer needs, market developments, or technology trends. Reactive evolution means that changes to the product line are driven by the requirements arising when deriving new products. In this process heterogeneous stakeholders need to negotiate about these emerging requirements. It is also crucial that stakeholders develop a shared understanding about the challenges of implementing the new requirements in the product line. Existing approaches to product line evolution do however not sufficiently address these negotiation challenges. The aim of this position paper is thus to identify key stakeholder roles and negotiation constellations for reactive product line evolution. We illustrate these constellations using the WinWin negotiation model and discuss implications for tool support.", "num_citations": "6\n", "authors": ["1462"]}
{"title": "Goal and variability modeling for service-oriented system: Integrating i* with decision models\n", "abstract": " Variability modeling and service-orientation are important approaches that address both the flexibility and adaptability required by stakeholders of today\u2019s software systems. Goal-oriented approaches for modeling service-oriented systems and their variability in an integrated manner are needed to address the needs of heterogeneous stakeholders and to develop and evolve these systems. In this paper we propose an approach that complements the i* modeling framework with decision models from orthogonal variability modeling. We illustrate the approach using an example and present options for tool support.", "num_citations": "6\n", "authors": ["1462"]}
{"title": "Towards understanding implications of trace dependencies among quality requirements\n", "abstract": " Understanding the implications of trace dependencies among quality requirements is necessary in critical engineering activities such as architectural risk assessment. In this paper we will first briefly summarize our scenario-based approach to generating trace dependencies and then demonstrate how to \u201cadd\u201d meaning to the created trace dependencies in order to understand their implications. The paper also discusses automated support for trade-off analysis, and a brief discussion of related work.", "num_citations": "6\n", "authors": ["1462"]}
{"title": "Mining Feature Revisions in Highly-Configurable Software Systems\n", "abstract": " Highly-Configurable Software Systems (HCSSs) support the systematic evolution of systems in space, ie, the inclusion of new features, which then allow users to configure software products according to their needs. However, HCSSs also change over time, eg, when adapting existing features to new hardware or platforms. In practice, HCSSs are thus developed using both version control systems (VCSs) and preprocessor directives (# ifdefs). However, the use of a preprocessor as variability mechanism has been criticized regarding the separation of concerns and code obfuscation, which complicates the analysis of HCSS evolution in VCSs. For instance, a single commit may contain changes of totally unrelated features, which may be scattered over many variation points (# ifdefs), thus making the evolution history hard to understand. This complexity often leads to error-prone changes and high costs for maintenance\u00a0\u2026", "num_citations": "5\n", "authors": ["1462"]}
{"title": "Locating feature revisions in software systems evolving in space and time\n", "abstract": " Software companies encounter variability in space as variants of software systems need to be produced for different customers. At the same time, companies need to handle evolution in time because the customized variants need to be revised and kept up-to-date. This leads to a predicament in practice with many system variants significantly diverging from each other. Maintaining these variants consistently is difficult, as they diverge across space, ie, different feature combinations, and over time, ie, revisions of features. This work presents an automated feature revision location technique that traces feature revisions to their implementation. To assess the correctness of our technique, we used variants and revisions from three open source highly configurable software systems. In particular, we compared the original artifacts of the variants with the composed artifacts that were located by our technique. The results\u00a0\u2026", "num_citations": "5\n", "authors": ["1462"]}
{"title": "Using constraint mining to analyze software development processes\n", "abstract": " Most software development organizations nowadays use issue-tracking tools to manage software processes throughout the life-cycle. Still, understanding development processes, keeping track of process execution, and reacting to deviations in projects remains challenging. In particular, the actual process usually differs from the process perceived by developers, making it hard to define the processes developers are expected to carry out. This is further challenged by frequently changing processes and process variations in different projects and teams. In this paper we describe an empirical study in which we applied a constraint mining approach from the field of software monitoring to automatically extract process definitions in the form of constraints. Specifically, we applied the approach to datasets extracted from four real-world projects (using the Jira issue-tracking tool) in a company developing a recreational\u00a0\u2026", "num_citations": "5\n", "authors": ["1462"]}
{"title": "Supporting the selection of constraints for requirements monitoring from automatically mined constraint candidates\n", "abstract": " [Context and Motivation] Existing approaches, e.g., in the areas of specification mining and process mining, allow to automatically identify requirements-level system properties, that can then be used for verifying or monitoring systems. For instance, specifications, invariants, or constraints can be mined by analyzing source code or system logs. [Question/Problem] However, the usefulness of mining approaches is currently limited by (i)\u00a0the typically high number of mined properties and (ii)\u00a0the often high number of false positives that are mined from complex systems. [Principal Ideas/Results]\u00a0In this paper, we present an approach that supports domain experts in selecting constraints for requirements monitoring by grouping, filtering, and ranking constraint candidates mined from event logs. [Contributions] Our tool-supported approach is flexible and extensible and allows users to experiment with different\u00a0\u2026", "num_citations": "5\n", "authors": ["1462"]}
{"title": "Supporting feature model evolution by lifting code-level dependencies: A research preview\n", "abstract": " [Context and Motivation] Organizations pursuing software product line engineering often use feature models to define the commonalities and variability of software-intensive systems. Frequently, requirements-level features are mapped to development artifacts to ensure traceability and to facilitate the automated generation of downstream artifacts. [Question/Problem] Due to the continuous evolution of product lines and the complexity of the artifact dependencies, it is challenging to keep feature models consistent with their underlying implementation. [Principal Ideas/Results] In this paper, we outline an approach combining feature-to-artifact mappings and artifact dependency analysis to inform domain engineers about possible inconsistencies. In particular, our approach uses static code analysis and a variation control system to lift complex code-level dependencies to feature models. [Contributions] We\u00a0\u2026", "num_citations": "5\n", "authors": ["1462"]}
{"title": "The reminds tool suite for runtime monitoring of systems of systems\n", "abstract": " The behavior of systems of systems (SoS) emerges only fully during operation and is hard to predict. SoS thus need to be monitored at runtime to detect deviations from important requirements. However, existing approaches for checking runtime behavior and performance characteristics are limited with respect to the kinds of checks and the types of technologies supported, which impedes their use in industrial SoS. In this tool demonstration paper we describe the ReMinds tool suite for runtime monitoring of SoS developed in response to industrial monitoring scenarios. ReMinds provides comprehensive tool support for instrumenting systems, extracting events and data at runtime, defining constraints to check expected behavior and properties, and visualizing constraint violations to facilitate diagnosis.", "num_citations": "5\n", "authors": ["1462"]}
{"title": "Monitoring system-of-systems requirements in multi product lines\n", "abstract": " [Context and motivation] Large-scale software-intensive systems are often considered as systems of systems comprising several interrelated product lines from which system variants are derived to meet the overall requirements. [Question/problem] If multiple teams and experts configure these individual systems, their individual configuration choices might conflict with the system-of-systems requirements. [Principal ideas/results] This research preview paper presents our ongoing work on a tool-supported approach for monitoring system-of-systems requirements formalized as constraints during distributed product derivation in multi product lines. [Contribution] The approach allows detecting violations of multi system requirements during the configuration of individual systems and provides immediate feedback to the involved configurers. Our approach is integrated in the product configuration tool\u00a0\u2026", "num_citations": "5\n", "authors": ["1462"]}
{"title": "Supporting end users with business calculations in product configuration\n", "abstract": " Business calculations like break-even, return on investment, or cost are essential in many domains to support decision making while configuring products. For instance, customers and sales people need to estimate and compare the business value of different product variants. Some product line approaches provide initial support, eg, by defining quality attributes in relation to features. However, an approach that allows domain engineers to easily define business calculations together with variability models is still lacking. In product configuration, calculation results need to be instantly presented to end users after making configuration choices. Further, due to the often high number of calculations, the presentation of calculation results to end users can be challenging. These challenges cannot be addressed by integrating off-the-shelf applications performing the calculations with product line tools. We thus present an\u00a0\u2026", "num_citations": "5\n", "authors": ["1462"]}
{"title": "The mobile scenario presenter: a tool for in situ requirements discovery with scenarios\n", "abstract": " Scenarios are widely and successfully used to discover requirements for software-intensive systems. Recent advances in mobile computing technologies mean that mobile tools can support scenario-based techniques in the workplace, with potential benefits to requirements processes. To explore this idea we have been developing the Mobile Scenario Presenter (MSP) tool and used it successfully in a number of evaluation studies and projects. The MSP supports analysts working in the field to better understand the work context of a future system 's end users. The interactive tool demo allows RE experts to actively use the MSP to explore its capabilities and benefits.", "num_citations": "5\n", "authors": ["1462"]}
{"title": "Developing groupware for requirements negotiation: Lessons learned\n", "abstract": " Defining requirements is a complex and difficult process, and defects in the process often lead to costly project failures [1]. There is no complete and well-defined set of requirements waiting to be discovered in system development. Different stakeholders\u2014users, customers, managers, domain experts, and developers\u2014come to the project with diverse expectations and interests. Requirements emerge in a highly collaborative, interactive, and interdisciplinary negotiation process that involves heterogeneous stakeholders.At the University of Southern California\u2019s Center for Software Engineering, we have developed a series of groupware implementations for the WinWin requirements negotiation approach (see the Acknowledgments at the end of the article for a list of organizations that helped sponsor this research). The WinWin approach involves having a system\u2019s success-critical stakeholders participate in a negotiation process so they can converge on a mutually satisfactory or win\u2013win set of requirements. Groupware-supported methodologies are among the hardest to get right, and the rapidly moving technology of distributed interactive systems is a major challenge. This is due largely to the relative newness of the area and to the unfamiliarity of most software developers with the phenomena of group dynamics. However, an even bigger challenge is creating a system that works well with people of different backgrounds, in different places, and often at different times. In particular, collaborative technology that supports requirements negotiation must address stakeholder heterogeneity.", "num_citations": "5\n", "authors": ["1462"]}
{"title": "Werkzeugunterst\u00fctzung beim einsatz von vorgehensmodellen\n", "abstract": " Die Komplexit\u00e4t der Software-Entwicklung erfordert Werkzeugunterst\u00fctzung bei der methodischen Erstellung von Ergebnissen, bei der Verwaltung dieser Ergebnisse und bei der Einhaltung eines Vorgehensmodells. Software-Entwicklungsumgebungen (SEU) unterst\u00fctzen diese Aufgaben, wobei der Grad dieser Unterst\u00fctzung bei den verf\u00fcgbaren Systemen sehr unterschiedlich ist. Ausgehend von einem Meta-Proze\u00dfmodell definieren wir f\u00fcr Software-Entwicklungsumgebungen vier Grundkomponenten und vier Beziehungskomponenten und stellen verschiedene Niveaus der Werkzeugunterst\u00fctzung in diesem achtdimensionalen Modell dar. Zur Veranschaulichung ordnen wir einige existierende Werkzeuge in dieses Modell ein.", "num_citations": "5\n", "authors": ["1462"]}
{"title": "To SPIRE or not to SPIRE-that is the question!\n", "abstract": " In this paper, we describe the motives for software process improvement in small and very small companies. We then discuss the need for government support and give an initial view on the European project SPIRE (Software Process Improvement in Regions of Europe), which is just beginning.", "num_citations": "5\n", "authors": ["1462"]}
{"title": "Evolution in dynamic software product lines\n", "abstract": " Many software systems today provide support for adaptation and reconfiguration at runtime, in response to changes in their environment. Such adaptive systems are designed to run continuously and may not be shut down for reconfiguration or maintenance tasks. The variability of such systems has to be explicitly managed, together with mechanisms that control their runtime adaptation and reconfiguration. Dynamic software product lines (DSPLs) can help to achieve this. However, dealing with evolution is particularly challenging in a DSPL, as changes made at runtime can easily lead to inconsistencies. This paper describes the challenges of evolving DSPLs using an example cyber\u2010physical system for home automation. We discuss the shortcomings of existing work and present a reference architecture to support DSPL evolution. To demonstrate its feasibility and flexibility, we implemented the proposed reference\u00a0\u2026", "num_citations": "4\n", "authors": ["1462"]}
{"title": "Supporting feature-oriented evolution in industrial automation product lines\n", "abstract": " In the domain of industrial automation companies nowadays need to serve a mass market while at the same time customers demand highly customized solutions. To tackle this problem, companies frequently define software product lines (SPLs), which allow to automatically derive and further customize individual solutions based on a common platform. SPLs rely on defining common and variable platform features together with mappings, which define how the features are realized in implementation artifacts. In concurrent engineering such a feature-oriented process is challenged by the evolution of features, the complexity of feature-to-artifact mappings, and the diversity of the implementation artifacts. To address these challenges this paper introduces an approach supporting feature-oriented development and evolution in industrial SPLs. We outline the key elements and operations of our approach, including an\u00a0\u2026", "num_citations": "4\n", "authors": ["1462"]}
{"title": "A user study on the usefulness of visualization support for requirements monitoring\n", "abstract": " Many requirements monitoring approaches have been proposed that check key properties of systems and their interactions at runtime. Some of these approaches also visualize monitoring results and provide details on requirements violations to end users. However, only few studies exist about the usefulness of requirements monitoring tools for practitioners, particularly regarding visualization. In this paper, we present a user study we have conducted with both industrial practitioners and researchers to assess the usefulness of visualization capabilities we have been developing for an event-based requirements monitoring tool. These capabilities allow users to monitor the status of the involved systems, to view trends and statistics, and to inspect the events and data that led to specific violations when diagnosing their root cause. We first performed a walkthrough of the tool using the cognitive dimensions of notations\u00a0\u2026", "num_citations": "4\n", "authors": ["1462"]}
{"title": "An experiment comparing lifted and delayed variability-aware program analysis\n", "abstract": " Today's software systems need to be highly flexible and managing their variability plays an essential role during development. Variability-aware program analysis techniques have been proposed to support developers in understanding code-level variability by analyzing the space of program variants. Such techniques are highly beneficial, e.g., when determining the impact of changes during maintenance and evolution. Two strategies have been proposed in the literature to make existing program analysis techniques variability-aware:(i) program analysis can be lifted by considering variability already in the parsing stage; or(ii) analysis can be delayed by considering and recovering variability only when needed. Both strategies have advantages and disadvantages, however, a systematic comparison is still missing. The contributions of this paper are an in-depth comparison of SPLLIFT and COACH, two existing\u00a0\u2026", "num_citations": "4\n", "authors": ["1462"]}
{"title": "Monitoring requirements in systems of systems\n", "abstract": " Developers of systems of systems (SoSs) face challenges such as heterogeneous, inconsistent, and changing elements; continuous evolution and deployment; decentralized control; and inherently conflicting and often unknowable requirements. In response to these challenges, researchers are developing the ReMinds tool. Engineers can use it to instrument systems in an SoS to extract events and data at runtime and to define requirements as constraints to check expected behavior and properties. ReMinds can also visualize and explain requirements violations to facilitate diagnosis.", "num_citations": "4\n", "authors": ["1462"]}
{"title": "Event capture and compare for runtime monitoring of systems of systems\n", "abstract": " Today's complex software systems are highly variable systems of systems (SoS) that evolve continuously to meet new customer requirements or to address technological changes. Despite thorough testing of the different parts of an SoS, the full behavior often emerges during operation only. The systems and their interactions thus need to be continuously monitored and checked during operation to determine compliance with their requirements. In particular, after changes to one system, it is necessary to check whether the overall SoS still behaves correctly and as intended. Based on an existing monitoring framework we are developing support for capturing and comparing event traces in SoS. Our approach facilitates, and partly automates, identifying differences in event traces, which often indicate undesirable behavior introduced during evolution. In this position paper we motivate capture-and-compare support in\u00a0\u2026", "num_citations": "4\n", "authors": ["1462"]}
{"title": "A requirements monitoring infrastructure for very-large-scale software systems\n", "abstract": " [Context and motivation] Approaches for requirements monitoring check the compliance of systems with their requirements during operation. [Question/problem] Despite many advances, requirements monitoring remains challenging particularly for very-large-scale software systems (VLSS) with system-of-systems architectures. [Principal ideas/results] In this research preview we describe key characteristics of industrial VLSS and discuss implications for requirements monitoring. Furthermore, we report on our ongoing work of developing a requirements monitoring infrastructure addressing these characteristics. [Contribution] Our infrastructure supports runtime monitoring of requirements across systems; variability management of requirements-based monitors; and the integration of monitoring data from different sources in a VLSS.", "num_citations": "4\n", "authors": ["1462"]}
{"title": "Integrating concepts of negotiation theory into software requirements negotiation\n", "abstract": " Software engineering and in particular requirements definition is a highly collaborative activity that relies on understanding, sharing, and negotiating stakeholder preferences. The software engineering community has developed numerous methods and tools to elicit stakeholder goals and to describe requirements. Typically these approaches assume a consensus-based approach, ie, the stakeholders are empowered and willing to elaborate mutually satisfactory agreements. However, our experience in numerous negotiations shows that consensus-based approaches could benefit from theories, methods, and tools from the field of negotiation theory. In this paper we will thus motivate the need for negotiation concepts in software engineering, we will present approaches from negotiation theory, and will then explore, how existing consensusbased approaches could be augmented with methods from negotiation theory\u00a0\u2026", "num_citations": "4\n", "authors": ["1462"]}
{"title": "Supporting feature model evolution by suggesting constraints from code-level dependency analyses\n", "abstract": " Feature models are a de facto standard for representing the commonalities and variability of product lines and configurable software systems. Requirements-level features are commonly implemented in multiple source code artifacts, which results in complex dependencies at the code level. As developers change and evolve features frequently, it is challenging to keep feature models consistent with their implementation. We thus present an approach combining feature-to-code mappings and code dependency analyses to inform engineers about possible inconsistencies. Our focus is on code-level changes requiring updates in feature dependencies and constraints. Our approach uses static code analysis and a variation control system to lift complex code-level dependencies to feature models. We present the suggested dependencies to the engineer in two ways: directly as links between features in a feature model\u00a0\u2026", "num_citations": "3\n", "authors": ["1462"]}
{"title": "Mining constraints for monitoring systems of systems\n", "abstract": " Complex software-intensive systems are often systems of systems whose full behavior emerges during operation only, when the involved systems interact with each other and the environment. Runtime monitoring approaches are thus used to detect deviations from the expected behavior. Most approaches assume that engineers define the expected behavior as constraints, however, the deep domain knowledge required to specify constraints is often not available. We describe an approach that automatically mines constraint candidates for runtime monitoring from event logs recorded from systems of systems. Our approach extracts different types of constraints on event occurrence, timing, and data and offers users filtering and ranking strategies for the mined candidates.", "num_citations": "3\n", "authors": ["1462"]}
{"title": "A Framework for Preprocessing Multivariate, Topology-Aware Time Series and Event Data in a Multi-System Environment\n", "abstract": " Monitoring and predicting quality properties of complex systems relies on collecting and analyzing huge amounts of data at run time. Machine learning is frequently adopted to analyze time series and event data, often coming from multiple systems. In such a context, extracting and preprocessing data is an essential but also highly tedious task. In this paper, we thus present an offline preprocessing framework that can handle multivariate time series and event data in a multisystem environment that also takes the system's topology into account. After a discussion of the key requirements, we present the architecture and implementation of our highly configurable and easy-to-use framework. We demonstrate how the framework allows to extract data and to yield output files for machine learning via configuration settings. In a two-step evaluation, we investigate the framework's usefulness and scalability. We demonstrate\u00a0\u2026", "num_citations": "3\n", "authors": ["1462"]}
{"title": "Using crash frequency analysis to identify error-prone software technologies in multi-system monitoring\n", "abstract": " Faults are common in large software systems and must be analyzed to prevent future failures such as system outages. Due to their sheer amount, the observed failures cannot be inspected individually but must be automatically grouped and prioritized. An open challenge is to find similarities in failures across different systems. We propose a novel approach for identifying error-prone software technologies via a cross-system analysis based on monitoring and crash data. Our approach ranks the error-prone software technologies and analyzes the occurred exceptions, thus making it easier for developers to investigate cross-system failures. Finding such failures is highly advantageous as fixing a fault may benefit many affected systems. A preliminary case study on monitoring data of hundreds of different systems demonstrates the feasibility of our approach.", "num_citations": "3\n", "authors": ["1462"]}
{"title": "An event-based capture-and-compare approach to support the evolution of systems of systems\n", "abstract": " Industrial software systems are often systems of systems (SoS) that evolve continuously to meet new customer requirements or to address technological changes. Despite thorough testing of the different contributing parts, the full behavior of SoS only emerges at runtime. The systems in the SoS and their interactions thus need to be continuously monitored and checked during operation to determine compliance with requirements. In particular, after changes to one system, it is necessary to check whether the overall SoS still behaves correctly and as intended. Based on an existing monitoring framework we have been developing support for capturing and comparing event traces in SoS. Our approach facilitates and partly automates the identification of differences in event traces, which often indicate undesirable behavior introduced during evolution. In this paper we motivate the need for monitoring and evolution\u00a0\u2026", "num_citations": "3\n", "authors": ["1462"]}
{"title": "Configuring and Generating Technical Documents\n", "abstract": " In industrial software development salespeople, product managers, or technical writers frequently create documents such as offers, contracts, user manuals, or technical documentation. For products that are configured specifically for different customers, the documentation also needs to be adapted to match the product. Such adaptation of documents is tedious and error-prone and can easily lead to inconsistencies. Stakeholders thus need configuration support for adapting documents. We describe a flexible approach for automatically generating product-specific documents based on product line variability models. We report on an industrial case example of applying the approach to support configuring and generating product-specific documents in an automation software product line.", "num_citations": "3\n", "authors": ["1462"]}
{"title": "Modifiers for quality assurance in group facilitation\n", "abstract": " One of the key tasks of a facilitator is to assure the quality of the knowledge outcome created in the collaborative effort. To manage the quality of the knowledge generated facilitators need to follow along in the communication, and to judge the quality of contributions, decisions and consensus. When facilitators or group members detect quality deficiencies, facilitators have the difficult task of making interventions to support the group in improving the quality of their output, without interrupting the flow of the process. In this paper we will present a framework for quality assessment and a toolbox with flexible interventions that can be added to the process design on the fly, as soon as quality deficiencies are detected. The toolbox exists of a set of conditional adjustment interventions, which can be used to enhance the selected facilitation techniques to guard for quality.", "num_citations": "3\n", "authors": ["1462"]}
{"title": "Mobile Werkzeuge im Requirements Engineering\n", "abstract": " Der Mobilit\u00e4t der Stakeholder wurde bislang bei der Entwicklung von Methoden und Werkzeugen noch zuwenig Bedeutung beigemessen: Die mit der Ermittlung der Anforderung betrauten Personen (Analytiker) m\u00fcssen etwa mobil sein, um mit den Stakeholdern zu kommunizieren. So ist es wichtig, direkt am Arbeitsplatz zuk\u00fcnftiger Systembenutzer mehr \u00fcber deren Anforderungen zu erfahren [1]. Auch die Kommunikation verteilter und mobiler Stakeholder untereinander muss unterst\u00fctzt werden.", "num_citations": "3\n", "authors": ["1462"]}
{"title": "Capturing, negotiating, and evolving system requirements: bridging WinWin and the UML\n", "abstract": " Developing software systems is a process of eliciting and evolving stakeholder requirements using informal, semiformal and formal representations of knowledge. Managing the transitions between these representations is a challenging task. On the one hand informal representations for capturing system requirements support straightforward involvement and interaction of even inexperienced stakeholders. On the other hand this approach may result in inconsistent, incomplete, and ambiguous specifications. Semiformal and formal representations overcome these problems but are less suited for stakeholder interaction. In this paper, we describe an experiment using the WinWin model for negotiating system requirements and the Unified Modelling Language. We discuss our experiences and draw conclusions useful in bridging informal and formal representations.", "num_citations": "3\n", "authors": ["1462"]}
{"title": "Benefits of groupware in software engineering environments\n", "abstract": " Benefits of groupware in software engineering environments | Proceedings of the ninth Austrian-informatics conference on Workflow management : challenges, paradigms and products: challenges, paradigms and products ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleProceedingsCON '94Benefits of groupware in software engineering environments Article Benefits of groupware in software engineering environments Share on Author: Paul Gr\u00fcnbacher View Profile Authors Info & Affiliations Publication: CON '94: Proceedings of the ninth Austrian-informatics conference on Workflow management : challenges, paradigms and products: \u2026", "num_citations": "3\n", "authors": ["1462"]}
{"title": "Guiding feature model evolution by lifting code-level dependencies\n", "abstract": " Feature models are a de facto standard for representing the commonalities and variability of product lines and configurable software systems. Requirements-level features are commonly implemented in multiple source code artifacts, resulting in complex dependencies at the code level. As developers add and evolve features frequently, it is challenging to keep feature models consistent with their implementation. This article thus presents an approach combining feature-to-code mappings and code dependency analyses to inform engineers about possible inconsistencies. We focus on code-level changes requiring updates in feature dependencies and constraints. Our approach uses static code analysis and a variation control system to lift complex code-level dependencies to feature models. We present the suggested dependencies to the engineer in two ways: directly as links between features in a feature model\u00a0\u2026", "num_citations": "2\n", "authors": ["1462"]}
{"title": "ReMinds-CMT: An Interactive Tool Supporting Constraint Mining for Requirements Monitoring.\n", "abstract": " Abstract [Context and Motivation] Existing approaches for specification mining and process mining allow to automatically identify requirementslevel system properties, which can be used for describing, verifying, or monitoring systems. We have developed an approach that can mine constraint candidates from event logs to support requirements monitoring.[Question/Problem] However, the usefulness of mining approaches is currently limited because of (i) weak support for adjusting the algorithms and settings to the current problem,(ii) the high number of properties mined from complex systems, and (iii) the typically high false positive rate.[Principal Ideas/Results] In this paper, we present ReMinds-CMT, a tool that guides domain experts throughout the mining process.[Contributions] The tool allows users to experiment with different thresholds and configurations of our mining, grouping, filtering, and ranking algorithms to ease the selection of useful constraints. We demonstrate the tool\u2019s features using constraints mined from event logs of a complex cyber-physical system controlling unmanned aerial vehicles.", "num_citations": "2\n", "authors": ["1462"]}
{"title": "Using Multi-System Monitoring Time Series to Predict Performance Events\n", "abstract": " Using Crash Frequency Analysis to Identify Error-prone Software Technologies in Multi-System Monitoring Page 1 Using Multi-System Monitoring Time Series to Predict Performance Events Andreas Sch\u00f6rgenhumer Mario Kahlhofer Peter Chalupar Hanspeter M\u00f6ssenb\u00f6ck Paul Gr\u00fcnbacher 09.11.2018 Page 2 Motivation 2 t Page 3 Motivation 2 t Page 4 Train Motivation 2 t ML Page 5 Train Motivation 2 t t ML Page 6 Predict Train Motivation 2 t t ML Page 7 Predict Train Motivation 2 t t ML Page 8 Predict Train Motivation 2 t t ML Straightforward: \u2022 Single system \u2022 Single component \u2022 Univariate time series Page 9 Motivation 3 Multiple, interlinked components Page 10 Motivation 3 Multiple, interlinked components Multivariate time series Page 11 Motivation 3 Multiple, interlinked components Multivariate time series Event to data connection Page 12 Motivation 3 Multiple, interlinked components Multivariate time series \u2026", "num_citations": "2\n", "authors": ["1462"]}
{"title": "Evaluation des software-entwicklungsprozesses in kleinen software-unternehmen\n", "abstract": " Es ist allgemein anerkannt, da\u00df die Qualit\u00e4t eines Software-Produkts inh\u00e4rent von der Qualit\u00e4t des Entwicklungsprozesses abh\u00e4ngt, mit dem es erzeugt wurde. Die Analyse und Bewertung der Reife des Software-Entwicklungsprozesses stellt einen wichtigen ersten Schritt in einem Projekt zur Proze\u00dfverbesserung dar. Proze\u00dfverbesserung in kleinen Software-Unternehmen erfordert die Anpassung existierender Methoden an die Besonderheiten dieser Unternehmen. In diesem Beitrag werden Motivation und Bedeutung begleiteter, werkzeuggestutzter Selbstbewertung im ESSI Projekt SPIRE pr\u00e4sentiert. \u00dcber Ergebnisse und Erfahrungen aus diesem Projekt wird berichtet.", "num_citations": "2\n", "authors": ["1462"]}
{"title": "Modular change impact analysis for configurable software\n", "abstract": " Slicing-based change impact analysis is an important and established technique to assess the effects of modifications to source code. Program slicing is usually done by performing a graph reachability analysis on a system dependence graph representing the control and data flow dependencies between statements. However, analyzing large-scale software systems can lead to performance issues, resulting in huge dependence graphs and long analysis times. In this paper we present an approach that exploits the modularity of large-scale systems to first perform program analysis for individual modules, and later compose the pre-computed analysis results. However, partitioning a system dependence graph is not straightforward, as it carries presence conditions representing variability. We thus use placeholders that are resolved when composing the pre-computed SDG modules during configuration-aware\u00a0\u2026", "num_citations": "2\n", "authors": ["1462"]}
{"title": "Supporting business calculations in a product line engineering tool suite\n", "abstract": " Software Product Line Engineering (SPLE) involves defining the commonalities and variability of similar products to leverage extensive reuse and to accelerate the derivation of customized products. However, sales people and customers do not only care about technical properties of product features during product derivation. They also need information concerning the business value of product features. Existing approaches have addressed this issue by combining business information with variability models, eg, by defining feature attributes or by integrating third party tools. However, a solution that seamlessly integrates variability and business calculations within a SPLE tool is still lacking. We report on our ongoing efforts to integrate business calculations in the DOPLER tool suite. We use examples of product lines from the industrial plant automation domain to motivate and demonstrate our solution.", "num_citations": "2\n", "authors": ["1462"]}
{"title": "Using contextual information to guide on-site analysts\n", "abstract": " Eliciting requirements on-site is challenging as analysts have to simultaneously observe the environment, interact with people and operate RE tools. We have been exploring the use of context-aware technologies to provide better guidance and support for on-site analysts. Our context-aware Mobile Scenario Presenter tool guides analysts by automatically highlighting scenario events relevant to the currently observed work task.", "num_citations": "2\n", "authors": ["1462"]}
{"title": "EasyWinWin: Eine groupware-unterstuetzte methode zur erhebung und verhandlung von anforderungen\n", "abstract": " Die Kommunikation unter den Projektbeteiligten und-betroffenen (stakeholder) ist aber f\u00fcr den Erfolg von Anforderungen entscheidend. So f\u00fchrt nur das geb\u00fcndelte Fachwissen von Kunden, Anwendern, Entwicklern, Fachexperten, etc. zu tragf\u00e4higen L\u00f6sungen. Es ist also wichtig, wirkungsvolle Verfahren zur Erhebung und zum Austausch dieses Wissens einzusetzen. Es gilt auch, die oft widerspr\u00fcchlichen Ziele, Erwartungen, Standpunkte und Vorstellungen zu kennen und aufeinander abzustimmen. Konflikte ergeben sich beispielsweise zwischen gew\u00fcnschtem Funktionsumfang und verf\u00fcgbarem Budget, zwischen Funktionsumfang, verf\u00fcgbarer Zeit und resultierender Qualit\u00e4t oder auch zwischen gew\u00fcnschter Entwicklungstechnologie und Ausbildungsstand und Erfahrung der Entwickler. Solche Widerspr\u00fcche und Konflikte m\u00f6glichst fr\u00fchzeitig zu erkennen ist ein wesentlicher Beitrag zum Risikomanagement in Software Projekten.", "num_citations": "2\n", "authors": ["1462"]}
{"title": "Facilitating requirements engineering through computer supported cooperative work\n", "abstract": " Facilitating requirements engineering through computer supported cooperative work | Proceedings of the 4th conference on Interdisciplinary information management talks ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleProceedingsIDIMT '96Facilitating requirements engineering through computer supported cooperative work ARTICLE Facilitating requirements engineering through computer supported cooperative work Share on Author: P. Gr\u00fcnbacher profile image Paul Gr\u00fcnbacher View Profile Authors Info & Affiliations Publication: IDIMT '96: Proceedings of the 4th conference on Interdisciplinary information management talks\u2026", "num_citations": "2\n", "authors": ["1462"]}
{"title": "Managing systems evolving in space and time: four challenges for maintenance, evolution and composition of variants\n", "abstract": " Software companies need to provide a large set of features satisfying functional and non-functional requirements of diverse customers, thereby leading to variability in space. Feature location techniques have been proposed to support software maintenance and evolution in space. However, so far only one feature location technique also analyses the evolution in time of system variants, which is required for feature enhancements and bug fixing. Specifically, existing tools for managing a set of systems over time do not offer proper support for keeping track of feature revisions, updating existing variants, and creating new product configurations based on feature revisions. This paper presents four challenges concerning such capabilities for feature (revision) location and composition of new product configurations based on feature/s (revisions). We also provide a benchmark containing a ground truth and support for\u00a0\u2026", "num_citations": "1\n", "authors": ["1462"]}
{"title": "An Approach for Ranking Feature-based Clustering Methods and its Application in Multi-System Infrastructure Monitoring\n", "abstract": " Companies need to collect and analyze time series data to continuously monitor the behavior of software systems during operation, which can in turn be used for performance monitoring, anomaly detection or identifying problems after system crashes. However, gaining insights into common data patterns in time series is challenging, in particular, when analyzing data concerning different properties and from multiple systems. Clustering approaches have been hardly studied in the context of monitoring data, despite their possible benefits. In this paper, we present a feature-based approach to identify clusters in unlabeled infrastructure monitoring data collected from multiple independent software systems. We introduce time series properties which are grouped into feature sets and combine them with various unsupervised machine learning models to find the methods best suited for our clustering goal. We thoroughly\u00a0\u2026", "num_citations": "1\n", "authors": ["1462"]}
{"title": "Selecting time series clustering methods based on run-time costs\n", "abstract": " Clustering time series, eg, of monitoring data from software systems, can reveal important insights and interesting hidden patterns. However, choosing the right method is not always straightforward, especially as not only clustering quality but also run-time costs must be considered. In this paper, we thus present an approach that aids users in selecting the best methods in terms of quality as well as computational costs.", "num_citations": "1\n", "authors": ["1462"]}
{"title": "Visualizing feature-level evolution in product lines: A research preview\n", "abstract": " [Context and motivation] Software product lines evolve frequently to address customer requirements in different domains. This leads to a distributed engineering process with frequent updates and extensions. [Question/problem] However, such changes are typically managed and tracked at the level of source code while feature-level awareness about software evolution is commonly lacking. In this research preview paper we thus present an approach visualizing the evolution in software product lines at the level of features. [Principal ideas/results] Specifically, we extend feature models with feature evolution plots to visualize changes at a higher level. Our approach uses static code analyses and a variation control system to compute the evolution data for visualisation. As a preliminary evaluation we report selected examples of applying our approach to a cyberphysical ecosystem from the field of industrial automation\u00a0\u2026", "num_citations": "1\n", "authors": ["1462"]}
{"title": "Comparing constraints mined from execution logs to understand software evolution\n", "abstract": " Complex software systems evolve frequently, e.g., when introducing new features or fixing bugs during maintenance. However, understanding the impact of such changes on system behavior is often difficult. Many approaches have thus been proposed that analyze systems before and after changes, e.g., by comparing source code, model-based representations, or system execution logs. In this paper, we propose an approach for comparing run-time constraints, synthesized by a constraint mining algorithm, based on execution logs recorded before and after changes. Specifically, automatically mined constraints define the expected timing and order of recurring events and the values of data elements attached to events. Our approach presents the differences of the mined constraints to users, thereby providing a higher-level view on software evolution and supporting the analysis of the impact of changes on system\u00a0\u2026", "num_citations": "1\n", "authors": ["1462"]}
{"title": "On the Difficulties of Supervised Event Prediction based on Unbalanced Real-World Data in Multi-System Monitoring\n", "abstract": " Online failure prediction of performance-critical events is an important task in fault management of software systems. In this paper, we extend our previous multi-system event prediction by analyzing its performance on unbalanced, real-world data, which represents a realistic online scenario. We train a random forest classifier with different data preprocessing configurations, including data augmentation to cope with the extreme class imbalance. The results reveal that the prediction quality of the tested multi-system model drops significantly compared to the balanced scenario. Although our supervised event prediction approach as well as different data preprocessing configurations turned out to be ineffective, we consider the insights of our work valuable for the community.", "num_citations": "1\n", "authors": ["1462"]}
{"title": "Economic Risk-Based Management in Software Engineering: The HERMES Initiative\n", "abstract": " Developing software of high quality is both socially and economically critical. Nevertheless software projects are often managed badly without considering economic potential and constraints. The decision making process is often performed in an ad-hoc manner and approaches from business administration or operations research are rarely adopted. In Austria, we have recently been developing a research agenda that addresses these issues in an interdisciplinary research plan. This paper introduces and motivates this joint research initiative and identifies important issues needing attention.", "num_citations": "1\n", "authors": ["1462"]}
{"title": "Communication and coordination support in system development environments\n", "abstract": " This paper stresses the importance of human interaction as a means of coordination and process guidance in system development. A metamodel for cooperative system development is proposed and relevant research e.g., speech act theory, design rationale is presented within this framework. The paper finally describes an architecture of a cooperative system development environment SDE realized as an extension of the software engineering platform MaestroII.", "num_citations": "1\n", "authors": ["1462"]}
{"title": "Object-Oriented Implementation Apsects of an Abstract Relational Database Interface\n", "abstract": " This paper describes implementation aspects of an abstract relational database interface, which is based upon an object-oriented application framework. It was realized within the scope of the construction of a toolset for the prototyping-oriented specification of graphic user interfaces of databasebased applications.", "num_citations": "1\n", "authors": ["1462"]}