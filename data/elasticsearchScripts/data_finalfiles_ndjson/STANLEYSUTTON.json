{"title": "N degrees of separation: Multi-dimensional separation of concerns\n", "abstract": " Done well, separation of concerns can provide many software engineering benefits, including reduced complexity, improved reusability, and simpler evolution. The choice of boundaries for separate concerns depends on both requirements on the system and on the kind(s) of decomposition and composition a given formalism supports. The predominant methodologies and formalisms available, however, support only orthogonal separations of concerns, along single dimensions of composition and decomposition. These characteristics lead to a number of well-known and difficult problems. The paper describes a new paradigm for modeling and implementing software artifacts, one that permits separation of overlapping concerns along multiple dimensions of composition and decomposition. This approach addresses numerous problems throughout the software lifecycle in achieving well-engineered, evolvable\u00a0\u2026", "num_citations": "2073\n", "authors": ["369"]}
{"title": "The role of process in a software start-up\n", "abstract": " In the start-up environment, software process technologies and methodologies that focus on advanced levels of process maturity can be out of place. This article gives an overview of a start-up's relationship with the software process and gives guidelines on how to apply this process to a start-up company.", "num_citations": "260\n", "authors": ["369"]}
{"title": "Modeling of software concerns in cosmos\n", "abstract": " Separation of concerns is a well-established principle of software engineering. Nevertheless, the failure to separate concerns effectively has been identified as a continuing cause of the ongoing software crisis. This failure arises in part because most programming and modeling formalisms enforce a dominant decomposition that allows only a few concerns to be separated, whereas software in reality is subject to multiple simultaneous, overlapping, and crosscutting concerns. Several approaches to\" advanced separation of concerns\" have been proposed, including subject-oriented programming, aspect-oriented programming, and Hyperspaces. These focus mainly on coding but take a multidimensional view of concerns that applies across the software life cycle. To support such approaches, we are developing Cosmos, a general-purpose concern-space modeling schema. Cosmos distinguishes logical and physical\u00a0\u2026", "num_citations": "195\n", "authors": ["369"]}
{"title": "Text2Test: Automated inspection of natural language use cases\n", "abstract": " The modularity and customer centric approach of use cases make them the preferred methods for requirement elicitation, especially in iterative software development processes as in agile programming. Numerous guidelines exist for use case style and content, but enforcing compliance to such guidelines in the industry currently requires specialized training and a strongly managed requirement elicitation process. However, often due to aggressive development schedules, organizations shy away from such extensive processes and end up capturing use cases in an ad-hoc fashion with little guidance. This results in poor quality use cases that are seldom fit for any downstream software activities. We have developed an approach for automated and \"edit-time\" inspection of use cases based on the construction and analysis of models of use cases. Our models contain linguistic properties of the use case text along with\u00a0\u2026", "num_citations": "93\n", "authors": ["369"]}
{"title": "Concern modeling in the concern manipulation environment\n", "abstract": " The Concern Manipulation Environment (CME) is an AOSD environment in which software is organized and manipulated in terms of concerns. This paper is about ConMan, the CME concern manager, which supports the identification, definition, encapsulation, extraction and composition of concerns. ConMan models software in terms of concerns, relationships, constraints, units, artifacts, and associated information. The concern model is multidimensional and concerns can be defined extensionally and/or intensionally. ConMan is neutral with respect to artifact types and formalisms, and it can be used with both aspect-oriented and non-aspect oriented software and methods. ConMan is intended to serve both as a tool for directly modeling concerns and as a platform for developing alternative concern-modeling approaches.", "num_citations": "70\n", "authors": ["369"]}
{"title": "Accelerating the creation of customized, language-specific IDEs in Eclipse\n", "abstract": " Full-featured integrated development environments have become critical to the adoption of new programming languages. Key to the success of these IDEs is the provision of services tailored to the languages. However, modern IDEs are large and complex, and the cost of constructing one from scratch can be prohibitive. Generators that work from language specifications reduce costs but produce environments that do not fully reflect distinctive language characteristics. We believe that there is a practical middle ground between these extremes that can be effectively addressed by an open, semi-automated strategy to IDE development. This strategy is to reduce the burden of IDE development as much as possible, especially for internal IDE details, while opening opportunities for significant customizations to IDE services. To reduce the effort needed for customization we provide a combination of frameworks, templates\u00a0\u2026", "num_citations": "54\n", "authors": ["369"]}
{"title": "IMP: a meta-tooling platform for creating language-specific IDEs in Eclipse\n", "abstract": " Programming language design remains a vital field, with interest in languages targeting concurrency, scripting, and aspects, as well as in domain-specific languages. Full-featured integrated development environments (IDEs) have become critical to the adoption of new languages. A key factor in the success of these IDEs is the provision of services specifically tailored to the language. However, modern IDE frameworks are large and complex, and the cost of constructing a language-specific IDE from scratch remains prohibitive", "num_citations": "53\n", "authors": ["369"]}
{"title": "Concern modeling for aspect-oriented software development\n", "abstract": " 2 Chapter 21 Concern Modeling for Aspect-Oriented Software Development of concerns in the life cycle. We show that, while existing modeling approaches address concerns in specific contexts for specific purposes, a general-purpose concern-modeling capability is still needed. We describe requirements for a concern-modeling language and discuss the role of concern modeling in the software process. Finally, we give an overview of a generalpurpose concern-space modeling schema, Cosmos, which we illustrate with an example based on the transformation of an individual component into a product family.", "num_citations": "52\n", "authors": ["369"]}
{"title": "Aspect-oriented design needs concern modeling\n", "abstract": " Concern modeling is the modeling of concerns and their interrelationships as independent, first-class entities apart from their representations in other development work products such as design specifications. Concern modeling is a natural complement to aspect-oriented design and facilitates many objectives in aspect-oriented software development, including (among others) analysis, understanding, evolution, and reuse.", "num_citations": "38\n", "authors": ["369"]}
{"title": "Dependency-spheres: A global transaction context for distributed objects and messages\n", "abstract": " Many enterprise systems employ both object-oriented middleware (OOM) and message-oriented middleware (MOM). However support for the integration of object and messaging services, in particular for transaction processing across object and messaging components, is very limited. In this paper we introduce the concept of Dependency-Spheres (D-Spheres), a global transaction context for distributed objects and messages. A D-Sphere integrates standard distributed object transactions and conditional asynchronous messages in one single unit-of-work. It is a new service for transaction processing that enhances two-phase-commit ACID transactions with pre-commit message delivery, concurrent evaluations of transaction-critical message conditions, and message compensation support for recovery. D-Spheres enrich standard OOM and MOM services, uniquely providing for an increased level of reliability for\u00a0\u2026", "num_citations": "37\n", "authors": ["369"]}
{"title": "Hyper/J\u2122: multi-dimensional separation of concerns for Java\u2122\n", "abstract": " Separation of concerns [6] is at the core of software engineering. Done well, it can provide a host of crucial benefits: additive, rather than invasive, change and low impact of change; improved comprehension and reduction of complexity; adaptability, customizability, and reuse, particularly of off-the-shelf components; and simplified component integration.Despite over two decades of research, separation of concerns in object-oriented (OO) software has not achieved these anticipated benefits. Instead, software still demonstrates problems associated with poor separation of concerns: conceptually simple evolution entails pervasive, invasive changes; failure to anticipate future requirements requires major rearchitecture, while building in flexibility complicates software; and difficult reuse and integration.", "num_citations": "33\n", "authors": ["369"]}
{"title": "Predicting likelihood of on-time product delivery, diagnosing issues that threaten delivery, and exploration of likely outcome of different solutions\n", "abstract": " A task effort estimator may determine a probability distribution of an estimated effort needed to complete unfinished tasks in a project based on one or more of a set of completed tasks belonging to a project and attributes associated with the completed tasks belonging to the project, a set of completed tasks not belonging to the project and attributes associated with the completed tasks not belonging to the project, or the combination of both. A project completion predictor may determine a probability distribution of completion time for the project based on the probability distribution of an estimated effort needed to complete the unfinished tasks in the project, and one or more resource and scheduling constraints associated with the project.", "num_citations": "26\n", "authors": ["369"]}
{"title": "Conditional messaging: extending reliable messaging with application conditions\n", "abstract": " Standard messaging middleware guarantees the delivery of messages to intermediary destinations like message queues, but does not guarantee the receipt or the processing of a message by final recipients. Conditional messaging is an extension to standard messaging middleware that addresses this shortcoming by allowing an application to define, monitor, and evaluate various conditions on messages, such as time constraints on the receipt or the processing of a message by a set of final recipients. In this paper, we introduce the notion of conditional messaging, and present the design and implementation of a flexible and reliable system that supports conditional messaging for use in Java 2 Enterprise Edition and message queuing environments. Our solution uniquely shifts the responsibilities for implementing the management of conditions on messages from the application to the middleware. We further\u00a0\u2026", "num_citations": "25\n", "authors": ["369"]}
{"title": "Methods and apparatus for defining, observing and evaluating message delivery outcome on a per-message basis\n", "abstract": " A computer-based method for use in an asynchronous messaging system comprises the steps of:(i) defining at least one message delivery outcome condition for at least one message to be sent in the system and associating the message delivery outcome condition with the message to be sent in the system;(ii) sending the message with the associated message delivery outcome condition in the system; and (iii) monitoring the delivery of the sent message and evaluating the delivery outcome of the message with respect to the associated message delivery outcome condition such that a sender of the message may be notified as to the outcome of the delivery of the message to final recipients.", "num_citations": "24\n", "authors": ["369"]}
{"title": "Concerns in a requirements model-a small case study\n", "abstract": " Concerns are introduced into the software development process with the beginning of requirements engineering. Even simple requirements statements and use-case descriptions can give rise to substantial concern models. These models can exhibit features relating to the occurrence and distribution of concerns of different domains and types, of shared versus unique concerns, and of explicit versus implicit concerns. In the way that concerns are organized, shared, and viewed, these models exhibit aspectual features and multiple dimensions.Early-stage concern modeling has many potential applications. It can lead to better understanding and more systematic treatment of concerns from the first stages of development and it may help to identify reusable elements during requirements analysis. It can facilitate the formulation of alternative views and representations of requirements, and it should support the development of compositional technologies for requirements. Concernmodeling of requirements can also support the more systematic and effective use of concern modeling and aspect-oriented technologies downstream in the life cycle.", "num_citations": "21\n", "authors": ["369"]}
{"title": "Early stage concern modeling\n", "abstract": " Concerns are a prominent focus of attention in the early stages of the software life cycle. Particular approaches to requirements engineering and architectural design address particular concerns and relationships, often from a multidimensional perspective. Cosmos is a general-purpose, multidimensional, concern-space modeling schema that can also be used to model early-stage concerns and relationships. Cosmos is not intended to replace other modeling approaches but to supplement and extend them. Cosmos can also be used to bridge the concern gap from earlyto later stages of the development life cycle.", "num_citations": "21\n", "authors": ["369"]}
{"title": "System and method for identifying concerns\n", "abstract": " A system (and method) for identifying concerns includes a specifying device for specifying at least one initial concern, and an identifying device for identifying at least one related concern having a relationship with at least one initial concern.", "num_citations": "20\n", "authors": ["369"]}
{"title": "System and method for grouping diverse operations\n", "abstract": " A method is provided for managing a group of two or more operations within a software system. The method includes initiating a group context including a sub-context for each operation in the group context, wherein each operation is supported by one of a transactional resource and a messaging component, performing the operations within the sub-contexts, each operation resulting in an outcome, coupling the outcomes within the group context, determining an overall outcome of the group context, and taking at least one action dependent on the overall outcome. The method further includes the step of terminating the group context upon taking one or more actions.", "num_citations": "18\n", "authors": ["369"]}
{"title": "Concerns in the Design of a Software Cache\n", "abstract": " Middleware has become increasingly important in the design of modern software systems [2]. As we have argued previously [7], we believe that separation of concerns is an important consideration in both the design and use of middleware. Middleware often succeeds precisely because it supports some needed separation of concerns (such as with language independence in CORBA [6]). On the other hand, middleware often falters when it fails to effectively separate important concerns (as with the language dependence of Sun\u2019s JINI technology [9]).Separation of concerns is also important for middleware as an application domain. Just as the effective separation of concerns enhances the software engineering properties of software in general, so it enhances the software engineering properties of middleware in particular. Since middleware is a fundamental compositional element of many large systems, the ability to maintain, extend, adapt, and reuse those systems may depend critically on the ability to maintain, extend, adapt, and reuse the middleware with which they are composed.", "num_citations": "18\n", "authors": ["369"]}
{"title": "APPL/A: A prototype language for software-process programming.\n", "abstract": " Degree: Ph. D.DegreeYear: 1990Institute: University of Colorado at BoulderAdviser: Leon J. Osterweil.APPL/A is a prototype language for the programming of software processes. Software-process programming is a new application area for programming languages, one with requirements that are not well addressed by conventional programming languages. APPL/A focuses on software-object management, an especially important and problematic aspect of software processes. APPL/A is intended as an experimental vehicle to provide knowledge about process-programming language design and to enable the programming of prototype software-process programs.", "num_citations": "18\n", "authors": ["369"]}
{"title": "Supporting aspect-oriented software development with the Concern Manipulation Environment\n", "abstract": " In the past few years, the application of aspect-oriented software development (AOSD) technologies has helped improve the development, integration, deployment, evolution, and quality of object-oriented and other software for a growing community of software developers. The Concern Manipulation Environment (CME) is an open-source Eclipse project that targets aspect-oriented technologies. The CME contains task-oriented tools for usage approaches that apply aspect orientation in different development and deployment scenarios. The CME also provides component- and framework-level support for building aspect-oriented tools for a variety of types of software artifacts.", "num_citations": "17\n", "authors": ["369"]}
{"title": "Multidimensional separation of concerns in middleware\n", "abstract": " Middleware is an essential element in large software systems such as those that support enterprise applications that require the interoperation of multiple components. The components may be distributed, independently operated, and heterogeneous with respect to language, data model, environment, architecture, and protocols. Middleware is required to integrate these diverse software components and allow them to interoperate effectively. One active area of middleware research and development in recent years has been distributed object systems. Some examples of major efforts in this area include CORBA [1, 2] and Enterprise Java Beans (EJB)[3, 4]. Another major focus of middleware efforts is in messaging systems such as IBM\u2019s MQ Series and MSMQ [5].Multidimensional separation of concerns (MDSOC)[6] provides a new and more flexible way of managing the separation of concerns in software. In particular, MDSOC overcomes the limitations of the typical programing-language mechanisms for separating concerns, namely that the available mechanisms typically do not separate many concerns very well, resulting in entanglements that significantly complicate software maintenance, evolution, integration, and reuse. MDSOC is based on the premise that independent concerns should be represented independently, and that programs can be developed by the principled composition of separate concerns according to systematic rules.", "num_citations": "17\n", "authors": ["369"]}
{"title": "Mining a use case model by analyzing its description in plain language and analyzing textural use case models to identify modeling errors\n", "abstract": " A system and method for identifying modeling errors in textual use case description analyze an input text describing a use case and create an application model representing the use case, the application model containing information obtained from analyzing the input text describing the use case. The application model may be automatically analyzed using automatic process and one or more errors in the use case and/or reports about the use case may be generated. In one aspect, processing components may be integrated into a user development environment to allow developing use cases and improving them incrementally and/or iteratively as information is identified about the use cases.", "num_citations": "15\n", "authors": ["369"]}
{"title": "Programming heterogeneous transactions for software development environments\n", "abstract": " Describes an approach to supporting transaction model interoperability for software development environments. In attempting to integrate tools written in two languages with different transaction models, it was found that existing technology was insufficient to facilitate a centralized mechanism that is poorly integrated with features in most languages. The authors propose instead a decentralized approach to interoperability that gives programmers extended control over transactions to accommodate a variety of transaction models and to permit the programming of alternative forms of heterogeneous transactions. This approach is especially appropriate for supporting transaction model interoperability in software development environments.< >", "num_citations": "15\n", "authors": ["369"]}
{"title": "Aspect-oriented software development and software process\n", "abstract": " Aspect orientation is an increasingly promising approach to software development. It affords benefits deriving from advanced separation of concerns, including concern modeling, encapsulation, extraction, and composition. These may enable the development and evolution of software on a higher semantic level, with unprecedented control and flexibility. Aspect orientation may hold similar benefits for software process. Aspect orientation has implications for process on three levels: aspect-oriented products, aspect-oriented processes, and aspect-oriented process languages. It also facilitates insight into how the software-process spectrum may be unified. Macroprocess and microprocess concerns do not overlap, but some relationship between them is necessary. The relating of macroprocess concerns and microprocess concerns is the concern of a mesoprocess level, the principal home for process\u00a0\u2026", "num_citations": "14\n", "authors": ["369"]}
{"title": "Working with implicit concerns in the concern manipulation environment\n", "abstract": " Existing bodies of software contain many implicit concerns\u2013concerns that are not separated, or even identified, in the artifacts. These concerns are, nonetheless, important for understanding and working with the software. Different sets of concerns are important for different development activities. Even in the case of aspect-oriented software, with its richer capabilities for making concerns explicit, not all concerns needed for some maintenance or evolution activity will necessarily have been separated by the original developers. When working with existing software, it is important to be able to identify such implicit concerns when needed, locate the software that pertains to them, model them and work with them. This position paper discusses how Concern Manipulation Environment (CME)[2] provides support for doing so. The CME is an Eclipse open-source project aimed at supporting AOSD across the software lifecycle, at two levels:", "num_citations": "14\n", "authors": ["369"]}
{"title": "GUI support for diagnosing and remediating problems that threaten on-time delivery of software and systems\n", "abstract": " A graphical interface module may provide a set of graphical presentations comprising at least: a Likelihood of Delivery chart showing a probability distribution of predicted delivery dates; a Delivery Date Risk Trend chart showing how the completion time for the project predicted according to the Likelihood of Delivery chart has changed over time; and a Burndown chart that shows at least work-items of planned work for the project. Each of the Likelihood of Delivery chart, the Delivery Date Risk Trend chart, and the Burndown chart has a timeline axis.", "num_citations": "13\n", "authors": ["369"]}
{"title": "Issues in the design and implementation of a concern-space modeling schema\n", "abstract": " In this paper we address issues in the design and implementation of a concern-space modeling schema. A concern space is a representation of the concerns that apply to a software system and of various relationships among those concerns. This work is based on the premise that concerns should be treated as first class entities in software development Concern-space modeling is key to enabling concerns to be treated independently and systematic across the software life cycle.We are developing a prototype concern-space modeling schema called Cosmos, in conjunction with which we are also experimenting with concern modeling for middleware and other systems [6]. The design and implementation of Cosmos entails the definition of a data model for concerns and their relationships and the design and implementation of structures to maintain data according to that model.", "num_citations": "13\n", "authors": ["369"]}
{"title": "Exploring the impact of changing project parameters on the likely delivery date of a project\n", "abstract": " A user may be allowed to specify a change in one or more parameter data associated with the project, the one or more parameter data used previously to compute a probability distribution of completion time of the project. The probability distribution of completion time of the project may be recomputed based on the change. The recomputed probability distribution of the completion time of the project may be presented. An option to save the recomputed probability distribution may be provided. An option may be provided to specify another change in one or more parameter data associated with the project and repeat the recomputing and the presenting procedures based on another change in one or more parameter data associated with the project.", "num_citations": "11\n", "authors": ["369"]}
{"title": "Advanced separation of concerns for component evolution\n", "abstract": " Poor separation of concerns impedes the evolution of complex software systems. Advanced separation of concerns supports the flexible yet well-structured evolution of systems according to meaningful units of change. An up-front investment in concern modeling pays dividends in facilitating many kinds of change over the life of a system.", "num_citations": "11\n", "authors": ["369"]}
{"title": "Applicability of categorization theory to multidimensional separation of concerns\n", "abstract": " Prototype theory is a cognitive theory of categorization that describes many aspects of MDSOC better than the classical theory of hierarchical categories. Prototype theory implies that composition is a more natural means of specifying components than is inheritance. Prototypes are useful in organizing information and workflows in component composition systems.", "num_citations": "11\n", "authors": ["369"]}
{"title": "Preconditions, postconditions, and provisional execution in software processes\n", "abstract": " Preconditions and postconditions are widely used in execution models for software processes. The conditions that control software processes, however, can be complex and di cult to evaluate in the context of ongoing development activities. If evaluations and tasks are conducted in parallel, evaluations may be blocked for lack of access to data that are held by tasks. Conversely, task initiations and terminations may be blocked because their controlling conditions cannot be evaluated. Costly delays or even deadlocks may result. Potential con icts between condition evaluations and process tasks can be reduced by a number of strategies, such as limiting the extent of conditions, or serializing evaluations and tasks. However, each of these strategies has its drawbacks (such as failure to capture full process semantics, or reduced process concurrency).This paper introduces a new strategy for condition-based process execution, specifically, provisional execution of process tasks. When it is not possible to completely evaluate all preconditions or postconditions because of con icts with ongoing activities, a manager may allow some tasks to be executed provisionally. That is, a task may be initiated before all its preconditions are satis ed, or terminated before all its postconditions are satis ed. The blocked conditions are not ignored rather, their evaluation is deferred but still required. These conditions must be satis ed or the task is subject to abort. Provisional execution allows increased exibility in both the execution of process tasks and the evaluation of controlling conditions. It can lead to increased concurrency, reduced concurrency con icts, and generally\u00a0\u2026", "num_citations": "11\n", "authors": ["369"]}
{"title": "Accommodating manual activities in automated process programs\n", "abstract": " This paper presents a hybrid compaction scheme for test responses containing unknown values, which consists of a space compactor and an unknown-blocking multiple input signature registers (MISR). The proposed scheme guarantees no coverage loss for the modeled faults. The proposed hybrid scheme can also be tuned to observe any user-specified percentage of responses for controlling the coverage loss for un-modeled faults. The experimental results demonstrate that, in comparison with a space compactor or an unknown-blocking MISR alone, the hybrid compaction scheme achieves a lower coverage loss without demanding more test-data volume. In addition, we propose a quantitative approach to estimate the required percentage of observable responses for the proposed scheme, directly based on a test-quality metric of un-modeled faults.", "num_citations": "11\n", "authors": ["369"]}
{"title": "Concern Space Modeling in Cosmos\n", "abstract": " Cosmos is a schema for modeling software concerns across the life cycle. It defines a metamodel, including concern types, relationships, and predicates, for modeling multidimensional concern spaces. Cosmos allows concerns to be modeled independently of development formalisms, tools, and methods, and it complements and supports advanced separation of concerns technologies.", "num_citations": "9\n", "authors": ["369"]}
{"title": "Detecting patterns that increase the risk of late delivery of a software project\n", "abstract": " Historic and current development data associated with the project may be gathered. A catalog of patterns, each pattern associated with a data measure and an analysis routine capable of detecting the pattern according to the data measure in a given data set may be obtained. A pattern describes a particular indication in the historical and development data, which arises one or more of, at a discrete point in time or over a period of time. The analysis routine may be applied to the historic and current development data. A notification may be issued responsive to identifying the pattern in the historic and current development data. The applying and the issuing may be performed for each pattern in the catalog of patterns.", "num_citations": "7\n", "authors": ["369"]}
{"title": "The concern manipulation environment\n", "abstract": " The area of aspect-oriented software development (AOSD) has seen much progress in the past few years towards improving the quality of object-oriented, generative, and component-based software engineering, including some use in large-scale applications. Research and development efforts have demonstrated that support for large-scale AOSD must address the full software lifecycle, with all its tasks, activities, artifacts, their interrelationships, and consistency across them. Thus, large-scale AOSD requires tools, paradigms, and methodologies that support:", "num_citations": "7\n", "authors": ["369"]}
{"title": "Calendar of activities\n", "abstract": " Representing activities on an electronic calendar, in one aspect, may include receiving a first amount of allocated time for a first type of activity having a duration but not scheduled for a time, receiving a second amount of allocated time for a second type of activity having a duration and a scheduled time, and displaying, in a single representation, a total amount of allocated time for both the first type of activity having a duration but not scheduled for a time and the second type of activity having a duration and a schedule time. Different types, quantities, and qualities of information relating to when the first type of activity and the second type of activity occur may be combined in the single representation.", "num_citations": "6\n", "authors": ["369"]}
{"title": "Middleware selection\n", "abstract": " An increasing variety of middleware systems is available for use in enterprises today. Two widely used but very different middleware styles are object-oriented and message-oriented. Within each of these styles, there are multiple products to choose from. Moreover, any of these products may be used alone or in com- bination with other products. Thus the problem of middleware selection is in- creasingly important in the engineering of enterprise software systems.               Middleware selection, construed broadly, is the determination of middleware to be used in a software development or integration project. The middleware may already exist, in which case selection reflects an intention to acquire it, or the middleware may not yet exist, in which case selection implies an intention to develop it.", "num_citations": "6\n", "authors": ["369"]}
{"title": "Transactional Business Process Servers: Definition and Requirements\n", "abstract": " This paper discusses the implementation of transactional business processes using business object components. We define and formulate the idea of a transactional business process server (TBPS) and describe important requirements for TBPS systems. TBPS in combination with business components improve both the development and execution of automated transactional business processes.", "num_citations": "6\n", "authors": ["369"]}
{"title": "A Process Programm in APPL/A for the Software Process Modeling Problem.\n", "abstract": " CiNii \u8ad6\u6587 - A Process Programm in APPL/A for the Software Process Modeling Problem. CiNii \u56fd\u7acb\u60c5\u5831\u5b66\u7814\u7a76\u6240 \u5b66\u8853\u60c5\u5831\u30ca\u30d3\u30b2\u30fc\u30bf[\u30b5\u30a4\u30cb\u30a3] \u65e5\u672c\u306e\u8ad6\u6587\u3092\u3055\u304c\u3059 \u5927\u5b66\u56f3\u66f8\u9928\u306e\u672c\u3092\u3055\u304c\u3059 \u65e5\u672c\u306e\u535a\u58eb\u8ad6\u6587\u3092\u3055\u304c\u3059 \u65b0\u898f\u767b\u9332 \u30ed\u30b0\u30a4\u30f3 English \u691c\u7d22 \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u9589\u3058\u308b \u30bf\u30a4\u30c8\u30eb \u8457\u8005\u540d \u8457\u8005ID \u8457\u8005\u6240\u5c5e \u520a\u884c\u7269\u540d ISSN \u5dfb\u53f7\u30da\u30fc\u30b8 \u51fa\u7248\u8005 \u53c2\u8003\u6587\u732e \u51fa\u7248\u5e74 \u5e74\u304b\u3089 \u5e74\u307e\u3067 \u691c\u7d22 \u691c\u7d22 \u691c\u7d22 CiNii\u7a93\u53e3\u696d\u52d9\u306e\u518d\u958b\u306b\u3064\u3044\u3066 A Process Programm in APPL/A for the Software Process Modeling Problem. SUTTON Stanley M. \u88ab\u5f15\u7528\u6587\u732e: 1\u4ef6 \u8457\u8005 SUTTON Stanley M. \u53ce\u9332 \u520a\u884c\u7269 Proceedings of the 6th International Software Process Workshop Proceedings of the 6th International Software Process Workshop, 1990 \u88ab\u5f15\u7528\u6587\u732e: 1\u4ef6\u4e2d 1-1\u4ef6\u3092 \u8868\u793a 1 \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2 \u30d7\u30ed\u30bb\u30b9\u9069\u5fdc\u306e\u305f\u3081\u306e\u5f62\u5f0f\u7684\u30e2\u30c7\u30eb \u9234\u6728 \u6b63\u4eba , \u7247\u5c71 \u5353\u4e5f , Masato Suzuki , Takuya Katayama , \u5317\u9678\u5148\u7aef\u79d1\u5b66\u6280\u8853\u5927\u5b66\u9662\u5927\u5b66\u60c5\u5831\u79d1\u5b66\u7814\u7a76\u79d1 , \u5317\u9678\u5148\u7aef\u79d1\u5b66\u6280\u8853\u5927\u5b66\u9662\u5927\u5b66\u60c5\u5831\u79d1\u5b66\u2026", "num_citations": "6\n", "authors": ["369"]}
{"title": "From Process Programming to Process Engineering\n", "abstract": " Osterweil proposed the idea of processes as a kind of software in 1986. It arose from prior work on software tools, tool integration, and development environments, and from a desire to improve the specification and control of software development activities. The vision of process programming was an inspiring one, directly leading to ideas about process languages, process environments, process science (both pure and applied), and to opportunities for process analysis and simulation. Osterweil, his colleagues, and a thriving community of researchers worldwide have worked on these and related ideas for 25 years now, with many significant results. Additionally, as Osterweil and others have shown, ideas and approaches that originated in the context of software process are applicable in other domains, such as science, government, and medicine. In light of this, the future of process programming looks as\u00a0\u2026", "num_citations": "4\n", "authors": ["369"]}
{"title": "Opportunities, limitations, and tradeoffs in process programming\n", "abstract": " Software-process programming faces numerous opportunities, limitations, and tradeoffs. Effective process definitions have been characterized in terms of accuracy, precision, fidelity, and fitness. Some of these properties are inherently limited, while others are subject to tradeoff. The relationship between a software process and an executing process program can be described by correspondence, determinability, and coordination. Program behavior may correspond only in part to process behavior. The ability of a process program to determine the behavior of a software process is limited. Coordination requires a process program to engage developers; limits on coordination imply limits on fidelity and precision. These issues affect the use of process programs as models, the tailorability and flexibility of processes, and process-program modifiability.< >", "num_citations": "4\n", "authors": ["369"]}
{"title": "Advancing process modeling, simulation, and analytics in practice\n", "abstract": " If you take a broad view, there are many ways ahead for software process modeling and simulation. One way to broaden the view is to include not just software processes but also systems and service processes. Another is to address not just technical processes but also business processes. In any scope, impact can be strengthened by combining modeling and simulation with analytics. A way to assure longevity of the field is to solve problems in practice. These afford a variety of ways to make contributions, including both applied and fundamental. Challenges that must be overcome in achieving practical results are getting access to practitioners, acquiring useful data, and getting your solution adopted (among others). More empirical studies and experience reports are needed. But there are many routes by which contributions may flow to and from the field.", "num_citations": "3\n", "authors": ["369"]}
{"title": "SAFARI: A meta-tooling platform for creating language-specific IDEs\n", "abstract": " Draft of SAFARI Long Talk for EclipseCon 2007 Page 1 \u00a9 2007 by \u00abAuthor\u00bb; made available under the EPL v1.0 | Date | Other Information, if necessary \u00a9 2007 by IBM | July 2007 GTTSE 2007 SAFARI: A Meta-Tooling Platform for Creating Language-Specific IDEs Robert M. Fuhrer, Philippe Charles, Stanley M. Sutton Jr. (IBM TJ Watson Research Center) Chris Laffra (IBM Rational) Page 2 Presentation Title | Presentation Subtitle | \u00a9 2007 by \u00abAuthor\u00bb; made available under the EPL v1.0 SAFARI | A Meta-Tooling Platform for Creating Language-Specific IDEs | \u00a9 2007 by IBM GTTSE 2007 Outline \u25aa Introduction \u25aa SAFARI IDE Development Process Walk-through \u25aa SAFARI Architecture \u25aa Status & Future Work Page 3 Presentation Title | Presentation Subtitle | \u00a9 2007 by \u00abAuthor\u00bb; made available under the EPL v1.0 SAFARI | A Meta-Tooling Platform for Creating Language-Specific IDEs | \u00a9 2007 by IBM GTTSE 2007 : IDE \u25aa \u25aa \u2026", "num_citations": "3\n", "authors": ["369"]}
{"title": "Process-based See Architectures Session Report\n", "abstract": " In this paper, we propose a resampling of the OSA-UCS. Following the same sampling criterion that used to define the 424 specimens of the OSA-UCS set, we enlarged such an ensemble by adding 590 samples located in the outer region of the original volume. This allows to overcome the bottleneck in the use of the original color basis for computer vision applications due to lack of saturated colors. The out-comes of a color categorization experiment performed on the extended basis were used to train a discrete color nam-ing model that we have recently proposed. The model was validated through the analysis of its performance for seg-menting natural images. Results show that the extended basis removes the inability of the model to deal with sat-urated colors which significantly improves segmentation re-sults and makes the extended bases exploitable for computer vision applications.", "num_citations": "3\n", "authors": ["369"]}
{"title": "Informed projection: using what you know to make simple estimates of work better\n", "abstract": " Informed projection is a technique for estimating work items created and completed for a software release. It combines counts of work items created and completed so far with models of items expected to be created and completed in the remaining schedule to yield projections of expected total items created and completed. Informed projection is not significantly more difficult to use than popular techniques like burn-down and burn-up charts but it overcomes limitations associated with those by accommodating variations in the total amount of work and in the rates of work creation and completion. Experiments confirm that simple models can yield relatively accurate projections fairly early in a release, that these models do not have to be unrealistically accurate, that effective models can be constructed simply, and that the approach works for projects with varied characteristics and patterns of work.", "num_citations": "2\n", "authors": ["369"]}
{"title": "Method and system for estimating the progress and completion of a project based on a bayesian network\n", "abstract": " A method for projecting the progress of a project, the project including work items, the method including: obtaining starting state transition probabilities for the work items in a first time interval; obtaining starting populations of the work items, wherein the starting populations of the work items include states of the work items at the beginning of the first time interval; determining expected distributions for the work item states at the end of the first time interval by using the starting state transition probabilities and the starting populations; identifying actual states for the work items at the end of the first time interval; determining actual state transition rates of the work items for the first time interval by using the starting populations and the actual states; and determining expected future state transition probabilities for the work items by using the starting state transition probabilities and the actual state transition rates.", "num_citations": "2\n", "authors": ["369"]}
{"title": "Multiple dimensions of concern in software testing\n", "abstract": " Software testing is an area of software development in which multiple dimensions of concern are evident. They are reflected in the diversity of issues that are addressed in software testing, encompassing aspects of the products under test, test artifacts, and test processes. Software testing brings these concerns together in a variety of combinations and forms that apply both within testing and across the software life cycle. For this reason, an analysis of software testing from the perspective of multiple dimensions of concerns is especially illuminating. Conversely, the examination of software testing illustrates many aspects of the concern-oriented view of software in general.The view of software testing in terms of multiple dimensions of concern is developed as follows. Section 2 presents three motivating scenarios based on testing experiences in the context of commercial software development. Section 3 describes the dimensions of concern that are present in these scenarios. Sections 4 to 6 address evidence for cross-cutting concerns, simultaneous overlapping concerns, and multiple levels and scopes of concerns. Finally, Section 7 presents a discussion of decomposition and composition based on concerns, including topics for research.", "num_citations": "2\n", "authors": ["369"]}
{"title": "FCM: A flexible consistency model for software processes\n", "abstract": " This paper presents a flexible model of consistency for software processes and products. The model is motivated by the difficulty of defining and maintaining the consistency of software products during software development. Software development can be viewed as the process of creating a consistent software product. However, software processes are lengthy and complex, the criteria for consistency are often dynamic and relative to specific processes, and inconsistency is often inescapable. A detailed examples is presented in Section 2. The goal of the flexible consistency model presented here is not to attempt to suppress these problems. Rather it is to accommodate the problems of representing arid maintaining consistency in a way that facilitates tile modeling of software processes and the development of software products. A consistency model for software products has several aspects. It must minimally include some notion of consistency for those products and some mechanism for evaluating that consistency. In practice the criteria for consistency may be implicit or explicit, and the mechanism for evaluating and enforcing consistency may be manual or automatic for example, see 8, 19, 11, 12, 10. The model may also include some view, either implicit or explicit, of how the criteria for consistency evolve in time if at all. A practical consistency model must also be integrated with a model for operations on the data, and it must include rules about the consequences of consistency or inconsistency for those operations. Operations on data are typically addressed in transaction models, which may also include operational criteria for consistency ie\u00a0\u2026", "num_citations": "2\n", "authors": ["369"]}
{"title": "N degrees of separation\n", "abstract": " N degrees of Separation: Page 1 N degrees of Separation: Multi-Dimensional Separation of Concerns Peri Tarr, Harold Ossher, William Harrison Stanley M. Sutton Jr. IBM Watson Research Center EC Cubed, Inc. ICSE, 1999 Presented by David Gonzalez Page 2 Key Insights(1/2) \u2022 A dominant decomposition(features, objects) based on separation of concerns forces structuring software by one dimension of separation at a time, resulting in sparse functionalities if viewed by another concern. \u2022 Provides a model for simultaneous, non-invasive multi-dimensional decomposition, hyperslicing, and composition of artifacts using hypermodules, while avoiding the need for new software formalisms. Page 3 Key Insights(2/2) \u2022 A hyperslice is a set of conventional modules that encapsulate a nondominant concern. \u2022 A hypermodule is a set of hyperslices that obey a given rule. \u2022 Considered instances of the model: subject-oriented \u2026", "num_citations": "2\n", "authors": ["369"]}
{"title": "The concern manipulation environment [oopsla/gpce]\n", "abstract": " The Concern Manipulation Environment (CME) aims to provide a set of open, extensible components and a set of tools that promote aspect-oriented software development (AOSD) throughout the software lifecycle. It has two main goals:", "num_citations": "1\n", "authors": ["369"]}
{"title": "Language Interoperability Issues in the Integration of Heterogeneous Systems\n", "abstract": " Heterogeneity and consequently interoperability, has become fundamental to large system development and integration. We investigated language interoperability issues in an attempt to integrate two tools written in different languages. We required capabilities such as access to data in both languages, coordination of transactions between languages, and the signaling of events between the languages, among others. These kinds of functionality are typical of advanced heterogeneous applications. We found, however, that current interoperability mechanisms did not provide sufficient support because they tend to focus on a particular domain, eg, types, events, or transactions. Interoperability between languages depends on the resolution of semantic differences and coordination of functionality in many different domains, such as data, persistence, events and triggers, consistency, and transactions. Interoperability is further complicated by semantic and functional interdependencies within languages.Descriptors:", "num_citations": "1\n", "authors": ["369"]}