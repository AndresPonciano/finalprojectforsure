{"title": "The Rational Unified Process: an introduction\n", "abstract": " The Rational Unified Process, Third Edition, is a concise introduction to IBM's Web-enabled software engineering process. Rational Unified Process (R), or RUP (R), Lead Architect Philippe Kruchten quickly and clearly describes the concepts, structure, content, and motivation that are central to the RUP. Readers will learn how this approach to software development can be used to produce high-quality software, on schedule and on budget, using the Unified Modeling Language (UML), software automation, and other industry best practices. The RUP unifies the entire software development team and optimizes the productivity of each team member by bringing them the experience of industry leaders and lessons learned from thousands of projects. It provides detailed and practical guidance through all phases of the software development life cycle, but it is not inflexible. The RUP can be tailored to suit a wide variety of projects and organizations. This new edition has been updated to reflect all the changes integrated into the latest version of the Rational Unified Process--RUP 2003. It includes a four-color poster that lists key RUP elements: disciplines, workflows, artifacts, phases, and milestones. RUP 2003 also offers The RUP Builder with enhanced configurability, process views, and three base configurations. MyRUP, enabling personalized views of the RUP configuration. Additions to the Rational Process Workbench, used to define process components, perform modifications to the RUP, and create process plugins. The introduction of a separate Process Engineering Process offering guidance on adapting the RUP, creating plugins, and deploying\u00a0\u2026", "num_citations": "6393\n", "authors": ["625"]}
{"title": "The 4 + 1 view model of architecture\n", "abstract": " The 4+1 View Model organizes a description of a software architecture using five concurrent views, each of which addresses a specific set of concerns. Architects capture their design decisions in four views and use the fifth view to illustrate and validate them. The logical view describes the design's object model when an object-oriented design method is used. To design an application that is very data driven, you can use an alternative approach to develop some other form of logical view, such as an entity-relationship diagram. The process view describes the design's concurrency and synchronization aspects. The physical view describes the mapping of the software onto the hardware and reflects its distributed aspect. The development view describes the software's static organization in its development environment.< >", "num_citations": "4004\n", "authors": ["625"]}
{"title": "The Rational Unified Process made easy: a practitioner's guide to the RUP\n", "abstract": " \" Per Kroll and Philippe Kruchten are especially well suited to explain the RUP... because they have been the central forces inside Rational Software behind the creation of the RUP and its delivery to projects around the world.\"--From the Foreword by Grady Booch This book is a comprehensive guide to modern software development practices, as embodied in the Rational Unified Process, or RUP. With the help of this book's practical advice and insight, software practitioners will learn how to tackle challenging development projects--small and large--using an iterative and risk-driven development approach with a proven track record. The Rational Unified Process Made Easy will teach you the key points involved in planning and managing iterative projects, the fundamentals of component design and software architecture, and the proper employment of use cases. All team members--from project managers to analysts, from developers to testers--will learn how to immediately apply the RUP to their work. You will learn that the RUP is a flexible, versatile process framework that can be tailored to suit the needs of development projects of all types and sizes. Key topics covered include: How to use the RUP to develop iteratively, adopt an architecture-centric approach, mitigate risk, and verify software quality Tasks associated with the four phases of the RUP: Inception, Elaboration, Construction, and Transition Roles and responsibilities of project managers, architects, analysts, developers, testers, and process engineers in a RUP project Incrementally adopting the RUP with minimal risk Common patterns for failure with the RUP--and how to avoid them Use\u00a0\u2026", "num_citations": "934\n", "authors": ["625"]}
{"title": "Technical debt: From metaphor to theory and practice\n", "abstract": " The metaphor of technical debt in software development was introduced two decades ago to explain to nontechnical stakeholders the need for what we call now \"refactoring.\" As the term is being used to describe a wide range of phenomena, this paper proposes an organization of the technical debt landscape, and introduces the papers on technical debt contained in the issue.", "num_citations": "654\n", "authors": ["625"]}
{"title": "The past, present, and future for software architecture\n", "abstract": " It's been 10 years since David Garlan and Mary Shaw wrote their seminal book Software Architecture Perspective on an Emerging Discipline, since Maarten Boasson edited a special issue of IEEE Software on software architecture, and since the first International Software Architecture Workshop took place. What has happened over these 10 years? What have we learned? Where do we look for information? What's the community around this discipline? And where are we going from here?This article is part of a focus section on software architecture.", "num_citations": "404\n", "authors": ["625"]}
{"title": "An ontology of architectural design decisions in software intensive systems\n", "abstract": " Architectural design decisions deserve to be first class entities in the process of developing complex software-intensive systems. Preserving the graphs of decisions and all their interdependencies will support the evolution and maintenance of such systems. In this paper we present a possible ontology of architectural design decisions, their attributes and relationships, for complex, software-intensive systems.", "num_citations": "389\n", "authors": ["625"]}
{"title": "A general model of software architecture design derived from five industrial approaches\n", "abstract": " We compare five industrial software architecture design methods and we extract from their commonalities a general software architecture design approach. Using this general approach, we compare across the five methods the artifacts and activities they use or recommend, and we pinpoint similarities and differences. Once we get beyond the great variance in terminology and description, we find that the five approaches have a lot in common and match more or less the \u201cideal\u201d pattern we introduced. From the ideal pattern we derive an evaluation grid that can be used for further method comparisons.", "num_citations": "360\n", "authors": ["625"]}
{"title": "Using grounded theory to study the experience of software development\n", "abstract": " Grounded Theory is a research method that generates theory from data and is useful for understanding how people resolve problems that are of concern to them. Although the method looks deceptively simple in concept, implementing Grounded Theory research can often be confusing in practice. Furthermore, despite many papers in the social science disciplines and nursing describing the use of Grounded Theory, there are very few examples and relevant guides for the software engineering researcher. This paper describes our experience using classical (i.e., Glaserian) Grounded Theory in a software engineering context and attempts to interpret the canons of classical Grounded Theory in a manner that is relevant to software engineers. We provide model to help the software engineering researchers interpret the often fuzzy definitions found in Grounded Theory texts and share our experience and\u00a0\u2026", "num_citations": "286\n", "authors": ["625"]}
{"title": "Contextualizing agile software development\n", "abstract": " This paper presents a contextual model for software\u2010intensive systems development to guide the adoption and adaptation of agile software development practices. This model was found especially useful when the project context departs significantly from the \u201cagile sweet spot\u201d, that is, the ideal conditions in which agile software development practices originated from, and where they are most likely to succeed, \u201cout of the box\u201d. This is the case for large systems, distributed development environment, safety\u2010critical systems, system requiring a novel architecture, or systems with an unorthodox business model or governance model. Copyright \u00a9 2011 John Wiley & Sons, Ltd.", "num_citations": "201\n", "authors": ["625"]}
{"title": "A survey on mobile social networks: Applications, platforms, system architectures, and future research directions\n", "abstract": " Mobile social networks (MSNs) have become increasingly popular in supporting many novel applications since emerging in the recent years. Their applications and services are of great interest to service providers, application developers, and users. This paper distinguishes MSNs from conventional social networks and provides a comprehensive survey of MSNs with regard to platforms, solutions, and designs of the overall system architecture. We review the popular MSN platforms and experimental solutions for existing MSN applications and services and present the dominant mobile operating systems on which MSNs are implemented. We then analyze and propose the overall architectural designs of conventional and future MSN systems. In particular, we present the architectural designs from two perspectives: from the client side to the server side, and from the wireless data transmission level to the terminal\u00a0\u2026", "num_citations": "180\n", "authors": ["625"]}
{"title": "In search of a metric for managing architectural technical debt\n", "abstract": " Practices designed to expedite the delivery of stakeholder value can paradoxically lead to unexpected rework costs that ultimately degrade the flow of value over time. This is especially observable when features are developed based on immediate value, while dependencies that may slow down future development efforts are neglected. The technical debt metaphor conceptualizes this tradeoff between short-term and long-term value: taking shortcuts to optimize the delivery of features in the short term incurs debt, analogous to financial debt, that must be paid off later to optimize long-term success. In this paper, we describe taking an architecture-focused and measurement-based approach to develop a metric that assists in strategically managing technical debt. Such an approach can be used to optimize the cost of development over time while continuing to deliver value to the customer. We demonstrate our\u00a0\u2026", "num_citations": "177\n", "authors": ["625"]}
{"title": "\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 Rational Unified Process\n", "abstract": " \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 Rational Unified Process :: \u0424\u0435\u0434\u0435\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0440\u0442\u0430\u043b - \u042d\u041a\u041e\u041d\u041e\u041c\u0418\u041a\u0410, \u0421\u041e\u0426\u0418\u041e\u041b\u041e\u0413\u0418\u042f, \u041c\u0415\u041d\u0415\u0414\u0416\u041c\u0415\u041d\u0422 \u042d\u043a\u0441\u043e\u0446\u043c\u0430\u043d \u043d\u0430 \u0433\u043b\u0430\u0432\u043d\u0443\u044e \u043f\u043e\u0438\u0441\u043a contacts \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u041f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0438\u0438 \u041a\u043d\u0438\u0433\u0438 \u0421\u0442\u0430\u0442\u044c\u0438 \u0414\u0438\u0441\u0441\u0435\u0440\u0442\u0430\u0446\u0438\u0438 \u0413\u043b\u043e\u0441\u0441\u0430\u0440\u0438\u0439 \u0423\u0447\u0435\u0431\u043d\u044b\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u0440\u0435\u0441\u0443\u0440\u0441\u044b \u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0416\u0443\u0440\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0437\u0430\u043b \u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u044b \u0421\u043b\u043e\u0432\u0430\u0440\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0421\u043e\u0446\u0438\u043e\u043b\u043e\u0433\u0438\u044f \u041c\u0435\u043d\u0435\u0434\u0436\u043c\u0435\u043d\u0442 \u041e\u0431\u0449\u0438\u0439 \u0438 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u043c\u0435\u043d\u0442 \u041a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0424\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u043c\u0435\u043d\u0442 \u0411\u0443\u0445\u0433\u0430\u043b\u0442\u0435\u0440\u0441\u043a\u0438\u0439 \u0443\u0447\u0435\u0442 \u0438 \u0430\u0443\u0434\u0438\u0442 \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u043c\u0435\u043d\u0442 \u041c\u0430\u0440\u043a\u0435\u0442\u0438\u043d\u0433 \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430 \u0411\u0438\u0437\u043d\u0435\u0441-\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0430 / \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u043c\u0435\u043d\u0442 \u041c\u0435\u043d\u0435\u0434\u0436\u043c\u0435\u043d\u0442 \u0432 \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0438 \u043d\u0435\u043f\u0440\u0438\u0431\u044b\u043b\u044c\u043d\u043e\u0439 \u0441\u0444\u0435\u0440\u0435 \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0447\u0435\u043b\u043e\u0432\u0435\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438 \u041c\u0435\u0436\u0434\u0443\u043d\u0430\u0440\u043e\u0434\u043d\u044b\u0439 \u0431\u0438\u0437\u043d\u0435\u0441 \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u043f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u044f \u0424\u0438\u043b\u043e\u0441\u043e\u0444\u0438\u044f \u0413\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0438 \u2026", "num_citations": "176\n", "authors": ["625"]}
{"title": "Decision-making techniques for software architecture design: A comparative survey\n", "abstract": " The architecture of a software-intensive system can be defined as the set of relevant design decisions that affect the qualities of the overall system functionality; therefore, architectural decisions are eventually crucial to the success of a software project. The software engineering literature describes several techniques to choose among architectural alternatives, but it gives no clear guidance on which technique is more suitable than another, and in which circumstances. As such, there is no systematic way for software engineers to choose among decision-making techniques for resolving tradeoffs in architecture design. In this article, we provide a comparison of existing decision-making techniques, aimed to guide architects in their selection. The results show that there is no \u201cbest\u201d decision-making technique; however, some techniques are more susceptible to specific difficulties. Hence architects should choose a\u00a0\u2026", "num_citations": "171\n", "authors": ["625"]}
{"title": "Towards agile security assurance\n", "abstract": " Agile development methodologies are gaining acceptance in the software industry. If they are to be used for constructing security-critical solutions, what do we do about assurance? This paper examines how conventional security assurance suits agile methodologies for developing software-intensive systems. It classifies security assurance methods and techniques with regards to their clash with agile development. Suggestions are made for alleviating mismatches between these two methods.", "num_citations": "170\n", "authors": ["625"]}
{"title": "Reconciling perspectives: A grounded theory of how people manage the process of software development\n", "abstract": " Social factors are significant cost drivers for the process of software development. In this field study we generate a grounded theory of how people manage the process of software development. The main concern of engineers involved in the process of software development is getting the job done. To get the job done, people engage in a four-stage process of Reconciling Perspectives. Reconciling Perspectives represents an attempt to converge individuals\u2019 points of view or perspectives about a software project. The process emphasizes the importance of individuals\u2019 abilities to both reach out and engage in negotiations and create shelter from environmental noise to bring a software project to fruition.", "num_citations": "156\n", "authors": ["625"]}
{"title": "A rational development process\n", "abstract": " This paper gives a high level description of the philosophy and structure of the Rational Software Development Process. It is:\u2022 iterative and incremental\u2022 object-oriented\u2022 managed and controlled It is generic enough to be tailorable to a wide variety of software products and projects, both in size and application domain.", "num_citations": "151\n", "authors": ["625"]}
{"title": "Multidimensional context-aware social network architecture for mobile crowdsensing\n", "abstract": " This article proposes a multidimensional context-aware social network architecture, which aims to provide a mobile ecosystem to enable context awareness in the development and utilization of mobile crowdsensing applications. This mobile ecosystem is constructed to provide context awareness capabilities for different roles (i.e., users or developers) in the system and facilitate interactions between them. This system can ease the development of context-aware mobile applications, and enable context-aware mobile crowdsensing considering environmental, personal, and social information. We present a flow of context-aware solutions designed on this system, and highlight the orchestrations and advantages of different context-aware schemes in the system for different types of users (requesters and participants) in mobile crowdsensing. We demonstrate the feasibility of the proposed mobile ecosystem by\u00a0\u2026", "num_citations": "137\n", "authors": ["625"]}
{"title": "What do software architects really do?\n", "abstract": " To be successful, a software architect\u2014or a software architecture team, collectively\u2014must strike a delicate balance between an external focus\u2014both outwards: Listening to customers, users, watching technology, developing a long-term vision, and inwards: driving the development teams\u2014and an internal, reflective focus: spending time to make the right design choices, validating them, and documenting them. Teams that stray too far away from this metastable equilibrium fall into some traps that we describe as antipatterns of software architecture teams.", "num_citations": "131\n", "authors": ["625"]}
{"title": "Extending XP practices to support security requirements engineering\n", "abstract": " This paper proposes a way of extending eXtreme Programming (XP) practices, in particular the original planning game and the coding guidelines, to aid the developers and the customer to engineer security requirements while maintaining the iterative and rapid feedback-driven nature of XP. More specifically, these steps result in two new security-specific flavours of XP User stories: Abuser stories (threat scenarios) and Security-related User stories (security functionalities). The introduced extensions also aid in formulating security-specific coding and design standards to be used in the project, as well as in understanding the need for supporting specific Security-related User stories by the system. The proposed extensions have been tested in a student project.", "num_citations": "126\n", "authors": ["625"]}
{"title": "Generalizing a model of software architecture design from five industrial approaches\n", "abstract": " We compare five industrial software architecture design methods and we extract from their commonalities a general software architecture design approach. Using this general approach, we compare across the five methods the artifacts and activities they use or recommend, and we pinpoint similarities and differences. Once we get beyond the great variance in terminology and description, we find that the 5 approaches have a lot in common and match more or less the \"ideal\" pattern we introduced.", "num_citations": "107\n", "authors": ["625"]}
{"title": "Cultural patterns in software process mishaps: incidents in global projects\n", "abstract": " This paper describes a current and ongoing research project being conducted at the University of British Columbia, Canada. The paper begins by briefly describing past anthropological and sociological culture research. This research will inform our current exploration into the issues surrounding culture and its role in Global Software Development efforts. It then clarifies why this research is particularly important. The paper continues with a description of the current phase of this research, which is an exploratory qualitative approach rooted in Grounded Theory, and of the next phase, which will be a more quantitative approach looking at specific \"problem areas\" that were identified during the first phase.", "num_citations": "100\n", "authors": ["625"]}
{"title": "Technical debt: towards a crisper definition report on the 4th international workshop on managing technical debt\n", "abstract": " As the pace of software delivery increases and technology rapidly changes, organizations seek guidance on how to insure the sustainability of their software development effort. Over the past four years running the workshops on Managing Technical Debt, we have seen increased interest from the software industry to understanding and managing technical debt. A better understanding of the concept of technical debt, and how to approach it, both from a theoretical and a practical perspective is necessary to advance its state of the art and practice. In this paper, we highlight the current confusion in industry on the definition of technical debt, their contributions that have led to a deeper understanding of this concept and the limits of the metaphor, the criteria to discriminate what is technical debt and not, and areas of further investigation.", "num_citations": "93\n", "authors": ["625"]}
{"title": "A methodological leg to stand on: lessons learned using grounded theory to study software development\n", "abstract": " We are engaged in a qualitative research project to understand how people manage the process of software development. This study uses grounded theory as its method of inquiry and we have learned much about what is and what is not a grounded theory. We, like many researchers have claimed to follow grounded theory methods and even to have produced a grounded theory. In reality, we often only borrow a few grounded theory practices to categorize our data. This paper presents lessons learned about using grounded theory so that both researchers and reviewers can critically evaluate investigators' claims to be producing grounded theory.", "num_citations": "93\n", "authors": ["625"]}
{"title": "Software engineering using the Upedu\n", "abstract": " From the Publisher: Provides an introduction to the software development process in a general manner, but shows real-world application using the Unified Process for Education, a modified version of Rational's Unified Process, to facilitate learning. The book starts with the basic aspects of a software process that are the methods, tools, and concepts of software life cycle and software process. The second part emphasizes the engineering and management disciplines that is core of any software engineering process. The third part presents the aspects of software process assessment and measurement Professionals who want to learn about software engineering, especially using a commercial process.", "num_citations": "89\n", "authors": ["625"]}
{"title": "Modeling component systems with the unified modeling language\n", "abstract": " The Rational Process supports component-based development, both in terms of representation of component-based systems, using UML, and the actual workflow, ie, activities and step by step guidance on how to model then to build them. The goal of the process is to enable software development organizations to rapidly build and deploy component-based systems. Often, component-based is immediately associated with a specific technology: CORBA, Microsoft ActiveX/COM/DCOM, JavaBeans (Enterprise and otherwise), etc. But we would like to propose techniques and tools that are independent from a specific technology, but still practical enough to be instantiated in any of these technologies or emerging technologies. This paper gives our definition of component and component-based development, and then goes on to shows how to represent component based system using the Unified Modeling Language (UML).", "num_citations": "87\n", "authors": ["625"]}
{"title": "Casting software design in the function-behavior-structure framework\n", "abstract": " In this article, the author cast the software engineering process into the function-behavior-structure framework and thus into the broader framework of engineering design. By doing so, we can draw some lessons about the state of our favorite engineering discipline. The most important lesson might be that many of the analogies we've drawn from other engineering disciplines, especially civil engineering, are somewhat flawed or biased.", "num_citations": "85\n", "authors": ["625"]}
{"title": "The software architect\n", "abstract": " Much has been written recently about software architecture, how to represent it, and where design fits in the software development process. In this article I will focus on the people who drive this effort: the architect or a team of architects\u2014the software architecture team. Who are they, what special skills do they have, how do they organise themselves, and where do they fit in the project or the organisation?", "num_citations": "85\n", "authors": ["625"]}
{"title": "Der rational unified process: Eine Einf\u00fchrung\n", "abstract": " Page 1 PROFESSIONELLE SOFTWARE ENTWICKLUNG Plippe Kruchten Der Rational Unified Process Eine Einf\u00fchrung Mit Beitr\u00e4gen von Grady Booch ZITETE ADDISON-WESLEY Page 2 Page 3 Der Rational Unified Process V PATIONAL 5517080 UNIFIED This one PPZF-S31-YO3B Page 4 Professionelle Softwareentwicklung Page 5 Philippe Kruchten Der Rational Unified Process Eine Einf\u00fchrung Deutsche \u00dcbersetzung von Cornelia Versteegen ADDISON-WESLEY An imprint of Pearson Education M\u00fcnchen \u2022 Reading, Massachusetts \u2022 Menlo Park, California New York \u2022 Harlow, England \u2022 Don Mills, Ontario Sydney \u2022 Mexico City \u2022 Madrid \u2022 Amsterdam Page 6 Die Deutsche Bibliothek - CIP-Einheitsaufnahme Kruchten, Philippe: Der rational unified process : Eine Einf\u00fchrung / Philippe Kruchten. - M\u00fcnchen ; Reading, Massachusetts [ua] : Addison-Wesley-Longman, 1999 (Professionelle Softwareentwicklung) ISBN \u2026", "num_citations": "79\n", "authors": ["625"]}
{"title": "The impact of intercultural factors on global software development\n", "abstract": " This paper examines the concept of culture, and the potential impact of intercultural dynamics of software development. Many of the difficulties confronting today's global software development (GSD) environment have little to do with technical issues; rather, they are \"human\" issues that occur when extensive collaboration and communication among developers with distinct cultural backgrounds are required. Although project managers are reporting that intercultural factors are impacting software practices and artifacts and deserve more detailed study, little analytical research has been conducted in this area other than anecdotal testimonials by software professionals. This paper presents an introductory analysis of the effect that intercultural factors have on global software development. The paper first establishes a framework for intercultural variations by introducing several models commonly used to define culture\u00a0\u2026", "num_citations": "62\n", "authors": ["625"]}
{"title": "Agility with the RUP\n", "abstract": " What characterizes an agile software development process? Is agility about being fast to deliver?\" Faster, better, cheaper\" is a laudable goal, but faster in itself is not necessarily the right thing to achieve if it is detrimental to quality. Is agility about minimizing the size of the process used to develop software, the size of its description? Not really, or by that measure the null process would be the best.", "num_citations": "62\n", "authors": ["625"]}
{"title": "Rose/Architect: a tool to visualize architecture\n", "abstract": " Rational Rose is a graphical software modeling tool, using the Unified Modeling Language (UML) as its primary notation. It offers an open API that allows the development of additional functionality (\"add-ins\"). In this paper, we describe Rose/Architect, a Rose/sup TM/ \"add-in\" used to visualize architecturally-significant elements in a system's design, developed jointly by University of Southern California (USC) and Rational Software Rose/Architect can be used in forward engineering, marking architecturally significant elements as they are designed and extracting architectural views as necessary. But it can be even more valuable in reverse engineering, i.e., extracting missing key architectural information from a complex model. This model may have been reverse-engineered from source code using the Rose reverse engineering capability.", "num_citations": "61\n", "authors": ["625"]}
{"title": "Software architecture and agile software development: a clash of two cultures?\n", "abstract": " Software architecture is taking a bad rap with the agilists---proponents of agile and lean software development approaches:\" BUFD big up-front design\",\" YAGNI You Ain't Gonna Need It\",\" massive documentation\",\" smells of waterfall\", it is pictured as a typical non-agile practice. However, certain classes of system, ignoring architectural issues too long\" hit a wall\" and collapse by lack of an architectural focus.'Agile architecture': a paradox, an oxymoron, two totally incompatible approaches? In this tutorial, we examine the real issues at stake, beyond the rhetoric and posturing, and show that the two cultures can coexist and support each other, where appropriate. We define heuristics to scope how much architecture a project really needs, to assign actual value to an otherwise invisible architecture; and we review management and development practices that do work in the circumstances where some significant\u00a0\u2026", "num_citations": "58\n", "authors": ["625"]}
{"title": "State of the art of agile governance: a systematic review\n", "abstract": " Context: Agility at the business level requires Information Technology (IT) environment flexible and customizable, as well as effective and responsive governance in order to deliver value faster, better, and cheaper to the business. Objective: To understand better this context, our paper seeks to investigate how the domain of agile governance has evolved, as well as to derive implications for research and practice. Method: We conducted a systematic review about the state of art of the agile governance up to and including 2013. Our search strategy identified 1992 studies in 10 databases, of which 167 had the potential to answer our research questions. Results: We organized the studies into four major groups: software engineering, enterprise, manufacturing and multidisciplinary; classifying them into 16 emerging categories. As a result, the review provides a convergent definition for agile governance, six meta- principles, and a map of findings organized by topic and classified by relevance and convergence. Conclusion: The found evidence lead us to believe that agile governance is a relatively new, wide and multidisciplinary area focused on organizational performance and competitiveness that needs to be more intensively studied. Finally, we made improvements and additions to the methodological approach for systematic reviews and qualitative studies.", "num_citations": "52\n", "authors": ["625"]}
{"title": "A human-centered conceptual model of disasters affecting critical infrastructures\n", "abstract": " Understanding the interdependencies of critical infrastructures (power, transport, communication, etc.) is essential in emergency preparedness and response in the face of disasters. Unfortunately, many factors (eg, unwillingness to disclose or share critical data) prohibited the complete development of such an understanding. As an alternative solution, this paper presents a conceptual model\u2013an ontology\u2013of disasters affecting critical infrastructures. We bring humans into the loop and distinguish between the physical and social interdependencies between infrastructures, where the social layer deals with communication and coordination among representatives (either humans or intelligent agents) from the various critical infrastructures. We validated our conceptual model with people from several different critical infrastructures responsible for disasters management. We expect that this conceptual model can later be used by them as a common language to communicate, analyze, and simulate their interdependencies without having to disclose all critical and confidential data. We also derived tools from it.", "num_citations": "47\n", "authors": ["625"]}
{"title": "A tool to visualize architectural design decisions\n", "abstract": " The software architecture community is shifting its attention to architectural design decisions as a key element of architectural knowledge. Although there has been much work dealing with the representation of design decisions as formal structures within architecture, there still remains a need to investigate the exploratory nature of the design decisions themselves. We present in this paper a tool that should help improve the quality of software architecture by enabling design decision exploration and analysis through decision visualization. Unlike many other design decision tools which acquire, list, and perform queries on decisions, our tool provides visualization components to help with decision exploration and analysis. Our tool has four main aspects: 1) the decision and relationship lists; 2) decision structure visualization view; 3) decision chronology view; and 4) decision impact view. Together, these four\u00a0\u2026", "num_citations": "46\n", "authors": ["625"]}
{"title": "User interface design in the rational unified process\n", "abstract": " User interface design in the rational unified process | Object modeling and user interface design ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksObject modeling and user interface design: designing interactive systemsUser interface design in the rational unified process chapter User interface design in the rational unified process Share on Authors: Philippe Kruchten profile image Philippe Kruchten View Profile , Stefan Ahlqvist profile image Stefan Ahlqvist View Profile , Stefan Bylund profile image Stefan Bylund View Profile Authors Info & Affiliations Publication: Object modeling and user interface design: designing interactive \u2026", "num_citations": "45\n", "authors": ["625"]}
{"title": "Planos Arquitect\u00f3nicos: El Modelo de 4+ 1 Vistas de la Arquitectura del Software\n", "abstract": " Este art\u0131culo presenta un modelo para describir la arquitectura de sistemas de software, bas\u00e1ndose en el uso de m\u00faltiples vistas concurrentes. Este uso de m\u00faltiples vistas permite abordar los intereses de los distintos \u201cstakeholders\u201d de la arquitectura por separado: usuarios finales, desarrolladores, ingenieros de sistemas, administradores de proyecto, etc., y manejar los requisitos funcionales y no funcionales separadamente. Se describe cada una de las cinco vistas descritas, conjuntamente con la notaci\u00f3n para captarla. Las vistas se disenan mediante un proceso centrado en la arquitectura, motivado por escenarios y desarrollado iterativamente.", "num_citations": "45\n", "authors": ["625"]}
{"title": "Software Prototyping Using the SETL Programming Language\n", "abstract": " With increased computational power available, programming languages can now balance efficiency with expressivity. This flexibility improves rapid prototyping of complex design changes.", "num_citations": "45\n", "authors": ["625"]}
{"title": "Managing Technical Debt: Reducing Friction in Software Development\n", "abstract": " \u201cThis is an incredibly wise and useful book. The authors have considerable real-world experience in delivering quality systems that matter, and their expertise shines through in these pages. Here you will learn what technical debt is, what is it not, how to manage it, and how to pay it down in responsible ways. This is a book I wish I had when I was just beginning my career. The authors present a myriad of case studies, born from years of experience, and offer a multitude of actionable insights for how to apply it to your project.\u201d\u2013Grady Booch, IBM Fellow Master Best Practices for Managing Technical Debt to Promote Software Quality and Productivity As software systems mature, earlier design or code decisions made in the context of budget or schedule constraints increasingly impede evolution and innovation. This phenomenon is called technical debt, and practical solutions exist. In Managing Technical Debt, three leading experts introduce integrated, empirically developed principles and practices that any software professional can use to gain control of technical debt in any software system. Using real-life examples, the authors explain the forms of technical debt that afflict software-intensive systems, their root causes, and their impacts. They introduce proven approaches for identifying and assessing specific sources of technical debt, limiting new debt, and \u201cpaying off\u201d debt over time. They describe how to establish managing technical debt as a core software engineering practice in your organization. Discover how technical debt damages manageability, quality, productivity, and morale\u2013and what you can do about it Clarify root causes of debt\u00a0\u2026", "num_citations": "40\n", "authors": ["625"]}
{"title": "Agile in distress: Architecture to the rescue\n", "abstract": " For large-scale software-development endeavors, agility is enabled by architecture, and vice versa. The iterative, risk-driven life cycle inherent in agile approaches allows developers to focus early on key architectural decisions, spread these decisions over time, and validate architectural solutions early. Conversely, an early focus on architecture allows a large agile project to define an implementation structure that drives an organization into small teams, some focusing on common elements and their key relationships and some working more autonomously on features. Architects in agile software development typically work on three distinct but interdependent structures: architecture of the system, the structure of the development organization, and the production infrastructure. Architectural work supports the implementation of high-priority business features without risking excessive redesign later or requiring\u00a0\u2026", "num_citations": "39\n", "authors": ["625"]}
{"title": "A conceptual model of disasters encompassing multiple stakeholder domains\n", "abstract": " Understanding the interdependencies of critical infrastructures (power, transport, communication, etc.) is essential in emergency preparedness and response in the face of disasters. Unfortunately, many factors (e.g., the unwillingness to disclose or share critical data) prohibited the complete development of such an understanding. As an alternative solution, this paper presents a conceptual model \u2013 an ontology \u2013 of disasters affecting critical infrastructures. We bring humans into the loop and distinguish between the physical and social interdependencies between infrastructures, where the social layer deals with communication and coordination among the representatives (either humans or intelligent agents) of the various critical infrastructures. We validated our conceptual model with the people responsible for disaster management from several different critical infrastructures and through a case study. We also\u00a0\u2026", "num_citations": "38\n", "authors": ["625"]}
{"title": "Documentation of software architecture from a knowledge management perspective\u2013design representation\n", "abstract": " In this chapter we survey how architects have represented architectural knowledge and in particular architectural design. This has evolved over the last 3 decades, from very intuitive and informal, to very structured, abstract and formal, from simple diagrams and metaphors, design notations, and specific languages. As our understanding of architectural knowledge evolved, the importance of design rationale and the decision process became more and more prominent. There is however a constant through this evolution: the systematic use of metaphors.", "num_citations": "35\n", "authors": ["625"]}
{"title": "Value-based design decision rationale documentation: Principles and empirical feasibility study\n", "abstract": " The explicit documentation of the rationale of design decisions is a practice generally encouraged, but rarely implemented in industry because of a variety of inhibitors. Methods proposed in the past for design decisions rationale documentation (DDRD) aimed to maximize benefits for the DDRD consumer by imposing on the producer of DDRD the burden to document all the potentially useful information. We propose here a compromise which consists in tailoring DDRD, based on its intended use or purpose. In our view, the adoption of a tailored DDRD, consisting only of the required set of information, would mitigate the effects of DDRD inhibitors. The aim of this paper is twofold: i) to discuss the application of value-based software engineering principles to DDRD, ii) to describe a controlled experiment to empirically analyze the feasibility of the proposed method. Results show that the level of utility related to the same\u00a0\u2026", "num_citations": "34\n", "authors": ["625"]}
{"title": "Task coordination in an agile distributed software development environment\n", "abstract": " As both distributed software development (DSD) and agile development practices become more popular, the problem of task coordination in an agile DSD environment becomes more pertinent. Even though task allocation has been a subject of study for many years, the team dynamics in an agile DSD environment makes the nature of task coordination distinctly different from that in other disciplines. This paper proposes a solution to the problem of remote task allocation and coordination in an agile DSD environment. It combines current practices in software project management, such as object-oriented process modeling and critical-path analysis, and methodologies from other fields, such as workflow management and management science. It also describes NextMove, a Java/Eclipse-based distributed tool that would assist project managers in making day-to-day task allocation decisions, increasing transparency\u00a0\u2026", "num_citations": "34\n", "authors": ["625"]}
{"title": "Yoopeedoo (UPEDU): a process for teaching software process\n", "abstract": " The software engineering process is a growing concern for many software development organizations. The need for well-educated software engineers is bringing new software engineering programs to universities. In many programs, software process education adds up to a few hours of lectures in an introductory software engineering course. This paper presents the structure and the content for a full, one-semester course on software processes, which has been designed in close collaboration with industry. The course is based on a software process called UPEDU (Unified Process for EDUcation), pronounced Yoopeedoo, and has been customized from the Rational Unified Process (RUP) for the educational environment. Many artifacts derived from a project case study are used as examples or templates. The content of the course is oriented towards the cognitive skills needed to perform the various activities\u00a0\u2026", "num_citations": "34\n", "authors": ["625"]}
{"title": "Do architecture design methods meet architects' needs?\n", "abstract": " Several Software Architecture Design Methods (SADM) have been published, reviewed, and compared. But these surveys and comparisons are mostly centered on intrinsic elements of the design method, and they do not compare them from the perspective of the actual needs of software architects. We would like to analyze the completeness of SADM from an architect's point of view. To do so, we define nine categories of software architects' needs, propose an ordinal scale for evaluating the degree to which a given SADM meets the needs, and then apply this to a small set of SADMs. The contribution of the paper is twofold: (i) to provide a different and useful frame of reference for architects to select SADM, and (ii) to suggest SADM areas of improvements. We found two answers to our question: \"do architectural design methods meet the needs of the architect?\" Yes, all architect's needs are met by one or another\u00a0\u2026", "num_citations": "33\n", "authors": ["625"]}
{"title": "Capturing software architectural design decisions\n", "abstract": " Software architecture is composed of the design and its set of design decisions. The documentation of design decisions is important in capturing architectural knowledge, but current methods of capture are tedious processes. A new method is being proposed that would reduce the amount of work needed to capture design decisions while increasing traceability by acting as a memory-aid. We propose an empirical validation of the approach by evaluating a tool that implements the method.", "num_citations": "31\n", "authors": ["625"]}
{"title": "Analyzing intercultural factors affecting global software development\u2013a position paper\n", "abstract": " This position paper presents the efforts we have undertaken to study the impact of intercultural factors on global software development projects. A bottom-up approach looks at the effect of individual intercultural factors on software practices, while a top-down approach strives to identify positive or negative organizational and behavioral patterns.", "num_citations": "31\n", "authors": ["625"]}
{"title": "Tutorial: introduction to the rational unified process\u00ae\n", "abstract": " The Rational Unified Process\u00ae(RUP\u00ae) is a software engineering process framework. It captures many of the best practices in modern software development in a form that is suitable for a wide range of projects and organizations. It embeds object-oriented techniques and uses the UML as the principal notation for the several models that are built during the development. The RUP is also an open process framework that allows software organizations to tailor the process to their specific need, and to capture their own specific process know-how in the form of process components. Many process components are now developed by various organizations to cover different domains, technologies, tools, or type of development, and these components can be assembled to rapidly compose a suitable process. This tutorial will introduce the basic concepts and principles, which lie under the RUP framework, and show concrete\u00a0\u2026", "num_citations": "31\n", "authors": ["625"]}
{"title": "Scaling down large projects to meet the agile sweet spot\n", "abstract": " I have described the gradual organization of a large project as a team of teams, where an objective is to set the ideal conditions of agility for a subset of the teams\u2014the ones producing the quasi totality of the code\u2014and with a few ancillary teams whose main objective is to ensure efficient communications between teams and to implement the external interface that each team would expect to have in a smaller project.", "num_citations": "30\n", "authors": ["625"]}
{"title": "Putting the\" engineering\" into\" software engineering\"\n", "abstract": " Is software development really a form of engineering? Or is it just some kind of elaborate craftsmanship? Are we just fooling ourselves thinking that we are doing engineering? If so, it is certainly not from lack of trying hard over the last 20 years. But may be we tackled the problem from the wrong end: we tried to impose techniques from other engineering disciplines onto software development models without understanding the real nature of software. We analyze the similarities and the differences, and pinpoints the key discriminants (lack of fundamental laws, technology churn, no manufacturing stage) that make software endeavours somewhat different than, for example, those in civil or mechanical engineering. We look at a few recent developments that help fill the gaps: iterative development and model-driven design. And we use Frank Gero's function-behaviour-structure framework to help us contrast software\u00a0\u2026", "num_citations": "29\n", "authors": ["625"]}
{"title": "An object-oriented, distributed architecture for large-scale Ada systems\n", "abstract": " This paper presents an architectural model ideally suited for the description of large, distributed command and control systems. This model is organized around multiple dimensions (or views) of software architecture and is used to describe the software architecture of a family of automated air traffic control systems currently under development by Hughes Aircraft of Canada. Some of the features of this family of systems are described, and in particular the mechanism used for transparent access to objects. This distributed object management mechanism illustrates the implementation of the most salient architectural principles used in the design.", "num_citations": "29\n", "authors": ["625"]}
{"title": "Agile governance theory: conceptual development\n", "abstract": " Context: Competitiveness is the key to a sustainable development and it demands agility at the business and organizational levels, which in turn requires a flexible and customizable IT environment and effective and responsive governance in order to deliver value to the business. Objective: This paper describes the conceptual development of a theory for analyze and describe agile governance in order to increasing the success rate of their practice, achieving organizational performance and business competitiveness. Method: We adopt a multi-method research, framing the theory conceptual development using Dubin's method of theory building. Results: We have developed a conceptual framework of the theory encompassing its constructs, laws of interaction, boundaries and system states. Conclusion: This theory can provide a better understanding of the nature of agile governance, by mapping of its constructs, mediators, moderators and disturbing factors, in order to help organizations reach better results.", "num_citations": "27\n", "authors": ["625"]}
{"title": "Technical debt at the crossroads of research and practice: report on the fifth international workshop on managing technical debt\n", "abstract": " Increasingly, software developers and managers use the metaphor of technical debt to communicate key trade-offs related to release and quality issues. We report here on the Fifth International Workshop on Managing Technical Debt, collocated with the Seventh International Symposium on Empirical Software Engineering and Measurement (ESEM 2013). The workshop participants reiterated the usefulness of the metaphor, shared emerging practices used in software development organizations, and emphasized the need for more research and better means for sharing emerging practices and results.", "num_citations": "27\n", "authors": ["625"]}
{"title": "Managing technical debt in software development: report on the 2nd international workshop on managing technical debt, held at icse 2011\n", "abstract": " The technical debt metaphor is gaining significant traction in the software development community as a way to understand and communicate about issues of intrinsic quality, value, and cost. This is a report on a second workshop on managing technical debt, which took place as part of the 33rd International Conference on Software Engineering (ICSE 2011). The goal of this second workshop was to discuss the management of technical debt: to assess current practice in industry and to further refine a research agenda for software engineering in this area.", "num_citations": "26\n", "authors": ["625"]}
{"title": "Visualizing software architectural design decisions\n", "abstract": " Software architecture can be represented as a set of design decisions. Exploring and analyzing architectural design decisions are difficult due to how the decisions are represented and displayed. We describe four visualization aspects that apply to architectural design decision exploration and analysis: 1) tabular listing; 2) decision structure visualization; 3) decision chronology visualization; and 4) decision impact visualization. These aspects address some situations where visualization helps people understand and utilize decisions.", "num_citations": "23\n", "authors": ["625"]}
{"title": "Experience teaching software project management in both industrial and academic settings\n", "abstract": " This paper relates seven years of experience teaching Software Project Management both in academia as part of an undergraduate software engineering program and to software engineering graduate students, and to practitioners in industry. It explains some of the difficulties and constraints for such a course. It describes the current syllabus and its rationale. The course is constructed based on a conceptual model of software development that accommodates a wide range of process models, traditional and agile, large and small. The course is illustrated by drawing from a range of concrete processes: RUP \u00ae , DSDM \u00ae , MSF \u00ae , Scrum and XP, of software engineering standards (from IEEE and ISO) and a few project management tools. The paper then maps this course to the IEEE SWEBOK (Software Engineering Body Of Knowledge), to IEEE Standard 1490, better known as the PMBOK (Project Management Body\u00a0\u2026", "num_citations": "22\n", "authors": ["625"]}
{"title": "Nextmove: A framework for distributed task coordination\n", "abstract": " This paper presents NextMove, a framework that assists project managers in allocating and managing tasks in an agile, distributed development environment. In such environments, managing tasks dynamically is difficult because of the lack of available informal, lightweight communication mechanisms. The framework simulates the project manager's thought processes involved in prioritizing and allocating tasks, by aggregating the variables involved in a software project, such as schedules, feature priorities and team-member attributes, using multi-criteria decision-resolution methodologies. We implemented the framework as a distributed client-server application using Java and MySQL. In addition, we built a simulator to evaluate the effectiveness of the framework. Preliminary simulation results show that, when compared with randomized selection of tasks, NextMove is more efficiently allocates tasks, so in a way\u00a0\u2026", "num_citations": "22\n", "authors": ["625"]}
{"title": "Editor's introduction: Software design in a postmodern era\n", "abstract": " Over the last 30 years, software design has made tremendous progress. But this progress hasn't been continuous: it proceeded by jumps and leaps, with some plateaus in between. Reaching a plateau isn't at all negative; it's a necessary step for a discipline to integrate good practices, to reflect, and to produce a critique that will launch further progress. Perhaps we've reached another, more fundamental plateau, wittily called the era of \"postmodern programming\" by James Noble and Robert Biddle. The author poses three questions regarding software design and then begins to answer them: Where are we? Where do we want to go from here? And what exactly is software design?", "num_citations": "22\n", "authors": ["625"]}
{"title": "From Waterfall to Iterative Development\u2014A Challenging Transition for Project Managers\n", "abstract": " The Rational Unified Process (RUP) advocates an iterative or spiral approach to the software development lifecycle, as this approach has again and again proven to be superior to the waterfall approach in many respects. But do not believe for one second that the many benefits an iterative lifecycle provides come for free. Iterative development is not a magical wand that when waved solves all possible problems or difficulties in software development. Projects are not easier to set up, to plan, or to control just because they are iterative. The project manager will actually have a more challenging task, especially during his or her first iterative project, and most certainly during the early iterations of that project, when risks are high and early failure possible. In this article, I describe some of the challenges of iterative development from the perspective of the project manager. I also describe some of the common \u201ctraps\u201d or pitfalls that we, at Rational, have seen project managers fall into through our consulting experience, or from reports and war stories from our Rational colleagues.", "num_citations": "22\n", "authors": ["625"]}
{"title": "How to agilely architect an agile architecture\n", "abstract": " 11 Get The Cutter Edge free: www. cutter. com Vol. 27, No. 2 CUTTER IT JOURNAL brings to system evolvability is the practices that allow architecting the system in smaller chunks. Successful teams are those that can take advantage of existing software engineering techniques with slight modifications, in particular those that provide early feedback and learning, such as prototyping. 6", "num_citations": "21\n", "authors": ["625"]}
{"title": "Customizing the capture of software architectural design decisions\n", "abstract": " Significant challenges arise when capturing architectural knowledge and design decisions for a software project, resulting in high capturing effort and few captured decisions. These challenges stem from the fact that software development is a group activity that involves different situations, goals, methodologies and needs of the software development organization. A projectpsilas documentation processes should be flexible to suit the needs and goals of an organization and allow multiple approaches. We propose three approaches for capturing design decisions to increase the knowledge retention and decision capture rates in an organization: 1) formal elicitation; 2) lightweight top-down capture; and 3) lightweight bottom-up capture. Customizable capturing methods are suggested to implement the approaches and a tool is created for each approach. Industry feedback and preliminary findings show the feasibility of\u00a0\u2026", "num_citations": "21\n", "authors": ["625"]}
{"title": "Describing software architecture with UML\n", "abstract": " The presence of a solid architectural vision is a key discriminator in the success or failure of a software project. This tutorial examines what software architecture is and what it is not. It discusses and illustrates how to describe architecture through a set of design viewpoints and views and how to express these views in the UML [1], in the spirit of the new IEEE Standard: Recommended practice for architectural description [2]. The tutorial shows of how architectures drive the development process and how to capture architectural design patterns using the UML. It is illustrated by several widely applicable architectural patterns in different domain.", "num_citations": "21\n", "authors": ["625"]}
{"title": "GAME: Governance for agile management of enterprises: A management model for agile governance\n", "abstract": " Agility at the business and organizational levels presents a challenge for many enterprises. Business agility demands the ability to sense and respond to changes in competitive environments, whereas organizational agility demands the dexterity to sense broader market opportunities and respond with changes that are organization-wide. These challenges require an information and communication technologies (ICT or IT) environment flexible and customizable simultaneously with the coordination across multiple organization units, also demands effective and responsive governance in order to deliver faster, better, and cheaper value to the business. Driven by these challenges, the goals of the candidate's PhD thesis is to conceive, define, and evaluate a management model for agile governance on global development environments. Preliminary insights suggest the model's format should be a corporative game\u00a0\u2026", "num_citations": "20\n", "authors": ["625"]}
{"title": "Mommy, where do software architectures come from\n", "abstract": " There are two central issues in software architecture: representation and creation.\u2022 Representation: how can we describe a software architecture/specify it? What tools, language, notation can be used to describe it? Completely ad hoc strategies have been used by each project. Some advances have been made in the last 3 years in that direction to make a more systematic representation and specification.", "num_citations": "20\n", "authors": ["625"]}
{"title": "A plea for lean software process models\n", "abstract": " Over the last 30 years we have tried very hard the rich process models approach, and we have not been extremely successful at it. Maybe we should try\" lean and mean\" software process models, rather than making them\" richer.\" At minimum, we should try to analyze why the rich approaches have not worked; where they failed. Could it be that we were trying to solve the wrong problem? or that the real problems by far overshadow the process model issue? Or maybe the whole construction paradigm we use for software development is not suitable anymore? My position is that we should try the route of very simple software process models, to ensure a wider applicability, greater versatility, and acceptance. Possibly these new process models would be based on other paradigms of software or system development than the\" technical-rational\" construction idea. I would be wary of richer process models.", "num_citations": "19\n", "authors": ["625"]}
{"title": "Rational Unified Process: En Introduktion\n", "abstract": " Kursen omfattar 6 p. F\u00f6r att f\u00e5 godk\u00e4nt p\u00e5 kursen kr\u00e4vs godk\u00e4nd gransakning vid de 6 granskningstillf\u00e4llena. Ha producerat ett k\u00f6rbart program som deltar i t\u00e4vlingen v23 och l\u00e4mnar in programmet med all dokumentation av utvecklingsprocessen i en zip fil. Betygsgraderna \u00e4r Underk\u00e4nd, Godk\u00e4nd.", "num_citations": "19\n", "authors": ["625"]}
{"title": "An ontological approach to conceptual modeling of disaster management\n", "abstract": " Disaster management increasingly depends on various information systems, such as modeling and simulation systems or visualization and geographical information systems, to support decision makers at various stages of a disaster. The conceptual modeling of the domain for such systems is challenging, especially for IT developers new to the field. In this paper we present three ontologies that reflect three different views to a sub domain of disaster management at different levels of granularity. We compare the ontologies and discuss how a high-level model can separate concerns of various stakeholders into logical layers of abstraction, facilitate understanding of the domain, and inform development of various application systems.", "num_citations": "17\n", "authors": ["625"]}
{"title": "Technical debt: Beyond definition to understanding report on the sixth international workshop on managing technical debt\n", "abstract": " We report here on the Sixth International Workshop on Managing Technical Debt, collocated with the International Conference on Software Maintenance and Evolution (ICSME 2014). The major themes of discussion this year indicate a growing maturity in this area of investigation and the desire to move beyond definitional issues to impact.", "num_citations": "16\n", "authors": ["625"]}
{"title": "How to fail with the Rational Unified Process: Seven steps to pain and suffering\n", "abstract": " The Rational Unified Process provides a valuable framework for approaching the business of developing software. As a framework, however, it must be adapted to the needs of each project team and their circumstances; it is intended to be applied in a light and agile style, and not adopted as a one-size-fits-all process. This article shares a number of common pitfalls experienced by teams attempting to adapt the Rational Unified Process to their needs, presented with a little tongue-in-cheek.The Rational Unified Process (RUP\u00ae)[1][2] has emerged as a popular de facto standard modern software development process\u2014we feel with good reason. It combines recognized best practices such as adaptive, iterative, and risk-driven development; has been developed by world-class leaders with experience in both small and large systems development; is flexible in its application and extension; and has been coherently documented in both print and the online RUP product.", "num_citations": "16\n", "authors": ["625"]}
{"title": "Reconciling perspectives: How people manage the process of software development\n", "abstract": " Social factors are the significant cost drivers for software development and in this field study we develop a grounded theory of how people manage the process of software development. We discovered the main concern of those involved in the process of software development is getting the job done and to get the job done, people engage in a constant process of Reconciling Perspectives. Reconciling Perspectives is a four-stage process to drive the convergence of the different points of view or perspectives individuals have of a software project. What this theory reveals is the importance of individuals' ability to reach out and engage in negotiations to the success of a software project.", "num_citations": "14\n", "authors": ["625"]}
{"title": "Lifelong learning for lifelong employment\n", "abstract": " Software engineers today must be lifelong learners or risk finding themselves out of a job, with totally obsolete skills to sell. Here are a few hints on how to tackle continuous professional development in our field.", "num_citations": "13\n", "authors": ["625"]}
{"title": "Generating a useful theory of software engineering\n", "abstract": " We argue a theory of software engineering must be useful to practitioners and explain the phenomena they are experiencing. Useful theories of software engineering can be generated empirically using methods such as grounded theory. We present our research and others as examples of how useful theory can be generated.", "num_citations": "13\n", "authors": ["625"]}
{"title": "Strategic management of technical debt: Tutorial synopsis\n", "abstract": " The technical debt metaphor acknowledges that software development teams sometimes accept compromises in a system in one dimension (for example, modularity) to meet an urgent demand in some other dimension (for example, a deadline), and that such compromises incur a \"debt\". If not properly managed the interest on this debt may continue to accrue, severely hampering system stability and quality and impacting the team's ability to deliver enhancements at a pace that satisfies business needs. Although unmanaged debt can have disastrous results, strategically managed debt can help businesses and organizations take advantage of time-sensitive opportunities, fulfill market needs and acquire stakeholder feedback. Because architecture has such leverage within the overall development life cycle, strategic management of architectural debt is of primary importance. Some aspects of technical debt - but not\u00a0\u2026", "num_citations": "13\n", "authors": ["625"]}
{"title": "The Nature of Software: What's So Special About Software Engineering?\n", "abstract": " As engineering organizations across North America struggle with the concept of opening their doors to and registering--or even licensing--software engineers, questions naturally arise about what software engineering actually entails. How do we qualify and evaluate software engineers? How do we validate their experiences? A first reaction may be to approach these tasks in the same way that we have done for all other engineering disciplines. However, software engineering differs from structural, mechanical, and electrical engineering in subtle ways. The differences are linked to the soft, but rather unkind, nature of software. In this article, I explore four key differentiating characteristics: q Absence of a fundamental theory q Ease of change q Rapid evolution of technologies q Very low manufacturing costs", "num_citations": "12\n", "authors": ["625"]}
{"title": "Common misconceptions about software architecture\n", "abstract": " References to architecture are everywhere: in every article, in every ad. And we take this word for granted. We all seem to understand what it means. But there isn't any wellaccepted definition of software architecture. Are we all understanding the same thing? We gladly accept that software architecture is the design, the structure, or the infrastructure. Many ideas are floating around concerning why and how you design or acquire an architecture and who does it. In this article I review some of these accepted ideas and show why, in my opinion, they may be misconceptions.", "num_citations": "12\n", "authors": ["625"]}
{"title": "Ada/Ed system: a large-scale experiment in software prototyping using SETL\n", "abstract": " Ada/Ed+ is the first officially validated translator for Ada\u00b0. Ada/Ed was developed as a series of executable prototypes of increasing refinement, starting with an executable model of preliminary Ada in 1979, and evolving in parallel with successive versions of Ada (1980, 1982, ANSI standard). These prototypes were written in SETL, a very-high level language well-suited for software prototyping and experimentation. In this paper we examine SETL as tool for prototyping in the light of the design and evolution of Ada/Ed, indicating how the use of SETL makes it possible to construct operational prototypes that are malleable enough to undergo large modifications in an evolutionary manner.", "num_citations": "12\n", "authors": ["625"]}
{"title": "What Colour Is Your Backlog?\n", "abstract": " What colours is your backlog? Page 1 What colours is your backlog? Philippe Kruchten @pbpk Page 2 Philippe Kruchten, Ph.D., P.Eng., CSDP Professor of Software Engineering NSERC Chair in Design Engineering Department of Electrical and Computer Engineering University of British Columbia Vancouver, BC Canada pbk@ece.ubc.ca Founder and president Kruchten Engineering Services Ltd Vancouver, BC Canada philippe@kruchten.com Page 3 The Backlog Feature Requests Priority Page 4 Sprint Planning Feature Requests Priority Sprint Backlog Page 5 But what is in your backlog ? Page 6 Painting your backlog Features Architecture infrastructure Defects Technical Debt Page 7 Time-\u2010box DSDM 1995 Page 8 Time-\u2010box Staff Time Page 9 Time-\u2010box Staff Time Work (or Effort) Page 10 Time-\u2010box Staff Time Work (\u2248Cost) Page 11 Time-\u2010box Brooks, Mythical Man-\u2010Month, 1975 Boehm, COCOMO, 1981 \u2026", "num_citations": "11\n", "authors": ["625"]}
{"title": "Issues in applying empirical software engineering to software architecture\n", "abstract": " Empirical software engineering focuses on the evaluation of software engineering technologies, such as processes and tools, by comparing related sets of data. It has contributed a valuable body of knowledge in several areas such as Software Economics and Software Quality, which in turn drove important advances in related tools and techniques. Unfortunately this is not (yet) the case for software architecture, where empirical studies are still few. Such a condition demands for further empirical research efforts on the topic of software architecture and suggests specific areas of improvement. In this paper we discuss several essential, innovative, and maybe provocative, questions such as: Why do we have so few applications of empirical software engineering on software architecture? Which are the main difficulties? What can we do?", "num_citations": "11\n", "authors": ["625"]}
{"title": "Detecting Technical Debt through Issue Trackers.\n", "abstract": " Managing technical debt effectively to prevent it from accumulating too quickly is of great concern to software stakeholders. To pay off technical debt regularly, software developers must be conscious of the existence of technical debt items. The first step is to make technical debt explicit; that is the identification of technical debt. Although there exist many kinds of static source code analysis tools to identify code-level technical debt, identifying non-code-level technical debt is very challenging and needs deep exploration. This paper proposed an approach to identifying non-code-level technical debt through issue tracking data sets using natural language processing and machine learning techniques and validated the feasibility and performance of this approach using an issue tracking data set recorded in Chinese from a commercial software project. We found that there are actually some common words that can be used as indicators of technical debt. Based on these key words, we achieved the precision of 0.72 and the recall of 0.81 for identifying technical debt items using machine learning techniques respectively.", "num_citations": "10\n", "authors": ["625"]}
{"title": "Five reasons for including technical debt in the software engineering curriculum\n", "abstract": " Technical Debt is a useful metaphor to explain some of the difficulties of software evolution. The concept of Technical Debt is gaining importance from a scientific perspective, as the number of related papers, special issues, and international events grow over the years. From a practical perspective, the number of tools related to Technical Debt and their industrial adoption grow as well. Despite this high interest, Technical Debt is not yet included in the software engineering curriculum and hence the greater part of students graduating in computer science or software engineering does not know about Technical Debt. The aim of this paper is to discuss the inclusion of Technical Debt in the software engineering curriculum. We claim that Technical Debt should be treated as a first class entity the same as Requirements Engineering, Software Design and Architecture, and Software Testing. We support our claim by\u00a0\u2026", "num_citations": "10\n", "authors": ["625"]}
{"title": "Agility and architecture: an oxymoron?\n", "abstract": " We have come to value:\u2022 Individuals and interactions over process and tools,\u2022 Working software over comprehensive documents,\u2022 Customer collaboration over contract negotiation,\u2022 Responding to change over following a plan. That is, while there is value in the items on the right, we value the items on the left moreSource: http://www. agilemanifesto. org/", "num_citations": "10\n", "authors": ["625"]}
{"title": "The biological half-life of software engineering ideas\n", "abstract": " The first installment of this new column on professional development discusses how some software engineering ideas have a half-life. The author conjectures that this half-life is roughly five years, and outlines the need for software engineers to thus stay abreast of new technologies.", "num_citations": "10\n", "authors": ["625"]}
{"title": "Software architecture\u2014a rational metamodel\n", "abstract": " The purpose of this position paper is to define the terminology used at Rational to speak about software architecture and to put in perspective the various concepts involved.", "num_citations": "10\n", "authors": ["625"]}
{"title": "Second international workshop on managing technical debt (MTD 2011)\n", "abstract": " The technical debt metaphor is gaining significant traction in the software development community as a way to understand and communicate issues of intrinsic quality, value, and cost. The idea is that developers sometimes accept compromises in a system in one dimension (eg, modularity) to meet an urgent demand in some other dimension (eg, a deadline), and that such compromises incur a\" debt\": on which\" interest\" has to be paid and which should be repaid at some point for the long-term health of the project. Little is known about technical debt, beyond feelings and opinions. The software engineering research community has an opportunity to study this phenomenon and improve the way it is handled. We can offer software engineers a foundation for managing such trade-offs based on models of their economic impacts. The goal of this second workshop is to discuss managing technical debt as a part of the\u00a0\u2026", "num_citations": "9\n", "authors": ["625"]}
{"title": "Using the RUP to evolve a legacy system\n", "abstract": " Some people claim that the Rational Unified Process\u2122(RUP) is only useful for\" green field\" development, that is, the development of a brand new system, from the ground up, in an empty green field. They contend that it cannot be used for further development or evolution of a\" legacy\" system. I strongly disagree: I know that large portions of the RUP can be used to evolve an existing system. Actually, about 80 percent of the sites where the RUP is used today include some form of legacy.", "num_citations": "9\n", "authors": ["625"]}
{"title": "The end of agile as we know it\n", "abstract": " Summary form only given. The complete presentation was not made available for publication as part of the conference proceedings. We have successfully placed the adjective 'agile' in front of about every important noun in our software development/IT world: agile design, agile testing, agile management, agile database, agile architecture, agile user-interaction ....\"What is next?\" is the question I've been asked again and again. What is the future of software engineering? The next best thing? Is it DevOps, cloud-something, micro-services, AI? The adjective agile has lost some of its weight and novelty, only a few laggards are still asking \"what is it?\" It is time to reflect on the fundamental aspects of agility: what does it really means, what are the fundamental principles behind it, that made its successes. The agile movement has had some tremendous impact in the way we work, putting the human being and human\u00a0\u2026", "num_citations": "8\n", "authors": ["625"]}
{"title": "Mission to Mars: an agile release planning game\n", "abstract": " Mission to Mars is an educational board game illustrating the planning process in iterative software development; it brings together concepts such as: iteration (sprint), backlog, story cards and storypoints, velocity (productivity), impact of defects, technical debt, and risks. The game is a low-cost, Monopoly-style board game, played in groups of 2 to 4 students, where some factors such as uncertainty in estimation, actual velocity, and occurrence of defects are simulated by a throw of dice. Hard constraints and dependencies between stories are added to stimulate discussion on the strategy to pursue and how to mitigate risks. The game has been played in various contexts, academic and industrial, in several countries around the world with several hundred players, and it available to the software engineering community under a Creative Commons (by-nc-sa) license..", "num_citations": "8\n", "authors": ["625"]}
{"title": "Where did all this good architectural knowledge go?\n", "abstract": " Software architecture represents a significant intellectual asset. But much of the architectural knowledge in organizations is still tacit knowledge. Different parties involved in software development have different needs in terms of architecture at different point in time, not limited to the architects themselves. How can we deliver the right information at the right time to the right person, as schedules are compressed? And where would the information be coming from? And how good is it? Various strategies have been tried, from central, bureaucratic accumulation of data\u2013codification strategies, to simply giving access to the right person\u2013personalization strategies, and a few hybrid strategies in between. This goes beyond mere software documentation, we need to effectively support the reasoning of the architects and developers.", "num_citations": "8\n", "authors": ["625"]}
{"title": "Licensing Software Engineers?\n", "abstract": " To further your professional development, should you aim to become a licensed professional software engineer? The author answers this question, as well as questions about when and where licensing is important.", "num_citations": "8\n", "authors": ["625"]}
{"title": "Going Over the Waterfall with the RUP\n", "abstract": " Guidelines, which describe techniques and heuristics; and with Tool Mentors, which explain how to use certain tools to perform the activity.Examples: Integrate Subsystem, Code a Class q Artifacts: things (documents, models, code, and so on) that are created or evolved, together with Templates for these artifacts, and", "num_citations": "8\n", "authors": ["625"]}
{"title": "Planning an Iterative Project\n", "abstract": " Traditional planning of engineering projects is far too often organized from the top down and around a product breakdown--that is, the decomposition of the system into components and various artifacts (specifications, blueprints, subassemblies, etc.). This style of planning was inherited from the manufacturing and construction industries. Although at some point the plan needs to acknowledge the artifacts and the product structure, this is often done too early in the software development process, when too little is known about the product.In the Rational Unified Process\u00ae(RUP\u00ae), planning is more focused on a process breakdown--that is, what needs to be done to achieve certain objectives over time. You plan based on phases and iterations that include major and minor milestones. You use activities and workflow details. And you use both a top-down approach and a bottom-up approach: top down primarily in the early phases (Inception and Elaboration), complemented by bottom-up in later phases (Construction and Transition). 1 The bottomup approach uses the defined artifacts and the architectural baseline. In practice, the planning approach is not black and white; there is a topdown/bottom-up continuum across the development lifecycle.", "num_citations": "8\n", "authors": ["625"]}
{"title": "The frog and the octopus: a conceptual model of software development\n", "abstract": " We propose a conceptual model of software development that encompasses all approaches: traditional or agile, light and heavy, for large and small development efforts. The model identifies both the common aspects in all software development, i.e., elements found in some form or another in each and every software development project (Intent, Product, People, Work, Time, Quality, Risk, Cost, Value), as well as the variable part, i.e., the main factors that cause the very wide variations we can find in the software development world (Size, Age, Criticality, Architecture stability, Business model, Governance, Rate of change, Geographic distribution). We show how the model can be used as an explanatory theory of software development, as a tool for analysis of practices, techniques, processes, as the basis for curriculum design or for software process adoption and improvement, and to support empirical research on software development methods. This model is also proposed as a way to depolarize the debate on agile methods versus the rest-of-the-world: a unified model.", "num_citations": "7\n", "authors": ["625"]}
{"title": "Hard choice: A game for balancing strategy for agility\n", "abstract": " This poster presents the educational Hard Choices board game that simulates design decision process to communicate the concepts of design strategies in the face of uncertainty. At the end of the game, players experience the implications of investing effort to gain an advantage or paying a price to take shortcuts during software development in the race to become market leader. The game has been played in academic and industrial contexts, in several countries around the world, and is available to the community under a creative commons license.", "num_citations": "7\n", "authors": ["625"]}
{"title": "Summary for scrutinizing agile practices or shoot-out at process corral!\n", "abstract": " Agile methods and practices are gaining momentum in industry, and are also slowly making their way in academia bringing fresh air and funny new jargon. Some practitioners consider them as the ultimate advance in software engineering. But what do we know about this? Where is the evidence? Do they scale? Do they solve real issues or just substitute new issues to old ones? Are the benefits tangible, or just acts of faith? Aren't we all agile? Are they no agile failures? Isn't the\" waterfall process\"-that pi\u00f1ata of agilistas--the real holy grail of software engineering, and agile processes only a Band-Aid to compensate for our deficiencies? This workshop aims at challenging the ready-made ideas, the fluff, the hype, putting things into context, and examining these with fresh and open eyes.", "num_citations": "7\n", "authors": ["625"]}
{"title": "Variations on using propagation cost to measure architecture modifiability properties\n", "abstract": " Tools available for measuring the modifiability or impact of change of a system through its architecture typically use structural metrics. These metrics take into account dependencies among the different elements of a system. However, they fail to capture the semantics of an architectural transformation necessary to control the complexity and cost of making changes. To highlight such limitations, this paper presents a study where we applied a representative structural metric, called 'propagation cost', to archetypical architectural transformations known to affect system modifiability such as rearchitecting a tightly coupled system to a layered pattern. We observe that in its original form the propagation cost metric does not provide consistent indications of architecture health. Enhancing this metric based on the semantics of the architectural pattern and tactics used in the transformation show improvements. Our results\u00a0\u2026", "num_citations": "6\n", "authors": ["625"]}
{"title": "Complexity made simple\n", "abstract": " We present a simple conceptual model of what constitutes complexity and simplicity in design engineering. At the core of the model are the three concepts of 1) scale (how many things are there), 2) diversity (how many different kinds of things are there), and 3) connectivity (how many relationships are there between things). The model distinguishes essential from accidental complexity (ie, the complexity that we, engineers, add while designing), and intrinsic versus perceived complexity. The model also articulates the complexity of the thing (or system) we design or observe versus the complexity of the community around the system: its users, designers, manufacturers, sellers, other systems, etc. This model is then used to articulate a set of heuristics to address complexity: reduce, hide, shrink, organize, explain, expose.. Finally we open the toolkits of engineers in various disciplines to identify strategies, methods, or tools that they can use to address complexity: design principles, guidelines, design methods, patterns, tactics, frameworks, etc. Approaches such as modeling, abstraction, partitioning can then be described in terms of our key concepts and heuristics; eg,\u201cabstraction reduces perceived complexity\u201d. This conceptual model helps engineering students to better reflect on their practices of design, and how these practices vary across disciplines. It also provides a more systematic approach to answering the never ending question:\u201chow can you make this simpler?\u201d", "num_citations": "6\n", "authors": ["625"]}
{"title": "New venture design\u2013interdisciplinary capstone projects at UBC\n", "abstract": " New Venture Design is an interdisciplinary project course across Engineering and Business at UBC, whose primary goal is to provide students of both faculties with knowledge and practical experience related to the formation of an entrepreneurial venture based on the development of a new product or process. Working in teams of 6 students (3 engineering students and 3 business students), the end-goal in the course is to produce a viable product prototype (the primary responsibility of the engineering students) and the necessary business plan (the primary responsibility of the business students) to ensure its success in the marketplace. This course is a combination of both lecture instruction (on creativity, business plans, patents, prototyping, fabrication, funding, tax credits, etc.) and dedicated lab-time in which student teams will advance their new venture concept toward market introduction. The teams enter many business plans competitions in the province, across North America (and beyond). Some teams go much further and file provisional patents, or incorporate a company. Starting in 2003, the course has now run for 8 years; several of the project teams have actually started a company based on their idea, or have created other new ventures. This paper summarizes the course, its motivation, details the current framework and syllabus, and reflects on lessons learned.", "num_citations": "6\n", "authors": ["625"]}
{"title": "Software development governance (SDG) report on 2nd workshop\n", "abstract": " This is a report on the 2nd roles and responsibilities workshop on governance software development (SDG), which took place as part of ICSE 2009. While the first workshop in 2008 focused on the definitions of the concepts involved in software development governance, the second workshop focused on case studies in which changes are introduced to software teamwork, e.g., distributed and agile environments, and on governance approaches that are used to better align software development with the business goals.", "num_citations": "6\n", "authors": ["625"]}
{"title": "The Cone of Uncertainty\n", "abstract": " In Todd Little's recent Software article\" Schedule Estimation and Uncertainty Surrounding the Cone of Uncertainty\"(May/June 2006), he expresses some concern about whether uncertainty really does decrease over time. In particular, he wonders whether estimates for work remaining are better (obviously, uncertainty's not an issue for work already done).", "num_citations": "6\n", "authors": ["625"]}
{"title": "A Software Development Process for a Team of One\n", "abstract": " For some, the phrase\" software engineering process\" evokes an image of a huge set of dusty binders full of policies, directives, and forms, all saturated with administrative jargon. But, these are materials that would probably be used only by very large companies that deliver software at a snail's pace to government agencies and Fortune 500 companies--software developed by armies of programmers aligned in giant cubicle farms and herded by\" pointy-haired managers,\" like the one in the famous Dilbert cartoons by Scott Adams.In reality, however, a software engineering process does not need to be such a monster. It can be as lightweight or heavyweight as the job at hand and the size of the development organization requires. Whether the project is a 200-developer mastodon or a short, solo gig, a good process can be tailored to fit the job.", "num_citations": "6\n", "authors": ["625"]}
{"title": "The tao of the software architect\n", "abstract": " A good traveler has no fixed plans and is not intent upon arriving. A good artist lets his intuition lead him wherever it wants. A good scientist has freed himself of concepts and keeps his mind open to what is. Thus the architect is available to everybody and doesn't reject anyone. He is ready to use all situations and does not waste anything. This is called embodying the light.(27)", "num_citations": "6\n", "authors": ["625"]}
{"title": "Introduction to the special issue on technical debt in software systems\n", "abstract": " Introduction to the special issue on technical debt in software systems | Journal of Systems and Software ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Journal of Systems and Software Periodical Home Latest Issue Archive Authors Affiliations Award Winners More HomeBrowse by TitlePeriodicalsJournal of Systems and SoftwareVol. , No. CIntroduction to the special issue on technical debt in software systems research-article Introduction to the special issue on technical debt in software systems Share on Authors: Davide Falessi California Polytechnic State University, USA California Polytechnic State University, USA View Profile , Philippe Kruchten University of British Columbia, Canada University of \u2026", "num_citations": "5\n", "authors": ["625"]}
{"title": "Technical debt: past, present, and future (panel)\n", "abstract": " The term \u201cTechnical Debt\u201d was coined over 20 years ago by Ward Cunningham in a 1992 OOPSL A experience report to de scribe the tr ade-offs between delivering the most appropriate \u2014 albeit likely immature \u2014 product, in the shortest time possible. Since then the repercussions of going into \u201ctechnical debt\u201d have become more visible, yet not necessarily more broadly understood. This panel will bring together practitioners to discuss and debate strategies for debt relief.", "num_citations": "5\n", "authors": ["625"]}
{"title": "Performance norms: An approach to rework reduction in software development\n", "abstract": " Rework consumes large portions of software engineering budgets. Human factors, and Cognitive Bias in particular, have been shown in other disciplines to be implicated in the kinds of reasoning errors that lead to rework. Research of these phenomena in software engineering lags similar efforts in other disciplines. This study identifies the Performance Norms, standards by which Cognitive Biases are determined to have occurred, in a single but critically important software engineering task: Estimating. Analysis of data from professional practitioners regarding real-life situations indicates that several Performance Norms for Estimating are often `in play', the least important being that assumed in previous, lab-based experiments. Most of these Norms require skills very different from those in which most technical personnel are trained. We conclude that rework reduction efforts will continue to falter until Performance\u00a0\u2026", "num_citations": "5\n", "authors": ["625"]}
{"title": "Culture and agile: Challenges and synergies\n", "abstract": " Culture offers both local and global challenges to software teams as they collaborate to understand requirements, build systems, and deliver product. Agile software practices through iteration, incremental delivery, and customer proximity can ameliorate cultural challenges to create synergies. Alternatively, some cultural barriers may prove insurmountable. This panel brings together community experts to share and discuss research and field experience.", "num_citations": "5\n", "authors": ["625"]}
{"title": "Matching expectations: When culture wreaks havoc with global software development\n", "abstract": " Description In this research, we examine how intercultural factors affect\u2014positively or negatively\u2014the outcomes of software development practices. In the past decade, the North American and Western European IT industries have observed a rapid increase in the number of companies either outsourcing software projects for development abroad or starting their own development centers in remote locations. In spite of great promises and anticipation, many global software development projects fail. After failures, one party is quick to blame the other\u2019s perceived lack of diligence, commitment, or ability; or to blame technology. But we observed that projects often fail because of subtle intercultural issues that impact the effectiveness of coordination in the distributed team. To explore this matter, we examine the concept of culture and the potential impact of intercultural dynamics on global software development projects. There has been little analytical research done in this area and the effect of intercultural factors has, thus far, been assessed based on anecdotal accounts by project managers. Our research combines the grounded theory and case study research, starting with a collection of critical incidents in global projects. We present a descriptive conceptual framework, for coordination between individuals and teams, that has emerged from our data and use it to analyze and explain some of our findings.", "num_citations": "5\n", "authors": ["625"]}
{"title": "Aspects in architectural description: Report on a first workshop at aosd 2007\n", "abstract": " The First Workshop on Aspects in Architectural Description was held in Vancouver, British Columbia as a part of Aspect-Oriented Software Development (AOSD) 2007. This workshop report presents a summary of the topics addressed, contributions and issues raised, and workshop conclusions.", "num_citations": "5\n", "authors": ["625"]}
{"title": "Testing: The RUP Philosophy\n", "abstract": " Testers and quality engineers sometimes look at the Rational Unified Process,\u00ae or RUP,\u00ae with a great deal of suspicion. It is true that over the last two years, with the help of many people, both internally (Sam Guckenheimer, most notably) and externally (in particular James Bach, Cem Kaner, and Brian Marick), the RUP approach to testing has taken a bold departure from the traditional approach. It has become more attuned to iterative development, somewhat less focused on high ceremony, and closer to harmonizing with the XP mantra of\" test first.\" In this article, we bring you up to date on our philosophy of testing and provide definitions for major concepts we currently use in RUP to describe this discipline.", "num_citations": "5\n", "authors": ["625"]}
{"title": "Software Maintenance Cycle with the RUP\n", "abstract": " The Rational Unified Process\u00ae(RUP\u00ae) has no concept of a\" maintenance phase.\" Some people claim that this is a major deficiency, and are proposing to add a production phase to cover issues like maintenance, operations, and support. 1 In my view, this would not be a useful addition. First, maintenance, operations, and support are three very distinct processes; although they may overlap in time, they involve different people and different activities, and have different objectives. Operations and support are clearly outside the scope of the RUP. Maintenance, however, is not; yet there is no need to add another phase to the RUP's sequence of four lifecycle phases: Inception, Elaboration, Construction, and Transition. The RUP already contains everything that is needed in terms of roles, activities, artifacts, and guidelines to cover the maintenance of a software application. And because of the RUP's essentially iterative nature, the ability to evolve, correct, or refine existing artifacts is inherent to most of its activities.", "num_citations": "5\n", "authors": ["625"]}
{"title": "Beyond abstract data types: Giving life to objects\n", "abstract": " The most recent buzzword in software engineering is object-orientation (OO), a trend encouraged (if not inspired) by the Ada programming language. We have all witnessed OO principles gain undisputed popularity in the computing society. Also, we have all experienced the challenges of the move from the platonic world of objects, where all objects are implicitly given their own flow of control, their own state, resources and behavior, to the real world of computing where none of these luxuries can be taken for granted. The main topic of this article is the search for an Ada design that can provide the illusion of the ideal world of objects at an acceptable price.", "num_citations": "5\n", "authors": ["625"]}
{"title": "Error handling in large, object-based Ada systems\n", "abstract": " The purpose of this paper is to show the kind of problems that appear while using a \"schoolbook\" error-handling strategy based on Ada exceptions in large, object-based systems.' The paper will show that the common solutions used to alleviate those problems are inadequate, and it will suggest two alternative strategies.", "num_citations": "5\n", "authors": ["625"]}
{"title": "Agile Processes in Software Engineering and Extreme Programming: 20th International Conference, XP 2019, Montr\u00e9al, QC, Canada, May 21\u201325, 2019, Proceedings\n", "abstract": " This open access book constitutes the proceedings of the 20th International Conference on Agile Software Development, XP 2019, held in Montreal, QC, Canada, in May 2019. XP is the premier agile software development conference combining research and practice. It is a hybrid forum where agile researchers, academics, practitioners, thought leaders, coaches, and trainers get together to present and discuss their most recent innovations, research results, experiences, concerns, challenges, and trends. Following this history, for both researchers and seasoned practitioners XP 2019 provided an informal environment to network, share, and discover trends in Agile for the next 20 years The 15 full papers presented in this volume were carefully reviewed and selected from 45 submissions. They were organized in topical sections named: agile adoption, agile practices; large-scale agile; agility beyond IT, and the future of agile. ;", "num_citations": "4\n", "authors": ["625"]}
{"title": "A canonical data model for simulator interoperation in a collaborative system for disaster response simulation\n", "abstract": " The Disaster Response Network Enabled Platform (DRNEP) is a system that integrates a set of independently developed infrastructure and disaster simulators. This paper describes some of the architectural choices that we made for DRNEP. The overall system uses a master-slave pattern, with one master simulator orchestrating all of the others, based on a central system clock. As the various simulators are developed by different organizations, they each have their own data models, with data elements not matching one for one, or with different representations, or not useful for collaboration. To integrate them in DRNEP, and to avoid developing n2 distinct translators, we devised a single common data model, akin to the mediator pattern, and we therefore need only one data translator per simulator. Developing this common data model poses many challenges: on one hand it must contain the right abstractions to\u00a0\u2026", "num_citations": "4\n", "authors": ["625"]}
{"title": "2nd workshop on software development governance (SDG)\n", "abstract": " The main role of software development governance is to achieve a strategic alignment with the business. Exploring governance in software development environments is an important evolutionary step for software engineering. The implementation of governance through tools and techniques provides teams and organizations with the ability to effectively steer the business of software development.", "num_citations": "4\n", "authors": ["625"]}
{"title": "Global software development for the practitioner\n", "abstract": " This International Workshop on Global Software Development for the Practitioner (GSD2006) was held in conjunction with the 28 th International Conference on Software Engineering (ICSE 2006) on May 23 rd, 2006 in Shanghai, China. The workshop was motivated by the industry trend towards developing software in globally distributed settings: geographically distributed teams, or outsourcing parts of the software development to other organizations in other parts of the world. Topics presented and discussed in the workshop focused on grounded, practical strategies and techniques that address the geographic, temporal, organizational, and cultural boundaries inherent in global software projects.", "num_citations": "4\n", "authors": ["625"]}
{"title": "Implementing dialogue independence\n", "abstract": " Separating the development of the core application from that of its user interface provides encapsulation, flexibility, and reuse advantages, but poses the problem of how to mirror changes to one component in the other. The authors identify three design patterns that achieve this mirroring while maintaining dialogue independence.< >", "num_citations": "4\n", "authors": ["625"]}
{"title": "The (missing) value of software architecture\n", "abstract": " One of the most critical questions about software architecture is what is its actual value? As software development processes focus more and more on value delivered to end-users and time-to-market, the difficulty in assigning an actual value on the effort spent working on the architecture makes it much harder for software architects to convince project managers or product owners (or whomever represent the customer) to spend much effort on architecture-related activities, leading often rapidly to a large amount of technical debt [1].At any point in time, a software development team is faced with a choice: what do we focus on in the next release cycle, or simply the next iteration or sprint. In the \u201cbacklog\u201d of things not done yet, there are 4 kinds of elements (Figure from [1]): Image", "num_citations": "3\n", "authors": ["625"]}
{"title": "The Frog and the Octopus\u2014Experience Teaching Software Project Management\n", "abstract": " How do you teach software project management to 4th year engineering students, when there is nothing to", "num_citations": "3\n", "authors": ["625"]}
{"title": "When Robert Rules\n", "abstract": " This paper discuses how software development is often more about people - collaboration, communication, and coordination - than technology, developing \"soft skills\" such as meeting-management techniques is becoming more important. The author recommends to many people to learn more about Robert's Rules of Order, to take a class or a workshop, to read a book about it, and to go beyond the surface and the funny jargon to transpose what they learn about formal debates to the more informal meetings that now make up a large chunk of a software practitioner's life. Besides, your hockey club, Parent-Teacher Association, or your local IEEE Computer Society chapter will love you for your useful facilitator skills. The author suggests that all software practitioners learn more about Robert's rules.", "num_citations": "3\n", "authors": ["625"]}
{"title": "Modelling disasters\n", "abstract": " \u2022 A critical infrastructure (CI) is one whose state affects one or more wellness factors (WF) to the point where the value of wellness factors drives the individual wellness to low values (the 3.. 1 range), ie, making life hard to sustain or leading to death", "num_citations": "3\n", "authors": ["625"]}
{"title": "How the Rational Unified Process Supports ISO 12207\n", "abstract": " Lifecycle Processes (ISO 12207 further in this paper), establishes a common framework used by software practitioners to speak the same language when describing their software processes. It is not a complete ready-to-use process, but only a framework that identifies, names, and relates the various (sub) processes that constitute this domain.The Rational Unified Process\u00ae or RUP\u00ae(RUP further in this paper) is a process framework, but unlike ISO 12207, it comes not empty, but prepopulated with a wealth of guidance, methods, techniques, templates, and examples, out of which a concrete process can be instantiated. 1", "num_citations": "3\n", "authors": ["625"]}
{"title": "A Guide to Critical Success Factors in Agile Delivery\n", "abstract": " Numerous studies and years of implementation experience with software development within complex IT projects provide evidence that Agile approaches, when executed correctly, improve the delivery of software and large system integration projects. For optimal results, Agile approaches must be planned, implemented with discipline, and tailored to the need of the project and the organization.", "num_citations": "2\n", "authors": ["625"]}
{"title": "Agile architecture\n", "abstract": " The two are not the same: you can have a non-agile development process leading to a flexible, adaptable architecture, and vice versa, an agile process may lead to a rather rigid and inflexible architecture. One does not imply the other. But for obvious reasons, in the best of worlds, we\u2019d like to have an agile process, leading to a flexible architecture.There is a na\u00efve thinking that just by being agile, an architecture will gradually emerge, out of bi-weekly refactorings. This belief was amplified by a rather poorly worded principle# 11 in the agile manifesto [1], which states that:", "num_citations": "2\n", "authors": ["625"]}
{"title": "Games Software Architects Play\n", "abstract": " \u2022 All architects are fully aware of some major issue that really must be decided upon, but everyone keeps busy tackling small items, ignoring the big issue, pretending it does not exist, hoping maybe that it will vanish by magic or that someone else will take care of it.", "num_citations": "2\n", "authors": ["625"]}
{"title": "You are what you read\n", "abstract": " Given that useful knowledge in software engineering has a half-life of about five years, reading remains an excellent way to replenish this vanishing resource for the diligent software engineer.", "num_citations": "2\n", "authors": ["625"]}
{"title": "Tutorial: describing software architecture with UML\n", "abstract": " The presence of a solid architectural vision is a key discriminator in the success or failure of a software project. This paper examines what software architecture is and what it is not. It discusses and illustrates how to describe architecture through a set of design viewpoints and views and how to express these views in the UML, in the spirit of the new IEEE Standard 1471:2000: Recommended practice for architectural description. The paper shows of how architectures drive the development process and how to capture architectural design patterns using the UML. It is illustrated by several widely applicable architectural patterns in different domain.", "num_citations": "2\n", "authors": ["625"]}
{"title": "Le syst\u00e8me Ada/Ed: une exp\u00e9rience de prototype utilisant le langage SETL\n", "abstract": " Sauf mention contraire ci-dessus, le contenu de cette notice bibliographique peut \u00eatre utilis\u00e9 dans le cadre d\u2019une licence CC BY 4.0 Inist-CNRS/Unless otherwise stated above, the content of this bibliographic record may be used under a CC BY 4.0 licence by Inist-CNRS/A menos que se haya se\u00f1alado antes, el contenido de este registro bibliogr\u00e1fico puede ser utilizado al amparo de una licencia CC BY 4.0 Inist-CNRS", "num_citations": "2\n", "authors": ["625"]}
{"title": "Overview of the ARCADE system\n", "abstract": " ARCADE is a research project in computer architecture. We first discuss its motivations and goals, wich are primarily the design of a dynamically adaptive system, and the use of performance evaluation methods as a design tool. The resulting system is intended to serve as a support for education in computer architecture and operating systems. Then, we present the overall structure of the system, and finally, we consider in more detail hardware tools that will be provided for the dynamic adaptation to varying load conditions.", "num_citations": "2\n", "authors": ["625"]}
{"title": "Arcade\u2014a system for research and education in computer architecture\n", "abstract": " In order to avoid the need to< evekw+ lsrge amounts of software (Principle 3), and as cdur small scientific community has already at its disposal a large generalpurpose computer, we restricted the scope of the ARCADE system to small scientific computations. Up to around 20 users witi thus be offered a unique interactive programming language, a reasonably large virtual memory space, and a simple file system for storage, and occasional sharing, of programs and data (Principles 2\u2019and 3).", "num_citations": "2\n", "authors": ["625"]}
{"title": "The Hard Choices Game Explained\n", "abstract": " The Hard Choices game is a simulation of the software development cycle meant to communicate the concepts of uncertainty, risk, and technical debt. In the quest to become market leader, players race to release a quality product to the market-place. By the end of the game, everyone has experienced the implications of in-vesting effort to gain an advantage or of paying a price to take shortcuts, as they employ design strategies in the face of uncertainty. The audience for this paper is the facilitator of the game who is using it for educational purposes to communicate principles of technical debt and architectural investment. The paper provides instructions for playing the game, suggestions for changing the game to add more learning opportunities, and topics for discussion of what the game reveals about the development cycle for a piece of software.Descriptors:", "num_citations": "1\n", "authors": ["625"]}
{"title": "Agility and Architecture\u2212 A Clash of Two Cultures?\n", "abstract": " Agility and Architecture--An oxymoron? Page 1 Agility and Architecture October 2013 \u00a9 Philippe Kruchten, 2013 1 Agility and Architecture \u2212A Clash of Two Cultures? Philippe Kruchten Long Island, October 2013 Philippe Kruchten, Ph.D., P.Eng., FEC, IEEE CSDP Professor of Software Engineering NSERC Chair in Design Engineering Department of Electrical and Computer Engineering University of British Columbia Vancouver, BC Canada pbk@ece.ubc.ca Founder and president Kruchten Engineering Services Ltd Vancouver, BC Canada philippe@kruchten.com Page 2 Agility and Architecture October 2013 \u00a9 Philippe Kruchten, 2013 2 Agile & Architecture? Oil & Water? \u2022 Paradox \u2022 Oxymoron \u2022 Conflict \u2022 Incompatibility Outline \u2022 Agility?? \u2022 Software architecture? \u2022 A story \u2022 Seven viewpoints on a single problem \u2022 The danger of technical debt \u2022 The zipper model \u2022 A clash of two cultures \u2022 Going forward Page 3 Agility \u2026", "num_citations": "1\n", "authors": ["625"]}
{"title": "Games Architects Play\n", "abstract": " \u2022 All architects are fully aware of some major issue that really must be decided upon, but everyone keeps busy tackling small items, ignoring the big issue, pretending it does not exist, hoping maybe that it will vanish by magic or that someone else will take care of it.", "num_citations": "1\n", "authors": ["625"]}
{"title": "Towards supporting users in semantic exploration of large distributed schemas\n", "abstract": " Emergency management increasingly depends on various information systems to support crisis operations and facilitate communication and coordination. In this paper, we address the issues that may arise in large schemas that are developed collaboratively by diverse community of users for data sharing. We share our experience with the U.S. National Information Exchange Model and the free web-based tools available for searching its schemas. Based on what we learned, we propose techniques for enhancing the tools designed for search and exploration of such complex schemas.", "num_citations": "1\n", "authors": ["625"]}
{"title": "Certification 1, 2, 3\n", "abstract": " This column proposes a few simple rules and criteria to help software practitioners decide which software certification they should target in building up their professional career and get the best out of their time, effort, and financial investment.", "num_citations": "1\n", "authors": ["625"]}
{"title": "Ada type interchange\u2014moving data between platforms\n", "abstract": " This article presents a strategy to convert any Ada type to and from a byte stream, for the purpose of communication or storage of values in a heterogeneous environment:\u2022 different Ada compilers,\u2022 different hardware platforms with different \"endian-ness,\"\u2022 different versions of the same compiler,\u2022 or even different programming languages.These operations are sometimes called 'marshalling' and 'unmarshalling' (RM95 E.4(9)1).The strategy is systematically supported by a tool built on top of the Ada Semantic Interface Specification (ASIS)2, which builds or updates the conversion routines based on the type definitions.The strategy presented is similar to the Ada 95 mechanism of stream and stream-oriented attributes, however the tool applies to both Ada 83 and Ada 95 with only slight differences in the aspect of the source code generated.", "num_citations": "1\n", "authors": ["625"]}
{"title": "Mapping an object-oriented design into Ada\n", "abstract": " This paper describes a mapping between the major concepts of Object-Oriented Design (OOD) as defined by Booch and the features of the Ada programming language, and offers some simple workarounds for the missing elements of inheritance and polymorphism. To reinforce the OOD flavor of the resulting programs, some programming rules are suggested, which specify naming conventions, program structure, and the use or restriction of certain language features. For those unfamiliar with the terminology, the final section provides an introduction to the OO concepts used in the body of the paper.", "num_citations": "1\n", "authors": ["625"]}
{"title": "Le langage de programmation Pascal\n", "abstract": " 3. La notion de type de donn\u00e9es 13 3-1. Les types scalaires 14 3-2. Le type logique (BooLEAN) 15 3-3. Le type entier (INTEGER) 16 3-4. Le type r\u00e9el (REAL) 16 3-5. Le type caract\u00e8re (CHAR) 17 3-6. Le type intervalle 174. L'en-t\u00eate du programme et les d\u00e9clarations 19 4-1. L'en-t\u00eate de programme 19 4-2. La d\u00e9claration des \u00e9tiquettes 20 4-3. La d\u00e9finition des constantes 20 4-4. La d\u00e9finition des types 21 4-5. La d\u00e9claration de variable 21 4-6. L'initialisation des variables 21 4-7. La d\u00e9claration des fonctions et proc\u00e9dures 22", "num_citations": "1\n", "authors": ["625"]}
{"title": "Communication in the fast universe of ARCADE, A loosely-coupled adaptive multiprocessor system\n", "abstract": " Sauf mention contraire ci-dessus, le contenu de cette notice bibliographique peut \u00eatre utilis\u00e9 dans le cadre d\u2019une licence CC BY 4.0 Inist-CNRS/Unless otherwise stated above, the content of this bibliographic record may be used under a CC BY 4.0 licence by Inist-CNRS/A menos que se haya se\u00f1alado antes, el contenido de este registro bibliogr\u00e1fico puede ser utilizado al amparo de una licencia CC BY 4.0 Inist-CNRS", "num_citations": "1\n", "authors": ["625"]}