{"title": "Aspect-oriented multi-view modeling\n", "abstract": " Multi-view modeling allows a developer to describe a software system from multiple points of view, eg structural and behavioral, using different modeling notations. Aspect-oriented modeling techniques have been proposed to address the scalability problem within individual modeling notations. This paper presents RAM, an aspect-oriented modeling approach that provides scalable multi-view modeling. RAM allows the modeler to define stand-alone reusable aspect models using 3 modeling notations. The aspect models support the modeling of structure (using UML class diagrams) and behavior (using UML state and sequence diagrams). RAM supports aspect dependency chains, which allows an aspect providing complex functionality to reuse the functionality provided by other aspects. The RAM weaver can create woven views of the composed model for debugging, simulation or code generation purpose, as\u00a0\u2026", "num_citations": "183\n", "authors": ["332"]}
{"title": "Reusable aspect models\n", "abstract": " This paper presents an approach for specifying reusable aspect models that define structure (using class diagrams) and behavior (using sequence diagrams). The high degree of reusability of the aspect models is demonstrated by modeling the design of 8 inter-dependent aspects of the AspectOptima case study. Based on this experience, several modeling language features that we deem essential to support reusable aspect modeling are identified.", "num_citations": "57\n", "authors": ["332"]}
{"title": "Merging scenarios\n", "abstract": " This paper proposes a merge operator for behavioral requirements expressed by Message Sequence Charts and shows how this product can be systematically used to integrate new behaviors in an existing one. First the merge operator is defined as a fibered product of scenario descriptions. This product is then used to integrate a consensus mechanism to solve the non-local choice problem.", "num_citations": "27\n", "authors": ["332"]}
{"title": "Ungrafting malicious code from piggybacked android apps\n", "abstract": " To devise efficient approaches and tools for detecting malicious code in the Android ecosystem, researchers are increasingly required to have deep understanding of malware. There is thus a need to provide a framework for dissecting malware and localizing malicious program fragments within app code in order to build a comprehensive dataset of malicious samples. In this paper we address this need with an approach for listing malicious packages in an app based on code graph analysis. To that end we focus on piggybacked apps, which are benign apps repackaged with malicious payload. Our approach classifies each app independently from its potential clones based on machine learning, and detects piggybacked apps with a precision of about 97%. With the built classifier we were also able to find new piggybacked apps in market datasets, outside our ground truth. We also identify malicious packages with an accuracy@ 5 of 83% and an accuracy@ 1 of around 68%. We further demonstrate the importance of collecting malicious packages by using them to build a performant malware detection system.", "num_citations": "23\n", "authors": ["332"]}
{"title": "Polymer: A model-driven approach for simpler, safer, and evolutive multi-objective optimization development\n", "abstract": " Multi-Objective Evolutionary Algorithms (MOEAs) have been successfully used to optimize various domains such as finance, science, engineering, logistics and software engineering. Nevertheless, MOEAs are still very complex to apply and require detailed knowledge about problem encoding and mutation operators to obtain an effective implementation. Software engineering paradigms such as domain-driven design aim to tackle this complexity by allowing domain experts to focus on domain logic over technical details. Similarly, in order to handle MOEA complexity, we propose an approach, using model-driven software engineering (MDE) techniques, to define fitness functions and mutation operators without MOEA encoding knowledge. Integrated into an open source modelling framework, our approach can significantly simplify development and maintenance of multi-objective optimizations. By leveraging\u00a0\u2026", "num_citations": "12\n", "authors": ["332"]}
{"title": "Issues in model-driven behavioural product derivation\n", "abstract": " Model Driven Engineering (MDE) was identified as a viable software development paradigm to help improve the product derivation phase of the Software Product Line (SPL) engineering process. Existing model-driven derivation approaches fail to properly address the behavioural derivation part, yielding a frustrating situation. In this paper we first introduce a model-driven derivation approach that combines Feature Diagrams (FD) and model fragments. We then identify and analyse several issues that emerge during the derivation process. We show that the order in which models associated to selected features are composed has a great impact on the end result of the derivation. We also present a particular class of features called disjoint and prove that current composition operators do not offer any viable solution to compose them. Finally, we argue that insufficient information available to composition operators\u00a0\u2026", "num_citations": "9\n", "authors": ["332"]}
{"title": "Aspect-oriented model development at different levels of abstraction\n", "abstract": " The last decade has seen the development of diverse aspect-oriented modeling (AOM) approaches. This paper presents eight different AOM approaches that produce models at different level of abstraction. The approaches are different with respect to the phases of the development lifecycle they target, and the support they provide for model composition and verification. The approaches are illustrated by models of the same concern from a case study to enable comparing of their expressive means. Understanding common elements and differences of approaches clarifies the role of aspect-orientation in the software development process.", "num_citations": "8\n", "authors": ["332"]}
{"title": "Aspects comportementaux et tissage\n", "abstract": " La s\u00e9paration de pr\u00e9occupations transverses permet au concepteur de logiciels d'avoir un meilleur contr\u00f4le sur les variations et les \u00e9volutions du logiciel. Dans le domaine de la programmation, cette id\u00e9e a \u00e9t\u00e9 popularis\u00e9e par le langage AspectJ, mais aujourd'hui, la communaut\u00e9 aspect s'int\u00e9resse aussi \u00e0 op\u00e9rer cette s\u00e9paration plus t\u00f4t dans le cycle de d\u00e9veloppement: d\u00e8s les phases d'analyse/conception et m\u00eame d'expression des besoins. Dans cette optique, cette th\u00e8se propose une technique permettant de tisser des comportements d\u00e9crits sous forme de sc\u00e9narios dans un mod\u00e8le de base de sc\u00e9narios. Le processus de tissage se d\u00e9compose en deux phases. Tout d'abord, une phase de d\u00e9tection permettant d'identifier des parties particuli\u00e8res d'un mod\u00e8le de base o\u00f9 un aspect doit \u00eatre tiss\u00e9, puis une phase de composition permettant de construire le mod\u00e8le voulu. Ces deux phases sont d\u00e9taill\u00e9es dans cette th\u00e8se. En particulier, nous proposons plusieurs s\u00e9mantiques de d\u00e9tection dans des sc\u00e9narios finis. Certaines de ces s\u00e9mantiques favorisent le tissage d'aspects multiples. Nous proposons \u00e9galement un algorithme de d\u00e9tection dans des sc\u00e9narios infinis, fond\u00e9 sur l'analyse statique de la s\u00e9mantique des sc\u00e9narios (qui est dynamique), ce qui revient \u00e0 proposer un tissage statique d'aspects dynamiques. Pour fusionner des sc\u00e9narios, nous proposons plusieurs op\u00e9rateurs de composition, d\u00e9finis formellement, permettant d'obtenir des r\u00e9sultats coh\u00e9rents. Finalement, nous d\u00e9crivons l'implantation du tisseur de sc\u00e9narios propos\u00e9 dans l'environnement Kermeta, et nous montrons son utilit\u00e9 \u00e0 travers des cas d'application.", "num_citations": "6\n", "authors": ["332"]}
{"title": "Tissage d'Aspects Comportementaux\n", "abstract": " The notion of aspect looks promising for handling crosscutting concerns earlier in the software life-cycle, up from programming to design, analysis and even requirements. This paper proposes a technique to encapsulate and weave behaviors described as sequence diagrams in base models which contain a finite set of sequence diagrams. The weaving process is twophased. Firstly the detection phase searches parts in the base model. Secondly the composition phase builds the woven model by composing the advise in the base model for each detected part. The entire weaving process is automated and is implemented as model transformations within the Kermeta environment.", "num_citations": "6\n", "authors": ["332"]}
{"title": "Building specifications as a domain-specific aspect language\n", "abstract": " In the construction industry an increasing number of buildings are designed using semantically rich three-dimensional models. In parallel, additional information is specified in a natural-language document called a building specification 1. As not all details are present in the model these specifications have to be interpreted whenever costs are estimated or other analyses are performed. In this paper, we argue that building specifications contain cross-cutting concerns. We also argue that domain experts should be given the ability to formulate building specifications using a domain-specific aspect language so that the corresponding details can automatically be integrated into the model.", "num_citations": "5\n", "authors": ["332"]}
{"title": "Transformation of behavioral models based on compositions of sequence diagrams\n", "abstract": " This paper shows a behavior composition technique, based on sequence diagrams mergings, that allows a unique, well defined and well controlled result model even in the case of multiple weavings (ie weaving more than two fragments). We distinguish the composition of models at a low level of abstraction from the composition at a high level of abstraction. The technique is illustrated by an observer pattern specification. Composing behavioral elements (which can be seen as aspects) at model level may play an important role within both MDA and aspect based software processes.", "num_citations": "2\n", "authors": ["332"]}