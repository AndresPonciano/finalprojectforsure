{"title": "Test-Driven Development: Teste e Design no Mundo Real com. NET\n", "abstract": " Por que n\u00e3o testamos software? Porque \u00e9 caro? Porque \u00e9 demorado? Porque \u00e9 chato? Testes automatizados s\u00e3o a solu\u00e7\u00e3o para todos esses problemas. Aprenda a escrever um programa que testa seu programa de forma r\u00e1pida, barata e produtiva, e aumente a qualidade do seu produto final. Neste livro, voc\u00ea aprender\u00e1 sobre TDD, uma das pr\u00e1ticas \u00e1geis de desenvolvimento de software mais populares, atrav\u00e9s da linguagem C#. TDD faz o desenvolvedor escrever o teste antes mesmo de implementar o c\u00f3digo. Essa simples invers\u00e3o na maneira de se trabalhar faz com o que o desenvolvedor escreva c\u00f3digo mais testado, com menos bugs, e inclusive com mais qualidade. Seja profissional, teste seu software! Todos os exemplos desse livro foram escritos em C#.", "num_citations": "25\n", "authors": ["93"]}
{"title": "The effectiveness of supervised machine learning algorithms in predicting software refactoring\n", "abstract": " Refactoring is the process of changing the internal structure of software to improve its quality without modifying its external behavior. Empirical studies have repeatedly shown that refactoring has a positive impact on the understandability and maintainability of software systems. However, before carrying out refactoring activities, developers need to identify refactoring opportunities. Currently, refactoring opportunity identification heavily relies on developers' expertise and intuition. In this paper, we investigate the effectiveness of machine learning algorithms in predicting software refactorings. More specifically, we train six different machine learning algorithms (i.e., Logistic Regression, Naive Bayes, Support Vector Machine, Decision Trees, Random Forest, and Neural Network) with a dataset comprising over two million refactorings from 11,149 real-world projects from the Apache, F-Droid, and GitHub ecosystems. The\u00a0\u2026", "num_citations": "17\n", "authors": ["93"]}
{"title": "Mock objects for testing java systems\n", "abstract": " When testing software artifacts that have several dependencies, one has the possibility of either instantiating these dependencies or using mock objects to simulate the dependencies\u2019 expected behavior. Even though recent quantitative studies showed that mock objects are widely used both in open source and proprietary projects, scientific knowledge is still lacking on how and why practitioners use mocks. An empirical understanding of the situations where developers have (and have not) been applying mocks, as well as the impact of such decisions in terms of coupling and software evolution can be used to help practitioners adapt and improve their future usage. To this aim, we study the usage of mock objects in three OSS projects and one industrial system. More specifically, we manually analyze more than 2,000 mock usages. We then discuss our findings with developers from these systems, and\u00a0\u2026", "num_citations": "15\n", "authors": ["93"]}
{"title": "Increasing learning in an agile environment: Lessons learned in an agile team\n", "abstract": " Learning is an important part of the software development process. There are many advantages for developers willing to learn: increased internal and external quality of the produced software, and a reduced learning curve as beginners become high-skilled developers much faster than usual. However, learning is not taken seriously by many teams. This paper shows how to build a learning environment by doing some well-known practices, such as Book Club, Brown Bags, Dojo sessions, Pair Programming, Open Spaces, etc. It also presents some adaptations we developed in these techniques in order to improve their effects in our work environment.", "num_citations": "14\n", "authors": ["93"]}
{"title": "Contemporary software monitoring: A systematic literature review\n", "abstract": " Contemporary software development strongly relies on software monitoring for different purposes, such as detecting abnormal behaviour or finding performance issues. These analyses are enabled by means of log data. The richness of log information has drawn the attention of researchers, who have put significant effort in software monitoring and log analysis techniques. Such knowledge, however, is currently spread. Moreover, we have no conceptual framework to explain the research field. In this paper, we perform a systematic literature review on logging techniques for software monitoring. More specifically, we explore the existing contemporary research on log engineering, infrastructure, and analysis. To that aim, we study 96 papers that appeared on top-level peer-reviewed conferences and journals. We then propose the Contemporary Logging Framework, a conceptual framework that maps the entire\u00a0\u2026", "num_citations": "9\n", "authors": ["93"]}
{"title": "Achieving quality on software design through test-driven development\n", "abstract": " Test-driven development (TDD) is a technique for developing and designing software where tests are created before production code in short cycles. There is some discussion in the software engineering community on whether TDD can really be used to achieve software quality. Some experiments were conducted in the last years comparing development by using TDD with one creating tests after the production code. However, these experiments always have some threats to validity that prevent researchers from reaching a final answer about its effects. This chapter, instead of trying to prove that TDD is more effective than creating tests after, investigates projects where TDD was successfully used, and presents recurrent and common practices applied to its context. A common mistake is to believe that just by creating tests before production code will make the application design \u201cjust happens.\u201d As with any other\u00a0\u2026", "num_citations": "8\n", "authors": ["93"]}
{"title": "Detection strategies of smells in web software development\n", "abstract": " Web application development uses many technologies and programming languages, both on the server side and on the client side. Maintaining the heterogeneous source code base is not easy, as each technology contains its own set of best practices and standards. Therefore, developers must be aware of diverse technologies' and languages' best practices, and quickly identify them in their codebases. To achieve that, we propose a set of detection strategies to automatically identify the presence (or ausence) of known bad web development practices. Our first implemented detection strategy enabled us to understand the feasibility of such work, and confirmed its usefulness for web developers.", "num_citations": "6\n", "authors": ["93"]}
{"title": "Test Driven Development\n", "abstract": " \u2022 Kent Beck states in his book:\u201d Do these steps seem too small to you? Remember, TDD is not about taking teensy tiny steps, it\u2019s about being able to take teensy tiny steps. Would I code day-to-day with steps this small? No. But when things get the least bit weird, I\u2019m glad I can.\u201d", "num_citations": "5\n", "authors": ["93"]}
{"title": "Testes automatizados de software: Um guia pr\u00e1tico\n", "abstract": " Quantas vezes voc\u00ea n\u00e3o colocou um\" else\" a mais ou trocou um maior por maior-igual? Problemas como esses acontecem todos os dias em nossos c\u00f3digos. E aposto que voc\u00ea sabe como evit\u00e1-los: testando seu software. A grande pergunta \u00e9: por que evitamos (ou pior, odiamos) testar? Testar custa caro, \u00e9 demorado e \u00e9 chato. Mas tudo isso s\u00f3 \u00e9 verdade, pois ainda delegamos essas tarefas para um ser humano. Este livro mostra de maneira pr\u00e1tica como escrever um programa que far\u00e1 esse teste por voc\u00ea! Mergulhe de cabe\u00e7a nessa ideia, aprenda a escrever testes automatizados, e passe a dormir bem, tranquilo, pois seu software agora funciona.", "num_citations": "4\n", "authors": ["93"]}
{"title": "Como a pr\u00e1tica de TDD influencia o projeto de classes em sistemas orientados a objetos\n", "abstract": " Desenvolvimento Guiado por Testes (TDD) e uma das praticas sugeridas na Programacao Extrema. A mecanica da pratica e simples: o programador escreve o teste antes de escrever o codigo. E, portanto, possivel inferir que a pratica de TDD e uma pratica de testes de software. Entretanto, muitos autores de livros conhecidos pela industria e academia afirmam que os efeitos da pratica vao alem. Segundo eles, TDD ajuda o desenvolvedor durante o processo de criacao do projeto classes, fazendo-os criar classes menos acopladas e mais coesas. Entretanto, grande parte dos trabalhos da literatura sao voltados a descobrir se a pratica faz diferenca na qualidade do codigo gerado, mas poucos sao os autores que discutem como a pratica realmente auxilia. Mesmo os proprios praticantes nao entendem ou conseguem expressar bem como a pratica os guia. Este trabalho tem por objetivo compreender melhor os efeitos de TDD e como sua pratica influencia o desenvolvedor durante o processo de projeto de sistemas orientados a objetos. Para entende-las, neste trabalho optamos por um estudo exploratorio essencialmente qualitativo, no qual participantes foram convidados a resolver exercicios pre-preparados utilizando TDD e, a partir dos dados colhidos nessa primeira parte, nos levantamos detalhes sobre como a pratica influenciou as decisoes de projeto de classes dos participantes por meio de entrevistas. Ao final, observamos que a pratica de TDD pode guiar o desenvolvedor durante o processo de criacao do projeto de classes por meio de constantes feedbacks sobre a qualidade do projeto. Esses feedbacks alertam desenvolvedores\u00a0\u2026", "num_citations": "4\n", "authors": ["93"]}
{"title": "Logging Practices with Mobile Analytics: An Empirical Study on Firebase\n", "abstract": " Software logs are of great value in both industrial and open-source projects. Mobile analytics logging enables developers to collect logs remotely from their apps running on end user devices at the cost of recording and transmitting logs across the Internet to a centralised infrastructure. This paper makes a first step in characterising logging practices with a widely adopted mobile analytics logging library, namely Firebase Analytics. We provide an empirical evaluation of the use of Firebase Analytics in 57 open-source Android applications by studying the evolution of code-bases to understand: a) the needs-in-common that push practitioners to adopt logging practices on mobile devices, and b) the differences in the ways developers use local and remote logging. Our results indicate mobile analytics logs are less pervasive and less maintained than traditional logging code. Based on our analysis, we believe logging using mobile analytics is more user centered compared to traditional logging, where the latter is mainly used to record information for debugging purposes.", "num_citations": "3\n", "authors": ["93"]}
{"title": "Orienta\u00e7\u00e3o a Objetos e SOLID para Ninjas: Projetando classes flex\u00edveis\n", "abstract": " Todo profissional que trabalha com desenvolvimento deve conhecer os conceitos b\u00e1sicos de Orienta\u00e7\u00e3o a Objetos. Esse paradigma, al\u00e9m de fundamental, \u00e9 utilizado em todo o mercado de software ao redor do mundo. Mas n\u00f3s sabemos que, na pr\u00e1tica, o que vemos espalhado por a\u00ed s\u00e3o pilhas de c\u00f3digos procedurais disfar\u00e7ados. Neste livro, Maur\u00edcio Aniche discute como a implementa\u00e7\u00e3o e o foco no projeto de classes \u00e9 importante para criar um software de qualidade. Sempre mantendo a caracter\u00edstica de escrever um livro com uma did\u00e1tica voltada para o mundo real, voc\u00ea vai entender como moldar e dominar as pe\u00e7as da Orienta\u00e7\u00e3o a Objetos usando os princ\u00edpios de SOLID e escrevendo um c\u00f3digo mais elegante e f\u00e1cil de manter. Saia do b\u00e1sico e vire um ninja da Orienta\u00e7\u00e3o a Objetos aprendendo de forma pr\u00e1tica e eficaz as boas pr\u00e1ticas do assunto. Os exemplos ao longo do livro est\u00e3o escritos em Java, por\u00e9m s\u00e3o facilmente compreendidas por qualquer programador. As discuss\u00f5es fazem sentido para todas as linguagens OO.", "num_citations": "2\n", "authors": ["93"]}
{"title": "Automatically Identifying Parameter Constraints in Complex Web APIs: A Case Study at Adyen\n", "abstract": " Web APIs may have constraints on parameters, such that not all parameters are either always required or always optional. Moreover, the presence or value of one parameter could cause another parameter to be required, or parameters could have restrictions on what kinds of values are valid. Having a clear overview of the constraints helps API consumers to integrate without the need for additional support and with fewer integration faults.We made use of existing documentation and code analysis approaches for identifying parameter constraints in complex web APIs. In this paper, we report our case study of several APIs at Adyen, a large-scale payment company that offers complex Web APIs to its customers. Our results show that the documentation- and code-based approach can identify 23% and 53% of the constraints respectively and, when combined, 68% of them. We also reflect on the current challenges that\u00a0\u2026", "num_citations": "1\n", "authors": ["93"]}
{"title": "Atoms of Confusion in Java\n", "abstract": " Although writing code seems trivial at times, problems arise when humans misinterpret what the code actually does. One of the potential causes are \"atoms of confusion\", the smallest possible patterns of misinterpretable source code. Previous research has investigated the impact of atoms of confusion in C code. Results show that developers make significantly more mistakes in code where atoms are present. In this paper, we replicate the work of Gopstein et al. to the Java language. After deriving a set of atoms of confusion for Java, we perform a two-phase experiment with 132 computer science students (i.e., novice developers). Our results show that participants are 2.7 up to 56 times more likely to make mistakes in code snippets affected by 7 out of the 14 studied atoms of confusion, and when faced with both versions of the code snippets, participants perceived the version affected by the atom of confusion to be more confusing and/or less readable in 10 out of the 14 studied atoms of confusion.", "num_citations": "1\n", "authors": ["93"]}
{"title": "Test-Driven Development: Teste e Design no mundo Real com PHP\n", "abstract": " Por que n\u00e3o testamos software? Porque \u00e9 caro? Porque \u00e9 demorado? Porque \u00e9 chato? Testes automatizados s\u00e3o a solu\u00e7\u00e3o para todos esses problemas. Aprenda a escrever um programa que testa seu programa de forma r\u00e1pida, barata e produtiva, e aumente a qualidade do seu produto final. Neste livro, voc\u00ea aprender\u00e1 sobre TDD, uma das pr\u00e1ticas \u00e1geis de desenvolvimento de software mais populares. TDD faz o desenvolvedor escrever o teste antes mesmo de implementar o c\u00f3digo. Essa simples invers\u00e3o na maneira de se trabalhar faz com o que o desenvolvedor escreva um c\u00f3digo mais testado, com menos bugs, e, inclusive, com mais qualidade. Seja profissional, teste seu software! Todos os exemplos desse livro foram escritos em PHP.", "num_citations": "1\n", "authors": ["93"]}
{"title": "Como o formato de arquivos XML evolui? Um estudo sobre sua rela\u00e7 ao com c\u00f3digo-fonte\n", "abstract": " There are different ways to integrate applications. A popular approach is the exchange of messages in XML format where both applications share the XML schema. This model, known as\u201d contract\u201d, may change over time as structural modifications such as additions of new information. Changes like that propagate to the client applications, as they have to fit to the new structure and contract. The aim is to better understand how are the dynamics of the contract changes in a software project by means of analyzing messages contracts changes and their impact on the source code of open source and industry applications.Resumo. Existem diferentes formas de integrar aplica\u00e7 oes. Uma delas \u00e9 a troca de mensagens em formato XML, onde ambas aplica\u00e7oes compartilham o modelo estrutural do formato daquele XML. Este modelo, chamado de\u201d contrato\u201d, pode sofrer altera\u00e7oes ao longo do tempo, como modifica\u00e7oes estruturais ou agrega\u00e7 ao de novas informa\u00e7 oes, fazendo com que as aplica\u00e7 oes que o utilizam tenham que se adequar a nova estrutura sempre que o contrato \u00e9 alterado. O objetivo \u00e9 entender melhor como \u00e9 a din\u00e2mica de altera\u00e7oes de contratos em arquivos XML por meio de uma an\u00e1lise nas altera\u00e7oes de contratos de mensagens e seu impacto sobre o c\u00f3digo-fonte de aplica\u00e7oes de c\u00f3digo aberto e da ind\u00fastria.", "num_citations": "1\n", "authors": ["93"]}