{"title": "Method, system and computer program product for enforcing privacy policies\n", "abstract": " A method for enforcing privacy policies associated with data. The method includes accessing a database to identify labeled data in the database, the labeled data associated with a privacy policy. An access node accessing the label data is determined. For the access node accessing the labeled data, it is determined whether the access node applies an authorization test as indicated by the privacy policy. An authorization test is associated with the access node if the access node does not apply necessary authorization indicated by the privacy policy.", "num_citations": "183\n", "authors": ["287"]}
{"title": "System and method for supporting digital rights management in an enhanced Java\u2122 2 runtime environment\n", "abstract": " A digital rights management (DRM) system and methodology for a Java client implementing a Java Runtime Environment (JRE). The JRE comprises a Java Virtual Machine (JVM) and Java runtime libraries components and is capable of executing a player application for presenting content that can be presented through a Java program (eg, a Java application, applet, servlet, bean, etc.) and downloaded from a content server to the client. The DRM system includes an acquisition component for receiving downloaded protected contents; and a dynamic rights management layer located between the JRE and player application for receiving requests to view or play downloaded protected contents from the player, and, in response to each request, determining the rights associated with protected content and enabling viewing or playing of the protected contents via the player application if permitted according to the rights\u00a0\u2026", "num_citations": "148\n", "authors": ["287"]}
{"title": "Access rights analysis for Java\n", "abstract": " Java 2 has a security architecture that protects systems from unauthorized access by mobile or statically configured code. The problem is in manually determining the set of security access rights required to execute a library or application. The commonly used strategy is to execute the code, note authorization failures, allocate additional access rights, and test again. This process iterates until the code successfully runs for the test cases in hand. Test cases usually do not cover all paths through the code, so failures can occur in deployed systems. Conversely, a broad set of access rights is allocated to the code to prevent authorization failures from occurring. However, this often leads to a violation of the \"Principle of Least Privilege\"This paper presents a technique for computing the access rights requirements by using a context sensitive, flow sensitive, interprocedural data flow analysis. By using this analysis, we\u00a0\u2026", "num_citations": "141\n", "authors": ["287"]}
{"title": "F4F: taint analysis of framework-based web applications\n", "abstract": " This paper presents F4F (Framework For Frameworks), a system for effective taint analysis of framework-based web applications. Most modern web applications utilize one or more web frameworks, which provide useful abstractions for common functionality. Due to extensive use of reflective language constructs in framework implementations, existing static taint analyses are often ineffective when applied to framework-based applications. While previous work has included ad hoc support for certain framework constructs, adding support for a large number of frameworks in this manner does not scale from an engineering standpoint.", "num_citations": "96\n", "authors": ["287"]}
{"title": "Software verification system, method and computer program element\n", "abstract": " A software security system is arranged to verify the authenticity of each element of a Java Virtual Machine installation. A digital signature is attached to each file of the JVM installation. A loader (20) verifies the digital signature of the JVM DLL (30). The JVM DLL 30 then verifies the digital signature of each other DLL and configuration file to be loaded (40, 50, 60, 70), and only loads those files which have successfully verified digital signatures. In this way the security of the JVM is enhanced, a user has greater confidence that the Java applications will function correctly, and the detection of incorrect or damaged JVM installations is improved.", "num_citations": "93\n", "authors": ["287"]}
{"title": "Path-and index-sensitive string analysis based on monadic second-order logic\n", "abstract": " We propose a novel technique for statically verifying the strings generated by a program. The verification is conducted by encoding the program in Monadic Second-order Logic (M2L). We use M2L to describe constraints among program variables and to abstract built-in string operations. Once we encode a program in M2L, a theorem prover for M2L, such as MONA, can automatically check if a string generated by the program satisfies a given specification, and if not, exhibit a counterexample. With this approach, we can naturally encode relationships among strings, accounting also for cases in which a program manipulates strings using indices. In addition, our string analysis is path sensitive in that it accounts for the effects of string and Boolean comparisons, as well as regular-expression matches. We have implemented our string analysis algorithm, and used it to augment an industrial security analysis for Web\u00a0\u2026", "num_citations": "88\n", "authors": ["287"]}
{"title": "Transparent digital rights management for extendible content viewers\n", "abstract": " A digital rights management system for controlling the distribution of digital content to player applications. The system comprises a verification system, a trusted content handler, and a user interface control. The verification system is provided to validate the integrity of the player applications; and the trusted content handler is used to decrypt content and to transmit the decrypted content to the player applications, and to enforce usage rights associated with the content. The user interface control module is provided to ensure that users of the player applications are not exposed to actions that violate the usage rights. The preferred embodiment of the present invention provides a system that enables existing content viewers, such as Web browsers, document viewers, and Java Virtual Machines running content-viewing applications, with digital rights management capabilities, in a manner that is transparent to the viewer\u00a0\u2026", "num_citations": "87\n", "authors": ["287"]}
{"title": "Interprocedural analysis for privileged code placement and tainted variable detection\n", "abstract": " In Java 2 and Microsoft .NET Common Language Runtime (CLR), trusted code has often been programmed to perform access-restricted operations not explicitly requested by its untrusted clients. Since an untrusted client will be on the call stack when access control is enforced, an access-restricted operation will not succeed unless the client is authorized. To avoid this, a portion of the trusted code can be made \u201cprivileged.\u201d When access control is enforced, privileged code causes the stack traversal to stop at the trusted code frame, and the untrusted code stack frames will not be checked for authorization. For large programs, manually understanding which portions of code should be made privileged is a difficult task. Developers must understand which authorizations will implicitly be extended to client code and make sure that the values of the variables used by the privileged code are not \u201ctainted\u201d by client\u00a0\u2026", "num_citations": "85\n", "authors": ["287"]}
{"title": "Static analysis based error reduction for software applications\n", "abstract": " A system and method for providing \u201cstatic analysis\u201d of programs to aid in improving runtime performance, stability, security and privacy characteristics of deployed application code. The method includes performing a set of analyses that sifts through the program code and identifies programming security and/or privacy model coding errors. In particular the invention focuses on identifying coding errors that cause loss of correctness, performance degradation, security, privacy and maintainability vulnerabilities. A deep analysis of the program is performed using detailed control and data flow analyses. These deeper analyses provide a much better perspective of the overall application behavior. This deep analysis is in contrast to shallow analyses in current industry tools, which inspect or model a single or a few classes at a time.", "num_citations": "82\n", "authors": ["287"]}
{"title": "Dynamic detection of inter-application communication vulnerabilities in Android\n", "abstract": " A main aspect of the Android platform is Inter-Application Communication (IAC), which enables reuse of functionality across apps and app components via message passing. While a powerful feature, IAC also constitutes a serious attack surface. A malicious app can embed a payload into an IAC message, thereby driving the recipient app into a potentially vulnerable behavior if the message is processed without its fields first being sanitized or validated. We present what to our knowledge is the first comprehensive testing algorithm for Android IAC vulnerabilities. Toward this end, we first describe a catalog, stemming from our field experience, of 8 concrete vulnerability types that can potentially arise due to unsafe handling of incoming IAC messages. We then explain the main challenges that automated discovery of Android IAC vulnerabilities entails, including in particular path coverage and custom data fields, and\u00a0\u2026", "num_citations": "75\n", "authors": ["287"]}
{"title": "Java 2 Network Security\n", "abstract": " Java is fashionable, but is it reliable? Java is entertaining, but is it secure? Java is useful, but is it safe?The purpose of this book is to answer those questions, from the point of view of people who want to use Java, but want to do so reliably, securely and safely. That makes this book different from much recent writing on Java, which focuses, perfectly legitimately, on how a Java system can be broken into and how to avoid those dangers. On the contrary, this book focuses on how Java can be made secure and how to exploit its strengths. The goal is to provide practical help to the various groups involved in making a Java-based application or Web site into an industrial-strength commercial proposition.", "num_citations": "67\n", "authors": ["287"]}
{"title": "Aletheia: Improving the usability of static security analysis\n", "abstract": " The scale and complexity of modern software systems complicate manual security auditing. Automated analysis tools are gradually becoming a necessity. Specifically, static security analyses carry the promise of efficiently verifying large code bases. Yet, a critical usability barrier, hindering the adoption of static security analysis by developers, is the excess of false reports. Current tools do not offer the user any direct means of customizing or cleansing the report. The user is thus left to review hundreds, if not thousands, of potential warnings, and classify them as either actionable or spurious. This is both burdensome and error prone, leaving developers disenchanted by static security checkers.", "num_citations": "65\n", "authors": ["287"]}
{"title": "Enterprise Java security: building secure J2EE applications\n", "abstract": " \" For a long time, there has been a need for a J2EE (TM) security book. I am very happy to see there is now a book that can answer many of the technical questions that developers, managers, and researchers have about such a critical topic. I am sure that this book will contribute greatly to the success of the J2EE platform and e-business.\"--From the Foreword by Steven A. Mills, Senior Vice President and Group Executive, Software Group, IBM Corporation Enterprise Java (TM) Security: Building Secure J2EE (TM) Applications provides application developers and programmers with the know-how they need to utilize the latest Java security technologies in building secure enterprise infrastructures. Written by the leading Java security experts at IBM, this comprehensive guide covers the current status of the Java (TM) 2 Platform, Enterprise Edition (J2EE), and Java (TM) 2 Platform, Standard Edition (J2SE (TM)), security architectures and offers practical solutions and usage patterns to address the challenges of Java security. To aid developers who need to build secure J2EE applications, Enterprise Java (TM) Security covers at length the J2EE security technologies, including the security aspects of servlets, JavaServer Pages (TM)(JSP (TM)), and Enterprise JavaBeans (TM)(EJB (TM))--technologies that are at the core of the J2EE architecture. In addition, the book covers Web Services security. Examples and sample code are provided throughout the book to give readers a solid understanding of the underlying technology. The relationship between Java and cryptographic technologies is covered in great detail, including: Java Cryptography Architecture\u00a0\u2026", "num_citations": "64\n", "authors": ["287"]}
{"title": "Security challenges for Enterprise Java in an e-business environment\n", "abstract": " As e-business matures, companies require enterprise-scalable functionality for their corporate Internet and intranet environments. To support the expansion of their computing boundaries, businesses have embraced Web application servers. These servers support servlets, JavaServer Pages\u2122, and Enterprise JavaBeans\u2122 technologies, providing simplified development and flexible deployment of Web-based applications. However, securing this malleable model presents a challenge. Successful companies recognize that their security infrastructures need to address the e-business challenge. They are aware of the types of attacks that malevolent entities can launch against their servers and can plan appropriate defenses.", "num_citations": "63\n", "authors": ["287"]}
{"title": "Hybrid security analysis of web javascript code via dynamic partial evaluation\n", "abstract": " This paper addresses the problem of detecting JavaScript security vulnerabilities in the client side of Web applications. Such vulnerabilities are becoming a source of growing concern due to the rapid migration of server-side business logic to the client side, combined with new JavaScript-backed Web technologies, such as AJAX and HTML5. Detection of client-side vulnerabilities is challenging given the dynamic and event-driven nature of JavaScript. We present a hybrid form of JavaScript analysis, which augments static analysis with (semi-) concrete information by applying partial evaluation to JavaScript functions according to dynamic data recorded by the Web crawler. The dynamic component rewrites the program per the enclosing HTML environment, and the static component then explores all possible behaviors of the partially evaluated program (while treating user-controlled aspects of the environment\u00a0\u2026", "num_citations": "59\n", "authors": ["287"]}
{"title": "Quantum equation of motion for computing molecular excitation energies on a noisy quantum processor\n", "abstract": " The computation of molecular excitation energies is essential for predicting photo-induced reactions of chemical and technological interest. While the classical computing resources needed for this task scale poorly, quantum algorithms emerge as promising alternatives. In particular, the extension of the variational quantum eigensolver algorithm to the computation of the excitation energies is an attractive option. However, there is currently a lack of such algorithms for correlated molecular systems that is amenable to near-term, noisy hardware. In this work, we propose an extension of the well-established classical equation of motion approach to a quantum algorithm for the calculation of molecular excitation energies on noisy quantum computers. In particular, we demonstrate the efficiency of this approach in the calculation of the excitation energies of the LiH molecule on an IBM Quantum computer.", "num_citations": "52\n", "authors": ["287"]}
{"title": "Authentication in virtual private networks\n", "abstract": " Systems and methods are provided for controlling access to a network. An access request is received from a client application running on a computing device for accessing a remote network. The access request is received over a secure virtual private network (VPN) connection established by a user-mode VPN client running in non-privileged user space of the computing device. The access request includes contextual information for use in authenticating a user to access a remote network, wherein the contextual information includes contextual information about the client application requesting access to the remote network. An authentication process is performed using the contextual information to authenticate the user, and a secure VPN connection is established between the client application and the remote network, if the user is authenticated.", "num_citations": "52\n", "authors": ["287"]}
{"title": "Automatically generating challenge questions inferred from user history data for user authentication\n", "abstract": " User authentication is provided. At least one of a social network and a business network of each user in a plurality of users is accessed. User history data of each user in the plurality of users is monitored in the at least one of the social network and the business network. Challenge questions requiring a user response are generated based on monitoring the user history data of the users. The user response to a generated challenge question is evaluated. A set of events is triggered based on evaluating the user response.", "num_citations": "52\n", "authors": ["287"]}
{"title": "Automated program resource identification and association\n", "abstract": " This invention provides methods and apparatus for determining a set of authorization usage for collection of code. By using a program graph, the present invention identifies the code within in bounded paths in the program graph that use authorization. The level of precision is able to identify authorization usage to the level of basic blocks, methods, classes or other collections of code. By using the analysis technique described in this invention, we can determine the authorizations needed by collections code, including Java applets, servlets, and Enterprise JavaBeans. By using the present invention, it is possible, prior to loading the mobile code, to prompt the administrator or end-user to authorize or deny the code access to restricted the resources, or determine whether authorization testing will be required.", "num_citations": "51\n", "authors": ["287"]}
{"title": "Method and system for run-time dynamic and interactive identification of software authorization requirements and privileged code locations, and for validation of other software\u00a0\u2026\n", "abstract": " A system, method and computer program product for identifying security authorizations and privileged-code requirements; for validating analyses performed using static analyses; for automatically evaluating existing security policies; for detecting problems in code; in a run-time execution environment in which a software program is executing. The method comprises: implementing reflection objects for identifying program points in the executing program where authorization failures have occurred in response to the program's attempted access of resources requiring authorization; displaying instances of identified program points via a user interface, the identified instances being user selectable; for a selected program point, determining authorization and privileged-code requirements for the access restricted resources in real-time; and, enabling a user to select, via the user interface, whether a required authorization\u00a0\u2026", "num_citations": "48\n", "authors": ["287"]}
{"title": "Quantum orbital-optimized unitary coupled cluster methods in the strongly correlated regime: Can quantum algorithms outperform their classical equivalents?\n", "abstract": " The Coupled Cluster (CC) method is used to compute the electronic correlation energy in atoms and molecules and often leads to highly accurate results. However, due to its single-reference nature, standard CC in its projected form fails to describe quantum states characterized by strong electronic correlations and multi-reference projective methods become necessary. On the other hand, quantum algorithms for the solution of many-electron problems have also emerged recently. The quantum unitary variant of CC (UCC) with singles and doubles (q-UCCSD) is a popular wavefunction Ansatz for the variational quantum eigensolver algorithm. The variational nature of this approach can lead to significant advantages compared to its classical equivalent in the projected form, in particular, for the description of strong electronic correlation. However, due to the large number of gate operations required in q-UCCSD\u00a0\u2026", "num_citations": "45\n", "authors": ["287"]}
{"title": "Method and system for run-time dynamic and interactive identification software authorization requirements and privileged code locations, and for validation of other software\u00a0\u2026\n", "abstract": " A system, method and computer program product for identifying security authorizations and privileged-code requirements; for validating analyses performed using static analyses; for automatically evaluating existing security policies; for detecting problems in code; in a run-time execution environment in which a software program is executing. The method comprises: implementing reflection objects for identifying program points in the executing program where authorization failures have occurred in response to the program's attempted access of resources requiring authorization; displaying instances of identified program points via a user interface, the identified instances being user selectable; for a selected program point, determining authorization and privileged-code requirements for the access restricted resources in real-time; and, enabling a user to select, via the user interface, whether a required authorization\u00a0\u2026", "num_citations": "43\n", "authors": ["287"]}
{"title": "Method and apparatus for automatically determining optimum placement of privileged code locations in existing code\n", "abstract": " A method and apparatus for automatically determining optimum placement of privileged code enablement locations in existing code are provided. A method invocation graph of existing code is generated and a static analysis of the method invocation graph is performed. The static analysis is used to analyze the permission propagation through chains of method invocations in the method invocation graph. When a method invocation in the method invocation graph satisfies one or more user definable criteria, the location in the method invocation graph is saved to a file that identifies recommended insertion points for a call to the authorization enablement code. This file may then be used to manually review the code to determine if a call to privileged mode enablement should actually be made at the identified locations. Alternatively, the call to privileged mode enablement may be automatically inserted at the indicated\u00a0\u2026", "num_citations": "43\n", "authors": ["287"]}
{"title": "Injection context based static analysis of computer software applications\n", "abstract": " Embodiments of the invention generally relate to injection context based static analysis of computer software applications. Embodiments of the invention may include selecting a sink within a computer software application, tracing a character output stream leading to the sink within the computer software application, determining an injection context of the character output stream at the sink, where the injection context is predefined in association with a state of the character output stream at the sink, identifying any actions that have been predefined in association with the identified injection context, and providing a report of the actions.", "num_citations": "34\n", "authors": ["287"]}
{"title": "Continuous process for production of oil seed protein isolate\n", "abstract": " Oil seed protein isolates, particularly canola protein isolate, are produced continuously from oil seed meals, preferably at a high purity level of at least about 100 wt%(N\u00d7 6.25), by a process wherein oil seed protein is continuously extracted from oil seed meal, the resulting protein solution is continuously concentrated, preferably to a protein content of at least about 200 g/L, and the concentrated protein solution is continuously mixed with chilled water having a temperature below about 15 C. to form protein micellar, which are settled in the settling vessel to provide a protein micellar mass (PMM) while supernatant overflows the vessel. The PMM, when accumulated to a desired degree, may be separated from supernatant and dried. The supernatant may be processed to recover additional oil seed protein isolate.", "num_citations": "34\n", "authors": ["287"]}
{"title": "A domain-agnostic, noise-resistant, hardware-efficient evolutionary variational quantum eigensolver\n", "abstract": " Variational quantum algorithms have shown promise in numerous fields due to their versatility in solving problems of scientific and commercial interest. However, leading algorithms for Hamiltonian simulation, such as the Variational Quantum Eigensolver (VQE), use fixed preconstructed ansatzes, limiting their general applicability and accuracy. Thus, variational forms---the quantum circuits that implement ansatzes ---are either crafted heuristically or by encoding domain-specific knowledge. In this paper, we present an Evolutionary Variational Quantum Eigensolver (EVQE), a novel variational algorithm that uses evolutionary programming techniques to minimize the expectation value of a given Hamiltonian by dynamically generating and optimizing an ansatz. The algorithm is equally applicable to optimization problems in all domains, obtaining accurate energy evaluations with hardware-efficient ansatzes. In molecular simulations, the variational forms generated by EVQE are up to  shallower and use up to  fewer CX gates than those obtained by VQE with a unitary coupled cluster ansatz. EVQE demonstrates significant noise-resistance properties, obtaining results in noisy simulation with at least  less error than VQE using any tested ansatz configuration. We successfully evaluated EVQE on a real 5-qubit IBMQ quantum computer. The experimental results, which we obtained both via simulation and on real quantum hardware, demonstrate the effectiveness of EVQE for general-purpose optimization on the quantum computers of the present and near future.", "num_citations": "31\n", "authors": ["287"]}
{"title": "Identifying security vulnerability in computer software\n", "abstract": " Identifying a security vulnerability in a computer software application by identifying at least one source in a computer software application, identifying at least one sink in the computer software application, identifying at least one input to any of the sinks, determining whether the input derives its value directly or indirectly from any of the sources, determining a set of possible values for the input, and identifying a security vulnerability where the set of possible values for the input does not match a predefined specification of legal values associated with the sink input.", "num_citations": "31\n", "authors": ["287"]}
{"title": "Application-level anomaly detection\n", "abstract": " An example includes intercepting one or more activities performed by an application on a computing device. The intercepting uses an instrumentation layer separating the application from an operating system on the computing device. The one or more activities are compared with one or more anomaly detection policies in a policy configuration file to detect or not detect presence of one or more anomalies. In response to the comparison detecting presence of one or more anomalies, indication (s) of the one or more anomalies are stored. Another example includes receiving indication (s) of anomaly (ies) experienced by an application on computing device (s) and analyzing the indication (s) of the anomaly (ies) to determine whether corrective action (s) should be issued. Responsive to a determination corrective action (s) should be issued based on the analyzing, the corrective action (s) are issued to the computing\u00a0\u2026", "num_citations": "30\n", "authors": ["287"]}
{"title": "Reducing qubit requirements for quantum simulations using molecular point group symmetries\n", "abstract": " Simulating molecules is believed to be one of the early stage applications for quantum computers. Current state-of-the-art quantum computers are limited in size and coherence; therefore, optimizing resources to execute quantum algorithms is crucial. In this work, we develop the second quantization representation of spatial symmetries, which are then transformed to their qubit operator representation. These qubit operator representations are used to reduce the number of qubits required for simulating molecules. We present our results for various molecules and elucidate a formal connection of this work with a previous technique that analyzed generic Z2 Pauli symmetries.", "num_citations": "28\n", "authors": ["287"]}
{"title": "Automatically rendering web and/or hybrid applications natively in parallel\n", "abstract": " An embodiment includes causing elements to be recognized that correspond to one or more browser-supported programming languages in an application. The recognized elements are those elements that can be converted to native user interface elements in the operating system and rendered on a display of a computing device. The elements in the one or more browser-supported programming languages are converted to native user interface elements. The native user interface elements are caused to be rendered on the display of the computing device. Methods, apparatus, software, and computer program products are disclosed.", "num_citations": "28\n", "authors": ["287"]}
{"title": "Efficient extraction of software dependencies from program code\n", "abstract": " Calls to stop functions are identified in a computer program file. The stop functions are functions that interact with external resources. Parameters of the calls to the stop functions that are references to the external resources are identified. An analysis is performed over the computer program file to find out possible values of the parameters of the calls.", "num_citations": "27\n", "authors": ["287"]}
{"title": "Crawling of object model using transformation graph\n", "abstract": " A transformation tree for an object model (OM) is defined. The transformation tree has nodes interconnected by edges, where each node is connected to at most one other tree node. Each node corresponds to a state of the OM; each edge corresponds to an event causing the OM to transition from the state of one node to the state of another node. A transformation graph for the OM is constructed by simulating the transformation tree. The transformation graph has nodes interconnected by edges, and is a directed graph in which each node is connected to one or more other nodes. Each node corresponds to a state of the OM; each edge corresponds to an event causing the OM to transition from the state of one node to the state of another node. Crawling-oriented actions are performed in relation to the OM by being performed in relation to the transformation graph.", "num_citations": "27\n", "authors": ["287"]}
{"title": "Eliminating false reports of security vulnerabilities when testing computer software\n", "abstract": " A system for eliminating false reports of security vulnerabilities when testing computer software, including a taint analysis engine configured to identify a tainted variable v in a computer application, a data mapping identification engine configured to identify a variable x within the application that holds data derived from v, where x is in a different format than v, an AddData identification engine configured to identify an AddData operation within the application that is performed on x, a signature identification engine configured to identify a Sign operation within the application that is performed on the results of the AddData operation on x, a signature comparison identification engine configured to identify an operation within the application that compares the results of the Sign operation with another value.", "num_citations": "25\n", "authors": ["287"]}
{"title": "System, method, and program for determining validity of string\n", "abstract": " A computer-implemented method, program product, and system for determining the validity of a string generated by a computer programming language program. The method includes: abstracting a constraint between variables extracted from a source code for a programming language, describing the constraint in M2L, and storing the constraint; and evaluating the validity of the string on an M2L solver on the basis of the constraint and a M2L specification to determine whether the string is safe or unsafe.", "num_citations": "25\n", "authors": ["287"]}
{"title": "System, method, and apparatus for automatic recording and replaying of application executions\n", "abstract": " A method comprises receiving data pertaining to a recorded interaction between a test device operating system and an application on a test device, the recorded interaction being based on a user input; compiling the data pertaining to the recorded interaction in a script compiler, the data comprising human-readable action-description language; sending the compiled data comprising human-readable action-description language from the script compiler of the server to a developer device; receiving modified data from the developer device; and sending the modified data from the developer device to the test device.", "num_citations": "24\n", "authors": ["287"]}
{"title": "Combining static and dynamic analysis for automatic identification of precise access-control policies\n", "abstract": " Given a large component-based program, it may be very complex to identify an optimal access-control policy, allowing the program to execute with no authorization failures and no violations of the principle of least privilege. This paper presents a novel combination of static and dynamic analysis for automatic determination of precise access-control policies for programs that will be executed on stack-based access control systems, such as Java and the Common Language Runtime (CLR). The static analysis soundly models the execution of the program taking into account native methods, reflection, and multi-threaded code. The dynamic analysis interactively refines the potentially conservative results of the static analysis, with no need for writing or generating test cases or for restarting the system if an authorization failure occurs during testing, and no risk of corrupting the underlying system on which the analysis is\u00a0\u2026", "num_citations": "24\n", "authors": ["287"]}
{"title": "System and method for static detection and categorization of information-flow downgraders\n", "abstract": " A system and method for static detection and categorization of information-flow downgraders includes transforming a program stored in a memory device by statically analyzing program variables to yield a single assignment to each variable in an instruction set. The instruction set is translated to production rules with string operations. A context-free grammar is generated from the production rules to identify a finite set of strings. An information-flow downgrader function is identified by checking the finite set of strings against one or more function specifications.", "num_citations": "23\n", "authors": ["287"]}
{"title": "Verification of information-flow downgraders\n", "abstract": " A method includes determining grammar for output of an information-flow downgrader in a software program. The software program directs the output of the information-flow downgrader to a sink. The method includes determining whether the grammar of the output conforms to one or more predetermined specifications of the sink. The method includes, in response to a determination the grammar of the output conforms to the one or more predetermined specifications of the sink, determining the information-flow downgrader is verified for the sink, wherein determining grammar, determining whether the grammar, and determining the information-flow downgrader are performed via static analysis of the software program. Apparatus and computer program products are also disclosed. An apparatus includes a user interface providing a result of whether or not output of an information-flow downgrader in the software\u00a0\u2026", "num_citations": "23\n", "authors": ["287"]}
{"title": "Datacentric semantics for verification of privacy policy compliance by mobile applications\n", "abstract": " We introduce an enhanced information-flow analysis for tracking the amount of confidential data that is possibly released to third parties by a mobile application. The main novelty of our solution is that it can explicitly keep track of the footprint of data sources in the expressions formed and manipulated by the program, as well as of transformations over them, yielding a lazy approach with finer granularity, which may reduce false positives with respect to state-of-the-art information-flow analyses.", "num_citations": "22\n", "authors": ["287"]}
{"title": "Automatic optimization of string allocations in a computer program\n", "abstract": " Access is obtained to an input object-oriented computer program. In the input object-oriented computer program, semantically equivalent objects are identified, which exist in different memory locations. If at least one of: a number of occurrences for the semantically equivalent objects exceeds a first threshold value, the threshold value being at least two; and a number of equality tests on the semantically equivalent objects exceeds a second threshold value, then a further step includes identifying an application program interface to reduce the semantically equivalent objects to a single object in a single memory location.", "num_citations": "22\n", "authors": ["287"]}
{"title": "Type independent permission based access control\n", "abstract": " A method and apparatus for type independent permission based access control are provided. The method and apparatus utilize object inheritance to provide a mechanism by which a large group of permissions may be assigned to a codesource without having to explicitly assign each individual permission to the codesource. A base permission, or superclass permission, is defined along with inherited, or subclass, permissions that fall below the base permission in a hierarchy of permissions. Having defined the permissions in such a hierarchy, a developer may assign a base permission to an installed class and thereby assign all of the inherited permissions of the base permission to the installed class. In this way, security providers need not know all the permission types defined in an application. In addition, security providers can seamlessly integrate with many applications without changing their access control and\u00a0\u2026", "num_citations": "22\n", "authors": ["287"]}
{"title": "IBM websphere performance pack: Load balancing with IBM secureway network dispatcher\n", "abstract": " IBM WebSphere Performance Pack is Web infrastructure software that addresses the scalability, reliability and performance needs of e-business applications in both local and geographically distributed environments. Its functions incorporate leading-edge and robust caching, file management and load balancing, that together compensate for the inherent weakness of the Internet to support critical business applications and expectations.This redbook will give you a clear understanding of the features of IBM SecureWay Network Dispatcher, the Load Balancing component of IBM WebSphere Performance Pack. It shows how to plan for, install, configure, use, tune and troubleshoot this component and offers specific implementation examples. Moreover, it helps explain how to build complex scenarios that involve all the components of IBM WebSphere Performance Pack, to give you a better understanding of the technologies involved.", "num_citations": "22\n", "authors": ["287"]}
{"title": "Morphdroid: fine-grained privacy verification\n", "abstract": " Mobile devices are rich in sensors, such as a Global Positioning System (GPS) tracker, microphone and camera, and have access to numerous sources of personal information, including the device ID, contacts and social data. This richness increases the functionality of mobile apps, but also creates privacy threats. As a result, different solutions have been proposed to verify or enforce privacy policies. A key limitation of existing approaches is that they reason about privacy at a coarse level, without accounting for declassification rules, such that the location for instance is treated as a single unit of information without reference to its many fields. As a result, legitimate app behaviors---such as releasing the user's city rather than exact address---are perceived as privacy violations, rendering existing analyses overly conservative and thus of limited usability.", "num_citations": "21\n", "authors": ["287"]}
{"title": "Generating specifications of client-server applications for static analysis\n", "abstract": " Systems and methods are provided for creating a data structure associated with a software application that is based on at least one framework. According to the method, source code and at least one configuration file of the software application is analyzed by at least one framework-specific processor so as to determine entry point information indicating entry points in the source code, request attribute access information indicating where attributes attached to a request data structure are read and written, and forward information indicating forwards performed by the software application. A data structure for a static analysis engine is created based on this information. The data structure includes a list of synthetic methods that model framework-related behavior of the software application, and a list of entry points indicating the synthetic methods and/or application methods of the software application that can be invoked by\u00a0\u2026", "num_citations": "21\n", "authors": ["287"]}
{"title": "Computational investigations of the lithium superoxide dimer rearrangement on noisy quantum devices\n", "abstract": " Quantum chemistry studies of biradical systems are challenging due to the required multiconfigurational nature of the wavefunction. In this work, Variational Quantum Eigensolver (VQE) is used to compute the energy profile for the lithium superoxide dimer rearrangement, involving biradical species, on quantum simulators and devices. Considering that current quantum devices can only handle limited number of qubits, we present guidelines for selecting an appropriate active space to perform computations on chemical systems that require many qubits. We show that with VQE performed with a quantum simulator reproduces results obtained with full-configuration interaction (Full CI) for the chosen active space. However, results deviate from exact values by about 39 mHa for calculations on a quantum device. This deviation can be improved to about 4 mHa using the readout mitigation approach and can be further\u00a0\u2026", "num_citations": "20\n", "authors": ["287"]}
{"title": "Automatically rendering web or hybrid applications natively\n", "abstract": " An embodiment includes causing elements to be recognized that correspond to one or more browser-supported programming languages in an application. The recognized elements are those elements that can be converted to native user interface elements in the operating system and rendered on a display of a computing device. The elements in the one or more browser-supported programming languages are converted to native user interface elements. The native user interface elements are caused to be rendered on the display of the computing device. Apparatus and computer program products are disclosed.", "num_citations": "20\n", "authors": ["287"]}
{"title": "Distributed static analysis of computer software applications\n", "abstract": " A method for distributed static analysis of computer software applications, includes: statically analyzing instructions of a computer software application; identifying at least one entry point in the computer software application; assigning a primary agent to statically analyze the computer software application from the entry point; assigning a secondary agent to statically analyze a call site encountered by the primary agent and produce a static analysis summary of the call site; and presenting results of any of the static analyses via a computer-controlled output device.", "num_citations": "20\n", "authors": ["287"]}
{"title": "Formal analysis of the quality and conformance of information flow downgraders\n", "abstract": " Mechanisms for evaluating downgrader code in application code with regard to one or more security guidelines are provided. Downgrader code in application code is identified, where the downgrader code is a portion of code in the application code that operates on an information flow of the application code to ensure confidentiality of information input to the downgrader code, in the output of the downgrader code. Processes of the downgrader code are evaluated against security guidelines to determine if the processes violate the security guidelines. A notification is generated in response to the evaluation indicating that the processes of the downgrader code violate the security guidelines. The notification is output to a computing device for consideration.", "num_citations": "20\n", "authors": ["287"]}
{"title": "System and method for the automatic verification of privilege-asserting and subject-executed code\n", "abstract": " The present relates to a method for verifying privileged and subject-executed code within a program, the method further comprising the steps of constructing a static model of a program, identifying checkPermission nodes that are comprised within the invocation graph, and performing a fixed-point iteration, wherein each determined permission set is propagated backwards across the nodes of the static model until a privilege-asserting code node is reached. The method further comprises the steps of associating each node of the invocation graph with a set of Permission allocation sites, analyzing each identified privilege-asserting code node and subject-executing code node to determine the Permission allocation site set that is associated with each privilege-asserting code node and subject-executing code node, and determining the cardinality of a Permission allocation-site set that is associated with each privilege\u00a0\u2026", "num_citations": "19\n", "authors": ["287"]}
{"title": "Code analysis for selective runtime data processing\n", "abstract": " A method, system and apparatus for performing selective data processing based upon a static analysis of the code of a compiled object. A compiled object, for example an enterprise bean, can be analyzed to determine how individual methods in the enterprise bean access specific objects. Those specific objects can include, for instance, data members of a class, or class objects passed into one or more individual methods of the enterprise bean. Where the individual methods of the enterprise bean do not mutate or otherwise change the state of the specific objects, those objects can be accessed by reference only. Importantly, where the specific objects are data fields linked to a table in a database as managed by a container managed persistence (CMP) bean, an update to the table will not be required when the static analysis of the enterprise bean otherwise indicates that the data fields are merely accessed, but not\u00a0\u2026", "num_citations": "18\n", "authors": ["287"]}
{"title": "System, apparatus, and method for identifying authorization requirements in component-based systems\n", "abstract": " Improved detecting the authorization requirements and defining the security policies for an application comprising one or more components is disclosed. A call and resource-access graph is used to model all the possible paths of execution within the application. Then, paths of execution detected during the analysis are combined with the access control information found in the security policy of the application. Finally, for each authorization point in the application, a minimal security policy is reported that the executing principal should be granted in order to pass the authorization successfully.", "num_citations": "18\n", "authors": ["287"]}
{"title": "Method and apparatus for implementing permission based access control through permission type inheritance\n", "abstract": " A method and apparatus for type independent permission based access control are provided. The method and apparatus utilize object inheritance to provide a mechanism by which a large group of permissions may be assigned to a codesource without having to explicitly assign each individual permission to the codesource. A base permission, or superclass permission, is defined along with inherited, or subclass, permissions that fall below the base permission in a hierarchy of permissions. Having defined the permissions in such a hierarchy, a developer may assign a base permission to an installed class and thereby assign all of the inherited permissions of the base permission to the installed class. In this way, security providers need not know all the permission types defined in an application. In addition, security providers can seamlessly integrate with many applications without changing their access control and\u00a0\u2026", "num_citations": "18\n", "authors": ["287"]}
{"title": "Automatically capturing user interactions and evaluating user interfaces in software programs using field testing\n", "abstract": " A method includes analyzing, on a first computing device, data from second computing device (s) of user interaction with a user interface of an application previously executed on the second computing device (s). The data corresponds to events caused by the user interaction with the user interface of the application. The first computing device generates representation (s) of the analyzed data and outputs the representation (s) of the user interaction. Another method includes capturing and logging, by a computing device, events caused by user interaction with a user interface of an application when the application is executed on the computing device. In response to a trigger, data comprising the captured and logged events is sent toward another computing device. Another method includes instrumenting a measurement library into an application to create an instrumented version of the application, and sending the\u00a0\u2026", "num_citations": "16\n", "authors": ["287"]}
{"title": "Automatic inference of whitelist-based validation as part of static analysis for security\n", "abstract": " A method includes performing taint analysis of a computer program and determining an original set of paths from sources to sinks. Each path corresponds to a vulnerability. The method includes determining for each variable whose type is a collection and is accessed in one of the paths in the original set of paths whether the variable points to a concrete value whose internal state is not tainted according to the taint analysis. The method further includes, for each of the variables whose type is a collection found not to be tainted according to the taint analysis, determining all points in the computer program where a membership check against the collection is performed. The method also includes, for each of the points, determining corresponding paths and removing those paths from the original set of paths to create a reduced set of paths. Apparatus and computer readable program products are also disclosed.", "num_citations": "16\n", "authors": ["287"]}
{"title": "Modular and/or demand-driven string analysis of a computer program\n", "abstract": " Modular and/or demand-driven string analysis of a computer program is performed. Each method of the program is encoded into monadic second-order logic (M2L) to yield a set of predicate declarations and a set of constraints. The two sets for each method are composed to yield a union set of predicate declarations and a union set of constraints for the program. The union set of constraints includes a particular set of constraints corresponding to call relationships among the methods. An M2L formula including a free variable corresponding to a program variable is added to the union set of constraints. The two union sets are processed to verify a satisfiability of the constraints in relation to an illegal pattern. Where the constraints are satisfiable, the program can generate a string containing the illegal pattern. Where the constraints are not satisfiable, the program never generates a string containing the illegal pattern.", "num_citations": "16\n", "authors": ["287"]}
{"title": "Social and proximity based access control for mobile applications\n", "abstract": " Systems for proximity-based access control include a proximity module configured to determine whether a distance from a first mobile device to each of one or more safe mobile devices falls below a threshold distance; a policy engine comprising a processor configured to determine whether a number of safe mobile devices within the threshold distance exceeds a safe gathering threshold; and a security module configured to activate a safe gathering policy in accordance with the safe gathering threshold that decreases a security level in the first mobile device.", "num_citations": "15\n", "authors": ["287"]}
{"title": "Method and system to discover possible program variable values by connecting program value extraction with external data sources\n", "abstract": " A system and method of discovering one or more program variable values may extract an abstract interpretation of a program variable used in a computer program, locate installation-specific repositories associated with the computer program, parse the located installation-specific repositories and extract one or more configuration parameters, and substitute the one or more configuration parameters into the extracted abstract interpretation.", "num_citations": "15\n", "authors": ["287"]}
{"title": "Labyrinth: Visually configurable data-leakage detection in mobile applications\n", "abstract": " Mobile devices have revolutionized many aspects of our lives. We use smartphones and tablets as portable computers and, often without realizing it, we run various types of security-sensitive programs on them, such as personal and enterprise email and instant-messaging applications, as well as social, banking, insurance and retail programs. These applications access and transmit over the network numerous pieces of private information, including our geographical location, device ID, contacts, calendar events, passwords, and health records, as well as credit-card, social-security, and bank-account numbers. Guaranteeing that no private information is exposed to unauthorized observers is very challenging given the level of complexity that these applications have reached. Furthermore, using program-analysis tools with out-of-the-box configurations in order to detect confidentiality violations may not yield the\u00a0\u2026", "num_citations": "14\n", "authors": ["287"]}
{"title": "Detecting security vulnerabilities in web applications\n", "abstract": " Method to detect security vulnerabilities includes: interacting with a web application during its execution to identify a web page exposed by the web application; statically analyzing the web page to identify a parameter within the web page that is constrained by a client-side validation measure and that is to be sent to the web application; determining a server-side validation measure to be applied to the parameter in view of the constraint placed upon the parameter by the client-side validation measure; statically analyzing the web application to identify a location within the web application where the parameter is input into the web application; determining whether the parameter is constrained by the server-side validation measure prior to the parameter being used in a security-sensitive operation; and identifying the parameter as a security vulnerability.", "num_citations": "14\n", "authors": ["287"]}
{"title": "Policy-driven detection and verification of methods such as sanitizers and validators\n", "abstract": " A method includes performing a static analysis on a program having sources and sinks to track string flow from the sources to the sinks. The static analysis includes, for string variables in the program that begin at sources, computing grammar of all possible string values for each of the string variables and, for methods in the program operating on any of the string variables, computing grammar of string variables returned by the methods. The static analysis also includes, in response to one of the string variables reaching a sink that performs a security-sensitive operation, comparing current grammar of the one string variable with a policy corresponding to the security-sensitive operation, and performing a reporting operation based on the comparing. Apparatus and computer program products are also disclosed.", "num_citations": "14\n", "authors": ["287"]}
{"title": "System and method for the automatic evaluation of existing security policies and automatic creation of new security policies\n", "abstract": " The present invention relates to methodologies for combining policy analysis and static analysis of code and thereafter determining whether the permissions granted by the policy to the code and to the subjects executing it are appropriate. In particular, this involves the verification that too many permissions have not been granted (wherein this would be a violation of the Principle of Least Privilege), and that the permissions being granted are sufficient to execute the code without run-time authorization failures, thus resulting in the failure of the program to execute.", "num_citations": "14\n", "authors": ["287"]}
{"title": "The case for analysis preserving language transformation\n", "abstract": " Static analysis has gained much attention over the past few years in applications such as bug finding and program verification. As software becomes more complex and componentized, it is common for software systems and applications to be implemented in multiple languages. There is thus a strong need for developing analysis tools for multi-language software. We introduce a technique called Analysis Preserving Language Transformation (aplt) that enables the analysis of multi-language software, and also allows analysis tools for one language to be applied to programs written in another. aplt preserves data and control flow information needed to perform static analyses, but allows the translation to deviate from the original program's semantics in ways that are not pertinent to the particular analysis. We discuss major technical difficulties in building such a translator, using a C-to-Java translator as an example\u00a0\u2026", "num_citations": "14\n", "authors": ["287"]}
{"title": "Security risk evaluation\n", "abstract": " A system for evaluating security risks including a processor to detect a set of vulnerabilities for an application based on static analysis of the application and calculate a risk score associated with each of the vulnerabilities based on additional characteristics of the application. The processor can also modify the application to prevent vulnerabilities with a risk score above a risk threshold value.", "num_citations": "13\n", "authors": ["287"]}
{"title": "Global variable security analysis\n", "abstract": " A method includes determining selected global variables in a program for which flow of the selected global variables through the program is to be tracked. The selected global variables are less than all the global variables in the program. The method includes using a static analysis performed on the program, tracking flow through the program for the selected global variables. In response to one or more of the selected global variables being used in security-sensitive operations in the flow, use is analyzed of each one of the selected global variables in a corresponding security-sensitive operation. In response to a determination the use may be a potential security violation, the potential security violation is reported. Apparatus and computer program products are also disclosed.", "num_citations": "13\n", "authors": ["287"]}
{"title": "Static analysis for verification of software program access to secure resources for computer systems\n", "abstract": " A method includes, using a static analysis, analyzing a software program to determine whether the software program accesses a secure resource for a computer system without verification that the secure resource can be accessed by the software program. The method also includes, in response to an access by the software program to the secure resource without verification that the secure resource can be accessed by the software program, outputting a result indicative of the analyzing. Computer program products and apparatus are also disclosed. An apparatus is disclosed that includes a user interface providing a security report to a user, the security report indicating a result of an analysis of whether or not a software program accesses a secure resource for a computer system without verification that the secure resource can be accessed by the software program.", "num_citations": "13\n", "authors": ["287"]}
{"title": "System and method for the automatic identification of subject-executed code and subject-granted access rights\n", "abstract": " The present invention relates to a method for identifying subject-executed code and subject-granted access rights within a program, the method further comprising the steps of: constructing a static model of a program, and determining a set of access rights that are associated with each subject object that is comprised within the program. The method further comprises the steps of annotating the invocation graph with the set of access right data to generate a subject-rights analysis, wherein each node comprised within the invocation graph is mapped to a set of access rights that represent subject-granted access rights under which a method that corresponds to a respective node will be executed, and utilizing the subject-rights analysis to perform a subject-rights analysis of the program.", "num_citations": "13\n", "authors": ["287"]}
{"title": "Static analysis of client-server applications using framework independent specifications\n", "abstract": " Systems and methods are provided for statically analyzing a software application that is based on at least one framework. According to the method, source code of the software application and a specification associated with the software application are analyzed. The specification includes a list of synthetic methods that model framework-related behavior of the software application, and a list of entry points indicating the synthetic methods and/or application methods of the software application that can be invoked by the framework. Based on the source code and the specification, intermediate representations for the source code and the synthetic methods are generated. Based on the intermediate representations and the specification, call graphs are generated to model which application methods of the software application invoke synthetic methods or other application methods of the software application. The software\u00a0\u2026", "num_citations": "13\n", "authors": ["287"]}
{"title": "Social and proximity based access control for mobile applications\n", "abstract": " Methods and systems for proximity-based access control include determining whether a distance from a first mobile device to each of one or more safe mobile devices falls below a threshold distance; determining whether a number of safe mobile devices within the threshold distance exceeds a safe gathering threshold with a processor; and activating a safe gathering policy in accordance with the safe gathering threshold that decreases a security level in the first mobile device.", "num_citations": "12\n", "authors": ["287"]}
{"title": "Privacy analysis of android apps: implicit flows and quantitative analysis\n", "abstract": " A static analysis is presented, based on the theory of abstract interpretation, for verifying privacy policy compliance by mobile applications. This includes instances where, for example, the application releases the user\u2019s location or device ID without authorization. It properly extends previous work on datacentric semantics for verification of privacy policy compliance by mobile applications by (i) tracking implicit information flow, and (ii) performing a quantitative analysis of information leakage. This yields to a novel combination of qualitative and quantitative analyses of information flows in mobile applications.", "num_citations": "12\n", "authors": ["287"]}
{"title": "System, method and apparatus for simultaneous definition and enforcement of access-control and integrity policies\n", "abstract": " Access-control and information-flow integrity policies are enforced in a computing system by detecting security-sensitive sinks in software code for an application running on the computing system and retrieving an access-control policy from a database accessible to the computing system. The access-control policy maps a set of access permissions within the computing system to each one of a plurality of principals. For each detected security-sensitive sink, all principals that influence that security-sensitive sink are detected and an overall access permission is assigned to each security-sensitive sink by taking the intersection of the access permission sets for all influencing principals of that security-sensitive sink. If this permission set is inadequate, an integrity violation is reported. In addition, permission labels are assigned to each value of variables used in the security-sensitive sinks. Each permission label is a set of\u00a0\u2026", "num_citations": "12\n", "authors": ["287"]}
{"title": "A language for information flow: dynamic tracking in multiple interdependent dimensions\n", "abstract": " This paper presents \u03bb I, a language for dynamic tracking of information flow across multiple, interdependent dimensions of information. Typical dimensions of interest are integrity and confidentiality. \u03bb I supports arbitrary domain-specific policies that can be developed independently. \u03bb I treats information-flow metadata as a first-class entity and tracks information flow on the metadata itself (integrity on integrity, integrity on confidentiality, etc.).", "num_citations": "12\n", "authors": ["287"]}
{"title": "Automatic and transparent application logging\n", "abstract": " Automatic application logging, in one aspect, may receive a directive for logging data associated with an application. One or more runtime objects of an instance of the application running on a processor may be modified according to the directive to collect the data. The data may be collected via the modified one or more runtime objects.", "num_citations": "11\n", "authors": ["287"]}
{"title": "Certifying server side web applications against security vulnerabilities\n", "abstract": " Systems for server security verification include a report validation module configured to acquire a public key associated with a received report, where the received report was generated at a server, to decrypt the received report using the public key, and to determine a level of server-side security based on the decrypted report; and a processor configured to reconfigure a browser responsive to the determined level of server-side security.", "num_citations": "11\n", "authors": ["287"]}
{"title": "Method for information tracking in multiple interdependent dimensions\n", "abstract": " A method for information flow tracking is provided using, for example, a functional programming language based on lambda calculus, \u03bb I. The method provides a unified information-tracking framework that supports multiple, interdependent dimensions of information. An expressive policy-specification system is separated from the underlying information-flow tracking mechanism. Arbitrary domain-specific policies are supported that can be developed and enforced independent of information flow tracking. Information-flow metadata is treated as a first-class entity, and information flow is correctly tracked on the metadata itself. Classes of information flow polices are defined using multiple dimensions that are application to both information flow data and to the information flows themselves. These classes of polices accurately model more realistic security policies, based on partial trust relations. Therefore, multiple\u00a0\u2026", "num_citations": "11\n", "authors": ["287"]}
{"title": "Unchanged Object Management\n", "abstract": " A method includes, using a static analysis performed on code, analyzing the code to determine a set of unchanged objects and modifying the code to exercise a singleton-pattern technique for one or more members of the set of unchanged objects. The method also includes outputting the modified code. Apparatus and program products are also disclosed. Another method includes accessing code from a client, and in response to any of the code being source code, compiling the source code into object code until all the code from the client comprises object code. The method further includes, using a static analysis performed on the object code, analyzing the object code to determine a set of unchanged objects and modifying the object code to exercise a singleton-pattern technique for one or more members of the set of unchanged objects. The method additionally includes returning the modified object code to the\u00a0\u2026", "num_citations": "11\n", "authors": ["287"]}
{"title": "Programming languages and program analysis for security: a three-year retrospective\n", "abstract": " Software security has been traditionally enforced at the level of operating systems. However, operating systems have become increasingly large and complex, and it is very difficult--if not impossible--to enforce software security solely through them. Moreover, operating-system security allows dealing primarily with access-control policies on resources such as files and network connections. However, attacks may happen at both lower and higher levels of abstraction, and may target the internal behavior of applications, such as today's Web-based applications. Therefore, defenses must offer protection at the level of applications. Language-based security is the area of research that studies how to enforce application-level security using programming-language and program-analysis techniques. This area of research has become very active with the advent of Web applications. In 2006, the ACM SIGPLAN has introduced\u00a0\u2026", "num_citations": "11\n", "authors": ["287"]}
{"title": "WebGuard: a system for web content protection\n", "abstract": " In this paper, we present WebGuard, a content protection system for Web documents. WebGuard allows content owners to exercise control over usage conditions governing access to their content. We first introduce the concept of transparent digital rights management, and then show how WebGuard realizes it, using existing Web browsers.", "num_citations": "11\n", "authors": ["287"]}
{"title": "Omnichannel approach to application sharing across different devices\n", "abstract": " A group of remote devices executing an omnichannel application are coordinated from a network node. An omnichannel mediator coordinates formation of at least two of said remote devices into an omnichannel cloudlet. A component manager controls which of a plurality of components of said omnichannel application should optimally be placed on which individual devices of said omnichannel cloudlet and how data should flow to individual devices of said omnichannel cloudlet. A replication optimizer optimally coordinates data replication for the group of remote device.", "num_citations": "10\n", "authors": ["287"]}
{"title": "Transparently tracking provenance information in distributed data systems\n", "abstract": " Methods and systems for enabling an application to track provenance information include analyzing an application binary to discover injection points for provenance tracking code; overwriting instructions in the application binary at the injection points to create an instrumented application, where the overwritten instructions link the application binary to one or more instrumented libraries that invoke a provenance layer to track data operations; and deploying the instrumented application on a client device.", "num_citations": "10\n", "authors": ["287"]}
{"title": "Determining correctness conditions for use in static analysis\n", "abstract": " An embodiment comprising a method is associated with static analysis of a program, which detects violations of conditions of the program correctness specification. The method includes selectively encoding the program and adding one or more correctness conditions to the encoded program, wherein the added conditions comprise a set of assumptions that render the program correct with respect to one or more properties pertaining to detected violations. The set of assumptions are reported to a program user, together with a request to the user to verify the validity of each assumption of the set.", "num_citations": "10\n", "authors": ["287"]}
{"title": "Static analysis of computer software applications\n", "abstract": " Static analysis of a computer software application can be performed by applying a first level of abstraction to model a plurality of run-time objects, thereby producing a set of object abstractions. Static data-flow analysis of the computer software application can be performed using the set of object abstractions, thereby producing a first data-flow propagation graph. A data-flow bottleneck can be identified within the data-flow propagation graph. A second level of abstraction can be applied to model any of the run-time objects having in the set of object abstractions a corresponding object abstraction that is traceable to the data-flow bottleneck. The applying the second level of abstraction can decompose the corresponding object abstraction into a set of object abstractions, thereby modifying the set of object abstractions. Static data-flow analysis of the computer software application can be performed using the modified set\u00a0\u2026", "num_citations": "10\n", "authors": ["287"]}
{"title": "Static discovery and remediation of code-embedded resource dependencies\n", "abstract": " Many enterprises perform data-center transformation, consolidation, and migration in order to improve the efficiency of their IT infrastructures. These transformation projects begin with the discovery of the existing infrastructure, in particular the dependencies between applications. These dependencies are needed in planning, in order to determine how components influence one another, and in relinking, so that the component names and addresses can be updated. Typically, dependency discovery is done by network monitoring and middleware configuration analysis. These existing approaches will often fail to detect dependencies expressed in the application code. In this paper, we present the first method and tool for automatically identifying code-embedded external dependencies in Java Enterprise Edition applications. In addition, our tool can automatically alter the application code to update the dependencies\u00a0\u2026", "num_citations": "10\n", "authors": ["287"]}
{"title": "Determining the vulnerability of computer software applications to privilege-escalation attacks\n", "abstract": " Determining the vulnerability of computer software applications to privilege-escalation attacks, such as where an instruction classifier is configured to be used for identifying a candidate access-restricted area of the instructions of a computer software application, and a static analyzer is configured to statically analyze the candidate access-restricted area to determine if there is a conditional instruction that controls execution flow into the candidate access-restricted area, perform static analysis to determine if the conditional instruction is dependent on a data source within the computer software application, and designate the candidate access-restricted area as vulnerable to privilege-escalation attacks absent either of the conditional instruction and the date source.", "num_citations": "9\n", "authors": ["287"]}
{"title": "Discovery of application vulnerabilities involving multiple execution flows\n", "abstract": " Methods and systems for security analysis of an application are disclosed. One system includes a flow-insensitive analyzer, a control flow assessment module and a flow-sensitive analyzer. The flow-insensitive analyzer is configured to conduct a flow-insensitive analysis on the application to obtain a set of potential vulnerabilities in the application. In addition, the control flow assessment module is configured to determine, for each of the potential vulnerabilities, a relevant set of control flows that include the respective vulnerability. Further, the flow-sensitive analyzer is configured to perform, by a hardware processor, for each relevant set of control flows, a flow-sensitive analysis of at least one of the control flows in the corresponding relevant set to assess the validity of the respective vulnerability.", "num_citations": "9\n", "authors": ["287"]}
{"title": "Method and apparatus for paralleling and distributing static source code security analysis using loose synchronization\n", "abstract": " A method of static source code analysis is provided. A forward search of source code is performed from each of a plurality of source nodes. A backward search of source code is performed from each of a plurality of sink nodes, wherein the forward search and the backward search are performed in parallel simultaneously. The progress of the forward search and the backward search are monitored to determine if the searches intersect at a common node. A vulnerability alert is generated when the monitoring determines that a forward search and a backward search reach a common node.", "num_citations": "9\n", "authors": ["287"]}
{"title": "Static analysis for verification of software program access to secure resources for computer systems\n", "abstract": " Computer program products and apparatus are disclosed. Using a static analysis, a software program is analyzed to determine whether the software program accesses a secure resource for a computer system without verification that the secure resource can be accessed by the software program. In response to an access by the software program to the secure resource without verification that the secure resource can be accessed by the software program, a result is output indicative of the analyzing. An apparatus is disclosed that includes a user interface providing a security report to a user, the security report indicating a result of an analysis of whether or not a software program accesses a secure resource for a computer system without verification that the secure resource can be accessed by the software program.", "num_citations": "9\n", "authors": ["287"]}
{"title": "Automated detection of flaws and incompatibility problems in information flow downgraders\n", "abstract": " Mechanisms for evaluating downgrader code in application code with regard to a target deployment environment. Downgrader code in the application code is identified. Based on an input string, an output string that the downgrader code outputs in response to receiving the input string is identified. One or more sets of illegal string patterns are retrieved. Each of the one or more sets of illegal string patterns is associated with a corresponding deployment environment. The illegal string patterns are string patterns that a downgrader identifies in the information flow for security purposes. A determination is made as to whether the downgrader code is compatible with the target deployment environment based on the one or more sets of illegal string patterns and the output string. An output indicative of the results of the determining is generated.", "num_citations": "9\n", "authors": ["287"]}
{"title": "Eliminating false-positive reports resulting from static analysis of computer software\n", "abstract": " A system for eliminating false-positive reports resulting from static analysis of computer software is provided herein. The system includes the following components executed by a processor: a modeler configured to model a computer code into a model that defines sources, sinks, and flows; a static analyzer configured to apply static analysis to the code or the model, to yield reports indicative of at least one issue relating to one or more of the flows; a preconditions generator configured to generate preconditions for eliminating false-positive issues in the reports, based on the model and user-provided input; and a preconditions checker configured to apply the generated preconditions to the reports for eliminating false-positive issues in the reports.", "num_citations": "9\n", "authors": ["287"]}
{"title": "Static analysis based on observed string values during execution of a computer-based software application\n", "abstract": " Improving static analysis precision by recording a value pointed to by a string variable within the computer-based software application during the execution of a computer-based software application, modeling an invariant based on the recorded value, where the invariant represents at least one possible value pointed to by the string variable, performing a first static analysis of the computer-based software application to determine whether the invariant is valid with respect to the computer-based software application, and seeding a second static analysis of the computer-based software application with the invariant if the invariant is valid with respect to the computer-based software application.", "num_citations": "9\n", "authors": ["287"]}
{"title": "Transparently tracking provenance information in distributed data systems\n", "abstract": " A method for tracking provenance information includes catching and logging data events performed by an instrumented application at a provenance layer. Overwritten library call instructions provide library calls to one or more instrumented libraries that invoke the provenance layer to track data operations. A provenance log is created that includes the logged data events.", "num_citations": "8\n", "authors": ["287"]}
{"title": "Rule matching in the presence of languages with no types or as an adjunct to current analyses for security vulnerability analysis\n", "abstract": " A method includes reading by a computing system a rule file including one or more rules having specified paths to methods, each method corresponding to one of a sink, source, or sanitizer. The method includes matching by the computing system the methods to corresponding ones of sinks, sources, or sanitizers determined through a static analysis of an application. The static analysis determines at least flows from sources of information to sinks that use the information. The method includes performing by the computing system, using the sinks, sources, and sanitizers found by the matching, a taint analysis to determine at least tainted flows from sources to sinks, wherein the tainted flows are flows passing information to sinks without the information being endorsed by a sanitizer. Apparatus and program products are also disclosed.", "num_citations": "8\n", "authors": ["287"]}
{"title": "Transparent data service suitable for modifying data storage capabilities in applications\n", "abstract": " A method includes monitoring, on a computing device, data events corresponding to manipulation of data by an application. The monitoring is performed by a data library service that is embedded in the application. The method includes, in response to the monitoring indicating first data on the computing device is modified by the application, synchronizing, by the computing device under control at least in part of the data library service, second data stored on one or more storage providers in a network with the first data modified by the application and stored on the computing device. Apparatus and computer program products are also disclosed.", "num_citations": "8\n", "authors": ["287"]}
{"title": "Enabling bring-your-own-device using mobile application instrumentation\n", "abstract": " Many enterprises are investigating Bring-Your-Own-Device (BYOD) policies, which allow employees to use their personal devices in the workplace. This has led to mixed-use scenarios, where consumer and enterprise software are installed on the same device. In this paper, we describe the Secured Application Framework for Enterprise (SAFE), a comprehensive system for enabling BYOD that allows enterprise and consumer applications to coexist side-by-side on the device. Rather than partition the device by profiles, SAFE embeds enterprise functions in each enterprise application; this allows for a seamless user experience and minimal intrusiveness on the part of the enterprise. We describe the SAFE toolset that implements the embedding of the SAFE instrumentation layer, and then provide an overview of several enterprise features that can be configured using SAFE. Specifically, we describe modeling for\u00a0\u2026", "num_citations": "8\n", "authors": ["287"]}
{"title": "Optimizing Quantum Search Using a Generalized Version of Grover's Algorithm\n", "abstract": " Grover's Search algorithm was a breakthrough at the time it was introduced, and its underlying procedure of amplitude amplification has been a building block of many other algorithms and patterns for extracting information encoded in quantum states. In this paper, we introduce an optimization of the inversion-by-the-mean step of the algorithm. This optimization serves two purposes: from a practical perspective, it can lead to a performance improvement; from a theoretical one, it leads to a novel interpretation of the actual nature of this step. This step is a reflection, which is realized by (a) cancelling the superposition of a general state to revert to the original all-zeros state, (b) flipping the sign of the amplitude of the all-zeros state, and finally (c) reverting back to the superposition state. Rather than canceling the superposition, our approach allows for going forward to another state that makes the reflection easier. We validate our approach on set and array search, and confirm our results experimentally on real quantum hardware.", "num_citations": "7\n", "authors": ["287"]}
{"title": "Ares: triggering payload of evasive android malware\n", "abstract": " With the emergence of mobile application markets, there has been a dramatic increase in mobile malware. Mobile platform providers are constantly creating and refining their malware-detection techniques, including static analysis and behavioral monitoring. The goal of malware writers is to hide the malware payload from those analyzers. In parallel, security analysts want to quickly detect if any software is malware in order to prevent harm to users. This confrontation is pushing malware writers to develop new evasion techniques that prevent their malware from being detected or making analysis harder. This paper describes Ares, a system built on top of an existing behavioral analysis, based on static information-flow analysis, binary instrumentation, and multiexecution analysis, to detect and bypass many common evasive techniques used by mobile malware. Additionally, this paper presents our implementation of\u00a0\u2026", "num_citations": "7\n", "authors": ["287"]}
{"title": "System, method and apparatus to visually configure an analysis of a program\n", "abstract": " A method extracts views from an application program, where at least some extracted views include at least one view component, and presenting the extracted views to a user. In response to the user selecting a view component in a presented extracted view, the method presents a form to the user having a plurality of vulnerability types indicated for the selected view component and, for each vulnerability type, provides an ability for the user to set an indicator in the form as to indicate whether the view component is at least one of a source or a sink. The method further includes saving the form containing the user's input in conjunction with a user-provided label for the selected view component and a unique identification of the selected view component, and deriving an analysis policy configuration from the saved form that is formatted for use by a program security analyzer.", "num_citations": "7\n", "authors": ["287"]}
{"title": "Method, apparatus and computer program product providing performance and energy optimization for mobile computing\n", "abstract": " A method to share a computation task among a plurality of devices including at least one mobile device. The method includes estimating a cost to perform a computation task on a data set. If the estimated cost is greater than a threshold cost, the method further includes forming an ad-hoc wireless network comprised of a plurality of devices; downloading a portion of the data set to individual ones of the devices; performing a computation task by each device on the downloaded portion of the data set; and wirelessly transferring a result of the computation task from each device to all other devices of the network. The method can be performed by execution of an application program stored in mobile devices configured for local area wireless connectivity with neighboring mobile devices and for wireless connectivity to a remote server from which the portion of the data set is downloaded.", "num_citations": "7\n", "authors": ["287"]}
{"title": "Transparently tracking provenance information in distributed data systems\n", "abstract": " Systems for enabling an application to track provenance include an application analysis module configured to analyze an application binary to discover injection points for provenance tracking code; and an instruction alteration module configured to overwrite instructions in the application binary at the injection points to create an instrumented application. The overwritten instructions link the application binary to one or more instrumented libraries that invoke a provenance layer to track data operations.", "num_citations": "7\n", "authors": ["287"]}
{"title": "Building reusable function summaries for frequently visited methods to optimize data-flow analysis\n", "abstract": " A method includes inspecting function summaries generated during a static analysis of a program and identifying a set of function summaries for a same method that have structural similarities. The method includes replacing the set of structurally similar summaries with a coarse summary. The method further includes using the coarse summary in subsequent static analysis operations. Apparatus and program products are also disclosed.", "num_citations": "7\n", "authors": ["287"]}
{"title": "ShamDroid: gracefully degrading functionality in the presence of limited resource access\n", "abstract": " Given a program whose functionality depends on access to certain external resources, we investigate the question of how to gracefully degrade functionality when a subset of those resources is unavailable. The concrete setting motivating this problem statement is mobile applications, which rely on contextual data (e.g., device identifiers, user location and contacts, etc.) to fulfill their functionality. In particular, we focus on the Android platform, which mediates access to resources via an installation-time permission model. On the one hand, granting an app the permission to access a resource (e.g., the device ID) entails privacy threats (e.g., releasing the device ID to advertising servers). On the other hand, denying access to a resource could render the app useless (e.g., if inability to read the device ID is treated as an error state). Our goal is to specialize an existing Android app in such a way that it is disabled from\u00a0\u2026", "num_citations": "7\n", "authors": ["287"]}
{"title": "Automatic extraction, modeling, and code mapping of application user interface display screens and components\n", "abstract": " Managing user applications is provided. A visual model of user interface display screens of a user application is generated by mapping components displayed within the user interface display screens to screen position coordinates and by mapping the screen position coordinates corresponding to the components to original source code of the user application. A runtime policy for each component in a selected set of components within the user interface display screens of the user application is generated based on user interaction with the generated visual model of the user interface display screens. The generated runtime policy for each component in the selected set of components is sent to a client device via a network. Activity of each component in the selected set of components in the client device is tracked using data that is tracked and logged on the client device based the generated runtime policy for each\u00a0\u2026", "num_citations": "7\n", "authors": ["287"]}
{"title": "Interactive analysis of a security specification\n", "abstract": " Analyzing a security specification. An embodiment can include identifying a downgrader in a computer program under test. Testing on the downgrader can be performed in a first level of analysis. Responsive to the downgrader not passing the testing performed in the first level of analysis, a counter example for the downgrader can be automatically synthesized. Further, a test unit can be created for the downgrader using the counter example as an input parameter to the downgrader. The test unit can be executed to perform testing on the downgrader in a second level of analysis. Responsive to the downgrader passing the testing performed in the second level of analysis, a user can be prompted to simplify a model of the downgrader.", "num_citations": "7\n", "authors": ["287"]}
{"title": "Answering security queries statically based on dynamically-determined information\n", "abstract": " A method includes analyzing execution of a software program, the software program having sources returning values, sinks that perform security-sensitive operations on those returned values or modified versions of the returned values, and flows of the returned values to the sinks, the analyzing determining a first set of methods having access to a value returned from a selected one of the sources. A static analysis is performed on the software program, the static analysis using the first set of methods to determine a second set of methods having calling relationships with the selected source, the static analysis determining whether the returned value from the selected source can flow through a flow to a sink that performs a security-sensitive operation without the flow to the sink being endorsed, and in response, indicating a security violation. Apparatus and computer program products are also disclosed.", "num_citations": "7\n", "authors": ["287"]}
{"title": "Method and apparatus for adopting authorizations\n", "abstract": " A method and apparatus for implementing a new Permission for methods that perform callback operations are provided. The method and apparatus provide an AdoptPermission Permission type that allows a method to pass a Java 2 authorization test without having the specific required Permissions expressly granted to the method and without the method having the AllPermission Permission granted to it. With the apparatus and method, an AdoptPermission Permission type is defined that operates to allow a ProtectionDomain to \u201cadopt\u201d a required Permission. However, this adoption of a required Permission can only be performed if the ProtectionDomain of at least one method in the thread stack has been granted a Permission that implies the required Permission. Thus, the AdoptPermission Permission type provides an intermediate mechanism that is not as over-inclusive as the AllPermission Permission type and\u00a0\u2026", "num_citations": "7\n", "authors": ["287"]}
{"title": "The Efficient Preparation of Normal Distributions in Quantum Registers\n", "abstract": " The efficient preparation of input distributions is an important problem in obtaining quantum advantage in a wide range of domains. We propose a novel quantum algorithm for the efficient preparation of arbitrary normal distributions in quantum registers. To the best of our knowledge, our work is the first to leverage the power of Mid-Circuit Measurement and Reuse (MCMR), in a way that is broadly applicable to a range of state-preparation problems. Specifically, our algorithm employs a repeat-until-success scheme, and only requires a constant-bounded number of repetitions in expectation. In the experiments presented, the use of MCMR enables up to a 862.6x reduction in required qubits. Furthermore, the algorithm is provably resistant to both phase-flip and bit-flip errors, leading to a first-of-its-kind empirical demonstration on real quantum hardware, the MCMR-enabled Honeywell System Model H0.", "num_citations": "6\n", "authors": ["287"]}
{"title": "Canonical construction of quantum oracles\n", "abstract": " Selecting a set of basis states is a common task in quantum computing, in order to increase and/or evaluate their probabilities. This is similar to designing WHERE clauses in classical database queries. Even though one can find heuristic methods to achieve this, it is desirable to automate the process. A common, but inefficient automation approach is to use oracles with classical evaluation of all the states at circuit design time. In this paper, we present a novel, canonical way to produce a quantum oracle from an algebraic expression (in particular, an Ising model), that maps a set of selected states to the same value, coupled with a simple oracle that matches that particular value. We also introduce a general form of the Grover iterate that standardizes this type of oracle. We then apply this new methodology to particular cases of Ising Hamiltonians that model the zero-sum subset problem and the computation of Fibonacci numbers. In addition, this paper presents experimental results obtained on real quantum hardware, the new Honeywell computer based on trapped-ion technology with quantum volume 64.", "num_citations": "6\n", "authors": ["287"]}
{"title": "Mobile user interface design testing tool\n", "abstract": " A tool for verifying a user interface (UI) design of a mobile application receives a screenshot of the application's UI operating at a target device and retrieves a reference UI design image that corresponds to the received screenshot. The tool generates a plurality of images based on discrepancies between the screenshot and the reference UI design image. The plurality of images include a set of differential images in which each pixel location has a value that is based on a difference between corresponding pixels at the same pixel location of the reference UI design image and of the screenshot. The plurality of imagers also include at least one blended image that is an overlay of the reference UI design image with the screenshot.", "num_citations": "6\n", "authors": ["287"]}
{"title": "Visual configuration of mobile privacy policies\n", "abstract": " Mobile applications often require access to private user information, such as the user or device ID, the location or the contact list. Usage of such data varies across different applications. A notable example is advertising. For contextual advertising, some applications release precise data, such as the user\u2019s exact address, while other applications release only the user\u2019s country. Another dimension is the user. Some users are more privacy demanding than others. Existing solutions for privacy enforcement are neither app- nor user- sensitive, instead performing general tracking of private data into release points like the Internet. The main contribution of this paper is in refining privacy enforcement by letting the user configure privacy preferences through a visual interface that captures the application\u2019s screens enriched with privacy-relevant information. We demonstrate the efficacy of our approach w.r.t\u00a0\u2026", "num_citations": "6\n", "authors": ["287"]}
{"title": "System, method and apparatus for transparently enabling software applications with adaptive user interfaces\n", "abstract": " A method includes receiving, by a library instrumented into an application executable by a computing device, a message indicating modification (s) that should be performed to user interface component (s) able to be rendered by the application on a display of the computing device. The user interface component (s) are modified to create modified user interface component (s). The modified user interface component (s) are caused to be rendered on the display. Another method includes accessing a description of user interface component (s) for an application executable on a computing device, wherein the user interface component (s) are able to be rendered by the application on a display of the computing device. A developer is allowed to modify information concerning the user interface component (s). Message (s) are formed to allow modification (s) and corresponding user interface component (s) to be\u00a0\u2026", "num_citations": "6\n", "authors": ["287"]}
{"title": "Combining Static Code Analysis and Machine Learning for Automatic Detection of Security Vulnerabilities in Mobile Apps\n", "abstract": " Mobile devices have revolutionized many aspects of our lives. Without realizing it, we often run on them programs that access and transmit private information over the network. Integrity concerns arise when mobile applications use untrusted data as input to security-sensitive computations. Program-analysis tools for integrity and confidentiality enforcement have become a necessity. Static-analysis tools are particularly attractive because they do not require installing and executing the program, and have the potential of never missing any vulnerability. Nevertheless, such tools often have high false-positive rates. In order to reduce the number of false positives, static analysis has to be very precise, but this is in conflict with the analysis' performance and scalability, requiring a more refined model of the application. This chapter proposes Phoenix, a novel solution that combines static analysis with machine learning to\u00a0\u2026", "num_citations": "6\n", "authors": ["287"]}
{"title": "Pinpointing mobile malware using code analysis\n", "abstract": " Mobile malware has recently become an acute problem. Existing solutions either base static reasoning on syntactic properties, such as exception handlers or configuration fields, or compute data-flow reachability over the program, which leads to scalability challenges. We explore a new and complementary category of features, which strikes a middleground between the above two categories. This new category focuses on security-relevant operations (communication, lifecycle, etc) - and in particular, their multiplicity and happens-before order - as a means to distinguish between malicious and benign applications. Computing these features requires semantic, yet lightweight, modeling of the program's behavior. We have created a malware detection system for Android, MASSDROID, that collects traces of security-relevant operations from the call graph via a scalable form of data-flow analysis. These are reduced to\u00a0\u2026", "num_citations": "6\n", "authors": ["287"]}
{"title": "Improving design validation of mobile application user interface implementation\n", "abstract": " During the mobile app development cycle, User-Interface (UI) components rendered by the mobile app are typically validated against high-fidelity mockups by manually comparing screens from a mockup design to screens developed in the app. This validation most often takes the time of the lead designer, resulting in many post-sprint defects and tasks that must be folded into the next sprint iteration. To improve this process, an engineer should be able to validate layout as part of the acceptance criteria for each task submitted, providing a more complete UI, less defects and reduced cost for the app development. We propose a system of improvements for moving this process forward by automatically validating layout. The system is based on techniques from computer vision, in conjunction with style policies, which together facilitate validation of design layout prior to submitting completed task work, thereby reducing\u00a0\u2026", "num_citations": "6\n", "authors": ["287"]}
{"title": "Distributed static analysis of computer software applications\n", "abstract": " A method for distributed static analysis of computer software applications, includes: statically analyzing instructions of a computer software application; identifying at least one entry point in the computer software application; assigning a primary agent to statically analyze the computer software application from the entry point; assigning a secondary agent to statically analyze a call site encountered by the primary agent and produce a static analysis summary of the call site; and presenting results of any of the static analyzes via a computer-controlled output device.", "num_citations": "6\n", "authors": ["287"]}
{"title": "Certifying server side web applications against security vulnerabilities\n", "abstract": " Methods for server security verification include acquiring a public key associated with a received report that includes an indication regarding the presence of a vulnerability for each vulnerability, the report having been generated at a server; decrypting the received report using the public key; determining a level of server-side security based on the decrypted report using a processor; and reconfiguring a browser at the client responsive to the determined level of server-side security.", "num_citations": "6\n", "authors": ["287"]}
{"title": "Static analysis for verification of software program access to secure resources for computer systems\n", "abstract": " Computer program products and apparatus are disclosed. Using a static analysis, a software program is analyzed to determine whether the software program accesses a secure resource for a computer system without verification that the secure resource can be accessed by the software program. In response to an access by the software program to the secure resource without verification that the secure resource can be accessed by the software program, a result is output indicative of the analyzing. An apparatus is disclosed that includes a user interface providing a security report to a user, the security report indicating a result of an analysis of whether or not a software program accesses a secure resource for a computer system without verification that the secure resource can be accessed by the software program.", "num_citations": "6\n", "authors": ["287"]}
{"title": "Label-based taint analysis\n", "abstract": " A computer-implemented method and apparatus, adapted to receive a computer program, and dynamically analyze the computer program to determine flow of untrusted data with respect to a computer resource associated with the computer program. Based on the flow of untrusted data, the method and apparatus determine an abstraction of the computerized resource, and performing static analysis of the computer program with respect to the abstraction, wherein the static analysis is for identifying whether the computer program is susceptible to one or more possible security vulnerabilities.", "num_citations": "6\n", "authors": ["287"]}
{"title": "Determining whether method of computer program is a validator\n", "abstract": " An illegal pattern and a computer program having a method are received. The method has one or more return statements, and a number of basic blocks. The method is normalized so that each return statement of the target method relating to the illegal pattern returns a constant Boolean value. A first path condition and a second path condition for one or more corresponding paths is determined such that one or more corresponding basic blocks return a constant Boolean value of true for the first path condition and a constant Boolean value of false for the second path condition. An unsatisfiability of each path condition is determined using a monadic second-order logic (M2L) technique. Where the unsatisfiability of either path condition is false, the method is reported as not being a validator. Where the unsatisfiability of either path condition is true, the method is reported as being a validator.", "num_citations": "6\n", "authors": ["287"]}
{"title": "Incremental static analysis\n", "abstract": " A system, method and computer program product for incremental static analysis, including a change impact analyzer for identifying a changed portion of a computer software (eg, an application), where the changed portion was changed subsequent to performing a static analysis on the application, a static analysis result invalidator for invalidating any static analysis result that is dependent on the changed portion, and an incremental static analyzer for performing a first incremental static analysis on at least the changed portion, presenting the results of the first incremental static analysis, receiving a request to provide additional information regarding a selected result of the first incremental static analysis, performing, responsive to receiving the request, a second incremental static analysis on any portion of the application to gather the additional information, and presenting results of the second incremental static\u00a0\u2026", "num_citations": "6\n", "authors": ["287"]}
{"title": "SWORD4J: Security WORkbench Development environment 4 Java\n", "abstract": " Creating secure software systems remains a challenge for most developers, even for those who are conscientious about following security best practices. Software development has evolved to incorporate complex software frameworks, middleware and components developed by multiple parties. We have seen the rise of tools for testing the security of applications, including so called\" black box\" testing and\" white box\" testing. Some of these include static analysis technologies, and run-time testing to verify specific security properties, as well as conformance to\" best practices\" The lack of integration of these security tools creates a significant burden on most developers, many of whom lack formal training in secure software development and deployment practices. They are often less motivated to secure their software than security professionals.To address the challenges of creating secure Java applications we created\u00a0\u2026", "num_citations": "6\n", "authors": ["287"]}
{"title": "Reduction-Based Problem Mapping for Quantum Computing\n", "abstract": " In recent years, industry and academia have made tremendous research attempts to implement quantum computing technologies. But quantum computing is still grounded by numerous critical barriers, leading to its low accessibility and practicality. To overcome this problem, we propose an end-to-end framework for mapping computationally hard problems on a quantum computer via reduction.", "num_citations": "5\n", "authors": ["287"]}
{"title": "Efficient circuits for quantum search over 2D square lattice architecture\n", "abstract": " Quantum computing has increasingly drawn interest and investments from the academic, industrial, and governmental research communities worldwide. Among quantum algorithms, Quantum Search is important for its quadratic speedup over its classical-computing counterpart. A key ingredient in its implementation is the Multi-Control Toffoli (MCT) gate, which creates a Boolean product of control variables and XORs it into the target. On an idealized quantum computer, all-to-all connectivity would eliminate the need to use SWAP gates to communicate information. This is, however, not affordable in the current Noisy Intermediate-Scale Quantum (NISQ) computing era. In this work, we discuss how to efficiently implement MCT gates on 2D Square Lattices (2DSL), suitable for superconducting circuits, by taking advantage of relative-phase Toffoli gates and H-tree layouts to drastically reduce resulting circuits' depths\u00a0\u2026", "num_citations": "5\n", "authors": ["287"]}
{"title": "Generating collapsed user interface interaction sequence controls in mobile applications\n", "abstract": " Generating a set of single collapsed user interface interaction sequence controls for an application is provided. A single collapsed user interface interaction control is generated for one or more identified user interface interaction sequences that are collapsible within the application. A customized version of the application is generated for a plurality of users associated with a plurality of registered client devices by inserting each generated single collapsed user interface interaction sequence control into the application.", "num_citations": "5\n", "authors": ["287"]}
{"title": "Static security analysis using a hybrid representation of string values\n", "abstract": " Methods for creating a hybrid string representations include receiving string information as input; parsing the string information to produce one or more string components; determining string components that may be represented concretely by comparing the one or more components to a set of known concretizations; abstracting all string components that could not be represented concretely; and creating a hybrid string representation that includes at least one concrete string component and at least one abstracted string component.", "num_citations": "5\n", "authors": ["287"]}
{"title": "Mitigating security risks via code movement\n", "abstract": " A method includes performing on a computing system a source-to-sink reachability analysis of code of an application. The reachability analysis is performed using a static analysis of the code and determines flows from sources of information to sinks that use the information. The method includes determining scopes for corresponding security sensitive operations using the determined flows, each of the security sensitive operations corresponding to statements in the code and one or more flows. A scope for a security sensitive operation includes a block of statements in the code that correspond to a set of one or more flows ending at a sink. The method includes, for each of one or more selected scopes, moving statements in a corresponding block of statements that are independent of a security sensitive operation in the block to code before or after the block. Apparatus and program products are also disclosed.", "num_citations": "5\n", "authors": ["287"]}
{"title": "Enhanced string analysis that improves accuracy of static analysis\n", "abstract": " A method includes determining, as part of a static analysis of a program, links between functions in the program and performing, as part of the static analysis, string analysis on strings used in the program to determine additional links between the functions in the program. The method further includes outputting, as part of the static analysis, indications of at least the links between the functions and the additional links between the functions. Apparatus, computer programs, and program products are also disclosed.", "num_citations": "5\n", "authors": ["287"]}
{"title": "A unified mathematical model for stack- and role-based authorization systems\n", "abstract": " The purpose of this thesis is to build a mathematical framework for statically representing the execution of software programs and the flow of security information in those programs. This thesis shows how the result of this mathematical analysis can be used to automatically identify security properties of software and evaluate security policies. In particular, this work presents a mathematical model for Stack-Based Access Control (SBAC) systems, such as Java 2, Standard Edition (J2SE) and Microsoft .NET Common Language Runtime (CLR), and for Role-Based Access Control (RBAC) systems, such as Java 2, Enterprise Edition (J2EE) and CLR. The model is based on the mathematical theories of graphs and lattices, and allows static problem detection and security policy evaluation. This thesis proves that this mathematical model is correct and that the algorithms used to build it converge in polynomial time. The\u00a0\u2026", "num_citations": "5\n", "authors": ["287"]}
{"title": "Quantum computations of classical specifications\n", "abstract": " Systems, computer-implemented methods, and computer program products to facilitate quantum domain computation of classical domain specifications are provided. According to an embodiment, a system can comprise a memory that stores computer executable components and a processor that executes the computer executable components stored in the memory. The computer executable components can comprise an input transformation component that can be adapted to receive one or more types of domain-specific input data corresponding to at least one of a plurality of domains. The input transformation component can transform the one or more types of domain-specific input data to quantum-based input data. The computer executable components can further comprise a circuit generator component that, based on the quantum-based input data, can generate a quantum circuit.", "num_citations": "4\n", "authors": ["287"]}
{"title": "SC-Conv: Sparse-complementary convolution for efficient model utilization on CNNs\n", "abstract": " We propose sparse-complementary convolution (SC-Conv) to improve model utilization of convolution neural networks (CNNs). The networks with SC-Conv achieve better accuracy than the regular convolution under similar computations and parameters. The proposed SC-Conv is paired with two deterministic sparse kernels, and one of kernels is complementary to the other one at in either spatial or channel domain or both; the deterministic sparsity increases the computational speed theoretically and practically; furthermore, by having the complementary characteristic, SC-Conv retains the same receptive field to the conventional convolution. This insightful but straightforward SC-Conv reuses of modern network architectures (ResNet and DenseNet), and at the same FLOPs and parameters, SC-Conv improves top-1 classification accuracy on ImageNet by 0.6 points for ResNet-101 and keep the same model\u00a0\u2026", "num_citations": "4\n", "authors": ["287"]}
{"title": "Protecting content displayed on a mobile device\n", "abstract": " (57) ABSTRACT A method, computer program product and system for pro tecting content includes a mobile device screen including a plurality of pixels, whereby each of the plurality of pixels have first Sub-pixel units that include a first viewing angle and second sub-pixel units that include a second viewing angle. Within each of the plurality of pixels, the first Sub-pixel units are adjacent to the second Sub-pixel units. A processing unit is coupled to the mobile device screen and determines a portion of the mobile device screen that displays sensitive content. The processing unit obscures the sensitive content displayed on the portion of the mobile device screen by deactivating the first sub-pixel units at the portion of the mobile device screen that displays the sensi (Continued)", "num_citations": "4\n", "authors": ["287"]}
{"title": "Self-repair and distributed-repair of applications\n", "abstract": " A method is provided to instrument applications with an instrumentation policy that is visually configurable and allows for run-time modifications of the policy. Instrumentation is achieved without modifying the source code of the applications. Modification of the instrumentation policy of an application is applied without re-compiling, re-deploying, and re-provisioning the application. The instrumentation tracks the flow of values at run time throughout the execution of an application and fixes any security violation automatically by dynamically modifying any value that violates integrity or confidentiality.", "num_citations": "4\n", "authors": ["287"]}
{"title": "System, method and apparatus for automatic device registration and secure application activation\n", "abstract": " A method modifies an application program to create an augmented application program by including at least one call and a software library in the application program. The at least one call is to a method that forms part of the library. The method further includes, upon receiving a request from an augmented application program resident on the device, registering and authenticating the augmented application program and sending a policy file to the device that is configured to control use of only the augmented application program. Another method receives at a device an application program augmented to include the at least one call and software library. The method further includes launching the application program and sending a registration and authentication request to a server of an enterprise, and receiving from the server a policy file configured for controlling use by the device of only the registered and\u00a0\u2026", "num_citations": "4\n", "authors": ["287"]}
{"title": "UI X-Ray: Interactive Mobile UI Testing Based on Computer Vision\n", "abstract": " User Interface/eXperience (UI/UX) significantly affects the lifetime of any software program, particularly mobile apps. A bad UX can undermine the success of a mobile app even if that app enables sophisticated capabilities. A good UX, however, needs to be supported of a highly functional and user friendly UI design. In spite of the importance of building mobile apps based on solid UI designs, UI discrepancies---inconsistencies between UI design and implementation---are among the most numerous and expensive defects encountered during testing. This paper presents UI X-Ray, an interactive UI testing system that integrates computer-vision methods to facilitate the correction of UI discrepancies---such as inconsistent positions, sizes and colors of objects and fonts. Using UI X-Ray does not require any programming experience; therefore, UI X-Ray can be used even by non-programmers---particularly designers\u00a0\u2026", "num_citations": "4\n", "authors": ["287"]}
{"title": "System, method, apparatus and computer program for automatic evaluation of user interfaces in software programs\n", "abstract": " A method includes inputting an application program to be tested to a data processing system; linking the application program to a software library; performing, in cooperation with the software library, a static analysis of a user interface of the application program, without executing the application program, to generate a set of static analysis results; performing, in cooperation with the software library, a dynamic analysis of the user interface of the application program while executing the application program to generate a set of dynamic analysis results and, based on the set of static analysis results and the set of dynamic analysis results, a step of determining if the user interface of the application program violates one or more user interface policy rules. Also disclosed is a computer program product that implements the method and a system configured to execute the computer program product in accordance with the method.", "num_citations": "4\n", "authors": ["287"]}
{"title": "Automatic extraction, modeling, and code mapping of application user interface display screens and components\n", "abstract": " Managing user applications is provided. A display screen data package that includes images of user interface display screens of a user application located on a client device and screen position coordinates corresponding to components displayed within the user interface display screens is received from the client device via a network. The display screen data package is parsed to identify each component within each of the user interface display screens. A visual model of user interface display screens of a user application is generated. A runtime policy for each component in a selected set of components within the user interface display screens of the user application is generated based on user interaction with the generated visual model of the user interface display screens. The generated runtime policy for each component in the selected set of components is sent to the client device via the network.", "num_citations": "4\n", "authors": ["287"]}
{"title": "Automatic detection, correction, and visualization of security vulnerabilities in mobile apps\n", "abstract": " Mobile devices have revolutionized many aspects of our lives. We use them as portable computers and, often without realizing it, we run various types of security-sensitive programs on them, such as personal and enterprise email and instant-messaging applications, as well as social, banking, insurance and retail programs. These applications access and transmit over the network numerous pieces of private information. Guaranteeing that such information is not exposed to unauthorized observers is very challenging given the level of complexity that these applications have reached. Furthermore, using program-analysis tools with out-of-the-box configurations in order to detect confidentiality violations may not yield the desired results because only a few pieces of private data, such as the device's ID and geographical location, are obtained from standard sources. The majority of confidentiality sources (such as credit\u00a0\u2026", "num_citations": "4\n", "authors": ["287"]}
{"title": "After-the-Fact Configuration of Static Analysis Tools Able to Reduce User Burden\n", "abstract": " A method includes mapping, based on a first mapping from possible security findings to possible configuration-related sources of imprecision, actual security findings from a static analysis of a program to corresponding configuration-related sources of imprecision, the mapping of the actual security findings creating a second mapping. A user is requested to configure selected ones of the configuration-related sources of imprecision from the second mapping. Responsive to a user updating configuration corresponding to the selected ones of the configuration-related sources of imprecision, security analysis results are updated for the static analysis of the program at least by determining whether one or more security findings from the security analysis results are no longer considered to be vulnerable based on the updated configuration by the user. The updated security analysis results are output. Apparatus and\u00a0\u2026", "num_citations": "4\n", "authors": ["287"]}
{"title": "Differential static program analysis\n", "abstract": " Methods for program analysis include performing a high-level analysis on a program using a processor to generate one or more high-level findings; performing one or more low-level analyses on the program using a processor to generate one or more low-level findings; mapping the one or more low-level findings to the high-level findings to generate a concise combination report that categorizes each finding according to the highest-level analysis that produces the finding.", "num_citations": "4\n", "authors": ["287"]}
{"title": "Security model for actor-based languages and apparatus, methods, and computer programming products using same\n", "abstract": " An application includes: a programming model including a service provider, first components, second components, and sinks communicating via messages. Each of the second components is assigned a unique capability. A given one of the first components routes a message from the given first component to second component (s) and then to a sink. Each of the second component (s) sends the message to the service provider. The service provider creates a token corresponding at least to a received message and a unique capability assigned to an associated one of the second component (s) and sends the token to the associated one of the second component (s). The selected sink receives the message and a token corresponding to each of the second component (s), verifies each received token, and either accepts the message if each of the received tokens is verified or ignores the message if at least one of the\u00a0\u2026", "num_citations": "4\n", "authors": ["287"]}
{"title": "Web crawling using static analysis\n", "abstract": " A crawler including a document retriever configured to retrieve a first computer-based document, a link identifier configured to identify an actual string within the computer-based document as being a hyperlink-type string, and a static analyzer configured to perform static analysis of an operation on a variable within the first computer-based document to identify a possible string value of the variable as being a hyperlink-type string, where any of the strings indicate a location of at least a second computer-based document.", "num_citations": "4\n", "authors": ["287"]}
{"title": "Simplified quantum programming\n", "abstract": " Techniques facilitating simplified quantum programming are provided. In one example, a computer-implemented method comprises reducing, by a device operatively coupled to a processor, a first computing problem of a problem type to a second computing problem of the problem type, wherein the second computing problem is associated with a quantum circuit; facilitating, by the device, execution of the quantum circuit at a quantum computer, resulting in a first output corresponding to the second computing problem; and mapping, by the device, the first output to a second output corresponding to the first computing problem.", "num_citations": "3\n", "authors": ["287"]}
{"title": "Prospective voice user interface modality identification\n", "abstract": " Techniques are disclosed for identifying which graphical user interface (GUI) screens of an application that is under development would benefit from a voice user interface (VUI). A GUI screen parser analyzes to determine the GUI objects within GUI screens of the application. The parser assigns a speechability score to each analyzed GUI screen. Those GUI screens that have a higher speechability score than a predetermined speechability threshold are indicated as GUI screens that would benefit (eg, the user experience in interacting with those GUI screens would increase, the number of GUI screens displayed would be reduced, or the like) with the addition of a VUI.", "num_citations": "3\n", "authors": ["287"]}
{"title": "System, method and apparatus for fine-grained privacy specification and verification\n", "abstract": " A method includes receiving from a user via a user interface an activation of at least one element to set a privacy policy specifying the maximum amount of confidential data that is authorized to be leaked to a sink, tracking movement of confidential data through an application, determining based on the tracked movement of the confidential data that the confidential data is leaked to the sink by the application, comparing the confidential data that is leaked to the sink to the specified maximum amount of confidential data that is authorized to be leaked to the sink, and presenting to the user via the user interface an indication of whether the application complies with the privacy policy set by the user based on the comparison.", "num_citations": "3\n", "authors": ["287"]}
{"title": "Poster: Automatically Solving NP-Complete Problems on a Quantum Computer\n", "abstract": " In recent years, tremendous efforts from both the industrial and the academic research communities have been put into bringing forth quantum computing technologies. With the potential proliferation of universal quantum computers on the horizon, quantum computing, however, is still severely grounded by numerous grave barriers, which lead to its low accessibility and practicality. For example, the vastly different underlying computing models, combined with the steep background knowledge requirements, makes it extremely difficult, if possible at all, for most software engineering researchers and practitioners to even begin to design or implement quantum algorithms or softwares in practice. To overcome this problem, we, in this paper, propose a design that largely circumvents said accessibility and practicality barriers, by providing an end-to-end quantum computing framework for solving NP-complete problems via\u00a0\u2026", "num_citations": "3\n", "authors": ["287"]}
{"title": "Interactive analysis of a security specification\n", "abstract": " Analyzing a security specification. An embodiment can include identifying a downgrader in a computer program under test. Via a processor, testing on the downgrader can be performed in a first level of analysis. Responsive to the downgrader not passing the testing performed in the first level of analysis, a counter example for the downgrader can be automatically synthesized. Further, a test unit can be created for the downgrader using the counter example as an input parameter to the downgrader. The test unit can be executed to perform testing on the downgrader in a second level of analysis. Responsive to the downgrader passing the testing performed in the second level of analysis, a user can be prompted to simplify a model of the downgrader.", "num_citations": "3\n", "authors": ["287"]}
{"title": "Training classifiers for program analysis\n", "abstract": " Methods for training a static security analysis classifier include running an initial security analysis on a training codebase to generate a set of vulnerabilities associated with the training codebase; analyzing the program with a feature set that limits a number of detected vulnerabilities to generate a limited set of vulnerabilities associated with the feature set; comparing the limited set of vulnerabilities to a known vulnerability distribution to generate an accuracy score; and iterating the steps of analyzing and comparing using different feature sets to find a feature set having a highest accuracy score.", "num_citations": "3\n", "authors": ["287"]}
{"title": "Hybrid Program Analysis\n", "abstract": " A hybrid program analysis method includes initiating a static program analysis of an application, generating, by a static program analyzer, a query to a dynamic program analyzer upon determining a code construct of the application requiring dynamic analysis, resolving, by the dynamic program analyzer, the query into a set of arguments with which to invoke the code construct of the application, generating, by the dynamic program analyzer, the set of arguments, invoking, by the dynamic program analyzer, the code construct of the application using set of arguments, answering, by the dynamic program analyzer, the query, and continuing the static program analysis of the application.", "num_citations": "3\n", "authors": ["287"]}
{"title": "Confidence-based static analysis\n", "abstract": " Systems, methods and program products are provided for confidence-based static analysis, including initiating a static analysis of computer software, associating a confidence value with a first element of the static analysis, determining a current state of the static analysis, calculating an adjusted confidence value in accordance with a confidence adjustment function as applied to the current state and the confidence value associated with the first element, associating the adjusted confidence value with a second element of the static analysis resulting from a transition from the first element, and eliminating the second element from the static analysis if the adjusted confidence value meets elimination criteria.", "num_citations": "3\n", "authors": ["287"]}
{"title": "Interprocedural Analysis for Automatic Evaluation of Role-Based Access Control Policies\n", "abstract": " This paper describes an interprocedural-analysis model to represent the flow of security information in systems that have adopted Role-Based Access Control (RBAC). These systems include Java 2, Enterprise Edition (J2EE) and Microsoft .NET Common Language Runtime (CLR). The model allows:1. Identifying the roles required to execute an enterprise application 2. Detecting potential inconsistencies caused by principal-delegation policies, which are used to overwrite the roles assigned to a user 3. Reporting if the roles assigned to a user by a given policy are redundant, which would constitute a violation of the Principle of Least Privilege, or insufficient, which would make the application unstable 4. Evaluating logical expressions of roles 5. Distinguishing intercomponent resource accesses (in which authorization is enforced) from intracomponent resource accesses (in which", "num_citations": "3\n", "authors": ["287"]}
{"title": "Generating mobile test sequences\n", "abstract": " A test sequence generation method, system, and computer program product, include collecting an action sequence, training a recurrent neural network (RNN) model to encode a frequency of actions in the action sequence and determine meaningful action sequences, and applying the RNN model to prioritize the meaningful action sequences that have a frequency less than a predetermined threshold following the action sequence.", "num_citations": "2\n", "authors": ["287"]}
{"title": "Predicting and using utility of script execution in functional web crawling and other crawling\n", "abstract": " A program is executed that includes multiple script functions. For a selected script function, the following are performed during program execution. It is determined whether the selected script function should or should not be executed based on a utility corresponding to the selected script function. The utility was determined prior to determining whether the selected script function should be executed. The selected script function is executed in response to a determination the selected script function should be executed. Execution of the selected script function is skipped in response to a determination the selected script function should not be executed. These techniques may be applied in real-time to crawl a program such as a webpage or may be applied using offline learning followed by a real-time crawling of the program. Apparatus, methods, and program products are disclosed.", "num_citations": "2\n", "authors": ["287"]}
{"title": "Automated voice enablement of applications\n", "abstract": " Techniques are disclosed for generating a voice user interface (VUI) modality within an application that includes graphical user interface (GUI) screens. A GUI screen parser analyzes the GUI screens to determine the various navigational GUI screen paths that are associated with edge objects within multiple GUI screens. Some edge objects are identified as select objects or prompt objects. A natural language processing system generates a select object synonym data structure and a prompt object data structure that may be utilized by a VUI generator to generate VUI data structures that give the application VUI modality.", "num_citations": "2\n", "authors": ["287"]}
{"title": "Monte carlo markov chain based quantum program optimization\n", "abstract": " From a quantum program a first mutant is generated using a processor and a memory, where the first mutant is a randomly-generated transformation of the quantum program. A quality score, a correctness distance, and a probability of acceptance corresponding to the first mutant are computed. An acceptance corresponding to the first mutant is determined according to the probability of acceptance. Upon determining that an acceptance of the first mutant corresponding to the probability of acceptance exceeds an acceptance threshold, the quantum program is replaced with the first mutant. Upon determining that the quality score exceeds a storage threshold and that the correctness distance is zero, the first mutant is stored. These actions are iterated until reaching an iteration limit.", "num_citations": "2\n", "authors": ["287"]}
{"title": "Security enforcement in the presence of dynamic code loading\n", "abstract": " A method (and structure) for enforcing a security policy includes retrieving from a memory a program to be verified against a security policy and a security specification defining the security policy. A static program analysis is performed on the program, using a processor on a computer, to determine whether the program is compatible with the security specification. The program is rejected if the program is determined by the static program analysis as being incompatible with the security specification. If the program is determined during the static program analysis as compatible with the security specification under static analysis criteria, then building a call-graph representation of the program for use to evaluate any dynamically-loaded code during an execution of the program. Any paths, if any, of the call-graph representation that reach at least one policy-relevant operation is marked.", "num_citations": "2\n", "authors": ["287"]}
{"title": "Transparently tracking provenance information in distributed data systems\n", "abstract": " Systems for enabling an application to track provenance include an instrumented application binary on a client device. Overwritten library call instructions provide library calls to one or more instrumented libraries that invoke a provenance layer to track data operations. The provenance layer is configured to catch and log data events performed by the instrumented application.", "num_citations": "2\n", "authors": ["287"]}
{"title": "System, method and apparatus for deriving root cause for software test failure\n", "abstract": " For a program of interest represented as a sequence of states comprising variables and flags wherein controls transition the program from state to state, and wherein the program includes tests at prescribed locations in the program that are applied upon specific states and generate observables, a method includes inserting at different points in the program hooks that capture program runtime behaviors constituting classification features. The method further includes flattening the program states, commands and tests along a program run-time timeline, and identifying a root cause of a program failure by backtrack analyzing a stream of input states and commands and output consequent states, commands and test results to detect causal correlations between variables, states and commands. The step of backtrack analyzing includes determining joint conditional probabilities and identifying candidate failure root causes\u00a0\u2026", "num_citations": "2\n", "authors": ["287"]}
{"title": "Fine-grained user control over usages of sensitive system resources having private data with applications in privacy enforcement\n", "abstract": " A system and method whereby permission is accessed that is to be revoked for an application. The permission involves access to private data of a user via an API of an OS. It is determined, in the application, program point (s) involving access to the private data of the user via the API. For each selected one of the program point (s), code in the application is rewritten to replace a source statement, at the selected program point, that accesses the private data with another statement that allocates a mock object or value based on a type of an actual value returned by the source statement. The mock object or value does not expose the private data of the user. The application with the rewritten code is packaged as an output application able to be subsequently executed by the user, and is output for use by the user.", "num_citations": "2\n", "authors": ["287"]}
{"title": "Machine learning to facilitate incremental static program analysis\n", "abstract": " Techniques for facilitating incremental static program analysis based on machine learning techniques are provided. In one example, a system comprises a feature component that, in response to an update to a computer program, generates feature vector data representing the update, wherein the feature vector data comprises feature data representing a feature of the update derived from an abstract state of the computer program, and wherein the abstract state is based on a mathematical model of the computer program that is generated in response to static program analysis of the computer program. The system can further comprise a machine learning component that employs a classifier algorithm to identify an affected portion of the mathematical model that is affected by the update. The system can further comprise an incremental analysis component that incrementally applies the static program analysis to the\u00a0\u2026", "num_citations": "2\n", "authors": ["287"]}
{"title": "FASE: functionality-aware security enforcement\n", "abstract": " Dynamic information-flow enforcement systems automatically protect applications against confidentiality and integrity threats. Unfortunately, existing solutions cause undesirable side effects, if not crashes, due to unconstrained modification of run-time values (eg anonymizing sensitive identifiers even when these are used for authentication).", "num_citations": "2\n", "authors": ["287"]}
{"title": "Automatic correction of security downgraders\n", "abstract": " Methods and systems for automatic correction of security downgraders. For one or more flows having one or more candidate downgraders, it is determined whether each candidate downgrader protects against all vulnerabilities associated with the candidate downgrader's respective flow. Candidate downgraders that do not protect against all of the associated vulnerabilities are transformed, such that the transformed downgraders do protect against all of the associated vulnerabilities.", "num_citations": "2\n", "authors": ["287"]}
{"title": "Testing web applications for security vulnerabilities with metarequests\n", "abstract": " A method includes instantiating, in response to a request by an executing application, an input data object with one or more uninitialized fields and traversing a path toward a sink in the executing application to a branching point of the executing application. In response to reaching the branching point, one or more parameters are provided for some or all of the one or more uninitialized fields of the input data object, wherein the one or more parameters were determined prior to beginning of execution of the executing application to cause a branch to be taken by the executing application toward the sink. The path is traversed toward the sink at least by following the branch in the executing application. Apparatus and computer program products are also disclosed.", "num_citations": "2\n", "authors": ["287"]}
{"title": "Partitioning of program analyses into sub-analyses using dynamic hints\n", "abstract": " An exemplary apparatus and computer program product are disclosed which employ a method that includes performing a first static analysis to locate elements within a program and instrumenting the program to enable a subsequent dynamic analysis based on the located elements. The method includes executing the instrumented program and performing during execution analysis to determine individual sets of statements in the program affected by a corresponding element. The method includes partitioning the sets of statements into partitions based on one or more considerations, each partition including one or more of the elements. The method includes performing a second static analysis on the partitions of the program to produce results and outputting the results. The method may be performed for, eg, security (eg, taint) analysis, buffer overflow analysis, and typestate analysis.", "num_citations": "2\n", "authors": ["287"]}
{"title": "Differential static program analysis\n", "abstract": " Systems for program analysis include a high-level scanning tool configured to perform a high-level analysis on a program using a processor to generate one or more high-level findings; one or more low-level scanning tools, each configured to perform a low-level analysis on the program using a processor to generate a low-level finding; and a mapping module configured to map the one or more low-level findings to the high-level findings to generate a concise combination report that categorizes each finding according to the highest-level analysis that produces the finding.", "num_citations": "2\n", "authors": ["287"]}
{"title": "Training classifiers for program analysis\n", "abstract": " Classifier training modules and systems are shown that include a memory configured to store a known vulnerability distribution and an initial feature set; and a processor configured to run an initial security analysis on a training codebase to generate a set of vulnerabilities associated with the training codebase, to analyze the program with the feature set to limit a number of detected vulnerabilities to generate a limited set of vulnerabilities associated with the feature set, to compare the limited set of vulnerabilities to the known vulnerability distribution to generate an accuracy score, and to iteratively refine the analysis by updating the feature set to find a feature set having a highest accuracy score.", "num_citations": "2\n", "authors": ["287"]}
{"title": "Integrating security, analytics and application management into the mobile development lifecycle\n", "abstract": " The advent of mobile devices has revolutionized many aspects of the software lifecycle. Unlike Web applications, which delegate most of the business logic to the server and use the client side for the presentation logic, mobile apps are client intensive. Another crucial difference is that the client side of Web applications is typically written using a combination of platform-independent Web languages, whereas most mobile apps have native clients written in platform-specific languages.", "num_citations": "2\n", "authors": ["287"]}
{"title": "Using a heuristically-generated policy to dynamically select string analysis algorithms for client queries\n", "abstract": " A method for dynamically selecting string analysis algorithms can begin with the training of the dynamic string analysis handler of a string analysis module to effectively handle a subset of string queries having contextual metadata received from a client application in an instructional environment. The effectiveness of the training module can be based upon feedback from the client application. Upon completion of the training, a string analysis algorithm selection policy can be synthesized. The string analysis algorithm selection policy can correlate a context of a string query in the subset to the usage of a string analysis algorithm. When in the operational environment, the dynamic string analysis handler can dynamically handle string queries having contextual metadata received from the client application in accordance with the string analysis algorithm selection policy. The string analysis algorithm to be used for a string\u00a0\u2026", "num_citations": "2\n", "authors": ["287"]}
{"title": "Program analysis for security and privacy\n", "abstract": " Software security has become more important than ever. Unfortunately, still now, the security of a software system is almost always retrofitted to an afterthought. When security problems arise, understanding and correcting them can be very challenging. On the one hand, the program analysis research community has created numerous static and dynamic analysis tools for performance optimization and bug detection in object-oriented programs. On the other hand, the security and privacy research community has been looking for solutions to automatically detect security problems, privacy violations, and access-control requirements of object-oriented programs. The purpose of the First Program Analysis for Security and Safety Workshop Discussion (PASSWORD 2006), co-located with the Twentieth European Conference on Object-Oriented Programming (ECOOP 2006), was to bring together members of the\u00a0\u2026", "num_citations": "2\n", "authors": ["287"]}
{"title": "Static evaluation of role-based access control policies in distributed component-based systems\n", "abstract": " Understanding and configuring security requirements for large distributed component-based applications is a complex process. Java 2, Enterprise Edition (J2EE) and Microsoft .NET have adopted a form of Role-Based Access Control (RBAC) for controlling accesses to security-sensitive resources. Access to resources is controlled through \u201csecurity roles\u201d rather than through the user identity. We have found a number of fundamental problems in the way RBAC is often defined and implemented. For instance, in J2EE a user initiating a transaction must have been granted not just the roles necessary to invoke the transaction entry point, but all the roles needed to access each resource traversed by the transaction, taking into account that a J2EE container performs authorization checks only when an access-restricted resource is accessed from another component, and that J2EE allows a \u201cprincipal-delegation policy\u201d to\u00a0\u2026", "num_citations": "2\n", "authors": ["287"]}
{"title": "Internet Security in the Network Computing Framework\n", "abstract": " This redbook provides an overview of the security component of the Network Computing Framework, as well as specific implementation examples to help explain how to build a secure Network Computing Framework application environment. For example, there are scenarios that show how to configure the various components of the Framework to implement a secure NCF three-tier application. In addition, there are examples that show multiple firewall configurations to protect client/server communication while using the IIOP protocol.This redbook also describes the architecture of the new Java 1.2 security model and provides many examples of applications and applets, written in Java 1.2, to show you how you can implement the new security features. It also gets very specific about the security measures offered by Lotus Domino Go Webserver 4.6. 2.2 and IBM WebSphere Application Server 1.0. Several examples are provided to give you a better understanding of the technologies involved.", "num_citations": "2\n", "authors": ["287"]}
{"title": "Quantum circuit compilation with quantum libraries as a service\n", "abstract": " A set of quantum assembly language referencing a quantum algorithm is received from a user. A quantum device is selected to execute the set of quantum assembly language. Responsive to the selected quantum device, an implementation of the quantum algorithm from a remote repository is selected, the remote repository comprising a set of implementations of a set of quantum algorithms. An implementation in the set of implementations in the remote repository is compiled to form a compiled quantum circuit. The compiled quantum circuit is transformed into a quantum circuit model. Using the selected quantum device, the quantum circuit model is executed.", "num_citations": "1\n", "authors": ["287"]}
{"title": "Parallelization of Classical Numerical optimization in Quantum Variational Algorithms\n", "abstract": " Numerical optimization has been extensively used in many real-world applications related to Scientific Computing, Artificial Intelligence and, more recently, Quantum Computing. However, existing optimizers conduct their internal computations sequentially, which affects their performance. We observed a general pattern that enabled us to parallelize such internal computations and achieve significant speedup. We designed a novel parallelization algorithm for optimizers, which consists of pattern detection, prediction, precomputation, and caching. Importantly, our design does not require any change to the optimizers. Instead, it simply modifies the function to be optimized, thereby leading to several engineering advantages, including simplicity, modularity and portability. We implemented this solution and included it in the Qiskit Aqua open-source project. In this paper, we present an evaluation on both standard\u00a0\u2026", "num_citations": "1\n", "authors": ["287"]}
{"title": "Incremental generation of quantum circuits\n", "abstract": " A method includes detecting submission of a first quantum circuit for compilation, the first quantum circuit comprising a first set of quantum logic gates; generating a first gate index, the first gate index comprising an ordered table of a subset of the set of quantum logic gates, each quantum logic gate of the subset of quantum logic gates including a corresponding set of qubits acted on by the quantum logic gate; comparing the first gate index with a second gate index to determine a structural equality of the first quantum circuit and the second quantum circuit; and parameterizing, in response to determining a structural equality of the first quantum circuit and the second quantum circuit, a first set of parameters of a second set of quantum logic gates of the second quantum circuit with a second set of parameters of the first set of quantum logic gates.", "num_citations": "1\n", "authors": ["287"]}
{"title": "Automatic generation of ising hamiltonians for solving optimization problems in quantum computing\n", "abstract": " Configuring a quantum computing system to determine a solution to an optimization problem includes encoding the optimization problem in an encoding language to produce an encoded optimization model. The encoded optimization model is transformed into a unconstrained model. The encoded optimization model includes an objective function having one or more terms. The one or more terms are converted to one or more Pauli terms. An Ising Hamiltonian is generated using the one or more terms. The Ising Hamiltonian corresponds to the optimization problem. An instruction indicative of the Ising Hamiltonian is provided to the quantum computing system.", "num_citations": "1\n", "authors": ["287"]}
{"title": "Extracting mobile application workflow from design files\n", "abstract": " A workflow extraction method, system, and computer program product include analyzing, for each of the design screens, a relatability of one design screen to a previously analyzed design screen in the database and generating a tag that represents a workflow and creating a database linking the tag to a sequence of design screens from a transition graph that details how to move from one of the design screens to another.", "num_citations": "1\n", "authors": ["287"]}
{"title": "Optimizing Quantum Search with a Binomial Version of Grover's Algorithm\n", "abstract": " Amplitude Amplification -- a key component of Grover's Search algorithm -- uses an iterative approach to systematically increase the probability of one or multiple target states. We present novel strategies to enhance the amplification procedure by partitioning the states into classes, whose probabilities are increased at different levels before or during amplification. The partitioning process is based on the binomial distribution. If the classes to which the search target states belong are known in advance, the number of iterations in the Amplitude Amplification algorithm can be drastically reduced compared to the standard version. In the more likely case in which the relevant classes are not known in advance, their selection can be configured at run time, or a random approach can be employed, similar to classical algorithms such as binary search. In particular, we apply this method in the context of our previously introduced Quantum Dictionary pattern, where keys and values are encoded in two separate registers, and the value-encoding method is independent of the type of superposition used in the key register. We consider this type of structure to be the natural setup for search. We confirm the validity of our new approach through experimental results obtained on real quantum hardware, the Honeywell System Model H0 trapped-ion quantum computer.", "num_citations": "1\n", "authors": ["287"]}
{"title": "Fuzz testing for quantum SDK\n", "abstract": " The subject disclosure relates generally to an automated testing tool for quantum software development kits (SDKs). A system in accordance with an embodiment comprises a memory that stores computer-executable components. A processor is operably coupled to the memory and executes the computer-executable components stored in the memory. The computer-executed components comprises: a transformation component that receives a qasm program and transforms the qasm program; a testing component that tests the transformed qasm program on the SDK; and a reporting component that reports whether a quantum SDK has functioned properly or failed for the transformed qasm program.", "num_citations": "1\n", "authors": ["287"]}
{"title": "Identifying computer program security access control violations using static analysis\n", "abstract": " Techniques for identifying computer program security access control violations using static program analysis are provided. In one example, a computer-implemented method comprises generating, by a device operatively coupled to a processor, a mathematical model of a computer program product, wherein the mathematical model defines data flows through nodes of the computer program product that reach a secure node corresponding to a secure resource. The computer implemented method further comprises evaluating, by the device, a security protocol of the computer program product using static program analysis of the mathematical model to determine whether any of the data flows provides access to the secure node without proceeding through one or more security nodes corresponding to the security protocol, wherein the one or more security nodes are included in the nodes of the computer program product.", "num_citations": "1\n", "authors": ["287"]}
{"title": "Multi-control quantum state inversion gate\n", "abstract": " In a quantum circuit, an inversion gate is implemented with two controls each connected to a control qubit. In the quantum circuit responsive to determining that each control of the inversion gate is currently connected to a control qubit, an ancilla gate is implemented, a first control of the ancilla gate connected to a control qubit moved from a first control of the inversion gate, a second control of the ancilla gate connected to a control qubit selected from the set of unplaced control qubits, a target of the ancilla gate connected to the first control of the inversion gate. At a gate implemented in the quantum circuit responsive to determining that the gate has a maximum number of controls not connected to control qubits, a control of the gate is connected to a control qubit selected from the set of unplaced control qubits.", "num_citations": "1\n", "authors": ["287"]}
{"title": "Widget provisioning of user experience analytics and user interface/application management\n", "abstract": " A method includes storing an application in a memory of a mobile device, wherein the application is associated with a widget including an event logger and a library managing the widget, executing, by the mobile device, the application and the widget, receiving, through a user interface of the mobile device, an input corresponding to the event logger of the widget, logging, by the library, the input corresponding to the event logger of the widget in the memory of the mobile device, and reporting, by the library, the input corresponding to the event logger of the widget to a remote monitoring server as monitored data.", "num_citations": "1\n", "authors": ["287"]}
{"title": "Privacy detection of a mobile application program\n", "abstract": " Privacy violation detection of a mobile application program is disclosed. Regular histories of the mobile application are mined. A call-graph representation of the mobile application program can be created and sequences of events of interest according to the platform specification of the mobile application can be collected. A plurality of learnable features are extracted from the regular histories. The plurality of learnable features are combined into a single feature vector which is fed into a machine-learning-based classification algorithm. Whether the mobile application program includes one or more permissions for accessing unauthorized privacy data of a mobile application user is determined based on a machine learning classification of the single feature vector. The collected sequences can be reduced into a plurality of feature vectors which can include at least one of a happens-before feature and a multiplicity of\u00a0\u2026", "num_citations": "1\n", "authors": ["287"]}
{"title": "Providing specialization for static program analysis using coding hints\n", "abstract": " Providing specialization for a static program analysis procedure by executing an automated agent to monitor a code authoring process for a program under examination that includes a plurality of respective lexical scopes. The agent monitors a corresponding amount of coding time, or a corresponding number of edits, for each of the plurality of respective lexical scopes. A mapping associates each of the plurality of respective lexical scopes with a first quantitative measure of the corresponding amount of time, or a second quantitative measure of the corresponding number of edits, that were used to code each of the plurality of respective lexical scopes. The static analysis procedure is specialized by applying a more refined, detailed, precise, or granular analysis to a first lexical scope that is mapped to a greater amount of time or a greater number of edits than a second lexical scope.", "num_citations": "1\n", "authors": ["287"]}
{"title": "Stochastic Optimization of Quantum Programs\n", "abstract": " We introduce Markov chain Monte Carlo quantum (MCMCQ), a novel compiler-level optimization of quantum programs that accounts for the emerging quantum programming mode. MCMCQ is the first systematic approach for stochastic quantum-program optimization, targeting program performance, correctness, and noise tolerance. An evaluation of MCMCQ over 500 quantum programs confirms its effectiveness.", "num_citations": "1\n", "authors": ["287"]}
{"title": "Social and proximity based access control for mobile applications\n", "abstract": " Methods and systems for proximity-based access control include determining whether a distance from a first mobile device to each of one or more safe mobile devices falls below a threshold distance; determining whether a number of safe mobile devices within the threshold distance exceeds a safe gathering threshold with a processor; and activating a safe gathering policy in accordance with the safe gathering threshold that decreases a security level in the first mobile device.", "num_citations": "1\n", "authors": ["287"]}
{"title": "Mapping of software code via user interface summarization\n", "abstract": " Techniques for identifying similar software code are provided. In one example, a computer-implemented method comprises: based on detection of an input, determining, by a device operatively coupled to a processor, a user interface functionality associated with a website; and based on a likelihood that the user interface functionality and a result of a query have a defined level of correlation, matching, by the device, the result of the query to the user interface functionality. The computer-implemented method can further comprise mapping, by the device, a vector associated with the website, to an integer value, employing a hash function.", "num_citations": "1\n", "authors": ["287"]}
{"title": "Privacy-preserving user-experience monitoring\n", "abstract": " A method of operating a mobile device includes displaying a user interface as an image, the user interface being composed of a plurality of widgets, storing a privacy policy identifying at least one of the widgets, capturing a screenshot image corresponding to the screenshot image, excluding the at least one of the widgets from the screenshot image to create a modified screenshot image, and transmitting the modified screenshot image over a network to a monitoring server.", "num_citations": "1\n", "authors": ["287"]}
{"title": "Reducing Hazards During Mobile Device Use\n", "abstract": " Techniques for reducing hazards associated with mobile device use are provided. In one aspect, a method for increasing user awareness during mobile device use is provided. The method includes the steps of: detecting, by the mobile device, walking motion of the user; and if the mobile device is displaying information to the user, shifting attention of the user away from the mobile device towards a surrounding environment.", "num_citations": "1\n", "authors": ["287"]}
{"title": "Static security analysis using a hybrid representation of string values\n", "abstract": " Systems for constructing hybrid string representations include a string parser configured to parse received string information to produce one or more string components, a database configured to store a set of known concretizations, and a processor configured to compare the one or more string components to the set of known concretizations to determine string components that may be represented concretely, to abstract all string components that could not be represented concretely, and to create a hybrid string representation that includes at least one concrete string component and at least one abstracted string component.", "num_citations": "1\n", "authors": ["287"]}
{"title": "A framework for automatic anomaly detection in mobile applications\n", "abstract": " It is standard practice in enterprises to analyze large amounts of logs to detect software failures and malicious behaviors. Mobile applications pose a major challenge to centralized monitoring as network and storage limitations prevent fine-grained logs to be stored and transferred for off-line analysis. In this paper we introduce EMMA, a framework for automatic anomaly detection that enables security analysis as well as in-the-field quality assurance for enterprise mobile applications, and incurs minimal overhead for data exchange with a back-end monitoring platform. EMMA instruments binary applications with a lightweight anomaly-detection layer that reveals failures and security threats directly on mobile devices, thus enabling corrective measures to be taken promptly even when the device is disconnected. In our empirical evaluation, EMMA detected failures in unmodified Android mobile applications.", "num_citations": "1\n", "authors": ["287"]}
{"title": "Enhanced string analysis that improves accuracy of static analysis\n", "abstract": " An apparatus and computer program product which are configured for determining, as part of a static analysis of a program, links between functions in the program and performing, as part of the static analysis, string analysis on strings used in the program to determine additional links between the functions in the program. The apparatus and computer program product are further configured for outputting, as part of the static analysis, indications of at least the links between the functions and the additional links between the functions.", "num_citations": "1\n", "authors": ["287"]}
{"title": "System, method, apparatus and computer programs for securely using public services for private or enterprise purposes\n", "abstract": " A method, system, apparatus and computer programs are disclosed to process content for an enterprise. The method includes reviewing, using at least one enterprise policy, content that is to be sent through a data communications network to a public service to determine if the content comprises secure data and, in response to identifying secure data, modifying the content to be sent to the public service such that a presence of secure data will be visually imperceptible when the content is rendered at the public service. The step of modifying can include steganographically embedding the secure data or a link to the secure data in a container such as image data.", "num_citations": "1\n", "authors": ["287"]}
{"title": "Program Analysis for Mobile Application Integrity and Privacy Enforcement\n", "abstract": " Program analysis has become an essential tool to verify the correctness of programs before these are deployed to end users' computers and devices. Detecting security problems in today's mobile applications by just relying on manual code inspection is unrealistic. Testing is also limited because there is often no guarantee that all the possible paths of execution of an application are tested under all the possible inputs, and so false negatives may arise. Static analysis is a very promising solution but suffers from the dual problem of false positives. A combination of static and dynamic analysis mitigates the disadvantages that arise when static and dynamic analysis are executed individually and is, therefore, the recommended solution to detect and correct application-level cyber security attacks in mobile applications. This tutorial presents both static and dynamic analysis approaches to enforce privacy of mobile\u00a0\u2026", "num_citations": "1\n", "authors": ["287"]}
{"title": "Progressive static security analysis\n", "abstract": " A disclosed method includes determining modifications have been made to a program and deriving data flow seeds that are affected by the modifications. The method includes selecting one of the data flow seeds that are affected by the modifications or data flow seeds that are not affected by the modifications but that are part of flows that are affected by the modifications and performing a security analysis on the program. The security analysis includes tracking flows emanating from the selected data flow seeds to sinks terminating the flows. The method includes outputting results of the security analysis. The results comprise one or more indications of security status for one or more of the flows emanating from the selected data flow seeds. At least the deriving, selecting, and performing are performed using a static analysis of the program. Apparatus and program products are also disclosed.", "num_citations": "1\n", "authors": ["287"]}
{"title": "Application-and user-sensitive privacy enforcement in mobile systems\n", "abstract": " The mobile era is marked by exciting opportunities for utilization of contextual information in computing. Applications from different categories-including commercial and enterprise email, instant messaging, social, banking, insurance and retail-access, process and transmit over the network numerous pieces of sensitive information, such as the user's geographical location, device ID, contacts, calendar events, passwords, and health records, as well as credit-card, social-security, and bank-account numbers. Understanding and managing how an application handles private data is a significant challenge. There are not only multiple sources of such data (including primarily social accounts, user inputs and platform libraries), but also different release targets (such as advertising companies and application servers) and different forms of release (for example, passwords transmitted in the clear, hashed or encrypted). To\u00a0\u2026", "num_citations": "1\n", "authors": ["287"]}
{"title": "Anomaly detection at the level of run time data structures\n", "abstract": " A useful embodiment of the invention is directed to a method associated with a computer program comprising one or more basic blocks, wherein the program defines and uses multiple data structures, such as the list of all customers of a bank along with their account information. The method includes identifying one or more invariants, wherein each invariant is associated with one of the data structures. The method further includes determining at specified times whether an invariant has been violated. Responsive to detecting a violation of one of the invariants, the detected violation is flagged as an anomaly.", "num_citations": "1\n", "authors": ["287"]}
{"title": "Identification of read/write chains during static analysis of computer software\n", "abstract": " A system for identifying read/write chains in computer software, including a static analysis engine identifying within computer software logical container accesses, a string analyzer configured to at least partly resolve any variables identifying the logical container in any of the accesses by determining a set of potential values of any of the variables, and a Logical Container Access Virtualization component (LCAV) configured to identify the type and scope of any permutations of the accesses, where each of the permutations is defined by substituting any of the potential values for any of the access variables, and identify any read/write chains within the computer software by matching any of the access permutations that read from the logical container with any of the access permutations that write to the logical container if there is an intersection between the scopes of the read and write access permutations.", "num_citations": "1\n", "authors": ["287"]}
{"title": "IBM WebSphere Performance Pack: Web Content Management with IBM AFS Enterprise File System\n", "abstract": " IBM WebSphere Performance Pack is Web infrastructure software that addresses the scalability, reliability, and performance needs of e-business applications in both local and geographically distributed environments. Its functions incorporate leading-edge and robust caching, file management, and load balancing, which together compensate for the inherent weakness of the Internet to support critical business applications and expectations.This redbook will give you a clear understanding of the features of IBM AFS Enterprise File System, the File Sharing component of IBM WebSphere Performance Pack. It shows how to plan for, install, configure, use, tune and troubleshoot this component and offers specific implementation examples. Moreover, it helps explain how to build complex scenarios that involve all the components of IBM WebSphere Performance Pack, to give you a better understanding of the technologies involved.", "num_citations": "1\n", "authors": ["287"]}
{"title": "IBM WebSphere Performance Pack: Caching and Filtering with IBM Web Traffic Express\n", "abstract": " IBM WebSphere Performance Pack is Web infrastructure software that addresses the scalability, reliability and performance needs of e-business applications in both local and geographically distributed environments. Its functions incorporate leading-edge and robust caching, file management and load balancing, that together compensate for the inherent weakness of the Internet to support critical business applications and expectations.This redbook will give you a clear understanding of the features of IBM Web Traffic Express, the Caching and Filtering component of IBM WebSphere Performance Pack. It shows how to plan for, install, configure, use, tune and troubleshoot each component and offers specific implementation examples. Moreover, it helps explain how to build complex scenarios that involve all the components of IBM WebSphere Performance Pack, to give you a better understanding of the technologies involved.", "num_citations": "1\n", "authors": ["287"]}
{"title": "IBM WebSphere Performance Pack Usage and Administration\n", "abstract": " IBM WebSphere Performance Pack is Web infrastructure software that addresses the scaleability, reliability and performance needs of e-business applications in both local and geographically distributed environments. Its functions incorporate leading-edge and robust caching, file management and load balancing, that together compensate for the inherent weakness of the Internet to support critical business applications and expectations.This redbook will give you a clear understanding of the features of IBM WebSphere Performance Pack. It shows how to plan for, install, configure, use, tune and troubleshoot each component and offers specific implementation examples. It helps explain how to build complex scenarios that involve all the components of IBM WebSphere Performance Pack, to give you a better understanding of the technologies involved.", "num_citations": "1\n", "authors": ["287"]}
{"title": "Understanding Java\u2122 2 Platform Security Permissions\u2014A Practical Approach\n", "abstract": " Learn about the authorization features in the Java\u2122 2 Platform, Standard Edition (J2SE\u2122) security model Specifically, focus on the permission/authorization model and the Permission API See a prototype tool which demonstrates an automated technique for determining which Permissions are required by a Java technology-based program", "num_citations": "1\n", "authors": ["287"]}