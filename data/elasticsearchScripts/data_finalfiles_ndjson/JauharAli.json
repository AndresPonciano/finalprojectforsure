{"title": "Converting statecharts into Java code\n", "abstract": " This paper presents an implementation model to convert statecharts, representing the behavior of multistate classes in a system, into executable code in an object-oriented language like Java. The concept of a helper object is introduced which handles all the statespecific requests forwarded to it by the multi-state domain object. A new helper object replaces the old one, whenever the state of the domain object changes. The proposed model follows the object variant of statecharts supported by the Unified Modeling Language (UML). Our model can work as a basis for automatic code generation for object-oriented systems.", "num_citations": "44\n", "authors": ["950"]}
{"title": "Implementing the dynamic behavior represented as multiple state diagrams and activity diagrams\n", "abstract": " A system is introduced which automatically generates implementation code from the object and dynamic models of an application. We found that the behavior of active objects can well be represented by activity diagrams rather than state diagrams. The paper first explains our approach to convert state diagrams as well as activity diagrams into implementation code. The paper then describes our system, dCode, which automatically generates executable Java code from the object diagram, state diagrams and activity diagrams of an application. The paper also presents the results of the experiment in which the code generated by dCode was compared to that of Rhapsody.", "num_citations": "32\n", "authors": ["950"]}
{"title": "An Object Oriented Approach to Generate Executable Code from the OMT-based Dynamic Model\n", "abstract": " The Dynamic model, which is the most important model after the object model in Object Modeling Technique (OMT), represents the dynamic behavior of a system. This paper describes a new method to convert the dynamic model, represented as a state diagram, into e cient and compact executable code. In our approach, each operational state of a multi-state class is given the status of an object, which encapsulates all the transitions and actions of the state. The events that have transitions from the state become methods in the class for that state. States and transitions are thus made explicit without using any if or case statement, which leads to a compact and easy to understand implementation code. State hierarchy is implemented by inheritance and concurrent states are implemented by using the concept of object composition. The method has been successfully implemented in our automatic code generating system, O-Code, which generates executable Java code after reading the speci cations of the dynamic model. First the system transforms the state diagram representing the dynamic model into a table and then it generates actual code from the table. After comparing with Rhapsody, we have found that the code generated by O-Code is approximately 30% more e cient and ve times more compact than that of Rhapsody.", "num_citations": "23\n", "authors": ["950"]}
{"title": "Cognitive support through visualization and focus specification for understanding large class libraries\n", "abstract": " Effective object-oriented (OO) programming requires understanding class libraries. This paper presents our approach to design and build a cognitive tool that supports a programmer to understand OO class libraries. The MUDRIK system provides (1) three-dimensional visualization mechanisms for representing class structures and relationships from a variety of views and (2) flexible focus specification mechanisms that allow users to adapt a space of components to be displayed according to the task at hand. Interactive views of MUDRIK enable programmers to examine components\u2019 detail while maintaining a global representation of the rest of the library. The paper describes why understanding class library is critical in OO programming, presents a cognitive framework of our approach and design rationale behind the system design, and provides a detailed description of the system followed by a discussion on our\u00a0\u2026", "num_citations": "15\n", "authors": ["950"]}
{"title": "Automatic code generation from the omt-based dynamic model\n", "abstract": " The OMT object-oriented software development methodology suggests creating three models of the system, ie, object model, dynamic model and functional model. We have developed a system that automatically generates implementation code from the dynamic model. The system first represents the dynamic model as a table and then generates executable Java language code from it. We used inheritance for super-substate relationships. We considered that transitions relate to states in a state diagram exactly as operations relate to classes in an object diagram. In the generated code, each state in the state diagram becomes a class and each event on a state becomes an operation on the corresponding class. The system is implemented and can generate executable code for any state diagram. This makes the role of the dynamic model more significant and the job of designers even simpler.", "num_citations": "12\n", "authors": ["950"]}
{"title": "Generating executable code from the dynamic model of omt with concurrency\n", "abstract": " Dynamic model is one of the three basic models of Object Modeling Technique (OMT). It is represented by a set of state transition diagrams showing the behavior of a system. This paper introduces a new method to implement a state diagram in an object oriented language. In our approach, states are represented as classes and transitions as their operations. Inheritance is used to implement common transitions and aggregation is used to implement concurrent states. A system has also been developed that successfully implements the method. The system reads the specifications of the dynamic model of a system and generates executable Java code.", "num_citations": "10\n", "authors": ["950"]}
{"title": "Using classification techniques to predict gold price movement\n", "abstract": " In our day to day life, predictability of gold's price is significant in many domains such as economics, trading, investment, and financial and political environments. Better investment decision could be made when gold price values are accurately predicted. The main objective of this research is to forecasts whether the price of gold will rise or decline in the near future. Decision Tree, Support Vector Machine (SVM), K-Nearest Neighbor (KNN), and Linear Regression are all different classification algorithms that have been used in this paper to predict the gold price movement direction. The performance of each of these algorithms has been investigated while using the Rapidminer software.", "num_citations": "9\n", "authors": ["950"]}
{"title": "Implementation of the Dynamic Behavior of Object Oriented System\n", "abstract": " Object oriented methodologies such as Object Modeling Technique (OMT), suggest to create different models of a system indicative of its static structure and dynamic behavior. Converting the static structure (usually represented as an ER-style diagram) into implementation code is already much understood. On the contrary, implementing the dynamic behavior is rather less understood and is considered as a difficult job.A method is proposed here to implement the dynamic behavior of a system in an object oriented programming language like Java. To implement the dynamic behavior, we suggest the classification of objects on the basis of three criteria: multi-state/uni-state objects, passive/active objects and permanent/temporary objects. Implementation of intra-object concurrency as well as multiple-thread concurrency has been addressed. We use the inheritance mechanism to implement the supersubstate relationship in statecharts, which represent the behavior of multi-state classes. States become classes and their transitions become operations in the corresponding classes. Orthogonal components in statecharts, which become active simultaneously, are implemented by the concept of object composition. Active objects represented by activity diagrams are implemented as Java threads. The method can serve as a basis for automatic code generation.", "num_citations": "9\n", "authors": ["950"]}
{"title": "An automatic layout system for omt-based object diagram\n", "abstract": " In this paper, we propose an automatic layout method for the object diagram, the event trace diagram and the state diagram based on OMT (Object Modeling Technique) methodology. In our automatic layout system, when the elements of model (classes, associations etc.) are entered, an arrangement for them is computed, and the object model automatically appears in the editors window. We adopted Messingers algorithm using the rule of divide-and-conquer for the layout algorithm of the object diagram. Furthermore, diagrams can be maintained easily with the capabilities of automatic modification and direct manipulation interface.", "num_citations": "8\n", "authors": ["950"]}
{"title": "Automatic animation from the requirement specification based on object modelig technique\n", "abstract": " CiNii \u8ad6\u6587 - Automatic animation from the requirement specification based on object modelig technique CiNii \u56fd\u7acb\u60c5\u5831\u5b66\u7814\u7a76\u6240 \u5b66\u8853\u60c5\u5831\u30ca\u30d3\u30b2\u30fc\u30bf[\u30b5\u30a4\u30cb\u30a3] \u65e5\u672c\u306e\u8ad6\u6587\u3092\u3055\u304c\u3059 \u5927\u5b66 \u56f3\u66f8\u9928\u306e\u672c\u3092\u3055\u304c\u3059 \u65e5\u672c\u306e\u535a\u58eb\u8ad6\u6587\u3092\u3055\u304c\u3059 \u65b0\u898f\u767b\u9332 \u30ed\u30b0\u30a4\u30f3 English \u691c\u7d22 \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u9589\u3058\u308b \u30bf\u30a4\u30c8\u30eb \u8457\u8005\u540d \u8457\u8005ID \u8457\u8005\u6240\u5c5e \u520a\u884c\u7269\u540d ISSN \u5dfb\u53f7\u30da\u30fc\u30b8 \u51fa\u7248\u8005 \u53c2\u8003 \u6587\u732e \u51fa\u7248\u5e74 \u5e74\u304b\u3089 \u5e74\u307e\u3067 \u691c\u7d22 \u691c\u7d22 \u691c\u7d22 CiNii\u306e\u30b5\u30fc\u30d3\u30b9\u306b\u95a2\u3059\u308b\u30a2\u30f3\u30b1\u30fc\u30c8\u3092\u5b9f\u65bd\u4e2d\u3067\u3059\uff0811/11(\u6c34 )-12/23(\u6c34)\uff09 CiNii Research\u30d7\u30ec\u7248\u306e\u516c\u958b\u306b\u3064\u3044\u3066 Automatic animation from the requirement specification based on object modelig technique JOUNG S. \u88ab\u5f15\u7528\u6587\u732e: 1\u4ef6 \u8457\u8005 JOUNG S. \u53ce\u9332\u520a\u884c\u7269 Proc. International Symposium on Future Software Technology (ISFST-97) Proc. International Symposium on Future Software Technology (ISFST-97), 133-139, 1997 \u88ab\u5f15\u7528\u6587\u732e : 1\u4ef6\u4e2d 1-1\u4ef6\u3092 \u8868\u793a 1 \u7a7a\u9593\u30d1\u30fc\u30b5\u306b\u304a\u3051\u308b\u6728\u69cb\u9020\u30ec\u30a4\u30a2\u30a6\u30c8\u5236\u7d04\u306e\u5b9f\u73fe\u3068\u305d\u306e\u8a55\u4fa1 \u4e01 \u932b\u6cf0 , \u7530\u4e2d \u2026", "num_citations": "7\n", "authors": ["950"]}
{"title": "Predicting academic performance of students in uae using data mining techniques\n", "abstract": " In this paper, we implemented an approach to predict final exam scores from early course assessments of the students during the semester. We used a linear regression model to check which part of the evaluation of the course assessment affects final exam score the most. In addition, we explained the origins of data mining and data mining in education. After preprocessing and preparing data for the task in hand, we implemented the linear regression model. The results of our work show that quizzes are most accurate predictors of final exam scores compared to other kinds of assessments.", "num_citations": "6\n", "authors": ["950"]}
{"title": "Object visualization support for learning data structures\n", "abstract": " In this study, we design and implement a visualization tool that makes it easier tor students to learn object-oriented data structures and related design patterns. A data structure is a core course in almost all Computing programs. The majority of textbooks and courses on data structures these days are based on Object-Oriented Programming(OOP). In many cases, they base their pedagogy on software design patterns. However, because of heavy reliance on abstraction, they place greater demands on learners. Our tool allows students to see and interact with a visual representation of object structures and patterns used in their programs.", "num_citations": "4\n", "authors": ["950"]}
{"title": "Implementing statecharts using Java enums\n", "abstract": " Statechart, which is one of the important diagrams in Unified Modeling Language (UML), represents reactive behavior of a class of objects. Implementing statecharts has been difficult for programmers because the commonly used object-oriented programming languages do not support statecharts at the language level. In this study, we present a new approach to implement statecharts using Java enums. Each state is represented as an enum-value. The whole statechart behavior is encapsulated within the Statechart class. This class is nested inside the owner class of the statechart. The resulting code is object-oriented, efficient and well-structured.", "num_citations": "4\n", "authors": ["950"]}
{"title": "Medical Management of Cesarean Scar Pregnancy at Latifa Hospital Dubai Health Authority, Dubai, UAE\n", "abstract": " Introduction: Cesarean scar pregnancy (CSP) is defined as implantation of gestational sac at the site of cesarean scar. It\u2019s a serious diagnosis that has become more prevalent in recent years and related to the increasing rate of cesarean sections reported worldwide. Identifying these cases and treating them is challenging, with no agreed upon universal protocol for successful treatment. We aim to evaluate the success rate and outcome of medical management for Cesarean scar pregnancy. Methods: It was a retrospective descriptive study of all cesarean scar pregnancies managed at fetal medicine unit at Latifa Hospital in Dubai, UAE the main obstetrics & Gynecology tertiary hospital in Dubai Emirate, UAE from 2015 to 2017. Certainly, a set of diagnostic criteria were implemented to confirm the diagnosis of CSP. The cases were then offered our proposed management which is systemic methotrexate injections \u00b1 KCL. Follow up made by serial \u03b2hcg and ultrasound scan. The data were collected used specified data collection sheet for this purpose then analyzed and presented using statistical package for social sciences (SPSS) version 26. Results: 33 cases of cesarean scar pregnancies are confirmed and medically managed during the study period. The study subjects composed of a group of patients who had a viable CSP and received local KCL injection + systemic methotrexate, a second group who had non-viable CSP and received systemic methotrexate 20 cases were viable pregnancies who received combined local potassium chloride plus systemic methotrexate, and 13 were non-viable received systemic methotrexate only. The mean\u00a0\u2026", "num_citations": "2\n", "authors": ["950"]}
{"title": "Using Data Mining Techniques on World Bank Statistics\n", "abstract": " The aim of this research paper is to recognize patterns and relationships in the data collected from World Bank Statistics using the \u201cCorrelation\u201d data mining technique and the \u201cCorrelation Matrix\u201d. The data used spans from the Year 2000-2005 and includes numerous countries of the world. It comprises of data related to the international economic and health statistics. The software Rapid Miner is used in order to analyze and evaluate the data. This paper aims to discover underlying patterns related to various attributes that are difficult to detect or predict.", "num_citations": "1\n", "authors": ["950"]}
{"title": "Analyzing the Effect of Currency Strength Changes on their Future Price Movement\n", "abstract": " We consider the problem of predicting direction of movement of popular currencies in the foreign exchange (Forex) market. Technical analysis is an analysis methodology for forecasting the direction of prices through the study of past market data. A currency strength indicator is a metric showing the relative strength of currencies over a period of time. In this study, we analyzed the performance of a strength indicator in a different way. Based on the change in strength, we opened a basket of virtual trades and measured their profitability. Several tests have been performed and they show consistent profits. The results are encouraging and a profitable forex trading system can be made by only considering strength changes in currencies.", "num_citations": "1\n", "authors": ["950"]}
{"title": "A visualization tool for Data Structures course\n", "abstract": " Data structures is a core course in almost all computer science programs. Textbooks and courses on data structures these days are programming-languages-based with those based on object-oriented programming (OOP) in dominance. In many cases, they base their pedagogy on software design patterns. However, because of heavy reliance on abstraction, they place greater demands on learners. In this study, we design and implement a visualization tool that makes it easier for students to understand object-oriented data structures.", "num_citations": "1\n", "authors": ["950"]}
{"title": "Automatic Code generation for Object Oriented Models\n", "abstract": " \u672c\u8ad6\u6587\u3067\u306f, \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u65b9\u6cd5\u8ad6 (Object Mode1ing Technique1OMT) \u306b\u304a\u3051\u308b\u52d5\u7684\u30e2\u30c7\u30eb\u304b\u3089\u5b9f\u884c\u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3092\u884c\u3046\u305f\u3081\u306e\u65b0\u3057\u3044\u624b\u6cd5\u3084\u305d\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u8ff0\u3079\u3066\u3044\u308b. \u672c\u8ad6\u6587\u3067\u63d0\u6848\u3055\u308c\u305f\u624b\u6cd5\u3067\u306f, \u72b6\u614b\u9077\u79fb\u56f3\u306b\u304a\u3051\u308b\u72b6\u614b\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u6271\u3063\u3066\u3044\u308b. \u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f, \u72b6\u614b\u306e\u5168\u3066\u306e\u9077\u79fb\u3068\u52d5\u4f5c\u3092\u30ab\u30d7\u30bb\u30eb\u5316\u3057\u305f\u3082\u306e\u3067\u3042\u308b. \u9077\u79fb\u306f\u72b6\u614b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u3068\u306a\u3063\u3066\u3044\u308b. OR \u30bf\u30a4\u30d7\u306e\u72b6\u614b\u968e\u5c64\u306f\u7d99\u627f\u306b\u3088\u3063\u3066, AND \u30bf\u30a4\u30d7\u306e\u72b6\u614b\u968e\u5c64\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b3\u30f3\u30dd\u30b8\u30b7\u30e7\u30f3\u306e\u6982\u5ff5\u3092\u7528\u3044\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b. \u5b9f\u88c5\u30b3\u30fc\u30c9\u306f\u30a4\u30d9\u30f3\u30c8\u3092\u64cd\u4f5c\u547c\u3073\u51fa\u3057\u306b\u7f6e\u304d\u63db\u3048\u3066\u3044\u308b 6 \u9069\u5207\u306a\u30e1\u30bd\u30c3\u30c9\u306f\u30dd\u30ea\u30e2\u30d5\u30a3\u30ba\u30e0\u306b\u57fa\u3065\u3044\u3066\u9078\u3070\u308c\u308b. \u9077\u79fb\u30b3\u30fc\u30c9\u306f\u5bfe\u5fdc\u3059\u308b\u72b6\u614b\u30af\u30e9\u30b9\u5185\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u3066\u3044\u308b. \u305d\u308c\u3067, \u5168\u3066\u306e\u72b6\u614b\u3084\u9077\u79fb\u306f\u6761\u4ef6\u6587\u3092\u4f7f\u3046\u3053\u3068\u306a\u3057\u306b\u660e\u793a\u7684\u306b\u306a\u3063\u3066\u3044\u308b.\u672c\u8ad6\u6587\u3067\u63d0\u6848\u3055\u308c\u305f\u65b9\u6cd5\u3067\u306f, \u52d5\u7684\u30e2\u30c7\u30eb\u306b\u304a\u3051\u308b\u5e7e\u3064\u304b\u306e\u72b6\u614b\u56f3\u3092\u540c\u6642\u306b\u6271\u3046\u3053\u3068\u3084\u5236\u5fa1\u3092\u6301\u3063\u305f\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b. \u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u632f\u308b\u821e\u3044\u306f, \u30a2\u30af\u30c6\u30a3\u30d3\u30c6\u30a3\u56f3\u306b\u3088\u3063\u3066\u8868\u73fe\u3055\u308c, Java \u30b9\u30ec\u30c3\u30c9\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b. \u672c\u8ad6\u6587\u3067\u306f, \u63d0\u6848\u3055\u308c\u305f\u624b\u6cd5\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u3082\u8ff0\u3079\u3066\u3044\u308b. \u52d5\u7684\u30e2\u30c7\u30eb\u306e\u4ed5\u69d8\u304b\u3089\u5b9f\u884c\u53ef\u80fd\u306a Java \u30b3\u30fc\u30c9\u3092\u751f\u6210\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3068\u3057\u3066 O-Code \u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b. O-Code \u306f, \u307e\u305a\u52d5\u7684\u30e2\u30c7\u30eb\u3092\u8868\u73fe\u3057\u305f\u72b6\u614b\u56f3\u304b\u3089\u8868\u3092\u4f5c\u6210\u3057, \u305d\u306e\u8868\u304b\u3089 Java \u30b3\u30fc\u30c9\u3092\u751f\u6210\u3059\u308b. \u3053\u306e\u5206\u91ce\u3067\u4ee3\u8868\u7684\u306a\u30b7\u30b9\u30c6\u30e0\u3068\u3057\u3066\u30a4\u30b9\u30e9\u30a8\u30eb\u306e Weizmam Institute of Sci-ence \u306e Hare1 \u3089\u306b\u3088\u308a\u958b\u767a\u3055\u308c\u305f Rhapsody \u3068\u3044\u3046\u30b7\u30b9\u30c6\u30e0\u304c\u826f\u304f\u77e5\u3089\u308c\u3066\u3044\u308b. O-Code \u3092 Rhapsody \u3068\u6bd4\u8f03\u3057\u305f\u5834\u5408, O-Code \u306e\u65b9\u304c\u5b9f\u884c\u901f\u5ea6\u3084\u751f\u6210\u3055\u308c\u308b\u30b3\u30fc\u30c9\u306e\u91cf\u306b\u304a\u3044\u3066\u52b9\u679c\u7684\u3067\u3042\u308b\u3053\u3068\u304c\u793a\u3055\u308c\u3066\u3044\u308b.", "num_citations": "1\n", "authors": ["950"]}