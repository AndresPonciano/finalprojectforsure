{"title": "\u57fa\u4e8e\u590d\u6742\u7f51\u7edc\u7684\u8f6f\u4ef6\u590d\u6742\u6027\u5ea6\u91cf\u7814\u7a76\n", "abstract": " \u8f6f\u4ef6\u5f00\u53d1\u8005\u5bf9\u4e8e\u65e5\u8d8b\u590d\u6742\u7684\u8f6f\u4ef6\u7cfb\u7edf\u7684\u7406\u89e3\u548c\u63a7\u5236\u8d8a\u6765\u8d8a\u56f0\u96be, \u4f20\u7edf\u8f6f\u4ef6\u5de5\u7a0b\u6b63\u63a5\u8fd1\u5176\u590d\u6742\u6027\u548c\u53ef\u6269\u5c55\u6027\u7684\u6781\u9650. \u590d\u6742\u6027\u4f7f\u8f6f\u4ef6\u5f00\u53d1\u56f0\u96be, \u8d28\u91cf\u96be\u4ee5\u4fdd\u8bc1. \u590d\u6742\u7f51\u7edc\u7406\u8bba\u7684\u6700\u65b0\u7814\u7a76\u6210\u679c, \u4e3a\u8f6f\u4ef6\u590d\u6742\u6027\u5ea6\u91cf\u63d0\u4f9b\u4e86\u65b0\u7684\u6570\u5b66\u57fa\u7840. \u8ba8\u8bba\u4e86\u8f6f\u4ef6\u590d\u6742\u6027\u7684\u5f62\u6210\u539f\u56e0\u548c\u5ea6\u91cf\u65b9\u6cd5, \u4ecb\u7ecd\u4e86\u76ee\u524d\u590d\u6742\u7f51\u7edc\u4e0e\u8f6f\u4ef6\u590d\u6742\u6027\u7ed3\u5408\u7684\u7814\u7a76\u5de5\u4f5c. \u63a2\u8ba8\u4e86\u57fa\u4e8e\u590d\u6742\u7f51\u7edc\u7684\u8f6f\u4ef6\u7ed3\u6784\u590d\u6742\u6027\u5ea6\u91cf\u65b9\u6cd5, \u63d0\u51fa\u4e00\u79cd\u7ed3\u5408\u590d\u6742\u7f51\u7edc\u548c\u6f14\u5316\u7b97\u6cd5\u7684\u8f6f\u4ef6\u6f14\u5316\u590d\u6742\u6027\u5ea6\u91cf\u6a21\u578b.", "num_citations": "36\n", "authors": ["1321"]}
{"title": "Software complexity metrics based on complex networks.\n", "abstract": " Human understanding and control of complex systems development often seem unattainable goals. The problem is substantial for future construction of network-centric, large-scale software systems. Evidence suggests that software engineering is reaching complexity and scalability limits of technologies. Software development and software quality is troubled with software complexity. New and emerging research efforts on complex networks introduce a new mathematical foundation for software complexity metrics. This paper discusses the forming mechanism and metrics methods of software complexity, and introduces recent progresses about associating software complexity with complex networks. Based on software complex networks, some methods of software structure complexity metrics are proposed. Focusing on combination of complex networks model and evolutionary algorithm, a model for software\u00a0\u2026", "num_citations": "23\n", "authors": ["1321"]}
{"title": "Developer Role Evolution in Open Source Software Ecosystem: An Explanatory Study on GNOME\n", "abstract": " An open source software (OSS) ecosystem refers to an OSS development community composed of many software projects and developers contributing to these projects. The projects and developers co-evolve in an ecosystem. To keep healthy evolution of such OSS ecosystems, there is a need of attracting and retaining developers, particularly project leaders and core developers who have major impact on the project and the whole team. Therefore, it is important to figure out the factors that influence developers\u2019 chance to evolve into project leaders and core developers. To identify such factors, we conducted a case study on the GNOME ecosystem. First, we collected indicators reflecting developers\u2019 subjective willingness to contribute to the project and the project environment that they stay in. Second, we calculated such indicators based on the GNOME dataset. Then, we fitted logistic regression models by\u00a0\u2026", "num_citations": "15\n", "authors": ["1321"]}
{"title": "Synchronization regions of discrete-time dynamical networks with impulsive couplings\n", "abstract": " This paper deals with synchronization of a class of discrete-time dynamical networks. First, a novel model for discrete-time dynamical networks with impulsive couplings between nodes is proposed. Second, both global and local stability of synchronization manifold is investigated using the multiple Lyapunov function method and some inequality techniques. As a result, several synchronization criteria are obtained. Third, two illustrative examples are given to validate the effectiveness of the proposed synchronization criteria. Analysis on the synchronization regions of the discrete-time dynamical network with metapopulation dynamics is further made, which reveals such a finding that either a relatively large coupling strength or a short impulsive interval is not necessarily beneficial to synchronization of the discrete-time dynamical network.", "num_citations": "11\n", "authors": ["1321"]}
{"title": "Automatic Identification of Decisions from the Hibernate Developer Mailing List\n", "abstract": " Decisions run through the whole software development and maintenance processes. Explicitly documenting these decisions helps to organize development knowledge and to reduce its vaporization, thereby controlling the development process and maintenance costs. It can also support the knowledge acquisition process for stakeholders of the project. Meanwhile, developers (eg, architects) and managers will be able to rely on the decisions made in the past to solve the problems encountered in their current projects. However, identifying decisions from massive textual artifacts, which involves considerable human effort, time, and cost, is usually unaffordable due to limited resources. To address this problem, we conducted an experiment to automatically identify decisions from textual artifacts using machine learning techniques. We created a dataset of 1,300 sentences labelled from the Hibernate developer mailing\u00a0\u2026", "num_citations": "9\n", "authors": ["1321"]}
{"title": "\u672c\u4f53\u4e2d\u7684\u590d\u6742\u7f51\u7edc\u7279\u6027\u7814\u7a76\n", "abstract": " \u4ece\u590d\u6742\u7f51\u7edc\u7684\u89c6\u89d2\u7814\u7a76\u8bed\u4e49\u7f51\u4e2d\u672c\u4f53\u7684\u62d3\u6251\u7ed3\u6784,\u901a\u8fc7\u5206\u6790\u4e0d\u540c\u9886\u57df\u672c\u4f53\u4e2d\u7c7b\u4e0e\u5b50\u7c7b\u6240\u5f62\u6210\u7684\u7c7b\u56fe\u5173\u7cfb,\u53ca\u5176\u8868\u73b0\u51fa\u7684\u7f51\u7edc\u7279\u6027,\u53d1\u73b0\u8fd9\u79cd\u7c7b\u56fe\u5728\u65e0\u5411\u7f51\u7edc\u7684\u610f\u4e49\u4e0b\u5177\u6709\u65e0\u6807\u5ea6\u7279\u6027,\u4e3a\u672c\u4f53\u7ed3\u6784\u76f8\u4f3c\u5ea6\u7b49\u8ba1\u7b97\u63d0\u4f9b\u4e86\u65b0\u65b9\u6cd5.", "num_citations": "9\n", "authors": ["1321"]}
{"title": "\u5c40\u57df\u6f14\u5316\u7684\u52a0\u6743\u7f51\u7edc\u6a21\u578b\n", "abstract": " \u5728 BA \u6a21\u578b\u7684\u57fa\u7840\u4e0a\u7814\u7a76\u4e86\u517c\u987e\u5c40\u57df\u6f14\u5316, \u589e\u957f, \u4ee5\u53ca\u5c40\u57df\u4e0e\u5c40\u57df\u5916\u5b58\u5728\u8f83\u5f31\u8fde\u63a5\u7b49 3 \u65b9\u9762\u56e0\u7d20\u7684\u52a0\u6743\u7f51\u7edc. \u5728\u8fd9\u4e2a\u6a21\u578b\u4e2d, \u5f15\u5165\u4e86\u53c2\u6570 a, p1, p2, p3, \u901a\u8fc7\u7406\u8bba\u5206\u6790, \u5bfc\u51fa\u4e86\u8fd9\u4e2a\u52a0\u6743\u7f51\u7edc\u6a21\u578b\u7684\u8282\u70b9\u7684\u5f3a\u5ea6\u5206\u5e03, \u53d1\u73b0\u5b83\u670d\u4ece\u5e42\u5f8b\u6307\u6570\u4e3a 2~ 3 \u7684\u5e42\u5f8b\u5206\u5e03. \u6570\u503c\u4eff\u771f\u9a8c\u8bc1\u4e86\u7406\u8bba\u5206\u6790\u7684\u6b63\u786e\u6027; \u5e76\u901a\u8fc7\u8c03\u8282\u53c2\u6570, \u5206\u6790\u4e86\u8be5\u6a21\u578b\u7684\u5185\u5728\u7279\u5f81\u548c\u7ed3\u6784. \u8fd9\u4e2a\u6539\u8fdb\u7684\u6a21\u578b\u5177\u6709\u66f4\u4e3a\u5e7f\u6cdb\u7684\u5b9e\u9645\u80cc\u666f.", "num_citations": "8\n", "authors": ["1321"]}
{"title": "\u5185\u90e8\u6f14\u5316\u7684 BA \u65e0\u6807\u5ea6\u7f51\u7edc\u6a21\u578b\n", "abstract": " \u5728BA(Barab\u00e1si-Albert)\u65e0\u6807\u5ea6\u7f51\u7edc\u6a21\u578b\u7684\u57fa\u7840\u4e0a,\u8003\u8651\u7f51\u7edc\u8282\u70b9\u589e\u957f\u7684\u540c\u65f6,\u7f51\u7edc\u5df2\u6709\u8282\u70b9\u8fde\u7ebf\u4e5f\u5728\u589e\u52a0.\u5728\u8fd9\u4e2aBA\u7f51\u7edc\u6539\u8fdb\u6a21\u578b\u4e2d,\u5f15\u5165\u4e86\u4e24\u4e2a\u4e3b\u8981\u53c2\u6570q1,q2,\u901a\u8fc7\u7406\u8bba\u5206\u6790,\u5bfc\u51fa\u4e86\u8fd9\u4e2a\u5185\u90e8\u6f14\u5316\u7684\u589e\u957f\u7f51\u7edc\u7684\u5ea6\u5206\u5e03,\u53d1\u73b0\u5b83\u4ecd\u7136\u5177\u6709\u65e0\u6807\u5ea6\u7f51\u7edc\u7684\u4e00\u822c\u6027\u8d28,BA\u65e0\u6807\u5ea6\u7f51\u7edc\u662f\u5b83\u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u5f62.\u6570\u503c\u4eff\u771f\u9a8c\u8bc1\u4e86\u7406\u8bba\u5206\u6790\u7684\u6b63\u786e\u6027.\u8fd9\u4e2a\u6539\u8fdb\u6a21\u578b\u6bd4BA\u7f51\u7edc\u6a21\u578b\u5177\u6709\u66f4\u5e7f\u6cdb\u7684\u5b9e\u9645\u80cc\u666f,\u5229\u7528\u5b83\u53ef\u4ee5\u66f4\u771f\u5b9e\u5730\u6a21\u62df\u4e0e\u523b\u753b\u73b0\u5b9e\u4e2d\u8bb8\u591a\u590d\u6742\u7f51\u7edc\u7684\u6f14\u5316\u53ca\u5176\u7279\u5f81.", "num_citations": "8\n", "authors": ["1321"]}
{"title": "Optimizing Synchronizability of Multilayer Networks Based on the Graph Comparison Method\n", "abstract": " This paper is aimed at optimizing the synchronizability of a complex network when the total of its edge weights is given and fixed. We try to allocate edge weights on a complex network to optimize the network's synchronizability from the perspective of spectral graph theory. Most of the existing analysis on multilayer networks assumes the weights of intralayer or interlayer edges to be identical. Such a restrictive assumption is not made in this work. Using the graph comparison based method, different edge weights are allocated according to topological features of networks, which is more reasonable and consistent with most physical complex networks. Furthermore, in order to find out the best edge-weight allocation scheme, we carried out numerical simulations on typical duplex networks and real-world networks. The simulation results show that our proposed edge-weight allocation schemes outperform the average\u00a0\u2026", "num_citations": "7\n", "authors": ["1321"]}
{"title": "Intralayer Synchronization of Multiplex Dynamical Networks via Pinning Impulsive Control\n", "abstract": " These days, the synchronization of multiplex networks is an emerging and important research topic. Grounded framework and theory about synchronization and control on multiplex networks are yet to come. This article studies the intralayer synchronization on a multiplex network (i.e., a set of networks connected through interlayer edges), via the pinning impulsive control method. The topologies of different layers are independent of each other, and the individual dynamics of nodes in different layers are different as well. Supra-Laplacian matrices are adopted to represent the topological structures of multiplex networks. Two cases are considered according to impulsive sequences of multiplex networks: 1) pinning controllers are applied to all the layers simultaneously at the instants of a common impulse sequence and 2) pinning controllers are applied to each layer at the instants of distinct impulse sequences. Using\u00a0\u2026", "num_citations": "6\n", "authors": ["1321"]}
{"title": "Complex Network Characteristics in Ontologies\n", "abstract": " The topology of ontologies in Semantic Web is studied in complex networks way. Through analyzing the network characteristics of the class diagrams of domain ontologies, the class diagrams are found to be scale-free networks with perspective of undirected network. This conclusion will induce a new method in similarity computing of ontology structures.[Fund]: \u56fd\u5bb6\u81ea\u7136\u79d1\u5b66\u57fa\u91d1\u9879\u76ee (60373086 90604005);; \u6e56\u5317\u7701\u81ea\u7136\u79d1\u5b66\u57fa\u91d1\u9879\u76ee (2005ABA123 2005ABA240);; \u6e56\u5317\u7701\u91cd\u70b9\u653b\u5173\u9879\u76ee (902130819);; \u6b66\u6c49\u5e02\u79d1\u6280\u5c40\u91cd\u5927\u4ea7\u4e1a\u5316\u9879\u76ee (20051001007);; \u8f6f\u4ef6\u5de5\u7a0b\u56fd\u5bb6\u91cd\u70b9\u5b9e\u9a8c\u5ba4\u5f00\u653e\u57fa\u91d1\u9879\u76ee (SKLSE05-07 SKLSE05-19)", "num_citations": "5\n", "authors": ["1321"]}
{"title": "Automatic Detection of Public Development Projects in Large Open Source Ecosystems: An Exploratory Study on GitHub\n", "abstract": " Hosting over 10 million of software projects, GitHub is one of the most important data sources to study behavior of developers and software projects. However, with the increase of the size of open source datasets, the potential threats to mining these datasets have also grown. As the dataset grows, it becomes gradually unrealistic for human to confirm quality of all samples. Some studies have investigated this problem and provided solutions to avoid threats in sample selection, but some of these solutions (e.g., finding development projects) require human intervention. When the amount of data to be processed increases, these semi-automatic solutions become less useful since the effort in need for human intervention is far beyond affordable. To solve this problem, we investigated the GHTorrent dataset and proposed a method to detect public development projects. The results show that our method can effectively improve the sample selection process in two ways: (1) We provide a simple model to automatically select samples (with 0.827 precision and 0.947 recall); (2) We also offer a complex model to help researchers carefully screen samples (with 63.2% less effort than manually confirming all samples, and can achieve 0.926 precision and 0.959 recall).", "num_citations": "4\n", "authors": ["1321"]}
{"title": "Relating Alternate Modifications to Defect Density in Software Development\n", "abstract": " A software developer tends to spend more effort to understand source code written by other developers than code written by herself. Existing research studying the impact of changes made by multiple developers on bug proneness did not consider quantitatively the influence of the order of the changes made by different developers. We found that a significant proportion of source files in many open source software systems had been modified alternately by different developers. We developed a metric, namely alternate modification index (AMI), to indicate the extent to which a source file is modified alternately by multiple developers. Our preliminary case study results show that AMI of source files has a strong positive correlation with their defect density.", "num_citations": "4\n", "authors": ["1321"]}
{"title": "Topology Identification of Multilink Complex Dynamical Networks via Adaptive Observers Incorporating Chaotic Exosignals\n", "abstract": " Topology identification of complex networks is an important and meaningful research direction. In recent years, the topology identification method based on adaptive synchronization has been developed rapidly. However, a critical shortcoming of this method is that inner synchronization of a network breaks the precondition of linear independence and leads to the failure of topology identification. Hence, how to identify the network topology when possible inner synchronization occurs within the network has been a challenging research issue. To solve this problem, this article proposes improved topology identification methods by regulating the original network to synchronize with an auxiliary network composed of isolated chaotic exosystems. The proposed methods do not require the sophisticated assumption of linear independence. The topology identification observers incorporating a series of isolated chaotic\u00a0\u2026", "num_citations": "2\n", "authors": ["1321"]}
{"title": "Reusing Service Process Fragments with a Consensus Between Service Providers and Users\n", "abstract": " Recent years have witnessed a rapid growth in using Web services for data publishing and sharing among organizations. To improve the efficiency of software development and economize on human and material resources, service reuse is viewed as a powerful means which will not only reuse atomic services, but also reuse arbitrary granularities of Service process fragments (SPFs). However, effectively reusing arbitrary granularities of SPFs has not been solved yet, let alone taking diverse QoS preferences of service providers and users into account. In this paper, we propose a novel method of SPF reuse, named SCKY, based on the Cocke-Kasami-Younger (CKY) algorithm. We first present an extended CKY to do SPF-query. Then we address how to do SPF-query by a probability CKY, i.e., return a SPF with maximum emergence probability. Finally, we explore the SPF-query with a consensus of QoS preferences\u00a0\u2026", "num_citations": "2\n", "authors": ["1321"]}
{"title": "Multiclass Classification of Four Types of UML Diagrams from Images Using Deep Learning\n", "abstract": " UML diagrams are a recognized standard modelling language for representing design of software systems. For academic research, large cases containing UML diagrams are needed. One of the challenges in collecting such datasets is automatically determining whether an image is a UML diagram or not and what type of UML diagram an image contains. In this study, we collected UML diagrams from open datasets and manually labeled them into four types of UML diagrams (ie, class diagrams, activity diagrams, sequence diagrams, and use case diagrams) and non-UML images. We evaluated the performance of five popular neural network architectures using transfer learning on the dataset of 3231 images that contains 700 class diagrams, 454 activity diagrams, 651 use case diagrams, 706 sequence diagrams, and 720 non-UML images, respectively. We also proposed our neural network architecture for multiclass classification of UML diagrams. The experiment results show that our proposed neural network architecture achieved the best performance amongst the algorithms we evaluated with an accuracy of 98.65%, a precision of 96.76%, a recall of 96.48%, and an F1-score of 96.62%. Moreover, among the neural network architectures that we have evaluated, our proposed architecture has the least parameters (around 2.4 millions) and spends the least time per image (0.0135 seconds per image using GPU) for classifying UML diagrams.", "num_citations": "1\n", "authors": ["1321"]}
{"title": "Parameter Identification of Memristor-based Chaotic Systems Via the Drive-response Synchronization Method\n", "abstract": " Memristor-based chaotic systems have been received great attention from researchers in the last decade. This brief investigates parameter identification of a memristor-based chaotic system (proposed by Muthuswamy in 2010). Uncertain parameter identification has not been studied yet for memristor-based chaotic systems. Using the Lyapunov stability theory and Barb \u0103 lat lemma, two theorems are established to identify uncertain parameters of the system under the following two cases:  i)  the memductance is unknown;  ii)  capacitances and inductances are unknown. Finally, numerical simulations are carried out and the results show that the proposed parameter identification methods are effective.", "num_citations": "1\n", "authors": ["1321"]}
{"title": "Projective Synchronization of a Fifth-order Memristor-Based Chaotic Circuit\n", "abstract": " Projective synchronization and its control have recently been well investigated in chaotic system, but with uncertain parameters in memristor-based circuit has less involved. Compared with the traditional resistor, memristor is a kind of nonlinear device with memory function, which plays an important role in the design and application of chaotic system. In this paper, we present the study of projective synchronization of a fifth-order memristor-based chaotic circuit proposed in 2011 [1], With certain/uncertain parameters, using adaptive control method and the Lyapunov stability theory, projective synchronization are achieved by designing nonlinear controllers, and uncertain parameters can be identified at the same time. The effectiveness of this method is verified by numerical simulations.", "num_citations": "1\n", "authors": ["1321"]}
{"title": "Is bug severity in line with bug fixing change complexity?\n", "abstract": " Both complexity of code change for bug fixing and bug severity play an important role in release planning when considering which bugs should be fixed in a specific release under certain constraints. This work investigates whether there are significant differences between bugs of different severity levels regarding the complexity of code change for fixing the bugs. Code change complexity is measured by the number of modified lines of code, source files, and packages, as well as the entropy of code change. We performed a case study on 20 Apache open source software (OSS) projects using commit records and bug reports. The study results show that (1) for bugs of high severity levels (i.e. Blocker, Critical and Major in JIRA), there is no significant difference on the complexity of code change for fixing bugs of different severity levels for most projects, while (2) for bugs of low severity levels (i.e. Major, Minor and Trivial\u00a0\u2026", "num_citations": "1\n", "authors": ["1321"]}
{"title": "Interest of Defect Technical Debt: An Exploratory Study on Apache Projects\n", "abstract": " Defect technical debt (defect debt) refers to known deferred bugs that have not been fixed. The interest of a defect debt item (i.e., bug) is the extra effort needed to fix the bug due to the delay of fixing. It is important to measure defect debt interest in a software system in order to be aware of how much the interest of certain bugs is and which bugs should be fixed first. Furthermore, it is valuable to understand the features of the bugs of high interest or no interest, so as to facilitate the identification of those kinds of bugs. In this work, we proposed three pairs of measures for quantifying defect debt interest at three granularities (i.e., lines of code, source file, and package) of software changes, and conducted an exploratory case study on 13,438 bugs collected from 59 non-trivial Apache open source software projects written mainly in Java. We have the following findings. (1) Each bug, with an average of 224 days delay of\u00a0\u2026", "num_citations": "1\n", "authors": ["1321"]}
{"title": "An Empirical Investigation on the Relationship Between Bug Severity and Bug Fixing Change Complexity\n", "abstract": " Fixing bugs requires changing source code in most cases. The complexity of code changes for fixing bugs has an important impact on release planning. This work intends to investigate whether there are significant differences between bugs with different severity levels with respect to the complexity of code changes for fixing the bugs. We performed a case study on 13 Apache open source software (OSS) projects using commit records and bug reports. The study results show that (1) for bugs of high severity levels, there is no significant difference on the complexity of code change for fixing bugs of different severity levels for most projects, while (2) for bugs of low severity levels, fixing bugs of a higher severity level needs significantly more complex code change than fixing bugs of a lower severity level for most projects. These findings provide useful insights for effort estimation and release planning of OSS development.", "num_citations": "1\n", "authors": ["1321"]}
{"title": "Improving Code Generation From Descriptive Text By Combining Deep Learning and Syntax Rules\n", "abstract": " Code generation is a model-driven engineering approach that enables developers to generate source code automatically and achieves extremely high development productivity. Specifically, generating code from a descriptive text reduces the time and expense of software development significantly. However, the performance of existing methods is not satisfying, since they are either of low accuracy (lack of specifics of the generated code) or too complicated (lack of efficiency in training). In this work, we proposed three novel methods by combining neural architectures and syntax rules, aiming at explicitly capturing the syntactical characteristics of target code. First, we proposed three models based on the Combination of Deep learning and Syntax rules (CDS models). Then, we evaluated CDS models with BLEU metric by comparing our models with existing methods. The results show that our models outperform existing methods for the challenging code generation task. Finally, we conducted a comparative study between the three CDS models. With further analysis we provided advice on the choice of neural architectures by considering both task accuracy and efficiency. Experimental results show that (1) there is a trade-off between speed and accuracy of the model, and (2) one of our CDS models (ie, the CDS-POOLING model) outperforms other existing methods for the challenging code generation task.", "num_citations": "1\n", "authors": ["1321"]}
{"title": "A Weighted Multi-Local-World Network Evolving Model and Its Application in Software Network Modelling\n", "abstract": " The phenomenon of local worlds (also known as communities) exists in numerous real-life networks, for example, computer networks and social networks. We proposed the Weighted Multi-Local-World (WMLW) network evolving model, taking into account  the dense links between nodes in a local world,  the sparse links between nodes from different local worlds, and  the different importance between intra-local-world links and inter-local-world links. On topology evolving, new links between existing local worlds and new local worlds are added to the network, while new nodes and links are added to existing local worlds. On weighting mechanism, weight of links in a local world and weight of links between different local worlds are endowed different meanings. It is theoretically proven that the strength distribution of the generated network by the WMLW model yields to a power-law distribution. Simulations show the correctness of the theoretical results. Meanwhile, the degree distribution also follows a power-law distribution. Analysis and simulation results show that the proposed WMLW model can be used to model the evolution of class diagrams of software systems.", "num_citations": "1\n", "authors": ["1321"]}
{"title": "Managing Technical Debt in Software Architecture\n", "abstract": " In de afgelopen jaren is er significante belangstelling geweest voor technische schuld. Het concept van technische schuld ging eerst over kwesties met interne kwaliteit maar is nu uitgebreid naar de hele levenscyclus van software, waar ook softwarearchitectuur en testen onder valt. Op het architectuurniveau wordt architectuurtechnische schuld voornamelijk opgelopen door architectuurbeslissingen die opzettelijk of onopzettelijk systeembrede kwaliteitsattributen in gevaar brengen, vooral onderhoudbaarheid en evolueerbaarheid. Gezien de fundamentele invloed van softwarearchitectuur op kwaliteitsattributen, inclusief onderhoudbaarheid en evolueerbaarheid, heeft technische schuld op het architectuurniveau een grotere en bredere impact op deze kwaliteitsattributen dan andere typen technische schuld, zoals technische schuld op het niveau van broncode. Daarom moet architectuurtechnische schuld op een systematische en toepasselijke manier gemanaged worden, om zo de gezondheid van de software architectuur te verbeteren, en om de kosten van systeemevolutie en-onderhoud op de lange termijn te optimaliseren.Het meeste onderzoek naar technische schuld focust zich op technische schuld op het niveau van broncode, terwijl technische schuld op architectuurniveau en het managen daarvan minder goed verkend blijft. Op dit moment is er een gebrek aan een algeheel proces voor het systematisch managen van architectuurtechnische schuld, evenals een gebrek aan een benadering voor concrete activiteiten rondom architectuurtechnische schuld, in het bijzonder voor het identificeren, meten, en documenteren van\u00a0\u2026", "num_citations": "1\n", "authors": ["1321"]}
{"title": "Recovering Software Architectural Knowledge from Documentation using Conceptual Model\n", "abstract": " Software architectural knowledge (AK) is the integrated representation of the software architecture (SA) of a software-intensive system, the architectural design decisions, and the external context/environment. AK annotation using AK conceptual model is used to recover formal AK from SA documentation, including architecture design as well as the design decisions, rationale, context, and other factors that together determine architecture solutions. But there is no evidence on how architects, especially junior architects, understand and annotate SA documents and recover formal AK from the documents using an AK model, which is right the case when a new architect jumps into a project, trying to understand the SA documents created by previous architects. This paper first presents AKRCM (AK Recovery using Conceptual Model) approach for recovering AK from SA documents. Second, we conduct a descriptive study using experiment to investigate how junior architects annotate SA documents and recover AK using AKRCM approach. We found that an AK conceptual model is beneficial for junior architects to get a fair understanding of SA documents, and to recover better-quality AK from SA documents.", "num_citations": "1\n", "authors": ["1321"]}