{"title": "Dependency versioning in the wild\n", "abstract": " Many modern software systems are built on top of existing packages (modules, components, libraries). The increasing number and complexity of dependencies has given rise to automated dependency management where package managers resolve symbolic dependencies against a central repository. When declaring dependencies, developers face various choices, such as whether or not to declare a fixed version or a range of versions. The former results in runtime behaviour that is easier to predict, whilst the latter enables flexibility in resolution that can, for example, prevent different versions of the same package being included and facilitates the automated deployment of bug fixes. We study the choices developers make across 17 different package managers, investigating over 70 million dependencies. This is complemented by a survey of 170 developers. We find that many package managers support - and\u00a0\u2026", "num_citations": "26\n", "authors": ["215"]}
{"title": "Perceptions of Gender Diversity's impact on mood in software development teams\n", "abstract": " Gender inequality persists in IT teams. We examine how gender differentiation affects the workplace atmosphere and analyze the results of our study of the issue. We discuss the problem of gender discrimination and consider methods to reduce inequality.", "num_citations": "12\n", "authors": ["215"]}
{"title": "Can a conversation paint a picture? mining requirements in software forums\n", "abstract": " The modern software landscape is highly competitive. Software companies need to quickly fix reported bugs and release requested new features, or they risk negative reviews and reduced market share. The amount of online user feedback prevents manual analysis. Past research has investigated automated requirement mining techniques on online platforms like App Stores and Twitter, but online product forums have not been studied. In this paper, we show that online product forums are a rich source of user feedback that may be used to elicit product requirements. The information contained in forum questions is different from what has been described in the related work on App Stores or Twitter. Users often provide detailed context to specific problems they encounter with a software product and other users respond with workarounds or to confirm the problem. Through the analysis of two large forums, we identify\u00a0\u2026", "num_citations": "10\n", "authors": ["215"]}
{"title": "A survey of social media users privacy settings & information disclosure\n", "abstract": " This research utilises a comprehensive survey to ascertain the level of social networking site personal information disclosure by members at the time of joining the membership and their subsequent postings to the sites. Areas examined are the type of information they reveal, their level of knowledge and awareness regarding how their information is protected by SNSs and the awareness of risks that over-sharing may pose. Additionally, this research studies the effect of gender, age, education, and level of privacy concern on the amount and kind of personal information disclosure and privacy settings applied. A social experiment was then run for 3 months that tested SNSs users\u2019 reaction to a profile access request by a stranger. The research focused on four different social networks: Facebook, Twitter, Instagram, and Snapchat. The results of the survey and experiment found that there is a significant amount of\u00a0\u2026", "num_citations": "10\n", "authors": ["215"]}
{"title": "What is the perception of female and male software professionals on performance, team dynamics and job satisfaction? Insights from the trenches\n", "abstract": " Research has shown that gender diversity correlates positively with innovation and productivity in many professional engineering and technology domains. Yet, software development teams are dominated by males. In this paper, we aim at understanding whether female software professionals, compared to male, have different perceptions on a) team performance and dynamics, b) their own personal performance, c) their immediate supervisors, and d) accomplishment, recognition, and opportunities. Understanding perceptions of different genders can help software professionals, their supervisors and those responsible for staff create and foster environments in which both females and males are comfortable and perform best. To achieve this aim, we conducted a survey targeted at individual software professionals in technical roles. We collected and analyzed data from 55 female and 69 male respondents. Our\u00a0\u2026", "num_citations": "9\n", "authors": ["215"]}
{"title": "Method of collaborative software development\n", "abstract": " A method of collaboratively developing software includes recording a plurality of developers' tasks relating to a collection of software development files via software executing on a computer. The method further includes calculating a proximity score between a plurality of tasks based on the overlap of the developers' activities via software executing on a computer. The method further includes selecting and capturing a group of task properties that along with the proximity score can be used to select a group of task pairings that require coordination. The method further includes notifying the developers assigned to the task pairings selected that they may need to coordinate their development efforts.", "num_citations": "8\n", "authors": ["215"]}
{"title": "Voice of the users: A demographic study of software feedback behaviour\n", "abstract": " User feedback on mobile app stores, product forums, and on social media can contain product development insights. There has been a lot of recent research studying this feedback and developing methods to automatically extract requirement-related information. This feedback is generally considered to be the \u201cvoice of the users\u201d; however, only a subset of software users provide online feedback. If the demographics of the online feedback givers are not representative of the user base, this introduces the possibility of developing software that does not meet the needs of all users. It is, therefore, important to understand who provides online feedback to ensure the needs of underrepresented groups are not being missed.In this work, we directly survey 1040 software users about their feedback habits, software use, and demographic information. Their responses indicate that there are statistically significant differences in\u00a0\u2026", "num_citations": "7\n", "authors": ["215"]}
{"title": "Establishing trust and relationships through video conferencing in virtual collaborations: An experience report on a global software engineering course\n", "abstract": " The rise of globalization in software engineering places a responsibility on educators to adequately prepare students for the unique challenges and demands of Global Software Engineering. Experiential Learning (EL) is an approach to teaching that emphasizes learning by doing. It can potentially enhance student engagement and, therefore, learning in GSE courses. In this paper, we present our findings based on student reflections about their first experience of virtual collaboration with a guest lecturer in a GSE course. In particular, we report on the challenges and learnings for students during this virtual meeting where they reflect on the importance of a pre-established relationship with the facilitator in cross-site communication. We compare our findings from student reflections with those shared by practitioners in our previous study about the challenges of distributed collaboration. We observed that both students\u00a0\u2026", "num_citations": "6\n", "authors": ["215"]}
{"title": "Attitudes towards software engineering education in the new zealand industry\n", "abstract": " PURPOSE We wanted to identify what we are doing well in our current programme, what is valued by industry, and what new areas to include or improve. Our findings can be used by other SE programmes as they update their cirriculum. We also wished to investigate whether there was a perceived value in SE being a four-year engineering degree and what the perceived differences were with a three-year Computer Science (CS) degree.APPROACH We created two online surveys to get feedback on our SE programme, one for SE Alumni and one for local SE professionals. The surveys, included Likert scale and openended questions. Respondents rated the importance of multiple SE-related skills and the ability of local SE professionals in those skills. Respondents also provided their opinions on various aspects of our SE degree.", "num_citations": "5\n", "authors": ["215"]}
{"title": "Voice of the users: an extended study of software feedback engagement\n", "abstract": " Many software users give feedback online about the applications they use. This feedback often contains valuable requirements information that can be used to guide the effective maintenance and evolution of a software product. Yet, not all software users give online feedback. If the demographics of a user-base aren\u2019t fairly represented, there is a danger that the needs of less vocal users won\u2019t be considered in development. This work investigates feedback on three prominent online channels: app stores, product forums, and social media. We directly survey software users about their feedback habits, as well as what motivates and dissuades them from providing feedback online. In an initial survey of 1040 software users, we identify statistically significant differences in the demographics of users who give feedback (gender, age, etc.), and key differences in what motivates them to engage with each of the three studied\u00a0\u2026", "num_citations": "3\n", "authors": ["215"]}
{"title": "A systematic mapping study on architectural smells detection\n", "abstract": " The recognition of the need for high-quality software architecture is evident from the increasing trend in investigating architectural smells. Detection of architectural smells is paramount because they can seep through to design and implementation stages if left unidentified. Many architectural smells detection techniques and tools are proposed in the literature. The diversity in the detection techniques and tools suggests the need for their collective analysis to identify interesting aspects for practice and open research areas. To fulfill this, in this paper, we unify the knowledge about the detection of architectural smells through a systematic mapping study. We report on the existing detection techniques and tools for architectural smells to identify their limitations. We find there has been limited investigation of some architectural smells (e.g., micro-service smells); many architectural smells are not detected by tools yet; and\u00a0\u2026", "num_citations": "3\n", "authors": ["215"]}
{"title": "Timely detection of coordination requirements to support collaboration among software developers\n", "abstract": " Work dependencies often exist between the developers of a software project. These dependencies frequently result in a need for coordination between the involved developers. However, developers are not always aware of these Coordination Requirements. Current methods which detect the need to coordinate rely on information which is available only after development work has been completed. This does not enable developers to act on their coordination needs. I have investigated a more timely method to determine Coordination Requirements in a software development team as they emerge.", "num_citations": "3\n", "authors": ["215"]}
{"title": "Timely and efficient facilitation of coordination of software developers\u2019 activities\n", "abstract": " When software developers fail to coordinate, build failures, duplication of work, schedule slips and software defects can result. However, developers are often unaware when they need to coordinate, and existing methods and tools that help make developers aware of their coordination needs do not provide timely awareness or efficient recommendations. Without timely awareness, developers cannot act on their coordination needs while development is underway. Further, existing tools recommend only which developers should coordinate. This introduces inefficiencies since developers are often working on multiple tasks in parallel. This dissertation describes a set of techniques that aim at improving the timeliness and efficiency of coordination recommendations. It introduces a method that provides timely coordination recommendations by analyzing developer actions as they occur using IDE monitoring facilities. It\u00a0\u2026", "num_citations": "2\n", "authors": ["215"]}
{"title": "Enriching feature engineering for short text samples by language time series analysis\n", "abstract": " In this case study, we are extending feature engineering approaches for short text samples by integrating techniques which have been introduced in the context of time series classification and signal processing. The general idea of the presented feature engineering approach is to tokenize the text samples under consideration and map each token to a number, which measures a specific property of the token. Consequently, each text sample becomes a language time series, which is generated from consecutively emitted tokens, and time is represented by the position of the respective token within the text sample. The resulting language time series can be characterised by collections of established time series feature extraction algorithms from time series analysis and signal processing. This approach maps each text sample (irrespective of its original length) to 3970 stylometric features, which can be analysed with\u00a0\u2026", "num_citations": "1\n", "authors": ["215"]}
{"title": "Supporting Software Architecture Maintenance by Providing Task-Specific Recommendations\n", "abstract": " During software maintenance, developers have different information needs (e.g., to understand what type of maintenance activity to perform, the impact of a maintenance activity and its effort). However, information to support developers may be distributed across various sources. Furthermore, information captured in formal architecture documentation may be outdated. In this paper, we put forward a late breaking idea and outline a solution to improve the productivity of developers by providing task-specific recommendations based on concrete information needs that arise during software maintenance.", "num_citations": "1\n", "authors": ["215"]}