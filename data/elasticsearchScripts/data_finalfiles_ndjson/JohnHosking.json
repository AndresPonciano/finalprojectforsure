{"title": "Multi-methods in a statically-typed programming language\n", "abstract": " Multivariant functions in Kea are a statically-typed form of the multi-methods of CLOS (Keene, 1989) but encapsulation is retained. Multivariants permit fine typing distinctions to be made, allow despatching to be avoided in some cases, and may be used to avoid some restrictions of the contravariance rule.             Once multivariant functions are introduced by example, the semantics of the despatch of multivariants are provided, based on the generation of despatching variants. Three issues arise with despatching: redundancy, ambiguity, and exhaustiveness of a (partially-ordered) set of variants with respect to a function call. It is shown that the approach taken here is consistent with separate compilation.", "num_citations": "106\n", "authors": ["1895"]}
{"title": "Ruru: A spatial and interactive visual programming language for novice robot programming\n", "abstract": " Robots are useful tools for teaching novices programming as real and immediate outcomes of programs can be seen. However robot software development has unique problems making aspects of programming difficult compared with general software development. These problems include the robot platform, the robot's environment and its interaction in three-dimensional space and the fact that events occur in real time. We describe Ruru, a novel visual language that addresses these difficulties through a principled approach to its design. It also visualizes robot inputs intuitively in real time and allows the intuitive amendment of parameters. This improves its usefulness and user friendliness as a tool for teaching novices programming.", "num_citations": "45\n", "authors": ["1895"]}
{"title": "Status communication in agile software teams: A case study\n", "abstract": " Developers ought to maintain awareness of the status of a software project. However, there are very few recorded best practices for defining what constitutes relevant status information and the appropriate modalities for communicating this information. In this industry case study, we conducted in-depth interviews with members of an agile development team. We found that their daily work practices, while well-defined and regular, were heavily influenced by the status information they integrated from a number of sources. In particular, continuous integration builds had a substantial effect on the team's workflow. Based on our findings, we provide a set of guidelines for build monitoring systems which encourage collective and individual responsibility while working within the established team environment.", "num_citations": "37\n", "authors": ["1895"]}
{"title": "A visual language for design pattern modelling and instantiation\n", "abstract": " In this chapter we describe the Design Pattern Modelling Language, a notation supporting the specification of design pattern solutions and their instantiation into UML design models. DPML uses a simple set of visual abstractions and readily lends itself to tool support. DPML design pattern solution specifications are used to construct visual, formal specifications of design patterns. DPML instantiation diagrams are used to link a design pattern solution specification to instances of a UML model, indicating the roles played by different UML elements in the generic design pattern solution. A prototype tool is described, together with an evaluation of the language and tool.", "num_citations": "37\n", "authors": ["1895"]}
{"title": "Ambient awareness of build status in collocated software teams\n", "abstract": " We describe the evaluation of a build awareness system that assists agile software development teams to understand current build status and who is responsible for any build breakages. The system uses ambient awareness technologies, providing a separate, easily perceived communication channel distinct from standard team workflow. Multiple system configurations and behaviours were evaluated. An evaluation of the system showed that, while there was no significant change in the proportion of build breakages, the overall number of builds increased substantially, and the duration of broken builds decreased. Team members also reported an increased sense of awareness of, and responsibility for, broken builds and some noted the system dramatically changed their perception of the build process making them more cognisant of broken builds.", "num_citations": "33\n", "authors": ["1895"]}
{"title": "Visual code annotations for cyberphysical programming\n", "abstract": " User interfaces for source code editing are a crucial component in any software development environment, and in many editors visual annotations (overlaid on the textual source code) are used to provide important contextual information to the programmer. This paper focuses on the real-time programming activity of `cyberphysical' programming, and considers the type of visual annotations which may be helpful in this programming context.", "num_citations": "30\n", "authors": ["1895"]}
{"title": "Intelligent mind-mapping\n", "abstract": " Current computer based mind-mapping tools are much slower to use than pen and paper because users are distracted by tool operations such as finding and arranging widgets. The shift in focus from brainstorming to tool management interrupts the rapid brainstorming process that mind maps are intended to support. Our pen based mind-mapping software that includes intelligent ink recognition, editing and export alleviates these intrusions as the user only has to worry about writing on the canvas, yet usual digital document support is provided. The digital ink recognition and manipulation techniques described here will be of interest to others working with informal documents.", "num_citations": "30\n", "authors": ["1895"]}
{"title": "Designing an API at an appropriate abstraction level for programming social robot applications\n", "abstract": " Whilst robots are increasingly being deployed as social agents, it is still difficult to program them to interact socially. To create usable tools for programming these robots, tool developers need to know what abstraction levels are appropriate for programming social robot applications. We explore this through the iterative design and evaluation of an API for programming social robots. The results show that high level primitives, with a close mapping to social interaction, are suitable for programming social robot applications. However, the abstraction level should not be so high that it takes away too much control from programmers. This has the potential to enable programmers to produce high quality social robot applications with less programming effort.", "num_citations": "29\n", "authors": ["1895"]}
{"title": "Ground-based, high-resolution measurements of the spatial and temporal distribution of rainfall\n", "abstract": " Preliminary data from ground-based measurements of rainfall using an optical disdrometer and high-resolution rain gage network are described. The recurrence of the rain period is shown to be non-Poisson with evidence of clustering, whereas a lognormal distribution is shown to be an approximate fit to the distribution of amount of rainfall in a rain period. About 40% of rain periods possess a total rainfall smaller than that resolvable by conventional recording rain gages; three-quarters of these were resolvable by the high-resolution rain gages used. Rapid fluctuations of rainfall intensity (\u223c1 mm h\u22121 s\u22121) are evident in individual rainfall intensity records and the distribution of duration of rainfall above a specified threshold intensity is shown to be approximately lognormal; these observations are consistent with a lognormal distribution of precipitation region sizes. An empirical fit to the average fractional duration of\u00a0\u2026", "num_citations": "28\n", "authors": ["1895"]}
{"title": "Multi-disciplinary views for integrated and concurrent design\n", "abstract": " The definition and implementation of user views is likely to be a major factor in the success of the ISO-STEP standard for computer-based representation of building components and their inter-connection. The development of a method for describing user views to a particular model is also likely to increase the usage of existing design tools. Currently, the arcane languages and the detailed knowledge required of the physics and terminology of the specific domains of many of these tools limit their use by designers. This paper addresses these issues by describing a system that can present information from a base computer model of a building to a given user. The language and level of detail of the system are directed at the needs and understanding of the user. This system allows multiple concurrent views to the base model, each view tailored to a particular discipline (eg, architect, structural engineer, thermal engineer, etc) and further tailored to meet the specific needs of the particular user in terms of understanding of the various disciplines and the level of information required. Used with a system that integrates various design tools through a computer based building model, this system will offer users information from a range of design tools at a level that they can comprehend. Key Words multi discipline views; product modelling; user interaction", "num_citations": "25\n", "authors": ["1895"]}
{"title": "A combination approach for enhancing automated traceability (NIER track)\n", "abstract": " Tracking a variety of traceability links between artifacts assists software developers in comprehension, efficient development, and effective management of a system. Traceability systems to date based on various Information Retrieval (IR) techniques have been faced with a major open research challenge: how to extract these links with both high precision and high recall. In this paper we describe an experimental approach that combines Regular Expression, Key Phrases, and Clustering with IR techniques to enhance the performance of IR for traceability link recovery between documents and source code. Our preliminary experimental results show that our combination technique improves the performance of IR, increases the precision of retrieved links, and recovers more true links than IR alone.", "num_citations": "24\n", "authors": ["1895"]}
{"title": "A combination approach for enhancing automated traceability:(NIER track)\n", "abstract": " Tracking a variety of traceability links between artifacts assists software developers in comprehension, efficient development, and effective management of a system. Traceability systems to date based on various Information Retrieval (IR) techniques have been faced with a major open research challenge: how to extract these links with both high precision and high recall. In this paper we describe an experimental approach that combines Regular Expression, Key Phrases, and Clustering with IR techniques to enhance the performance of IR for traceability link recovery between documents and source code. Our preliminary experimental results show that our combination technique improves the performance of IR, increases the precision of retrieved links, and recovers more true links than IR alone.", "num_citations": "24\n", "authors": ["1895"]}
{"title": "Constructing multi-view editing environments using MViews\n", "abstract": " MViews abstracts out common features of multi-view editing environments that support integrated textual and graphical programming. It provides a conceptual model and reusable object-oriented framework for constructing such environments. Multiple views of a base document are supported with consistency automatically maintained between each of the views. MViews has been used to construct a visual and textual programming and program visualisation environment for object-oriented systems. Other applications of MViews under development include entity-relationship and dataflow diagrammers with detailed descriptions programmed with text.< >", "num_citations": "24\n", "authors": ["1895"]}
{"title": "The arrival rate of raindrops at the ground\n", "abstract": " Examination of the arrival-rate distribution of raindrops from disturbed, post-cold-front air masses using the statistic k, the ratio of the variance of the drop rate to the mean, shows strong deviations from Poisson behavior toward clustering of drops. Clustering occurs predominantly for drops smaller than about 0.25 mm radius and correlates strongly with the small-drop arrival rate and, to a lesser extent, with rainfall intensity but does not appear to be caused by drop splashing, breakup or local turbulence. There is evidence to suggest that, if rapid intensity fluctuations are causing clustering, these fluctuations occur with a characteristic period of less than 10 s.", "num_citations": "22\n", "authors": ["1895"]}
{"title": "Ground-based measurements of raindrop fallspeeds\n", "abstract": " Typical results of field measurements of the fallspeeds of natural raindrops are presented and instrumental effects investigated by numerically simulating the measurement processes. Deviations between the measured fallspeeds and those expected on the basis of theory and windtunnel results are smaller than previous investigators have found, probably because of the improved instrumentation used. The random component of these deviations is consistent with estimated experimental error, but on average drops are found to fall about 5%\u201310% slower than expected, and this mean deviation increased with drop size; these data are consistent with the existence of local updrafts and downdrafts. The effects of the observed fallspeed fluctuations on estimates of other quantities at ground level (e.g., drop radius) are considered and, in some cases, shown to be significant.", "num_citations": "21\n", "authors": ["1895"]}
{"title": "Visualisation of object oriented program execution\n", "abstract": " An environment for visualising object oriented program execution providing concrete and abstract views of program structure and behaviour is described. Of particular novelty are dynamic views using a road map metaphor.", "num_citations": "20\n", "authors": ["1895"]}
{"title": "A Formal Contract Language for Plugin-based Software Engineering\n", "abstract": " Plugin-based application design has become increasingly popular in recent years, and has contributed to the success of a range of very different applications including Mozilla Firefox and the Eclipse development environment. Using plugins is a promising approach to build complex systems that have to be reconfigured at runtime, and several plugin based general purpose runtime environments are currently under development. Plugin-based design is based on the idea that plugins provide additional functionality extending the capabilities of a core product. While this is often understood as providing services by implementing abstract classes or interfaces defined in the core product, modern plugin-based systems like Eclipse use a much wider definition of service. We propose to consider these services as typed resources and introduce a contract language that can be used to define contracts between plugins\u00a0\u2026", "num_citations": "18\n", "authors": ["1895"]}
{"title": "Thinkbase: A visual semantic wiki\n", "abstract": " Thinkbase is a visual navigation and exploration tool for Freebase, an open, shared database of the world\u2019s knowledge. Thinkbase extracts the contents, including semantic relationships, from Freebase and visualizes them using an interactive visual representation. Providing a focus plus context view the visualization is displayed along with the Freebase article. Thinkbase provides a proof of concept of how visualizations can improve and support Semantic Web applications. The application is available via http://thinkbase. cs. auckland. ac. nz.", "num_citations": "17\n", "authors": ["1895"]}
{"title": "An expert advisory system for a fire safety code\n", "abstract": " An expert advisory system for a fire safety code | Proceedings of the Second Australian Conference on Applications of expert systems ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleProceedingsProceedings of the Second Australian Conference on Applications of expert systemsAn expert advisory system for a fire safety code Article An expert advisory system for a fire safety code Share on Authors: M. Buis Univ. of Auckland, Auckland, New Zealand Univ. of Auckland, Auckland, New Zealand View Profile , J. Hamer Univ. of Auckland, Auckland, New Zealand Univ. of Auckland, Auckland, New Zealand View Profile , JG Hosking Univ. of \u2026", "num_citations": "17\n", "authors": ["1895"]}
{"title": "FireCode: a case study in the application of expert-systems techniques to a design code\n", "abstract": " FireCode is an expert advisory system for assisting building designers to check their plans against the requirements of a fire safety code. This application of expert-systems methodology is rather unusual because much of the knowledge is already available in written form, reducing the effort required for development. However, expert assistance was still required to handle a number of problems in the interpretation of the written code, such as incomplete and ambiguous requirements. These problems are likely to be met during the development of any expert system based on regulations or codes of practice. A strong parallel exists between the development of an expert system and the development of a code of practice; they are both concerned with the formalisation of knowledge. An important conclusion of this work is that the parallel development of an expert system will assist in the formulation of a code of practice.", "num_citations": "17\n", "authors": ["1895"]}
{"title": "Resource Usage Estimation of Data Stream Processing Workloads in Datacenter Clouds\n", "abstract": " Real-time computation of data streams over affordable virtualized infrastructure resources is an important form of data in motion processing architecture. However, processing such data streams while ensuring strict guarantees on quality of services is problematic due to: (i) uncertain stream arrival pattern; (ii) need of processing different types of continuous queries; and (iii) variable resource consumption behavior of continuous queries. Recent work has explored the use of statistical techniques for resource estimation of SQL queries and OLTP workloads. All these techniques approximate resource usage for each query as a single point value. However, in data stream processing workloads in which data flows through the graph of operators endlessly and poses performance and resource demand fluctuations, the single point resource estimation is inadequate. Because it is neither expressive enough nor does it capture the multi-modal nature of the target data. To this end, we present a novel technique which uses mixture density networks, a combined structure of neural networks and mixture models, to estimate the whole spectrum of resource usage as probability density functions. The proposed approach is a flexible and convenient means of modeling unknown distribution models. We have validated the models using both the linear road benchmark and the TPC-H, observing high accuracy under a number of error metrics: mean-square error, continuous ranked probability score, and negative log predictive density.", "num_citations": "16\n", "authors": ["1895"]}
{"title": "Developing adaptable user interfaces for component-based systems\n", "abstract": " Developing software components with user interfaces that can be adapted to diverse reuse situations is challenging. Examples of such adaptations include extending, composing and reconfiguring multiple-component user interfaces, and adapting component user interfaces to particular user preferences, roles and subtasks. We describe our recent work in facilitating such adaptation via the concept of \"user interface aspects\", which facilitate effective component user interface design and realisation using an extended component-based software architecture.", "num_citations": "16\n", "authors": ["1895"]}
{"title": "Mappings: the glue in an integrated system\n", "abstract": " We describe a new high level mapping language which assists in solving the problems of schema evolution. schema integration, multiple perspectives of models, and frameworks for integrated systems. In contrast to both existing methods and the procedural mapping languages currently being developed, this language uses a declarative style with graphical and textual notations to allow users to specify niore easily the equivalences between entities in various schemata. The mapping language implementation is capable of propagating modifications from one view to all dependent views, ensuring consistency of information at all times across all views.", "num_citations": "15\n", "authors": ["1895"]}
{"title": "An improved high-resolution raingage\n", "abstract": " Evaluation of an earlier raingage design based on counting drops formed on the tip of a small-diameter stainless-steel tube shows a defect due to resonant oscillation of the water column in the dropper unit. The defect causes nonlinearity in the drop rate-flow rate relationship, precluding useful integration of the gage output. An improved design is presented which eliminates this defect. Laboratory tests on the new design show linear performance over two orders of magnitude of rainfall intensity with time resolution of better than 5 s and accuracy limited by sampling errors. The new gage is also shown to perform well in field testing.", "num_citations": "15\n", "authors": ["1895"]}
{"title": "A human-centric API for programming socially interactive robots\n", "abstract": " Whilst robots are increasingly being deployed as social agents, it is still difficult to program them to interact socially. This is because current programming tools either require programmers to work at a low level or lack features needed to create certain aspects of social interaction. High level, domain specific tools with features designed specifically to meet the requirements of social interaction have the potential to ease the creation of social applications. We present a domain specific application programming interface (API) that is designed to meet the requirements of social interaction. The Cognitive Dimensions Framework was used as a design tool during the design process and the API was validated by implementing an exemplar application. The evaluation of the API showed that programmers with no robotics knowledge were positively impressed by the notation and that its organization, domain specific interfaces\u00a0\u2026", "num_citations": "14\n", "authors": ["1895"]}
{"title": "A Model Driven Approach to Care Planning Systems for Consumer Engagement in Chronic Disease Management\n", "abstract": " This work demonstrates a model-driven approach to the development of care plan systems, amenable to:(a) a flexible and extensible definition of care plan scope; and (b) deployment of care plan viewing and tracking functionality to a wide range of physical computing devices. The approach utilises a care plan domain model from which guideline implementers formulate care plan templates aligning to specific clinical guidelines. A clinical end user would subsequently constrain that template (eg, selecting a subset of available activities and specific targets) to create a care plan instance for an individual patient. An XML care plan visualisation definition created using the Marama tool is transformed to OpenLaszlo script from which Shockwave Flash objects can be compiled, creating Flash applications that run on a variety of hardware for both clinical and patient users. The approach is illustrated with respect to an overweight and obesity guideline.", "num_citations": "13\n", "authors": ["1895"]}
{"title": "EML: A Tree Overlay-Based Visual Language for Business Process Modelling.\n", "abstract": " \u2022 However, a common source of difficulty in all of these approaches is an appropriate visual method to reduce the complexity of large business modelling diagrams\u2022 Most existing modelling technologies are effective in only limited problem domains or have major weaknesses when attempting to scale to large systems modelling eg \u201ccobweb\u201d and \u201clabyrinth\u201d problems", "num_citations": "13\n", "authors": ["1895"]}
{"title": "An Architecture for Efficient, Flexible Enterprise System Integration.\n", "abstract": " Integrating complex enterprise systems is challenging and reliability and performance of the integrated systems can be problematic when using typical solutions of distributed transactions or on-demand message-based querying. We describe a data-oriented approach for enterprise system integration that uses information brokering. A broker application isolates the interactions between a local enterprise application server and a wide variety of remote systems, performing data acquisition, storage, transformation, update and status management. We describe a prototype book brokering system developed using Java 2 Enterprise Edition, CORBA, Java Messaging Service and Web Services and using our integration strategy. We outline the architecture, design and implementation of this prototype and summarise our experiences with this information integration technique.", "num_citations": "13\n", "authors": ["1895"]}
{"title": "Static and dynamic visualisation of software architectures for component-based systems\n", "abstract": " Component-based software architectures are increasingly being adopted as solutions for various software engineering problems. We describe a component-based software architecture and its supporting CASE tool we have been developing. Our tool supports both static and dynamic visualisation of component-based systems, together with end-user configuration of such systems by user extension of these visualisations. We describe the application of this tool to the development of component-based design environments, focusing on visualisations developed when specifying a process modelling tool.", "num_citations": "13\n", "authors": ["1895"]}
{"title": "A Petri net-based visual language for specifying GUIs\n", "abstract": " We describe PUIST, a visual language for graphical interface specification and prototyping. PUIST uses a Petri net notation, with a declarative means of defining nets which have complex, yet regular interconnections. This significantly improves the understandability of large specifications, permitting PUIST to be used for complex interface component specification and prototyping.", "num_citations": "13\n", "authors": ["1895"]}
{"title": "A multi-criteria metric algorithm for recommender systems\n", "abstract": " Information overload and an abundance of choices create situations where selecting one option becomes extremely difficult or even worse, a guessing game. Collaborative ranking systems are widely used to alleviate this problem by creating intelligent rankings of items based on an aggregation of user opinions. Current ranking systems can still be improved in a number of areas, including accuracy, transparency and flexibility. This paper presents a multi-criteria ranking algorithm that can be used on a non-rigid set of criteria. The system implementing the algorithm fares well with respect to the above qualities.", "num_citations": "12\n", "authors": ["1895"]}
{"title": "Constructing integrated software development environments with dependency graphs\n", "abstract": " Integrated software development environments need to support multiple textual and graphical views of software products under development. MViews, a new model for constructing such environments, provides abstractions for representing the abstract syntax of a program as graphs and for viewing and manipulating these graphs in concrete textual and graphical forms. Graphs are used to represent software system structures using components (graph nodes) and relationships (graph edges). These graph components are modified by graph operations to construct and modify a program. Views of these graph components are rendered and manipulated in either graphical or textual forms. Consistency management between updated graph components is supported by a novel update record mechanism. MViews graphs are dependency graphs: updates to graph components are broadcast to related components as update records. These dependent components, or the inter-connecting relationships, respond to these update records and update the dependent components appropriately. This mechanism is used to support inter-component consistency management, and in particular provides a novel way keeping textual and graphical views of software development consistent. This mechanism can also be used as the basis of a wide range of other software development environment facilities. MViews has been reused to implement a variety of integrated environments and examples of these environments are discussed.", "num_citations": "12\n", "authors": ["1895"]}
{"title": "Integrating design tools for total building evaluation\n", "abstract": " To advance the use of expert systems and simulation tools, in fact to make them acceptable and usable to practitioners, a new approach is required in the development of an expert system and simulation tool environment. In this paper we detail the work currently taking place in New Zealand on the development of such an integrated environment for the use of multiple simulation tools and expert systems in the design process and for the analysis and refinement of the design as it progresses to a more concrete form.", "num_citations": "12\n", "authors": ["1895"]}
{"title": "Design tool integration: model flexibility for the building profession\n", "abstract": " The development of ICAtect, as discussed in the Building Systems Automation and Integration Symposium of 1991, provides a way of integrating simulation tools through a common building model. However, ICAtect is only a small step towards the ultimate goal of total integration and automation of the building design process. In this paper we investigate the next steps on the path toward integration. We examine how models structured to capture the physical attributes of the building, as required by simulation tools, can be used to converse with knowledge-based systems. We consider the types of mappings that occur in the often different views of a building held by these two classes of design tools. This leads us to examine the need for multiple views of a common building model. We then extend our analysis from the views required by simulation and knowledge-based systems, to those required by different segments\u00a0\u2026", "num_citations": "11\n", "authors": ["1895"]}
{"title": "The development of an expert system for wall bracing design\n", "abstract": " An expert system is under development which will aid a building designer or building inspector to check that the wall bracing requirements of a code of practice for timber frame houses have been met. It is also planned that the system will guide the user in designing the wall bracing to meet those requirements.A prototyping approach has been taken in the development of the system. The first stage was to complete a code checking system, followed by a system to guide the user through the process of providing bracing to meet the load requirements. The checking system evolved from a simple system which ignored many of the complexities of the code. Difficult issues, such as dealing with complex house shapes, were left until the simple cases were handled. Clms Language classes proved invaluable here in structuring the knowledge base. The modularity meant that it was usually straightforward to revise the\u00a0\u2026", "num_citations": "11\n", "authors": ["1895"]}
{"title": "A suite of visual languages for statistical survey specification\n", "abstract": " We describe SDL, an integrated suite of visual languages aimed at supporting the process of designing statistical surveys. SDL comprises four diagrammatic notations: survey diagrams, survey data diagrams, survey analysis diagrams and survey process diagrams. A proof of concept environment supporting SDL is also presented, together with a cognitive dimensions evaluation of that environment and a cognitive walkthrough evaluation with a target end user - a professional statistician. These demonstrate the utility of SDL and lead us to propose development of a more comprehensive environment supporting the entire statistical survey process.", "num_citations": "10\n", "authors": ["1895"]}
{"title": "ICAtect-II: a framework for the integration of building design tools\n", "abstract": " The development of a system capable of integrating a range of building design tools poses many challenges. Our framework for integrating design tools provides a structured approach, allowing individual parts to be developed independently. In this paper, we describe the overall framework and suggest a method for modeling and implementing each portion of the framework. Furthermore, we illustrate how such a system can integrate several design tools and be realized as a functional design system.", "num_citations": "10\n", "authors": ["1895"]}
{"title": "The development of an expert system for seismic loading\n", "abstract": " This paper describes the development of Seismic, a system to assist structural designers to check their evolving designs against the seismic loading requirements of the Draft New Zealand Standard for structural design and design loadings, DZ4203:1986. The paper focusses on a description of methodologies found useful in the course of developing the system; in particular, techniques for initial project assessment, knowledge acquisition, and knowledge representation.", "num_citations": "10\n", "authors": ["1895"]}
{"title": "Thumbs Up: 3D Gesture Input on Mobile Phones Using the Front Facing Camera\n", "abstract": " We use the front facing camera in a smart phone to capture gesture input. Thumb gestures performed above the camera are recognized and used to invoke commands. In contrast to other input modalities the camera requires no device movements and no valuable screen space is used. To be viable, this type of interaction requires gestures which are comfortable and memorable for the user and real-time accurate recognition of those gestures. Given the performance constraints of phones and their cameras we needed to determine whether accurate and reliable recognition is possible and identify types of gestures that are recognizable and user appropriate. As a proof of concept, we conducted a user study testing three gestures for performance and user satisfaction. The results demonstrate that the 3D gestural input is successful and we provide detailed insights into successful recognition strategies for this\u00a0\u2026", "num_citations": "9\n", "authors": ["1895"]}
{"title": "Coordinating collaborative work in an integrated Information Systems engineering environment\n", "abstract": " The development of complex Information Systems requires the use of many Information Systems engineering tools. These diverse tools need to be integrated in order to be effectively used by multiple cooperating developers. In addition, the users of these environments require features that facilitate effective cooperation, such as support for collaboratively planning cooperative work, notification of changes to parts of a system under development (but only when necessary or desired), support for keeping aware of other developers' work contexts, and the ability to flexibly engineer or adapt development processes and methods. We describe an integrated Information Systems engineering environment which includes a work coordination tool supporting these requirements.", "num_citations": "9\n", "authors": ["1895"]}
{"title": "Serendipity: integrated environment support for process modelling, enactment and improvement\n", "abstract": " Large cooperative work systems require work coordination, context awareness and process modelling and enactment mechanisms to be effective. The Serendipity environment provides visual languages for specifying process models and event processing. Enacted models can be modified during or after use and can act as plans of work to be done, describe work in progress, and record work done on a project. Serendipity has been integrated with an Information Systems engineering environment and office automation applications, without modification to these pre-existing tools. Animation of process models allows collaborating users to remain aware of the work contexts of their collaborators. Information about the current enacted process stage is attached to descriptions of changes made to work artefacts, recording the context of work. Such changes are also stored by the process stage, allowing collaborators to review the stage work history. Serendipity's visual event processing language allows users to specify rules and actions triggered by enactment, process or work artefact modification, or tool events. This paper describes Serendipity, our experiences using it, and its architecture and implementation.", "num_citations": "9\n", "authors": ["1895"]}
{"title": "A declarative approach to inter-schema mappings\n", "abstract": " The requirements for the specification of mappings between tools in an integrated and interactive design system are described in this paper. The declarative mapping language, VML, is introduced. VML allows a high level, bidirectional specification of mappings between two arbitrary sch\u00e9mas. To illustrate the utility of VML a demonstration system consisting of plan definition and code conformance tools is integrated via a common data model using VML mappings. The VML mappings are capable of handling both relational and object-oriented style sch\u00e9mas as well as interactive and batch style design tools. We illustrate the use of VML to specify correspondences between classes, conditional application of correspondences, different styles of equivalence, initialisation conditions as well as method handling for interactive systems.", "num_citations": "9\n", "authors": ["1895"]}
{"title": "How people naturally describe robot behaviour\n", "abstract": " Existing novice robot programming systems are complex, which ironically makes them unsuitable for novices. We have analysed 19 reports of robot projects to inform development of an ontology of critical concepts that end user robot programming environments", "num_citations": "8\n", "authors": ["1895"]}
{"title": "Thermal Designer: an Application of an Object-Oriented Code Conformance Architecture\n", "abstract": " In an earlier paper an architecture was described for supporting code conformance applications based on Kea, an object-oriented functional language. Here we describe a prototype application, developed using Kea, for checking conformance with a thermal insulation standard. Called ThermalDesigner, this application incorporates an object-oriented building model, a graphical plan entry system for editing plans, and form-based interaction for obtaining non-plan information and supplying results to the user.", "num_citations": "8\n", "authors": ["1895"]}
{"title": "Corrections for horizontal winds and wind shear in raindrop size spectrometers\n", "abstract": " The effect of horizontal drag forces on raindrop trajectories is shown to influence strongly the detection efficiencies computed for drop cameras and disdrometers. Two examples of sheared flow involving real instruments are studied and it is found that whereas detection efficiencies remain high for both large and small drops, low detection efficiencies occur for drops of radius near 0.2 mm. These predictions are tested against field results from one of the instruments and it is shown that the theory of Rinehart is inadequate for small drops for this instrument.", "num_citations": "8\n", "authors": ["1895"]}
{"title": "Semi-automatic discovery of mapping rules to match XML Schemas\n", "abstract": " The conversion between two different XML languages that represent the same data differently is a common problem that occurs in many systems. The usual approach to solving this problem is to manually define a mapping that will convert one XML language into another. As this is both tedious and error-prone, it seems worthwhile to investigate possibilities of how to automatically discover the rules for these mappings. This project presents a prototype mapper that attempts to map XML elements by looking at the names of the elements, their types and the overall structure of the XML Schema. It implements multiple algorithms to find matches for elements that are later combined to determine the final output. Because schema mapping can require a great deal of domain knowledge, an extensible architecture is presented that will accept plugins providing additional matching algorithms. These plugins are simple to develop.Only in trivial cases will the resulting mapping be complete, some manual editing by the user is likely to be required. For this purpose a simple web interface is presented, but the prototype is constructed in a way that makes it easy to use as a component in other visual mapping tools.", "num_citations": "7\n", "authors": ["1895"]}
{"title": "Towards a lazy, evolutionary common building model\n", "abstract": " A lack of suitable standards for the transfer of building data from application to application has led to the need for a common building model. Such a model would enable a variety of design tools to access a common repository of building design information and thus avoid redundant data entry and resultant inconsistency.Much research work assumes that the data modelling for a common building model should be completed before systems are built. We instead take an evolutionary approach to developing a common building model, accepting that any such model will need to continue to evolve. It also means that we can begin to address some of the practical issues in providing a common building repository. In addition, it is usually assumed that the repository is (mostly) filled with data before it is used. We instead assume that data in the repository will be accumulated in a lazy fashion; i.e. it is entered by the user (as\u00a0\u2026", "num_citations": "7\n", "authors": ["1895"]}
{"title": "Cerno-II: A program visualization system\n", "abstract": " A program visualization system provides a visual representation of some aspect of a program\u2019s structure. Cerno-II is a visualization system that provides dynamic views of the data structures of an object-oriented program. A View can be created and modified interactively by the user, or created from a previously defined view template. A Display Specification Language has been created to allow the user to control the graphical representation of data structures. All views are automatically updated as the program runs.", "num_citations": "7\n", "authors": ["1895"]}
{"title": "ThinkFree: using a visual Wiki for IT knowledge management in a tertiary institution\n", "abstract": " We describe ThinkFree, an industrial Visual Wiki application which provides a way for end users to better explore knowledge of IT Enterprise Architecture assets that is held within a large enterprise wiki. The application was motivated by the difficulty users were facing navigating and understanding enterprise architecture information in a large corporate wiki. ThinkFree provides a graph based interactive visualization of IT assets which are described using the Freebase semantic wiki. It is used to visualize relationships between those assets and navigate between them. We describe the motivation for the development of ThinkFree, its design and implementation. Our experiences in corporate rollout of the application are discussed, together with the strengths of weaknesses of the approach we have taken and lessons learned from ThinkFree's development and deployment.", "num_citations": "6\n", "authors": ["1895"]}
{"title": "Constructing domain-specific design tools with a visual language meta-tool\n", "abstract": " Collaborative, visual design tools are typically difficult to build and evolve. We describe a meta tool for specification and generation of multiple view, multiple user visual design tools. The tool permits rapid specification of visual notational elements, underlying tool information model requirements, visual editors, the relationship between notational and model elements, and behavioural components. Tools are generated on the fly and can be used for modelling immediately. Changes to the meta tool specification are immediately reflected in any tool instances.", "num_citations": "6\n", "authors": ["1895"]}
{"title": "Software Architecture Modelling and Performance Analysis with Argo/MTE\n", "abstract": " We describe Argo/MTE, an extension of the open-source Argo/UML CASE tool that incorporates software architecture modelling facilities and performance test-bed code generation. We illustrate its application by example and explain the tool architecture and our experience using and evaluating it to date.", "num_citations": "6\n", "authors": ["1895"]}
{"title": "Functional extensions to an object-oriented programming language\n", "abstract": " Kea1 is a strongly-typed, object-oriented programming language with some functional and procedural features (Hamer, 1990; Hosking et al, 1990a). However, the functional aspects of the language are rather weak. To overcome these limitations, extensions to the language are proposed that are modelled on the capabilities of strongly-typed functional languages, transformed and integrated within the object-oriented framework of Kea.Functions are strongly typed; they may be higher-order and implicitly polymorphic. The implicit polymorphism is more general than inclusion and bounded parametric polymorphism (Cardelli and Wegner, 1985) and breaks down the distinction between overloading and other forms of polymorphism. A function may be multivariant, corresponding to a strongly-typed form of the multi-methods of CLOS (Keene, 1989). Multivariant functions permit despatching to be avoided in some cases and may be used to avoid the restrictions of the contravariance rule.", "num_citations": "6\n", "authors": ["1895"]}
{"title": "Developing software components with aspects: Some issues and experiences\n", "abstract": " fications and designs can use aspects to provide additional information about components and how aspects can be used to help implement more decoupled software components. We show how encoded aspect information can be used at run-time to support component plug-and-play, retrieval, and validation. We compare and contrast our approach to other component engineering methods and aspect-oriented software development techniques.", "num_citations": "6\n", "authors": ["1895"]}
{"title": "Connecting the pieces: integrated development of object-oriented systems using multiple views\n", "abstract": " SPE is an environment for developing object-oriented software. It allows a programmer to construct multiple visual and textual views of a program, each of which can be edited. All views are kept consistent through an underlying change propagation mechanism. Using this mechanism, together with tools which permit simple flow between phases, SPE encourages an evolutionary approach to object-oriented software development. Cerno is a complementary debugger/dynamic program visualisation package, developed using the same underlying architecture as SPE. Acting together, the two systems provide a very flexible and fluid environment spanning all phases of software development.", "num_citations": "4\n", "authors": ["1895"]}
{"title": "Visual specification of 3 D notations using 3 DComposer\n", "abstract": " 3D graphics has been used extensively to build virtual worlds and model real world objects. Less use has been made of 3D graphics as a medium for visual programming and visualisation, but some examples are Cube [6], Lingua Graphica [8], MAP [2], ToonTalk [5], SAM [3], the Cone Tree [7], and AMAZE 3D [1]. These show the potential for 3D notations. However, while there are many tools for constructing 3D models, none are designed specifically to support notation development and integration with backend language processing. This paper describes 3DComposer (3DC), a tool for visually constructing reusable software components with 3D appearance. It allows 3D notational elements, 3Dvixels, to be composed through direct manipulation of on-screen objects. Corresponding reusable software components (JavaBeans) are generated for the composed notations. These components can then be used as\u00a0\u2026", "num_citations": "3\n", "authors": ["1895"]}
{"title": "Guest editors introduction: special issue on innovative automated software engineering tools-part# 2.\n", "abstract": " This is the second part of our Special Issue on Innovative Automated Software Engineering Tools. Over 30 papers were submitted to the special issue, demonstrating the key role that tools have in the ASE research and practice communities. The five accepted papers appearing in this second part of the special issue underwent rigorous refereeing, major and minor revisions and then were selected for their scientific contributions. Coincidentally the papers cover an interesting range of ASE tool application areas, including model-based testing, embedded software engineering, symbolic execution and model checking, process-centred environments, and software evolution. Several of these innovative tools adopt service-based and compositional approaches to tool integration. Most have been validated not only on academic problems but also with significant industrial applications and software teams. We would like to\u00a0\u2026", "num_citations": "2\n", "authors": ["1895"]}
{"title": "Guest editors introduction: special issue on innovative automated software engineering tools.\n", "abstract": " BackgroundTraditionally Automated Software Engineering (ASE) has been supported by a variety of tools. These particularly include tools for theorem proving, model checking and other complex model analysis all being techniques which are extremely difficult if not impossible to do without tool support (Holzmann 1997). Other early ASE tools developed included tools to assist in requirements capture and analysis, particularly for very formal requirements modeling; tools to support software testing, particularly test case generation and test result analysis; and tools to support complex software development processes. These included CASE (Computer Aided Software Engineering) tools with model analysis features, process-centered environments with enactable software processes, project management tools, and version control and configuration management tools.", "num_citations": "2\n", "authors": ["1895"]}
{"title": "Second international workshop on interdisciplinary software engineering research:(WISER'06)\n", "abstract": " WISER is a series of international workshops that focus on identifying and transferring techniques from other disciplines that might usefully be applied to software engineering research and practice. The workshops address this topic through presentations and discussions of both actual case studies and of ways in which potentially useful approaches can be identified, adapted and adopted within software engineering. The papers in the proceedings address topics ranging from a general approach to identifying domains that have similar experimental practices to software engineering to specific case studies of the application of techniques from, for example, graph theory, strategic planning, economics and social and cognitive theory.", "num_citations": "2\n", "authors": ["1895"]}
{"title": "Generating Domain-Specific Eclipse Graphical Editors from High-level Meta-tool Specifications\n", "abstract": " \u2022 Its hard to build these things\u2026\u2013What are the \u201cright\u201d visual metaphor (s)?\u2013What model (s) do we need to represent/build?\u2013How to generate code/configurations from model?\u2013How do we achieve integration with other tools\u2013How do we make them practical for users?\u2022 Our approach to date:\u2013Meta-tool\u2013visual models/meta-model\u2013Import/export from model (XMI, Java, BPEL, WSDL, etc)", "num_citations": "2\n", "authors": ["1895"]}
{"title": "2003 IEEE Symposium on Human Centric Computing Languages and Environments: proceedings: October 28-31, 2003, Auckland, New Zealand\n", "abstract": " The papers in this book comprise the proceedings of the meeting mentioned on the cover and title page. They reflect the authors' opinions and, in the interests of timely dissemination, are published as presented and without change. Their inclusion in this publication does not necessarily constitute endorsement by the editors, the IEEE Computer Society, or the Institute of Electrical and Electronics Engineers, Inc.", "num_citations": "2\n", "authors": ["1895"]}
{"title": "A visual, Java-based componentware environment for constructing multi-view editing systems\n", "abstract": " We describe a collection of tools supporting the development of multiple view, JavaBeans based environments. The appearance and interactive behavious of graphical user interface components and editors is specified visually using BuildByWire, which generates JavaBeans component implementations. Multiple view, view consistency and cooperative work support is provided using the JViews toolkit, which provides specialisable classes for component repository and inter component consistency relationships. JComposer allows JViews components and relationships to be specified visually and combined with BuildByWire visual components, editors and third-part Java Beans to generate substantially complete multiple view environments.", "num_citations": "2\n", "authors": ["1895"]}
{"title": "Defining Multi-Disciplinary Views of a Computer Model of Buildings\n", "abstract": " The emergence of international standards for the representation of building product data will have a major impact on the development of design analysis tools in the building industry. Many foresee this impact as being an increase in the number of design tools which are poorly suited to the actual methods of the users. This will force the user to design and interact with the computer in a predetermined manner, a manner which is determined by the information requirements of the particular design tool.One approach to alleviating this problem is the development, and maintenance, of multiple views of the building model as required by different disciplines in the building profession (eg. architects, engineers, developers, etc.). This solution will provide a flexible method of accessing information in product data models to facilitate use by different building professionals with varying specialities and levels of expertise.", "num_citations": "2\n", "authors": ["1895"]}
{"title": "Non-occluding intelligent magnifiers for sketching on small displays\n", "abstract": " We present intelligent magnification techniques that combine distortion techniques with automatic content information awareness. They have been developed to support sketching on small displays. A first evaluation study that tested and compared three existing distortion lenses showed their general unsuitability for sketching. Based on these findings we developed and evaluated a new set of intelligent lenses, which use context information as the distortion regulator. The evaluation shows that using our new intelligent lenses leads to fewer errors, without time penalties, and with higher user satisfaction.", "num_citations": "1\n", "authors": ["1895"]}
{"title": "Supporting model driven engineering using the Marama meta toolset\n", "abstract": " The Marama project aims to develop an accessible and efficient meta toolset for rapidly constructing domain specific visual languages and environments to support integrated model driven engineering toolchains. Marama supports the rapid specification of visual notations and their underlying meta models, behavioural constraints, and model transformations. In this talk, I will describe the design and development of the open source Marama platform, together with a variety of enterprise system-oriented applications developed using Marama. These include a novel overlay based business service modelling environment and a dynamic supply chain modelling tool. In addition, I will describe plans for future development of Marama, together with related work that is applying some of the lessons we have gained from Marama to knowledge management oriented applications.", "num_citations": "1\n", "authors": ["1895"]}
{"title": "Confessions of a Meta-Modeller\n", "abstract": " Meta-modelling tools are a very useful technology in software engineering tool development, increasing a tool developer s productivity and permitting more focus on the new tool s metaphorical abstractions and notations rather than the technical features of implementation. Constructing meta-modelling tools is, however, a challenging occupation with many interacting technical needs. In the process of managing these needs, the question of diagram layout support has typically been seen as being of low priority. This results in an inability for meta-tool users to specify their notational metaphors efficiently or appropriately, and for the generated tools to be unable to effectively manage diagrams of significant scale and complexity. In this presentation I will examine the deficiencies of current meta-tool layout approaches and the problems these cause for notational designers, tool implementers and end users. I will then\u00a0\u2026", "num_citations": "1\n", "authors": ["1895"]}
{"title": "Human-Computer Interaction Issues For The Configuration Of Component-Based Software Systems\n", "abstract": " Providing appropriate support for end-user configuration of component-based software systems is difficult. We discuss some of the key HCI issues we have identified to do with supporting this, and illustrate a variety of end-user configuration support approaches from a Collaborative Information System we have been developing. These range from visual structural composition and event handling specification to detailed parameterisation and semi-automated guidance. Novel approaches for understanding and retrieving components are also presented. We briefly discuss our approach to designing and implementing such component-based systems configuration facilities.", "num_citations": "1\n", "authors": ["1895"]}
{"title": "The software engineering academy's role in industrial innovation\n", "abstract": " Summary form only given. Universities are under increasing pressure globally to both diversify revenue streams, and develop a role beyond simply teaching and research and, particularly in the technological disciplines such as our own, to act as agents for economic development and change. This diversification of roles naturally creates tensions between investigator led curiosity driven research and applied research that has the potential for more immediate economic impact. The introduction of research quality measurement frameworks such as those in New Zealand and Australia exacerbate this tension. In this article, the author gives a personal perspective on how these tensions can be mitigated, in the process generating a win-win partnership with industry. This requires compromises on both sides of the industry academic divide but can be immensely rewarding in both an academic and a financial sense. The\u00a0\u2026", "num_citations": "1\n", "authors": ["1895"]}
{"title": "A Petri net-based environment for GUI design\n", "abstract": " We describe PUIST, a visual environment for graphical user interface specification and prototyping. PUIST uses a Petri net notation, with a declarative means of defining nets which have complex, yet regular interconnections. This significantly improves the understandability of large specifications, permitting PUIST to be used for complex interface component specification, analysis and prototyping.", "num_citations": "1\n", "authors": ["1895"]}
{"title": "Keeping free-edited textual and graphical views of information consistent\n", "abstract": " Multi-view editing is useful in many situations where users of a software application want to see and interact with different representations of the same information. This paper describes a new approach to keeping free-edited multiple textual and graphical views of information consistent. Descriptions of changes to information items are displayed in various ways in the multiple views of these items. Users can request an editing tool to automatically apply changes to a view, select a change to make from a range of possible changes, or manually implement changes to maintain view consistency. Semantic errors, user-defined changes and hierarchical changes can be represented, and this technique also supports flexible view consistency for cooperative work systems. Experience with this technique in several diverse multi-view editing environments is described.", "num_citations": "1\n", "authors": ["1895"]}
{"title": "From FireCode to ThermalDesign: KBS for the building industry\n", "abstract": " From FireCode to thermaldesign: KBS for the building industry: New Zealand Journal of Computing: Vol 2, No 1 ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search New Zealand Journal of Computing Periodical Home Latest Issue Archive Authors Affiliations Award Winners More HomeBrowse by TitlePeriodicalsNew Zealand Journal of ComputingVol. , No. From FireCode to thermaldesign: KBS for the building industry article From FireCode to thermaldesign: KBS for the building industry Share on Authors: JG Hosking profile image JG Hosking View Profile , John Hamer profile image J. Hamer View Profile , Warwick B Mugridge profile image WB Mugridge View Profile , AH Dechapunya profile image AH \u2026", "num_citations": "1\n", "authors": ["1895"]}
{"title": "A method for introducing schemas\n", "abstract": " A simple file schema system is described which is useful for introducing undergraduate students to the concepts and uses of database schemas. Practical exercises using the system provide valuable reinforcement to the formal lessons.", "num_citations": "1\n", "authors": ["1895"]}