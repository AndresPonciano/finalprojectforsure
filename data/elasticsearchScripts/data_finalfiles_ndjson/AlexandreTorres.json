{"title": "Twenty years of object-relational mapping: A survey on patterns, solutions, and their implications on application design\n", "abstract": " ContextAlmost twenty years after the first release of TopLink for Java, Object-Relational Mapping Solutions (ORMSs) are available at every popular development platform, providing useful tools for developers to deal with the impedance mismatch problem. However, no matter how ubiquitous these solutions are, this essential problem remains as challenging as ever. Different solutions, each with a particular vocabulary, are difficult to learn, and make the impedance problem looks deceptively simpler than it really is.ObjectiveThe objective of this paper is to identify, discuss, and organize the knowledge concerning ORMSs, helping designers towards making better informed decisions about designing and implementing their models, focusing at the static view of persistence mapping.MethodThis paper presents a survey with nine ORMSs, selected from the top ten development platforms in popularity. Each ORMS was\u00a0\u2026", "num_citations": "38\n", "authors": ["2140"]}
{"title": "Towards a UML profile for model-driven object-relational mapping\n", "abstract": " By using UML (Unified Modeling Language) and ER (Entity Relationship) notations to describe a system, the specification of persistent and transient details became separated. UML and ER models use distinct notations, that cannot be checked for consistence, and therefore are not suitable to be used in a model driven development approach. This paper proposes a synergistic approach to persistence modeling by extending UML with a profile that represents object-relational mapping concepts, and provides rules to check the coherence between persistence and object oriented concepts. Model driven transformations are proposed, and implemented by a tool, in order to turn models into object relational mapped systems based upon the JPA (Java Persistence API) standard.", "num_citations": "24\n", "authors": ["2140"]}
{"title": "A synergistic model-driven approach for persistence modeling with UML\n", "abstract": " The Model Driven Development (MDD) approach proposes that models (and model-to-model transformations) play the main role on system development. However, there is not a consensual notation to model persistence based upon object-relational mapping frameworks: while UML lacks specific resources for persistence modeling, the entity-relationship model does not make reference to the dynamic concepts existing in UML.This paper proposes MD-JPA, a UML profile for persistence modeling based on the well-known Java Persistence API 2 (JPA) standard for object-relational mapping, pursuing the modeling of transient and persistent elements in a more coherent and synergistic way. This paper describes the main characteristics of MD-JPA as well as the way that models that adopt such profile can them be used to generate a Java implementation by the application of the proposed model transformations on a\u00a0\u2026", "num_citations": "12\n", "authors": ["2140"]}
{"title": "ENORM: An Essential Notation for Object-Relational Mapping\n", "abstract": " Despite the growing adoption of object-relational mapping frameworks, UML and its most widespread extensions do not represent these mappings in a platform independent way. Maintaining mappings scattered in the code is difficult and error prone, specially if the schema is large and serves several systems. This paper proposes ENORM, a notation that extends class models representing all the essential mappings. ENORM is platform independent, providing a meta-model based on design patterns employed by three frameworks of Java, Ruby, and Python languages. An empirical evaluation indicates that ENORM performs well in comparison to separated models.", "num_citations": "5\n", "authors": ["2140"]}
{"title": "MD-JPA profile: A model driven language for Java persistence\n", "abstract": " 1. INTRODUCTION'h# L)# L) w! h! j\"-./0 h\" 1! w\" 2)\")-. 0'h 1 3 h\") 4)-/0 5 5\" 1 h\"!! h# L 4 h 5 6 wh w\"'h# D 5 D 5\")# DD)\"\" h 2 hh 1 5\"\"\"\" h wh\" w-20 1# DD\"\" hh\" 3 h! h\"! h 6! 1-80\"# L 4!\"! 3 9 hh! w 3 hh! j 3\" h\"!-. 0:! j 3#\"\"):#) w 2 h\"\"! w\" 5-. 0'h J 5) J)-; 0 w 1\"\":# h J 5\"! h\"! h! j\" 3!\" wh J 5\"< w 5 h:# 2 h 6\"\"'h\"\"\"\"# D3J# L\" h! h\"! w h J whh# DD\"\" h= hh 63 1! hw 35\" 1 h h\" h 1'h# D3J\" 5! 1 hw J\"! 3\"'h! h\"\"# L\" h\" 6!\"\"! 1# L# 5 h 2 3\"! wh:# h 3\"\" 5\"'hh\"\" 3 w 2\" w 2\" 3:#/\" h", "num_citations": "2\n", "authors": ["2140"]}
{"title": "MD-JPA: um perfil UML para modelagem do mapeamento objeto-relacional com JPA em uma abordagem dirigida por modelos\n", "abstract": " A abordagem de desenvolvimento dirigido por modelos (DDM) prop\u00f5e que modelos (e transforma\u00e7\u00f5es entre modelos) assumam o papel principal no desenvolvimento de sistemas. Entretanto, n\u00e3o h\u00e1 uma nota\u00e7\u00e3o consensual para modelagem de persist\u00eancia baseada em arcabou\u00e7os de mapeamento objeto-relacional: enquanto a UML n\u00e3o possui recursos espec\u00edficos para a modelagem de persist\u00eancia, o modelo entidade-relacionamento n\u00e3o expressa os conceitos din\u00e2micos existentes na UML. Este trabalho prop\u00f5e o perfil UML MD-JPA (Model Driven JPA) para a modelagem de persist\u00eancia baseada na j\u00e1 difundida API de persist\u00eancia Java (JPA), buscando a modelagem dos elementos persistentes e transientes de forma mais coerente e integrada. S\u00e3o especificadas as principais caracter\u00edsticas do perfil MD-JPA, assim como a maneira pela qual modelos que adotam este perfil podem ser transformados em implementa\u00e7\u00e3o Java, atrav\u00e9s de transforma\u00e7\u00f5es de modelos propostas em uma abordagem DDM. Por fim, uma ferramenta de c\u00f3digo livre foi desenvolvida para disponibilizar para comunidade os resultados deste trabalho.", "num_citations": "1\n", "authors": ["2140"]}