{"title": "On the Modernization of Explorviz towards a Microservice Architecture\n", "abstract": " Software systems evolve during their lifetime and therefore face several challenges. Changing requirements or upcoming feature requests make modifications or extensions inevitable. Especially long-living software systems have often been built as monolithic applications and are based on obsolescent architectures and technologies. This circumstance makes it difficult for developers to maintain or extend software. In this paper, we report on the modernization process of our open source research project ExplorViz - moving from a monolithic towards a microservice architecture. We describe our previous version within the project and present how we solved the modernization and handled occurring problems. Afterwards, we illustrate our modernized software system and point out the obtained benefits. Finally, we delineate open questions for the ongoing development.", "num_citations": "23\n", "authors": ["951"]}
{"title": "Modularization of research software for collaborative open source development\n", "abstract": " Software systems evolve over their lifetime. Changing conditions, such as requirements or customer requests make it inevitable for developers to perform adjustments to the underlying code base. Especially in the context of open source software where everybody can contribute, requirements can change over time and new user groups may be addressed. In particular, research software is often not structured with a maintainable and extensible architecture. In combination with obsolescent technologies, this is a challenging task for new developers, especially, when students are involved. In this paper, we report on the modularization process and architecture of our open source research project ExplorViz towards a microservice architecture. The new architecture facilitates a collaborative development process for both researchers and students. We describe the modularization measures and present how we solved occurring issues and enhanced our development process. Afterwards, we illustrate our modularization approach with our modernized, extensible software system architecture and highlight the improved collaborative development process. Finally, we present a proof-of-concept implementation featuring several developed extensions in terms of architecture and extensibility.", "num_citations": "22\n", "authors": ["951"]}
{"title": "Microservice decomposition via static and dynamic analysis of the monolith\n", "abstract": " Migrating monolithic software systems into microservices requires the application of decomposition techniques to find and select appropriate service boundaries. These techniques are often based on domain knowledge, static code analysis, and non-functional requirements such as maintainability. In this paper, we present our experience with an approach that extends static analysis with dynamic analysis of a legacy software system's runtime behavior, including the live trace visualization to support the decomposition into microservices. Overall, our approach combines established analysis techniques for microservice decomposition, such as the bounded context pattern of domain-driven design, and enriches the collected information via dynamic software visualization to identify appropriate microservice boundaries. In collaboration with the German IT service provider adesso SE, we applied our approach to their\u00a0\u2026", "num_citations": "19\n", "authors": ["951"]}
{"title": "Combining kieker with gephi for performance analysis and interactive trace visualization\n", "abstract": " In this paper, we report on our performance analysis of the Perl-based open repository software EPrints, which has now been continuously developed for more than fifteen years. We analyse and evaluate the software using Kieker, and employ the visualization tool Gephi for performance analysis and interactive trace visualization. This allows us, in collaboration with the EPrints development team, to reverse engineer their software EPrints, to give new and unexpected insights, and to detect potential bottlenecks.", "num_citations": "17\n", "authors": ["951"]}
{"title": "Hands-on: Experiencing Software Architecture in VirtualReality\n", "abstract": " Recently, virtual reality (VR) and gesture-based interface devices emerged at the consumer market.   Both concepts offer new visualization and interaction capabilities, which can improve the user experience when using software. In Software Engineering, exploring and comprehending software systems is often addressed via visualization techniques.  In this paper, we present our VR approach to explore software systems by using a head-mounted display and two different gesture-based interaction devices. Hence, we achieve a more immersive user experience and natural interaction, which benefits the comprehension process. Our VR approach is integrated into ExplorViz, our tool for live trace visualization of large software landscapes. In order to emphasize the advantages, we apply our combined approach on a small software system, running within our web-based tool ExplorViz. In this context, we present both, the visualization and the interaction capabilities.", "num_citations": "10\n", "authors": ["951"]}
{"title": "Simplifying software system monitoring through application discovery with explorviz\n", "abstract": " Keeping an overview of software systems is a crucial task in the area of software engineering. Often this task is supported by application performance management (APM) tools, e.g., Kieker, a monitoring framework based on dynamic software analysis. Kieker is highly extensible and customizable, but lacks a user-friendly setup configuration due to its framework characteristic. Based on this obstacle, users of our live trace visualization tool ExplorViz, which employs Kieker, experience problems during monitoring their applications. In this paper, we report on our ExplorViz application discovery and monitoring management system (ADAMMS) to circumvent this drawback. The key concept is to utilize a software agent that simplifies the discovery of running applications within operating systems. Furthermore, the ADAMMS properly configures and manages Kieker instances to monitor these applications. Thereupon, we demonstrate how the monitoring procedure can be eased and how both open source projects - ExplorViz and Kieker mutually benefit from our approach.  Finally, we conduct a first pilot study to evaluate the usability of our approach with respect to an easy-to-use application monitoring.", "num_citations": "10\n", "authors": ["951"]}
{"title": "Architectural Runtime Modeling and Visualization for Quality-Aware Devops in Cloud Applications\n", "abstract": " In this paper, we present a tutorial on modeling and visualizing software architectures in form of architectural runtime models to support quality-aware DevOps in cloud applications. The tutorial is held in context of the 2017 14th IEEE International Conference on Software Architecture to share our findings and experiences with conference participants and give them the opportunity to expand their knowledge and skills on software architecture modeling, visualization, and analysis in development and operations.", "num_citations": "10\n", "authors": ["951"]}
{"title": "ExplorViz: Research on software visualization, comprehension and collaboration\n", "abstract": " ExplorViz supports research on software visualization, software comprehension tasks and software collaboration. To achieve this, ExplorViz provides multi-level visualization from the software landscape layer toward the level of individual software applications. Via immersive 3D visualizations in virtual reality, ExplorViz also supports collaboration in software development teams. The research tool development commenced in 2012, and grew toward a powerful, extensible open-source software that has been employed in a variety of software engineering research projects. In this paper, we review its history, development and research impact.", "num_citations": "9\n", "authors": ["951"]}
{"title": "Juggling with Data: On the Lack of Database Monitoring in Long-Living Software Systems\n", "abstract": " Long-living software systems often challenge associated software engineers and operators with changing requirements or increasing workload. In addition, performance issues or customer requests may cause inevitable software updates or refactoring tasks. These legacy systems are often based on outdated technologies and are poorly documented. In combination with insufficient knowledge of the (actual) system, the necessary transformations can be difficult. While the described situation is discussed in the software engineering community, databases are rarely covered. As databases are an essential part in almost every software system, they are affected by evolutionary tasks as well and have to face the same challenges. In this paper, we (i) describe problems based on non-existing database monitoring in long-living software systems and (ii) propose an approach as a solution, which addresses the described problems, and supports developers and operators in performing evolutionary tasks alike. Finally, we conclude and delineate open questions concerning our envisioned approach.", "num_citations": "8\n", "authors": ["951"]}
{"title": "Performance analysis of legacy perl software via batch and interactive trace visualization\n", "abstract": " Performing an analysis of established software usually is challenging. Based onreverse engineering through dynamic analysis, it is possible to perform a software performance analysis, in order to detect performance bottlenecks or issues. This process is often divided into two consecutive tasks. The first task concerns the monitoring of the legacy software, and the second task covers analysing and visualizing the results. Dynamic analysis is usually addressed via trace visualization, but finding an appropriate representation for a specific issue still remains a great challenge. In this paper we report on our performance analysis of the Perl-based open repository software EPrints, which has now been continuously developed for more than fifteen years. We analyse and evaluate the software using the Kieker monitoring framework, and apply and combine two types of visualization tools, namely Graphviz and Gephi. More precisely, we employ Kieker to reconstruct architectural models from recorded monitoring data, based on dynamic analysis, and Graphviz respectively Gephi for further analysis and visualization of our monitoring results. We acquired knowledge of the software through our instrumentation and analysis via Kieker and the combined visualization of the two aforementioned tools. This allowed us, in collaboration with the EPrints development team, to reverse engineer their software EPrints, to give new and unexpected insights, and to detect potential bottlenecks.", "num_citations": "7\n", "authors": ["951"]}
{"title": "On the Modularization of ExplorViz towards Collaborative Open Source Development\n", "abstract": " Software systems evolve over their lifetime. Changing conditions such as requirements or customer requests make it inevitable for developers to perform adjustments to the underlying code base. Especially in the context of open source software where everybody can contribute, demands can change over time and new user groups may be addressed. In particular, research software is often not structured with a maintainable and extensible architecture. In combination with obsolescent technologies, this is a challenging task for developers, especially, when students are involved.   In this paper, we report on the modularization process and architecture of our open source research project ExplorViz towards a microservice architecture, which facilitates a collaborative development process for both researchers and students. We describe the modularization measures and present how we solved occurring issues and enhanced our development process. Afterwards, we illustrate our modularization approach with our modernized, extensible software system architecture and highlight the improved collaborative development process. Finally, we present a proof-of-concept implementation featuring several developed extensions in terms of architecture and extensibility.", "num_citations": "5\n", "authors": ["951"]}
{"title": "The collaborative modularization and reengineering approach CORAL for open source research software\n", "abstract": " Software systems evolve over their lifetime. Changing requirements make it inevitable for developers to modify and extend the underlying code base. Especially in the context of open source software where everybody can contribute, requirements can change over time and new user groups may be addressed. In particular, research software is often not structured with a maintainable and extensible architecture. In combination with obsolescent technologies, this is a challenging task for new developers, especially, when students are involved. In this paper, we report on the modularization process and architecture of our open source research project ExplorViz towards a microservice architecture. The new architecture facilitates a collaborative development process for both researchers and students. We explain our employed iterative modularization and reengineering approach \\coral, applied measures, and describe how we solved occurring issues and enhanced our development process. Afterwards, we illustrate the application of our modularization approach and present the modernized, extensible software system architecture and highlight the improved collaborative development process. After the first iteration of the process, we present a proof-of-concept implementation featuring several developed extensions in terms of architecture and extensibility. After conducting the second iteration, we achieved a first version of a microservice architecture and an improved development process with room for improvement, especially regarding service decoupling. Finally, as a result of the third iteration, we illustrate our improved implementation and\u00a0\u2026", "num_citations": "4\n", "authors": ["951"]}
{"title": "Live Visualization of Database Behavior for Large Software Landscapes: The RACCOON Approach\n", "abstract": " Databases are essential components within large software landscapes, since they are employed in almost every information system. Based on the growing complexity of software systems and a steadily increasing amount of data which is collected, processed, and stored in databases, it is difficult to obtain a live overview of these software landscapes. This often leads to an insufficient knowledge of the actual internal structure and behavior of employed databases. Furthermore, databases are often involved in performance issues within information systems.  A solution to these problems is employing live visualizations of databases and related communication from applications within the software landscape. These visualizations allow operators to understand their databases in detail and to analyze database queries performed by applications. Based on established visualization concepts like the entity relationship diagrams and the 3D city metaphor, operators can be supported in the task of database comprehension. Established monitoring techniques, like dynamic and static analysis, can be used to capture necessary information from applications and databases.  In this paper, we present our live visualization approach of databases and associated communication for large software landscapes. Our visualization offers two different views \u2013 a landscape-level and a database-level perspective. The landscape-level perspective provides an overview of monitored applications and related databases. The database-level perspective reveals database schemas within a database, shows contained tables and relationships, and allows for the inspection of\u00a0\u2026", "num_citations": "3\n", "authors": ["951"]}
{"title": "Performance monitoring of database operations\n", "abstract": " The complexity of software projects and related software systems advances and likewise the quantity of data increases. Therefore within the area of software development, performance engineering is a popular topic. This is usually connected to performance tuning of a software system. Performance problems are often related to database operations, as complex database queries challenge the software engineer to achieve efficiency.  In order to aid the process of analyzing performance problems, in the context of database communication, it is useful to conduct a performance analysis focused on database statements, which are executed by the software system. Most tools, which support a performance analysis, cover just business operations, e.g., operation calls in Java. So seeking a suitable tool for this purpose is challenging, as we focus on database communication and software, which is freely-available.  In this thesis, we present an aspect-oriented approach for performance monitoring of database operations, in order to support software engineers in conducting a performance analysis. As we developed our monitoring approach in a generic manner, we allow several monitoring tools to use our generated monitoring records as input data for posterior analysis and visualization purposes. We verified the versatility of our monitoring approach through the integration into Kieker Trace Diagnosis, a graphical user interface for displaying program traces, followed by another tool, ExplorViz. As proof of concept, we investigated the first usage of our developed software by evaluating the usability through a first experiment based on a paper-based\u00a0\u2026", "num_citations": "2\n", "authors": ["951"]}
{"title": "An Elastic Layers Pattern Approach with Dynamically Added Layers\n", "abstract": " Cloud environments often provide dynamic resource allocation techniques. These can be used to scale single components or even whole software systems according to their current workload. Fluctuating workloads can occur in different layers of the software architecture and need appropriate handling to meet performance requirements. Scaling workload-intensive components in combination with load-balancing can be used to deal with these issues. Therefore, we present a parallel layers approach, which extends an existing pattern regarding improved elasticity. Based on dynamically adding layers on top of bottleneck layers, we increase the exibility and performance of related architectures. Furthermore, we describe a first design approach, implementation and an evaluation of the feasibility.", "num_citations": "1\n", "authors": ["951"]}