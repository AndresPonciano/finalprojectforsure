{"title": "Maintenance effort estimation for open source software: A systematic literature review\n", "abstract": " Open Source Software (OSS) is distributed and maintained collaboratively by developers all over the world. However, frequent personnel turnover and lack of organizational management makes it difficult to capture the actual development effort. Various OSS maintenance effort estimation approaches have been developed to provide a way to understand and estimate development effort. The goal of this study is to identify the current state of art of the existing maintenance effort estimation approaches for OSS. We performed a systematic literature review on the relevant studies published in the period between 2000-2015 by both automatic and manual searches from different sources. We derived a set of keywords from the research questions and established selection criteria to carefully choose the papers to evaluate. 29 out of 3,312 papers were selected based on a well designed selection process. Our results show\u00a0\u2026", "num_citations": "25\n", "authors": ["1000"]}
{"title": "How do defects hurt qualities? an empirical study on characterizing a software maintainability ontology in open source software\n", "abstract": " Beyond the functional requirements of a system, software maintainability is essential for project success. While there exists a large knowledge base of software maintainability, this knowledge is rarely used in open source software due to the large number of developers and inefficiency in identifying quality issues. To effectively utilize the current knowledge base in practice requires a deeper understanding of how problems associated with the different qualities arise and change over time. In this paper, we sample over 6000 real bugs found from several Mozilla products to examine how maintainability is expressed with subgroups of repairability and modifiability. Furthermore, we manually study how these qualities evolve as the products mature, what the root causes of the bugs are for each quality and the impact and dependency of each quality. Our results inform which areas should be focused on to ensure\u00a0\u2026", "num_citations": "17\n", "authors": ["1000"]}
{"title": "Understanding feature requests by leveraging fuzzy method and linguistic analysis\n", "abstract": " In open software development environment, a large number of feature requests with mixed quality are often posted by stakeholders and usually managed in issue tracking systems. Thoroughly understanding and analyzing the real intents that feature requests imply is a labor-intensive and challenging task. In this paper, we introduce an approach to understand feature requests automatically. We generate a set of fuzzy rules based on natural language processing techniques that classify each sentence in feature requests into a set of categories: Intent, Explanation, Benefit, Drawback, Example and Trivia. Consequently, the feature requests can be automatically structured based on the classification results. We conduct experiments on 2,112 sentences taken from 602 feature requests of nine popular open source projects. The results show that our method can reach a high performance on classifying sentences from\u00a0\u2026", "num_citations": "13\n", "authors": ["1000"]}
{"title": "Improving missing issue-commit link recovery using positive and unlabeled data\n", "abstract": " Links between issue reports and corresponding fix commits are widely used in software maintenance. The quality of links directly affects maintenance costs. Currently, such links are mainly maintained by error-prone manual efforts, which may result in missing links. To tackle this problem, automatic link recovery approaches have been proposed by building traditional classifiers with positive and negative links. However, these traditional classifiers may not perform well due to the inherent characteristics of missing links. Positive links, which can be used to build link recovery model, are quite limited as the result of missing links. Since the construction of negative links depends on the number of positive links in many existing approaches, the available negative links also become restricted. In this paper, we point out that it is better to consider the missing link problem as a model learning problem by using positive and\u00a0\u2026", "num_citations": "11\n", "authors": ["1000"]}
{"title": "The key roles of maintainability in an ontology for system qualities\n", "abstract": " In our INCOSE IS 2015 paper, \u201cAn Initial Ontology for System Qualities,\u201d (SQs), we provided an IDEF5 class hierarchy of upper\u2010level SQs, where the top level reflected classes of stakeholder value propositions (Mission Effectiveness, Resource Utilization, Dependability, Flexibility), and the next level identified means\u2010ends enablers of the higher\u2010level SQs. In experimenting with, refining and formalizing the ontology, we focused on a depth\u2010first approach on a chosen SQ: Maintainability. It is key to reducing 75% of most systems\u2019 life cycle costs. Also Maintainability plays key roles in three of the four top\u2010level SQs: Resource Utilization (now called Life Cycle Efficiency) Dependability, and Flexibility (now called Changeability). Dependability also needs Maintainability to relate Reliability to Availability; and Changeability also needs Maintainability to address new system challenges and opportunities. This paper\u00a0\u2026", "num_citations": "11\n", "authors": ["1000"]}
{"title": "Is It a New Feature or Simply \u201cDon't Know Yet\u201d?: On Automated Redundant OSS Feature Requests Identification\n", "abstract": " Open source projects rely on issue tracking systems such as JIRA or online forums to keep track of users' feedback, expectations and requested features. However, since users are not fully aware of existing features, when submitting new feature requests, redundant requests often appear in the new feature list. It is a waste of time and effort for project contributors to manually identify and reject them, especially in complex systems with many features. Our research is aiming to find a suitable solution to identify redundant feature requests in OSS projects. We have conducted a survey on a well-known Open Source community, Hibernate and gathered all of its feature requests up-to-date. Through studying and categorizing the characteristics of these feature requests, we have found that about 37% of the feature requests were rejected and the most common rejection reason was redundancy. Also we have found that it is\u00a0\u2026", "num_citations": "6\n", "authors": ["1000"]}
{"title": "PCSsampler: Sample-based, Private-state Cluster Scheduling\n", "abstract": " As a promising alternative to centralized scheduling, sample-based scheduling is especially suitable for high fan-out workloads that contain a large number of interactive jobs. Compared to centralized schedulers, existing sample-based schedulers do not hold a global view of the cluster's resource status. Instead, the scheduling decisions are made solely based on the status of a small set of randomly sampled workers. Although this simple approach is highly efficient in large clusters, the lack of global knowledge of the cluster can lead to sub-optimal task placement decisions and difficulties in enforcing global scheduling policies. In this paper, we address these challenges in existing sample-based scheduling approaches by allowing the scheduler to maintain an approximate version of the global resource status through caching the worker node's status extracted from reply messages. More specifically, we introduce\u00a0\u2026", "num_citations": "5\n", "authors": ["1000"]}
{"title": "Assessing software understandability in systems by leveraging fuzzy method and linguistic analysis\n", "abstract": " Many if not most software-intensive systems have their mission-critical software modified by people other than its developers. The resulting misunderstandings often seriously compromise the missions the system is supporting (over 80% of the functionality in most current ground, sea, air, and space vehicles depends on software). There is a major need for models, methods, processes, and tools for identifying sources and effects of software misunderstandings, both in preparation for the system\u2019s software use and evolution, and in evaluating modified software to avoid further examples of misunderstanding. Emphasizing high software understandability enables system maintainers to avoid these misunderstandings as they modify existing software systems. However, while many metrics for understandability have been developed, with the majority of them being source code based, little to no correlation has been found\u00a0\u2026", "num_citations": "4\n", "authors": ["1000"]}
{"title": "Software domains in incremental development productivity decline\n", "abstract": " This research paper expands on a previously introduced phenomenon called Incremental Development Productivity Decline (IDPD) that is presumed to be present in all incremental software projects to some extent. Incremental models are now being used by many organizations in order to reduce development risks. Incremental development has become the most common method of software development. Therefore its characteristics inevitably influence the productivity of projects. Based on their observed IDPD, incrementally developed projects are split into several major IDPD categories. Different ways of measuring productivity are presented and evaluated in order to come to a definition or set of definitions that is suitable to these categories of projects. Data has been collected and analyzed, indicating the degree of IDPD associated with each category. Several hypotheses have undergone preliminary evaluations\u00a0\u2026", "num_citations": "4\n", "authors": ["1000"]}
{"title": "Exploring the dependency relationships between software qualities\n", "abstract": " Software-intensive systems are expected to meet a variety of non-functional quality objectives essential for proper system functioning. However, there is still a lack of an effective estimation method for overall quality. Previous work has shown that it is possible to evaluate software systems' qualities based on issue summaries; however, this requires large amounts of manual effort to employ. There is a need for automated methods which can evaluate software systems as they evolve. Moreover, system qualities do not always change independently of each other. There are various dependencies which need to be taken into consideration when looking to make quality improvements. In this paper we look to explore the dependencies between bugs and the qualities they express. We have a fuzzy classifier that uses issue summaries to identify and summarize the quality of software with respect to maintainability, thus we\u00a0\u2026", "num_citations": "3\n", "authors": ["1000"]}
{"title": "Dialogue Disentanglement in Software Engineering: How Far are We?\n", "abstract": " Despite the valuable information contained in software chat messages, disentangling them into distinct conversations is an essential prerequisite for any in-depth analyses that utilize this information. To provide a better understanding of the current state-of-the-art, we evaluate five popular dialog disentanglement approaches on software-related chat. We find that existing approaches do not perform well on disentangling software-related dialogs that discuss technical and complex topics. Further investigation on how well the existing disentanglement measures reflect human satisfaction shows that existing measures cannot correctly indicate human satisfaction on disentanglement results. Therefore, in this paper, we introduce and evaluate a novel measure, named DLD. Using results of human satisfaction, we further summarize four most frequently appeared bad disentanglement cases on software-related chat to insight future improvements. These cases include (i) ignoring interaction patterns; (ii) ignoring contextual information; (iii) mixing up topics; and (iv) ignoring user relationships. We believe that our findings provide valuable insights on the effectiveness of existing dialog disentanglement approaches and these findings would promote a better application of dialog disentanglement in software engineering.", "num_citations": "1\n", "authors": ["1000"]}
{"title": "Recent Trends in Software Quality Interrelationships: A Systematic Mapping Study\n", "abstract": " Despite the importance of software qualities, they are not well understood, especially in the context of the interrelationships between qualities. A number of systematic mapping studies have been conducted prior to 2015 to summarize the literature on the topic and to identify research gaps. To provide a better understanding of the current state of the art, we conducted a systematic mapping study on relevant studies from 2015 to 2019 through a database search and a subsequent snowballing approach. In total, 18 studies were selected as the study subjects wherein we evaluated the types of software quality interrelationships and the qualities that comprise them. Based on our findings, we report on the progress made to address previously identified research gaps.", "num_citations": "1\n", "authors": ["1000"]}
{"title": "Characterizing software maintainability in issue summaries using a fuzzy classifier\n", "abstract": " Despite the importance of software maintainability in the life cycle of software systems, accurate measurement remains difficult to achieve. Previous work has shown how bug reports can be classified by expressed quality concerns which can give insight into maintainability across domains and over time. However, the amount of manual effort required to produce such classifications limits its usage. In this paper, we build a fuzzy classifier with linguistic patterns to automatically map issue summaries into the seven subgroup SQ classifications provided in a software maintainability ontology. We investigate how long it takes to generate a stable set of rules and evaluate the performance of the rule set on both rule generating and nonrule generating projects. The results validate the generalizability of the fuzzy classifier in correctly and automatically identifying the subgroup SQ classifications from given issue summaries\u00a0\u2026", "num_citations": "1\n", "authors": ["1000"]}