{"title": "Event-based traceability for managing evolutionary change\n", "abstract": " Although the benefits of requirements traceability are widely recognized, the actual practice of maintaining a traceability scheme is not always entirely successful. The traceability infrastructure underlying a software system tends to erode over its lifetime, as time-pressured practitioners fail to consistently maintain links and update impacted artifacts each time a change occurs, even with the support of automated systems. This paper proposes a new method of traceability based upon event-notification and is applicable even in a heterogeneous and globally distributed development environment. Traceable artifacts are no longer tightly coupled but are linked through an event service, which creates an environment in which change is handled more efficiently, and artifacts and their related links are maintained in a restorable state. The method also supports enhanced project management for the process of updating and\u00a0\u2026", "num_citations": "421\n", "authors": ["1458"]}
{"title": "Software traceability: trends and future directions\n", "abstract": " Software traceability is a sought-after, yet often elusive quality in software-intensive systems. Required in safety-critical systems by many certifying bodies, such as the USA Federal Aviation Authority, software traceability is an essential element of the software development process. In practice, traceability is often conducted in an ad-hoc, after-the-fact manner and, therefore, its benefits are not always fully realized. Over the past decade, researchers have focused on specific areas of the traceability problem, developing more sophisticated tooling, promoting strategic planning, applying information retrieval techniques capable of semi-automating the trace creation and maintenance process, developing new trace query languages and visualization techniques that use trace links, and applying traceability in specific domains such as Model Driven Development, product line systems, and agile project environments. In this\u00a0\u2026", "num_citations": "315\n", "authors": ["1458"]}
{"title": "Goal-centric traceability for managing non-functional requirements\n", "abstract": " This paper describes a goal centric approach for effectively maintaining critical system qualities such as security, performance, and usability throughout the lifetime of a software system. In goal centric traceability (GCT) non-functional requirements and their interdependencies are modeled as softgoals in a softgoal interdependency graph (SIG). A probabilistic network model is then used to dynamically retrieve links between classes affected by a functional change and elements within the SIG. These links enable developers to identify potentially impacted goals; to analyze the level of impact on those goals; to make informed decisions concerning the implementation of the proposed change; and finally to develop appropriate risk mitigating strategies. This paper also reports experimental results for the link retrieval and illustrates the GCT process through an example of a change applied to a road management system.", "num_citations": "281\n", "authors": ["1458"]}
{"title": "Best practices for automated traceability\n", "abstract": " Automated traceability applies information-retrieval techniques to generate candidate links, sharply reducing the effort of manual approaches to build and maintain a requirements trace matrix as well as providing after-the-fact traceability in legacy documents.The authors describe nine best practices for implementing effective automated traceability.", "num_citations": "265\n", "authors": ["1458"]}
{"title": "Automated classification of non-functional requirements\n", "abstract": " This paper describes a technique for automating the detection and classification of non-functional requirements related to properties such as security, performance, and usability. Early detection of non-functional requirements enables them to be incorporated into the initial architectural design instead of being refactored in at a later date. The approach is used to detect and classify stakeholders\u2019 quality concerns across requirements specifications containing scattered and non-categorized requirements, and also across freeform documents such as meeting minutes, interview notes, and memos. This paper first describes the classification algorithm and then evaluates its effectiveness through reporting a series of experiments based on 30 requirements specifications developed as term projects by MS students at DePaul University. A new and iterative approach is then introduced for training or retraining a\u00a0\u2026", "num_citations": "247\n", "authors": ["1458"]}
{"title": "Software and systems traceability\n", "abstract": " The importance of traceability is well understood in the software engineering community and adopted across numerous software development standards. Industries are often compelled to implement traceability practices by government regulations. For example, the US Food and Drug Administration (FDA) states that traceability analysis must be used to verify that a software design implements all of its specified software requirements, that all aspects of the design are traceable to software requirements, and that all code is linked to established specifications and established test procedures. Other examples are found in the US Federal Aviation Administration (FAA) that states that software developers need to have ways of demonstrating traceability between design and requirements, and in the Capability Maturity Model Integration (CMMI) standard that requires similar traceability practices.Traceability supports\u00a0\u2026", "num_citations": "246\n", "authors": ["1458"]}
{"title": "The detection and classification of non-functional requirements with application to early aspects\n", "abstract": " This paper introduces an information retrieval based approach for automating the detection and classification of non-functional requirements (NFRs). Early detection of NFRs is useful because it enables system level constraints to be considered and incorporated into early architectural designs as opposed to being refactored in at a later time. Candidate NFRs can be detected in both structured and unstructured documents, including requirements specifications that contain scattered and non-categorized NFRs, and freeform documents such as meeting minutes, interview notes, and memos containing stakeholder comments documenting their NFR related needs. This paper describes the classification algorithm and then evaluates its effectiveness in an experiment based on fifteen requirements specifications developed as term projects by MS students at DePaul University. An additional case study is also described in\u00a0\u2026", "num_citations": "240\n", "authors": ["1458"]}
{"title": "Utilizing supporting evidence to improve dynamic requirements traceability\n", "abstract": " Requirements traceability provides critical support throughout all phases of a software development project. However practice has repeatedly shown the difficulties involved in long term maintenance of traditional traceability matrices. Dynamic retrieval methods minimize the need for creating and maintaining explicit links and can significantly reduce the effort required to perform a manual trace. Unfortunately they suffer from recall and precision problems. This paper introduces three strategies for incorporating supporting information into a probabilistic retrieval algorithm in order to improve the performance of dynamic requirements traceability. The strategies include hierarchical modeling, logical clustering of artifacts, and semi-automated pruning of the probabilistic network. Experimental results indicate that enhancement strategies can be used effectively to improve trace retrieval results thereby increasing the\u00a0\u2026", "num_citations": "238\n", "authors": ["1458"]}
{"title": "A machine learning approach for tracing regulatory codes to product specific requirements\n", "abstract": " Regulatory standards, designed to protect the safety, security, and privacy of the public, govern numerous areas of software intensive systems. Project personnel must therefore demonstrate that an as-built system meets all relevant regulatory codes. Current methods for demonstrating compliance rely either on after-the-fact audits, which can lead to significant refactoring when regulations are not met, or else require analysts to construct and use traceability matrices to demonstrate compliance. Manual tracing can be prohibitively time-consuming; however automated trace retrieval methods are not very effective due to the vocabulary mismatches that often occur between regulatory codes and product level requirements. This paper introduces and evaluates two machine-learning methods, designed to improve the quality of traces generated between regulatory codes and product level requirements. The first approach\u00a0\u2026", "num_citations": "219\n", "authors": ["1458"]}
{"title": "On-demand feature recommendations derived from mining public product descriptions\n", "abstract": " We present a recommender system that models and recommends product features for a given domain. Our approach mines product descriptions from publicly available online specifications, utilizes text mining and a novel incremental diffusive clustering algorithm to discover domain-specific features, generates a probabilistic feature model that represents commonalities, variants, and cross-category features, and then uses association rule mining and the k-Nearest-Neighbor machine learning strategy to generate product specific feature recommendations. Our recommender system supports the relatively labor-intensive task of domain analysis, potentially increasing opportunities for re-use, reducing time-to-market, and delivering more competitive software products. The approach is empirically validated against 20 different product categories using thousands of product descriptions mined from a repository of free\u00a0\u2026", "num_citations": "179\n", "authors": ["1458"]}
{"title": "Software by Numbers: Low-Risk, High-Return Development\n", "abstract": " -Opens the black box of methodologies and demonstrates that software development is fundamentally a value creation process-Covers new and radical approaches to software development that respond to business demands for shorter investment periods and increased agility-Provides software engineers tools for understanding enterprise-level value creation and managing financial objectives", "num_citations": "176\n", "authors": ["1458"]}
{"title": "Supporting software evolution through dynamically retrieving traces to UML artifacts\n", "abstract": " The ability to trace new and changed requirements to their impacted components provides critical support for managing change in an evolving software system. Unfortunately numerous studies have shown the difficulties of maintaining links using traditional traceability methods. Information retrieval techniques can be used to dynamically generate traces and alleviate the need to maintain explicit links, however prior work in this area has focused primarily on establishing intra-requirement links or links between requirements and code. We compare several retrieval techniques for generating links between requirements, code, and UML models. Tracing to UML elements provides a higher perspective on the proposed change than would be possible if links were generated directly to the code and supports the growing trend towards model driven development. Our experiment returned better results for establishing links\u00a0\u2026", "num_citations": "153\n", "authors": ["1458"]}
{"title": "The incremental funding method: Data-driven software development\n", "abstract": " Software development projects don't get funded unless they return clearly defined value to the business. Demands for shorter investment periods, faster time-to-market, and increased agility require new, radical software development approaches. These approaches must draw on the expertise of both software architects and financial stakeholders and open the traditional black box of software development to rigorous financial analysis. We can accomplish this only by positioning software development as a value-creation activity in which business analysis is integral. The incremental funding method is a financially informed approach to software development. IFM maximizes returns by delivering functionality in \"chunks\" of customer-valued features, carefully sequenced to optimize the project's net present value (NPV). We derived the IFM concepts from several years' experience in winning competitive contracts for\u00a0\u2026", "num_citations": "152\n", "authors": ["1458"]}
{"title": "Improving automated requirements trace retrieval: a study of term-based enhancement methods\n", "abstract": " Automated requirements traceability methods that utilize Information Retrieval (IR) methods to generate and maintain traceability links are often more efficient than traditional manual approaches, however the traces they generate are imprecise and significant human effort is needed to evaluate and filter the results. This paper investigates and compares three term-based enhancement methods that are designed to improve the performance of a probabilistic automated tracing tool. Empirical studies show that the enhancement methods can be effective in increasing the accuracy of the retrieved traces; however the effectiveness of each method varies according to specific project characteristics. The analysis of such characteristics has lead to the development of two new project-level metrics which can be used to predict the effectiveness of each enhancement method for a given data set. A procedure to\u00a0\u2026", "num_citations": "120\n", "authors": ["1458"]}
{"title": "Supporting domain analysis through mining and recommending features from online product listings\n", "abstract": " Domain analysis is a labor-intensive task in which related software systems are analyzed to discover their common and variable parts. Many software projects include extensive domain analysis activities, intended to jumpstart the requirements process through identifying potential features. In this paper, we present a recommender system that is designed to reduce the human effort of performing domain analysis. Our approach relies on data mining techniques to discover common features across products as well as relationships among those features. We use a novel incremental diffusive algorithm to extract features from online product descriptions, and then employ association rule mining and the (k)-nearest neighbor machine learning method to make feature recommendations during the domain analysis process. Our feature mining and feature recommendation algorithms are quantitatively evaluated and the\u00a0\u2026", "num_citations": "115\n", "authors": ["1458"]}
{"title": "A heterogeneous solution for improving the return on investment of requirements traceability\n", "abstract": " This work describes a best-of-breed approach to traceability, in which the return-on-investment of the requirements traceability effort is maximized through the strategic deployment of a heterogeneous set of traceability techniques. This contrasts with typical traceability practices that tend to utilize a single technique such as a matrix or tool embedded into a requirements management package even though it may not provide the optimal solution for the traceability needs of a diverse set of requirements. The proposed solution, named TraCS (traceability for complex systems), defines project level trace strategies for categories of requirements and establishes links strategically in order to optimize returns of the traceability effort and minimize the risk inherent to software evolution. The paper provides a rationale for heterogeneous traceability, describes an extensible traceability framework, and then defines the process for\u00a0\u2026", "num_citations": "115\n", "authors": ["1458"]}
{"title": "Strategic traceability for safety-critical projects\n", "abstract": " To support any claim that a product is safe for its intended use, manufacturers must establish traceability within that product's development life cycle. Unfortunately, traceability information submitted to regulators and third parties is often weak, casting doubt rather than confidence in a product's integrity. This article evaluates traceability information for 10 submissions prepared by manufacturers for review at the US Food and Drug Administration. The authors observed nine widespread traceability problems that affected regulators' ability to evaluate the product's safety in a timely manner. To address these problems, the authors present a set of guidelines for implementing strategic traceability in a way that supports safety assessments.", "num_citations": "111\n", "authors": ["1458"]}
{"title": "Towards automated requirements prioritization and triage\n", "abstract": " Time-to-market deadlines and budgetary restrictions require stakeholders to carefully prioritize requirements and determine which ones to implement in a given product release. Unfortunately, existing prioritization techniques do not provide sufficient automation for large projects with hundreds of stakeholders and thousands of potentially conflicting requests and requirements. This paper therefore describes a new approach for automating a significant part of the prioritization process. The proposed method utilizes data-mining and machine learning techniques to prioritize requirements according to stakeholders\u2019 interests, business goals, and cross-cutting concerns such as security or performance requirements. The effectiveness of the approach is illustrated and evaluated through two case studies based on the requirements of the Ice Breaker System, and also on a set of stakeholders\u2019 raw feature requests\u00a0\u2026", "num_citations": "108\n", "authors": ["1458"]}
{"title": "Poirot: A distributed tool supporting enterprise-wide automated traceability\n", "abstract": " Poirot is a Web-based tool supporting traceability of distributed heterogeneous software artifacts. A probabilistic network model is used to generate traces between requirements, design elements, code and other artifacts stored in distributed 3 rd  party case tools such as DOORS, rational rose, and source code repositories. The tool is designed with extensibility in mind, so that additional artifact types and 3 rd  party case tools can be easily added. Trace results are displayed in both a textual and visual format. This paper briefly describes the underlying probabilistic model, and the user interface of the tool, and then discusses Poirot's deployment and use in an industrial setting", "num_citations": "106\n", "authors": ["1458"]}
{"title": "A tactic-centric approach for automating traceability of quality concerns\n", "abstract": " The software architectures of business, mission, or safety critical systems must be carefully designed to balance an exacting set of quality concerns describing characteristics such as security, reliability, and performance. Unfortunately, software architectures tend to degrade over time as maintainers modify the system without understanding the underlying architectural decisions. Although this problem can be mitigated by manually tracing architectural decisions into the code, the cost and effort required to do this can be prohibitively expensive. In this paper we therefore present a novel approach for automating the construction of traceability links for architectural tactics. Our approach utilizes machine learning methods and lightweight structural analysis to detect tactic-related classes. The detected tactic-related classes are then mapped to a Tactic Traceability Information Model. We train our trace algorithm using code\u00a0\u2026", "num_citations": "101\n", "authors": ["1458"]}
{"title": "Clustering support for automated tracing\n", "abstract": " Automated trace tools dynamically generate links between various software artifacts such as requirements, design elements, code, test cases, and other less structured supplemental documents. Trace algorithms typically utilize information retrieval methods to compute similarity scores between pairs of artifacts. Results are returned to the user as a ranked set of candidate links, and the user is then required to evaluate the results through performing a top-down search through the list. Although clustering methods have previously been shown to improve the performance of information retrieval algorithms by increasing understandability of the results and minimizing human analysis effort, their usefulness in automated traceability tools has not yet been explored. This paper evaluates and compares the effectiveness of several existing clustering methods to support traceability; describes a technique for incorporating\u00a0\u2026", "num_citations": "94\n", "authors": ["1458"]}
{"title": "Towards mining replacement queries for hard-to-retrieve traces\n", "abstract": " Automated trace retrieval methods can significantly reduce the cost and effort needed to create and maintain requirements traces. However, the set of generated traces is generally quite imprecise and must be manually evaluated by analysts. In applied settings when the retrieval algorithm is unable to find the relevant links for a given query, a human user can improve the trace results by manually adding additional search terms and filtering out unhelpful ones. However, the effectiveness of this approach is largely dependent upon the knowledge of the user. In this paper we present an automated technique for replacing the original query with a new set of query terms. These query terms are learned through seeding a web-based search with the original query and then processing the results to identify a set of domain-specific terms. The query-mining algorithm was evaluated and fine-tuned using security regulations\u00a0\u2026", "num_citations": "93\n", "authors": ["1458"]}
{"title": "Toward improved traceability of non-functional requirements\n", "abstract": " This position paper examines current practices and challenges for tracing non-functional requirements (NFRs). Anecdotal evidence suggests that many organizations do not effectively trace NFRs and that functional changes are often implemented with very little understanding as to how system qualities such as safety, security, and performance will be impacted. The tendency for NFRs to have broad ranging impact upon a software system, and the strong interdependencies and tradeoffs that exist between NFRs and the software architecture leave typical existing traceability methods insufficient for tracing NFRs. This paper focuses on post-requirements traceability of NFRs. It first identifies three critical areas in which NFRs require traceability support, it then evaluates existing traceability methods, and finally proposes a more holistic traceability environment named Goal Centric Traceability that supports impact\u00a0\u2026", "num_citations": "93\n", "authors": ["1458"]}
{"title": "Towards automated requirements triage\n", "abstract": " Budgetary restrictions and time-to-market deadlines often require stakeholders to prioritize requirements and decide which ones to include in a given product release. Lack of an effective prioritization and triage process can lead to problems such as missed deadlines, disorganized development efforts, and late discovery of architecturally significant requirements. Existing prioritization techniques do not provide sufficient automation for large projects with hundreds of stakeholders and thousands of potentially conflicting requests and requirements. This paper therefore proposes an approach for automating a significant part of the prioritization process. The proposed method utilizes a probabilistic traceability model combined with a standard hierarchical clustering algorithm to cluster incoming stakeholder requests into hierarchical feature sets. Additional cross-cutting clusters are then generated to represent factors such\u00a0\u2026", "num_citations": "85\n", "authors": ["1458"]}
{"title": "Improving trace accuracy through data-driven configuration and composition of tracing features\n", "abstract": " Software traceability is a sought-after, yet often elusive quality in large software-intensive systems primarily because the cost and effort of tracing can be overwhelming. State-of-the art solutions address this problem through utilizing trace retrieval techniques to automate the process of creating and maintaining trace links. However, there is no simple one-size-fits all solution to trace retrieval. As this paper will show, finding the right combination of tracing techniques can lead to significant improvements in the quality of generated links. We present a novel approach to trace retrieval in which the underlying infrastructure is configured at runtime to optimize trace quality. We utilize a machine-learning approach to search for the best configuration given an initial training set of validated trace links, a set of available tracing techniques specified in a feature model, and an architecture capable of instantiating all valid\u00a0\u2026", "num_citations": "84\n", "authors": ["1458"]}
{"title": "A visual language for modeling and executing traceability queries\n", "abstract": " Current software and systems engineering tools provide only basic trace features, and as a result users are often compelled to construct non-trivial traceability queries using generic query languages such as SQL. In this paper, we present an alternative approach which defines traceability strategies for a project using UML class diagrams and then constructs trace queries as constraints upon subsets of the model. The visual trace modeling language (VTML) allows users to model a broad range of trace queries while hiding underlying technical details and data structures. The viability and expressiveness of VTML for use in a real project are demonstrated through modeling a broadly representative set of queries for a web-based health-care system. It is then evaluated through an experiment with human users to assess the readability and writability of VTML queries in comparison to generic SQL queries. We\u00a0\u2026", "num_citations": "82\n", "authors": ["1458"]}
{"title": "Automating speculative queries through event-based requirements traceability\n", "abstract": " Posing speculative questions about a software system is an important yet often unsupported activity. Current impact analysis techniques tend to focus upon the functionality of the system, whilst the effects of change upon performance requirements are largely ignored until after implementation. This tendency can lead to costly and time-consuming mistakes. Event-based traceability provides a robust method for handling both long-term evolutionary change as well as the short-term speculative change needed to support performance related impact analysis. By establishing dynamic links, capable of propagating data values and commands between requirements and performance models, it becomes possible to automate a wide range of speculative queries and to enhance the overall ability to predict the impact of change upon the performance of the system.", "num_citations": "82\n", "authors": ["1458"]}
{"title": "Detecting, Tracing, and Monitoring Architectural Tactics in Code\n", "abstract": " Software architectures are often constructed through a series of design decisions. In particular, architectural tactics are selected to satisfy specific quality concerns such as reliability, performance, and security. However, the knowledge of these tactical decisions is often lost, resulting in a gradual degradation of architectural quality as developers modify the code without fully understanding the underlying architectural decisions. In this paper we present a machine learning approach for discovering and visualizing architectural tactics in code, mapping these code segments to tactic traceability patterns, and monitoring sensitive areas of the code for modification events in order to provide users with up-to-date information about underlying architectural concerns. Our approach utilizes a customized classifier which is trained using code extracted from fifty performance-centric and safety-critical open source software systems\u00a0\u2026", "num_citations": "78\n", "authors": ["1458"]}
{"title": "A recommender system for requirements elicitation in large-scale software projects\n", "abstract": " In large and complex software projects, the knowledge needed to elicit requirements and specify the functional and behavioral properties can be dispersed across many thousands of stakeholders. Unfortunately traditional requirements engineering techniques, which were primarily designed to support face-to-face meetings, do not scale well to handle the needs of larger projects. We therefore propose a semi-automated requirements elicitation framework which uses data-mining techniques and recommender system technologies to facilitate stakeholder collaboration in a large-scale, distributed project. Our proposed recommender model is a hybrid one designed to manage the placement of stakeholders into highly focused discussion forums, where they can work collaboratively to generate requirements. In our approach, statements of need are first gathered from the project stakeholders; unsupervised clustering\u00a0\u2026", "num_citations": "78\n", "authors": ["1458"]}
{"title": "Mind the gap: assessing the conformance of software traceability to relevant guidelines\n", "abstract": " Many guidelines for safety-critical industries such as aeronautics, medical devices, and railway communications, specify that traceability must be used to demonstrate that a rigorous process has been followed and to provide evidence that the system is safe for use. In practice, there is a gap between what is prescribed by guidelines and what is implemented in practice, making it difficult for organizations and certifiers to fully evaluate the safety of the software system. In this paper we present an approach, which parses a guideline to extract a Traceability Model depicting software artifact types and their prescribed traces. It then analyzes the traceability data within a project to identify areas of traceability failure. Missing traceability paths, redundant and/or inconsistent data, and other problems are highlighted. We used our approach to evaluate the traceability of seven safety-critical software systems and found that none\u00a0\u2026", "num_citations": "75\n", "authors": ["1458"]}
{"title": "Automated support for managing feature requests in open forums\n", "abstract": " The result is stable, focused, dynamic discussion threads that avoid redundant ideas and engage thousands of stakeholders.", "num_citations": "73\n", "authors": ["1458"]}
{"title": "Supporting event based traceability through high-level recognition of change events\n", "abstract": " Although requirements traceability is crucial in both the development and maintenance of a software system, traceability links and related artifacts tend to deteriorate, as time-pressured practitioners fail to systematically update them in response to change. Event-based traceability addresses this issue by establishing links through a loosely coupled publisher/subscriber scheme. Dependent entities subscribe to requirements and receive event notifications as changes occur. This paper focuses upon the role played by the requirements specification as a publisher of events. A set of standard change events is defined and a method for monitoring a user's actions within a requirements management environment and the subsequent recognition and publication of the change events is proposed. Early results obtained from testing this approach are reported.", "num_citations": "73\n", "authors": ["1458"]}
{"title": "Lessons learned from open source projects for facilitating online requirements processes\n", "abstract": " [Context and motivation] The use of websites for gathering and prioritizing requirements in large-scale distributed projects is becoming increasingly prevalent in the software industry. These websites include both forums and wiki-style collaborative tools, and are designed to allow large numbers of stakeholders to participate in the requirements gathering process. [Question/problem] This paper explores and evaluates the forum-based requirements gathering and prioritization processes adopted by vendor-based open source software projects. The findings of this work have implications far beyond the domain of open source projects as they highlight requirements processes that could be applicable to any distributed, web-based requirements process. [Principal ideas/result] The effectiveness of various requirements gathering and prioritization practices adopted by vendor-based projects are\u00a0\u2026", "num_citations": "72\n", "authors": ["1458"]}
{"title": "Using data mining and recommender systems to facilitate large-scale, open, and inclusive requirements elicitation processes\n", "abstract": " Requirements related problems, especially those originating from inadequacies in the human-intensive task of eliciting stakeholderspsila needs and desires, have contributed to many failed and challenged software projects. This is especially true for large and complex projects in which requirements knowledge is distributed across thousands of stakeholders. This short paper introduces a new process and related framework that utilizes data mining and recommender technologies to create an open, scalable, and inclusive requirements elicitation process capable of supporting projects with thousands of stakeholders. The approach is illustrated and evaluated using feature requests mined from an open source software product.", "num_citations": "72\n", "authors": ["1458"]}
{"title": "A metrics suite for evaluating flexibility and complexity in service oriented architectures\n", "abstract": " Service Oriented Architecture (SOA) is emerging to be the predominant architectural style of choice for many organizations due to the promised agility, flexibility and resilience benefits. However, there are currently few SOA metrics designed to evaluate complexity, effort estimates and health status of SOA solutions. This paper therefore proposes a SOA metrics framework which includes both service level and SOA-wide metrics to measure design and runtime qualities of a SOA solution. The SOA-wide metrics predict the overall complexity, agility and health status of SOA solutions, while service level metrics focus on the fundamental building blocks of SOA, i.e. services. The combined views deliver a compelling suite of SOA metrics that would benefit organizations as they consider adopting SOA. These metrics, which are based on observations of many SOA engagements, are illustrated through a case study\u00a0\u2026", "num_citations": "70\n", "authors": ["1458"]}
{"title": "Enhancing stakeholder profiles to improve recommendations in online requirements elicitation\n", "abstract": " Requirements elicitation has long been recognized as a crucial activity in any software development project. Unfortunately, the traditional elicitation practices do not scale well when applied to larger projects, where knowledge is distributed across numerous geographically dispersed stakeholders. As a result, new distributed requirements elicitation tools have started to surface, such as online forums and wiki pages. In our previous work, we introduced a framework for supporting distributed elicitation by utilizing data mining and machine learning techniques to automatically group stakeholder ideas into forums, and by using recommender system technologies to help promote these forums to potentially interested stakeholders. The framework is designed to create an open and more inclusive environment where points of view, conflicts, interests and tradeoffs are identified as early as possible. In this paper, we present\u00a0\u2026", "num_citations": "68\n", "authors": ["1458"]}
{"title": "Just enough requirements traceability\n", "abstract": " Even though traceability is legally required in most safety critical software applications and is a recognized component of many software process improvement initiatives, organizations continue to struggle to implement it in a cost-effective manner. This paper addresses the problems and challenges of requirements traceability and asks questions such as \"How much traceability is enough?\" and \"What kinds of traceability provide cost effective solutions?\" Traditional, automated, and lean traceability methods are all discussed", "num_citations": "64\n", "authors": ["1458"]}
{"title": "Software quality requirements: How to balance competing priorities\n", "abstract": " The elicitation, analysis, and specification of quality requirements involve careful balancing of a broad spectrum of competing priorities. Developers must therefore focus on identifying qualities and designing solutions that optimize the product's value to its stakeholders.", "num_citations": "62\n", "authors": ["1458"]}
{"title": "Using data mining and recommender systems to scale up the requirements process\n", "abstract": " Ultra-Large-Scale (ULS) software projects are anticipated to be highly complex and to involve thousands, or even hundreds of thousands of stakeholders. Unfortunately numerous accounts of recent failures and challenges in industrial and governmental projects have demonstrated that current requirements elicitation and prioritization practices do not scale adequately to address the needs of large projects. This position paper directly addresses this problem through proposing an open, inclusive, and robust elicitation and prioritization process that utilizes data-mining and recommender technologies to facilitate the active involvement of many thousands of stakeholders. We believe that the approach described in this paper is a fundamental building block towards addressing higher level requirements problems facing ULS Systems.", "num_citations": "60\n", "authors": ["1458"]}
{"title": "Phrasing in dynamic requirements trace retrieva\n", "abstract": " Dynamic trace retrieval provides an alternate option to traditional traceability methods such as matrices, hyperlinks, and manual link construction. Instead of relying upon manually constructed and maintained traces, links are generated dynamically on an 'as-needed' basis using information retrieval techniques. Prior work in this area has indicated that in order to retrieve between 90% to 95% of the correct traces, only low precision levels can be obtained, which means that analysts must spend time filtering out unwanted links. This paper describes a method for improving the precision of trace results through incorporating the use of phrases detected and constructed from requirements using a part-of-speech tagger. A project glossary is also used to find additional phrases and weight the contributions of key phrases and terms. The approach is implemented in a probabilistic trace retrieval tool and evaluated through a\u00a0\u2026", "num_citations": "60\n", "authors": ["1458"]}
{"title": "Traceability in agile projects\n", "abstract": " Agile methods are becoming an increasingly mainstream approach to software development. They are characterized by short iterations with frequent deliverables, test-driven development, lightweight documentation, and frequent interactions with the customer. Perhaps unsurprisingly, traceability is often seen as unnecessary and therefore unwanted in agile projects. This is due to the perceived overhead of creating and maintaining traceability links and the assumption that agile developers have sufficient understanding of a project to implement a change without the support of previously defined traceability links. This chapter explores the challenges, benefits, techniques, and processes of tracing across a broad spectrum of agile projects.", "num_citations": "57\n", "authors": ["1458"]}
{"title": "The twin peaks of requirements and architecture\n", "abstract": " Quality concerns, often referred to as nonfunctional requirements, service-level agreements, quality attributes, performance constraints, or architecturally significant requirements, describe system-level attributes such as security, performance, reliability, and maintainability. In conjunction with functional requirements, these quality concerns drive and constrain a system's architectural design and often introduce significant trade-offs that must be carefully considered and balanced. The dependencies that exist between requirements and architecture have been referred to as the twin peaks of requirements and architecture. The guest editors of this special issue describe this unique situation.", "num_citations": "54\n", "authors": ["1458"]}
{"title": "Automated extraction and visualization of quality concerns from requirements specifications\n", "abstract": " Software requirements specifications often focus on functionality and fail to adequately capture quality concerns such as security, performance, and usability. In many projects, quality-related requirements are either entirely lacking from the specification or intermingled with functional concerns. This makes it difficult for stakeholders to fully understand the quality concerns of the system and to evaluate their scope of impact. In this paper we present a data mining approach for automating the extraction and subsequent modeling of quality concerns from requirements, feature requests, and online forums. We extend our prior work in mining quality concerns from textual documents and apply a sequence of machine learning steps to detect quality-related requirements, generate goal graphs contextualized by project-level information, and ultimately to visualize the results. We illustrate and evaluate our approach against two\u00a0\u2026", "num_citations": "53\n", "authors": ["1458"]}
{"title": "Model-based traceability\n", "abstract": " Many organizations invest considerable cost and effort in building traceability matrices in order to comply with regulatory requirements or process improvement initiatives. Unfortunately, these matrices are frequently left un-used and project stakeholders continue to perform critical software engineering activities such as change impact analysis or requirements satisfaction assessment without benefit of the established traces. A major reason for this is the lack of a process framework and associated tools to support the use of these trace matrices in a strategic way. In this position paper, we present a model-based approach designed to help organizations gain full benefit from the traces they develop and to allow project stakeholders to plan, generate, and execute trace strategies in a graphical modeling environment. The approach includes a standard notation for capturing strategic traceability decisions in the form of a\u00a0\u2026", "num_citations": "52\n", "authors": ["1458"]}
{"title": "Dynamically tracing non-functional requirements through design pattern invariants\n", "abstract": " Nonfunctional requirements (NFRs) are critical to the successful implementation of almost every nontrivial software system. This is evidenced by the fact that many documented system failures are directly attributed to the inadequate implementation and maintenance of NFRs. Although tracing NFRs could alleviate this problem through supporting activities such as requirements validation, impact analysis, and regression testing, the task is complicated by their tendency to exhibit complex interactions and to have a global and far-reaching impact upon a software system. This paper describes an approach for establishing traceability between certain types of NFRs and design and code artifacts, through the use of design patterns as intermediary objects. By synergistically utilizing both static and dynamically generated links, EBTDP minimizes the cost and effort of establishing and maintaining traceability links.", "num_citations": "52\n", "authors": ["1458"]}
{"title": "Dronology: An incubator for cyber-physical system research\n", "abstract": " Research in the area of Cyber-Physical Systems (CPS) is hampered by the lack of available project environments in which to explore open challenges and to propose and rigorously evaluate solutions. In this \"New Ideas and Emerging Results\" paper we introduce a CPS research incubator -- based upon a system, and its associated project environment, for managing and coordinating the flight of small Unmanned Aerial Systems (sUAS). The research incubator provides a new community resource, making available diverse, high-quality project artifacts produced across multiple releases of a safety-critical CPS. It enables researchers to experiment with their own novel solutions within a fully-executable runtime environment that supports both high-fidelity sUAS simulations as well as physical sUAS. Early collaborators from the software engineering community have shown broad and enthusiastic support for the project and its role as a research incubator, and have indicated their intention to leverage the environment to address their own research areas of goal modeling, runtime adaptation, safety-assurance, and software evolution.", "num_citations": "49\n", "authors": ["1458"]}
{"title": "Function-class decomposition: A hybrid software engineering method\n", "abstract": " In addition to offering a simple yet powerful method for decomposing a system, function-class decomposition (FCD) produces an architecture that is more supportive than traditional object-oriented decomposition for several software engineering tasks. A hybrid method that integrates structured analysis with an OO approach, FCD identifies classes in parallel with decomposing the system into a hierarchy of functional modules. Recently, developers extended FCD to integrate UML concepts. Useful for partitioning a system for distribution, the FCD hierarchy provides a framework for controlling development in a distributed software engineering environment. It also helps identify and integrate components in component-based development and supports the system life-cycle maintenance phase. Further, FCD addresses many of the initial analysis and design problems inherent in large and complex OO systems. The\u00a0\u2026", "num_citations": "41\n", "authors": ["1458"]}
{"title": "Goal-centric traceability: Using virtual plumblines to maintain critical systemic qualities\n", "abstract": " Successful software development involves the elicitation, implementation, and management of critical systemic requirements related to qualities such as security, usability, and performance. Unfortunately, even when such qualities are carefully incorporated into the initial design and implemented code, there are no guarantees that they will be consistently maintained throughout the lifetime of the software system. Even though it is well known that system qualities tend to erode as functional and environmental changes are introduced, existing regression testing techniques are primarily designed to test the impact of change upon system functionality rather than to evaluate how it might affect more global qualities. The concept of using goal-centric traceability to establish relationships between a set of strategically placed assessment models and system goals is introduced. This paper describes the process, algorithms\u00a0\u2026", "num_citations": "38\n", "authors": ["1458"]}
{"title": "Visual support in automated tracing\n", "abstract": " Automated traceability facilitates the dynamic generation of candidate links between requirements and other software artifacts. It provides an alternative option to the arduous and error-prone process of manually creating and maintaining a trace matrix. However the result set contains both true and false links which must therefore be evaluated by an analyst. Current approaches display the candidate links to the user in a relatively bland textual format. This position paper proposes several visualization techniques for helping analysts to evaluate sets of candidate links. The techniques are illustrated using examples from the Ice Breaker System.", "num_citations": "38\n", "authors": ["1458"]}
{"title": "Financially informed requirements prioritization\n", "abstract": " This tutorial introduces a financially responsible approach to requirements prioritization that enhances the value creating potential of a software development project. The approach, known as the Incremental Funding Method (IFM), is described in the book\" Software by Numbers: Low-risk, High-Return Development\"[2, 3]. Tutorial attendees will learn how to group requirements into\" chunks\" of revenue-generating functionality known as Minimal Marketable Features (MMFs), and how to carefully sequence those MMFs in order to maximize the overall value of the project, reduce initial funding investments, and manipulate other project metrics such as the time needed for a project to reach break-even status. A gentle introduction to financial analysis will also equip participants to analyze and understand the impact of other requirements prioritization decisions upon the financial returns of a project. This process is\u00a0\u2026", "num_citations": "37\n", "authors": ["1458"]}
{"title": "A persona-based approach for exploring architecturally significant requirements in agile projects\n", "abstract": " [Context and motivation] Architecturally significant requirements (ASRs) drive and constrain many aspects of the architecture. It is therefore beneficial to elicit and analyze these requirements in early phases of a project so that they can be taken into consideration during the architectural design of the system. Unfortunately failure to invest upfront effort in exploring stakeholders quality concerns, can lead to the need for significant refactoring efforts to accommodate emerging requirements. This problem is particularly evident in agile projects which are inherently incremental. [Question/Problem] Existing techniques for early discovery of ASRs, such as Win-Win and i*, are typically rejected by agile development teams as being somewhat heavy-weight. A light-weight approach is therefore needed to help developers identify and explore critical architectural concerns early in the project. [Principal ideas\u00a0\u2026", "num_citations": "36\n", "authors": ["1458"]}
{"title": "Learning effective query transformations for enhanced requirements trace retrieval\n", "abstract": " In automated requirements traceability, significant improvements can be realized through incorporating user feedback into the trace retrieval process. However, existing feedback techniques are designed to improve results for individual queries. In this paper we present a novel technique designed to extend the benefits of user feedback across multiple trace queries. Our approach, named Trace Query Transformation (TQT), utilizes a novel form of Association Rule Mining to learn a set of query transformation rules which are used to improve the efficacy of future trace queries. We evaluate TQT using two different kinds of training sets. The first represents an initial set of queries directly modified by human analysts, while the second represents a set of queries generated by applying a query optimization process based on initial relevance feedback for trace links between a set of source and target documents. Both\u00a0\u2026", "num_citations": "35\n", "authors": ["1458"]}
{"title": "Automating performance-related impact analysis through event based traceability\n", "abstract": " Current impact analysis techniques tend to focus on assessing the impact of change upon the system's functionality, whilst a consideration of performance related requirements is often deferred until after implementation. This tendency can lead to costly and time-consuming mistakes that frustrate customers and require frantic last-minute efforts to fix. This paper proposes a method for supporting performance-related impact analysis in a heterogeneous software engineering environment. An event-based approach is taken to establish dynamic traceability links, capable of propagating data values and commands between requirements and performance models. Quantitative values in performance related requirements are adjusted to reflect proposed changes, and impacted models are re-executed to measure the impact of the change. The resulting outputs are then automatically compared to relevant\u00a0\u2026", "num_citations": "35\n", "authors": ["1458"]}
{"title": "Archie: A tool for detecting, monitoring, and preserving architecturally significant code\n", "abstract": " The quality of a software architecture is largely dependent upon the underlying architectural decisions at the framework, tactic, and pattern levels. Decisions to adopt certain solutions determine the extent to which desired qualities such as security, availability, and performance are achieved in the delivered system. In this tool demo, we present our Eclipse plug-in named Archie as a solution for maintaining architectural qualities in the design and code despite long-term maintenance and evolution activities. Archie detects architectural tactics such as heartbeat, resource pooling, and role-based access control (RBAC) in the source code of a project; constructs traceability links between the tactics, design models, rationales and source code; and then uses these to monitor the environment for architecturally significant changes and to keep developers informed of underlying design decisions and their associated rationales.", "num_citations": "34\n", "authors": ["1458"]}
{"title": "Recommender systems in requirements engineering\n", "abstract": " Requirements engineering in large-scaled industrial, government, and international projects can be a highly complex process involving thousands, or even hundreds of thousands of potentially distributed stakeholders. The process can result in massive amounts of noisy and semistructured data that must be analyzed and distilled in order to extract useful requirements. As a result, many human intensive tasks in requirements elicitation, analysis, and management processes can be augmented and supported through the use of recommender system and machine learning techniques. In this article we describe several areas in which recommendation technologies have been applied to the requirements engineering domain, namely stakeholder identification, domain analysis, requirements elicitation, and decision support across several requirements analysis and prioritization tasks. We also highlight ongoing challenges and opportunities for applying recommender systems in the requirements engineering domain.", "num_citations": "34\n", "authors": ["1458"]}
{"title": "A consensus based approach to constrained clustering of software requirements\n", "abstract": " Managing large-scale software projects involves a number of activities such as viewpoint extraction, feature detection, and requirements management, all of which require a human analyst to perform the arduous task of organizing requirements into meaningful topics and themes. Automating these tasks through the use of data mining techniques such as clustering could potentially increase both the efficiency of performing the tasks and the reliability of the results. Unfortunately, the unique characteristics of this domain, such as high dimensional, sparse, noisy data sets, resulting from short and ambiguous expressions of need, as well as the need for the interactive engagement of stakeholders at various stages of the process, present difficult challenges for standard clustering algorithms. In this paper, we propose a semi-supervised clustering framework, based on a combination of consensus-based and constrained\u00a0\u2026", "num_citations": "34\n", "authors": ["1458"]}
{"title": "Using tactic traceability information models to reduce the risk of architectural degradation during system maintenance\n", "abstract": " The software architectures of safety and mission-critical systems are designed to satisfy and balance an exacting set of quality concerns describing characteristics such as performance, reliability, and safety. Unfortunately, practice has shown that long-term maintenance activities can erode these architectural qualities. In this paper we present a novel solution for preserving architectural qualities through the use of Tactic Traceability Information Models (tTIMs). A tTIM provides a reusable infrastructure of traceability links focused around a commonly implemented architectural tactic, as well as a set of mapping points for tracing the tactic into the architectural design and the implemented code. The use of tTIMs significantly reduces the effort needed to create and maintain traceability links, provides support for visualizing the rationale behind various architectural components, and delivers timely information to maintainers\u00a0\u2026", "num_citations": "33\n", "authors": ["1458"]}
{"title": "Utilizing recommender systems to support software requirements elicitation\n", "abstract": " Requirements Engineering involves a number of human intensive activities designed to help project stakeholders discover, analyze, and specify the functional and non-functional needs for a software intensive system. Recommender systems can support several different areas of this process including identifying potential subject matter experts for a topic, keeping individual stakeholders informed of relevant issues, and even recommending possible features for stakeholders to consider and explore. This position paper summarizes an extensive series of experiments that were conducted to identify best-of-breed algorithms for recommending forums to stakeholders and recommending unexplored topics to project managers.", "num_citations": "31\n", "authors": ["1458"]}
{"title": "A clustering technique for early detection of dominant and recessive cross-cutting concerns\n", "abstract": " This paper describes an approach for automating the detection of early aspects. Based on hierarchical clustering and an underlying probabilistic algorithm, the technique generates initial requirements clusters representing relatively homogenous feature sets, use cases and potential cross-cutting concerns. A second clustering phase is then applied in which dominant terms are identified and removed from each of the initial clusters, allowing new clusters to form around less dominant terms. This second phase enables previously inter-tangled aspects to be detected. Three metrics are introduced to differentiate potential cross-cutting concerns from other types of clusters. The approach is illustrated through an example based on the Public Health Watcher case study.", "num_citations": "31\n", "authors": ["1458"]}
{"title": "A taxonomy and visual notation for modeling globally distributed requirements engineering projects\n", "abstract": " This paper presents a visual modeling notation for use in planning globally distributed requirements engineering projects. An underlying meta-model defines the elements of the modeling language, including site locations, stakeholder roles, communication flows, critical documents, and supporting tools and repositories. The modeling notation is motivated through the findings of eight in-depth interviews with requirements analysts who had worked on requirements elicitation, analysis, and specification tasks in globally distributed projects. We illustrate the modeling notation with examples drawn from telecommunications, video gaming, retail, and consulting projects. Based on a set of recurring problems and best practices identified in our interviews, the models are then analyzed, and specific recommendations are made to mitigate the identified risks.", "num_citations": "30\n", "authors": ["1458"]}
{"title": "Visualization and analysis in automated trace retrieval\n", "abstract": " This paper describes a new visualization technique for helping analysts to understand the potential impact of changing requirements, and for providing valuable early feedback on the quality of a software design. Based on the candidate links that are automatically generated by a trace retrieval tool, VisMatrix creates a graphical representation of the requirements trace matrix showing not only where candidate links exist, but also the strength of those links. New metrics derived from the trace visualization, and its underlying trace matrix, are introduced. These include 'trace clustering' for evaluating modularity, and 'trace scope' for analyzing fan-in and fan-out behavior of traces, where fan-in represents the number of requirements influencing a design artifact, and fan-out represents the degree of influence a single requirement has on the set of design artifacts. Examples are drawn from the automatically generated trace\u00a0\u2026", "num_citations": "30\n", "authors": ["1458"]}
{"title": "A comparative evaluation of two user feedback techniques for requirements trace retrieval\n", "abstract": " In automated requirements trace retrieval, significant improvements can be realized through incorporating user feedback. In this paper we introduce a relatively new technique named Direct Query Manipulation (DQM) and compare its effectiveness against Rocchio, the current defacto standard for integrating user feedback into automated tracing methods. The two techniques are evaluated empirically through a series of simulations and a user study, conducted by tracing requirements for WorldVista, an electronic healthcare information system against requirements from the Certification Commission for Healthcare Information Technology. Our results show that both Rocchio and DQM return significant improvements in trace quality in comparison to the vector space model, a fully automated technique. DQM performs slightly better than Rocchio in terms of trace quality with minimal difference in human effort. The hybrid\u00a0\u2026", "num_citations": "29\n", "authors": ["1458"]}
{"title": "Tracing non-functional requirements\n", "abstract": " Non-functional requirements, describing quality concerns such as performance, security, and availability, often exhibit complex interdependencies and trade-offs and have broad-reaching impacts across the architectural design of a software intensive system. This creates significant challenges for tracing NFRs, as traceability links can quickly proliferate and the traceability effort can be costly and impractical. As a result, many organizations do not even attempt to trace NFRs; however this means that functional changes are often implemented with very little understanding of how system qualities are affected by the change. The challenge, from a traceability perspective, is to develop effective techniques which simplify the task of creating and maintaining NFR-related traceability links, while still providing effective support for critical tasks such as impact analysis, requirements validation, and architectural\u00a0\u2026", "num_citations": "28\n", "authors": ["1458"]}
{"title": "Requirements-based dynamic metrics in object-oriented systems\n", "abstract": " Because early design decisions can have a major long term impact on the performance of a system, early evaluation of the high-level architecture can be an important risk mitigation technique. This paper proposes a technique for predicting the volume of data that will flow across a network in a distributed system. The prediction is based upon anticipated execution of scenarios and can be applied at an extremely early stage of the design. It is driven by requirements specifications and captures dynamic metrics by defining typical usage patterns in terms of scenarios. Scenarios are then mapped to architectural components, and dataflow across inter-partition links is estimated. The feasibility of the approach is demonstrated through an experiment in which predicted metrics are compared to runtime measurements.", "num_citations": "28\n", "authors": ["1458"]}
{"title": "Personas in the middle: Automated support for creating personas as focal points in feature gathering forums\n", "abstract": " Many software systems utilize forums to allow a broad set of stakeholders to request features. However the resulting mass of ideas and comments can make prioritization and management of feature requests challenging. In this paper we propose a novel approach for partially automating the creation of personas from a set of feature requests in open forums. Our approach utilizes topic clustering, classification, and association rules to identify meaningful groupings of feature requests and then uses them to guide the construction of personas. Once created, these personas are leveraged to coordinate feature requests, track changes, and to provide stakeholder communication mechanisms. We illustrate our approach with examples taken from the health-insurance domain and then evaluate it against feature requests in the SugarCRM project.", "num_citations": "27\n", "authors": ["1458"]}
{"title": "Recommendation systems in requirements discovery\n", "abstract": " Recommendation systems offer the opportunity for supporting and enhancing a wide variety of activities in requirements engineering. We discuss several potential uses. In particular we highlight the role of recommendation systems in online forums that are used for capturing and discussing feature requests. The recommendation system is used to mitigate problems introduced when face-to-face communication is replaced with potentially high-volume online discussions. In this context, recommendation systems can be used to suggest relevant topics to stakeholders and conversely to recommend expert stakeholders for each discussion topic. We also explore the use of recommendation systems in the domain analysis process, where they can be used to recommend sets of features to include in new products.", "num_citations": "27\n", "authors": ["1458"]}
{"title": "Variability points and design pattern usage in architectural tactics\n", "abstract": " Architectural tactics are important building blocks of software architecture. Tactics come in many shapes and sizes, describe solutions for addressing specific quality concerns, and are prevalent across high-performance fault-tolerant systems. Once a decision is made to utilize a tactic, the developer must generate a concrete plan for realizing the tactic in the design and code. Unfortunately, the variability points found in individual tactics can make this a challenging task. To address this knowledge gap, we conducted a study to investigate how design patterns were used to implement various tactics. Data mining techniques were used to identify potential pattern instances within tactic implementations. Our manual analysis of the retrieved data identified a distinct set of variability points for each tactic, as well as corresponding design patterns used to address them. From these observations we construct tactic-level\u00a0\u2026", "num_citations": "27\n", "authors": ["1458"]}
{"title": "Tracing architectural concerns in high assurance systems (NIER track)\n", "abstract": " Software architecture is shaped by a diverse set of interacting and competing quality concerns, each of which may have broad-reaching impacts across multiple architectural views. Without traceability support, it is easy for developers to inadvertently change critical architectural elements during ongoing system maintenance and evolution, leading to architectural erosion. Unfortunately, existing traceability practices, tend to result in the proliferation of traceability links, which can be difficult to create, maintain, and understand. We therefore present a decision-centric approach that focuses traceability links around the architectural decisions that have shaped the delivered system. Our approach, which is informed through an extensive investigation of architectural decisions made in real-world safety-critical and performance-critical applications, provides enhanced support for advanced software engineering tasks.", "num_citations": "27\n", "authors": ["1458"]}
{"title": "Mining requirements knowledge from collections of domain documents\n", "abstract": " When organizations enter domains that are entirely new to them, they need to invest significant time and effort to acquire domain knowledge. This typically involves searching through a broad set of domain documents, retrieving relevant ones, and analyzing the textual content in order to discover and specify pertinent requirements. Depending on the nature of the domain and the availability of documentation, this task can be extremely time-consuming and may require non-trivial human effort. Furthermore, the task must often be performed repeatedly throughout early phases of the project. In this paper we first explore the effort needed to manually build a high-level domain model capturing the functional components. We then present MaRK (Mining Requirements Knowledge), which identifies and retrieves the documents containing descriptions of functional components in the domain model. Domain analysts can use\u00a0\u2026", "num_citations": "26\n", "authors": ["1458"]}
{"title": "TiQi: answering unstructured natural language trace queries\n", "abstract": " Software traceability is a required element in the development and certification of safety-critical software systems. However, trace links, which are created at significant cost and effort, are often underutilized in practice due primarily to the fact that project stakeholders often lack the skills needed to formulate complex trace queries. To mitigate this problem, we present a solution which transforms spoken or written natural language queries into structured query language (SQL). TiQi includes a general database query mechanism and a domain-specific model populated with trace query concepts, project-specific terminology, token disambiguators, and query transformation rules. We report results from four different experiments exploring user preferences for natural language queries, accuracy of the generated trace queries, efficacy of the underlying disambiguators, and stability of the trace query concepts\u00a0\u2026", "num_citations": "26\n", "authors": ["1458"]}
{"title": "Ontology-based trace retrieval\n", "abstract": " In automated requirements trace retrieval, an ontology can be used as an intermediary artifact to identify relationships that would not be recognized by standard information retrieval techniques. However, ontologies must be carefully constructed to fit the needs of the project. In this paper we present a technique for incorporating information from general and domain-specific ontologies into the tracing process. Our approach applies the domain ontology at the phrase level and then uses a general ontology to augment simple term matching in order to deduce relationships between individual terms weighted according to the relative importance of the phrase in which they occur. The combined weights are used to compute the overall similarity between a source and target artifact in order to establish a candidate trace link. We experimentally evaluated our approach against the standard Vector Space Model (VSM) and\u00a0\u2026", "num_citations": "26\n", "authors": ["1458"]}
{"title": "Softgoal traceability patterns\n", "abstract": " Goal oriented methods help software engineers to model high-level systemic goals, propose and evaluate architectural solutions, and detect and resolve conflicts that occur. This paper describes a new technique, known as softgoal traceability patterns, for enabling reusable class mechanisms such as design patterns to be applied within a goal-oriented framework. Softgoal traceability patterns increase the reliability of a design in respect to its goals through the automated generation of design elements and the establishment of bidirectional traces between goals and design. These traces are used to monitor the integrity of the design in respect to architectural quality goals, and to support impact analysis when design changes are proposed. Softgoal traceability patterns are described using the well-known Observer pattern and then expanded with a more complex pattern that incorporates authentication", "num_citations": "25\n", "authors": ["1458"]}
{"title": "Meet elaine: A persona-driven approach to exploring architecturally significant requirements\n", "abstract": " Software-intensive projects are driven by quality concerns; however, these can be difficult to elicit and manage in early stages of a project. Architecturally savvy personas provide a tangible approach for capturing performance, reliability, security, and other quality goals and for reasoning about their impact on system design. The Web extra at http://youtu.be/N_LksckqOO8 is an audio podcast of author Jane Cleland-Huang reading her Requirements column, in which she discusses how architecturally-savvy personas provide a tangible approach for capturing performance, reliability, security, and other quality goals and for reasoning about their impact on system design.", "num_citations": "24\n", "authors": ["1458"]}
{"title": "Breaking the big-bang practice of traceability: Pushing timely trace recommendations to project stakeholders\n", "abstract": " In many software intensive systems traceability is used to support a variety of software engineering activities such as impact analysis, compliance verification, and requirements validation. However, in practice, traceability links are often created towards the end of the project specifically for approval or certification purposes. This practice can result in inaccurate and incomplete traces, and also means that traceability links are not available to support early development efforts. We address these problems by presenting a trace recommender system which pushes recommendations to project stakeholders as they create or modify traceable artifacts. We also introduce the novel concept of a trace obligation, which is used to track satisfaction relations between a target artifact and a set of source artifacts. We model traceability events and subsequent actions, including user recommendations, using the Business Process\u00a0\u2026", "num_citations": "24\n", "authors": ["1458"]}
{"title": "Using traceability to support soa impact analysis\n", "abstract": " Service Oriented Architecture (SOA) has been recognized as an important paradigm for software engineering. Several organizations are in the process of adopting and evolving SOA deployments. In this paper we present IntelliTrace, an intelligent traceability framework to support impact analysis across different modeling layers of a SOA based system. The framework uses traceability links among different SOA artifacts to analyze the impact that changes in SOA-based systems can have in key performance indicators. The change impact analysis is triggered by different situations such as changes at the service level, business process level, goal level, key performance indicators, and SOA infrastructure. A prototype tool has been implemented in order to illustrate and evaluate the framework. An extensive case study built around an online airline reservation system is used to evaluate the framework.", "num_citations": "24\n", "authors": ["1458"]}
{"title": "Evolving software trace links between requirements and source code\n", "abstract": " Traceability provides support for diverse software engineering activities including safety analysis, compliance verification, test-case selection, and impact prediction. However, in practice, there is a tendency for trace links to degrade over time as the system continually evolves. This is especially true for links between source-code and upstream artifacts such as requirements \u2013 because developers frequently refactor and change code without updating the links. In this paper we present TLE (Trace Link Evolver), a solution for automating the evolution of bidirectional trace links between source code classes or methods and requirements. TLE depends on a set of heuristics coupled with refactoring detection tools and informational retrieval algorithms to detect predefined change scenarios that occur across contiguous versions of a software system. We first evaluate TLE at the class level in a controlled experiment\u00a0\u2026", "num_citations": "23\n", "authors": ["1458"]}
{"title": "Guidelines for benchmarking automated software traceability techniques\n", "abstract": " To comparatively evaluate automated trace ability solutions, we need to develop standardized benchmarks. However there is currently no consensus on how a benchmark should be constructed and used to evaluate competing techniques. In this paper we discuss recurring problems in evaluating trace ability techniques, identify essential properties that evaluation methods should possess, and provide guidelines for benchmarking software trace ability techniques. We illustrate the properties and guidelines using empirical evaluation of three software trace ability techniques on nine data sets.", "num_citations": "23\n", "authors": ["1458"]}
{"title": "A recommender system for dynamically evolving online forums\n", "abstract": " Recommender systems can be used in online forums to recommend discussion topics to users; however as these forums are characterized by a constant influx of new users and new posts, it is important to consider the performance of the recommender system under a scenario in which the internal composition of the items to be recommended, ie, discussion threads, and the user preferences are constantly changing. In this paper we describe and evaluate a forum recommender designed to handle the challenges of dynamically evolving internet forums used to gather and discuss feature requests for various software products. In particular, we empirically show that two proposed enhancements to the representations of user profiles will result in improved recommendation effectiveness in dynamic environments.", "num_citations": "22\n", "authors": ["1458"]}
{"title": "Traversing the twin peaks\n", "abstract": " In interviews conducted last October, this issue's guest editors, Mehdi Mirakhorli and Jane Cleland-Huang, spoke with Daniel Dvorak and Jan Bosch, who shared their perspectives as software architects on the interweaving of requirements and architecture. Dvorak is the lead for the NASA software architecture review board and has worked on various technology development projects and space missions, including Deep Space One and Mars Science Laboratory. Bosch is a software architect and agilest with a wealth of experience designing and implementing software-as-a-service and Web 2.0 solutions that typically provide services to hundreds of thousands, even millions, of customers.", "num_citations": "19\n", "authors": ["1458"]}
{"title": "Transforming trace information in architectural documents into re-usable and effective traceability links\n", "abstract": " Architectural analysis processes, such as the Architecture Trade-off and Analysis Method (ATAM), utilize a scenario based approach to evaluate the extent to which an architectural solution meets a potentially competing set of quality goals. The resulting architectural documents contain a rich set of trace relationships between quality goals, decisions, and architectural elements. Unfortunately this information is not readily accessible for supporting tasks other than initial architectural assessments. In this paper we describe a technique and supporting tools for extracting and generating traceability links from the architectural documents. A specialized Traceability Information Model is used to guide the user through the task of establishing traceability links from design decisions to the architectural elements in which the decision is realized. The retrieved and generated traceability links can then be used to support a far\u00a0\u2026", "num_citations": "19\n", "authors": ["1458"]}
{"title": "Discovering, analyzing, and managing safety stories in agile projects\n", "abstract": " Traditionally, safety-critical projects have been developed using the waterfall process. However, this makes it costly and challenging to incrementally introduce new features and to certify the modified product for use. As a result, there has been increasing interest in adopting agile development paradigms within the safety-critical domain. This in turn introduces numerous challenges. In this paper we address the specific problems of discovering, analyzing, specifying, and managing safety requirements within the agile Scrum process. We propose SafetyScrum, a methodology that augments the Scrum lifecycle with incrementally applied safety-related activities and introduces the notion of \"safety debt\" for incrementally tracking the current safety status of a project. We demonstrate the viability of SafetyScrum for managing safety stories in an agile development environment by applying it to a project in which our existing\u00a0\u2026", "num_citations": "18\n", "authors": ["1458"]}
{"title": "Evolving requirements-to-code trace links across versions of a software system\n", "abstract": " Trace links provide critical support for numerous software engineering activities including safety analysis, compliance verification, test-case selection, and impact prediction. However, as the system evolves over time, there is a tendency for the quality of trace links to degrade into a tangle of inaccurate and untrusted links. This is especially true with the links between source-code and upstream artifacts such as requirements - because developers frequently refactor and change code without updating the links. We present TLE (Trace Link Evolver), a solution for automating the evolution of trace links as changes are introduced to source code. We use a set of heuristics, open source tools, and information retrieval methods to detect common change scenarios across different versions of software. Each change scenario is then associated with a set of link evolution heuristics which are used to evolve trace links. We\u00a0\u2026", "num_citations": "18\n", "authors": ["1458"]}
{"title": "Mining domain knowledge [requirements]\n", "abstract": " Basic data-mining skills can be useful for processing domain documents early during requirements engineering. An example from the electronic-healthcare-records domain shows how. The Web extra at http://youtu.be/tHvi3pHEP8c is an audio podcast in which author Jane Cleland-Huang provides an audio recording of the Requirements column, in which she discusses how basic data-mining skills can be useful for processing domain documents early during requirements engineering.", "num_citations": "18\n", "authors": ["1458"]}
{"title": "Achieving lightweight trustworthy traceability\n", "abstract": " Despite the fact that traceability is a required element of almost all safety-critical software development processes, the trace data is often incomplete, inaccurate, redundant, conflicting, and outdated. As a result, it is neither trusted nor trustworthy. In this vision paper we propose a philosophical change in the traceability landscape which transforms traceability from a heavy-weight process producing untrusted trace links, to a light-weight results-oriented trustworthy solution. Current traceability practices which retard agility are cast away and replaced with a disciplined, just-in-time approach. The novelty of our solution lies in a clear separation of trusted trace links from untrusted ones, the change in perspective fromliving-with'inacurate traces toward rigorous and ongoing debridement of stale links from the trusted pool, and the notion of synthesizing availableproject exhaust'as evidence to systematically construct or\u00a0\u2026", "num_citations": "18\n", "authors": ["1458"]}
{"title": "Traceability challenge 2011: Using tracelab to evaluate the impact of local versus global idf on trace retrieval\n", "abstract": " Numerous trace retrieval algorithms incorporate the standard tf-idf (term frequency, inverse document frequency) technique to weight various terms. In this paper we address Grand Challenge C-GC1 by comparing the effectiveness of computing idf based only on the local terms in the query, versus computing it based on general term usage as documented in the American National Corpus. We also address Grand Challenges L-GC1 and L-GC2 by setting ourselves the additional task of designing and conducting the experiments using the alpha-release of TraceLab. TraceLab is an experimental workbench which allows researchers to graphically model and execute a traceability experiment as a workflow of components. Results of the experiment show that the local idf approach exceeds or matches the global approach in all of the cases studied.", "num_citations": "18\n", "authors": ["1458"]}
{"title": "Software and systems traceability\n", "abstract": " This chapter focuses on traceability in the final phases of the software life-cycle: between the development and run-time phases. Between these phases, an abstraction gap exists: the various high level abstractions used during development are lost in the run-time environment. This often makes inspection of the complex, synthetic run-time structure impossible. We present results in the context of the debugging of aspect oriented software development. The compilation process of aspect oriented programs is inherently complex and create a large abstraction gap. In this chapter, we describe an approach for the development of debugging tools that use tracing information to bridge the abstraction gap.", "num_citations": "18\n", "authors": ["1458"]}
{"title": "A decision-centric approach for tracing reliability concerns in embedded software systems\n", "abstract": " Software Architecture is a core component of every software intensive embedded system. It can be seen as the byproduct of a series of decisions made by architects in order to maximize the degree to which quality goals and constraints are satisfied. Unfortunately, long-term activities such as the introduction of new requirements, modification of existing ones, bug fixing, performance tweaking, or even hardware replacements can adversely impact the benefits of these original decisions and erode the quality of the system. We address this problem through introducing a traceability solution that leverages architectural decisions to provide full life-cycle traceability between quality constraints and architectural components. Our approach keeps developers fully informed of potential architectural erosion as they make changes to the requirements, architectural views, and code. We illustrate the challenges of tracing architectural decisions through documented examples drawn from the Avionics domain.", "num_citations": "18\n", "authors": ["1458"]}
{"title": "How do practitioners perceive assurance cases in safety-critical software systems?\n", "abstract": " Safety-critical software systems are those whose failure or malfunction could result in casualty and/or serious financial loss. In such systems, safety assurance cases (SACs) are an emerging approach that adopts a proactive strategy to produce structuralized safety justifications and arguments. While SACs are recommended in many software-intensive safety-critical domains, the lack of knowledge regarding the practitioners' perspectives on using SACs hinders effective adoption of this approach. To gain such knowledge, we interviewed nine practitioners and safety experts who focused on safety-critical software systems. In general, our participants found the SAC approach beneficial for communication of safety arguments and management of safety issues in a multidisciplinary setting. The challenges they faced when using SACs were primarily associated with (1) a lack of tool support,(2) insufficient process\u00a0\u2026", "num_citations": "17\n", "authors": ["1458"]}
{"title": "Decision-Centric Traceability of architectural concerns\n", "abstract": " We present an architecture-centric approach for achieving traceability between stakeholders' quality concerns, architecturally significant requirements, design rationales, and source code. In Decision-Centric Traceability (DCT), all trace links are focused around architectural decisions that include factors as varied as platforms, languages, frameworks, patterns, and lower-level architectural tactics. We show how DCT supports critical software engineering activities such as safety-case construction, impact analysis, stakeholder satisfaction analysis, requirements validation, and architectural preservation. Our approach is illustrated and validated with examples drawn from the architectural decisions and subsequent design of the TraceLab project funded by the US National Science Foundation under a Major Research Infrastructure grant.", "num_citations": "17\n", "authors": ["1458"]}
{"title": "What questions do requirements engineers ask?\n", "abstract": " Requirements Engineering (RE) is comprised of various tasks related to discovering, documenting, and maintaining different kinds of requirements. To accomplish these tasks, a Requirements Engineer or Business Analyst needs to retrieve and combine information from multiple sources such as use case models, interview scripts, and business rules. However, collecting and analyzing all the required data can be tedious and the resulting data is often incomplete with inadequate trace links. Analyzing real-world queries can shed light on the questions requirements professionals would like to ask and the artifacts needed to support such questions. We therefore conducted an online survey with requirements professionals in the IT industry. Our analysis included 29 survey responses and a total of 159 natural language queries. Using open coding and grounded theory, we analyzed and grouped these queries into 9\u00a0\u2026", "num_citations": "15\n", "authors": ["1458"]}
{"title": "Tiqi: Towards natural language trace queries\n", "abstract": " One of the surprising observations of traceability in practice is the under-utilization of existing trace links. Organizations often create links in order to meet compliance requirements, but then fail to capitalize on the potential benefits of those links to provide support for activities such as impact analysis, test regression selection, and coverage analysis. One of the major adoption barriers is caused by the lack of accessibility to the underlying trace data and the lack of skills many project stakeholders have for formulating complex trace queries. To address these challenges we introduce TiQi, a natural language approach, which allows users to write or speak trace queries in their own words. TiQi includes a vocabulary and associated grammar learned from analyzing NL queries collected from trace practitioners. It is evaluated against trace queries gathered from trace practitioners for two different project environments.", "num_citations": "15\n", "authors": ["1458"]}
{"title": "How well do you know your personae non gratae?\n", "abstract": " Imagine that you're building a software system that collects healthcare data and financial information from its users. It might seem obvious that this personal information should be protected from prying eyes through access control mechanisms, audit trails, transaction controls, transmission encryption, and so on--in fact, perhaps so obvious that in many cases people perform only a cursory security analysis and produce rather generic security requirements. But is this the right way to build secure software? Are security requirements so similar across projects that we simply don't need to invest the time to explore product-level needs or to document requirements at an individual level for each project? The Web extra at http://youtu.be/qoocRI-7yRQ is an audio podcast in which author Jane Cleland-Huang discusses the importance of making informed decisions about how much time and effort to invest in analyzing security\u00a0\u2026", "num_citations": "15\n", "authors": ["1458"]}
{"title": "Grand challenges of traceability: The next ten years\n", "abstract": " In 2007, the software and systems traceability community met at the first Natural Bridge symposium on the Grand Challenges of Traceability to establish and address research goals for achieving effective, trustworthy, and ubiquitous traceability. Ten years later, in 2017, the community came together to evaluate a decade of progress towards achieving these goals. These proceedings document some of that progress. They include a series of short position papers, representing current work in the community organized across four process axes of traceability practice. The sessions covered topics from Trace Strategizing, Trace Link Creation and Evolution, Trace Link Usage, real-world applications of Traceability, and Traceability Datasets and benchmarks. Two breakout groups focused on the importance of creating and sharing traceability datasets within the research community, and discussed challenges related to the adoption of tracing techniques in industrial practice. Members of the research community are engaged in many active, ongoing, and impactful research projects. Our hope is that ten years from now we will be able to look back at a productive decade of research and claim that we have achieved the overarching Grand Challenge of Traceability, which seeks for traceability to be always present, built into the engineering process, and for it to have \"effectively disappeared without a trace\". We hope that others will see the potential that traceability has for empowering software and systems engineers to develop higher-quality products at increasing levels of complexity and scale, and that they will join the active community of Software and\u00a0\u2026", "num_citations": "14\n", "authors": ["1458"]}
{"title": "A domain-centric approach for recommending architectural tactics to satisfy quality concerns\n", "abstract": " Architectural tactics such as heartbeat, resource pooling, and scheduling, offer proven solutions for systematically increasing the reliability, security, performance, and other critical characteristics of a software system. Current literature on architectural tactics advocates a requirements-driven approach for deciding when and where tactics should be used in order to address specific quality concerns. In this paper we explore a domain-driven approach by building predictor models which capture relationships between topical domain concepts and the use of specific architectural tactics. Based on an extensive analysis of over 1000 open source systems, we identify significant correlations between domain topics and architectural tactics, and use this information to construct a predictor for generating tactic-related recommendations. Our approach is validated through a series of experiments which demonstrate the ability to\u00a0\u2026", "num_citations": "14\n", "authors": ["1458"]}
{"title": "A machine learning approach for identifying expert stakeholders\n", "abstract": " Requirements gathering, analysis, and specification are human-intensive activities that rely upon finding and engaging a relevant set of informed stakeholders. In many projects initial requirements are captured through the use of wikis or forums, or through initial face-to-face brainstorming meetings. In this paper we introduce a technique for analyzing stakeholders' contributions, extracting domain topics, and construct ing profiles which depict stakeholders' interests in each of the topics. Content and collaborative filtering techniques are then used to identify a diverse set of stakeholders for a given topic. The approach, which can be used to support requirements related activities throughout the software development lifecycle, is illus trated through an example of an Amazonlike student webportal.", "num_citations": "14\n", "authors": ["1458"]}
{"title": "A case study: Injecting safety-critical thinking into graduate software engineering projects\n", "abstract": " Exposure to safety-critical thinking grows in importance as society increasingly depends upon software to control physical devices with potential safety impacts. In this unique graduate capstone experience we engaged graduate Software Engineering students in the specification, design, implementation, validation, and assurance of potentially safety-critical software-intensive products involving physical devices such as Unmanned Autonomous Vehicles, health-sensors, and/or environmental monitors. While each product had at least one safety-critical usage scenario, it also had harmless test-scenarios which enabled students to design and build with safety-in mind, but to test their product in a safe context. Students engaged in safety-related practices such as hazard analysis, safety-design, safety-assurance, and certification processes. We describe the goals and logistics of the course, discuss student outcomes\u00a0\u2026", "num_citations": "13\n", "authors": ["1458"]}
{"title": "Don't Fire the Architect! Where Were the Requirements?\n", "abstract": " The Healthcare.gov debacle of 2013 leads many to wonder if a better understanding of the project's requirements could have lessened the impact of the failed launch. The Web extra at http://youtu.be/qyQldlPz1ws is an audio podcast of author Jane Cleland-Huang reading her Requirements column, in which she discusses the Healthcare.gov debacle of 2013 and how it led many to wonder if a better understanding of the projec's requirements could have lessened the impact of the failed launch.", "num_citations": "13\n", "authors": ["1458"]}
{"title": "Trace-by-classification: A machine learning approach to generate trace links for frequently occurring software artifacts\n", "abstract": " Over the past decade the traceability research community has focused upon developing and improving trace retrieval techniques in order to retrieve trace links between a source artifact, such as a requirement, and set of target artifacts, such as a set of java classes. In this Trace Challenge paper we present a previously published technique that uses machine learning to trace software artifacts that recur is similar forms across across multiple projects. Examples include quality concerns related to non-functional requirements such as security, performance, and usability; regulatory codes that are applied across multiple systems; and architectural-decisions that are found in many different solutions. The purpose of this paper is to release a publicly available TraceLab experiment including reusable and modifiable components as well as associated datasets, and to establish baseline results that would encourage further\u00a0\u2026", "num_citations": "13\n", "authors": ["1458"]}
{"title": "A framework for evaluating traceability benchmark metrics\n", "abstract": " Many software traceability techniques have been developed in the past decade, but suffer from inaccuracy. To address this shortcoming, the software traceability research community seeks to employ benchmarking. Benchmarking will help the community agree on whether improvements to traceability techniques have addressed the challenges faced by the research community. A plethora of evaluation methods have been applied, with no consensus on what should be part of a community benchmark. The goals of this paper are: to identify recurring problems in evaluation of traceability techniques, to identify essential properties that evaluation methods should possess to overcome the identified problems, and to provide guidelines for benchmarking software traceability techniques. We illustrate the properties and guidelines using empirical evaluation of three software traceability techniques on nine data sets. The proposed benchmarking framework can be broadly applied to domains beyond traceability research.", "num_citations": "13\n", "authors": ["1458"]}
{"title": "Evaluating the Use of Project Glossaries in Automated Trace Retrieval.\n", "abstract": " Automated traceability methods use information retrieval techniques to dynamically generate traceability links, however they suffer from precision problems. This paper extends our previous work in using a project glossary to improve trace results and presents criteria for evaluating whether an existing project glossary can be used to enhance results in a given project. A new approach for automatically extracting a set of important terms and phrases is also described. Our experimental results suggest that these terms and phrases can be used effectively in lieu of a project glossary to help improve precision of the retrieved traces.", "num_citations": "13\n", "authors": ["1458"]}
{"title": "Requirements Traceability-When and How does it Deliver more than it Costs?\n", "abstract": " Finding the right traceability process that delivers effective and efficient traceability can be difficult. This panel explores traceability challenges and solutions for finding the right techniques and process to deliver costeffective traceability within an organization.", "num_citations": "13\n", "authors": ["1458"]}
{"title": "The Next Generation of Human-Drone Partnerships: Co-Designing an Emergency Response System\n", "abstract": " The use of semi-autonomous Unmanned Aerial Vehicles (UAV) to support emergency response scenarios, such as fire surveillance and search and rescue, offers the potential for huge societal benefits. However, designing an effective solution in this complex domain represents a\" wicked design\" problem, requiring a careful balance between trade-offs associated with drone autonomy versus human control, mission functionality versus safety, and the diverse needs of different stakeholders. This paper focuses on designing for situational awareness (SA) using a scenario-driven, participatory design process. We developed SA cards describing six common design-problems, known as SA demons, and three new demons of importance to our domain. We then used these SA cards to equip domain experts with SA knowledge so that they could more fully engage in the design process. We designed a potentially reusable\u00a0\u2026", "num_citations": "11\n", "authors": ["1458"]}
{"title": "Modifications, tweaks, and bug fixes in architectural tactics\n", "abstract": " Architectural qualities such as reliability, performance, and security, are often realized in a software system through the adoption of tactical design decisions such as the decision to use redundant processes, a heartbeat monitor, or a specific authentication mechanism. Such decisions are critical for delivering a system that meets its quality requirements. Despite the stability of high-level decisions, our analysis has shown that tactic-related classes tend to be modified more frequently than other classes and are therefore stronger predictors of change than traditional Object-Oriented coupling and cohesion metrics. In this paper we present the results from this initial study, including an analysis of why tactic-related classes are changed, and a discussion of the implications of these findings for maintaining architectural quality over the lifetime of a software system.", "num_citations": "11\n", "authors": ["1458"]}
{"title": "Speech detection of stakeholders' non-functional requirements\n", "abstract": " This paper describes an automatic speech recognition technique for capturing the non-functional requirements spoken by stakeholders at open meetings and interviews during the requirements elicitation process. As statements related to system qualities such as security, performance, and portability are often scattered throughout statements of functional need, the ability to \"listen in\" on a conversation and correctly capture these statements into a single view is very helpful. The approach is intended to enhance and not replace existing elicitation methods in which stakeholders are more directly asked to describe their needs. Training a speech detection tool to recognize individual users is time consuming while speech detection for un-enrolled users is notoriously difficult. Our approach uses a context-free grammar to boost recognition accuracy, segment the stakeholders' utterances and finally to classify the\u00a0\u2026", "num_citations": "11\n", "authors": ["1458"]}
{"title": "Monitoring CPS at runtime-A case study in the UAV domain\n", "abstract": " Unmanned aerial vehicles (UAVs) are becoming increasingly pervasive in everyday life, supporting diverse use cases such as aerial photography, delivery of goods, or disaster reconnaissance and management. UAVs are cyber-physical systems (CPS): they integrate computation (embedded software and control systems) with physical components (the UAVs flying in the physical world). UAVs in particular and CPS in general require monitoring capabilities to detect and possibly mitigate erroneous and safety-critical behavior at runtime. Existing monitoring approaches mostly do not adequately address UAV CPS characteristics such as the high number of dynamically instantiated components, the tight int elements, and the massive amounts of data that need to be processed. In this paper we report results of a case study on monitoring in UAVs. We discuss CPS-specific monitoring challenges and present a prototype\u00a0\u2026", "num_citations": "10\n", "authors": ["1458"]}
{"title": "Safety stories in agile development\n", "abstract": " Safety stories specify safety requirements, using the EARS (Easy Requirements Specification) format. Software practitioners can use them in agile projects at lower levels of safety criticality to deal effectively with safety concerns.", "num_citations": "10\n", "authors": ["1458"]}
{"title": "Mechanical energy storage method and device\n", "abstract": " Provided is an energy storage system configured to accumulate energy for subsequent discharge. One embodiment includes an indirect energy storage assembly configured to accept energy input from a direct storage assembly. The indirect energy storage assembly includes a converter for lifting a mass, a speed reducer coupled to the converter for increasing torque provided, and a mass coupled to the speed reducer for generating potential energy when raised. In one embodiment, the direct energy storage assembly produces energy based on descent of a mass, the descent controlled by operation of a speed increaser coupled to a generator. In one example, the speed increaser provides an input: output ratio of at least 1: 100. The speed increaser can be configured based on parameters of the generator (eg, speed and torque). The mass of the direct energy storage assembly can include a float for lifting the mass\u00a0\u2026", "num_citations": "10\n", "authors": ["1458"]}
{"title": "A pattern system for tracing architectural concerns\n", "abstract": " A software architecture is carefully designed to satisfy the quality concerns of its stakeholders, and as such, represents a systematic and intricately balanced set of design decisions which deliver required qualities such as performance, reliability, and safety. In practice, architectural degradation tends to occur over the lifetime of the software system, as developers make ongoing and incremental maintenance changes to the system without knowledge of its underlying design decisions. Fortunately, this problem can be alleviated by establishing traceability between concrete elements in the architecture and their associated design decisions, and then using these traceability links to keep developers informed of relevant architectural tactics, styles, and design patterns throughout the development process. This paper focuses on the task of creating and using such traceability links. We present six trace creation patterns\u00a0\u2026", "num_citations": "10\n", "authors": ["1458"]}
{"title": "Software requirements\n", "abstract": " This tutorial describes the activities and work products that contribute to the specification and validation of the software requirements of a system. Although requirements practices are closely related to specific software development life cycle models, the general activities described in this paper are common to most process models. The activities of elicitation, analysis, specification, validation, and requirements management are discussed and recommended practices in each of those areas are highlighted. Characteristics of a quality requirements specification are also described.", "num_citations": "10\n", "authors": ["1458"]}
{"title": "From requirements monitoring to diagnosis support in system of systems\n", "abstract": " Context and motivation: Complex industrial software systems are often systems of systems (SoS) whose behavior only fully emerges during operation. Techniques such as requirements monitoring thus have to be used to observe such systems at runtime to detect deviations from their requirements. Question/problem: However, the focus of existing monitoring approaches is mainly on detecting violations of expected behavior, while support for subsequent diagnosis of violations is rather limited and often even neglected. Diagnosis is particularly challenging in SoS, which are characterized by complex heterogeneous architectures and a slew of different development and testing tools. Principal ideas/results: In this research preview paper we discuss the required capabilities for diagnosis support in SoS and outline a tool-supported framework based on a runtime artifact model and pre-defined diagnosis\u00a0\u2026", "num_citations": "9\n", "authors": ["1458"]}
{"title": "Caring: An Undiscovered\" Super-ility\" of Smart Healthcare\n", "abstract": " As new and exciting healthcare applications arise that use smart technologies, the Internet of Things, data analytics, and other technologies, a critical problem is emerging: the potential loss of caring. Although these exciting technologies have improved patient care by allowing for better assessment, surveillance, and treatment, their use can disassociate the caregiver from the patient, essentially removing the \"care\" from healthcare. So, you can view caring as an undiscovered -ility that ranks at least as important as other well-known -ilities in healthcare systems. The Web Extra at https://youtu.be/bDyZ2geRyJE is an audio podcast of author Phil Laplante reading this article.", "num_citations": "9\n", "authors": ["1458"]}
{"title": "Just-in-time traceability for mechatronics systems\n", "abstract": " Effective traceability can be very costly and difficult to achieve in mechatronics systems due to their overall size and complexity. Such systems are often specified and designed in terms of software, electrical, mechanical, and thermodynamic elements, and associated models are represented and stored in various formats and locations. Traceability is of critical concern in such systems, which must often demonstrably comply to a wide range of regulatory codes. To address this problem we present an enterprise level architectural solution for establishing organization wide traceability across a variety of model types. While our approach is applicable to any enterprise level tracing environment, we focus on the mechatronics problem and illustrate our solution with a prototype tool that delivers semi-automated traceability between the regulatory codes, requirements, and systems models of a mechatronics system.", "num_citations": "9\n", "authors": ["1458"]}
{"title": "Traceability research: Taking the next steps\n", "abstract": " This keynote highlights areas of significant accomplishments in traceability research and asks the question of\" where next?\" It describes forward looking projects of the Center of Excellence for Software Traceability (CoEST) and raises some of the difficult questions related to building a shared research infrastructure in the traceability community.", "num_citations": "9\n", "authors": ["1458"]}
{"title": "Automated safeguard selection strategies\n", "abstract": " The goal-oriented security process helps to alleviate risks associated with security and other continuity goals such as scalability, availability, reliability and compliance. System assets, threats, and potential safeguards are modeled in a goal tree to show the likelihood and impact of individual threats and the efficacy of safeguards to protect against them. This paper describes the process of selecting a set of safeguards that optimize security and continuity goals. To mitigate the combination problem introduced by a potentially large set of candidate safeguards, a heuristic method and a genetic algorithm approach for safeguard selection are described An experimental analysis of these approaches is described in which simulated goal trees were generated, and performance, accuracy, and utility of the safeguard selection techniques were evaluated. The paper also describes and assesses different objective functions including optimization of net present value, depth of defense, and target annual loss expectancy.", "num_citations": "9\n", "authors": ["1458"]}
{"title": "Supporting trace evaluation with confidence scores\n", "abstract": " Dynamic trace retrieval enables developers to generate traces between requirements and other software engineering artifacts on an as-needed basis and provides support for critical software engineering activities such as requirements validation and impact analysis. It eliminates the need to construct and maintain explicit traceability links and alleviates the extensive effort that is required to perform a manual trace when no supporting tool or trace matrix is available. Despite these advantages, trace retrieval approaches suffer from precision problems that require an analyst to evaluate the retrieved links and decide which ones are correct and which are incorrect. In this paper we describe the use of confidence scores to help the user make decisions about the correctness of each retrieved link. Initial confidence scores are determined through analyzing the distribution of true-links and non-links within three data sets and then refined through additional knowledge of actual link distribution as it becomes available for the current project. The paper also describes a small usability study that we conducted to evaluate the effectiveness of confidence scores to support the decision making process.", "num_citations": "9\n", "authors": ["1458"]}
{"title": "Mining associations between quality concerns and functional requirements\n", "abstract": " The cost and effort of developing software systems in a new technical area can be extensive. An organization must perform a domain analysis to discover competing products, analyze their architectures and features, and ultimately discover and specify product requirements. However, delivering high quality products, depends not only on gaining an understanding of functional requirements, but also of qualities such as performance, reliability, security, and usability. Discovering such concerns early in the requirements process drives architectural design decisions. This paper extends our prior work on mining functional requirements from large collections of domain documents, by proposing and evaluating a new technique for discovering and specifying quality concerns related to specific functional components. We evaluate our approach against three domains of Positive Train Control, Electronic Health Records, and\u00a0\u2026", "num_citations": "8\n", "authors": ["1458"]}
{"title": "Requirements Management\u2013Novel Perspectives and Challenges (Dagstuhl Seminar 12442)\n", "abstract": " This report documents the program and the outcomes of Dagstuhl Seminar 12442\" Requirements Management--Novel Perspectives and Challenges\". Changes in computational paradigms and capabilities that draw upon platform strategies, web services, and virtualization of both application services and development platforms have significant implications for views of modularity and requirements evolution, complexity of RE tasks, and the economics of system development and operations. The aim of the seminar was to bring together experts from multiple fields to discuss models and theories around these changes. Three key challenges and associated solution ideas were addressed, namely (1) to better deal with context changes and business goal management to reduce the\" black swan\" rate of badly failed large projects,(2) to exploit recent theories of technological and institutional evolution to understand better how to control complexity and leverage it for innovation at the same time, and (3) the demand for runtime re-organization of existing large-scale systems with respect to new operational goals such as energy efficiency. Future RE must see itself as the marketplace where responsibility for all these complexities and evolutionary steps is traded.", "num_citations": "8\n", "authors": ["1458"]}
{"title": "Requirements-gathering collaborative networks in distributed software projects\n", "abstract": " This position paper explores the practices and challenges of distributed requirements gathering through case studies taken from the telecommunications, gaming, and factory automation domains. The social organization of the participants, their formal and informal collaborations, and adoption of relevant tools are modeled as requirements-gathering collaborative networks. The study identifies specific problems and challenges that were observed in the three case studies.", "num_citations": "8\n", "authors": ["1458"]}
{"title": "Quality requirements and their role in successful products\n", "abstract": " This panel will discuss the role of quality requirements in bringing products successfully to market. Techniques for eliciting, modeling, balancing, specifying, and measuring quality requirements will be explored.", "num_citations": "8\n", "authors": ["1458"]}
{"title": "Performance analysis based on requirements traceability\n", "abstract": " Software system performance analysis has become an important research topic in the last decade because it can be performed at early software development stages to mitigate the risk of redesign when problems emerge later. Requirements traceability is critical to providing a complete approach which will lead to an executable model for performance evaluation. This paper investigates the software architectures that are extended based on the performance requirements traceability to represent performance property. The extended architectures are then transformed into a simulation model Colored GSPN. Simulation results are used to validate performance requirements and evaluate system design. A tool was built to automate the transformation and simulation.", "num_citations": "8\n", "authors": ["1458"]}
{"title": "Thinking about quoins: strategic traceability of architecturally significant requirements\n", "abstract": " Architectural degradation is a common problem in most nontrivial, long-lived software systems. By identifying architecturally significant requirements and establishing trace links from those requirements, via architectural decisions, to code, we can keep developers informed of underlying architectural decisions and help preserve code quality during change maintenance. The Web extra at http://youtu.be/U6MAlOvJpQY is an audio podcast of author Jane Cleland-Huang reading her Requirements column, in which she discusses how requirements engineers can keep developers informed of underlying architectural decisions and help preserve code quality during change maintenance.", "num_citations": "7\n", "authors": ["1458"]}
{"title": "3rd international workshop on traceability in emerging forms of software engineering (tefse 2005)\n", "abstract": " Establishing and maintaining traceability links and consistency between software artifacts produced or modified in the software life-cycle are costly and tedious activities that are crucial but frequently neglected in practice. Traceability between the free text documentation associated with the development and maintenance cycle of a software system and its source code are crucial in a number of tasks such as program comprehension, software maintenance, and software verification & validation. Finally, maintaining traceability links between subsequent releases of a software system is important for evaluating relative source code deltas, highlighting effort/code variation inconsistencies, and assessing the change history. The main theme of the workshop is focused on understanding and defining the foundations for consistency and change management of software systems within the scope of artifact-to-artifact (model-to\u00a0\u2026", "num_citations": "7\n", "authors": ["1458"]}
{"title": "Thresholding strategy in requirements trace retrieval\n", "abstract": " This paper describes a categorized thresholding strategy to automatically discover the optimal thresholds during requirements tracing process. An objective function is proposed as a critical measurement in evaluating the performance of thresholding methods. Also, this paper reports early experimental results for this strategy and illustrates its satisfying performance over training dataset.", "num_citations": "7\n", "authors": ["1458"]}
{"title": "Measuring the intensity of object coupling in c++ programs\n", "abstract": " Software metrics increase our ability to understand the behavior of software systems. An accurate measurement provides us with solid understanding of the entity we are measuring. In Object Oriented software, most current metrics quantify a class's coupling complexity by simply counting the number of connections with other classes but such metrics are unable to capture the underlying complexity or tension of individual connections. In this paper we propose a technique for measuring the strength of interclass relationships that takes into account both the number of statements participating in the connection, as well as the complexity of those statements. Our approach introduces a new concept for measuring Object Oriented coupling complexity and provides a more sensitive measurement than traditional approaches. We present examples in C++ to support our method.", "num_citations": "7\n", "authors": ["1458"]}
{"title": "Traceability Transformed: Generating more Accurate Links with Pre-Trained BERT Models\n", "abstract": " Software traceability establishes and leverages associations between diverse development artifacts. Researchers have proposed the use of deep learning trace models to link natural language artifacts, such as requirements and issue descriptions, to source code; however, their effectiveness has been restricted by availability of labeled data and efficiency at runtime. In this study, we propose a novel framework called Trace BERT (T-BERT) to generate trace links between source code and natural language artifacts. To address data sparsity, we leverage a three-step training strategy to enable trace models to transfer knowledge from a closely related Software Engineering challenge, which has a rich dataset, to produce trace links with much higher accuracy than has previously been achieved. We then apply the T-BERT framework to recover links between issues and commits in Open Source Projects. We\u00a0\u2026", "num_citations": "6\n", "authors": ["1458"]}
{"title": "Model-driven requirements for humans-on-the-loop multi-uav missions\n", "abstract": " The use of semi-autonomous Unmanned Aerial Vehicles (UAVs or drones) to support emergency response scenarios, such as fire surveillance and search-and-rescue, has the potential for huge societal benefits. Onboard sensors and artificial intelligence (AI) allow these UAVs to operate autonomously in the environment. However, human intelligence and domain expertise are crucial in planning and guiding UAVs to accomplish the mission. Therefore, humans and multiple UAVs need to collaborate as a team to conduct a time-critical mission successfully. We propose a meta-model to describe interactions among the human operators and the autonomous swarm of UAVs. The meta-model also provides a language to describe the roles of UAVs and humans and the autonomous decisions. We complement the meta-model with a template of requirements elicitation questions to derive models for specific missions. We\u00a0\u2026", "num_citations": "6\n", "authors": ["1458"]}
{"title": "Driving architectural design and preservation from a persona perspective in agile projects\n", "abstract": " Architecturally significant requirements (ASRs) drive and constrain many aspects of architecture. Eliciting and analyzing these requirements in the early phases of a project means that quality concerns can be discovered and addressed during the architectural design. This reduces the risk of costly and unnecessary refactoring. The challenge of emerging requirements is particularly evident in agile projects, which are inherently incremental; however, existing techniques for eliciting ASRs, such as win-win and i*, are typically rejected by agile development teams as being somewhat heavyweight. In this chapter, we present the notion of an architecturally savvy persona (ASP), which is used to emerge and analyze stakeholders\u2019 quality concerns and to drive and validate the architectural design. ASPs are useful for discovering, analyzing, and managing ASRs, and designing and validating high-level architectural\u00a0\u2026", "num_citations": "6\n", "authors": ["1458"]}
{"title": "Are requirements alive and kicking?\n", "abstract": " The importance of discovering and understanding stakeholders' needs and delivering quality products that meet those needs is timeless. Nevertheless, dramatic changes in the IT environment over the past decade have introduced challenges that demand new and innovative approaches impacting almost every aspect of the requirements process.", "num_citations": "6\n", "authors": ["1458"]}
{"title": "Improving automated requirements trace retrieval through term-based enhancement strategies\n", "abstract": " Requirements traceability is concerned with managing and documenting the life of requirements. Its primary goal is to support critical software development activities such as evaluating whether a generated software system satisfies the specified set of requirements, checking that all requirements have been implemented by the end of the lifecycle, and analyzing the impact of proposed changes on the system. Various approaches for improving requirements traceability practices have been proposed in recent years. Automated traceability methods that utilize information retrieval (IR) techniques have been recognized to effectively support the trace generation and retrieval process. IR based approaches not only significantly reduce human effort involved in manual trace generation and maintenance, but also allow the analyst to perform tracing on an \u201cas-needed\u201d basis. The IR-based automated traceability tools\u00a0\u2026", "num_citations": "6\n", "authors": ["1458"]}
{"title": "Supporting agent-based distributed software development through modeling and simulation\n", "abstract": " In today's software engineering environment, it is becoming increasingly commonplace for team members and stakeholders to be distributed in multiple locations and time zones. Under these circumstances, the coordination of software development activities becomes increasingly more complex. One solution uses mobile agent-based tools to support collaborative software engineering tasks, such as requirements management. Despite the fact that development and validation of such tools would be facilitated by the use of modeling and simulation, very little work relating formal methods to agent-based system development has been performed. This paper therefore presents a hierarchical colored Petri Net (CPN) model as a formal framework for agent-based distributed software development, and demonstrates its usefulness by applying the framework to the development of a requirements management system.", "num_citations": "6\n", "authors": ["1458"]}
{"title": "Human-drone interactions with semi-autonomous cohorts of collaborating drones\n", "abstract": " Research in human-drone interactions has primarily focused on cases in which a person interacts with a single drone as an active controller, recipient of information, or a social companion; or cases in which an individual, or a team of operators interacts with a swarm of drones as they perform some coordinated flight patterns. In this position paper we explore a third scenario in which multiple humans and drones collaborate in an emergency response scenario. We discuss different types of interactions, and draw examples from current DroneResponse project.", "num_citations": "5\n", "authors": ["1458"]}
{"title": "Enhancing source code refactoring detection with explanations from commit messages\n", "abstract": " We investigate the extent to which code commit summaries provide rationales and descriptions of code refactorings. We present a refactoring description detection tool CMMiner that detects code commit messages containing refactoring information and differentiates between twelve different refactoring types. We further explore whether refactoring information mined from commit messages using CMMiner, can be combined with refactoring descriptions mined from source code using the well-known RMiner tool. For six refactoring types covered by both CMMiner and RMiner, we observed 21.96% to 38.59% overlap in refactorings detected across four diverse open-source systems. RMiner identified approximately 49.13% to 60.29% of refactorings missed by CMMiner, primarily because developers often failed to describe code refactorings that occurred alongside other code changes. However, CMMiner identified 10\u00a0\u2026", "num_citations": "5\n", "authors": ["1458"]}
{"title": "Stakeholders on the Prowl\n", "abstract": " Working with diverse stakeholders is a fact of life for any requirements engineer. And learning to bring out the best in each of them is an art acquired over time. This article shares effective stakeholder interaction techniques for solving three common problems. The Web extra at https://youtu.be/1df3HmRTbBk is an audio podcast in which author Jane Cleland-Huang provides an audio recording of the Requirements column.", "num_citations": "5\n", "authors": ["1458"]}
{"title": "Live Study Proposal: Collecting Natural Language Trace Queries.\n", "abstract": " [Context & motivation:] Software traceability links which are created during the development process are subsequently underutilized because project stakeholders lack the skills they need to compose trace queries. TiQi addresses this problem by accepting natural language trace queries and transforming them to executable SQL.[Question/problem:] The TiQi engine depends on the presence of a domain model. This can best be constructed through collecting samples from potential users. We are interested to learn what trace queries would be of interest to potential stakeholders and what terminology they would choose to express those queries.[Principal ideas/results:] In this live study we will demonstrate TiQi in action, and lead the participants through a series of carefully crafted\u2019what-if\u2019scenarios designed to capture a variety of sample queries.[Contribution:] The study is expected to lead to a more extensive domain model which will improve the accuracy of TiQi\u2019s query transformation process.", "num_citations": "5\n", "authors": ["1458"]}
{"title": "Injecting value-thinking into prioritization decisions\n", "abstract": " A proposed approach injects value-thinking into feature prioritization, using story mapping. The Web extra at http://youtu.be/Xm5VqODvVZE is an audio podcast in which author Jane Cleland-Huang provides an audio recording of the Requirements column, in which she discusses an approach that injects value-thinking into feature prioritization by using story mapping.", "num_citations": "5\n", "authors": ["1458"]}
{"title": "Traceability gap analysis for assessing the conformance of software traceabilityto relevant guidelines\n", "abstract": " Many guidelines for safety-critical industries such as aeronautics, medical devices, and railway communications, specify that traceability must be used to demonstrate that a rigorous process has been followed and to provide evidence that the system is safe for use. In practice, there is a gap between what is prescribed by guidelines and what is implemented in practice, making it difficult for organizations and certifiers to fully evaluate the safety of the software system. We present an approach, which parses a guideline to extract a Traceability Model depicting software artifact types and their prescribed traces. It then analyzes the traceability data within a project to identify areas of traceability failure. Missing traceability paths, redundant and/or inconsistent data, and other problems are highlighted. We used our approach to evaluate the traceability of seven safety-critical software systems and found that none of the evaluated projects contained traceability that fully conformed to its relevant guidelines.", "num_citations": "5\n", "authors": ["1458"]}
{"title": "A dynamic approach for managing stakeholder credentials for lightweight, collaborative, requirements elicitation\n", "abstract": " As software projects increase in size and complexity, and involve stakeholders across geographic and organizational boundaries, it becomes increasingly important to develop new approaches and tools for supporting distributed, collaborative and scalable requirements elicitation processes. Such processes and related tools must support relatively open and inclusive collaborations, while simultaneously constraining stakeholders' contributions according to their areas and levels of expertise. This position paper proposes a new approach that uses information retrieval methods and group dynamics to manage stakeholder credentials and provide access permissions in a dynamically evolving, open-access, requirements elicitation process.", "num_citations": "5\n", "authors": ["1458"]}
{"title": "Supporting quality assurance with automated process-centric quality constraints checking\n", "abstract": " Regulations, standards, and guidelines for safety-critical systems stipulate stringent traceability but do not prescribe the corresponding, detailed software engineering process. Given the industrial practice of using only semi-formal notations to describe engineering processes, processes are rarely \u201cexecutable\u201d and developers have to spend significant manual effort in ensuring that they follow the steps mandated by quality assurance. The size and complexity of systems and regulations makes manual, timely feedback from Quality Assurance (QA) engineers infeasible. In this paper we propose a novel framework for tracking processes in the background, automatically checking QA constraints depending on process progress, and informing the developer of unfulfilled QA constraints. We evaluate our approach by applying it to two different case studies; one open source community system and a safety-critical system in\u00a0\u2026", "num_citations": "4\n", "authors": ["1458"]}
{"title": "Requirements-driven configuration of emergency response missions with small aerial vehicles\n", "abstract": " Unmanned Aerial Vehicles (UAVs) are increasingly used by emergency responders to support search-and-rescue operations, medical supplies delivery, fire surveillance, and many other scenarios. At the same time, researchers are investigating usage scenarios in which UAVs are imbued with a greater level of autonomy to provide automated search, surveillance, and delivery capabilities that far exceed current adoption practices. To address this emergent opportunity, we are developing a configurable, multi-user, multi-UAV system for supporting the use of semi-autonomous UAVs in diverse emergency response missions. We present a requirements-driven approach for creating a software product line (SPL) of highly configurable scenarios based on different missions. We focus on the process for eliciting and modeling a family of related use cases, constructing individual feature models, and activity diagrams for\u00a0\u2026", "num_citations": "4\n", "authors": ["1458"]}
{"title": "Traceability Support for Multi-Lingual Software Projects\n", "abstract": " Software traceability establishes associations between diverse software artifacts such as requirements, design, code, and test cases. Due to the non-trivial costs of manually creating and maintaining links, many researchers have proposed automated approaches based on information retrieval techniques. However, many globally distributed software projects produce software artifacts written in two or more languages. The use of intermingled languages reduces the efficacy of automated tracing solutions. In this paper, we first analyze and discuss patterns of intermingled language use across multiple projects, and then evaluate several different tracing algorithms including the Vector Space Model (VSM), Latent Semantic Indexing (LSI), Latent Dirichlet Allocation (LDA), and various models that combine mono-and cross-lingual word embeddings with the Generative Vector Space Model (GVSM). Based on an analysis\u00a0\u2026", "num_citations": "4\n", "authors": ["1458"]}
{"title": "Evaluating the interpretation of natural language trace queries\n", "abstract": " [Context and Motivation:] In current practice, existing traceability data is often underutilized due to lack of accessibility and difficulties users have in constructing the complex SQL queries needed to address realistic Software Engineering questions. In our prior work we therefore presented TiQi \u2013 a natural language (NL) interface for querying software projects. TiQi has been shown to transform a set of trace queries collected from IT experts at accuracy rates ranging from 47\u00a0% to 93\u00a0%. [Question/problem:] However, users need to quickly determine whether TiQi has correctly understood the NL query. [Principal ideas/results:] TiQi needs to communicate the transformed query back to the user and provide support for disambiguation and correction. In this paper we report on three studies we conducted to compare the effectiveness of four query representation techniques. [Contribution:] We show that\u00a0\u2026", "num_citations": "4\n", "authors": ["1458"]}
{"title": "Patterns of co-evolution between requirements and source code\n", "abstract": " Software systems are characterized by continual change which often occurs concurrently across various artifact types. For example, changes may be initiated at the requirements, design, or source code level. Understanding patterns of co-evolution across requirements and source code provides fundamental building blocks for automating software engineering activities such as trace link creation and evolution, requirements analysis and maintenance, refactoring detection, and the generation of task recommendations. However, prior work has focused almost entirely on the evolution of individual artifact types such as requirements, design, or source code. In this paper we document patterns of co-evolution that occur between requirements and source code. We illustrate the utility of the patterns for detecting missing requirements and for evolving requirements to source code trace links.", "num_citations": "4\n", "authors": ["1458"]}
{"title": "A predictive business agility model for service oriented architectures\n", "abstract": " Service-Oriented Architecture (SOA) is now considered a mainstream option for delivering solutions that promise business agility benefits. Unfortunately, there is currently no quantitative approach for predicting the expected agility of a SOA system under development. In this paper we present an empirically validated Predicted Business Agility Index (PBAI) which is designed to measure the expected business agility of a SOA deployment. The PBAI is constructed through statistically analyzing the relationship between 150 technical attributes and the attainment of business agility in 39 SOA deployments. 37 of the technical attributes, classified into three areas of architecture, business process management, and impact analysis are determined to be the primary contributors to achieving business agility. The PBAI is evaluated using a leave-one-out cross validation experiment of the SOA projects in our study.", "num_citations": "4\n", "authors": ["1458"]}
{"title": "Towards a Model-Integrated Runtime Monitoring Infrastructure for Cyber-Physical Systems\n", "abstract": " Runtime monitoring is essential for ensuring the safe operation and enabling self-adaptive behavior of Cyber-Physical Systems (CPS). It requires the creation of system monitors, instrumentation for data collection, and the definition of constraints. All of these aspects need to evolve to accommodate changes in the system. However, most existing approaches lack support for the automated generation and setup of monitors and constraints for diverse technologies and do not provide adequate support for evolving the monitoring infrastructure. Without this support, constraints and monitors can become stale and become less effective in long-running, rapidly changing CPS. In this \u201cnew and emerging results\u201d paper we propose a novel framework for model-integrated runtime monitoring. We combine model-driven techniques and runtime monitoring to automatically generate large parts of the monitoring framework and to\u00a0\u2026", "num_citations": "3\n", "authors": ["1458"]}
{"title": "Adaptive Autonomy in Human-on-the-Loop Vision-Based Robotics Systems\n", "abstract": " Computer vision approaches are widely used by autonomous robotic systems to sense the world around them and to guide their decision making as they perform diverse tasks such as collision avoidance, search and rescue, and object manipulation. High accuracy is critical, particularly for Human-on-the-loop (HoTL) systems where decisions are made autonomously by the system, and humans play only a supervisory role. Failures of the vision model can lead to erroneous decisions with potentially life or death consequences. In this paper, we propose a solution based upon adaptive autonomy levels, whereby the system detects loss of reliability of these models and responds by temporarily lowering its own autonomy levels and increasing engagement of the human in the decision-making process. Our solution is applicable for vision-based tasks in which humans have time to react and provide guidance. When implemented, our approach would estimate the reliability of the vision task by considering uncertainty in its model, and by performing covariate analysis to determine when the current operating environment is ill-matched to the model's training data. We provide examples from DroneResponse, in which small Unmanned Aerial Systems are deployed for Emergency Response missions, and show how the vision model's reliability would be used in addition to confidence scores to drive and specify the behavior and adaptation of the system's autonomy. This workshop paper outlines our proposed approach and describes open challenges at the intersection of Computer Vision and Software Engineering for the safe and reliable deployment of\u00a0\u2026", "num_citations": "3\n", "authors": ["1458"]}
{"title": "Towards semantically guided traceability\n", "abstract": " In many regulated domains, traceability is established across diverse artifacts such as requirements, design, code, test cases, and hazards \u2013 either manually or with the help of supporting tools, and the resulting trace links are used to support activities such as impact analysis, compliance verification, and safety inspections. Automated tracing techniques need to leverage the semantics of underlying artifacts in order to establish more accurate trace links and to provide explanations of links that have been created in either a manual or automated fashion. To support this, we propose an automated technique which leverages source code, project artifacts and an external domain corpus to generate a domain-specific concept model. We then use the generated concept model to improve traceability results and to provide explanations of the results. Our approach overcomes existing problems with deep-learning traceability\u00a0\u2026", "num_citations": "3\n", "authors": ["1458"]}
{"title": "Toward Meaningful Industrial--Academic Partnerships\n", "abstract": " At the Ready-Set-Transfer panel at the 2014 IEEE International Requirements Engineering Conference, researchers presented their projects to a team of industrial judges, explaining the industrial motivation and describing how they had evaluated their idea's adoption readiness. The projects included FlexiSketch, a collaborative-whiteboard sketching tool; the Collaborative Creativity Canvas, which replaces requirements negotiation with a lively cocreation process; and Archie, which detects and visualizes architectural decisions in code. The Web extra at http://youtu.be/6RNYVVWrJAQ is an audio podcast in which author Jane Cleland-Huang provides an audio recording of the Requirements column,in which she discusses the Ready-Set-Transfer panel at the 2014 IEEE International Requirements Engineering Conference.", "num_citations": "3\n", "authors": ["1458"]}
{"title": "Using tracelab to design, execute, and baseline empirical requirements engineering experiments\n", "abstract": " As Requirements Engineering research continues to grow into a mature and rigorous discipline, an increasing focus is placed on the need for sound evaluation techniques that compare the benefits of a new solution against existing ones. In this tool demonstration we introduce TraceLab, an instrumented environment for modeling, executing, and comparatively evaluating experimental results. While initially developed for the Software Traceability domain, TraceLab provides a framework which can be populated with experiments, datasets, and reusable components for almost any empirical software engineering domain. In this demo we present examples from the Requirements Engineering domain.", "num_citations": "3\n", "authors": ["1458"]}
{"title": "Next Top Model: A Requirements Engineering Reality Panel\n", "abstract": " This panel builds upon a growing wave of reality television shows and proposes to go in search of requirements engineering's very own next top model. Through a series of tasks, some pre-prepared and some assigned on the fly, a number of small teams will compete for this prestigious title. Teams will be challenged to illustrate the power and flexibility of their favorite approach for requirements modeling, while conference participants will act as the ultimate judges as they vote approaches off the panel round-by-round. Does the requirements engineering community have any brave modelers? Is the requirements engineering community ready for a model showdown? Come to the panel session and find out!", "num_citations": "3\n", "authors": ["1458"]}
{"title": "Enhancing Taxonomy Completion with Concept Generation via Fusing Relational Representations\n", "abstract": " Automatic construction of a taxonomy supports many applications in e-commerce, web search, and question answering. Existing taxonomy expansion or completion methods assume that new concepts have been accurately extracted and their embedding vectors learned from the text corpus. However, one critical and fundamental challenge in fixing the incompleteness of taxonomies is the incompleteness of the extracted concepts, especially for those whose names have multiple words and consequently low frequency in the corpus. To resolve the limitations of extraction-based methods, we propose GenTaxo to enhance taxonomy completion by identifying positions in existing taxonomies that need new concepts and then generating appropriate concept names. Instead of relying on the corpus for concept embeddings, GenTaxo learns the contextual embeddings from their surrounding graph-based and language-based relational information, and leverages the corpus for pre-training a concept name generator. Experimental results demonstrate that GenTaxo improves the completeness of taxonomies over existing methods.", "num_citations": "2\n", "authors": ["1458"]}
{"title": "Towards the Next Generation of Scenario Walkthrough Tools\u2013A Research Preview\n", "abstract": " [Context and motivation] With the rise of cyber-physical systems (CPS), smart ecosystems, and the Internet of Things (IoT), software-intensive systems have become pervasive in everyone\u2019s daily life. The shift from software systems to ubiquitous adaptive software-intensive systems not only affects the way we use software but further has an impact on the way these systems are designed and developed. Gathering requirements for such systems can benefit from elicitation processes that are conducted in the field with domain experts. [Question/problem] More traditional elicitation approaches such as interviews or workshops exhibit limitations when it comes to gathering requirements for systems of this nature \u2013 often lacking an in-depth context analysis and understanding of contextual constraints which are easily missed in a formal elicitation setting. Furthermore, dedicated methods which focus on\u00a0\u2026", "num_citations": "2\n", "authors": ["1458"]}
{"title": "Requirements That Reflect Social Responsibility\n", "abstract": " A few simple steps can help app developers think through potential harm, identify mitigating requirements, and ensure that the products they develop maximize good and minimize harm. The Web extra at https://youtu.be/UI-itpTr6Jw is an audio podcast of this column.", "num_citations": "2\n", "authors": ["1458"]}
{"title": "User-constrained clustering in online requirements forums\n", "abstract": " [Context & motivation:] Software development projects involving geographically dispersed stakeholders often use web-based discussion forums to gather feature requests. Our previous study showed that users have a tendency to create redundant threads as well as large unfocused mega-threads. [Question/problem:] In this paper we propose novel solution for integrating user feedback into the process of dynamically and iteratively clustering features into discussion threads. [Principal ideas/results:] We integrate feed back in the form of stick-together and move-apart advice, plus user-defined tags into our consensus based clustering process. [Contribution:] Experimental results demonstrate that our approach is able to deliver high quality and stable clusters to facilitate forum-based requirements elicitation.", "num_citations": "2\n", "authors": ["1458"]}
{"title": "Software and systems traceability for safety-critical projects (dagstuhl seminar 15162)\n", "abstract": " This report documents the program and the outcomes of Dagstuhl Seminar 15162 on\" Software and Systems Traceability for Safety-Critical Projects\". The event brought together researchers and industrial practitioners working in the field of safety critical software to explore the needs, challenges, and solutions for Software and Systems Traceability in this domain. The goal was to explore the gap between the traceability prescribed by guidelines and that delivered by manufacturers, and starting from a clean slate, to clearly articulate traceability needs for safety-critical software systems, to identify challenges, explore solutions, and to propose a set of principles and domain-specific exemplars for achieving traceability in safety critical systems.", "num_citations": "2\n", "authors": ["1458"]}
{"title": "Requirements Engineering's Next Top Model\n", "abstract": " A game-show environment let a panel competitively explore the use of various requirements modeling techniques for specifying a complex problem. Although plain old text and rich pictures emerged as the winners, real-world problems are best modeled using a variety of techniques. The Web extra at http://youtu.be/6vfIwSauj5o is an audio podcast of author Jane Cleland-Huang providing an audio recording of her Requirements column, in which she discusses how a game-show environment at the 2013 European Software Engineering Conference let a panel competitively explore the use of various requirements modeling techniques for specifying a complex problem.", "num_citations": "2\n", "authors": ["1458"]}
{"title": "A Probabilistic Approach to Evaluating Early Aspects\n", "abstract": " The paper proposes a semi-automated approach for supporting decision making during early aspect identification. A probabilistic trace retrieval tool is used to dynamically generate links between potential aspects initially identified through subgoals and operationalizations in a Softgoal Interdependency Graph, and artifacts representing early functional descriptions of the system. The user evaluates the links to determine if they impact the system as cross-cutting concerns that could be modeled as aspects. An example is used to illustrate the proposed approach.", "num_citations": "2\n", "authors": ["1458"]}
{"title": "Charter (Business Plan) for the center of excellence for traceability\n", "abstract": " The vision of the COE for Traceability is to provide leadership for traceability research, education, and practice; promoting the pursuit of excellence from research idea to practice, based on a foundation of innovative, ethical, collaborative work; and embracing this vision, to be the best traceability center in the world.", "num_citations": "2\n", "authors": ["1458"]}
{"title": "Visualizing Change in Agile Safety-Critical Systems\n", "abstract": " High dependability software systems must be developed and maintained using rigorous safety-assurance practices. By leveraging traceability, we can visualize and analyze changes as they occur, mitigate potential hazards, and support greater agility.", "num_citations": "1\n", "authors": ["1458"]}
{"title": "Disruptive change in requirements engineering research\n", "abstract": " This keynote addresses the challenges and opportunities introduced by disruptive change in the current requirements engineering landscape. Sea changes in the way practitioners develop software, along with advances in artificial intelligence algorithms and the ubiquity of social media environments have created a goldilocks opportunity for innovative creativity that potentially touches every aspect of requirements engineering research. Coupled with passion and vision, these advances revitalize our ability to address open requirements challenges in new and meaningful ways.", "num_citations": "1\n", "authors": ["1458"]}
{"title": "Swarming remote piloted aircraft systems for mosquito-borne disease research and control\n", "abstract": " Small Unmanned Aircraft Systems (sUAS) are an emerging application area for many industries including surveillance, agriculture monitoring, and vector-borne disease control. With drastically lower costs and increasing performance and autonomy, future application evolution will more than likely include the use of sUAS swarms. Several largely successful experiments in recent years, using off the shelf sUAS, have been conducted to address the long standing challenge of controlling and monitoring vector-borne diseases. In this paper we build on lessons learned from these prior efforts, and discuss ways in which swarms of sUAS could be deployed to place and monitor Autocidal Gravid Ovitraps for reducing the mosquito population.", "num_citations": "1\n", "authors": ["1458"]}
{"title": "Grand Challenges of Traceability 2017\n", "abstract": " Just over ten years ago a group of researchers met under the St. Louis Arches at the 2005 International Conference on Software Engineering and formulated a plan to launch the Center of Excellence for Software Traceability. The goal was rather audacious\u2013to identify the Grand Challenges of Traceability and to work together to forge real, industrial strength solutions that would advance the field in non-trivial ways.Stepping back a few years to the early 1990s, Olly Gotel and Anthony Finkelstein had conducted an extensive study with industrial practitioners and published what has now become a seminal paper in the field, entitled \u201cAn Analysis of the Requirements Traceability Problem\u201d[2]. Their work highlighted several traceability challenges\u2013especially those related to the practice and processes of establishing traceability in an industrial setting. In another seminal paper published in 2001, Ramesh Balasubramaniam conducted an indepth study of requirements traceability in practice and constructed traceability metamodels for various software engineering tasks [7]. These papers, alongside others that emerged in the early 2000s, clearly defined the traceability problem and laid a solid foundation for a flurry of research that has continued until this day. The year 2002 also marked a significant step forward in the landscape of traceability research when Giulio Antoniol, Gerardo Canfora, Gerardo Casazza, Andrea De Lucia, and Ettore Merlo published a paper describing the use of information retrieval techniques to automatically construct trace links between documentation and code [1]. This paper, in particular, attracted numerous researchers to the\u00a0\u2026", "num_citations": "1\n", "authors": ["1458"]}
{"title": "Artifact: Cassandra Source Code, Feature Descriptions across 27 Versions, with Starting and Ending Version Trace Matrices\n", "abstract": " To facilitate research into trace link evolution we present 27 versions of Cassandra source code, feature descriptions for each version, deltas between versions, structured descriptions of each version, and trace links between a subset of 48 features and source code for the starting and ending versions.", "num_citations": "1\n", "authors": ["1458"]}
{"title": "From Raw Project Data to Business Intelligence\n", "abstract": " VTML (Visual Trace Modeling Language) empowers project stakeholders to issue useful queries. The Web extra at https://youtu.be/RH4rvFgj8lQ is an audio podcast in which author Jane Cleland-Huang provides an audio recording of the Requirements column, in which she discusses how VTML (Visual Trace Modeling Language) empowers project stakeholders to issue useful queries.", "num_citations": "1\n", "authors": ["1458"]}
{"title": "Beyond anecdotal thinking: deepening our understanding for achieving quality goals\n", "abstract": " Quality goals for security, business agility, maintainability and other such attributes are often achieved through implementing best practices. To know which stakeholder goals are attainable and how they can best be achieved, we must empirically evaluate software development beliefs and practices. The Web extra at http://youtu.be/gLHkN_5wVCc is an audio podcast in which author Jane Cleland-Huang speaks with coauthor Mamoun Hirzalla from the Requirements column about the importance of challenging ideas, questioning beliefs, and understanding how various development practices and technical decisions can help or hinder the achievement of development goals.", "num_citations": "1\n", "authors": ["1458"]}
{"title": "Evaluating the effectiveness of a collaborative requirements engineering modeling notation for planning globally distributed projects\n", "abstract": " In many software projects, stakeholders are distributed across different time zones, organizations, and geographical locations. This creates challenges for conducting people-intensive activities such as requirements elicitation, analysis, and prioritization. To address these problems we previously introduced a visual modeling notation to help project managers plan the collaboration infrastructures needed to support requirements-related activities in globally distributed projects. In this paper we present a refined version of the notation and report on an observational study we conducted in which project managers used our notation to plan globally distributed projects. Results show that the modeling activity and the resulting diagrams helped the project managers to better understand the communication needs for the project, to identify potential communication and collaboration problems, and to proactively address the infrastructure and communication needs for the project.", "num_citations": "1\n", "authors": ["1458"]}
{"title": "Automated Generation of UML Class Diagrams from Softgoal Patterns\n", "abstract": " Goal oriented methods provide software engineers with the means of modeling high-level systemic goals, for proposing and evaluating architectural solutions, and finally for detecting and resolving conflicts that occur. This paper describes a new technique that enables design patterns to be applied within a goal-oriented framework as potential design solutions. These softgoal design patterns are then contextualized by the developer according to the constraints and context of the specific problem, and are used to automatically generate UML class diagrams. This approach provides the potential for longer-term fully automated traceability between goal and design models.", "num_citations": "1\n", "authors": ["1458"]}
{"title": "Incremental funding method\n", "abstract": " Provided is a method for developing a software product. The method can be implemented by stakeholders or by a service. Further, software can implement the method to provide project metrics before and during the development of the software product. The method identifies elements of the software product for development that have associated economic values for multiple time periods. The multiple time periods indicate the time to develop and then implement the software product. The elements can have dependencies that require the development of the elements as strands. Consequently, the strands also have economic values that are adjusted to permit the identification of the elements of the software product to develop.", "num_citations": "1\n", "authors": ["1458"]}
{"title": "Poirot: TraceMaker: A Tool for Dynamically Retrieving Traceability Links\n", "abstract": " Poirot: TraceMaker utilizes a probabilistic approach to dynamically retrieve traceability links between artifacts of the software development process. The probabilistic inference model at the core of the tool calculates the probability of a link between a query and document based on the commonality of terms between the query and document, the general distribution of those terms in the dataset, and also through incorporating knowledge about the clustering and hierarchical structuring of artifacts. Poirot is a web-based tool designed to provide efficient traceability support for all stakeholders within an organization It provides a streamlined and simple interface to a relatively complex underlying inference engine.. External artifacts are processed either through their XMI representation or through a customized interface. Poirot supports a wide variety of trace queries displaying results in both a textual and visual format. This\u00a0\u2026", "num_citations": "1\n", "authors": ["1458"]}
{"title": "Empirical Study of a Probabilistic Network Model for Retrieving Traceability Links\n", "abstract": " Requirements traceability provides critical support in helping manage the evolution of software systems. Establishing and maintaining trace links is an arduous problem requiring intensive human effort when traces need to be established manually. Automatic retrieval tools can help maintain traceability links by dynamically identifying traces between artifacts. In order to effectively reduce the effort involved in evaluating the correctness of the retrieved links such automatic tools must achieve high retrieval performance. This paper presents results of experimental studies to analyze the performance of a dynamic trace retrieval approach implementing a probabilistic information retrieval network. The experiments are conducted on three different datasets. An implementation of the retrieval approach described in the paper involves the definition of a small training set for which correct traces are previously defined. This can be accomplished by either using past knowledge or by manually evaluating the traces in the generated training set. A study explores the effect of different sized training sets on the retrieval performance of the automatic tool. A second study analyzes methods for defining confidence values, which are attached to each (un) retrieved trace to indicate how confident we are that the dynamically retrieved trace represents a true link, or vice versa that the link that are not retrieved by the tool are in fact false links. The results of this research are beneficial for enhancing the utility and performance of dynamic tracing tools.", "num_citations": "1\n", "authors": ["1458"]}
{"title": "Strategic Traceability for Safety-Critical Projects\n", "abstract": " //An evaluation of traceability information for 10 submissions prepared by manufacturers for review at the US Food and Drug Administration identifies nine widespread traceability problems that affected regulators\u2019 ability to evaluate products safety in a timely manner.//s3mad. indd 58 3/29/13 5: 43 PM may/JuNE 2013| IEEE SoftwarE 59 systems traceability in general product development efforts. The following practices can be used to establish traceability that\u2019s cost-effective and that provides effective support for constructing a safety-critical system and assessing its safety. We present the practices in the order in which we might expect them to be adopted. In some cases, higherlevel practices are dependent on lowerlevel ones.Practice 1: Plan Your Traceability Project managers should strategically plan traceability in a project\u2019s early phases and document it using a traceability information model (TIM). 7 A TIM models the traceable artifact types (requirements, design, code, and so on) and their permitted trace links as a Unified Modeling Language (UML) class diagram. Figure 1 depicts a TIM for a safety-critical project. Artifact", "num_citations": "1\n", "authors": ["1458"]}