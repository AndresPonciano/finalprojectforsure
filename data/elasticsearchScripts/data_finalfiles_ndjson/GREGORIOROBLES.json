{"title": "Free/libre and open source software: Survey and study\n", "abstract": " Although Open Source and Free Software are no new phenomenon, they have shown a considerable increase of their importance just in recent years. However, many aspects of this domain still appear unknown or even strange. Economic exchange relations, as they occur within the community of OS/FS developers as well as in the traditional parts of capitalist economies, are usually based on the fundamental principles of private property and monetary payments. However, these principles seem not to be applicable to OS/FS, and still this domains functions very well and gains more and more importance in the leading software markets.Based on an online survey on 2784 Open Source/Free Software developers, this report provides insights in fundamental features of the OS/FS community and its economic principles. It sheds a light on personal features of OS/FS developers, of their work and project organization, their motivations, expectations, and orientations. Finally, it illustrates the fundamental dividing lines that characterise mainly the OS/FS community and cause its outstanding position, which are the distinction between monetary and non-monetary rewards, the distinction between OS/FS and proprietary software, but also the internal distinction between Open Source Software and Free Software.", "num_citations": "558\n", "authors": ["109"]}
{"title": "Dr. Scratch: Automatic Analysis of Scratch Projects to Assess and Foster Computational Thinking\n", "abstract": " One of the barriers to entry of computer programming in schools is the lack of tools that support educators in the assessment of student projects. In order to amend this situation this paper presents Dr. Scratch, a web application that allows teachers and students to automatically analyze projects coded in Scratch, the most used programming language in primary and secondary education worldwide, to check if they have been properly programmed, learn from their mistakes and get feedback to improve their code and develop their Computational Thinking (CT) skills. One of the goals of Dr. Scratch, besides supporting teachers in the evaluation tasks, is to act as a stimulus to encourage students to keep on improving their programming skills. Aiming to check its effectiveness regarding this objective, workshops with students in the range from 10 to 14 years were run in 8 schools, in which over 100 learners analyzed one of their Scratch projects with Dr. Scratch, read the information displayed as feedback by Dr. Scratch, and tried to improve their projects using the guidelines and tips offered by the tool. Our results show that at the end of the workshop, students increased their CT score and, consequently, improved their coding skills.", "num_citations": "249\n", "authors": ["109"]}
{"title": "Development of computational thinking skills through unplugged activities in primary school\n", "abstract": " Computational thinking is nowadays being widely adopted and investigated. Educators and researchers are using two main approaches to teach these skills in schools: with computer programming exercises, and with unplugged activities that do not require the use of digital devices or any kind of specific hardware. While the former is the mainstream approach, the latter is especially important for schools that do not have proper technology resources, Internet connections or even electrical power. However, there is a lack of investigations that prove the effectiveness of the unplugged activities in the development of computational thinking skills, particularly for primary schools. This paper, which summarizes a quasi-experiment carried out in two primary schools in Spain, tries to shed some light on this regard. The results show that students in the experimental groups, who took part in the unplugged activities, enhanced\u00a0\u2026", "num_citations": "127\n", "authors": ["109"]}
{"title": "Developing Mathematical Thinking with Scratch\n", "abstract": " One of the latest trends in the educational landscape is the introduction of computer programming in the K-12 classroom to develop computational thinking in students. As computational thinking is not a skill exclusively related to computer science, it is assumed \u2013 but not yet scientifically proven \u2013 that the problem solving process may be generalized and transferred to a wide variety of problems. This paper presents a research designed to test whether the use of coding in Maths classes could have a positive impact on learning outcomes of students in their mathematical skills. Therefore, the questions we want to investigate in this paper are if the use of programming in Maths classes improves (a) modeling process and reality phenomena, (b) reasoning, (c) problem formulation and problem solving, and (d) comparison and execution of procedures and algorithms. We have therefore designed a quantitative, quasi\u00a0\u2026", "num_citations": "127\n", "authors": ["109"]}
{"title": "Dr. Scratch: A web tool to automatically evaluate Scratch projects\n", "abstract": " This poster paper presents the operation and the new features of Dr. Scratch, an award-winning gamified web application that allows to perform automatic analysis of Scratch projects to assess the development of computational thinking and detect some bad programming habits that are common in students learning to program in this environment.", "num_citations": "126\n", "authors": ["109"]}
{"title": "Replicating msr: A study of the potential replicability of papers published in the mining software repositories proceedings\n", "abstract": " This paper is the result of reviewing all papers published in the proceedings of the former International Workshop on Mining Software Repositories (MSR) (2004-2006) and now Working Conference on MSR (2007-2009). We have analyzed the papers that contained any experimental analysis of software projects for their potentiality of being replicated. In this regard, three main issues have been addressed: i) the public availability of the data used as case study, ii) the public availability of the processed dataset used by researchers and iii) the public availability of the tools and scripts. A total number of 171 papers have been analyzed from the six workshops/working conferences up to date. Results show that MSR authors use in general publicly available data sources, mainly from free software repositories, but that the amount of publicly available processed datasets is very low. Regarding tools and scripts, for a\u00a0\u2026", "num_citations": "95\n", "authors": ["109"]}
{"title": "The quest for open source projects that use UML: mining GitHub\n", "abstract": " Context: While industrial use of UML was studied intensely, little is known about UML use in Free/Open Source Software (FOSS) projects. Goal: We aim at systematically mining GitHub projects to answer the question when models, if used, are created and updated throughout the whole project's life-span. Method: We present a semi-automated approach to collect UML stored in images,. xmi, and. uml files and scanned ten percent of all GitHub projects (1.24 million). Our focus was on number and role of contributors that created/updated models and the time span during which this happened. Results: We identified and studied 21 316 UML diagrams within 3 295 projects. Conclusion: Creating/updating of UML happens most often during a very short phase at the project start. For 12% of the models duplicates were found, which are in average spread across 1.88 projects. Finally, we contribute a list of GitHub projects\u00a0\u2026", "num_citations": "91\n", "authors": ["109"]}
{"title": "Automatic detection of bad programming habits in scratch: A preliminary study\n", "abstract": " Using the Scratch environment as a tool to teach programming skills or develop computational thinking is increasingly common in all levels of education, well-documented case studies from primary school to university can be found. However, there are reports that indicate that students learning to program in this environment show certain habits that are contrary to the basic programming recommendations. In our work as instructors with high school students, we have detected these and other bad practices, such as the repetition of code and object naming, on a regular basis. This paper focuses on verifying whether these issues can generally be found in the Scratch community, by analyzing a large number of projects available on the Scratch community website. To test this hypothesis, we downloaded 100 projects and analyzed them with two plug-ins we developed to automatically detect these bad practices. The\u00a0\u2026", "num_citations": "79\n", "authors": ["109"]}
{"title": "Code to Learn: Where Does It Belong in the K-12 Curriculum?\n", "abstract": " The introduction of computer programming in K-12 has become mainstream in the last years, as countries around the world are making coding part of their curriculum. Nevertheless, there is a lack of empirical studies that investigate how learning to program at an early age affects other school subjects. In this regard, this paper compares three quasi-experimental research designs conducted in three different schools (n= 129 students from 2nd and 6th grade), in order to assess the impact of introducing programming with Scratch at different stages and in several subjects. While both 6th grade experimental groups working with coding activities showed a statistically significant improvement in terms of academic performance, this was not the case in the 2nd grade classroom. Notable disparity was also found regarding the subject in which the programming activities were included, as in social studies the effect size was double that in mathematics.", "num_citations": "74\n", "authors": ["109"]}
{"title": "Comparing computational thinking development assessment scores with software complexity metrics\n", "abstract": " The development of computational thinking skills through computer programming is a major topic in education, as governments around the world are introducing these skills in the school curriculum. In consequence, educators and students are facing this discipline for the first time. Although there are many technologies that assist teachers and learners in the learning of this competence, there is a lack of tools that support them in the assessment tasks. This paper compares the computational thinking score provided by Dr. Scratch, a free/libre/open source software assessment tool for Scratch, with McCabe's Cyclomatic Complexity and Halstead's metrics, two classic software engineering metrics that are globally recognized as a valid measurement for the complexity of a software system. The findings, which prove positive, significant, moderate to strong correlations between them, could be therefore considered as a\u00a0\u2026", "num_citations": "71\n", "authors": ["109"]}
{"title": "Extending the nomological network of computational thinking with non-cognitive factors\n", "abstract": " Computational thinking (CT) is being consolidated as a key set of problem-solving skills that must be developed by the students to excel in our software-driven society. However, in psychological terms, CT is still a poorly defined construct, given that its nomological network has not been established yet. In a previous paper, we started to address this issue studying the correlations between CT and some fundamental cognitive variables, such as primary mental abilities and problem-solving ability. The current work deepens in the same direction as it aims to extend the nomological network of CT with non-cognitive factors, through the study of the correlations between CT, self-efficacy and the several dimensions from the \u2018Big Five\u2019 model of human personality: Openness to Experience, Conscientiousness, Extraversion, Agreeableness, and Neuroticism. To do so, the Computational Thinking Test (CTt) and some\u00a0\u2026", "num_citations": "61\n", "authors": ["109"]}
{"title": "Complementary tools for computational thinking assessment\n", "abstract": " Computational thinking (CT) is emerging as a key set of problem-solving skills that must be developed by the new generations of digital learners. However, there is still a lack of consensus on a formal CT definition, on how CT should be integrated in educational settings, and specially on how CT can be properly assessed. The latter is an extremely relevant and urgent topic because without reliable and valid assessment tools, CT might lose its potential of making its way into educational curricula. In response, this paper is aimed at presenting the convergent validity of one of the major recent attempts to assess CT from a summative-aptitudinal perspective: the Computational Thinking Test (CTt). The convergent validity of the CTt is studied in middle school Spanish samples with respect to other two CT assessment tools, which are coming from different perspectives: the Bebras Tasks, built from a skilltransfer approach\u00a0\u2026", "num_citations": "61\n", "authors": ["109"]}
{"title": "Analyze your Scratch projects with Dr. Scratch and assess your computational thinking skills\n", "abstract": " In this paper we present the feature of Dr. Scratch that allows to automatically assessing the Computational Thinking skills of Scratch projects. The paper reviews similar initiatives, like Hairball, and investigates the literature with proposals for assessment of Scratch projects that we have studied and remixed in order to develop the Computational Thinking analysis. Then it introduces the various aspects that Dr. Scratch takes into consideration to compute a Computational Thinking score for a Scratch project and presents some preliminary findings of the analysis of over 100 investigated Scratch projects. Finally, future directions and limitations are presented and discussed.", "num_citations": "61\n", "authors": ["109"]}
{"title": "Combining assessment tools for a comprehensive evaluation of computational thinking interventions\n", "abstract": " Given that computational thinking (CT) is still a blurry psychological construct, its assessment remains as a thorny, unresolved issue. Hence, in recent years, several assessment tools have been developed from different approaches and operational definitions of CT. However, very little research has been conducted to study whether these instruments provide convergent measurements, and how to combine them properly in educational settings. In response, we first review a myriad of CT assessment tools and classify them according to their evaluative approach. Second, we report the results of two convergent validity studies that involve three of these CT assessment tools, which come from different perspectives: the Computational Thinking Test, the Bebras Tasks, and Dr. Scratch. Finally, we propose a comprehensive model to evaluate the development of CT within educational scenarios and interventions, which includes the aforementioned and other reviewed assessment tools. Our comprehensive model intends to assess CT along every cognitive level of Bloom\u2019s taxonomy and throughout the various stages of typical educational interventions. Furthermore, the model explicitly indicates how to harmoniously combine the different types of CT assessment tools in order to give answer to the most common research questions in the field of CT Education. Thus, this contribution may lead scholars and policy-makers to perform accurate evaluation designs of CT according to their inquiry goals.", "num_citations": "60\n", "authors": ["109"]}
{"title": "On the automatic assessment of computational thinking skills: A comparison with human experts\n", "abstract": " Programming and computational thinking skills are promoted in schools worldwide. However, there is still a lack of tools that assist learners and educators in the assessment of these skills. We have implemented an assessment tool, called Dr. Scratch, that analyzes Scratch projects with the aim to assess the level of development of several aspects of computational thinking. One of the issues to address in order to show its validity is to compare the (automatic) evaluations provided by the tool with the (manual) evaluations by (human) experts. In this paper we compare the assessments provided by Dr. Scratch with over 450 evaluations of Scratch projects given by 16 experts in computer science education. Our results show strong correlations between automatic and manual evaluations. As there is an ample debate among educators on the use of this type of tools, we discuss the implications and limitations, and provide\u00a0\u2026", "num_citations": "60\n", "authors": ["109"]}
{"title": "Code to learn with Scratch? A systematic literature review\n", "abstract": " The use of computer programming in K-12 spread into schools worldwide in the 70s and 80s of the last century, but it disappeared from the educational landscape in the early 90s. With the development of visual programming languages such as Scratch, this movement has emerged again in recent years, as teachers at all educational levels and from different disciplines consider that the use of programming enhances learning in many subjects and allows students to develop important skills. The systematic literature review presented in this article aims to summarize the results of recent research using programming with Scratch in subjects not related to computing and communications, as well as studies analyzing the kind of skills students develop while learning to code in this environment. Although the analyzed papers provide promising results regarding the use of programming as an educational resource, this\u00a0\u2026", "num_citations": "57\n", "authors": ["109"]}
{"title": "Can computational talent be detected? Predictive validity of the Computational Thinking Test\n", "abstract": " Computational thinking (CT) is arising as a set of problem-solving skills that must be acquired by the new generations of students to fully understand and participate in our computer-based world. However, from a psychometric approach, we are still at an early stage regarding the definition and assessment of CT as a psychological variable. One way to advance in this area is to investigate whether \u2018computationally talented\u2019students (ie,\u2018computational top thinkers\u2019) can be detected even before learning to code; and, if so, how to teach them properly to fully develop their high-computational ability. This paper presents several empirical concatenated studies about the predictive validity of the Computational Thinking Test (CTt), which is administered on a sample of 314 middle school Spanish students (n= 314). We report the predictive validity of the CTt, conducted at the beginning of the quarter, with respect to academic\u00a0\u2026", "num_citations": "52\n", "authors": ["109"]}
{"title": "Empirical software engineering research on libre software: Data sources, methodologies and results\n", "abstract": " Public available data sources are an important knowledge generator from which researchers can obtain, mostly in a non-intrusive way, data and facts from software projects. We present a methodological approach to the data sources commonly found in libre (free, open source) software projects over the Internet, explain how to extract these data and enhance them and offer some ways of analyzing it from various perspectives. The whole process has been implemented with tools that automatize the process so that an ample amount of analysis from various angles (that range from software maintenance and software evolution to the social structure of the underlying organization in charge of the development) of a huge amount of software projects has been used as case studies. This work demonstrates that it is possible to build research methodologies that can be applied to a large quantity of software projects and that empirical software engineering studies have not to refer to a limited number of software projects. Although specifically targeted to libre (free, open source) development, many of the techniques and lessons learned can be generally applied to other types of software environments.", "num_citations": "47\n", "authors": ["109"]}
{"title": "Towards data-driven learning paths to develop computational thinking with Scratch\n", "abstract": " With the introduction of computer programming in schools around the world, a myriad of guides are being published to support educators who are teaching this subject, often for the first time. Most of these books offer a learning path based on the experience of the experts who author them. In this paper we propose and investigate an alternative way of determining the most suitable learning paths by analyzing projects developed by learners hosted in public repositories. Therefore, we downloaded 250 projects of different types from the Scratch online platform, and identified the differences and clustered them based on a quantitative measure, the computational thinking score provided by Dr. Scratch. We then triangulated the results by qualitatively studying in detail the source code of the prototypical projects to explain the progression required to move from one cluster to the next one. The result is a data-driven\u00a0\u2026", "num_citations": "41\n", "authors": ["109"]}
{"title": "Software clones in scratch projects: On the presence of copy-and-paste in computational thinking learning\n", "abstract": " Computer programming is being introduced in schools worldwide as part of a movement that promotes Computational Thinking (CT) skills among young learners. In general, learners use visual, block-based programming languages to acquire these skills, with Scratch being one of the most popular ones. Similar to professional developers, learners also copy and paste their code, resulting in duplication. In this paper we present the findings of correlating the assessment of the CT skills of learners with the presence of software clones in over 230,000 projects obtained from the Scratch platform. Specifically, we investigate i) if software cloning is an extended practice in Scratch projects, ii) if the presence of code cloning is independent of the programming mastery of learners, iii) if code cloning can be found more frequently in Scratch projects that require specific skills (as parallelism or logical thinking), and iv) if learners\u00a0\u2026", "num_citations": "38\n", "authors": ["109"]}
{"title": "Gluetheos: Automating the retrieval and analysis of data from publicly available software repositories\n", "abstract": " For efficient, large scale data mining of publicly available information about libre (free, open source) software projects, automating the retrieval and analysis processes is a must. A system implementing such automation must have into account the many kinds of repositories with interesting information (each with its own structure and access methods), and the many kinds of analysis which can be applied to the retrieved data. In addition, such a system should be capable of interfacing and reusing as much existing software for both retrieving and analyzing data as possible. As a proof of concept of how that system could be, we started sometime ago to implement the GlueTheos system, featuring a modular, flexible architecture which has been already used in several of our studies of libre software projects. We show its structure, how it can be used, and how it can be extended.", "num_citations": "37\n", "authors": ["109"]}
{"title": "An extensive dataset of UML models in GitHub\n", "abstract": " The Unified Modeling Language (UML) is widely taught in academia and has good acceptance in industry. However, there is not an ample dataset of UML diagrams publicly available. Our aim is to offer a dataset of UML files, together with meta-data of the software projects where the UML files belong to. Therefore, we have systematically mined over 12 million GitHub projects to find UML files in them. We present a semi-automated approach to collect UML stored in images, .xmi, and .uml files. We offer a dataset with over 93,000 UML diagrams from over 24,000 projects in GitHub.", "num_citations": "35\n", "authors": ["109"]}
{"title": "On computational thinking as a universal skill: A review of the latest research on this ability\n", "abstract": " In recent years we are witnessing movements around the world to bring computer programming to schools. Lots of these initiatives, however, have been conceived to address the shortage of professionals in the technology sector, an approach that is encouraged by the software industry. On the contrary, this article argues that the focus should swift towards computational thinking, an ability that goes far beyond computer science or technology, fostering fundamental skills for the citizens of the twenty-first century. In this paper we summarize the findings of recent investigations that study computational thinking from different perspectives, explaining what this new skill is made of, presenting outcomes of school interventions showing relationships between the development of this ability and improvements in different subjects and soft skills, presenting technologies to foster its development, and reviewing tools that support\u00a0\u2026", "num_citations": "32\n", "authors": ["109"]}
{"title": "A dataset of scratch programs: scraped, shaped and scored\n", "abstract": " Scratch is increasingly popular, both as an introductory programming language and as a research target in the computing education research field. In this paper, we present a dataset of 250K recent Scratch projects from 100K different authors scraped from the Scratch project repository. We processed the projects' source code and metadata to encode them into a database that facilitates querying and further analysis. We further evaluated the projects in terms of programming skills and mastery, and included the project scoring results. The dataset enables the analysis of the source code of Scratch projects, of their quality characteristics, and of the programming skills that their authors exhibit. The dataset can be used for empirical research in software engineering and computing education.", "num_citations": "32\n", "authors": ["109"]}
{"title": "Computer programming as an educational tool in the English classroom a preliminary study\n", "abstract": " Computational thinking, a problem solving method that uses computer science techniques, has recently become mainstream as many governments and major Internet companies are promoting programming skills among children. However, little is known about how programming affects other aspects of life beyond the acquired programming skills. In this regard, this paper summarizes the work done in the school San Diego and San Vicente (Madrid, Spain) during the third quarter of the year 2013/2014, where we conducted a study with four groups of students in 4th and 5th grade to measure to what extent the use of computer programming in English classes can be an interesting educational tool with a positive impact on the learning otucome of the students. The results show that the groups working with programming activities improved more than the groups using traditional resources. Moreover, when asked via\u00a0\u2026", "num_citations": "32\n", "authors": ["109"]}
{"title": "Practices and Perceptions of UML Use in Open Source Projects\n", "abstract": " Context: Open Source is getting more and more collaborative with industry. At the same time, modeling is today playing a crucial role in development of, e.g., safety critical software. Goal: However, there is a lack of research about the use of modeling in Open Source. Our goal is to shed some light into the motivation and benefits of the use of modeling and its use within project teams. Method: In this study, we perform a survey among Open Source developers. We focus on projects that use the Unified Modeling Language (UML) as a representative for software modeling. Results: We received 485 answers of contributors of 458 different Open Source projects. Conclusion: Collaboration seems to be the most important motivation for using UML. It benefits new contributors and contributors who do not create models. Teams use UML during communication and planning of joint implementation efforts.", "num_citations": "30\n", "authors": ["109"]}
{"title": "A software engineering approach to libre software\n", "abstract": " The challenge of libre1 software is not the one of a new competitor producing, under the same rules, software in a faster and cheaper way, and with higher quality. Libre software differs from \u201ctraditional\u201d software in more fundamental aspects, beginning with philosophical reasons and motivations, followed by new economic and market guidelines and finishing with a different form of producing software. Software engineers cannot ignore this and for some years now the investigation of all these aspects has intensified. This article tries to introduce the reader into the most relevant technical aspects of libre software from the perspective of the development process (dubbed the Bazaar model; Raymond 1997). From a more quantitative point of view, several perspectives will be offered: the study of source code, of human resources and production costs. Finally, some of the proposals to continue advancing in the engineering research of libre software are presented.", "num_citations": "30\n", "authors": ["109"]}
{"title": "Guideline for public administrations on partnering with free software developers\n", "abstract": " In recent years, Free1/Libre/Open Source Software (FLOSS) has developed as a novel form of collaborative production. Since its origin as a collaboration between individual volunteers, it has seen tremendous success, both in terms of the commercial and technical strengths of the produced software itself, but also as a model of organisation and development. In particular, it has received much attention from public administrations (PAs) for two reasons: the software itself may be cheaper to use and support than proprietary software applications; and free software may be a novel, cost effective and highly responsive way to develop applications specific to PA needs. The second point takes advantage of the modifiable nature of free software, which makes it suitable for adaptation to PA needs.PAs may be interested in working with free software projects in order to take advantage of their adaptability, low cost and the ability to engage with the large developer community. This document aims to help PAs achieve this successfully. It starts with an overview of the free software phenomenon, the structure of free software project organisation and developer motivations. Following this is an overview of how free software projects respond to external inputs, financial as well as on user needs. Chapter 4 provides step-wise guidelines on how PA\u2019s can successfully engage with free software communities, from the technical, social and economic perspectives. Chapter 5 elaborates practical guidelines on the legal framework of collaboration between free software developers and PA\u2019s: solution will greatly differ depending on the fact the software was developed by\u00a0\u2026", "num_citations": "28\n", "authors": ["109"]}
{"title": "Is my game OK Dr. Scratch? Exploring programming and computational thinking development via metrics in student-designed serious games for STEM\n", "abstract": " Computational thinking (CT) is key to digital literacy and helps develop problem-solving skills, which are fundamental in modern school. As game design shows potential for teaching CT, metrics like Dr. Scratch emerge that help scholars systematically assess the CT of student-designed games, particularly with Scratch. Compared to other CT metrics, Dr. Scratch scores the CT of Scratch projects automatically and can be used to describe CT development. However, previous research using Dr. Scratch summatively assessed CT, but did not look at CT development. We use Dr. Scratch to assess the CT development of Scratch games designed by 8th-grade students in STEM curricula. We show how CT proficiency in student-designed games develops differently in each CT dimension, where parallelism, synchronization, and logic develop proficiently, while developing abstraction seems hard. We discuss insights into\u00a0\u2026", "num_citations": "24\n", "authors": ["109"]}
{"title": "Sentiment analysis of free/open source developers: preliminary findings from a case study\n", "abstract": " O desenvolvimento de software \u00e9 uma atividade intensive em esfor\u00e7o humano. Assim, a forma como os desenvolvedores encaram suas tarefas \u00e9 de suam import\u00e2ncia. Em um ambiente como o usual em projetos de FOSS (free/open source software) em que profissionais (desenvolvedores pagos) compartilham os esfor\u00e7os de desenvolvimento com volunt\u00e1rios, a moral da comunidade de desenvolvedores e usu\u00e1rios \u00e9 fundamental. Neste artigo, apresentamos uma an\u00e1lise preliminary utilizando t\u00e9cnicas de an\u00e1lise de sentimentos realizada em um projeto de FOSS. Para isso, executamos a minera\u00e7\u00e3o da lista de endere\u00e7os eletr\u00f4nicos de um projeto e aplicamos as t\u00e9cnicas propostas aos participantes mais relevantes. Embora a aplica\u00e7\u00e3o seja limitada, no momento atual, experamos que essa experi\u00eancia possa ser ben\u00e9fica no future para determiner situa\u00e7\u00f5es que possam afetar os desenvolvedores ou o projeto, tais como baixa produtividade, abandono do projeto ou bifurca\u00e7\u00e3o do projeto, entre outras.", "num_citations": "20\n", "authors": ["109"]}
{"title": "Examining the Relationship between Socialization and Improved Software Development Skills in the Scratch Code Learning Environment.\n", "abstract": " In the last years, socialization of the software development process has been proven to be an emergent practice, becoming social development platforms (such as GitHub or GitLab) very popular among software developers. However, little is still known about how social factors influence software development. In particular, in this paper we focus on how socialization affects the learning of programming skills, as developing software can be considered, in part, a continuous learning process. Aiming to shed some light in this regard, we analyze the social interactions of almost 70,000 users and the sophistication of over 1.5 million software products authored by them in the Scratch platform, the most popular social coding site for learning to program. The results indicate that there is a relationship between the social conducts of users and the improvement of their programming abilities, showing that more social actions\u00a0\u2026", "num_citations": "19\n", "authors": ["109"]}
{"title": "Does computational thinking correlate with personality? The non-cognitive side of computational thinking\n", "abstract": " Computational thinking (CT) is being considered as a key set of problem-solving skills to be acquired by the new generations of digital citizens and workers in order to thrive in a computer-based world. However, from a psychometric point of view, CT is still a poorly defined psychological construct: there is no full consensus on a formal definition of CT or how to measure it; and its correlations with other psychological constructs, whether cognitive or non-cognitive, have not been completely established. In response to the latter, this paper aims to study specifically the correlations between CT and the several dimensions from the'Big Five'model of human personality: Conscientiousness, Openness to Experience, Extraversion, Agreeableness, and Neuroticism. To do so, the Computational Thinking Test (CTt) and the Big Five Questionnaire-Children version (BFQ-C) are administered on a sample (n= 99) of Spanish\u00a0\u2026", "num_citations": "19\n", "authors": ["109"]}
{"title": "On the shoulders of giants\n", "abstract": " Science rests on peer review and the wide-spread dissemination of knowledge. Software engineering research will advance further and faster if the sharing of data and tools were easier and more wide-spread. Pragmatic concerns hinder the realization of this ideal: the time and effort required and the risk of being scooped. We examine the costs and benefits of facilitating sharing in our field in an effort to help the community understand what problems exist and find a solution. We examine how other fields, such as medicine and physics, handle sharing, describe the value of sharing for replication and innovation, and address practical concerns such as standards and warehousing. To launch what we hope will become an ongoing discussion of solutions in our community, we present some ways forward that mitigate the risk of sharing---partial sharing, registry, escrow, and market.", "num_citations": "19\n", "authors": ["109"]}
{"title": "Programaci\u00f3n eXtrema y Software Libre\n", "abstract": " La programaci\u00f3n extrema es una metodolog\u00eda de desarrollo ligera basada en una serie de valores y una docena de pr\u00e1cticas de, llam\u00e9moslas as\u00ed, buenas maneras que propician un aumento en la productividad a la hora de generar software. Por otro lado, el software libre es un movimiento nacido de la idea de que los usuarios tienen una serie de derechos sobre el software que permiten modificarlo, adaptarlo y redistribuirlo. Estas caracter\u00edsticas han hecho que el desarrollo de software libre haya desembocado en unos m\u00e9todos de desarrollo informales similares a los que se pregonan en la programaci\u00f3n extrema y que ser\u00e1n presentados, estudiados y comparados en este art\u00edculo. Se har\u00e1 especial \u00e9nfasis en las diferencias que hay entre los dos m\u00e9todos y lo que puede aprender el software libre de la programaci\u00f3n extrema.", "num_citations": "14\n", "authors": ["109"]}
{"title": "Not the same: a text network analysis on computational thinking definitions to study its relationship with computer programming\n", "abstract": " Even though countries from all over the world are modifying their national educational curriculum in order to include computational thinking skills, there is not an agreement in the definition of this ability. This is partly caused by the myriad of definitions that has been proposed by the scholar community. In fact, there are multiple examples in educational scenarios in which coding and even robotics are considered as synonymous of computational thinking. This paper presents a text network analysis of the main definitions of this skill that have been found in the literature, aiming to offer insights on the common characteristics they share and on their relationship with computer programming. As a result, a new definition of computational thinking is proposed, which emerge from the analysed data.", "num_citations": "13\n", "authors": ["109"]}
{"title": "Setting up government 3.0 solutions based on open source software: the case of X-road\n", "abstract": " Government 3.0, which builds on openness and transparency, sharing, increased communication and collaboration, government reorganization through integration and interoperability, and use of new technologies, is an emerging concept in eGovernance. However, few systems that qualify as Government 3.0 have been described in detail so far. And there is a lack of research on how governments can put in place such systems. This study investigates and characterizes an innovative eGovernment project, based on Open Source Software (OSS), that could be considered as an example of a Government 3.0 project. Therefore, we report from a case study of X-Road, an originally Estonian eGovernment project for creating a data sharing infrastructure, which today is also used in other countries. We present the main characteristics of X-Road from the point of view of Government 3.0, how the X-Road project is\u00a0\u2026", "num_citations": "13\n", "authors": ["109"]}
{"title": "Developing computational thinking at school with machine learning: an exploration\n", "abstract": " Artificial Intelligence (AI) and Machine Learning (ML) have heavily irrupted in society, bringing new applications and possibilities while introducing some ethical problems. Governments and institutions around the world are working on the challenges posed by AI in all aspects, from economy to education. Therefore, introducing AI-related content at school and exploring how this kind of content can be taught becomes mandatory. In this paper we carry out a bibliographic revision of previous works done on ML, and then describe an educational resource developed by the institution of the first two authors (INTEF) aimed to teach ML in schools with Scratch and Machine Learning for Kids. The testimonials of three educators, who have implemented their own version of these resources, are depicted. More efforts should be made to introduce AI-related content in education.", "num_citations": "11\n", "authors": ["109"]}
{"title": "Mining for localization in android\n", "abstract": " Localization, and in particular translation, is a key aspect of modern end-user software applications. Open source systems have traditionally taken advantage of distributed and volunteer collaboration to carry localization tasks. In this paper, we will analyze the Android source code repository to know how localization and translation is managed: who participates in this kind of tasks, if the translation workflows, participants and processes follow the same patterns as the rest of the development, and if the Android project takes benefit from external contributions. Our results show that Android should ease the localization tasks to benefit from external contributions. Steps towards obtaining a specialized team as found in many other free software projects are also encouraged.", "num_citations": "11\n", "authors": ["109"]}
{"title": "Learningml: A tool to foster computational thinking skills through practical artificial intelligence projects\n", "abstract": " El uso de sistemas de inteligencia artificial en m\u00faltiples niveles de la sociedad ofrece nuevas y pr\u00f3speras oportunidades, pero tambi\u00e9n introduce nuevos riesgos y cuestiones \u00e9ticas que deben abordarse. Sostenemos que la introducci\u00f3n de contenidos de inteligencia artificial en las escuelas a trav\u00e9s de proyectos pr\u00e1cticos es el camino a seguir para educar ciudadanos conscientes y cr\u00edticos, para despertar vocaciones entre los j\u00f3venes, y para fomentar las habilidades de pensamiento computacional de los estudiantes. Sin embargo, la mayor\u00eda de las plataformas educativas de programaci\u00f3n existentes carecen de algunas caracter\u00edsticas necesarias para desarrollar proyectos completos de IA y, en consecuencia, se requieren nuevas herramientas. En este art\u00edculo presentamos LearningML, una nueva plataforma dirigida al aprendizaje autom\u00e1tico supervisado, una de las t\u00e9cnicas de IA m\u00e1s exitosas que se encuentra en la base de casi todas las aplicaciones actuales de IA. Este trabajo describe las principales funcionalidades de la herramienta y discute algunas decisiones tomadas durante su dise\u00f1o, para el que hemos tenido en cuenta las lecciones aprendidas al revisar trabajos anteriores realizados para introducir la IA en la escuela y el an\u00e1lisis de otras soluciones que permiten proyectos pr\u00e1cticos de IA. Tambi\u00e9n se presentan los pr\u00f3ximos pasos en el desarrollo de LearningML, que se centran en la validaci\u00f3n, tanto aparente como instruccional, de la herramienta.", "num_citations": "10\n", "authors": ["109"]}
{"title": "The Europe Code Week (CodeEU) initiative shaping the skills of future engineers\n", "abstract": " The growth of employment opportunities in the information technology sector and the shortage of well-trained professionals in this field are a recurring theme in recent years in both Europe and North America. In this sense, research studies that analyse the causes of the reduction of students who are interested in computer science mainly point to young people being unaware of the type of tasks computer scientists perform. Therefore, in order to try to reverse this trend many types of initiatives have been organized seeking to bring the world of computing to children and adolescents.", "num_citations": "10\n", "authors": ["109"]}
{"title": "Programar para aprender en educaci\u00f3n primaria y secundaria:\u00bf qu\u00e9 indica la evidencia emp\u00edrica sobre este enfoque\n", "abstract": " En los \u00faltimos a\u00f1os varios pa\u00edses europeos han introducido la programaci\u00f3n inform\u00e1tica y el pensamiento computacional en el curr\u00edculum de Educaci\u00f3n Primaria y Secundaria. En Espa\u00f1a asistimos, a su vez, a un debate sobre la necesidad de su inclusi\u00f3n y el enfoque a seguir para su puesta en pr\u00e1ctica. B\u00e1sicamente se pueden identificar dos aproximaciones: mientras algunas naciones han creado una asignatura espec\u00edfica centrada en el desarrollo de habilidades inform\u00e1ticas, otras han optado por usar estas habilidades como un instrumento para el aprendizaje de otras asignaturas. Estas diferencias se deben, al menos parcialmente, a la falta de evidencia cient\u00edfica sobre el desarrollo del pensamiento computacional a trav\u00e9s de la programaci\u00f3n en edad escolar y sobre sus posibilidades de transferencia para la adquisici\u00f3n de otras competencias. Por ello, consideramos fundamental aportar evidencia emp\u00edrica basada en investigaciones desarrolladas con los recursos y bajo las circunstancias actuales de las aulas de nuestro pa\u00eds. Este art\u00edculo trata de presentar evidencias de investigaciones que muestran que el desarrollo del pensamiento computacional a trav\u00e9s de la programaci\u00f3n tiene un impacto positivo en el aprendizaje de distintas disciplinas, como las matem\u00e1ticas, los idiomas, las ciencias o la narrativa. As\u00ed mismo, se discuten dos temas de especial relevancia en el \u00e1mbito educativo: las diferencias en la efectividad de la transferencia en funci\u00f3n de la edad de los estudiantes y los requisitos de formaci\u00f3n de los docentes para conseguir los objetivos marcados.", "num_citations": "9\n", "authors": ["109"]}
{"title": "Introduction to free software\n", "abstract": " What is free software? What is it and what are the implications of a free program licence? How is free software developed? How are free software projects financed and what are the business models associated to them that we are experiencing? What motivates developers, especially volunteers, to become involved in free software projects? What are these developers like? How are their projects coordinated, and what is the software that they produce like? In short, what is the overall panorama of free software? These are the sort of questions that we will try to answer in this document. Because although free software is increasing its presence in the media and in debates between IT professionals, and although even citizens in general are starting to talk about it, it is still for the most part an unknown quantity. Often, even those who are familiar with it are aware of only some of its features, and mostly ignorant about others.", "num_citations": "9\n", "authors": ["109"]}
{"title": "Assessing and evaluating documentation in libre software projects\n", "abstract": " Documentation, for both developers and end-users, is an important aspect to consider when assessing the quality of software products. In many libre (free, open source) software projects it is not easy to identify how much documentation a program has. In this paper, we present a methodology (and a tool implementing it) that helps in the evaluation of the documentation in a libre software package. The ultimate goal of this methodology is to help in determining semi-automatically the availability and quantity of documentation, a process that if made completely manually is usually tedious and error-prone, specially when it is applied to many versions of a program, or to many programs (eg, to assess about documentation availability in a domain). As discussed in this position paper, even though the quality of the documentation can only be estimated by human inspection, our methodology also enables to evaluate it in a more efficient and time-saving manner.", "num_citations": "9\n", "authors": ["109"]}
{"title": "Impact of libre software tools and methods in the robotics field\n", "abstract": " Software is one of the major components of robots; in fact, it is the main bottleneck for the proliferation of robotics in our everyday lives. In the last years the field of robotics has been an emerging application area of the libre (free/open source) software phenomenon. Libre software tools have been traditionally popular among the robotics research and teaching community. Even companies whose main business model is to sell robots have found convenient to share the software in order to promote a community around their products. In this paper we analyze the situation of libre software in these three subareas: industry, teaching and research. In particular, we describe commercial robots like the Cye and the Pioneer, a software platform like Orocos as a examples of industrial world applications, the libre tools around the LEGO Mindstorms in the case of teaching, and the Robocup competition and the Player/Stage\u00a0\u2026", "num_citations": "9\n", "authors": ["109"]}
{"title": "First Results About Motivation and Impact of License Changes in Open Source Projects\n", "abstract": " Free and open source software is characterized by the freedoms and criteria that are warranted by specific licenses. These licenses describe the rights and duties of the licensors and licensees. However, a licensing change may be necessary in the life of an open source project to meet legal developments or to allow the implementation of new business models. This paper examines the motivations and impacts of license changes in open source projects. After a state of the art on the subject, a set of case studies where projects changed their license is presented. Then a set of motivations to change licenses, the ways to legally make this change, the problems caused by this change and a set of benefits of the license change are discussed.", "num_citations": "8\n", "authors": ["109"]}
{"title": "Correlation between bug notifications, messages and participants in Debian's bug tracking system\n", "abstract": " Bugs are an essential part of software projects because they lead its evolution. Without bug notifications developers cannot know if their software is accomplishing its tasks properly. However, few analytical studies have been made about this aspect of projects. We have developed a tool to extract and to store information from Debian's BTS (Bug Tracking System) in a relational database. In this paper we show that there is a strong dependence between three variables which can be used to analyze the activity of a project through its bugs: bug notifications, communications between users and developers and people involved.", "num_citations": "8\n", "authors": ["109"]}
{"title": "Abbreviated dynamic source routing: Source routing with non-unique network identifiers\n", "abstract": " Current ad-hoc network protocols are designed for hosts similar to those used in fixed networks. Those protocols are not adequate for some applications of ad-hoc networks, where used resources are very scarce. One example is the size of the network addresses, which may be a critical issue, specially with the use of IPv6 in DSR. This is due to the fact that this protocol uses source routing, so each datagram must carry the addresses of all the machines in its path. In this paper a new protocol named ADSR is proposed to solve this problem. This new protocol is a modified version of DSR based on using abbreviated addresses. The abbreviation procedure can lead to two different nodes having the same address, what we will named\u2019collision\u2019. ADSR does not avoid but allow collisions, which is analyzed in this paper. Some results about this new protocol performance are shown. This results have been obtained by simulations implemented in ns-2 network simulator.", "num_citations": "8\n", "authors": ["109"]}
{"title": "Free software developers: who, how and why\n", "abstract": " A large part of the worldwide market for software is dominated by so-called proprietary software, which means that the buyer and user of a software product is not allowed and not able to read and change the source code of the program.'Microsoft Office is surely the best-known example of pro-prietary software. Representatives of proprietary software companies argue that this limitation of the users' opportunity to customize software according to individual needs and preferences is necessary because other-wise the property rights and liabilities of the software companies as well as growth prospects and job opportunities in the software industry as a whole would be jeopardized. 2", "num_citations": "8\n", "authors": ["109"]}
{"title": "On tools that support the development of computational thinking skills: Some Thoughts and Future Vision\n", "abstract": " Development of Computational Thinking (CT) is an area of many initiatives in the last years, due to the importance of having CT skills. There are many environments that allow learners to develop such skills, for instance Scratch and MIT App Inventor, in a visual and intuitive way. As in professional software development, assisting tools that help and guide learners are starting to appear. In this paper, we discuss the current status of these tools, based on an analysis of what state-of-the-art CT assessment tools, such as Dr. Scratch for Scratch and CodeMaster for App Inventor, offer. We report their limitations and envision and discuss future enhancements.", "num_citations": "7\n", "authors": ["109"]}
{"title": "Preliminary lessons from a software evolution analysis of Moodle\n", "abstract": " Educational organizations are relying more frequently on free/open source software for their infrastructure. This is mainly because of lower costs and higher versatility. But gaining overview on this type of projects is not easy, as they are usually developed with a geographically distributed team, with many volunteers and even several companies collaborating. The quality of such projects is not easily to assess, or the risk exists that the project is not sustainable. In this paper, we present a preliminary software evolution analysis that allows to gain insight into a free/open source software project. This analysis offers the possibility to take informed decisions. We have selected therefore the well-known Moodle educational project as a case study", "num_citations": "5\n", "authors": ["109"]}
{"title": "Introduction to free software, february 2010\n", "abstract": " What is free software? What is it and what are the implications of a free program licence? How is free software developed? How are free software projects financed and what are the business models associated to them that we are experiencing? What motivates developers, especially volunteers, to become involved in free software projects? What are these developers like? How are their projects coordinated, and what is the software that they produce like? In short, what is the overall panorama of free software? These are the sort of questions that we will try to answer in this document. Because although free software is increasing its presence in the media and in debates between IT professionals, and although even citizens in general are starting to talk about it, it is still for the most part an unknown quantity. Often, even those who are familiar with it are aware of only some of its features, and mostly ignorant about others.", "num_citations": "5\n", "authors": ["109"]}
{"title": "Abbreviated dynamic source routing: Source routing with non-unique network identifiers\n", "abstract": " Current ad-hoc network protocols are designed for hosts similar to the ones that are used in fixed networks. These protocols are not suitable for some applications of ad-hoc networks, where resources are very scarce. One point is the size of the network addresses, which may be a critical issue, specially with the use of IPv6 in the DSR protocol. This is because this protocol uses source routing, and, therefore, each datagram must carry the addresses of all the machines in its path. In this paper a new protocol named ADSR is proposed to solve this problem. This new protocol is a modified version of DSR based on the use of abbreviated addresses. The abbreviation procedure can lead to two different nodes having the same address, which we will term collision. ADSR allows rather than averts collisions, as analysed in this paper. Some results on the performance of this new protocol are shown. These results have\u00a0\u2026", "num_citations": "5\n", "authors": ["109"]}
{"title": "Programaci\u00f3n en el entorno GNOME\n", "abstract": " Las herramientas como automake y autoconf se encuentran disponibles en la mayor\u00eda de los proyectos open sources de hoy en d\u00eda. La mayor ventaja en el uso de estas herramientas se debe a que ayudan a la portabilidad de las aplicaciones a nivel de c\u00f3digo fuente, abstray\u00e9ndose en la medida de lo posible, de las versiones de las herramientas tradicionales disponibles en cada sistema operativo tipo Unix.Cada vez que un usuario descarga el c\u00f3digo fuente de una aplicaci\u00f3n que se encuentra empaquetada, se encuentra comunmente con un script llamado configure, el cual al ejecutarse realiza todas las verificaciones y definiciones necesarias para que la aplicaci\u00f3n se pueda compilar, y posteriormente instalar, con \u00e9xito. Por lo tanto, desde el punto de vista del usuario, el script configure es el inicio del proceso que dejar\u00e1 la aplicaci\u00f3n funcional en su sistema.", "num_citations": "5\n", "authors": ["109"]}
{"title": "Introducing Artificial Intelligence Fundamentals with LearningML: Artificial Intelligence made easy\n", "abstract": " This paper is a summary of the webinar hold on October 22nd at the \u201cComputational thinking and robotics in education\u201d track in which the LearningML project was presented. The LearningML project aims to bring the fundamentals of Artificial Intelligence (AI) to children and people interested in acquiring knowledge on this subject in an easy way. AI has heavily irrupted in society and everyone is using, more or less consciously, application based on AI. Therefore, some kind of AI literacy is needed if we are to educate critically thinking citizens able to understand technologies that have a relevant impact on their lives. In this presentation we show how LearningML can help us to reach this goal trough programming applications based on Machine Learning (ML), the most prevalent subfield of AI today.", "num_citations": "4\n", "authors": ["109"]}
{"title": "Exploring How Game Genre in Student-Designed Games Influences Computational Thinking Development\n", "abstract": " Game design is increasingly used in modern education to foster Computational Thinking (CT). Yet, it is unclear how and if the game genre of student-designed games impact CT and programming. We explore how game genre impacts CT development and programming routines in Scratch games designed by 8th-grade students using a metrics-based approach (ie, Dr. Scratch). Our findings show that designing particular games (eg, action, storytelling) impact CT and programming development. We observe, for instance, that CT skills develop and consolidate fast, after which students can focus on aspects more specific to game design. Based on the results, we suggest that researchers and educators in constructionist learning consider the impact of game genre when designing game-based curricula for the learning of programming and CT.", "num_citations": "4\n", "authors": ["109"]}
{"title": "Designing educational material\n", "abstract": " The appearance of MOOCs has boosted the creation of educational material for use in all possible contexts. However, this material is often created without much thought and without proper tools and methodologies. Much more attention should be placed on the design of educational material, since this is the basis for a successful learning experience. In this special session, we report about several interesting approaches towards the design and creation of educational material that range from the call to the definition of a discipline of Courseware Engineering, to a methodology for video recording, another one for the creation of smart adaptive content, tools metrics for teaching computational thinking, the integration of OERs, and the design and application of game-based material.", "num_citations": "4\n", "authors": ["109"]}
{"title": "Will m-learning bring disruption into education? Advances from the eMadrid excellence network\n", "abstract": " Can mobile learning disrupt methods and practices in the educational sector? This is the question we want to answer in this special session. Several examples of mobile educational applications are presented that have been carried out within the eMadrid excellence network.", "num_citations": "4\n", "authors": ["109"]}
{"title": "Evaluation of an Online Intervention to Teach Artificial Intelligence with LearningML to 10-16-Year-Old Students\n", "abstract": " The inclusion of artificial intelligence (AI) in education is increasingly highlighted by international organizations and governments around the world as a cornerstone to enable the adoption of AI in society. That is why we have developed LearningML, aiming to provide a platform that supports educators and students in the creation of hands-on AI projects, specifically based on machine learning techniques. In this investigation we explore how a workshop on AI and the creation of programming projects with LearningML impacts the knowledge on AI of students between 10 and 16 years. 135 participants completed all phases of the learning experience, which due to the COVID-19 pandemic had to be performed online. In order to assess the AI knowledge we created a test that includes different kinds of questions based on previous investigations and publications-resulting in a reliable assessment instrument. Our\u00a0\u2026", "num_citations": "3\n", "authors": ["109"]}
{"title": "How social are Scratch learners? A comprehensive analysis of the Scratch platform for social interactions\n", "abstract": " A major difference between Scratch and other visual programming languages aimed at learning computational thinking skills is that it offers a web platform where learners can interact by sharing with and contributing to the community. Such a platform allows them to learn many of the social aspects of software development that characterize the FLOSS movement. However, most of the investigations that analyze social aspects of the Scratch community have been based on a small scale. This work presents a comprehensive approach, as we have analyzed data from the platform, from 2007 to 2012, to measure how social the Scratch community is by studying user contributions in terms of number of comments, friends, favorites and galleries. The analysis involves over one million learners with almost two million projects. The results indicate that the vast majority of users barely make use of the social capabilities offered by the Scratch platform.", "num_citations": "3\n", "authors": ["109"]}
{"title": "Modelos y herramientas de software libre en el campo de la rob\u00f3tica\n", "abstract": " El software es uno de los principales componentes de los robots. Realmente es el principal cuello de botella para la proliferaci\u00f3n de la rob\u00f3tica en nuestra vida diaria. En los \u00faltimos anos el campo de la rob\u00f3tica ha sido un \u00e1rea en el que el fen\u00f3meno del software libre ha crecido de manera extraordinaria. En este art\u0131culo analizamos la situaci\u00f3n del software libre en tres sub\u00e1reas: industria, ensenanza e investigaci\u00f3n. Las herramientas libres han sido muy populares entre la comunidad docente e investigadora en el campo de la rob\u00f3tica. Incluso compan\u0131as cuyo principal modelo de negocio es la venta de robots, han cre\u0131do conveniente compartir el software con el fin de promover comunidades alrededor de sus productos. Todos estos casos muestran que el software libre puede actuar como un catalizador en la industria rob\u00f3tica, un sector a\u00fan en fase temprana de desarrollo, en el mundo investigador e industrial.", "num_citations": "3\n", "authors": ["109"]}
{"title": "Towards an infrastructure for empirical research into software architecture: challenges and directions\n", "abstract": " While the software engineering community at large has embraced empirical studies of source code, empirical studies of software architecture are lacking. In order to increase the possibility and relevance of studies into software architecture, an infrastructure for sharing empirical data on software architecture is essential. This paper contributes by discussing needs and challenges in empirical studies of software architecture. Based on lessons learned we propose CoSARI - a community-wide infrastructure for empirical research into software architecture.", "num_citations": "2\n", "authors": ["109"]}
{"title": "Bad Smells in Scratch Projects: A Preliminary Analysis.\n", "abstract": " Computational Thinking (CT) is an area of great relevance today. Although its skills may be developed in various ways, one of the most common tools to learn it, train it and develop it, is through programming. From software engineering, we know that problems solved through programming may have not been solved in the most appropriate way. These symptoms are known as \u201cbad smells\u201d. This article aims to analyze the presence of several bad smells in Scratch projects and how they relate to the development of CT skills. Therefore, we make use of a dataset of several hundreds of Scratch projects with the aim of creating a game on climate change. Our results show that bad smells can be found in all types of Scratch projects, independently of the development of CT skills they require. We discuss why the learning community should address bad smells appropriately, as they may hinder the development of abstraction, reuse and other relevant skills.", "num_citations": "2\n", "authors": ["109"]}
{"title": "Can we Measure Computational Thinking with Tools? Present and Future of Dr. Scratch\n", "abstract": " Dr. Scratch is a web-tool that analyzes Scratch projects to assess the development of computational thinking skills. This paper presents the current state of the validation process of the tool. The process involves several investigations to test the validity of Dr. Scratch from different perspectives, such as the extent to which learners improve their coding skills while using the tool in real life scenarios; the relationships of the score provided by the tool with other, similar measurements; the capacity of the tool to discriminate between different types of Scratch projects; as well as the vision and feelings of educators who are using the tool in their lessons. The paper also highlights the actions that are still pending to complete the formal validation of Dr. Scratch.", "num_citations": "2\n", "authors": ["109"]}
{"title": "The Power of Analytics to Engage and Guide: Experiences at the eMadrid Excellence Network\n", "abstract": " The year 2012 has seen the rise of a new kind of online education. Initiatives like the Khan Academy or platforms for MOOCs (Massive Open Online Courses), like edX or Coursera, have stricken the education sector like a tsunami. One of the key enabling features of these initiatives is the use of a fine-grained analytics to provide a much better learning experience. In this session, several experiences carried out by members of the eMadrid network are presented that are related to learning analytics.", "num_citations": "2\n", "authors": ["109"]}
{"title": "Low-Cost Identifiers for Ubiquitous Computing\n", "abstract": " Any device we want to connect to a global network, e.g. Internet, should have a unique global identifier. However, the size of this identifier can be an unacceptable overhead for devices with limited resources (sensors, toys, disposable devices, micro-robots, etc.), because conventional protocols use full addresses to transmit, process, and store the data required for routing. The usual solution for such devices is to limit the address space to 1 or 2\u00a0bytes, but this sacrifices the global unicity of the identifiers. The proposal presented in this article enables devices with limited resources to use reduced addresses that globally identify hosts. We propose the use of abbreviated addresses for routing. We have developed a new protocol named ADSR that takes advantage of these new addresses. This protocol is a modified version of DSR based on the use of abbreviated addresses. The abbreviation procedure can\u00a0\u2026", "num_citations": "2\n", "authors": ["109"]}
{"title": "Open learning: Advances in the eMadrid excellence network\n", "abstract": " This Special Session is going to present some of the activities carried out by the Excellence Network on e-learning that is being funded in the Region of Madrid, called eMadrid. They are related to the application of open source principles in the educational context and in opening up the alternatives to the learner.", "num_citations": "2\n", "authors": ["109"]}
{"title": "Jugando con demonios: An\u00e1lisis del proyecto FreeBSD con la herramienta CVSAnalY\n", "abstract": " Los sistemas de control de versiones como CVS o Subversion son unas de las herramientas m\u00e1s utilizadas en proyectos de software libre. En ellos podemos encontrar, adem\u00e1s del c\u00f3digo fuente del proyecto, informaci\u00f3n relativa a los desarrolladores, las modificaciones que \u00e9stos llevan a cabo, as\u0131 como las fechas de las mismas. CVSAnalY es una herramienta que nace con el fin de recopilar toda esa informaci\u00f3n, extendiendo su estudio al pasado, presente y futuro del proyecto. Gracias a esta herramienta ya la informaci\u00f3n que proporciona se puede realizar una mejor gesti\u00f3n del proyecto, as\u0131 como conocer mejor sus caracter\u0131sticas. En este art\u0131culo mostraremos c\u00f3mo realizar un an\u00e1lisis para lo cual utilizaremos como caso de estudio uno de los sistemas operativos libres, FreeBSD.", "num_citations": "2\n", "authors": ["109"]}
{"title": "Ingenier\u00eda del Software Libre. Una visi\u00f3n alternativa a la ingenier\u00eda del software tradicional\n", "abstract": " Desde hace cuatro d\u00e9cadas, la ingenier\u00eda del software se ha venido consolidando como una rama importante dentro de la inform\u00e1tica en busca de m\u00e9todos de desarrollo y t\u00e9cnicas que permitan producir software de gran calidad con unos recursos limitados. Seg\u00fan la definici\u00f3n del IEEE, la ingenier\u00eda del software es\" un enfoque sistem\u00e1tico y cuantificable al desarrollo, operaci\u00f3n (funcionamiento) y mantenimiento del software: es decir, la aplicaci\u00f3n de la ingenier\u00eda del software\".[IEEE 1993]A pesar de que la ingenier\u00eda del software ha conseguido indudablemente notables \u00e9xitos, tambi\u00e9n es cierto que ha sucumbido a lo que se ha venido a llamar la\" crisis del software\". Prueba de ello es que a d\u00eda de hoy todav\u00eda sigue sin ser posible cuantificar con exactitud los plazos, costes, recursos humanos y t\u00e9cnicas que lleven a un desarrollo exitoso del software, tal y como otras ramas de la ingenier\u00eda en otros campos s\u00ed han sido capaces de hacer. Es m\u00e1s, incluso en algunos puntos de la ingenier\u00eda del software se puede observar una tendencia a retomar viejos caminos bajo nuevas f\u00f3rmulas, como podemos ver con la incipiente expansi\u00f3n de las t\u00e9cnicas de programaci\u00f3n evolutiva que se basan en gran parte en principios y t\u00e9cnicas conocidos y usados en la d\u00e9cada de los 70. Argumentar que la ingenier\u00eda del software se encuentra estancada y falta de ideas es una consideraci\u00f3n que, por lo tanto, podemos tomar como muy v\u00e1lida.", "num_citations": "2\n", "authors": ["109"]}
{"title": "Challenges and directions for a community infrastructure for Big Data-driven research in software architecture\n", "abstract": " Research into software architecture and design has become more and more prominent since the 1990s. Since then, companies have reported how software architecting helped them to tackle various challenges in system design, especially related to system-level quality properties such as scalability and maintainability. Academic research in software architecture has focused on several areas, including architecture description through views and architecture description languages, and on methods for evaluating architectural designs. While much of the contribution of research in software architecture was inspired by industrial experiences, little of the research was validated beyond individual case studies. Many scientific disciplines are currently harvesting fruits from large-scale data collection about their subjects of study. Therefore, this chapter contributes a discussion of challenges and directions for Big Data-driven\u00a0\u2026", "num_citations": "1\n", "authors": ["109"]}