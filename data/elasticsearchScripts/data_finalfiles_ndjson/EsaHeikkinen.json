{"title": "LOGDIG log file analyzer for mining expected behavior from log files.\n", "abstract": " Log files are often the only way to identify and locate errors in a deployed system. This paper presents a new log file analyzing framework, LOGDIG, for checking expected system behavior from log files. LOGDIG is a generic framework, but it is motivated by logs that include temporal data (timestamps) and system-specific data (eg spatial data with coordinates of moving objects), which are present eg in Real Time Passenger Information Systems (RTPIS). The behavior mining in LOGDIG is state-machine-based, where a search algorithm in states tries to find desired events (by certain accuracy) from log files. That is different from related work, in which transitions are directly connected to lines of log files. LOGDIG reads any log files and uses metadata to interpret input data. The output is static behavioral knowledge and human friendly composite log for reporting results in legacy tools. Field data from a commercial RTPIS called ELMI is used as a proof-of-concept case study. LOGDIG can also be configured to analyze other systems log files by its flexible metadata formats and a new behavior mining language.", "num_citations": "9\n", "authors": ["1245"]}
{"title": "Behavior mining language for mining expected behavior from log files\n", "abstract": " Log files are often the only way to identify and locate errors in a deployed system. This paper proposes a novel Behavior Mining Language (BML) for a log file analyzing framework called LOGDIG. It is proposed for logs that include temporal data (timestamps) and extra-log system-specific data (e.g. spatial data with coordinates of moving objects), which are present e.g. in Real Time Passenger Information Systems (RTPIS). BML is state-machine-based, and specifies searches for desired events from the log files by adjustable accuracy. The analysis output is static behavioral knowledge and human friendly composite log files for reporting the results in legacy tools. Field data from a commercial RTPIS is used as a proof-of-concept case study. BML is Python-based for excellent development support, as well as self-explanatory and self-descriptive for correct-by-construct usage. Compared to a general language\u00a0\u2026", "num_citations": "3\n", "authors": ["1245"]}
{"title": "Log File Analyzing in Intelligent Transportation Systems Development\n", "abstract": " Intelligent Transportation Systems (ITS) consist of a large number of vehicles and stop monitors, as well as operations management center and servers. Their development can be challenging due to 3rd party black-box components and limited debugging visibility. Our solution is log file analysis. We developed a tool framework called LOGDIG, which differs from related work by supporting also very complex system behaviors discovered by recurrent and backward processing of the log files. The tool was successfully used to find and fix faulty timing of bus stop monitor information in a product called ELMI.", "num_citations": "2\n", "authors": ["1245"]}
{"title": "Complexity based test cases for log file analyzers\n", "abstract": " Log files are used in many big data applications. If the log is meant for a different purpose, the analysis and finding the best log analyzer can be very complex. Our solution is to create a generic test case framework to model and create representative log data. Related work model the behavior as state machines, but our model uses a composition of elementary acyclic graphs, thus addressing the log file size, variation, branching and confidence. We have created test cases originally based on real Intelligent Transportation Systems (ITS) data, and evaluated our LOGDIG analyzer against it. We can easily generate hundreds of test cases with our model, and modify the cases as needed.", "num_citations": "1\n", "authors": ["1245"]}