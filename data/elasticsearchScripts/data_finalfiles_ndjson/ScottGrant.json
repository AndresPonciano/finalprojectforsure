{"title": "Encouraging user behaviour with achievements: an empirical study\n", "abstract": " Stack Overflow, a question and answer Web site, uses a reward system called badges to publicly reward users for their contributions to the community. Badges are used alongside a reputation score to reward positive behaviour by relating a user's site identity with their perceived expertise and respect in the community. A greater number of badges associated with a user profile in some way indicates a higher level of authority, leading to a natural incentive for users to attempt to achieve as many badges as possible. In this study, we examine the publicly available logs for Stack Overflow to examine three of these badges in detail. We look at the effect of one badge in context on an individual user level and at the global scope of three related badges across all users by mining user behaviour around the time that the badge is awarded. This analysis supports the claim that badges can be used to influence user behaviour\u00a0\u2026", "num_citations": "161\n", "authors": ["2160"]}
{"title": "Estimating the optimal number of latent concepts in source code analysis\n", "abstract": " The optimal number of latent topics required to model the most accurate latent substructure for a source code corpus is an open question in source code analysis. Most estimates about the number of latent topics that exist in a software corpus are based on the assumption that the data is similar to natural language, but there is little empirical evidence to support this. In order to help determine the appropriate number of topics needed to accurately represent the source code, we generate a series of Latent Dirichlet Allocation models with varying topic counts. We use a heuristic to evaluate the ability of the model to identify related source code blocks, and demonstrate the consequences of choosing too few or too many latent topics.", "num_citations": "75\n", "authors": ["2160"]}
{"title": "Automated concept location using independent component analysis\n", "abstract": " Concept location techniques are designed to help isolate sections of source code that relate to specific concepts. Blind Signal Separation techniques like Singular Value Decomposition and Latent Semantic Indexing can be used as a way to identify related sections of source code. This paper explores a related technique called Independent Component Analysis that has the added benefit of identifying statistically independent signals in text, as opposed to ones that are just decorrelated. We describe a tool that we have developed to explore how ICA performs when analysing source code, and show how the technique can be used to perform unsupervised concept location.", "num_citations": "57\n", "authors": ["2160"]}
{"title": "Using heuristics to estimate an appropriate number of latent topics in source code analysis\n", "abstract": " Latent Dirichlet Allocation (LDA) is a data clustering algorithm that performs especially well for text documents. In natural-language applications it automatically finds groups of related words (called \u201clatent topics\u201d) and clusters the documents into sets that are about the same \u201ctopic\u201d. LDA has also been applied to source code, where the documents are natural source code units such as methods or classes, and the words are the keywords, operators, and programmer-defined names in the code. The problem of determining a topic count that most appropriately describes a set of source code documents is an open problem. We address this empirically by constructing clusterings with different numbers of topics for a large number of software systems, and then use a pair of measures based on source code locality and topic model similarity to assess how well the topic structure identifies related source code units. Results\u00a0\u2026", "num_citations": "41\n", "authors": ["2160"]}
{"title": "Vector space analysis of software clones\n", "abstract": " In this paper, we introduce a technique for applying independent component analysis to vector space representations of software code fragments such as methods or blocks. The distance between these points can be determined, and used as a measure of the similarity between the original source code fragments they represent. It can be reasoned that if the initial matrix representation contains enough information about the syntactic structure of the source code, the vector space representation will be sufficient to predict the similarity of fragments to one another, and can provide the likelihood that the code is a clone.", "num_citations": "35\n", "authors": ["2160"]}
{"title": "Reverse engineering co-maintenance relationships using conceptual analysis of source code\n", "abstract": " In this work, we explore the relationship between topic models and co-maintenance history by introducing a visualization that compares conceptual cohesion within change lists. We explain how this view of the project history can give insight about the semantic architecture of the code, and we identify a number of patterns that characterize particular kinds of maintenance tasks. We examine the relationship between co-maintenance history and concept location, and visualize the distribution of changes across concepts to show how these techniques can be used to predict co-maintenance of source code methods.", "num_citations": "21\n", "authors": ["2160"]}
{"title": "Using topic models to support software maintenance\n", "abstract": " Our recent research has shown that the latent information found by commonly used topic models generally relates to the development history of a software system. While it is not always possible to associate these latent topics with human-oriented concepts, it is demonstrable that they identify historical maintenance relationships in source code. Specifically, when a developer makes a change to a software project, it is common for a significant part of that change to relate to a single latent topic. A significant conclusion can be drawn from this: latent topic models identify co-maintenance relationships with no supervision, and therefore topic models can be used to support the maintenance phase of software development.", "num_citations": "19\n", "authors": ["2160"]}
{"title": "An interactive interface for refactoring using source transformation\n", "abstract": " In this paper we present RUST, an environment that assists the programmer in locating potential code improvements by searching for a set of predetermined patterns, identifying these areas as code smells, and providing a means to automatically implement refactorings. Results and changes are presented using an interface that allows the user to examine the affected code, try out and see the results of applying potential refactorings, and accept or back out of changes after performing them. This reversible system allows for interactive programmer-driven modifications to the source code in which programmers can test out refactorings before committing to them.", "num_citations": "15\n", "authors": ["2160"]}
{"title": "Topic detection using independent component analysis\n", "abstract": " If the documents of a large text corpus can be modeled as the rows of a matrix, it can be shown that existing mathematical methods can be used to extract previously unseen information about their relationships. In particular, it can be shown that Independent Component Analysis offers a way of identifying threads of related conversations in a large data set such as VAST. By treating each document as a vector, with word frequencies representing the components, we can extract two interesting pieces of information from the set: a list of the topics used in each document, and a list of the documents that best fit each of these topics.", "num_citations": "12\n", "authors": ["2160"]}
{"title": "Examining the relationship between topic model similarity and software maintenance\n", "abstract": " Software maintenance is the last phase of software development, and typically one of the most time-consuming. One reason for this is the difficulty in finding related source code fragments. A high-level understanding of the source code is necessary to make decisions about which source code fragments should be modified together, for example, in the context of fixing a bug. Even with a similarity metric available, understanding what it means to measure similarity in the first place is important; if a technique suggests that two source code fragments are related, is there a human-oriented way of explaining that relation? In this paper, we attempt to identify a concrete link between software maintenance and the similarity metrics provided by latent topic models. We show that similarity in topic models is related to the likelihood that source code fragments will be modified together in the future, and that an awareness of similar\u00a0\u2026", "num_citations": "10\n", "authors": ["2160"]}
{"title": "Automated Code Smell Detection and Refactoring by Source Transformation\n", "abstract": " CiNii \u8ad6\u6587 - Automated Code Smell Detection and Refactoring by Source Transformation CiNii \u56fd\u7acb\u60c5\u5831\u5b66\u7814\u7a76\u6240 \u5b66\u8853\u60c5\u5831\u30ca\u30d3\u30b2\u30fc\u30bf[\u30b5\u30a4\u30cb\u30a3] \u65e5\u672c\u306e\u8ad6\u6587\u3092\u3055\u304c\u3059 \u5927\u5b66\u56f3\u66f8\u9928\u306e\u672c\u3092\u3055\u304c\u3059 \u65e5\u672c\u306e\u535a\u58eb\u8ad6\u6587\u3092\u3055\u304c\u3059 \u65b0\u898f\u767b\u9332 \u30ed\u30b0\u30a4\u30f3 English \u691c\u7d22 \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u9589\u3058\u308b \u30bf\u30a4\u30c8\u30eb \u8457\u8005\u540d \u8457\u8005ID \u8457\u8005\u6240\u5c5e \u520a\u884c\u7269\u540d ISSN \u5dfb\u53f7\u30da\u30fc\u30b8 \u51fa\u7248\u8005 \u53c2\u8003\u6587\u732e \u51fa\u7248\u5e74 \u5e74\u304b\u3089 \u5e74\u307e\u3067 \u691c\u7d22 \u691c\u7d22 \u691c\u7d22 CiNii\u7a93\u53e3\u696d\u52d9\u306e\u518d\u958b\u306b\u3064\u3044\u3066 Automated Code Smell Detection and Refactoring by Source Transformation GRANT S. \u88ab\u5f15\u7528\u6587\u732e: 1\u4ef6 \u8457\u8005 GRANT S. \u53ce\u9332\u520a\u884c\u7269 WCRE Workshop on REFactoring : Achievements, Challanges, Effects, Victoria (Nov. 2003) WCRE Workshop on REFactoring : Achievements, Challanges, Effects, Victoria (Nov. 2003), 2003 \u88ab \u5f15\u7528\u6587\u732e: 1\u4ef6\u4e2d 1-1\u4ef6\u3092 \u8868\u793a 1 \u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u7b87\u6240\u7279\u5b9a\u652f\u63f4\u306e\u305f\u3081\u306e\u30d1\u30bf\u30fc\u30f3\u8a18\u8ff0\u8a00\u8a9e \u6751\u677e \u88d5\u6b21 , \u4e2d\u5ddd \u664b\u543e , \u51fa\u53e3 \u535a\u7ae0 , \u6c34\u91ce \u5fe0\u5247 , \u592a\u7530 \u525b , \u9152\u4e95 \u4e09\u56db\u90ce \u60c5\u5831\u51e6\u7406\u5b66\u4f1a\u8ad6\u6587\u8a8c 46(12), 3054-\u2026", "num_citations": "5\n", "authors": ["2160"]}