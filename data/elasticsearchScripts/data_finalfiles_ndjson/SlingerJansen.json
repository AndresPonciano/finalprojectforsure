{"title": "Business network management as a survival strategy: A tale of two software ecosystems\n", "abstract": " Software vendors and software service providers can no longer function without taking the software ecosystem into account. Software vendors presently face three challenges in regards to software ecosystems: they require insight into software ecosystems, they require insight into the possible survival strategies that exist for software ecosystem participants, and they require an overview of possible ways in which the organization can open up to the software ecosystem without losing intellectual property. This paper addresses these needs and provides an overview of the defining characteristics of software ecosystems. To illustrate these defining characteristics two case studies are provided.", "num_citations": "229\n", "authors": ["744"]}
{"title": "Defining software ecosystems: a survey of software platforms and business network governance\n", "abstract": " While in the early days of software engineering a software product was the result of effort of an independent software vendor to create a monolithic product, modern software strongly relies on components and infrastructure from third-party vendors or open source suppliers (Cusumano, 2004; Sawyer, 2000; Carmel, 1995). The relationships between software development firms and service companies shaped the product software landscape into software ecosystems, where suppliers and buyers of software products, components and technologies collaboratively create competitive value. One could state that the success of a product software company therefore no longer depends only on its own development quality but also on the way it manages its relationships (Gao and Iyer, 2006; Iyer et al, 2006; Farbey and Finkelstein, 2001). Software differs from physical goods in several ways. Software has no physical limitation\u00a0\u2026", "num_citations": "219\n", "authors": ["744"]}
{"title": "Measuring the health of open source software ecosystems: Beyond the scope of project health\n", "abstract": " BackgroundThe livelihood of an open source ecosystem is important to different ecosystem participants: software developers, end-users, investors, and participants want to know whether their ecosystem is healthy and performing well. Currently, there exists no working operationalization available that can be used to determine the health of open source ecosystems. Health is typically looked at from a project scope, not from an ecosystem scope.ObjectivesWith such an operationalization, stakeholders can make better decisions on whether to invest in an ecosystem: developers can select the healthiest ecosystem to join, keystone organizers can establish which governance techniques are effective, and end-users can select ecosystems that are robust, will live long, and prosper.MethodDesign research is used to create the health operationalization. The evaluation step is done using four ecosystem health projects from\u00a0\u2026", "num_citations": "151\n", "authors": ["744"]}
{"title": "Software ecosystems: a software ecosystem strategy assessment model\n", "abstract": " Software companies and organizations increasingly open up their business to other software companies and as a consequence they find themselves in an ecosystem of software companies, developers and partners. These actors, and especially the software organization that is at the core of this ecosystem, are having difficulties in getting insight into this ecosystem and how their actions influence its performance. In this paper a model is presented that describes the key characteristics of a Software Ecosystem. The central hub of a Software Ecosystem can use data on these characteristics to its strategic advantage. This is demonstrated by the use of the model in a case study of a hub in a software ecosystem.", "num_citations": "133\n", "authors": ["744"]}
{"title": "Architectural openness: comparing five mobile platform architectures\n", "abstract": " Open source or proprietary strategy? Which is more effective? Which strategy has received more attention from the developers? Which leads to more groundbreaking applications? One can say the open source strategy is more successful due to its innovations and inventions (Paulson et al, 2004) and conversely, one can believe that the proprietary strategy is more successful because it will lead to more qualified applications due to strong governance. The reality, however, is not that black and white, especially when it comes to the software on the smartphones (mobile software platform). Considering a platform as open or closed is rarely a binary decision but is usually a question of \u201chow open\u201d(Maxwell, 2006). The answer to the question is related to the openness strategy of the platform.Openness strategy is the degree to which a platform supplier allows the platform users or developers to interact with the platform\u00a0\u2026", "num_citations": "114\n", "authors": ["744"]}
{"title": "Defining app stores: The role of curated marketplaces in software ecosystems\n", "abstract": " The app store is a novel concept in the software business, that has changed the way in which customers perceive software and its day-to-day use. The concept, however, is poorly understood, which can be observed by lack of a comprehensive definition and relatively little literature on the topic. This paper provides a definition of app stores, provides a conceptual model of the concept, and supplies typical features and policies that are observed in app stores, using six case studies. The increased understanding that the research provides, aims to help practitioners make their app store more successful and provides researchers with a frame for defining and analyzing app stores.", "num_citations": "98\n", "authors": ["744"]}
{"title": "How do professionals perceive legacy systems and software modernization?\n", "abstract": " Existing research in legacy system modernization has traditionally focused on technical challenges, and takes the standpoint that legacy systems are obsolete, yet crucial for an organization's operation. Nonetheless, it remains unclear whether practitioners in the industry also share this perception. This paper describes the outcome of an exploratory study in which 26 industrial practitioners were interviewed on what makes a software system a legacy system, what the main drivers are that lead to the modernization of such systems, and what challenges are faced during the modernization process. The findings of the interviews have been validated by means of a survey with 198 respondents. The results show that practitioners value their legacy systems highly, the challenges they face are not just technical, but also include business and organizational aspects.", "num_citations": "92\n", "authors": ["744"]}
{"title": "Legacy to SOA evolution: a systematic literature review\n", "abstract": " In the last decade, there have been significant developments in legacy to SOA evolution, and that has resulted in a large research body of which there exists no comprehensive overview. This chapter provides a historic overview, focusing on the methods and techniques used in legacy to SOA evolution. The authors conducted a systematic literature review to collect legacy to SOA evolution approaches reported from 2000 to August 2011. To this end, 121 primary studies were found and evaluated using an evaluation framework, which was developed from three evolution and modernization methods widely used in the software re-engineering domain. The evaluation constitutes the inventory of current research approaches and methods and techniques used in legacy to SOA evolution. The result of the SLR also identifies current research issues in legacy to SOA evolution and provides future research directions to\u00a0\u2026", "num_citations": "74\n", "authors": ["744"]}
{"title": "Unraveling Ruby ecosystem dynamics: a quantitative network analysis\n", "abstract": " A software vendor\u2019s success is not just determined by the quality or usage statistics of a software product they produce, but by all parties, products and services related to the product and adding value to it. The total success of a software product is determined by the sum of all additional products based on, or having a relationship with, the software product. The Android mobile phone operating system for example, has a limited value as a product on its own. The overall value of Android is determined by all the applications, products and services depending on Android. In the case of Android, a lot of different applications, books or music are offered through Google Play, the app-store used by Google, products which are produced by numerous organizations and parties around the world. This network of all products, companies and services working together in one big network is called a Software Ecosystem. The term\u00a0\u2026", "num_citations": "68\n", "authors": ["744"]}
{"title": "A framework for software ecosystem governance\n", "abstract": " Many software producing organizations do not know how to measure, compare, and analyse their governance policy in software ecosystems. Without sufficient insight into governance, these organizations cannot optimally perform as keystone players. This paper outlines a framework for the analysis of software ecosystem governance for individual companies. With such a framework, software producing organizations can gain strategic advantage over other organizations, in that they can analyse and improve their software ecosystem governance in a structured way, leading to better ecosystem performance and health.", "num_citations": "63\n", "authors": ["744"]}
{"title": "A structured legacy to SOA migration process and its evaluation in practice\n", "abstract": " Legacy to Service-Oriented Architecture migration approaches have been extensively researched over the last decade, primarily to reuse the valuable business logic that resides within legacy applications. Interestingly, most of the proposed approaches fail to cover the complete process from the technological, organizational and business perspectives. This paper presents a structured six-phase process that covers both migration planning and execution, and does so by considering the aforementioned perspectives. Furthermore, within each of the six phases of the process, we present a rationale to justify the need of each phase, current practices within each phase, and challenges that require further attention. The proposed structured process is then evaluated by (i) migrating features of two simple yet representative applications to SOA, and (ii) by mapping activities reported in literature. Based on our findings, we\u00a0\u2026", "num_citations": "48\n", "authors": ["744"]}
{"title": "Workload-based clustering of coherent feature sets in microservice architectures\n", "abstract": " In a microservice architecture, each service is designed to be independent of other microservices. The size of a microservice, defined by the features it provides, directly impacts its performance and availability. However, none of the currently available approaches take this into account. This paper proposes an approach to improve the performance of a microservice architecture by workload-based feature clustering. Given a feature model, the current microservice architecture, and the workload, this approach recommends a deployment that improves the performance for the given workload using a genetic algorithm. We created MicADO, an open-source tool, in which we implemented this approach, and applied it in a case study on an ERP system. For different workloads, the resulting generated microservice architectures show substantial improvements, which sets the potential of the approach.", "num_citations": "46\n", "authors": ["744"]}
{"title": "Software Ecosystems Governance-A Systematic Literature Review and Research Agenda.\n", "abstract": " The field of Software ecosystems is a growing discipline that has been investigated from managerial, social, and technological perspectives. The governance of software ecosystems requires a careful balance of control and autonomy given to players. Orchestrators that are able to balance their own interests by bringing joint benefits for other players are likely to create healthy ecosystems. Selecting appropriate governance mechanisms is a key problem involved in the management of proprietary and open source ecosystems. This article summarizes current literature on software ecosystem governance by framing prevalent definitions, classifying governance mechanisms, and proposing a research agenda. We performed a systematic literature review of 63 primary studies. Several studies describe governance mechanisms, which were classified in three categories: value creation, coordination of players, and organizational openness and control. The number of studies indicates that the domain of software ecosystems and their governance is maturing. However, further studies are needed to address central challenges involved on the implementation of appropriate governance mechanisms that can nurture the health of ecosystems. We present a research agenda with several opportunities for researchers and practitioners to explore these issues.", "num_citations": "45\n", "authors": ["744"]}
{"title": "Migrating a large scale legacy application to SOA: Challenges and lessons learned\n", "abstract": " This paper presents the findings of a case study of a large scale legacy to service-oriented architecture migration process in the payments domain of a Dutch bank. The paper presents the business drivers that initiated the migration, and describes a 4-phase migration process. For each phase, the paper details benefits of using the techniques, best practices that contribute to the success, and possible challenges that are faced during migration. Based on these observations, the findings are discussed as lessons learned, including the implications of using reverse engineering techniques to facilitate the migration process, adopting a pragmatic migration realization approach, emphasizing the organizational and business perspectives, and harvesting knowledge of the system throughout the system's life cycle.", "num_citations": "41\n", "authors": ["744"]}
{"title": "Controlling and monitoring agile software development in three dutch product software companies\n", "abstract": " Agile software development governance depends on successful monitoring and control mechanisms. Software development managers generally are unaware of the complete set of monitoring and control mechanisms that are available to them, leading to uninformed decisions with unsuccessful outcomes. This paper presents a list of key process indicators and a list of interventions that software development managers require for successful governance of agile development processes. The list is based on three case studies of product software companies that have successfully developed and sold software for several decades.", "num_citations": "37\n", "authors": ["744"]}
{"title": "Variability in Multi-tenant Environments: Architectural Design Patterns from Industry\n", "abstract": " In order to serve a lot of different customers in a SaaS environment, software vendors have to comply to a range of different varying requirements in their software product. Because of these varying requirements and the large number of customers, a variable multi-tenant solution is needed to achieve this goal. This paper gives a pragmatic approach to the concepts of multi-tenancy and variability in SaaS environments and proposes three architectural patterns that support variability in multi-tenant SaaS environments. The Customizable Data Views pattern, the Module Dependent Menu pattern and the Pre/Post Update Hooks pattern are explained and shown as good practices for applying variability in a multi-tenant SaaS environment. All patterns are based on case studies performed at two large software vendors in the Netherlands who are offering an ERP software product as a service.", "num_citations": "35\n", "authors": ["744"]}
{"title": "How quality attributes of software platform architectures influence software ecosystems\n", "abstract": " When developing commercial applications, developers seldomly start from scratch. Generally, they use software platforms and extend them, joining an ever growing software ecosystem surrounding the platform. In this paper, the relationships between architecture and platform adoption are explored by analyzing the results of interviews and document study of five case studies of platform extenders. It is found that platform architecture plays a minor role in platform adoption by platform extenders, but that quality attributes strongly influence an architect's design choices when extending a platform. The findings of this work can be used by platform developers to improve platform extendibility and usability.", "num_citations": "34\n", "authors": ["744"]}
{"title": "Multi-homing in the apple ecosystem: why and how developers target multiple apple app stores\n", "abstract": " The Apple ecosystem is divided into three sub-ecosystems: iPhone, iPad and Mac. This paper analyses the behavior of companies that target more than one of these sub-ecosystems, aptly named multi-homers, using statistical analysis and a short survey. The set of companies analyzed is composed of the publishers of the top 300 free and paid applications within the three ecosystems' App Stores in May 2011. Findings showed that there is a strong relationship between the number of platforms a company targets and the type of applications it publishes and the number of these applications. The most encountered trend was of first targeting the iPhone platform and then the iPad. Multi-homing from a strategic perspective is motivated mainly by a wider customer base and the portability the Apple sub-ecosystems offer.", "num_citations": "34\n", "authors": ["744"]}
{"title": "A focus area maturity model for software ecosystem governance\n", "abstract": " ContextIncreasingly, software companies are realizing that they can no longer compete through product excellence alone. The ecosystems that surround platforms, such as operating systems, enterprise applications, and even social networks are undeniably responsible for a large part of a platform\u2019s success. With this realization, software producing organizations need to devise tools and strategies to improve their ecosystems and reinvent tools that others have invented many times before.ObjectiveIn this article, the software ecosystem governance maturity model (SEG-M2) is presented, which has been designed along the principles of a focus area maturity model. The SEG-M2 has been designed for software producing organizations to assess their ecosystem governance practices, set a goal for improvement, and execute an improvement plan.MethodThe model has been created following an established focus\u00a0\u2026", "num_citations": "32\n", "authors": ["744"]}
{"title": "Model-driven development of service compositions for enterprise interoperability\n", "abstract": " Service-Oriented Architecture (SOA) has emerged as an architectural style to foster enterprise interoperability, as it claims to facilitate the flexible composition of loosely coupled enterprise applications and thus alleviates the heterogeneity problem among enterprises. Meanwhile, Model-Driven Architecture (MDA) aims at facilitating the development of distributed application functionality, independent from its implementation using a specific technology platform and thus contributes to deployment in different platforms. In this paper we propose an MDA-based transformation technique for service composition. The contribution of the paper is two-fold. First, our approach shows how enterprise interoperability is supported by service composition at two different technical levels, namely at choreography and orchestration level. Second, the approach contributes to the management of changes that affect enterprise\u00a0\u2026", "num_citations": "30\n", "authors": ["744"]}
{"title": "Defining blockchain governance: a framework for analysis and comparison\n", "abstract": " In this article, we introduce a blockchain governance framework that defines the governance of a blockchain as a combination of six dimensions and three layers. An evaluation through eight expert interviews confirms the perceived usefulness and operational feasibility of the presented framework. Furthermore, the framework, is demonstrated by an application in two case studies. The introduced blockchain governance framework establishes a shared understanding and discussion surrounding the topic of blockchain governance.", "num_citations": "29\n", "authors": ["744"]}
{"title": "The dark side of event sourcing: Managing data conversion\n", "abstract": " Evolving software systems includes data schema changes, and because of those schema changes data has to be converted. Converting data between two different schemas while continuing the operation of the system is a challenge when that system is expected to be available always. Data conversion in event sourced systems introduces new challenges, because of the relative novelty of the event sourcing architectural pattern, because of the lack of standardized tools for data conversion, and because of the large amount of data that is stored in typical event stores. This paper addresses the challenge of schema evolution and the resulting data conversion for event sourced systems. First of all a set of event store upgrade operations is proposed that can be used to convert data between two versions of a data schema. Second, a set of techniques and strategies that execute the data conversion while continuing the\u00a0\u2026", "num_citations": "29\n", "authors": ["744"]}
{"title": "Can we ask you to collaborate? Analyzing app developer relationships in commercial platform ecosystems\n", "abstract": " Previous studies have emphasized the necessity for software platform owners to govern their platform ecosystem in order to create durable opportunities for themselves and the app developers that surround the platform. To date, platform ecosystems have been widely analyzed from the perspective of platform owners. However, how and to what extent app developers collaborate with their peers needs to be investigated further. In this article, we study the interfirm relationships among app developers in commercial platform ecosystems and explore the causes of variation in the network structure of these ecosystems. By means of a comparative study of four commercial platform ecosystems of Google (Google Apps and Google Chrome) and Microsoft (Microsoft Office365 and Internet Explorer), we illustrate substantial variation in the extent to which app developers initiated interfirm relationships. Further, we analyze\u00a0\u2026", "num_citations": "28\n", "authors": ["744"]}
{"title": "Clopenness of Systems: The Interwoven Nature of Ecosystems.\n", "abstract": " Openness of a software product or software producing and end-user organization is perceived as a binary concept: organizations are perceived to be closed, with its negative connotations, such as being dictatorial, undemocratic, and opaque, whereas an open organization is positively considered to be transparent and favorable to deal with. The binary view of openness, however, is harmful for the software industry, since wrong decisions are made on these qualifications, calling for a better definition of the concepts of openness and closeness. In this paper a definition is given of the concepts, which led to the concept clopenness; a model is provided that assesses the clopenness of a software producing or end-user organization and its software products, and a case study is performed to show the use of the model and concepts. The results of the paper are that the use of the clopenness model provides insight into the openness of an organization, in turn enabling better founded business decisions.", "num_citations": "27\n", "authors": ["744"]}
{"title": "Relationship intimacy in software ecosystems: a survey of the dutch software industry\n", "abstract": " Software vendors depend on suppliers to provide the underlying technology for domain specific solutions. As a consequence, software vendors cooperate with suppliers to deliver a product. This cooperation results in supplier dependence, but also leads to opportunities. We present the results of an exploratory research based on twenty-seven case studies, identifying supplier strategies and resulting trade-offs. Strategies range from fully depending on large software ecosystem orchestrators to a minimal dependency strategy. Furthermore, we identify factors at play when selecting suppliers for different components. These factors include; ecosystem health indicators, product and license type and intensive support and maintenance flows. The results presented in this paper can be used by software vendors to assess their software supply network to review supplier relationships, but also for future research.", "num_citations": "26\n", "authors": ["744"]}
{"title": "On clusters in open source ecosystems\n", "abstract": " This paper seeks to find characteristics of relationships between developers within various clusters of FLOSS ecosystems. We have mined the repository of the open source programming language Ruby, and linked developers and projects on the basis of collaboration. We used Social Network Analysis, and more specifically, the concept of modularity to expose underlying clusters or sub-communities. A survey was constructed to aid in the qualitative part of this research. The data shows that Ruby\u2019s ecosystem consist mostly of single developers who work independently. Developers within clusters of a few developers often have personal relationships formed through friendship, work and the open source community. Personal relationships formed through the open source community grow as clusters consist of more developers. Developers in clusters with large number of developers are often unaware of friend-of-friend relationships. Project administrators, however, fail to list developers that contribute through pull/request issues as authors, making data on Ruby\u2019s repository incomplete.", "num_citations": "24\n", "authors": ["744"]}
{"title": "A revelatory case study on scaling agile release planning\n", "abstract": " A way to scale up agile release planning to meet the requirements of multi-team agile development is a practice called joint release planning. A software product company piloted the joint release planning method. The aim of the company was to improve coordination of work of multiple agile development teams who develop a large legacy software product. Another aim was to improve communication between product management and development. We conducted a case study to explore how the new release planning method was executed. We gathered data by observing two release planning events, observing event planning meetings, and by conducting surveys. The events were attended by approximately 140 stakeholders, including over 10 development teams, who spent several days in a common space. The participants liked the method and considered it efficient. This revelatory case study provides the first\u00a0\u2026", "num_citations": "23\n", "authors": ["744"]}
{"title": "Python: Characteristics identification of a free open source software ecosystem\n", "abstract": " Analysing a free open source software ecosystem can be beneficial and can help stakeholders in numerous ways. The analysis can help developers, investors, and contributors, to decide which software ecosystem to invest in and where to invest. Another reason for making an analysis is to assist ecosystem coordinators in governing their ecosystem. The paper provides an insight on the free open source software ecosystem of Python. It presents an analysis of the software ecosystem itself and the different characteristics it has. Based upon the conducted analysis with the available dataset, the research concludes that the free open source software ecosystem of Python contains three ecosystem roles that define its ecosystem. Next to that, it has grown exponentially from 31 active developers in 2005 to 5,212 December 2012. These results can help set up a strategy for the future of the Python ecosystem. At this point\u00a0\u2026", "num_citations": "21\n", "authors": ["744"]}
{"title": "Definition and Validation of the Key process of Release, Delivery and Deployment for Product Software Vendors: turning the ugly duckling into a swan\n", "abstract": " For software vendors the processes of release, delivery, and deployment to customers are inherently complex. However, software vendors can greatly improve their product quality and quality of service by applying a model that focuses on customer interaction if such a model were available. This paper presents a model for customer configuration updating (CCU) that can evaluate the practices of a software vendor in these processes. Nine extensive case studies of medium to large product software vendors are presented and evaluated using the model, thereby uncovering issues in their release, delivery, and deployment processes. Finally, organisational and architectural changes are proposed to increase quality of service and product quality for software vendors", "num_citations": "21\n", "authors": ["744"]}
{"title": "The merits of a meritocracy in open source software ecosystems\n", "abstract": " The Eclipse open source ecosystem has grown from a small internal IBM project to one of the biggest Integrated Development Environments in the market. Open source communities and ecosystems do not follow the standard governance strategies typically used in large organizations. A meritocracy is a frequently occurring form of governance on different levels in open ecosystems. In this paper we investigate how this form of governance influences the health of projects within the Eclipse ecosystem in terms of the amount of commits within each month. We analyzed the hierarchy of Eclipse, how merits are conceptualized within the ecosystem and the effect of the appointments of mentors and project leads on the amount of commits. From our research, we can conclude that this system is not always as fair as it seems; merits are only a benefit in some cases.", "num_citations": "20\n", "authors": ["744"]}
{"title": "An Evaluation Of Service Frameworks For The Management Of Service Ecosystems\n", "abstract": " A service ecosystem is a marketplace for trading services in which services are developed, published, sold and used. Service ecosystems have changed the way of service delivery and service consumption among actors/parties, who perform specific roles for the operation of the ecosystems. Such actors, being service providers, consumers, mediators and intermediaries, ensure the livelihood of the ecosystem. However, the role of the service infrastructure provider, one of the actors of the service ecosystem, is still not being explored sufficiently. The service infrastructure provider provides service infrastructures/frameworks upon which other actors of the service ecosystem operate. In this paper, an evaluation framework for the service framework is defined, which is based on the features that are required for a service ecosystem to thrive. The evaluation framework is used to evaluate three opensource service frameworks. The evaluation framework facilities the selection process of a service framework among the largely available ones.", "num_citations": "20\n", "authors": ["744"]}
{"title": "Definition and Validation of the Key Process Areas of Release, Delivery and Deployment of Product Software Vendors: turning the ugly duckling into a swan\n", "abstract": " For software vendors the processes of release, delivery, and deployment to customers are inherently complex. However, software vendors can greatly improve their product quality and quality of service by applying a model that focuses on customer interaction if such a model were available. This paper presents a model for customer configuration updating (CCU) that can evaluate the capabilities of a software vendor in these processes. Eight extensive case studies of medium to large product software vendors are presented and evaluated using the model, thereby uncovering issues in their release, delivery, and deployment processes. Finally, organisational and architectural changes are proposed to increase quality of service and product quality for software vendors.", "num_citations": "20\n", "authors": ["744"]}
{"title": "Understanding governance mechanisms and health in software ecosystems: a systematic literature review\n", "abstract": " In a software ecosystem, organizations work collaboratively to remain profitable and survive market changes. For the relationship between these organizations to succeed, it is necessary to participate in the ecosystem software without violating rules of collaboration or to take advantages that destabilize the general health of the ecosystem. The application of governance mechanisms is essential for achieving this balance. Governance mechanisms are employed to define the level of control, rights of decision and scope of owner versus shared ownership in an ecosystem. Selecting appropriate governance mechanisms, organizations can gain strategic advantage over others leading them to better performance and, consequently, to be healthier. In this article, we report a systematic literature review that aggregates definitions of software ecosystem governance and classify governance mechanisms in three\u00a0\u2026", "num_citations": "19\n", "authors": ["744"]}
{"title": "An Assessment Method for Selecting an SOA Delivery Strategy: Determining Influencing Factors and Their Value Weights\n", "abstract": " Organizations should carefully consider which SOA delivery strategy, for instance top-down or bottom-up, to follow in migrating toward a service-oriented environment. Selecting a suboptimal strategy can result in spending more time and money than required, or in complete failure of the SOA project. However, selecting one is not easy. Organizations are often unaware of the existence of the different strategies and their situation-dependent pros and cons. Also, it is impossible for organizations to make a well-founded choice since a method for selecting an SOA delivery strategy is lacking. This paper bridges that gap by proposing an assessment method to select a delivery strategy based on specific characteristics of an organization. The method comprises a matrix that includes the influencing factors with their corresponding value ranges, and a weight calculation to determine their impact. Another contribution of this paper is the elicitation of four different delivery strategies that have never been chartered properly.", "num_citations": "18\n", "authors": ["744"]}
{"title": "Customer configuration updating in a software supply network\n", "abstract": " Product software development is the activity of development, modification, reuse, re-engineering, maintenance, or any other activities that result in packaged configurations of software components or software-based services that are released for and traded in a specific market \\cite{XuBrinkkemper}. An increasingly important part of product software development is Customer Configuration Updating (CCU). \\textit{CCU is the combination of the vendor side release process, the product or update delivery process, the customer side deployment process, and the activation process}. Product software vendors encounter particular problems when trying to improve these processes, because vendors have to deal with multiple revisions, variable features, different deployment environments and architectures, different customers, different distribution media, and dependencies on external products. Also, there are not many tools available that support the delivery and deployment of software product releases that are generic enough to accomplish these tasks for any product. In 9 industrial case studies it was discovered that as much as 15% of the deployments and product updates of new products do not proceed as planned and require unplanned extra support from the software vendor. These organizations are held back in their growth, due to the fact that they cannot handle larger customer bases, since it would result into more configurations that require maintenance and updates. When software vendors attempt to improve CCU three things become apparent: (1) there are no adequate process descriptions for CCU, (2) there is a lack of tools to support CCU\u00a0\u2026", "num_citations": "18\n", "authors": ["744"]}
{"title": "Does software modernization deliver what it aimed for? A post modernization analysis of five software modernization case studies\n", "abstract": " Software modernization has been extensively researched, primarily focusing on observing the associated phenomena, and providing technical solutions to facilitate the modernization process. Software modernization is claimed to be successful when the modernization is completed using those technical solutions. Very limited research, if any, is reported with an aim at documenting the post-modernization impacts, i.e., whether any of the pre-modernization business goals are in fact achieved after modernization. In this research, we attempt to address this relative absence of empirical study through five retrospective software modernization case studies. We use an explanatory case study approach to document the pre-modernization business goals, and to decide whether those goals have been achieved. The intended benefits for each of the five cases we considered were all (partially) met, and in most cases fully\u00a0\u2026", "num_citations": "17\n", "authors": ["744"]}
{"title": "ITMViz: Interactive topic modeling for source code analysis\n", "abstract": " Topic modeling has seen a surge in use for software comprehension. Although the models inferred from the source code are a great source of knowledge, they fail to fully capture the conceptual relationships between the topics. Here we investigate the use of interactive topic modeling for source code analysis by feeding-in information from the end-users, including developers and architects, to refine the inferred topic models. We have implemented a web-based toolkit called ITMViz to provide support to interpret the topic models, and use the results to cluster modules together. A medium-sized Java project is used to evaluate our approach in understanding the software system.", "num_citations": "17\n", "authors": ["744"]}
{"title": "A search-based approach to multi-view clustering of software systems\n", "abstract": " Unsupervised software clustering is the problem of automatically decomposing the software system into meaningful units. Some approaches solely rely on the structure of the system, such as the module dependency graph, to decompose the software systems into cohesive groups of modules. Other techniques focus on the informal knowledge hidden within the source code itself to retrieve the modular architecture of the system. However both techniques in the case of large systems fail to produce decompositions that correspond to the actual architecture of the system. To overcome this problem, we propose a novel approach to clustering software systems by incorporating knowledge from different viewpoints of the system, such as the knowledge embedded within the source code as well as the structural dependencies within the system, to produce a clustering. In this setting, we adopt a search-based approach to the\u00a0\u2026", "num_citations": "16\n", "authors": ["744"]}
{"title": "Social media for success: A strategic framework\n", "abstract": " Social media is a phenomenon widely used by companies. Studies report that up to 94% of companies that have a marketing department make use of social media. Which social media platforms to adopt and how to use them to support the business strategies is often not a deliberate choice in companies. Therefore a strategic framework is proposed here that guides companies in making the choices that together entail their social media strategy. The research starts with an inventory of social media by Europe\u2019s 50 largest software product companies. Eight companies are selected for an embedded multi-case study using purposive sampling. The results indicate three components of a strategic framework for social media:(1) scope comprises decisions about actors, platforms and the interaction, whereas (2) capabilities refer to the objectives and activities.(3) Governance requires decisions along the value, resources and risks. The framework, which has been evaluated by experts, is elaborated in this paper. Learnings from comparing the case studies are shared in the form of trends identified and challenges experienced during the study. The framework helps practitioners to develop and improve their social media strategy. It also stimulates thinking about the impact of social media beyond the marketing function.", "num_citations": "16\n", "authors": ["744"]}
{"title": "Quality review and approval methods for extensions in software ecosystems\n", "abstract": " Maintaining quality in a platform ecosystem is hard. Getting third parties to follow quality criteria, adhere to platform standards and strategy, and getting them to provide effective and usable extensions can be considered one of the most challenging problems in platform management. Especially in a world where platforms develop rapidly and increasing numbers of niche players want to participate in these ecosystems, it becomes almost impossible to make any guarantees about the quality experience of the end-user. Platform coordinators are in need of an overview of methods to uphold quality standards and ensure that customers reap only the benefits of extensions. In this chapter three methods (review, certification, and community based reviews) and 11 techniques are extracted from 27 case studies to achieve quality goals in a software ecosystem. Furthermore, an overview is provided of how a review team can\u00a0\u2026", "num_citations": "16\n", "authors": ["744"]}
{"title": "A situational implementation method for business process management systems\n", "abstract": " For the integrated implementation of Business Process Management and supporting information systems many methods are available. Most of these methods, however, apply a one-size fits all approach and do not take into account the specific situation of the organization in which an information system is to be implemented. These situational factors, however, strongly determine the success of any implementation project. In this paper a method is provided that establishes situational factors of and their influence on implementation methods. The provided method enables a more successful implementation project, because the project team can create a more suitable implementation method for business process management system implementation projects.", "num_citations": "16\n", "authors": ["744"]}
{"title": "Balancing total cost of ownership and cost of maintenance within a software supply network\n", "abstract": " This short paper describes how the Cordys vision of software release, delivery, deployment, and maintenance improves these processes such that all of the Enterpise Resource Planning (ERP) trauma\u2019s of the past can be avoided. Cordys reduces these problems, such as unreliable migration of ERP systems and customers who refuse to update, by the introduction of the staging area. This staging area is a software control system that enables a customer to manage Cordys software products and knowledge such as manuals, licenses and updates, explicitly.", "num_citations": "16\n", "authors": ["744"]}
{"title": "A case study of the health of an augmented reality software ecosystem: Vuforia\n", "abstract": " Augmented Reality is becoming increasingly popular. The success of a platform is typically observed by measuring the health of the software ecosystem surrounding it. In this paper, we take a closer look at the Vuforia ecosystem\u2019s health by mining the Vuforia platform application repository. It is observed that the developer ecosystem is the strength of the platform. We also determine that Vuforia could be the biggest player in the market if they lay its focus on specific types of app development.", "num_citations": "15\n", "authors": ["744"]}
{"title": "Chargeback for cloud services\n", "abstract": " With pay-per-use pricing models, elastic scaling of resources, and the use of shared virtualized infrastructures, cloud computing offers more efficient use of capital and agility. To leverage the advantages of cloud computing, organizations have to introduce cloud-specific chargeback practices. Organizations have to allocate IT service costs to business users in a way that reflects service consumption. To help organizations become effective users of cloud services, this article provides an overview of the factors that influence chargeback in the cloud services. This is an initial work that determines the factors influencing the chargeback in the cloud services. The findings of this research facilitate organizations to realize the implications of the cloud for their chargeback.", "num_citations": "13\n", "authors": ["744"]}
{"title": "The reality of an associate model: Comparing partner activity in the eclipse ecosystem\n", "abstract": " Two determinants of software ecosystem health are productivity of and value creation by the actors in the ecosystem. While keystone players use partnership models to orchestrate actors, the relationship between the type of partnership and activity has not been studied. To address this gap, we have researched the partnership model of the Eclipse Ecosystem and the activity of different types of partners. We have used Eclipse Dash and GitHub to gather data about the activity of Eclipse partners. The results show that a higher level of membership is related to more activity. However, it is also observed that non-member companies are more active than associate members, which suggests that Eclipse can and should improve their partnership model by motivating associate members and incorporating active non-member companies. In addition, other software ecosystems could use these results and implications to\u00a0\u2026", "num_citations": "13\n", "authors": ["744"]}