{"title": "\u57fa\u4e8e SPS \u8f6f\u4ef6\u7684\u539f\u6cb9\u7ba1\u9053\u52a8\u6001\u4eff\u771f\u5e94\u7528\u4e0e\u63a2\u8ba8\n", "abstract": " SPS(Stoner Pipeline Simulator)\u8d77\u6e90\u4e8e20\u4e16\u7eaa70\u5e74\u4ee3,\u6700\u521d\u51fa\u81eaStoner\u516c\u53f8,\u662f\u4e00\u6b3e\u4f18\u79c0\u7684\u6c34\u529b\u5b66\u52a8\u6001\u6a21\u62df\u4eff\u771f\u8f6f\u4ef6,\u5df2\u7ecf\u8fc7\u4e86\u8fd140\u5e74\u7684\u53d1\u5c55\u53ca\u5de5\u7a0b\u5e94\u7528,\u4e8e2007\u5e74\u6b63\u5f0f\u88ab\u5fb7\u56fdGL\u516c\u53f8\u6536\u8d2d,SPS\u8f6f\u4ef6\u5728\u7ba1\u9053\u4eff\u771f\u9886\u57df\u662f\u5168\u7403\u516c\u8ba4\u7684\u9886\u8dd1\u8005,\u5728\u4e2d\u56fd\u4e43\u81f3\u5168\u4e16\u754c\u8303\u56f4\u5185,\u5176\u77ac\u6001\u6a21\u62df\u901f\u5ea6\u53ca\u7cbe\u786e\u5ea6\u81f3\u4eca\u96be\u88ab\u8d85\u8d8a,\u7075\u6d3b\u7684\u4e8c\u6b21\u5f00\u53d1\u63a5\u53e3\u53ca\u903b\u8f91\u63a7\u5236\u811a\u672c,\u4f7f\u5176\u5728\u5de5\u7a0b\u5e94\u7528\u4e2d\u66f4\u52a0\u5f97\u5fc3\u5e94\u624b.\u672c\u6587\u4ee5\u4e2d\u56fd\u77f3\u5316\u67d0\u539f\u6cb9\u7ba1\u9053\u4e3a\u4f8b,\u7b80\u8981\u4ecb\u7ecd\u4e86\u5229\u7528SPS\u642d\u5efa\u539f\u6cb9\u7ba1\u9053\u4eff\u771f\u7cfb\u7edf\u7684\u8fc7\u7a0b\u53ca\u5e94\u7528\u6548\u679c,\u4e3a\u539f\u6cb9\u7ba1\u9053\u7684\u7cbe\u7ec6\u5316\u7ba1\u7406\u63d0\u4f9b\u4e86\u6709\u529b\u652f\u6491.", "num_citations": "5\n", "authors": ["737"]}
{"title": "How Are Performance Issues Caused and Resolved?-An Empirical Study from a Design Perspective\n", "abstract": " Empirical experience regarding how real-life performance issues are caused and resolved can provide valuable insights for practitioners to effectively and efficiently prevent, detect, and fix performance issues. Prior work shows that most performance issues have their roots in poor architectural decisions. This paper contributes a large scale empirical study of 192 real-life performance issues, with an emphasis on software design. First, this paper contributes a holistic view of eight common root causes and typical resolutions that recur in different projects, and surveyed existing literature, in particular, tools, that can detect and fix each type of performance issue. Second, this study is first-of-its-kind to investigate performance issues from a design perspective. In the 192 issues, 33% required design-level optimization, ie simultaneously revising a group of related source files for resolving the issues. We reveal four design\u00a0\u2026", "num_citations": "4\n", "authors": ["737"]}
{"title": "Localized or architectural: an empirical study of performance issues dichotomy\n", "abstract": " Performance is an important quality attribute of software systems. This paper categorizes and investigates 225 real-life performance issues in two separate groups: 1) localized issues (60%) that can be fixed by simple, localized code fixes and 2) architectural issues (40%) that require changes to a group of architecturally related files. This paper improves the understanding of causes and solutions to performance issues, specially for architectural performance issues. First, we summarized six typical root causes to performance problems that apply to both localized and architectural issues. In particular, 19% of architectural issues are associated with multiple causes. Second, we summarized four general types of architectural solutions to performance issues: 1) introducing new design elements; 2) changing design dependencies; 3) updating connected files; 4) updating independent files.", "num_citations": "4\n", "authors": ["737"]}
{"title": "Pheonix at semeval-2020 task 5: Masking the labels lubricates models for sequence labeling\n", "abstract": " This paper presents the deep-learning model that is submitted to the SemEval-2020 Task 5 competition:\u201cDetecting Counterfactuals\u201d. We participated in both Subtask1 and Subtask2. The model proposed in this paper ranked 2nd in Subtask2 \u201cDetecting antecedent and consequence\u201d. Our model approaches the task as a sequence labeling. The architecture is built on top of BERT, and a multi-head attention layer with label masking is used to benefit from the mutual information between nearby labels. Also, for prediction, a multi-stage algorithm is used in which the model finalize some predictions with higher certainty in each step and use them in the following. Our results show that masking the labels not only is an efficient regularization method but also improves the accuracy of the model compared with other alternatives like CRF. Label masking can be used as a regularization method in sequence labeling. Also, it improves the performance of the model by learning the specific patterns in the target variable.", "num_citations": "3\n", "authors": ["737"]}
{"title": "DesignDiff: Continuously Modeling Software Design Difference from Code Revisions\n", "abstract": " The design structure of a system continuously evolves as the consequence of fast-paced code revisions. Agile techniques, such as continuous testing, ensures the function goals of a system with every code revision. However, there lacks an efficient approach that can continuously model the design difference resulting from every single code revision to facilitate comprehension and ensure the design quality. This paper contributes a novel design modeling approach, called Design Differencing (DESIGNDIFF), that models and visualizes the highlevel design differences resulting from every code revision. This paper defines a complete and general set of 17 design change operators to capture the design difference from any code revision. We evaluated the potential of DESIGNDIFF in three aspects. First, a user study of 10 developers indicated that DESIGNDIFF can help practitioners to faster and better understand high\u00a0\u2026", "num_citations": "1\n", "authors": ["737"]}