{"title": "Cloud-based battery condition monitoring and fault diagnosis platform for large-scale lithium-ion battery energy storage systems\n", "abstract": " Performance of the current battery management systems is limited by the on-board embedded systems as the number of battery cells increases in the large-scale lithium-ion (Li-ion) battery energy storage systems (BESSs). Moreover, an expensive supervisory control and data acquisition system is still required for maintenance of the large-scale BESSs. This paper proposes a new cloud-based battery condition monitoring and fault diagnosis platform for the large-scale Li-ion BESSs. The proposed cyber-physical platform incorporates the Internet of Things embedded in the battery modules and the cloud battery management platform. Multithreads of a condition monitoring algorithm and an outlier mining-based battery fault diagnosis algorithm are built in the cloud battery management platform (CBMP). The proposed cloud-based condition monitoring and fault diagnosis platform is validated by using a cyber-physical testbed and a computational cost analysis for the CBMP. Therefore, the proposed platform will support the on-board health monitoring and provide an intelligent and cost-effective maintenance of the large-scale Li-ion BESSs. View Full-Text", "num_citations": "39\n", "authors": ["953"]}
{"title": "Enhancing object-oriented programming education using static and dynamic visualization\n", "abstract": " While Object-Oriented programming in Java has been widely adopted as an introductory programming course in Computer Science, it is considered difficult to teach and learn. Studies have identified that the difficulty is from the underlying Object-Oriented concepts and principles. To help student programmers better understand the structure of a program and the concepts of Object-Oriented design, visualizations in various formats have been applied to programming environments. This paper presents a web-based interactive educational programming environment, JavlinaCode, and its unique design principles. JavlinaCode is designed for teaching object-oriented programming in Java. It aims to enhance student programmers' programming skill and to help them understand object-oriented design concepts. It provides integrated static and dynamic visualizations: the static state of a Java program in an UML class\u00a0\u2026", "num_citations": "22\n", "authors": ["953"]}
{"title": "Cloud-based battery condition monitoring platform for large-scale lithium-ion battery energy storage systems using internet-of-things (IoT)\n", "abstract": " This paper proposes a novel cloud-based battery condition monitoring platform for large-scale lithium-ion (Li-ion) battery systems. The proposed platform utilizes Internet-of-Things (IoT) devices and cloud components. The IoT components including data acquisition and wireless communication components are implemented in battery modules, which allows a module to communicate with others and cloud. The cloud components include a cloud storage, analytics tools, and visualization. To validate the concept of the proposed cloud-based condition monitoring platform, a small-scale cloud battery management system (BMS) simulator is developed using Raspberry pi boards and Google cloud. Multithreads of the condition monitoring algorithms that estimates battery states and battery model parameters for individual cells are executed in Google cloud. The results show that the cloud-based battery condition\u00a0\u2026", "num_citations": "15\n", "authors": ["953"]}
{"title": "Automated source code measurement environment for software quality\n", "abstract": " Measuring how well software component can be reused and maintained helps programmers not only write reusable and maintainable software, but also identifies reusable or maintainable components. We develop an automated measurement tool, JamTool, for object-oriented software system and describe how this tool can guide a programmer through measuring internal characteristics of a program for software reuse and maintenance.", "num_citations": "14\n", "authors": ["953"]}
{"title": "Synchronized static and dynamic visualization in a web-based programming environment\n", "abstract": " This paper presents an approach of static and dynamic visualizations synchronized along with source code in a web-based programming environment, JavelinaCode. Using JavelinaCode, student programmers can write Java programs directly in a frontend web browser without any software or plug-in installation. They are provided with a view of the static state of a Java program in UML class diagrams and the dynamic run-time state of the program by stepping forwards and backwards through program execution. A case study has revealed that our approach is useful, in particular, to trace and detect an object flow anomaly caused by method overriding and polymorphism. A preliminary comparison test result also has shown that through our web-based platform-independent environment, student programmers are freed from concern with continuous version changes and evolutions of the Java language, plug-ins, and\u00a0\u2026", "num_citations": "11\n", "authors": ["953"]}
{"title": "Static and dynamic approaches to modeling end-to-end routing in circuit-switched networks\n", "abstract": " We present two routing strategies, identified herein as static least loaded routing (SLLR) and dynamic least loaded routing (DLLR). Dynamic routing in circuit-switched networks has been an active research topic. The literature to date in this area has focused on how to choose the \"best\" alternate route for overflow traffic from a direct route, within a network setting referred to as the backbone network. The traffic type considered in the literature has typically been one with a single destination. Least loaded routing (LLR) is an example of a state-dependent routing that selects the least loaded two-link alternate route when traffic overflows from the direct route. Motivated by the development of an emerging traffic type, called multidestination traffic, whose destination is not necessarily limited to a single location, we provide two routing strategies that deal with both the routing of the multiple-destination traffic to the extended\u00a0\u2026", "num_citations": "11\n", "authors": ["953"]}