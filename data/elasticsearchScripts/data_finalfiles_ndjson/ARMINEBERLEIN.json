{"title": "Requirements engineering and agile software development\n", "abstract": " This article compares traditional requirements engineering approaches and agile software development. Our paper analyzes commonalities and differences of both approaches and determines possible ways how agile software development can benefit from requirements engineering methods.", "num_citations": "742\n", "authors": ["370"]}
{"title": "An empirical study of open-source and closed-source software products\n", "abstract": " We describe an empirical study of open-source and closed-source software projects. The motivation for this research is to quantitatively investigate common perceptions about open-source projects, and to validate these perceptions through an empirical study. We investigate the hypothesis that open-source software grows more quickly, but does not find evidence to support this. The project growth is similar for all the projects in the analysis, indicating that other factors may limit growth. The hypothesis that creativity is more prevalent in open-source software is also examined, and evidence to support this hypothesis is found using the metric of functions added over time. The concept of open-source projects succeeding because of their simplicity is not supported by the analysis, nor is the hypothesis of open-source projects being more modular. However, the belief that defects are found and fixed more rapidly in open\u00a0\u2026", "num_citations": "394\n", "authors": ["370"]}
{"title": "Preliminary results from an empirical study on the growth of open source and commercial software products\n", "abstract": " This article describes an empirical study of the growth and evolution of three open source and three commercial software projects. This study identifies commonality and differences in the growth of these projects, and discusses how these results may be useful in planning software development strategies.", "num_citations": "80\n", "authors": ["370"]}
{"title": "Towards a framework for understanding the relationships between classical software engineering and agile methodologies\n", "abstract": " There is an ongoing debate in the software engineering (SE) community over the usefulness and applicability of classical SE methodologies versus agile methodologies. Based on an investigation of the philosophical origins, the history and the technological support of representative classical SE methodologies and agile methodologies, a framework is proposed in this paper to help understand the relationship between these different approaches. The framework proposed provides a novel, five-dimensional ways in which to consider the concepts, historical and technological background of the methodologies, the characteristic differences between them, the variety of skills, and the economic, technological and organisational conditions needed to execute them. The framework has been formed by combining five techniques of research analysis: Contextual; Historical; Analysis by analogy; Phenomenological; and\u00a0\u2026", "num_citations": "57\n", "authors": ["370"]}
{"title": "Formalization of Product Requirements: From Natural Language Descriptions to Formal Specifications\n", "abstract": " In engineering design, customers usually provide product requirements in the form of a natural language while computer-aided design systems may prefer more formal and structured specifications. In this paper, a formalisation process is proposed to transform product requirements from its natural language descriptions to a formal specification. The formal specification is based on the product environment and the formulation of design problem, which identifies the components included in a design problem in terms of the product environment. Through the lexical, syntactic, and structure analysis of natural language descriptions of a design problem, the formalisation process identifies the product to be designed, its environment components, and their relations. A software prototype is developed to validate the formalisation process. An example of rivet setting tool design shows that both the formalisation process and\u00a0\u2026", "num_citations": "52\n", "authors": ["370"]}
{"title": "Aspect-oriented requirements engineering for software product lines\n", "abstract": " Requirements engineering (RE) helps to identify, analyze and document system requirements. Proper analysis and understanding of system requirements is important because it helps to discover any requirements defects or mistakes in the early stages of development. Several processes and techniques have been developed to assist requirements engineering activities for product development. However, most of the existing product line practices do not comprise all the RE activities required for proper identification, analysis and understanding of product line requirements. In this paper, we propose a systematic and iterative RE approach for product line development. The approach includes all the activities required for proper identification, analysis, modeling and specification of product line requirements. In addition to this, it proposes several specific techniques such as aspect-orientation or separation of concerns\u00a0\u2026", "num_citations": "47\n", "authors": ["370"]}
{"title": "Requirements engineering for time-to-market projects\n", "abstract": " This paper identifies the essential components of a requirements engineering (RE) process and provides alternatives to the requirements analyst when deciding on a particular set of RE methods. Existing methods of choosing RE techniques are discussed, and a new technique is proposed specifically for choosing RE techniques for projects with critical time-to-market projects. The components of the essential RE process as well as many other insights into the practice of RE were identified by examining the current literature and by analyzing the data from 25 completed surveys concerning the area of RE. The survey data provides insight into the state of the practice in requirements engineering.", "num_citations": "45\n", "authors": ["370"]}
{"title": "Systematic selection of software architecture styles\n", "abstract": " Selecting appropriate styles for software architectures is important as styles impact characteristics of software (e.g. reliability). Moreover, styles influence how software is built as they determine architectural elements (e.g. components, connectors) and rules on how these elements are integrated in the architecture. Therefore this study presents a method, called SYSAS, for the systematic selection of architecture styles. In SYSAS, style selection is based on (a) characteristics of basic architectural elements that are relevant for the developer, and (b) characteristics of the target system that are visible to the end user. The selection procedure requires ratings about the importance of characteristics of architectural elements and results in a ranking of styles. SYSAS can be applied at system level as well as for choosing styles for individual subsystems. A case study is presented to illustrate SYSAS and its applicability and\u00a0\u2026", "num_citations": "40\n", "authors": ["370"]}
{"title": "Requirements Engineering for Software Product Lines\n", "abstract": " The cost of fixing a requirements defect later in the development stage is much higher than the cost of identifying and fixing it in the early stages of development. In order to do this the system requirements must be properly identified, analyzed and reviewed early in the development process. Requirements Engineering (RE) is such a process that focuses on discovering, analyzing, documenting and managing the system requirements. Several processes and techniques have been developed to assist RE activities.A product line is a set or group of products that have a majority of features in common and vary only in certain specific features. Developing a group of products that have a majority of features in common supports a great deal of reuse in all the phases of system development. Due to the complex nature of product line development, requirements engineering is even more important for a product line. Hence a well-established requirements engineering process is vital. In this document, an attempt is made to address the area of RE for product line development. Several existing RE processes and techniques for single product development are briefly described. Also several existing product line practices are described and the RE activities in each of them are analyzed. The applicability of existing RE processes and techniques to product line development are assessed. Finally, a RE approach for product line development using aspect-oriented programming concepts and extensible Markup Language (XML) is proposed.", "num_citations": "40\n", "authors": ["370"]}
{"title": "An analysis of the history of classical software development and agile development\n", "abstract": " The ongoing debate over the merits of classical software engineering (SE) methodologies and agile methodologies has so far resulted in no clear benefits for the SE community. This paper uses the CHAPL framework developed in our previous research to analyse the history of classical SE methodologies and agile methodologies. Our historical analysis focuses on the following three perspectives: the practices, the principles, and the technological context. The analysis reveals that both approaches to software development have similar roots and that their proponents have ample ground for constructive discussions. In fact, both approaches can be seen as complementary and their integration could contribute to project success.", "num_citations": "33\n", "authors": ["370"]}
{"title": "Transition from requirements to architecture: A review and future perspective\n", "abstract": " Elicitation, modeling and analysis of requirements are main challenges during software development. In parallel, software architectures have become a well established area in software engineering research and practice. However, there is still a lack of fundamental process models and guidelines for the transition between the two important phases of requirements engineering and software architectures within the software development cycle. Substantial progress has been separately made in both areas but very little research achievements can be found that address the relation between requirements and architectures. When doing a review on existing methods that try to overcome this gap we realized an urgent need for fundamental research in this area. The paper first presents, compares, classifies and evaluates the suitability of current approaches. Then, evaluation criteria and requirements for a transition\u00a0\u2026", "num_citations": "33\n", "authors": ["370"]}
{"title": "Using semi-formal methods for detecting interactions among smart homes policies\n", "abstract": " Feature Interaction is a problem mostly considered in the telecommunications domain. Many solutions for detecting interactions between telephony features have been reported. In this paper, we investigate the feature interaction problem beyond the traditional telecommunications domain and look at interactions between policies in other domains. We propose the use of semi-formal methods for detecting interactions between policies in the smart homes domain. The novelty of this research is threefold: firstly, a six step semi-formal approach, called IRIS (Identifying Requirements Interactions using Semi-formal methods), for detecting interactions is presented. A major component within IRIS, which is an interaction taxonomy, is also presented. Secondly, we extend the scope of the problem of feature interactions beyond telecommunication features and investigate interactions between policies in the smart homes\u00a0\u2026", "num_citations": "29\n", "authors": ["370"]}
{"title": "Selecting Requirements Engineering Techniques Based on Project Attributes--A Case Study\n", "abstract": " Selection of the most appropriate RE techniques for a software project based on the project's characteristics is a non-trivial process and a common challenge faced by software developers. In order to facilitate RE techniques selection, we propose a model for RE technique suitability assessment (RETSA) based on project attributes. This model was developed based on surveys and interviews of experienced software developers and experts from industry and academia. RETSA was applied to an industrial project. This case study shows the help this model provided during the selection of RE techniques for a software project", "num_citations": "29\n", "authors": ["370"]}
{"title": "Requirements acquisition and specification for telecommunication services\n", "abstract": " Telecommunications has brought about a tremendous change in the last 150 years, and is still one of the most rapidly developing technologies. Advances in mobility and quality over long distances have led to a highly complex communication medium, which contains equipment of differing capabilities and age, produced by a variety of vendors, in a worldwide distributed network. Nowadays, one of the greatest challenges that telecommunication operators face is the development and deployment of new services. Many service ideas exist; however, their implementation has persistently proved to be difficult. One of the most problematic tasks lies in understanding the requirements and correctly transforming them into code. Each introduction of a new service causes fears as to how the service will interact with already existing services. Traditional approaches have failed to deliver high-quality service software; new\u00a0\u2026", "num_citations": "29\n", "authors": ["370"]}
{"title": "Assessing team performance from a socio-technical congruence perspective\n", "abstract": " There are many factors that provide input into the software development process, such as the values, beliefs, norms, practices, skills, behaviors, knowledge and goals of stakeholders. Research has shown that successful software system development relies on alignment or congruence between these factors. How to monitor the level of congruence between these factors and how to use the congruence as an indicator or a measure to monitor a software development process is a challenge in software engineering. This paper proposes a model that uses three congruence measures to examine the levels of social-technical congruence in software development processes. Using a controlled experiment with seven student teams developing a robot project, this paper demonstrates that the proposed congruence measures provide results consistent with the assessment by the course lecturers.", "num_citations": "26\n", "authors": ["370"]}
{"title": "Remote patient monitoring and information system\n", "abstract": " This paper presents a remote healthcare patient monitoring system, called the Virtual Eye (VI), that utilises the World Wide Web infrastructure to monitor, collect, analyse and record patients' health status. The data is stored in the hospital database and can be accessed from anywhere through the internet. When a patient is in an alarming situation, the VI sends SMS messages to the mobile of the designated health personnel via the public GSM network. The novelty of the system lies in its security and its ability to use both the internet and the GSM network as communication media. Doctors can access the database server to compare the patient's current status with his/her medical history. It can be used by one physician to monitor a group of patients simultaneously, or by a group of physicians who all monitor the same patient. It allows plug-and-play of multivendor off-the-shelf hardware devices, thus avoiding\u00a0\u2026", "num_citations": "23\n", "authors": ["370"]}
{"title": "The interaction of the TCP flow control procedure in end nodes on the proposed flow control mechanism for use in IEEE 802.3 switches\n", "abstract": " The existing Ethernet and Token Ring based networks, known as legacy LANs, are no longer able to satisfy the constantly growing demand for more bandwidth and better quality of service. However, switching technology is a solution that seems to be able to cope with further expanding requirements. Introducing switches with new flow control schemes makes the networks faster and more efficient but, at the same time, this can cause other problems. An example is the interaction between the well-established endto-end TCP flow control and the hop-by-hop switch flow control. The interaction between these two flow control mechanisms is too complex to be solved using theoretical analysis and hence simulation modelling has been used The advantages and drawbacks of using both flow control schemes firstly independently and secondly together has been investigated and the results are presented and\u00a0\u2026", "num_citations": "23\n", "authors": ["370"]}
{"title": "Managing policy interactions in KNX-based smart homes\n", "abstract": " Smart homes have enjoyed increasing popularity in recent years. In order for them to further expand their market share, users need to be able to fully control devices. Policies are one way for users to achieve such flexible control of devices. However, user policies often tend to interact in unwanted ways leading to unexpected behavior of devices. This paper describes the design of a run-time policy interaction management module (PIMM) that serves as manager for detecting and resolving interactions between user policies in KNX-based smart homes. This module extends the traditional KNX networking system with the ability to manage policy interactions. The module operates in the run-time S-mode of the KNX network and works as part of the engineering tool software (ETS) used to configure and control the operation of the KNX network in smart homes. The proposed module serves as the first of its kind that can\u00a0\u2026", "num_citations": "20\n", "authors": ["370"]}
{"title": "A taxonomy for identifying requirement interactions in software systems\n", "abstract": " This paper presents an interaction taxonomy for classifying and identifying requirement interactions in software systems. The proposed taxonomy is in the form of a four-layered pyramid that defines 6 Main Interaction Categories in the first layer, 17 Interaction Subcategories in the second layer, 29 Interaction Types in the third layer, and 29 Interaction Scenarios in the fourth layer. Each interaction scenario has a corresponding interaction detection guideline that describes how the interaction can be detected. The proposed interaction taxonomy was compared to other existing taxonomies in the literature and was not only able to address all the issues in those taxonomies, but also contained many other interaction types. The proposed interaction taxonomy serves as the first domain-independent requirement interactions taxonomy. It provides a detailed description of when two requirements interact.", "num_citations": "18\n", "authors": ["370"]}
{"title": "Early assessment of software architecture qualities\n", "abstract": " This paper presents an approach for the ad-hoc assessment of software architecture qualities. The method allows evaluating architectures at early development stages and focuses on development qualities (e.g., coupling), rather than on runtime qualities (e.g., performance). Early feedback in the development process facilitates immediate improvement of low quality architecture artifacts. The proposed method defines three levels of architecture quality attributes, some of which are expressed as computable metrics while the other quality attributes are derived from these metrics. Throughout the paper, the example of a cruise-control system illustrates the approach.", "num_citations": "17\n", "authors": ["370"]}
{"title": "Simulation-based analysis of the interaction of end-to-end and hop-by-hop flow control schemes in packet switching LANs\n", "abstract": " To meet the networking requirements of the newer high-bandwidth multimedia applications, many LAN managers are starting to adopt switches as the basis of their network architectures. However, although introducing switches makes the networks faster, they can also introduce some new problems. These are caused by the interaction of the existing end-to-end flow control in end systems with the hop-by-hop flow control that is used by switches. An example is a phenomenon known as head-of-line blocking. The paper illustrates how this can occur and, for an example topology, quantifies its effect using simulation modelling.", "num_citations": "17\n", "authors": ["370"]}
{"title": "An algorithm for transforming design text ROM diagram into FBS model\n", "abstract": " In this paper, a novel algorithm is proposed to transform a ROM diagram obtained from a design text into a FBS model. Each state of the transformation process is defined by four features: ROM (Recursive Object Model), POS (Part of Speech), PES (Product\u2013Environment System), and FBS (Function\u2013Behavior\u2013State). The transformation algorithm is thus constituted by transition rules which change one transformation state to another, and procedures which apply the transition rules to a given ROM diagram. A software prototype R2FBS is presented as a proof of concept to assist the transformation. Two examples are used to demonstrate how the proposed approach works.", "num_citations": "16\n", "authors": ["370"]}
{"title": "Requirements attributes to predict requirements related defects\n", "abstract": " Literature suggests that requirements defects are a very costly problem to fix. Understanding how requirements changes influence the overall quality of software is important. Having some defect predictors at the requirements stage may help the stakeholders avoid making choices that could bring about catastrophic defect numbers at the end or at least be prepared for it. In this paper, six requirements-related attributes are analyzed to discover if they can be used for determining the occurrences of requirements-related defects. We measured two types of attributes: point and aggregate. The point attributes include time estimates, priority and ownership. The aggregate attributes include the number of indirect stakeholders, the number of related stories and the story creation time. Our analysis is based on data from the development of the IBM Jazz system. Our result shows that the number of indirect stakeholders and the\u00a0\u2026", "num_citations": "13\n", "authors": ["370"]}
{"title": "Decision support for requirements engineering process development\n", "abstract": " This paper presents a methodology that provides decision support for the iterative development of requirements engineering (RE) processes, which is a significant step towards bridging the gap between RE theory and practice. The methodology presented is based on a multicriteria decision making model C. Zopounidis et al. (2000) and an N-dimensional process development methodology A. Eberlein et al. (2001) in order to provide support for requirements engineers to tailor/define RE process models and to select the most appropriate RE techniques for a specific project. Currently available RE models and techniques are stored in a RE process knowledge base (REPKB) which is the basis for decision support. The general theory behind this methodology is described and an algorithm for the implementation of our decision support is discussed in the paper. Preliminary results suggest that the framework makes a\u00a0\u2026", "num_citations": "12\n", "authors": ["370"]}
{"title": "Identifying potential core assets in service-based systems to support the transition to service-oriented product lines\n", "abstract": " Variability in service-oriented architectures (SOA) is usually addressed through loose coupling of services and dynamic retrieval, composition and binding of services. Facilitating variability can lead to different instances of one SOA. These instances share commonalities, but vary in certain aspects (e.g., in functionality or quality attributes). Current service-based development approaches do not adequately address variability and the management of different SOA instances. To handle different instances and to support systematic variability management, different instances of a service-based system may be treated as members of a product line. Therefore, we present a light-weight method to decide on what services to add to service-based systems to facilitate the transition from individual systems to a service-oriented product line. When adding services to service-based systems, the structural stability of these system\u00a0\u2026", "num_citations": "11\n", "authors": ["370"]}
{"title": "IRIS: a semi-formal approach for detecting requirements interactions\n", "abstract": " Requirements engineering is considered a critical phase of the software development life cycle. However, because of the complexity of today's projects, requirements often have a negative impact on each other. Requirements interaction detection is an important activity for the discovery of such unwanted interactions. Commonly used detection processes are oriented towards the telecommunication domain and are done using either human experts or formal approaches. This paper presents IRIS, which stands for identifying requirements interactions using semiformal methods. The novelty of IRIS is threefold: first, IRIS uses semiformal methods for the detection of interactions between requirements. This helps to fill in the gap between the commonly used informal and formal approaches. Secondly, IRIS is a domain independent approach, which means that it is not limited to the telecommunications domain but can be\u00a0\u2026", "num_citations": "11\n", "authors": ["370"]}
{"title": "Requirements Engineering for Dynamic Markets\n", "abstract": " REQUIREMENTS ENGINEERING FOR DYNAMIC MARKETS Simon Pfeiffer Dept. of Elect. & Comp. Engineering University of Calgary 2500 University Drive NW Calgary, AB, Canada, T2N 1N4 pfeiffer@enel.ucalgary.ca Armin Eberlein Dept. of Elect. & Comp. Engineering University of Calgary 2500 University Drive NW Calgary, AB, Canada T2N 1N4 eberlein@enel.ucalgary.ca Abstract Time-to-market has become more and more critical for software development projects. Thus, the time available for requirements engineering is drastically reduced and at the same time, the requirements are subject to frequent changes due to fast and fierce competition. Whoever re- leases a product containing the most valuable features first will profit the most. This paper reviews the current state of the art in the field of requirements engineering for dynamic markets regarding traditional as well as the so- called agile methodologies. as . \u2026", "num_citations": "11\n", "authors": ["370"]}
{"title": "Telecommunications service development: a design methodology and its intelligent support\n", "abstract": " This paper describes a development life cycle for telecommunications services, emphasizing requirements capture, formal specification and validation. The service is developed along the three dimensions of the methodology: refinement, completeness and formality, aiming for a complete, consistent and formally specified service definition. The described methodology can be integrated into currently existing development life cycles which employ formal methods for service creation. Active support for the proposed life cycle is provided by a novel expert system called Requirements Assistant for Telecommunications Services (RATS), currently under development. It actively helps during requirements acquisition and early analysis, and encourages specification reuse with the help of a semi-automated negotiation process. The RATS tool advises the service developer during all stages of the service development, and on\u00a0\u2026", "num_citations": "11\n", "authors": ["370"]}
{"title": "Description of a process development methodology\n", "abstract": " The creation of a development process is a challenging task. The most\u2010widely published process models, such as the Waterfall model, are very generic, and their application and customization to a specific problem domain requires major effort. Additionally, their refinement into fine\u2010grained process steps demands a lot of dedicated work. There is definitely a lack of aid for the customization of processes to specific domains and projects. This article first reviews a generic framework for Requirements Engineering (RE) as well as a domain\u2010specific framework. It then outlines a methodology and tool called (Process Development Assistant) PDA that helps the process engineer develop a process model in an iterative manner. The methodology requires as input from the developer items of major concern, constraints and priorities specific to a certain domain and a particular project. It uses mathematical definitions to\u00a0\u2026", "num_citations": "10\n", "authors": ["370"]}
{"title": "A framework of a web-based distributed control system\n", "abstract": " This paper describes a framework of a Web-based distributed control system (WBDCS) and the design and implementation of its software using a multitier client/server architecture and distributed object technology. The main issues addressed in this paper are the infrastructure of the system, the functionality of the components, and the real-time scheduling behavior of the application. CORBA is adopted to facilitate the communication between distributed objects across the Internet/intranet. Connectivity and controllability of on-line devices and their interaction with users are described. Because of the importance of timeliness in real-time systems, emphasis is put on time and event scheduling in the system. WBDCS features downloadable graphical user interfaces that display real-time status and process data of remote devices, allow an authorized user to access process variables and modify device configurations\u00a0\u2026", "num_citations": "10\n", "authors": ["370"]}
{"title": "Architectural design of an intelligent requirements engineering tool\n", "abstract": " Research in requirements engineering has resulted in various techniques, methods and frameworks but tool support is currently still very limited. It has been recognized that the lack of intelligent support tools for flexible, reliable, and adaptable requirements engineering processes is a major issue that prevents organizations from improving their requirements engineering practices. In order to implement tools that offer intelligent support for requirements engineering processes, a web-based multitier software architecture is proposed in this paper. An intelligent support tool using this architecture can support scalable software projects and can be adapted to different requirements engineering processes. Based on this architecture we have implemented a web-based tool for the \"Requirements acquisition and specification for telecommunication services\" (RATS) process. It can be configured to run on a standalone\u00a0\u2026", "num_citations": "10\n", "authors": ["370"]}
{"title": "Comparing methodologies for the transition between software requirements and architectures\n", "abstract": " The transition from software requirements to software architectures has consistently been one of the main challenges during software development. Various methodologies that aim at helping with this transition have been proposed. However, no systematic approach for assessing such methodologies exists. Also, there is little consensus on the technical and non-technical issues that a transition methodology should address. Hence, we present a method for assessing and comparing methodologies for the transition from requirements to architectures. This method also helps validate newly proposed transition methodologies. The objective of such validations is to assess whether or not a methodology has the potential to lead to better architectures. For that reason, this paper discusses a set of commonly known but previously only informally described criteria for transition methodologies and organizes them into a\u00a0\u2026", "num_citations": "9\n", "authors": ["370"]}
{"title": "Requirements interaction detection using semi-formal methods\n", "abstract": " Increased pressure to reduce time-to-market has resulted in an increased effort to reuse previously developed software components when developing new software systems. However, in numerous cases, reuse has resulted in interactions between features and/or requirements. As the amount of reuse increases, interaction detection becomes a more and more challenging subject. Although feature interaction is not a new problem and has already been researched especially in the telecommunications domain where new features are added to large-scale base systems, relatively little research has been done outside of telecommunications. The aim of this paper is to introduce a systematic approach for the detection of interactions based on requirements attributes. This systematic approach is part of a three-level framework that offers several approaches to feature-interaction detection in any domain at different levels\u00a0\u2026", "num_citations": "9\n", "authors": ["370"]}
{"title": "A framework for requirements engineering process development (FRERE)\n", "abstract": " Adoption of the most suitable requirements engineering (RE) process and selection of the most appropriate RE techniques for a given project are challenging issues for industry. In order to alleviate the problems, a framework for RE process development (FRERE) was developed based on our research in the last six years. The overall architecture of the framework and a brief case study are presented in the paper. The framework addresses several core issues of the RE process: engineering issues, domain issues, characteristics of the software project, and issues of conformity to software process standards. FRERE consists of three parts: (1) The RE process knowledge base (REPKB) which contains RE process knowledge, (2) methodologies which provide guidance to develop a customized software process model in an iterative way; and (3) assessment models which provide information about the suitability of the\u00a0\u2026", "num_citations": "8\n", "authors": ["370"]}
{"title": "The design of Holmes: a tool for domain analysis and engineering\n", "abstract": " Holmes is a collection of tools that support the Sherlock domain analysis and engineering (DA&E) methodology. Holmes plans to improve on existing DA&E tools by providing a more usable interface and making better use of existing technologies and standards. Usability is achieved through automation and the use of a critiquing system. The tool is developed in Java to allow easier upgrading to new technologies and standards by updating a server to deploy new versions. Internal data exchange is achieved using the JavaSpaces API while external data exchange uses the Extensible Markup Language (XML).", "num_citations": "7\n", "authors": ["370"]}
{"title": "Facilitating software architecting by ranking requirements based on their impact on the architecture process\n", "abstract": " Ranking software requirements helps decide what requirements to implement during a software development project, and when. Currently, requirements ranking techniques focus on resource constraints or stakeholder priorities and neglect the effect of requirements on the software architecture process. However, the order in which requirements are implemented impacts the process of creating architectures and should therefore be chosen carefully. Thus, this paper presents a method for ranking requirements with a focus on the impact of requirements on the architecture process. The proposed method uses stakeholder input and architecture-relevant requirements attributes to create a ranking of requirements. A case study is presented to evaluate the usefulness of the method.", "num_citations": "6\n", "authors": ["370"]}
{"title": "Clustering requirements engineering techniques\n", "abstract": " 2. In the row containing the Clustering effects,\u201cBasic\u201d indicates that the result of the clustering gives a rough indication of the high level class to which a RE technique belongs. However, the techniques in eachcluster do not have very similar characteristics.\u201cBetter\u201d indicates that the result of the clustering provides better classification results.\u201cBest\u201d indicates that the result of the clustering provides a fine-grained", "num_citations": "6\n", "authors": ["370"]}
{"title": "Towards a Requirements Engineering Process Model\n", "abstract": " The creation of a development process is a challenging task. The application, customization and refinement of generic process models into fine-grained process steps suitable for a specific problem domain requires major work. This paper first reviews a generic framework for requirements engineering as well as a domain-specific framework. It then outlines some basic principles for a methodology that helps the process engineer develop a process model that considers domain knowledge, as well as constraints and priorities for a particular project. The methodology is called REPM (Requirements Engineering Process Model) and uses mathematical definitions to generate an initial process model to be refined in ai iterative manner using the feedback of the process designer.", "num_citations": "6\n", "authors": ["370"]}
{"title": "Selecting Requirements Engineering Techniques\n", "abstract": " Recent research has shown that industry increasingly recognizes the importance of using appropriate requirements engineering (RE) techniques in software projects. However, due to the large number of RE techniques and the complexity and diversity of software projects, it is very challenging to select suitable techniques for a particular project. This chapter reviews the state-of-the-art in RE techniques selection. It also analyzes the major components and knowledge units required for a RE techniques knowledge library. It then presents the basic idea of a Knowledge-based Approach for the Selection of Requirements Engineering Techniques (KASRET). This approach uses a RE Techniques Knowledge Library (RETKL) that contains detailed knowledge about RE techniques. RETKL is based on an in-depth analysis of RE literature and a survey of experts from both industry and academia. In addition, KASRET\u00a0\u2026", "num_citations": "4\n", "authors": ["370"]}
{"title": "Atomic requirements for software architecting\n", "abstract": " ATOMIC REQUIREMENTS FOR SOFTWARE ARCHITECTING Matthias Galster Department of Electrical and Computer Engineering University of Calgary Calgary, AB, Canada mgalster@ucalgary.ca Armin Eberlein Department of Computer Engineering American University of Sharjah Sharjah, United Arab Emirates eberlein@ucalgary.ca Mahmood Moussavi Department of Electrical and Computer Engineering University of Calgary Calgary, AB, Canada moussam@ucalgary.ca ABSTRACT Atomic requirements are one way of specifying software requirements. In this paper, we describe how atomic requirements can be of particular interest in the context of software architectures. We describe the way how to specify atomic requirements and their impact on the requirements engineering process, with an emphasis on architectural issues. In this work, we combine the theoretical concept of atomic requirements with ideas , . \u2026", "num_citations": "4\n", "authors": ["370"]}
{"title": "Matching Requirements with Off-the-shelf Components at the Architectural Level\n", "abstract": " Matching Requirements with Off-the-shelf Components at the Architectural Level Page 1 Matching Requirements with Off-the-shelf Components at the Architectural Level Matthias Galster Armin Eberlein Mahmood Moussavi Page 2 SERG 2007/ 2 of 18 Outline (1) Introduction (1) Introduction (2) Related work (2) Related work (3) Fundamentals (3) Fundamentals (4) OTS matching approach (4) OTS matching approach (5) Example (5) Example (6) Conclusion (6) Conclusion Page 3 SERG 2007/ 3 of 18 Introduction \u2751 Gap between RE and AR \u2751 Architectures are important for SW quality but complex to build \u2751 (OTS-) Components: structural artefacts + entities for reuse \u2751 OBD encounters difficulties \u25aa Selection, integration, maintenance, security, etc. \u25aa OTS lead to heterogeneous architectures with diverse components \u25aa OTS and architectures impact each other \u2751 Focus on architectural concerns \u25aa Match of requirements at 1 \u2026", "num_citations": "4\n", "authors": ["370"]}
{"title": "IRIS-TS: Detecting Interactions between Requirements in Doors\n", "abstract": " This paper investigates the problem of requirement interactions which occurs due to negative relationships between requirements when developing software systems. This paper presents IRIS-TS (Requirements Interactions using Semi-formal methods-Tool Support) which identifies and detects requirement interactions using semi-formal methods in any software domain. IRIS-TS is implemented as an independent add-on module that can be added to DOORS (which is one of the most famous and commonly used requirements management tools). This paper presents also a case study in which the proposed IRIS-TS approach was successfully used as an add-on module in DOORS to detect interactions between smart homes requirements which represent a new application domain for interaction detection. The presented case study is the first comprehensive effort to fully detect interactions in the smart homes domain.", "num_citations": "4\n", "authors": ["370"]}
{"title": "Detecting requirements interactions: A three-level framework\n", "abstract": " This paper deals with the problem of requirements interaction. We introduce a three level framework to detect requirements interactions at different levels of cost, time, and complexity. Level 2 where we use semiformal methods to detect interactions contains the main contribution of the research. Also we combine existing approaches (e.g. informal and formal) with our semiformal approach to provide a comprehensive framework for developers to use. The approach is illustrated using two case studies, one from the telecommunications domain and the other one being a lift control system. The results obtained are very encouraging with regards to the time and effort spent on requirements interaction detection.", "num_citations": "4\n", "authors": ["370"]}
{"title": "Structuring Software Requirements for Architecture Design\n", "abstract": " Global influence factors, e.g., quality attributes or technical constraints, often guide the process of designing software architectures. However, characteristics of individual requirements (e.g., the complexity or volatility of a requirement) also impact the design of architectures. Consequently, systematically handling the impact of individual requirements on the architecture can facilitate the design of architectures. Thus, we propose a method for identifying architecture-relevant structures in a set of requirements, based on characteristics of individual requirements. These structures provide information about when, where, how and why to implement requirements in the architecture. We use clustering to identify structures in requirements that are not apparent from functional decomposition or aggregation of requirements. Results from a case study show how these structures help with architecture design.", "num_citations": "3\n", "authors": ["370"]}
{"title": "Conceptual Modeling in Telecommunication Service Design\n", "abstract": " This chapter demonstrates how conceptual models in Telos can be used to create an intelligent tool called RATS that helps during the development of new telecommunications services. The focus of RATS is on the requirements engineering phase which has provided the most challenges in the past. The RATS tool can be integrated with currently available development approaches including formal methods. The chapter describes the overall architecture of the tool and then focuses on the Telos conceptual models that have been created. Emphasis is placed on the approach taken to providing intelligent support to the telecommunications service developer.", "num_citations": "3\n", "authors": ["370"]}
{"title": "The use of semi-formal methods for detecting requirements interactions\n", "abstract": " Requirements interactions are a big challenge in any software development methodology. This paper describes a three-level framework that can be customized for any domain and used to detect requirements interactions at different levels of cost and complexity. A definition of the different possible scenarios in which interactions between requirements will occur is presented with the goal of creating a general requirements interaction taxonomy. The paper then focuses on the semi-formal appraoch contained in level 2 of the framework and applies it to eight telecommunication features presented in the second feature interaction contest held in 2000. Finally, the results obtained are compared with those reported in literature.", "num_citations": "3\n", "authors": ["370"]}
{"title": "Requirements Engineering and Agile Methods: Can they benefit from each other\n", "abstract": " One of the greatest differences between traditional and agile software development can be found in the way requirements are addressed. Traditional development using the waterfall model requires all requirements to be written down in the software requirements specification before design can start. The requirements usually become part of the contract established between supplier and customer. Once the requirements are fixed, no changes are supposed to happen any more to the requirements document. For this reason, the agile community accuses requirements engineers of producing irrelevant, lengthy and boring documents.", "num_citations": "3\n", "authors": ["370"]}
{"title": "The impact of topology and choice of TCP window size on the performance of switched LANs\n", "abstract": " In this paper the influence of the chosen topology as well as the choice of the TCP window size used in end-systems on the performance of switched LANs has been investigated using simulation modelling. Four LAN topologies comprising servers, switches and clients are examined. Models of the TCP and UDP protocols are used in order to generate traffic for the investigations. Special attention has been paid to the window size, showing its potentially negative impact on the buffer consumption in interconnecting LAN switches. The effect of enabling the 802.3x hop-by-hop switch flow control on LAN performance has been analysed as well as the interaction of the TCP flow control used in end-systems with the hop-by-hop flow control used in switches.", "num_citations": "3\n", "authors": ["370"]}
{"title": "Development of new telecommunications services using an expert system\n", "abstract": " This paper outlines the functionality of an expert system currently under development. The \u2018Requirements Assistant for Telecommunications Services\u2018 (RATS) is designed to actively assist the development of new telecommunications services. It helps during the early parts of the development life cycle, during requirements capture and analysis, leading to formal specifications of the service at different stages of refinement. Facilities for requirements traceability, rationale and documentation as well as impact analysis of requirements change are provided. The tool contains comprehensive knowledge bases with the main characteristics of the telecommunications domain and the development process of telecommunications services, which enable the tool to actively guide the software developer. Assistance is provided for three dimensions of the development process of functional requirements \u2014 refinement\u00a0\u2026", "num_citations": "3\n", "authors": ["370"]}
{"title": "A tool for requirements engineering process development\n", "abstract": " Using software engineering (SE) knowledge to support the software development process is challenging due to the complex structure of SE knowledge and the uncertain nature of large-scale software projects. However, already before developing software, establishing a development process suitable for the project at hand is another challenge. This paper presents a requirements engineering (RE) tool that contains a knowledge base to support RE process development and selection of RE techniques. The tool is built based on the  F ramework for  R equirements  E ngineering p R ocess d E velopment (FRERE). The major merits of the tool over others is that the tool uses knowledge representation to manage the knowledge of the RE process and its technique, thus assisting development of the most suitable RE process for a software project.", "num_citations": "2\n", "authors": ["370"]}
{"title": "Position Paper: From Enterprise Architectures to Software Architectures using Requirements Engineering\n", "abstract": " Enterprise architectures represent business objectives that can be extracted during requirements engineering. After gathering these objectives in form of requirements the resulting specifications must be translated into software architectures for later implementation. This transition has proven to be a nontrivial task. Even though requirements engineering and software architectures are well established areas in the software engineering domain we still lack fundamental guidelines and rules for the bridging between these two stages. This paper presents our research position by proposing a flexible and adaptive process framework to relate software requirements based on enterprise architectures and software architectures.", "num_citations": "2\n", "authors": ["370"]}
{"title": "A requirements interaction detection process guide\n", "abstract": " One of the most challenging tasks in requirements engineering is the establishment of guidelines of when and how to use certain requirements engineering processes within the project context. Requirements interaction detection, as a requirements engineering activity, still lacks the definition of precise guidelines for when and how to apply the different detection techniques. The novelties described in this paper are twofold: first, this paper presents an overall framework for requirements interaction detection along with guidelines on what techniques to use for a given project. Second, this paper explicitly links project characteristics with the practices and techniques of requirements interaction detection. The aim of this paper is to show how requirements interaction detection needs to be an integral part of RE process development.", "num_citations": "2\n", "authors": ["370"]}
{"title": "RATS: a software tool to aid the transition from service idea to service implementation\n", "abstract": " This paper proposes an improved overall development life cycle for telecommunications services. A novel intelligent tool (RATS) is being developed to assist with requirements capture and early analysis, leading to formal specifications of the service at different stages of refinement. Commercial tools are then used for analysis and simulation of these specifications as well as automated test case and code generation. The RATS tool assists by providing facilities for traceability as well as impact analysis of change. It offers active guidance for the requirements development in three dimensions (refinement, formality and completeness) with the help of a semi-formalised negotiation process. The method is illustrated using examples from the UPT service.", "num_citations": "2\n", "authors": ["370"]}
{"title": "An Expert System For The Development Of New Telecommunications Services\n", "abstract": " This paper outlines the functionality of an expert system currently under development. It is called\" RATS\"(Requirements Assistant for Telecommunications Services) and is designed to actively assist the development of new telecommunications services. It helps during the early parts of the development life cycle, during requirements capture and analysis, leading to formal specifications of the service at different stages of refinement. Facilities for requirements traceability, rationale and documentation as well as impact analysis of requirements change are provided. The tool contains comprehensive knowledge bases with the main characteristics of the telecommunications domain and the development process of telecommunications services, which enable the tool to actively guide the software developer. These features are implemented with the help of a formal, object-oriented knowledge representation language called TELOS. Assistance is provided for three dimensions of the development process...", "num_citations": "2\n", "authors": ["370"]}
{"title": "Tools for Requirements Capture, formal Specification and Validation of IN Services\n", "abstract": " We describe an overall development life-cycle for IN services with emphasis on support for requirements capture and formal specification and validation. A novel intelligent tool (RATS 1) is being developed to assist with requirements capture and early analysis, leading to formal specifications of the service at different stages of refinement. The tool assists by providing facilities for requirements traceability as well as impact analysis of requirements change. It offers active guidance for requirements development in three dimensions (refinement, formality and completeness) with the help of a negotiation process. Existing service creation tools can then be used to implement the service. Some of the features of our methodology are illustrated using examples from the Universal Personal Telecommunication (UPT) service. 1 RATS: Requirements Assistant for Telecommunications Services 1. INTRODUCTION For several years we have used the language SDL 2 to specify services and protocols...", "num_citations": "2\n", "authors": ["370"]}
{"title": "The impact of component interconnections on software quality: A network analysis approach\n", "abstract": " The growing complexity of software has posed challenges for the design, understanding and maintenance of software. Software developers often spend a lot of effort on understanding how software components are connected. Through analysis of the data obtained from a real software application, this paper demonstrates that network analysis approaches can help understand software component interconnections and their impact on software quality. Additionally, this paper shows that there is a correlation between the number of bugs found in an application and a set of measures used in component (interconnection) networks. Furthermore, a case study showed that the software performance improved over two releases as a result of improving the component network.", "num_citations": "1\n", "authors": ["370"]}
{"title": "Undergraduate Engineering Student Academic Integrity: Comparison of International and Domestic Students\n", "abstract": " Undergraduate Engineering Student Academic Integrity Attitudes: Comparison of International and Domestic StudentsApproximately 700 undergraduate engineering students from 12 universities in the United Statesand 6 international universities responded to a survey of attitudes about academic integrityissues. Many established western universities are involved in the development of campusesabroad, but there has been limited research about differences in student attitudes towardscheating and other academic integrity issues. The goal of some of these campuses is to establishcurricula and academic standards equivalent to those found on Western campuses. The highnumber of international students pursuing engineering education within the US adds anotherdimension of importance in understanding differences in attitudes about academic integrity. Thisstudy investigates variability in student attitudes about academic integrity among students fromdifferent countries and cultural environments, and addresses the impact that variations may haveon the instructional techniques employed and policies that are adopted. The survey posed questions about student\u2019s opinion of what types of actions do or do notconstitute cheating, about student motivations for cheating or not cheating, student perceptions ofhow frequently their peers engage in academically dishonest activities, perception of facultyefforts to inhibit and punish cheating, and the degree to which students themselves (or externalforces) should be held responsible for academically dishonest behavior when it occurs. Analysesfor Variation (ANOVA) were conducted to identify where\u00a0\u2026", "num_citations": "1\n", "authors": ["370"]}
{"title": "Defining the output of a software architecture process\n", "abstract": " Objectives:Functional Process Code Development PhysicalReasoning about what functionality toimplement and what variability issupported; data flow identification;early decisions about product lines,reusability, work allocation; estimatesabout efforts; configurationmanagement and management ofmodule interfacesSupports designof global dataand controlflows; reasoningabout runtime-properties andtechnicalpropertiesSupports reasoningabout modifiability,maintainability,portability; helps findsubset of systemfunctionality withoutmaking major changesto its codeSupports for softwaremanagement, allocation ofrequirements and work to teams,cost evaluation, planning,monitoring of project progress;reasoning about modifiability,maintainability, reuse, portabilityand securityReasoning about whichpersistent data are stored inwhich components;reasoning about systemdelivery, installation andupgrades; allows\u00a0\u2026", "num_citations": "1\n", "authors": ["370"]}
{"title": "A Process Module to Pre-Process Requirements for Architecting\n", "abstract": " Software architectures have a significant impact on software quality. However, building architectures is a non-trivial task. In this paper, we present a process module for pre-processing requirements before developing the architecture. The benefit of this module is that it \"prepares \" requirements for architecting: It helps elicit additional technical and process-related information based on requirements. This information will be useful during the creation of architectures. The module can be used in the context of different architecture processes.", "num_citations": "1\n", "authors": ["370"]}
{"title": "The use of conceptual models during the design of new telecommunication services\n", "abstract": " The increasing demand for new telecommunication services encourages service providers to extend their service offerings. However, the development of such services and their deployment on the public network are non-trivial tasks. Experience has shown that the use of conceptual models can assist in the development of new systems. This paper investigates the usefulness of conceptual models containing information on the telecommunications domain and development process models, during the development of new telecommunication services. After an introduction to conceptual models, telecommunication services and requirements engineering, informal, semi-formal and formal conceptual models are discussed. Then Telos, an object-oriented knowledge-representation language that is well suited for conceptual modeling, is introduced. Some examples of the application and integration of informal, semi\u00a0\u2026", "num_citations": "1\n", "authors": ["370"]}
{"title": "Integrating the components of an intelligent telecom design tool into an agent-based framework\n", "abstract": " This paper describes the integration of a telecommunications design tool with an agent-based messaging framework. The design tool is broken down into two major components, which are modified to conform to the agent paradigm, and placed within the framework. This brings several benefits including the possibility of other agent-based applications being able to take advantage of the design tool components, the relatively easy extension of the design tool to be a multiuser, multi-server system, and the ease in which the design tool can be extended with new components.", "num_citations": "1\n", "authors": ["370"]}