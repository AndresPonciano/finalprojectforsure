{"title": "Fast and accurate business process drift detection\n", "abstract": " Business processes are prone to continuous and unexpected changes. Process workers may start executing a process differently in order to adjust to changes in workload, season, guidelines or regulations for example. Early detection of business process changes based on their event logs \u2013 also known as business process drift detection \u2013 enables analysts to identify and act upon changes that may otherwise affect process performance. Previous methods for business process drift detection are based on an exploration of a potentially large feature space and in some cases they require users to manually identify the specific features that characterize the drift. Depending on the explored feature set, these methods may miss certain types of changes. This paper proposes a fully automated and statistically grounded method for detecting process drift. The core idea is to perform statistical tests over the\u00a0\u2026", "num_citations": "70\n", "authors": ["1092"]}
{"title": "Detecting sudden and gradual drifts in business processes from execution traces\n", "abstract": " Business processes are prone to unexpected changes, as process workers may suddenly or gradually start executing a process differently in order to adjust to changes in workload, season, or other external factors. Early detection of business process changes enables managers to identify and act upon changes that may otherwise affect process performance. Business process drift detection refers to a family of methods to detect changes in a business process by analyzing event logs extracted from the systems that support the execution of the process. Existing methods for business process drift detection are based on an explorative analysis of a potentially large feature space and in some cases they require users to manually identify specific features that characterize the drift. Depending on the explored feature space, these methods miss various types of changes. Moreover, they are either designed to detect\u00a0\u2026", "num_citations": "51\n", "authors": ["1092"]}
{"title": "Detecting drift from event streams of unpredictable business processes\n", "abstract": " Existing business process drift detection methods do not work with event streams. As such, they are designed to detect inter-trace drifts only, i.e. drifts that occur between complete process executions (traces), as recorded in event logs. However, process drift may also occur during the execution of a process, and may impact ongoing executions. Existing methods either do not detect such intra-trace drifts, or detect them with a long delay. Moreover, they do not perform well with unpredictable processes, i.e. processes whose logs exhibit a high number of distinct executions to the total number of executions. We address these two issues by proposing a fully automated and scalable method for online detection of process drift from event streams. We perform statistical tests over distributions of behavioral relations between events, as observed in two adjacent windows of adaptive size, sliding along with the\u00a0\u2026", "num_citations": "37\n", "authors": ["1092"]}
{"title": "Optimal resource provisioning for scaling enterprise applications on the cloud\n", "abstract": " Over the past years organizations have been moving their enterprise applications to the cloud to take advantage of cloud's utility computing and elasticity. However, in enterprise applications or workflows, generally, different components/tasks will have different scaling requirements and finding an ideal deployment configuration and having the application to scale up and down based on the incoming requests is a difficult task. This paper presents a novel resource provisioning policy that can find the most cost optimal setup of variety of instances of cloud that can fulfill incoming workload. All major factors involved in resource amount estimation such as processing power, periodic cost and configuration cost of each instance type and capacity of clouds are considered in the model. Additionally, the model takes lifetime of each running instance into account while trying to find the optimal setup. Benchmark experiments\u00a0\u2026", "num_citations": "35\n", "authors": ["1092"]}
{"title": "Filtering spurious events from event streams of business processes\n", "abstract": " Process mining aims at gaining insights into business processes by analysing event data recorded during process execution. The majority of existing process mining techniques works offline, i.e. using static, historical data stored in event logs. Recently, the notion of online process mining has emerged, whereby techniques are applied on live event streams, as process executions unfold. Analysing event streams allows us to gain instant insights into business processes. However, current techniques assume the input stream to be completely free of noise and other anomalous behaviours. Hence, applying these techniques to real data leads to results of inferior quality. In this paper, we propose an event processor that enables us to filter out spurious events from a live event stream. Our experiments show that we are able to effectively filter out spurious events from the input stream and, as such, enhance\u00a0\u2026", "num_citations": "22\n", "authors": ["1092"]}
{"title": "Robust drift characterization from event streams of business processes\n", "abstract": " Process workers may vary the normal execution of a business process to adjust to changes in their operational environment, e.g., changes in workload, season, or regulations. Changes may be simple, such as skipping an individual activity, or complex, such as replacing an entire procedure with another. Over time, these changes may negatively affect process performance; hence, it is important to identify and understand them early on. As such, a number of techniques have been developed to detect process drifts, i.e., statistically significant changes in process behavior, from process event logs (offline) or event streams (online). However, detecting a drift without characterizing it, i.e., without providing explanations on its nature, is not enough to help analysts understand and rectify root causes for process performance issues. Existing approaches for drift characterization are limited to simple changes that affect\u00a0\u2026", "num_citations": "20\n", "authors": ["1092"]}
{"title": "Characterizing drift from event streams of business processes\n", "abstract": " Early detection of business process drifts from event logs enables analysts to identify changes that may negatively affect process performance. However, detecting a process drift without characterizing its nature is not enough to support analysts in understanding and rectifying process performance issues. We propose a method to characterize process drifts from event streams, in terms of the behavioral relations that are modified by the drift. The method builds upon a technique for online drift detection, and relies on a statistical test to select the behavioral relations extracted from the stream that have the highest explanatory power. The selected relations are then mapped to typical change patterns to explain the detected drifts. An extensive evaluation on synthetic and real-life logs shows that our method is fast and accurate in characterizing process drifts, and performs significantly better than alternative\u00a0\u2026", "num_citations": "19\n", "authors": ["1092"]}
{"title": "Detection and removal of infrequent behavior from event streams of business processes\n", "abstract": " Process mining aims at gaining insights into business processes by analyzing the event data that is generated and recorded during process execution. The vast majority of existing process mining techniques works offline, i.e.\u00a0using static, historical data, stored in event logs. Recently, the notion of online process mining has emerged, in which techniques are applied on live event streams, i.e.\u00a0as the process executions unfold. Analyzing event streams allows us to gain instant insights into business processes. However, most online process mining techniques assume the input stream to be completely free of noise and other anomalous behavior. Hence, applying these techniques to real data leads to results of inferior quality. In this paper, we propose an event processor that enables us to filter out infrequent behavior from live event streams. Our experiments show that we are able to effectively filter out events from the\u00a0\u2026", "num_citations": "12\n", "authors": ["1092"]}
{"title": "Business process drift: Detection and characterization\n", "abstract": " This research contributes a set of techniques for the early detection and characterization of process drifts, i.e. statistically significant changes in the behavior of business operations, as recorded in transactional data. Early detection and subsequent characterization of process drifts allows organizations to take prompt remedial actions and avoid potential repercussions resulting from unplanned changes in the behavior of their operations.", "num_citations": "3\n", "authors": ["1092"]}
{"title": "Optimal cloud resource provisioning for auto-scaling enterprise applications\n", "abstract": " Auto-scaling enterprise/workflow systems on cloud needs to deal with both the scaling policy, which determines 'when to scale' and the resource provisioning policy, which determines 'how to scale'. This paper presents a novel resource provisioning policy that can find the most cost optimal setup of variety of instances of cloud that can fulfill incoming workload. All major factors involved in resource amount estimation such as processing power, periodic cost and configuration cost of each instance type, lifetime of each running instance and capacity of clouds are considered in the model. Benchmark experiments were conducted on Amazon cloud and were matched with Amazon AutoScale, using a real load trace and through two main control flow components of enterprise applications, AND and XOR. The experiments showed that the model is plausible for auto-scaling any web/services based enterprise workflow\u00a0\u2026", "num_citations": "3\n", "authors": ["1092"]}