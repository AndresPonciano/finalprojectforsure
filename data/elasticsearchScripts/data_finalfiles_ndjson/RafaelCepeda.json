{"title": "An approach to program comprehension through reverse engineering of complementary software views\n", "abstract": " This paper presents an approach to the reverse engineering of application dynamic models from Java programs. These models are represented through UML sequence diagrams reconstructed at varying levels of abstraction, ie class level and architectural level. The diagrams are associated with application use-case scenarios and are extracted in a reuse based software development environment, complementing the views already existent for an application. The main goal is to support program comprehension through complementary application views. In order to support the proposed approach, a set of tools is being developed.", "num_citations": "23\n", "authors": ["955"]}
{"title": "To lock, or not to lock: That is the question\n", "abstract": " Mechanisms to control concurrent access over project artefacts are needed to execute the software development process in an organized way. These mechanisms are implemented by concurrency control policies in version control systems that may inhibit (i.e. \u2018to lock\u2019) or allow (i.e., \u2018not to lock\u2019) parallel development. This work presents a novel approach named Orion that analyzes the project's historical changes and suggests the most appropriate concurrency control policy for each software element. This suggestion aims at minimizing conflict situations and thus improving the productivity of the development team. In addition, it identifies critical elements that do not work well with any of these policies and are candidates to refactoring. We evaluated Orion through two experimental studies and the results, which indicated it was effective, led us to a prototype implementation. Apart from the Orion approach this paper\u00a0\u2026", "num_citations": "21\n", "authors": ["955"]}
{"title": "EvolTrack: improving design evolution awareness in software development\n", "abstract": " Software differs from most manufactured products because it is intangible. This characteristic makes it difficult to detect, control, and understand how it evolves. This paper presents an approach based on software visualization that can detect and externalize design evolution made in a software project during its initial development or at any further phase. By using this approach, a developer can be aware of the current state of the software as a whole and can additionally verify if the current design, also called emerging design, is evolving according to the team expectations and leader guidance, preventing problems caused by misunderstandings of the expected software solution. The approach was evaluated with free/open source software (FOSS) projects. The results indicate that the approach behaves as expected when applied to real software development projects, with minor performance bottlenecks.", "num_citations": "20\n", "authors": ["955"]}
{"title": "Evoltrack: A plug-in-based infrastructure for visualizing software evolution\n", "abstract": " Researchers and practitioners have looked for technologies and methodologies to help monitoring and controlling software development. As software evolves and becomes more complex, it needs to deal with more complex and abundant data. This work provides an overview of EvolTrack, an infrastructure that exploits the Software Visualization discipline for supporting software evolution control and monitoring activities.", "num_citations": "9\n", "authors": ["955"]}
{"title": "How design style relates to the representational power of design outcomes\n", "abstract": " Our hypothesis in this paper is that the design style can relate to the representational power of the design outcomes. To study this hypothesis, we analyzed three professional design sessions showing people designing software with different strategies (ie, different design styles). We also analyzed the design outcomes provided by each strategy and the representational power of these design outcomes. Our results provide some evidence in terms of two metrics: innovation and coverage. Finally, we discuss some automation requirements for tools that can support the design process. One of the conclusions we extract from this study is that a unified method for designing software, one that combines tools and techniques found on an object-oriented design style with tools and techniques found on a", "num_citations": "3\n", "authors": ["955"]}
{"title": "Tracer e Phoenix: Ferramentas Integradas para a Engenharia Reversa de Modelos Din\u00e2micos de Java para UML\n", "abstract": " Este artigo apresenta um conjunto de ferramentas para apoiar a engenharia reversa de modelos din\u00e2micos a partir de programas em Java. Estes modelos s\u00e3o representados atrav\u00e9s de diagramas de seq\u00fc\u00eancia da UML, associados a casos de uso de aplica\u00e7\u00e3o e s\u00e3o extra\u00eddos em um ambiente de desenvolvimento de software. O n\u00edvel de abstra\u00e7\u00e3o e de profundidade de mensagens pode ser configurado pelo usu\u00e1rio e os modelos extra\u00eddos complementam vis\u00f5es de aplica\u00e7\u00e3o j\u00e1 dispon\u00edveis no ambiente. Desta forma, o principal objetivo do ferramental \u00e9 apoiar a compreens\u00e3o de programas atrav\u00e9s da extra\u00e7\u00e3o de vis\u00f5es configur\u00e1veis e complementares de software.", "num_citations": "3\n", "authors": ["955"]}
{"title": "Visualizando a Evolu\u00e7\u00e3o de Software com EvolTrack\n", "abstract": " A tecnologia de software est\u00e1 sendo utilizada cada vez mais em uma ampla variedade de \u00e1reas de aplica\u00e7\u00e3o, freq\u00fcentemente produzindo sistemas maiores em tamanho e complexidade. Adicionalmente, em fun\u00e7\u00e3o de sua ampla penetra\u00e7\u00e3o no cotidiano das pessoas, as atividades de manuten\u00e7\u00e3o e controle de evolu\u00e7\u00e3o de software tornam-se vitais para a difus\u00e3o e perman\u00eancia desta tecnologia. T\u00e9cnicas de visualiza\u00e7\u00e3o de software podem ser aplicadas com o objetivo de reduzir esta complexidade de entendimento. Neste contexto, a abordagem aqui proposta visa construir um mecanismo capaz de resgatar o ciclo de evolu\u00e7\u00e3o de um projeto de software e fornecer um meio de visualiza\u00e7\u00e3o para a hist\u00f3ria destas evolu\u00e7\u00f5es.", "num_citations": "1\n", "authors": ["955"]}