{"title": "Discrete time Markov chain families: modeling and verification of probabilistic software product lines\n", "abstract": " Software product line engineering (SPLE) enables systematic reuse in development of a family of related software systems by explicitly defining commonalities and variabilities among the individual products in the family. Nowadays, SPLE is used in a variety of complex domains such as avionics and automotive. As such domains include safety critical systems which exhibit probabilistic behavior, there is a major need for modeling and verification approaches dealing with probabilistic aspects of systems in the presence of variabilities. In this paper, we introduce a mathematical model, Discrete Time Markov Chain Family (DTMCF), which compactly represents the probabilistic behavior of all the products in the product line. We also provide a probabilistic model checking method to verify DTMCFs against Probabilistic Computation Tree Logic (PCTL) properties. This way, instead of verifying each product individually, the\u00a0\u2026", "num_citations": "20\n", "authors": ["2115"]}
{"title": "Modeling and verification of probabilistic actor systems using pRebeca\n", "abstract": " Quantitative verification has gained an increasing attention as a promising approach for analysis of systems in various domains, especially for distributed systems, where the uncertainties of the environment cause the system to exhibit probabilistic and nondeterministic behavior. In this paper, we introduce pRebeca, an extension to the high-level actor-based modeling language Rebeca, that is used to model distributed and reactive systems with probabilistic and nondeterministic nature. We propose a simple syntax suitable for describing different aspects of a probabilistic system behavior and provide a formal semantics based on Markov decision processes. To model check a pRebeca model, it is converted to a Markov decision process and verified using the PRISM model checker against PCTL properties. Using a couple of examples, we show how a probabilistic system can be expressed in pRebeca in a\u00a0\u2026", "num_citations": "15\n", "authors": ["2115"]}
{"title": "Modeling and Model-Based Testing of Software Product Lines\n", "abstract": " Software product line (SPL) engineering has become common practice for mass production and customization of variability intensive systems. A software product line comprises a family of software systems which share a managed core set of artifacts and also have a set of well-defined variabilities. The main idea in SPL engineering is to enable systematic reuse in different phases of software development to reduce cost and time to release. Model-Based Testing (MBT) is a technique that is widely used for quality assurance of software systems. In MBT, an abstract model, which captures the desired behavior of the system, is used to generate test cases. The test cases are executed against a real implementation of the system and the conformance between the implementation and the specification is checked by comparing the observed outputs with the ones prescribed by the model. Software product lines have been applied in a number of domains with mission critical systems. MBT is one of the techniques that has been used for analysis of such systems. As the number of products can be potentially large in an SPL, using conventional approaches for MBT of the products of an SPL individually can be very costly and time consuming. To tackle this problem, several approaches have been proposed in order to enable systematic reuse in different phases of the MBT process.An efficient modeling technique is the first step towards an efficient MBT technique for SPLs. So far, several formalisms have been proposed for modeling SPLs. In this thesis, we conduct a study on such modeling techniques, focusing on four fundamental formalisms, namely featured\u00a0\u2026", "num_citations": "1\n", "authors": ["2115"]}
{"title": "Expressive Power and Encoding of Transition System Models for Software Product Lines\n", "abstract": " Several formalisms have been proposed for modeling Software Product Lines (SPLs), such as Modal Transition Systems (MTSs) and their extensions, Feature Transition Systems (FTSs), and Product Line Transition Systems (PL-LTSs). In this talk, we review our past work on comparing the expressive power of these formalisms and providing encodings between them. Namely, we show that FTSs are strictly more expressive than MTSs and are exponentially more succinct than PL-LTS. As MTSs are well-studied and there are tools for analysis of such models, we move on to find a connection between FTSs and MTSs. To this end, we seek an encoding from FTSs into sets of MTSs, as FTSs are more expressive than individual MTSs. We present initial ideas on an encoding that preserves the behavior of FTS and results in a set of MTSs.", "num_citations": "1\n", "authors": ["2115"]}
{"title": "Test Models and Algorithms for Model-Based Testing of Software Product Lines\n", "abstract": " Software product line (SPL) engineering has become common practice for mass production and customization of software. A software product line comprises a family of software systems which share a managed core set of artifacts. There are also a set of well-defined variabilities between the products of a product line. The main idea in SPL engineering is to enable systematic reuse in different phases of software development to reduce cost and time to release. Model-Based Testing (MBT) is a technique that is widely used for checking the quality of software systems. In MBT, test cases are generated from an abstract model, which captures the desired behavior of the system. Then, the test cases are executed against a real implementation of the system and the compliance of the implementation to the specification is checked by comparing the observed outputs with the ones prescribed by the model. Software product lines have been applied in many domains in which systems are mission critical and MBT is one of the techniques that is widely used for quality assurance of such systems. As the number of products can be potentially large in an SPL, using conventional approaches for MBT of the products of an SPL individually and as single systems can be very costly and time consuming. Hence, several approaches have been proposed in order to enable systematic reuse in different phases of the MBT process. An efficient modeling technique is the first step towards an efficient MBT technique for SPLs. There have been several formalisms proposed for modeling SPLs. In this thesis, we conduct a study on such modeling techniques, focusing on three\u00a0\u2026", "num_citations": "1\n", "authors": ["2115"]}
{"title": "Model Checking of Software Product Lines in Presence of Nondeterminism and Probabilities\n", "abstract": " Nowadays, Software Product Lines (SPLs) are being used in a variety of domains including safety-critical systems for which verification of the systems is a matter of concern. Formal modeling and verification of SPLs has been majorly investigated recently. Due to the potential large number of the products in a SPL, individual verification of all products could be costly or even impractical. Hence, there is a need for verification methods that can verify the whole family's behavior at once. In this paper, we focus on the probabilistic model checking of software product lines in which the behavior of individual products can be described in terms of Markov decision processes. We introduce a mathematical model, Markov Decision Process Family (MDPF), to compactly represent the behavior of the whole family. We also provide a model checking algorithm in order to verify MDPFs against properties expressed in probabilistic\u00a0\u2026", "num_citations": "1\n", "authors": ["2115"]}