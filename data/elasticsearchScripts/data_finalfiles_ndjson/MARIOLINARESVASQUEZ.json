{"title": "License usage and changes: A largescale study of java projects on github\n", "abstract": " Software licenses determine, from a legal point of view, under which conditions software can be integrated, used, and above all, redistributed. Licenses evolve over time to meet the needs of development communities and to cope with emerging legal issues and new development paradigms. Such evolution of licenses is likely to be accompanied by changes in the way how software uses such licenses, resulting in some licenses being adopted while others are abandoned. This paper reports a large empirical study aimed at quantitatively and qualitatively investigating when and why developer change software licenses. Specifically, we first identify licenses' changes in 1,731,828 commits, representing the entire history of 16,221 Java projects hosted on GitHub. Then, to understand the rationale of license changes, we perform a qualitative analysis - following a grounded theory approach - of commit notes and issue\u00a0\u2026", "num_citations": "47\n", "authors": ["195"]}
{"title": "License usage and changes: a large-scale study on gitHub.\n", "abstract": " Open source software licenses determine, from a legal point of view, under which conditions software can be integrated and redistributed. The reason why developers of a project adopt (or change) a license may depend on various factors, e.g., the need for ensuring compatibility with certain third-party components, the perspective towards redistribution or commercialization of the software, or the need for protecting against somebody else\u2019s commercial usage of the software. This paper reports a large empirical study aimed at quantitatively and qualitatively investigating when and why developers adopt or change software licenses. Specifically, we first identify license changes in 1,731,828 commits, representing the entire history of 16,221 Java projects hosted on GitHub. Then, to understand the rationale of license changes, we perform a qualitative analysis on 1,160 projects written in seven different\u00a0\u2026", "num_citations": "30\n", "authors": ["195"]}
{"title": "Supporting Evolution and Maintenance of Android Apps\n", "abstract": " In recent years, the market of mobile software applications (apps) has maintained an impressive upward trajectory. As of today, the market for such devices features over 850K+ apps for Android, and 19 versions of the Android API have been released in 4 years. There is evidence that Android apps are highly dependent on the underlying APIs, and APIs instability (change proneness) and fault-proneness are a threat to the success of those apps. Therefore, the goal of this research is to create an approach that helps developers of Android apps to be better prepared for Android platform updates as well as the updates from third-party libraries that can potentially (and inadvertently) impact their apps with breaking changes and bugs. Thus, we hypothesize that the proposed approach will help developers not only deal with platform and library updates opportunely, but also keep (and increase) the user base by avoiding\u00a0\u2026", "num_citations": "25\n", "authors": ["195"]}
{"title": "Enabling testing of android apps\n", "abstract": " Existing approaches for automated testing of An- droid apps are designed to achieve different goals and exhibit some pros and cons that should be carefully considered by developers and testers. For instance, random testing (RT) provides a high ratio of infeasible inputs or events, and test cases generated with RT and systematic exploration-based testing (SEBT) are not representative of natural (i.e., real) application usage scenarios. In addition, collecting test scripts for automated testing is expensive. We address limitations of existing tools for GUI-based testing of Android apps in a novel hybrid approach called T+. Our approach is based on a novel framework, which is aimed at generating actionable test cases for different testing goals. The framework also enables GUI-based testing without expensive test scripts collection for the stakeholders.", "num_citations": "24\n", "authors": ["195"]}
{"title": "A model for measuring agility in small and medium software development enterprises\n", "abstract": " The worldwide acceptance of software as an important aspect in daily life, and the continued growth of the software development industry, have influenced the creation of new companies (small and medium size) during the last decade. The rapid pace with which the companies are founded makes them to experiment some drawbacks such as informality in the software development process, and technological deficiencies. Software development companies have found in agile methodologies a possible solution for improving their practices and processes. However, transition to agile methods is not a simple task, and the transition process should be assessed in order to know whether it is helping the company to become agile. Thus, in this paper we propose a model which could be used for measuring companies agility in four different levels: project, project management, workteam, and agile workspace coverage\u00a0\u2026", "num_citations": "24\n", "authors": ["195"]}
{"title": "How Do Developers Document Database Usages in Source Code?\n", "abstract": " Database-centric applications (DCAs) usually contain a large number of tables, attributes, and constraints describing the underlying data model. Understanding how database tables and attributes are used in the source code along with the constraints related to these usages is an important component of DCA maintenance. However, documenting database-related operations and their constraints in the source code is neither easy nor common in practice. In this paper, we present a two-fold empirical study aimed at identifying how developers document database usages at source code method level. In particular, (i) we surveyed open source developers to understand their practices on documenting database usages in source code, and (ii) we mined a large set of open source projects to measure to what extent database-related methods are commented and if these comments are updated during evolution. Although\u00a0\u2026", "num_citations": "22\n", "authors": ["195"]}
{"title": "Automated Tagging of Software Projects using Bytecode and Dependencies\n", "abstract": " Several open and closed source repositories group software systems and libraries to allow members of particular organizations or the open source community to take advantage of them. However, to make this possible, it is necessary to have effective ways of searching and browsing the repositories. Software tagging is the process of assigning terms (i.e., tags or labels) to software assets in order to describe features and internal details, making the task of understanding software easier and potentially browsing and searching through a repository more effective. We present Sally, an automatic software tagging approach that is able to produce meaningful tags for Maven-based software projects by analyzing their bytecode and dependency relations without any special requirements from developers. We compared tags generated by Sally to the ones in two widely used online repositories, and the tags generated by a\u00a0\u2026", "num_citations": "19\n", "authors": ["195"]}
{"title": "Mutode: generic JavaScript and Node. js mutation testing tool\n", "abstract": " Mutation testing is a technique in which faults (mutants) are injected into a program or application to assess its test suite effectiveness. It works by inserting mutants and running the application\u2019s test suite to identify if the mutants are detected (killed) or not (survived) by the tests. Although computationally expensive, it has proven to be an effective method to assess application test suites. Several mutation testing frameworks and tools have been built for the various programing languages, however, very few tools have been built for the JavaScript language, more specifically, there is a lack of mutation testing tools for the Node. js runtime and npm based applications. The npm Registry is a public collection of modules of open-source code for Node. js, front-end web applications, mobile applications, robots, routers, and countless other needs of the JavaScript community. The over 700,000 packages hosted in npm are\u00a0\u2026", "num_citations": "10\n", "authors": ["195"]}
{"title": "Urban Transformations and Health: Methods for TrUST\u2014a Natural Experiment Evaluating the Impacts of a Mass Transit Cable Car in Bogot\u00e1, Colombia\n", "abstract": " Background: Cable cars provide urban mobility benefits for vulnerable populations. However, no evaluation has assessed cable cars' impact from a health perspective. TransMiCable in Bogot\u00e1, Colombia, provides a unique opportunity to 1) assess the effects of its implementation on the environmental and social determinants of health (microenvironment pollution, transport accessibility, physical environment, employment, social capital, and leisure time), physical activity, and health outcomes (health-related quality of life, respiratory diseases, and homicides); and 2) use citizen science methods to identify, prioritize, and communicate the most salient negative and positive features impacting health and quality of life in TransMiCable\u2019s area, as well as facilitate a consensus and advocacy-building change process among community members, policymakers, and academic researchers. Methods: TrUST (In Spanish: Transformaciones Urbanas y Salud: el caso de TransMiCable en Bogot\u00e1) is a quasi-experimental study using a mixed-methods approach. The intervention group includes adults from Ciudad Bol\u00edvar, the area of influence of TransMiCable. The control group includes adults from San Crist\u00f3bal, an area of future expansion for TransMiCable. A conceptual framework was developed through group-model building. Outcomes related to environmental and social determinants of health as well as health outcomes are assessed using questionnaires (health outcomes, physical activity, and perceptions), secondary data (crime and respiratory outcomes) use of portable devices (air pollution exposure and accelerometry), mobility tracking apps (for\u00a0\u2026", "num_citations": "9\n", "authors": ["195"]}
{"title": "Automated Extraction of Augmented Models for Android Apps\n", "abstract": " Mobile software development involves significant challenges to developers such as device fragmentation (i.e., enormous hardware and software diversity), event-driven programming (i.e., programming based on user interactions, sensor readings and other events where the program must react) and continuous evolving platforms (i.e., fast changing mobile frameworks and technologies). This can lead programmers to error-prone code, because of the multiple combinations of external variables that must be taken into account in an app development process. Thus, testing is an underlying necessity in mobile applications to deliver high quality apps. However, defining tests suites for app development is a difficult task that requires a lot of effort, because it must consider all the possible states of an app, its context (e.g., device in which is running, sensors, touch gestures, screen proportions, connectivity), and a large\u00a0\u2026", "num_citations": "8\n", "authors": ["195"]}
{"title": "MutAPK: Source-Codeless Mutant Generation for Android Apps\n", "abstract": " The amount of Android application is having a tremendous increasing trend, exerting pressure over practitioners and researchers around application quality, frequent releases, and quick fixing of bugs. This pressure leads practitioners to make usage of automated approaches based on using source-code as input. Nevertheless, third-party services are not able to use these approaches due to privacy factors. In this paper we present MutAPK, an open source mutation testing tool that enables the usage of APK as input for this task. MutAPK generates mutants without the need of having access to source code, because the mutations are done in an intermediate representation of the code (i.e., SMALI) that does not require compilation. MutAPK is publicly available at GitHub: https://bit.ly/2KYvgP9 VIDEO: https://bit.ly/2WOjiyy.", "num_citations": "4\n", "authors": ["195"]}
{"title": "Exploiting stock data: a survey of state of the art computational techniques aimed at producing beliefs regarding investment portfolios\n", "abstract": " LINARES VASQUEZ, Mario; HERNANDEZ LOSADA, Diego Fernando and GONZALEZ OSORIO, Fabio. Exploiting stock data: a survey of state of the art computational techniques aimed at producing beliefs regarding investment portfolios. Ing. Investig.[online]. 2008, vol. 28, n. 1, pp. 105-116. ISSN 0120-5609.", "num_citations": "4\n", "authors": ["195"]}
{"title": "Mining candlesticks patterns on stock series: A fuzzy logic approach\n", "abstract": " Candlesticks is a technique used in financial time series in order to forecast future market performance. With candlesticks patterns, traders build active trading strategies in order to buy, sell or hold securities. The process is based on a preliminary stage which consists in identifying individual basic shapes on time series. Identifying candlesticks basic shapes is easy for a human, but recognizing complex patterns is hard because a lot of data is available. In this paper a data mining model for building active trading strategies (using candlesticks assumptions) is proposed looking for frequent itemsets on symbolic stocks series. Model validation is achieved with real data from New York Stock Exchange.", "num_citations": "3\n", "authors": ["195"]}
{"title": "An Empirical Study of i18n Collateral Changes and Bugs in GUIs of Android apps\n", "abstract": " Mobile markets allow developers to easily distribute mobile apps worldwide and collect complaints and feature requests in the form of user reviews and star ratings. Therefore, internationalization (i18n) of apps is a highly desired feature, which is currently supported in mobile platforms by using resources flies with strings that can be internationalized manually. This manual translation can be a time consuming and error-prone task when the app is targeted for different languages and the amount of strings to be internationalized is large. Moreover, the lack of consideration of the impact of internationalized, strings can drive to collateral (i.e., unexpected) changes and bugs in the GUI layout of apps.In this paper, we present an empirical study on how i18n can impact the GUIs of Android apps. In particular, we investigated the changes, bugs and bad practices related to GUIs when strings of a given default language (i.e\u00a0\u2026", "num_citations": "2\n", "authors": ["195"]}
{"title": "Requirements Comprehension Using BPMN: An Empirical Study\n", "abstract": " The Business Process Model and Notation (BPMN) has become the de facto standard for process modeling. Currently, BPMN models can be (a) analyzed or simulated using specialized tools, (b) executed using business process management systems (BPMSs), or (c) used for requirements elicitation. Although there are many studies comparing BPMN to other modeling techniques for analyzing and executing processes, there are few showing the suitability of BPMN models as a source for requirements comprehension in projects where process-aware software is built without using BPMSs. This chapter presents a study aimed at comparing the comprehension of software requirements regarding a business process using either BPMN or traditional techniques, such as use cases. In our study, we analyzed responses of 120 undergraduate and graduate students regarding the requirements comprehension\u00a0\u2026", "num_citations": "2\n", "authors": ["195"]}
{"title": "Shallow or Deep? An Empirical Study on Detecting Vulnerabilities using Deep Learning\n", "abstract": " Deep learning (DL) techniques are on the rise in the software engineering research community. More and more approaches have been developed on top of DL models, also due to the unprecedented amount of software-related data that can be used to train these models. One of the recent applications of DL in the software engineering domain concerns the automatic detection of software vulnerabilities. While several DL models have been developed to approach this problem, there is still limited empirical evidence concerning their actual effectiveness especially when compared with shallow machine learning techniques. In this paper, we partially fill this gap by presenting a large-scale empirical study using three vulnerability datasets and five different source code representations (i.e., the format in which the code is provided to the classifiers to assess whether it is vulnerable or not) to compare the effectiveness of two widely used DL-based models and of one shallow machine learning model in (i) classifying code functions as vulnerable or non-vulnerable (i.e., binary classification), and (ii) classifying code functions based on the specific type of vulnerability they contain (or \"clean\", if no vulnerability is there). As a baseline we include in our study the AutoML utility provided by the Google Cloud Platform. Our results show that the experimented models are still far from ensuring reliable vulnerability detection, and that a shallow learning classifier represents a competitive baseline for the newest DL-based models.", "num_citations": "1\n", "authors": ["195"]}
{"title": "MutAPK 2.0: A Tool for Reducing Mutation Testing Effort of Android Apps\n", "abstract": " Mutation testing is a time consuming process because large sets of fault-injected-versions of an original app are generated and executed with the purpose of evaluating the quality of a given test suite. In the case of Android apps, recent studies even suggest that mutant generation and mutation testing effort could be greater when the mutants are generated at the APK level. To reduce that effort, useless (eg, equivalent) mutants should be avoided and mutant selection techniques could be used to reduce the set of mutants used with mutation testing. However, despite the existence of mutation testing tools, none of those tools provides features for removing useless mutants and sampling mutant sets. In this paper, we present MutAPK 2.0, an improved version of our open source mutant generation tool (MutAPK) for Android apps at APK level. To the best of our knowledge, MutAPK 2.0 is the first tool that enables the\u00a0\u2026", "num_citations": "1\n", "authors": ["195"]}
{"title": "Does Neuron Coverage Matter for Deep Reinforcement Learning? A Preliminary Study\n", "abstract": " Deep Learning (DL) is powerful family of algorithms used for a wide variety of problems and systems, including safety critical systems. As a consequence, analyzing, understanding, and testing DL models is attracting more practitioners and researchers with the purpose of implementing DL systems that are robust, reliable, efficient, and accurate. First software testing approaches for DL systems have focused on black-box testing, white-box testing, and test cases generation, in particular for deep neural networks (CNNs and RNNs). However, Deep Reinforcement Learning (DRL), which is a branch of DL extending reinforcement learning, is still out of the scope of research providing testing techniques for DL systems. In this paper, we present a first step towards testing of DRL systems. In particular, we investigate whether neuron coverage (a widely used metric for white-box testing of DNNs) could be used also for DRL\u00a0\u2026", "num_citations": "1\n", "authors": ["195"]}
{"title": "Kraken-Mobile: Cross-Device Interaction-based Testing of Android Apps\n", "abstract": " Mobile applications that involve the interaction of two or more users are becoming more common nowadays, and the demand of good performance and availability by their users is increasing. This makes testing and automation of processes essential for delivering high-quality cross-device apps. In this paper, we present Kraken, a cross-device testing tool that enables a tester to write, run, and validate test scenarios that involve the interaction of more than two devices as well as its underlying implementation. The proposed tool uses APKs as input along with tests scripts wrote using the Gherkin syntax. Kraken is publicly available on GitHub https://thesoftwaredesignlab.github.io/KrakenMobile/ Videos: https://www.youtube.com/playlist?list=PLF5U8kfVgRcJ3RCHt7cWmwlqN93brbVW-", "num_citations": "1\n", "authors": ["195"]}