{"title": "Recommended steps for thematic synthesis in software engineering\n", "abstract": " Thematic analysis is an approach that is often used for identifying, analyzing, and reporting patterns (themes) within data in primary qualitative research. 'Thematic synthesis' draws on the principles of thematic analysis and identifies the recurring themes or issues from multiple studies, interprets and explains these themes, and draws conclusions in systematic reviews. This paper conceptualizes the thematic synthesis approach in software engineering as a scientific inquiry involving five steps that parallel those of primary research. The process and outcome associated with each step are described and illustrated with examples from systematic reviews in software engineering.", "num_citations": "615\n", "authors": ["149"]}
{"title": "An empirical investigation of the key factors for success in software process improvement\n", "abstract": " Understanding how to implement software process improvement (SPI) successfully is arguably the most challenging issue facing the SPI field today. The SPI literature contains many case studies of successful companies and descriptions of their SPI programs. However, the research efforts to date are limited and inconclusive and without adequate theoretical and psychometric justification. This paper extends and integrates models from prior research by performing an empirical investigation of the key factors for success in SPI. A quantitative survey of 120 software organizations was designed to test the conceptual model and hypotheses of the study. The results indicate that success depends critically on six organizational factors, which explained more than 50 percent of the variance in the outcome variable. The main contribution of the paper is to increase the understanding of the influence of organizational issues\u00a0\u2026", "num_citations": "382\n", "authors": ["149"]}
{"title": "Research synthesis in software engineering: A tertiary study\n", "abstract": " ContextComparing and contrasting evidence from multiple studies is necessary to build knowledge and reach conclusions about the empirical support for a phenomenon. Therefore, research synthesis is at the center of the scientific enterprise in the software engineering discipline.ObjectiveThe objective of this article is to contribute to a better understanding of the challenges in synthesizing software engineering research and their implications for the progress of research and practice.MethodA tertiary study of journal articles and full proceedings papers from the inception of evidence-based software engineering was performed to assess the types and methods of research synthesis in systematic reviews in software engineering.ResultsAs many as half of the 49 reviews included in the study did not contain any synthesis. Of the studies that did contain synthesis, two thirds performed a narrative or a thematic synthesis\u00a0\u2026", "num_citations": "321\n", "authors": ["149"]}
{"title": "An instrument for measuring the key factors of success in software process improvement\n", "abstract": " Understandinghow to implement SPI successfully is arguably the most challengingissue facing the SPI field today. The SPI literature containsmany case studies of successful companies and descriptions oftheir SPI programs. However, there has been no systematic attemptto synthesize and organize the prescriptions offered. The researchefforts to date are limited and inconclusive and without adequatetheoretical and psychometric justification.               This paper provides a synthesis of prescriptions for successfulquality management and process improvement found from an extensivereview of the quality management, organizational learning, andsoftware process improvement literature. The literature reviewwas confirmed by empirical studies among both researchers andpractitioners. The main result is an instrument for measuringthe key factors of success in SPI based on data collected from120 software\u00a0\u2026", "num_citations": "279\n", "authors": ["149"]}
{"title": "Improvisation in small software organizations\n", "abstract": " Traditional ways of developing software and improving the software process rely on theories that assume that the environment is predictable. However, for most small software organizations the environment is constantly changing and often unpredictable. The author explores improvisation and its role in smaller companies.", "num_citations": "223\n", "authors": ["149"]}
{"title": "Factors of software process improvement success in small and large organizations: an empirical study in the scandinavian context\n", "abstract": " Existing software engineering and organization development literature acknowledges that there are fundamental operational differences between small and large organizations. Despite this recognition, there has been no attempt to verify whether small and large software organizations implement software process improvement (SPI) programs differently in order to advance their businesses.This study examines whether an organization's size affects its SPI implementation strategy and the degree of SPI success. Based on an extensive literature review of critical factors of quality management, organizational learning, and SPI, a survey questionnaire was developed and data on the implementation of six organizational factors and the resulting organizational performance was collected through a mail survey of 120 software organizations. The findings show that small organizations reported that they implement SPI\u00a0\u2026", "num_citations": "174\n", "authors": ["149"]}
{"title": "Enabling software process improvement: an investigation of the importance of organizational issues\n", "abstract": " This doctoral study was initiated to explore the relative importance of organizational issues in software process improvement. It is based on a pilot case study, a multiple case study of twelve organizations, and a quantitative survey among 120 software organizations. The findings from the investigations suggest that the key to successful learning is a continuous and simultaneous dialectic interplay between the knowledge that the organization has established over time, and the knowing of the organization's members in their respective contexts. Also, the findings indicate that success depends critically on six organizational factors. Finally, the findings show that there are important differences between small and large software organizations, specifically in the ways in which they react to unstable and changing stimulus situations.", "num_citations": "86\n", "authors": ["149"]}
{"title": "Theoretical foundations of software ecosystems.\n", "abstract": " Software ecosystems have become a defined and active field of research based on the recent emergence of new open business models leading to new roles and patterns for collaboration, innovation, and value proposition. In this paper we look into the theoretical foundations of this new research field. We review recent publications to describe the present theorization; we discuss the relevance of theory and, in particular, we argue for the relevance of sociotechnical theory and the related theory of organizational ecology in the continuing research on software ecosystems. To summarize we define a preliminary theoretical framework to guide and support future research.", "num_citations": "85\n", "authors": ["149"]}
{"title": "An initial framework for research on pair programming\n", "abstract": " In recent years, several claims have been put forward in favour of pair programming, as opposed to individual programming. However, results from existing studies on pair programming contain apparent contradictions. The differences in the context in which the studies were conducted may be one explanation for such results. The paper presents an initial framework for research on pair programming. The aim is to support empirical studies and meta-analysis for developing theories about pair programming. The framework is based on: (1) existing studies on pair programming, (2) ongoing studies by the authors, and (3) theories from group dynamics.", "num_citations": "85\n", "authors": ["149"]}
{"title": "Synthesizing evidence in software engineering research\n", "abstract": " Synthesizing the evidence from a set of studies that spans many countries and years, and that incorporates a wide variety of research methods and theoretical perspectives, is probably the single most challenging task of performing a systematic review. In this paper, we perform a tertiary review to assess the types and methods of research synthesis in systematic reviews in software engineering. Almost half of the 31 studies included in our review did not contain any synthesis; of the ones that did, two thirds performed a narrative or a thematic synthesis. The results show that, despite the focus on systematic reviews, there is, currently, limited attention to research synthesis in software engineering. This needs to change and a repertoire of synthesis methods needs to be an integral part of systematic reviews to increase their significance and utility for research and practice.", "num_citations": "81\n", "authors": ["149"]}
{"title": "An empirical study on the utility of formal routines to transfer knowledge and experience\n", "abstract": " Most quality and software process improvement frameworks emphasize written (ie formal) documentation to convey recommended work practices. However, there is considerable skepticism among developers to learn from and adhere to prescribed process models. The latter are often perceived as overly\" structured\" or implying too much\" control\". Further, what is relevant knowledge has often been decided by\" others\"---often the quality manager. The study was carried out in the context of a national software process improvement program in Norway for small-and medium-sized companies to assess the attitude to formalized knowledge and experience sources. The results show that developers are rather skeptical at using written routines, while quality and technical managers are taking this for granted. This is an explosive combination. The conclusion is that formal routines must be supplemented by collaborative\u00a0\u2026", "num_citations": "77\n", "authors": ["149"]}
{"title": "Challenges of applying ethnography to study software practices\n", "abstract": " Ethnography is about the adoption of a cultural lens to observe and interpret events, actions, and behaviors, ensuring that they are placed in a relevant and meaningful context. Using this approach, it is possible to capture and analyze software development practices. Our aims are to illustrate the use of an ethnographic approach in a case study of agile software development adoption, to discuss the methodological challenges involved, and to provide support to others who conduct ethnographic studies of software practice. An ethnographic case study was conducted, employing participant observation, interviews, and document analysis. Difficulties and decisions were recorded and compared with those encountered in the literature. Finally, key challenges and guidelines to tackle them were discussed and documented. We identified five key challenges of applying ethnography to the study of software practices: (a\u00a0\u2026", "num_citations": "36\n", "authors": ["149"]}
{"title": "Contextualizing empirical evidence\n", "abstract": " What works for whom, where, when, and why is the ultimate question of evidence-based software engineering. Still, the empirical research seems mostly concerned with identifying universal relationships that are independent of how work settings and other contexts interact with the processes important to software practice. Questions of \u201cWhat is best?\u201d seem to prevail. For example, \u201cWhich is better: pair or solo programming? test-first or test-last?\u201d However, just as the question of whether a helicopter is better than a bicycle is meaningless, so are these questions because the answers depend on the settings and goals of the projects studied. Practice settings are rarely, if ever, the same. For example, the environments of software organizations differ, as do their sizes, customer types, countries or geography, and history. All these factors influence engineering practices in unique ways. Additionally, the human factors\u00a0\u2026", "num_citations": "35\n", "authors": ["149"]}
{"title": "The reflective software engineer: reflective practice\n", "abstract": " The capacity to reflect on past practice is important for continuous learning in software development. Reflection often takes place in cycles of experience followed by conscious application of learning from that experience, during which a software developer might explore comparisons, ponder alternatives, take diverse perspectives, and draw inferences, especially in new and/or complex situations. Such reflective practice has been shown in different disciplines to be an effective developmental practice for organizations, for teams, and for individuals. The guest editors of this special issue on reflection describe the concept in general and the selected articles in particular.", "num_citations": "24\n", "authors": ["149"]}
{"title": "Flexibility in research designs in empirical software engineering\n", "abstract": " Problem outline:  It is common to classify empirical research designs as either  qualitative  or  quantitative . Typically, particular research methods (e.g., case studies, action research, experiments and surveys) are associated with one or the other of these types of design. Studies in empirical software engineering (ESE) are often exploratory and often involve software developers and development organizations. As a consequence, it may be difficult to plan all aspects of the studies, and to be successful, ESE studies must often be designed to handle possible changes during the conduct of the study. A problem with the above classification is that it does not cater for  flexibility  in design. Position:  This paper suggests viewing research in ESE along the axis of flexible and fixed designs, which is both orthogonal to the axis of quantitative and qualitative designs, and independent of the particular research method. According to the traditional view of ESE, changes to the research design in the course of a study are typically regarded as threats to the validity of the results. However, viewing the study designs as flexible, practical challenges can provide useful information. The validity of the results of studies with flexible research designs can be established by applying techniques that are traditionally used for qualitative designs. This paper urges an increased recognition of flexible designs in ESE and discusses techniques for establishing the trustworthiness in flexible designs.", "num_citations": "18\n", "authors": ["149"]}
{"title": "A dynamic model of software engineering knowledge creation\n", "abstract": " Software-intensive organizations that intend to excel in the twenty-first century must learn to manage change in dynamic situations. Rather than seeking stability, they should focus on creating software engineering knowledge and mind sets that embrace environmental change. The model developed in this chapter supports this shift by directing attention to the need for communication, coordination, and collaboration. The key to successful knowledge creation is continuous and simultaneous dialectic interplay between the knowledge that the organization has established over time, and the knowing of the organization\u2019s members in their respective contexts.", "num_citations": "15\n", "authors": ["149"]}
{"title": "Process research in requirements elicitation\n", "abstract": " Empirical research is starting to be more used in the area of requirements elicitation. It mostly focuses on the effects of techniques in the final product of the elicitation process in laboratory experiments. Our argument is that future advances in requirements elicitation practice are unlikely to come from such studies. Requirements elicitation research needs a deeper processual orientation, focusing on how and why the elicitation process unfolds in a particular direction. The research should be performed longitudinally in real contexts through different methods of data collection, investigating current and historical events from different perspectives.", "num_citations": "13\n", "authors": ["149"]}
{"title": "What's the Evidence for Lean?\n", "abstract": " A close look at the evidence underpinning the original concept of lean production and its popular interpretation reveals the inherent challenges of measuring and interpreting evidence for performance differences.", "num_citations": "8\n", "authors": ["149"]}
{"title": "Measurement-based software process improvement\n", "abstract": " With increasingly more of the functionality in today\u2019s telecommunication systems implemented in software, one of the most challenging tasks for PNOs is to assess the quality of the software in these systems and the capabilities of potential suppliers. In this article we describe the use of goal-oriented measurement and assessment as the basis for systematic quality improvements in software development, maintenance and acquisition.", "num_citations": "8\n", "authors": ["149"]}
{"title": "Editorial: Special Section on Best Papers from XP2010\n", "abstract": " Special Section on Best Papers from XP2010 \u00d7 Close The Infona portal uses cookies, ie strings of text saved by a browser on the user's device. The portal can access those files and use them to remember the user's data, such as their chosen settings (screen view, interface language, etc.), or their login data. By using the Infona portal the user accepts automatic saving and using this information for portal operation purposes. More information on the subject can be found in the Privacy Policy and Terms of Service. By closing this window the user confirms that they have read the information on cookie usage, and they accept the privacy policy and the way cookies are used by the portal. You can change the cookie settings in your browser. I accept Polski English Login or register account remember me Password recovery INFONA - science communication portal INFONA Search advanced search Browse series books \u00d7 on -\u2026", "num_citations": "6\n", "authors": ["149"]}
{"title": "Experience of Goal-Oriented Measurement using ami and GQM\n", "abstract": " In this paper, we describe the experiences so far on the application of goal-oriented measurement using ami and GQM as the basis for systematic quality improvements in telecommunications software development within Nera. These experiences are the initial results of the TELMET (ESSI 21780) project. This project is a Process Improvement Experiment (PIE) supported by the European Systems and Software Initiative (ESSI) program.", "num_citations": "3\n", "authors": ["149"]}