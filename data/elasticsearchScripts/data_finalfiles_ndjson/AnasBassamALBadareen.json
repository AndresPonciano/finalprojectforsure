{"title": "Software quality models: A comparative study\n", "abstract": " In last decade, researchers have often tried to improve the usability, portability, integrity and other aspects of software in order for it to be more users friendly and gain user trust. Several approaches and techniques have been proposed to reduce the negative effects of software size and complexity. Moreover, several software quality models were proposed to evaluate general and specific type of software products. These models were proposed to evaluate general or specific scopes of software products. The proposed models were developed based on comparisons between the well-known models, in order to customize the closed model to the intended scope. These comparisons are leak of criteria that is conducted based on different perspectives and understanding. Therefore, a formal method of comparison between software quality models is proposed. The proposed method is applied on a comprehensive\u00a0\u2026", "num_citations": "66\n", "authors": ["2004"]}
{"title": "Hybrid elitist-ant system for nurse-rostering problem\n", "abstract": " The diversity and quality of high-quality and diverse-solution external memory of the hybrid Elitist-Ant System is examined in this study. The Elitist-Ant System incorporates an external memory for preserving search diversity while exploiting the solution space. Using this procedure, the effectiveness and efficiency of the search may be guaranteed which could consequently improve the performance of the algorithm and it could be well generalized across diverse problems of combinatorial optimization. The generality of this algorithm through its consistency and efficiency is tested using a Nurse-Rostering Problem. The outcomes demonstrate the competitiveness of the hybrid Elitist-Ant System\u2019s performance within numerous datasets as opposed to those by other systems. The effectiveness of the external memory usage in search diversification is evidenced in this work. Subsequently, such usage improves the\u00a0\u2026", "num_citations": "46\n", "authors": ["2004"]}
{"title": "Software Quality Evaluation: User\u2019s View\n", "abstract": " Nowadays, software products rapidly increased and it is usage not limited to specific people or corporation. It is now used in the most of human life activities. Therefore, the quality of the software product is increasingly being important and the users demanding higher quality than ever before. However, most of this research is focused on the internal/development view of quality. Hence, in software development, strong attention must be given to the user\u2019s satisfaction. Recently, the studies intend to understand the users\u2019 perspective of the software quality. In this study, we intend to discuss the characteristics of the software products that influence the users\u2019 satisfaction on software quality. Based on the well-known software quality models and the emotion of the software users, a model of software quality evaluation based on users\u2019 views is proposed.", "num_citations": "18\n", "authors": ["2004"]}
{"title": "Reusable software components framework\n", "abstract": " The concept of reusability is widely used, in order to reduce cost, effort, and time of software development. Reusability also increases the productivity, maintainability, portability, and reliability of the software products, which it has been evaluated before in other software products. The problems faced in software engineering not a lack of reuse, but a lack of widespread, systematic reuse. They know how to do it, but they do it informally. Therefore, strong attention must be given to this concept. This study aims to propose a systematic way of software reuse: build-for-reuse and buildby-reuse. The evaluation criteria of the reusable components are then adopted. Finally, the proposed framework is applied on C-Registration System.", "num_citations": "18\n", "authors": ["2004"]}
{"title": "A Review on Clinical Decision Support Systems in Healthcare\n", "abstract": " Expert systems are widely used in healthcare for predicting and diagnosing diseases. Several efforts have been made to help diagnose diseases, and to identify their codes, signs and symptoms. However, abnormal findings, social circumstances and external causes of diseases in the psychological arena are a huge burden of illness in the community and still a complicated task. Several intelligent techniques based on different rules are used in developing CDSS. Therefore, further investigation on the current state of the field is required, in order to identify the related issues and the future directions. This study intends to analyze the current state of the expert systems' development for psychodiagnostics. That provides a comprehensive background of the available methods, techniques and issues related to CDSS.[PUBLICATION ABSTRACT]", "num_citations": "17\n", "authors": ["2004"]}
{"title": "The impact of software quality on maintenance process\n", "abstract": " The software is always required to be developed and maintained a quality to the rapid progresses in industry, technology, economy, and other fields. Software maintenance is considered as one of the main issues in software development life cycle that is required efforts and resources more than other phase. Studies estimated that the cost of software maintenance rapidly increased that reached the 90% of the total cost of software development life cycle. Therefore, it is considered as an economic impact in information system community. Several researches are intended to estimate and reduce the cost of this task.This study introduces a model of software maintenance process that emphasizes the impact of the software quality on the maintenance process. The study presents the process of the software maintenance, and then discussed the quality characteristics that affect these tasks. Furthermore, the evaluation criteria for these factors are discussed.", "num_citations": "14\n", "authors": ["2004"]}
{"title": "Antipatterns detection approaches in Object-Oriented Design: A literature review\n", "abstract": " Pattern is one of the most simple and powerful techniques to improve the design, and consequently enhance the maintainability, reusability, and reverse engineering. Design pattern detection is a useful technique for gaining knowledge on the design issues of existing systems and improves the system's comprehension, which consequently enhance the software maintainability and evolution. Numerous studies have been conducted and many tools have been developed to detect design patterns, whereas only few studies considered the antipattern, which has not been investigated with the same extent of patterns detection. This study presents the antipatterns of object oriented design, their definitions, detecting approaches and issues related to their detection. That provides a clear state of the antipatterns detection and its issues that need to be addressed in the future. The result indicates that the antipatterns\u00a0\u2026", "num_citations": "12\n", "authors": ["2004"]}
{"title": "Users\u2019 perspective of software quality\n", "abstract": " In last decade, software engineering research increasingly focused on software quality enhancement and evaluation, whereas most of these researches concentrate on the internal/development perspective. However, users mainly care in the quality of performs intended functions efficiently without knowing how the software product was developed, how it is work from inside, or it is internal quality. The success of software companies is completely depends on the users\u2019 satisfaction, which they decide to use a software product or not. Therefore, in software development, strong attention must be given to the user\u2019s satisfaction. This study aims to present the quality of the software products from user\u2019s perspective. From user\u2019s viewpoint, the characteristics of the software product are discussed. Finally, a user\u2019s perspective quality model is proposed.", "num_citations": "9\n", "authors": ["2004"]}
{"title": "Investigating Software Maintainability Development: A case for ISO 9126\n", "abstract": " Software maintainability has been considered as a main characteristic in many software product quality models. However, these models have different definitions for maintainability and sub characteristics. ISO 9126 is one of the main and most frequently used models in software product quality. This model has been revised and replaced by ISO 25010 as a new model of software product quality. In addition to the many modifications that were performed on ISO 9126 model, maintainability was one of the main modified characteristics. However, it was developed unclearly without any standard base, and with no clear definition or evidence of how the sub characteristics were defined and modified. This paper investigates these modifications and the differences between the definitions of the maintainability in the two models, ISO 9126 and ISO 25010. As a result of this discussion, it has been concluded that both models ISO 9126 and ISO 25010 lack of a clear definition or standard base for defining software maintainability and its sub characteristics.", "num_citations": "7\n", "authors": ["2004"]}
{"title": "Software quality evaluation through maintenance processes\n", "abstract": " The software is always required to be developed and maintained a quality to the rapid progresses in industry, technology, economy, and other fields. Thus, software maintainability is the major activity in the software life cycle. This process bypass the cost required to develop new software product. However, software maintenance costs often total twice the original development cost in the lifetime of application software. Therefore, software maintainability is considered as one of the most important quality factor in software quality models. This study introduces a software maintenance process model that emphasizes the impact of the software quality on the maintenance and considers the quality of the modified software.", "num_citations": "7\n", "authors": ["2004"]}
{"title": "An evaluation model for software reuse processes\n", "abstract": " Software reuse is a major concern in many software development companies. It is one of the main strategies used to reduce the cost of software product development. Studies show that the reuse strategy is the most significant strategy in terms of effort and quality. That it could save the half of the software development effort and increase the quality of the software product. Different ways of software reuse are proposed and discussed. In this study, an evaluation model for software reuse is proposed. The model is developed in order to consider the new methods of software reuse. That developed based on the framework of develop a reusable software components through software development processes. The model is proposed in order to present the applicable methods of software reuse and to evaluate their cost.", "num_citations": "6\n", "authors": ["2004"]}
{"title": "IN THE PROCESS OF SOFTWARE DEVELOPMENT: AVAILABLE RESOURCES AND APPLICABLE SCENARIOS\n", "abstract": " For many decades, the cost, time and quality are the main concern of software engineering. The main objective of any software organization is to produce high quality software product within a shorter time and minimum cost. Software reuse is one of the main strategies concerns about using available resources to enhance the productivity of software development and the quality of software products. It aims at using existing software products and components in the development of new software systems. However, various types of software components available in different sources are used in the reuse strategy. This makes the reuse strategy confusable and its efficiency and effectiveness debatable. Selecting unsuitable component or scenario makes the reuse inefficient and ineffective. This study discusses the types of software components, their sources, characteristics and applicable scenarios for developing and reusing these components. A dataset from the literature is used to calculate and compare the cost of reuse processes. The results show that software reuse is an efficient strategy comparing with the normal development. Although, considering the reusability of software components required extra cost to the normal development, it could efficiently save the cost of the development of new software system. Moreover, using existing software components in the development of new reusable component is the most efficient strategy, which required even less than the cost of developing normal component.", "num_citations": "2\n", "authors": ["2004"]}
{"title": "Automated User Experience Tool Development for Mobile Application\n", "abstract": " UX evaluation has a significant importance for any interactive application. UX of mobile applications is very significant and there are some of automated tools available for evaluating such applications particularly for Android and iOS. Automated UX evaluation provides a number of strengths and overcomes the limitations of its nonautomated (supervised) counterpart. Automated UX evaluation is regarded as unexplored field, especially when it is adopted for UX of large mobile application. The study was conducted by reviewing scientific papers that are related to user experience evaluation (UXEMs) to identify the most common UX attributes. Automated UX tool will be used to measure the metric of effectiveness, efficiency and satisfaction. In this study, the researcher used both subjective (UX Questionnaire) and objective measurements (Automated logging of effectiveness and efficiency) to satisfy study objectives. The study was conducted in Jordan as field study within Annual LogiCom Technology Forum (LTF); Twenty three participants used the Android phones that were made available by the researcher to carry out the tasks without any further adjustment of settings. Each test session was logged using automated UX tool. This paper presents an automated user experience tool to monitor user interaction for mobile applications. In this paper discusses the results and findings of automated UX tool for mobile applications.", "num_citations": "2\n", "authors": ["2004"]}
{"title": "An Evaluation Framework for Requirements Definition of Software Development\n", "abstract": " Requirements establishment and definition are very critical tasks in software development. This study discusses the process of requirements definition, and key characteristics affecting the success of software projects development. An evaluation framework is proposed in order to verify users\u2019 requirements and reduce associated risks on software project development. The framework was developed based on the relationships between the components of software project request. A preliminary assessment study was conducted and confirmed the applicability and usefulness of the proposed framework in detecting errors in user\u2019s requirements.", "num_citations": "1\n", "authors": ["2004"]}
{"title": "Software Usability Factor within Software Life Cycle\n", "abstract": " The usability of the software has become one of the most important interactive quality factors. Since 1980s the software developers gave attention to usability as a subset of modification, whereas in the late of 1990s it is increasingly recognized as a quality attribute that one has to explicitly deal with during software development. Most of the proposed quality models considered the usability as one of the major factors. Since software usability is considered from different points of view, different software characteristics are used to measure it. Therefore, this study aims to discuss the usability of the software and its relation with software life cycle. Hence, the framework of the usability characteristics through software life cycle is proposed.", "num_citations": "1\n", "authors": ["2004"]}