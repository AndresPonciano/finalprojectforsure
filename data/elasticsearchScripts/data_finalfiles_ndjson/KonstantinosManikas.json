{"title": "Software ecosystems\u2013A systematic literature review\n", "abstract": " A software ecosystem is the interaction of a set of actors on top of a common technological platform that results in a number of software solutions or services. Arguably, software ecosystems are gaining importance with the advent of, e.g., the Google Android, Apache, and Salesforce.com ecosystems. However, there exists no systematic overview of the research done on software ecosystems from a software engineering perspective. We performed a systematic literature review of software ecosystem research, analyzing 90 papers on the subject taken from a gross collection of 420. Our main conclusions are that while research on software ecosystems is increasing (a) there is little consensus on what constitutes a software ecosystem, (b) few analytical models of software ecosystems exist, and (c) little research is done in the context of real-world ecosystems. This work provides an overview of the field, while identifying\u00a0\u2026", "num_citations": "582\n", "authors": ["751"]}
{"title": "Revisiting software ecosystems research: A longitudinal literature study\n", "abstract": " \u2018Software ecosystems\u2019 is argued to first appear as a concept more than 10 years ago and software ecosystem research started to take off in 2010. We conduct a systematic literature study, based on the most extensive literature review in the field up to date, with two primarily aims: (a) to provide an updated overview of the field and (b) to document evolution in the field.In total, we analyze 231 papers from 2007 until 2014 and provide an overview of the research in software ecosystems. Our analysis reveals a field that is rapidly growing, both in volume and empirical focus, while becoming more mature. We identify signs of field maturity from the increase in: (i) the number of journal articles, (ii) the empirical models within the last two years, and (iii) the number of ecosystems studied. However, we note that the field is far from mature and identify a set of challenges that are preventing the field from evolving. We propose\u00a0\u2026", "num_citations": "223\n", "authors": ["751"]}
{"title": "Analysis and design of software ecosystem architectures\u2013Towards the 4S telemedicine ecosystem\n", "abstract": " ContextTelemedicine, the provision of health care at a distance, is arguably an effective way of increasing access to, reducing cost of, and improving quality of care. However, the deployment of telemedicine is faced with standards that are hard to use, application-specific data models, and application stove-pipes that inhibit the adoption of telemedical solutions. To which extent can a software ecosystem approach to telemedicine alleviate this?ObjectiveIn this article, we define the concept of software ecosystem architecture as the structure(s) of a software ecosystem comprising elements, relations among them, and properties of both. Our objective is to show how this concept can be used (i) in the analysis of existing software ecosystems and (ii) in the design of new software ecosystems.MethodWe performed a mixed-method study that consisted of a case study and an experiment. For (i), we performed a descriptive\u00a0\u2026", "num_citations": "109\n", "authors": ["751"]}
{"title": "Reviewing the health of software ecosystems\u2013a conceptual framework proposal\n", "abstract": " The health of a software ecosystem is an indication of how well the ecosystem is functioning. The measurement of health can point to issues that need to be addressed in the ecosystem and areas for the ecosystem to improve. However, the software ecosystem field lacks an applicable way to measure and evaluate health. In this work, we review the literature related to the concept of software ecosystem health and the literature that inspired the software ecosystem health literature (a total of 23 papers) and (i) identify that the main source of inspiration is the health of business ecosystems while also influenced by theories from natural ecosystems and open source,(ii) identify two areas where software ecosystems differ from business and natural ecosystems, and (iii) propose a conceptual framework for defining and measuring the health of software ecosystems.", "num_citations": "102\n", "authors": ["751"]}
{"title": "Towards a typification of software ecosystems\n", "abstract": " Traditionally, software engineering has been dominated by stand-alone development organizations and collaborations between contractors, integrators and suppliers. In the last decade, the notion of software ecosystems has been established as a new paradigm in software engineering. In its essence it proposes participative engineering across independent development organizations centered on a common technology.             This paper reviews the current state-of-the-art and presents a first step towards a typification of successful software ecosystems. We discuss key characteristic of the ecosystem types and present a set of example cases. The characterization reviews and consolidates existing research and discusses variations within the key building block of a software ecosystem. It further enables sharpening the borders of what an ecosystem is (and what not) and how the individual types can be\u00a0\u2026", "num_citations": "34\n", "authors": ["751"]}
{"title": "Characterizing the danish telemedicine ecosystem: Making sense of actor relationships\n", "abstract": " The use of telemedicine is arguably beneficial even in densely populated areas in reducing cost and increasing efficiency of healthcare. However, the implementation of telemedicine solutions in the healthcare system of Denmark has been perceived as being faced with implementation and interoperability issues, silo solutions, and lack of guidelines and standards. In this paper, we characterise the ecosystem evolved around the telemedicine services in Denmark and study the actors involved in this ecosystem. We establish a method for this study, where we define two actor roles and ways of characterizing actor contributions, and apply the method to the largest healthcare region of Denmark. Our findings reveal an ecosystem that is relatively closed to new actors, where the actors tend to be related to single telemedicine applications, the applications have low connectivity, and the most influential actors of the\u00a0\u2026", "num_citations": "20\n", "authors": ["751"]}
{"title": "Socio-technical congruence in the ruby ecosystem\n", "abstract": " Existing studies show that open source projects may enjoy high levels of socio-technical congruence despite their open and distributed character. Such observations are yet to be confirmed in the case of larger open source ecosystems in which developers contribute to different projects within the ecosystem. In this paper, we empirically study the relationships between the developer coordination activities and the project dependency structure in the Ruby ecosystem. Our motivation is to verify whether the ecosystem context maintains the high socio-technical congruence levels observed in many smaller scale FLOSS (Free/Libre Open Source Software) projects. Our study results show that the collaboration pattern among the developers in Ruby ecosystem is not necessarily shaped by the communication needs indicated by the dependencies among the ecosystem projects.", "num_citations": "19\n", "authors": ["751"]}
{"title": "Supporting the evolution of research in software ecosystems: reviewing the empirical literature\n", "abstract": " The field of software ecosystems is gradually transiting towards an established means of software development and distribution, counting numerous areas of applicability. However, research in software ecosystems, although the activity of over 10\u00a0years, is still characterized as premature with significant lack of software ecosystem specific theories that are solid, mature, generic, and detailed enough to be measurable and transferable. In this study, we intent to come closer to an evolution of the field by supporting the \u201clocalization\u201d of research, i.e. the focus on specific types of software ecosystems. To do so, we investigate the literature of empirical, non open source ecosystem studies and intent to identify the various aspects and perspectives studied.             In total, we review 56 empirical studies that investigate 55 software ecosystems. Our analysis confirms the assumption that proprietary software ecosystem\u00a0\u2026", "num_citations": "18\n", "authors": ["751"]}
{"title": "Defining decision making strategies in software ecosystem governance\n", "abstract": " Making the right decisions is an essential part of software ecosystem governance. Decisions related to the governance of a software ecosystem can influence the health of the ecosystem and can result in fostering the success or greatly contributing to the failure of the ecosystem. However, very few studies touch upon the decision making of software ecosystem governance. In this paper, we propose decomposing software ecosystem governance into three activities: input or data collection, decision making, and applying actions.We focus on the decision making activity of software ecosystem governance and review related literature consisted of software ecosystem governance, organizational decision making, and IT governance. Based on the identified studies, we propose a framework for defining the decision making strategies in the governance of software ecosystems. We identify five decision areas for software ecosystem governance and four archetypes describing the way decisions are taken for each decision area. We explain this matrix-based framework by providing examples from existing software ecosystems.", "num_citations": "15\n", "authors": ["751"]}
{"title": "Designing, developing, and implementing software ecosystems: towards a step-wise guide\n", "abstract": " The notion of software ecosystems has been popular both in research and industry for more than a decade, but how software ecosystems are created still remains unclear. This becomes more of a challenge if one examines the \u201ccreation\u201d of ecosystems that have high probability in surviving in the future, i.e. with respect to ecosystem health. In this paper, we focus on the creation of software ecosystems and propose a process for designing, developing, and establishing software ecosystems based on three basic steps and a set of activities for each step. We note that software ecosystem research identifies that ecosystems typically emerge from either a company deciding to allow development on their product platform or from a successful open source project. In our study we add to this knowledge by demonstrating, through two case studies, that ecosystems can emerge from more than a technological infrastructure (platform). We identify that ecosystems can emerge out of two more distinct types of environments and thus the design should be based on the characteristics of this categorization. Moreover, we follow the approach that design, development, and establishment are not three distinct phases but rather aspects of a single re-iterating phase and thus propose the view of design, development, and establishment as a continous process, running in parallel with and interrelated to the monitoring of the ecosystem evolution.", "num_citations": "9\n", "authors": ["751"]}
{"title": "Towards a Network Ecology of Software Ecosystems: an Analysis of two OSGi Ecosystems.\n", "abstract": " \u201cSoftware ecosystems\u201d are gaining importance in commercial software development; the iPhone iOS and Salesforce. com ecosystems are examples of this. In contrast to traditional forms of software reuse, such as common platforms or product lines, software ecosystems have a heterogeneous set of actors sharing and collaborating over one or more technological platforms and business model (s) that serve the actors. However, little research has investigated the properties of actual software ecosystems.In this paper, we present an exploratory study of software ecosystems using the formalizations and metrics of the \u201cnetwork ecology\u201d approach to the analysis of natural ecosystems. In doing so, we mine the Maven central Java repository and analyze two OSGi ecosystems: Apache Felix and Eclipse Equinox. In particular, we define the concept of an ecosystem \u201cneighborhood\u201d, apply network ecology metrics to these\u00a0\u2026", "num_citations": "9\n", "authors": ["751"]}
{"title": "Characterizing software activity: The influence of software to ecosystem health\n", "abstract": " The health of a software ecosystem reflects the ability of the ecosystem to endure and remain variable and productive over time. Measurements of health in a software ecosystem are applied to inform on how the ecosystem is evolving, evaluate changes, and predict future states. In this study we investigate the influence of software to the overall health of the ecosystem. We propose an approach of measuring the activity of the ecosystem over time and identifying the influence to health. We do this in two ways:(i) we study the evolution of the software network over time to identify changes in the structure of the software network and investigate whether they relate to general changes in the ecosystem.(ii) We propose the identification of the influence of the independent software components to ecosystem health at an activity level. We do so by defining keystone and dominator activities and propose tentative means of\u00a0\u2026", "num_citations": "8\n", "authors": ["751"]}
{"title": "Towards reference architectures as an enabler for software ecosystems\n", "abstract": " Software ecosystems-a topic with increasingly growing interest in academia and industry in the past decade-arguably revolutionized many aspects of industrial software engineering (business models, architectures, platforms, project executions, collaboration models, distribution of assets, to name a few). Software ecosystems enable the contribution of external actors with distinct center a common technology and the potential distribution of the actor contributions to an existing user set.", "num_citations": "5\n", "authors": ["751"]}
{"title": "Requirements for a software-intensive ecosystem for telemedicine\n", "abstract": " Worldwide, public authorities are trying to improve uptake, efficiency and interoperability of ICT support for (telemedical) healthcare services through adoption and enforcement of standards and guidelines, such as IHE XDS and HL7. Furthermore, security concerns are often enforced by requiring services to run inside healthcare VPNs. Finally access control is tailored for authorized healthcare professionals, not citizens. However, closed network solutions along with big and hard to comprehend standards slow down uptake of solutions and access control regimes hold back interaction between initiatives in public and private sectors. With these major challenges in mind, we take inspiration from existing business and software ecosystem approaches and theories and formulate the question: how can we form a dynamic ecosystem of healthcare technology and services in order to allow easier and more flexible development, integration and application of new services, as well as accelerate the adoption of standards and further public/private engagement? Based on a commonality analysis of existing telemedicine solutions and standards in ICT for healthcare, we present functional and quality requirements that should be met for software-intensive ecosystem for telemedicine to be effective. In particular, we argue that i) emphasis on standards must be complemented by reference implementations, ii) an open source service and component approach must be complemented by quality control regime, iii) specifications and architectures must be complemented by provisioning and maintenance support by an ecosystem keystone player, and iv) access\u00a0\u2026", "num_citations": "5\n", "authors": ["751"]}
{"title": "Governance mechanisms for healthcare apps\n", "abstract": " The introduction of theapp store'concept has challenged the way software is distributed and marketed: developers have easier access to customers, while customers have easy access to innovative applications. Apps today are increasingly focusing on more\" mission-critical\" areas like healthcare with the Apple AppStore counting more than 40,000 apps under the category\" health & fitness\". This rapid development of healthcare apps increases the necessity of governance as, currently, healthcare apps are not thoroughly governed. The US Food and Drug Administration and the European Commission only have policies for apps that are medical devices.", "num_citations": "4\n", "authors": ["751"]}
{"title": "Towards identifying programming expertise with the use of physiological measures\n", "abstract": " In this position paper we propose means of measuring programming expertise on novice and expert programmers. Our approach is to measure the cognitive load of programmers while they assess Java/Python code in accordance with their experience in programming. Our hypothesis is that expert programmers encounter smaller pupillary dilation within programming problem solving tasks. We aim to evaluate our hypothesis using the EMIP Distributed Data Collection in order to confirm or reject our approach.", "num_citations": "2\n", "authors": ["751"]}
{"title": "Outlier Detection in Online Gambling\n", "abstract": " Data mining is field that is increasing in importance and width of application day by day. A sub-domain of data mining, the anomaly detection is also rising in importance the last years. Although discovered a long time ago, the last 5 or 10 years the uses of anomaly detection are increasing, therefore making it a useful technique to discover fraud, network intrusions, medicine side effects and many other useful anomalies within a wide set of data. The task of this master thesis is to find a more optimal anomaly detection technique to uncover fraudulent use or addictive playing in the transaction data of online gambling websites. This work is conducted on behalf of a Swedish company that is occupied in the field of data mining. For the needs of this work an anomaly detection method has been adapted, implemented and tested. The evaluation of this method is done by comparing the results it brings with the anomaly detection technique currently used for the same purpose.", "num_citations": "2\n", "authors": ["751"]}
{"title": "Evolving software products, the design of a water-related modeling software ecosystem\n", "abstract": " Software product evolution by means of improving their architecture, tools, or development methodologies are rather common in the lifetime of a software product. Especially if the product is in the domain of engineering where some of the basic calculation principles were established in some cases more than 50\u00a0years ago. However, a radical change of software products to evolve both in the software engineering as much as the organizational and business aspects in a disruptive manner are rather rare.               In this paper, we report on the transformation of one of the market leader product series in water-related calculation and modeling from a traditional business-as-usual series of products to an evolutionary software ecosystem. We do so by relying on existing concepts on software ecosystem analysis to analyze the future ecosystem. We report and elaborate on the main focus points necessary for this\u00a0\u2026", "num_citations": "1\n", "authors": ["751"]}
{"title": "On the Impact of Medical Device Regulations on Software Architecture.\n", "abstract": " Compliance to regulations and regulatory approval are requirements for many medical device software systems. In this paper, we investigate the implications of medical device software regulations to the design of software systems. We do so by focusing on the American and European regulatory authorities and review the legal requirements for regulatory approval of medical devices. We define a simplified process for regulatory approval, consisting of five steps, and enhance this process by descriptions of how to decide whether a software system is a medical device and how to identify the class of the device. Moreover, we review software modularity in the implementation of software medical device and propose a set of preliminary principles for architectural design of software medical device based on a set of constrains identified from the reviewed regulations.", "num_citations": "1\n", "authors": ["751"]}
{"title": "(Automated) Software Modularization Using Community Detection\n", "abstract": " The modularity of a software system is known to have an effect on, among other, development effort, change impact, and technical debt. Modularizing a specific system and evaluating this modularization is, however, challenging. In this paper, we apply community detection methods to the graph of class dependencies in software systems to find optimal modularizations through communities. We evaluate this approach through a study of 111 Java systems contained in the Qualitas Corpus. We found that using the modularity function of Newman with an Erd\u0151s-R\u00e9nyi null-model and using the community detection algorithm of Reichardt and Bornholdt improved community quality for all systems, that coupling decreased for 99 of the systems, and that coherence increased for 102 of the systems. Furthermore, the modularity function correlates with existing metrics for coupling and coherence.", "num_citations": "1\n", "authors": ["751"]}
{"title": "Analyzing, Modelling, and Designing Software Ecosystems\n", "abstract": " As in many western countries, Denmark\u2019s demographic changes and the organizational and financial changes of the Danish healthcare are challenging the levels of provided healthcare and point towards the establishment of telemedicine as means of patient support, diagnosis, and treatment. However, telemedical solutions, despite the benefits they provide, are faced with a number of challenges that inhibit their adoption, development, and implementation. In this project, we examine the approach of a software ecosystem as means of addressing these issues. A software ecosystem can be roughly explained as the software development and distribution by a set of actors dependent on each other and the ecosystem. We commence on the hypothesis that the establishment of a software ecosystem on the telemedicine services of Denmark would address these issues and investigate how a software ecosystem can foster the development, implementation, and use of telemedicine services. We initially expand the theory of software ecosystems by contributing to the definition and understanding of software ecosystems, providing means of analyzing existing and designing new ecosystems, and defining and measuring the qualities of software ecosystems. We use these contributions to design a software ecosystem in the telemedicine services of Denmark with (i) a common platform that supports and promotes development from different actors,(ii) high software interaction,(iii) strong social network of actors,(iv) robust business structures, supporting actor involvement in the ecosystem, and (v) proper orchestration and governance of the ecosystem to\u00a0\u2026", "num_citations": "1\n", "authors": ["751"]}