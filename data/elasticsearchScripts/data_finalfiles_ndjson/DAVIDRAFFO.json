{"title": "A model of the software development process using both continuous and discrete models\n", "abstract": " Software process models have been simulated using system dynamics and discrete modeling paradigms. System dynamics models describe the interaction between project factors, but do not easily represent queues and discrete process steps. On the other hand, discrete event models describe process steps, but may not have enough events to represent feedback loops accurately. We develop a combined model that represents the software development process as a series of discrete process steps executed in a continuously varying project environment. We demonstrate the feasibility of this model by combining a discrete event model of the ISPW6 software process example with the system dynamics model developed by Abdel-Hamid and Madnick. The combination of these two modeling paradigms creates the opportunity to examine new problems and issues that are highly relevant to software project managers\u00a0\u2026", "num_citations": "130\n", "authors": ["372"]}
{"title": "Application of a hybrid process simulation model to a software development project\n", "abstract": " Simulation models of the software development process can be used to evaluate potential process changes. Careful evaluation should consider the change within the context of the project environment. While system dynamics models have been used to model the project environment, discrete event and state-based models are more useful when modeling process activities. Hybrid models of the software development process can examine questions that cannot be answered by either system dynamics models or discrete event models alone. In this paper, we present a detailed hybrid model of a software development process currently in use at a major industrial developer. We describe the model and show how the model was used to evaluate simultaneous changes to both the process and the project environment.", "num_citations": "109\n", "authors": ["372"]}
{"title": "Software process simulation to achieve higher CMM levels\n", "abstract": " Organizations interested in improving their process performance face two key questions:\u2022 What is the best approach for making decisions about process changes?\u2022 How can the risk associated with potential process alternatives be assessed? Quantitative process analysis tools are being developed by Northrop Grumman's Surveillance and Battle Management Systems (SBMS Melbourne, Florida) and Portland State University, under sponsorship of the Software Engineering Research Center (SERC). These tools consist of stochastic simulation models of the software development process. The stochastic/analytic portions of the models provide a quantitative understanding of the current process and provide a mechanism for the quantitative analysis of proposed process change alternatives prior to implementation. The use of simulation models also supports a quantitative assessment of risk or uncertainty associated\u00a0\u2026", "num_citations": "100\n", "authors": ["372"]}
{"title": "Using simulation to evaluate global software development task allocation strategies\n", "abstract": " We describe a hybrid computer simulation model of the software development process that is specifically architected to study alternative ways to configure global software development (GSD) projects, including phase\u2010based, module\u2010based, and follow\u2010the\u2010sun allocation strategies. The model is a hybrid system dynamics and discrete\u2010event model. In this paper, test cases have been developed for each allocation strategy, and project duration is computed for each configuration under a range of plausible assumptions for key parameters. The primary finding is that although under ideal assumptions follow\u2010the\u2010sun is able to produce impressive reductions in time\u2010to\u2010market, under more realistic assumptions the reverse is true, thus corroborating findings by other researchers. We also conducted a factorial design to examine the impact of GSD factors including distance, culture, language, trust, and time zone on\u00a0\u2026", "num_citations": "87\n", "authors": ["372"]}
{"title": "Empirical analysis in software process simulation modeling\n", "abstract": " Software process simulation modeling is increasingly being used to address a variety of issues from the strategic management of software development, to supporting process improvements, to software project management training. The scope of software process simulation applications ranges from narrow focused portions of the life cycle to longer-term product evolutionary models with broad organizational impacts. This paper discusses some of the important empirical issues that arise in software process simulation modeling. We first address issues concerning real-world data used to (1) establish input parameters to a software process simulation model, and (2) establish actual organizational results against which the model\u2019s results (i.e., outputs) will be compared. On the input side, the challenges include small sample sizes, considerable variability and outliers, lack of desired data, loosely defined metrics, and so\u00a0\u2026", "num_citations": "78\n", "authors": ["372"]}
{"title": "Modeling software processes quantitatively and assessing the impact of potential process changes on process performance\n", "abstract": " Despite the fact that software development has grown to become one of the major industries in the United States, difficulties still exist with delivering quality software within budget and on schedule. The industry also faces increasing competition from software firms in other countries such as India and Japan. As a result, improving software processes is a major concern for many organizations. Software project managers are concerned with questions such as:(1) What development phases are essential? Which phases could be skipped to reduce costs without sacrificing quality?(2) Are inspections worthwhile?(3) What is the value of applying tools to support development activities? Will these tools be worth the cost?(4) How do we predict the benefit associated with implementing a process change before a substantial commitment of resources and effort is made?(5) Given a number of potential process changes, how do\u00a0\u2026", "num_citations": "73\n", "authors": ["372"]}
{"title": "Value-based pricing for new software products: strategy insights for developers\n", "abstract": " Software pricing has traditionally been focused on the vendor\u2019s internal business objectives of covering costs, achieving specified margins, and meeting the competition. Pricing methods such as flat price, tiered pricing, MIPS-based, usage-based, per user, per seat, and pay as you go, are often tactical in nature and easily matched by competitors, which can undermine profitability by accelerating the commoditization process. Conversely, a value-based approach charges a price based on the customer\u2019s perceived value of the benefits received. Value-based pricing methodologies can be used to estimate the market value of new software concepts at various stages of the development process in addition to pricing new products for launch. This paper describes a value-based approach to pricing that is dependent on the firm\u2019s commitment to invest in the development of its long-term \u201cpricing capital.\u201d This investment in methodologies, infrastructure, and processes to create, measure, analyze, and capture customer value is the key to successful long-term pricing strategy.", "num_citations": "60\n", "authors": ["372"]}
{"title": "Value-Based Software Engineering (VBSE)\n", "abstract": " We consider a set of programs a family when it pays to look at their common aspects before looking at their differences. For commercial software developers the implications are twofold: First, making rational decisions about product-line processes and products requires the ability to answer the question: \u201cDoes it pay?\u201d Second, whether or not something pays is ultimately a business (rather than software engineering) question. In short, making sound software engineering decisions requires understanding the business implications of those decisions, and vice versa. This paper describes work in progress to develop a product-line process model and common value metric that adequately link product value drivers (what it pays) with the software engineering decisions that affect those drivers. We describe a systematic approach to quantifying the return on both product and process improvements, based on\u00a0\u2026", "num_citations": "54\n", "authors": ["372"]}
{"title": "Planning and improving global software development process using simulation\n", "abstract": " Global software development poses a number of challenges and difficulties as well as significant potential benefits. In order to be successful, companies need to adapt and improve their processes to support this kind of development. Strong project planning and management is also required. Software process simulation modeling has been used to address a variety of issues in software development projects ranging from strategic management, project planning and control, process improvement, to training and understanding. We believe that a hybrid simulation model combining system dynamics and discrete-event models is needed to effectively model global software development projects. In this paper, we describe such a model, and focus on the use of the model to support project planning and process improvement in global software development. Example questions/issues that can be addressed by our GSD\u00a0\u2026", "num_citations": "52\n", "authors": ["372"]}
{"title": "Using design of experiments, sensitivity analysis, and hybrid simulation to evaluate changes to a software development process: a case study\n", "abstract": " Hybrid simulation models combine the high\u2010level project issues of System Dynamics models with the process detail of discrete event simulation models. Hybrid models not only capture the best of both of these simulation paradigms, but they also are able to address new issues that are important in managing complex real\u2010world development projects that neither the System Dynamics nor Discrete Event simulation paradigms are able to address alone. In order to reap the full benefits from a simulation model, a structured approach for analyzing model results is necessary. This article applies Design of Experiments (DOE) and broad range sensitivity analysis (BRSA) to a hybrid system dynamics and discrete event simulation model of a software development process. DOE is used to analyse the interaction effects, such as the degree to which the impact of the process change depends on worker motivation, schedule\u00a0\u2026", "num_citations": "47\n", "authors": ["372"]}
{"title": "Model-based tests of truisms\n", "abstract": " Software engineering (SE) truisms capture broadly-applicable principles of software construction. The trouble with truisms is that such general principles may not apply in specific cases. This paper tests the specificity of two SE truisms: (a) increasing software process level is a desirable goal; and (b) it is best to remove errors during the early parts of a software lifecycle. Our tests are based on two well-established SE models: (1) Boehm et.al.'s COCOMO II cost estimation model; and (2) Raffo's discrete event software process model of a software project life cycle. After extensive simulations of these models, the TAR2 treatment learner was applied to find the model parameters that most improved the potential performance of the real-world systems being modelled. The case studies presented here showed that these truisms are clearly sub-optimal for certain projects since other factors proved to be far more critical\u00a0\u2026", "num_citations": "46\n", "authors": ["372"]}
{"title": "A simulation model for global software development project\n", "abstract": " Global software development (GSD) is becoming a dominant paradigm in the software industry. Conducting development projects in multiple countries offers many potential benefits including significantly reduced cost and better response times. However, it also poses some difficulties and challenges in managing this kind of project. Software Process Simulation Modeling (SPSM) can be used to support, enrich and evaluate GSD theories, to facilitate understanding, and to support corporate decisions. The discrete-event paradigm and system dynamics paradigm compliment each other and together enable the construction of models that capture both the dynamic nature of project variables and the complex sequences of discrete activities that take place. In this paper, we outline the objectives and the requirements of a GSD model, evaluate different types of simulation paradigms, identify important GSD factors and\u00a0\u2026", "num_citations": "45\n", "authors": ["372"]}
{"title": "Providing value to customers in software development through lean principles\n", "abstract": " Lean thinking has created substantial benefits for a variety of industries. Although it is not easily apparent, the same principles can be utilized in reducing lead times for software development. Fundamentally, lean principles leverage the benefits of software engineering best practices to improve the work flow and the tactical management of the project. By managing the project more efficiently and reducing waste, tremendous performance benefits can be achieved. This article seeks to present and articulate a number of key lean principles in the context of software development. The goal is to provide insight into practical strategies for making trade\u2010offs between the core lean principles of providing the highest possible customer value, maximizing work flow, and eliminating waste in the context of specific real world software development situations. Copyright \u00a9 2008 John Wiley & Sons, Ltd.", "num_citations": "43\n", "authors": ["372"]}
{"title": "System and method for simulating product design and development\n", "abstract": " A generalized software process simulation model is utilized to simulate software engineering processes and support project management and control. The simulation model takes advantage of generic software modeling blocks which represent differing stages or activities in a software development process and are represented in modeling environment. The generic software modeling blocks are also used to represent sub-processes and activities within higher-level processes. The blocks also provide dialog boxes which allow entering and adjustment of data and equations. Through manipulation of blocks and comparisons of simulations, a project manager can simulate and observe the outcome of different process decisions. Additional simulation capabilities are possible, as software engineering is one example of the technology. Similar techniques are also applied to simulation of hardware and systems\u00a0\u2026", "num_citations": "41\n", "authors": ["372"]}
{"title": "Incorporating price sensitivity measurement into the software engineering process\n", "abstract": " Software developers typically make critical design decisions without understanding how the market will value the final product in terms of the price that customers are willing to pay. Market research techniques that rely on simulated purchase situations, laboratory experiments, and actual purchase behavior are often dismissed as too expensive, too time consuming, or too impractical. What is needed is a quick and cost-effective method for assessing customers' price expectations that can be utilized at key points in the software development process where design are at stake. Price sensitivity measurement (PSM) research provides product developers with the capability to quickly assess the range of acceptable prices, indifference points, and optimum pricing points for any given software configuration.", "num_citations": "37\n", "authors": ["372"]}
{"title": "Roadmapping the next wave of sustainable IT\n", "abstract": " Purpose \u2013 This paper aims to explore the strategic dimensions and drivers of sustainable IT and roadmaps its likely development as a disruptive innovative force over the next decade as it moves beyond the datacenter and throughout the IT organization, the firm, markets, and society at large. Its purpose is to provide a comprehensive view of the emerging industry to inform sustainable IT strategy development and stimulate future research.Design/methodology/approach \u2013 This paper uses a qualitative three\u2010phase process to develop the technology roadmap for the sustainable IT industry. The phases are domain analysis, which features a comprehensive literature review and expert panel depth interviews; roadmap development, which involved two technology roadmapping brainstorming sessions; and follow\u2010up activity, to confirm roadmap session results with the expert panel.Findings \u2013 The paper defines the\u00a0\u2026", "num_citations": "36\n", "authors": ["372"]}
{"title": "Improving global software development project performance using simulation\n", "abstract": " Global software development (GSD) has become a dominant paradigm in the software industry. Conducting development projects in multiple countries offers many potential benefits including reduction in development cost and reduction in time-to-market especially trough the use of follow-the-sun strategy. However, GSD also poses challenges and difficulties due to geographic dispersion, time-zone differences as well as cultural and language differences. Thus, few GSD projects have been able to realize the full benefits of follow-the-sun development. This raises the question whether follow-the-sun strategy is the best way to pursue in order to reduce development time. What need to be done to ensure that the full benefits of follow-the-sun are achieved? In this paper, we described a hybrid simulation model of the software development process that is specifically architected to examine GSD projects. Then, we\u00a0\u2026", "num_citations": "33\n", "authors": ["372"]}
{"title": "Coordinating models and metrics to manage software projects\n", "abstract": " In previous work we developed techniques for modeling software development processes quantitatively in terms of development cost, product quality, and project schedule using simulation. This work has predominately been applied to the software project management planning function. The goal of our current work is to develop a \u2018forward-looking\u2019approach that integrates metrics with simulation models of the software development process in order to support the software project management controlling function. This \u2018forward-looking\u2019approach provides predictions of project performance and the impact of various management decisions. It can be used to assess the project's conformance to planned schedule and resource consumption. This paper reports on work with a leading software development firm to create an approach that includes a flexible metrics repository and a discrete event simulation model\u00a0\u2026", "num_citations": "28\n", "authors": ["372"]}
{"title": "Evaluating the impact of process improvements quantitatively using process modeling\n", "abstract": " The concept of continuous proces s improvement, although familiar in the manufacturing arena, is just starting to be implemented in the software industry. Currently, software developmen t organizations have identified potentia l process improvements and are working to implement results from ISO 9000 audits an d Capability Maturity Model (CMM) Software Process Assessments. Quantitative methods are needed to prioritize process changes and to justify resources for proposed improvements base d on overall process performance. However, these methods have not yet been developed.This work uses software process modeling to predict the impact of potential proces s changes on quantitative performanc e measures before a substantial commitmen t of time and resources is made. The work addresses the performance measures of development cost, source code quality, an d project schedule. This analysis can be used to prioritize process improvements based on their potential performance impact and to obtain management support for the proposed change.", "num_citations": "28\n", "authors": ["372"]}
{"title": "Identifying key success factors for globally distributed software development project using simulation: A case study\n", "abstract": " With the increased pressure to reduce cost, reduce development time, and improve quality, many software companies are moving toward using a Globally Distributed Software Development (GSD) paradigm. Due to the challenges and difficulties with GSD, researchers and practitioners are attempting to identify key success factors for GSD projects. Based on our previous work, we found that the key success factors can be different depending upon specific project characteristics. To ensure a successful outcome, project managers have to focus on the right success factors for their particular project. In this paper, we illustrate how a GSD simulation model can be used to represent a specific project and to identify key success factors for that project. We use a case study from an actual software development firm. We also perform sensitivity analysis to assess the magnitude of the performance impact for the key\u00a0\u2026", "num_citations": "26\n", "authors": ["372"]}
{"title": "Moving up the CMMI capability and maturity levels using simulation\n", "abstract": " Process Simulation Modeling PSIM technology can be used to evaluate issues related to process strategy, process improvement, technology and tool adoption, project management and control, and process design. Recent developments in PSIM tools have drastically cut the costs to develop models for evaluating such issues, and new methods have been developed to apply PSIM, enabling it to provide greater business value. At the same time, trends within the software industry towards improving operations and reducing costs have heightened the need for tools to better plan and manage processes. As a result, organizations regard PSIM as an attractive tool that can provide business value today. This report shows examples of how PSIM has been implemented within industry and government organizations to improve process consistency and results. The report also shows, via many examples, exactly how PSIM supports Capability Maturity Model Integration Process Areas from level 2 through level 5.Descriptors:", "num_citations": "26\n", "authors": ["372"]}
{"title": "Technology review: adapting financial measures: making a business case for software process improvement\n", "abstract": " Software firms invest in process improvements in order to benefit from decreased costs and/or increased productivity sometime in the future. Such efforts are seldom cheap, and they typically require making a business case in order to obtain funding. We review some of the main techniques from financial theory for evaluating the risk and returns associated with proposed investments and apply them to process improvement programs for software development. We also discuss significant theoretical considerations as well as robustness and correctness issues associated with applying each of the techniques to software development and process improvement activities. Finally we introduce a present value technique that incorporates both risk and return that has many applications to software development activities and is recommended for use in a software process improvement context.", "num_citations": "26\n", "authors": ["372"]}
{"title": "Empirical studies applied to software process models\n", "abstract": " Organisations involved in developing, maintaining and enhancing software experiment constant changes in all the relevant domains and face increasing demands for improvements in cycle time, cost-effectiveness and product quality. Software process modelling (Curtis et al., 1992) is emerging as an effective tool for inter alia evaluating changes made to a software project or development organization and to help manage these changes. But its implications extend beyond the software process. Business process models, for example, are also used to represent end-user business processes to support requirements elicitation and analysis of activities. Research programmes such as Systems Engineering for Business Process Change (SEBPC, 1998) highlight the importance of modelling business processes in evolving and maintaining the software systems that support those processes. Hence, process modelling and simulation are becoming widely used within software engineering, for a variety of purposes and audiences, and using a variety of notations and tools. However, the relationship between empirical studies and software process modelling and simulation is relatively unexplored, as exemplified by the scarcity of empirical studies relating to the practical impact of process modelling and simulation. This paper addresses some relevant aspects of the multifaceted relationship between empirical studies and the building, deployment and usage of software process models. The paper draws on a variety of experiences and perspectives of process modelling and suggests techniques and questions for further investigation.", "num_citations": "25\n", "authors": ["372"]}
{"title": "Discrete event system and method for simulating global product development\n", "abstract": " A global software development model instrument is described. The instrument utilizes a global system dynamics model, as well as one or more site-specific discrete event simulation and system dynamics models to model interactions within and between software development sites. Parameters, equations, and interactions between the model components are editable to allow for the simulation and comparison of various software development options and to provide for global software development research. Additional product development situations can be modeled as well, including hardware and systems engineering.", "num_citations": "24\n", "authors": ["372"]}
{"title": "Implementing generalized process simulation models\n", "abstract": " Over the past decade, software process simulation has been used by both researchers and practitioners to assess the cost, quality and schedule associated with projects. Although this technology has been shown to have success in addressing questions ranging from strategic management issues to process improvement planning as well as management training, this technology has not yet been widely adopted. One of the inhibiting factors is the cost of developing these models. In order to reduce the cost associated with developing software process simulation models, we have developed generic building blocks that can be used to quickly create software process models. In addition, our software process simulation blocks can offer important benefits in terms of improving the quality and usability of these models. In this paper, we present our generalized process simulation model (GPSM) concept and blocks. We also present two illustrative examples that apply the generalized blocks to create software development lifecycle models at two leading organizations.", "num_citations": "24\n", "authors": ["372"]}
{"title": "Software project management using PROMPT: A hybrid metrics, modeling and utility framework\n", "abstract": " In this paper, we present a \u2018forward-looking\u2019 decision support framework that integrates up-to-date metrics data with simulation models of the software development process in order to support the software project management control function. This forward-looking approach (called the PROMPT method) provides predictions of project performance and the impact of various management decisions. Tradeoffs among performance measures are accomplished using outcome based control limits (OBCLs) and are augmented using multi-criteria utility functions and financial measures of performance to evaluate various process alternatives. The decision support framework enables the program manager to plan, manage and track current software development activities in the short term and to take corrective action as necessary to bring the project back on track. The model provides insight on potential performance impacts\u00a0\u2026", "num_citations": "22\n", "authors": ["372"]}
{"title": "Software process decision support: making process tradeoffs using a hybrid metrics, modeling and utility framework\n", "abstract": " In this paper, we present a\" forward-looking\" decision support framework that integrates timely metrics data with simulation models of the software development process in order to support the software project management control function. This forward-looking approach provides predictions of project performance and the impact of various management decisions. Tradeoffs among performance measures are accomplished using Outcome Based Control Limits (OBCLs) and are augmented using multi-criteria utility functions and financial measures of performance to evaluate various process alternatives. The decision support framework enables the program manager to take corrective action as necessary on a project with the simulation model providing insight on potential performance impacts of the proposed corrective actions. A real world example is presented.", "num_citations": "21\n", "authors": ["372"]}
{"title": "Using software process simulation to assess the impact of IV&V activities\n", "abstract": " Today, organizations like NASA and the US Department of Defense make heavy use of Independent Verification and Validation (IV&V) techniques to improve the quality of systems and reduce the risks associated with the deployment of those systems. As more firms move to global outsourcing of their software development projects, IV&V will become increasingly valuable to companies as part of the their project activities. As a result, there is a critical need for cost effective IV&V. Software process simulation models (SPSMs) can be used to quantify the costs and benefits associated with both V&V and IV&V practices on software projects, enabling management to effectively allocate scarce resources for V&V and IV&V activities. The goals of this research are to quantitatively assess the economic benefit of performing IV&V on software development projects and to optimize that benefit across alternative IV&V plans. In this paper we present a model of one NASA project using the IEEE 12207 software development process with several possible IV&V configurations and assess their costs and benefits.", "num_citations": "20\n", "authors": ["372"]}
{"title": "Combining process feedback with discrete event simulation models to support software project management\n", "abstract": " Effective project management is critical to the success of software development projects and involves, inter alia, two fundamental activities Planning and Control. The former looks ahead to determine what needs to be done, when it is to be done, how it is to be done and who is going to do it. Planning is usually undertaken prior to embarking upon a project or early in the project life cycle. Control is exercised to keep events on course by identifying and correcting deviations from the plan. This second activity has a narrow and immediate focus. It must alert managers to significant deviations from the plan while the project is in process. In combination, the two activities provide timely feedback to maintain the software development process on target. In a domain where \u2018gut feel\u2019and subjective estimates are common, software project managers have often looked for tools and an approach to provide quantitative data on current project status and quantitative estimates on potential project outcomes. To provide an accurate picture of where a project currently is and to make predictions as to where the project is likely to go, the data from which the feedback information is derived must be timely and accurate. This can be facilitated by an ability to quantitatively monitor and assess software projects.", "num_citations": "19\n", "authors": ["372"]}
{"title": "Generalized simulation models: What, why and how\n", "abstract": " In this paper, we define a generalized simulation model as one that can be easily adapted to multiple process contexts using significantly less effort than would be required to develop the original model. We discuss the obstacles and issues associated with developing and maintaining simulation models. We then review the research that has been done to make software process reuse and develop software product families. Finally, we will state our position that developing generalized simulation models can offer important benefits in terms of saving time and improving the quality and usability of the model.", "num_citations": "18\n", "authors": ["372"]}
{"title": "Getting the benefits from software process simulation\n", "abstract": " Software Process Simulation is directly linked to software process improvement. Organizations can use software process simulation at all levels of maturity to obtain significant benefits. Some of the key benefits of Software Process Modeling include:", "num_citations": "18\n", "authors": ["372"]}
{"title": "Exploring the impact of task allocation strategies for global software development using simulation\n", "abstract": " We describe a hybrid computer simulation model of the software development process that is specifically architected to study alternative ways to configure global software development projects, including phased-based, module-based, and follow-the-sun allocation strategies. The model is a hybrid system dynamics and discrete event model. In this paper, test cases have been developed for each allocation strategy, and project duration under each configuration is computed under a range of plausible assumptions for key parameters. The primary finding is that although under ideal assumptions, follow-the-sun is able to produce impressive reductions in time-to-market, under more realistic assumptions the reverse is true, thus corroborating findings by other researchers. Further analysis reveals the presence of some interaction between the assumptions, but the results remain robust.", "num_citations": "16\n", "authors": ["372"]}
{"title": "Evaluating the impact of the quars requirements analysis tool using simulation\n", "abstract": " Adopting new tools and technologies on a development process can be a risky endeavor. Will the project accept the new technology? What will be the impact? Far too often the project is asked to adopt the new technology without planning how it will be applied on the project or evaluating the technology\u2019s potential impact. In this paper we provide a case study evaluating one new technology. Specifically we assess the merits of an automated defect detection tool. Using process simulation, we find situations where the use of this new technology is useful and situations where the use of this new technology is useless for large-scale NASA projects that utilize a process similar to the IEEE 12207 systems development lifecycle. The method can be applied to assessing the impact (including Return on Investment), break even point and the overall value of applying any tool on a project.", "num_citations": "13\n", "authors": ["372"]}
{"title": "Estimating the financial benefit and risk associated with process changes\n", "abstract": " Being able to estimate the value of process changes in financial terms has been identified as an important concern for software project managers. In order to accomplish this, companies need to estimate both the risk and expected value of prospective cash flows associated with performance improvements due to a given process change. In this paper, we present a stochastic simulation based method for predicting the impact of potential process changes in terms of key performance measures: development cost, product quality, and project schedule. Using detailed performance predictions, we develop cash flows associated with the process change and develop financial measures such as Net Present Value (NPV) and Return on Investment (ROI) to assess the financial merits of the change. Because the resulting process performance measures are stochastic, this approach also provides a quantitative measure of investment risk for the proposed process change.In a domain where \u201cgut feel\u201d and subjective estimates are common, software project managers have often looked for tools and an approach to provide quantitative estimates of the benefit of process changes of potential project outcomes at a detailed process level. This paper presents a method for predicting potential risks and rewards of process changes. With this information, process changes can be justified based on expected return and risk and the necessary management approval and buy-in for process improvement projects can be obtained.", "num_citations": "13\n", "authors": ["372"]}
{"title": "Evaluating the impact of requirements analysis tools using simulation\n", "abstract": " Adopting new tools and technologies on a development process can be a risky endeavor. Will the project accept the new technology? What will be the impact? Far too often the project is forced to adopt the new technology without planning how it will be applied on the project or evaluating the technology's potential impact. In this article, we provide a case study evaluating a new technology. Specifically we assess the merits of an automated requirements analysis tool. First, we provide a background on automated requirements analysis tool technology. Then, using Process Simulation (P\u2010SIM), we find situations where the use of this new technology is useful and situations where the use of this new technology is useless for large\u2010scale NASA projects that utilize a process similar to the IEEE 12207 systems development life cycle. The method can be applied in assessing the impact (including Return on Investment\u00a0\u2026", "num_citations": "12\n", "authors": ["372"]}
{"title": "Assessing IV & V benefits using simulation\n", "abstract": " There is a critical need for cost effective independent verification and validation (IV & V). The goal of this research is to create a flexible tool that NASA IV & V can use to quantitatively assess the economic benefit of performing IV & V on NASA software development projects and to optimize that benefit across alternative IV & V plans. The tool is based on extensive research into software process simulation models (SPSMs) conducted at the Software Engineering Institute (SEI) by Watts Humphrey and Marc Kellner (1989), and Bill Curtis and others (1992). SPSMs can be used to quantify the costs and benefits associated with NASA IV & V practices enabling management to effectively allocate scarce resources for IV & V activities. In addition, SPSMs facilitate the IV & V of NASA software development processes by enabling checks and performance assessments.", "num_citations": "12\n", "authors": ["372"]}
{"title": "Understanding the role of defect potential in assessing the economic value of process improvements\n", "abstract": " Software companies face relentless pressure to reduce costs, improve quality, and improve time-to-market. To accomplish these objectives and to remain competitive, companies must improve their software development processes. Before companies invest in process improvement activities, management would like to know the economic value of potential process changes and to prioritize process changes based upon potential return.Financial techniques have been applied to assess the economic value of various process improvement activities. These include simple payback and cost-benefit ratios [Curtis, 1995; McGibbon, 1996], standard present value techniques [Slaughter, 1998; Vienneau, 1995; Harrison, Raffo, and Settle, 1999b, 1999c], risk and return formulations [Harrison, Raffo, and Settle, 1999a] and options theory [Sullivan, 1996; Sullivan, Chalasani, and Jha, 1997], to name just a few. Such techniques have provided insight and tools for managers making economic based decisions about software process improvements.", "num_citations": "12\n", "authors": ["372"]}
{"title": "Evaluating the impact of a new technology using simulation: The case for mining software repositories\n", "abstract": " Adopting new technologies on a development process can be a risky endeavor. Will the project accept the new technology? What will be the impact? Far too often the project is asked to adopt the new technology without planning how it will be applied on the project or evaluating the technology\u2019s potential impact. In this paper we provide a case study evaluating one new technology. Specifically we assess the merits of defect detectors learned from software repositories of static code measures (Halstead and McCabe). Using process simulation, we find situations where the use of such detectors is useful and situations where the use of such detectors is useless for large-scale NASA projects that utilize a process similar to the IEEE 12207 systems development lifecycle.", "num_citations": "11\n", "authors": ["372"]}
{"title": "Supporting software process decisions using bi-directional simulation\n", "abstract": " In this paper, we present a \"forward-looking\" decision support framework that integrates timely metrics data with a simulation based defect model of the software development process in order to support software project management decisions regarding product quality. These predictions are evaluated using Outcome Based Control Limits (OBCLs) and Bi-Directional (both forward and reverse) simulation models of the software development process. The Bi-Directional models provide useful guidance to the program manager when evaluating possible corrective actions on a project that has gone outside the OBCLs. The forward model predicts the potential performance impacts of the proposed corrective actions. The reverse simulation models are new and take the desired system outcome as the starting point and represent the system as it evolves backward in time to identify the necessary starting point to achieve the\u00a0\u2026", "num_citations": "11\n", "authors": ["372"]}
{"title": "Integrating Lean principles with value based software engineering\n", "abstract": " Lean Six-sigma principles and methods have been successfully applied in a variety of industries. Many of the core principles of Lean Six-sigma can be applied to software development to dramatically improve performance with some industry specific adaptations. In this regard, Lean Six-sigma principles can be made to further leverage the benefits of software engineering best practices to improve work flow and the tactical management of the project. The Value Based Software Engineering (VBSE) process as practiced today, begins the software development lifecycle (SDLC) with a sophisticated customer value analysis (CVA) which is coupled with a quantitative evaluation of pricing and profitability options followed by development of the software. The CVA yields a wealth of information not only for product features, but also for improving all processes within the organization that touch the customer. This paper seeks\u00a0\u2026", "num_citations": "10\n", "authors": ["372"]}
{"title": "Roadmapping the future of sustainable IT\n", "abstract": " Over the past decade, IT organizations have increasingly embraced the notion of incorporating sustainable business practices into the design and operation of information technology products and systems. Initial efforts focused on enabling the more efficient use of computing resources in terms of reducing energy consumption and its corresponding carbon footprint. The reduction of computing-centric energy use in data centers and throughout the firm summarizes the first wave of sustainable IT, often called \u201cgreen IT.\u201d However, the emerging second wave will be much more difficult for IT managers to define and successfully navigate. IT products and services have become ubiquitous in developed countries and are being rapidly adopted in emerging economies. Information technology has become highly visible in terms of it benefits and its costs to society. The future of sustainable IT will be driven by government\u00a0\u2026", "num_citations": "10\n", "authors": ["372"]}
{"title": "Exploring capability maturity models and relevant practices as solutions addressing information technology service offshoring project issues\n", "abstract": " This research investigated Capability Maturity Models (CMMs) / Capability Maturity Model Integration (CMMI) best practices and their effects on managing and mitigating critical issues associated with offshore development. Using a web-based survey, data were collected from 451 Information Technology (IT) and software development firms in the US. The results of the analysis show that IT companies applying CMM/CMMI models have fewer issues associated with IT offshoring. When US IT companies utilizing and incorporating different practices from Team Software Process (TSP) and People CMM into CMMI-DEV/SVC is CMMI for Development and Services (CMMI-DEV/SVC) and CMMI for Acquisition (CMMI-ACQ), they have fewer offshoring issues related to language barriers and cultural differences.", "num_citations": "8\n", "authors": ["372"]}
{"title": "Evolutionary verification and validation of software process simulation models\n", "abstract": " Verification and validation are ongoing issues in the development of effective software and simulation models. It is simply not possible to test the full parameter space of large, complex software process simulation models (SPSMs), so most verification and validation approaches emphasize methods such as bounds-checking, sensitivity analysis, and scenario analysis. This paper discusses an idea we refer to as evolutionary verification and validation (EVV), where the SPSM is exercised over the entire range of its parameter space using a genetic, or other evolutionary algorithm. This idea originated from research into the use of genetic algorithms for optimization of general purpose discrete event simulation models. This paper will focus on the use of EVV to improve the verification and validation of SPSMs. Evolutionary algorithms have two characteristics useful for verification and validation of simulation models. First\u00a0\u2026", "num_citations": "7\n", "authors": ["372"]}
{"title": "Assessing the Value of Improved Predictability due to Process Improvements\n", "abstract": " Many software organizations have reported the benefits of implementing process improvement activities. However, unlike many other benefits associated with process improvement such as reduced rework and productivity gains, it is difficult to associate objective financial benefits with improved predictability. We propose a technique based on a variation of the Capital Asset Pricing Model and Net Present Value to monetarily quantify the improved predictability gained by process improvement.", "num_citations": "7\n", "authors": ["372"]}
{"title": "Measuring the value from improved predictions of software process improvement outcomes using risk-based discount rates\n", "abstract": " It is desirable to evaluate software process improvements in terms of their expected benefits. However, such benefits cannot be considered \u201csure things\u201d. There is always an element of risk involved regarding whether the investment will pay off. We can imagine techniques that (for a price) may provide more accurate predictions of the benefits of a process change. Such improved predictions can reduce the perceived risk of the change. In this paper, we describe a way in which we can establish a monetary value for this reduction in perceived risk. Once we know how much a certain reduction in risk is worth to us, we have a convenient way for establishing the amount we are willing to invest in the improved prediction capability.", "num_citations": "7\n", "authors": ["372"]}
{"title": "Bi-directional product development process simulation\n", "abstract": " A bi-directional software development process simulation model is described. The model simulates the stages of a software development process, using equations relating to defect injection and detection and parameters describing detection and injection rates. With forward development process simulation, predictions can be made for process outcomes. By simulating in the reverse direction, defect detection requirements can be found for each stage of the model to achieve a desired performance result. Outcome-based control levels are utilized with the model to better detect whether a process is out of control. By going between the forward and reverse simulation directions, control of the process can be fine-tuned as defect detection data is obtained during process execution. In addition to quality as measured by defects, other metrics can be simulated, including cost, time, and features; similarly other product\u00a0\u2026", "num_citations": "6\n", "authors": ["372"]}
{"title": "Towards a software process simulation model of globally distributed software development projects\n", "abstract": " Distributed development is becoming a dominant paradigm in the software industry. Conducting development projects in multiple countries offers many potential benefits including significantly reduced cost and better response times. When using a globally distributed software development paradigm, the process used to develop software is more important than ever. Software Process Simulation Modeling (SPSM) can be used to support companies in designing and defining processes, quantitatively managing process, and continuously improving process. The discrete event paradigm and system dynamic paradigm compliment each other and together enable the construction of models that capture both the dynamic nature of project variables and the complex sequences of discrete activities that take place. Thus, we believe that the ideal SPSM for representing GDSD projects would have to effectively support both\u00a0\u2026", "num_citations": "6\n", "authors": ["372"]}
{"title": "Heuristic optimization as a V&V tool for software process simulation models\n", "abstract": " This work illustrates the use of heuristic algorithms to improve the verification and validation of software process simulation models. To use this approach, an optimization problem is formulated to guide a heuristic search algorithm that will attempt to locate particular combinations of parameter values that yield surprising results. These surprising results often help the modeler to identify flaws in the model logic that would otherwise remain undetected. The general concepts are discussed and a simple example is provided. Copyright \u00a9 2005 John Wiley & Sons, Ltd.", "num_citations": "5\n", "authors": ["372"]}
{"title": "Process improvement as a capital investment: Risks and Deferred Paybacks\n", "abstract": " Firms invest in process improvements in order to benefit from decreased costs and/or increased productivity sometime in the future. However, there are a large number of alternate improvements available, each of which may yield different levels of cost savings. To make things even more complicated, different alternatives may result in different savings over different periods of time with different levels of risk. Thus, we're faced with the question:\" in which opportunity should we invest?\" We present a well-accepted method of budgeting for capital expenditures from the financial community, and apply it to software process", "num_citations": "5\n", "authors": ["372"]}
{"title": "Preparing for a new era\n", "abstract": " In this issue you will see several developments: an updated Aims and Scope; a revised Editorial Board; and a new Editor in Gerardo Canfora, who directly replaces Aniello Cimitile. On behalf of all our readers, we would like to say a sincere \u2018thank you\u2019to Aniello, for all his efforts and work on the journal over the past years. His work has increased the reputation of the journal, attracted high quality papers, and ensured a fair and prompt review process to authors of submitted papers; this is well evidenced by looking at the increasing impact factor for the journal over the recent years. Of course, there is always space for improvement, and we are committed to improving the experience of authors who submit their papers to the journal. The reviewing time of a submission depends upon a number of factors, including the length of the paper and the workload of editorial board members and reviewers. We are continuing work to improve the process to reduce any delay in the reviewing process.", "num_citations": "4\n", "authors": ["372"]}
{"title": "When is pair programming better?\n", "abstract": " A growing number of people are advocating the use of agile processes (AP) in software development. But to date, there have been few arguments, if any, that would convince the doubters of AP\u2019s benefit over conventional development methods. Ideally, one would present detailed empirical observations, but the field is too young. Because of this, we must instead turn to model-based results. In this article we explore the economic benefits of one of AP\u2019s core practices, pair programming. We examine several claims as to why pair programming is beneficial; and specifically, in what situations pair programming proves more beneficial than conventional methods.NOTE TO REVIEWERS: This document is 4802 words, plus four figures at 300 words/figure; ie 6002 words in IEEE Computer count. This document is laid out assuming the the appendices will become side-bars in the final document. The IEEE Computer standard is that 15% of the 6000 words (ie 900 words) be introductory tutorial material. Our introductory material are the 1204 words in Appendix A and Appendix B.", "num_citations": "4\n", "authors": ["372"]}
{"title": "Analysing Process Improvements Using the Process Tradeoff Analysis Method\n", "abstract": " This paper describes a field study conducted at a leading software development firm to quantitatively analyze the impact of one particular process change on the firm's current development process. The purpose of the study was to apply the Process Tradeoff Analysis (PTA) Method to a complex real-world process change problem. The PTA Method is a systematic approach for (1) identifying potential process improvements and (2) analyzing and selecting the set of process improvements which provide the largest benefit. The evaluation of the process improvements is accomplished using quantitative process models which assess the impact of a potential process change using the three key performance measures of: development cost, product quality, and project schedule. In this paper, we discuss the process and process change that was studied, the models that were developed, and the results of the study.", "num_citations": "4\n", "authors": ["372"]}
{"title": "A comparison of software process modeling techniques\n", "abstract": " Effective management of software development projects requires that the manager make decisions concerning the development process, resource allocation, and schedule. All of these decisions ultimately require some quantitative estimation of the consequences of the alternatives. Software process modeling has become a popular way to conduct controlled investigations of alternatives. This paper discusses the advantages and limitations of two popular techniques for modeling software projects. A sample project is modeled and discussed in each method.", "num_citations": "4\n", "authors": ["372"]}
{"title": "The role of process improvement in delivering customer and financial value\n", "abstract": " From a strategic standpoint, improving the software development processes is becoming critically important. However, it is difficult to determine which processes to improve. We propose viewing process changes along strategic lines-with the goal of improving customer value. We then present an approach for evaluating proposed process changes quantitatively in terms of cost, quality, and schedule and determine the return on investment.", "num_citations": "4\n", "authors": ["372"]}
{"title": "Managing issues through the lifecycle of IT service offshoring projects\n", "abstract": " Western countries' information technology and software intensive firms are increasingly producing software and IT services in developing countries. With this swift advancement in offshoring, there are many issues that can be investigated to enable companies to maximize their benefit from offshoring. However, significant challenges can happen throughout the lifecycle of offshoring IT service projects which turn the potential benefits into losses. This research investigated CMM/CMMI best practices and their effect on managing and mitigating critical issues associated with offshore development.", "num_citations": "3\n", "authors": ["372"]}
{"title": "Understanding student preferences in online education\n", "abstract": " Higher education is at a crossroads. Universities face a combination of increased costs, increased competition, changing enrollments, and the introduction of new disruptive technologies with the potential to threaten their core product offerings. In response to these challenges, universities across the country are moving rapidly toward offering more online courses and programs. But in doing so, they are faced with questions with no clear answers: How should university courses (online and face-to-face courses) be designed? What do prospective and current students value about university level courses today and in the future? Are there factors that if included in the design of courses will increase student selection and retention in these courses? This paper presents results from a survey of over 390 respondents that addresses student characteristics and student preferences for different educational delivery options\u00a0\u2026", "num_citations": "3\n", "authors": ["372"]}
{"title": "Customer-value engineering in the software development process\n", "abstract": " Summary form only given. This paper describes ongoing work to develop a new software development process we call Value-Based Software Engineering (VBSE). VBSE brings together work in customer value analysis and the architectural branch of software engineering to directly link relevant software design decisions to both tactical and strategic business objectives. VBSE provides a systematic process for analyzing customer value, casting the results in terms of architectural quality requirements, and then developing architectural structures that satisfy those requirements. Architectural analysis techniques support verification of the match between the resulting design and business goals. VBSE institutionalizes the necessary communication between stakeholders in the software development process. It actively involves customers in setting goals and actively involves management and marketing in critical product\u00a0\u2026", "num_citations": "3\n", "authors": ["372"]}
{"title": "Software Process Simulation Modeling (ProSim'98): Workshop Report\n", "abstract": " Software companies are faced with constant changes and increased demands for improvements to cycle time, costs, and quality. Software Process Simulation has shown to be an effective tool to evaluate changes made to a software project or development organization and to help manage these changes. The Silver Falls Workshop on Software Process Simulation Modeling (ProSim) brings both researchers and practitioners together in order to jointly explore the benefits of, and issues involved in, Software Process Simulations. The focus of this workshop is on both the application of software process simulation research in addressing real-world problems, as well as advances being made which will provide the foundation for Software Process Simulation modeling in the future. This paper provides a report on the ProSim\u201998 workshop and a summary of the technical program.", "num_citations": "3\n", "authors": ["372"]}
{"title": "Managing issues of IT service offshore outsourcing projects\n", "abstract": " Western countries\u2019 information technology and software intensive firms are increasingly producing software and IT services in developing countries. Regardless of the swift advancement in offshore outsourcing, there are arrays of issues that must be investigated in order for companies to benefit from the offshore outsourcing. Numerous significant benefits can be accomplished through the successful management of offshore outsourcing. Critical issues are the challenges that can happen throughout the lifecycle of offshore outsourcing IT service projects. This research will investigate these critical issues throughout the whole lifecycle of executed offshore outsourcing projects in the IT service industry from the client managerial perspective.", "num_citations": "2\n", "authors": ["372"]}
{"title": "Process simulation will soon come of age: Where's the party?\n", "abstract": " Summary form only given. Joint work with Maria Mateescu. Propagation models provide a framework for describing algorithms for the transient analysis of stochastic state transition systems, such as computing event probabilities, expectancies, and variances on biochemical reaction networks. We discuss the syntax, semantics, and pragmatics of propagation models. We give three use cases for propagation models: the chemical master equation, the reaction rate equation, and a hybrid method that combines these two equations. We present a propagation abstract data type (ADT) for implementing uniformization and integration algorithms on propagation models. The propagation ADT is based on an update operator, which propagates continuous mass values through a discrete state space. The update operator can be implemented using a threshold abstraction, which propagates only \u201csignificant\u201d mass values and\u00a0\u2026", "num_citations": "2\n", "authors": ["372"]}
{"title": "Editorial software process: The end of an era\n", "abstract": " Editorial software process:The end of an era - Lancaster EPrints LOADING Skip to main content Lancaster University homepage Home Browse By Year By Subject By Department Search Help Editorial software process:The end of an era Dalcher, Darren and Raffo, David (2009) Editorial software process:The end of an era. Software Process Improvement and Practice, 14 (6). pp. 303-304. ISSN 1077-4866 Full text not available from this repository. Official URL: https://doi.org/10.1002/spip.Item Type: Journal Article Journal or Publication Title: Software Process Improvement and Practice Uncontrolled Keywords: /dk/atira/pure/subjectarea/asjc/1700/1712 Subjects: Departments: Lancaster University Management School > Management Science ID Code: 134746 Deposited By: ep_importer_pure Deposited On: 22 Jun 2019 09:18 Refereed?: Yes Published?: Published Last Modified: 01 Jan 2020 12:04 URI: https://eprints...\u2026", "num_citations": "2\n", "authors": ["372"]}
{"title": "Introduction to issue 8: 3: software process improvement is alive and well\n", "abstract": " Introduction to issue 8:3:Software process improvement is alive and well: Editorial - Lancaster EPrints LOADING Skip to main content Lancaster University homepage Home Browse By Year By Subject By Department Search Help Introduction to issue 8:3:Software process improvement is alive and well: Editorial Dalcher, Darren and Raffo, David (2003) Introduction to issue 8:3:Software process improvement is alive and well: Editorial. Software Process Improvement and Practice, 8 (3). pp. 133-134. ISSN 1077-4866 Full text not available from this repository. Official URL: https://doi.org/10.1002/spip.Item Type: Journal Article Journal or Publication Title: Software Process Improvement and Practice Uncontrolled Keywords: /dk/atira/pure/subjectarea/asjc/1700/1712 Subjects: Departments: Lancaster University Management School > Management Science ID Code: 134761 Deposited By: ep_importer_pure Deposited On: :?:\u2026", "num_citations": "2\n", "authors": ["372"]}
{"title": "Value-based software engineering (vbse): A value-driven approach to\n", "abstract": " We consider a set of programs a family when it pays to look at their common aspects before looking at their differences. For commercial software developers the implications are twofold: First, making rational decisions about product-line processes and products requires the ability to answer the question:\u201cDoes it pay?\u201d Second, whether or not something pays is ultimately a business (rather than software engineering) question. In short, making sound software engineering decisions requires understanding the business implications of those decisions, and vice versa. This paper describes work in progress to develop a product-line process model and common value metric that adequately link product value drivers (what it pays) with the software engineering decisions that affect those drivers. In it, we describe a systematic approach to quantifying the return on investment for both product and process improvements based on common software engineering principles and a common value metric, customer value. Key words: Software product-line, product line economics, value driver, customer value, value-based software engineering 1.", "num_citations": "2\n", "authors": ["372"]}
{"title": "Quantitative process modeling as a basis for managing software engineering process improvement\n", "abstract": " Managers are now looking toward improving their processes as a method for gaining control over software development activities. This paper discusses collaborative research to quantitatively assess the capabilities of software development processes and the performance characteristics of the products produced by those processes. This work supports company strategies for achieving higher levels software process capability.", "num_citations": "2\n", "authors": ["372"]}
{"title": "Capturing software process and product characteristics in process models using task element decomposition\n", "abstract": " Improving software processes is a major concern for many organizations. Software project managers are concerned with questions such as: determining which development phases are essential and which phases can be skipped to reduce development costs; determining whether inspections are worthwhile; predicting the benefit associated with implementing a proposed process change before a substantial commitment of resources is made; and determining how to prioritize potential process changes. To evaluate these questions, many product and process factors such as source code quality, complexity, and size, developer skill, and tools must be taken into account. Also, the inherent stochastic nature of software development must be captured.Task Element Decomposition (TED) is a new approach which was designed specifically for modeling software development work. This method can capture variations and correlations due to code size and complexity, quality differences among components at different stages of development, and variations in the work performed by developers. This method is embedded in", "num_citations": "2\n", "authors": ["372"]}
{"title": "Software: evolution and process A new journal is born\n", "abstract": " Practice\u201d that have successfully served their respective communities for many years. We will work to ensure that all the positive aspects of the parent journals remain in place, and to make changes that we believe will help the new journal to gain and sustain a leadership position. Nowadays, the way in which software systems are conceived, built, and managed is changing profoundly; open-source and commercial-off-the-shelf products, service-oriented architectures and cloud computing, mobile and pervasive applications, agile methods and lean organizations, DevOps, outsourcing and global development, software as service, value-based software engineering, benefitdriven development and usability engineering, and user enhanceable systems are a few examples of areas that have had an impact on software development, management, and evolution methods and processes. In this rapidly evolving scenario, we have the ambition to offer a new peer-reviewed archival journal that addresses the issues of software conception, development, management, evolution and improvement with a multidisciplinary view that encompasses technologies, processes, services, people, and organizations. The success of this enterprise depends primarily on the quality of papers we will attract: we welcome high-quality papers reporting theoretical findings, empirical investigations, practice reports and state-of-the-art reviews on all aspects of planning, designing, building and evolving large, complex software systems and improving the processes, capabilities and practices required to develop, manage and govern such systems. We also continue to welcome\u00a0\u2026", "num_citations": "1\n", "authors": ["372"]}
{"title": "Software Process Dynamics and Agility\n", "abstract": " This volume contains papers presented at the International Conference on Software Process (ICSP 2007) held in Minneapolis, USA, May 19-20, 2007. ICSP 2007 comprised two successful series of process-related workshops, the International Workshop on Software Process Simulation and Modeling (ProSim) and the Software Process Workshop (SPW).The theme of ICSP 2007 was \u201cCoping with Software Process Dynamics and Agility.\u201d Software developers work in a dynamic context of frequently changing technologies and limited resources. Globally distributed development teams are under ever-increasing pressure to deliver their products more quickly and with higher levels of quality. At the same time, global competition is forcing software development organizations to cut costs by rationalizing processes, outsourcing part or all of their activities, reusing existing software in new or modified applications and\u00a0\u2026", "num_citations": "1\n", "authors": ["372"]}
{"title": "Introduction to software process: improvement and practice, volume 10 looking forward to the future: expanding the scope of the process area\n", "abstract": " This issue marks a special turning point for the journal and for us as editors. Firstly, it inaugurates the third volume for which we have personally been responsible as editors. Secondly, it indicates yet another growth point for the journal in terms of content, page count and future direction. As you are no doubt aware, SPIP continues to be the main journal focusing on process capability, maturity and improvement. During 2004, we have seen an encouraging growth in the number (and quality) of articles submitted to SPIP. The message is clear, the process community is alive and well, and is keen to share lessons, ideas and perspectives. Many conferences now have tracks dedicated to the software process, process improvement, product families, capability and maturity, SPI or CPI. With the emergence of new paradigms, methodologies and tools, the potential scope for discussion and the topic area encompassed by the\u00a0\u2026", "num_citations": "1\n", "authors": ["372"]}
{"title": "Introduction to issue 9: 1: software process improvement for all\n", "abstract": " In this issue, you will find another collection of articles related to the software process and SPI. Software process improvement initiatives can be used in a variety of contexts and initiatives, ranging in size from large multinational agencies to small local companies. The articles therefore reflect current practice in a variety of contexts offering useful advice and experience. The first article describes the implementation of the SPI programme in France Telecom Research and Development in 1999. The implementation was based on an SDCA cycle followed by a PDCA cycle. The introduction of new programmes encompasses many challenges. In order to control the results and improve the likelihood of success, the team utilized a detailed risk-management approach. The methodology selected (RISKMAN) was used throughout the implementation process and proved essential in identifying, tracking and controlling risks\u00a0\u2026", "num_citations": "1\n", "authors": ["372"]}
{"title": "Introduction to issue 8: 1: software process improvement standards\n", "abstract": " This issue features a wealth of information regarding the maturity of the discipline of software process improvement. All papers are concerned with standards in the process area showing the extent and depth of activity currently taking place in the software process field. The first three papers provide a linked theme by focusing on ISO/IEC 15504 in terms of the present, the future and the possible long-term future. The final paper covers the standard in terms of personal experience in attaining the highest level.The first paper considers the new emerging international standard for process assessment ISO/IEC 15504. The capability of the process is typically measured through the assignment of ratings to process attributes by assessors and is thus subject to bias and errors. The paper reports on a study of 29 assessments based on ISO/IEC 15504 involving 116 different assessors and 364 process instances conducted in\u00a0\u2026", "num_citations": "1\n", "authors": ["372"]}
{"title": "Introduction to software process: improvement and practice, volume 8\n", "abstract": " There have been tremendous changes in the software industry in the past 5 years. Innovations in hardware, software, and communication platforms have enabled many new technology-based products and services to be developed. These new products coupled with fierce competition have driven changes to how software-intensive systems are developed. The result has been the emergence of new paradigms, methodologies and tools for developing software-intensive systems including globally distributed software development, open source development, free-market software development, value-based software engineering, productline engineering, agile software development methods, and the Rational Unified Process, to name just some of the more recent entrants. Moreover, in the last decade, there has been an increasing recognition of the value of and the need to draw upon research being done in other\u00a0\u2026", "num_citations": "1\n", "authors": ["372"]}
{"title": "Translating process changes from one development environment to another\n", "abstract": " Summary form only given. Translating the results from one development environment to another is not an easy task. The authors present practical examples of how translating process improvement results might be done and the considerations involved. They discuss how tools may be applied and how the differences between the two environments and their interaction with the process change may be assessed.", "num_citations": "1\n", "authors": ["372"]}