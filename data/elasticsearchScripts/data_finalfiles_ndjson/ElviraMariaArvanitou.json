{"title": "A bibliometric assessment of software engineering scholars and institutions (2010\u20132017)\n", "abstract": " This paper presents the findings of a bibliometric study, targeting an eight-year period (2010\u20132017), with the aim of identifying: (a) emerging research directions, (b) the top-20 institutions, and (c) top-20 early stage, consolidated, and experienced scholars in the field of software engineering. To perform this goal, we performed a bibliometric study, by applying the mapping study technique on top-quality software engineering venues, and developed a dataset of 14,456 primary studies. As the ranking metric for institutions, we used the count of papers in which authors affiliated with this institute have been identified in the obtained dataset, whereas regarding scholars we computed the corresponding rankings based on the number of published papers and the average number of citations. Finally, we identified the top-20 rising scholars in the SE research community, based on their recent publication record (between 2015\u00a0\u2026", "num_citations": "26\n", "authors": ["1237"]}
{"title": "JCaliper: search-based technical debt management\n", "abstract": " Technical Debt (TD) reflects problems in software maintainability along evolution. TD principal is defined as the effort required for refactoring an existing system to an ideal one (aka optimal) that suffers from no maintainability problems. One of the open problems in the TD community is that ideal versions of systems do not exist, and there are no methods in the literature for approaching them, even theoretically. To alleviate this problem, in this paper we propose an efficient TD management strategy, by applying Search-Based Software Engineering techniques. In particular, we focus on one specific aspect of TD, namely inefficient software modularity, by properly assigning behavior and state to classes through search space exploration. At the same time, in the context of TD, we:(a) investigate the use of local search algorithms to obtain a near-optimum solution and propose TD repayment actions (ie, refactorings), and\u00a0\u2026", "num_citations": "6\n", "authors": ["1237"]}
{"title": "Applying Machine Learning in Technical Debt Management: Future Opportunities and Challenges\n", "abstract": " Technical Debt Management (TDM) is a fast-growing field that in the last years has attracted the attention of both academia and industry. TDM is a complex process, in the sense that it relies on multiple and heterogeneous data sources (e.g., source code, feature requests, bugs, developers\u2019 activity, etc.), which cannot be straightforwardly synthesized; leading the community to using mostly qualitative empirical methods. However, empirical studies that involve expert judgement are inherently biased, compared to automated or semi-automated approaches. To overcome this limitation, the broader (not TDM) software engineering community has started to employ machine learning (ML) technologies. Our goal is to investigate the opportunity of applying ML technologies for TDM, through a Systematic Literature Review (SLR) on the application of ML to software engineering problems (since ML applications on\u00a0\u2026", "num_citations": "2\n", "authors": ["1237"]}
{"title": "A bibliometric assessment of software engineering themes, scholars and institutions (2013\u20132020)\n", "abstract": " This paper is the updated version (2013\u20132020) of the series of papers on emerging themes, top scholars and institutes on software engineering (SE), published by the Journal of Systems and Software for almost 25 years. The paper reports the findings of a bibliometric study by applying the systematic mapping technique on top-quality software engineering venues (handling a dataset of 11.668 studies). The design of the study remains the same for the complete decade, so that the results are consistent and comparable: As the ranking metric for institutions, we used the count of papers in which authors affiliated with the corresponding institute have been identified in the obtained dataset. Regarding scholars we computed the corresponding rankings based on the number of published papers and the average number of citations. In this version, the analysis of emerging trends and themes has been promoted compared\u00a0\u2026", "num_citations": "1\n", "authors": ["1237"]}
{"title": "Change impact analysis: A systematic mapping study\n", "abstract": " Change Impact Analysis (CIA) is the process of exploring the tentative effects of a change in other parts of a system. CIA is considered beneficial in practice, since it reduces cost of maintenance and the risk of software development failures. In this paper, we present a systematic mapping study that covers a plethora of CIA methods (by exploring 111 papers), putting special emphasis on how the CIA phenomenon can be quantified: to be efficiently managed. The results of our study suggest that: (a) the practical benefits of CIA cover any type of maintenance request (e.g., feature additions, bug fixing) and can help in reducing relevant cost; (b) CIA quantification relies on four parameters (instability, amount of change, change proneness, and changeability), whose assessment is supported by various metrics and predictors; and (c) in this vast research field, there are still some viewpoints that remain unexplored (e.g., the\u00a0\u2026", "num_citations": "1\n", "authors": ["1237"]}
{"title": "Proposing and empirically validating change impact analysis metrics\n", "abstract": " Bij het onderhoud van de software is de software onderhevig aan veranderingen als gevolg van het verhelpen van fouten, veranderende eisen, aanvullende eisen, enz. Het belang van het laag houden van de onderhoudskosten is benadrukt in de literatuur met empirisch bewijs, waaruit blijkt dat de kosten van deze fase ongeveer 50%-75% uitmaken van de totale kosten van softwareontwikkeling. Deze kosten kunnen nog verder oplopen als de software wordt gekenmerkt door (a) veranderingsgevoeligheid, dwz de waarschijnlijkheid dat een softwareartefact om interne redenen verandert (dwz het oplossen van bugs in dat artefact of het wijzigen van eisen met betrekking tot het artefact); en (b) instabiliteit, dwz de waarschijnlijkheid dat een softwareartefact verandert als gevolg van veranderingen in andere artefacten van het systeem.Het proces dat veranderingsgevoeligheid en instabiliteit onderzoekt wordt change impact analysis genoemd; dit proces is niet alleen belangrijk tijdens het onderhoud, maar ook tijdens de andere ontwikkelingsfasen, zoals requirements engineering, ontwerp, implementatie en testen. Change impact analysis is gebaseerd op de kwantificering van veranderingsgevoeligheid en instabiliteit, om beslissingen te kunnen nemen over welke veranderingen moeten worden uitgevoerd, en hoe en wanneer. In de literatuur zijn echter de volgende beperkingen vastgesteld met betrekking tot de praktijken van effectbeoordelingen van veranderingen:", "num_citations": "1\n", "authors": ["1237"]}