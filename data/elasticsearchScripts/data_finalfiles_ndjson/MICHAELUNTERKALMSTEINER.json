{"title": "A multi-case study of agile requirements engineering and the use of test cases as requirements\n", "abstract": " ContextIt is an enigma that agile projects can succeed \u2018without requirements\u2019 when weak requirements engineering is a known cause for project failures. While agile development projects often manage well without extensive requirements test cases are commonly viewed as requirements and detailed requirements are documented as test cases.ObjectiveWe have investigated this agile practice of using test cases as requirements to understand how test cases can support the main requirements activities, and how this practice varies.MethodWe performed an iterative case study at three companies and collected data through 14 interviews and two focus groups.ResultsThe use of test cases as requirements poses both benefits and challenges when eliciting, validating, verifying, and managing requirements, and when used as a documented agreement. We have identified five variants of the test-cases-as-requirements\u00a0\u2026", "num_citations": "58\n", "authors": ["210"]}
{"title": "An industrial case study on test cases as requirements\n", "abstract": " It is a conundrum that agile projects can succeed \u2018without requirements\u2019 when weak requirements engineering is a known cause for project failures. While Agile development projects often manage well without extensive requirements documentation, test cases are commonly used as requirements. We have investigated this agile practice at three companies in order to understand how test cases can fill the role of requirements. We performed a case study based on twelve interviews performed in a previous study. The findings include a range of benefits and challenges in using test cases for eliciting, validating, verifying, tracing and managing requirements. In addition, we identified three scenarios for applying the practice, namely as a mature practice, as a de facto practice and as part of an agile transition. The findings provide insights into how the role of requirements may be met in agile development\u00a0\u2026", "num_citations": "24\n", "authors": ["210"]}
{"title": "Automatic detection of causality in requirement artifacts: the cira approach\n", "abstract": " [Context & motivation:] System behavior is often expressed by causal relations in requirements (eg, If event 1, then event 2). Automatically extracting this embedded causal knowledge supports not only reasoning about requirements dependencies, but also various automated engineering tasks such as seamless derivation of test cases. However, causality extraction from natural language (NL) is still an open research challenge as existing approaches fail to extract causality with reasonable performance.[Question/problem:] We understand causality extraction from requirements as a two-step problem: First, we need to detect if requirements have causal properties or not. Second, we need to understand and extract their causal relations. At present, though, we lack knowledge about the form and complexity of causality in requirements, which is necessary to develop a suitable approach addressing these two problems\u00a0\u2026", "num_citations": "7\n", "authors": ["210"]}
{"title": "Automatic extraction of cause-effect-relations from requirements artifacts\n", "abstract": " Background: The detection and extraction of causality from natural language sentences have shown great potential in various fields of application. The field of requirements engineering is eligible for multiple reasons:(1) requirements artifacts are primarily written in natural language,(2) causal sentences convey essential context about the subject of requirements, and (3) extracted and formalized causality relations are usable for a (semi-) automatic translation into further artifacts, such as test cases.Objective: We aim at understanding the value of interactive causality extraction based on syntactic criteria for the context of requirements engineering.Method: We developed a prototype of a system for automatic causality extraction and evaluate it by applying it to a set of publicly available requirements artifacts, determining whether the automatic extraction reduces the manual effort of requirements formalization.Result\u00a0\u2026", "num_citations": "3\n", "authors": ["210"]}
{"title": "Early requirements traceability with domain-specific taxonomies-A pilot experiment\n", "abstract": " Background: Establishing traceability from requirements documents to downstream artifacts early can be beneficial as it allows engineers to reason about requirements quality (e.g. completeness, consistency, redundancy). However, creating such early traces is difficult if downstream artifacts do not exist yet. Objective: We propose to use domain-specific taxonomies to establish early traceability, raising the value and perceived benefits of trace links so that they are also available at later development phases, e.g. in design, testing or maintenance. Method: We developed a recommender system that suggests trace links from requirements to a domain-specific taxonomy based on a series of heuristics. We designed a controlled experiment to compare industry practitioners\u2019 efficiency, accuracy, consistency and confidence with and without support from the recommender. Results: We have piloted the experimental\u00a0\u2026", "num_citations": "3\n", "authors": ["210"]}
{"title": "Replicating Relevance-Ranked Synonym Discovery in a New Language and Domain\n", "abstract": " Domain-specific synonyms occur in many specialized search tasks, such as when searching medical documents, legal documents, and software engineering artifacts. We replicate prior work on ranking domain-specific synonyms in the consumer health domain by applying the approach to a new language and domain: identifying Swedish language synonyms in the building construction domain. We chose this setting because identifying synonyms in this domain is helpful for downstream systems, where different users may query for documents (e.g., engineering requirements) using different terminology. We consider two new features inspired by the change in language and methodological advances since the prior work\u2019s publication. An evaluation using data from the building construction domain supports the finding from the prior work that synonym discovery is best approached as a learning to rank task\u00a0\u2026", "num_citations": "1\n", "authors": ["210"]}
{"title": "Software Process Improvement Measurement and Evaluation Framework (SPI-MEF)\n", "abstract": " During the last decades, the dependency on software has increased. Many of today\u2019s modern devices embed software to control their functions. The increasing dependency has also taken part in shaping the software development process to produce better quality software. Many researchers and practitioners have spent large investments to improve the software development process. A research area within software engineering that addresses the assessment and improvement issues in development processes is called Software Process Improvement (SPI). One of the essential aspects in software process improvement is measuring the outcome of the implemented changes. The measurement and evaluation of software process improvement provides the means for the organization to articulate the achievement level of their goals.Although the importance of measuring and evaluating the outcome of software process improvement is paramount, there exist no common guidelines or systematic methods of measuring and evaluating the improvement. This condition evokes difficulties for practitioners to implement software process improvement measurement programs. This issue has raised the challenge to develop and implement an effective framework for measuring and evaluating the outcome of software process improvement initiatives.", "num_citations": "1\n", "authors": ["210"]}