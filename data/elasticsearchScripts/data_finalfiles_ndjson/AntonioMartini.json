{"title": "Identifying and prioritizing architectural debt through architectural smells: a case study in a large software company\n", "abstract": " Architectural technical debt can have a huge impact on software maintainability and evolution. Hence, different architectural violations, detected as architectural smells, need to be identified and refactored. In this paper, we conducted a multiple case-study on several architectural smells detected in four industrial projects. We conducted an in-depth investigation with a questionnaire, interviews and thorough inspection of the code with the practitioners. We evaluated the negative impact of the technical debt detected by the architectural smells, their difficulty to be refactored and the usefulness of the detection tool. The results show that practitioners appreciated the help of automatic detection, and that they prioritize refactoring architectural debt that causes more negative impact despite the higher refactoring effort.", "num_citations": "37\n", "authors": ["1320"]}
{"title": "A semi-automated framework for the identification and estimation of architectural technical debt: A comparative case-study on the modularization of a software component\n", "abstract": " ContextResearch and industry's attention has been focusing on developing systems that enable fast time to market in the short term, but would assure a sustainable delivery of business value and maintenance operations in the long run. A related phenomenon has been identified in Architectural Technical Debt: if the system architecture is sub-optimal for long-term business goals, it might need to be refactored. A key property of the system assuring long-term goals is its modularity, or else the degree to which components are decoupled: such property allows the product to be evolved without costly changes pervading the whole system. However, understanding the business benefits of refactoring to achieve modularity is not trivial, especially for large refactorings involving substantial architectural changes.ObjectiveThe aim of this study was to develop a technique to identify Architectural Technical Debt in the form of a\u00a0\u2026", "num_citations": "23\n", "authors": ["1320"]}
{"title": "Identifying and visualizing Architectural Debt and its efficiency interest in the automotive domain: A case study\n", "abstract": " Architectural Technical Debt has recently received the attention of the scientific community, as a suitable metaphor for describing sub-optimal architectural solutions having short-term benefits but causing a long-term negative impact. We study such phenomenon in the context of Volvo Car Group, where the development of modern cars includes complex systems with mechanical components, electronics and software working together in a complicated network to perform an increasing number of functions and meet the demands of many customers. This puts high requirements on having an architecture and design that can handle these demands. Therefore, it is of utmost importance to manage Architecture Technical Debt, in order to make sure that the advantages of sub-optimal solutions do not lead to the payment of a large interest. We conducted a case study at Volvo Car Group and we discovered that architectural\u00a0\u2026", "num_citations": "22\n", "authors": ["1320"]}
{"title": "Technical debt in automated production systems\n", "abstract": " The term technical debt borrowed from financial debt describes the long-term negative effects of sub-optimal solutions to achieve short-term benefits. It has been widely studied so far in pure software systems. However, there is a lack of studies on technical debt in technical systems, which contain mechanical, electrical and software parts. Automated Production Systems are such technical systems. In this position paper, we introduce technical debt for Automated Production Systems and give examples from the different disciplines. Based on that description, we outline future research directions on technical debt in this field.", "num_citations": "18\n", "authors": ["1320"]}
{"title": "Exploring the Presence of Technical Debt in Industrial GUI-Based Testware: A Case Study\n", "abstract": " Technical debt (TD) is a concept used to describe a sub-optimal solution of a software artifact that negatively affects its comprehensibility, extendability and maintainability. As such, TD adversely affects the costs or quality associated with the artifact, which is also called interest. TD has through research been identified in all types of software artifacts, from architectural design to automated tests (Testware). However, research into testware technical debt (TTD) is limited and primarily focused on testing on lower level of system abstraction, i.e. unit-and integration tests, leaving a need for more TTD research on GUI-based testing. In this study we explore this gap in knowledge through an industrial case study at a Swedish avionics software development company. Four repositories are studied for the presence of TTD using expert interviews, semi-automated document analysis and automatic metric analysis. Results of the\u00a0\u2026", "num_citations": "17\n", "authors": ["1320"]}
{"title": "Estimating and quantifying the benefits of refactoring to improve a component modularity: a case study\n", "abstract": " In recent years, research and industry's attention has been focused on maintaining a system that would both decrease time to market in the short term and assure a sustainable feature output and smooth maintenance operations in the long run. A related phenomenon has been identified in Architectural Technical Debt: if the system architecture is sub-optimal for long-term business goals, it needs to be refactored. A key property of the system assuring long-term goals consists on modularity, or else the ability to decouple different components: such property allows the product to be evolved without costly changes pervading the whole system. However, understanding the business benefits of refactoring to achieve modularity is not trivial, especially for large refactorings involving substantial architectural changes. We have conducted a case study in a large company, analyzing a case of refactoring a component to\u00a0\u2026", "num_citations": "11\n", "authors": ["1320"]}
{"title": "Toward a technical debt conceptualization for serverless computing\n", "abstract": " Serverless computing aims at reducing processing and operational units to single event-driven functions. It is bound to face considerable architectural issues and challenges. Are these bound to become technical debt? What does technical debt mean and how is it expressed in serverless computing models?", "num_citations": "8\n", "authors": ["1320"]}
{"title": "Ambidexterity in large-scale software engineering\n", "abstract": " Software is pervading our environment with products that become smarter and smarter every day. In order to follow this trend, software companies deliver continuously new features, in order to anticipate their competitors and to gain market share. For this reason, they need to adopt processes and organization solutions that allow them to deliver continuously. A key challenge for software organizations is to balance the resources in order to deliver enough new features in the short-term but also to support the delivery of new features in the long-term. In one word, companies need to be ambidextrous. In this thesis we investigate what ambidexterity is, what are the factors that hinder large software companies to be ambidextrous, and we provide initial solutions for the mitigation of such challenges. The research process consists of an empirical investigation based on the Grounded: Theory approach, in which we\u00a0\u2026", "num_citations": "7\n", "authors": ["1320"]}
{"title": "Big bangs and small pops: on critical cyclomatic complexity and developer integration behavior\n", "abstract": " Continuous integration is believed by many to improve software quality, including cyclomatic complexity. In this paper an exploratory study investigates the relationship between continuous integration behavior among developers and the cyclomatic complexity - particularly at critical levels - of the source code they commit, as a correct understanding of the consequences of a software development practice, particularly one as popular as continuous integration, is of crucial importance to industry professionals when deciding on improvement efforts. It is found that developer behavior differs significantly, as does their knowledge and awareness of cyclomatic complexity as a concept. We find that even though large commits (\"big bangs\") contribute proportionately slightly more to cyclomatic complexity, the effect is much less pronounced for critical cyclomatic complexity. It is also found that complex code tends to overlap\u00a0\u2026", "num_citations": "6\n", "authors": ["1320"]}
{"title": "Anacondebt: A tool to assess and track technical debt\n", "abstract": " It is challenging to assess and manage Technical Debt. Technical Debt is avoided or refactored if the long-term bene ts, such as preventing extra-costs, exceed the cost of repaying the debt. Some tools have been recently proposed for the identification of Technical Debt, but most of them do not help in assessing the cost-bene ts of repaying the Debt. Besides, it is challenging to track, visualize and plan Technical Debt refactoring systematically. Although practitioners might use simple tracking tools, calculating and communicating Technical Debt is currently not supported. Based on the results of previous research, combined with several practical experiences in collaboration with large software companies, we have developed and evaluated a lightweight tool, AnaCon-Debt, to track and assess Technical Debt.", "num_citations": "6\n", "authors": ["1320"]}
{"title": "Identifying scalability debt in open systems\n", "abstract": " Architectural technical debt can be generated by changes in the business and the environment of an organization. In this paper, we emphasize the change in scalability requirements due to new regulations. Scalability is the ability of a system to handle an increased workload. For complex systems that are abruptly exposed via open interfaces and hence a greater workload, the scalability requirements may quickly increase, leading to technical debt. We term this scalability debt. This paper describes scalability triage, a light-weight, novel technique for identifying scalability threats as a form of technical debt. We illustrate this technique with an open banking case from a large software organization. Open banking is partly caused by the new European PSD2 regulative that enforce banks to open interfaces to unknown third-party actors. Banking systems are well-established, mature systems. However, with the advent of\u00a0\u2026", "num_citations": "5\n", "authors": ["1320"]}
{"title": "Evolution of technical debt: An exploratory study\n", "abstract": " Context: Technical debt is known to impact maintainability of software. As source code files grow in size, maintainability becomes more challenging. Therefore, it is expected that the density of technical debt in larger files would be reduced for the sake of maintainability. Objective: This exploratory study investigates whether a newly introduced metric \u2018technical debt density trend\u2019helps to better understand and explain the evolution of technical debt. The \u2018technical debt density trend\u2019metric is the slope of the line of two successive \u2018technical debt density\u2019measures corresponding to the \u2018lines of code\u2019values of two consecutive revisions of a source code file. Method: This study has used 11,822 commits or revisions of 4,013 Java source files from 21 open source projects. For the technical debt measure, SonarQube tool is used with 138 code smells. Results: This study finds that \u2018technical debt density trend\u2019metric has interesting characteristics that make it particularly attractive to understand the pattern of accrual and repayment of technical debt by breaking down a technical debt measure into multiple components, eg,\u2018technical debt density\u2019can be broken down into two components showing mean density corresponding to revisions that accrue technical debt and mean density corresponding to revisions that repay technical debt. The use of \u2018technical debt density trend\u2019metric helps us understand the evolution of technical debt with greater insights.", "num_citations": "4\n", "authors": ["1320"]}
{"title": "Factors influencing reuse and speed in three organizations\n", "abstract": " This report supplements the research paper Martini et al,\u201cInhibitors and Enablers for Reuse with Speed\u201d. It lists main factors influencing reuse and speed in three organizations. Factors come from the analysis of a set of 7 interviews, 3 of which have been used as secondary evidences. The report also includes the interview protocol of the study.The factors (F-x) are explained and sometimes organized in categories (C-x) to provide a better understanding of their relationships and of their context. They have also been categorized and sorted as inhibitors, enablers, inverse factors and ambiguous factors, according to the kinds of influence presented in the paper (Fig 1.); categories are shown in the right margin using category abbreviations on the form YYY-Z with meanings given by Figure 1 below. For further explanations of the meaning of these categories, please refer to the paper.", "num_citations": "2\n", "authors": ["1320"]}
{"title": "Managing Speed in Companies Developing Large-Scale Embedded Systems.\n", "abstract": " An open issue is how to reach quickness and responsiveness in addressing customer needs within large-scale embedded system product development, where the processes are bound to the physical product development. Speed is a key quality that needs particular attention. We are developing a framework to understand what kinds of speed are important, what factors are determining them, what are the visible effects and what is possible to improve in order to reach speed related business goals.", "num_citations": "1\n", "authors": ["1320"]}