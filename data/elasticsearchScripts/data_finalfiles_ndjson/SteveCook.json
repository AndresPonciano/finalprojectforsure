{"title": "Software factories: assembling applications with patterns, models, frameworks and tools\n", "abstract": " The confluence of component based development, model driven development and software product lines forms an approach to application development based on the concept of software factories. This approach promises greater gains in productivity and predictability than those produced by incremental improvements to the current paradigm of object orientation, which have not kept pace with innovation in platform technology. Software factories promise to make application assembly more cost effective through systematic reuse, enabling the formation of supply chains and opening the door to mass customization.", "num_citations": "1680\n", "authors": ["581"]}
{"title": "Designing object systems\n", "abstract": " This is a book about object-oriented analysis and design for software developers. There are many such books, so why write another one? The answer is that we wish to make some specific contributions to the philosophy and practice of object-oriented software development which are significantly different from those that can be found in any of the other available books.This is not an introductory book1. It is for software practitioners with some experience of using object-oriented languages and methods. We assume that the reader understands the basic principles of object-orientation, especially encapsulation and abstraction, classes and instances, polymorphism, and inheritance. We are aiming the book at those software developers who are perhaps a little dissatisfied with the informal interpretations of most published object-oriented analysis and design methods, and who are looking for a more fully defined treatment. This book does not aim to set out a complete method for software development. In it we describe a range of techniques, notations, principles and procedures, and although we offer some advice on their use, we leave to the reader the matter of arranging these ideas. Indeed, we hope they will be useful to software developers using any kind of object-oriented analysis or design method, by helping them to think more clearly about what their descriptions and notations mean and when they can best be used.", "num_citations": "715\n", "authors": ["581"]}
{"title": "Domain-specific development with visual studio dsl tools\n", "abstract": " Domain-Specific Languages (DSLs)--languages geared to specific vertical or horizontal areas of interest--are generating growing excitement from software engineers and architects. DSLs bring new agility to the creation and evolution of software, allowing selected design aspects to be expressed in terms much closer to the system requirements than standard program code, significantly reducing development costs in large-scale projects and product lines. In this breakthrough book, four leading experts reveal exactly how DSLs work, and how you can make the most of them in your environment. With Domain-Specific Development with Visual Studio DSL Tools, you'll begin by mastering DSL concepts and techniques that apply to all platforms. Next, you'll discover how to create and use DSLs with the powerful new Microsoft DSL Tools--a toolset designed by this book's authors. Learn how the DSL Tools integrate into Visual Studio--and how to define DSLs and generate Visual Designers using Visual Studio's built-in modeling technology. In-depth coverage includes Determining whether DSLs will work for you Comparing DSLs with other approaches to model-driven development Defining, tuning, and evolving DSLs: models, presentation, creation, updates, serialization, constraints, validation, and more Creating Visual Designers for new DSLs with little or no coding Multiplying productivity by generating application code from your models with easy-to-use text templates Automatically generating configuration files, resources, and other artifacts Deploying Visual Designers across the organization, quickly and easily Customizing Visual Designers for\u00a0\u2026", "num_citations": "406\n", "authors": ["581"]}
{"title": "On including part hierarchies in object-oriented languages, with an implementation in Smalltalk\n", "abstract": " In very many situations we consider objects to be constructed from parts. The parts in their turn may consist of smaller, simpler parts. And so forth. In engineering design we speak of assemblies and subassemblies; in science we describe things in terms of their components. However, when we want to model objects consisting of parts in Smalltalk, and many other object-oriented languages, we are confronted with a dilemma: either sacrifice the data encapsulation properties of the language or utterly flatten the whole-part hierarchy.In this paper we describe what a part hierarchy is and why it is so important ($1.1). We then show how many object-oriented languages fail to provide this hierarchy (51.2). After reviewing previous work ($1.3) we sketch how we added the structure to the Smalltalk (52). The simple implementation details are outlined in an appendix. We discuss where in our experience the part hierarchy was\u00a0\u2026", "num_citations": "97\n", "authors": ["581"]}
{"title": "The Amsterdam manifesto on OCL\n", "abstract": " In November 1998 the authors participated in a two-day workshop on the Object Constraint Language (OCL) in Amsterdam. The focus was to clarify issues about the semantics and the use of OCL, and to discuss useful and necessary extensions of OCL. Various topics have been raised and clarified. This manifesto contains the results of that workshop and the following work on these topics. Overview of OCL.", "num_citations": "81\n", "authors": ["581"]}
{"title": "Defining UML family members using prefaces\n", "abstract": " The Unified Modeling Language is extensible, and so can be regarded as a family of languages. Implicitly or explicitly, any particular UML model should be accompanied by a definition of the particular UML family member used for the model. The definition should cover syntactic and semantic issues. This paper proposes a mechanism for associating models with such definitions. Any particular definition would form what we call a preface. The name is intended to suggest that the definition of a particular UML family member must conceptually come before any model built using that family member. A preface would be large, and should be organised using packages. This would allow large amounts of sharing between different prefaces. The paper proposes that prefaces should have an axiomatic style of semantics, through not necessarily fully formal, and it offers a general approach to semantics that would reduce\u00a0\u2026", "num_citations": "61\n", "authors": ["581"]}
{"title": "A feasibility study in rearchitecting UML as a family of languages using a precise OO meta-modeling approach.\n", "abstract": " This report describes a feasibility study in rearchitecting UML. It develops a theory of precise OO meta-modeling in order to fulfil this task, and checks the feasibility of that theory by developing the meta-model of various aspects of UML.", "num_citations": "55\n", "authors": ["581"]}
{"title": "Strategies for sharing objects in distributed systems\n", "abstract": " (1993) Strategies for Sharing Objects in Distributed Systems. Journal of Object-Oriented Programming,. ISSN 0896-8438.(The full text of this publication is not currently available from this repository. You may be able to access a copy if URLs are provided)(KAR id: 21145)", "num_citations": "50\n", "authors": ["581"]}
{"title": "A class hierarchy for building stream-oriented file systems\n", "abstract": " This paper describes the object-oriented design and implementation of a family of stream-oriented le systems under UNIX and under an object-oriented operating system called Choices. A class hierarchy provides an object-oriented taxonomy of the algorithms and data structures used in the design of this family. The family includes the System V le system, the 4.2 BSD le system, and the MS-DOS le system.The class hierarchy has been developed by a series of experiments that are designed to lead to a framework for object-oriented le systems. The class hierarchy for stream-oriented le systems is the product of the second experiment in this series in which we revised a class hierarchy for UNIX-like le systems [MLRC88] to include the MS-DOS le system. We describe the hierarchy, how it evolved from the rst experiment to the second, and review the lessons that we have learned from the two experiments.", "num_citations": "46\n", "authors": ["581"]}
{"title": "The UML family: Profiles, prefaces and packages\n", "abstract": " This paper overviews the status of UML (Unified Modeling Language) considered as a family of languages, and reviews critically various approaches to defining variants of UML within this family.", "num_citations": "44\n", "authors": ["581"]}
{"title": "Threading of a glycosylated protein loop through a protein hole: implications for combination of human chorionic gonadotropin subunits\n", "abstract": " Chorionic gonadotropin (hCG) is a heterodimeric placental glycoprotein hormone essential for human reproduction. Twenty hCG \u03b2\u2010subunit residues, termed the seatbelt, are wrapped around \u03b1\u2010subunit loop 2 (\u03b12) and their positions \u201clatched\u201d by a disulfide formed by cysteines at the end of the seatbelt (Cys 110) and in the \u03b2\u2010subunit core (Cys 26). This unique arrangement explains the stability of the heterodimer but raises questions as to how the two subunits combine. The seatbelt is latched in the free \u03b2\u2010subunit. If the seatbelt remained latched during the process of subunit combination, formation of the heterodimer would require \u03b12 and its attached oligosaccharide to be threaded through a small \u03b2\u2010subunit hole. The subunits are known to combine during oxidizing conditions in vitro, and studies described here tested the idea that this requires transient disruption of the latch disulfide, possibly as a consequence of\u00a0\u2026", "num_citations": "41\n", "authors": ["581"]}
{"title": "Informal formality? the Object Constraint Language and its application in the UML metamodel\n", "abstract": " Within the field of object technology it is becoming recognised that constraints are a good way to produce more precise and formal specifications than with diagrams alone. Evidence of this is that UML incorporates a standard constraint language called OCL (Object Constraint Language). The availability of OCL will encourage UML users to add constraints to their UML models. This paper explains OCL and demonstrates its applicability. Probably the largest application of OCL to date was its use to define the metamodel of UML, and the experiences gained in this application are discussed.", "num_citations": "39\n", "authors": ["581"]}
{"title": "Modelling groupware in the electronic office\n", "abstract": " This is a report on a project now completed, to explore ideas for a distributed software system intended to enhance people's ability to communicate effectively and conveniently, to give them information about each others' status and whereabouts, and to support them in planning and executing various kinds of computer-supported office tasks both alone and in collaboration. The purpose of the project was to explore architectural issues, user-interface issues, and the definition of possible future products. The approach taken was to create software models of scenes written by a multi-disciplinary team, and to create performances using these models. The paper reviews the objectives of the project, discusses the approach, architecture and implementation, and draws conclusions both about the approach adopted and the ideas explored.", "num_citations": "35\n", "authors": ["581"]}
{"title": "Languages and object-oriented programming\n", "abstract": " In a recent article Alan Kay, the originator of Smalltalk, wrote: `The move to object-oriented design represents a real change in point of view - a change of paradigm - that brings with it an enormous increase in expressive power' (Scientific American, September 1984). If this statement is true, it is clearly important to know what is meant by object-oriented design. Object-oriented programming is perhaps more common terminology; however. `object-oriented programming', rather like `structured programming', is not something that can be simply defined. It has become very fashionable to describe any and all software, hardware and user-interface systems as `object-oriented', and this fashion tends to obscure the fact that `object-oriented programming' does represent a fairly fundamental change in the way programming is carried out and understood. This paper issustrates the meaning of `object-oriented programming' by\u00a0\u2026", "num_citations": "33\n", "authors": ["581"]}
{"title": "Defining the context of OCL expressions\n", "abstract": " Expressions written in Object Constraint Language (OCL) within a UML model assume a context, depending upon where they are written. Currently the exact nature of this context is not fully defined. Furthermore there is no mechanism for defining the context for OCL expressions in extensions to UML. This paper defines the context of OCL expressions, and proposes precise and flexible mechanisms for how to specify this context.", "num_citations": "19\n", "authors": ["581"]}
{"title": "Looking back at UML\n", "abstract": " This paper sets out in detail the development of the Unified Modeling Language and its derivatives from its beginning until the present. The paper describes the processes that were used to develop the language, the architecture and intended uses of the language, its strengths and weaknesses, and the steps that are being taken to make it ready for future developments.", "num_citations": "18\n", "authors": ["581"]}
{"title": "Model driven architecture: the realities, a year later\n", "abstract": " Model Driven Architecture (MDA) is a technology that has been in the process of evolution for many years. We looked at this technology last year in a panel that raised the roof. Today, more vendors are now producing products that support MDA. And we still hear about the success stories that indicate that this technology is the\" real deal\". But, with the failed promises of CASE in the late 1980's, many people still have questions about how much of an application can be generated from models and constraint languages. Is MDA really capable of generating enterprise applications? What are the technologies are available to implement MDA? Are there really special skills needed to generate platform independent applications? How platform independent are they in practice? Here is your opportunity to ask the experts the questions that are necessary to convince you of the validity of this new technology. This time, we\u00a0\u2026", "num_citations": "18\n", "authors": ["581"]}
{"title": "Plasma concentrations of C-19 steroids, estrogens, FSH, LH and prolactin in post-menopausal women with and without breast cancer\n", "abstract": " The plasma levels of 5\u03b1-dihydrotestosterone, testosterone, \u25b55-androstene-3\u03b2,17\u03b2-diol, \u25b54-andros-tenedione, dehydroepiandrosterone, estrone, estradiol, dehydroepiandrosterone sulfate, follicle stimulating hormone, luteinizing hormone and prolactin were measured in normal post-menopausal women and in post-menopausal women with proven breast cancer. The mean prolactin level was significantly higher (p < 0.01) and the mean 5\u03b1-dihydrotestosterone level lower (p < 0.05) for the women with breast cancer. There were no significant differences for any of the other hormones. As well, there were no significant differences for the extent of binding of testosterone and \u25b55-androstene-3\u03b2,17\u03b2-diol to plasma proteins between the two groups of subjects.", "num_citations": "17\n", "authors": ["581"]}
{"title": "Advanced Methods and Tools for a Precise UML\n", "abstract": " Imagine for a moment you are a software \u2018architect\u2019 in the year 2003. You\u2019re working at home as usual, and decide to use your quantum computer to do some system modelling. Imagine also that the UML is \u2018still\u2019 the de-facto language for software engineering. As a language it has made some big advances of the last few years. The last three versions (3.0-5.0) have all had a precise semantics - even the mysteries of aggregation have been resolved - and its applicability has been widened to every kind of system imaginable. Standardisation has also been good for the software profession. CASE vendors and methodologists, no longer able to invent new notations, have devoted their energies to building increasingly sophisticated tools and processes. Thus, the tool and methods you are about to use incorporates a maturity of software technology that has never been realised before...", "num_citations": "15\n", "authors": ["581"]}
{"title": "People and computers: designing the interface\n", "abstract": " People and Computers: Designing the Interface - Kent Academic Repository Skip to main content University of Kent logo KAR Logo Login Admin Dashboards Help Simple search | Advanced search Home Browse Latest additions Policies Accessibility Statement People and Computers: Designing the Interface Johnson, Peter, Cook, Steve J. (1985) People and Computers: Designing the Interface. In: Proceedings of HCI85: the Conference of the BCS Human Computer Interaction Specialist Group. . Cambridge University Press (The full text of this publication is not currently available from this repository. You may be able to access a copy if URLs are provided) (KAR id:20908) The full text of this publication is not currently available from this repository. You may be able to access a copy if URLs are provided. (Contact us about this Publication) Item Type: Conference or workshop item (UNSPECIFIED) Subjects: Q Science > \u2026", "num_citations": "15\n", "authors": ["581"]}
{"title": "Plasma C19-delta 5-steroid levels during normal human pregnancy.\n", "abstract": " Plasma levels of dehydroepiandrosterone sulfate, dehydroepiandrosterone and delta 5-androstenediol were measured in several women throughout pregnancy. The levels of both dehydroepiandrosterone and its sulfate decreased while those of delta 5-androstenediol did not. The levels of binding of the latter steroid to plasma proteins increased.", "num_citations": "15\n", "authors": ["581"]}
{"title": "F\u00e1bricas de software: experiencias, tecnolog\u00edas y organizaci\u00f3n\n", "abstract": " La fabricaci\u00f3n de software es uno de los sectores de mayor crecimiento en los \u00faltimos a\u00f1os y representa, cada vez m\u00e1s, una de las principales actividades econ\u00f3micas tanto en los pa\u00edses desarrollados como para los pa\u00edses en v\u00edas de desarrollo. Y es que, en efecto, el software se halla presente en la actualidad en la mayor parte de los sistemas que resultan vitales para el funcionamiento y progreso de las sociedades modernas. El concepto de f\u00e1brica de software cumple ya m\u00e1s de cuarenta a\u00f1os, desde que en 1968 Bemer lo mencionara por primera vez y afirmara que:\u201cparece que tenemos pocos entornos espec\u00edficos (instalaciones de f\u00e1brica) para la producci\u00f3n econ\u00f3mica de programas\u2026\u201d. Un a\u00f1o despu\u00e9s, se crear\u00eda la primera f\u00e1brica de software: Hitachi Software Works. Desde entonces, el t\u00e9rmino f\u00e1brica de software denota llevar a cabo el desarrollo y mantenimiento de software de forma comparable a la producci\u00f3n de otros productos industriales; eso si, salvando las peculiaridades del propio software. A pesar de ello, industrializar la fabricaci\u00f3n de software ha demostrado que sirve para reducir los costes y el ciclo de vida de los productos, mejorando la calidad del software. En la \u00faltima d\u00e9cada se han publicado diversos estudios y est\u00e1ndares en los que se exponen los principios que se deben seguir para la fabricaci\u00f3n de software, como modelos de mejora (CMMI, SPICE), desarrollo dirigido por modelos (MDA), l\u00edneas de producto (SPL), servicios Web, el desarrollo global de software, etc.; que complementan otras cuestiones m\u00e1s conocidas pero por ello no menos importantes en el desarrollo de software como: la gesti\u00f3n de\u00a0\u2026", "num_citations": "14\n", "authors": ["581"]}
{"title": "Specifying the apple Macintosh\u2122 Toolbox event manager\n", "abstract": " The Macintosh\u2122 Toolbox is a collection of resources, stored in ROM, of use to software developers building user interface components. This paper documents an attempt to specify one part of the Toolbox: namely the data types and routines for event-handling. The chief objective of the paper is to illustrate an approach to building a formal specification in which, starting from simple structures, the final specification is arrived at by a process of successive modifications, generalisations, instantiations and translations. The paper also constitutes an example of the Larch algebraic style, as well as the two-tiered approach characteristic of the Larch family of specification languages.", "num_citations": "12\n", "authors": ["581"]}
{"title": "Experience with Formal Specification of CMM and UML\n", "abstract": " A simple specification language (OCL) was used to specify and analyze metamodels and metametamodels as part of the OMG OOA&D standardization process. Significant benefits were seen from a small investment in \u201cuser-friendly\u201d formality.", "num_citations": "11\n", "authors": ["581"]}
{"title": "The domain-specific ide\n", "abstract": " The development of information systems is getting increasingly complex as they become more and more distributed and pervasive. Today\u2019s advanced software developer must be familiar with a wide range of technologies for describing software, including modern object-oriented programming languages, eXtensible Markup Language (XML) and its accessories (schemas, queries, transformations), scripting languages, interface definition languages, process description languages, database definition and query languages, and more. Translating from the requirements of a business problem to a solution using these technologies requires a deep understanding of the many architectures and protocols that comprise a distributed solution. Furthermore, end-users expect the result to be fast, available, scaleable and secure even in the face of unpredictable demand and unreliable network connections. It can be a daunting\u00a0\u2026", "num_citations": "10\n", "authors": ["581"]}
{"title": "Accelerating ligand indentification\n", "abstract": " Biacore-based protein-protein interaction assays have been used to search for growth factor ligands of orphan receptors. However, once a complex source of a ligand, such as a cell line conditioned medium, has been identified, the rate determining step is the purification of the ligand for amino acid sequencing. We have demonstrated that Biacore can be used as a'nanoscale'affinity purification matrix using soluble receptors immobilized on the sensor chip leading to direct analysis by tandem electrospray mass spectrometry.", "num_citations": "10\n", "authors": ["581"]}
{"title": "Modelling generic user-interfaces with functional programs\n", "abstract": " Modelling generic user-interfaces with functional programs | Proceedings of the Second Conference of the British Computer Society, human computer interaction specialist group on People and computers: designing for usability ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleProceedingsProceedings of the Second Conference of the British Computer Society, human computer interaction specialist group on People and computers: designing for usabilityModelling generic user-interfaces with functional programs Article Modelling generic user-interfaces with functional programs Share on Author: S Cook profile image S Cook View Profile \u2026", "num_citations": "8\n", "authors": ["581"]}
{"title": "Architectural standards, processes and patterns for enterprise systems\n", "abstract": " Post baby-boom consumers expect ever-increasing levels of service, and their expectations are small compared to the expectations their computer-age children will have when they start earning real disposable income within a year or two. So enterprises must redesign their business processes to increase operational efficiencies and customer service. New technologies create new ways of delivering service, such as the Internet, which the successful enterprise must exploit at least as well as its competitors. Globalisation increases competitive pressures from overseas. Structural changes such as mergers and acquisitions, downsizing, outsourcing, and dis-intermediation all create organisational challenges.", "num_citations": "7\n", "authors": ["581"]}
{"title": "Separating concerns with domain specific languages\n", "abstract": " I\u2019ll talk about the separation of concerns in the development of large distributed enterprise systems, how to manage it using domain specific languages, and how to build these languages. This brief note outlines some of the topics I\u2019ll cover.", "num_citations": "6\n", "authors": ["581"]}
{"title": "Object technology\u2013a grand narrative?\n", "abstract": " This brief article sets out some personal observations about the development of object technology from its emergence until today, and suggests how it will develop in the future.", "num_citations": "4\n", "authors": ["581"]}
{"title": "Discrete event simulation in Smalltalk/V Windows\n", "abstract": " Describes the authors' experience building a discrete event simulation framework in a pre-release version of Smalltalk/V Windows, using it to simulate resource utilisation in a hospital, and encapsulating it as an application for use by non-computer professionals.< >", "num_citations": "4\n", "authors": ["581"]}
{"title": "Visual programming of user interfaces\n", "abstract": " Visual Programming of User Interfaces - Kent Academic Repository Skip to main content kent-logo Logo Login Admin Dashboards Accessibility Statement Help Simple search | Advanced search Home Browse Latest additions Policies Visual Programming of User Interfaces Cook, Steve J. and Masnavi, S. (1989) Visual Programming of User Interfaces. In: Kilgour, Alistair and Earnshaw, Rae A., eds. Graphics Tools for Software Engineering. Cambridge University Press. (The full text of this publication is not currently available from this repository. You may be able to access a copy if URLs are provided) (KAR id:20943) The full text of this publication is not currently available from this repository. You may be able to access a copy if URLs are provided. (Contact us about this Publication) Item Type: Book section Subjects: Q Science > QA Mathematics (inc Computing science) > QA 76 Software, computer programming, \u2026", "num_citations": "4\n", "authors": ["581"]}
{"title": "Introducing object-oriented systems\n", "abstract": " Object-oriented technologies are rapidly making a substantial impact on the design and engineering of many kinds of software system. Their success is motivated by the increasingly widespread recognition that a complete and correct specification of requirements for a large software system cannot be articulated in advance. The techniques of object-oriented programming particularly support software re-use and system evolution, and thereby promise to provide a solution by allowing systems to be built incrementally, capturing requirements in parallel with the development of abstractions, frameworks and partial implementation. The paper proposes explains basic object-oriented terminology and concepts. Static and dynamic aspects of the object model are introduced and illustrated, with observations about how objects are constructed, what their properties are, how they are used, and how they are related.< >", "num_citations": "3\n", "authors": ["581"]}
{"title": "Playing cards on the PERQ: An algorithm for overlapping rectangles\n", "abstract": " An algorithm is presented which provides a convincing animated visual illusion of a pack of playing cards on the bit\u2010mapped screen of a high\u2010performance personal computer. The technique is generally applicable to any display task involving the generation and manipulation of a number of overlapping rectangles, for example the \u2018desktop model\u2019 for integrated interactive systems.", "num_citations": "3\n", "authors": ["581"]}
{"title": "Software factories\n", "abstract": " Software Factories Page 1 Software Factories Steve Cook Architect Enterprise Tools, Visual Studio Microsoft Corporation Page 2 Portions copyright \u00a9 2003-2005 Jack Greenfield & Keith Short with Steve Cook & Stuart Kent. Used by permission of John Wiley & Sons, Inc. All rights reserved. The Software Crisis (ca. 2004) \u220e! $250B/yr in US (average $430K to $2.3M per project) \u25ba! 16% on time and budget but deliver less than planned (avg 42%) \u25ba! 53% overrun (avg 189%) \u25ba! 31% are canceled, losing $140B/yr Page 3 Portions copyright \u00a9 2003-2005 Jack Greenfield & Keith Short with Steve Cook & Stuart Kent. Used by permission of John Wiley & Sons, Inc. All rights reserved. From \u201cKurzweil, Moore, and Accelerating Change\u201d, Ilkka Tuomi, http://www.jrc.es/~tuomiil/articles/Kurzweil.pdf Page 4 Portions copyright \u00a9 2003-2005 Jack Greenfield & Keith Short with Steve Cook & Stuart Kent. Used by permission of John \u2026", "num_citations": "2\n", "authors": ["581"]}
{"title": "Language anatomy\n", "abstract": " In Chapter 7, we saw that models play a different role in software factories than they have traditionally played in software development. Instead of modeling to provide documentation for human consumption, we use models as development artifacts that are processed by tools to generate implementations, or to automate other aspects of the software development process. We also saw that the modeling languages used in software factories must be defined as rigorously as programming languages. In this chapter, we look at how languages are defined, at the relationship between modeling and programming languages, and at ways to define and implement domain specific languages. We also show how textual and graphical languages can be integrated.The first step in studying language anatomy is to differentiate between natural and formal languages. Natural languages, such as English, art, sculpture and music\u00a0\u2026", "num_citations": "2\n", "authors": ["581"]}
{"title": "The Architecture of UML\n", "abstract": " The Architecture of UML Page 1 The Architecture of UML Steve Cook Distinguished Engineer IBM Global Services UML in the .com Enterprise Page 2 Agenda UML : a family of languages UML definition UML variants UML architecture Page 3 In the industry, UML is used for many different purposes Direct mapping to language implementations (Java, C++, Smalltalk, CORBA IDL and so on) \u201cround-trip engineering\u201d \u201csoftware through pictures\u201d Directly executable notation (eg xUML) Language-independent software specification Architecture description Process engineering Website structures Workflow specification Business modelling Page 4 The different uses of UML can be semantically different and inconsistent Extension by new elements tags, stereotypes Class diagrams meaning of aggregation, special symbols Statecharts what to attach statecharts to, error treatment, relationship of guards to preconditions, \u2026", "num_citations": "2\n", "authors": ["581"]}
{"title": "Essential techniques for object-oriented design\n", "abstract": " Essential techniques for object-oriented design | Object development methods ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksObject development methodsEssential techniques for object-oriented design chapter Essential techniques for object-oriented design Share on Authors: Steve Cook View Profile , John Daniels View Profile Authors Info & Affiliations Publication: Object development methodsJuly 1994 Pages 45\u201366 0citation 0 Downloads Metrics Total Citations0 Total Downloads0 Last 12 Months0 Last 6 weeks0 Get Citation Alerts New Citation Alert added! This alert has been successfully added and will be sent to: You will \u2026", "num_citations": "2\n", "authors": ["581"]}
{"title": "Beyond the Desktop\n", "abstract": " The'desktop metaphor'has gained almost unanimous support as a way to organise the appearance of information on high-resolution displays of personal computers. But current implementations of this approach are just a thin veneer on top of conventional file-and-application based approaches to information processing. Object technology offers much deeper approaches to integrating information within the workplace, transcending traditional application boundaries and matching processing power more closely to users' tasks.", "num_citations": "2\n", "authors": ["581"]}
{"title": "Object-oriented Techniques: Scope, Principles, Languages, Methods and Strategies\n", "abstract": " Object-oriented Techniques: Scope, Principles, Languages, Methods and Strategies - Kent Academic Repository Skip to main content kent-logo Logo Login Admin Dashboards Help Simple search | Advanced search Home Browse Latest additions Policies Accessibility Statement Object-oriented Techniques: Scope, Principles, Languages, Methods and Strategies Cook, Steve J. (1991) Object-oriented Techniques: Scope, Principles, Languages, Methods and Strategies. In: Florentin, JJ, ed. Object-oriented Programming Systems. Chapman and Hall. (The full text of this publication is not currently available from this repository. You may be able to access a copy if URLs are provided) (KAR id:20984) The full text of this publication is not currently available from this repository. You may be able to access a copy if URLs are provided. (Contact us about this Publication) Item Type: Book section Subjects: Q Science > QA \u2026", "num_citations": "2\n", "authors": ["581"]}
{"title": "ECOOP'89: Proceedings of the 1989 European Conference on Object-Oriented Programming\n", "abstract": " The proceedings of the 1989 European Conference on Object-Oriented Programming are presented in this volume, comprised of twenty-one refereed and two invited papers. Each of the papers presents original work describing research in many aspects of object-oriented programming languages, systems and applications. Topics covered include reusability, inheritance, operating systems, concurrency, persistence, design, metalevel programming, applications and experience, semantics and user interface. The main purpose of the conference and of the proceedings is to present a selection of the latest research in the object-oriented paradigm, and to provide a focus for the further development of that research. This book will be useful for academic and industrial researchers in the whole field of computer science.", "num_citations": "2\n", "authors": ["581"]}
{"title": "Object-oriented programming in the UK\n", "abstract": " Object-oriented programming in the UK | The Computer Bulletin ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search The Computer Bulletin Periodical Home Latest Issue Archive Authors Affiliations Award Winners More HomeBrowse by TitlePeriodicalsThe Computer BulletinVol. , No. Object-oriented programming in the UK article Object-oriented programming in the UK Share on Author: Steve Cook View Profile Authors Info & Affiliations The Computer BulletinVolume 3Issue 4Dec., 1987 pp 22\u201323 Published:01 December 1987 weeks0 Get Citation Alerts New Citation Alert added! This alert has been successfully added \u2026", "num_citations": "2\n", "authors": ["581"]}
{"title": "Panel on inheritance\n", "abstract": " Henry spoke about the future. The challenge, he said, was in understanding the relationship between behaviour and code. He had two basic premises. Firstly a small extension to behaviour should only require a small extension to code. Secondly, adding new code is good, and modifying or editing old code is bad. The function of inheritance systems is to construct structures which can be extended in lots of different ways without modifying existing code.He gave the example of writing a generic function \u201cdisplay\u201d, which has to display objects of many different types, and contrasted the conventional procedural way of doing it with a case statement to dispatch on types with the message-sending approach where the dispatching is done by the identity of the message recipient. To extend the procedural version with a new type of displayable object requires code editing, which is bad, whereas in the objectroriented case no\u00a0\u2026", "num_citations": "2\n", "authors": ["581"]}
{"title": "A Compile-time Type Checking System for Smalltalk-80\n", "abstract": " A Compile-time Type Checking System for Smalltalk-80 - Kent Academic Repository Skip to main content University of Kent logo KAR Logo Login Admin Dashboards Help Simple search | Advanced search Home Browse Latest additions Policies Accessibility Statement A Compile-time Type Checking System for Smalltalk-80 Cook, Steve J., Roberts, GA (1986) A Compile-time Type Checking System for Smalltalk-80. In: 3rd Study Sessions on Object-Oriented Languages. Bigre+Globule no. 48 . , Paris, France (The full text of this publication is not currently available from this repository. You may be able to access a copy if URLs are provided) (KAR id:20915) The full text of this publication is not currently available from this repository. You may be able to access a copy if URLs are provided. (Contact us about this Publication) Item Type: Conference or workshop item (UNSPECIFIED) Subjects: Q Science > QA Mathematics (\u2026", "num_citations": "2\n", "authors": ["581"]}
{"title": "Designing precise and flexible graphical modelling languages for software development\n", "abstract": " Model-driven approaches to software development involve building computerized models of software and the environment in which it is intended to operate.   This thesis offers a selection of the author\u2019s work over the last three decades that addresses the design of precise and flexible graphical modelling languages for use in model-driven software development. The primary contributions of this work are:   \u2022 Syntropy: the first published object-oriented analysis and design (OOAD) method to fully integrate formal and graphical modelling techniques.  \u2022  The creation of the Object Constraint Language (OCL) and its integration into the Unified Modeling Language (UML) specification.  \u2022  The identification of requirements and mechanisms for increasing the flexibility of the UML specification.  \u2022 The design and implementation of tools for implementing graphical Domain Specific Languages (DSLs).   The starting point was the author\u2019s experience with formal specification techniques contrasted with the lack of precision of published object-oriented analysis and design methods. This led to a desire to fully integrate these two topics \u2013 formal specification and object-orientation - into a coherent discipline. The Syntropy approach, created in 1994 by this author and John Daniels, was the first published complete attempt to do this.   Much of the author\u2019s subsequent published work concerns the Unified Modeling Language (UML). UML represented a welcome unification of earlier OOAD approaches, but suffered badly from inflexibility and lack of precision. A significant part of the work included in this thesis addresses the drawbacks of the UML and proposes\u00a0\u2026", "num_citations": "1\n", "authors": ["581"]}
{"title": "Executive roundtable: Accounting software\n", "abstract": " Cook:\" There are two signs. The first is that the principals are spending more time doing accounting and less time running their business. The second is that they're lying awake at night worried about their financesthey don't have a clear sense of how they're doing\"", "num_citations": "1\n", "authors": ["581"]}
{"title": "Object Constraint Language\n", "abstract": " The material in this document details an Object Management Group specification in accordance with the terms, conditions and notices set forth below. This document does not represent a commitment to implement any portion of this specification in any company's products. The information contained in this document is subject to change without notice.", "num_citations": "1\n", "authors": ["581"]}
{"title": "UML 2.0 Architectural Crossroads: Sculpting or Mudpacking?\n", "abstract": " As the UML reaches the venerable age of four, both its proponents and critics are scanning the changes in the UML 1.3 revision and the proposed UML 2.0 roadmap. They are asking pointed questions, such as: Has the modeling language matured or bloated during the standardization process? Will UML be able to adapt to the changing requirements of software development? These questions and the strong emphasis of the UML Revision Task Force\u2019s final report on architectural issues suggest that UML is approaching an architectural crossroads at the OMG and elsewhere. This panel explores the nature and the extent of the architectural challenges facing UML, and makes constructive recommendations to address them.", "num_citations": "1\n", "authors": ["581"]}
{"title": "The World isn't Software\n", "abstract": " (1994) The World isn't Software. Journal of Object-Oriented Programming, 5 (9). ISSN 0896-8438.(The full text of this publication is not currently available from this repository. You may be able to access a copy if URLs are provided)(KAR id: 21214)", "num_citations": "1\n", "authors": ["581"]}
{"title": "Object-oriented languages compared\n", "abstract": " Object-oriented languages compared | Proceedings of the fourth international conference on Technology of object-oriented languages and systems ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleProceedingsTOOLS 4Object-oriented languages compared Article Object-oriented languages compared Share on Author: Steve Cook View Profile Authors Info & Affiliations TOOLS 4: Proceedings of the fourth international conference on Technology of object-oriented languages and systemsSeptember 1991 Pages 397 Published:01 September 1991 0citation 0 Downloads Metrics Total Citations0 Total Downloads0 Last 12 Months0 Last 6 \u2026", "num_citations": "1\n", "authors": ["581"]}
{"title": "Interactive user interfaces\n", "abstract": " Interactive user interfaces | Object-oriented languages, systems and applications ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksObject-oriented languages, systems and applicationsInteractive user interfaces chapter Interactive user interfaces Share on Authors: Stephen Cook View Profile , George Coulouris View Profile , Jean Dollimore View Profile , Kieron Drake View Profile , John Francis View Profile Authors Info & Affiliations Publication: Object-oriented languages, systems and applicationsFebruary 1991 Pages 244\u2013269 0citation", "num_citations": "1\n", "authors": ["581"]}
{"title": "Programming languages based on objects\n", "abstract": " Cook, Steve J.(1991) Programming Languages based on Objects. In: Blair, Gordon S., ed. Object-oriented Languages, Systems and Applications. Pitmans.(The full text of this publication is not currently available from this repository. You may be able to access a copy if URLs are provided)(KAR id: 20983)", "num_citations": "1\n", "authors": ["581"]}
{"title": "Pascal-m in Office Information Systems\n", "abstract": " Pascal-m in Office Information Systems - Kent Academic Repository Skip to main content University of Kent logo KAR Logo Login Admin Dashboards Help Simple search | Advanced search Home Browse Latest additions Policies Accessibility Statement Pascal-m in Office Information Systems Cook, Steve J., Abramsky, Samson (1981) Pascal-m in Office Information Systems. In: Naffah, N., ed. Proceedings of the Second International Workshop on office Information Systems. . North-Holland, Couvent Royal de Saint-Maximin, France (The full text of this publication is not currently available from this repository. You may be able to access a copy if URLs are provided) (KAR id:20898) The full text of this publication is not currently available from this repository. You may be able to access a copy if URLs are provided. (Contact us about this Publication) Item Type: Conference or workshop item (UNSPECIFIED) Subjects: Q \u2026", "num_citations": "1\n", "authors": ["581"]}