{"title": "How Does Modern Code Review Impact Software Design Degradation? An In-depth Empirical Study\n", "abstract": " Software design is an important concern in modern code review through which multiple developers actively discuss and improve each single code change. However, there is little understanding of the impact of such developers\u2019 reviews on continuously reducing design degradation over time. It is even less clear to what extent and how design degradation is reversed during the process of each single code change\u2019s review. In summary, existing studies have not assessed how the process of design degradation evolution is impacted along: (i) within each single review, and (ii) across multiple reviews. As a consequence, one cannot understand how certain code review practices consistently contribute to either reduce or further increase design degradation as the project evolves. We aim at addressing these gaps through a multi-project retrospective study. By investigating 14,971 code reviews from seven software\u00a0\u2026", "num_citations": "12\n", "authors": ["970"]}
{"title": "Do Research and Practice of Code Smell Identification Walk Together? A Social Representations Analysis\n", "abstract": " Context: It is frequently claimed the need for bridging the gap between software engineering research and practice. In this sense, the theory of social representations may be useful to characterize the actual concerns of software developers. It comprises the system of values, behaviors, and practices of communities regarding a particular social object, such as the task of smell identification. Aim: To characterize the social representations of smell identification by software developers. Method: Based on the answers given to a question-naire, we analyzed the associations made by the developers about smell identification, i.e., what immediately comes to their minds when they think about this task. Results: We found that developers strongly associate smell identification with the practice of smell removal and with the incidence of bugs. They also frequently associate the task with the practice of inspection and with the need\u00a0\u2026", "num_citations": "12\n", "authors": ["970"]}
{"title": "Are Code Smell Co-occurrences Harmful to Internal Quality Attributes? A Mixed-Method Study\n", "abstract": " Previous studies demonstrated how code smells (ie, symptoms of the presence of system degradation) impact the software maintainability. However, few studies have investigated which code smell types tend to co-occur in the source code. Moreover, it is not clear to what extent the removal of code smell co-occurrences-through refactoring operations-has a positive impact on quality attributes such as cohesion, coupling, inheritance, complexity, and size. We aim at addressing these gaps through an empirical study. By investigating the impact of the smells co-occurrences in 11 releases of 3 closed-source systems, we observe (i) which code smells tend to co-occur together,(ii) the impact of the removal of code smell co-occurrences on quality internal attributes before and after refactoring, and (iii) which are the most difficult co-occurrences to refactoring from the developers' perspective. Our results show that 2 types of\u00a0\u2026", "num_citations": "6\n", "authors": ["970"]}
{"title": "Investigating the Social Representations of Code Smell Identification: A Preliminary Study\n", "abstract": " Context: The identification of code smells is one of the most subjective tasks in software engineering. A key reason is the influence of collective aspects of communities working on this task, such as their beliefs regarding the relevance of certain smells. However, collective aspects are often neglected in the context of smell identification. For this purpose, we can use the social representations theory. Social representations comprise the set of values, behaviors and practices of communities associated with a social object, such as the task of identifying smells. Aim: To characterize the social representations behind smell identification. Method: We conducted a preliminary study on the social representations of smell identification by two communities. One community is composed of postgraduate students involved in various investigations related to code smells. The other community is composed of practitioners from\u00a0\u2026", "num_citations": "5\n", "authors": ["970"]}
{"title": "On the Relation between Complexity, Explicitness, Effectiveness of Refactorings and Non-Functional Concerns\n", "abstract": " Developers need to consistently improve the internal structural quality of a program to address its maintainability and possibly other non-functional concerns. Refactoring is the main practice to improve code quality. Typical refactoring factors, such as their complexity and explicitness (ie, their self-affirmation), may influence its effectiveness in improving key internal code attributes, such as enhancing cohesion or reducing its coupling, complexity and size. However, we still lack an understanding of whether such concerns and factors play a role on improving the code structural quality. Thus, this paper investigates the relationship between complexity, explicitness and effectiveness of refactorings and non-functional concerns in four projects. We study four non-functional concerns, namely maintainability, security, performance, and robustness. Our findings reveal that complex refactorings indeed have an impactful effect\u00a0\u2026", "num_citations": "4\n", "authors": ["970"]}
{"title": "Analyzing the Impact of Inter-smell Relations on Software Maintainability: An Empirical Study with Software Product Lines\n", "abstract": " A Software Product Line (SPL) consists of a systematic reuse strategy to construct systems with less effort as long as they belong to the same family that share the same components and belong to the same domain of Marketplace. In this context, to support large-scale reuse, components of a Software Product Line should be easy to maintain. Thus, developers should be more concerned with anomalies known as code smells and more than that, co-occurrences known as Inter-smell deserve to be further studied to verify their real impact on maintainability in SPL. Thus, this paper conducts a study to investigate the impact of Inter-smell occurrences on maintainability in MobileMedia and Health Watcher SPLs. The results show that the presence of co-occurrences of Inter-smell did not negatively impact the maintenance of MobileMedia and Health Watcher SPLs, unlike results found in other studies in the literature, and\u00a0\u2026", "num_citations": "4\n", "authors": ["970"]}
{"title": "VazaZika: A Software Platform for Surveillance and Control of Mosquito-Borne Diseases\n", "abstract": " Mosquito-borne diseases negatively affect economically emerging countries. Nevertheless, the current public healthcare solutions are insufficient to support disease surveillance and control. The citizen engagement in reporting mosquito breeding sites is hard to achieve but essential in preventing disease outbreaks. This paper introduces the VazaZika platform aimed to support the surveillance and control of mosquito-borne diseases. This platform evolves the VazaDengue legacy platform with gamification. Through game elements and rules, we aim to make enjoyable and challenging to report mosquito breeding sites via VazaZika. Citizens are continuously rewarded as they perform tasks in the platform. They progress in levels that enable new tasks and jump in rankings according to the citizens\u2019 location. Citizens can also join teams for engaging with challenges, which helps to develop a sense of\u00a0\u2026", "num_citations": "4\n", "authors": ["970"]}
{"title": "Predicting Design Impactful Changes in Modern Code Review: A Large-Scale Empirical Study\n", "abstract": " Companies have adopted modern code review as a key technique for continuously monitoring and improving the quality of software changes. One of the main motivations for this is the early detection of design impactful changes, to prevent that design-degrading ones prevail after each code review. Even though design degradation symptoms often lead to changes\u2019 rejections, practices of modern code review alone are actually not sufficient to avoid or mitigate design decay. Software design degrades whenever one or more symptoms of poor structural decisions, usually represented by smells, end up being introduced by a change. Design degradation may be related to both technical and social aspects in collaborative code reviews. Unfortunately, there is no study that investigates if code review stakeholders, e.g, reviewers, could benefit from approaches to distinguish and predict design impactful changes with\u00a0\u2026", "num_citations": "3\n", "authors": ["970"]}
{"title": "Visualizing the Maintainability of Feature Models in SPLs\n", "abstract": " This paper presents data visualizations obtained from the application of 15 measures used to support the maintainability evaluation of Software Product Line (SPL) and Dynamic SPL (DSPL) Feature Models (FMs). To identify these visualizations, we applied a survey to classify a set of 40 measures for evaluating the (D) SPL FMs maintainability. Five visualizations were designed from this classification to analyze the extensibility, static variability, dynamic variability, and structural complexity of the FMs. As result, the experts concluded the designed visualizations assist in FMs maintainability interpretation.", "num_citations": "3\n", "authors": ["970"]}
{"title": "On Gamifying an Existing Healthcare System: Method, Conceptual Model and Evaluation\n", "abstract": " Software gamification aims at engaging users with software system features. User engagement is promoted via a gamification model that associates game elements (e.g., points) and rules (e.g., ranking policy) with each feature. Gamification has been increasingly explored in certain healthcare domains, such as chronic disease management and physical activity. However, there are currently two important literature gaps. First, certain healthcare domains in which user engagement is even more critical, such as the prevention of mosquito-transmitted diseases, have not systematically explored gamification yet. Healthcare systems of this domain largely depend on the wide engagement of the population, health professionals and authorities. Second, gamification is often introduced in existing systems developed without gamification in mind. Current methods are quite limited to support this task. In this paper, we report\u00a0\u2026", "num_citations": "3\n", "authors": ["970"]}
{"title": "Unveiling Multiple Facets of Design Degradation in Modern Code Review\n", "abstract": " Software design is a key concern in code review through which developers actively discuss and improve each code change. Nevertheless, code review is predominantly a cooperative task influenced by both technical and social aspects. Consequently, these aspects can play a key role in how software design degrades as well as contributing to accelerating or reversing the degradation during the process of each single code change\u2019s review. However, there is little understanding about such social and technical aspects relates to either the reduction or the increase of design degradation as the project evolves. Consequently, the scarce knowledge on this topic helps little in properly guiding developers along design-driven code reviews. Our goal in this Doctoral research is three-fold:(1) to characterize the impact of code review and their practices on design degradation over time;(2) to understand the contribution of\u00a0\u2026", "num_citations": "2\n", "authors": ["970"]}
{"title": "Do Critical Components Smell Bad? An Empirical Study with Component-based Software Product Lines\n", "abstract": " Component-based software product line (SPL) consists of a set of software products that share common components. For a proper SPL product composition, each component has to follow three principles: encapsulating a single feature, restricting data access, and be replaceable. However, it is known that developers usually introduce anomalous structures, ie, code smells, along the implementation of components. These code smells might violate one or more component principles and hinder the SPL product composition. Thus, developers should identify code smells in component-based SPLs, especially those affecting highly interconnected components, which are called critical components. Nevertheless, there is limited evidence of how smelly these critical components tend to be in component-based SPLs. To address this limitation, this paper presents a survey with developers of three SPLs. We inquire these\u00a0\u2026", "num_citations": "1\n", "authors": ["970"]}
{"title": "How do Code Smell Co-occurrences Removal Impact Internal Quality Attributes? A Developers' Perspective\n", "abstract": " Code smells are poor code structures that might harm the software quality and evolution. However, previous studies has shown that only individual occurrences of smells may not be enough to assess the real impact that these smells can bring on systems. In this context, the co-occurrences of code smells, ie, occurrences of more than one code smell in the same class or same method, can be better indicators of design problems for software quality. Despite its importance as an indicator of design problems, we have little known about the impact of removing the co-occurrence of smells via software refactoring on internal quality attributes, such as coupling, cohesion, complexity, and inheritance. It is even less clear on what is the developers\u2019 perspective on the co-occurrences removal. We aim at addressing this gap through a qualitative study with 14 developers. To this end, we analyze the refactorings employed by\u00a0\u2026", "num_citations": "1\n", "authors": ["970"]}
{"title": "Investigating the Social Representations of the Identification of Code Smells by Practitioners and Students from Brazil\n", "abstract": " Context: The identification of code smells is one of the most subjective tasks in software engineering. A key reason is the influence of collective aspects of communities working on this task, such as their beliefs regarding the relevance of certain smells. However, collective aspects are often neglected in the context of smell identification. For this purpose, we can use the social representations theory. Social representations comprise the set of values, behaviors, and practices of communities associated with a social object, such as the task of identifying smells. Aim: To characterize the social representations behind smell identification. Method: We conducted an empirical study on the social representations of smell identification by two communities. One community is composed of postgraduate students from different Brazilian universities. The other community is composed of practitioners located in Brazilian companies\u00a0\u2026", "num_citations": "1\n", "authors": ["970"]}