{"title": "Two\u2019s Company, Three\u2019s a Crowd: A Case Study of Crowdsourcing Software Development\n", "abstract": " Crowdsourcing is an emerging and promising approach which involves delegating a variety of tasks to an unknown workforce-the crowd. Crowdsourcing has been applied quite successfully in various contexts from basic tasks on Amazon Mechanical Turk to solving complex industry problems, eg InnoCentive. Companies are increasingly using crowdsourcing to accomplish specific software development tasks. However, very little research exists on this specific topic. This paper presents an in-depth industry case study of crowdsourcing software development at a multinational corporation. Our case study highlights a number of challenges that arise when crowdsourcing software development. For example, the crowdsourcing development process is essentially a waterfall model and this must eventually be integrated with the agile approach used by the company. Crowdsourcing works better for specific software\u00a0\u2026", "num_citations": "217\n", "authors": ["857"]}
{"title": "Microblogging in Open Source Software Development: The Case of Drupal Using Twitter\n", "abstract": " Microblogging is a popular form of social media that has quickly permeated both enterprise and open source software development communities. However, how exactly open source communities can leverage microblogging isn't yet well understood.", "num_citations": "43\n", "authors": ["857"]}
{"title": "Exploring Onboarding Success, Organizational Fit, and Turnover Intention of Software Professionals\n", "abstract": " The IT sector struggles with talent acquisition and low retention rates. While several field studies have explored onboarding of software developers, the software engineering literature lacks studies that develop and evaluate theoretical models. This study seeks to explore the link between onboarding of new hires and turnover intention of these professionals. In particular, we develop a theoretical model that identifies a number of onboarding activities, and link these to onboarding success. We then look at what we have termed \u201corganizational fit,\u201d which we define as two aspects of software professionals, namely job satisfaction and the quality of their relationships on the workfloor, and investigate how these mediate the relation between short-term onboarding success and a longer-term intention to leave (or stay with) an organization. We test our model with a sample of 102 software professionals using PLS-SEM. The\u00a0\u2026", "num_citations": "34\n", "authors": ["857"]}
{"title": "Report on the Second SEMAT Workshop on General Theory of Software Engineering (GTSE 2013)\n", "abstract": " Software engineering needs a general theory, ie, a theory that applies across the field and unifies existing empirical and theoretical work. General theories are common in other domains, such as physics. While many software engineering theories exist, no general theory of software engineering is evident. Consequently, this report reviews the emerging consensus on a general theory in software engineering from the Second SEMAT General Theory of Software Engineering workshop co-located with the International Conference on Software Engineering in 2013. Participants agreed that a general theory is possible and needed, should explain and predict software engineering phenomena at multiple levels, including social processes and technical artifacts, should synthesize existing theories from software engineering and reference disciplines, should be developed iteratively, should avoid common misconceptions\u00a0\u2026", "num_citations": "30\n", "authors": ["857"]}
{"title": "Crowdsourcing for software engineering\n", "abstract": " Crowdsourcing, which leverages the intelligence and contributions of a large group of people to achieve a specific goal, is disrupting business models and work practices. Because crowdsourcing approaches could have a far-reaching impact on future software development, this theme issue explores various ways developers and managers can benefit from these new opportunities. The Web Extra https://youtu.be/Z_8vWQjU7iY is an audio podcast of the introduction to the theme issue on crowdsourcing for software engineering.", "num_citations": "28\n", "authors": ["857"]}
{"title": "The Dos and Don'ts of Crowdsourcing Software Development\n", "abstract": " In 1957, the eminent computer scientist, Edsger W. Dijkstra, sought to record his profession as \u201cComputer Programmer\u201d on his marriage certificate. The Dutch authorities, although probably more progressive than most, refused on the grounds that there was no such profession. Ironically, just a decade later, the term \u201csoftware crisis\u201d had been coined, as delegates at a NATO Conference in Garmisch [1] reported a common set of problems, namely that software took too long to develop, cost too much to develop, and the software which was eventually delivered did not meet user expectations. Despite the advances in technology over the past 50 years, this remains problematic, as evidenced by the following quote from the US President\u2019s Council of Advisors on Science & Technology (PCAST) in 2012.", "num_citations": "19\n", "authors": ["857"]}
{"title": "Gender differences in personality traits of software engineers\n", "abstract": " There is a growing body of gender studies in software engineering to understand diversity and inclusion issues, as diversity is recognized to be a key issue to healthy teams and communities. A second factor often linked to team performance is personality, which has received far more attention. Very few studies, however, have focused on the intersection of these two fields. Hence, we set out to study gender differences in personality traits of software engineers. Through a survey study we collected personality data, using the HEXACO model, of 483 software engineers. The data were analyzed using a Bayesian independent sample t-test and network analysis. The results suggest that women score significantly higher in Openness to Experience, Honesty-Humility, and Emotionality than men. Further, men show higher psychopathic traits than women. Based on these findings, we develop a number of propositions that\u00a0\u2026", "num_citations": "17\n", "authors": ["857"]}
{"title": "Introduction to the special section\u2014General Theories of Software Engineering: New advances and implications for research\n", "abstract": " In recent years, software engineering researchers have recognized the importance of the role of theory or SE research, resulting in the emergence of the General Theories of Software Engineering (GTSE) community. This editorial introduces a special section that contains four articles, and reflects on the advances made by the contributing authors.We discuss the different approaches taken in each of the four papers and outline a number of avenues for future research.", "num_citations": "16\n", "authors": ["857"]}
{"title": "Software Reuse in Open Source: A Case Study\n", "abstract": " A promising way to support software reuse is based on Component-Based Software Development (CBSD). Open Source Software (OSS) products are increasingly available that can be freely used in product development. However, OSS communities still face several challenges before taking full advantage of the \u201creuse mechanism\u201d: many OSS projects duplicate effort, for instance when many projects implement a similar system in the same application domain and in the same topic. One successful counter-example is the FFmpeg multimedia project; several of its components are widely and consistently reused in other OSS projects. Documented is the evolutionary history of the various libraries of components within the FFmpeg project, which presently are reused in more than 140 OSS projects. Most use them as black-box components; although a number of OSS projects keep a localized copy in their repositories\u00a0\u2026", "num_citations": "16\n", "authors": ["857"]}
{"title": "Inner Source Project Management\n", "abstract": " Software development organizations are continuously looking for better ways to manage their projects. An emerging approach to achieve this is Inner Source, which refers to the adoption of Open Source development practices within the confines of an organization. With an Inner Source approach, individuals, teams, and departments within an organization can start software projects, very similar to the Open Source model. This affects the way projects are managed in a variety of ways. Firstly, it will affect strategic aspects such as a software sourcing strategy that includes decisions on which software can be \u201cInner-Sourced.\u201d Secondly, at the tactical level, organizations should choose an appropriate Inner Source adoption model that suits the goals and scope of the organization. Finally, it will affect the operational aspects of a project, for example, in the way different people across a whole organization can\u00a0\u2026", "num_citations": "12\n", "authors": ["857"]}
{"title": "PLS-SEM for Software Engineering Research: An Introduction and Survey\n", "abstract": " Software Engineering (SE) researchers are increasingly paying attention to organizational and human factors. Rather than focusing only on variables that can be directly measured, such as lines of code, SE research studies now also consider unobservable variables, such as organizational culture and trust. To measure such latent variables, SE scholars have adopted Partial Least Squares Structural Equation Modeling (PLS-SEM), which is one member of the larger SEM family of statistical analysis techniques. As the SE field is facing the introduction of new methods such as PLS-SEM, a key issue is that not much is known about how to evaluate such studies. To help SE researchers learn about PLS-SEM, we draw on the latest methodological literature on PLS-SEM to synthesize an introduction. Further, we conducted a survey of PLS-SEM studies in the SE literature and evaluated those based on recommended\u00a0\u2026", "num_citations": "11\n", "authors": ["857"]}
{"title": "Soft theory: a pragmatic alternative to conduct quantitative empirical studies\n", "abstract": " Practitioners and scholars often face new software engineering phenomena which lack sufficient theoretical grounding. When studying such nascent and emerging topics, it is important to establish an initial and rudimentary understanding, leaving a more precise understanding of underpinning mechanisms till later. Controlled experiments, for example, might lead to insights into the specific mechanisms underpinning a certain practice, such as distributed development, pair programming, and test-driven development. However, at an initial stage of research, such highly controlled studies may not be feasible. In other domains, it may not be clear what the key constructs are, so that effective measurement cannot be done. Instead, researchers might opt for pragmatic alternative research approaches that do not require experimental control or active intervention in a study's setting. In this paper we advocate the use of soft\u00a0\u2026", "num_citations": "9\n", "authors": ["857"]}
{"title": "A Preliminary Theory for Open Source Ecosystem Micro-economics\n", "abstract": " While there has been substantial empirical work identifying factors that influence the contribution to, and use of open-source software, we have as yet little theory that identifies the key constructs and relationships that would allow us to explain and predict how open-source ecosystems function. The absence of ecosystem theory is particularly alarming as open-source software works its way more broadly and deeply into the economy. The problem facing policymakers is how to provide support and resources when needed, without distorting decision-making, demotivating volunteers, serving special interests at the expense of others, and maintaining the communities that take on and guide the work. What is needed is a clearly articulated and empirically validated theory of open-source ecosystems. This chapter provides a sketch of such a theory in the form of a set of propositions, which may form the foundation for\u00a0\u2026", "num_citations": "6\n", "authors": ["857"]}
{"title": "Supporting product development with software from the bazaar\n", "abstract": " THERE ARE VARIOUS scenarios for a software development organisation to adopt Open Source Software (OSS). One scenario is the adoption of OSS products in order to integrate them as components into a final software product. Another scenario is the adoption of OSS development practices within the confines of an organisation; this is called \u201cInner Source\u201d. In both cases, the software product that is developed is used in component-based software development (CBSD) to build large-scale products. Also, in both cases, such software is developed by a \u201ccommunity\u201d, or using Raymond\u2019s metaphor, in a \u201cbazaar\u201d. In the first case, the bazaar is external, and in the second case the bazaar is internal to the organisation. Both scenarios have been reported as providing benefit to organisations. However, little research has been conducted to identify and document the challenges that practitioners may encounter in these two scenarios. The research in this thesis is divided into two strands, one for each scenario. The first research strand consists of a systematic identification of challenges in using OSS in product development. One of the most frequently reported challenges is the evaluation and selection of components. This was followed by an analysis of existing OSS evaluation methods proposed so far. These methods seem to pay little attention to a product\u2019s software architecture, which has been identified as a critical success factor in CBSD. To gain insight whether or not practitioners are, in fact, interested in architectural knowledge (AK) of an OSS product, an empirical survey was conducted. One of the findings was that practitioners are interested in\u00a0\u2026", "num_citations": "5\n", "authors": ["857"]}
{"title": "Company soldiers and gone-natives: role conflict and career ambition among firm-employed open source developers\n", "abstract": " Software companies are increasingly shifting their role in open source software (OSS) projects from passive adopters to active contributors, and creators of OSS projects. Many firms now employ developers to work on OSS projects to influence their further development. These developers may gain considerable influence in OSS communities, though this typically takes a long time. Previous research found that those individual developers\u2019 agendas are not always aligned to that of the firm. While so-called \u201ccompany soldiers\u201d strongly identify with their firm, other developers may have \u201cgone native\u201d: they identify more strongly with the OSS community rather than the firm. We study the effect of such an imbalance of identification on firm-community role conflict, which may lead to an intention to quit either the firm or the OSS community. We also consider the moderating effects of developers\u2019 career ambitions on this relationship. Furthermore, we include the effects of developers\u2019 desired career paths on their intentions to quit the firm and community. We test our model using a sample of 177 firm-employed OSS developers, and find that identification imbalance is associated with firm-community role conflict and that these conflicts drive both intentions to quit the firm and the community. Other findings include a significant negative moderating effect of developers\u2019 firm career aspirations on the relation between role conflict and intentions to quit the firm. Several of our hypotheses were not supported, but we found \u201cregions of significance,\u201d which suggests several avenues for further research. We conclude with recommendations for managing firm-community\u00a0\u2026", "num_citations": "4\n", "authors": ["857"]}
{"title": "Lead users' innovative work behavior in digital platform ecosystems: a large scale study of app developers\n", "abstract": " Application developers constitute an important part of a digital platform\u2019s ecosystem. Knowledge about psychological processes that drive developer behavior in platform ecosystems is scarce. We build on the lead userness construct which comprises two dimensions, trend leadership and high expected benefits from a solution, to explain how developers\u2019 innovative work behavior (IWB) is stimulated. We employ an efficiency-oriented and a social-political perspective to investigate the relationship between lead userness and IWB. The efficiency-oriented view resonates well with the expected benefit dimension of lead userness, while the social-political view might be interpreted as a reflection of trend leadership. Using structural equation modeling, we test our model with a sample of over 400 developers from three platform ecosystems. We find that lead userness is indirectly associated with IWB and the performance-enhancing view to be the stronger predictor of IWB. Finally, we unravel differences between paid and unpaid app developers in platform ecosystems.", "num_citations": "3\n", "authors": ["857"]}
{"title": "The map\n", "abstract": " Scaling software development is a complex enterprise that can be organized in a number of ways. Since the early days of computing, hundreds, if not thousands of software development methods have been proposed.", "num_citations": "2\n", "authors": ["857"]}
{"title": "Appendix to Company Soldiers and Gone Natives: Role Conflict and Career Ambition Among Firm-Employed Open Source Developers\n", "abstract": " Appendix to: Company Soldiers and Gone-Natives: Role Conflict and Career Ambition Among Firm-Employed Open Source Developers Page 1 Company Soldiers and Gone-Natives Thirty ninth International Conference on Information Systems, San Francisco 2018 1 Appendix to: Company Soldiers and Gone-Natives: Role Conflict and Career Ambition Among Firm-Employed Open Source Developers Completed Research Paper Mario Schaarschmidt University of Koblenz-Landau Institute for Management Universit\u00e4tsstra\u03b2e 1 56070 Koblenz mario.schaarschmidt@uni-koblenz.de Klaas-Jan Stol Lero, the Irish Software Research Centre, University College Cork School of Computer Science and Information Technology k.stol@ucc.ie Appendix Table A-1 presents the measurement instrument used in the online survey. Table A-1. Measurement Instrument Role Conflict (adapted from House and Rizzo, 1972) Factor \u2026", "num_citations": "1\n", "authors": ["857"]}
{"title": "Innersource patterns for collaboration\n", "abstract": " Open Source has changed the landscape for software development organizations. There are numerous very successful open source projects involving hundreds of developers dispersed worldwide, and many organizations are interested in adopting the principles and practices to build\" open\" communities within their organizations. This has been termed\" InnerSource\" and this paradigm is attracting considerable attention from the software industry. The InnerSource Commons is an industry-driven community that is actively pursuing an agenda to share knowledge, experiences, and lessons learned on adopting InnerSource. One means of doing this is to encode\" best practices\" as patterns. In this paper, we present a number of patterns that the InnerSource Commons community has distilled, which other organizations that are interested in InnerSource can adopt and tailor to their respective organizational settings.", "num_citations": "1\n", "authors": ["857"]}