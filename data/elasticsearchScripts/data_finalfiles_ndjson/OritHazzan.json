{"title": "Reducing abstraction level when learning abstract algebra concepts\n", "abstract": " How do undergraduate students cope with abstract algebra concepts? How should we go about researching this question? Based on interviews with undergraduate students and on written questionnaires, a theoretical framework evolved which could coherently account for most of the data. According to this theoretical framework, students' responses can be interpreted as a result of reducing the level of abstraction. In this paper, the theme of reducing abstraction is examined, based on three interpretations for levels of abstraction discussed in mathematics education research literature. From these three perspectives on abstraction, ways in which students reduce abstraction level are analyzed and exemplified.", "num_citations": "225\n", "authors": ["2222"]}
{"title": "Guide to teaching computer science\n", "abstract": " In the Introduction, we present the motivation for writing this Guide that, among many options, can serve as a textbook for the Methods of Teaching Computer Science (MTCS) course. We present the structure of the Guide and how it can be used in different frameworks of computer science education. We highlight that the varied topics and teaching methods, presented in this Guide in the context of computer science, can serve educators at all levels when designing their curriculum. We also suggest an organizing theme for the MTCS course\u2013the MERge framework.", "num_citations": "194\n", "authors": ["2222"]}
{"title": "Agile software testing in a large-scale project\n", "abstract": " Agile software development in general and Extreme Programming (XP) in particular, promote radical changes in how software development organizations traditionally work. We present and analyze new data from a real, large-scale agile project to develop a business-critical enterprise information system for the Israeli Air Force (IAF). Our results offer new evidence that agile testing practices actually work, dramatically improving development quality and productivity. We describe the organization's successful practices and guidelines in four key areas: test design and activity execution, working with professional testers, planning, and defect management", "num_citations": "155\n", "authors": ["2222"]}
{"title": "Building information modeling education for construction engineering and management. II: Procedures and implementation case study\n", "abstract": " The construction industry needs graduate engineers with knowledge and skills in building information modeling (BIM). A detailed set of 39 topics required for BIM competence in construction management, together with specific targets for competency in each topic, was recently compiled on the basis of research into the needs of industry. However, only a handful of universities have introduced BIM topics into their curricula for construction engineering and management (CEM) students. A set of guidelines for the integration of BIM topics into CEM curricula has been developed and tested at the Technion-Israel Institute of Technology. The BIM education interventions in four out of seven courses were planned, implemented, and evaluated over three semesters. The experiments showed that BIM should be introduced not only as a topic in its own right, but more importantly, also as a tool for performing the engineering\u00a0\u2026", "num_citations": "145\n", "authors": ["2222"]}
{"title": "Interviewing in mathematics education research: Choosing the questions\n", "abstract": " With the development of qualitative methodologies, interviewing has become one of the main tools in mathematics education research. As the first step in analyzing interviewing in mathematics education we focus here on the stage of planning, specifically, on designing the interview questions. We attempt to outline several features of interview questions and understand what guides researchers in choosing the interview questions. Our observations and conclusions are based on examining research in mathematics education that uses interviews as a data-collection tool and on interviews with practicing researchers reflecting on their practice.", "num_citations": "145\n", "authors": ["2222"]}
{"title": "The rationality debate: Application of cognitive psychology to mathematics education\n", "abstract": " Research in mathematics education usually attempts to look into students\u2019 learning and other mental processes. It could therefore be expected to build on knowledge acquired within the academic discipline of cognitive psychology. Our aim in this paper is to show how some recent developments in cognitive psychology can help interpret empirical results from mathematics education. In particular, we will be looking into the heuristics-and-biases research by Kahneman and Tversky, the alternative views by Gigerenzer et al., and the more recent dual-process theory that has come to play a central role in interpreting this research. We first introduce the relevant background from cognitive psychology and survey its connections to previous work in mathematics education; then we apply this theoretical framework for re-interpreting previously-published empirical data from mathematics education research. We\u00a0\u2026", "num_citations": "134\n", "authors": ["2222"]}
{"title": "The reflective practitioner perspective in software engineering education\n", "abstract": " This paper focuses on the application of the reflective practitioner (RP) perspective to the profession of software engineering (SE). The RP perspective guides professional people to rethink their professional creations during and after the accomplishment of the creation process. Analysis of the field of SE supports the adoption of the RP perspective to SE in general and to SE education in particular. The RP perspective emphasizes the studio\u2013\u2013the basic training method in architecture schools\u2013\u2013as the educational environment for design studies. In such studios students develop projects with a close guidance of a tutor. Analysis of the kind of tasks that architecture students are working on and a comparison of these tasks to the problems that SE students are facing, suggest that the studio may be an appropriate teaching method in SE as well. The paper presents the main ideas of the RP perspective and examines its\u00a0\u2026", "num_citations": "119\n", "authors": ["2222"]}
{"title": "Teaching and Learning Qualitative Research\u2248 Conducting Qualitative Research.\n", "abstract": " This paper presents a teaching framework for a graduate course on Qualitative Research Methods course. The organizing concept of the teaching framework is that teaching and learning qualitative research are similar in essence to conducting qualitative research. The teaching framework is based on ten principles of teaching and learning qualitative research methods that result from the application of ten principles of conducting qualitative research. In other words, teaching and learning a course that deals with qualitative research implements the principles of such research. The teaching framework was constructed during a reflective research that lasted four years. During the course of the study, the researchers-lecturers collected and analyzed various course assignments performed by 62 students, online student discussions, observations made during class, interviews, and occasional conversations with students. The study contributes to research on the pedagogy of research methods in general and of qualitative research methods in particular. Keywords: Pedagogy of Research Methods, Qualitative Research Methods, Adult Learning, Higher Education, Technological Research University", "num_citations": "109\n", "authors": ["2222"]}
{"title": "Human aspects of software engineering\n", "abstract": " FIREWALL MEDIA (AN IMPRINT OF LAXMI PUBLICATIONS PVT. LTD.) OR CHARLES RIVER MEDIA, INC.(\u201cCRM\") AND/OR ANYONE WHO HAS BEEN INVOLVED IN THE WRITING, CREATION, OR PRODUCTION OF THE ACCOMPANYING CODE IN THE TEXTUAL MATERIAL IN THE BOOK, CANNOT AND DO NOT WARRANT THE PERFORMANCE OR RESULTS THAT MAY BE OBTAINED BY USING THE CONTENTS OF THE BOOK. THE AUTHOR AND PUBLISHER HAVE USED THEIR BEST EFFORTS TO ENSURE THE ACCURACY AND FUNCTIONALITY OF THE TEXTUAL MATERIAL AND PROGRAMS DESCRIBED HEREIN. WE, HOWEVER, MAKE NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, REGARDING THE PERFORMANCE OF THESE PROGRAMS OR CONTENTS. THE BOOK IS SOLD\" AS IS\" WITHOUT WARRANTY (EXCEPT FOR DEFECTIVE MATERIALS USED IN MANUFACTURING THE BOOK OR DUE TO FAULTY WORKMANSHIP).", "num_citations": "107\n", "authors": ["2222"]}
{"title": "Agile software engineering\n", "abstract": " Overview and Goals The agile approach for software development has been applied more and more extensively since the mid nineties of the 20th century. Though there are only about ten years of accumulated experience using the agile approach, it is currently conceived as one of the mainstream approaches for software development. This book presents a complete software engineering course from the agile angle. Our intention is to present the agile approach in a holistic and compreh-sive learning environment that fits both industry and academia and inspires the spirit of agile software development. Agile software engineering is reviewed in this book through the following three perspectives: l The Human perspective, which includes cognitive and social aspects, and refers to learning and interpersonal processes between teammates, customers, and management. l The Organizational perspective, which includes managerial and cultural aspects, and refers to software project management and control. l The Technological perspective, which includes practical and technical aspects, and refers to design, testing, and coding, as well as to integration, delivery, and maintenance of software products. Specifically, we explain and analyze how the explicit attention that agile software development gives these perspectives and their interconnections, helps viii Preface it cope with the challenges of software projects. This multifaceted perspective on software development processes is reflected in this book, among other ways, by the chapter titles, which specify dimensions of software development projects such as quality, time, abstraction, and management\u00a0\u2026", "num_citations": "102\n", "authors": ["2222"]}
{"title": "Knowledge management in practice: The case of agile software development\n", "abstract": " Knowledge is considered as the main competitive asset of the organization. One of the knowledge management (KM) cornerstones is improving productivity by effective knowledge sharing and transfer. However, from the game theory perspective, the main constraint is that people tend not to collaborate in uncertainty conditions, when collaborative behavior is not guaranteed, and sharing knowledge is time- and effort-consuming. Therefore, KM must be a practical aspect of the general organizational culture. Specifically, software development is a knowledge-intensive activity and its success depends heavily on the developers' knowledge and experience. In this presentation we highlight how the agile approach initiates a culture change that is in line with the culture change needed for a KM initiative. We discuss KM enablers that are embedded in the agile software engineering approach, and illustrate how\u00a0\u2026", "num_citations": "98\n", "authors": ["2222"]}
{"title": "A model for high school computer science education: The four key elements that make it!\n", "abstract": " This paper presents a model program for high school computer science education. It is based on an analysis of the structure of the Israeli high school computer science curriculum considered to be one of the leading curricula worldwide. The model consists of four key elements as well as interconnections between these elements. It is proposed that such a model be considered and/or adapted when a country wishes to implement a nation-wide program for high school computer science education.", "num_citations": "98\n", "authors": ["2222"]}
{"title": "Students' use and misuse of mathematical theorems: The case of Lagrange's theorem\n", "abstract": " Well, if you were inclined to answer in the negative, then you are up for some surprises, just like we were. As it turned out, our students did find a connection. In fact, 20 students out of 113 computer science majors in a top-rank Israeli university answered the second question above with (some slight variation of) the following statement: Z3 is a subgroup of Z^ by Lagrange's Theorem, because 3 divides 6.", "num_citations": "95\n", "authors": ["2222"]}
{"title": "Students' understanding of the notion of function in dynamic geometry environments\n", "abstract": " To make optimal use of computational environments, one must understand how students interact with the environments and how students' mathematical thinking is reflected and affected by their use of the environments. Similarly, to make sense of research on students' thinking and learning, one must understand how the environments and contexts used in the research may affect the conclusions one derives.               The research on students' learning of functions has approached the topic in terms of symbols and graphs (see, for example, Leinhardt et al. (1990) for a review of work up to that point; Harel and Dubinsky (1992) for a collection of research; and Dugdale et. al. (1995), for some recent thinking about implications for curriculum reform using technology). Dynamic geometry environments (DGEs) like Cabri Geometry or Geometer's Sketchpad, offer us an opportunity to get a new perspective on these\u00a0\u2026", "num_citations": "91\n", "authors": ["2222"]}
{"title": "How students attempt to reduce abstraction in the learning of mathematics and in the learning of computer science\n", "abstract": " This article focuses on ion and ways in which students cope with abstraction. The article has two goals: first, it illustrates how the theme of reducing abstraction (Hazzan, 1999) is useful for analyzing students' thinking about abstract concepts in mathematics and in computer science; second, it demonstrates how theories based on mathematics education research can be applied to analyzing students' understanding of computer science concepts. The main section of the article analyzes the understanding of concepts from four fields \u2013 abstract algebra, computability, data structures and differential equations \u2013 through the lens of reducing abstraction. The analysis shows that a wide range of cognitive phenomena can be explained by one theoretical framework.", "num_citations": "86\n", "authors": ["2222"]}
{"title": "Learning group isomorphism: A crossroads of many concepts\n", "abstract": " This article is concerned with how undergraduate students in their first abstract algebra course learn the concept of group isomorphism. To probe the students' thinking, we interviewed them while they were working on tasks involving various aspects of isomorphism. Here are some of the observations that emerged from analysis of the interviews. First, students show a strong need for \u201ccanonical\u201d, unique, step-by-step procedures and tend to get stuck of having to deal with some degrees of freedom in their choices. Second, students exhibit various degrees of personification and localization in their language, as in \u201cI can find a function that takes every element of G to every element of G\u2032\u201d vs. \u201cthere exists a function from G to G\u2032\u201d. Third, when having to deal with a list of properties, students choose first the properties they perceive as simpler; however, it turns out that their choice depends on the type of the task\u00a0\u2026", "num_citations": "83\n", "authors": ["2222"]}
{"title": "Reducing abstraction: The case of school mathematics\n", "abstract": " There is a growing interest in the mathematics education community in the notion of abstraction and its significance in the learning of mathematics. \u201cReducing abstraction\u201d is a theoretical framework that examines learners\u2019 behavior in terms of coping with abstraction level. It refers to situations in which learners are unable to manipulate concepts presented in a given problem; therefore, they unconsciously reduce the level of abstraction of the concepts involved to make these concepts mentally accessible. This framework has been used for explaining students\u2019 conception in different areas of undergraduate mathematics and computer science. This article extends the applicability scope of this framework from undergraduate mathematics to school mathematics. We draw on recently published research articles and exemplify how students\u2019 behavior can be described in terms of various interpretations of reducing\u00a0\u2026", "num_citations": "81\n", "authors": ["2222"]}
{"title": "Intuitive vs analytical thinking: four perspectives\n", "abstract": " This article is an attempt to place mathematical thinking in the context of more general theories of human cognition. We describe and compare four perspectives\u2014mathematics, mathematics education, cognitive psychology, and evolutionary psychology\u2014each offering a different view on mathematical thinking and learning and, in particular, on the source of mathematical errors and on ways of dealing with them in the classroom. The four perspectives represent four levels of explanation, and we see them not as competing but as complementing each other. In the classroom or in research data, all four perspectives may be observed. They may differentially account for the behavior of different students on the same task, the same student in different stages of development, or even the same student in different stages of working on a complex task. We first introduce each of the perspectives by reviewing its basic\u00a0\u2026", "num_citations": "80\n", "authors": ["2222"]}
{"title": "Prospective high school mathematics teachers\u2019 attitudes toward integrating computers in their future teaching\n", "abstract": " This article presents the findings of a study on the attitudes of prospective high school mathematics teachers toward integrating computers into their future classroom teaching. Ninety-four prospective teachers in four classes that focused on didactic and cognitive aspects of learning mathematics with computers were asked to present pro and con arguments that would influence their use of computers in their future mathematics teaching. A two-dimensional framework is used to present an analysis of the prospective teachers\u2019 arguments, which were collected through written questionnaires and class discussions. One dimension relates to the class components of a lesson: learner, teacher, mathematical content, learning environment, and class atmosphere. The second dimension is made up of the psychological aspects: cognitive, affective, and social.", "num_citations": "76\n", "authors": ["2222"]}
{"title": "Culture and environment as determinants of women's participation in computing: revealing the\" women-CS fit\"\n", "abstract": " There are some arguments that suggest women need academic handholding, such as a \"female friendly\" curriculum, in order for them to participate and be successful in computer science and related fields. Then there are other arguments that suggest we need to change the field to suit women or help women adjust to the field. In this paper we present a different perspective that shows none of these may be necessary. The \"Women-CS Fit\" is already there! Specifically, under certain cultural and environmental conditions we can see that women fit very well into computing fields and what we have been attributing to gender is actually the result of cultural and environmental conditions. The reasons for women participating in -- or not participating in -- the field of computer science have little to do with gender and a lot to do with culture. In other words, we need to recognize that this is a cultural issue, and an issue that\u00a0\u2026", "num_citations": "73\n", "authors": ["2222"]}
{"title": "Qualitative research in computer science education\n", "abstract": " This paper discusses the suitability of the qualitative research approach to computer science education research. It is based on the following two observations: First, only a small proportion of works presented in the computer science education literature contain some experimental component (Fincher and Petre, 2004; Valentine, 2004). Second, those research works conducted in computer science education that do, usually employ a quantitative research approach. This paper focuses on the qualitative research approach, presenting its nature, discussing its relationships to the quantitative research approach and addressing its application in general and in the context of computer science education in particular.", "num_citations": "67\n", "authors": ["2222"]}
{"title": "The world according to Johnny; a coping perspective in mathematics education\n", "abstract": " Students in mathematical problem-solving situations often experience confusion and loss of meaning. In these situations, affective and social factors are as much part of the student's thinking and behavior as are cognitive factors. These additional factors might include, for example, the need to make sense and the need to meet expectations of the authority figure involved (e.g., teacher or researcher). In this paper we attempt to analyze students' productions, taking into account such additional affective and social factors. To this end, we have tried to reproduce the student's voice in what we call virtual monologue. It consists of a monologue in the student's voice given in first person language, in which we try to describe as vividly and as faithfully as we can our picture of what might be going on in the student's mind during such situations.", "num_citations": "67\n", "authors": ["2222"]}
{"title": "Teaching a software development methodology: the case of extreme programming\n", "abstract": " This article focuses on the teaching of software development methodologies. It presents ten principles of teaching such a topic, while examining each from both a pedagogical and an organizational viewpoint. The teaching principles are demonstrated using the methodology of extreme programming (XP).", "num_citations": "65\n", "authors": ["2222"]}
{"title": "A framework for teaching software development methods\n", "abstract": " This article presents a study that aims at constructing a teaching framework for software development methods in higher education. The research field is a capstone project-based course, offered by the Technion's Department of Computer Science, in which Extreme Programming is introduced. The research paradigm is an Action Research that involves cycles of data collection, examination, evaluation, and application of results. The research uses several research tools for data gathering, as well as several research methods for data interpretation. The article describes in detail the research background, the research method, and the gradual emergence process of a framework for teaching software development methods. As part of the comprehensive teaching framework, a set of measures is developed to assess, monitor, and improve the teaching and the actual process of software development projects.", "num_citations": "57\n", "authors": ["2222"]}
{"title": "A cultural perspective on gender diversity in computing\n", "abstract": " This chapter presents a cultural perspective for thinking about, and acting on, issues concerning gender and computer science and related fields. We posit and demonstrate that the notion of a gender divide in how men and women relate to computing, traditionally attributed to gender differences, is largely a result of cultural and environmental conditions. Indeed, the reasons for women entering\u2014or not entering\u2014the field of computer science have little to do with gender and a lot to do with environment and culture as well as the perception of the field. Appropriate outreach, education, and interventions in the microculture can have broad impact, increasing participation in computing and creating environments where both men and women can flourish. Thus, we refute the popular notion that focusing on gender differences will enhance greater participation in computing, and we propose an alternative, more constructive approach that focuses on culture. We illustrate the cultural perspective using specific case studies based in different geographical and cultural regions.", "num_citations": "54\n", "authors": ["2222"]}
{"title": "Challenges to computer science education research\n", "abstract": " In recent years, the theme of research in computer science education (CSE) has received a relatively large share of attention in the CSE community [1, 2, 3, 4, 5]. Some specific activities conducted in this direction include:", "num_citations": "53\n", "authors": ["2222"]}
{"title": "The reflective practitioner perspective in eXtreme Programming\n", "abstract": " This paper examines ways by which a reflective mode of thinking may improve eXtreme Programming (XP) practices. It describes the reflective practitioner perspective and suggests specific ways in which such an approach may be interwoven into XP practices. Specifically, the focus is placed on the construction of ladders of reflection. These ladders illustrate how one may increase the level of abstraction of his/her thinking when reflection is interwoven in the process of software development, and how such an experience may promote one\u2019s comprehension of the relevant development process.", "num_citations": "51\n", "authors": ["2222"]}
{"title": "Reflections on teaching abstraction and other soft ideas\n", "abstract": " This essay relies on my research works about abstraction conducted over the past decade. It addresses the importance of increasing students' awareness to the concept of abstraction and other soft ideas and suggests several approaches for the teaching of soft ideas in general and of the concept of abstraction in particular.", "num_citations": "48\n", "authors": ["2222"]}
{"title": "A perspective on\" give an example\" tasks as opportunities to construct links among mathematical concepts\n", "abstract": " Preservice elementary school teachers have been asked to give examples for mathematical entities which satisfy certain properties. Their approaches, ways of thinking and difficulties have been analyzed using a contemporary constructivist framework. We suggest that problems which invite students to give examples of mathematical notions under specified constrains, may help learners in constructing links between different notions, and therefore assist them in constructing more compound mental schemas.", "num_citations": "48\n", "authors": ["2222"]}
{"title": "Why software engineering programs should teach agile software development\n", "abstract": " In this paper we propose ten reasons why it is important, suitable and timely to introduce agile software development into software engineering programs in the academia. These reasons address technical, social and cognitive issues.", "num_citations": "46\n", "authors": ["2222"]}
{"title": "Agile metrics at the israeli air force\n", "abstract": " It is a significant challenge to implement and research agile software development methods in organizations such as the army. Since it differs from organizations in the industry and the academia, data gathered in the army and its continuous analysis may enrich the community knowledge abut agile methods. This work describes a research, conducted during an entire release, about one development team at the Israeli Air Force that works according to Extreme Programming. The establishment of this team and the investigation of the first release is part of a long-term process, started last year, aiming to reduce delivery time while raising communication and customer collaboration. Among several themes this research is concerned with, we focus on agile metrics and provide a metrics mechanism that was established and refined along the release development.", "num_citations": "46\n", "authors": ["2222"]}
{"title": "A survey of computer science teacher preparation programs in israel tells us: Computer science deserves a designated high school teacher preparation!\n", "abstract": " This paper focuses on the development and implementation of computer science (CS) teacher preparation programs, which are among the educational and pedagogical challenges faced by those involved in the current development of CS. It presents a survey that reflects the accumulative knowledge gained in Israel over the past twenty years with respect to CS teacher preparation. We explored nine institutes (six universities and three teacher education colleges) that offer CS teacher preparation programs. The survey indicates that while the programs vary in their implementation details, they are all motivated by the unique characteristics of CS, which play a central role in their design. We suggest that this observation further emphasizes the obvious: CS deserves designated CS teacher preparation programs. We therefore hope that this survey will contribute to the community of CS educators in general and to\u00a0\u2026", "num_citations": "44\n", "authors": ["2222"]}
{"title": "Roles in agile software development teams\n", "abstract": " One of the key elements in describing a software development method is the roles that are assigned to the members of the software team. This article describes our experience in assigning roles to students who are involved in the development of software projects, working in Extreme Programming teams. This experience, which is based on 25 such projects, teaches us that a personal role for each teammate increases personal responsibility while maintaining the essence of the software development method. In this paper we discuss ways in which different software development methods address the place of roles in a software development team. We also share our experience in refining role specifications and suggest a way to achieve and measure progress by using the perspective of the different roles.", "num_citations": "42\n", "authors": ["2222"]}
{"title": "An agile constructionist mentoring methodology for software projects in the high school\n", "abstract": " This article describes the construction process and evaluation of the Agile Constructionist Mentoring Methodology (ACMM), a mentoring method for guiding software development projects in the high school. The need for such a methodology has arisen due to the complexity of mentoring software project development in the high school. We introduce the ACMM and suggest a year-long mentoring template that includes the practices required for the actual mentoring process. The evaluation of the ACMM reveals that the methodology addresses each of the challenges teachers cope with during the mentoring process, which were identified in the first phase of the research.", "num_citations": "40\n", "authors": ["2222"]}
{"title": "Reflections on reflection in agile software development\n", "abstract": " This paper analyzes the reflections of an agile team, developing a large-scale project in an industry setting. The team uses an iteration summary meeting practice, which includes four elements: the customer's summary, a formal presentation of the system, review of metrics and a reflection. The technique for the entire meeting and for the reflection element in particular is described, and empirical evidence is given to show that it is assessed as highly effective, achieving its intended goals, and increasing team satisfaction. Further, the proposed practice supports tracking past decisions. This practice is shown to be valuable to stabilizing a new project as well as a continuous improvement forum for a stable project. It also incurs a lower overhead than existing alternative reflection practices", "num_citations": "40\n", "authors": ["2222"]}
{"title": "Methods of teaching a computer science course for prospective teachers\n", "abstract": " This article focuses on a \"Methods of Teaching Computer Science in the High School\" course (abbreviated MTCS). It presents the rationale and need for the course, and suggests optional course frameworks and implementations that are not limited to a particular programming language, programming paradigm, level of students, or curriculum.", "num_citations": "40\n", "authors": ["2222"]}
{"title": "Revealing the faces of abstraction\n", "abstract": " We adapted this paper from a presentation at the Research Conference in Collegiate Mathematics Education (RCCME), held at Central Michigan University in September, 1996. The presentation reflected our project\u2019s discussions over several months. We began with the goal of beginning to define abstraction. The result was not a definition, but a dialogue (condensed here from a cast of ten to two characters) about the complexity and the various faces of abstraction. Participants in the discussions included: Al Cuoco, Ed Dubinsky, Pamela Frorer, E. Paul Goldenberg, Wayne Harvey, Orit Hazzan, Uri Leron, Michelle Manes, Tammy Jo Ruter, and Despina Stylianou.We chose a new technique for presentation: a dialogue. We experimented with it because we wanted to present our own thinking mixed in with others\u2019 thoughts and written statements. Retaining the conversational format from which the ideas first emerged\u00a0\u2026", "num_citations": "40\n", "authors": ["2222"]}
{"title": "Feeling the doctorate: Is doctoral research that studies the emotional labor of doctoral students possible\n", "abstract": " This paper addresses the emotional labor of qualitative researchers in the social sciences, in general, and of doctoral students in the social sciences whose research is conducted using the qualitative research paradigm, in particular. The first part of this paper presents a brief review of the literature on the emotional labor of researchers in the social sciences. The second part of this paper discusses a doctoral research that investigates the emotional labor of doctoral students, examining two questions: First, why is it important to study the emotional labor of doctoral students? And second, can the topic \u201cThe emotional labor of doctoral students while conducting their doctoral research\u201d in itself constitute a topic for a doctoral dissertation?", "num_citations": "39\n", "authors": ["2222"]}
{"title": "Factors influencing the Shrinking Pipeline in high schools: A sector-based analysis of the Israeli high school System\n", "abstract": " The study described in this article continues research on gender-related issues in Computer Science education by focusing on the differences between two sectors in the Israeli high school system--the Jewish sector (majority) and the Arab sector (minority). As it turns out, the under-representation of female high school students in CS studies is significantly more salient in the majority sector. This study explores this situation and attempts to explain it. We also explain how the findings of this research can be applied to other countries and societies.", "num_citations": "38\n", "authors": ["2222"]}
{"title": "Reflection processes in the teaching and learning of human aspects of software engineering\n", "abstract": " We illustrate how reflection is introduced into the teaching and learning of the human aspects of software engineering. We start with explaining the rationale for a reflective mode of thinking and its fitness to the field of software engineering. Then we outline in detail the agenda of a course that deals with human aspects of software engineering. It is suggested that the intertwining of a reflective mode of thinking into the education of software engineers in general and especially into a course that focuses on human aspects of software engineering enhance students' understanding of the essence of the discipline as well as their professional performance in the field.", "num_citations": "37\n", "authors": ["2222"]}
{"title": "Why and how can human-related measures support software development processes?\n", "abstract": " In this paper we discuss why and how measures related to human aspects should be incorporated into software development processes. This perspective is based on the vast evidence that human aspects are the source of the majority of problems associated with software development projects. Having said that, we do not blame the humans involved in software development processes; rather, we suggest that human-related measures might be one means by which human aspects of software development processes can be supported.", "num_citations": "36\n", "authors": ["2222"]}
{"title": "Reflection and abstraction in learning software engineering's human aspects\n", "abstract": " Intertwining reflective and abstract modes of thinking into the education of software engineers, especially in a course that focuses on software engineering's human aspects, can increase students' awareness of the discipline's richness and complexity while enhancing their professional performance in the field. The complexity of software development environments includes the profession's cognitive and social aspects. A course designed to increase students' awareness of these complexities introduces them to reflective mental processes and to tasks that invite them to apply abstract thinking. For the past three years, we have taught a Human Aspects of Software Engineering course at both the Technion-Israel Institute of Technology and the School of Computer Science at Carnegie Mellon University. This course aims to increase software engineering students' awareness of the richness and complexity of various\u00a0\u2026", "num_citations": "33\n", "authors": ["2222"]}
{"title": "On the contribution of UML diagrams to software system comprehension\n", "abstract": " Program comprehension has been researched extensively ever since software systems became complex and longer than a few hundred code lines. At the same time, the way in which people comprehend visual models of software systems has received much less attention. This paper focuses on the comprehension of UML diagrams. During the research presented in this paper, data was gathered from the work of two groups. Group 1 consisted of 13 senior computer science students who worked in five teams. The students were asked to trace and analyze the process by which they retrieved information from UML diagrams of a given system. Group 2 consisted of 42 senior computer science students who were requested to complete a questionnaire in which they were asked to rank different types of UML diagrams according to their importance. The section on data analysis discusses strategies adopted by the novices in their attempt to reveal the meaning of a set of UML diagrams, as well as their attitudes towards the different diagrams. One of the interesting observations is that although each team had its own preferences with respect to the usefulness of each specific type of diagrams, the overall use of each diagram type is very similar across the teams.", "num_citations": "33\n", "authors": ["2222"]}
{"title": "Bridging cognitive and social chasms in software development using extreme programming\n", "abstract": " Extreme programming (XP) is one of the agile software development methodologies. It achieves its goals by the implementation of twelve practices, all aimed at reducing risks in software development and improving software quality. This paper presents two chasms inherent in software development processes - a cognitive chasm and a social chasm - and describes, based on our experience, how the twelve XP practices can help bridge these chasms.", "num_citations": "33\n", "authors": ["2222"]}
{"title": "Social perspective of software development methods: The case of the prisoner dilemma and extreme programming\n", "abstract": " One of the main dilemmas with which software development teams face is how to choose a software development method that suits the team as well as the organization. This article suggests a theory that may help in this process. Specifically, Extreme Programming (XP) is analyzed within the well known framework of the prisoner dilemma. We suggest that such an analysis may explain in what situations XP may fit for implementation and, when it is used, the way it may support software development processes.", "num_citations": "32\n", "authors": ["2222"]}
{"title": "Teaching computer science soft skills as soft concepts\n", "abstract": " In this paper, we describe a course on computer science and software engineering soft skills offered by the Department of Computer Science (CS) at the Technion--Israel Institute of Technology. The course was developed in response to a call by the Israeli hi-tech industry to equip the Technion's CS graduates with such skills. This request actually reflects the industry's recognition of the importance of soft skills in software development processes, not only on the managerial level, but also among software team members. The paper describes the course and aims to deliver the message that like soft concepts of computer science (eg, abstraction and readability), which cannot be imparted rigidly using formal definitions, soft skills too cannot be studied and taught formally and, rather, should be learned and grasped gradually over a certain period of time, based on students' engagement, active learning, and reflection\u00a0\u2026", "num_citations": "31\n", "authors": ["2222"]}
{"title": "Using a roles scheme to derive software project metrics\n", "abstract": " Roles' playing is common in our lives. We play different roles with our family, at work as well as in other environments. Role allocation in software development projects is also accepted though it may be implemented differently by different software development methods. In a previous work ([2]) we have found that personal roles may raise teammates' personal accountability while maintaining the essence of the software development method. In this paper we present our role scheme, elaborate on its implementation and explain how it can be used to derive metrics. We illustrate our ideas by data gathered in student projects in the university.", "num_citations": "30\n", "authors": ["2222"]}
{"title": "Electricity in the palms of her hands-the perception of electrical engineering by outstanding female high school pupils\n", "abstract": " This paper explores how outstanding female high school pupils perceived the profession of electrical engineering (EE) before and after a one-day conference aimed at exposing them to the profession of EE. The main finding indicates that, if planned properly and thoughtfully, even a single one-day conference can significantly change the perception of what EE is. In addition, the authors explore the pros and cons of studying EE, as expressed by the female high school pupils. They conclude with some recommendations related to the role of women in EE.", "num_citations": "29\n", "authors": ["2222"]}
{"title": "Reducing abstraction: The case of constructing an operation table for a group\n", "abstract": " This paper describes students' mental processes while constructing an operation table for a group. More specifically, undergraduate students' approaches are analyzed as the students fill in an operation table for four elements\u2014a, b, c, and d\u2014in such a way that it represents a group of order four. The data are analyzed from the perspective of reducing abstraction, which aims to explain students' conceptions of abstract algebra concepts. From this perspective, most students' responses and conceptions can be attributed to their tendency to work on a lower level of abstraction than the level on which concepts are introduced in class.", "num_citations": "29\n", "authors": ["2222"]}
{"title": "Clashes between culture and software development methods: The case of the Israeli hi-tech industry and Extreme Programming\n", "abstract": " This paper discusses connections between a national culture and the culture inspired by software development methods (SDMs). Specifically, based on our research on cultural issues related to software development teams, we propose a model that can help predict whether a specific SDM fits a specific national culture. This model first defines the terms 'tightness of an SDM' and 'tightness of a national culture1. With respect to an SDM, this term articulates the idea that the tighter an SDM is, the more ordered the software development process and environment it inspires will be; with respect to a national culture, the term 'tightness' reflects the degree to which a culture accepts and adopts ordered, planned and procedural work habits. The model then goes on to outline means that can help in the mapping of a given SDM, as well as a given national culture, along the following five dimensions: Project plan, procedures\u00a0\u2026", "num_citations": "28\n", "authors": ["2222"]}
{"title": "Attitudes of prospective high school mathematics teachers towards integrating information technologies in their future teaching\n", "abstract": " Hundreds of papers are published nowadays arguing that computers have become an integral part of our lives and, as such, should be integrated into educational systems as well (Cf. Eden, Eisenberg, Fischer and Repenning, 1996; Edelson, Pea and Gomez, 1996; Flake, 1996). Since such integration requires a change in teaching methods, teachers play a central role in such a transition. Of course, this is also true in regard to teaching of mathematics. There are many benefits in using computers in our math classes (Cf. Sfard and Leron, 1996). However, as it turns out, the number of high school mathematics teachers who integrate computers into their math classes remains relatively low. This paper tries to explain why this is so, by analyzing the attitudes of prospective high school mathematics teachers towards integration of computers in their future math classes.", "num_citations": "28\n", "authors": ["2222"]}
{"title": "Intrinsic Motivation and 21st-Century Skills in an Undergraduate Engineering Project: The Formula Student Project.\n", "abstract": " The 21st century is characterized by new technological developments and a rapid pace of change, challenging the academy to educate students for a future employment market characterized by change and uncertainty. This market requires practitioners to develop a broad set of skills, so-called\" 21st-century skills,\" along with more focused practices within traditional disciplines. The present study explores the mutual relationship between intrinsic motivation and the expression of 21st-century skills among students participating in the Formula Student project\u2013an international competition in which participants design and build a racecar while facing challenges such as independent learning, planning, and execution. We found that students\u2019 participation in the Formula Student project enables them to practice 21st-century skills that they will need in their future workplace; this experience, in turn, helps them meet the psychological need for autonomy, competence, and relatedness which are the basis for intrinsic motivation.", "num_citations": "25\n", "authors": ["2222"]}
{"title": "Partonomy and taxonomy in object-oriented thinking: junior high school students' perceptions of object-oriented basic concepts\n", "abstract": " The study presented in this paper explores junior high school students' comprehension of basic OO concepts. It summarizes major (mis) conceptions demonstrated by the students in two main categories: confusion of (1) taxonomic and (2) partonomic hierarchies with classes, objects and their interrelations.", "num_citations": "25\n", "authors": ["2222"]}
{"title": "Reducing abstraction level when learning computability theory concepts\n", "abstract": " The paper illustrates how theories from mathematics education can be applied for explaining student conception of computing science ideas. It does this by demonstrating how the theme of reducing abstraction [5] can be used for analyzing students' mental processes when the students are in the process of solving problems in Computability Theory. The topic of Computability Theory in presented here as an example for demonstrating how research in Computing Science education can use learning theories, \"borrowed\" from mathematics education research, for explaining learning processes.", "num_citations": "25\n", "authors": ["2222"]}
{"title": "Can diversity in global software development be enhanced by agile software development?\n", "abstract": " In this paper we discuss the notion of diversity in software development processes in general and its relevance with respect to global software development (GSD) in particular. Based on the following two working assumptions: a) diversity benefits with communities and organizations that welcome it and b) diversity is an inherited element of GSD, we discuss how agile software development, which allows for diversity, may support GSD processes. We illustrate this argument by demonstrating the expression of gender diversity, management diversity and opinion diversity in agile software development environments.", "num_citations": "24\n", "authors": ["2222"]}
{"title": "Human aspects of software engineering: The case of extreme programming\n", "abstract": " As with to other agile methods, which value \u201dIndividuals and interactions over processes and tools\u201d (http://agilemanifesto.org/), Extreme Programming (XP) cares about the interaction among the people involved in software development processes. The four XP values and its twelve practices inspire this feeling as well. Accordingly, and not surprisingly, in a course that we teach about human aspects of software engineering and in a book that we are writing about the topic [7], we find it illuminating to highlight human aspects of software engineering incorporated in XP. This article gathers these illuminations into one place.", "num_citations": "24\n", "authors": ["2222"]}
{"title": "Reductive thinking in computer science\n", "abstract": " This paper discusses the role of reduction in computer science and describes a study on undergraduate students' perception of the concept of reduction. Specifically, based on an analysis of students' answers to questions addressing different computer science topics, we present several findings regarding the ways in which undergraduate students conceive of and apply reduction. These findings can be interpreted within the framework of the tension that exists between the following two factors: The need to think in terms of high levels of abstraction, on one hand, and the fact that reduction introduces a new approach to be used in problem-solving situations, on the other. In addition the paper suggests several teaching applications.", "num_citations": "23\n", "authors": ["2222"]}
{"title": "Rediscovering the passion, beauty, joy, and awe: making computing fun again, part 3\n", "abstract": " In 2006, computing education was suffering from a crisis\u2013enrollments were dropping sharply at universities and colleges across the United States, and interest in computing from high school and middle school students was waning significantly. At the SIGCSE Symposium in 2007, the ACM Education Board organized a special session to explore the underlying causes [3]; one of the culprits that emerged was the tarnished image of computing and computing professionals. At the same conference, keynote speaker Grady Booch shared that one of the \u201cmetaskills\u201d lessons that should be taught is the \u201cpassion, beauty, joy and awe\u201d(PBJA) of computing [2]. This led to room-packed special sessions at the following two SIGCSE symposia to explore that idea from different perspectives [4, 6]. The sessions have provided a forum for sharing:", "num_citations": "22\n", "authors": ["2222"]}
{"title": "A tutoring model for promoting the pedagogical\u2010disciplinary skills of prospective teachers\n", "abstract": " This article presents a tutor\u2010centered tutoring model that aims to develop and establish the pedagogical\u2010disciplinary knowledge and skills of prospective teachers. The tutoring model and the research that accompanied its implementation are presented. The tutor\u2010tutee pairs worked for two five\u2010session cycles for two semesters, enabling prospective teachers to experience teaching situations by guiding the tutee through problem\u2010solving processes. The sessions were based on difficulties that arose during the tutees' learning process. The research findings focus on the evaluation of the model by its participants \u2013 tutors, tutees and program coordinator \u2013 and indicate that the main tutoring targets were achieved. This tutoring model was implemented with prospective computer science teachers; we suggest, however, that it is applicable in teacher preparation programs in other disciplines in which problem solving is\u00a0\u2026", "num_citations": "22\n", "authors": ["2222"]}
{"title": "Disciplinary-pedagogical teacher preparation for pre-service Computer Science teachers: Rational and implementation\n", "abstract": " This paper presents a case study of an academic course for pre-service computer science teachers that focus on teaching the discipline. The paper specifies and explains the rationale behind the development of the course and its explicit objectives. Achievement of the objectives is explained by describing the subject and content of the lessons, the types of activities integrated into the lessons and the tasks required of the students. All those engaged in teaching computer science: developers of curricula, lecturers in teacher training programs, and lecturers involved in the professional development of computer science teachers, can intend the course model for use.", "num_citations": "22\n", "authors": ["2222"]}
{"title": "The practicum in computer science education: Bridging gaps between theoretical knowledge and actual performance\n", "abstract": " This article focuses on the practicum, one of the more important parts of computer science teacher preparation. During this stage, the prospective teachers practice the teaching of computer science in a high school setting before becoming actual computer science teachers. The practicum is highlighted in this article from three angles: the prospective teacher's perspective, the MTCS course perspective and the university mentor's perspective. For each perspective we illustrate the importance of the practicum by explaining how it bridges a specific gap. These gaps are illustrated by two examples that focus on content and pedagogical aspects of computer science education.", "num_citations": "22\n", "authors": ["2222"]}
{"title": "Challenges in teaching capstone courses\n", "abstract": " Many of us run capstone project courses and do so in different ways. The members of this panel come from different countries, belong to different types of institutions, teach in different computing disciplines and the capstone projects they run also vary considerably. Yet, there is a strong sense of consensus about what a capstone project is and how valuable it is as a learning experience for students.The panel discussion will serve as an inspiration to develop new, and change old capstone project courses. The main aim is to discuss why, or why not, different approaches work in a capstone project. What are the learning objectives behind the approach? What are the problems? What are the benefits? How is assessment managed? What resources, tools and techniques are used to administer and manage the projects?Concrete examples of how capstone projects are run at the six institutions represented by the\u00a0\u2026", "num_citations": "22\n", "authors": ["2222"]}
{"title": "Computer science students' conception of the relationship between reward (grade) and cooperation\n", "abstract": " The study presented in this article focuses on the conceptions of computer sciences students of the relationships between reward and cooperation in the context of software development. Specifically, students were faced with a conflict between their urge to express personal skills, and the unavoidable need to cooperate with their teammates. The results indicate that if a given financial bonus is distributed among team members, the majority of the students prefer that a small portion of the bonus be allocated based on individual contributions, while the majority of the reward is divided equally among the team members. These result are analyzed in the context of software engineering education. Based on this study, this paper suggests a tool which can be used by instructors, both for forming of teams and for team evaluation.", "num_citations": "22\n", "authors": ["2222"]}
{"title": "Integrating a tutoring model into the training of prospective Computer Science teachers\n", "abstract": " This paper offers a tutoring model its objective is to develop and establish the pedagogical-disciplinary knowledge of prospective computer science teachers with respect to guiding learners in problem-solving processes. The paper presents the tutoring model and the research that accompanied its implementation. The research findings indicate that the main objectives of the tutoring model were accomplished. Specifically, the prospective teachers changed their perspective vis a vis the teaching process, are aware of the importance of identifying learner difficulties and emphasizing this in their teaching process, emphasize problem-solving processes and the imparting thereof, have adopted reflective processes of thinking, learning and teaching and encourage these processes among the learners as well, have reinforced their own self-confidence regarding their ability and place in the disciplinary teaching process\u00a0\u2026", "num_citations": "21\n", "authors": ["2222"]}
{"title": "Agile AnywhereEssays on Agile Projects and Beyond\n", "abstract": " \u00a9 The Author (s) 2014", "num_citations": "20\n", "authors": ["2222"]}
{"title": "Agility in a large-scale system engineering project: A case-study of an advanced communication system project\n", "abstract": " In this paper we describe the application of the agile software development approach in system engineering projects. We describe the main characteristics of system projects, highlighting the challenges that the application of agility in such cases raises. Such challenges emerge due to the unique characteristics of system projects, which include the multidisciplinary nature of such projects, which encompasses, in addition to the software teams, also hardware, firmware, algorithms, and mechanics teams; the significant importance of including the project management in the process; the multiple kinds of integration tasks; the need for high-level and skilled human resources; and finally, the actual software development process, which in many system projects is embedded real-time software. Though agile development is an accepted development methodology in software projects, many questions are still unanswered\u00a0\u2026", "num_citations": "20\n", "authors": ["2222"]}
{"title": "Reducing abstraction when learning graph theory\n", "abstract": " The article presents research on students' understanding of basic concepts in Graph Theory. Students' understanding is analyzed through the lens of the theoretical framework of reducing abstraction (Hazzan, 1999). As it turns out, in spite of the relative simplicity of the concepts that are introduced in the introductory part of a traditional Graph Theory course, some students exhibit ways of thinking that indicate reduction of the level of abstraction. The importance of this study is derived from the importance of graph algorithms in any Computer Science curriculum and the centrality of the concept of abstraction in Computer Science education.", "num_citations": "20\n", "authors": ["2222"]}
{"title": "Construction of a professional perception in the\" Methods of Teaching Computer Science\" course\n", "abstract": " This article continues our previous manuscript, published in the December 2003 issue of inroads. Both articles address the \"Methods of Teaching Computer Science in the High School\" course (hence forth abbreviated MTCS). In this article we present an active learning based teaching model that can support the construction of the prospective computer science teacher's professional perception as a future computer science teacher.", "num_citations": "20\n", "authors": ["2222"]}
{"title": "An organizational engagement model as a management tool for high school principals\n", "abstract": " Purpose                \u2013 The purpose of this paper is to present an organizational engagement model that highlights the design process of the homeroom teacher (HRT) role in Israeli high schools.                                        Design/methodology/approach                \u2013 The model was constructed as a grounded theory during a qualitative research work conducted during 2007-2011.                                        Findings                \u2013 The model is based on Maslow's and Schein's frameworks of personal needs and organizational culture, respectively, as well as on the principal's role.                                        Originality/value                \u2013 The authors propose that the model contributes to the literature on organizational behavior and leadership in general and to the study of educational organizations in particular, in three ways: first, it stresses the principal's role in the design process of leadership roles; second, it deepens the\u00a0\u2026", "num_citations": "19\n", "authors": ["2222"]}
{"title": "The agile manifesto\n", "abstract": " This chapter introduces the main ideas that form the basis for the agile approach. Originally, the agile approach offers a professional approach for software development that encompasseshuman,                                               organizational,                                 and technological                                 aspects of software development processes. The main ideas of agile software development processes were first introduced by the Agile Manifesto                and second by presenting specific agile practices that enable agile teams to accomplish their development task on high quality. In the chapter, we present the Agile Manifesto as was published for software development and shows how it can be implemented for any projects.", "num_citations": "19\n", "authors": ["2222"]}
{"title": "Characterizing Example Embedding as a software activity\n", "abstract": " We use an empirical qualitative software engineering research to characterize example embedding (EE) as a software activity - a collection of fine grained techniques which together assemble an abstract key notion in software development. This perspective lays the foundations for building an activity catalogue, forming new software practices, affecting the development process and motivating the development of new software tools.", "num_citations": "19\n", "authors": ["2222"]}
{"title": "Agile orientation and psychological needs, self-efficacy, and perceived support: a two job-level comparison\n", "abstract": " Agile software development introduces a new paradigm into software engineering. The research presented in this paper questioned what individual characteristics, such as psychological needs, self-efficacy and perceived support from peers and managers, can tell us about the agile orientation of software practitioners. Data were gathered using questionnaires completed by 376 software developers employed in two divisions of an international Israeli company. In addition to the research description and findings, we also suggest specific implications derived from the research findings.", "num_citations": "19\n", "authors": ["2222"]}
{"title": "Learning human aspects of collaborative software development\n", "abstract": " Collaboration has become increasingly widespread in the software industry as systems have become larger and more complex, adding human complexity to the technological complexity already involved in developing software systems. To deal with this complexity, human-centric software development methods, such as Extreme Programming and other agile methods, have been developed and implemented. Aiming to prepare future software developers for today's software industry, this paper presents a framework for developing collaborative learning tools and activities, and examples that were developed for the course\" Human Aspects of Software Engineering\" in order to assist students in learning collaborative software development. The learning processes and knowledge construction undergone by the students in the study were examined empirically, both in general and with respect to collaboration in particular. Results indicate that, based on their individual and group in-class experiences and reflections, students developed skills and constructed both practical and theoretical knowledge relating to successful collaborative software development.", "num_citations": "19\n", "authors": ["2222"]}
{"title": "Song debugging: merging content and pedagogy in computer science education\n", "abstract": " This article suggests a song debugging activity that brings together two key ideas - the analogy between learning and debugging and the pedagogical potential of music in Computer Science Education (CSE). The paper can be viewed as the fourth in a series of papers published in inroads about the course Methods of Teaching Computer Science in the High School, but it can also stand on its own merit, since it discusses issues that are relevant to CSE in general.", "num_citations": "19\n", "authors": ["2222"]}
{"title": "eXtreme programming as a framework for student-project coaching in computer science capstone courses\n", "abstract": " We present eXtreme programming as a framework for coaching student projects in computer science capstone courses. The work presented here is based on a retrospective process of four coaches who, during the academic year 2002-2003, coached and guided students in the development of software projects within the framework of eXtreme programming. The rationale for this work stems from the fact that software engineering methods are difficult to implement, even in the academia. eXtreme programming, one of the agile software development methods, specifies technical and social guidelines to be followed by software developers during the entire process of software development. As illustrated, these guidelines create a suitable framework for coaching student software projects, as well as for training the coaches themselves for the coaching task.", "num_citations": "19\n", "authors": ["2222"]}
{"title": "An expression of the idea of successive refinement in dynamic geometry environments\n", "abstract": " In this paper we deal with students' work in Dynamic Geometry Environments (DGEs). More specifically, we analyze students' thinking from theperspective of successive refinement: a problem that is non-trivial for its solver tends not to be solved in one shot, but rather through a sequence of steps, in whicheach step is an attempt to\" improve\" on earlier ones. In some cases, steps lead to deadends, and one must backtrack and look for a new path to the. solution. We will show how this idea is expressed as students constructa square in a DGE and as they determine the extent of generality under which a theorem is true.", "num_citations": "19\n", "authors": ["2222"]}
{"title": "How to establish a computer science teacher preparation program at your university? the ECSTPP workshop\n", "abstract": " This paper presents a workshop on the establishment of computer science teacher preparation programs. The workshop is designed for the potential initiators of such programs---computer scientists and computer science curriculum developers-who do have computer science teaching experience, either in academia or in the high school, but lack knowledge about the actual construction of such programs. We suggest that such a workshop may stimulate the establishment of additional computer science teacher preparation programs, meeting the need identified in 2007 by the CSTA.", "num_citations": "18\n", "authors": ["2222"]}
{"title": "Information technologies and objects to learn with\n", "abstract": " \u2022\" The recent explosive growth of networking raises the possibility of widespread collaborative open ended learning activities\"(Edelson, Pea, & Gomez, 1996, p. 32).", "num_citations": "18\n", "authors": ["2222"]}
{"title": "Reducing abstraction in high school computer science education: The case of definition, implementation, and use of abstract data types\n", "abstract": " The research presented in this article deals with the difficulties and mental processes involved in the definition, implementation, and use of abstract data types encountered by 12th grade advanced-level computer science students. Research findings are interpreted within the theoretical framework of reducing abstraction [Hazzan 1999]. The article describes the research setting and findings and concludes with some pedagogical implementations.", "num_citations": "17\n", "authors": ["2222"]}
{"title": "Mimicry of proofs with computers: The case of linear algebra\n", "abstract": " This article examines the idea of 'following the flow of a proof with an example' in order to assist the learner in the challenging task of understanding mathematical proofs. This strategy is termed 'mimicry of a proof'. However, such mimicry can be impractical or unreasonably demanding when the mathematical objects in the proof are difficult to manipulate without technological enhancement. This is the case with many proofs in Linear Algebra, in which the manipulated objects are vectors or matrices. Therefore, the article focuses on the idea of proof mimicry with a computer algebra system (CAS). As examples, this strategy is applied to the proofs of two theorems: the basis theorem and the orthogonalization theorem. In addition, pedagogical guidelines to be followed in constructing a set of computer activities for students are presented and examined.", "num_citations": "17\n", "authors": ["2222"]}
{"title": "A multidimensional software engineering course\n", "abstract": " Software engineering (SE) is a multidimensional field that involves activities in various areas and disciplines, such as computer science, project management, and system engineering. Though modern SE curricula include designated courses that address these various subjects, an advanced summary course that synthesizes them is still missing. Such a course would enable young practitioners to get a comprehensive description of SE, to experience a genuine software development process, and to appreciate the relations and tradeoffs between the various domains of SE. This paper proposes a multidimensional SE course framework aimed at giving SE students just such comprehensive, cross-paradigm, practical, and theoretical experience and background. The course is organized along four axes: a) fundamentals of SE; b) practices and tools; c) productization; and d) technology evolution. Each of these axes, in\u00a0\u2026", "num_citations": "16\n", "authors": ["2222"]}
{"title": "Teaching and learning computer science soft skills using soft skills: the students' perspective\n", "abstract": " This paper continues a previous paper [1] in which we described students' gradual understanding of computer science (CS) and software engineering (SE) soft skills. Our study focused on a course we taught on soft skills in CS and SE, offered by the Department of Computer Science at the Technion--Israel Institute of Technology. The course was developed in response to a call by the Israeli hi-tech industry to equip Technion CS graduates with such skills. In [1] we presented the nature of CS soft skills, described the course schedule, including the teaching principles applied in the course, and showed how, in the course of the course, students gradually constructed a mental perception of CS soft skills in a 4-stage process. In this paper, we refine the comprehension process into a 6-rung ladder, based on further data analysis and additional experience gained when teaching the course for a second time. We elaborate\u00a0\u2026", "num_citations": "15\n", "authors": ["2222"]}
{"title": "How to present it? On the rhetoric of an outstanding lecturer\n", "abstract": " This paper analyses a lecture by an excellent teaching award winner professor of mathematics, given to high school mathematics teachers. The analysis is based upon two sources: (i) the lecture plan, as expressed in a series of 29 transparencies, prepared by the lecturer in advance; (ii) the actual implementation of the lecture, as transcribed from its video-taped record. Based on this analysis six principles for planning and giving a good lecture were developed. The paper provides the readers with full details of the content as well as non-verbal communication gestures exemplifying the employment of the six principles.", "num_citations": "15\n", "authors": ["2222"]}
{"title": "Computers and applied constructivism\n", "abstract": " In this paper we discuss and demonstrate the nature of computational learning environments which support and encourage learners\u2019 constructions in a way which is compatible with constructivist learning theory. We highlight the process of learning by successive refinement as a way for the human mind to cope with complexity, and the essential role the computer can play in this process. Three examples of constructivist environments (ISETL, Dynamic Geometry and Logo), are used to describe the dynamics of how the computer can facilitate the process of successive refinement, as well as to delineate issues of classroom culture, assessment and time.", "num_citations": "15\n", "authors": ["2222"]}
{"title": "Tutoring model for promoting teaching skills of computer science prospective teachers\n", "abstract": " One of the greatest challenges Computer Science (CS) teachers face is that of guiding their pupils through problem-solving processes, ie, the process of constructing a solution for a given problem as an algorithm or a computer program. This paper suggests a tutoring model, to be implemented by prospective CS teachers, that aims at training them to accomplish this challenge. The model is based on one-on-one tutoring sessions, in which the prospective teacher meets a novice undergraduate student taking an introductory CS course and guides him or her through problem-solving processes. The tutoring activity provides the prospective CS teachers with an opportunity to experience teaching situations, especially learners' difficulties with respect to problem-solving processes, and consequently, to improve their teaching skills. The tutoring model was integrated into the Methods of Teaching Computer Science\u00a0\u2026", "num_citations": "14\n", "authors": ["2222"]}
{"title": "Students' understanding of computer science soft ideas: the case of programming paradigm\n", "abstract": " The article presents a research that focused on how the concept programming paradigm is understood in general, and on the understanding of the following three programming paradigms, in particular: functional, procedural, and object-oriented. The research population included seventeen prospective computer science teachers who were participating in a \"Programming Paradigms\" course. Research observations are organized within a framework that categorizes students' thinking about the concept of programming paradigm in three levels of abstraction.", "num_citations": "14\n", "authors": ["2222"]}
{"title": "Empower gender diversity with agile software development\n", "abstract": " Gender issues have recently been discussed extensively with respect to the computing fields (Bair & McGrathe-Cohoon, 2005; Camp, 2002; Margolis & Fisher, 2002). One of the discussed issues is the \u201cshrinking pipeline\u201d phenomenon (Camp, 1997). Camp shows how, in addition to the shrinking of the pipeline upon transition from high school to graduate school, the pipeline has been shrinking also at the bachelor-degree level since 1983. She argues that since the number of women at the bachelor\u2019s level affects the number of women at levels higher in the pipeline and in the job market, this phenomenon is of great concern. The shrinking pipeline is explained in various ways. Among other explanations, the image of the field as requiring long hours of programming is a dominant one. Here is an illustrative case. The April 3, 2003, edition of the Pittsburgh Post-Gazette Business News addressed the question of why\u00a0\u2026", "num_citations": "14\n", "authors": ["2222"]}
{"title": "Introducing extreme programming into a software project at the Israeli Air Force\n", "abstract": " Introducing Extreme Programming (XP) to an industrial software development team usually involves technical and professional aspects as well as social and organizational ones. The introducing of a new software development method in general and XP in particular into a software project team that operates in the army emphasizes and extends these issues. In this paper we present a process through which XP has been introduced into a 60-members software development project at the Israeli Air Force. Focus is placed on an XP workshop conducted with ten officers who worked at different teams of the project. Specifically, we present the principles according to which we facilitated the workshop, the workshop agenda and data regarding the way the participants perceive some of the XP practices. Recently, the first XP team in this project has started to work the XP way.", "num_citations": "14\n", "authors": ["2222"]}
{"title": "IT in Higher Education: Why Is It So Hard and Why There Is Still Hope After All?.\n", "abstract": " Addresses the difficulties of integrating information technology in higher education that the authors maintain are rooted in psychological, sociological, and cultural factors that influence the structure of higher education, as well as the conception of teaching by the faculty. Discusses interaction between faculty and students and long-range planning.(Author/LRW)", "num_citations": "14\n", "authors": ["2222"]}
{"title": "Students' Achievements and Misunderstandings When Solving Problems Using Electronics Models\u2014A Case Study\n", "abstract": " This paper examines students' achievements in solving problems and their misunderstandings when using models. A mixed research methodology was applied. Quantitative research investigated how the performance of students with various levels of high school GPAs correlated with their rating of their lecturers' teaching proficiency. Four lecturers and 336 mechanical and electronics engineering students participated in the study. Achievement tests, consisting of problems to be solved by using models of a diode and an ideal operational amplifier, were implemented in introductory courses in electronics. Students taught by lecturers whom they rated as having high levels of teaching expertise achieved significantly higher grades on these tests than did students taught by lecturers receiving lower ratings for their teaching expertise. The tests investigated performance on three taxonomy levels, and the results were\u00a0\u2026", "num_citations": "13\n", "authors": ["2222"]}
{"title": "STEM teaching as an additional profession for scientists and engineers: the case of computer science education\n", "abstract": " The conference theme-\" Leveraging Computing to Change Education\"-focuses on the influence of computing on the way we educate at all levels. In this paper we highlight the conference theme from the perspective of computer science (CS) teacher preparation and describe the Views program, launched at the Technion--Israel Institute of Technology, two year ago. Views invites Technion graduates back to the Technion to study toward an additional bachelor's degree in the Department of Education in Science and Technology. The degree they earn includes a high school teaching certificate in one of eight tracks: math, physics, biology, chemistry, CS, environmental sciences, electrical engineering, and mechanical engineering. Views students receive full study scholarships and are not required to commit to work in the education system after graduation. In the paper, we (a) present the Views program;(b) analyze\u00a0\u2026", "num_citations": "13\n", "authors": ["2222"]}
{"title": "Students\u2019 misunderstandings and misconceptions in engineering thinking\n", "abstract": " It is well established that students\u2019 misunderstandings and misconceptions frequently impede learning processes and frustrate their best efforts. Little is known about how they relate to engineering thinking. We claim that some learning difficulties are common to several engineering disciplines. The aim of the study presented in this paper is to answer the question: What engineering-thinking misunderstandings and misconceptions are typical of students in the areas of electronics, mechanical and software engineering? Based on analysis of interviews with experienced lecturers, this paper presents three levels of students\u2019 engineering-thinking misunderstandings, according to their generality. The first level relates to misunderstandings of specific content learned in a concrete engineering discipline; the second level deals with more general students\u2019 problems in interpreting and integrating knowledge, which they typically make in several engineering disciplines; and the third level describes misunderstandings characteristic of students in most engineering disciplines. In addition, we discuss the match between the misunderstandings of students studying engineering disciplines and the system of categories, which characterizes engineering thinking.", "num_citations": "13\n", "authors": ["2222"]}
{"title": "Using social media to study the diversity of example usage among professional developers\n", "abstract": " Socio-professional websites such as LinkedIn use various mechanisms such as network of colleagues, groups and discussions to assist their users in maintaining their professional network and keeping up with relevant discussions. Software professionals post hundreds of thousands of comments each week in these group discussions regarding technological and methodological aspects of their work. Analyzing these comments enables us, the software community at large, to better understand the state of the practice of many aspects of software development. In this paper we describe a case study in which we use such LinkedIn group discussion to learn about developers' perception of using code examples.", "num_citations": "13\n", "authors": ["2222"]}
{"title": "The software engineering timeline: a time management perspective\n", "abstract": " This paper addresses time management in software development processes. The rationale for this investigation stems from the observation that many of the problems associated with software projects, such as planning, time pressure and late deliveries, are time related. The analysis presented is based both on a literature review and on illustrations of data taken from our research on different software project management paradigms - mainly heavyweight and agile software development.", "num_citations": "13\n", "authors": ["2222"]}
{"title": "Reducing abstraction when learning computability theory\n", "abstract": " Computer science education is a relatively young discipline. As a young discipline, it is still in need of its own particular research framework (Clancy, Stasko, Guzdial, Fincher, & Dale, 2001). A very close research field is the discipline of research in mathematics education. With its roots at the close of the 19th century, the mathematics education research is a relatively mature research area. For about the past 50 years, mathematics educators have been studying learning theories, teaching approaches, and other cognitive and social issues with respect to K-12 and with respect to higher education. The main target of this article is to illustrate how theories from mathematics education can be applied for explaining student conception of computer science ideas. It does this by demonstrating how the theme of reducing abstraction (Hazzan, 1999) can be used for analyzing mental processes of students who learn\u00a0\u2026", "num_citations": "13\n", "authors": ["2222"]}
{"title": "Import and export to/from computing science education: the case of mathematics education research\n", "abstract": " This panel will look at how research theories developed in the context of mathematics education can be applied to computing science education as well as ways in which computing science theories may be used in mathematics education research. Computing science education is a young discipline still in search of its research framework [6]. A practical approach to formulating such a framework is to adapt useful approaches found in the research from other disciplines, both educational and related areas. At the same time, a young discipline may also offer innovative new approaches to the older discipline.The mathematics education discipline is relatively mature, with its roots extending from the close of the 19th century. For about the past 50 years, mathematics educators have been studying learning theories, teaching approaches, and other cognitive and social issues with respect to K-12 and higher education. We\u00a0\u2026", "num_citations": "13\n", "authors": ["2222"]}
{"title": "The MERge model for business development: The amalgamation of management, education and research\n", "abstract": " This Brief presents a new model for business development\u2014MERge\u2014to be implemented in practitioners\u2019 professional development in general and in the context of STEM (Science, Technology, Engineering and Mathematics) initiatives, particularly, in industry, educational institutions and public sector organizations. The authors aim to contribute to the field of innovation and entrepreneurship by merging and consolidating different methodologies and insights borrowed from the\" meta-professions\"(referring to skills that can be expressed meaningfully after one has gained disciplinary and professional knowledge) of management, education, and research. Targeting three key groups\u2014practitioners in industry, academic institutions and public sector organizations\u2014this model proposes that all practitioners can further develop their unique expertise, as well as new skills, while acknowledging and applying the three meta-professions in their initiatives, on-going work and personal lives. The authors acknowledge that in the postmodern era, where barriers between disciplines are falling in every aspect of professional life, managerial, educational and research skills are becoming increasingly essential and interdependent. Featuring case studies that illustrate how the MERge model is implemented in practice, this volume presents practical tools for integrating these key skills in a wide variety of initiatives in business, teaching and research contexts.", "num_citations": "12\n", "authors": ["2222"]}
{"title": "Agile Processes in Software Engineering and Extreme Programming: 12th International Conference, XP 2011, Madrid, Spain, May 10-13, 2011, Proceedings\n", "abstract": " This book contains the refereed proceedings of the 12th International Conference on Agile Software Development, XP 2011, held in Madrid, Spain, in May 2011. The year 2011 marked the 10th anniversary of the Agile Manifesto. In this spirit, the XP conference continued its fine tradition of promoting agility by disseminating new research results in a timely manner and by bringing together researchers and practitioners for a fruitful mutual exchange of experiences. As introduced for XP 2010, there were again two different program committees, one for research papers and one for experience reports. Regarding the research papers, 11 out of 56 submissions were accepted as full papers; and as far as the experience reports were concerned, the respective number was 4 out of 17 submissions. In addition to these papers, this volume also includes the short research papers, the abstracts of the posters, the position papers of the PhD symposium, and the abstracts of the workshops.", "num_citations": "12\n", "authors": ["2222"]}
{"title": "Engineering thinking: The experts\u2019 perspective\n", "abstract": " Most student graduates in engineering schools are involved in engineering design, that is, the development of new products for which engineering thinking is required. Our literature survey, however, did not yield material pertaining to engineering design thinking in the field of electrical and electronic engineering. Therefore, we propose to clarify the term \u2018engineering thinking\u2019. Specifically, this paper presents a characterization of engineering thinking in general, and electric and electronic engineering thinking, in particular, from the point of view of experienced engineers. In addition, to highlight the uniqueness of engineering thinking, we compare engineering thinking in engineering design and research thinking in scientific research in the area of the exact sciences.", "num_citations": "12\n", "authors": ["2222"]}
{"title": "Teaching framework for software development methods\n", "abstract": " In this paper we suggest a framework for teaching software development methods (SDMs). Specifically, based on our accumulative research and in-practice experience of teaching SDMs, a set of principles, that guides our teaching of SDMs in different settings and teaching experiences, has been formulated. The teaching framework consists of 14 principles that their actual implementation is varied and adjusted in different teaching environments. This paper outlines the principles and addresses their contribution to learners' understanding of the said software development method.", "num_citations": "12\n", "authors": ["2222"]}
{"title": "Mental constructions and constructions of web sites: learner and teacher points of view\n", "abstract": " This research focuses on knowledge and ways in which knowledge may be constructed in the learner's mind. Specifically, it addresses the Web as a cognitive supporter for learning, organising and constructing a new domain of knowledge. In particular, the research analyses student reflection on constructing web sites. The analysis is based on an ongoing reflection of 40 prospective and in\u2010service teachers who took a course on educational computational environments. The students were asked to choose a complex topic and to document the process of constructing a web site that would present their chosen topic. They were to reflect upon the process with regard to their decision making, difficulties encountered, ways of thinking, considerations and insights. Student reflection is analysed from two perspectives: the first perspective examines how the task of constructing a web site contributes to student learning of\u00a0\u2026", "num_citations": "12\n", "authors": ["2222"]}
{"title": "Social issues of Computer Science in the\" Methods of Teaching Computer Science in the High School\" course\n", "abstract": " This paper discusses social issues of Computer Science in the context of the preparation of high school Computer Science teachers. Specifically, it focuses on the importance of addressing social issues in the Methods of Teaching Computer Science in the High School course and illustrates the actual teaching, in the course, of the following three social issues of Computer Science: ethics, diversity, and history of Computer Science.", "num_citations": "11\n", "authors": ["2222"]}
{"title": "The role of a project-based capstone course\n", "abstract": " A project-based capstone course aims at using software development skills while performing a project in the course domain. One of our main challenges is to simulate a real world environment so to provide our students with the experience they need. Planning this experience we should consider academic constraints as well as the students' schedule and skills. In this paper we describe how we implement an agile software development method in a project-based capstone course in the domain of operating systems. We elaborate on how we simulate a real world environment and present a role scheme that is used by the students to manage the process. We suggest a discussion on how to use the role scheme as an assessment tool to measure the development process in general and students' contribution in particular. We expect to extend and refine the comprehension regarding process measurement in students'\u00a0\u2026", "num_citations": "11\n", "authors": ["2222"]}
{"title": "Active learning and the active-learning-based teaching model\n", "abstract": " This chapter* presents an active-learning-based teaching model for implementation in the MTCS course, which is based on the constructivist approach. This model is used in this Guide in most of the offered activities. The chapter starts with the motivation and the rationale for using active learning in the MTCS course; then, the active-learning-based teaching model is introduced and explained, including a description of the role of the instructor of the MTCS course in the model implementation.", "num_citations": "10\n", "authors": ["2222"]}
{"title": "A HOT---Human, Organizational and Technological---framework for a software engineering course\n", "abstract": " In this paper, we present a HOT---Human, Organizational and Technological---framework for software engineering and describe its application in a full one-semester software engineering course on agile software development. We suggest and illustrate how this framework has the potential to widen and deepen the students' understanding of software engineering processes.", "num_citations": "10\n", "authors": ["2222"]}
{"title": "Reductive thinking in undergraduate CS courses\n", "abstract": " This paper describes research on the perception of undergraduate students of the concept of reduction. Specifically, based on an analysis of students' answers to questions addressing different CS topics, we present several findings regarding the ways in which undergraduate students conceive of and apply reduction. In addition to the research description and results, the paper discusses the role of reduction in CS and suggests several teaching applications.", "num_citations": "10\n", "authors": ["2222"]}
{"title": "The shrinking pipeline in Israeli high schools\n", "abstract": " Worldwide surveys indicate that the number of women studying undergraduate-level computer science (CS) has been constantly decreasing in the last 20 years (Camp, 1997, 2002; Camp, Miller, & Davies, 1999; National Center for Education Statistics, 2004). According to Galpin (2002), the low participation of women in the computing studies is recognized worldwide. As it turns out, the situation is similar among high-school students as well (Davies, Klawe, Nyhus, Sullivan, & Ng, 2000). However, while many studies are carried out at the university level and programs are implemented in order to change the situation, high-school students do not attract such attention. In Israel too, as far as we know, no research has ever been performed that focused on female high-school students studying CS. This article presents such a study. Specifically, it focuses on high-school female students studying advanced-level CS\u00a0\u2026", "num_citations": "10\n", "authors": ["2222"]}
{"title": "Improvement of software quality: Introducing extreme programming into a project-based course\n", "abstract": " Different software development methodologies and quality assurance methods are used in order to attain high quality, reliable, and bug free software. eXtreme Programming (XP) is a software development methodology that integrates many of the known ideas (that we all were familiar with) in order to achieve such software systems. Specifically, XP emphasizes code-unit testing (preferably before its writing), and thorough testing of software functionality. This paper presents our experience of teaching XP to Computer Science students. Students\u2019 conceptions of quality issues are highlighted.", "num_citations": "10\n", "authors": ["2222"]}
{"title": "Aspects of a university course web site\n", "abstract": " Orit Hauan urfing the Web reveals sites that are commercial (eg, bookstores or bank services), educational (eg, course materials or library catalogs), and informative (eg, train timetables or newspapers) and others. Among Web sites of educational institutions are both virtual university Web sites\u2019 and sites for courses, in which students and instructors also interact in a traditional lecture hall. Within these two categories there are Web sites that serve other educational frameworks, such as open university classes that meet several times each semester and distance education programs of traditional universities. In this article I focus on Web sites that serve traditional university classes, functioning as an additional and asynchronic channel for student-lecturer communication. University administrators value the educational potential of course Web sites and tend to encourage faculty members to construct sites for courses\u00a0\u2026", "num_citations": "10\n", "authors": ["2222"]}
{"title": "Didactic transposition in computer science education\n", "abstract": " This paper introduces the concept of didactic transpositions in the context of computer science education (CSE). In general, didactic transposition refers to the adaptation of professional knowledge to teaching situations. With respect to CSE, we illustrate the concept of didactic transpositions with two research works that examined a didactic transposition of software development methods to educational frameworks: the first one---in the university; the second---in the high school.", "num_citations": "9\n", "authors": ["2222"]}
{"title": "Students' cooperation in teamwork: binding the individual and the team interests\n", "abstract": " This Active Learning Exercise aims at increasing the participants' awareness to the importance of cooperation in software teams as well as at guiding instructors of project-based courses in the evaluation process of students' projects. The Active Learning Exercise is based on individual activities, teamwork activities, discussions and reflections.", "num_citations": "9\n", "authors": ["2222"]}
{"title": "Putting human aspects of software engineering in university curricula\n", "abstract": " Although people-related issues are central factors in determining the success of software projects, they do not receive sufficient attention in the software industry to improve project results. This essay describes two barriers to their getting more attention: barriers that originate in the academic status and positioning of software engineering. The essay also proposes several suggestions regarding the professional development of software practitioners.", "num_citations": "9\n", "authors": ["2222"]}
{"title": "System Analysis and Design in a Large-Scale Software Project: The Case of Transition to Agile Development.\n", "abstract": " Agile software development methods mainly aim at increasing software quality by fostering customer collaboration and performing exhaustive testing. The introduction of Extreme Programming (XP)\u2013the most common agile software development method\u2013into an organization is accompanied with conceptual and organizational changes. These changes range from daily-life changes (eg, sitting together and maintaining an informative project environment) and continue with changes on the management level (eg, meeting and listening to the customer during the whole process and the concept of the whole team which means that all role holders are part of the team). This paper examines the process of transition to an agile development process in a large-scale software project in the Israeli Air Force as it is perceived from the system analysis and design perspective. Specifically, the project specifications of the agile team are compared with those of a team who continues working according to the previous heavyweight method during the first half year of transition. Size and complexity measures are used as the basis of the comparison. In addition to the inspection of the specifications, the change in the role of the system analysts, as the system analysts conceive of it, is examined.", "num_citations": "9\n", "authors": ["2222"]}
{"title": "Using metaphors in extreme programming projects\n", "abstract": " Metaphor is one of the twelve practices of Extreme Programming (XP), and definitely among the more difficult ones to teach and use. We present our experience with the use of metaphors and conclude with suggested guidelines for teachers.", "num_citations": "9\n", "authors": ["2222"]}
{"title": "Teaching the human aspect of software engineering-a case study\n", "abstract": " This paper describes a course I taught at the Technion --- The Israel Institute of Technology --- which addressed human aspects of Software Engineering. More specifically, three human aspects involved in developing software systems were the focus of the course: problem solving methodologies in general and their application in developing software systems in particular; mental processes; and social processes of software-system developers.", "num_citations": "9\n", "authors": ["2222"]}
{"title": "Using history of computing to address problems and opportunities\n", "abstract": " Like nations and peoples, professions have histories too. Similar reasons for teaching history of nations and peoples may explain the importance of teaching prospective professionals the history of their profession. Indeed, much of K-16 education evolves around the teaching of history. Computing is not different with this respect. However, in the computing field, that often lacks attention to the societal impact of its products or an appreciation of the human side of the field, the inclusion of history of computing courses (or incorporating historical perspectives in computer science courses) is rare. In addition, the lack of formal education in computing history and the lack of relevant effective resources does not encourage faculty to incorporate history in their courses.", "num_citations": "8\n", "authors": ["2222"]}
{"title": "Adoption of innovation from the business sector by post-primary education organizations\n", "abstract": " Business organizations adopt innovation with the objective of meeting competition and improving their business performance; education organizations, likewise, operate in a competitive environment, are evaluated by stakeholders, and adopt innovation. The research presented here links these two sectors; its objective was to characterize the process of innovation adoption from the business sector by post-primary education organizations. Research data were collected from past and current projects in the education sector and from the perceptions of those involved in the adoption of innovation both in the education sector and in the business sector. The research results reveal a gap between the education sector\u2019s desire to learn from the business sector and its success in doing so. We explain this gap using a model that describes the perception of the adoption process of innovation in the education sector\u00a0\u2026", "num_citations": "7\n", "authors": ["2222"]}
{"title": "Mind the (gender) gap: can a two-hour visit to a hi-tech company change perceptions about computer science?\n", "abstract": " This paper presents the \"Mind the Gap\" initiative that aims to encourage female high school pupils to study computer science (CS) in high school. This is achieved by increasing their awareness to what CS is, and exposing them to the essence of a hi-tech environment and to same gender role models. Female software engineers at Google's Israel R&D Center in collaboration with the Israeli National Center undertook the initiative for computer science teachers. We describe the initiative and its impact on the female pupils' interest in CS. One of our conclusions is that even a short visit to a hi-tech company, in this case - Google, has the potential to change pupils' perception of what CS is and to increase their interest in CS and their desire to study it. One could easily adapt this initiative to other companies and scale it to infl uence a rather large population.", "num_citations": "7\n", "authors": ["2222"]}
{"title": "Collaboration\n", "abstract": " Collaboration, the art of working together, is an essential part of system development, often learned on the job rather than by academic training. Aspects of collaboration include: tangible and intangible\" results\"-the fruits of collaboration; community governance-the norms of ownership and usage; and modes of production-the processes for incubating and developing\" results\". This panel will bring together a diverse set of experts to share their opinions and strategies for collaboration.", "num_citations": "7\n", "authors": ["2222"]}
{"title": "Developers attentiveness to example usage\n", "abstract": " As part of our research on the use of code examples in professional programming, we focus on the developer's awareness and attentiveness to example usage. We identify three types of lack of attentiveness: lack of awareness that causes professional developers to use examples only in certain contexts but not in others, lack of attentiveness to examples of different scales, and lack of attentiveness to the variety of purposes examples may serve. We present a qualitative research followed by a focus group case study that illustrate our findings.", "num_citations": "7\n", "authors": ["2222"]}
{"title": "Ad-hoc leadership in agile software development environments\n", "abstract": " Leadership is the ability to influence people, leading them to behave in a certain way in order to achieve the group's goals. Leadership is independent of job titles and descriptions. Usually, however, in order to lead, leaders need the power derived from their organizational positions. There are different leadership styles, like task-oriented versus people-oriented, directive versus permissive, autocrat versus democrat. In this paper, we examine the leadership concept in software development environments and focus on leadership in transition processes to agile software development. Specifically, based on our comprehensive research on agile software development, we suggest a leadership style-ad-hoc leadership-that usually emerges in such change processes. We present the characteristics, dynamic and uniqueness of this leadership style and illustrate its usefulness for the analysis of representative scenarios.", "num_citations": "7\n", "authors": ["2222"]}
{"title": "Preparation of high school computer science teachers: The Israeli perspective\n", "abstract": " This special session examines frameworks for the preparation of high school computer science (CS) teachers from the Israeli perspective. Specifically, several Israeli CS teacher preparation programs and their components are presented. The presentation includes both a general overview and a detailed description of the actual implementation of such programs. This bipolar presentation, we suggest, provides practical guidelines with respect to CS teacher preparation, both for policy makers and for faculty members who wish to establish a CS teacher preparation program at their universities.", "num_citations": "7\n", "authors": ["2222"]}
{"title": "Agile knowledge management\n", "abstract": " This article is based on the assumption that Knowledge Management (KM) is a vital part of any project. Based on this working assumption, the purpose of this article is to introduce the term Agile Knowledge Management (AKM) by illustrating how the Agile Software Development (ASD) approach is suitable for the introduction of KM processes. The ASD approach emerged over the past decade in response to the unique problems that characterize software development processes (Highsmith, 2002). In general, ASD emphasizes customer needs, communication among team members, short releases and heavy testing throughout the entire development process. These ideas are implemented quite variedly by the different ASD development methods. Knowledge Management (KM) and Agile Software Development (ASD) are two organizational processes that face common barriers when introduced and applied. This\u00a0\u2026", "num_citations": "7\n", "authors": ["2222"]}
{"title": "Sectoral and gender-wise analysis of the choice of CS studies in Israeli high schools\n", "abstract": " Worldwide surveys indicate that the number of women studying undergraduate-level Computer Science is constantly decreasing. Based on data collected in Israel, significant differences were found in the percentages of female high school students studying advanced-level Computer Science among different sectors. More specifically, while the percentage of female high school students studying advanced-level Computer Science is about 50% for the Arab minority sector, the percentage of female students studying Computer Science at the same level among the Jewish majority sector is only about 25%. This situation was investigated by using both qualitative and quantitative research tools. The paper analyzes this situation within the model of'achievement-related choices' developed by Eccles and her colleagues.", "num_citations": "7\n", "authors": ["2222"]}
{"title": "Similarities and differences in the academic education of software engineering and architectural design professionals\n", "abstract": " This article focuses on the similarities and differences in the academic education of software engineers and architects. The rationale for this work stems from our observation, each from the perspective of her or his own discipline, that these two professional design and development processes share some similarities. A pilot study was performed, in which 24 practitioners (12 software engineers and 12 architects) were interviewed concerning the main characteristics of the two professions. The characteristics were classified according to four categories: discipline-related characteristics, professional skills, characteristics of typical problems and processes, and characteristics of a typical product. Data analysis indicates that according to the practitioners, while the professional skills required of professionals in the two disciplines are mostly common, the difference between the two disciplines is reflected most\u00a0\u2026", "num_citations": "7\n", "authors": ["2222"]}
{"title": "Women, Hi-tech, and the Family-Career Conflict\n", "abstract": " This article focuses on female software engineers in the Israeli hi-tech industry. We describe findings of our research that was based on in-depth interviews with 17 female software engineers from four organizations of different kinds and sizes.", "num_citations": "7\n", "authors": ["2222"]}
{"title": "Junior High School Students\u2019 P erception of Object Oriented Concepts\n", "abstract": " This article examines difficulties and misconceptions junior high school students face while learning basic object oriented concepts (OO). Furthermore, it presents a number of pedagogical techniques that may improve students' comprehension and learning process of the relevant concepts. The work is based on the teaching of OO to two groups of junior high school students as a single-semester course. The course consists of brief lectures and programming activities in a graphical-visual environment, designed and developed specifically for this study. Students' understanding is assessed using questionnaires, interviews and in-class observations. The purpose of the article is two-fold: describing the nature of these m isconceptions as well as identifying major OO-related issues to be emphasized.", "num_citations": "7\n", "authors": ["2222"]}
{"title": "A study on attitudes and emphases in computer science teacher preparation\n", "abstract": " This paper focuses on the development and implementation of computer science (CS) teacher preparation programs, which are two of the main educational and pedagogical challenges faced by those involved in CS education. Specifically, the paper presents the second stage of a study, the first stage of which focused on the accumulative knowledge gained in Israel over the past twenty years on CS teacher preparation. The first stage of the study, presented in SIGCSE 2010, emphasized the obvious: CS deserves designated CS teacher preparation programs. The second stage of the study, presented in this paper, is based on a deeper analysis of the data gathered in the first stage. Specifically, we approached a wider community of CS teacher educators (from Israel, Europe, and the USA) and explored its perspective on one element of teacher preparation programs-the Methods of Teaching CS (MTCS) course. The\u00a0\u2026", "num_citations": "6\n", "authors": ["2222"]}
{"title": "Evaluation of a software engineering course by reflection\n", "abstract": " The evaluation of an advanced software engineering (SE) course is a challenging task that should be addressed as part of the course design. In this paper, we describe an implementation of the reflective practitioner perspective as part of an advanced SE course and introduce its use for feedback purposes. Reflective feedback goes beyond merely using feedback questionnaires. Furthermore, we show, using both qualitative and quantitative empirical data, that the course on which the perspective was applied meets its objectives and fosters students' awareness to the multidimensional nature of SE.", "num_citations": "6\n", "authors": ["2222"]}
{"title": "Eccles' model of achievent-related choices: the case of computer science studies in Israeli high schools\n", "abstract": " Worldwide surveys indicate that the number of women studying undergraduate-level Computer Science is constantly decreasing. Based on data collected in Israel, significant differences were found in the percentages of fale high school students studying advanced-level Computer Science among different sectors. More specifically, while the percentage of fale high school students studying advanced-level Computer Science is about 50% for the Arab minority sector, the percentage of fale students studying Computer Science at the same level among the Jewish majority sector is only about 25%. This situation was investigated by using both qualitative and quantitative research tools. The paper illustrates the analysis of the data within the model of'achievent-related choices' developed by Eccles and her colleagues.", "num_citations": "6\n", "authors": ["2222"]}
{"title": "International perspective of women and computer science\n", "abstract": " The topic of women in computer science has recently been getting more and more attention. The special issue of the SIGCSE Bulletin inroad (Volume 34, Number 2, published in June 2002) is one of the milestones that indicate this trend. However, a review of this special issue reveals that though the topic is examined from different angles, only one paper addresses it from an international point of view. By presenting statements derived from four countries on four different continents, our panel aims to highlight the topic from this multinational perspective. Throughout the discussion with the audience we hope to identify common interests and to check whether an international agenda with respect to the topic can be formulated.", "num_citations": "6\n", "authors": ["2222"]}
{"title": "Women, mathematics and computer science\n", "abstract": " \"\u2026 women embrace the\" precision\" of mathematics.\" a quote from panelist Paul De Palma's viewpoint article\" Why Women Avoid Computer Science\" in the June 2001 CACM. Panelist Kim Kihlstrom notes\"\u2026 I got into electrical engineering and then computer science exactly because I love math.\" Henderson's evidence indicates that women performed better than men in a mathematically oriented first course in computer science, and women felt the course was more beneficial than a traditional programming oriented first course. Regarding a mathematically oriented functional programming course for high schools Kathi Fisler says\" Our high school teachers have noticed females preferring this to a conventional curriculum by as much as 5 to 1!\" Coincidence, or is there a common thread here? Please join us for the discussion and share your own viewpoints.", "num_citations": "6\n", "authors": ["2222"]}
{"title": "The software studio in software engineering education\n", "abstract": " Current sensor network technology for detection and tracking are focused solely in terms of static networks and suffers from device specific inadequacies such as lack of coverage, power and fault tolerance. Failing nodes result in coverage loss or breakage in connectivity and hence there is a pressing need for a robust system. In this work a unique sensor network is fielded that uses multiple frequencies and transmit powers to improve coverage. A novel approach to track a sensor node is also presented. Simulation data is compared to experimental results for validation.", "num_citations": "6\n", "authors": ["2222"]}
{"title": "Application of management theories for STEM education: The case of SWOT analysis\n", "abstract": " This work describes the application of management theories in STEM (Science, Technology, Engineering and Mathematics) education systems. Two chapters examine STEM education on the K-12 national level and one chapter focuses on the higher education institutional level. All chapters are based on comprehensive research. Thus, it will appeal to teachers, school principals, researchers, graduate students, government policymakers, and all practitioners who care about STEM education in schools, academia and government. In each chapter, SWOT (Strengths, Weaknesses, Opportunities, and Threats) analysis is used as a managerial strategic tool for the examination of factors that focus either on internal circumstances (strengths and weaknesses), or external ones (opportunities and threats).", "num_citations": "5\n", "authors": ["2222"]}
{"title": "Training scientists and engineers as science and engineering teachers: The motivational factors of enrolees in the Views programme\n", "abstract": " In view of the shortage of accomplished teachers specialising in teaching mathematics, science and engineering in high schools, the Technion-Israel Institute of Technology, launched a unique programme called Views. This two-year programme offers Technion graduates holding degrees in mathematics, science or engineering, an additional BSc degree in science and engineering education with a scholarship to cover tuition costs. Through the use of quantitative and qualitative tools, the study described in this article investigated the factors motivating Technion graduates to enrol in the Views programme. Eighty-nine graduates who enrolled in the programme over the 2014-2016 academic years participated in the study. According to the findings, by choosing to enrol in the programme, the graduates placed substantial weight both on intrinsic motivational factors, which reflect an interest in the study of education, and on extrinsic motivational factors (identified regulation), which express the future benefits they expect to derive upon completion studying in the programme.", "num_citations": "5\n", "authors": ["2222"]}
{"title": "Challenges in mentoring software development projects in the high school: Analysis according to Shulman's teacher knowledge base model\n", "abstract": " This paper focuses on challenges in mentoring software development projects in the high school and analyzes difficulties encountered by Computer Science teachers in the mentoring process according to Shulman's Teacher Knowledge Base Model. The main difficulties that emerged from the data analysis belong to the following knowledge sources of Shulman's model: Content knowledge, pedagogical content knowledge (PCK) and knowledge of learners and their characteristics. We suggest that the complexity of the mentoring process of software project development in the high school results mainly from the fact that the process involves a variety of knowledge types, as well as management activities and pedagogical aspects. This fact leads us to conclude that a mentoring methodology should be defined for this complex task, similar to software project development methodologies applied in the industry. We\u00a0\u2026", "num_citations": "5\n", "authors": ["2222"]}
{"title": "Measured test-driven development: Using measures to monitor and control the unit development\n", "abstract": " We analyze Test Driven Development (TDD) from cognitive and social perspectives. Based on our analysis, we suggest a technique for controlling and monitoring the TDD process by examining measures that relate to the size and complexity of both code and tests. We call this approach Measured TDD. The motivation for TDD arose from practitioners' tendency to rush into code production, skipping the required testing needed to manufacture quality products. The motivation for Measured TDD is based on difficulties encountered by practitioners in applying TDD. Specifically, with the need to frequently refactor the unit, after every few test and code steps have been performed. We found that the suggested technique enables developers to gain better control over the development process. Key words: unit testing, Test Driven Development, measures", "num_citations": "5\n", "authors": ["2222"]}
{"title": "Diversity in Computing: A Means or a Target\n", "abstract": " This column presents a different perspective on the ongoing discussion about women's underrepresentation in computing. The essay asserts that it is in the interest of the computing world, rather than in the interest of any specific underrepresented group in this community, to enhance diversity in general, and gender diversity in particular. This claim is established by showing the benefit that organizations, firms and communities derive from enhancing and embracing diversity. Therefore, as mentioned above, lack of diversity should not be the concern of underrepresented groups; rather, it is in the interest of the computing world to be more inclusive. In other words, diversity should be conceived as a means, rather than as the target itself.", "num_citations": "5\n", "authors": ["2222"]}
{"title": "Transfer to/from computing science education: the case of science education research\n", "abstract": " During the ITiCSE 2002 conference in \u00c5rhus, Denmark, a panel presentation on the topic of import to and export from Computing Science Education and other fields focused on the case of Mathematics Education Research. The outcome was very successful, with the panelists' presentations giving rise to active audience participation.Continuing with the theme from the earlier panel, this proposal suggests a similar format with the expanded theme of transfer into Computing Science Education from Science Education Research. This panel will look at how research theories developed in the context of various areas of science education can be applied to Computing Science Education as well as ways in which computing science educational theories may be used in those areas. Because Computing Science Education is a young discipline, it is still in search of its research framework [2]. In formulating such a framework\u00a0\u2026", "num_citations": "5\n", "authors": ["2222"]}
{"title": "On topological properties of functions\n", "abstract": " It is known in the math education research community that understanding the concept of function is not trivial for many students, whether they are in high school or are college undergraduates [Briedenbach et al, 1992; Cuoco, 1993; Goldenberg, 1988; Leinhardt et al, 1990; Piaget et al, 1977; Sfard, 1992]. This paper focuses on the understanding of the concept of function as well, presenting a discussion on topological properties of functions. It contains an analy-sis of the mathematical concepts involved and of students' responses to questions dealing with topological properties. More specifically, in this paper I discuss students' mathe-matical thinking when they are asked to determine whether a property of a function is a topological property or not.", "num_citations": "5\n", "authors": ["2222"]}
{"title": "The (CS) 2V\u2014Cross sectorial collaborative shared value\u2014strategy\n", "abstract": " This essay proposes a new strategy\u2013Cross Sectorial Collaborative Shared Value-(CS) 2V\u2013which aims to increase the impact of the organization\u2019s social investments and the effectiveness of Corporate Social Responsibility (CSR) divisions, whose traditional role is to bridge between the corporate and its external environments (ie, other first, second and third sector organizations). The (CS) 2V strategy directs CSR divisions to connect the corporation\u2019s core business needs, from the corporate perspective, with the society\u2019s core needs, from the social and/or government perspective. This is done by addressing a national social problem that intersects with a business concern. In other words, CSR divisions can adopt the (CS) 2V strategy to fulfill their goals more meaningfully, by tightly and clearly connecting the corporation\u2019s core business, from the corporate perspective, with a society\u2019s core need, from the social perspective (See Figure 1).", "num_citations": "4\n", "authors": ["2222"]}
{"title": "Software governance using retrospectives: a case study\n", "abstract": " In this paper we present our study on the implementation of the retrospective practice in software development projects. Specifically, we describe the retrospective practice and present its impact on the development process of a specific large-scale project. Our study shows that a team can steer its process evolution systematically by retrospectives, identifying process issues, discussing their nature, and deciding on mechanisms for their improvement. For the purpose of our research, we use five process elements: work procedures, policies, metrics, roles, and decision rights. Based on the data analysis of the retrospectives conducted in our case study, we illustrate each category and demonstrate how it is refined along the project timeline. We suggest using the retrospective practice as a qualitative data gathering tool that assists the governance process of a development project.", "num_citations": "4\n", "authors": ["2222"]}
{"title": "Coaching agile software projects: tutorial proposal-ICSE 2010\n", "abstract": " Based on eight years of experience guiding agile software projects in the academia and industry, we focus in the tutorial on a coaching framework for agile software projects. The tutorial participants become familiar with coaching practices and gain experience with some of the practices.The tutorial has two main parts. In the first part, we present the coaching framework, including the goals, structure, and guiding principles. In the second part, we focus on the following central themes in agile development processes which, we suggest, are appropriate to be included in such a coaching framework: Teamwork and collaboration, time and measures, learning and reflection, and change and leadership.", "num_citations": "4\n", "authors": ["2222"]}
{"title": "How does readiness for agile development relate to team climate and individual personality attributes?\n", "abstract": " In this short paper we present our research idea on relationships between specific indices of organizational climate (team/management climate), level of individual self-efficacy as a personality attribute, and software practitioners\u2019 readiness for agile software development. Research results can help organizations predict the readiness of employees to implement agile methods and/or to work effectively in an agile environment.", "num_citations": "4\n", "authors": ["2222"]}
{"title": "Teaching agile software development quality assurance\n", "abstract": " This chapter presents a teaching framework for agile quality\u2014that is, the way quality issues are perceived in agile software development environments. The teaching framework consists of nine principles, the actual implementation of which is varied and should be adjusted for different specific teaching environments. This chapter outlines the principles and addresses their contribution to learners\u2019 understanding of agile quality. In addition, we highlight some of the differences between agile software development and plan-driven software development in general, and with respect to software quality in particular. This chapter provides a framework to be used by software engineering instructors who wish to base students learning on students\u2019 experiences of the different aspects involved in software development environments.", "num_citations": "4\n", "authors": ["2222"]}
{"title": "Agile software development and the nature of software dvelopment\n", "abstract": " In my previous columns, I proposed that many of the unique properties of software development processes stem from the fact that software is an intangible product. In this column, I will elaborate on two properties of software development processes that are derived directly from this characteristic and I will show how agile software development helps us cope systematically with problems associated with these two properties.The first property derived from the fact that software is an intangible product is the non-transparent nature of a typical software development process. In other words, when dealing with an intangible object, how can we know exactly what stage the development process is at, what has been accomplished by the teammates so far, what units or modules have already been tested, and so on. The second characteristic of software development processes that stems from software intangibility is cognitive complexity; indeed, the design process of an intangible product is more difficult than that of a tangible product, testing processes are simpler with tangible products, and even the comprehension process of software is considered to be a complicated cognitive process.", "num_citations": "4\n", "authors": ["2222"]}
{"title": "ACM's Attention ot Women in IT\n", "abstract": " The Association for Computing Machinery (ACM) is a major force in advancing the skills of information-technology professionals and students worldwide. It was founded in 1947, and today has about 80,000 members. This article summarizes how this organization views the issue of women\u2019s participation in the hi-tech field. As it turns out, though the topic is addressed extensively in the association\u2019s newsletters and reports, women representation in these fields remains low.", "num_citations": "4\n", "authors": ["2222"]}
{"title": "The reflective practitioner perspective in software engineering\n", "abstract": " This position paper focuses on the application of the Reflective Practitioner (RP) perspective to the profession of Software Engineering (SE). The RP perspective, introduced by Donald Sch\u00f6n (1983, 1987), guides professional people (architects, managers, musicians and others) to rethink and examine their professional creations during and after the accomplishment of the creation process. The working assumption is that such a reflection improves the proficiency and performance within such professions.", "num_citations": "4\n", "authors": ["2222"]}
{"title": "Cognitive and social aspects of software engineering: A course framework\n", "abstract": " This article focuses on teaching and learning human aspects of Software Engineering (SE). Based on several classes that the author taught on the subject, the article describes a framework for a course that deals with cognitive and social aspects of SE. In these classes students worked in teams, and the lessons consisted of lectures, activities, class discussions, and student presentations. The activities which students worked on aimed to address two of the human aspects of SE: the cognitive aspect and the social aspect. Each of these aspects was discussed on the individual level and on the team level. The paper describes selected activities taken from these classes.", "num_citations": "4\n", "authors": ["2222"]}
{"title": "Teaching methods in computer science education\n", "abstract": " This chapter presents active-learning-based teaching methods that computer science educators can employ in the classroom. The purpose of this chapter is first, to let the students in the MTCS course experience a variety of teaching methods before becoming computer science teachers; second, to discuss, together with the students, the advantages and disadvantages of these teaching methods; and third, to demonstrate high school teaching situations in which it is appropriate to employ these teaching methods. This chapter discusses (a) pedagogical tools: games, the CS-Unplugged approach, rich tasks, concept maps, classification, and metaphors; (b) different forms of class organization; and (c) mentoring software project development.", "num_citations": "3\n", "authors": ["2222"]}
{"title": "STEM Teachers\u2019 SWOT analysis of STEM education: The bureaucratic\u2013professional Conflict\n", "abstract": " This chapter describes a study that aims to characterize the perception of STEM teachers of the Israeli STEM education system. It analyzes the bureaucratic\u2013professional conflict that the teachers experience which addresses the conflict between teachers\u2019 professional norms and the organizational norms. The main tool of the research was in-depth interviews with STEM teachers, designed according to the four components of the SWOT analysis with respect to STEM education in Israel. The analysis indicated that STEM teachers\u2019 perceptions of the STEM education system in Israel can be characterized by five conflicts the teachers face. The conflicts express the gap between the teachers\u2019 perceptions and the organizational perception of STEM education in Israel. The five conflicts are the professional opportunities conflict, the profession perception conflict, the discourse on STEM education conflict, the\u00a0\u2026", "num_citations": "3\n", "authors": ["2222"]}
{"title": "Diversity in Excellence Fostering Programs: The Case of the Informatics Olympiad\n", "abstract": " This work examines the Israeli National Informatics-Computer Science (CS) Olympiad from the perspective of diversity. A conspicuous phenomena in this olympiad (as well as in other science olympiads) is that very few females participate in the national competition, and none has ever represented the country in any international competition. When examining this phenomenon more closely, but with a broader view, it seems that while the level of external diversity (which addresses characteristics such as gender and race) is quite low also with respect to additional aspects, it does increase with respect to internal traits (such as ways of thinking). Furthermore, alongside the low external diversity among the participants, there are many common features among those who influence students' participation in the competition. The paper outlines the background of the research, the research setting, and, as mentioned above\u00a0\u2026", "num_citations": "3\n", "authors": ["2222"]}
{"title": "The influence of software intangibility on computer science and software engineering education\n", "abstract": " In this short essay I will discuss how the fact that software is an intangible object influences Computer Science (CS) and Software Engineering (SE) education. Based on several observations that result from this analysis (Part A), I will then highlight the importance of teaching soft ideas in the framework of CS and SE education (Part B).", "num_citations": "3\n", "authors": ["2222"]}
{"title": "Culture and Environment as Determinants of Women\u2019s Participation in Computing\n", "abstract": " This paper presents a cultural perspective towards thinking about, and acting on, issues concerning women and computer science and related fields. We posit and demonstrate that the notion of a gender divide in how men and women relate to computing, traditionally attributed to gender differences, is largely a result of cultural and environmental conditions. Indeed, the reasons for women entering\u2013or not entering\u2013the field of computer science have little to do with gender and a lot to do with environment and culture as well as the perception of the field. Appropriate outreach, education and interventions in the micro-culture can have broad impact, increasing participation in computing and creating environments where both men and women can flourish. This argument is illustrated by specific case studies.", "num_citations": "3\n", "authors": ["2222"]}
{"title": "Agile System Analysis and Design\n", "abstract": " Agile software development methods mainly aim at increasing software quality by fostering customer collaboration and performing exhaustive testing. The introduction of Extreme Programming (XP) \u2013 the most common agile software development method \u2013 into an organization is accompanied with conceptual and organizational changes. These changes range from daily-life changes (e.g., sitting together and maintaining an informative project environment) and continue with changes on the management level (e.g., meeting and listening to the customer during the whole process and the concept of the whole team which means that all role holders are part of the team). This paper examines the process of transition to an agile development process in a large-scale software project in the Israeli Air Force as it is perceived from the system analysis and design perspective. Specifically, the project specifications of\u00a0\u2026", "num_citations": "3\n", "authors": ["2222"]}
{"title": "A cognitive perspective on software development methods: the case of extreme programming\n", "abstract": " One of the main dilemmas with which software development teams face is how to choose a software development method that suits the team as well as the organization. This short paper suggests an approach that may help in this process. Specifically, Extreme Programming (XP) is analyzed from a cognitive perspective. We suggest that such an analysis can support software development processes.", "num_citations": "3\n", "authors": ["2222"]}
{"title": "Professional development workshop for female software engineers\n", "abstract": " This article presents a perspective on the professional development of software engineers, with a focus on women in the field. Specifically, a professional development workshop for female software engineers is presented. The article starts by explaining the need for such a workshop. Then, the workshop purpose and objectives, workshop structure, workshop activities and a possible workshop format are presented.", "num_citations": "3\n", "authors": ["2222"]}
{"title": "Special issue on import/export relationships to computer science education research\n", "abstract": " Computer science education is not in itself a unique discipline, but a range of approaches to a single activity within a single subject area. The methods used by Computer Science Researchers are drawn from other disciplines. Dependent on their special interests those working in the field (in addition to technical computing knowledge) may draw on subject areas as diverse as statistics, educational theory and the cognitive sciences (Fincher & McCauley, 2001).The editors-in-chief also pointed out:\u2018\u2018Practitioners, no less than researchers, have to stay abreast of numerous and disparate bodies of material.\u2019\u2019In addition, as computing education matures, the field is developing its own unique perspectives, such as the study of how people come to understand computation and computational devices and how to improve that understanding.", "num_citations": "3\n", "authors": ["2222"]}
{"title": "Application of computer science ideas to the presentation of mathematical theorems and proofs\n", "abstract": " Based on the analogy between mathematical proofs and computer programs this paper illustrates how it is possible to apply methodologies from computer science, used in the development and presentation of computer programs, for the presentation of mathematical theorems and proofs. The following three methodologies are discussed: stepwise refinement, abstraction, and program verification.", "num_citations": "3\n", "authors": ["2222"]}
{"title": "Interrelations between systems thinking and abstract thinking: the case of high-school electronics students\n", "abstract": " Systems thinking and abstract thinking are important skills for engineers in general and hardware and software engineers in particular. Systems thinking emphasises the interdependence of system components and their synergy. Abstract thinking permits one to focus on the significant details of the current perspective, while temporarily neglecting the less relevant details of the stage in question. So far, systems thinking and abstract thinking have each been characterised separately, but a possible relation between them has not yet been examined. The study described in the paper explored the interrelations between systems thinking and abstract thinking among high-school students executing their final project. In the study, which used quantitative and qualitative tools, participated 239 Israeli twelve graders majoring in electronics. The findings indicate a significant moderate positive correlation between systems\u00a0\u2026", "num_citations": "2\n", "authors": ["2222"]}
{"title": "Discovering an organisational paradox: the reduction\u2013expansion perceptions in a police training organisation\n", "abstract": " In a dynamic and competitive environment, how do complex organisations maintain continuity and function without falling apart? This question will be examined in the context of the Israeli Police training organisation, which consists of several sub-organisations. Although they share similar goals, each has different objectives, trains police of different duties, and operates in a different geographical location. The common organisational characteristics promote shared perception and behaviour patterns for employees, which in turn, stabilise the organisation facing a complex environment. To reveal common perceptions of the training personnel, the research methodology chosen was qualitative, specifically, grounded theory methodology. The shared pattern reflects a paradoxical perception which simultaneously incorporates two poles \u2013 reductive and expansive \u2013 in each of four organisational core components\u00a0\u2026", "num_citations": "2\n", "authors": ["2222"]}
{"title": "Equalizing Data Science Curriculum for Computer Science Pupils\n", "abstract": " Data science is a new interdisciplinary field of research that focuses on extracting value from data. As an interdisciplinary science it integrates knowledge and methods from computer science, mathematics and statistics, and the domain knowledge of the data. As data science is still forming as a domain, several points of view exist on how to teach data science. The curriculum of many undergraduate data science programs includes advanced knowledge and skills in mathematics, statistics, computer science, and one or more data domains.", "num_citations": "2\n", "authors": ["2222"]}
{"title": "Lab-based teaching\n", "abstract": " This chapter focuses on computer science teaching methods that fit especially to be employed in the computer lab, where all learners work on computers (either on the school\u2019s computer in a specific room or on their own laptops). The uniqueness of the computer lab as a learning environment for computer science is explained by the fact that it enables learners to explore their problem-solving strategies, to express their solutions to a given problem, to get feedback regarding to the correctness of their solution and to reflect on it, to develop large projects, to explore new topics, and to deepen their understanding of the nature of the algorithms they develop. The main purpose of the lessons in the MTCS course dedicated to this topic is to expose the students to usages of the computer lab as a learning environment and to let them realize how it may improve their future pupils\u2019 understanding of computer science\u00a0\u2026", "num_citations": "2\n", "authors": ["2222"]}
{"title": "A gender perspective on computer science education in Israel\n", "abstract": " This chapter focuses on computer science (CS) education in Israel, which is known as the \u201cStart-Up Nation\u201d due to its high level of technological innovation and high number of start-ups in the country (Sensor and Singer, 2009). It tells a story, from a gender perspective, that starts in high school, passes through the military service and university stages, and concludes with what happens to female computer scientists in the job market, whether it be in academia or industry. We show that, as expected, external characteristics and cultural aspects matter in determining women\u2019s participation in CS education and CS professions. This chapter further supports Blum et al.(2007), who found that \u201cthe notion of a gender divide in how men and women relate to computing, traditionally attributed to gender differences, is largely a result of cultural and environmental conditions. Indeed, the reasons for women entering\u2013or not entering\u2013the field of CS have little to do with gender and a lot to do with environment and culture as well as the perception of the field\u201d(p. 109).As mentioned, we demonstrate this phenomenon in high school, in the Israel Defense Forces (IDF), in academia, and in industry. In high school, our conclusion is largely based on research by Eidelman and Hazzan (2005, 2007, 2008), supported by current data published by the Israeli authorities, which reveal differences between Jewish and Arab female high school students who choose to study CS at the highest matriculation level. On the university level, we focus on our own institution\u2013the Technion\u2013Israel Institute of Technology. In addition to general data about our students, we present data from a\u00a0\u2026", "num_citations": "2\n", "authors": ["2222"]}
{"title": "Practices of Agile Educational Environments: Analysis from the Perspective of the Public, Private, and Third Sectors\n", "abstract": " This chapter examines the application of agile teaching practices from a sectorial perspective, analyzing how education takes place in the public sector, the for-profit sector, and the third sector. We show that most professionals occasionally wear an educational hat, and as such can apply agile teaching and learning practices, modified as needed for the specific environment (e.g., academia, industry, or the public sector). We use two frameworks that we introduced in previous research to analyze agile teaching practices as well as their expression in the three sectors. Our findings promote efforts to expand the scope of agile learning beyond conventional (formal or informal) educational systems to other sectors and organizations.", "num_citations": "2\n", "authors": ["2222"]}
{"title": "Research\u2013practice partnerships in stem education: An organizational perspective\n", "abstract": " The research presented in this chapter examines Research\u2013Practice Partnerships (RPPs) in Israeli Science, Technology, Engineering, and Mathematics (STEM) education. We performed a SWOT analysis, where we categorized factors into Strengths, Weaknesses, Opportunities and Threats on data collected before, during, and after a conference that was devised to examine the state of STEM RPPs in Israel. The overall data analysis revealed the following theme: Studies in STEM education focus on what goes on in the schools and the need for RPPs. Yet, RPPs face obstacles rooted in the organizational structure and culture of the two RPP partners: the Research\u2014Academia in Israel; and the Practice\u2014Ministry of Education (MoE). Therefore, while both the education system and academia agree on the necessity to collaborate, these collaborations are not fully actualized, and RPPs in STEM education in\u00a0\u2026", "num_citations": "2\n", "authors": ["2222"]}
{"title": "Risk Management of Education Systems: The Case of STEM Education in Israel\n", "abstract": " This work illustrates how risk management can be applied to educational systems in general, and STEM (Science, Technology, Engineering and Mathematics) education in particular. The rationale for this approach stems from the increased awareness of the importance and contribution of STEM education to nations\u2019 economic growth and development. The coverage begins with the challenges of STEM education systems, and concludes with a thorough strategic risk response plan. The text outlines a risk-management plan/program for STEM education in Israel, based on the conceptions of five stakeholders groups: educators, academics, industry professionals, military and philanthropic actors. All of whom have expressed interest in promoting STEM education in the high school/secondary education system. The result, ultimately, presents an impressive, meaningful, and practical understanding of the difficulties and challenges, together with applicable modes of action, and a new horizon towards which STEM Education should march.", "num_citations": "2\n", "authors": ["2222"]}
{"title": "What do police academy instructors and STEM teachers have in common? The Mission Paradox\n", "abstract": " This article presents the Mission Paradox, shared by two public sector organizations in Israel: the police training system and the post-primary STEM education system. The Mission Paradox was identified in data analysis of two doctoral studies, which implemented a qualitative methodology. The study\u2019s purpose was to analyze the perceptions of police training personnel and the perceptions of STEM teachers regarding the system in which they train or teach. The findings describe two poles of the Mission Paradox, which represent the meaning that teachers and instructors ascribe to their everyday training and teaching interactions at work: the formal mission at one extreme and the personal mission at the other. The paradox highlights the importance that organizations should ascribe to the existence of a personal mission. Naturally, employees should be enabled to realize their personal purpose as part of the\u00a0\u2026", "num_citations": "2\n", "authors": ["2222"]}
{"title": "Big Data in Computer Science Education Research\n", "abstract": " Recent years have seen the emergence of applications and concepts that rely on the involvement of the general public (the\" crowd\") and, consequently, create big data (eg, MOOCs, search engines, crowdsourcing, crowdfunding, citizen/crowd science, and more). Education in particular is changing dramatically with the use of online resources and courses that generate large streams of data. In this special session, we ask: What research questions in computer science education can be explored using big data? And how can computer science education researchers apply big data analysis to support education in other disciplines? To answer these and related questions, we focus in this special interactive session on how computer science education research can be promoted by integrating big data into the research process.", "num_citations": "2\n", "authors": ["2222"]}
{"title": "Can a 2-hour Visit to a Hi-Tech Company Increase Interest in and Change Perceptions about Computer Science?\n", "abstract": " This paper presents the\" Mind the Gap\" initiative that aims to encourage female high school pupils to study computer science (CS) in high school. This is achieved by increasing their awareness to what CS is, and exposing them to the essence of a hi-tech environment and to same gender role models. The initiative was undertaken by female software engineers at Google's Israel R&D Center in collaboration with the Israeli National Center for Computer Science Teachers. We describe the initiative and its impact on the female pupils' interest in CS. One of our conclusions is that even a short visit to a hi-tech company, in this case\u2013Google, has the potential to change pupils' perception of what CS is and to increase their interest in CS and their desire to study it. Our initiative can be easily adapted by other companies and can be scaled to impact a rather large population.", "num_citations": "2\n", "authors": ["2222"]}
{"title": "Introduction to Agile Software Development\n", "abstract": " What is agile software development               agile software development? Why is an agile perspective on software engineering needed? What are the main characteristics of agile software development? What can be achieved by agile software development processesagile                                ? Does agile software development form a pleasant and professional software development environment? These are the main questions addressed in this introductory chapter of the book. After reading this chapter, not only will you gain some insights about agile software development in general, you will also understand the nature of agile software development and be able to clarify how it establishes a professional software development environment in which software engineers are able to express their skills and, at the same time, to produce quality software products. In the section that deals with the learning of agile\u00a0\u2026", "num_citations": "2\n", "authors": ["2222"]}
{"title": "The concept of change in technology transfer\n", "abstract": " In this paper we describe two case studies of technology transfer, both of which address the adoption of Extreme Programming, the most prevalent agile software development method. The first case takes place in an industrial setting; the second--in academia. For the analysis of these cases, we use two concepts: a software development method lifestyle and the concept of change. We propose that these concepts, as well as a combination thereof, can serve as a framework within which change processes in general, and technology transfer events in particular, can be analyzed.", "num_citations": "2\n", "authors": ["2222"]}
{"title": "On the presentation of computer science problems\n", "abstract": " This paper suggests an alternative way for presenting theorems to students. The discussion focuses on theorems that indicate the existence (or inexistence) of some object. Instead of presenting a given theorem as it is, it is suggested to reformulate the theorem as a (sometimes unsolvable) construction task. Students trials to solve the construction problem, lead them to discover the theorem by themselves.", "num_citations": "2\n", "authors": ["2222"]}
{"title": "Teaching CS undergrads online to work with others effectively\n", "abstract": " The Communications Web site, http://cacm.acm.org, features more than a dozen bloggers in the BLOG@CACM community. In each issue of Communications, we'll publish selected posts or excerpts. twitterFollow us on Twitter at http://twitter.com/blogCACM http://cacm.acm.org/blogs/blog-cacm Orit Hazzan on the challenges of taking a CS soft skills class online after teaching it in a classroom for a decade.", "num_citations": "1\n", "authors": ["2222"]}
{"title": "Interdisciplinary Education-The Case of Biomedical Signal Processing\n", "abstract": " Interdisciplinary perspective on real-life problems is an important skill for 21st century engineers and should be a part of their education. Project-based learning (PBL) is a well-known pedagogical tool for interdisciplinary education. In order to successfully accomplish interdisciplinary learning, students must have sufficient knowledge in each of the separate disciplines. Use of cross-disciplinary teams, for example, is one way to make sure a project team includes specialists in all required disciplines. This, however, is not always the case. In many cases, there are significant knowledge gaps within the project team in one or more of the project domains. Specifically, in our case, fourth-year electrical engineering students are working in pairs on biomedical signal processing projects, which are evidently interdisciplinary in nature. The teams, however, are homogeneous and the students lack the essential medical\u00a0\u2026", "num_citations": "1\n", "authors": ["2222"]}
{"title": "Data Science and Computer Science Education\n", "abstract": " This chapter focuses on teaching and learning of data science. We address this topic in this Guide of teaching computer science since data science is an emerging discipline that computer science is one of its basic components and, accordingly, the two fields have some overlaps. In this chapter we take into consideration the fact that not all the students, who study the MTCS course, are familiar with data science, and, therefore, unlike other chapters, this chapter does include some explanations about what data science is as well as its knowledge structure. We dedicate special attention to the pedagogy of data science, highlighting both the learners\u2019 perspective and the teachers\u2019 perspective. To avoid too abstract and vague description of the teaching and learning processes of data science in high school, we present an example of a data science program for high school. In the activities presented to the students in\u00a0\u2026", "num_citations": "1\n", "authors": ["2222"]}
{"title": "A Gender Perspective on Computer Science Education in Israel From High School, through the Military and Academia to the Tech Industry\n", "abstract": " This chapter focuses on computer science (CS) education in Israel, which is known as the \u201cStart-Up Nation\u201d due to its high level of technological innovation and high number of start-ups in the country (Sensor and Singer, 2009). It tells a story, from a gender perspective, that starts in high school, passes through the military service and university stages, and concludes with what happens to female computer scientists in the job market, whether it be in academia or industry. We show that, as expected, external characteristics and cultural aspects matter in determining women\u2019s participation in CS education and CS professions. This chapter further supports Blum et al.(2007), who found that \u201cthe notion of a gender divide in how men and women relate to computing, traditionally attributed to gender differences, is largely a result of cultural and environmental conditions. Indeed, the reasons for women entering\u2013or not entering\u2013the field of CS have little to do with gender and a lot to do with environment and culture as well as the perception of the field\u201d(p. 109).As mentioned, we demonstrate this phenomenon in high school, in the Israel Defense Forces (IDF), in academia, and in industry. In high school, our conclusion is largely based on research by Eidelman and Hazzan (2005, 2007, 2008), supported by current data published by the Israeli authorities, which reveal differences between Jewish and Arab female high school students who choose to study CS at the highest matriculation level. On the university level, we focus on our own institution\u2013the Technion\u2013Israel Institute of Technology. In addition to general data about our students, we present data from a\u00a0\u2026", "num_citations": "1\n", "authors": ["2222"]}
{"title": "Problem-solving strategies\n", "abstract": " Problem-solving is generally considered as one of the most important and challenging cognitive activities in everyday as well as in any professional contexts. Specifically, it is one of the central activities performed by computer scientists as well as by computer science learners. However, it is not a uniform or linear process that can be taught as an algorithm to be followed, and the understanding of this individual process is not always clear. Computer science learners often face difficulties in performing two of the main stages of a problem-solving process: problem analysis and solution construction. Therefore, it is important that computer science educators be aware of these difficulties and acquire appropriate pedagogical tools to guide and scaffold learners in learning these skills. This chapter is dedicated to such pedagogical tools. It presents several problem-solving strategies to address in the MTCS course together\u00a0\u2026", "num_citations": "1\n", "authors": ["2222"]}
{"title": "Types of Questions in Computer Science Education\n", "abstract": " As presented in the previous chapters of this Guide, teachers are expected to vary their teaching methods. This chapter focuses on how to achieve this pedagogical principle by using different types of questions. It explores and discusses different types of questions that computer science educators (middle and high school teachers as well as university instructors) can use in different teaching situations and processes: in the classroom, in the computer lab, as homework, or in exams. The chapter discusses also keywords that appear in problem-solving questions which reflect that learners need to apply high-order cognitive skills when answering these questions. The chapter lays out the advantages of using a variety of question types both for the learners\u2019 and teachers\u2019 perspectives and focuses on the design process of different question types. Though the types of questions presented are mainly related to\u00a0\u2026", "num_citations": "1\n", "authors": ["2222"]}
{"title": "Learners\u2019 alternative conceptions\n", "abstract": " This chapter focuses on learners\u2019 alternative conceptions. Since prospective teachers in general, and prospective computer science teachers in particular, face difficulties in gaining the notion of alternative conceptions, it is important to address this issue in the MTCS course and to highlight the message that a learning opportunity exists in each pupils\u2019 mistake (or misunderstanding). The chapter includes several pedagogical tools for exposing learners\u2019 alternative conceptions and activities to be facilitated in the MTCS course.", "num_citations": "1\n", "authors": ["2222"]}
{"title": "What are computer science educators interested in? The case of SIGCSE conferences\n", "abstract": " This paper explores the fields of interest of the computer science education (CSE) community during the 12 years between 2006\u20132018 as reflected in the professional content of SIGCSE conferences. For this purpose, we investigated four SIGCSE conferences\u20142006, 2010, 2014, and 2018\u2014and identified main topics and themes addressed in the following three presentation formats: papers, panels, and special sessions. We defined five content categories derived from the different presentation content: teaching methods, curricula, CSE research, recruitment and retention, and educators. The paper compares the four conferences according to two main classifications (1) content categorization, according to the above content categories we defined; and (2) the most frequent keywords used by the authors to describe their work. These keywords were divided into three themes: CS curricula, CS topics, and pedagogy\u00a0\u2026", "num_citations": "1\n", "authors": ["2222"]}
{"title": "Agile exponential software organizations\n", "abstract": " In this Interactive Talk we present the concept of exponential organizations and facilitate exponential thinking for agile practitioners. Exponential organizations (ExOs) are organizations whose \"impact (or output) is disproportionally large - at least 10x larger - compared to its peers because of the use of new organizational techniques that leverage accelerating technologies.\" [2, p. 18] (e.g., Google, TED, Uber, Airbnb, Waze, and more, see http://top100.exponentialorgs.com/). ExOs are characterized by ten aspects that are derived from a massive transformative purpose (MTP), which is \"the higher, aspirational purpose of the organization\" [2, p. 54] (e.g., TED's Ideas worth spreading, Google's Organize the world's information). We demonstrate how agile organizations [1] and lean startups can use ExO thinking to promote both agility and exponential growth. Attendees gain knowledge on how to integrate 1) agility\u00a0\u2026", "num_citations": "1\n", "authors": ["2222"]}
{"title": "Transition to Agile Software Development in a Large-Scale Project: A Systems Analysis and Design Perspective\n", "abstract": " In this chapter we focus on the implementation of Extreme Programming, one of the agile software development methods, in a large-scale software project in the Israeli Air Force, and describe the transition from a plan-driven process to an agile one as it is perceived from the systems analysis and design perspective. Specifically, during the first eight months of transition, the project specifications and acceptance tests of the agile team are compared with those of a team that continues working according to the previous plan-driven method. Size and complexity measures are used as the basis of the comparison. In addition, the role of the systems analysts during the transition process is examined and different development models with respect to systems analysis and design are discussed.ABSTRACT", "num_citations": "1\n", "authors": ["2222"]}
{"title": "Phase C: Risk Response\n", "abstract": " In this chapter, we propose a response plan mainly for the strategic risks, while addressing also the operational and external risks. Thirteen courses of action are proposed: Five courses of actions are internal to the education system; eight courses of actions involve cooperation with stakeholders from other sectors in Israel. Data was gathered in focus groups in which stakeholders of STEM education participated. The discussion on the focus groups concentrated on how to reduce the impact of the strategic risks. Among them, a cross-sectoral cooperation has been largely suggested, discussed, and analyzed. Accordingly, we present frameworks related to forms of cross-sectoral collaboration in general and in STEM education in particular.", "num_citations": "1\n", "authors": ["2222"]}
{"title": "Phase A: Risk Identification\u2014Identification of Risk Categories by SWOT Analysis of STEM Education in Israel\n", "abstract": " This chapter describes the risk identification by SWOT analysis of STEM education in Israel. It outlines seven risk categories of 43 risk factors, based on bureaucratic-professional conflicts and barriers in implementing changes in education systems.", "num_citations": "1\n", "authors": ["2222"]}
{"title": "Teaching Computer Science Soft Skills\n", "abstract": " This workshop addresses the teaching of computer science soft skills, such as teamwork, diversity, presentation and communication skills, and ethical behaviors. It is based on the assumption that the people involved in software development processes deserve more attention, and therefore, their soft skills should also be addressed, beyond their scientific and engineering skills. In the workshop, we will highlight such soft skills using activities that aim to analyze them from a social and cognitive perspective. We will also present and discuss a course outline dealing with soft skills of computer science, including suggestions for specific activities and tasks.", "num_citations": "1\n", "authors": ["2222"]}
{"title": "Emotional interactions of high achieving students in mathematical argumentation: The case of Jasmine\n", "abstract": " The study of emotional aspects of interaction may tell us much about the social norms and the meta-mathematical rules according to which participants act during their mathematical activity. To illustrate this idea, we present the case of Jasmine, a 16-year-old student participating in a summer camp intended for exceptionally high achieving students in mathematics. Through a commognitive analysis of the interaction between Jasmine and her instructor (the first author), we examine the implicit metarules of discourse according to which the two participants acted and that, at a certain point, led to Jasmine's frustrated disengagement from the discussion. Adding the concept of \" framing \" shows that this episode could be characterized by the student and instructor's \" misaligned frames \" .", "num_citations": "1\n", "authors": ["2222"]}
{"title": "Introduction to Agile Anywhere\n", "abstract": " We wish to be more agile. Agility is a concept that people, teams, organizations wish to be proud of as one of their traits. The message we convey in this book is that agility can be implemented anywhere, and accordingly, we present ten guidelines for the adoption of agility that enable to cope with changes in our life, in our team, in our organizations. Since we advocate agility, we publish Agile Anywhere as a Springer               Briefs, which includes concise standalone chapters that enable the readership to focus on the specific topic they wish to adopt in order to become agile.", "num_citations": "1\n", "authors": ["2222"]}
{"title": "Overview of the Discipline of Computer Science\n", "abstract": " This chapter proposes how to address in the Methods of Teaching Computer Science (MTCS) course topics associated with the nature of the discipline of computer science and with cross-curriculum topics. The importance of these topics is explained by the fact that even today, no consensus has been reached with respect to one agreed-upon definition for computer science, and different scholars view it differently. Specifically, the following topics are discussed in this chapter: what is computer science, the history of computer science, computer scientists, social issues of computer science, programming paradigms, computer science soft ideas, computer science as an evolving discipline, and computer science as an integrated and integral part of other disciplines. For each topic, its meaning and its importance and relevance in the context of computer science education are explained, and then, activities which\u00a0\u2026", "num_citations": "1\n", "authors": ["2222"]}
{"title": "Disciplined and free-spirited:\u2018time-out behaviour\u2019at the Agile conference\n", "abstract": " In this article we observe and try to understand a peculiar duality in the agile community, whereby on the one hand, we see a serious professional community working hard to improve the quality of software products and submitting to the strictest discipline of high professional standards, while on the other hand, in its conferences, we see the same community adopting a playful free-spirited stance. Invoking an anthropological perspective, we propose that both the serious professional aspects and the playful free-spirited atmosphere at the conference, as well as the connection between the two, can all be seen to emerge from the fundamental principles of the agile community as expressed by its Manifesto.", "num_citations": "1\n", "authors": ["2222"]}
{"title": "Using metaphors with software teams\n", "abstract": " In this activity we introduce the use of metaphors in software teams. Specifically, we present specific activities that can be used to increase students' awareness to metaphors, thus increasing the level of communication among team members involved in a given software project development. Further, metaphors are used as a mechanism to discuss problems and solutions. This activity is based on individual activities, teamwork activities, discussions and reflections.", "num_citations": "1\n", "authors": ["2222"]}
{"title": "Reflection in software engineering education\n", "abstract": " In this activity we examine ways by which a reflective mode of thinking may assist software engineers in improving their profes-sional skills. Specifically, we describe the reflective practice pers-pective and suggest specific ways by which such an approach may be interwoven within software engineering education.", "num_citations": "1\n", "authors": ["2222"]}
{"title": "Teaching human aspects of Software Engineering\n", "abstract": " This paper highlights the teaching of human aspects of software engineering, by presenting a course that deals with this topic. Specifically, this paper outlines the course's objective and structure, and, as the CfP asks, suggests two challenges an instructor of software engineering faces today.", "num_citations": "1\n", "authors": ["2222"]}
{"title": "Reducing Abstraction: The Case of Elementary Mathematics.\n", "abstract": " There is a growing interest in the mathematics education community in the notion of abstraction and its significance in the learning of mathematics.\" Reducing abstraction\" is a theoretical framework that examines learners' behavior in terms of coping with abstraction level. This article extends the scope of applicability of this framework from advanced to elementary mathematics.The notion of abstraction in mathematics and in mathematical learning has recently received a lot of attention within the mathematics education research community. The significance of this topic, as well as the magnitude of community interest was highlighted at the 2002 PME Research Forum# 1. The purpose of this research forum was to discuss and critically compare three theories of abstraction, all aimed at providing a means for the description of the processes involved in the emergence of new mathematical mental structures. The forum was geared towards formulating an integrated theoretical framework that may serve to explain a vast collection of observations on mathematical thinking.", "num_citations": "1\n", "authors": ["2222"]}
{"title": "The application of reflective practitioner perspective to software engineering\n", "abstract": " This paper focuses on the application of the Reflective Practitioner (RP) perspective to the discipline of Software Engineering (SE). The Reflective Practitioner perspective, introduced by Donald Sch\u00f6n (1983, 1987), guides professional people (architects, managers, musicians, and others) to rethink and examine their professional creations during and after the accomplishment of the creation process1. The working assumption is that such a reflection improves the proficiency and performance within these professions. An analysis of the field of Software Engineering in general, of its sub-field Software Architecture2 in particular, and of the kind of work that software engineers usually carry out, all support the adoption of the RP methodology to SE.In an ongoing research I collect data about student reflection on the process of developing a software system. For reasons of space limitation I will not present the data itself in this paper. In the talk I will illustrate the ideas presented in the paper by quoting student reflection. This illustration may also shed light on the adopting the RP methodology for educational purposes of SE. Further support for this approach can be found in Tomayko (1996) and Wallingford (1998).", "num_citations": "1\n", "authors": ["2222"]}