{"title": "Design and use of software architectures: adopting and evolving a product-line approach\n", "abstract": " This book provides an achievable answer. The author proposes a method for designing software architectures, and product line architectures, which is based on his experience in industry and research. The first part of the book introduces the design method,", "num_citations": "2406\n", "authors": ["622"]}
{"title": "On the notion of variability in software product lines\n", "abstract": " The authors discuss the notion of variability. We have experienced that this concept has so far been underdefined, although we have observed that variability techniques become increasingly important. A clear indication of this trend is the recent emergence of software product lines. Software product lines are large, industrial software systems intended to specialize into specific software products. The authors provide a framework of terminology and concepts regarding variability. In addition, they present three recurring patterns of variability. Finally, they suggest a method for managing variability in software product lines.", "num_citations": "857\n", "authors": ["622"]}
{"title": "Software architecture as a set of architectural design decisions\n", "abstract": " Software architectures have high costs for change, are complex, and erode during evolution. We believe these problems are partially due to knowledge vaporization. Currently, almost all the knowledge and information about the design decisions the architecture is based on are implicitly embedded in the architecture, but lack a first-class representation. Consequently, knowledge about these design decisions disappears into the architecture, which leads to the aforementioned problems. In this paper, a new perspective on software architecture is presented, which views software architecture as a composition of a set of explicit design decisions. This perspective makes architectural design decisions an explicit part of a software architecture. Consequently, knowledge vaporization is reduced, thereby alleviating some of the fundamental problems of software architecture.", "num_citations": "798\n", "authors": ["622"]}
{"title": "From software product lines to software ecosystems.\n", "abstract": " Software product line companies increasingly expand their platform outside their organizational boundaries, in effect transitioning to a software ecosystem approach. In this paper, we discuss the emerging trend of software ecosystems and provide a overview of the key concepts and implications of adopting a software ecosystem approach. We define the notion of software ecosystems and introduce a taxonomy. Finally, we explore the implications of software ecosystems to the way companies build software.", "num_citations": "758\n", "authors": ["622"]}
{"title": "A taxonomy of variability realization techniques\n", "abstract": " Development of software product families relies heavily on the use of variability to manage the differences between products by delaying design decisions to later stages of the development and usage of the constructed software systems. Implementation of variability is not a trivial task, and is governed by a number of factors. In this paper, we describe the factors that are relevant in determining how to implement variability, and present a taxonomy of variability realization techniques. Copyright \u00a9 2005 John Wiley & Sons, Ltd.", "num_citations": "650\n", "authors": ["622"]}
{"title": "Architecting for usability: a survey\n", "abstract": " Over the years the software engineering community has increasingly realized the important role software architecture plays in fulfilling the quality requirements of a system. The quality attributes of a software system are, to a large extent determined by the system\u2019s software architecture. In recent years, the software engineering community has developed various tools and techniques that allow for design for quality attributes, such as performance or maintainability, at the software architecture level. We believe this design approach can be applied not only to \u201ctraditional\u201d quality attributes such as performance or maintainability but also to usability. This survey explores the feasibility of such a design approach. Current practice is surveyed from the perspective of a software architect. Are there any design methods that allow for design for usability at the architectural level? Are there any evaluation tools that allow\u00a0\u2026", "num_citations": "503\n", "authors": ["622"]}
{"title": "Architecture-level modifiability analysis (ALMA)\n", "abstract": " Several studies have shown that 50\u201370% of the total lifecycle cost for a software system is spent on evolving the system. Organizations aim to reduce the cost of these adaptations, by addressing modifiability during the system\u2019s development. The software architecture plays an important role in achieving this, but few methods for architecture-level modifiability analysis exist. Independently, the authors have been working on scenario-based software architecture analysis methods that focus exclusively on modifiability. Combining these methods led to architecture-level modifiability analysis (ALMA), a unified architecture-level analysis method that focuses on modifiability, distinguishes multiple analysis goals, has explicit assumptions and provides repeatable techniques for performing the steps. ALMA consists of five main steps, i.e. goal selection, software architecture description, change scenario elicitation, change\u00a0\u2026", "num_citations": "464\n", "authors": ["622"]}
{"title": "Software architecture: The next step\n", "abstract": " This position paper makes the following claims that, in our opinion, are worthwhile to discuss at the workshop. 1) The first phase of software architecture research, where the key concepts are components and connectors, has matured the technology to a level where industry adoption is wide-spread and few fundamental issues remain. 2) The traditional view on software architecture suffers from a number of key problems that cannot be solved without changing our perspective on the notion of software architecture. These problems include the lack of first-class representation of design decisions, the fact that these design decisions are cross-cutting and intertwined, that these problems lead to high maintenance cost, because of which design rules and constraints are easily violated and obsolete design decisions are not removed. 3) As a community, we need to take the next step and adopt the perspective that a\u00a0\u2026", "num_citations": "452\n", "authors": ["622"]}
{"title": "Covamof: A framework for modeling variability in software product families\n", "abstract": " A key aspect of variability management in software product families is the explicit representation of the variability. Experiences at several industrial software development companies have shown that a software variability model should do four things: (1) uniformly represent variation points as first-class entities in all abstraction layers (ranging from features to code), (2) allow for the hierarchical organization of the variability, (3) allow for the first-class representation of simple (i.e., one-to-one) and complex (i.e., n-to-m) dependencies, and (4) allow for modeling the relations between dependencies. Existing variability modeling approaches support the first two requirements, but lack support for the latter two. The contribution of this paper is a framework for variability modeling\u2014COVAMOF\u2014that provides support for all four requirements.", "num_citations": "399\n", "authors": ["622"]}
{"title": "From integration to composition: On the impact of software product lines, global development and ecosystems\n", "abstract": " Three trends accelerate the increase in complexity of large-scale software development, i.e. software product lines, global development and software ecosystems. For the case study companies we studied, these trends caused several problems, which are organized around architecture, process and organization, and the problems are related to the efficiency and effectiveness of software development as these companies used too integration-centric approaches. We present five approaches to software development, organized from integration-centric to composition-oriented and describe the areas of applicability.", "num_citations": "346\n", "authors": ["622"]}
{"title": "Design erosion: problems and causes\n", "abstract": " Design erosion is a common problem in software engineering. We have found that invariably, no matter how ambitious the intentions of the designers were, software designs tend to erode over time to the point that redesigning from scratch becomes a viable alternative compared to prolonging the life of the existing design. In this paper, we illustrate how design erosion works by presenting the evolution of the design of a small software system. In our analysis of this example, we show how design decisions accumulate and become invalid because of new requirements. Also it is argued that even an optimal strategy for designing the system (i.e. no compromises with respect to e.g. cost are made) does not lead to an optimal design because of unforeseen requirement changes that invalidate design decisions that were once optimal.", "num_citations": "328\n", "authors": ["622"]}
{"title": "Product derivation in software product families: a case study\n", "abstract": " From our experience with several organizations that employ software product families, we have learned that, contrary to popular belief, deriving individual products from shared software assets is a time-consuming and expensive activity. In this paper we therefore present a study that investigated the source of those problems. We provide the reader with a framework of terminology and concepts regarding product derivation. In addition, we present several problems and issues we identified during a case study at two large industrial organizations that are relevant to other, for example, comparable or less mature organizations.", "num_citations": "327\n", "authors": ["622"]}
{"title": "Climbing the\" Stairway to Heaven\"--A Mulitiple-Case Study Exploring Barriers in the Transition from Agile Development towards Continuous Deployment of Software\n", "abstract": " Agile software development is well-known for its focus on close customer collaboration and customer feedback. In emphasizing flexibility, efficiency and speed, agile practices have lead to a paradigm shift in how software is developed. However, while agile practices have succeeded in involving the customer in the development cycle, there is an urgent need to learn from customer usage of software also after delivering and deployment of the software product. The concept of continuous deployment, i.e. the ability to deliver software functionality frequently to customers and subsequently, the ability to continuously learn from real-time customer usage of software, has become attractive to companies realizing the potential in having even shorter feedback loops. However, the transition towards continuous deployment involves a number of barriers. This paper presents a multiple-case study in which we explore barriers\u00a0\u2026", "num_citations": "303\n", "authors": ["622"]}
{"title": "Maturity and evolution in software product lines: Approaches, artefacts and organization\n", "abstract": " Software product lines have received considerable adoption in the software industry and prove to be a very successful approach to intra-organizational software reuse. Existing literature, however, often presents only a single approach towards adopting and evolving a software product line. In this paper, we present an overview of different approaches to the architecture-centric, intra-organizational reuse of software artefacts. We relate these to maturity levels for product line artefacts and organizational models.", "num_citations": "263\n", "authors": ["622"]}
{"title": "Modeling continuous integration practice differences in industry software development\n", "abstract": " Continuous integration is a software practice where developers integrate frequently, at least daily. While this is an ostensibly simple concept, it does leave ample room for interpretation: what is it the developers integrate with, what happens when they do, and what happens before they do? These are all open questions with regards to the details of how one implements the practice of continuous integration, and it is conceivable that not all such implementations in the industry are alike. In this paper we show through a literature review that there are differences in how the practice of continuous integration is interpreted and implemented from case to case. Based on these findings we propose a descriptive model for documenting and thereby better understanding implementations of the continuous integration practice and their differences. The application of the model to an industry software development project is then\u00a0\u2026", "num_citations": "255\n", "authors": ["622"]}
{"title": "Superimposition: A component adaptation technique\n", "abstract": " Several authors have identified that the only feasible way to increase productivity in software construction is to reuse existing software. To achieve this, component-based software development is one of the more promising approaches. However, traditional research in component-oriented programming often assumes that components are reused \u201cas-is\u201d. Practitioners have found that \u201cas-is\u201d reuse seldom occurs and that reusable components generally need to be adapted to match the system requirements. Existing component object models provide only limited support for component adaptation, i.e. white-box techniques such as copy\u2013paste and inheritance, and black-box approaches such as aggregation and wrapping. These techniques suffer from problems related to reusability, efficiency, implementation overhead or the self problem. To address these problems, this article proposes superimposition, a novel black\u00a0\u2026", "num_citations": "240\n", "authors": ["622"]}
{"title": "Software architecture design: evaluation and transformation\n", "abstract": " Since the architecture of a software system constrains the quality attributes, the decisions taken during architectural design have a large impact on the resulting system. An architectural design method is presented that employs iterative evaluation and transformation of the software architecture in order to satisfy the quality requirements. Architecture evaluation is performed by using scenarios, simulation, mathematical modelling and experience-based reasoning. The architecture can be transformed by imposing an architectural style, imposing an architectural pattern, using a design pattern, converting a quality requirement to functionality and by distributing quality requirements. The method has evolved through its application in several industrial projects.", "num_citations": "206\n", "authors": ["622"]}
{"title": "Object-oriented frameworks: Problems & experiences\n", "abstract": " Reuse of software has been one of the main goals of software engineering for decades. Reusing software is not simple and most efforts resulted in small reusable, black-box components. With the emergence of the object-oriented paradigm, the enabling technology for reuse of larger components became available and resulted in the definition of object-oriented frameworks. Frameworks attracted attention from many researchers and software engineers and frameworks have been defined for a large variety of domains. The claimed advantages of frameworks are, among others, increased reusability and reduced time to market for applications. Although several examples have shown these advantages to exist, there are problems and hindrances associated with frameworks that may not appear before their usage in real projects. The authors have been involved in the design, maintenance and usage of several object-oriented frameworks and based on the experiences from these projects, a number of problems related to frameworks are described. The problems are organised according to four categories, ie framework development, usage, composition and maintenance. For each category, the most relevant problems and experiences are presented. This paper may help software engineers to avoid the described problems, whereas researchers may try to address these topics in their research.", "num_citations": "201\n", "authors": ["622"]}
{"title": "The early stage software startup development model: a framework for operationalizing lean principles in software startups\n", "abstract": " Software startups are more popular than ever and growing in numbers. They operate under conditions of extreme uncertainty and face many challenges. Often, agile development practices and lean principles are suggested as ways to increase the odds of succeeding as a startup, as they both advocate close customer collaboration and short feedback cycles focusing on delivering direct customer value. However, based on an interview study we see that despite guidance and support in terms of well-known and documented development methods, practitioners find it difficult to implement and apply these in practice. To explore this further, and to propose operational support for software startup companies, this study aims at investigating (1) what are the typical challenges when finding a product idea worth scaling, and (2) what solution would serve to address these challenges. To this end, we propose the\u00a0\u2026", "num_citations": "191\n", "authors": ["622"]}
{"title": "Evolution in software product lines: Two cases\n", "abstract": " This paper discuss the results of two case studies from a technical perspective, concentrating on the evolution of software assets in two Swedish organizations that have employed a product\u2010line architecture approach for several years. This paper describes and analyses the commonalities and differences of these two cases, emphasising categories of the evolution of the requirements, of the software architecture and of the software components. This paper concludes with three types of lessons learned about evolution in software product lines: three evolution categories are predominant, three other categories are less significant but still common, and seven guidelines for software product\u2010line evolution emerge. Copyright \u00a9 1999 John Wiley & Sons, Ltd.", "num_citations": "188\n", "authors": ["622"]}
{"title": "Architecture level prediction of software maintenance\n", "abstract": " A method for the prediction of software maintainability during software architecture design is presented. The method takes: the requirement specification; the design of the architecture; expertise from software engineers; and, possibly, historical data as input and generates a prediction of the average effort for a maintenance task. Scenarios are used by the method to concretize the maintainability requirements and to analyze the architecture for the prediction of the maintainability. The method is formulated based on extensive experience in software architecture design and detailed design and exemplified using the design of software architecture for a haemo dialysis machine. Experiments for evaluation and validation of the method are ongoing and future work.", "num_citations": "188\n", "authors": ["622"]}
{"title": "Design Patterns as Language Constucts\n", "abstract": " Design patterns have proven to be very useful for the design of object-oriented systems. The power of design patterns stems from their ability to provide generic solutions to reappearing problems that can be specialised for particular situations. The implementation of design patterns, however, has received only little attention and we have identified four problems associated with the implementation of design patterns using conventional object-oriented languages. First, the traceability of a design pattern in the implementation is often insufficient; often the design pattern is \u2018lost\u2019. Second, since several patterns require an object to forward messages to other objects to increase flexibility, the self problem often occurs. Thirdly, since the pattern implementation is mixed with the domain class, the reusability of pattern implementations is often limited. Finally, implementing design patterns may present significant implementation overhead for the software engineer. Often, a, potentially large, number of simple methods has to be implemented with trivial behaviour, eg forwarding a message to another object. In this paper, a solution to these problems is presented in the context of the layered object model (LayOM). LayOM provides language support for the explicit representation of design patterns in the programming language. LayOM is an extended object-oriented language in that it contains several components that are not part of the conventional object model, such as states, categories and layers. Layers are used to represent design patterns at the level of the programming language and example layer types for eight design patterns are presented, ie Adapter\u00a0\u2026", "num_citations": "187\n", "authors": ["622"]}
{"title": "Social networking meets software development: Perspectives from github, msdn, stack exchange, and topcoder\n", "abstract": " Many successful software companies use social networking as a way to improve the services or products they provide. To gain an understanding of the role social networking plays in today's software development world, the guest editors of the January/February 2013 issue conducted semistructured interviews with leaders from four successful companies: Brian Doll, an engineer who manages GitHub's marketing; Doug Laundry, a principal group program manager at Microsoft; David Fullerton, vice president of engineering at Stack Exchange; and Robert Hughes, the president and chief operating officer of TopCoder. The first Web extra at http://try.github.com is a video of Joel Spolsky discussing the structure, software, technology, and culture of Stack Exchange. The second Web extra at http://blip.tv/play/gvUBgqLbRgI.html is a video of Matthew McCullough and Tim Berglund demonstrating how Git not only\u00a0\u2026", "num_citations": "186\n", "authors": ["622"]}
{"title": "Lineare Algebra\n", "abstract": " Die Lineare Algebra geh\u00f6rt neben der Differential-und Integralrechnung zu den allgemeinen Grundlagen, die in nahezu allen Teilen der Mathematik eine tragende Rolle spielen. Demgem\u00e4\u00df beginnt das Mathematikstudium an Universit\u00e4ten mit einer soliden Ausbildung in diesen beiden Gebieten, meist in zwei getrennten Vorlesungen. Ein zentrales Thema der Linearen Algebra ist das L\u00f6sen linearer Gleichungen bzw. von Systemen solcher Gleichungen. Das sind Beziehungen mittels rationaler Operationen zwischen bekannten Gr\u00f6\u00dfen, den sogenannten Koeffizienten, und den unbekannten Gr\u00f6\u00dfen, die zu bestimmen sind. Linear bedeutet dabei, dass die unbekannten Gr\u00f6\u00dfen separiert und lediglich in erster Potenz vorkommen. Nach der Entdeckung von Koordinaten im anschaulichen Raum durch Descartes konnten lineare Gleichungen auch zur Charakterisierung einfacher geometrischer Objekte wie Geraden\u00a0\u2026", "num_citations": "185\n", "authors": ["622"]}
{"title": "Scenario-based software architecture reengineering\n", "abstract": " The paper presents a method for reengineering software architectures. The method explicitly addresses the quality attributes of the software architecture. Assessment of quality attributes is performed primarily using scenarios. Design transformations are done to improve quality attributes that do not satisfy the requirements. Assessment and design transformation can be performed for several iterations until all requirements are met. To illustrate the method we use the reengineering of a prototypical measurement system into a domain-specific software architecture as an example.", "num_citations": "181\n", "authors": ["622"]}
{"title": "Product-line architectures in industry: a case study\n", "abstract": " In this paper, a case study investigating the experiences from using product-line architectures is presented involving two Swedish companies, Axis Communications AB and Securitas Larm AB. Key persons in these organizations have been interviewed and information has been collected from documents and other sources. The study identified a collection of problems and issues. The identified problems include the amount of required background knowledge, information distribution, the need for multiple versions of assets, dependencies between assets, use of assets in new contexts, documentation, tool support, management support and effort estimation. Issues collected from the case study are the questioned necessity of domain engineering units, business units versus development departments, time-tomarket versus asset quality and common features versus feature superset. For each problem, a problem\u00a0\u2026", "num_citations": "178\n", "authors": ["622"]}
{"title": "User involvement throughout the innovation process in high\u2010tech industries\n", "abstract": " The feedback and input of users have been an important part of product innovation in recent years. User input has been studied from different approaches and is applied through different methods in particular phases of the innovation process. However, these methods are not integrated into the whole innovation process and are used only in particular phases or on an ad hoc basis. New developments in technology, social media, and new ways of working closer with customers have opened up new possibilities for firms to gain user input throughout the whole innovation process. However, the impact that these new developments in technology offer for user input innovation in high\u2010tech firms is unclear. Therefore, we study how high\u2010tech firms collect and apply user feedback throughout the whole innovation process. The paper is based on a comparative case study of eight cases in the high\u2010tech industry, in which\u00a0\u2026", "num_citations": "166\n", "authors": ["622"]}
{"title": "Software product lines: organizational alternatives\n", "abstract": " Software product lines are enjoying increasingly wide adoption in the software industry. Most authors focus on the technical and process aspects, and assume an organizational model consisting of a domain engineering unit and several application engineering units. In our cooperation with several software development organizations applying software product-line principles, we have identified several other organizational models that are employed as well. In this article, we present a number of organizational alternatives, organized around four main models, viz. a development department, business units, domain engineering unit and hierarchical domain engineering units. For each model, its characteristics, applicability, advantages and disadvantages are discussed, as well as an example. Based on an analysis of these models, we present three factors that influence the choice of the organizational model, viz\u00a0\u2026", "num_citations": "160\n", "authors": ["622"]}
{"title": "Software product family evaluation\n", "abstract": " This paper proposes a four-dimensional evaluation framework for software product family engineering. The four dimensions relate to the software engineering concerns of business, architecture, organisation, and process. The evaluation framework is intended for use within software developing organisations to determine the status of their own software product family engineering and the priorities for improving. The results of the evaluation can be used for benchmarking, roadmapping, and developing improvement plans. An initial evaluation of a real industrial case is presented to show the validity of the framework.", "num_citations": "157\n", "authors": ["622"]}
{"title": "Experiences in software product families: Problems and issues during product derivation\n", "abstract": " A fundamental reason for investing in product families is to minimize the application engineering costs. Several organizations that employ product families, however, are becoming increasingly aware of the fact that, despite the efforts in domain engineering, deriving individual products from their shared software assets is a time- and effort-consuming activity. In this paper, we present a collection of product derivation problems that we identified during a case study at two large and mature industrial organizations. These problems are attributed to the lack of methodological support for application engineering, and to underlying causes of complexity and implicit properties. For each problem, we provide a description and an example, while for each cause we present a description, consequences, solutions, and research issues. The discussions in this paper are relevant outside the context of the two companies, as\u00a0\u2026", "num_citations": "155\n", "authors": ["622"]}
{"title": "Continuous software engineering: An introduction\n", "abstract": " Software-intensive industries are experiencing an unprecedented evolution of, among others, business models, architectures, ways of working, tooling, and deployment. This transformation allows companies to respond much quicker to changes in the market and to build solutions that much more accurately align with customer needs. The Nordic software-intensive systems industry recognized this challenge and partnered with academia to form the Software Center. The role of the Software Center is to significantly accelerate the rate of adoption of these new approaches at the partner organizations. In this chapter, we discuss the industry trends, introduce the Software Center, and provide an overview of the remainder of the book. This book presents the core results of the first phase (2011\u20132013) of the Software Center.", "num_citations": "133\n", "authors": ["622"]}
{"title": "Design, implementation and evolution of object oriented frameworks: concepts and guidelines\n", "abstract": " Object\u2010oriented frameworks provide software developers with the means to build an infrastructure for their applications. Unfortunately, frameworks do not always deliver on their promises of reusability and flexibility. To address this, we have developed a conceptual model for frameworks and a set of guidelines to build object oriented frameworks that adhere to this model. Our guidelines focus on improving the flexibility, reusability and usability (i.e. making it easy to use a framework) of frameworks. Copyright \u00a9 2001 John Wiley & Sons, Ltd.", "num_citations": "133\n", "authors": ["622"]}
{"title": "Framework integration problems, causes, solutions\n", "abstract": " Inversion of control. A distinguishing feature of frameworks is their ability to extensively use dynamic binding. As a result, the framework code has a single thread of control and calls the application code as needed. This single-thread-of-control phenomenon is sometimes called the \u201cHollywood principle,\u201d or \u201cdon\u2019t call us, we\u2019ll call you\u201d and \u201cflip-flop of control.\u201d The inversion of control occurs when two or more frameworks call the application code simultaneously, each assuming ownership of the application\u2019s main event loop. The complexity of this problem increases along with the increasing number of frameworks that have to be integrated in the application.For example, consider the composition of a measurement system framework [1, 5] and a GUI framework. From the moment a trigger enters the system, the measurement system framework has a well-defined control loop that has to be performed in real time, in turn\u00a0\u2026", "num_citations": "133\n", "authors": ["622"]}
{"title": "Design decisions: The bridge between rationale and architecture\n", "abstract": " Software architecture can be seen as a decision making process; it involves making the right decisions at the right time. Typically, these design decisions are not explicitly represented in the artifacts describing the design. They reside in the minds of the designers and are t herefore easily lost. Rationale management is often proposed as a solution, but lacks a close relationship with software architecture artifacts. Explicit modeling of design decisions in the software architecture bridges this gap, as it allows for a close integration of rationale management with software architecture. This improves the understandability of the software architecture. Consequently, the software architecture becomes easier to communicate, maintain, and evo lve. Furthermore, it allows for analysis, improvement, and reuse of design decisions in the design process.", "num_citations": "131\n", "authors": ["622"]}
{"title": "Building products as innovation experiment systems\n", "abstract": " Traditional software development focuses on specifying and freezing requirements early in the, typically yearly, product development lifecycle. The requirements are defined based on product management\u2019s best understanding. The adoption of SaaS and cloud computing has shown a different approach to managing requirements, adding frequent and rigorous experimentation to the development process with the intent of minimizing R&D investment between customer proof points. This offers several benefits including increased customer satisfaction, improved and quantified business goals and the transformation to a continuous rather than waterfall development process. In this paper, we present our learnings from studying software companies applying an innovation experiment system approach to product development. The approach is illustrated with three cases from Intuit, the case study company.", "num_citations": "126\n", "authors": ["622"]}
{"title": "Speed, data, and ecosystems: the future of software engineering\n", "abstract": " An evaluation of recent industrial and societal trends revealed three key factors driving software engineering's future: speed, data, and ecosystems. These factors' implications have led to guidelines for companies to evolve their software engineering practices. This article is part of a special issue on the Future of Software Engineering.", "num_citations": "120\n", "authors": ["622"]}
{"title": "Representing variability in software product lines: A case study\n", "abstract": " Variability is the ability to change or customize a software system (i.e., software architects anticipate change and design architectures that support those changes). If the architecture is used for different product versions (e.g., in a software product line context, it becomes important to understand where change has to be planned and the possible options in particular situations. Three variability issues have been identified in a case study involving a software company specializing in product and system development for a professional mobile communication infrastructure. These issues are discussed and analyzed and illustrate the need for handling variability in a more explicit manner. To address this need, this paper suggests a method to represent and normalize variability in industrial software systems. The method is exemplified by applying it to the software product line of the aforementioned company.", "num_citations": "111\n", "authors": ["622"]}
{"title": "Fusion of dipalmitoylphosphatidylcholine vesicle membranes induced by concanavalin A\n", "abstract": " The temperature dependence of fatty acid spin label resonance spectra and freeze fracture micrographs of sonicated dipalmitoylphosphatidylcholine vesicles in the absence and presence of concanavalin A demonstrate a strong interaction of concanavalin A with these lipid membranes, which results in fusion of the vesicles. The rate of this reaction as followed with use of magnetic resonance exhibits a pronounced maximum at 36 degrees, the midpoint of the phase transition range of dipalmitoylphosphatidylcholine vesicles. This maximum is discussed in terms of structural fluctuations, which are maximal in the phase transition range of the membranes.", "num_citations": "110\n", "authors": ["622"]}
{"title": "A framework for capturing the relationship between usability and software architecture\n", "abstract": " Usability is increasingly recognized as an essential factor that determines the success of software systems. Practice shows that for current software systems, most usability issues are detected during testing and deployment. Fixing usability issues during this late stage of the development proves to be very costly. Some usability\u2010improving modifications such as usability patterns may have architectural implications. We believe that the software architecture may restrict usability. The high costs associated with fixing usability issues during late\u2010stage development prevent developers from making the necessary adjustments for meeting all the usability requirements. To improve upon this situation, we have investigated the relationship between usability and software architecture to gain a better understanding of how the architecture restricts the level of usability. Our article makes a number of contributions; a framework is\u00a0\u2026", "num_citations": "109\n", "authors": ["622"]}
{"title": "Issues concerning variability in software product lines\n", "abstract": " Product-line architectures, i.e. a software architecture and component set shared by a family of products, represents a promising approach to achieving reuse of software. Several companies are initiating or have recently adopted a product-line architecture. However, little experience is available with respect to the evolution of the products, the software components and the software architecture. Due to the higher level of interdependency between the various software assets, software evolution is a more complex process. In this paper we discuss issues regarding variability that may help or cause problems when designing solutions for managing variability.", "num_citations": "109\n", "authors": ["622"]}
{"title": "From opinions to data-driven software r&d: A multi-case study on how to close the'open loop'problem\n", "abstract": " In most software development companies the road mapping and requirements prioritization process is a complex process in which product management experiences difficulties in getting timely and accurate customer feedback. The feedback loop from customers is slow and often there is a lack of mechanisms that allow for efficient customer data collection and analysis. As a result, there is the risk that requirements prioritization becomes opinion-based rather than data-driven, and that R&D investments are made without an accurate way of continuously validating whether they correspond to customer needs. We call this phenomenon the 'open loop' problem, referring to the challenges for product management to get accurate and timely feedback from customers. To address this problem, we develop the HYPEX model (Hypothesis Experiment Data-Driven Development) that supports companies in running feature\u00a0\u2026", "num_citations": "107\n", "authors": ["622"]}
{"title": "Bridging patterns: An approach to bridge gaps between SE and HCI\n", "abstract": " Adding usability improving solutions during late stage development is to some extent restricted by the software architecture. However, few software engineers and human\u2013computer interaction engineers are aware of this important constraint and as a result avoidable rework is frequently necessary. In this paper we present a new type of pattern called a bridging pattern. Bridging patterns extend interaction design patterns by adding information on how to generally implement this pattern. Bridging patterns can be used for architectural analysis: when the generic implementation is known, software architects can assess what it means in their context and can decide whether they need to modify the software architecture to support these patterns. This may prevent part of the high costs incurred by adaptive maintenance activities once the system has been implemented and leads to architectures with better support for\u00a0\u2026", "num_citations": "107\n", "authors": ["622"]}
{"title": "The evolution of continuous experimentation in software product development: from data to a data-driven organization at scale\n", "abstract": " Software development companies are increasingly aiming to become data-driven by trying to continuously experiment with the products used by their customers. Although familiar with the competitive edge that the A/B testing technology delivers, they seldom succeed in evolving and adopting the methodology. In this paper, and based on an exhaustive and collaborative case study research in a large software-intense company with highly developed experimentation culture, we present the evolution process of moving from ad-hoc customer data analysis towards continuous controlled experimentation at scale. Our main contribution is the \"Experimentation Evolution Model\" in which we detail three phases of evolution: technical, organizational and business evolution. With our contribution, we aim to provide guidance to practitioners on how to develop and scale continuous experimentation in software organizations\u00a0\u2026", "num_citations": "105\n", "authors": ["622"]}
{"title": "Software architecture analysis of usability\n", "abstract": " Studies of software engineering projects show that a large number of usability related change requests are made after its deployment. Fixing usability problems during the later stages of development often proves to be costly, since many of the necessary changes require changes to the system that cannot be easily accommodated by its software architecture. These high costs prevent developers from meeting all the usability requirements, resulting in systems with less than optimal usability. The successful development of a usable software system therefore must include creating a software architecture that supports the right level of usability. Unfortunately, no documented evidence exists of architecture level assessment techniques focusing on usability. To support software architects in creating a software architecture that supports usability, we present a scenario based assessment technique that has been\u00a0\u2026", "num_citations": "104\n", "authors": ["622"]}
{"title": "Experiences with ALMA: architecture-level modifiability analysis\n", "abstract": " Modifiability is an important quality for software systems, because a large part of the costs associated with these systems is spent on modifications. The effort, and therefore cost, that is required for these modifications is largely determined by a system's software architecture. Analysis of software architectures is therefore an important technique to achieve modifiability and reduce maintenance costs. However, few techniques for software architecture analysis currently exist. Based on our experiences with software architecture analysis of modifiability, we have developed ALMA, an architecture-level modifiability analysis method consisting of five steps. In this paper we report on our experiences with ALMA. We illustrate our experiences with examples from two case studies of software architecture analysis of modifiability. These case studies concern a system for mobile positioning at Ericsson Software Technology AB\u00a0\u2026", "num_citations": "101\n", "authors": ["622"]}
{"title": "Architecture challenges for software ecosystems\n", "abstract": " Successful software products and product lines exhibit a force of gravity that attracts external developers. The organization developing the product actively seeks to involve external developers to add functionality to the system. On the other hand, external developers flock to a successful product as it provides an established market where underserved niches provide a business opportunity for these players. The product or product line evolves into a platform for external developers. This causes several software architecture challenges for a software ecosystem, including interface stability, evolution management, guaranteeing security and reliability and composition of independently developed functionality. The paper describes these challenges, discusses practical solutions and identifies research challenges.", "num_citations": "98\n", "authors": ["622"]}
{"title": "Widening the scope of software product lines\u2014from variation to composition\n", "abstract": " Architecture, components and reuse form the key elements to build a large variety of complex, high-quality products with a short lead-time. But the balance between an architecture-driven and a component-driven approach is influenced by the scope of the product line and the characteristics of the development organization. This paper discusses that balance and claims that a paradigm shift from variation to composition is necessary to cope with an increasing diversity of products created by an ever-larger part of an organization. We illustrate our claim with various examples.", "num_citations": "94\n", "authors": ["622"]}
{"title": "Framework composition: Problems, causes and solutions\n", "abstract": " Reuse of software has been one of the main goals of software engineering for decades. With the emergence of the object-oriented paradigm, an important enabling technology for reuse of larger components became available and resulted in the definition of object-oriented frameworks. The authors', and others', experiences with frameworks have shown that frameworks indeed provide considerable reuse in framework-based application development. However, whereas framework-based application development initially included a single framework, increasingly often multiple frameworks are used in application development. These frameworks have to be composed, but the software engineer may experience a number of problems while doing this, related to (1) composition of framework control, (2) composition with legacy components, (3) framework gap, (4) overlap of framework entities, and (5) composition of\u00a0\u2026", "num_citations": "90\n", "authors": ["622"]}
{"title": "Software engineering challenges of deep learning\n", "abstract": " Surprisingly promising results have been achieved by deep learning (DL) systems in recent years. Many of these achievements have been reached in academic settings, or by large technology companies with highly skilled research groups and advanced supporting infrastructure. For companies without large research groups or advanced infrastructure, building high-quality production-ready systems with DL components has proven challenging. There is a clear lack of well-functioning tools and best practices for building DL systems. It is the goal of this research to identify what the main challenges are, by applying an interpretive research approach in close collaboration with companies of varying size and type. A set of seven projects have been selected to describe the potential with this new technology and to identify associated main challenges. A set of 12 main challenges has been identified and categorized into\u00a0\u2026", "num_citations": "89\n", "authors": ["622"]}
{"title": "Customer feedback and data collection techniques in software R&D: a literature review\n", "abstract": " In many companies, product management struggles in getting accurate customer feedback. Often, validation and confirmation of functionality with customers takes place only after the product has been deployed, and there are no mechanisms that help product managers to continuously learn from customers. Although there are techniques available for collecting customer feedback, these are typically not applied as part of a continuous feedback loop. As a result, the selection and prioritization of features becomes far from optimal, and product deviates from what the customers need. In this paper, we present a literature review of currently recognized techniques for collecting customer feedback. We develop a model in which we categorize the techniques according to their characteristics. The purpose of this literature review is to provide an overview of current software engineering research in this area and to\u00a0\u2026", "num_citations": "84\n", "authors": ["622"]}
{"title": "On the implementation of finite state machines\n", "abstract": " Finite State Machines (FSM) provide a powerful way to describe dynamic behavior of systems and components. However, the implementation of FSMs in OO languages, often suffers from maintenance problems. The State pattern described in [1] that is commonly used to implement FSMs in OO languages, also suffers from these problems. To address this issue we present an alternative approach. In addition to that a blackbox framework is presented that implements this approach. In addition to that a tool is presented that automates the configuration of our framework. The tool effectively enables developers to create FSMs from a specification.", "num_citations": "78\n", "authors": ["622"]}
{"title": "Towards continuous customer validation: A conceptual model for combining qualitative customer feedback with quantitative customer observation\n", "abstract": " Software-intensive product companies are becoming increasingly data-driven as can be witnessed by the big data and Internet of Things trends. However, optimally prioritizing customer needs in a mass-market context is notoriously difficult. While most companies use product owners or managers to represent the customer, research shows that the prioritization made is far from optimal. In earlier research, we have coined the term \u2018the open loop problem\u2019 to characterize this challenge. For instance, research shows that up to half of all the features in products are never used. This paper presents a conceptual model that emphasizes the need for combining qualitative feedback in early stages of development with quantitative customer observation in later stages of development. Our model is inductively derived from an 18 months close collaboration with six large global software-intensive companies.", "num_citations": "77\n", "authors": ["622"]}
{"title": "Modeling dependencies in product families with COVAMOF\n", "abstract": " Many variability modeling approaches consider only formalized dependencies, i.e. in- or exclude relations between variants. However, in real industrial product families, dependencies are often much more complicated. In this paper, we discuss the product derivation problems associated with dependencies, and show how our variability modeling framework COVAMOF addresses these issues. Throughout the paper, we use examples of Intrada, an intelligent traffic systems family of Dacolian B.V", "num_citations": "69\n", "authors": ["622"]}
{"title": "Experienced benefits of continuous integration in industry software product development: A case study\n", "abstract": " In this paper, we present a multi-case study of industrial experiences of continuous integration among software professionals working in large scale development projects. In literature, multiple benefits of continuous integration are suggested, but case studies validating these benefits are lacking. This study investigates the extent to which continuous integration effects\u2013increased developer productivity, increased project predictability, improved communication and enabling agile testing\u2013suggested in literature are experienced in industry development projects. The study involves four independent products at different levels of continuous integration maturity within Ericsson AB. In each of these products developers, testers, project managers and line managers have been interviewed. Their experiences of continuous integration are quantitatively assessed and discussed in comparison to the continuous integration benefits proposed in related work.", "num_citations": "68\n", "authors": ["622"]}
{"title": "Model driven architecture as approach to manage variability in software product families\n", "abstract": " In this paper we portrait Model Driven Architecture (MDA) as an approach to derive products in a particular class of software product families, ie a configurable product family. The main contribution of this paper is that we relate MDA to a configurable software product family and discuss the mutual benefits of this relation. With respect to variability management, we identify two main benefits of applying MDA to product family engineering, ie postponing binding time and mechanism selection to application engineering, and the independent evolution of domain concepts, product family assets and the transformation technique. In addition, we identify variability management as a solution to the problem of round-trip transformation in MDA.", "num_citations": "68\n", "authors": ["622"]}
{"title": "Softwares product lines, global development and ecosystems: Collaboration in software engineering\n", "abstract": " Effective collaboration in software engineering is very important and yet increasingly complicated by trends that increase complexity of dependencies between software development teams and organizations. These trends include the increasing adoption of software product lines, the globalization of software engineering and the increasing use of and reliance on 3rd party developers in the context of software ecosystems. Based on action research, the paper discusses problems of in effective collaboration and success-factors of five approaches to collaboration in large-scale software engineering.", "num_citations": "65\n", "authors": ["622"]}
{"title": "Speed, data, and ecosystems: Excelling in a software-driven world\n", "abstract": " As software R&D investment increases, the benefits from short feedback cycles using technologies such as continuous deployment, experimentation-based development, and multidisciplinary teams require a fundamentally different strategy and process. This book will cover the three overall challenges that companies are grappling with: speed, data and ecosystems. Speed deals with shortening the cycle time in R&D. Data deals with increasing the use of and benefit from the massive amounts of data that companies collect. Ecosystems address the transition of companies from being internally focused to being ecosystem oriented by analyzing what the company is uniquely good at and where it adds value.", "num_citations": "63\n", "authors": ["622"]}
{"title": "Introducing agile customer\u2010centered development in a legacy software product line\n", "abstract": " The ability to rapidly respond to customer interest and to effectively prioritize development effort has been a long\u2010standing challenge for mass\u2010market software intensive products. This problem is exacerbated in the context of software product lines as functionality may easily fall over software asset and organizational boundaries with consequent losses in efficiency and nimbleness. Some companies facing these problems in their product line respond with a new development process. In this paper we discuss the developments within a single case study, Intuit's Quickbooks product line that combined agile software development, design thinking and self\u2010organizing teams in a successful approach, which provided a significant improvement in terms of responsiveness and accuracy of building customer value. Copyright \u00a9 2011 John Wiley & Sons, Ltd.", "num_citations": "62\n", "authors": ["622"]}
{"title": "Adapting object-oriented components\n", "abstract": " component-based software development is one of the more promising approaches to reuse existing software. However, \u201cas-is\u201d reuse seldomly occurs and reusable components generally need to be adapted. Component adaptation techniques should be transparent, black-box, composable, configurable, reusable and efficient to use. Unfortunately, existing component do not these requirements. To address this, this paper discusses superimposition, a black-box adaptation technique that allows one to impose predefined, but configurable types of adaptation functionality on a reusable component. In addition, three categories of typical adaptation types are discussed, related to the component interface, component composition and monitoring.", "num_citations": "62\n", "authors": ["622"]}
{"title": "Architecture for embedded open software ecosystems\n", "abstract": " Software is prevalent in embedded products and may be critical for the success of the products, but manufacturers may view software as a necessary evil rather than as a key strategic opportunity and business differentiator. One of the reasons for this can be extensive supplier and subcontractor relationships and the cost, effort or unpredictability of the deliverables from the subcontractors are experienced as a major problem.The paper proposes open software ecosystem as an alternative approach to develop software for embedded systems, and elaborates on the necessary quality attributes of an embedded platform underlying such an ecosystem. The paper then defines a reference architecture consisting of 17 key decisions together with four architectural patterns, and provides the rationale why they are essential for an open software ecosystem platform for embedded systems in general and automotive systems in\u00a0\u2026", "num_citations": "61\n", "authors": ["622"]}
{"title": "Usability patterns in software architecture\n", "abstract": " Over the years the software engineering community has increasingly realized the important role Software architecture plays in fulfilling the quality requirements of a system. Practice shows that for current software systems, most usability issues are still only detected during testing and deployment. To improve the usability of a software system, usability patterns can be applied. However, too often software systems prove to be inflexible towards such modifications which lead to potentially prohibitively high costs for implementing them afterwards. The reason for this shortcoming is that the software architecture of a system restricts certain usability patterns from being implemented after implementation. Several of these usability patterns are \u201carchitecture Sensitive\u201d, such modifications are costly to implement due through their structural impact on the system. Our research has identified several usability patterns that require architectural support. We argue the importance of the relation between usability and software architecture. Software engineers and usability engineers should be aware of the importance of this relation. The framework which illustrates this relation can be used as a source to inform architecture design for usability.", "num_citations": "61\n", "authors": ["622"]}
{"title": "Evolution and composition of reusable assets in product-line architectures: A case study\n", "abstract": " In this paper, a case study investigating the experiences from evolution and modification of reusable assets in product-line architectures is presented involving two Swedish companies, Axis Communications AB and Securitas Larm AB. Key persons in these organisations have been interviewed and information has been collected from documents and other sources. The study identified problems related to multiple versions of reusable assets, dependencies between assets and the use of assets in new contexts. The problem causes have been identified and analysed, including the early intertwining of functionality, the organizational model, the time to market pressure, the lack of economic models and the lack of encapsulation boundaries and required interfaces.", "num_citations": "61\n", "authors": ["622"]}
{"title": "Analyzing software architectures for modifiability\n", "abstract": " Several studies have shown that 50% to 70% of the total lifecycle cost for a software system is spent on evolving the system. Since incorporating anticipated changes generally requires considerably less effort than unanticipated changes, it is important to prepare a software system for likely changes during development. The software architecture plays an important role in achieving this, but few methods for modifiability analysis exist. In this paper, we propose an analysis method for software architecture modifiability that has successfully been applied in several cases. The method consists of five main steps, ie goal selection, software architecture description, scenario elicitation, scenario evaluation and interpretation.", "num_citations": "60\n", "authors": ["622"]}
{"title": "Towards data-driven product development: A multiple case study on post-deployment data usage in software-intensive embedded systems\n", "abstract": " Today, products within telecommunication, transportation, consumer electronics, home automation, security etc. involve an increasing amount of software. As a result, organizations that have a tradition within hardware development are transforming to become software-intensive organizations. This implies products where software constitutes the majority of functionality, costs, future investments, and potential. While this shift poses a number of challenges, it brings with it opportunities as well. One of these opportunities is to collect product data in order to learn about product use, to inform product management decisions, and for improving already deployed products. In this paper, we focus on the opportunity to use post-deployment data, i.e. data that is generated while products are used, as a basis for product improvement and new product development. We do so by studying three software development\u00a0\u2026", "num_citations": "59\n", "authors": ["622"]}
{"title": "Scenario-based Assessment of Software Architecture Usability.\n", "abstract": " Over the years the software engineering community has increasingly realized the important role software architecture plays in fulfilling the quality requirements of a system. The quality attributes of a software system are, to a large extent determined by the system\u2019s software architecture. Usability is an essential part of software quality. The usability of software has traditionally been evaluated on completed systems. Evaluating usability at completion introduces a great risk of wasting effort on software products that are not usable. A scenario based assessment approach has proven to be successful for assessing quality attributes such as modifiability and maintainability [12]. It is our conjecture that scenario based assessment can also be applied for usability assessment. This paper presents and describes a scenario based assessment method to evaluate whether a given software architecture (provided usability) meets the usability requirements (required usability). The Scenariobased Architecture Level UsabiliTy Assessment (SALUTA) method consists of five main steps, goal selection, usage profile creation, software architecture description, scenario evaluation and interpretation", "num_citations": "59\n", "authors": ["622"]}
{"title": "Design and Use of Industrial Software Architectures.\n", "abstract": " In the previous chapter, a first version of some software architectures, based on the functional requirements, was designed. In order to decide whether these architecture fulfil their quality requirements as well, the architectures needs to be assessed. In this chapter we discuss a number of different approaches to architecture evaluation that we have experienced as being useful. These techniques are illustrated using the example architectures presented in the previous chapter.", "num_citations": "58\n", "authors": ["622"]}
{"title": "Quality attributes in software architecture design\n", "abstract": " Quality attributes of large software systems are to a large extent determined the system\u2019s software architecture, ie qualities such as performance and modifiability depend at least as much on the overall architecture as on the code level implementation. Our experience shows that there are conflicts between modifiability and performance. The largest conflicts occur when there is a requirement that it should be possible to modify the system by run-time reconfigurations. Consequently, there is a need for providing tradeoffs between modifiability and performance when designing the system\u2019s architecture. Based on experiences from five industrial projects we define eight design guidelines and a small taxonomy for some performance related quality attributes as well as for attributes related to the modifiability of the system. We also incorporate the guidelines in a design method, thus making it clear how and when the guidelines should be used.", "num_citations": "57\n", "authors": ["622"]}
{"title": "Towards R&D as innovation experiment systems: A framework for moving beyond agile software development\n", "abstract": " In focusing on flexibility, efficiency and speed, agile development practices have lead to a paradigm shift in how software is developed. However, while agile practices have indeed proven to be successful these are not the final step of software development. There is a \u201cbeyond agile\u201d in which software development companies can capitalize even more on customer contributions and where customer feedback is the main driver for innovation. In this paper, we present a multiple-case study where we explore five software development companies moving from agile towards continuous deployment of software and a future in which R&D works as an \u2018innovation experiment system\u2019. Based on a qualitative interview study, we present benefits and barriers when moving towards R&D as an innovation experiment system. Also, we present a framework in which we identify key initiatives that companies deploy in order to evolve\u00a0\u2026", "num_citations": "55\n", "authors": ["622"]}
{"title": "Object-oriented framework-based software development: problems and experiences\n", "abstract": " The claimed advantages of object-orien ted frameworks are, among others, increased reusability and reduced time to market for applications. Although several examples have shown these advantages to exist, there are problems and hindrances associated with frameworks that may not appear before their usage in real projects. In this paper a num ber of problems related to frameworks are described organised according to four categories, ie framework dev elopment, usage, composition and maintenance. For each category, the most relevant problems and experiences are presented.", "num_citations": "55\n", "authors": ["622"]}
{"title": "Design of an object-oriented framework for measurement systems\n", "abstract": " Measurement systems are of increasing importance for manufacturing, due to high automation level of production processes. Although most measurement systems have much in common and are expensive to construct, these systems are often developed from scratch, hardly reusing the available designs and implementations. To address this, we have designed and implemented an object-oriented framework for the domain of measurement systems that can be used as the core of measurement systems. Although the framework has not been through so many iterations, evaluations of it show that it captures the main concepts in the domain and that the required extensions for individual applications are limited. In this paper, a number of example framework instantiations are presented. The lessons we learned during the framework design and an evaluation of the object-oriented modelling paradigm are presented.", "num_citations": "55\n", "authors": ["622"]}
{"title": "Assessing optimal software architecture maintainability\n", "abstract": " Over the last decade, several authors have studied the maintainability of software architectures. In particular, the assessment of maintainability has received attention. However, even when one has a quantitative assessment of the maintainability of a software architecture, one still does not have any indication of the optimality of the software architecture with respect to this quality attribute. Typically, the software architect is supposed to judge the assessment result based on his or her personal experience. In this paper, we propose a technique for analysing the optimal maintainability of a software architecture based on a specified scenario profile. This technique allows software architects to analyse the maintainability of their software architecture with respect to the optimal maintainability. The technique is illustrated and evaluated using industrial cases.", "num_citations": "54\n", "authors": ["622"]}
{"title": "The challenges of broadening the scope of software product families\n", "abstract": " Addressing the challenges involved in broadening the scope of software product families.", "num_citations": "53\n", "authors": ["622"]}
{"title": "Software product families in Nokia\n", "abstract": " The level of software development and maintenance investment in embedded products has increased considerably over the last decade. As software product families are providing a proven approach to managing the cost and quality of software artefacts, Nokia has exploited this approach to software development for many years. This paper presents some lessons learned and the key challenges for the successful use and evolution of software artefacts.", "num_citations": "53\n", "authors": ["622"]}
{"title": "Eternal embedded software: Towards innovation experiment systems\n", "abstract": " The paper discusses the concept of innovation experiment systems in the context of long-lived embedded systems. These systems need to evolve continuously to stay competitive and provide value to the customer and end-user, especially in domains where the pace of change is increasing.               Innovation experiment systems provide a natural mechanism that allows an embedded system, its architecture and underlying platform to continuously evolve in response to changes in the user requirements and system context. It uses a rapid feedback loop to evaluate the benefits of small variations to users with the intent of continuous improvements.               The paper explores the architectural implications as the ability to continuously evolve and conduct experiences in the deployed product context in a safe and controlled manner must be supported by the architecture of the embedded systems.               Finally\u00a0\u2026", "num_citations": "52\n", "authors": ["622"]}
{"title": "The benefits of controlled experimentation at scale\n", "abstract": " Online controlled experiments (for example A/B tests) are increasingly being performed to guide product development and accelerate innovation in online software product companies. The benefits of controlled experiments have been shown in many cases with incremental product improvement as the objective. In this paper, we demonstrate that the value of controlled experimentation at scale extends beyond this recognized scenario. Based on an exhaustive and collaborative case study in a large software-intensive company with highly developed experimentation culture, we inductively derive the benefits of controlled experimentation. The contribution of our paper is twofold. First, we present a comprehensive list of benefits and illustrate our findings with five case examples of controlled experiments conducted at Microsoft. Second, we provide guidance on how to achieve each of the benefits. With our work, we aim\u00a0\u2026", "num_citations": "51\n", "authors": ["622"]}
{"title": "Software ecosystems: Taking software development beyond the boundaries of the organization\n", "abstract": " Software ecosystems: Taking software development beyond the boundaries of the organization: Journal of Systems and Software: Vol 85, No 7 ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Journal of Systems and Software Periodical Home Latest Issue Archive Authors Affiliations Award Winners More HomeBrowse by TitlePeriodicalsJournal of Systems and SoftwareVol. , No. Software ecosystems: Taking software development beyond the boundaries of the organization article Software ecosystems: Taking software development beyond the boundaries of the organization Share on Author: Jan Bosch Chalmers University of Technology, Gothenburg, Sweden Chalmers University of Technology, \u2026", "num_citations": "51\n", "authors": ["622"]}
{"title": "Software variability management\n", "abstract": " During recent years, the amount of variability that has to be supported by a software artefact is growing considerably and its management is evolving into a major challenge during development, usage, and evolution of software artefacts. Successful management of variability in software leads to better customizable software products that are in turn likely to result in higher market success. The aim of this paper is to present software variability management both from a 'problems' and from a 'solutions' perspective by discussing experiences from industrial practice and from applied research in academia. Issues that are addressed include, but are not limited to, technological, process, and organizational aspects as well as notation, assessment, design, and evolution aspects.", "num_citations": "51\n", "authors": ["622"]}
{"title": "The HYPEX model: from opinions to data-driven software development\n", "abstract": " While innovation, such as development of new features, is critical for any organization, it is hard to get right. In both our case companies, the selection of ideas is usually driven by previous experiences, and very often the process becomes politicized and based on peoples\u2019 opinions. To address this, we present the Hypothesis Experiment Data-Driven Development (HYPEX) model. Our model is an alternative development process that helps companies shorten the feedback loop to customers. The model supports companies in running feature experiments and advocates development of small parts of features that are continuously evaluated with customers. In our study we validate the model in two software development companies. Although the companies involved in the study have not yet completed a full experiment cycle, we see that feature experiments are beneficial for improving at least four activities\u00a0\u2026", "num_citations": "48\n", "authors": ["622"]}
{"title": "Variability assessment in software product families\n", "abstract": " Software variability management is a key factor in the success of software systems and software product families. An important aspect of software variability management is the evolution of variability in response to changing markets, business needs, and advances in technology. To be able to determine whether, when, and how variability should evolve, we have developed the COVAMOF software variability assessment method (COSVAM). The contribution of COSVAM is that it is a novel, and industry-strength assessment process that addresses the issues that are associated to the current variability assessment practice. In this paper, we present the successful validation of COSVAM in an industrial software product family.", "num_citations": "48\n", "authors": ["622"]}
{"title": "Managing variability in software product lines\n", "abstract": " Software Product Lines are large systems intended for reuse in concrete products. As such these large systems provide reusable architecture and implementation that the individual products have in common. The differences between the product are left open. We refer to these open spots as variability points. In this article we provide a conceptual framework of terminology for the concept of variability and we discuss how variability can be managed in Software Product Lines.", "num_citations": "48\n", "authors": ["622"]}
{"title": "Characterizing stability in evolving frameworks\n", "abstract": " Object-oriented application frameworks present one of the most successful approaches to developing reusable assets in industry, but developing frameworks is both difficult and expensive. Frameworks generally evolve through a number of iterations due to the incorporation of new requirements and better domain understanding. Since changes to frameworks have a large impact on the applications build based on the asset, it is important to assess the stability of a framework. Recently, an approach for assessing framework stability has been proposed. We have extended and applied the assessment approach on one proprietary telecommunication framework and two commercial GUI application frameworks. Based on our findings we formulate a set of hypotheses, which characterize the stability of an object-oriented application framework. We believe these hypotheses to be the most promising ones for further\u00a0\u2026", "num_citations": "47\n", "authors": ["622"]}
{"title": "Continuous practices and devops: beyond the buzz, what does it all mean?\n", "abstract": " DevOps and continuous practices are attracting steadily growing attention by both practitioners and researchers in the software engineering community. The terms are often used inconsistently, interchangeably and with unclear meaning, however. Taking the position that this ambiguity and miscommunication renders the community great harm, in that it impedes our ability to critically appraise these practices, their effects and interplay between them, we analyze how published literature on both continuous practices and DevOps treat the terms. Based on this analysis, along with statements by often cited sources in the community as well as personal experience from researching and practicing these concepts, we propose guidelines to help authors reduce ambiguity in their publications. Additionally, definitions designed to reflect mainstream interpretation while disentangling the terms from one another are presented.", "num_citations": "46\n", "authors": ["622"]}
{"title": "Representing variability in a family of MRI scanners\n", "abstract": " Promoting software reuse is probably the most promising approach to the cost\u2010effective development and evolution of quality software. An example of reuse is the successful adoption of software product families in industry. In a product family context, software architects anticipate product variation and design architectures that support product derivation in both space (multiple contexts) and time (changing contexts). Product derivation is based on the concept of variability: a single architecture and a set of components support a family of products. Modern software product families need to support increasing amounts of variability, leading to a situation where variability engineering becomes of primary concern. Variability is often introduced as an \u2018add\u2010on\u2019 to the system without taking the consequences for more than one lifecycle phase such as design or architecture into account. This paper (1) suggests a Variability\u00a0\u2026", "num_citations": "46\n", "authors": ["622"]}
{"title": "Language support for design patterns\n", "abstract": " Design patterns have proven to be useful for the design of object-oriented systems. The power of a design pattern lies in its ability to provide generic solutions that can be specialised for particular situations. The implementation of design patterns has received only little attention and we have identified two relevant problems associated with the implementation. First, the traceability of a design pattern in the implementation is often insufficient; often the design pattern is \u2018lost\u2019. Second, implementing design patterns may present significant implementation overhead for the software engineer. Often, a, potentially large, number of simple methods has to be implemented with trivial behaviour, eg forwarding a message to another object. In this paper, the layered object model (LayOM) is presented. LayOM provides language support for the explicit representation of design patterns in the programming language. LayOM is an extended object-oriented language in that it contains several components that are not part of the conventional object model, such as states, categories and layers. Layers are used to represent design patterns at the level of the programming language and example layer types for four design patterns are presented. LayOM is supported by a development environment that translates LayOM code into C++. The generated C++ code can be used as any C++ code for the development of applications. An important aspect of LayOM is that the language itself is extensible. This allows new design patterns to be added to the language model.", "num_citations": "45\n", "authors": ["622"]}
{"title": "Achieving simplicity with the three-layer product model\n", "abstract": " Increased system complexity has historically been treated as an inevitable consequence of architecture evolution over time. The three-layer product model offers an innovative framework for managing system growth that encourages greater efficiency, nimbler responsiveness, and more opportunities for innovation during all stages of the software development life cycle.", "num_citations": "44\n", "authors": ["622"]}
{"title": "Post-deployment data collection in software-intensive embedded products\n", "abstract": " To stay competitive, software development companies need to constantly evolve their software development practices. Companies that succeed in shortening customer feedback loops, minimizing the time between customer proof points and learn from customer usage data will be able to accelerate innovation and improve the accuracy of their development investments. While contemporary research reports on a number of well-established techniques for actively involving customers before and during development, there is less evidence on how to successfully use post-deployment customer data as input to the development process. As a result, companies invest significantly in development efforts without having an accurate way of continuously validating whether the functionality they develop is of direct value to customers once the product is taken into use. In this paper, we explore techniques for involving\u00a0\u2026", "num_citations": "44\n", "authors": ["622"]}
{"title": "Lean Product Development in Early Stage Startups.\n", "abstract": " Software startups are more popular than ever and growing in numbers. They operate under conditions of extreme uncertainty and face plenty of challenges, underlined by their high failure rate. Using Design Science Research, these challenges were investigated. A literature study showed that in recent years, several authors have suggested ways to increase the odds of succeeding as a startup, such as customer focused development, fact based decision making, pivoting and agile/lean thinking. Interviews with industry professionals showed that few used these Lean Startup practices: many found them difficult to implement in practice. In response, we developed the Early Stage Software Startup Development Model (ESSSDM) for managing early stage software startups by applying Lean Startup principles. The model is novel in that it supports managing a portfolio of product ideas and provides clear criteria for when to move forward with product ideas, when to abandon product ideas as well as recommends what concrete techniques that can be used and when, in order to achieve this. The process was instantiated and evaluated on a startup project in an incubator setting.", "num_citations": "44\n", "authors": ["622"]}
{"title": "An experiment on creating scenario profiles for software change\n", "abstract": " Scenario profiles are used increasingly often for the assessment of quality attributes during the architectural design of software systems. However, the definition of scenario profiles is subjective and no data is available on the effects of individuals on scenario profiles. In this paper we present the design, analysis and results of a controlled experiment on the effect of individuals on scenario profiles, so that others can replicate the experiments on other projects and people. Both scenario profiles created by individuals and by groups are studied. The findings from the experiment showed that groups with prepared members proved to be the best method for creating scenario profiles. Unprepared groups did not perform better than individuals when creating scenario profiles.", "num_citations": "43\n", "authors": ["622"]}
{"title": "Automated software integration flows in industry: A multiple-case study\n", "abstract": " There is a steadily increasing interest in the agile practice of continuous integration. Consequently, there is great diversity in how it is interpreted and implemented, and a need to study, document and analyze how automated software integration flows are implemented in the industry today. In this paper we study five separate cases, using a descriptive model developed to address the variation points in continuous integration practice discovered in literature. Each case is discussed and evaluated individually, whereupon six guidelines for the design and implementation of automated software integration are presented. Furthermore, the descriptive model used to document the cases is evaluated and evolved.", "num_citations": "42\n", "authors": ["622"]}
{"title": "Design patterns & frameworks: On the issue of language support\n", "abstract": " Object-oriented frameworks and design patterns are useful abstractions that are relatively new to the object-oriented paradigm. The implementation of these abstractions, however, suffers from a number of problems due to the fact that insufficient language support is provided by traditional object-oriented languages. In this paper, we analyse these problems, study the different approaches for providing extended language support that can be identified and specify the requirements that have to be fulfilled by such approaches.", "num_citations": "42\n", "authors": ["622"]}
{"title": "Achieving traceability in large scale continuous integration and delivery deployment, usage and validation of the eiffel framework\n", "abstract": " The importance of traceability in software development has long been recognized, not only for reasons of legality and certification, but also to enable the development itself. At the same time, organizations are known to struggle to live up to traceability requirements, and there is an identified lack of studies on traceability practices in the industry, not least in the area of tooling and infrastructure. This paper presents, investigates and discusses Eiffel, an industry developed solution designed to provide real time traceability in continuous integration and delivery. The traceability needs of industry professionals are also investigated through interviews, providing context to that solution. It is then validated through further interviews, a comparison with previous traceability methods and a review of literature. It is found to address the identified traceability needs and found in some cases to reduce traceability data\u00a0\u2026", "num_citations": "41\n", "authors": ["622"]}
{"title": "Toward compositional software product lines\n", "abstract": " Software product lines (SPLs) were introduced over the last two decades as a mechanism for dealing with the complexities of software systems' ever-increasing size by exploiting the commonalities among the company's different products or systems. By standardizing the software components sourced from the outside and sharing domain specific software assets the company develops among different product teams, you can significantly reduce the per-product R&D cost, which improves the company's competitive position. This can be achieved through a richer product portfolio, a harmonized look-and-feel across the product portfolio, or a significantly higher degree of customer configurability. Companies that successfully deploy SPL technology can achieve order-of magnitude growth over a decade and reach major business milestones.", "num_citations": "41\n", "authors": ["622"]}
{"title": "Experimentation growth: Evolving trustworthy A/B testing capabilities in online software companies\n", "abstract": " Companies need to know how much value their ideas deliver to customers. One of the most powerful ways to accurately measure this is by conducting online controlled experiments (OCEs). To run experiments, however, companies need to develop strong experimentation practices as well as align their organization and culture to experimentation. The main objective of this paper is to demonstrate how to run OCEs at large scale using the experience of companies that succeeded in scaling. Based on case study research at Microsoft, Booking.com, Skyscanner, and Intuit, we present our main contribution\u2014The Experiment Growth Model. This four\u2010stage model addresses the seven critical aspects of experimentation and can help companies to transform their organizations into learning laboratories where new ideas can be tested with scientific accuracy. Ultimately, this should lead to better products and services.", "num_citations": "39\n", "authors": ["622"]}
{"title": "Cosvam: A technique for assessing software variability in software product families\n", "abstract": " Evolution of variability is a key factor in the successful exploitation of commonalities in software product families. Assessment of variability can be used to determine how the variability provided by a product family should evolve. We present COSVAM (COVAMOF software variability assessment method), a variability assessment technique that specifically addresses evolution of variability. We exemplify our approach with the Dacolian case study.", "num_citations": "39\n", "authors": ["622"]}
{"title": "Organizing for software product lines\n", "abstract": " Software product lines have received increasing amounts of attention within the software engineering community, especially from industry. Most authors focus on the technical and process aspects and assume an organizational model consisting of a domain engineering unit and several application engineering units. In our cooperation with several software development organizations applying software product line principles, we have identified several other organizational models that are employed. This article presents a number of organizational models, organized in four main approaches, i.e. development department, business units, domain engineering units and hierarchical domain engineering units. For each approach, its characteristics, applicability and advantages and disadvantages are discussed, as well as an example.", "num_citations": "38\n", "authors": ["622"]}
{"title": "Haemo dialysis software architecture design experiences\n", "abstract": " In this paper we present the experiences and architecture from a research project conducted in cooperation with two industry partners. The goal of the project was to reengineer an existing system for haemo dialysis machines into a domain specific software architecture. Our main experiences are (1) architecture design is an iterative and incremental process, (2) software quality requires a context, (3) quality attribute assessment methods are too detailed for use during architectural design, (4) application domain concepts are not the best abstractions, (5) aesthetics guides the architect in finding potential weaknesses in the architecture, (6) it is extremely hard to decide when an architecture design is ready, and (7) documenting software architectures is an important problem. We also present the architecture and design rational to give a basis for our experiences. We evaluated the resulting architecture by implementing\u00a0\u2026", "num_citations": "38\n", "authors": ["622"]}
{"title": "Plays nice with others? Multiple ecosystems, various roles and divergent engagement models\n", "abstract": " In strategic management, the term meta-organisation is discussed as a network of firms and individuals in which members coexist, collaborate and evolve through a set of relationships and together form a larger organism. We focus on the meta-organisation form of an ecosystem in the IT industry, which often is based around a technical architecture or platform. Studies often discuss one network and selected members in such a network, but few mention that firms can work in multiple ecosystems and need to apply divergent engagement models. We study how firms engage in multiple ecosystems through three qualitative case studies. The article contributes with the following: (1) firms often operate in multiple ecosystems for which they need to dynamically adapt their engagement strategy. (2) Firms are striving to balance between strategic divergences: power versus symbiosis and a collaborative approach versus a\u00a0\u2026", "num_citations": "37\n", "authors": ["622"]}
{"title": "The continuity of continuous integration: Correlations and consequences\n", "abstract": " The practice of continuous integration has firmly established itself in the mainstream of the software engineering industry, yet many questions surrounding it remain unanswered. Prominent among these is the issue of scalability: continuous integration has been reported to be possible to scale, but with difficulties. Understanding of the underlying mechanisms causing these difficulties is shallow, however: what is it about size that is problematic, which kind of size, and what aspect of continuous integration does it impede? Based on quantitative data from six industry cases encompassing close to 2000 engineers, complemented by interviews with engineers from five companies, this paper investigates the correlation between the continuity of continuous integration and size. It is found that not only is there indeed a correlation between the size and composition of a development organization and its tendency to integrate\u00a0\u2026", "num_citations": "36\n", "authors": ["622"]}
{"title": "Improving usual care after sudden death in the young with focus on inherited cardiac diseases (the CAREFUL study): a community-based intervention study\n", "abstract": " Aims           Inherited cardiac diseases play an important role in sudden death (SD) in the young. Autopsy and cardiogenetic evaluation of relatives of young SD victims identifies relatives at risk. We studied the usual care after SD in the young aimed at identifying inherited cardiac disease, and assessed the efficacy of two interventions to improve this usual care.                             Methods and results           We conducted a community-based intervention study to increase autopsy rates of young SD victims aged 1\u201344 years and referral of their relatives to cardiogenetic clinics. In the Amsterdam study region, a 24/7 central telephone number and a website were available to inform general practitioners and coroners. In the Utrecht study region, they were informed by a letter and educational meetings. In two control regions usual care was monitored. Autopsy was performed in 169 of 390 registered SD cases (43.3\u00a0\u2026", "num_citations": "36\n", "authors": ["622"]}
{"title": "Characterizing evolution in product line architectures\n", "abstract": " Product-line architectures present an important approach to increasing software reuse and reducing development cost by sharing an architecture and set of reusable components among a family of products. However, evolution in product-line architectures is more complex than in traditional software development since new, possibly conflicting, requirements originate from the existing products in the product-line and new products that are to be incorporated. In this paper, we present a case study of product-line architecture evolution. Based on the case study, we develop categorizations for the evolution of requirements, the product-line architecture and productline architecture components. Subsequently, we analyze and present the relations between these categorizations.", "num_citations": "36\n", "authors": ["622"]}
{"title": "Applying agile development in mass-produced embedded systems\n", "abstract": " The paper presents a method to manage critical interactions to manage when introducing agile software development in mass-produced embedded systems. The method consists of a context model together with a set of measures, and is validated by empirical evidence from three cases.               From an industrial perspective, the paper provides a prescription on how to implement agile software development outside the typical domains for agile, in this case for mass-produced products with embedded software governed by a stage-gate process for mechanics and hardware.               From a research perspective, the paper provides an analysis of the software development cycle for products with embedded software, especially where product development as a whole is driven by a plan-driven process. The main contribution is a method for introducing agile in areas where by necessity the full R&D process\u00a0\u2026", "num_citations": "35\n", "authors": ["622"]}
{"title": "Evaluation of tool support for architectural evolution\n", "abstract": " Evolution of software architectures is, different from architectural design, an area that only few tools have covered. We claim this is due to the lack of support for an important concept of architectural evolution: the notion of architectural design decisions. The absence of this concept in architectural evolution leads to several problems. In order to address these problems, we present a set of requirements that tools should support for architectural evolution. We evaluate existing software architecture tools against these architectural requirements. The results are analyzed and an outline for future research directions for architectural evolution tool support is presented.", "num_citations": "35\n", "authors": ["622"]}
{"title": "Product instantiation in software product lines: A case study\n", "abstract": " Product instantiation is one of the less frequently studied activities in the domain of software product lines. In this paper, we present the results of a case study at Axis Communication AB on product instantiation in an industrial product line, i.e. five problems and three issues. The problems are concerned the insufficiency of functional commonality, features spanning multiple components, the exclusion of unwanted features, the evolution of product line components and the handling of initialization code. The issues discuss architectural compliance versus product instantiation effort, quick-fixes versus properly engineered extensions and component instantiation support versus product instantiation effort. The identified problems and issues are based on the case study, but have been generalized to apply to a wider context.", "num_citations": "35\n", "authors": ["622"]}
{"title": "Making the right decision: supporting architects with design decision data\n", "abstract": " Software architects are often forced to make design decisions based on limited information. In this paper, we present an approach that allows software architects to study information about design decisions made by hundreds or more software architects by automatically analyzing the version management data of large open-source repositories. The contribution is, first, that it develops a conceptual model to reason about the automatic derivation of specifically medium level architectural design decisions. Second, we show that it is indeed possible to derive these design decisions automatically from open source projects. This provides a basis for statistical and quantitative reasoning about software architecture design decisions that allows software architects to make better-informed decisions.", "num_citations": "34\n", "authors": ["622"]}
{"title": "Stability assessment of evolving industrial object\u2010oriented frameworks\n", "abstract": " Object\u2010oriented framework technology has become a common reuse technology in software development. As with all software, frameworks evolve over time. Once the framework has been deployed, new versions of a framework potentially cause a high maintenance cost for the products built with the framework. This fact, in combination with the high costs of developing and evolving a framework, make it important for organizations to achieve a controlled and predictable evolution of the framework's functionality and costs. We present a metrics\u2010based framework stability assessment method, which has been applied on two industrial frameworks from the telecommunication and graphical user interface domains. First, we discuss the framework concept and the frameworks studied. Then, the stability assessment method is presented including the metrics used. The results from applying the method, as well as an\u00a0\u2026", "num_citations": "34\n", "authors": ["622"]}
{"title": "Observations on the Evolution of an Industrial OO Framework\n", "abstract": " An approach for identifying potential modules for restructuring in large software systems using product release history is adapted to better suit object-oriented frameworks and is applied to an industrial black-box framework product in the telecommunication domain. Our study shows that using historical information as a way of identifying structural shortcomings in an object-oriented system is viable and useful. The study thereby strengthens the approach and demonstrates that the approach is adaptable and useful for object-oriented systems. The usefulness of the original approach has been validated through this study too.", "num_citations": "33\n", "authors": ["622"]}
{"title": "Visualizing testing activities to support continuous integration: A multiple case study\n", "abstract": " While efficient testing arrangements are the key for software companies that are striving for continuous integration, most companies struggle with arranging these highly complex and interconnected testing activities. There is often a lack of an adequate overview of companies\u2019 end-to-end testing activities, which tend to lead to problems such as double work, slow feedback loops, too many issues found during post-development, disconnected organizations, and unpredictable release schedules. We report from a multiple-case study in which we explore current testing arrangements at five different software development sites. The outcome of the study is a visualization technique of the testing activities involved from unit and component level to product and release level that support the identification of improvement areas. This model for visualizing the end-to-end testing activities for a system has been used to\u00a0\u2026", "num_citations": "32\n", "authors": ["622"]}
{"title": "Specifying frameworks and design patterns as architectural fragments\n", "abstract": " Object-oriented software architectures, such as design patterns and frameworks, have found extensive use in software industry. Their implementation in traditional object-oriented programming languages, however, is often difficult, since no support for the explicit specification of software architectures is provided. The author develops the notion of architecture fragments, i.e. reusable architectural specifications that describe a design pattern or a framework architecture. An architectural fragment describes the structure of an architecture in terms of its components (roles), the architecture-specific behaviour of the components and the architecture-specific interaction between the components. Fragments can be composed with each other and with reusable components. To illustrate the use of fragments, the author describes the role and architecture language constructs in the layered object model (L/sup AY/OM) and\u00a0\u2026", "num_citations": "32\n", "authors": ["622"]}
{"title": "Modeling variability and testability interaction in software product line engineering\n", "abstract": " Software product line engineering is often a more laborious process than anticipated beforehand, not in the least due to a growing demand for product features and an ever increasing complexity of the dependencies between functional components. One of the main ideas in software product line engineering is to delay variant binding, i.e., to delay the composition of particular product features to a later moment in the development or deployment process. Delaying variant binding affects testability, e.g., a full integration test is not possible before all the appropriate product variants have been bound. This paper suggests a variability and testability interaction model (VTIM) to better anticipate the software product line testing process. VTIM is applied in a case study in expressing the relationship between variability and testability for several variation points in a large-scale software product line of magnetic resonance\u00a0\u2026", "num_citations": "31\n", "authors": ["622"]}
{"title": "Relations as object model components\n", "abstract": " Although object-oriented methods make extensive use of relations between objects, these relations, other than inheritance and part-of, can not directly be represented by the conventional object-oriented model. This means that relations which are identi ed during analysis and design have to be implemented on top of the object model, ie by using method code and message passing, rather than by expressing relations directly within in the model. It would be bene cial if the object-oriented model would support the speci cation of all relevant types of relations within the model, including application-domain speci c relation types. Therefore, we propose a mechanism, implemented in LayOM {an extended object model, that supports speci cation of all types of relations between objects within the model as components of the object model. In addition, an approach for identifying and specifying application-domain relation types is presented.", "num_citations": "31\n", "authors": ["622"]}
{"title": "Coordination between global agile teams: From process to architecture\n", "abstract": " Traditional process-centric software development has served software-intensive companies well for decades. During recent years, however, the trends of increased adoption of software product lines, software ecosystems and in particular global software engineering have lead to unmanageable complexity and unacceptable overhead. In this paper we present research performed at three global companies in which we studied the relation between large-scale and agile approaches to software development as well as current problems. In addition, by integrating the best practices adopted at the case study companies, we present an alternative approach: architecture-centric software engineering. This approach largely removes inter-team dependencies and provides much higher efficiency and productivity in global software development contexts.", "num_citations": "30\n", "authors": ["622"]}
{"title": "A taxonomy and hierarchy of variability dependencies in software product family engineering\n", "abstract": " In a software product family context, software architects design architectures that support product diversification in both space (multiple contexts) and time (changing contexts). Product diversification is based on the concept of variability: a single architecture and a set of components support a family of products. Software product families have to support increasing amounts of variability, but variability dependencies are often ill-defined and have unexpected or even unknown behavior This paper suggests a (1) taxonomy and a (2) hierarchy of variability dependencies in a software product family context. The taxonomy is based on the concept of variation points and identifies four main types of variability dependencies. The four-tier hierarchy is a generalization of the architectural layers found in the so-called building block method", "num_citations": "30\n", "authors": ["622"]}
{"title": "Tool support for COVAMOF\n", "abstract": " A key aspect of software variability management in software product families is the explicit representation of the variability. From experience at several industrial software product families we found that tool support for variability modeling techniques requires (1) uniform and first-class representation of variation points and dependencies in all abstraction levels,(2) support intrinsic variability modeling,(3) support for multiple views,(4) complete lifecycle coverage, and (5) support for complex and dynamically analyzable dependencies. Although some existing tools provide support one or two requirements, none supports all five. In earlier work we presented a framework for variability modeling, COVAMOF. The contribution of this paper is a description of Mocca, tool support for COVAMOF, that addresses all five requirements.", "num_citations": "30\n", "authors": ["622"]}
{"title": "Delegating compiler objects: modularity and reusability in language engineering\n", "abstract": " The application domain of compiler techniques is changing. Whereas previously compiler techniques were primarily used for the construction of compilers for general purpose languages, now these techniques are increasingly often used for the construction of application domain languages and extensible language models. However, the traditional compiler techniques su er from problems of complexity, maintainability, reusability and extensibility and new approaches are needed. In this paper, we describe the notion of delegating compiler objects (dcos), a novel approach to compiler construction that provides structural decomposition and reusability of compiler speci cations. Our extensible language, the layered object model, is used to illustrate the advantages of the dco approach for compiler construction.", "num_citations": "30\n", "authors": ["622"]}
{"title": "Experiences with software architecture analysis of usability\n", "abstract": " Software engineers and human computer interaction engineers have come to the understanding that usability is not something that can be \u201cadded\u201d to a software product during late stage, since to a certain extent it is determined and restricted by architecture design. Cost effectively developing a usable system must include developing an architecture, which supports usability. Because software engineers in industry lacked support for the early evaluation of usability, we defined a generalized four-step method for software architecture level usability analysis called SALUTA. In this article, we report on a number of experiences and problems we observed when performing architecture analysis of usability at three industrial case studies performed in the domain of Web-based enterprise systems. Suggestions or solutions are provided for solving or avoiding these problems so organizations facing similar problems may\u00a0\u2026", "num_citations": "28\n", "authors": ["622"]}
{"title": "First class feature abstractions for product derivation\n", "abstract": " The authors have observed that large software systems are increasingly defined in terms of the features they implement. Consequently, there is a need to express the commonalities and variability between products of a product family in terms of features. Unfortunately, technology support for the early aspect of a feature is currently limited to the requirements level. There is a need to extend this support to the design and implementation level as well. Existing separation of concerns technologies, such as AOP and SOP, may be of use here. However, features are not first class citizens in these paradigms. To address this and to explore the problems and issues with respect to features and feature composition, the authors have formalised the notion of features in a feature model. The feature model relates features to a component role model. Using our model and a composition algorithm, a number of base components\u00a0\u2026", "num_citations": "28\n", "authors": ["622"]}
{"title": "Variability dependencies in product family engineering\n", "abstract": " In a product family context, software architects anticipate product diversification and design architectures that support variants in both space (multiple contexts) and time (changing contexts). Product diversification is based on the concept of variability: a single architecture and a set of components support a family of products. Software product families need to support increasing amounts of variability, leading to a situation where variability dependencies become of primary concern. This paper discusses (1) a taxonomy of variability dependencies and (2) a case study in designing a program monitor and exception handler for a legacy system. The study shows that the types of variability dependencies in a system depend on how the system is designed and architected.", "num_citations": "28\n", "authors": ["622"]}
{"title": "Challenges and strategies for undertaking continuous experimentation to embedded systems: Industry and research perspectives\n", "abstract": " Context: Continuous experimentation is frequently used in web-facing companies and it is starting to gain the attention of embedded systems companies. However, embedded systems companies have different challenges and requirements to run experiments in their systems. Objective: This paper explores the challenges during the adoption of continuous experimentation in embedded systems from both industry practice and academic research. It presents strategies, guidelines, and solutions to overcome each of the identified challenges. Method: This research was conducted in two parts. The first part is a literature review with the aim to analyze the challenges in adopting continuous experimentation from the research perspective. The second part is a multiple case study based on interviews and workshop sessions with five companies to understand the challenges from the industry perspective and how they are working to overcome them. Results: This study found a set of twelve challenges divided into three areas; technical, business, and organizational challenges and strategies grouped into three categories, architecture, data handling and development processes. Conclusions: The set of identified challenges are presented with a set of strategies, guidelines, and solutions. To the knowledge of the authors, this paper is the first to provide an extensive list of challenges and strategies for continuous experimentation in embedded systems. Moreover, this research points out open challenges and the need for new tools and novel solutions for the further development of experimentation in embedded systems.", "num_citations": "27\n", "authors": ["622"]}
{"title": "The lack of sharing of customer data in large software organizations: challenges and implications\n", "abstract": " With agile teams becoming increasingly multi-disciplinary and including all functions, the role of customer feedback is gaining momentum. Today, companies collect feedback directly from customers, as well as indirectly from their products. As a result, companies face a situation in which the amount of data from which they can learn about their customers is larger than ever before. In previous studies, the collection of data is often identified as challenging. However, and as illustrated in our research, the challenge is not the collection of data but rather how to share this data among people in order to make effective use of it. In this paper, and based on case study research in three large software-intensive companies, we (1) provide empirical evidence that \u2018lack of sharing\u2019 is the primary reason for insufficient use of customer and product data, and (2) develop a model in which we identify what data is collected, by\u00a0\u2026", "num_citations": "27\n", "authors": ["622"]}
{"title": "Climbing the \u201cStairway to Heaven\u201d: evolving from agile development to continuous deployment of software\n", "abstract": " Software-intensive systems companies need to evolve their practices continuously in response to competitive pressures. Based on a conceptual model presented as the \u201cStairway to Heaven,\u201d we present the transition process when moving from traditional development towards continuous deployment of software. Our research confirms that the transition towards agile development requires a careful introduction of agile practices into the organization, a shift to small development teams, and a focus on features rather than components. The transition towards continuous integration requires an automated test suite, a main branch to which code is continually delivered, and a modularized architecture. The move towards continuous deployment requires internal and external stakeholders to be fully involved and a proactive customer with whom to explore the concept. Finally, the transition towards R&D as an\u00a0\u2026", "num_citations": "27\n", "authors": ["622"]}
{"title": "Online controlled experimentation at scale: an empirical survey on the current state of A/B testing\n", "abstract": " Online Controlled Experiments (OCEs, aka A/B tests) are one of the most powerful methods for measuring how much value new features and changes deployed to software products bring to users. Companies like Microsoft, Amazon, and Booking.com report the ability to conduct thousands of OCEs every year. However, the competences of the remainder of the online software industry remain unknown. The main objective of this paper is to reveal the current state of A/B testing maturity in the software industry based on a maturity model from our previous research. We base our findings on 44 responses from an online empirical survey. Our main contribution of this paper is the current state of experimentation maturity as operationalized by the ExG model for a convenience sample of companies doing online controlled experiments. Our findings show that, among others, companies typically develop in-house\u00a0\u2026", "num_citations": "26\n", "authors": ["622"]}
{"title": "Architecting product diversification-formalizing variability dependencies in software product family engineering\n", "abstract": " In a software product family context, software architects design architectures that support product diversification in both space (multiple contexts) and time (changing contexts). Product diversification is based on the concept of variability: a single architecture and a set of components support a family of products. Software product families need to support increasing amounts of variability, leading to a situation where variability dependencies become of primary concern. This work presents (1) a formalization of variability dependencies and (2) a case study in designing a program monitor and exception handler. The case study uses the formalization to describe variability dependencies in constraint specification language style and shows that architectural robustness is related to the type of variability dependencies.", "num_citations": "26\n", "authors": ["622"]}
{"title": "Your system gets better every day you use it: towards automated continuous experimentation\n", "abstract": " Innovation and optimization in software systems can occur from pre-development to post-deployment stages. Companies are increasingly reporting the use of experiments with customers in their systems in the post-deployment stage. Experiments with customers and users are can lead to a significant learning and return-on-investment. Experiments are used for both validation of manual hypothesis testing and feature optimization, linked to business goals. Automated experimentation refers to having the system controlling and running the experiments, opposed to having the R&D organization in control. Currently, there are no systematic approaches that combine manual hypothesis validation and optimization in automated experiments. This paper presents concepts related to automated experimentation, as controlled experiments, machine learning and software architectures for adaptation. However, this paper\u00a0\u2026", "num_citations": "25\n", "authors": ["622"]}
{"title": "Continuous integration impediments in large-scale industry projects\n", "abstract": " Based on interviews with 20 developers from two case study companies that develop large-scale software-intensive embedded systems, this paper presents the main factors that affect how often developers deliver software to the mainline. Further on, the paper describes the continuous integration behaviors in projects where up to 1,000 developers commit to the same mainline. The main factors that could enable more frequent integration of software are: \"Activity planning and execution\", \"System thinking\", \"Speed\" and \"Confidence through test activities\". Behind these main themes we also present a wide range of sub-categories (\"Modular and loosely coupled architecture\", \"Test selection\" etc) which summarizes what the developers themselves see as the continuous integration impediments in large-scale industry projects.", "num_citations": "25\n", "authors": ["622"]}
{"title": "ESAO: A holistic ecosystem-driven analysis model\n", "abstract": " The growing importance of software ecosystems and open innovation requires that companies become more intentional about aligning their internal strategy, architecture and organizing efforts with the ecosystem that the company is part of. Few models exist that facilitate analysis and improvement of this alignment. In this paper, we present the ESAO model and describe its six main components. Organizations and researchers can use the model to analyze the alignment between the different parts of their business, technologies and ways of working, internally and in the ecosystem. The model is illustrated and validated through the use of three case studies.", "num_citations": "25\n", "authors": ["622"]}
{"title": "On the development of software product-family components\n", "abstract": " Several approaches to the development of shared artefacts in software product families exist. Each has advantages and disadvantages, but there is no clear framework for selecting among these alternatives. As a consequence, mismatches between the optimal approach and the one currently used by an organization may lead to several problems, such as a high degree of erosion, mismatches between product needs and shared components, organizational \u201cnoise\u201d and inefficient knowledge management. This paper (1) presents the problems resulting from the aforementioned mismatch, (2) presents the relevant decision dimensions that define the space of alternatives, (3) discusses the advantages and disadvantages of each alternative and (4) presents a framework for selecting the best alternative for each decision dimension based on a three-stage adoption model.", "num_citations": "25\n", "authors": ["622"]}
{"title": "Layered object model: Investigating paradigm extensibility.\n", "abstract": " Degree: Takn. drDegreeYear: 1995Institute: Lunds Universitet (Sweden)This thesis is concerned with research in object-oriented systems; in particular research in object models and object-oriented compilation techniques. When evaluating the conventional object-oriented paradigm certain anomalies can be identified. One category of problems is related to the way the conventional object model deals with relations and associations between objects. A second category of problems is concerned with the handling of object state in object-oriented systems. A third category of problems is related to lack of support for extending the object-oriented paradigm in itself. As a solution to these problems, the layered object model (LayOM) is proposed. LayOM is an extended object model in that extends the conventional object model with new components not present in the conventional object model. One extension is the notion\u00a0\u2026", "num_citations": "25\n", "authors": ["622"]}
{"title": "Data-driven continuous evolution of smart systems\n", "abstract": " As Marc Andreessen said in his Wall Street Journal OpEd, software is eating the world. The systems that we are building today and in the near future will exhibit levels of autonomy that will put new demands on the engineering of such systems. Although promising examples of autonomous systems exist, there is no established methodology for systematically building autonomous systems that employ modern software engineering technology such as continuous deployment and data-driven engineering. The contribution of this paper is twofold. First, it identifies and presents the challenge of continuous evolution of autonomous systems as a well-defined problem that needs to be addressed by software engineering research. Second, it presents a conceptual solution to this problem that integrates the development of new software for autonomous systems by R&D teams with systematic experimentation by autonomous\u00a0\u2026", "num_citations": "24\n", "authors": ["622"]}
{"title": "Automated user interaction analysis for workflow-based web portals\n", "abstract": " Success in the software market requires constant improvement of the software. These improvements however have to directly align with the needs of the users of the software. A recent trend in software engineering is to collect post-deployment data about how users use a software system. We report in this paper about a case study with an industrial partner in which (1) we identified which data has to be collected for a web-based portal system, (2) implemented the data collection, and (3) performed an experiment comparing the collected data with answers of the test subjects in a survey.", "num_citations": "24\n", "authors": ["622"]}
{"title": "The changing industry structure of software development for consumer electronics and its consequences for software architectures\n", "abstract": " During the last decade the structure of the consumer electronics industry has been changing profoundly. Current consumer electronics products are built using components from a large variety of specialized firms, whereas previously each product was developed by a single, vertically integrated company. Taking a software development perspective, we analyze the transition in the consumer electronics industry using case studies from digital televisions and mobile phones. We introduce a model consisting of five industry structure types and describe the forces that govern the transition between types and we describe the consequences for software architectures.We conclude that, at this point in time, software supply chains are the dominant industry structure for developing consumer electronics products. This is because the modularization of the architecture is limited, due to the lack of industry-wide standards and\u00a0\u2026", "num_citations": "24\n", "authors": ["622"]}
{"title": "A reference architecture template for software-intensive embedded systems\n", "abstract": " The paper presents a document template for reference architectures for the domain of software-intensive embedded systems. The template addresses the somewhat conflicting needs when documenting a reference architecture of readability, overview, details, evolution and different background of the stakeholders.", "num_citations": "23\n", "authors": ["622"]}
{"title": "Service orientation in the enterprise\n", "abstract": " A new trend gaining momentum in recent years is companies' use of mobile devices as an integral part of their IT infrastructure for both employees and customers. Although similar to early Web-based products, mobile services have technical and physical limitations. However, they also enjoy the advantage of location independence, whereas existing PC-based solutions can offer, at best, a nomadic context. Corporate employees as well as consumers can clearly perform tasks more efficiently when stationary, but they can execute a growing number of functions with acceptable or even superior efficiency using mobile devices. This capability usually evolves in a three-stage process. In the first stage, a given task cannot be performed using a general-purpose mobile device, although the desire exists and dedicated single-purpose mobile devices are available. In the second stage, general-purpose mobile devices start\u00a0\u2026", "num_citations": "23\n", "authors": ["622"]}
{"title": "Expanding the scope of software product families: Problems and alternative approaches\n", "abstract": " \u2022 Joint research collaboration and laboratory facility between Nokia and the Massachusetts Institute of Technology (MIT)\u2022 The mission of the research collaboration is to jointly carry out high-impact research with the goal of advancing the state of the art in mobile computing and communications technologies", "num_citations": "23\n", "authors": ["622"]}
{"title": "Architecture-centric software engineering\n", "abstract": " Many software organizations are in the transition from project-centric to architecture-centric engineering of software [2]. Two typical reasons for this transition are (1) the architecture allows for a clear break-down in parts whereas a project-centric approach easily leads to a monolithic system and (2) the organization is interested in exploiting the commonalities between its products or systems. This tutorial addresses this development by providing an overview and in depth treatment of the issues around architecture-centric engineering of software. Topics include software architecture design in the presence of existing components and infrastructure (top-down versus bottom-up), architecture evaluation and assessment, software artefact variability management, software product lines and the role of the software architect. These topics are, in addition to the technical perspective, discussed from process and organizational\u00a0\u2026", "num_citations": "22\n", "authors": ["622"]}
{"title": "Data management challenges for deep learning\n", "abstract": " Deep learning is one of the most exciting and fast-growing techniques in Artificial Intelligence. The unique capacity of deep learning models to automatically learn patterns from the data differentiates it from other machine learning techniques. Deep learning is responsible for a significant number of recent breakthroughs in AI. However, deep learning models are highly dependent on the underlying data. So, consistency, accuracy, and completeness of data is essential for a deep learning model. Thus, data management principles and practices need to be adopted throughout the development process of deep learning models. The objective of this study is to identify and categorise data management challenges faced by practitioners in different stages of end-to-end development. In this paper, a case study approach is employed to explore the data management issues faced by practitioners across various domains\u00a0\u2026", "num_citations": "21\n", "authors": ["622"]}
{"title": "Cinders: The continuous integration and delivery architecture framework\n", "abstract": " Context: The popular agile practices of continuous integration and delivery have become an essential part of the software development process in many companies, yet effective methods and tools to support design, description and communication of continuous integration and delivery systems are lacking.Objective: The work reported on in this paper addresses that lack by presenting Cinders \u2014 an architecture framework designed specifically to meet the needs of such systems, influenced both by prominent enterprise and software architecture frameworks as well as experiences from continuous integration and delivery modeling in industry.Method: The state of the art for systematic design and description of continuous integration and delivery systems is established through review of literature, whereupon a proposal for an architecture framework addressing requirements derived from continuous integration and\u00a0\u2026", "num_citations": "21\n", "authors": ["622"]}
{"title": "Ecosystem-driven software development: A case study on the emerging challenges in inter-organizational R&D\n", "abstract": " Most companies today experience a situation in which they are part of a complex business ecosystem of stakeholders that influence business outcomes. Especially for companies transitioning from selling products to becoming systems, solutions and services providers, this is causing a significant shift in their business strategies and relationships. Instead of focusing on internal processes, companies need to strategically position themselves in a dynamic network of actors to accelerate synergies and value co-creation. However, while this shift in business strategy is inevitable, it is not without challenges. An understanding for how to align internal, as well as external processes is critical, as well as a careful assessment on how to establish strategic partnerships in a dynamic network of interests. Based on on-going research, this paper outlines the emerging challenges that most software development\u00a0\u2026", "num_citations": "21\n", "authors": ["622"]}
{"title": "Continuous integration applied to software-intensive embedded systems\u2013problems and experiences\n", "abstract": " In this paper we present a summary of factors that must be taken into account when applying continuous integration to software-intensive embedded systems. Experiences are presented from two study cases regarding seven topics: complex user scenarios, compliance to standards, long build times, many technology fields, security aspects, architectural runway and test environments. In the analysis we show how issues within these topics obstruct the organization from working according to the practices of continuous integration. The identified impediments are mapped to a list of continuous integration corner-stones proposed in literature.", "num_citations": "20\n", "authors": ["622"]}
{"title": "Industry application of continuous integration modeling: a multiple-case study\n", "abstract": " The popular agile practice of continuous integration has become an essential part of the software development process in many companies, sometimes to the extent that delivery to customer is impossible without it. Due to this pivotal role it is an important field of research to better understand the practice: continuous integration system behavior, improvement identification and analysis of change impacts. This paper investigates the effects of modeling of such systems, by applying two continuous integration modeling techniques to four separate industry cases in three companies. These techniques are found to complement each other, and their ability to help professionals gain a better understanding of their continuous integration systems, to communicate around them and to support technical work is demonstrated. In addition, guidelines for conducting similar continuous integration modeling work are presented and\u00a0\u2026", "num_citations": "20\n", "authors": ["622"]}
{"title": "Architecture in the age of compositionality\n", "abstract": " The nature of software engineering is changing. Whereas building systems was the predominant activity, more recently the focus has shifted toward composing systems from open-source, commercial and proprietary components and to only build the functionality that truly is competitively differentiating. In addition, the way software is developed has changed as well, especially focusing on short development cycles and frequent, or even continuous, deployment. Because of these requirements, often teams are organized around features, rather than components, and can change all components in the system, including their interfaces. A third trend is the increasing adoption of software ecosystems, where significant development of functionality relevant for customers occurs outside the platform organization. Obviously, however, the quality attributes that are necessary for system success remain important as\u00a0\u2026", "num_citations": "20\n", "authors": ["622"]}
{"title": "Mobile service oriented architectures (mosoa)\n", "abstract": " Mobile services hold a promise of utilizing the phone also for other purposes than purely communication. However, repeated attempts at realizing mobile services in the market place have been met with limited success. This article (1) defines the architectural drivers that drive success or failure of mobile services, (2) analyzes three different architectural styles of realizing such a mobile service using the example of a movie ticket selling service and (3) presents the results of this analysis. The main result of the analysis is that a serious conflict exists between usability and essentially all the other architectural drivers included in our analysis, i.e. portability, deployability and scalability. This is due to the fact that, because of the restricted state of the art technology, only native client applications offer satisfactory usability, but these do not satisfy the other drivers.", "num_citations": "20\n", "authors": ["622"]}
{"title": "Managing variability in software product families\n", "abstract": " Software product families have proven to be an effective approach to reuse in software development. In contrary to popular belief, however, deriving products from a product family in an industrial context is an expensive and time-consuming activity. Modelling the variability in a product family can address most of the underlying problems. COVAMOF is a variability modelling approach that represents variation points and dependencies on all abstraction layers as first class citizens, supports the modelling of relations between dependencies, provides traceability and a hierarchical organization of variability throughout all abstraction layers, and supports intrinsic variability modelling. In this paper, we present COVAMOF, its tool support and its formal notation. We furthermore show the benefits of our approach over the existing approaches to variability modelling.", "num_citations": "20\n", "authors": ["622"]}
{"title": "Ecosystem traps and where to find them\n", "abstract": " Today, companies operate in business ecosystems where they collaborate, compete, share, and learn from others with benefits such as to present more attractive offerings and sharing innovation costs. With ecosystems being the new way of operating, the ability to strategically reposition oneself to increase or shift power balance is becoming key for competitive advantage. However, companies run into a number of traps when trying to realize strategical changes in their ecosystems. In this paper, we identify 5 traps that companies fall into. First, the \u201cdescriptive versus prescriptive trap\u201d is when companies assume that current boundaries between partners are immutable. Second, the \u201cassumptions trap\u201d is when powerful ecosystem partners assume that they understand what others regard as value\u2010adding without validating their assumptions. Third, the \u201ckeeping it too simple trap\u201d is when companies overlooks the effort\u00a0\u2026", "num_citations": "19\n", "authors": ["622"]}
{"title": "From ad hoc to strategic ecosystem management: the \u201cThree\u2010Layer Ecosystem Strategy Model\u201d(TeLESM)\n", "abstract": " Recently, business ecosystems have been recognized as one of the most interesting phenomenon in software engineering research. Companies experience a paradigm shift where product development and innovation is moving outside the boundaries of the firm and where networks of stakeholders join forces to co\u2010create value. While there is prominent research focusing on the managerial perspective of business ecosystems, few studies provide strategic guidance for how to intentionally manage the different ecosystems that companies operate in. Therefore, and on the basis of multicase study research, we provide empirical evidence on the challenges that software\u2010intensive companies experience in relation to the different types of business ecosystems they operate in. We conduct a \u201cstate\u2010of\u2010the\u2010art\u201d literature review to identify strategies that are used to manage ecosystem engagements, and we develop a\u00a0\u2026", "num_citations": "19\n", "authors": ["622"]}
{"title": "Continuous integration and delivery traceability in industry: needs and practices\n", "abstract": " The importance of traceability in software development has long been recognized, not only for reasons of legality and certification, but also to enable the development itself. At the same time, organizations are known to struggle to live up to traceability requirements, and there is an identified lack of studies on traceability practices in the industry, not least in the area of tooling and infrastructure. This paper identifies traceability as a key challenge in achieving continuous integration and delivery and documents an industry developed framework -- Eiffel -- designed to provide real time traceability in continuous integration and delivery. The efficacy of the Eiffel framework is then investigated through comparison with previous traceability methods.", "num_citations": "19\n", "authors": ["622"]}
{"title": "Architecture for large-scale innovation experiment systems\n", "abstract": " Business and design decisions regarding software development should be based on data, not opinions among developers, domain experts or managers. The company running the most and fastest experiments among the customer base against the lowest cost per experiment outcompetes others by having the data to engineer products with outstanding qualities such as power consumption and user experience. Innovation experiment systems for mass-produced devices with embedded software is an evolution of current R&D practices, going from where innovations are internally evaluated by the original equipment manufacturer to where they are tried by real users in a scale relevant to the full customer base. The turnaround time from developing and deploying an embedded product to getting customer feedback is decreased to weeks, the limit being the speed of the software development teams. The paper\u00a0\u2026", "num_citations": "19\n", "authors": ["622"]}
{"title": "Introducing software ecosystems for mass-produced embedded systems\n", "abstract": " Embedded systems are today predominantly developed with an integration-centric approach. The paper identifies the need to remove full-scale integration and process synchronisation of involved development teams. The paper presents software ecosystem as an alternative approach to develop embedded software and identifies a set of key activities for how an original equipment manufacturer can introduce an ecosystem. An example of a software ecosystem is presented for the car industry together a case which implemented some of the ecosystem platform properties.", "num_citations": "19\n", "authors": ["622"]}
{"title": "Comparing practices for reuse in integration\u2010oriented software product lines and large open source software projects\n", "abstract": " This article compares the organization and practices for software reuse in integration\u2010oriented software product lines (SPLs) and open source software projects. The main observation is that both approaches are successful regarding large variability and reuse, but differ widely in their practices and organization. To capture practices in large open source projects, we describe an open compositional model, which reflects their more decentralized organization of software development. We capture key practices and organizational forms for this and validate these by comparing four case studies of this model. Two of these studies are based on published SPL case studies, for the other two we analyze the practices in two large and successful open source projects based on their published developer documentation. Our analysis highlights key differences between the practices in the two open source organizations and\u00a0\u2026", "num_citations": "19\n", "authors": ["622"]}
{"title": "A product derivation framework for software product families\n", "abstract": " From our experience with several organizations that employ software product families, we have learned that deriving individual products from shared software artifacts is a time-consuming and expensive activity. In the research community, product derivation methodologies are rather scarce, however. By studying product derivation, we believe we will be better able to provide and validate industrially practicable solutions for application engineering. In this paper, we present a framework of terminology and concepts regarding product derivation that serves as basis for further discussion. We exemplify this framework with two industrial case studies, i.e. Thales Nederland B.V. and Robert Bosch GmbH.", "num_citations": "18\n", "authors": ["622"]}
{"title": "Evolution of software product families\n", "abstract": " Evolution in software product families is a difficult problem that is not well understood and studied insufficiently. In this article, we present a categorization of product family evolution, a discussion of the implications of architectural evolution and a summary of the discussion during the workshop.", "num_citations": "18\n", "authors": ["622"]}
{"title": "Design patterns as language constructs\n", "abstract": " CiNii \u8ad6\u6587 - Design Patterns as Language Constructs CiNii \u56fd\u7acb\u60c5\u5831\u5b66\u7814\u7a76\u6240 \u5b66\u8853\u60c5\u5831 \u30ca\u30d3\u30b2\u30fc\u30bf[\u30b5\u30a4\u30cb\u30a3] \u65e5\u672c\u306e\u8ad6\u6587\u3092\u3055\u304c\u3059 \u5927\u5b66\u56f3\u66f8\u9928\u306e\u672c\u3092\u3055\u304c\u3059 \u65e5\u672c\u306e\u535a\u58eb\u8ad6\u6587\u3092\u3055\u304c\u3059 \u65b0\u898f\u767b\u9332 \u30ed\u30b0\u30a4\u30f3 English \u691c\u7d22 \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u9589\u3058\u308b \u30bf\u30a4\u30c8\u30eb \u8457\u8005\u540d \u8457\u8005ID \u8457\u8005\u6240\u5c5e \u520a\u884c \u7269\u540d ISSN \u5dfb\u53f7\u30da\u30fc\u30b8 \u51fa\u7248\u8005 \u53c2\u8003\u6587\u732e \u51fa\u7248\u5e74 \u5e74\u304b\u3089 \u5e74\u307e\u3067 \u691c\u7d22 \u691c\u7d22 \u691c\u7d22 CiNii\u306e\u30b5\u30fc\u30d3\u30b9 \u306b\u95a2\u3059\u308b\u30a2\u30f3\u30b1\u30fc\u30c8\u3092\u5b9f\u65bd\u4e2d\u3067\u3059\uff0811/11(\u6c34)-12/23(\u6c34)\uff09 CiNii Research\u30d7\u30ec\u7248\u306e\u516c\u958b\u306b\u3064\u3044\u3066 Design Patterns as Language Constructs BOSCH J. \u88ab\u5f15\u7528\u6587\u732e: 1\u4ef6 \u8457\u8005 BOSCH J. \u53ce\u9332 \u520a\u884c\u7269 Journal of Object Oriented Programming Journal of Object Oriented Programming, 1997 \u88ab\u5f15\u7528\u6587\u732e: 1\u4ef6\u4e2d 1-1\u4ef6\u3092 \u8868\u793a 1 \u30af\u30e9\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7528\u3044\u305fJava\u8a00\u8a9e\u7528\u30de\u30af\u30ed\u51e6\u7406\u7cfb \u7acb\u5800 \u9053\u662d , \u5343\u8449 \u6ecb , \u677f\u91ce \u80af\u4e09 \u60c5\u5831\u51e6\u7406\u5b66\u4f1a\u8ad6\u6587\u8a8c 41(8), 2327-2338, 2000-08-15 \u53c2\u8003\u6587\u732e21\u4ef6 \u88ab\u5f15\u7528\u6587\u732e 2\u4ef6 \u56fd\u7acb\u60c5\u5831\u5b66\u7814\u7a76\u6240 \u8a2d\u7acb20\u5468\u5e74 Tweet \u5404\u7a2e\u30b3\u30fc\u30c9 NII\u8ad6\u6587ID(NAID) 10000131195 \u8cc7\u6599\u7a2e\u5225 \u2026", "num_citations": "18\n", "authors": ["622"]}
{"title": "Delegating compiler objects\n", "abstract": " Conventional compilers often are large entities that are highly complex, difficult to maintain and hard to reuse. In this article it is argued that this is due to the inherently functional approach to compiler construction. An alternative approach to compiler construction is proposed, based on object-oriented principles, which solves (or at least lessens) the problems of compiler construction. The approach is based on delegating compiler objects (Dcos) that provide a structural decomposition of compilers in addition to the conventional functional decomposition. The DCO approach makes use of the parser delegation and lexer delegation techniques, that provide reuse and modularisation of syntactical, respectively, lexical specifications.", "num_citations": "18\n", "authors": ["622"]}
{"title": "More for less: automated experimentation in software-intensive systems\n", "abstract": " Companies developing autonomous and software-intensive systems show an increasing need to adopt experimentation and data-driven strategies in their development process. With the growing complexity of the systems, companies are increasing their data analytic and experimentation teams to support data-driven development. However, organizations cannot increase in size at the same pace as the system complexity grows. Experimentation teams could run a larger number of experiments by letting the system itself to coordinate its own experiments, instead of the humans. This process is called automated experimentation. However, currently, no tools or frameworks address the challenge of running automated experiments.                 This paper discusses, through a set of architectural design decisions, the development of an architecture framework that supports automated continuous experiments. The\u00a0\u2026", "num_citations": "17\n", "authors": ["622"]}
{"title": "Future directions in agile research: alignments and divergence between research and practice\n", "abstract": " Since the publication of Agile Manifesto in 2001, agile methods have transited from a grassroot initiative among enthusiastic advocates and developers to a mainstream software development approach adopted by both small and large companies worldwide [1]. Meanwhile research on agile methods has grown rapidly and steadily into an established research area, evidenced by dedicated conferences (eg, XP conference series, research track of previous Agile Conference series), special issues and sections in top Information Systems and Software Engineering journals (eg [2, 3, 4]). However, practitioners and consultants have largely driven the advancement in agile field, and agile research has lagged behind practice in the past [2]. Has this situation changed as both agile methods and research community become increasingly mature? To be able to answer such questions, there is a constant need to check what interest agile practitioners and what agile researchers are investigating, to make sure that the states of the art and practice are aligned properly.", "num_citations": "17\n", "authors": ["622"]}
{"title": "Quantifying software product line ageing\n", "abstract": " It is a generally accepted fact that software ages over time. This requires software products to be replaced once their ageing inhibits the goals of the organization owning the product. However, few techniques are available for quantifying the negative effects of ageing software. In this extended abstract, we present an approach to quantifying the ageing of a software architecture. The approach can, among others, be used to decide upon the retirement of a software product line. Validation of the approach is in progress, but not reported upon in this extended abstract.", "num_citations": "17\n", "authors": ["622"]}
{"title": "Maintainability myth causes performance problems in parallel applications\n", "abstract": " A challenge in software design is to find solutions that balance and optimize the quality attributes of a system. It is not always possible to maximize each attribute and one has to make trade-offs. In this paper we present a case-study of an application where a key component, special designed to be highly maintainable, caused an unexpected and serious performance problem. Interviews with the developers show that the choice of design was based on a general assumption that a fine grained adaptable component design gives the system higher adaptability and thus also higher maintainability.In this study we have implemented a prototype of an alternative design based on rigid but exchangeable components. This alternative component has been evaluated and compared with the original component with respect to performance and maintainability. The evaluation shows that the alternative component has much better performance characteristics as well as higher maintainability. These findings show that the original design decision was based on a general assumption that proved invalid, ie the performance problems in the application were caused by a myth.", "num_citations": "17\n", "authors": ["622"]}
{"title": "Composition through superimposition\n", "abstract": " The conventional object-oriented paradigm provides part-of, inheritance and delegation relations as means for composition of objects. Although inheritance and delegation represent a considerable improvement over the module-based third generation languages, we have experienced that certain types of composability cannot be expressed using the aforementioned techniques. In some cases, the software engineer needs to superimpose certain behaviour on an object in such a way that the complete functionality of the object is affected. In this paper, we present three examples of behaviour that cannot be composed conveniently with object specifications when using the conventional object model, ie client interface, design patterns and acquaintance communication patterns. Subsequently, solutions to this lack of expressiveness are presented in the context of the layered object model (LayOM), our extensible research language.", "num_citations": "17\n", "authors": ["622"]}
{"title": "An activity and metric model for online controlled experiments\n", "abstract": " Accurate prioritization of efforts in product and services development is critical to the success of every company. Online controlled experiments, also known as A/B tests, enable software companies to establish causal relationships between changes in their systems and the movements in the metrics. By experimenting, product development can be directed towards identifying and delivering value. Previous research stresses the need for data-driven development and experimentation. However, the level of granularity in which existing models explain the experimentation process is neither sufficient, in terms of details, nor scalable, in terms of how to increase number and run different types of experiments, in an online setting. Based on a case study of multiple products running online controlled experiments at Microsoft, we provide an experimentation framework composed of two detailed experimentation\u00a0\u2026", "num_citations": "16\n", "authors": ["622"]}
{"title": "Early value argumentation and prediction: an iterative approach to quantifying feature value\n", "abstract": " Companies are continuously improving their practices and ways of working in order to fulfill always-changing market requirements. As an example of building a better understanding of their customers, organizations are collecting user feedback and trying to direct their R&D efforts by e.g. continuing to develop features that deliver value to the customer. We (1) develop an actionable technique that practitioners in organizations can use to validate feature value early in the development cycle, (2) validate if and when the expected value reflects on the customers, (3) know when to stop developing it, and (4) identity unexpected business value early during development and redirect R&D effort to capture this value. The technique has been validated in three experiments in two cases companies. Our findings show that predicting value for features under development helps product management in large\u00a0\u2026", "num_citations": "16\n", "authors": ["622"]}
{"title": "Some initial performance characteristics of three architectural styles\n", "abstract": " The design of the software architecture [I, 41 of a software system is conccmcd with the careful balancing of, possibly conflicting, quality attributes such as performance, maintainability, reliability, and flexibility. One design decision is the selection of an appropriate architectural style [2, 4], since each style provides different levels of support for quality attributes. However, understanding of the characteristics of different styles is still largely qualitative and little quantitative data exists. This paper presents an initial evaluation of the performance characteristics of three architectural styles, ie, the pipes & filters, the layered, and the blackboard style. The evaluation was performed using simulations and includes both analysis for each style as well as a comparative analysis bctwecn the styles.", "num_citations": "16\n", "authors": ["622"]}
{"title": "Object acquaintance selection and binding\n", "abstract": " Large object\u2010oriented systems have, at least, four characteristics that complicate object communication, i.e., the system is distributed and contains large numbers, e.g., thousands, of objects, objects need to be reallocated at run\u2010time and objects can be replaced by other objects in order to adapt to the dynamic changes in the system. Traditional object communication is based on sending a message to a receiver object known to the sender of the message. At linking or instantiation time, an object establishes its acquaintances through name/class based binding and uses these objects through its lifetime. If this is too rigid, the software engineer has to implement the binding of objects manually using pointers. In our experiments we found the traditional acquaintance communication semantics too limited and we identified several problems, related to the reusability of objects and selection mechanisms, understandability\u00a0\u2026", "num_citations": "16\n", "authors": ["622"]}
{"title": "From ad-hoc data analytics to dataops\n", "abstract": " The collection of high-quality data provides a key competitive advantage to companies in their decision-making process. It helps to understand customer behavior and enables the usage and deployment of new technologies based on machine learning. However, the process from collecting the data, to clean and process it to be used by data scientists and applications is often manual, non-optimized and error-prone. This increases the time that the data takes to deliver value for the business. To reduce this time companies are looking into automation and validation of the data processes. Data processes are the operational side of data analytic workflow.", "num_citations": "15\n", "authors": ["622"]}
{"title": "Collaborative innovation: a model for selecting the optimal ecosystem innovation strategy\n", "abstract": " Traditionally, innovation initiatives in software-intensive systems companies are viewed as either internal innovation, such as technology driven innovation based on ideas generated within a company, as collaborative innovation where a number of stakeholders co-create value, or as external innovation in which companies adopt strategies to capture and expand on ideas created by other stakeholders. However, and based on longitudinal case study research in six software-intense companies in the embedded systems domain, we see that most innovation strategies involve a mix of internal, collaborative and external elements. Due to the dichotomy in approaches however, companies often fail to select the optimal innovation strategy for the specific innovation challenge at hand. As a result, innovation initiatives suffer and companies and their ecosystem partners cannot fully capitalize on the value created. In this\u00a0\u2026", "num_citations": "15\n", "authors": ["622"]}
{"title": "Aligning innovation ecosystem strategies with internal R&D\n", "abstract": " Innovation based on external cooperation is becoming more and more relevant for many firms. We focus primarily on the innovation ecosystem in which firms live in a symbiotic relationship for co-evolvement around a particular technological platform. Literature in this field often focuses on the external strategy, but neglects aligning the ecosystem with the internal R&D strategy. We define three ecosystem types with different engagement models. With help of four case studies we study four different innovation ecosystem strategies. In addition we use an analysis framework ESTO (ecosystem, strategy, technology platform, organizing) to discuss alignment between the internal and external perspectives of the firm.", "num_citations": "15\n", "authors": ["622"]}
{"title": "Towards agile and beyond: An empirical account on the challenges involved when advancing software development practices\n", "abstract": " During the last decade, the vast majority of software companies have adopted agile development practices. Now companies are looking to move beyond agile and further advance their practices. In this paper, we report on the experiences of a company in the embedded systems domain that is adopting agile practices with the intention to move beyond agile and towards continuous deployment of software. Based on case study research involving group interviews and a web-based survey, we identify challenges in relation to (1) the adoption of agile practices, (2) testing practices, (3) continuous deployment, and (4) customer validation.", "num_citations": "15\n", "authors": ["622"]}
{"title": "Customer-specific teams for agile evolution of large-scale embedded systems\n", "abstract": " For more than a decade, agile methods have shown successful for increasing responsiveness to customer needs. Agile methods advocate close customer collaboration in the early phases of software development. However, research on how to maintain agile ways of working during software evolution is scarce. Based on a qualitative interview study, this paper explores how benefits of agile practices can be established and maintained in the evolution phase of software development. We direct our attention to large-scale software development of embedded systems where development companies struggle to meet the needs of a large customer base. The contribution of this paper is two-fold. First, we propose customer-specific teams as a way to reap the benefits of agile methods in the evolution phase of large-scale software development. Second, we confirm the use of these teams as successful for improving\u00a0\u2026", "num_citations": "15\n", "authors": ["622"]}
{"title": "Going digital: Disruption and transformation in software\u2010intensive embedded systems ecosystems\n", "abstract": " Digitalization is transforming industry to an extent that we have only seen the beginnings of. Across domains, companies experience rapid changes to their existing practices due to new technologies and new entrants that current businesses. While digitalization brings endless opportunities, it comes with challenges that require companies to strategically engage with partners in their surrounding ecosystems. In this paper, we study how companies in the embedded systems domain experience the process of transitioning from product\u2010based companies to businesses where software, data, and artificial intelligence (AI) play an increasingly important role. To manage this, these companies need to evolve their existing ecosystems while at the same time create new ecosystems around new technologies. This involves maintaining existing technologies such as mechanics and electronics while at the same time expanding\u00a0\u2026", "num_citations": "14\n", "authors": ["622"]}
{"title": "Multi-armed bandits in the wild: pitfalls and strategies in online experiments\n", "abstract": " ContextDelivering faster value to customers with online experimentation is an emerging practice in industry. Multi-Armed Bandit (MAB) based experiments have the potential to deliver even faster results with a better allocation of resources over traditional A/B experiments. However, the incorrect use of MAB-based experiments can lead to incorrect conclusions that can potentially hurt the company's business.ObjectiveThe objective of this study is to understand the pitfalls and restrictions of using MABs in online experiments, as well as the strategies that are used to overcome them.MethodThis research uses a multiple case study method with eleven experts across five software companies and simulations to triangulate the data of some of the identified limitations.ResultsThis study analyzes some limitations faced by companies using MAB and discusses strategies used to overcome them. The results are summarized\u00a0\u2026", "num_citations": "14\n", "authors": ["622"]}
{"title": "The online controlled experiment lifecycle\n", "abstract": " Unlike other techniques for learning from customers, online controlled experiments (OCEs) establish an accurate and causal relationship between a change and the impact observed. We show that OCEs help optimize infrastructure needs and aid in project planning and measuring team efforts. We conclude that product development should fully integrate the experiment lifecycle to benefit from the OCEs.", "num_citations": "14\n", "authors": ["622"]}
{"title": "Strategic Ecosystem Management: A multi-case study on challenges and strategies for different ecosystem types\n", "abstract": " In today's business environment, value creation is a collaborative effort in which companies depend on a number of external stakeholders. This implies a shift towards inter-organizational relationships and dependencies between companies. In this shift, companies seek strategies for how to effectively coordinate standardization efforts, share maintenance costs, and engage in open innovation initiatives, while at the same time increase control and accelerate development of differentiating functionality. On the basis of a multi-case study in six B2B software development companies, this paper explores the challenges involved in managing different ecosystem types. Based on the 'Three Layer Product Model' [1], we distinguish between innovation ecosystems, differentiating ecosystems and commoditizing ecosystems. We outline the challenges the companies experience in managing these, and we develop a model in\u00a0\u2026", "num_citations": "14\n", "authors": ["622"]}
{"title": "Three key checklists and remedies for trustworthy analysis of online controlled experiments at scale\n", "abstract": " Online Controlled Experiments (OCEs) are transforming the decision-making process of data-driven companies into an experimental laboratory. Despite their great power in identifying what customers actually value, experimentation is very sensitive to data loss, skipped checks, wrong designs, and many other 'hiccups' in the analysis process. For this purpose, experiment analysis has traditionally been done by experienced data analysts and scientists that closely monitored experiments throughout their lifecycle. Depending solely on scarce experts, however, is neither scalable nor bulletproof. To democratize experimentation, analysis should be streamlined and meticulously performed by engineers, managers, or others responsible for the development of a product. In this paper, based on synthesized experience of companies that run thousands of OCEs per year, we examined how experts inspect online\u00a0\u2026", "num_citations": "13\n", "authors": ["622"]}
{"title": "Toward evidence-based organizations: lessons from embedded systems, online games, and the Internet of Things\n", "abstract": " More and more software-intensive companies are adopting data-driven development. Across domains, companies increasingly collect and use data to support development and decision-making activities. Case studies investigated how companies in three domains transition toward data-driven development practices in which continuous collection and analysis of data inform R&D and management. The companies in the online-games and Internet-of-Things domains perform more advanced data collection and analysis, but these practices are also rapidly gaining momentum in the companies in the embedded-systems domain. A proposed model details the levels that software-intensive companies typically move through as they evolve from an opinion-based to an evidence-based organization, in which data informs all the company's processes.", "num_citations": "13\n", "authors": ["622"]}
{"title": "Continuous integration is not about build systems\n", "abstract": " Keeping the build fast is often stated as an important prerequisite for continuous integration, and is also widely discussed in literature. But which importance does the capacity of the build system actually have in relation to developer behavior? Based on metrics and interview results from a large-scale industry project, we present the factors that according to the developers themselves affect how often they deliver software to the mainline. We show that the developer will deliver less frequently if the delivery processes is time-consuming, if it's too complicated to deliver or if there is no evident value in delivering often to the mainline. Behind these three main themes, we also present a range of sub-categories such as architecture, test activities and administration. The build system capacity is one of several factors which, if not considered, could result in undesired continuous integration behaviors - but other factors should\u00a0\u2026", "num_citations": "13\n", "authors": ["622"]}
{"title": "Strategic ecosystem management: a multi-case study in the B2B domain\n", "abstract": " In today\u2019s business environment, value creation is a collaborative effort in which companies depend on a number of external stakeholders. This implies a shift towards inter-organizational relationships and dependencies between companies. In this shift, companies seek strategies for how to effectively coordinate standardization efforts, share maintenance costs, and engage in open innovation initiatives, while at the same time increase control and accelerate development of differentiating functionality. On the basis of a multi-case study in six B2B software development companies, this paper explores the challenges involved in managing different ecosystem types. Based on the \u2018Three Layer Product Model\u2019 [1], we distinguish between innovation ecosystems, differentiating ecosystems and commoditizing ecosystems. We outline the challenges the companies experience in managing these, and we develop a\u00a0\u2026", "num_citations": "13\n", "authors": ["622"]}
{"title": "Towards continuous validation of customer value\n", "abstract": " While close customer collaboration is highlighted as a distinguishing characteristic in agile development, difficulties arise in large-scale agile development where the product owner can no longer represent the different needs of a large customer base. While most companies use the role of a product owner to represent the customer base, experiences show that prioritizations that are made are far from optimal. Also, once the decision to develop a feature has been taken, companies stop to continuously validate if this feature adds value to the large customer base. As experienced in the case companies we work with, re-prioritization of feature content is difficult once development has started, resulting in R&D investments in development of features that have no proven customer value. In this paper, and based on our experiences from working with five B2B software development companies, we present a conceptual\u00a0\u2026", "num_citations": "13\n", "authors": ["622"]}
{"title": "Bridging software communities through social networking\n", "abstract": " Over the past decade, the advent of social networking has fundamentally altered the landscape of how software is used, designed, and developed. It has expanded how communities of software stakeholders communicate, collaborate, learn from, and coordinate with one another. The guest editors of this special issue describe both the field and the articles they selected for it.", "num_citations": "13\n", "authors": ["622"]}
{"title": "Case studies on analyzing software architectures for usability\n", "abstract": " Studies of software engineering projects reveal that a large number of usability related change requests are made after its deployment. Fixing certain usability problems during the later stages of development has proven to be costly, since some of these changes require changes to the software architecture i.e. this often requires large parts of code to be completely rewritten. Explicit evaluation of usability during architectural design may reduce the risk of building a system that fails to meet its usability requirements and may prevent high costs incurring adaptive maintenance activities once the system has been implemented. In this paper, we demonstrate the use of a scenario based architecture analysis technique for usability we developed, at two case studies.", "num_citations": "13\n", "authors": ["622"]}
{"title": "Guest editorial: The new context for software engineering education and training\n", "abstract": " Guest editorial: the new context for software engineering education and training: Journal of Systems and Software: Vol 74, No 2 ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Journal of Systems and Software Periodical Home Latest Issue Archive Authors Affiliations Award Winners More HomeBrowse by TitlePeriodicalsJournal of Systems and SoftwareVol. , No. Guest editorial: the new context for software engineering education and training article Guest editorial: the new context for software engineering education and training Share on Authors: Hossein Saiedian profile image Hossein Saiedian Electrical Engineering and Computer Science, The University of Kansas, Lawrence, KS Electrical Engineering \u2026", "num_citations": "13\n", "authors": ["622"]}
{"title": "Software architecture-Engineering quality attributes\n", "abstract": " Editorial: software architecture - Engineering quality attributes: Journal of Systems and Software: Vol 66, No 3 ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Journal of Systems and Software Periodical Home Latest Issue Archive Authors Affiliations Award Winners More HomeBrowse by TitlePeriodicalsJournal of Systems and SoftwareVol. , No. Editorial: software architecture - Engineering quality attributes article Editorial: software architecture - Engineering quality attributes Share on Authors: Jan Bosch profile image Jan Bosch Department of Computing Science, University of Groningen, PO Box 800, NL 9700 AV Groningen, The Netherlands Department of Computing Science, University of Groningen, \u2026", "num_citations": "13\n", "authors": ["622"]}
{"title": "Component Evolution in Product-Line Architectures\n", "abstract": " The results of a case study investigating the experiences of component-based software development in the context of a product-line architecture are presented. The case study involves two companies, ie Axis Communications AB and Securitas Larm AB that employ product-line architectures. The paper discusses the differences between the academic and the industrial view on software components, the problems associated with using reusable components in product-line architectures identified in the case study and, finally, a cause analysis.", "num_citations": "13\n", "authors": ["622"]}
{"title": "Language support for component communication in LayOM\n", "abstract": " Components, as well as objects, need to be composed in order to achieve required system functionality. Virtually all components require communication with other components, acquaintances, in the course of their operation. Although the conventional object-oriented model is one of the most appropriate paradigms for component-oriented programming, it provides too little support, ie based on object names or through pointers, for selecting the acquaintances of an object. This lack of expressiveness reduces the reusability and understandability of an object, since the selection of and communication with acquaintances is implicit in the class specification. In this paper, we analyse the relevant dimensions of object communication and propose a solution in the context of our extended object-oriented model, ie the layered object model (LayOM).", "num_citations": "13\n", "authors": ["622"]}
{"title": "Parser Delegation: An Object-Oriented Approach to Parsing\n", "abstract": " Conventional grammar speci cation and parsing is generally done in a monolithic manner, ie the syntax and semantics of a grammar are speci ed in one large speci cation. Although this might be su cient in static environments, a modular approach is required in situations where the syntax or semantics of a grammar speci cation are subject to frequent changes. The problems with monolithic grammars are related to (1) dealing with the complexity,(2) extensibility and (3) reusability. We propose the concept of parser delegation as a solution to these problems. Parser delegation allows one to modularise and reuse grammar speci cations. To achieve this, the notion of a production rule is specialised into (1) overriding,(2) extending and (3) delegating production rule types. To experiment with parser delegation, we have developed D-yacc, a graphical tool for de ning grammars. Parser delegation has been applied for constructing a translator for an experimental language and is currently applied in other domains.", "num_citations": "13\n", "authors": ["622"]}
{"title": "Scale and responsiveness in large-scale software development\n", "abstract": " In large-scale software development, there is typically a conflict between being responsive to individual customers, while at the same time achieving scale in terms of delivering a high number of features to a large customer base. Most often, organizations focus on scale and individual customer requests are viewed as problematic since they add complexity to product variation and version control. Here, we explore the use of customer-specific teams as a means to address this conflict. First, we verify the use of customer-specific teams as successful for improving customer responsiveness, customer satisfaction and feature quality through a case study at Ericsson. Second, we identify three approaches for how to organize feature development, and recommendations on how software development companies can efficiently use these to improve their practices. Third, we observe new business opportunities that arise when\u00a0\u2026", "num_citations": "12\n", "authors": ["622"]}
{"title": "A pattern framework for software quality assessment and tradeoff analysis\n", "abstract": " The earliest design decisions often have a significant impact on software quality and are the most costly to revoke. One of the challenges in architecture design is to reduce the frequency of retrofit problems in software designs; not being able to improve the quality of a system cost effectively, a problem which frequently occurs during late stages. Software architecture assessment is essential in the design of a high quality system. However, assessing the effect of individual design decisions with respect to quality is often complicated by the fact that it is hard to identify exactly how particular qualities and quality factors are improved or impaired by design decisions. In this paper we present a framework that formalizes some of the relationships between software architecture and software quality; it compiles existing design knowledge (quality improving patterns) in a format suitable for architecture assessment. This\u00a0\u2026", "num_citations": "12\n", "authors": ["622"]}
{"title": "SAABNet: Managing qualitative knowledge in software architecture assessment\n", "abstract": " Quantitative techniques have traditionally been used to assess software architectures. We have found that early in development process there is often insufficient quantitative information to perform such assessments. So far the only way to make qualitative assessments about an architecture, is to use qualitative assessment techniques such as peer reviews. The problem with this type of assessment is that they depend on the techniques knowledge of the expert designers who use them. In this paper we introduce a technique, SAABNet (Software Architecture Assessment Belief Network), that provides support to make qualitative assessments of software architectures.", "num_citations": "12\n", "authors": ["622"]}
{"title": "API management challenges in ecosystems\n", "abstract": " The API has become a cornerstone of software ecosystems, providing ways to drive innovation inside and outside the organization. Because of this criticality, we should manage APIs. The purpose of this study is to identify and classify the challenges that organizations evolving into internal ecosystems are facing as they have to deal with APIs. We performed a qualitative research study on three Siemens internal ecosystems with different sizes, technologies, and age. The results reveal that even if we are talking about the API economy, organizations are struggling with different aspects of API management related to Business, Architecture, Process, and Organization. The challenges identified in this paper provide a basis for future research.", "num_citations": "11\n", "authors": ["622"]}
{"title": "Experimentation that matters: a multi-case study on the challenges with A/B testing\n", "abstract": " From having been exclusive for companies in the online domain, feature experiments are becoming increasingly important for software-intensive companies also in other domains. Today, companies run experiments, such as e.g. A/B tests, to optimize product performance and to learn about user behaviors, as well as to guide product development and innovation. However, although experimentation with customers has become an effective mechanism to improve products and increase revenue, companies struggle with how to leverage the results of the experiments they run. In this paper, we study the reasons for this and we identify three key challenges that make feature experimentation a difficult task. Our research reveals the following challenges: (1) the impact of experiments doesn\u2019t scale, (2) business KPIs and team level metrics are not aligned and (3) it is unclear if the available solutions are applicable\u00a0\u2026", "num_citations": "11\n", "authors": ["622"]}
{"title": "Time to Say'Good Bye': Feature Lifecycle\n", "abstract": " With continuous deployment of software functionality, a constant flow of new features to products is enabled. Although new functionality has potential to deliver improvements and possibilities that were previously not available, it does not necessary generate business value. On the contrary, with fast and increasing system complexity that is associated with high operational costs, more waste than value risks to be created. Validating how much value a feature actually delivers, project how this value will change over time, and know when to remove the feature from the product are the challenges large software companies increasingly experience today. We propose and study the concept of a software feature lifecycle from a value point of view, i.e. how companies track feature value throughout the feature lifecycle. The contribution of this paper is a model that illustrates how to determine (1) when to add the feature to a\u00a0\u2026", "num_citations": "11\n", "authors": ["622"]}
{"title": "Pivots and Architectural Decisions: Two Sides of the Same Medal?\n", "abstract": " Software architecture research has gained maturity over the last decades. It focuses on architectural knowledge, documentation, the role of the architect and rationale for the architecture decisions made. It is widely recognized that considering architecture decisions as first class entities helps in designing and maintaining architectures. In the entrepreneurial and new product development space, the lean startup movement is gaining momentum as one of the most notable ways to develop products. During new product development in highly uncertain environments, speed is the most important factor. Speed to get on the market, speed to learn from your customers, but also speed to tackle technological risks. Because the runway for new product development is short, it is important to experiment and make decisions quickly. The pivot plays a crucial role as a business decision for new product development. Both pivots and architectural design decisions can be seen as highly influential aspects for a product. In our research, we investigate what the fields of architecture research and lean startup could learn from each other. We focus our research on the two most important aspects of these movements: the architecture decision and the pivot, and show that they can be seen as two sides of the same medal representing the technical and the business side of the product.", "num_citations": "11\n", "authors": ["622"]}
{"title": "Software product line engineering\n", "abstract": " The competitive landscape of software-intensive companies is changing and intensifying rapidly. The size and complexity of systems is increasing while the speed of innovation is accelerating at the same time. In addition, the balance of power is increasingly shifting to the customer and the ability of the customer to demand products that specifically address that segment or, as an extreme case, customer-specific adaptations to the products.", "num_citations": "11\n", "authors": ["622"]}
{"title": "Staged adoption of software product families\n", "abstract": " Several approaches to implement the concepts of software product families exist, but there is a tendency towards a revolutionary adoption. A revolutionary adoption of software product families is, however, a high\u2010risk undertaking that may easily fail. Even if an iterative, evolutionary adoption is applied, there is a substantial risk that mismatches may develop in the organization due to a sub\u2010optimal adoption approach. Mismatches between the optimal approach and the one currently used by an organization may lead to several problems, such as a high degree of erosion, mismatches between product needs and shared components, organizational \u2018noise\u2019 and inefficient knowledge management. This article (1) presents the problems resulting from the aforementioned mismatch, (2) presents the relevant decision dimensions that define the space of alternatives, (3) discusses the advantages and disadvantages of each\u00a0\u2026", "num_citations": "11\n", "authors": ["622"]}
{"title": "Abstracting object state\n", "abstract": " The termstate'has many different meanings, depending on the context in which it is used. In the implementation phase, it refers to the values of the instance variables of the object; during design, it refers to states used in finite state models or their derivatives. For both interpretations, problems have been identified:(1) the way clients of an object access its state is defined in an ad hoc manner,(2) the conventional object-oriented model provides no means to change the interface of an object dynamically on the basis its state or the type of client accessing it,(3) finite state machine approaches are not uniformly integrated in the object-oriented model nor do they provide sufficient complexity reduction for modelling the dynamic behaviour, and (4) no support is provided for defining active states. In this paper we introduce the concept of abstract object state as a solution to these problems. This concept provides a systematic technique to explicitly define an abstraction of the object state which is placed at the interface of the object. The abstract object state consists of static states, but also of active states which can be seen as time derivatives of static states. We show that the abstract object state provides a more uniform approach to object behaviour specification than do finite state models. The concepts discussed have been implemented in the layered object model ((LOM)-O-AY), an extended object-oriented model which is supported by a translator to C++, an execution environment and an integrated development environment.", "num_citations": "11\n", "authors": ["622"]}
{"title": "Effective online controlled experiment analysis at large scale\n", "abstract": " Online Controlled Experiments (OCEs) are the norm in data-driven software companies because of the benefits they provide for building and deploying software. Product teams experiment to accurately learn whether the changes that they do to their products (e.g. adding new features) cause any impact (e.g. customers use them more frequently). Experiments also help reduce the risk from deploying software by minimizing the magnitude and duration of harm caused by software bugs, allowing software to be shipped more frequently. To make informed decisions in product development, experiment analysis needs to be granular with a large number of metrics over heterogeneous devices and audiences. Discovering experiment insights by hand, however, can be cumbersome. In this paper, and based on case study research at a large-scale software development company with a long tradition of experimentation, we\u00a0\u2026", "num_citations": "10\n", "authors": ["622"]}
{"title": "From requirements to continuous re-prioritization of hypotheses\n", "abstract": " Typically, customer feedback collected in the pre-study, and during the early stages of software development, determines what new features to develop. However, once the decision to develop a new feature is taken, companies stop validating if this feature adds value to its intended customers. Instead, focus is shifted towards developing and implementing the feature. As a result, re-prioritization of feature content is rare, and companies find it difficult to continuously assess and validate feature value. In this paper, we explore the data collection practices in five software development companies. We introduce a model that allows continuous re-prioritization of features. Our model advocates a development approach in which requirements are viewed as hypotheses that need to be continuously validated, and where customer feedback is used to continuously re-prioritize feature content. We identify how the model helps\u00a0\u2026", "num_citations": "10\n", "authors": ["622"]}
{"title": "Architecture Decisions: Who, How, and When?\n", "abstract": " The way in which architectural decisions are made changes when more agile development methods are used. This chapter focuses on architectural decisions and how they are made in industrial settings. From our literature research and experience, we have constructed three axes on which the architectural decision process of projects or companies can be projected. We evaluate this framework with five industrial case studies in which we have participated. In all of the cases, the differences between two points in time (phases) were evaluated. These differences helped us identify what aspects influence the efficiency of the project/company. The presented Triple-A Framework can be used in other projects to help locate places where the architectural process can be improved when the agility of a project changes.", "num_citations": "10\n", "authors": ["622"]}
{"title": "EXPRESSING PRODUCT DIVERSIFICATION\u2014CATEGORIZING AND CLASSIFYING VARIABILITY IN SOFTWARE PRODUCT FAMILY ENGINEERING\n", "abstract": " In a software product family context, software architects design architectures that support product diversification in both space (multiple contexts) and time (changing contexts). Product diversification is based on the concept of variability: a single architecture and a set of components support a family of products. Software product families have to support increasing amounts of variability, thereby making variability engineering a primary concern in software product family development. The first part of this paper (1) suggests a two-dimensional, orthogonal categorization of variability realization techniques and classifies these variability categories into system maturity levels. The second part (2) discusses a case study of an industrial software product family of mobile communication infrastructure for professional markets such as the military. The study categorizes and classifies the variability in this product family according\u00a0\u2026", "num_citations": "10\n", "authors": ["622"]}
{"title": "Virtual versus Physical: The Future?\n", "abstract": " In organisational science, new organisational concepts such as business process reengineering and virtual organisations are developed. These new types of organisation have more advanced and different requirements on their information technology IT support, since the relation between the organisation and its IT system is much tighter for these organisation types. We discuss potential problems of traditional IT approaches in these organisations. As an alternative, we propose a different perspective on the role of IT, ie we view the organisation as consisting of a physical and a virtual layer that both are active, equally important and contain models of each other.", "num_citations": "10\n", "authors": ["622"]}
{"title": "Enable more frequent integration of software in industry projects\n", "abstract": " Based on interviews with 20 developers from two case study companies that develop large-scale software-intensive embedded systems, this paper presents twelve factors that affect how often developers commit software to the mainline. The twelve factors are grouped into four themes: \u201cActivity planning and execution\u201d, \u201cSystem thinking\u201d, \u201cSpeed\u201d and \u201cConfidence through test activities\u201d. Based on the interview results and a literature study we present the EMFIS model, which allows companies to explicate a representation of the organization's current situation regarding continuous integration impediments, and visualizes what the organization must focus on in order to enable more frequent integration of software. The model is used to perform an assessment of the twelve factors, where the ratings from participants representing the developers are summarized separately from ratings from participants representing the\u00a0\u2026", "num_citations": "9\n", "authors": ["622"]}
{"title": "Exploratory testing of large-scale systems\u2013testing in the continuous integration and delivery pipeline\n", "abstract": " In this paper, we show how exploratory testing plays a role as part of a continuous integration and delivery pipeline for large-scale and complex software products. We propose a test method that incorporates exploratory testing as an activity in the continuous integration and delivery pipeline, and is based on elements from other testing techniques such as scenario-based testing, testing in teams and testing in time-boxed sessions. The test method has been validated during ten months by 28 individuals (21 engineers and 7 flight test pilots) in a case study where the system under test is a fighter aircraft. Quantitative data from the case study company shows that the exploratory test teams produced more problem reports than other test teams. The interview results show that both engineers and test pilots were generally positive or very positive when they described their experiences from the case study, and\u00a0\u2026", "num_citations": "9\n", "authors": ["622"]}
{"title": "Continuous integration flows\n", "abstract": " While the agile practice of continuous integration has gained increasing traction in industry since its popularization in the 1990s, there is considerable diversity in terms of actual implementation. The term has been used to describe what may in practice be described as rather different practices, with subsequently varying outcomes. This diversity, typically camouflaged by common terminology, not only prevents effective comparison and therefore learning from industry cases but also hinders practitioners in making informed choices as to how continuous integration is best implemented in their particular context. To facilitate analysis and experience exchange, we present a descriptive model of automated software integration flows. Then, helping software professionals with their ability to proactively and consciously build integration system suitable to their needs, we propose an iterative method for integration flow\u00a0\u2026", "num_citations": "9\n", "authors": ["622"]}
{"title": "Using architecture for multiple levels of access to an ecosystem platform\n", "abstract": " The paper presents a novel ecosystem for software-intensive embedded systems as an alternative to integration-centric software development. A set of necessary qualities is identified for the embedded platform enabling the ecosystem, ie deployability of new functions, maintainability over time, and configurability according to hardware within the product family. The embedded platform must support composability of software from different development stakeholders, such as the original equipment manufacturer, strategic and 3rd-party developers.", "num_citations": "9\n", "authors": ["622"]}
{"title": "Software ecosystems--implications for strategy, business model and architecture\n", "abstract": " Software product line companies increasingly expand their platform outside their organizational boundaries, in effect transitioning to a software ecosystem approach. In this tutorial, we discuss the emerging trend of software ecosystems and provide a overview of the key concepts and implications of adopting a software ecosystem approach. We define the notion of software ecosystems and introduce a taxonomy. Finally, we explore the implications of software ecosystems to the way companies build software.", "num_citations": "9\n", "authors": ["622"]}
{"title": "Cost effective development of usable systems; gaps between HCI and SE\n", "abstract": " Usability is considered an important quality attribute for software systems. To ensure a particular level of usability, a certain amount of time and money have to be invested; however this has proven to be expensive. Most of the costs spent on usability are spent after an initial development eg during maintenance. These high costs often prevent developers from meeting all the usability requirements. The challenge is therefore to cost effectively develop usable software eg minimize the costs & time spent on usability. We believe architecture analysis of usability is an important tool to achieve this. Our experiences with software architecture analysis of usability allowed us to identify a series of problems that explain why usability is not achieved cost effectively in current software development practice.", "num_citations": "9\n", "authors": ["622"]}
{"title": "Architecting Component-based Systems\n", "abstract": " For decades, the software engineering community has identified the reuse of existing software as the most promising approach to addressing certain problems. Although the reuse of software has been rather successful in some areas, if we ignore the reuse of functionality provided by operating systems, database management systems, graphical user interfaces and Web servers, and domain-specific software, reuse has been considerably limited. With the emergence of explicit software architecture design, a highly promising approach to software architecture-driven reuse has evolved. The architecture defines the components of a software system as well as their interactions and can be used to analyze its quality attributes. What, then, is software architecture? Consider this frequently cited definition [1]: The software architecture of a program or computing system is the structure or structures of the system, which\u00a0\u2026", "num_citations": "9\n", "authors": ["622"]}
{"title": "Evolution observations of an industry object-oriented framework\n", "abstract": " Object-oriented frameworks present one of the most successful approaches to developing reusable assets in industry. As all software, frameworks evolve to meet new demands from the customers and the framework users. After a number of customizations of the framework, the situation occurs where the current design is not good enough and there is a need to make a redesign of the framework, ie the framework has structural shortcomings and must evolve. To alleviate or remedy the problem it is important to identify those modules that are likely candidates for restructuring. Recently an approach for identifying potential modules for restructuring in large software systems using product release history was presented [4]. We have adapted the approach to better suit object-oriented frameworks and applied it to an industrial black-box framework product in the telecommunication domain. The investigation covers four\u00a0\u2026", "num_citations": "9\n", "authors": ["622"]}
{"title": "Three evaluation methods for object-oriented frameworks evolution-application, assessment and comparison\n", "abstract": " Object-oriented framework technology has become a common reuse technology in objectoriented software development As with all software, frameworks tend to evolve. Once the framework has been deployed, new versions of a framework cause high maintenance cost for the products built with the framework. This fact in combination with the high costs of developing and evolving an application framework make it important to have controlled and predictable evolution of the framework\u2019s functionality and costs. We present three methods 1) Evolution Identification Using Historical Information, 2) Stability Assessment and 3) Distribution of Development Effort which have been applied to between one to three different frameworks, both in the proprietary and commercial domain. The methods provide management with information which will make it possible to make better and well-informed decisions about the framework\u2019s evolution, especially with respect to the following issues; identification of evolution-prone modules, framework deployment, change impact analysis, benchmarking and requirements management. Finally, the methods are compared to each other with respect to costs and perceived be benefits.", "num_citations": "9\n", "authors": ["622"]}
{"title": "Abstract object state in real-time control\n", "abstract": " Traditionally, finite state machines based approaches are used in real-time object-oriented systems development for modelling the dynamic behaviour of an object. Finite state machines based approaches, however, suffer from several problems when used for modelling large and complex objects. As an alternative, an extended object model, LAYOM and an associated modelling approach is proposed aiming to solve the aforementioned problems and other problems related to object state.", "num_citations": "9\n", "authors": ["622"]}
{"title": "Requirement Prioritization with Quantitative Data-a case study\n", "abstract": " Feature content in system releases tends to be prioritized using limited amounts of qualitative user input and based on the opinions of those in product management. This leads to several problems including the wasteful allocation of R&D resources. In this paper, we present the results of our efforts to collect quantitative customer input before the start of development using a mock-up for a mobile application developed by Sony Mobile Communications Inc. Our research shows that (1) product managers change their prioritization when quantitative data is presented to them; (2) product managers change their prioritization which is converged to the prioritization indicated by the quantitative data (3) the quantitative data is regarded as beneficial by the product managers.", "num_citations": "8\n", "authors": ["622"]}
{"title": "Domain-specific languages for a changing world\n", "abstract": " Domain-specific languages (DSLs) provide an excellent means to create applications in a particular domain in a highly efficient manner. It reduces code size, increases reusability and allows non-software engineers to construct software systems using their domain knowledge. However, design of a DSL requires a solid understanding of the domain for which the DSL is constructed. In this paper, we suggest the use of the, rather philosophical, notion of language games to identify the relevant domain concepts. Language games relate the use of ordinary language to its pragmatic context. Domain-specific concepts can be derived by comparing the different meanings of terms in different language games. The second topic treated in this paper is the evolving understanding of the domain experts and the consequent demand for extensibility of DSLs. Since the language games develop, the DSL mirroring the language game, should be extended and existing concepts may need to change semantics. Language extensibility is notoriously difficult to implement with traditional compiler technology. Therefore we discuss the notion of delegating compiler objects as a means to achieve extensible, flexible and reusable specification of domain-specific languages.", "num_citations": "8\n", "authors": ["622"]}
{"title": "Architectural design support for composition and superimposition\n", "abstract": " The ever growing size and complexity of software systems is making it increasingly harder to build systems that meet both current and future requirements. During architecture design, many important design decisions are made. In this paper we present an architecture design notation based on UML activity diagrams. The notation allows for the specification of architecture fragments and supports composition of these fragments as well as their superimposition on each other. This notation allows us to make various compositions of architecture fragments (reflecting design decision alternatives) to adapt the architecture to new requirements. We have found that our notation is very suitable for modelling separate concerns at the architectural level.", "num_citations": "8\n", "authors": ["622"]}
{"title": "Automating software architecture assessment\n", "abstract": " In this paper we present SAABNet (Software Architecture Assessment Belief network), an approach to automating the process of performing software architecture assessment. We have found that SAABNet is especially useful early in the development process when measurable assets are scarce. In this stage of development software architects have little more than their own experience to rely on. SAABNet tries to capture this experience and use it to help architects perform assessments.", "num_citations": "8\n", "authors": ["622"]}
{"title": "Data labeling: an empirical investigation into industrial challenges and mitigation strategies\n", "abstract": " Labeling is a cornerstone of supervised machine learning. However, in industrial applications, data is often not labeled, which complicates using this data for machine learning. Although there are well-established labeling techniques such as crowdsourcing, active learning, and semi-supervised learning, these still do not provide accurate and reliable labels for every machine learning use case in the industry. In this context, the industry still relies heavily on manually annotating and labeling their data. This study investigates the challenges that companies experience when annotating and labeling their data. We performed a case study using a semi-structured interview with data scientists at two companies to explore their problems when labeling and annotating their data. This paper provides two contributions. We identify industry challenges in the labeling process, and then we propose mitigation strategies\u00a0\u2026", "num_citations": "7\n", "authors": ["622"]}
{"title": "Data driven development: Challenges in online, embedded and on-premise software\n", "abstract": " For more than a decade, data driven development has attracted attention as one of the most powerful means to improve effectiveness and ensure value delivery to customers. In online companies, controlled experimentation is the primary technique to measure how customers respond to variants of deployed software. In B2B companies, an interest for data driven development is rapidly emerging and experiments are run on selected instances of the system or as comparisons of previously computed data to ensure quality, improve configurations and explore new value propositions. Although the adoption of data driven development is challenging in general, it is especially so for embedded systems companies and for companies developing on-premise software solutions. Due to complex systems with hardware dependencies, safety-critical functionality and strict regulations, these companies have longer\u00a0\u2026", "num_citations": "7\n", "authors": ["622"]}
{"title": "Test activities in the continuous integration and delivery pipeline\n", "abstract": " Based on 25 interviews with participants from four case study companies that develop large\u2010scale software embedded systems, this paper presents the Test Activity Stakeholders (TAS) model. The TAS model shows how the continuous integration and delivery pipeline can be designed to include test activities that support four stakeholder interests: \u201cCheck changes,\u201d \u201cSecure stability,\u201d \u201cMeasure progress,\u201d and \u201cVerify compliance.\u201d The model is developed to show how each of the stakeholder interests are best supported by unit/component tests or system tests, by automated testing or manual testing and by tests executed in simulated environments or on real hardware. The TAS model may serve as a starting point for companies when evaluating and designing their continuous integration and delivery pipeline. The validation of the TAS model included twelve individuals from three case study companies. The validation\u00a0\u2026", "num_citations": "7\n", "authors": ["622"]}
{"title": "No More Bosses?\n", "abstract": " Organizations are increasingly adopting alternative organizational models to circumvent the challenges of traditional hierarchies. In these alternative models, organizations have leaders instead of the traditional boss and teams operate using self-management and peer-to-peer advice processes. Although the adoption of these models have primarily been seen in smaller companies and startups, examples of long-established organizations that have adopted these models to restructure themselves and move away from their traditionally slow hierarchies are starting to appear. In this paper, we explore how seven large software-intensive companies in the embedded systems domain are adopting principles of non-hierarchical organizations in order to increase empowerment. Based on our empirical findings, we provide recommendations for how to manage this transformation and we develop a model that\u00a0\u2026", "num_citations": "7\n", "authors": ["622"]}
{"title": "Barriers and enablers for shortening software development lead-time in mechatronics organizations: A case study\n", "abstract": " The automotive industry adopts various approaches to reduce the production lead time in order to be competitive on the market. Due to the increasing amount of in-house software development, this industry gets new opportunities to decrease the software development lead-time. This can have a significant impact on decreasing time to market and fewer resources spent in projects. In this paper we present a study of software development areas where we perceived barriers for fast development and where we have identified enablers to overcome these barriers. We conducted a case study at one of the vehicle manufacturers in Sweden using structured interviews. Our results show that there are 21 barriers and 21 corresponding enablers spread over almost all phases of software development.", "num_citations": "7\n", "authors": ["622"]}
{"title": "The CIViT model in a nutshell: Visualizing testing activities to support continuous integration\n", "abstract": " Nowadays, innovations in many products ranging from customer electronics to high-end industry electric/electronic components are driven by software. Thus, new or extended features to software and mechatronic products can be realized and deployed to the market much faster. While the use of software enables an enormous flexibility, mastering the ever-growing complexity of the resulting products to meet the quality goals required for the market is getting more and more challenging. Continuous development combined with continuous testing is a successful method that actively incorporates the customer to get feedback for the feature to be deployed early, and thus, product owners, developers, and testers can collaborate more effectively to meet the market\u2019s needs. From literature, setting up such an agile development process is clear; the individual situation in terms of organization, processes, and\u00a0\u2026", "num_citations": "7\n", "authors": ["622"]}
{"title": "Archetypical approaches of fast software development and slow embedded projects\n", "abstract": " This paper describes the problem context of software development for mass-produced embedded systems, with distinguishing factors such as the co-design of software and hardware, strong focus on manufacturing aspects, supplier involvement and safety-critical functionality. In this context there is a need for a holistic model to explain the failures and successes industrial projects, where just investigating a single dimension, e.g. chosen ways-of-working or architecture is not sufficient. The main contribution is a holistic model consisting of five archetypical approaches to embedded software development, based on a mapping study over industrial cases in literature. The approaches range from \"traditional\" stage-gate projects focusing on product qualities and large integration efforts, to fast development in short loops by autonomous teams based on a compos able software platform. The model aligns the processes\u00a0\u2026", "num_citations": "7\n", "authors": ["622"]}
{"title": "Software Product Lines: Going Beyond: 14th International Conference, SPLC 2010, Jeju Island, South Korea, September 13-17, 2010. Proceedings\n", "abstract": " This volume constitutes the refereed proceedings of the 14th International Software Product Line Conference, SPLC 2010, held on Jeju Island, South Korea, in September 2010.", "num_citations": "7\n", "authors": ["622"]}
{"title": "Cost Effective Development of Usable Systems: Gaps between HCI and Software Architecture Design\n", "abstract": " A software product with poor usability is likely to fail in a highly competitive market; therefore software developing organizations are paying more and more attention to ensuring the usability of their software. Practice, however, shows that product quality (which includes usability among others) is not that high as it could be. Studies of software projects (Pressman, 2001) reveal that organizations spend a relative large amount of money and effort on fixing usability problems during late stage development. Some of these problems could have been detected and fixed much earlier. This avoidable rework leads to high costs and because during development different tradeoffs have to be made, for example between cost and quality leads to systems with less than optimal usability. This problem has been around for a couple of decades especially after software engineering (SE) and human computer interaction (HCI\u00a0\u2026", "num_citations": "7\n", "authors": ["622"]}
{"title": "Adopting software product lines: approaches, artefacts and organization\n", "abstract": " Software product lines have received considerable adoption in the software industry and prove to be a very successful approach to intra-organizational software reuse. Contemporary literature on the subject, however, often presents only a single approach towards adopting a software product line. In this paper, we present an overview of different adoption approaches, different maturity levels for product line artefacts and different organizational models.", "num_citations": "7\n", "authors": ["622"]}
{"title": "Modelling Data Pipelines\n", "abstract": " Data is the new currency and key to success. However, collecting high-quality data from multiple distributed sources requires much effort. In addition, there are several other challenges involved while transporting data from its source to the destination. Data pipelines are implemented in order to increase the overall efficiency of data-flow from the source to the destination since it is automated and reduces the human involvement which is required otherwise.Despite existing research on ETL (Extract-Transform-Load) and ELT (Extract-Load-Transform) pipelines, the research on this topic is limited. ETL/ELT pipelines are abstract representations of the end-to-end data pipelines. To utilize the full potential of the data pipeline, we should understand the activities in it and how they are connected in an end-to-end data pipeline. This study gives an overview of how to design a conceptual model of data pipeline which can be\u00a0\u2026", "num_citations": "6\n", "authors": ["622"]}
{"title": "Automotive a/b testing: Challenges and lessons learned from practice\n", "abstract": " Over the past 15 years, A/B testing has been a critical tool for accurate prioritization of development efforts in online and web-facing companies. As automotive companies progress on their digitalization process, A/B testing and other experimentation techniques start to be adopted. However, specific characteristics of the automotive software industry create additional challenges to the successful adoption of A/B testing. Recently, research has been conducted to investigate the challenges and opportunities for experimentation techniques in the automotive and more generally in the embedded systems domain. However, despite the collaboration with industry, previous research was based on either hypothesized or toy scenarios in companies seeking, but not yet running experimentation. Utilizing a case study method, we investigate the challenges of adopting A/B testing in two large-scale automotive companies that\u00a0\u2026", "num_citations": "6\n", "authors": ["622"]}
{"title": "Developing ML/DL models: A design framework\n", "abstract": " Artificial Intelligence is becoming increasingly popular with organizations due to the success of Machine Learning and Deep Learning techniques. Using these techniques, data scientists learn from vast amounts of data to enhance behaviour in software-intensive systems. Despite the attractiveness of these techniques, however, there is a lack of systematic and structured design process for developing ML/DL models. The study uses a multiple-case study approach to explore the different activities and challenges data scientists face when developing ML/DL models in software-intensive embedded systems. In addition, we have identified seven different phases in the proposed design process leading to effective model development based on the case study. Iterations identified between phases and events which trigger these iterations optimize the design process for ML/DL models. Lessons learned from this study\u00a0\u2026", "num_citations": "6\n", "authors": ["622"]}
{"title": "Data management challenges for deep learning\n", "abstract": " Deep learning is one of the most exciting and fastgrowing techniques in Artificial Intelligence. The unique capacity of deep learning models to automatically learn patterns from the data differentiates it from other machine learning techniques. Deep learning is responsible for a significant number of recent breakthroughs in AI. However, deep learning models are highly dependent on the underlying data. So, consistency, accuracy, and completeness of data is essential for a deep learning model. Thus, data management principles and practices need to be adopted throughout the development process of deep learning models. The objective of this study is to identify and categorise data management challenges faced by practitioners in different stages of end-to-end development. In this paper, a case study approach is employed to explore the data management issues faced by practitioners across various domains when they use real-world data for training and deploying deep learning models. Our case study is intended to provide valuable insights to the deep learning community as well as for data scientists to guide discussion and future research in applied deep learning with real-world data.", "num_citations": "6\n", "authors": ["622"]}
{"title": "Make up your mind: towards a comprehensive definition of customer value in large scale software development\n", "abstract": " Today, connected software-intensive products permeate virtually every aspect of our lives and the amount of customer and product data that is collected by companies across domains is exploding. In revealing what products we use, when and how we use them and how the product performs, this data has the potential to help companies optimize existing products, prioritize among features and evaluate new innovations. However, despite advanced data collection and analysis techniques, companies struggle with how to effectively extract value from the data they collect and they experience difficulties in defining what values to optimize for. As a result, the impact of data is low and companies run the risk of sub-optimization due to misalignment of the values they optimize for. In this paper, and based on multi-case study research in embedded systems and online companies, we explore data collection and analysis practices in companies in the embedded systems and in the online domain. In particular, we look into how the value that is delivered to customers can be expressed as a value function that combines different factors that are of importance to customers. By expressing customer value as a value function, companies have the opportunity to increase their awareness of key value factors and they can establish an agreement on what to optimize for. Based on our findings, we see that companies in the embedded systems domain suffer from vague and confusing value functions while companies in the online domain use simple and straightforward value functions to inform development. Ideally, and as proposed in this paper, companies should\u00a0\u2026", "num_citations": "6\n", "authors": ["622"]}
{"title": "Busting software architecture beliefs: A survey on success factors in architecture decision making\n", "abstract": " As software development changes, also the myths and beliefs around it come and go. In different communities, different beliefs are kept, usually strengthened by success or failure stories. In this research, we study the beliefs surrounding software architecture. The beliefs range from the amount of effort needed for architecture documentation, to the size of the team or the persons responsible for making the architectural decisions. Most beliefs are based on the idea that the outcome of the project is highly dependent on the methods used during the design and development of software. We conducted a survey with 39 architects where we evaluated 54 architectural decisions. In this survey, we assessed the way in which decisions were made, the success factors of the decisions, as well as the properties of the projects. We conduct statistical analysis in order to evaluate some of the beliefs that currently exist in software\u00a0\u2026", "num_citations": "6\n", "authors": ["622"]}
{"title": "Risk based testing for software product line engineering\n", "abstract": " The variability of product lines increases over time thereby leading to an increasing effort for testing. Since the available time for test activities is limited an efficiency improvement is needed to ensure that products have sufficient quality.", "num_citations": "6\n", "authors": ["622"]}
{"title": "Speed and innovation through architecture.\n", "abstract": " Speed and Innovation through Architecture Page 1 Speed and Innovation through Architecture Jan Bosch Professor of Software Engineering Chalmers University of Technology Gothenburg, Sweden. www.janbosch.com November 2011 Landelijk Architectuur Congres 2011 Page 2 \u201cIf you are not moving at the speed of the marketplace you\u2019re already dead \u2013 you just haven\u2019t stopped breathing yet\u201d Jack Welch Page 3 Three Key Take-Aways \u2022 Increasing SPEED trumps ANY other improvement R&D can provide to the company \u2013 the goal is continuous deployment of new functionality \u2022 Software engineering is at an inflection point \u2013 from \u201cintegration-oriented\u201d to \u201ccomposition-oriented\u201d software engineering \u2022 Software architecture is central in allowing for independent, continuous deployment to customers Page 4 Overview \u2022 Vem \u00e4r jag? Wie ben ik? Who am I? \u2022 Trends in Software: Need for Speed \u2022 Innovation Experiment \u2026", "num_citations": "6\n", "authors": ["622"]}
{"title": "Software product families: towards compositionality\n", "abstract": " Software product families have become the most successful approach to intra-organizational reuse. Especially in the embedded systems industry, but also elsewhere, companies are building rich and diverse product portfolios based on software platforms that capture the commonality between products while allowing for their differences. Software product families, however, easily become victims of their own success in that, once successful, there is a tendency to increase the scope of the product family by incorporating a broader and more diverse product portfolio. This requires organizations to change their approach to product families from relying on a pre-integrated platform for product derivation to a compositional approach where platform components are composed in a product-specific configuration.", "num_citations": "6\n", "authors": ["622"]}
{"title": "Feature-based product derivation: Composing features\n", "abstract": " We have observed that large software systems are increasingly defined in terms of the features they implement. Consequently, there is a need to express the commonalities and variability between products of a product family in terms of features. Unfortunately, technology support for the early aspect of a feature is currently limited to the requirements level. There is a need to extend this support to the design and implementation level as well. Existing separation of concerns technologies, such as AOP and SOP, may be of use here. However, features are not first class citizens in these paradigms.To address this and to explore the problems and issues with respect to features and feature composition, we have formalized the notion of features in a feature model. The feature model relates features to a component role model. Using our model and a composition algorithm, we can select a number of base components and a number of features from a software product family and derive a product. As a proof of concept we have experimented extensively with a prototype Java implementation of our approach.", "num_citations": "6\n", "authors": ["622"]}
{"title": "Software Reuse: Methods, Techniques, and Tools: 8th International Conference, ICSR 2004, Madrid, Spain, July 5-9, 2004, Proceedings\n", "abstract": " Afterthree decadesofresearch andpractice, reuse ofexistingsoftwareartefactsremains the most promising approach to decreasing effort for software development and evo-tion, increasing quality of software artefacts and decreasing time to market of software products. Over time, we have seen impressive improvements, in extra-organizational reuse, eg COTS, aswellasinintra-organizationalreuse, eg softwareproductfamilies. Despite the successes that we, as a community, have achieved, several challenges remain to be addressed. The theme for this eighth meeting of the premier international conference on software reuse is the management of software variability for reusable software. Allreusablesoftwareoperatesinmultiplecontextsandhastoaccommodatethe differencesbetweenthesecontextsthroughvariation. Inmodernsoftware, thenumberof variation points may range in the thousands with an even larger number of dependencies between these points. Topics addressing the theme include the representation, design, assessment and evolution of software variability. The proceedings that you are holding as you read this report on the current state--the-art in software reuse. Topics covered in the proceedings include software variability, testing of reusable software artefacts, feature modeling, aspect-oriented software de-lopment, composition of components and services, model-based approaches and several other aspects of software reuse. May 2004 Jan Bosch Charles Krueger Organizing Committee General Chair Kyo C. Kang, Pohang University of Science and Technology, Korea Program Co-chairs Jan Bosch, University of Groningen, The\u00a0\u2026", "num_citations": "6\n", "authors": ["622"]}
{"title": "Generative and Component-Based Software Engineering: First International Symposium, GCSE'99, Erfurt, Germany, September 28-30, 1999. Revised Papers\n", "abstract": " In the past two years, the Smalltalk and Java in Industry and Education C-ference (STJA) featured a special track on generative programming, which was organized by the working group\\Generative and Component-Based Software Engineering\" of the\\Gesellschaft fur \u0308 Informatik\" FG 2.1. 9\\Object-Oriented Software Engineering.\" This track covered a wide range of related topics from domain analysis, software system family engineering, and software product-nes, to extendible compilers and active libraries. The talks and keynotes directed towards this new software engineering paradigm received much attention and-terest from the STJA audience. Hence the STJA organizers suggested enlarging this track, making it more visible and open to wider, international participation. This is how the GCSE symposium was born. The rst GCSE symposium attracted 39 submissions from all over the world. This impressive number demonstrates the international interest in generative programming and related elds. After a careful review by the program comm-tee, fteen papers were selected for presentation. We are very grateful to the members of the program committee, all of them renowned experts, for their dedication in preparing thorough reviews of the submissions. Special thanks go to Elke Pulvermuller \u0308 and Andreas Speck, who proposed and organized a special conference event, the Young Researches Workshop (YRW). This workshop provided a unique opportunity for young scientists and Ph. D.", "num_citations": "6\n", "authors": ["622"]}
{"title": "Experiences in Object-Oriented Re-Engineering\n", "abstract": " The ability to reengineer object-oriented systems has become a vital matter in today\u2019s software industry. Early adopters of the object-oriented programming paradigm are now facing the problem of transforming their object-oriented \u2018legacy\u2019 systems into full-fledged frameworks. Dealing with programs exceeding 10,000 lines of badly documented code definitely requires support from methodologies as well as tools.", "num_citations": "6\n", "authors": ["622"]}
{"title": "An Object-Oriented Framework for Measurement Systems\n", "abstract": " Measurement systems are of increasing importance for manufacturing, due to high automation level of production processes. Although most measurement systems have much in common and are expensive to construct, these systems are often developed from scratch, hardly reusing the available designs and implementations. To address this, we have designed and implemented an object-oriented framework for the domain of measurement systems that can be used as the core of measurement systems. Evaluations of the framework show that it captures the main concepts in the domain and that the required extensions for individual applications are limited. In this paper, a number of example framework instantiations are presented. The lessons we learned during the framework design and an evaluation of the object-oriented modelling paradigm are presented.", "num_citations": "6\n", "authors": ["622"]}
{"title": "Modelling causal connections between objects\n", "abstract": " The conventional object-oriented paradigm provides client/server message passing as the primary means of interaction between objects. Although this fits well in those situations where one objects requests a service from another object, there exist other situations where one object, the observer, is depending on state-changes or actions occurring at an object, the target. In those situations, the OOP requires the target object to notify the observer objects, despite the fact that the target object does not benefit from the interaction. This inverted interaction scheme leads to problems such as increased coupling and decreased understandability, maintainability and reusability of the resulting classes. When analysing object interactions, one can identify four roles, the benefitor, the establisher, the sender and the receiver. The aforementioned problems result from the fact that in client/server interaction, the benefitor and the sender are not always the same object. To address these problems, we propose the notion of causal connections, an alternative interaction mechanism, complementing the traditional client/server interaction. Two implementations of causal connections are described; one in the context of C++ and another using the layered object model. It is shown that causal connections solve the identified problems.", "num_citations": "6\n", "authors": ["622"]}
{"title": "Statistical Models for the Analysis of Optimization Algorithms with Benchmark Functions\n", "abstract": " Frequentist statistical methods, such as hypothesis testing, are standard practices in studies that provide benchmark comparisons. Unfortunately, these methods have often been misused, e.g., without testing for their statistical test assumptions or without controlling for family-wise errors in multiple group comparisons, among several other problems. Bayesian Data Analysis (BDA) addresses many of the previously mentioned shortcomings but its use is not widely spread in the analysis of empirical data in the evolutionary computing community. This paper provides three main contributions. First, we motivate the need for utilizing Bayesian data analysis and provide an overview of this topic. Second, we discuss the practical aspects of BDA to ensure that our models are valid and the results are transparent. Finally, we provide five statistical models that can be used to answer multiple research questions. The online\u00a0\u2026", "num_citations": "5\n", "authors": ["622"]}
{"title": "Digital for real: A multicase study on the digital transformation of companies in the embedded systems domain\n", "abstract": " With digitalization and with technologies such as software, data, and artificial intelligence, companies in the embedded systems domain are experiencing a rapid transformation of their conventional businesses. While the physical products and associated product sales provide the core revenue, these are increasingly being complemented with service offerings, new data\u2010driven services, and digital products that allow for continuous value creation and delivery to customers. However, although there is significant research on digitalization and digital transformation, few studies highlight the specific needs of embedded systems companies and what it takes to transform from a traditional towards a digital company within business domains characterized by high complexity, hardware dependencies, and safety\u2010critical system functionality. In this paper, we capture the difference between what constitutes a traditional and a\u00a0\u2026", "num_citations": "5\n", "authors": ["622"]}
{"title": "AI on the Edge: Architectural Alternatives\n", "abstract": " Since the advent of mobile computing and IoT, a large amount of data is distributed around the world. Companies are increasingly experimenting with innovative ways of implementing edge/cloud (re)training of AI systems to exploit large quantities of data to optimize their business value. Despite the obvious benefits, companies face challenges as the decision on how to implement edge/cloud (re)training depends on factors such as the task intent, the amount of data needed for (re)training, edge-to-cloud data transfer, the available computing and memory resources. Based on action research in a software-intensive embedded systems company where we study multiple use cases as well as insights from our previous collaborations with industry, we develop a generic framework consisting of five architectural alternatives to deploy AI on the edge utilizing transfer learning. We validate the framework in four additional\u00a0\u2026", "num_citations": "5\n", "authors": ["622"]}
{"title": "Experimentation for business-to-business mission-critical systems: a case study\n", "abstract": " Continuous experimentation (CE) refers to a group of practices used by software companies to rapidly assess the usage, value and performance of deployed software using data collected from customers and the deployed system. Despite its increasing popularity in the development of web-facing applications, CE has not been discussed in the development process of business-to-business (B2B) mission-critical systems.", "num_citations": "5\n", "authors": ["622"]}
{"title": "Automated optimization of software parameters in a long term evolution radio base station\n", "abstract": " Radio network optimization is concerned with the configuration of radio base station parameters in order to achieve the desired level of service quality in addition to many other differentiating technical factors. Mobile network operators have different physical locations, levels of traffic profiles, number of connected devices, and the desired quality of service. All of these conditions make the problem of optimizing the parameters of a radio base station specific to the operator's business goals. The high number of calibration parameters and the complex interaction between them make the system behave as a black-box model for any practical purpose. The computation of relevant operator metrics is often stochastic, and it can take several minutes to compute the effect of changing a single, making it impractical to optimize systems with approaches that require a large number of iterations. Operators want to optimize their\u00a0\u2026", "num_citations": "5\n", "authors": ["622"]}
{"title": "Optimization experiments in the continuous space\n", "abstract": " Online controlled experiments are extensively used by web-facing companies to validate and optimize their systems, providing a competitive advantage in their business. As the number of experiments scale, companies aim to invest their experimentation resources in larger feature changes and leave the automated techniques to optimize smaller features. Optimization experiments in the continuous space are encompassed in the many-armed bandits class of problems. Although previous research provides algorithms for solving this class of problems, these algorithms were not implemented in real-world online experimentation problems and do not consider the application constraints, such as time to compute a solution, selection of a best arm and the estimation of the mean-reward function. This work discusses the online experiments in context of the many-armed bandits class of problems and provides\u00a0\u2026", "num_citations": "5\n", "authors": ["622"]}
{"title": "Delivering customer value in the age of autonomous, continuously evolving systems\n", "abstract": " The last century has seen unprecedented improvements in the quality of the human condition and technology is at the heart of this progress. Now we are experiencing an even bigger leap as we move towards a new level of digitization and automation. The fuel of this emerging Internet of Things reality is software and the key challenge is to continuously deliver value to customers. To deliver on this, organizations need to adopt a novel approach, evidence-based development, where data-driven decisions by R&D teams are complemented by automated experimentation by families of deployed systems. The keynote first introduces the aforementioned developments, then discusses the key areas of speed, data and ecosystems and finally presents the implications for organizations that seek to continuously deliver value to their customers.", "num_citations": "5\n", "authors": ["622"]}
{"title": "Analyzing software architectures for usability\n", "abstract": " Studies of software engineering projects reveal that a large number of usability related change requests are made after its deployment. Fixing certain usability problems during the later stages of development has proven to be costly, since some of these changes require changes to the software architecture ie this often requires large of code to be completely rewritten. Explicit evaluation of usability during architectural design may reduce the risk of building a system that fails to meet its usability requirements and may prevent high costs incurring adaptive maintenance activities once the system has been implemented. In this paper, we demonstrate the use of a scenario based architecture analysis technique for usability we developed, at two case studies.", "num_citations": "5\n", "authors": ["622"]}
{"title": "Role-based component engineering\n", "abstract": " COTS (Commercials-Off-The-Shelf) components have been a long-standing software engineering dream [1]. Several technologies have tried to fulfill this dream but most of them, so far, have failed, even if there have been some successes (eg visual basic components). From time to time, a promising new technique appears. The most successful technique to date has been Object Orientation (OO), but even this technique has failed to deliver truly reusable COTS components. In this chapter we investigate a promising extension of OO (ie role-based component engineering). Role-based component engineering extends the traditional OO component paradigm to provide a more natural support for modeling component collaborations. The idea of role-based components is that the public interface is split into smaller interfaces which model different roles. Users of a component can communicate with the component through the smaller role interfaces instead of using the full interface. In this chapter we will examine why roles are useful, discuss methods and techniques for using them and discuss how they can be used to make better OO Frameworks.", "num_citations": "5\n", "authors": ["622"]}
{"title": "Generative and Component-Based Software Engineering: Third International Conference, GCSE 2001, Erfurt, Germany, September 9-13, 2001, Proceedings\n", "abstract": " The size, complexity, and integration level of software systems is increasing c-stantly. Companies in all domains identify that software de? nes the competitive edge of their products. These developments require us to constantly search for new approaches to increase the productivity and quality of our software-velopment and to decrease the cost of software maintenance. Generative and component-based technologies hold considerablepromise with respect to achi-ing these goals. GCSE 2001 constituted another important step forward and provided a platform for academic and industrial researchers to exchange ideas. These proceedings represent the third conference on generative and com-nent-based software engineering. The conference originated as a special track on generative programming from the Smalltalk and Java in Industry and-ucation Conference (STJA), organized by the working group \u201cGenerative and Component-Based Software Engineering\u201d of the \u201cGesellschaft fur \u0308 Informatik\u201d FG 2.1. 9 \u201cObject-Oriented Software Engineering.\u201d However, the conference has evolved substantially since then, with its own, independent stature, invited speakers, and, most importantly, a stable and growing community. This year\u2019s conference attracted 43 submissions from all over the world,-dicating the broad, international interest in the research? eld. Based on careful review by the program committee, 14 papers were selected for presentation. I would like to thank the members of the program committee, all renowned-perts, for their dedication in preparing thorough reviews of the submissions.", "num_citations": "5\n", "authors": ["622"]}
{"title": "Utility Aspects on Strategic IT-Integration Issues\n", "abstract": " The traditional industrial society is currently in a rapid transition towards a society where information and knowledge are prime assets. Information technologv is the main enabler for this social change. However, in addition to an enabler, information technologv also is an integrator. Traditionally, the dtxerent producers of products, utilities and services had their own infrastructure towards the tonsumer. In the future, the leve1 of interaction between the provider and tustomer Will be so advanced, that no single producer, especially not the utility provider, can aflord to construct the required intastructure independently. Alternatively, multiple interested parties need to jointly develop a shared infrastructure that fulfils the combined requirements. Utility providers, operating in an increasingly global and dynamit market, can earn a competitive advantage by proactively experiment and install an inzastructure to provide additional functionality to the tustomer. Otherwise, the advantages of decreased production cost and increased tustomer satisfaction Will be exploited Iy competitors. This paper discusses the efforts of EnerSearch, a subsidiary of Sydkraft and IBM, in exploiting information technologv in two major projects. The Integrated Distribution Automation & Management (IDAM) project aims at improving the management of the utility information needs, whereas the Information, Society, Energy, System (ISES) project is more general, with the intention to provide a platform for implementing and assessing new services, products and trading. The knowledge obtained in these ongoing projects alreadyproves to be highly valuable for determining fiture strategies\u00a0\u2026", "num_citations": "5\n", "authors": ["622"]}
{"title": "Real-time End-to-End Federated Learning: An Automotive Case Study\n", "abstract": " With the development and the increasing interests in ML/DL fields, companies are eager to utilize these methods to improve their service quality and user experience. Federated Learning has been introduced as an efficient model training approach to distribute and speed up time-consuming model training and preserve user data privacy. However, common Federated Learning methods apply a synchronized protocol to perform model aggregation, which turns out to be inflexible and unable to adapt to rapidly evolving environments and heterogeneous hardware settings in real-world systems. In this paper, we introduce an approach to real-time end-to-end Federated Learning combined with a novel asynchronous model aggregation protocol. We validate our approach in an industrial use case in the automotive domain focusing on steering wheel angle prediction for autonomous driving. Our results show that asynchronous Federated Learning can significantly improve the prediction performance of local edge models and reach the same accuracy level as the centralized machine learning method. Moreover, the approach can reduce the communication overhead, accelerate model training speed and consume real-time streaming data by utilizing a sliding training window, which proves high efficiency when deploying ML/DL components to heterogeneous real-world embedded systems.", "num_citations": "4\n", "authors": ["622"]}
{"title": "Continuous experimentation for software organizations with low control of roadmap and a large distance to users: An exploratory case study\n", "abstract": " With the increasing popularity of A/B testing and other experimentation practices in web systems, companies from a range of different domains are starting to look at continuous experimentation as a way to guide product development and feature prioritization. Research in continuous experimentation traditionally focused on companies that have easy access to user data and that have a high degree of control of the product roadmap. However, little research has been conducted to understand how companies that have a low control of roadmap and have a large distance to the users, such as consultancy companies, can benefit from continuous experimentation practices. To address this problem, we performed an exploratory case study with a software consultancy company combined with a validation procedure with four additional companies. The contribution of this work is three-fold. First, we devised a\u00a0\u2026", "num_citations": "4\n", "authors": ["622"]}
{"title": "Singing the praise of empowerment: Or paying the cost of chaos\n", "abstract": " Empowerment is based on the belief that employees have the ability, and the desire, to shoulder more responsibility and perform better when given freedom. In an empowered organization, authority is given to employees with the intent to increase responsiveness to customers, improve decision-making power and to increase team motivation and skills. However, while most studies picture empowerment as the \"ideal state\" and the place where all organizations strive to be, our research shows that fully empowered teams without strategic guidance suffer from a number of problems. Based on multi-case study research in eleven software-intensive companies, we see that companies need to allow for different levels of empowerment depending on what they aim to achieve, characteristics of the industry domain, the business model and other factors, and that strategic guidance is critical to set direction and for avoiding\u00a0\u2026", "num_citations": "4\n", "authors": ["622"]}
{"title": "The EMFIS Model\u2014Enable More Frequent Integration of Software\n", "abstract": " The EMFIS model allows companies to explicate a representation of the organization's current situation regarding continuous integration impediments, and visualizes what the organization must focus on in order to enable more frequent integration of software. The model is used to perform an assessment of twelve factors, where the ratings from participants representing the developers are summarized separately from ratings from participants representing the enablers (responsible for processes, development tools, test environments etc.). The EMFIS model is based on semi-structured interviews with 20 developers from two companies which develop large-scale software systems, and a literature review that included 74 research papers and four books. The model has been validated in workshops and interviews, which in total included 28 individuals in five different companies. The model was well received during the\u00a0\u2026", "num_citations": "4\n", "authors": ["622"]}
{"title": "Exploring IoT user dimensions\n", "abstract": " \u2018Internet of Things\u2019 (IoT) systems are fundamentally changing the way in which users interact and perceive technology. In this paper, we focus on two of the numerous dimensions of IoT systems with which the users interact; (1) the IoT user interface and (2) the IoT ecosystem. Based on literature, we develop a model that identifies how data is presented to users and how users interact with the system, and the level at which systems interconnect with, and collects data from, multiple systems. Companies can use the model to assess their systems in order to identify the current state of their systems and to identify the desired state. Moreover, the model can be used to better understand the steps necessary for transforming from one dimension to another in order to develop more advanced IoT systems.", "num_citations": "4\n", "authors": ["622"]}
{"title": "Orchestrate your platform: architectural challenges for different types of ecosystems for mobile devices\n", "abstract": " The introduction of smartphones and tablets has led to a fast growing industry in which most firms have started an ecosystem-centric approach. In this paper three types of ecosystems are identified: Vertically integrated hardware/software platforms, closed source software platforms and open source software platforms. These ecosystems differ in the scope of the platform, i.e. covering both hardware and software, and the technology design, i.e. whether the software can be altered by the complementors. In this paper the challenges for each type of ecosystems are identified from an architectural point of view. Platform leaders can use our analysis to orchestrate their platform by proactively addressing the challenges that we identify and properly evolving the scope and technology design of their platforms.", "num_citations": "4\n", "authors": ["622"]}
{"title": "Visualizing and classifying software variability in a family of magnetic resonance imaging scanners\n", "abstract": " Visualizing and Classifying Software Variability in a Family of Magnetic Resonance Imaging Scanners \u2014 the University of Groningen research portal Skip to main navigation Skip to search Skip to main content the University of Groningen research portal Logo Help & FAQ English Nederlands Home Profiles Research Units Research output Projects Datasets Prizes Activities Press / Media Search by expertise, name or affiliation Visualizing and Classifying Software Variability in a Family of Magnetic Resonance Imaging Scanners m. dr. jaring, rl krikhaar, J. Bosch Software Engineering Faculty of Science and Engineering Research output: Contribution to journal \u203a Article \u203a Academic \u203a peer-review Overview Original language Dutch Pages (from-to) 69 - 100 Journal Software practice and experience Volume 34 Issue number 1 Publication status Published - 2006 Cite this APA Author BIBTEX Harvard Standard RIS \u2026", "num_citations": "4\n", "authors": ["622"]}
{"title": "Architecturally sensitive usability patterns\n", "abstract": " The work presented in this paper is motivated by the increasing realization in the software engineering community of the importance of software architecture for fulfilling quality requirements. Practice shows that for current software systems, most usability issues are still only detected during testing and deployment. Some changes that affect usability, for instance changes to the appearance of a system\u2019s user interface, may easily be made late in the development process without incurring too great a cost. Changes that relate to the interactions that take place between the system and the user such as, for example, usability patterns, are likely to require a much greater degree of modification. The reason for this shortcoming is that the software architecture of a system restricts certain patterns from being implemented after implementation. Several of these usability patterns are \u201carchitecture sensitive\u201d, in the sense that such modifications are costly to implement afterwards due through their structural impact on the system. Our research has argued the importance of the relation between usability and software architecture. Software engineers and usability engineers should be aware of the importance of this relation. One of the results of this research is a collection of usability patterns. The contribution of this paper is that it has tried to capture and describe several usability patterns that may have a positive effect on the level of usability but that are difficult to retro-fit into applications because these typically require architectural support. Our collection of patterns can be used during architectural design to determine if the architecture needs to be modified to\u00a0\u2026", "num_citations": "4\n", "authors": ["622"]}
{"title": "Maturing architectures and components in software product lines\n", "abstract": " Software product lines have received considerable adoption in the software industry and prove to be a very successful approach to intra-organizational software reuse. Existing literature, however, often assumes a singular transition from independent product development to a software product line approach. In this chapter, we present an overview of different approaches to architecture-centric, intra-organizational reuse of software architectures and components and organize these in maturity levels. In addition, we present the notion of hierarchical scopes in software development organizations where different scopes may have achieved different maturity levels. The claim of this chapter is that the challenge that most organizations face is not the singular adoption of a software product line, but rather the continuous maturation of the organization in terms of exploiting intra-organizational reuse at multiple levels\u00a0\u2026", "num_citations": "4\n", "authors": ["622"]}
{"title": "Software product lines and software architecture design\n", "abstract": " One can identify two important developments in software architecture, ie software product lines and software architecture design. This tutorial addresses these topics by presenting an method for architectural design explicitly focusing on assessment of and transformation for quality attributes. In addition, the notion of software product lines and the process, technology, business and organizational issues of adopting the approach are presented. Both design and product-lines are extensively illustrated by examples and experiences from numerous industrial cases. The tutorial is based on a recently published book [2] authored by the tutorial presenter and published by Addison-Wesley and ACM Press.The aim of the tutorial is to present our experiences, reflections and research results based on those experiences in the domain of software architecture. Over the years, we have worked on this topic with a variety of companies, including Ericsson Software Technology, Axis Communications, Securitas Larm, Ericsson Mobile, EC Gruppen, Ericsson Software Architecture Research Center and Althin Medical. Sharing our experiences and research results with the tutorial participants will allow them to make informed decisions about the future organization of software development in their own company (for industrial participants) or to collect additional empirical data and identify new research questions (for academic participants).", "num_citations": "4\n", "authors": ["622"]}
{"title": "Maintainability Myth Causes Performance Problems in SMP Application.\n", "abstract": " A challenge in software design is to find solutions that balance and optimize the quality attributes of the application. In this paper we present a case study of an application and the results of a design decision made on weak assumptions. The application has been assessed with respect to performance and maintainability. We present and evaluate an alternative design of a critical system component. Based on interviews with the involved designers we establish the design rationale. By analyzing the evaluation data of the two alternatives and the design rationale, we conclude that the design decision was based on a general assumption that an adaptable component design should increase the maintainability of the application. This case study is clearly a counter example to that assumption, and we therefore reject it as a myth. This study shows, however, that the myth is indeed responsible for the major performance problem in the application.", "num_citations": "4\n", "authors": ["622"]}
{"title": "A case study on product line architecture evolution\n", "abstract": " Product-line architectures present an important approach to increasing software reuse and reducing development cost by sharing an architecture and set of reusable components among a family of products. However, evolution in product-line architectures is more complex than in traditional software development since new, possibly conflicting, requirements originate from the existing products in the product-line and new products that are to be incorporated. In this paper, we present a case study of product-line architecture evolution. Based on the case study, we develop categorizations for the evolution of requirements, the product-line architecture and product-line architecture components. Subsequently, we analyze and present the relations between these categorizations.", "num_citations": "4\n", "authors": ["622"]}
{"title": "Compiler Support for Extensible Languages\n", "abstract": " The use of a rigid general purpose language is, by an increasing part of the software engineering community, no longer considered to be the optimal solution. The requirements on a programming language are not static, but change over time and depend on the application domain in which the language is used. To address this, one can recognise two main approaches, ie application domain languages and extensible language models. In this paper, we describe our experiences with our extensible object-oriented language, ie the layered object model (LayOM). As part of an ongoing research project, we investigate language extensions required for the expression of object-oriented frameworks. In this paper, we present two such language extensions, ie a design pattern and a concept from the process control system domain. We have identified that compiler support for extensible languages should fulfil requirements of managing complexity, maintainability, extensibility and reusability. Our LayOM compiler is based on the delegating compiler object approach, providing a structural decomposition dimension in addition to the traditional functional decomposition. This approach has proven to be very beneficial and fulfils the aforementioned requirements rather well.", "num_citations": "4\n", "authors": ["622"]}
{"title": "Paradigm, language model and method\n", "abstract": " Programming languages and software engineering methods are highly related in that both are images of an underlying paradigm. In this paper we investigate the role of the paradigm, the language model and the software development method and de ne requirements on each of the three concepts. Subsequently, we describe the layered object model, an extended object model which allows for rst-class representation of relations between objects and constraints on the behaviour of an object, and discuss how it achieves paradigm extensibility, ie extensibility of the paradigm and the supporting language model.", "num_citations": "4\n", "authors": ["622"]}
{"title": "Data Pipeline Management in Practice: Challenges and Opportunities\n", "abstract": " Data pipelines involve a complex chain of interconnected activities that starts with a data source and ends in a data sink. Data pipelines are important for data-driven organizations since a data pipeline can process data in multiple formats from distributed data sources with minimal human intervention, accelerate data life cycle activities, and enhance productivity in data-driven enterprises. However, there are challenges and opportunities in implementing data pipelines but practical industry experiences are seldom reported. The findings of this study are derived by conducting a qualitative multiple-case study and interviews with the representatives of three companies. The challenges include data quality issues, infrastructure maintenance problems, and organizational barriers. On the other hand, data pipelines are implemented to enable traceability, fault-tolerance, and reduce human errors through\u00a0\u2026", "num_citations": "3\n", "authors": ["622"]}
{"title": "Leveraging Business Transformation with Machine Learning Experiments\n", "abstract": " The deployment of production-quality ML solutions, even for simple applications, requires significant software engineering effort. Often, companies do not fully understand the consequences and the business impact of ML-based systems, prior to the development of these systems. To minimize investment risks while evaluating the potential business impact of an ML system, companies can utilize continuous experimentation techniques. Based on action research, we report on the experience of developing and deploying a business-oriented ML-based dynamic pricing system in collaboration with a home shopping e-commerce company using a continuous experimentation (CE) approach. We identified a set of generic challenges in ML development that we present together with tactics and opportunities.", "num_citations": "3\n", "authors": ["622"]}
{"title": "The three layer product model: an alternative view on SPLs and variability\n", "abstract": " Despite more than 20 years on research on software product lines and variability, industry continues to experience the topic of strategic intra-organizational reuse and variability management as a challenge. This challenge is exacerbated by the adoption of software ecosystems. The keynote introduces an alternative perspective on this area using the Three Layer Product Model (3LPM). The 3LPM categorizes organizes functionality into three categories, ie commodity, differentiating and innovative. Our research shows that organizations, on average, spend 80-90% of their R&D resources on commodity functionality. Also, variability in the commodity layer provides no or little business value. Consequently, the keynote focuses on analyzing this challenge, presenting internal strategies and ecosystem strategies to address this and industrial experiences of using 3LPM.", "num_citations": "3\n", "authors": ["622"]}
{"title": "Commodity eats innovation for breakfast: a model for differentiating feature realization\n", "abstract": " Once supporting the electrical and mechanical functionality, software today became the main competitive advantage in products. However, in the companies that we study, the way in which software features are developed still reflects the traditional \u2018requirements over the wall\u2019 approach. As a consequence, individual departments prioritize what they believe is the most important and are unable to identify which features are regularly used \u2013 \u2018flow\u2019, there to be bought \u2013 \u2018wow\u2019, differentiating and that add value to customers, or which are regarded commodity. In this paper, and based on case study research in three large software-intensive companies, we (1) provide empirical evidence that companies do not distinguish between different types of features, which causes poor allocation of R&D efforts and suppresses innovation, and (2) develop a model in which we depict the activities for differentiating and\u00a0\u2026", "num_citations": "3\n", "authors": ["622"]}
{"title": "Towards a multi\u2010criteria decision support method for consumer electronics software ecosystems\n", "abstract": " Many consumer electronics firms are adopting an ecosystem\u2010centric approach for supporting third\u2010party applications. In an emerging market, a consumer electronics firm may need to create a new ecosystem or adopt a newly developed platform, both which has significant commercial and technical implications. In this paper we identify three types of ecosystems that are used today: vertically integrated hardware/software platforms, closed\u2010source software platforms, and open\u2010source software platforms. We introduce a first step towards a multi\u2010criteria decision support method, which determines what type of ecosystem is most suitable for a specific product category from a software engineering perspective. We use this method to analyze a wide range of consumer electronics products. The analysis shows that the vertically integrated platform type is most suitable for product with a high degree of innovation, and open\u00a0\u2026", "num_citations": "3\n", "authors": ["622"]}
{"title": "First international workshop on social software engineering and applications (sosea 2008)\n", "abstract": " The First International Workshop on Social Software Engineering and Applications discusses various topics related to the engineering and use of social software. The aim of the workshop is to create a scientific foundation for social software and to form a research community that can focus on the technological and technical aspects of the movement.", "num_citations": "3\n", "authors": ["622"]}
{"title": "Invited talk: expanding software product families: from integration to composition\n", "abstract": " Software product families have found broad adoption in the embedded systems industry. Product family thinking has been prevalent in this context for mechanics and hardware and adopting the same for software has been viewed as a logical approach. During recent years, however, the trends of convergence, end-to-end solutions, shortened innovation and R&D cycles and differentiation through software engineering capabilities have lead to a development where organizations are stretching the scope of their product families far beyond the initial design. Failing to adjust the product family approach, including the architectural and process dimensions when the business strategy is changing is leading to several challenging problems that can be viewed as symptoms of this approach. This paper discusses the key symptoms, the underlying causes for these symptoms as well as solutions for realigning the\u00a0\u2026", "num_citations": "3\n", "authors": ["622"]}
{"title": "The COVAMOF software variability assessment method (COSVAM)\n", "abstract": " Variability has to undergo continual and timely change, or a product family will risk using the ability to effectively exploit the similarities of its members. Being able to determine whether, when and how variability should respond to changing markets, business needs, and advances in technology, however, is a non-trivial task. In this paper, we present COSVAM (The COVAMOF Variability Assessment Method). The contribution of COSVAM is that it provides a technique for variability assessment in the context of evolution, where no techniques were available up to date. It addresses several issues that are associated to the current practice, ie ad-hoc and unstructured methodology, implicit variability, addressing only one layer of abstraction, insufficiently exploring alternative solutions, and neglecting implementation dependencies between features.", "num_citations": "3\n", "authors": ["622"]}
{"title": "Software variability management\n", "abstract": " During recent years, the amount of variability that has to be supported by a software artifact is growing considerably and its management is developing as a main challenge during development, usage, and evolution of software artifacts. Successful management of variability in software artifacts leads to better customizable software products that are in turn likely to result in higher market success. The aim of this workshop is to study software variability management both from a 'problems' and from a 'solutions' perspective by bringing together people from industrial practice and from applied research in academia to present and discuss their respective experience. Issues to be addressed include, but are not limited to, technological, process, and organizational aspects as well as notation, assessment, design, and evolution aspects.", "num_citations": "3\n", "authors": ["622"]}
{"title": "Software architecture\n", "abstract": " Software Architecture | Proceedings of the Technology of Object-Oriented Languages and Systems (TOOLS 33) ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleProceedingsTOOLS '00Software Architecture Article Software Architecture Share on Author: J. Bosch View Profile Authors Info & Affiliations TOOLS '00: Proceedings of the Technology of Object-Oriented Languages and Systems (TOOLS 33)June 2000 Published:05 June 2000 0citation 0 Downloads Metrics Total Citations0 Total Downloads0 Last 12 Months0 Last 6 weeks0 Get Citation Alerts New Citation Alert added! This alert has been successfully added and will be sent to: \u2026", "num_citations": "3\n", "authors": ["622"]}
{"title": "Assessing Object-Oriented Application Framework Maturity: A Replicated Case Study\n", "abstract": " Object-oriented application frameworks present one of the most successful approaches to developing reusable assets in industry, but developing frameworks is both difficult and expensive. Framework generally evolve to maturity through a number of iterations due to the incorporation of new requirements and better domain understanding. Since changes to frameworks have a large impact due to the effects on the applications build based on the asset, it is important to assess the maturity of a framework. Bansiya [3, 4] presents an approach to assessing framework maturity based on a set of design metrics and formulates four statements. In this paper, we present the results of a replicated case study of the framework maturity assessment approach. Our study subject consists of four successive versions of a proprietary blackbox application framework. Our findings partly support the statements formulated in the original study, but differ in some places. The differences are discussed and explanations and argumentation provided.", "num_citations": "3\n", "authors": ["622"]}
{"title": "Using Bayesian Belief Networks in Assessing Software Architectures\n", "abstract": " Quantitative techniques have traditionally been used to assess software architectures. We have found that early in the development process there is often insufficient quantitative information to perform such assessments. So far the only way to make assessments about an architecture, is to use qualitative assessment techniques like for instance a peer review. The problem with this type of assessment techniques is that they depend on the knowledge of the expert designers who use them. In this paper we introduce a technique that automates making qualitative assessments of software architectures.", "num_citations": "3\n", "authors": ["622"]}
{"title": "Tool support for language extensibility\n", "abstract": " During the last years, one can recognise a development towards application domain languages and extensible language models. Due to their extended expressiveness, these language models have considerable advantages over rigid general purpose languages. However, a complicating factor in the use of extensible language models are the conventional compiler construction techniques. Compilers constructed using these techniques often are large entities that are highly complex, difficult to maintain and hard to reuse. As we have experienced, these characteristics clearly complicate extending existing compilers. As a solution to this, we developed an alternative approach to compiler construction is proposed, based on object-oriented principles. The approach is based on delegating compiler objects (DCOs) that provide a structural decomposition of compilers in addition to the conventional functional decomposition. The DCO approach supports modularisation and reuse of compiler specifications, such as lexer and parser specifications. We constructed an integrated tool set, LETOS, implementing the functionality of delegating compiler objects.", "num_citations": "3\n", "authors": ["622"]}
{"title": "On the Assessment of Benchmark Suites for Algorithm Comparison\n", "abstract": " Benchmark suites, i.e. a collection of benchmark functions, are widely used in the comparison of black-box optimization algorithms. Over the years, research has identified many desired qualities for benchmark suites, such as diverse topology, different difficulties, scalability, representativeness of real-world problems among others. However, while the topology characteristics have been subjected to previous studies, there is no study that has statistically evaluated the difficulty level of benchmark functions, how well they discriminate optimization algorithms and how suitable is a benchmark suite for algorithm comparison. In this paper, we propose the use of an item response theory (IRT) model, the Bayesian two-parameter logistic model for multiple attempts, to statistically evaluate these aspects with respect to the empirical success rate of algorithms. With this model, we can assess the difficulty level of each benchmark, how well they discriminate different algorithms, the ability score of an algorithm, and how much information the benchmark suite adds in the estimation of the ability scores. We demonstrate the use of this model in two well-known benchmark suites, the Black-Box Optimization Benchmark (BBOB) for continuous optimization and the Pseudo Boolean Optimization (PBO) for discrete optimization. We found that most benchmark functions of BBOB suite have high difficulty levels (compared to the optimization algorithms) and low discrimination. For the PBO, most functions have good discrimination parameters but are often considered too easy. We discuss potential uses of IRT in benchmarking, including its use to improve the design of\u00a0\u2026", "num_citations": "2\n", "authors": ["622"]}
{"title": "ACE: easy deployment of field optimization experiments\n", "abstract": " Optimization of software parameters is a recurring activity in the life-cycle of many software products, from prototypes and simulations, test beds and hardware-in-the-loop scenarios, field calibrations to the evolution of continuous deployment cycles. To perform this activity, software companies require a combination of software developers and optimization experts with domain specific knowledge. Moreover, in each of life-cycle steps, companies utilize a plethora of different tools, tailored for specific domains or development stages. To most companies, this scenario leads to an excessive cost in the optimization of smaller features or in cases where it is not clear what the returned value will be.                 In this work we present a new optimization system based on field experiments, that is aimed to facilitate the adoption of optimization in all stages of development. We provide two main contributions. First, we\u00a0\u2026", "num_citations": "2\n", "authors": ["622"]}
{"title": "Towards a digital business operating system\n", "abstract": " The digital transformation requires companies to change their operating system from a traditional to a digital one. This implies changes to business models, the business ecosystem, the architecture of products, the ways of working, the structure of the organization as well as the basic organizational culture. In this paper, we present our perspective on the operating system that digital companies employ consisting of five dimensions, i.e. speed, data, artificial intelligence, empowerment and ecosystems. For each of these dimension, we present the typical stages that companies evolve through while undergoing the transformation. The contribution of the paper is that it provides a holistic, integrated framework that allows companies to define desired state, assess current state and plan the necessary steps to transition.", "num_citations": "2\n", "authors": ["622"]}
{"title": "Dynamic test case selection in continuous integration: Test result analysis using the eiffel framework\n", "abstract": " The popular agile practices of continuous integration and delivery stress the rapid and frequent production of release candidates and evaluation of those release candidates, respectively. Particularly in the case of very large software systems and highly variable systems, these aspirations can come into direct conflict with the need for both thorough and extensive testing of the system in order to build the highest possible confidence in the release candidate. There are multiple strategies to mitigate this conflict, from throwing more resources at the problem to avoiding end-to-end scenario tests in favor of lower-level unit or component tests. Selecting the most valuable tests to execute at any given time, however, plays a critical role in this context: repeating the same static test scope over and over again is a waste that large development projects can ill afford. While a number of alternatives for dynamic test case selection exist\u2013alternatives that may be used interchangeably or even in tandem\u2013many require analysis of large quantities of in situ real-time data in the form of trace links. Generating and analyzing such data is a recognized challenge in industry. In this chapter we investigate one approach to the problem, based on the Eiffel framework for continuous integration and delivery.", "num_citations": "2\n", "authors": ["622"]}
{"title": "The continuity of continuous integration\n", "abstract": " Metrics of the continuity of continuous integration proposed and discussed.Organizational size found to correlate with CI continuity.Evidence of correlation between continuity and organization composition discovered.Findings discussed in the context of architectural styles and manufacturability. The practice of continuous integration has firmly established itself in the mainstream of the software engineering industry, yet many questions surrounding it remain unanswered. Prominent among these is the issue of scalability: continuous integration has been reported to be possible to scale, but with difficulties. Understanding of the underlying mechanisms causing these difficulties is shallow, however: what is it about size that is problematic, which kind of size, and what aspect of continuous integration does it impede? Based on quantitative data from six industry cases encompassing close to 2000 engineers, complemented\u00a0\u2026", "num_citations": "2\n", "authors": ["622"]}
{"title": "User Dimensions in \u2018Internet of Things\u2019 Systems: The UDIT Model\n", "abstract": " \u2018Internet of Things\u2019 (IoT) systems are fundamentally changing the way in which we interact and perceive technology. In this paper, we focus on two dimensions of IoT systems; (1) the IoT user interface and (2) the IoT ecosystem. We develop a model that identifies how data is presented to users and how users interact with the system, and the level at which systems interconnect with, and collects data from, external systems. Companies can use the model to map their systems according to the dimensions in order to: (1) identify current state of their systems, (2) identify desired state and (3) better understand the steps necessary to develop more advanced IoT systems. We evaluate the dimensions in five case companies and provide empirical evidence on the transition towards increasingly advanced IoT systems.", "num_citations": "2\n", "authors": ["622"]}
{"title": "Quantitative requirements prioritization from a pre-development perspective\n", "abstract": " Feature content in system releases tends to be prioritized using limited amounts of qualitative user input and based on the opinions of those in product management. This leads to several problems due to the wasteful allocation of R&D resources. In this paper, we present the results of our efforts to collect quantitative customer input before the start of development using mock-ups and surveys for a mobile application developed by Sony Mobile. Our research shows that (1) collecting quantitative feedback before development is feasible, (2) the data collected deviates from the original feature prioritization, i.e. it is beneficial and (3) the data gives further insight in requirement prioritization than a qualitative method could have provided.", "num_citations": "2\n", "authors": ["622"]}
{"title": "Covamof\n", "abstract": " The COVAMOF tool suite is part of an elaborate variability management framework. The framework was specifically developed to deal with aspects of variability management that go beyond formal specification of relations between variation points. The tool suite was constructed as a proof of concept research tool and used to validate the framework in industry.", "num_citations": "2\n", "authors": ["622"]}
{"title": "Keynote address: toward compositional software engineering\n", "abstract": " Large-scale software development, for the longest time, has relied heavily on centralized, process-centric approaches, such as CCMI. There are three trends that make applying a traditional approach increasingly infeasible, ie the increasing adoption of software product lines, global software development and software ecosystem.", "num_citations": "2\n", "authors": ["622"]}
{"title": "Cost Effective Development of Usable Systems\n", "abstract": " Usability is considered an important quality attribute for software systems. To ensure a particular level of usability, a certain amount of time and money have to be invested; however this has proven to be expensive. Most of the costs spent on usability are spent after an initial development e.g. during maintenance. These high costs often prevent developers from meeting all the usability requirements. The challenge is therefore to cost effectively develop usable software e.g. minimize the costs and time spent on usability. We believe architecture analysis of usability is an important tool to achieve this. Our experiences with software architecture analysis of usability allowed us to identify a series of problems that explain why usability is not achieved cost effectively in current software development practice.", "num_citations": "2\n", "authors": ["622"]}
{"title": "Software variability: process and management\n", "abstract": " Embedded systems, such as mobile devices, televisions, telecom switches, engine control units and medical imaging systems, have gone through enormous changes over the last decades. The value of these products initially could be found in the mechanics of the product and later on in the analogue and digital electronics. During the last decade, for virtually every embedded system, its main added value can be found in the software that defines its behaviour. Software allows for a high degree of adaptive system behaviour that can be used to reduce the bill of materials for embedded systems on the one hand and, on the other hand, allows for a considerably improved user experience when using the device.Whereas the mechanics and electronics in embedded systems have been largely commoditized, the software in these systems, especially in the higher layers of the software stack, remains a key challenge for\u00a0\u2026", "num_citations": "2\n", "authors": ["622"]}
{"title": "Feature-based product derivation\n", "abstract": " We have observed that large software systems are increasingly defined in terms of the features they implement. Consequently, there is a need to express the commonalities and variability between products of a product line in terms of features. Unfortunately, technology support for this is currently limited to the requirements level. There is a need to extend this support to the design and implementation level as well. Existing technologies such as AOP and SOP may be of use here. However, features are not first class citizens in these paradigms. To address this and to explore the problems and issues with respect to feature composition at the implementation level, we have formalized the notion of features and the composition of features. In addition we have specified an algorithm for mapping features to Java classes. Using our model and composition algorithm, we can select a number of base components and a number of features from a software product line and derive a product. As a proof of concept we have experimented extensively with a partial Java implementation of our approach.", "num_citations": "2\n", "authors": ["622"]}
{"title": "Evolution in Software Product Families: Architecture Implementation rather than Architecture Design\n", "abstract": " Variability is the ability to change or customize a software system, ie, software architects anticipate change and design architectures that support those changes in both time (eg, succeeding products) and space (eg, coexisting products). If the architecture is used for different product versions, eg, in a software product line context, it becomes important to understand where change has to be planned and the options possible in particular situations. In software product families, the first time variability is addressed is most often at the architectural level in the form of architecture design. However, in this paper we show that the focus should rather be on architecture implementation instead, ie, when the architect selects how (eg, DLLs or makefiles) and when (eg, during run-time or during compilation) variability has to be implemented. In addition, successful software systems often have a single architectural level that\u00a0\u2026", "num_citations": "2\n", "authors": ["622"]}
{"title": "Experiences with SAA of Modifiability\n", "abstract": " Modifiability is an important quality for software systems, because a large part of the costs associated with these systems is spent on modifications. The effort, and therefore cost, that is required for these modifications is largely determined by a system\u2019s software architecture. Analysis of software architectures is therefore an important technique to achieve modifiability and reduce maintenance costs. However, few techniques for software architecture analysis currently exist. Based on our experiences with software architecture analysis of modifiability, we have developed an analysis method consisting of five steps. In this paper we report on our experiences with this method. We illustrate our experiences with examples from two case studies of SAA of modifiability. These case studies concern a system for mobile positioning at Ericsson Software Techology and a system for freight handling at DFDS Fraktarna. Our experiences are related to each step of the analysis process. In addition, we made some observations on SAA of modifiability in general.", "num_citations": "2\n", "authors": ["622"]}
{"title": "Maintainability myth causes performance problems in SMP application\n", "abstract": " A challenge in software design is to find solutions that balance and optimize the quality attributes of the application. We present a case study of an application and the results of a design decision made on weak assumptions. The application has been assessed with respect to performance and maintainability. We present and evaluate an alternative design of a critical system component. Based on interviews with the involved designers we establish the design rationale. By analyzing the evaluation data of the two alternatives and the design rationale, we conclude that the design decision was based on a general assumption that an adaptable component design should increase the maintainability of the application. This case study is clearly a counter example to that assumption, and we therefore reject it as a myth. This study shows, however, that the myth is indeed responsible for the major performance problem in the\u00a0\u2026", "num_citations": "2\n", "authors": ["622"]}
{"title": "Object technology for product-line architectures\n", "abstract": " The industry of software-intensive systems is facing today both economical and technical challenges. On one hand, shrinking budgets and sharp competition require to reduce significantly development and maintenance costs, shorten lead time, and improve predictability. On the other hand, the size and complexity of systems have dramatically increased in the past few years and have brought considerable technological problems. In order to face these issues, major changes are required regarding the way software products are developed.             A promising approach, which is gaining wide acceptance, is to replace traditional development models by product-line development. Traditional life cycle models have originally been conceived under the assumption that they apply to the development of individual software products, inhibiting the sharing of common assets between projects. Product-line\u00a0\u2026", "num_citations": "2\n", "authors": ["622"]}
{"title": "Design of an object oriented computational steering system\n", "abstract": " Design of an object oriented computational steering system \u2014 Eindhoven University of Technology research portal Skip to main navigation Skip to search Skip to main content Eindhoven University of Technology research portal Logo Help & FAQ English Nederlands Home Researchers Research Output Organisational units Activities Projects Prizes Press / Media Facilities / Equipment Datasets Courses Research areas Student theses Design of an object oriented computational steering system AC Telea Scientific Computing Research output: Chapter in Book/Report/Conference proceeding \u203a Conference contribution \u203a Academic \u203a peer-review Overview Original language English Title of host publication Object-Oriented Technology, ECOOP'98 Workshop Reader (ECOOP'98 Workshops, Demos, and Posters, Brussels, Belgium, July 20-24, 1998, Proceedings) Editors S. Demeyer, J. Bosch Place of Publication Berlin \u2026", "num_citations": "2\n", "authors": ["622"]}
{"title": "A model for a flexible and predictable object-oriented real-time system\n", "abstract": " The requirements on real-time systems are changing. Traditionally, reliability and predictability of hard real-time systems in particular were the main requirements. This led to systems that were stand-alone, embedded and static. Future real-time systems, but even current systems, still require reliability and predictability, but also distribution of the real-time system, integration with non-real-time systems and the ability to change dynamically the components of the system at run-time. Traditional approaches to real-time system development have difficulty in addressing these additional requirements. New ways of constructing real-time systems must therefore be explored. In this article, we develop a real-time object-oriented model that facilitates the requirements of flexibility without sacrificing the predictability, integration and dynamicity aspects.", "num_citations": "2\n", "authors": ["622"]}
{"title": "AI Deployment Architecture: Multi-Case Study for Key Factor Identification\n", "abstract": " Machine learning and deep learning techniques are becoming increasingly popular and critical for companies as part of their systems. However, although the development and prototyping of ML/DL systems are common across companies, the transition from prototype to production-quality deployment models are challenging. One of the key challenges is how to determine the selection of an optimal architecture for AI deployment. Based on our previous research, and to offer support and guidance to practitioners, we developed a framework in which we present five architectural alternatives for AI deployment ranging from centralized to fully decentralized edge architectures. As part of our research, we validated the framework in software-intensive embedded system companies and identified key challenges they face when deploying ML/DL models. In this paper, and to further advance our research on this topic, we\u00a0\u2026", "num_citations": "1\n", "authors": ["622"]}
{"title": "Federated Learning Systems: Architecture Alternatives\n", "abstract": " Machine Learning (ML) and Artificial Intelligence (AI) have increasingly gained attention in research and industry. Federated Learning, as an approach to distributed learning, shows its potential with the increasing number of devices on the edge and the development of computing power. However, most of the current Federated Learning systems apply a single-server centralized architecture, which may cause several critical problems, such as the single-point of failure as well as scaling and performance problems. In this paper, we propose and compare four architecture alternatives for a Federated Learning system, i.e. centralized, hierarchical, regional and decentralized architectures. We conduct the study by using two well-known data sets and measuring several system performance metrics for all four alternatives. Our results suggest scenarios and use cases which are suitable for each alternative. In addition, we\u00a0\u2026", "num_citations": "1\n", "authors": ["622"]}
{"title": "Engineering Federated Learning Systems: A Literature Review\n", "abstract": " With the increasing attention on Machine Learning applications, more and more companies are involved in implementing AI components into their software products in order to improve the service quality. With the rapid growth of distributed edge devices, Federated Learning has been introduced as a distributed learning technique, which enables model training in a large decentralized network without exchanging collected edge data. The method can not only preserve sensitive user data privacy but also save a large amount of data transmission bandwidth and the budget cost of computation equipment. In this paper, we provide a state-of-the-art overview of the empirical results reported in the existing literature regarding Federated Learning. According to the problems they expressed and solved, we then categorize those deployments into different application domains, identify their challenges and then\u00a0\u2026", "num_citations": "1\n", "authors": ["622"]}
{"title": "Software Logs for Machine Learning in a DevOps Environment\n", "abstract": " System logs perform a critical function in software-intensive systems as logs record the state of the system and significant events in the system at important points in time. Unfortunately, log entries are typically created in an ad-hoc, unstructured and uncoordinated fashion, limiting their usefulness for analytics and machine learning. In a DevOps environment, especially, unmanaged evolution in log data structure causes frequent disruption of operations in automated data pipelines, dashboards and analytics. In this paper, we present the main challenges of contemporary approaches to generating, storing and managing the evolution of system logs data for large, complex, software-intensive systems based on an in-depth case study at a world-leading telecommunications company. Second, we present an approach for generating and managing the evolution of log data in a DevOps environment that does not suffer from\u00a0\u2026", "num_citations": "1\n", "authors": ["622"]}
{"title": "Software logging for machine learning\n", "abstract": " System logs perform a critical function in software-intensive systems as logs record the state of the system and significant events in the system at important points in time. Unfortunately, log entries are typically created in an ad-hoc, unstructured and uncoordinated fashion, limiting their usefulness for analytics and machine learning. In this paper, we present the main challenges of contemporary approaches to generating and storing system logs data for large, complex, software-intensive systems based on an in-depth case study at a world-leading telecommunications company. Second, we present a systematic and structured approach for generating log data that does not suffer from the aforementioned challenges and is optimized for use in machine learning. Third, we provide validation of the approach based on expert interviews that confirms that the approach addresses the identified challenges and problems.", "num_citations": "1\n", "authors": ["622"]}
{"title": "From Efficiency to Effectiveness: Delivering Business Value Through Software\n", "abstract": " Connected products and DevOps allow for a fundamentally different way of working in R&D. Rather than focusing on efficiency of teams, often expressed in terms of flow and number of features per sprint, we are now able to focus on the effectiveness of R&D as expressed in the amount of value created per unit of R&D. We have developed several solutions, such as HYPEX, HoliDev and hierarchical value models, but companies still experience challenges. In this paper, we provide an overview of the trends driving the transition to focusing on effectiveness, discuss the challenges that companies experience as well as the requirements for a successful transformation.", "num_citations": "1\n", "authors": ["622"]}
{"title": "Adopting a Digital Business Operating System\n", "abstract": " The role of software in society and in industry in particular continues to grow exponentially. Most companies either have or are in the process of adoption continuous deployment of their software at products in the field and collect data concerning the performance of their systems. The continuous, fast feedback loops that companies now have available allow for a fundamentally different way of organizing. In fact, based on our work with dozens of companies, we have come to the conclusion that companies are moving towards a new, digital operating system. In this paper, we first present the key elements of the digital operating system and then discuss some of the challenges companies experience during the transformation.", "num_citations": "1\n", "authors": ["622"]}
{"title": "Architecting to ensure requirement relevance: keynote twinpeaks workshop\n", "abstract": " Research has shown that up to two thirds of features in software systems are hardly ever used or not even used at all. This represents a colossal waste of R&D resources and occurs across the industry. On the other hand, product management and many others work hard at interacting with customers, building business cases and prioritizing requirements. A fundamentally different approach to deciding what to build is required: requirements should be treated as hypothesis throughout the development process and constant feedback from users and systems in the field should be collected to dynamically reprioritize and change requirements. This requires architectural support beyond the current state of practice as continuous deployment, split testing and data collection need to be an integral part of the architecture. In this paper, we present a brief overview of our research and industry collaboration to address this\u00a0\u2026", "num_citations": "1\n", "authors": ["622"]}
{"title": "The \u2018Three Layer Ecosystem Strategy Model\u2019(TeLESM)\n", "abstract": " Recently, business ecosystems have gained significant attention in the software engineering research community. The concept refers to the shift from an intra-organizational perspective to an interorganizational perspective where product development and innovation is moving out from the organizational boundaries and where networks of stakeholders co-create value (Janssen et al 2012; Scacchi and Alspaugh 2012; Ritala et al 2013; Dagnino and Padula 2002). As defined by Moore (1993; 1996), a business ecosystem includes suppliers, lead producers, competitors, and a number of other stakeholders that over time co-evolve their capabilities and roles, and align themselves with the directions set by one or more key stakeholders.To operate successfully in a business ecosystem, companies need strategies that help them move away from ad hoc interventions with external stakeholders, to instead adopt a strategic approach on how to manage relationships and dependencies to external forces and interests. As recognized in a number of studies, the increasing interdependencies between stakeholders and organisational networks, introduces technical as well as managerial challenges (Olsson and Bosch 2014; Messerschmitt and Szyperski 2003; Bosch-Sijtsema and Bosch 2014; Santos et al 2012). From a technical perspective, challenges typically involve technical infrastructures and architectures that allow for easy integration of third party content (Santos et al 2012). From a managerial perspective, challenges involve eg coordination of standardization efforts, sharing of maintenance costs and how and when to engage in open innovation\u00a0\u2026", "num_citations": "1\n", "authors": ["622"]}
{"title": "Performance in software development-Special issue editorial\n", "abstract": " Editorial: Performance in software development - Special issue editorial: Information and Software Technology: Vol 56, No 5 ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Information and Software Technology Periodical Home Latest Issue Archive Authors Affiliations Award Winners More HomeBrowse by TitlePeriodicalsInformation and Software TechnologyVol. , No. Editorial: Performance in software development - Special issue editorial article Editorial: Performance in software development - Special issue editorial Share on Authors: Miroslaw Staron View Profile , J\u00f6rgen Hansson View Profile , Jan Bosch View Profile Authors Info & Affiliations Publication: Information and Software TechnologyMay 2014 \u2026", "num_citations": "1\n", "authors": ["622"]}
{"title": "Biography of the Authors\n", "abstract": " David Benavides University of Seville, Seville, Spain David Benavides is an Associate Professor at the University of Seville. He is an active member of the software product line community where he has been program cochair of VaMoS\u201909 and SPLC\u201912. He, together with his group, is well recognized in the automated analysis of feature models field. They develop and maintain FaMa, a framework for automated analysis of variability models. benavides@ us. esDanilo Beuche pure-systems GmbH, Magdeburg, Germany Danilo Beuche works for pure-systems GmbH, a specialist provider of tools and services for the application of variant management and product line technology. As well as managing the company, Danilo also consults extensively on product line engineering, mainly for clients in embedded industries. He received a Ph. D. on embedded software families from the University of Magdeburg. danilo. beuche\u00a0\u2026", "num_citations": "1\n", "authors": ["622"]}
{"title": "Climbing the\" Stairway to Heaven\" A multiple-case study exploring barriers in the transition from agile development towards continuous deployment of software\n", "abstract": " Agile software development is well-known for its focus on close customer collaboration and customer feedback. In emphasizing flexibility, efficiency and speed, agile practices have lead to a paradigm shift in how software is developed. However, while agile practices have succeeded in involving the customer in the development cycle, there is an urgent need to learn from customer usage of software also after delivering and deployment of the software product. The concept of continuous deployment, i.e. the ability to deliver software functionality frequently to customers and subsequently, the ability to continuously learn from real-time customer usage of software, has become attractive to companies realizing the potential in having even shorter feedback loops. However, the transition towards continuous deployment involves a number of barriers. This paper presents a multiple-case study in which we explore barriers\u00a0\u2026", "num_citations": "1\n", "authors": ["622"]}
{"title": "Achieving speed in legacy systems\n", "abstract": " The ability to rapidly respond to customer interest and to effectively prioritize development effort has been a longstanding challenge for mass-market software intensive products. This problem is exacerbated in the context of software product lines as functionality may easily fall over software asset and organizational boundaries with consequent losses in efficiency and nimbleness. In this tutorial, we discuss these challenges; present a case study, Intuit's Quickbooks product line that combined agile software development, design thinking and self-organizing teams in a successful approach; and discuss a generalized approach and implications from employing the techniques in your organization.", "num_citations": "1\n", "authors": ["622"]}
{"title": "Introducing open innovation at Intuit\n", "abstract": " Achieving growth, either in revenue, number of customers or market share, is the central goal for any organization. A growing organization feels healthy to its employees and creates opportunities for them, achieves better results for its stakeholder and can serve its customers better. Traditionally, organizations achieve growth through organic or inorganic growth. The latter achieves growth through the acquisition of companies whose revenue can be added to its own, whereas the former is concerned with internal innovation as a basis for serving existing customers better and for acquiring new customers.Due to its importance, innovation has been studied extensively by the research community as well as by consulting organizations and companies themselves. The purpose of this chapter is not to provide a conclusive overview of that research, but rather to discuss one particular domain that has received significant\u00a0\u2026", "num_citations": "1\n", "authors": ["622"]}
{"title": "Proceedings of the 14th international conference on Software product lines: going beyond\n", "abstract": " Proceedings of the 14th international conference on Software product lines: going beyond | Guide Proceedings ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleProceedingsSPLC'10 ABSTRACT No abstract available. Comments Login options Check if you have access through your login credentials or your institution to get full access on this article. Sign in Full Access Get this Publication Information Contributors Published in Guide Proceedings cover image SPLC'10: Proceedings of the 14th international conference on Software product lines: going beyond September 2010 529 pages ISBN:3642155782 Editors: Jan Bosch profile image \u2026", "num_citations": "1\n", "authors": ["622"]}
{"title": "Architectures for mobility\n", "abstract": " \u2022 Joint research collaboration and laboratory facility between Nokia and the Massachusetts Institute of Technology (MIT)\u2022 The mission of the research collaboration is to jointly carry out high-impact research with the goal of advancing the state of the art in mobile computing and communications technologies", "num_citations": "1\n", "authors": ["622"]}
{"title": "Service provider oriented management systems over open cellular network infrastructures\n", "abstract": " An interesting concept for the open cellular communications world of the near future is to enable service providers (SPs) to dynamically find, and co-operate with, the best cellular network providers (NPs), i.e., those offering desired quality levels, in the most cost-efficient manner, at a given service area region and time zone. This concept calls for an evolution of legacy management paradigms. In this direction, this paper presents parts of a Service Management System (SMS) that adopts the perspective of an SP (SP-SMS). The paper provides elements of the system design (functionality layers, components in each layer, component distribution pattern and high level functionality) and a more detailed look at the functionality of some of the SP-SMS components. The SP-SMS will be decomposed in three layers, namely session configuration, local planning, and global planning. A component type will be introduced in\u00a0\u2026", "num_citations": "1\n", "authors": ["622"]}
{"title": "Research topics and future trends\n", "abstract": " The PFE conference ended with a plenary debate revolving around research topics and future trends in the area of product family engineering. The organizers of the panel asked the conference participants to write down what they thought were the most interesting areas to research on. We took some of them for discussion during the plenary, and came out with a number of relevant trends. This paper summarizes the main findings, outlining the main research and development issues, and proposing, where appropriate, some hints for solutions.", "num_citations": "1\n", "authors": ["622"]}
{"title": "Designing Software Architectures Through Evaluation and Transformation\n", "abstract": " The architecture of a software system constrains its quality attributes. Consequently, the decisions taken during architectural design have a large impact on the resulting system. However, few methods exist to support the design of software architectures. To address this, we present an architectural design method that employs iterative evaluation and transformation of the software architecture in order to satisfy the quality requirements. Architecture evaluation is performed by using scenarios, simulation, mathematical modelling and reasoning. The architecture can be transformed by imposing an architectural style, imposing an architectural pattern, using a design pattern and converting a quality requirement to functionality. The presented method has been defined based on the experiences collected from several industrial projects.", "num_citations": "1\n", "authors": ["622"]}
{"title": "Designing reusable object-oriented architectures-challenges, methods & tools\n", "abstract": " More and more software developers are recognizing the need for solutions that make it possible to share code between different applications in the same domain. Reusing code increases not only the productivity of the developers but also the reliability and maintainability of the software products. Many software companies have ended up with a repository of enterprise components modelling the core business of the company, or with a product-line architecture that captures the common aspects of a family of software products. In both cases, object-orientation offers a technology that enables these solutions. The workshop studies the problems in designing reuse-oriented architectures (ROA) within the OO paradigm and the OO techniques that support this. The design of such systems is much harder than the design of individual applications, because ROAs need to be valid for unforeseen applications. Instead of a\u00a0\u2026", "num_citations": "1\n", "authors": ["622"]}
{"title": "On the design of system family architectures\n", "abstract": " System families present a novel approach to increasing reuse and quality of software and decreasing time-to-market of software systems. Several successful industrial examples exist today, thereby increasing the confidence in this approach. However, the design of a software architecture for system family is a non-trivial activity. In this paper, we discuss an outline to a design method for system family software architectures. The method consists of six steps, ie business case analysis, scoping, system and feature planning, software architecture design, component requirement specification and verification. Although the method has not been applied in its complete form to industrial cases, it is based on our case studies and experiences from a variety of software system families.", "num_citations": "1\n", "authors": ["622"]}
{"title": "Workshop ion on Object-Oriented Technology\n", "abstract": " Workshop ion on Object-Oriented Technology | Guide Proceedings ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleProceedingsECOOP '98 ABSTRACT No abstract available. Comments Login options Check if you have access through your login credentials or your institution to get full access on this article. Sign in Full Access Get this Publication Information Contributors Published in Guide Proceedings cover image ECOOP '98: Workshop ion on Object-Oriented Technology July 1998 589 pages ISBN:3540654607 Editors: Serge Demeyer profile image Serge Demeyer, Jan Bosch profile image Jan Bosch Copyright \u00a9 1998 Publisher \u2026", "num_citations": "1\n", "authors": ["622"]}
{"title": "Multiple object interfaces in object-oriented control systems\n", "abstract": " When modelling complex computer systems, four primary modelling techniques are available to the software engineer, i.e. abstraction, composition, functional decomposition and multiple client interfaces (views). Abstraction and composition can directly be expressed in traditional object oriented models and functional decomposition can often be expressed using subsystems. However, traditional object models provide no expressiveness for multiple client interfaces. This forces designers to either model all different views on a conceptual object as a large, complex implementation object or to model each view as an object and relate the different view objects. Both approaches suffer from problems of complexity, maintainability and reusability. As a solution, we propose the layered object model that allows for the expressive, flexible and extensible definition of multiple client interfaces. To illustrate the problems\u00a0\u2026", "num_citations": "1\n", "authors": ["622"]}
{"title": "Scalability in instructional method specification: An experiment-directed approach\n", "abstract": " An intelligent tutoring system (ITS) is, in principle, well suited for instructional experimentation as an automated environment which allows for controlled variation of variables. These variables, aspects of the instructional and domain models, can be varied by replacing parts representing these aspects by other parts. However, if ITSs are to be used as vehicles for instructional experimentation the architecture, the knowledge representation, and the authoring environment should fulfil additional requirements. This chapter discusses the requirements for experimentation-directed ITSs, the shell for ITS development and the scalable instructional method specification (SIMS) paradigm.", "num_citations": "1\n", "authors": ["622"]}
{"title": "Photoelectron Spectroscopy: New Angle-resolved Spectrometer and Study of Dilute Alloys\n", "abstract": " Copyright Other than for strictly personal use, it is not permitted to download or to forward/distribute the text or part of it without the consent of the author (s) and/or copyright holder (s), unless the work is under an open content license (like Creative Commons).", "num_citations": "1\n", "authors": ["622"]}