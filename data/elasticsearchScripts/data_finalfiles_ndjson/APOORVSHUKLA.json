{"title": "P4CONSIST: Towards Consistent P4 SDNs\n", "abstract": " The prevailing wisdom is that a software-defined network (SDN) operates under the premise that the logically centralized control plane has an accurate representation of the actual data plane state. Unfortunately, bugs, misconfigurations, faults or attacks can introduce inconsistencies between the network control and the data plane that can undermine the correct operation at runtime. Through our experiments, we realize that P4 SDNs are no exception, and are prone to similar problems. With the aim to verify the control-data plane inconsistency, we present the design and implementation of P4Consist, a system to detect the inconsistency between control and data plane in P4 SDNs. P4Consist generates active probe-based traffic continuously or periodically as an input to the P4 SDNs to check whether the actual behavior on the data plane corresponds to the expected control plane behavior. In P4Consist, the control\u00a0\u2026", "num_citations": "16\n", "authors": ["1681"]}
{"title": "Towards Consistent SDNs: A Case for Network State Fuzzing\n", "abstract": " The conventional wisdom is that a software-defined network (SDN) operates under the premise that the logically centralized control plane has an accurate representation of the actual data plane state. Unfortunately, bugs, misconfigurations, faults or attacks can introduce inconsistencies that undermine correct operation. Previous work in this area, however, lacks a holistic methodology to tackle this problem and thus, addresses only certain parts of the problem. Yet, the consistency of the overall system is only as good as its least consistent part. Motivated by an analogy of network consistency checking with program testing, we propose to add active probe-based network state fuzzing to our consistency check repertoire. Hereby, our system, Pazz, combines production traffic with active probes to periodically test if the actual forwarding path and decision elements (on the data plane) correspond to the expected ones (on\u00a0\u2026", "num_citations": "12\n", "authors": ["1681"]}
{"title": "Final service provider devops concept and evaluation\n", "abstract": " This report presents the results of the UNIFY Service Provider DevOps activities. First, we present the final definition and assessment of the concept. SP-DevOps is realized by a combination of various functional components facilitating integrated service verification, efficient and programmable observability, and automated troubleshooting processes. Our assessment shows that SP-DevOps can help providers to reach a medium level of DevOps maturity and allows significant reduction in OPEX. Second, we focus on the evaluation of the proposed SP-DevOps components. The set of tools proposed supports ops and devs across all stages, with a focus on the deployment, operation and debugging phases, and allows to activate automated processes for operating NFV environments. Finally, we present use-cases and our demonstrators for selected process implementions, which allowed the functional validation of SP-DevOps.", "num_citations": "7\n", "authors": ["1681"]}
{"title": "Highlighting the gap between expected and actual behavior in p4-enabled networks\n", "abstract": " Modern networks increasingly rely on Software-defined Networking (SDN) and Network Function Virtualization (NFV) to augment their flexibility in high load scenarios. To further enhance the performance, a part of the functionality is often offloaded to forwarding devices, which are used as hardware accelerators and are configured by high level programming languages such as P4. However, hardware vendors use sophisticated technologies to implement these standards, which need to be understood by the programmer to avoid unintended behavior. In this demonstration we highlight the severe consequences of only relying on the network programming language when ignoring the device-specific limitations. We show this by the example of a Denial of Service attack against a P4-enabled SmartNIC. Finally, we discuss possible mitigations to this attack and stress the importance of an overall understanding of the\u00a0\u2026", "num_citations": "5\n", "authors": ["1681"]}
{"title": "Navigating the Landscape of Programmable Networks: Looking beyond the Regulatory Status Quo\n", "abstract": " Digital transition processes are transforming industries, economies, and societies. On the one hand, the number of connected end-users and things is growing rapidly. On the other hand, the range of applications is continuously evolving. As applications like IoT, the Tactile Internet, or Immersive User Interfaces gain traction, the demands for traffic delivery, privacy, and security become highly diverse and complex. In meeting these demands, programmable networks gain importance. They introduce a new networking paradigm and provide an evolved spectrum of capabilities. In this paper, we conduct a cross-disciplinary study to navigate the landscape of programmable networks. We provide a comprehensive overview of the evolution and the growing complexity of this new networking paradigm and, based on a horizon scanning approach, elucidate associated opportunities and challenges. From this, we derive and discuss insights for the design of appropriate policies and regulatory frameworks for the future Internet.", "num_citations": "4\n", "authors": ["1681"]}
{"title": "Shortcutting Fast Failover Routes in the Data Plane\n", "abstract": " In networks, availability is of paramount importance. As link failures are disruptive, modern networks in turn provide Fast ReRoute (FRR) mechanisms to rapidly restore connectivity. However, existing FRR approaches heavily impact performance until the slower convergence protocols kick in. The fast failover routes commonly involve unnecessary loops and detours, disturbing other traffic while causing costly packet loss. In this paper, we make a case for augmenting FRR mechanisms to avoid such inefficiencies. We introduce ShortCut that routes the packets in a loop free fashion, avoiding costly detours and decreasing link load. ShortCut achieves this by leveraging data plane programmability: when a loop is locally observed, it can be removed by short-cutting the respective route parts. As such, ShortCut is topology-independent and agnostic to the type of FRR currently deployed. Our first experimental simulations show that ShortCut can outperform control plane convergence mechanisms; moreover avoiding loops and keeping packet loss minimal opposed to existing FRR mechanisms.", "num_citations": "1\n", "authors": ["1681"]}
{"title": "Towards Runtime Verification of Programmable Networks\n", "abstract": " Today, we rely heavily upon Internet-connected devices, applications, and services. Such reliance makes it crucial for the underlying networks to be reliable and secure. However, network outages, bugs in network devices such as switches and routers, and security compromises of the critical network infrastructure happen and sometimes, incur losses in revenue. This makes network management and control critically important. Networking devices such as IP-based routers and ethernet-based switches are fixed-function devices that are vertically integrated, i.e., the control and data plane are bundled together. These devices can only be configured by network operators and, thus, notably lag behind in terms of providing useful and custom abstractions for network management and orchestration. This necessitated the need for new network management and control paradigms.  Software-defined Networking (SDN) emerged as a paradigm that introduced programmability. SDN decouples the previously distributed control plane from the data plane and outsources the control to a logically centralized software SDN controller running on commodity hardware. SDN controller manages and controls several data plane devices (e.g., SDN switches) through a well-known interface known as OpenFlow while offering a multitude of opportunities regarding management and control through programmability of the control plane. However, the SDN switches remain as fixed-function devices that can only be configured via OpenFlow but not programmed. To enhance SDNs, Programming Protocol-independent Packet Processors (P4) language was introduced. P4 is\u00a0\u2026", "num_citations": "1\n", "authors": ["1681"]}