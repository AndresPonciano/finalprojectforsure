{"title": "A study of the community structure of a complex software network\n", "abstract": " This paper presents a case study of a large software system, Netbeans 6.0, made of independent subsystems, which are analyzed as complex software networks. Starting from the source code we built the associated software graphs, where classes represent graph nodes and inter-class relationships represent graph edges. We computed various metrics for the software systems and found interdependences with various quantities computed by mean of the complex network analysis. In particular we found that the number of communities in which the software networks can be partitioned and their modularity, average path length and mean degree can be related to the amount of bugs detected in the system. This result can be useful to provide indications about the fault proneness of software clusters in terms of quantities related to the associated graph structure.", "num_citations": "28\n", "authors": ["1236"]}
{"title": "Hashtag of Instagram: From Folksonomy to Complex Network.\n", "abstract": " The Instagram is a social network for smartphones created in 2010 and acquired by Facebook in 2012. It currently has more than 300 million registered users and allows for the immediate upload of images (square, inspired by Polaroid), to which users can associate hashtags and comments. Moreover, connections can be created between users that share the same interests. In our work, we intend to analyze the hashtags entered by users: the use of such hashtags, as it happens in other social networks like Twitter, generates a folksonomy, that is a user-driven classification of information. We intend to map that folksonomy as a complex network to which we can associate all the typical analysis and evaluations of such a mathematical model. Our purpose is to use the resulting complex network as a marketing tool, in order to improve brand or product awareness.", "num_citations": "19\n", "authors": ["1236"]}
{"title": "Cloudhealth: a model-driven approach to watch the health of cloud services\n", "abstract": " Cloud systems are complex and large systems where services provided by different operators must coexist and eventually cooperate. In such a complex environment, controlling the health of both the whole environment and the individual services is extremely important to timely and effectively react to misbehaviours, unexpected events, and failures. Although there are solutions to monitor cloud systems at different granularity levels, how to relate the many KPIs that can be collected about the health of the system and how health information can be properly reported to operators are open questions. This paper reports the early results we achieved in the challenge of monitoring the health of cloud systems. In particular we present CloudHealth, a model-based health monitoring approach that can be used by operators to watch specific quality attributes. The CloudHealth Monitoring Model describes how to operationalize\u00a0\u2026", "num_citations": "18\n", "authors": ["1236"]}
{"title": "The spartanizer: Massive automatic refactoring\n", "abstract": " The Spartanizer is an eclipse plugin featuring over one hundred and fifty refactoring techniques, all aimed at reducing various size complexity of the code, without changing its design, i.e., inheritance relations, modular structure, etc. Typical use case of the Spartanizer is in an automatic mode: refactoring operations are successively selected and applied by the tool, until the code is reshaped in spartan style (a frugal coding style minimizing the use of characters, variables, tokens, etc.). The Spartanizer demonstrates the potential of automatic refactoring: tens of thousands of transformations are applied in matter of seconds, chains of dependent applications of transformations with tens of operations in them, significant impact on code size, and extent reaching almost every line of code, even of professional libraries.", "num_citations": "12\n", "authors": ["1236"]}
{"title": "On comparing software quality metrics of traditional vs blockchain-oriented software: An empirical study\n", "abstract": " Driven by the surge of interest generated around blockchain technologies over the last years, a new category of systems, called Blockchain-Oriented Software (BOS), which are strictly tied to Blockchain distributed environment, has become increasingly popular. Yet, there is not a thorough understanding of their structure and behaviour and if and to which extent they differ from traditional software systems. The present work provide a first statistical characterisation of BOS. We analysed and compared 5 C++ open source Blockchain-Oriented and 5 Traditional Java software systems, aiming at detecting potential differences between the two categories of projects, and specifically in the statistical distribution of 10 software metrics. Although, in general, the statistical distributions for Traditional software and Blockchain software show similarities, the distribution of Average Cyclomatic and Ration Comment To Code metrics\u00a0\u2026", "num_citations": "11\n", "authors": ["1236"]}
{"title": "Are refactoring practices related to clusters in java software?\n", "abstract": " Refactoring is widely used among the practices of Agile software development. In this preliminary work we present an empirical study carried out on several releases of 5 software systems written in Java. We focus our attention on the effect of refactoring activities on the topology of the software network. We find that refactoring activities involve classes linked together into clusters inside the software network and the clusters may be modified in different ways by the refactoring activity. This could lead to significative changes in source code, whose knowledge could be valuable for people involved in software development.", "num_citations": "8\n", "authors": ["1236"]}
{"title": "Varys: An agnostic model-driven monitoring-as-a-service framework for the cloud\n", "abstract": " Cloud systems are large scalable distributed systems that must be carefully monitored to timely detect problems and anomalies. While a number of cloud monitoring frameworks are available, only a few solutions address the problem of adaptively and dynamically selecting the indicators that must be collected, based on the actual needs of the operator. Unfortunately, these solutions are either limited to infrastructure-level indicators or technology-specific, for instance, they are designed to work with OpenStack but not with other cloud platforms. This paper presents the VARYS monitoring framework, a technology-agnostic Monitoring-as-a-Service solution that can address KPI monitoring at all levels of the Cloud stack, including the application-level. Operators use VARYS to indicate their monitoring goals declaratively, letting the framework to perform all the operations necessary to achieve a requested monitoring\u00a0\u2026", "num_citations": "7\n", "authors": ["1236"]}
{"title": "Code spartanization\n", "abstract": " Spartan programming is a coding style which tries to minimize the elements of code, like in a laconic speech. In the context of code, the minimized elements of speech include lines, characters, arguments, nesting use of ifs and whiles, etc. The style is achieved by the process of repeated application of code transformation techniques, or refactoring operations, drawn from the spartan toolbox of tippers. Each tipper improves at least one of the code size metrics, without degrading any of the others. We present the unique look of spartan code, and the process of achieving it, including the three main kinds of tippers: structural, nominal, and modular. We do not make the case for the spartan style here, leaving the readers to find beauty or savageness in it. The evaluation part of this work gives evidence that the application of structural tippers contributes to the naturalness of software.", "num_citations": "5\n", "authors": ["1236"]}
{"title": "Anomaly detection as-a-service\n", "abstract": " Cloud systems are complex, large, and dynamic systems whose behavior must be continuously analyzed to timely detect misbehaviors and failures. Although there are solutions to flexibly monitor cloud systems, cost-effectively controlling the anomaly detection logic is still a challenge. In particular, cloud operators may need to quickly change the types of detected anomalies and the scope of anomaly detection, for instance based on observations. This kind of intervention still consists of a largely manual and inefficient ad-hoc effort. In this paper, we present Anomaly Detection as-a-Service (ADaaS), which uses the same as-a-service paradigm often exploited in cloud systems to declarative control the anomaly detection logic. Operators can use ADaaS to specify the set of indicators that must be analyzed and the types of anomalies that must be detected, without having to address any operational aspect. Early results\u00a0\u2026", "num_citations": "4\n", "authors": ["1236"]}
{"title": "A nano-pattern language for java\n", "abstract": " Patterns, micro-patterns, and nano-patterns have many applications: program comprehension, code transformations, documentation aids, improving code robustness, etc. This work revisits the notion of nano-patterns\u2014originally an obiter dictum of the work on micro-patterns. Nano-patterns here are taken as more general than their previous definition in the literature: predicates on short code snippets that represent some common and elementary programming missions such as \u201cfor each\u00a0m\u202f\u2208\u202fM do...\u201d, or, \u201cuse\u00a0x (but if\u00a0x is null,\u00a0y is a substitute)\u201d, which represent small and recurring programming idioms.With this generalization, we offer a taxonomized languageof\u00a0nanos nano-patterns for Java. We also describe the process of pattern harvesting we used and the underlying rationale, including our proposed prevalence threshold criterion, which, by capitalizing on Hirsch\u2019s famous\u00a0h-index, makes a robust yard-stick of the\u00a0\u2026", "num_citations": "4\n", "authors": ["1236"]}
{"title": "Dev-for-operations and multi-sided platform for next generation platform as a service\n", "abstract": " This paper presents two new challenges for the Telco ecosystem transformation in the era of cloud-native microservice-based architectures. (1) Development-for-Operations (Dev-for-Operations) impacts not only the overall workflow for deploying a Platform as a Service (PaaS) in an open foundry environment, but also the Telco business as well as operational models to achieve an economy of scope and an economy of scale. (2) For that purpose, we construct an integrative platform business model in the form of a Multi-Sided Platform (MSP) for building Telco PaaSes. The proposed MSP based architecture enables a multi-organizational ecosystem with increased automation possibilities for Telco-grade service creation and operation. The paper describes how the Dev-for-Operations and MSP lift constraints and offers an effective way for next-generation PaaS building, while mutually reinforcing each other in the\u00a0\u2026", "num_citations": "3\n", "authors": ["1236"]}
{"title": "Pluggable controllers and nano-patterns\n", "abstract": " This paper raises the idea of giving end users the ability to modify and extend the control flow constructs (if, while, etc.) of the underlying programming language, just as they can modify and extend the library standard implementation of function printf and class String. Pluggable Controllers are means for modular design of control constructors, e.g., if, while, do, switch, and operators such as short circuit conjunction (&&) and the \u201c?.\u201d operator of the Swift programming language. We propose a modular, pluggable controllers based, design of a language. In this design there are control constructors which are core, augmented by a standard library of control constructors, which just like all standard libraries, is extensible and replaceable. The control constructors standard library can then follow a course of evolution that is less coupled with that of the main language, where a library release does not mandate new language\u00a0\u2026", "num_citations": "3\n", "authors": ["1236"]}
{"title": "Model-Based Monitoring for IoTs Smart Cities Applications\n", "abstract": " Smart Cities are future urban aggregations, where a multitude of heterogeneous systems and IoT devices interact to provide a safer, more efficient, and greener environment. The vision of smart cities is adapting accordingly to the evolution of software and IoT based services. The current trend is not to have a big comprehensive system, but a plethora of small, well integrated systems that interact one with each other. Monitoring these kinds of systems is challenging for a number of reasons.", "num_citations": "2\n", "authors": ["1236"]}
{"title": "Re-Factored Operational Support Systems for the Next Generation Platform-as-a-Service (NGPaaS)\n", "abstract": " Platform-As-A-Service (PaaS) systems offer customers a rich environment in which to build, deploy, and run applications. Today's PaaS offerings are tailored mainly to the needs of web and mobile applications developers, and involve a fairly rigid stack of components and features. The vision of the H2020 5GPPP Phase 2 Next Generation Platform-as-a-Service (NGPaaS) project is to enable \"build-to-order\" customized PaaSes, tailored to the needs of a wide range of use cases with telco-grade 5G characteristics. This paper sets out the salient and innovative features of NGPaaS and explores the impacts on Operational Support Systems and Business Support Systems (OSS/BSS), moving from fixed centralized stacks to a much more flexible and modular distributed architecture.", "num_citations": "2\n", "authors": ["1236"]}
{"title": "Clustering of defects in java software systems\n", "abstract": " In this paper we present a case study about the clustering of maintenance activities applied on large software systems, from the complex networks perspective. We analyze several releases of two large Open Source Java software systems, using data extracted from Software Configuration Management systems and from Issue Tracking systems (ITS). We find that Java files affected by maintenance activity are likely to be connected with each other, forming interconnected clusters inside the software network associated to the software system. This means that Java files interested by the maintenance activities requested on ITS are likely to be connected each other through dependencies at the source code level. The information carried by the clusters of Java files may be used to improve strategies for large maintenance operations. Since the tendency to form clusters can vary across different systems, such analysis can\u00a0\u2026", "num_citations": "2\n", "authors": ["1236"]}
{"title": "Design for testability of ERMTS applications\n", "abstract": " The European Rail Traffic Management System (ERTMS) represents a class of embedded software-intensive systems of systems for the management of the European rail traffic, in a scenario where interoperability between different European rail traffic infrastructures must be maintained. Due to the intrinsically safety-critical nature of ERTMS, software testing must meet the strict prescriptions imposed by the certification authorities, which often require the availability of the entire system. This potentially leads to perform the tests at a late stage of development, even though the best practices suggest that it would be more convenient to test the system incrementally since the early stages of development. This paper deals with the solution we devised to address this issue in a recent ERTMS project. We adopted a design-for-testability pattern which purposely enhances the observability and the controllability of the software\u00a0\u2026", "num_citations": "1\n", "authors": ["1236"]}
{"title": "Code Spartanization: One rational approach for resolving religious style wars\n", "abstract": " Spartan programming is a coding style which tries to minimize the elements of code, like in a laconic speech. In the context of code, the minimized elements of speech include lines, characters, arguments, nesting use of ifs and whiles, etc. The style is achieved by the process of repeated application of code transformation techniques, or refactoring operations, drawn from the spartan toolbox of tippers. Each tipper improves at least one of the code size metrics, without degrading any of the others. We present the unique look of spartan code, and the process of achieving it, including the three main kinds of tippers: structural, nominal, and modular. We do not make the case for the spartan style here, leaving the readers to find beauty or savageness in it. The evaluation part of this work gives evidence that the application of structural tippers contributes to the naturalness of software.", "num_citations": "1\n", "authors": ["1236"]}
{"title": "A Complex Network Approach for Museum Services.\n", "abstract": " In a globalized economy, cultural heritage is a strong attractor. Thanks to ICT, it is possible to trigger new development dynamics. For cultural heritage, the contribution of new technologies can offer the highest degree of distribution and access opportunities. A modern museum can actually be seen as a complex ICT system, deeply interconnected, with typically a large quantity of data to manage, extremely dynamic due to ever-changing temporary exhibitions, and with applications that feature a high level of usability for a higher visitor involvement. The aim of this position paper is to create an approach geared to provide aggregated information on the nature, range and articulation of the belongings of the museum, through a paradigm based on the concept of complex network. Applying the complex network model, it will be possible to map a corpora of items made of works of art, artifacts and any object of interest for a museum. The implications derived from the adoption of this approach are multifarious: for example, a curator could evaluate partnership opportunities in the organization of temporary exhibitions, guided paths or catalog editing through an analysis of the relations between the items in their museum and the ones in other museums.", "num_citations": "1\n", "authors": ["1236"]}