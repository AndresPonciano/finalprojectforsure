{"title": "Agile software development\n", "abstract": " This focus section contains papers related to agile software development. The papers address a range of research areas including the application of agile methods to safety critical software development, the relationship of agile development with user experience design and how to measure flow in lean software development.", "num_citations": "58\n", "authors": ["569"]}
{"title": "A software requirements change source taxonomy\n", "abstract": " Requirements changes during software development pose a risk to cost, schedule and quality while at the same time providing an opportunity to add value. Provision of a generic change source taxonomy which makes the distinction between factors contributing to requirements uncertainty and events that trigger change will support requirements change risk visibility, and also facilitate richer recording of change data. In this paper we present a collaborative study to investigate and support the management of software requirements volatility within the development lifecycle. Previously published change `causes' are elicited from the literature, consolidated using expert knowledge and classified using card sorting. The resulting change trigger taxonomy constructs were initially validated using a small set of requirements change data, and deemed sufficient and practical as a means to collect common requirements\u00a0\u2026", "num_citations": "56\n", "authors": ["569"]}
{"title": "Towards an understanding of the causes and effects of software requirements change: two case studies\n", "abstract": " Changes to software requirements not only pose a risk to the successful delivery of software applications but also provide opportunity for improved usability and value. Increased understanding of the causes and consequences of change can support requirements management and also make progress towards the goal of change anticipation. This paper presents the results of two case studies that address objectives arising from that ultimate goal. The first case study evaluated the potential of a change source taxonomy containing the elements \u2018market\u2019, \u2018organisation\u2019, \u2018vision\u2019, \u2018specification\u2019, and \u2018solution\u2019 to provide a meaningful basis for change classification and measurement. The second case study investigated whether the requirements attributes of novelty, complexity, and dependency correlated with requirements volatility. While insufficiency of data in the first case study precluded an investigation of\u00a0\u2026", "num_citations": "53\n", "authors": ["569"]}
{"title": "Adaptive agent model: software adaptivity using an agent-oriented model-driven architecture\n", "abstract": " Model-Driven Architecture (MDA) promotes the development of software systems through successive building and generation of models, improving the reusability of models. Applying the same principles to the area of Agent-Oriented Software Engineering (AOSE) advances the ideas behind MDA even more significantly, due to the inherent adaptivity of software agents We describe an appropriate set of models originating from requirements specification and transformable to models understandable and executable by agents thus demonstrating an Agent-oriented Model-Driven Architecture (AMDA) approach. In AMDA, agents use hierarchical business knowledge models with business process rules at the top, business rules to control policy and logic in the middle and a base layer defining business concepts. Being externalised, knowledge is easily configurable by human beings and applied by software agents. A\u00a0\u2026", "num_citations": "45\n", "authors": ["569"]}
{"title": "Prioritisation of system changes using cost-benefit and risk assessments\n", "abstract": " This paper proposes an approach to the prioritisation of system changes that takes account of the relative costs and benefits of those changes and the risks that they reduce or introduce. This is part of the SERUM methodology (Software Engineering Risk: Understanding and Management), which is being developed to help identify effective ways of using risk analysis and control in software production. SERUM introduces risk management at the initial business analysis stage of requirements investigation, and assumes an evolutionary approach to software delivery. Prioritisation is determined from five factors: benefits, costs and risk exposure in the current system, target system, and development process. The relative importance of these factors is adjustable. Results from a case study at NEC illustrate the prioritisation process and a supporting software tool is also described.", "num_citations": "45\n", "authors": ["569"]}
{"title": "Performance Models of Storage Contention in Cloud Environments\n", "abstract": " We propose simple models to predict the performance degradation of disk requests due to storage device contention in consolidated virtualized environments. Model parameters can be deduced from measurements obtained inside Virtual Machines (VMs) from a system where a single VM accesses a remote storage server. The parameterized model can then be used to predict the effect of storage contention when multiple VMs are consolidated on the same server. We first propose a trace-driven approach that evaluates a queueing network with fair share scheduling using simulation. The model parameters consider Virtual Machine Monitor level disk access optimizations and rely on a calibration technique. We further present a measurement-based approach that allows a distinct characterization of read/write performance attributes. In particular, we define simple linear prediction models for I/O request mean\u00a0\u2026", "num_citations": "44\n", "authors": ["569"]}
{"title": "Software risk management barriers: An empirical study\n", "abstract": " This paper reports results from a survey of experienced project managers on their perception of software risk management. From a sample of 18 experienced project managers, we have found good awareness of risk management, but low tool usage. We offer evidence that the main barriers to performing risk management are related to its perceived high cost and comparative low value. Psychological issues are also important, but less so. Risk identification and monitoring, in particular, are perceived as effort intensive and costly. The perception is that risk management is not prioritised highly enough. Our conclusion is that more must be done to visibly prove the value : cost ratio for risk management activities.", "num_citations": "41\n", "authors": ["569"]}
{"title": "The maturation of agile software development principles and practice: Observations on successive industrial studies in 2010 and 2012\n", "abstract": " The agile model of software development has been mainstream for several years, and is now in a phase where its principles and practices are maturing. The purpose of this paper is to describe the results of an industry survey aimed at understanding how maturation is progressing. The survey was taken across 40 software development companies in Northern Ireland at the beginning of 2012. The paper describes the design of the survey and examines maturity by comparing the results obtained in 2012 with those from a study of agile adoption in the same region in 2010. Both surveys aimed to achieve comprehensive coverage of a single area rather than rely on a voluntary sample. The main outcome from the work is a collection of \"insights\" into the nature and practice of agile development, the main two of which are reported in this paper.", "num_citations": "40\n", "authors": ["569"]}
{"title": "Agile risk management using software agents\n", "abstract": " Risk management is an important process in Software Engineering. However, it can be perceived as somewhat contrary to the more lightweight processes used in Agile methods. Thus an appropriate and realistic risk management model is required as well as tool support that minimizes human effort. We propose the use of software agents to carry out risk management tasks and make use of the data collected from the project environment to detect risks. This paper describes the underlying risk management model in an Agile risk tool where software agents are used to support identification, assessment and monitoring of risk. It demonstrates the interaction between agents, agents\u2019 compliance with designated rules and how agents can react to changes in project environment data. The results, demonstrated using case studies, show that agents are of use for detecting risk and reacting dynamically to changes\u00a0\u2026", "num_citations": "37\n", "authors": ["569"]}
{"title": "IO performance prediction in consolidated virtualized environments\n", "abstract": " We propose a trace-driven approach to predict the performance degradation of disk request response times due to storage device contention in consolidated virtualized environments. Our performance model evaluates a queueing network with fair share scheduling using trace-driven simulation. The model parameters can be deduced from measurements obtained inside Virtual Machines (VMs) from a system where a single VM accesses a remote storage server. The parameterized model can then be used to predict the effect of storage contention when multiple VMs are consolidated on the same virtualized server. The model parameter estimation relies on a search technique that tries to estimate the splitting and merging of blocks at the the Virtual Machine Monitor (VMM) level in the case of multiple competing VMs. Simulation experiments based on traces of the Postmark and FFSB disk benchmarks show that our\u00a0\u2026", "num_citations": "35\n", "authors": ["569"]}
{"title": "Implementing advanced spoken dialogue management in Java\n", "abstract": " In this article we describe how Java can be used to implement an object-based, cross-domain, mixed initiative spoken dialogue manager (DM). We describe how dialogue that crosses between several business domains can be modelled as an inheriting and collaborating suite of objects suitable for implementation in Java. We describe the main features of the Java implementation and how the Java dialogue manager can be interfaced via the Galaxy software hub, as used in the DARPA-sponsored Communicator projects in the United States, with the various off-the-shelf components that are needed in a complete end-to-end spoken dialogue system. We describe the interplay of the Java components in the course of typical dialogue turns and present an example of the sort of dialogue that the Java DM can support.", "num_citations": "33\n", "authors": ["569"]}
{"title": "Technical debt reduction using search based automated refactoring\n", "abstract": " Software refactoring has been recognized as a valuable process during software development and is often aimed at repaying technical debt. Technical debt arises when a software product has been built or amended without full care for structure and extensibility. Refactoring is useful to keep technical debt low and if it can be automated there are obvious efficiency benefits. Using a combination of automated refactoring techniques, software metrics and metaheuristic searches, an automated refactoring tool can improve the structure of a software system without affecting its functionality. In this paper, four different refactoring approaches are compared using an automated software refactoring tool. Weighted sums of metrics are used to form different fitness functions that drive the search process towards certain aspects of software quality. Metrics are combined to measure coupling, abstraction and inheritance and a\u00a0\u2026", "num_citations": "30\n", "authors": ["569"]}
{"title": "SERUM-Software engineering risk: Understanding and management\n", "abstract": " Software development is often characterised by problems with projects over-running their schedule or by failure to satisfy user requirements for functionality and quality. It follows therefore that risk management should be part of any effective software development process. One approach is to identify risks explicitly at various stages in the software process and then determine how best to respond to them. An alternative strategy is to handle some (perhaps most) of the significant risks covertly by building risk reduction techniques into the development process. This paper argues that the overall risk management process should make use of both forms of risk management, with initial emphasis placed on implicit risk management as that is where the greatest return for effort is likely to be obtained. A particular approach, SERUM, is described which considers risk from initial business analysis up to and beyond software delivery. The approach makes use of two particular techniques:(i) Checkland and Wilson\u2019s Soft Systems Methodology (SSM); and (ii) Gilb\u2019s Evolutionary Delivery. In each case the implicit risk reduction contribution of the technique is identified and then the further advantage of an explicit risk treatment explored.", "num_citations": "26\n", "authors": ["569"]}
{"title": "Software requirements change taxonomy: Evaluation by case study\n", "abstract": " Although a number of requirements change classifications have been proposed in the literature, there is no empirical assessment of their practical value in terms of their capacity to inform change monitoring and management. This paper describes an investigation of the informative efficacy of a taxonomy of requirements change sources which distinguishes between changes arising from `market', `organisation', `project vision', `specification' and `solution'. This investigation was effected through a case study where change data was recorded over a 16 month period covering the development lifecycle of a government sector software application. While insufficiency of data precluded an investigation of changes arising due to the change source of `market', for the remainder of the change sources, results indicate a significant difference in cost, value to the customer and management considerations. Findings show that\u00a0\u2026", "num_citations": "25\n", "authors": ["569"]}
{"title": "A survey of search-based refactoring for software maintenance\n", "abstract": " This survey reviews published materials related to the specific area of Search-Based Software Engineering that concerns software maintenance and, in particular, refactoring. The survey aims to give a comprehensive review of the use of search-based refactoring to maintain software. Fifty different papers have been selected from online databases to analyze and review the use of search-based refactoring in software engineering. The current state of the research is analyzed and patterns in the studies are investigated in order to assess gaps in the area and suggest opportunities for future research. The papers reviewed are tabulated in order to aid researchers in quickly referencing studies. The literature addresses different methods using search-based refactoring for software maintenance, as well as studies that investigate the optimization process and discuss components of the search. There are studies that analyze different software metrics, experiment with multi-objective techniques and propose refactoring tools for use. Analysis of the literature has indicated some opportunities for future research in the area. More experimentation of the techniques in an industrial environment and feedback from software developers is needed to support the approaches. Also, recent work with multi-objective techniques has shown that there are exciting possibilities for future research using these techniques with refactoring. This survey is beneficial as an introduction for any researchers aiming to work in the area of Search-Based Software Engineering with respect to software maintenance and will allow them to gain an understanding of the current landscape of\u00a0\u2026", "num_citations": "24\n", "authors": ["569"]}
{"title": "Lightweight risk management in Agile projects\n", "abstract": " Risk management in software engineering has become a recognized project management practice but it seems that not all companies are systematically applying it. At the same time, agile methods have become popular, partly because proponents claim that agile methods implicitly reduce risks due to for example, more frequent and earlier feedback, shorter periods of development time and easier prediction of cost. Therefore, there is a need to investigate how risk management can be usable in iterative and evolutionary software development processes. This paper investigates the gathering of empirical data on risk management from the project environment and presents a novel approach to manage risk in agile projects. Our approach is based on a prototype tool, Agile Risk Tool (ART). This tool reduces human effort in risk management by using software agents to identify, assess and monitor risk, based on input and data collected from the project environment and by applying some designated rules. As validation, groups of student project data were used to provide evidence of the efficacy of this approach. We demonstrate the approach and the feasibility of using a lightweight risk management tool to alert, assess and monitor risk with reduced human effort.", "num_citations": "21\n", "authors": ["569"]}
{"title": "Towards agent-oriented model-driven architecture\n", "abstract": " Model-Driven Architecture (MDA) supports the transformation from reusable models to executable software. Business representations, however, cannot be fully and explicitly represented in such models for direct transformation into running systems. Thus, once business needs change, the language abstractions used by MDA (e.g. object constraint language/action semantics), being low level, have to be edited directly. We therefore describe an agent-oriented MDA (AMDA) that uses a set of business models under continuous maintenance by business people, reflecting the current business needs and being associated with adaptive agents that interpret the captured knowledge to behave dynamically. Three contributions of the AMDA approach are identified: (1) to Agent-oriented Software Engineering, a method of building adaptive Multi-Agent Systems; (2) to MDA, a means of abstracting high-level business-oriented\u00a0\u2026", "num_citations": "21\n", "authors": ["569"]}
{"title": "Wiq: work-intensive query scheduling for in-memory database systems\n", "abstract": " We propose a novel admission control policy for database queries. Our methodology uses system measurements of CPU utilization and query backlogs to determine interference between queries in execution on the same database server. Query interference may arise due to the concurrent access of hardware and software resources and can affect performance in positive and negative ways. Specifically our admission control considers the mix of jobs in service and prioritizes the query classes consuming CPU resources more efficiently. The policy ignores I/O subsystems and is therefore highly appropriate for in-memory databases. We validate our approach in trace-driven simulation and show performance increases of query slowdowns and throughputs compared to first-come first-served and shortest expected processing time first scheduling. Simulation experiments are parameterized from system traces of a SAP\u00a0\u2026", "num_citations": "20\n", "authors": ["569"]}
{"title": "Software project initiation and planning\u2013an empirical study\n", "abstract": " This study describes a study of 14 software companies, on how they initiate and pre-plan software projects. The aim was to obtain an indication of the range of planning activities carried out. The study, using a convenience sample, was carried out using structured interviews, with questions about early software project planning activities. The study offers evidence that an iterative and incremental development process presents extra difficulties in the case of fixed-contract projects. The authors also found evidence that feasibility studies were common, but generally informal in nature. Documentation of the planning process, especially for project scoping, was variable. For incremental and iterative development projects, an upfront decision on software architecture was shown to be preferred over allowing the architecture to just \u2018emerge\u2019. There is also evidence that risk management is recognised but often performed\u00a0\u2026", "num_citations": "20\n", "authors": ["569"]}
{"title": "Sources of software requirements change from the perspectives of development and maintenance\n", "abstract": " Changes to software requirements occur during initial development and subsequent to delivery, posing a risk to cost and quality while at the same time providing an opportunity to add value. Provision of a generic change source taxonomy will support requirements change risk visibility, and also facilitate richer recording of both pre-and post-delivery change data. In this paper we present a collaborative study to investigate and classify sources of requirements change, drawing comparison between those pertaining to software development and maintenance. We begin by combining evolution, maintenance and software lifecycle research to derive a definition of software maintenance, which provides the foundation for empirical context and comparison. Previously published change \u2018causes\u2019 pertaining to development are elicited from the literature, consolidated using expert knowledge and classified using card sorting. A second study incorporating causes of requirements change during software maintenance results in a taxonomy which accounts for the entire evolutionary progress of applications software. We conclude that the distinction between the terms maintenance and development is imprecise, and that changes to requirements in both scenarios arise due to a combination of factors contributing to requirements uncertainty and events that trigger change. The change trigger taxonomy constructs were initially validated using a small set of requirements change data, and deemed sufficient and practical as a means to collect common requirements change statistics across multiple projects.", "num_citations": "16\n", "authors": ["569"]}
{"title": "Allowing for task uncertainties and dependencies in agile release planning\n", "abstract": " The ability to produce and execute a clear and realistic release plan can be the determinant factor between success and failure of a software project. The creation of such a plan is extremely difficult, key factors such as time and cost to develop chosen functionality and also the likely return are subject to a high level of uncertainty. This paper proposes a relatively simple statistical methodology to account for the uncertainties in the time to develop functionality. The method applies primarily to the eXtreme Programming (XP) method and allows for both uncertainty in story size and in project velocity. In so doing it provides key stakeholders with the opportunity to manage uncertainty in the planning of what functionality to include in upcoming releases. The technique is lightweight in nature and consistent with existing agile planning practices. A case study is provided to illustrate and explore the proposed methodology.", "num_citations": "16\n", "authors": ["569"]}
{"title": "The agent-rule-class framework for multi-agent systems\n", "abstract": " Multi-Agent Systems (MAS) have become increasingly mature, but this maturity does not make the traditional Object Oriented (OO) approaches obsolete. On the contrary, building MAS in combination with OO constructs allows the reuse of existing components. Similarly, OO methodologies can benefit from extension towards an agent abstraction and so make use of the methods and tools for MAS. The Agent-Rule-Class (ARC) framework is proposed as an approach that builds agents upon traditional OO system components and makes use of business rules to dictate agent behaviours, aided by the OO components. By modelling agent knowledge in business rules, the proposed paradigm provides a straightforward means to develop agent-oriented systems based on the existing object-oriented systems and offers features that are otherwise difficult to achieve in OO systems. A Structural Model and a Behavioural\u00a0\u2026", "num_citations": "15\n", "authors": ["569"]}
{"title": "Requirements prioritisation for incremental and iterative development\n", "abstract": " The problems associated with requirements prioritisation for an incremental and iterative software process are described. Existing approaches to prioritisation are then reviewed, including the Analytic Hierarchy Process, which involves making comparisons between requirements and SERUM, a method that uses absolute estimations of costs, benefits, and risks to inform the prioritisation process. In addition to these, the use of heuristic approaches is identified as a useful way to find an optimal solution to the problem given the complex range of inputs involved. In particular genetic algorithms are considered promising. An implementation of this, the EVOLVE method, is described using a case study. EVOLVE aims to optimally assign requirements to releases, taking into account:(i) effort measures for each requirement and effort constraints for each increment;(ii) risk measures for each requirement and risk limits for\u00a0\u2026", "num_citations": "14\n", "authors": ["569"]}
{"title": "Decision support for planning software evolution with risk management\n", "abstract": " Software evolution planning involves a decision making process about which changes should be introduced and when. This process is informed by knowledge relating to the existing product and its environment. There will be new enhancements as well as corrections to known problems. There is also knowledge of operational risks in the system that could manifest as problems at some time in the future. To counter these, risk reduction actions may be recommended. These can be treated as candidate system changes, with their own costs and possibly extra benefits. Any system changes will also carry with them development risks. To mitigate these further risk reduction actions may be formulated, again with an associated cost. However, there is typically a limited budget for the next release of the software. This constraint, along with that of inter-dependencies between candidate changes and taking account of the stakeholders varying attitude to risk means that there is a complex decision to be made. Using the fact that systems changes are estimable in terms of cost and benefit and that risks are estimable in terms of probability and potential impact cost, an approach is described that combines software evolution with risk management, incorporating simulation and genetic algorithms to support the decision making process. The method links product and project management and provides support for those involved in planning system evolution and is evaluated here using a sample project.", "num_citations": "14\n", "authors": ["569"]}
{"title": "MultiRefactor: automated refactoring to improve software quality\n", "abstract": " In this paper, a new approach is proposed for automated software maintenance. The tool is able to perform 26 different refactorings. It also contains a large selection of metrics to measure the impact of the refactorings on the software and six different search based optimization algorithms to improve the software. This tool contains both mono-objective and multi-objective search techniques for software improvement and is fully automated. The paper describes the various capabilities of the tool, the unique aspects of it, and also presents some research results from experimentation. The individual metrics are tested across five different codebases to deduce the most effective metrics for general quality improvement. It is found that the metrics that relate to more specific elements of the code are more useful for driving change in the search. The mono-objective genetic algorithm is also tested against the multi\u00a0\u2026", "num_citations": "12\n", "authors": ["569"]}
{"title": "Using a many-objective approach to investigate automated refactoring\n", "abstract": " ContextSoftware maintenance is expensive and so anything that can be done to reduce its cost is potentially of huge benefit. However, it is recognised that some maintenance, especially refactoring, can be automated. Given the number of possible refactorings and combinations of refactorings, a search-based approach may provide the means to optimise refactorings.ObjectiveThis paper describes the investigation of a many-objective genetic algorithm used to automate software refactoring, implemented as a Java tool, MultiRefactor.MethodThe approach and tool is evaluated using a set of open source Java programs. The tool contains four separate measures of software looking at the software quality as well as measures of code priority, refactoring coverage and element recentness. The many-objective algorithm combines the four objectives to improve the software in a holistic manner. An experiment has been\u00a0\u2026", "num_citations": "11\n", "authors": ["569"]}
{"title": "Effecting and measuring risk reduction in software development\n", "abstract": " This paper describes an application of SERUM, a risk management methodology, to the definition and prioritisation of changes in a network management system at NEC Corporation. SERUM makes use of two risk reduction strategies:(i) performing a business analysis as the means of establishing required system changes and (ii) using an evolutionary delivery mechanism as means to implement those changes. SERUM also makes use of explicit risk management techniques. These are effected right at the start in the business analysis stage and through to the stage where evolutionary system changes are planned. As part of the planning process, SERUM uses a metric, Relative Risk Reduction Efficacy (RRRE), which helps to assess the risk-reducing effect of a system change. This metric, along with assessments of costs, benefits and development risks, enables system changes to be prioritised in preparation for implementing them in an evolutionary fashion.", "num_citations": "11\n", "authors": ["569"]}
{"title": "Externalisation and Adaptation of Mult-Agent System Behavior\n", "abstract": " This chapter proposes the adaptive agent model (AAM) for agent-oriented system development. In AAM, requirements can be transformed into externalised business rules. These rules represent agent behaviours, and collaboration between agents using the rules can be modelled using extended UML diagrams. Specifically, a UML structural model and a behavioural model are employed. XML is used to further specify the rules. The XML-based rules are subsequently translated by the agents. The UML diagrams and XML specification can both be edited at any time, the newly specified behaviours being available to the agent system immediately. An illustrative example is used to show how AAM is deployed, demonstrating adaptation of inter-agent collaboration, intra-agent behaviours, and agent ontologies. With AAM, there is no need to recode and regenerate the agent system when change occurs. Rather, the\u00a0\u2026", "num_citations": "10\n", "authors": ["569"]}
{"title": "Towards an evolutionary software delivery strategy based on soft systems and risk analysis\n", "abstract": " RACE is a requirements engineering method which is currently under development. This paper describes broadly the techniques developed so far, reviews earlier work on how risk analysis might be incorporated in RACE and proposes an extension of the method to include evolutionary delivery of proposed changes derived from the method. Proposed changes arising from RACE are often software related and tend to be radical and so are by nature high risk. Hence, these changes are well suited to evolutionary delivery. A means of deriving an evolutionary delivery plan based on cost-benefit analysis and on a risk assessment of the current system, the proposed system and the development of the proposed system is described.", "num_citations": "10\n", "authors": ["569"]}
{"title": "The Adaptive Agent Model: Software Adaptivity through Dynamic Agents and XMLbased Business Rules.\n", "abstract": " The Adaptive Agent Model (AAM) achieves adaptivity in three areas. i) Agents are associated with business rules. These rules are configured by business analysts in a natural language style, using a Business Rules Editor, stored in an XML repository and executed by agents. ii) The vocabularies of rules are easily changed. A Metadata Editor is described for this purpose, allowing business analysts to dynamically create new objects/attributes or edit existing ones during the operation of the software system. Once new rules involving new vocabularies are defined and assigned to agents, they will take effect immediately at run-time, reflecting new policies and ontologies available to the system. iii) The collaboration between agents can be modified. We describe an Architecture Editor which facilitates control of the agent interaction. Adaptivity in these three areas, using the associated editors, is demonstrated. The approach ensures that agents implement up-to-date requirements, reflecting desired current behaviour, without the need for frequent system rebuilds. AAM is illustrated and evaluated using of an e-business example.", "num_citations": "9\n", "authors": ["569"]}
{"title": "Towards optimal software engineering: learning from agile practice\n", "abstract": " In essence, optimal software engineering means creating the right product, through the right process, to the overall satisfaction of everyone involved. Adopting the agile approach to software development appears to have helped many companies make substantial progress towards that goal. The purpose of this paper is to clarify that contribution from comparative survey information gathered in 2010 and 2012. The surveys were undertaken in software development companies across Northern Ireland. The paper describes the design of the surveys and discusses optimality in relation to the results obtained. Both surveys aimed to achieve comprehensive coverage of a single region rather than rely on a voluntary sample. The main outcome from the work is a collection of insights into the nature and advantages of agile development, suggesting how further progress towards optimality might be achieved.", "num_citations": "7\n", "authors": ["569"]}
{"title": "Collaborative risk management\n", "abstract": " The SERUM methodology, developed by the authors, provides a framework for risk management based on a broad systems approach to software engineering. For its effective operation, all those affected by risk, or contributing to its management, need to be aware of the threats involved and how they are being addressed. Such awareness requires good ongoing communication among these stakeholders. This paper suggests how the Internet might support that communication. The approach, RA!SE (Risk Alert! for Software Engineering), assumes that software engineering data is held centrally in an organization, with stakeholders given access to relevant development and operational information through a Web-based communication tool, The paper clarifies the need for collaborative risk management and develops requirements for tool support. Details of a resulting prototype are presented, and illustrated with risk\u00a0\u2026", "num_citations": "7\n", "authors": ["569"]}
{"title": "Learning to Program: Choose Your Lecture Seat Carefully!\n", "abstract": " Much previous research has indicated that where a student sits in a university lecture theatre has a correlation with their final grade. Frequently those students that sit regularly in the front rows have been reported to achieve the highest grades. However most of the research restricted student seat movement, which is both unnatural and may have adversely influenced the research results. A previously reported unique unrestricted seat tracking investigation by the authors of this paper used a web and mobile software tracking application (PinPoint) to investigate student seating related performances in a 12 week Java programming university module. The PinPoint investigation concluded that the best assessment results were achieved by the students in the front rows and that assessment scores degraded the further students sat from the front. Additionally while the most engaged students were found to regularly sit at\u00a0\u2026", "num_citations": "6\n", "authors": ["569"]}
{"title": "A Hierarchical Agent-oriented Knowledge Model for Multi-Agent Systems.\n", "abstract": " Software systems used in a business environment must consider knowledge about business processes, business rules, business terms, and their manageability, adaptability, and maintainability due to changing environment over time. In this paper, from a Software Engineering perspective, we propose hierarchical structure for business knowledge that is then made available to agents running in systems. Such knowledge is sourced from the business requirements and becomes a knowledge base of agents, the basis for agent behaviour. Because the knowledge is externalised from the system, system behaviour is easily maintained. As a result, the hierarchical agent-oriented knowledge model is advanced and advocated. The work extends the framework of Agent-Rule-Class (ARC)[2] and contributes a further development of the Adaptive Agent Model (AAM)[3] and is illustrated using the case of a rail track management system.", "num_citations": "6\n", "authors": ["569"]}
{"title": "Modeling, auto-generation and adaptation of multi-agent systems\n", "abstract": " We propose a lightweight approach that provides mechanisms for dynamic agent behavior at run-time. Agent collaborations are modeled in UML diagrams and agent behaviors are encoded in XML-based business rules. The combination of these captures the behavioral requirements and governs interagent and intra-agent behaviors. A CASE tool has been developed to enable the dynamic specification of agent behaviors and the generation of the agent systems. Agents get the appropriate rules in XML format and then translate and execute them at run-time. These rules are externalized and so maintenance effort is reduced, since there is no need to recode and regenerate the agent system. Rather, the system model is easily configured by users and agents will always get up-to-date rules to execute at run-time. The approach is illustrated with the aid of an e-business example and its efficacy discussed.", "num_citations": "6\n", "authors": ["569"]}
{"title": "Agent-oriented requirements modelling\n", "abstract": " We describe how reconstructing requirements specification using agents and UML helps to build a hierarchy of requirements knowledge which can then be transformed into a running agent system. With agents as the division units for organising functional requirements structurally, the relationship between different pieces of the requirements document appears more obvious and, checks for completeness and consistency are easier to perform. The approach has four steps: i) Goal Mapping, where we relate functional requirements to system goals; ii) Structural Modelling, where agents are identified and rules for these agents are specified; iii) Behavioural Modelling, where the business processes are documented in UML and xML, aiming at realising the system goals by participating agents; iv) Implementation, where a running agent system is automatically generated from the transformed requirements document. We illustrate the approach and its tool support using a real life case study. Using the knowledge from this, we discuss and evaluate the approach.", "num_citations": "5\n", "authors": ["569"]}
{"title": "Developing a co-evolutionary business-IT change plan\n", "abstract": " Developing a Co-Evolutionary Business-IT Change Plan \u2014 Queen's University Belfast Skip to main navigation Skip to search Skip to main content Queen's University Belfast Logo Help & FAQ Home Profiles Organisations Research output Projects Impact Datasets Activities Prizes Press / Media Student theses Facilities Search by expertise, name or affiliation Developing a Co-Evolutionary Business-IT Change Plan DW Bustard, Desmond Greer, Z. He, P. Lundy, R. Oakes, FG Wilkie School of Electronics, Electrical Engineering and Computer Science Knowledge and Data Engineering Research output: Chapter in Book/Report/Conference proceeding \u203a Chapter Overview Original language English Title of host publication Systems Modelling for Business Process Improvement Editors DW Bustard, P. Kawalek, MT Norris Publisher Artech House Pages 213-232 Number of pages 20 Publication status Published - 2000 Cite \u2026", "num_citations": "5\n", "authors": ["569"]}
{"title": "Software adaptivity through XML-based business rules and agents\n", "abstract": " How does the work advance the state-of-the-art? The work advances knowledge and practice on agents for adaptive systems. By making requirements executable as rules, a shortcut development process that goes directly from requirements to deployed system is demonstrated as possible. Maintenance becomes the process where business experts change text-based rules (low risk) as opposed to code change by developers (high risk). Motivation (Problems addressed): Software requirements are very difficult and expensive to adapt after the software has been developed, chiefly because they are embedded in code and new requirements are difficult to determine/predict.", "num_citations": "4\n", "authors": ["569"]}
{"title": "Social Network Analysis of Open Source Software: A Review and Categorisation\n", "abstract": " Context: As companies have become large users of Open Source Software, it is important that they feel comfortable in their Open Source strategies. One of the critical differences between Open Source and Proprietary Software is the communication networks.Objective: This paper tries to set a base for understanding how open source teams are structured and how they change. This is vital to understanding Open Source Software Communities.Method: The paper looks into previous research on Social Network Analysis of Open Source Software, using a systematic literature review. Papers were gathered from Scopus, IEEEXplore and ACM Digital Library, and used or discarded based on predetermined inclusion and exclusion criteria. Research which focuses on the success factors of Open Source Software through Network Analysis is also examined.Results: A subjective categorisation is established for the papers\u00a0\u2026", "num_citations": "3\n", "authors": ["569"]}
{"title": "Lecturing to Your Students: Is Their Heart In It?\n", "abstract": " The measurement of cognitive activity using physiological means such as heart rate activity is a well-established research practice. Most previous studies have concluded that elevated heart rate occurs when an individual is cognitively engaged. However, there have been very few studies focusing on the effect in a learning environment. The recent proliferation of accurate, cheap and unobtrusive wearable devices with biometric sensors presents a new opportunity to perform a relatively inexpensive, natural, large scale study on the biometric effects on students during a series of lectures. This study presents the design and results of a unique two year study of students\u2019 heart rate activity during a series of university computer programming lectures. It benchmarks student heart rate patterns during lectures and finds that there is a significant correlation between elevated heart rates and module scores. To the best\u00a0\u2026", "num_citations": "3\n", "authors": ["569"]}
{"title": "Behavioral Model Generation from Use Cases Based on Ontology Mapping and GRASP Patterns\n", "abstract": " This paper contributes a new approach for developing UML software designs from Natural Language (NL), making use of a meta-domain oriented ontology, well established software design principles and Natural Language Processing (NLP) tools. In the approach described here, banks of grammatical rules are used to assign event flows from essential use cases. A domain specific ontology is also constructed, permitting semantic mapping between the NL input and the modeled domain. Rules based on the widely-used General Responsibility Assignment Software Principles (GRASP) are then applied to derive behavioral models.", "num_citations": "3\n", "authors": ["569"]}
{"title": "Class Responsibility Assignment (CRA) for Use Case Specification to Sequence Diagrams (UC2SD)\n", "abstract": " Identifying responsibility for classes in object-oriented software design phase is a crucial task. This paper proposes an approach for producing high quality and robust behavioural diagrams (e.g. Sequence Diagrams) through Class Responsibility Assignment (CRA). GRASP or General Responsibility Assignment Software Pattern (or Principle) was used to direct the CRA process when deriving behavioural diagrams. A set of tools to support CRA was developed to provide designers and developers with a cognitive toolkit that can be used when analysing and designing object-oriented software. The tool developed is called Use Case Specification to Sequence Diagrams (UC2SD). UC2SD uses a new approach for developing Unified Modelling Language (UML) software designs from Natural Language, making use of a meta-domain oriented ontology, well established software design principles and established\u00a0\u2026", "num_citations": "3\n", "authors": ["569"]}
{"title": "Evolving Connectionist Systems with Evolutionary Self-Optimisatio\n", "abstract": " 9.8 Conclusions and Outlook               In this work, we summarised our current efforts on applying EC to build self-optimising ECOS. Two forms of EC, namely GA and ES, have been applied to on-line and off-line parameter optimisation and feature weighting of ECOS and have shown to be effective in enhancing ECOS\u2019 performance. The proposed methods could lead to the development of fully autonomous, selforganised and self-optimised systems that learn in a life long learning mode from different sources of information and improve their performance over time regardless of the incoming data distribution and the changes in the data dynamics.               It must however, be emphasised that the listed applications of EC to ECOS are by no means exhaustive. There are still important areas in ECOS unexplored, e.g. clustering of data, aggregation of rule nodes and adjustment of node radii. Presently, new ECOS methods\u00a0\u2026", "num_citations": "3\n", "authors": ["569"]}
{"title": "Video makes the coding star?\n", "abstract": " This research study was devised to investigate and assess the impact on learning of providing video lecture recordings to a first year programming module of a university computing degree. The proliferation in the use of video lecture capture (LC) In universities worldwide presents an opportunity to analyse video watching patterns in an attempt to quantify and qualify how students engage and learn with the LC videos. The study considers behavioural trends of students towards watching LC videos and relates these factors to academic impact, especially focusing on academic attainment. The study finds that there are significant and measurable factors identifiable from LC video analytics that can be used to predict student academic performance early enough during a course to provide early warning indicators of struggling students, especially useful in mass education environments.", "num_citations": "2\n", "authors": ["569"]}
{"title": "Automated Refactoring of Software Using Version History and a Code Element Recentness Measure\n", "abstract": " This paper proposes a multi-objective genetic algorithm to automate software refactoring and validates the approach using a tool, MultiRefactor, and a set of open source Java programs. The tool uses a metric function to measure quality in a software system and tests a second objective to measure the recentness of the code elements being refactored. Previous versions of the software project are analyzed and a recentness measure is then calculated with respect to previous versions of code. The multi-objective setup refactors the input program to improve its quality using the quality objective, while also focusing on the recentness of the code elements inspected. An experiment has been constructed to measure the multi-objective approach against an alternative mono-objective approach that does not use an objective to measure element recentness. The two approaches are validated using six different open source Java programs. The multi-objective approach is found to give significantly better recentness scores across all inputs in a similar time, while also generating improvements in the quality score.", "num_citations": "2\n", "authors": ["569"]}
{"title": "IO performance prediction in consolidated virtualized environments (abstracts only)\n", "abstract": " We propose a trace-driven approach to predict the performance degradation of disk request response times due to storage device contention in consolidated virtualized environments. Our performance model evaluates a queueing network with fair share scheduling using trace-driven simulation. The model parameters can be deduced from measurements obtained inside Virtual Machines (VMs) from a system where a single VM accesses a remote storage server. The parameterized model can then be used to predict the effect of storage contention when multiple VMs are consolidated on the same virtualized server. The model parameter estimation relies on a search technique that tries to estimate the splitting and merging of blocks at the the Virtual Machine Monitor (VMM) level in the case of multiple competing VMs. Simulation experiments based on traces of the Postmark and FFSB disk benchmarks show that our\u00a0\u2026", "num_citations": "2\n", "authors": ["569"]}
{"title": "RIPPLE: Retaining Integrity in Process Products over their Long-term Evolution\n", "abstract": " RIPPLE is one of a linked set of projects at the University of Ulster which are based on the premise that an organisation and its IT facilities should be aligned and evolve together towards a documented \u2018vision\u2019 for the system as a whole. This strategy is intended to ensure that software development is directly supportive of an organisation and remains aligned as business and computing changes occur. This paper describes 10 contributions made by RIPPLE to a framework for software development based on the co-evolutionary concept. The framework, BASE, is built around the modelling of co-evolutionary change, expressed in the form of a development plan. Soft Systems Methodology (SSM) is used to establish the vision for an organisation and much of the work has been concerned with building on the models that it produces. RIPPLE is a collaborative project with the Northern Ireland Civil Service and BT\u00a0\u2026", "num_citations": "2\n", "authors": ["569"]}
{"title": "Risk Management: Implicit and Explicit\n", "abstract": " Experience has shown that software development involves substantial risk. It follows therefore that risk must be addressed effectively within the software development process. This can be achieved by identifying risks explicitly at various stages in the process and then determining how best to deal with those risks. Alternatively, some (perhaps most) of the significant risks can be handled covertly by building risk reduction techniques into the development process. This paper argues that both forms of risk management are needed, with initial emphasis placed on the implicit approach as that is where the greatest return for effort is likely to be obtained. This point is illustrated by considering the earliest stages of requirements engineering for software in which the business context for change is examined. Two particular techniques are discussed:(i) Checkland and Wilson\u2019s Soft Systems Methodology (SSM); and (ii) Gilb\u2019s Evolutionary Delivery. In each case the implicit risk reduction value of the technique is identified and then the further advantage of an explicit risk treatment explored. This work is contributing to the development of RACE (Requirements Acquisition and Controlled Evolution), a new requirements engineering method.", "num_citations": "2\n", "authors": ["569"]}
{"title": "Maximizing refactoring coverage in an automated maintenance approach using multi-objective optimization\n", "abstract": " This paper describes a multi-objective genetic algorithm used to automate software refactoring. The approach is validated using a set of open source Java programs with a purpose built tool, MultiRefactor. The tool uses a metric function to measure quality in a software system and tests a second objective to measure the amount of code coverage of the applied refactorings by analyzing the code elements they have been applied to. The multi-objective setup will refactor the input program to improve its quality using the quality objective, while also maximizing the code coverage of the refactorings applied to the software. An experiment has been constructed to measure the multi-objective approach against the alternative mono-objective approach that does not use an objective to measure refactoring coverage. The two approaches are tested on six different open source Java programs. The multi-objective approach is\u00a0\u2026", "num_citations": "1\n", "authors": ["569"]}
{"title": "An Approach to Prioritize Classes in a Multi-objective Software Maintenance Framework\n", "abstract": " Genetic algorithms have become popular in automating software refactoring and an increasing level of attention is being given to the use of multi-objective approaches. This paper investigated the use of a multi-objective genetic algorithm to automate software refactoring using a purpose built tool, MultiRefactor. The tool used a metric function to measure quality in a software system and tested a second objective to measure the importance of the classes being refactored. This priority objective takes as input a set of classes to favor and, optionally, a set of classes to disfavor as well. The multi-objective setup refactors the input program to improve its quality using the quality objective, while also focusing on the classes specified by the user. An experiment was constructed to measure the multi-objective approach against the alternative mono-objective approach that does not use an objective to measure priority of classes. The two approaches were tested on six different open source Java programs. The multi-objective approach was found to give significantly better priority scores across all inputs in a similar time, while also generating improvements in the quality scores.", "num_citations": "1\n", "authors": ["569"]}
{"title": "Learning to program-does it matter where you sit in the lecture theatre?\n", "abstract": " Seating position in university lectures is commonly linked with student grade performance. Sitting at the front of lecture theatre is generally reported to have a positive effect on final grade. This study investigates and analyses the seating positions, course engagement, prior programming experiences and academic abilities of students throughout a 12 week Java programming university programme and relates these themes to the students' final grade performances. Unlike other studies in this area it did not control the students' seating arrangements. This required the development of a mobile and web based software tracking system which enabled a unique unrestricted study of the effects of lecture theatre seating on assessment performance. It finds that the best assessment results were achieved by the students in the front row and that assessment score degraded the further students sat from the front. While the most\u00a0\u2026", "num_citations": "1\n", "authors": ["569"]}
{"title": "Lightweight Risk Management: The Development of Agile Risk Tool Agents\n", "abstract": " Risk management is an important process in Software Engineering. However, it can be perceived as somewhat contrary to the more lightweight processes used in Agile methods. Thus an appropriate and realistic risk management model is required as well as tool support that minimizes human effort. We propose the use of software agents to carry out risk management tasks and make use of the data collected from the project environment to detect risks. This paper describes the underlying risk management model in an Agile Risk Tool (ART) where software agents are used to support identification, assessment and monitoring of risk. It demonstrates the interaction between agents, agents\u2019 compliance with the designated rules and how agents react to changes in project environment data. The result shows that agents are of use for detecting risk and reacting dynamically to changes in project environment thus, help to minimize the human effort in managing risk.", "num_citations": "1\n", "authors": ["569"]}
{"title": "Agile Software Development Diffusion: Insights from a Regional Surve\n", "abstract": " The agile approach to software development is now standard practice in many organisations. In innovation diffusion terms, its uptake seems to be well into the majority adoption phase, with a large number of organisations now claiming some level of agile activity. Confirming adoption progress requires appropriate periodic surveys of industrial practice. The purpose of this paper is to present and comment on the results from such a survey, performed in Northern Ireland in 2010, with thirty-seven software development companies. The work is distinctive in aiming to provide comprehensive coverage of the region. The paper describes the design of the survey and comments on the insights it has provided. The results show that approximately 50% of companies are now running agile projects routinely, with over 80% of those using Scrum as their agile framework. The wider extrapolation of the results is also discussed.", "num_citations": "1\n", "authors": ["569"]}
{"title": "Adaptability performance trade-off: a controlled experiment\n", "abstract": " Various design patterns have become known for increasing the adaptability of software, so reducing the cost of maintenance and evolution. In this study the focus was placed on the performance cost of using such patterns with the research question'How does the use of popular design patterns impact performance?'To answer this, an experiment was designed were a number of music players were developed using popular patterns, and the performance compared to a functionally identical player developed avoiding the patterns under investigation. The results provide evidence that in all cases the design patterns had an impact on performance. However, except in the case of severe hardware constraints, this impact is expected to be so minimal that any performance downside is outweighed by the advantages of using the pattern.", "num_citations": "1\n", "authors": ["569"]}
{"title": "A knowledge hierarchy model for adaptive multi-agent systems\n", "abstract": " Adaptivity in software is important since business processes, business rules and business terms constantly evolve. A radical solution is described that makes use of the inherent adaptivity of software agents. The Adaptive Agent Model (AAM) represents business knowledge in a hierarchical structure consisting of a business concepts layer, a business rules layer, and a business processes layer. Collectively, these form a knowledge base sourced from the business requirements, that is available to running agents. Such externalised knowledge is easily maintained. Using a case study, the knowledge hierarchy is described and its contribution to the goal of software adaptivity assessed.", "num_citations": "1\n", "authors": ["569"]}