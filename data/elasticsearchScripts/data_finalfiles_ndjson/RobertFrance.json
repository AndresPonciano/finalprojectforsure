{"title": "Model-driven development of complex software: A research roadmap\n", "abstract": " The term model-driven engineering (MDE) is typically used to describe software development approaches in which abstract models of software systems are created and systematically transformed to concrete implementations. In this paper we give an overview of current research in MDE and discuss some of the major challenges that must be tackled in order to realize the MDE vision of software development. We argue that full realizations of the MDE vision may not be possible in the near to medium-term primarily because of the wicked problems involved. On the other hand, attempting to realize the vision will provide insights that can be used to significantly reduce the gap between evolving software complexity and the technologies used to manage complexity.", "num_citations": "1550\n", "authors": ["1502"]}
{"title": "Models@ run. time\n", "abstract": " Runtime adaptation mechanisms that leverage software models extend the applicability of model-driven engineering techniques to the runtime environment. Contemporary mission-critical software systems are often expected to safely adapt to changes in their execution environment. Given the critical roles these systems play, it is often inconvenient to take them offline to adapt their functionality. Consequently, these systems are required, when feasible, to adapt their behavior at runtime with little or no human intervention. A promising approach to managing complexity in runtime environments is to develop adaptation mechanisms that leverage software models, referred to as models@run. time. Work on models@run.time seeks to extend the applicability of models produced in model-driven engineering (MDE) approaches to the runtime environment. Models@run. time is a causally connected self-representation of the\u00a0\u2026", "num_citations": "902\n", "authors": ["1502"]}
{"title": "Limitations of agile software processes\n", "abstract": " Software developers and project managers are struggling to assess the appropriateness of agile processes to their development environments. This paper identifies limitations that apply to many of the published agile processes in terms of the types of projects in which their application may be problematic.", "num_citations": "391\n", "authors": ["1502"]}
{"title": "Assumptions underlying agile software-development processes\n", "abstract": " Agile processes focus on the early facilitation and fast production of working code, and are based on software-development process models that support iterative, incremental development of software. Although agile methods have existed for a number of years now, answers to questions concerning the suitability of agile processes to particular software-development environments are still often based on anecdotal accounts of experiences. An appreciation of the (often unstated) assumptions underlying agile processes can lead to a better understanding of the applicability of agile processes to particular situations. Agile processes are less likely to be applicable in situations in which core assumptions do not hold. This article examines the principles and advocated practices of agile processes to identify underlying assumptions. It also identifies limitations that may arise from these assumptions and outlines how the\u00a0\u2026", "num_citations": "327\n", "authors": ["1502"]}
{"title": "Aspect-oriented approach to early design modelling\n", "abstract": " Developers of modern software systems are often required to build software that addresses security, fault-tolerance and other dependability concerns. A decision to address a dependability concern in a particular manner can make it difficult or impossible to address other concerns in software. Proper attention to balancing key dependability and other concerns in the early phases of development can help developers better manage product risks through early identification and resolution of conflicts and undesirable emergent behaviours that arise as a result of interactions across behaviours that address different concerns. The authors describe an aspect-oriented modelling (AOM) approach that eases the task of exploring alternative ways of addressing concerns during software modelling. The paper focuses on use of the AOM approach to produce logical, aspect-oriented architecture models (AAMs) that describe\u00a0\u2026", "num_citations": "320\n", "authors": ["1502"]}
{"title": "Model-driven development using UML 2.0: promises and pitfalls\n", "abstract": " Experience indicates that effective complexity management mechanisms automate mundane development tasks and provide strong support for separation of concerns. For example, current high-level programming languages and integrated development environments provide abstractions that shield developers from intricate lower-level details and offer automated support for transforming abstract representations of source code into faithful machine-executable forms. The Object Management Group initiated the Unified Modeling Language 2.0 effort to address significant problems in earlier versions. While UML 2.0 improves over earlier versions in some aspects, its size and complexity can present a problem to users, tool developers, and OMG working groups charged with evolving the standard.", "num_citations": "319\n", "authors": ["1502"]}
{"title": "Test adequacy criteria for UML design models\n", "abstract": " Systematic design testing, in which executable models of behaviours are tested using inputs that exercise scenarios, can help reveal flaws in designs before they are implemented in code. In this paper a technique for testing executable forms of UML (Unified Modelling Language) models is described and test adequacy criteria based on UML model elements are proposed. The criteria can be used to define test objectives for UML designs. The UML design test criteria are based on the same premise underlying code test criteria: coverage of relevant building blocks of models is highly likely to uncover faults. The test adequacy criteria proposed in this paper are based on building blocks for UML class and interaction diagrams. Class diagram criteria are used to determine the object configurations on which tests are run, while interaction diagram criteria are used to determine the sequences of messages that should be\u00a0\u2026", "num_citations": "210\n", "authors": ["1502"]}
{"title": "Towards a formalization of UML class structures in Z\n", "abstract": " There is much interest in developing a firm semantic base for object-oriented modeling concepts. By providing precise characterizations of object-oriented (OO) modeling concepts one gains the ability to build a precise OO model of behavior and structure that can be rigorously analyzed. We present the current results of our ongoing formalization of the Unified Modeling Language (UML). UML is a proposed common OO modeling language, thus it is important that it has a formally defined semantic base. The focus of this paper is the formalization of the primary UML constructs used to build class structures. We use the Z notation to precisely express the meaning of UML class structures.", "num_citations": "152\n", "authors": ["1502"]}
{"title": "Integrated structured analysis and formal specification techniques\n", "abstract": " The last decade has seen a large increase in the use of \u2018structured\u2019 methods of software development. They grew out of their predecessors, which consisted of a toolkit of techniques with little method of how and when to apply them. Methods such as Yourdon Structured Analysis1 and SSADM2 provide means of managing the complexity of large systems. They provide techniques and associated procedures for the development of such systems. In parallel with this, and almost entirely independently, formal specification languages and methods have been developed. Both approaches have their strengths and weaknesses. Recently it has been recognised that benefits can be gained from integrating the two.         A number of researchers have reported progress towards the successful integration of formal and structured methods. This paper reports on a selection of this work. The aim in each case has been to\u00a0\u2026", "num_citations": "144\n", "authors": ["1502"]}
{"title": "Using aspects to design a secure system\n", "abstract": " Developers of complex systems have to address concerns such as security, availability of services, and timeliness that often are non-orthogonal to traditional design structures, that is, the concerns cross-cut traditional design units. We illustrate how an aspect-oriented approach to modeling allows developers to encapsulate such design concerns so that they can be woven into a design in a systematic and consistent manner. The paper focuses on the use of aspects for modeling and weaving in security concerns.", "num_citations": "138\n", "authors": ["1502"]}
{"title": "An aspect-based approach to modeling access control concerns\n", "abstract": " Specifying, enforcing and evolving access control policies is essential to prevent security breaches and unavailability of resources. These access control design concerns impose requirements that allow only authorized users to access protected computer-based resources. Addressing these concerns in a design results in the spreading of access control functionality across several design modules. The pervasive nature of access control functionality makes it difficult to evolve, analyze, and enforce access control policies. To tackle this problem, we propose using an aspect-oriented modeling(AOM) approach for addressing access control concerns. In the AOM approach, functionality that addresses a pervasive access control concern is localized in an aspect. Other functional design concerns are addressed in a model of the application referred to as a primary model. Composing access control aspects with a primary\u00a0\u2026", "num_citations": "127\n", "authors": ["1502"]}
{"title": "Semantically extended data flow diagrams: A formal specification tool\n", "abstract": " The popularity of the Data Flow Diagram (DFD) specification tool in industry seems to stem from its use of intuitively defined concepts and notation. However, the flexibility of the DFD comes at a price-the lack of a formal basis for DFD concepts and notation prohibits its use as a formal specification tool. On the other hand, a problem commonly stated as a deterrent to the use of formal specification techniques in industry is the lack of intuitive appeal in the specifications. A method is described for associating a DFD with a formal specification. The intention is to enhance the use of the DFD as a formal specification tool, thus gaining a tool that can be used to document application functionality in an understandable manner and, at the same time, be capable of producing a formal specification that can be used to rigorously investigate semantic properties of the application.", "num_citations": "114\n", "authors": ["1502"]}
{"title": "Transforming UML models to formal specifications\n", "abstract": " The Uni ed Modeling Language (UML) is considered a signi cant step in the development of object-oriented (OO) notations in that it is based on some of the best OO modeling experiences. In this paper we are considering more speci cally its use in the context of high-quality modeling of complex systems. We believe that the lack of rm semantics for the modeling notations used makes, among others, the identi cation of requirements problems di cult. One approach to making UML more precise and amenable to rigorous analysis is to integrate it with suitable formal notations. In this paper we present the bene ts from a similar approach that is the result of integrating Fusion modeling techniques and the Z formal speci cation notation. The result is a technique that produces highly-structured, graphical, rigorously-analyzable models that facilitates early detection of errors. We believe that UML could gain from this experience.", "num_citations": "111\n", "authors": ["1502"]}
{"title": "An integrated object-oriented and formal modeling environment\n", "abstract": " Most popular object-oriented analysis (OOA) methods provide good support for creating abstract, understandable models of system behavior and structure, The lack of firm semantic bases for most of these methods makes it difficult to reason rigorously about modeled behavior, It also makes it difficult to check the compliance of implementations (designs and programs) against them. In this article we formalize the Fusion object-oriented analysis modeling techniques to make the models produced more amenable to formal analysis. We illustrate the formalization process by presenting some of the results of a case study carried out as part of our experiments on formalized Fusion models.", "num_citations": "98\n", "authors": ["1502"]}
{"title": "Upgrading marine ecosystem restoration using ecological\u2010social concepts\n", "abstract": " Conservation and environmental management are principal countermeasures to the degradation of marine ecosystems and their services. However, in many cases, current practices are insufficient to reverse ecosystem declines. We suggest that restoration ecology, the science underlying the concepts and tools needed to restore ecosystems, must be recognized as an integral element for marine conservation and environmental management. Marine restoration ecology is a young scientific discipline, often with gaps between its application and the supporting science. Bridging these gaps is essential to using restoration as an effective management tool and reversing the decline of marine ecosystems and their services. Ecological restoration should address objectives that include improved ecosystem services, and it therefore should encompass social\u2013ecological elements rather than focusing solely on\u00a0\u2026", "num_citations": "81\n", "authors": ["1502"]}
{"title": "Rigorous testing by merging structural and behavioral UML representations\n", "abstract": " Error detection and correction in the design phase can reduce total costs and time to market. Yet, testing of design models usually consists of walk-throughs and inspections both of which lack the rigor of systematic testing. Test adequacy criteria for UML models help define necessary objectives during the process of test creation. These test criteria require coverage of various parts of UML models, such as structural (Class Diagram) and behavioral (Sequence Diagram) views. Test criteria are specific to a particular UML view. Test cases on the other hand should cover parts of multiple views. To understand testing needs better, it is useful to be able to observe the effect of tests on both Class Diagrams and Sequence Diagrams. We propose a new graph that encapsulates the many paths that exist between objects via their method calls as a directed acyclic graph (OMDAG). We also introduce the object method\u00a0\u2026", "num_citations": "81\n", "authors": ["1502"]}
{"title": "Domain specific modeling\n", "abstract": " concepts in a variety of domains, including embedded systems and business workflows. While this broadened the scope of the UML it has made it difficult to develop semantics that can be used to support its application in a number of domains. This has led to the realization that a single, consistent semantics that supports the use of the UML may not be possible, and to the view of the UML as a family of languages. There are currently a number of semantic variation points in the UML to support this notion. Developing a semantic framework for the UML that takes into consideration its numerous variation points is proving to be an extremely difficult task\u2013and the important issues are not all technical! It should not be surprising then that in specific domains, the use of existing \u201cdomain specific languages\u201d persists. A DSL, let it be a programming or a modeling language, has several advantages. Among them:\u2013Domain\u00a0\u2026", "num_citations": "79\n", "authors": ["1502"]}
{"title": "Exploring the semantics of UML type structures with Z\n", "abstract": " The Unified Modeling Language (UML) builds upon some of the best object-oriented (OO) modeling concepts available, and is intended to serve as a common OO modeling notation. Given its intended role, it is important that the UML notation have a well-defined semantic base. In this paper we present some early results from our work on the systematic formalization of UML modeling constructs. The paper focuses on the formalization of UML Class Diagrams. The formal notation Z is used to express the semantics of Class Diagrams.", "num_citations": "79\n", "authors": ["1502"]}
{"title": "A systematic approach to generate inputs to test UML design models\n", "abstract": " Practical model validation techniques are needed for model driven development (MDD) techniques to succeed. This paper presents an approach to generating inputs to test UML design models that are produced in the detailed design phase of an MDD project. A symbolic execution based approach is used to derive test input constraints from the paths of a variable assignment graph, which integrates information from UML class and sequence diagrams. The constraints are solved using Alloy, a configuration constraint solver, to obtain the test inputs. The results of a pilot study carried out to explore the fault detection capability of the test inputs are reported", "num_citations": "73\n", "authors": ["1502"]}
{"title": "An aspect oriented model driven framework\n", "abstract": " In model driven development (MDD), specifying transformations between models at various levels of abstraction can be a complex task. Specifying transformations for pervasive system features that are tangled with other system features is particularly difficult because the elements to be transformed are distributed across a model. This paper presents an aspect oriented model driven framework (AOMDF) that facilitates separation of pervasive features and supports their transformation across different levels of abstraction. The framework is illustrated using an example in which a platform independent model of a banking application is transformed to a platform specific model.", "num_citations": "71\n", "authors": ["1502"]}
{"title": "A tool-supported approach to testing UML design models\n", "abstract": " For model driven development approaches to succeed, there is a need for model validation techniques. This paper presents an approach to testing designs described by UML class diagrams, interaction diagrams, and activity diagrams. A UML design model under test is transformed into an executable form. Test infrastructure is added to the executable form to carry out tests. During testing, object configurations are created, modified and observed. In this paper, we identify the structural and behavioral characteristics that need to be observed during testing. We describe a prototype tool that (1) transforms UML design models into executable forms with test infrastructure, (2) executes tests, and (3) reports failures.", "num_citations": "67\n", "authors": ["1502"]}
{"title": "A characterization of aggregation\n", "abstract": " Most popular object-oriented modeling techniques (OOMTs) provide good support for the creation of structured conceptual models of system behavior and structure. A serious drawback of these techniques is that the concepts and notations used are loosely defined. This can lead to the creation of ambiguous models, and to disagreements over the proper use and interpretation of modeling constructs. An important modeling construct that is often loosely defined is aggregation. In this paper we present a characterization of aggregation that can help developers identify appropriate applications of the concept.", "num_citations": "66\n", "authors": ["1502"]}
{"title": "A problem-oriented analysis of basic UML static requirements modeling concepts\n", "abstract": " The Unified Modeling Language (UML) is a standard modeling language in which some of the best object-oriented (OO) modeling experiences are embedded. In this paper we illustrate the role formal specification techniques can play in developing a precise semantics for the UML. We present a precise characterization of requirements-level (problem-oriented) Class Diagrams and outline how the characterization can be used to semantically analyze requirements Class Diagrams.", "num_citations": "64\n", "authors": ["1502"]}
{"title": "Using aspect oriented techniques to support separation of concerns in model driven development\n", "abstract": " Model driven development (MDD) tackles software complexity through the use of models. However, managing relationships and specifying transformations between models at various levels of abstraction are complex tasks. System models tangled with concerns such as security and middleware make it difficult to develop complex systems and specify model transformations. This paper presents an MDD framework that uses aspect oriented techniques to facilitate separation of concerns. We argue that using the framework will simplify both the model development task and the task of specifying transformations. The conceptual model of the framework is presented and illustrated using distributed transactions at the PIM and PSM levels.", "num_citations": "60\n", "authors": ["1502"]}
{"title": "Generating test cases from an OO model with an AI planning system\n", "abstract": " Black box test generation needs a model of the system under test to describe what is to be tested. Testing criteria and test objectives define how it is to be tested. We explain how to represent a system under test via UML models. We derive test objectives from the UML models and use the objectives and the models to generate test cases by mapping them into a problem description for an AI planner. The planner uses the problem description to generate a test suite that satisfies the UML-derived test objectives.", "num_citations": "59\n", "authors": ["1502"]}
{"title": "Verifiable composition of access control and application features\n", "abstract": " Access control features are often spread across and tangled with other functionality in a design. This makes modifying and replacing these features in a design difficult. Aspect-oriented modeling (AOM) techniques can be used to support separation of access control concerns from other application design concerns. Using an AOM approach, access control features are described by aspect models and other application features are described by a primary model. Composition of aspect and primary models yields a design model in which access control features are integrated with other application features. In this paper, we present, through an example, an AOM approach that supports verifiable composition of behaviors described in access control aspect models and primary models. Given an aspect model, a primary model, and a specified property, the composition technique produces proof obligations as the\u00a0\u2026", "num_citations": "58\n", "authors": ["1502"]}
{"title": "An aspect-based approach to modeling security concerns\n", "abstract": " In this paper we show how design-level aspects can be used to encapsulate security concerns that can be woven into models of software designs. The aspect-oriented design technique described in this paper allows one to analyze the impact of security concerns on other functional concerns. We illustrate our technique using a small example.", "num_citations": "53\n", "authors": ["1502"]}
{"title": "Testing UML designs\n", "abstract": " Early detection and correction of faults in the software design phase can reduce total cost and time to market of a software product. In this paper we describe an approach for testing UML design models to uncover inconsistencies. Our approach uses behavioral views such as Sequence Diagrams to simulate state change in an aggregate model. The aggregate model is the artifact of merging information from behavioral and structural UML views. OCL pre-conditions, post-conditions and invariants are used as a test oracle.", "num_citations": "52\n", "authors": ["1502"]}
{"title": "Test adequacy assessment for UML design model testing\n", "abstract": " Systematic design testing, in which executable models of behaviors are tested using inputs that exercise scenarios, can help reveal flaws in designs before they are implemented in code. We present a testing method in which executable forms of the Unified Modeling Language (UML) models are tested. The method incorporates the use of test adequacy criteria based on UML model elements in class diagrams and interaction diagrams. Class diagram criteria are used to determine the object configurations on which tests are run while interaction diagram criteria are used to determine the sequences of messages that should be tested. The criteria can be used to define test objectives for UML designs. In this paper, we describe and illustrate the use of the proposed test method and adequacy criteria.", "num_citations": "49\n", "authors": ["1502"]}
{"title": "Specification, validation, and enforcement of a generalized spatio-temporal role-based access control model\n", "abstract": " With the advent of wireless and mobile devices, many new applications are being developed that make use of the spatio-temporal information of a user to provide better functionality. Such applications also necessitate sophisticated authorization models where access to a resource depends on the credentials of the user and also on the location and time of access. Consequently, researchers have extended the traditional access control models, such as role-based access control, to provide spatio-temporal access control. We improve upon these models by providing additional features that allow us to express constraints that were not possible until now. We express our model using the unified modeling language (UML) and the object constraint language that are the de facto specification languages used by the industry. Our model has numerous features that interact in subtle ways. To this end, we show how the UML\u00a0\u2026", "num_citations": "44\n", "authors": ["1502"]}
{"title": "Construction and execution of adaptable applications using an aspect-oriented and model driven approach\n", "abstract": " Constructing and executing distributed applications that can adapt to their current operating context, in order to maintain or enhance Quality of Service (QoS) attribute levels, are complex tasks. Managing multiple, interacting QoS features is particularly difficult since these features tend to be distributed across the system and tangled with other features. The crosscutting nature of QoS features can make them difficult to evolve, and it can make it complicated to dynamically optimize with respect to provided QoS during execution. Furthermore, it complicates efficient construction of application variants that differ in their QoS characteristics to suit various execution contexts. This paper presents an aspect-oriented and model driven approach for constructing and a QoS-aware middleware for execution of QoS-sensitive applications. Aspect-oriented modeling techniques are used to separate QoS features from\u00a0\u2026", "num_citations": "44\n", "authors": ["1502"]}
{"title": "Expanding marine protected areas to include degraded coral reefs\n", "abstract": " Marine protected areas (MPAs) are a commonly applied solution to coral reef degradation, yet coral reefs continue to decline worldwide. We argue that expanding the range of MPAs to include degraded reefs (DR\u2010MPA) could help reverse this trend. This approach requires new ecological criteria for MPA design, siting, and management. Rather than focusing solely on preserving healthy reefs, our approach focuses on the potential for biodiversity recovery and renewal of ecosystem services. The new criteria would help identify sites with the highest potential for recovery and the greatest resistance to future threats (e.g., increased temperature and acidification) and sites that contribute to MPA connectivity. The DR\u2010MPA approach is a compliment rather than a substitute for traditional MPA design approaches. We believe that the DR\u2010MPA approach can enhance the natural, or restoration\u2010assisted, recovery of DRs and\u00a0\u2026", "num_citations": "43\n", "authors": ["1502"]}
{"title": "An integrated security verification and security solution design trade-off analysis approach\n", "abstract": " This chapter describes the integrated security verification and security solution design trade-off analysis (SVDT) approach. SVDT is useful when there is a diverse set of requirements imposed upon a security critical system, such as a required security level, time-to-market and budget constraints and end users\u2019 expectations. Balancing these needs requires developers to evaluate alternative security solutions, and SVDT makes this evaluation effective. UMLsec, an extension to UML for secure systems development, is used to specify security requirements, and UMLsec tools are used to verify if the alternative design solutions satisfy security requirements.", "num_citations": "43\n", "authors": ["1502"]}
{"title": "Using Alloy and UML/OCL to specify run-time configuration management: a case study\n", "abstract": " There are many different ways to specify the requirements of complex software systems, and the optimal methods often vary according to the problem domain. We apply and compare two languages, UML/OCL and Alloy, to specify a problem in one domain, the run-time configuration management of a loosely coupled distributed system, to determine which is more appropriate for this domain. The specific problem that we specify in the case study involves the run-time configuration management of an Asynchronous Transfer Mode / Internet Protocol (ATM/IP) Network Monitoring System. Neither Alloy nor UML/OCL supports the specification of key temporal aspects of the problem. This paper addresses the representation of requirements specification; continuing research will compare the usefulness of the specifications for modeling and design purposes.", "num_citations": "42\n", "authors": ["1502"]}
{"title": "Scenario-based static analysis of UML class models\n", "abstract": " Static analysis tools, such as OCLE and USE, can be used to analyze structural properties of class models. The USE tool also provides support for analyzing specified operations through interactive simulations in which users provide operation parameters, and manually assign values to state elements to reflect the effect of an operation. In this paper we describe an approach to statically analyzing behavior that does not require a user to manually simulate behavior.\u00a0 The approach involves transforming a class model into a static model of behavior, called a Snapshot Model. A Snapshot Model characterizes sequences of snapshots, where a snapshot describes an application state. A scenario describing a sequence of operation invocations can be verified against a Snapshot Model using tools such as USE and OCLE.\u00a0 We illustrate our approach by verifying a scenario against a Snapshot Model that describes\u00a0\u2026", "num_citations": "41\n", "authors": ["1502"]}
{"title": "From domain models to architecture frameworks\n", "abstract": " Thispaper &resses how domain analysis served to help create reusable architectures and components in the development of a real-time embealied system. The subject domain is portable winders communication devices. The paper discwrses this experience in terms of discovering and developing reusable@ neworkr for this domain. Some interesting differences between this approach and what is usually suggested as a process for developing frameworks are described.", "num_citations": "40\n", "authors": ["1502"]}
{"title": "Teaching modeling: why, when, what?\n", "abstract": " This paper reports on a panel discussion held during the Educators\u2019 Symposium at MODELS\u20192009. It shortly explains the context provided for the discussion and outlines the statements made by the panelists. The panelists were asked to make their statements along a number of topics relevant to teaching modeling like: Notation, Semantics, Programming, Tooling, Suitability, Metamodeling.", "num_citations": "37\n", "authors": ["1502"]}
{"title": "Towards formal reasoning with uml models\n", "abstract": " The software engineering (SE) eld has been witnessing a series of changes in the area of software application modeling. Two important developments in this area are the increasingly widespread adoption of object-oriented (OO) approaches to application development, and the development of a standard notation for object-oriented software models. The Uni ed Modeling Language (UML) 1] is a standard modeling notation that was developed in response to the problems arising out of a proliferation of OO modeling notations. Though the UML standard provides a rich set of syntactically well-de ned modeling notations, the semantics are described informally using a mixture of diagrams and natural language text. The informal descriptions can lead to confusion over the appropriate use and interpretation of the notations. The use of the UML for the modeling and analysis of complex systems is severely hampered by its imprecise semantics. In particular, rigorous semantic analysis of models that can lead to the identi cation of defects and to insights that can deepen understanding is often not possible. A number of di erent approaches have been proposed to make informal object-oriented models more amenable to rigorous analysis. One approach is to\\integrate\" the informal OO modeling techniques with suitable formal notations (eg, see 6]). Another approach is to extend formal notations with OO concepts and features (eg, see 2]). A problem with these approaches is that developers are exposed to formal notations that they may not be comfortable with. This discomfort may arise because of inadequate knowledge and experiences related to the\u00a0\u2026", "num_citations": "37\n", "authors": ["1502"]}
{"title": "Summary of the Workshop Models@ run. time at MoDELS 2006\n", "abstract": " The first edition of the workshop Models@run.time was co-located with the ACM/IEEE 9th International Conference on Model Driven Engineering Languages and Systems (formerly the UML series of conferences). The workshop took place in the antique city of Genoa, Italy, on the 1st of October, 2006. The workshop was organised by Gordon Blair, Robert France, and Nelly Bencomo. This summary gives an overview an account of the presentations and lively discussions that took place during the workshop.", "num_citations": "36\n", "authors": ["1502"]}
{"title": "Specifying model transformations at the metamodel level\n", "abstract": " The MOF 2.0 Query/Views/Transformations (QVT) goal is to provide a standard for expressing model transformations. Techniques and technologies that support the rigorous definition and application of model transformations are required to realize the Model Driven Architecture (MDA) vision. In this paper, we describe an approach to rigorous modeling of pattern-based transformations. We discuss how our transformation specification approach promotes controlled pattern-based model evolution.", "num_citations": "35\n", "authors": ["1502"]}
{"title": "Models@ run. time (dagstuhl seminar 11481)\n", "abstract": " This report documents the program and the outcomes of Dagstuhl Seminar 11481``Models@ run. time''. Research on models@ run. time seeks to extend the applicability of models and abstractions to the runtime environment, with the goal of providing effective technologies for managing the complexity of evolving software behaviour while it is executing. The Dagstuhl Seminar``Models@ run. time''brought together a diverse set of researchers and practitioners with a broad range of expertise, including MDE, software architectures, reflection, self-adaptive systems, validation and verification, middleware, robotics and requirements engineering.", "num_citations": "33\n", "authors": ["1502"]}
{"title": "Measuring the effort for creating and using domain-specific models\n", "abstract": " The use of domain-specific modeling languages (DSMLs) results in higher productivity during the development process. This is accomplished by raising the level of abstraction during design and focusing on domain concepts rather than low-level implementation details. Unlike other development paradigms, little work has been done in determining and measuring the claimed benefits of using DSMLs.", "num_citations": "32\n", "authors": ["1502"]}
{"title": "A rigorous approach to uncovering security policy violations in UML designs\n", "abstract": " There is a need for rigorous analysis techniques that developers can use to uncover security policy violations in their UML designs. There are a few UML analysis tools that can be used for this purpose, but they either rely on theorem-proving mechanisms that require sophisticated mathematical skill to use effectively, or they are based on model-checking techniques that require a ldquoclosed-worldrdquo view of the system (i.e., a system in which there are no inputs from external sources). In this paper we show how alight weight, scenario-based UML design analysis approach we developed can be used to rigorously analyze a UML design to uncover security policy violations. In the method, a UML design class model, in which security policies and operation specifications are expressed in the Object Constraint Language (OCL), is analyzed against a set of scenarios describing behaviors that adhere to and that\u00a0\u2026", "num_citations": "30\n", "authors": ["1502"]}
{"title": "Rigorous analysis of uml access control policy models\n", "abstract": " The use of the Unified Modeling Language (UML)for specifying security policies is attractive because it is expressive and has a wide user base in the software industry. However, there are very few mature tools that support rigorous analysis of UML models. Alloy is a formal specification language that has been used to rigorously analyze security policies, but few practitioners have the background needed to develop good Alloy models. We propose a new approach to policy analysis in which designers use UML at the front-end to describe their security policies and the Alloy Analyzer is used at the backend to analyze the modeled properties. The UML-to-Alloy and Alloy-to-UML transformations obviate the need for security designers to understand the Alloy specification language. The proposed approach supports the analysis of both functional and structural aspects of security policies.", "num_citations": "29\n", "authors": ["1502"]}
{"title": "Composing aspect models\n", "abstract": " Aspect-oriented modeling (AOM) techniques allow system developers to address concerns such as security, fault-tolerance, safety, and availability separately from core functional requirements during system design. Such separation implies that developers must also be able to analyze the integration of these additional concern designs with core functionality designs in order to compare realizations that may be based on conflicting design goals. System developers may create and analyze alternative design realizations several times before a balanced system design is achieved. Separating concerns as aspects can aid in this design evolution since a developer can focus on the realization of a single concern without having to worry about its interactions with other concerns or primary functionality.However, the iterative nature of the process dictates that the composition and analysis of the resulting integrated design must be flexible as well as intuitive. We have found that composing aspect design models and primary models often leads to conflicting structure or behavior in the integrated model in all but the simplest cases. This is particularly true when detailed models are being composed. We have developed a two-level structure of composition directives to address this issue; a high level that dictates the conditions under which specific aspects should be integrated to realize particular design concerns, and a lower level that precisely defines which portions of particular models should be integrated in specific ways. At the same time we note that composition directives must not be so numerous or complex that they cannot be easily understood and\u00a0\u2026", "num_citations": "29\n", "authors": ["1502"]}
{"title": "Supporting multi-dimensional separation of design concerns\n", "abstract": " The development of dependable software requires developers to address multiple, interrelated, design concerns, for example, security, fault tolerance, and safety concerns. As the complexity of software increases there is a need to develop mechanisms that allow developers to isolate realizations of design concerns during design and then compose them to obtain a comprehensive design. Such mechanisms can facilitate separation of concerns along multiple dimensions and can help manage the complexity inherent in creating and evolving highly-dependable software. In this paper we discuss some of the issues and challenges that should be addressed in developing mechanisms that support multi-dimensional separation of design concerns (MDSoC). We also outline a UML-based approach we are currently developing to support MDSoC.", "num_citations": "28\n", "authors": ["1502"]}
{"title": "Designing high integrity systems using aspects\n", "abstract": " In this paper we show how design-level aspects can be used to develop high integrity systems. In our approach, a system designer must first identify the specific mechanisms required for high integrity systems. To support this activity we have developed an initial tabulation of different kinds of threats and the mechanisms used to prevent, detect, and recover from the related attacks and problems. Each mechanism can be modeled independently as an aspect. After the mechanisms are identified, the corresponding aspects are then woven in the appropriate order into the models of the essential system functionality to produce a model of a high integrity system.", "num_citations": "28\n", "authors": ["1502"]}
{"title": "A two-dimensional view of integrated formal and informal specification techniques\n", "abstract": " It is often felt that the use of formal specification techniques (FSTs) precludes the use of informal, structured specification techniques (ISTs). Research on integrated FSTs and ISTs (FISTs) has shown that this is not necessarily the case, and that the use of formal techniques can enhance the use of informal specification techniques and vice versa.             In this paper we describe the applicability of FISTs to requirements engineering along two dimensions: process support, and formal-informal transformations. We illustrate aspects of these dimensions with results from student requirements engineering projects that involved the use of a Structured Analysis (SA) and Z FIST.", "num_citations": "28\n", "authors": ["1502"]}
{"title": "UMLAnT: an Eclipse plugin for animating and testing UML designs\n", "abstract": " We describe the UML Animator and Tester (UMLAnT), which is an Eclipse plug-in for animating and testing UML models. UMLAnT can be used both by developers in the software industry and students who are learning concepts in object-oriented modeling. UMLAnT helps designers visualize the behavior specified in a UML model by displaying animated object diagrams and sequence diagrams. UMLAnT allows testers to specify test cases and notifies them about failures during test execution.", "num_citations": "27\n", "authors": ["1502"]}
{"title": "UML'99-The Unified Modeling Language: Beyond the Standard: Second International Conference, Fort Collins, CO, USA, October 28-30, 1999, Proceedings\n", "abstract": " This book constitutes the refereed proceedings of the Second International Conference on the Unified Modeling Language, UML'99, held in Fort Collins, CO, USA in September 1999. The 44 revised full papers presented together with two invited contributions and three panel summaries were carefully reviewed and selected from a total of 166 submissions. The papers are organized in topical sections on software architecture, UML and other notations, formalizing interactions, meta modeling, tools, components, UML extension mechanisms, process modeling, real-time systems, constraint languages, analyzing UML models, precise behavioral modeling, applying UML sequence design, and coding.", "num_citations": "26\n", "authors": ["1502"]}
{"title": "From structured analysis to formal specifications: State of the theory\n", "abstract": " Publication: CSC'94: Proceedings of the 22nd annual ACM computer science conference on Scaling up: meeting the challenge of complexity in real-world computing applications: meeting the challenge of complexity in real-world computing applications March 1994 Pages 249\u2013256 https://doi. org/10.1145/197530.197634", "num_citations": "26\n", "authors": ["1502"]}
{"title": "A method engineering approach to developing aspect-oriented modelling processes based on the OPEN process framework\n", "abstract": " Aspect-oriented software development (AOSD) is an approach to software development in which aspect-oriented techniques are integrated with traditional (mainly OO) development techniques. Identifying the appropriate method components for supporting aspect-oriented development is facilitated by the use of a method engineering approach. We demonstrate this approach by using the OPEN Process Framework (OPF) to identify previous deficiencies in the method fragments stored in the OPF repository so that the enhanced OPF repository is able to fully support AOSD.", "num_citations": "24\n", "authors": ["1502"]}
{"title": "Specification and analysis of access control policies for mobile applications\n", "abstract": " Mobile applications allow individuals on-the-move access to resources\" anytime, anywhere\" using hand-held mobile devices. We argue that for critical and sensitive resources this is often times not desirable--a lost or stolen mobile device can be tampered with to view or alter sensitive information. We need authorization policies that take into account time of access and location of the user in addition to the credentials of the user. Towards this end, we propose a new spatio-temporal role-based access control model. It improves upon existing models by providing features that are useful for mobile applications. Thus, an application using our model can specify different types of spatio-temporal constraints. We discuss how such an application using our spatio-temporal access control model can be verified using the UPPAAL model checker. We also demonstrate how to reduce the state-space explosion problem that is\u00a0\u2026", "num_citations": "23\n", "authors": ["1502"]}
{"title": "Extending aggregation constructs in UML\n", "abstract": " In this paper we provide a characterization of aggregation as used in static conceptual modeling of applications. Based on this characterization we suggest changes to UML notation that allow for more precise characterization of aggregate structures.", "num_citations": "23\n", "authors": ["1502"]}
{"title": "Workflow design using fragment composition\n", "abstract": " The Service-Oriented Architecture (Soa) paradigm supports the assembly of atomic services to create applications that implement complex business processes. Assembly can be accomplished by service orchestrations defined by Soa architects. The Adore method allows Soa architects to model complex orchestrations of services by composing models of smaller orchestrations called orchestration fragments. The Adore method can also be used to weave fragments that address new concerns into existing application models. In this paper we illustrate how the Adore method can be used to separate and compose process aspects in a Soa design of the Car Crash Crisis Management System. The paper also includes a discussion of the benefits and limitations of the Adore method.", "num_citations": "22\n", "authors": ["1502"]}
{"title": "Formalizing Fusion Object-Oriented Analysis Models\n", "abstract": " Most popular object-oriented analysis (OOA) methods provide good support for creating abstract, understandable models of system behavior and structure. The lack of rm semantic bases for most of these methods makes it di cult to rigorously reason about modeled behavior, and also makes it di cult to check the compliance of implementations (design and programs) against them. In this paper we formalize the Fusion object-oriented analysis modeling techniques to make the models produced more amenable to formal analysis. We illustrate the formalization process by presenting some of the results of a case study carried out as part of our experimentations on formalized Fusion models.", "num_citations": "22\n", "authors": ["1502"]}
{"title": "Rigorous object-oriented modeling: Integrating formal and informal notations\n", "abstract": " The high-quality modeling experiences embedded in the more mature graphical OO methods (OOMs) makes their application to complex systems attractive, but the lack of firm semantic bases for the modeling notations can significantly hamper the development of such systems. One approach to making OOMs more precise and amenable to rigorous analysis is to integrate them with suitable formal modeling techniques. In this paper we describe a technique for integrating an OOM, the Fusion method, and a formal specification notation, Z.", "num_citations": "21\n", "authors": ["1502"]}
{"title": "A domain\u2010specific modeling approach to realizing user\u2010centric communication\n", "abstract": " Advances in communication devices and technologies are dramatically expanding our communication capabilities and enabling a wide range of multimedia communication applications. The current approach to develop communication\u2010intensive applications results in products that are fragmented, inflexible, and incapable of responding to changing end\u2010users' communication needs. These limitations have resulted in the need for a new development approach of building communication applications that are driven by end\u2010users and that support the dynamic nature of communication\u2010based collaboration. To address this need, the Communication Virtual Machine (CVM) technology has been developed to support rapid specification and automatic realization of user\u2010centric communication applications based on a domain\u2010specific modeling approach. The CVM technology consists of a domain\u2010specific modeling\u00a0\u2026", "num_citations": "20\n", "authors": ["1502"]}
{"title": "The evolution of modeling research challenges\n", "abstract": " In 2007 ICSE hosted a track called \u201cFuture of Software Development\u201d(FOSD). We were invited to write and present a paper on the future of modeling for the track. The resulting paper [1] described the state of modeling research, identified some major challenges and proposed a research road map. Parts of this road map are currently being explored, and progress has been made in addressing some of the challenges we identified. However, there is still significant research \u201cto be done\u201d with respect to the challenges outlined in that paper. It is not our intent to discuss the progress the community has made with respect to the road map in this editorial (our apologies for deflating expectations in this regard; an editorial is simply not the place for such discussions). Rather, we would like to use this editorial to stimulate discussions around some of the challenges that have arisen since we wrote that paper. Before we get into\u00a0\u2026", "num_citations": "19\n", "authors": ["1502"]}
{"title": "Specifying cross-cutting requirement concerns\n", "abstract": " Addressing non-orthogonal software concerns that arise from requirements can significantly contribute to the complexity of developing large systems. Difficulties arise from the need to: locate related requirements, reason about the software concerns they represent, and analyze the impact of changing requirements. We address these issues through the use of requirements aspects. We present a method to identify requirements aspects from viewpoints, to associate requirements aspects with generic design solutions based on domain experience, and to specify the generic solutions using the UML. We demonstrate these techniques using a smart home controller application.", "num_citations": "19\n", "authors": ["1502"]}
{"title": "Tool support for aspect-oriented design\n", "abstract": " In this paper, we describe the tool we plan to build in order to show the feasibility of aspect-oriented design, and demonstrate the advantages that it implies. This technique allows one to independently specify cross-cutting concerns and functionnal features of a system. The tool would then allow the weaving of the aspects on the model one after the other, creating a design model that would comply to all specifications, with additionally a high-quality architecture.", "num_citations": "19\n", "authors": ["1502"]}
{"title": "Generating test-cases from an object-oriented model with an artifical-intelligence planning system\n", "abstract": " Black-box test-generation requires a model of the system under test to describe what is to be tested. Testing criteria and test objectives define how it is to be tested. This paper describes an approach to black-box test-generation in which an AI (artificial intelligence) planner is used to generate test cases from test objectives derived from UML (Unified Modeling Language) Class Diagrams. The UML Class Diagrams are conceptual models of the systems under test. They differ from traditional design and requirements models in that they include information pertinent to test case generation. From these models, test objectives and a domain theory are: obtained, transformed to planner representations, and input to the planner. The planner uses the problem description to generate a test suite that satisfies the UML-derived test objectives. This paper describes the application of the testing approach to an industrial problem.", "num_citations": "18\n", "authors": ["1502"]}
{"title": "Response to UML 2.0 request for information\n", "abstract": " This submission is a response to the Object Management Group\u2019s request for information regarding version 2.0 of the Unified Modeling Language. The response is organised into four main sections, in line with the objectives of the RFI. These are:\u2022 strengths and weaknesses of UML 1.3\u2022 determination of major revision\u2022 comparison with roadmap recommendations\u2022 recommendations for revisions", "num_citations": "18\n", "authors": ["1502"]}
{"title": "Applying domain analysis and modeling: an industrial experience\n", "abstract": " In this paper we describe our experience in applying domain analysis within a company that develops personal electronic devices. We describe how we tailored the DSSA method to suit our needs and then present the process and representations that we found most useful for this situation. The conclusions and lessons learned are useful because few studies published at this time provide details about applications of domain engineering in commercial development environments.", "num_citations": "18\n", "authors": ["1502"]}
{"title": "An approach to checking consistency between UML class model and its Java implementation\n", "abstract": " Model Driven Engineering (MDE) aims to expedite the software development process by providing support for transforming models to running systems. Many modeling tools provide forward engineering features, which automatically translate a model into a skeletal program that developers must complete. Inconsistencies between a design model and its implementation, however, can arise, particularly when a final implementation is developed dependently on the code from which it was generated. Manually checking that an implementation conforms to its model is a daunting task. Thus, an MDE tool that developers can use to check that implementations conform to their models can significantly improve a developer's productivity. This paper presents a model-based approach for testing whether or not an implementation satisfies the constraints imposed by its design model. Our model-based testing approach aims to\u00a0\u2026", "num_citations": "17\n", "authors": ["1502"]}
{"title": "Fine-grained semi-automated runtime evolution\n", "abstract": " Modern software systems that play critical roles in society are often required to change at runtime so that they can continuously provide essential services in the dynamic environments they operate in. Updating open, distributed software systems at runtime is very challenging. Using runtime models as an interface for updating software at runtime can help developers manage the complexity of updating software while it is executing. In this chapter we describe an approach to updating Java software at runtime through the use of runtime models consisting of UML class and sequence diagrams. Changes to models are transformed to changes on Java source code, which is then propagated to the runtime system using the JavAdaptor technology. In particular, the presented approach permits in-the-small software changes, i.e., changes at the code statement level, as opposed to in-the-large changes, i.e., changes\u00a0\u2026", "num_citations": "17\n", "authors": ["1502"]}
{"title": "Using model types to support contract-aware model substitutability\n", "abstract": " Model typing extends the applicability of typing to model-oriented type system by assigning models with specific types. It provides support for model substitutability addressing a wide range of facilities such as model transformation reuse. While existing approaches are limited to object-oriented metamodels (e.g., MOF) as types, there is a need for exploring more precise types. In particular, we propose in this paper an extension to model typing that takes into account contract-aware substitutability where contracts are defined in terms of invariants and pre-/postconditions expressed using OCL. While invariants offer a suitable way to complete object-oriented metamodels with additional structural properties, pre-/postconditions pave the way of behavioral substitutability for model transformation specialization. We also provide an implementation to rigorously reason about the substitutability on model types with\u00a0\u2026", "num_citations": "17\n", "authors": ["1502"]}
{"title": "An Approach to Analyzing Temporal Properties in UML Class Models.\n", "abstract": " The Unified Modeling Language (UML) Class Models are widely used for modeling the static structure of object-oriented software systems. Temporal properties of such systems can expressed using TOCL, a temporal extension to the Object Constraint Language (OCL). Verification and validation of temporal properties expressed in TOCL is non-trivial and there are no automated tools that can aid such analysis. Existing approaches rely on transforming the UML models to another language that supports automated analysis. Such transformation is complex and can introduce errors. Towards this end, we propose an approach for directly analyzing temporal properties expressed in TOCL. We present a case study based on the Steam Boiler Control System to demonstrate the applicability of the approach.", "num_citations": "17\n", "authors": ["1502"]}
{"title": "A middleware\u2010transparent approach to developing distributed applications\n", "abstract": " An innovative middleware\u2010transparent approach to developing distributed applications is presented. The approach uses an aspect\u2010oriented software development technique to separate an application's middleware\u2010independent functionality from its middleware\u2010specific functionality. Application elements that are specific to the middleware are localized in aspects that can be seamlessly integrated into middleware\u2010independent application designs. The middleware\u2010transparent approach is used to decouple business functionality from middleware\u2010specific functionality. The decoupling allows developers to change middleware application elements without significantly modifying business functionality. Middleware technologies such as Java Remote Method Invocation (RMI), Jini, Simple Object Access Protocol (SOAP) remote procedure call (RPC) and .Net are used as examples to illustrate the approach. Copyright \u00a9\u00a0\u2026", "num_citations": "17\n", "authors": ["1502"]}
{"title": "Improving the UML metamodel to rigorously specify aggregation and composition\n", "abstract": " In object-oriented technology, some concepts are so often used that people have no doubt about their meaning (e.g. class, object, method). This is not the case when abstraction concerns lead to the use of some conceptual representations such as an object being part of another one. Even the standardized notation UML is confusing in some of its definitions. In this paper, we use the benefits from a formal definition for the semantics of the Whole-Part relationship to improve the metamodel used in the UML. The aim of the proposed specification is for it to be incorporated into version 2.0 of UML.", "num_citations": "17\n", "authors": ["1502"]}
{"title": "A tool for rigorous analysis of object models\n", "abstract": " Formal and graphical informal analysis techniques complement each other when they are integrated appropriately. Formal techniques facilitate rigorous reasoning about modeled behavior, while graphical informal techniques facilitate the creation of models that are concise, and easier to understand. In this paper we describe the current status of our work on developing an environment called FuZE that supports the integration of Fusion analysis techniques and the more formal Z speci cation language. In FuZE, Fusion analysis models are developed and then transformed to more precise Z representations. The formal nature of the Z representations means that they can be used to rigorously analyze behavior. In FuZE, Z typecheckers and animators are used to support rigorous analysis of modeled behavior. Analysis may reveal inconsistent, incomplete, and ambiguous aspects of behavior. One can use the insights gained from the rigorous analysis to improve the less formal Fusion models.", "num_citations": "17\n", "authors": ["1502"]}
{"title": "Fine-grained software evolution using uml activity and class models\n", "abstract": " Modern software systems that play critical roles in society\u2019s infrastructures are often required to change at runtime so that they can continuously provide essential services in the dynamic environments they operate in. Updating open, distributed software systems at runtime is very challenging. Using runtime models as an interface for updating software at runtime can help developers manage the complexity of updating software while it is executing. In this work we describe an approach to updating Java software at runtime through the use of runtime models consisting of UML class and activity diagrams. Changes to models are turned into changes on Java source code, which is then propagated to the runtime system using the JavAdaptor technology. In particular, the presented approach permits in-the-small software changes, i.e., changes at the code statement level, as opposed to in-the-large changes, i.e\u00a0\u2026", "num_citations": "16\n", "authors": ["1502"]}
{"title": "UML aspect specification using role models\n", "abstract": " We demonstrate a flexible technique for aspect specification using the UML. The technique uses Role Models to specify design aspects. Roles allow greater flexibility in an aspect over other template-based techniques (e.g. profile extensions). While Role Models do allow us to create templates, they also allow us to create flexible specifications that can be applied by identifying existing model elements that can play aspect roles either as is, or with augmentation based on the aspect specification. This additional capability means that our aspect designs can be applied to specific system designs with fewer constraints on the designer and the initial system models.               We demonstrate this flexibility by applying a design aspect developed for one problem domain to a problem in a different domain. No changes are needed in the aspect models, although not all portions of the aspect specification are used in\u00a0\u2026", "num_citations": "16\n", "authors": ["1502"]}
{"title": "Model-driven engineering and optimizing compilers: A bridge too far?\n", "abstract": " A primary goal of Model Driven Engineering (MDE) is to reduce the cost and effort of developing complex software systems using techniques for transforming abstract views of software to concrete implementations. The rich set of tools that have been developed, especially the growing maturity of model transformation technologies, opens the possibility of applying MDE technologies to transformation-based problems in other domains.               In this paper, we present our experience with using MDE technologies to build and evolve compiler infrastructures in the optimizing compiler domain. We illustrate, through our two ongoing research compiler projects for C and a functional language, the challenging aspects of optimizing compiler research and show how mature MDE technologies can be used to address them. We also identify some of the pitfalls that arise from unrealistic expectations of what can be\u00a0\u2026", "num_citations": "15\n", "authors": ["1502"]}
{"title": "Towards an Internet\u2010based Education Model for Caribbean Countries\n", "abstract": " Advances in the development of the Internet infrastructure can be used within developing countries to enhance the delivery of high quality education to their citizens. The mechanisms used to deliver educational material, over the Internet, range from the very sophisticated Virtual Classrooms (VCs) in which students in cyberspace interact in near real\u2010time with instructors at remote sites, to the basic non real\u2010time delivery of lecture contents. In Caribbean territories where the concentration of high\u2010quality teachers and teaching facilities are in and around urban cities, VCs can be used to enhance the access of students in remote areas to the materials, experiences, and facilities provided at the urban centers. We present a model for virtual classrooms, which is specifically geared toward Caribbean territories. This model leverages the usage of alternative low\u2010cost technology to offer VC environment to teaching\u00a0\u2026", "num_citations": "15\n", "authors": ["1502"]}
{"title": "Understanding the role of formal specification techniques in requirements engineering\n", "abstract": " The need for more rigorous and systematic approaches to requirements engineering has led to considerable research on structured specification methods (SSMs) and formal specification techniques (FSTs). SSMs are based on descriptive tools that utilize a small set of simple, graphical, modeling concepts, while FSTs are based on mathematical modeling tools. The ease of use of SSMs is tempered by its lack of support for rigorous semantic analysis. On the other hand, FSTs provide considerable support for semantic analysis but are often difficult to read and understand. This suggests that SSMs and FSTs can play complementary roles in software specification activities. In this paper we describe our experiences with a class project that applied a requirements engineering process based on an integrated SSM and FST.", "num_citations": "15\n", "authors": ["1502"]}
{"title": "Analysis of a relationship based access control model\n", "abstract": " With the advent of online social networks (OSN) and personalized healthcare, relationship-based access control is playing an ever important role. People often share sensitive personal information through online social networks (OSNs) to keep in touch with their friends and families. Such sensitive information if leaked inadvertently to third parties may have detrimental effects and sometimes disastrous consequences on the lives of individuals. Access control models are needed that allows controlled sharing of information. Different features of the model may conflict with each other. Identifying potential conflicts is important as sometimes such conflicts are sources of misconfigurations. We propose an access control model for use in OSNs and provide its formal specification. Manually checking the formal specification is tedious and error-prone. Towards this end, we also demonstrate how conflicts and potential\u00a0\u2026", "num_citations": "14\n", "authors": ["1502"]}
{"title": "Contract-aware slicing of UML class models\n", "abstract": " Slicing is a reduction technique that has been applied to class models to support model comprehension, analysis, and other modeling activities. In particular, slicing techniques can be used to produce class model fragments that include only those elements needed to analyze semantic properties of interest. In this paper we describe a class model slicing approach that takes into consideration invariants and operation contracts expressed in the Object Constraint Language (OCL). The approach is used to produce model fragments, each of which consists of only the model elements needed to analyze specified properties. We use the slicing approach to support a technique for analyzing sequences of operation invocations to uncover invariant violations. The slicing technique is used to produce model fragments that can be analyzed separately. The preliminary evaluation we performed provides evidence that\u00a0\u2026", "num_citations": "14\n", "authors": ["1502"]}
{"title": "An analysis of model composition approaches\n", "abstract": " In the model driven engineering (MDE) vision, systems are described with a set of models. These models describe a system from a given viewpoint, in a given language and at a specific level of abstraction. Some of these models will be composed into a single integrated model in order to analyze interaction between different facets, to asses the consistency among models, to unify models developed by different teams of developers. Ultimately a single system will arise from this set of models and thus model composition is unavoidable. The complex structure of models makes manual model composition a difficult and tedious task. This problem has given rise to several proposed approaches to automate model composition. In this thesis, we propose a framework for model composition that can be used to compare different composition approaches. One of the key insights provided by the framework is that model\u00a0\u2026", "num_citations": "14\n", "authors": ["1502"]}
{"title": "Modeling Fault Tolerant Concerns Using Aspects Technical Report 02-102\n", "abstract": " In this paper we show how design-level aspects can be used to separate fault tolerance concerns from essential functional concerns during software design. The aspect-oriented design technique described in this paper allows one to independently specify fault tolerance and essential functional concerns, and then weave the specifications to produce a design model that reflects both concerns. We illustrate our technique using a small example.", "num_citations": "14\n", "authors": ["1502"]}
{"title": "Hypervisor event logs as a source of consistent virtual machine evidence for forensic cloud investigations\n", "abstract": " Cloud Computing is an emerging model of computing where users can leverage the computing infrastructure as a service stack or commodity. The security and privacy concerns of this infrastructure arising from the large co-location of tenants are, however, significant and pose considerable challenges in its widespread deployment. The current work addresses one aspect of the security problem by facilitating forensic investigations to determine if these virtual tenant spaces were maliciously violated by other tenants. It presents the design, application and limitations of a software prototype called the Virtual Machine (VM) Log Auditor that helps in detecting inconsistencies within the activity timelines for a VM history. A discussion on modeling a consistent approach is also provided.", "num_citations": "13\n", "authors": ["1502"]}
{"title": "Variability in UML language and semantics\n", "abstract": " Practitioners, who use UML as a sketching language are generally not too concerned about the precision of their models, but developers who build UML models to rigorously analyze software properties (eg, to analyze the consistency of design constraints) or that can be mechanically transformed to implementations requiring tools and tool chains that are based on a precisely defined UML semantics (see this issue\u2019s Expert Voice by Manfred Broy and Mar\u00eda Victoria Cengarle as well as the regular paper on the many semantics of sequence diagrams by Zolt\u00e1n Micskei and H\u00e9l\u00e8ne Waeselynck). This need motivates much of the work on defining appropriate formal semantics for the UML. There is a significantly large body of work on formalizing the UML\u2014both syntactical appearance, internal representation and semantics (in terms of meaning), and the collective experience suggests that defining appropriate semantics for the UML has both a technical and a strong political/social aspect. This non-technical aspect is concerned primarily with determining what constitutes an \u201cappropriate\u201d language. The problem is that different stakeholders, including UML modelers from different domains, tool vendors with specific ready to use solutions, have varying views of what constitutes an appropriate UML language and its semantics. It is not easily possible to support these sometimes competing views in a single language. This led to the view of UML as a \u201cfamily of languages\u201d and to the introduction of profile mechanisms and \u201csemantic variation points\u201d that can be used for specializing the syntax and semantics of UML.", "num_citations": "13\n", "authors": ["1502"]}
{"title": "A tale of two case studies: Using integrated methods to support rigorous requirements specification\n", "abstract": " Integrated formal and informal specification techniques (FISTs) have been the focus of a number of research projects since the mid-eighties. Research in this area aim at producing specification techniques that integrate concepts and notations used in mature formal specification techniques (FSTs) and popular graphical modeling methods such as  Structured Analysis  (SA) and  Object-Oriented Analysis  (OOA). In this paper we illustrate, using the results of two case studies, two roles FSTs can play in the context of less formal graphical requirements modeling and analysis techniques. In the first case study discussed an extended Petri Net model is used to prototype a textbook SART (SA/Real-Time) model. In this case, the formal model acts as a prototype, and is used to dynamically validate the requirements expressed in the SART model. In the second case study an integrated OOA method (Fusion) and FST (Z) is used to create requirements models that are graphical and analyzable. In this case, the formal models act as more precise representations of the requirements captured by the graphical models.", "num_citations": "13\n", "authors": ["1502"]}
{"title": "Formal specification using structured systems analysis\n", "abstract": " The formal specification of complex software systems is viewed by many as being necessary for verifying formal properties (for example, correctness) of the application being built (see, for example, lAP87, GM86, Jo86]). Consequently considerable effort is being spent on research in this area, where a formal specification is one which utilises strict syntax and semantics for describing objects, where the objects can be statements, programs, requirements, or something else. A number of techniques for constructing formal specifications have been developed since the late 1960's, but their use in industry is limited despite their potential usefulness. Some reasons for the resistance in their use are sociological, while others relate to the lack of unification between the techniques [Bj87]. On the sociological side, the proper use of formal specification techniques requires a degree of mathematical matmSty not previously\u00a0\u2026", "num_citations": "13\n", "authors": ["1502"]}
{"title": "Model Driven Engineering Languages and Systems: 15th International Conference, MODELS 2012, Innsbruck, Austria, September 30--October 5, 2012, Proceedings\n", "abstract": " This book constitutes the refereed proceedings of the 15th International Conference on Model Driven Engineering Languages and Systems, MODELS 2012, held in Innsbruck, Austria, in September/October 2012. The 50 papers presented in this volume were carefully reviewed and selected from a total of 181 submissions. They are organized in topical sections named: metamodels and domain specific modeling; models at runtime; model management; modeling methods and tools, consistency analysis, software product lines; foundations of modeling; static analysis techniques; model testing and simulation; model transformation; model matching, tracing and synchronization; modeling practices and experience; and model analysis.", "num_citations": "12\n", "authors": ["1502"]}
{"title": "Systematic Scenario-Based Analysis of UML Design Class Models\n", "abstract": " Scenario-based UML Design Analysis (SUDA) is a lightweight technique for analyzing behavior specified in UML design class models. A person (verifier) charged with verifying a design class model developed by an independent group of modelers can use SUDA to analyze the design class model against a set of scenarios manually created by the verifier. In this paper we describe an extension of SUDA that allows a verifier to automatically generate scenarios satisfying criteria defined by the verifier. We illustrate the extended SUDA technique by analyzing a subset of the behavior specified in a Location-aware Role-Base Access Control (LRBAC) class model.", "num_citations": "12\n", "authors": ["1502"]}
{"title": "Object-oriented theories for model driven architecture\n", "abstract": " This paper proposes a number of generic modelling technolo- gies that can be used to support the OMG initiative for Model Driven Architecture (MDA). Object theories are used to combine these tech- nologies into a meta-modelling framework for MDA.", "num_citations": "12\n", "authors": ["1502"]}
{"title": "Towards a rigorous object-oriented analysis and design method\n", "abstract": " We present techniques for constructing Z specifications from the analysis and design models of the Fusion method. We show how the specifications can be used to more closely tie the Fusion models together. In particular, we outline how the specifications can be used to support rigorous verification of Fusion design models against analysis models.", "num_citations": "12\n", "authors": ["1502"]}
{"title": "Guidelines for formalizing Fusion object-oriented analysis models\n", "abstract": " The growing interest in object-oriented analysis and design methods (OOMs) in the software development industry can be attributed to the support they give to some of the more significant software engineering principles, for example, separation of concerns and generality. On the other hand, most OOMs, like their structured analysis and design predecessors, produce models that are not amenable to rigorous semantic analyses. This problem can be attributed to the lack of firm semantic bases for the modeling notations and concepts. In this paper we show how a particular OOM, the Fusion analysis method, can be made more formal while preserving its essential qualities. Our approach involves integrating the Z formal specification style with the Fusion method. The result is an OOM that produces semantically analyzable Fusion models of behavior at the requirements level.", "num_citations": "12\n", "authors": ["1502"]}
{"title": "A domain model of WWW browsers\n", "abstract": " Domain analysis is the process of identifying and organizing knowledge about some class of problems to support the description and solution of those problems, WWW (World Wide Web) browsers was chosen as the domain to illustrate two different levels of domain analysis. In this work we illustrate a problem oriented domain analysis on the navigational features of WWW browsers and a solution oriented domain analysis on WWW browser caching.", "num_citations": "12\n", "authors": ["1502"]}
{"title": "Using models to validate unanticipated, fine-grained adaptations at runtime\n", "abstract": " An increasing number of modern software systems need to be adapted at runtime while they are still executing. It becomes crucial to validate each adaptation before it is deployed to the running system. Models are used to ease software maintenance and can, therefore, be used to manage dynamic software adaptations. For example, models are used to manage coarse-grained anticipated adaptations for self-adaptive systems. However, the need for both fine-grained and unanticipated adaptations is becoming increasingly common, and their validation is also becoming more crucial. This paper proposes an approach to validate unanticipated, fine-grained adaptations performed on models before the adaptations are deployed into the running system. The proposed approach exploits model execution where model representations of the test suites of a software system are executed. The proposed approach is\u00a0\u2026", "num_citations": "11\n", "authors": ["1502"]}
{"title": "Developing distributed services using an aspect oriented model driven framework\n", "abstract": " To manage the development of cooperative information systems that support the dynamics and mobility of modern businesses, separation of concern mechanisms and abstractions are needed. Model driven development (MDD) approaches utilize abstraction and transformation to handle complexity. In MDD, specifying transformations between models at various levels of abstraction can be a complex task. Specifying transformations for pervasive system services that are tangled with other system services is particularly difficult because the elements to be transformed are distributed across a model. This paper presents an aspect oriented model driven framework (AOMDF) that facilitates separation of pervasive services and supports their transformation across different levels of abstraction. The framework facilitates composition of pervasive services with enterprise services at various levels of abstraction. The\u00a0\u2026", "num_citations": "11\n", "authors": ["1502"]}
{"title": "An aspect oriented approach to analyzing dependability features\n", "abstract": " In this paper we describe an aspect-oriented modeling (AOM) approach to design that focuses effort on conceptualizing, describing, and analyzing features that realize software dependability goals. Dependability features are described by aspect models which are composed with a base design model, called a primary model, to produce the overall system design. The behavior described by the integrated model can be evaluated against descriptions of desired and undesirable behaviors to determine the extent that dependability objectives are met. We outline an evaluation approach that involves composing descriptions of desired and undesirable behaviors with behavioral views of integrated models. The AOM approach is illustrated using a primary model that describes a simple banking system and aspect models describing authorization and fault tolerance solutions.", "num_citations": "11\n", "authors": ["1502"]}
{"title": "Using aspects to manage security risks in risk-driven development\n", "abstract": " The EU IST-project CORAS has developed an integrated risk management and system development process for security-critical systems based on AS/NZS 4360, RUP, and RM\u2013ODP. The approach presented in this paper is based on the concepts of risk-driven development and extends the CORAS framework by using aspects to specify security risk treatment options. This enhances the evaluation of the treatment options since aspects models are decoupled from the primary model. The result is an aspect-oriented risk-driven development approach, in which security requirements or security risks may be identified in each phase of the development. The treatments that addresses these requirements or security risks are specified and implemented as aspects. Using aspects makes it easier to develop and evaluate security treatments options and to evolve the treatments.", "num_citations": "11\n", "authors": ["1502"]}
{"title": "Supporting rigorous evolution of UML models\n", "abstract": " The Mdel Driven Architecture (MDA) initiative formulated by the Object Management Group (OMG) is intended to support the development of software-intensive systems through the transformation of models to executable components and applications. Techniques and technologies that support rigorous definition of model transformations are required to realize the MDA vision. In this paper, we describe a technique for specifying pattern-based transformations of UML models consisting of class and interaction diagrams. The transformation specifications can be used to support systematic and verifiable transformations of UML models.", "num_citations": "11\n", "authors": ["1502"]}
{"title": "A metamodeling approach to model refactoring\n", "abstract": " The Model Driven Architecture (MDA) initiative formulated by the Object Management Group (OMG) provides a framework for a set of standards supporting a model-centric style of development. MDA is intended to support the use of models as the primary artifacts of software development. It represents an approach for delivering software-intensive systems through the transformation of models\u2013primarily expressed in the UML\u2013to executable components and applications. Techniques and technologies that support rigorous definition and application of model transformations are required to realize the MDA vision. In this paper we describe a technique that supports rigorous definition and use of a type of transformation called model refactoring. The paper describes how families of model transformation can be defined at the UML metamodel level.", "num_citations": "10\n", "authors": ["1502"]}
{"title": "Why it is so hard to use models in software development: observations\n", "abstract": " In a previous editorial, we asked what modeling contributes to the development process. We concluded that models are not so much of value for themselves, but exist to improve certain properties of the product, such as quality or maintainability, or of the process, such as cost-efficiency and predictability. In this editorial, we would like to report on specific findings that are based on the reported and own experience with some concrete modeling tools and frameworks of different types (without naming them) and draw some conclusions for further tool improvement.The basic idea is simple: create a model in a source language (eg, a class diagram or a state machine), take a code generator, and generate the code for it in a target language. The idea behind is that the model is much simpler and thus easier to write and assess than the resulting code. Some of the reasons are that a model can abstract from the\u00a0\u2026", "num_citations": "9\n", "authors": ["1502"]}
{"title": "An approach to testing java implementation against its uml class model\n", "abstract": " Model Driven Engineering (MDE) aims to expedite the software development process by providing support for transforming models to running systems. Many modeling tools provide forward engineering features that automatically translate a model into a skeletal program that developers must complete. Inconsistencies between a design model and its implementation can result as a consequence of manually-added code. Manually checking that an implementation conforms to the model is a daunting task. Thus, there is a need for MDE tools that developers can use to check whether an implementation conforms to a model, especially when generated code is manually modified. This paper presents an approach for testing that an implementation satisfies the constraints specified in its design model. We also describe a prototypical tool that supports the approach, and we describe how its application to two\u00a0\u2026", "num_citations": "9\n", "authors": ["1502"]}
{"title": "Modeling for the cloud\n", "abstract": " Cloud computing is poised to become a major driving force behind European and American businesses. Long-standing projects like the SETI@ Home project and facilities such as SourceForge leverage third party distributed storage and computational resources to deliver services. Companies are seeking to commercialize this approach to service delivery through the use of cloud computing technologies. Cloud computing commerce can take several forms: customers can rent an infrastructure, a platform, or predefined services. While predefined cloud-based services for email, blogs, wikis, and media storage are well known, more complex business oriented applications like customer relationship management are starting to appear. While companies such as Amazon, Google, and Force. com are providing services for and from the cloud there are aspects of cloud computing that can benefit from research in the\u00a0\u2026", "num_citations": "9\n", "authors": ["1502"]}
{"title": "4th International Workshop on Models@run.time\n", "abstract": " The 4th edition of the workshop Models@run.time was held at the 12th International Conference on Model Driven Engineering Languages and Systems (MODELS). The workshop took place in the city of Denver, Colorado, USA, on the 5th of October 2009. The workshop was organised by Nelly Bencomo, Robert France, Gordon Blair, Freddy Mu\u00f1oz, and C\u00e9dric Jeanneret. It was attended by at least 45 people from more than 10 countries. In this summary we present a synopsis of the presentations and discussions that took place during the 4th International Workshop on Models@run.time.", "num_citations": "9\n", "authors": ["1502"]}
{"title": "Aspect oriented modeling of component architectures using AADL\n", "abstract": " Dependable embedded software system design is fastidious because designers have to understand and handle multiple, interdependent, pervasive dependability concerns such as fault tolerance, timeliness, performance, security. Because these concerns tend to crosscut application architecture, understanding and changing their descriptions can be difficult. Separating theses concerns at architectural level allow the designers to locate them, to understand them and thus to preserve the required properties when making the change in order to keep the architecture consistent. That separation of concerns leads to better understanding, reuse, analysis and evolution of these concerns during design. The Architecture Analysis and Design Language (AADL) is a standard architecture description language in use by a number of organizations around the world to design, analyze embedded software architectures and\u00a0\u2026", "num_citations": "9\n", "authors": ["1502"]}
{"title": "A metamodeling approach to model transformation\n", "abstract": " The Model Driven Architecture (MDA) is a framework that is intended to support the development of software-intensive systems through the transformation of models to executable components and applications. A key facilitator of the MDA is a standard to express model transformations. This poster describes a rigorous approach to modeling pattern-based transformations at the metamodel level.", "num_citations": "9\n", "authors": ["1502"]}
{"title": "Towards rigorous analysis of fusion models: the MIRG experiences\n", "abstract": " Most popular graphical object-oriented methods (OOMs) provide good mechanisms for handling com- plexity and constructs that facilitate the creation of abstract, highly-structured models of systems. These qualities make the use of OOMs in the development of complex systems attractive. On the other hand, the models produced by these methods are not amenable to rigorous semantic analysis. Research carried out by the  Methods Integration Research Group  (MIRG) at Florida Atlantic Uni- versity on integrating formal specification techniques (FSTs) with less-formal, but richly-structured, graphical OOMs is concerned primarily with developing precise and analyzable counterparts of the models produced by the OOMs. In this paper we give an overview of the current MIRG work on using FSTs to support rigorous analysis of OO models. Specifically, we outline our approach to formaliz- ing Fusion's design and analysis models, and indicate how the formal models can be used to support semantic analysis across requirements and design development stages.", "num_citations": "9\n", "authors": ["1502"]}
{"title": "A formal object-oriented CASE tool for the development of complex systems\n", "abstract": " An increasing number of CASE tools based on object-oriented methods (OOMs) are appearing in the marketplace. Despite their good qualities, OOMs produce models that are not amenable to rigorous semantic analysis. This problem can be attributed to the lack of rm semantic basis for the modeling notations and concepts such as those found in formal methods. Formal and graphical informal analysis techniques complement each other when they are integrated appropriately. Formal techniques facilitate rigorous reasoning about modeled behavior, while graphical informal techniques facilitate the creation of models that are concise, and easier to understand. In this paper we describe the current status of our work on developing an environment for the speci cation and the analysis of complex systems. This environment, called FuZE, supports the integration of Fusion analysis techniques and the more formal Z speci cation language. This new CASE tool is one example of the successful integration of two di erent speci cation approaches into a rigorous development environment.", "num_citations": "9\n", "authors": ["1502"]}
{"title": "Model Transformations at the Metamodel Level\n", "abstract": " The MOF 2.0 Query/Views/Transformations (QVT) goal is to provide a standard for expressing model transformations. Techniques and technologies that support the rigorous definition and application of model transformations are required to realize the Model Driven Architecture (MDA) vision. In this paper, we describe an approach to rigorous modeling of pattern-based transformations. We discuss how our transformation specification approach promotes controlled pattern-based model evolution. 1", "num_citations": "8\n", "authors": ["1502"]}
{"title": "Creating security mechanism aspect models from abstract security aspect models\n", "abstract": " Aspect-oriented modeling (AOM) techniques allow system architects to design the most important decompositions of complex systems to create a primary system modularization. These techniques can also be used to design additional system concerns that are not part of the primary system modularization. Aspect-oriented modeling techniques can be used to compose different aspect models with the primary decomposition models in order to analyze the complete system design. The results of analyses can be used to compare potential design realizations of multiple competing concerns. Aspect models, composition, and analysis techniques must be available at different levels of abstraction to enable comprehensive trade-off analysis among competing concern realizations. Different levels of abstraction are particularly important when multiple mechanisms are available to realize a concern, such as in the area of security. Architects need to experiment with different security mechanisms in order to choose those that best meet overall system goals while providing minimal interference with other design considerations. Abstract aspect models can be used to develop more detailed mechanism models that are still independent of implementation considerations. These detailed models can be used for mechanism analysis and trade-off experimentation. We have created two detailed authentication mechanism models using an abstract aspect model, and we demonstrate the steps used to create the detailed model for one of these mechanisms in this paper. Although not discussed in this paper, we have composed these different mechanism models with\u00a0\u2026", "num_citations": "8\n", "authors": ["1502"]}
{"title": "FuZE {Draft of the User's Guide\n", "abstract": " This report is the current Reference Manual for FuZE1. A HTML version is also available. History of the proposal:", "num_citations": "8\n", "authors": ["1502"]}
{"title": "Modeling of online social network policies using an attribute-based access control framework\n", "abstract": " People often share sensitive personal information through online social networks (OSNs) to keep in\u00a0touch with their friends and families. Such sensitive information if leaked inadvertently to malicious third parties may have disastrous consequences on the lives of individuals. Access control policies need to be specified, analyzed, enforced, and managed in a simple manner for the regular OSN users. We demonstrate how this can be done. We first propose a simple model that captures the typical OSN features and show how to represent it using an Entity-Relationship Diagram. The numerous features of an OSN interact with each other in subtle ways \u2013 this makes it easy for the na\u00efve user to make misconfiguration errors. Towards this end, we illustrate how our OSN model can be formalized in Alloy and its constraints adequately captured. Alloy has an embedded SAT solver which makes it amenable to\u00a0\u2026", "num_citations": "7\n", "authors": ["1502"]}
{"title": "Devising the future of the models@ run. time workshop\n", "abstract": " The 9th edition of the workshop Models@run.time was held at the 17th International Conference on Model Driven Engineering Languages and Systems (MODELS). The workshop took place in the city of Valencia, Spain, on the 30th of September 2014. The workshop was organised by Sebastian G\u00f6tz, Nelly Bencomo and Robert France. Despite the high number of concurrent workshops, it was attended by 27 people as it is still one of the most popular workshops in MODELS. The major focus of this year's edition of the workshop was to identify future directions for the workshop, which currently faces a matured community. Hence, in this report we first present a synopsis of the workshop sessions, which included a separate session on introducing the current body of knowledge of models@run.time. Moreover, we show and discuss a survey on new topics of interest we conducted with the workshop participants and\u00a0\u2026", "num_citations": "7\n", "authors": ["1502"]}
{"title": "Towards dynamic semantics for synthesizing interpreted dsmls\n", "abstract": " Domain-specific languages (DSLs) provide developers with the ability to describe applications using language elements that directly represent concepts in the application problem domains. Unlike general-purpose languages, domain concepts are embedded in the semantics of a DSL. In this chapter, the authors present an interpreted domain-specific modeling language (i-DSML) whose models are used to specify user-defined communication services, and support the users\u2019 changing communication needs at runtime. These model changes are interpreted at runtime to produce events that are handled by the labeled transition system semantics of the i-DSML. Specifically, model changes are used to produce scripts that change the underlying communication structure. The script-producing process is called synthesis. The authors describe the semantics of the i-DSML called the Communication Modeling Language\u00a0\u2026", "num_citations": "7\n", "authors": ["1502"]}
{"title": "Service\u2013oriented Architecture Modeling: Bridging the Gap Between Structure and Behavior\n", "abstract": " Model\u2013driven development of large-scale software systems is highly likely to produce models that describe the systems from many diverse perspectives using a variety of modeling languages. Checking and maintaining consistency of information captured in such multi-modeling environments is known to be challenging. In this paper we describe an approach to systematically synchronize multi\u2013models. The approach specifically addresses the problem of synchronizing business processes and domain models in a Service-oriented Architecture development environment. In the approach, the human effort required to synchronize independently developed models is supplemented with significant automated support. This process is used to identify concept divergences, that is, a concept in one model which cannot be matched with concepts in the other model. We automate the propagation of divergence\u00a0\u2026", "num_citations": "7\n", "authors": ["1502"]}
{"title": "Does model driven engineering tame complexity?\n", "abstract": " Advocates of model-driven (software) engineering (MDE) 1 tout the need to raise the level of abstraction at which software is conceived, implemented, and evolved to better manage the inherent complexity of modern software-based systems. Examples of MDE-related languages, technologies, and techniques that have been proposed as \u201ctamers\u201d of inherent complexity are languages supporting multi-view modeling of systems (eg, the UML), metamodeling approaches to specifying model transformations, metamodeling environments for creating and using domain specific languages, megamodeling environments for manipulating and managing models, and aspect-oriented modeling environments supporting multi-dimensional separation of concerns and composition. Experiences suggest that some forms of MDE technologies may introduce significant accidental complexities that can detract from their use as managers of inherent software complexity. The degree of accidental complexity is not surprising given that we\u2019re still in the early phases of MDE. Few would argue that we fully understand how to effectively model complex software systems. It is unreasonable to expect early perfect solutions when tackling the wicked problems facing MDE researchers and technologists. If we are to use MDE to tame the complexity of devel-", "num_citations": "7\n", "authors": ["1502"]}
{"title": "Towards a model-driven approach to reuse\n", "abstract": " A model-driven reuse approach that is based on an organization\u2019s Enterprise Architecture (EA) and on the Unified Modeling Language (UML) is proposed. The framework embodying the approach allows an organization to evolve, from a repository-based to a model-based reuse approach in which reusable experiences are embedded in modeling languages, as an application domain becomes more stable and well-understood over time.", "num_citations": "7\n", "authors": ["1502"]}
{"title": "Integrated informal object-oriented and formal modeling techniques\n", "abstract": " One approach to making graphical object-oriented methods (OOMs) more precise and amenable to rigorous analysis is to integrate them with suitable formal specification notations. The integration we outline in this paper provides a bridge from the OOM modeling constructs to the formal notation. We used the Z formal notation and its related tools to provide a well-defined model of the system.", "num_citations": "7\n", "authors": ["1502"]}
{"title": "CASE-based Rigorous Object-Oriented Modeling\n", "abstract": " The use of a rigorous development environment is needed when developing a complex system, such as real-time and critical systems. Preventing industry from embracing formal method techniques is the lack of industrial strength tools to support formalization and analysis. We are developing an approach and a tool environment for the development of complex systems that integrates a graphical object-oriented technique (Fusion) and a formal method (Z) with analysis tools. The tool, called FuZE (Fusion/Z Environment), has been used successfully to specify and analyze non-trivial systems. This paper describes the specification transformation rules and the extension of the environment to include transformation of design documents such as Object Interaction Graphs.", "num_citations": "7\n", "authors": ["1502"]}
{"title": "A formal basis for structured analysis\n", "abstract": " In a related paper by Docker and Tate (1986), a prototyping environment called SAME (Structured Analysis Modelling Environment) is described, which supports the exercising of structured systems analysis data flow diagrams (DFDs). SAME provides formal operational semantics for DFDs. These are suitable for building executable models of DFDs but are inadequate for proving properties about either DFDs or their components. The authors address this inadequacy by providing a formal mathematical semantics for DFDs from which formal specifications can be generated. The intention is to 'graft' this formal system onto SAME, and other tools, so that (traditional) semi-formal tools can be used as the 'front-ends' in the rigorous development of software. The aim is not merely to create an environment consisting of a set of tools that occupy the middle of the informal-formal spectrum. Rather, an eclectic approach is being\u00a0\u2026", "num_citations": "7\n", "authors": ["1502"]}
{"title": "Analyzing behavioral aspects of UML design class models against temporal properties\n", "abstract": " Class models play central roles in model-driven development (MDD). Automated analysis of class models is crucial to uncover design problems. In previous work, we described a rigorous lightweight approach to analyzing operation specifications in UML design class models against temporal properties. However, the approach lacks a mechanism to handle the analysis of large class models. This paper presents a slicing algorithm that can be used to scale the analysis to large class models. We performed a preliminary evaluation using the Steam Boiler Control System. The results are presented in this paper.", "num_citations": "6\n", "authors": ["1502"]}
{"title": "Rigorous Analysis of Temporal Access Control Properties in Mobile Systems\n", "abstract": " Access control models must be analyzed to uncover flaws that can be exploited to gain unauthorized access. The UML has been used to describe access control models and there are a number of proposed approaches for analyzing UML access control models. Practical support for checking UML access control models against temporal properties is still lacking. In this paper, we describe a lightweight approach to analyzing a UML model of security policies against linear temporal properties. The access control policies are based on a generalized spatio-temporal role-based access control (GSTRBAC) model. We use a demonstration case study to show how the approach can be used to uncover access control problems.", "num_citations": "6\n", "authors": ["1502"]}
{"title": "An Activity Theory Language: USE Implementation\n", "abstract": " This document contains the meta-model we have defined for an Activity Theory language and the USE tool implementation we have created for it, along with results of testing it in the USE environment.The purpose of the AT language is for requirements elicitation. A user will create Activity Theory System Diagrams (ASDs) from stakeholder input. The elements and their relations as defined in this document can be used to determine whether such an ASD is well-formed. The relations in particular can also be used to decide where further input is needed from stakeholders to resolve vagueness or contradictory information. It is also our intention in the future to provide enough structure to some of the elements such as Rules that some simple natural language processing can be used to identify potential overlap/contradictions that may need additional stakeholder dialog.", "num_citations": "6\n", "authors": ["1502"]}
{"title": "Teaching programming students how to model: Challenges & opportunities\n", "abstract": " Computer Science students who have one or more years of basic programming experience and little or no exposure to abstractions above the code level, often struggle to grasp modeling concepts and practices in more advanced software development courses. In this talk I discuss some of the factors that contribute to this situation and propose a learning process in which the abstraction gap between models and implementations is gradually widened as student modeling skills are developed", "num_citations": "6\n", "authors": ["1502"]}
{"title": "A DSML for coordinating user-centric communication services\n", "abstract": " Rapid advances in electronic communication devices and technologies have resulted in a shift in the way communication applications are being developed. The emerging development strategies provide end-users with a greater ability to manipulate the underlying communication technologies by providing the appropriate level of abstraction, referred to as user-centric communication. In communication-intensive domains such as telemedicine and disaster management, the user-centric communication strategies still lack the ability to coordinate the various communication services in collaborative processes. In this paper, we present a domain-specific modeling language (DSML), Workflow Communication Modeling Language (WF-CML), that supports the rapid realization of collaborative user-centric communication applications. WF-CML is an extension of CML with communication specific abstractions of workflow\u00a0\u2026", "num_citations": "6\n", "authors": ["1502"]}
{"title": "Modeling and integrating aspects into component architectures\n", "abstract": " Dependable software systems are difficult to develop because developers must understand and address several interdependent and pervasive dependability concerns. Features that address pervasive dependability concerns such as error detection and recovery tend to crosscut application architecture and thus understanding and changing their descriptions can be difficult. Separating these features at the architectural level allows one to better understand and reuse them and thus can lead to better analysis and evolution of the features during design. In this paper we illustrate how an Aspect Oriented Modeling (AOM) technique can be used to model dependability aspects of component architectures separately from other aspects. The AOM architectural model used to illustrate the approach in this paper consists of a component primary view describing the base architecture and a component template aspect model\u00a0\u2026", "num_citations": "6\n", "authors": ["1502"]}
{"title": "Model-driven software adaptation\n", "abstract": " This first edition of the workshop Model-driven Software Adaptation (M-ADAPT\u201907) took place in the Technische Universit\u00e4t Berlin with the International Conference ECOOP\u201907 in the beautiful and buzzing city of Berlin, on the 30th of July, 2007. The workshop was organized by Gordon Blair, Nelly Bencomo, and Robert France. Participants explored how to develop appropriate model-driven approaches to model, analyze, and validate the volatile properties of the behaviour of adaptive systems and its environments. This report gives an overview of the presentations as well as an account of the fruitful discussions that took place at M-ADAPT\u201907.", "num_citations": "6\n", "authors": ["1502"]}
{"title": "UML for software engineers\n", "abstract": " This tutorial presents the modeling concepts of the standard object modeling language, the Unified Modeling Language (UML). Particular attention is paid to the use of the UML for modeling system/software requirements and designs. A system development process and an example of its application is presented. The materials will be based on the recently released UML 1.4 standard. The tutorial also presents some of the major issues and challenges facing the evolution of the UML.", "num_citations": "6\n", "authors": ["1502"]}
{"title": "Analyzing Behavioral Refactoring of Class Models.\n", "abstract": " Software modelers refactor their design models to improve design quality while preserving essential functional properties. Tools that allow modelers to check whether their refactorings preserve specified essential behaviors are needed to support rigorous model evolution. In this paper we describe a rigorous approach to analyzing design model refactorings that involve changes to operation specifications expressed in the Object Constraint Language (OCL). The analysis checks whether the refactored model preserves the essential behavior of changed operations in a source design model. A refactoring example involving the Abstract Factory design pattern is used in the paper to illustrate the approach.", "num_citations": "5\n", "authors": ["1502"]}
{"title": "Model-based development\n", "abstract": " Thomas Baar. In the first paper, Jules White, Douglas C. Schmidt, and Aniruddha Gokhale present a tool that graphically captures Enterprise Java Bean (EJB) application design, quality of service requirements, and autonomic properties. The paper also describes how tools can be used to generate code that simulates such systems for verification purposes. In the second paper, Slavisa Markovic and Thomas Baar present formalized refactoring rules for Object Constraint Language (OCL) constraints in UML impacted by refactoring of their associated class diagrams. The rules are presented as a graph-grammar inspired formalism, and they have also been implemented as Queries/Views/Transformations (QVT) transformation rules in a commercial tool. The problem of syntactic preservation is discussed and the KeY tool is used to show how this problem can be resolved.", "num_citations": "5\n", "authors": ["1502"]}
{"title": "Checking Policy Enforcement in an Access Control Aspect Model\n", "abstract": " From a software design perspective, access control policies are requirements that must be addressed in a design. For example, access control policies are constraints that determine the type of access authorized users have on information resources. In this paper, we show how one can formulate access control policies as a policy model, formulate an access control aspect model that enforces policies as an aspect, and verify whether the aspect model enforces the given policies or not. As an access control policy example, we use Role-Based Access Control (RBAC).", "num_citations": "5\n", "authors": ["1502"]}
{"title": "Second International Workshop on Models@ run. time\n", "abstract": " The second edition of the workshop Models@run.time was co-located with the ACM/IEEE 10th International Conference on Model Driven Engineering Languages and Systems. The workshop took place in the lively city of Nashville, USA, on the 2nd of October, 2007. The workshop was organised by Nelly Bencomo, Robert France, and Gordon Blair and was attended by at least 25 people from 7 countries. This summary gives an overview of the presentations and lively discussions that took place during the workshop.", "num_citations": "5\n", "authors": ["1502"]}
{"title": "Middleware Transparent Software Development & the MDA\n", "abstract": " A major source of complexity in distributed systems stem from the fact that the development and evolution of distributed systems are generally tightly coupled to continuously changing middleware technologies. This coupling is undesirable because changes in the middleware necessitates changes in the application with resulting constraints on the portability, interoperability, reusability, and evolvability of systems. The problem is made significant due to the proliferation of middleware technologies and the pervasiveness of distributed systems. The Model Driven Architecture (MDA) is an exciting initiative that advocates decoupling the design of an application from the integration of the target middleware. To support the MDA vision we have developed an aspect-oriented middleware transparent development framework [1, 2, 3, 4]. This paper motivates the framework components and their use in Jini distributed systems development.", "num_citations": "5\n", "authors": ["1502"]}
{"title": "Taming the Octopus: using formal models to integrate the Octopus object oriented analysis models\n", "abstract": " The object-oriented (OO) modeling techniques of the Octopus method provide good tools for managing the complexity which is inherent in reactive embedded systems. The lack of a precise semantics for the modeling notations used diminishes the role it can play in the development of critical reactive systems. In this paper, we describe an extension to the Octopus analysis techniques that provides support for precise specification and rigorous analysis. We use the formal notation Z to formally describe the concepts captured by Octopus analysis models.", "num_citations": "5\n", "authors": ["1502"]}
{"title": "Meta-modeling model-based engineering tools (Dagstuhl Seminar 13182)\n", "abstract": " Model-based engineering (MBE) is a software development approach in which abstraction via modeling is used as the primary mechanism for managing the complexity of software-based systems. An effective approach to software development must be supported by effective technologies (ie, languages, methods, processes, tools). The wide range of development tasks that effective MBE approaches must support leads to two possible tooling scenarios. In the first scenario a federated collection of tools is used to support system development. Each tool in the collection provides specialized services. Tool interoperability and consistency of information across the tools are major concerns in this scenario. These concerns are typically addressed using transformations and exposed tool interfaces. Defining and evolving the transformations and interfaces requires detailed low-level knowledge of the tools and thus leads to complex tooling environments that are difficult to configure, learn, use, and evolve. In the second scenario, a single tool is used to support the complete modeling lifecycle. This avoids the inter-tool transformation and consistency problems, but the resulting multi-featured tool is a monolithic entity that is costly to develop and evolve. Furthermore, the large number of non-trivial features can make learning and using such tools difficult. Successful uptake of MDE in industry requires supporting tools to be, at least, useful and usable. From a tool developer's perspective, there is also a need to significantly reduce the cost and effort required to develop and evolve complex MBE tools. This seminar brings together experts in the areas of MBE\u00a0\u2026", "num_citations": "4\n", "authors": ["1502"]}
{"title": "Supporting iterative development of robust operation contracts in UML requirements models\n", "abstract": " Developing adequate system operation contracts at the requirements level can be challenging. A specifier needs to ensure that a contract allows an operation to be invoked in different usage contexts without putting the system in an invalid state. Specifiers need usable rigorous analysis techniques that can help them develop more robust contracts, that is, contracts that are neither too restrictive nor too permissive. In this paper we describe an iterative approach to developing robust operation contracts. The approach supports rigorous robustness analysis of operation contracts against a set of scenarios that provide usage contexts for the operation. We illustrate the approach by developing a robust operation contract for a functional feature in a Location-aware Role-Based Access Control (LRBAC) model.", "num_citations": "4\n", "authors": ["1502"]}
{"title": "Formal parameterization of log synchronization events within a distributed forensic compute cloud database environment\n", "abstract": " Advances in virtual server internetworking and the Internet have been accompanied by increased incidences of computer related crimes for such domains. At the same time, the number of sources of potential evidence in any particular cloud computing forensic investigation has grown considerably, as evidence of the occurrence of relevant events can potentially be drawn not only from multiple computers, networks, and electronic systems but also from disparate personal, organizational, and governmental contexts. Potentially, this leads to significant improvements in forensic outcomes but is accompanied by an increase in complexity and scale of the event information, particularly since such information is treated as composite events. In order for digital investigators to effectively administer the virtual machine(VM) environments they need to have automated methods for correlating and synchronizing such\u00a0\u2026", "num_citations": "4\n", "authors": ["1502"]}
{"title": "JAL: Java like action language\n", "abstract": " The JAL (Java like Action Language) is an action language that supports the action semantics described in the UML 2.0 specification. The JAL can be used to specify actions within the context of a UML activity diagram. Furthermore, the JAL can be used to specify a sequence of actions performed by a class instance during the execution of an operation call.The JAL was designed so that (1) it is easy to learn for someone already familiars with Java, and (2) models expressed in the JAL are easy to transform into executable forms. The syntax of JAL is based on Java, a widely used programming language.", "num_citations": "4\n", "authors": ["1502"]}
{"title": "An aspect-based approach to modeling fault-tolerance concerns\n", "abstract": " In this paper we show how design-level aspects can be used to separate fault tolerance concerns from essential functional concerns during software design. The aspect-oriented design technique described in this paper allows one to independently specify fault tolerance and essential functional concerns, and then weave the specifications to produce a design model that reflects both concerns. We illustrate our technique using a small example.", "num_citations": "4\n", "authors": ["1502"]}
{"title": "What does the term semantics mean in the context of UML\n", "abstract": " What Does the Term Semantics Mean in the Context of UML | Proceedings of the Workshop on Object-Oriented Technology ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleProceedingsProceedings of the Workshop on Object-Oriented TechnologyWhat Does the Term Semantics Mean in the Context of UML Article What Does the Term Semantics Mean in the Context of UML Share on Authors: Bernhard Rumpe profile image Bernhard Rumpe View Profile , Stuart J Kent profile image Stuart Kent View Profile , Andy S Evans profile image Andy Evans View Profile , Robert B. France (Deceased) profile image Robert B. France View Profile \u2026", "num_citations": "4\n", "authors": ["1502"]}
{"title": "A predicative basis for structured analysis specification tools\n", "abstract": " A specification framework for supplementing Structured Analysis (SA) process and data specification tools with predicative specifications is described. The framework includes composition operators, which a specifier can use to build specifications of large structures from specifications of their substructures, and is supported by consistency notions which support internal consistency checks and semantic decomposition of process models.", "num_citations": "4\n", "authors": ["1502"]}
{"title": "Report on the First Workshop on the Globalization of Modeling Languages\n", "abstract": " The first edition of GEMOC workshop was co-located with the MODELS 2013 conference in Miami, FL, USA. The workshop provided an open forum for sharing experiences, problems and solutions related to the challenges of using of multiple modeling languages in the development of complex software based systems. During the workshop, concrete language composition artifacts, approaches, and mechanisms were presented and discussed, ideas and opinions exchanged, and constructive feedback provided to authors of accepted papers. A major objective was to encourage collaborations and to start building a community that focused on providing solutions that support what we refer to as the globalization of domain-specific modeling languages, that is, support coordinated use of multiple languages throughout the development of complex systems. This report summarizes the presentations and discussions that took place in the first GEMOC 2013 workshop.", "num_citations": "3\n", "authors": ["1502"]}
{"title": "Using models to dynamically refactor runtime code\n", "abstract": " Modern software systems that play critical roles in society's infrastructures are often required to change at runtime so that they can continuously provide essential services in the dynamic environments they operate in. Updating open, distributed software systems at runtime is very challenging. Using runtime models as an interface for updating software at runtime can help developers manage the complexity of updating software while it is executing. To support this idea, we developed the FiGA framework that permits developers to update running software through changes made to UML models of the running software. In this paper, we address the following question: can the UML models be used to express any type of code change a developer desires? Specifically, we report our experience on applying Fowler's code refactoring catalog through model refactoring in the FiGA framework. The goal of this work is to show\u00a0\u2026", "num_citations": "3\n", "authors": ["1502"]}
{"title": "Bridging the formal techniques and model-driven engineering divide\n", "abstract": " Model driven engineering (MDE) approaches attempt to reduce the accidental complexities associated with labor-intensive development of large, complex software systems, through the use of (1) models that describe complex systems at multiple levels of abstraction and from a variety of perspectives, and (2) automated support for transforming and analyzing models [5]. In the MDE vision of software development, models are the primary artifacts of development and developers rely on computer-based technologies to transform models to running systems. To a casual observer looking out from the formal methods (FM) community it may seem that MDE research is subsumed by research in the formal specification and verification area. A closer examination may suggest that this is not the case. The formal specification languages that have been developed in the FM community thus far use languages that allow developers to describe systems from a very small number of viewpoints. It is well known that the more expressive a modeling language is, the more intractable the problem of developing mechanical semantic analysis techniques becomes. It should therefore not be surprising then that formal specification languages restrict their viewpoints. In MDE, a model of a complex system consists of many views created using a wide variety of viewpoints. For example, the UML provides modelers with 13 diagram types, each can be used to richly describe a system from a different perspective. The differences in research scopes suggest that MDE provides a context in which formal specification and verification techniques can be applied. There is", "num_citations": "3\n", "authors": ["1502"]}
{"title": "3rd Workshop on Models@ run. time at MODELS 2008-Proceedings\n", "abstract": " This document contains the proceedings of the 3rd Workshop on Models@ run. time that was co-located with the ACM/IEEE 12th International Conference on Model Driven Engineering Languages and Systems (MODELS). The workshop took place in the beautiful city of Toulouse, France, on the 30th of October, 2008. The workshop was organized by Nelly Bencomo, Robert France, Gordon Blair, Freddy Mu\u0451oz, and C\u0449dric Jeanneret. From a total of 20 papers submitted 6 full papers, 6 short papers, and a 1 demo were accepted. This volume gathers together all the 6 full papers accepted at Models@ run. time 08.We would like to thank a number of people who contributed to this event, especially the members of the program committee who acted as anonymous reviewers and provided valuable feedback to the authors. We also thank to the authors of all submitted papers are thanked for helping us making this workshop possible.", "num_citations": "3\n", "authors": ["1502"]}
{"title": "In search of effective design abstractions\n", "abstract": " The perceived popularity of the modeling languages such as the UML may lead some to believe that there is wide-spread appreciation of the value of modeling in the software development industry. Informal polls in North American trade journals seem to indicate otherwise. Use of the UML seems to be limited to the use of use cases for requirements and class diagrams for graphically representing programs. The polls also seem to indicate that awareness of the Object Management Group\u2019s Model Driven Architecture (MDA) is not widespread. As MDA is currently the most widespread model-based development approach this strongly indicates that much needs to be done to convince practicing developers of the value of model-driven development approaches in general. But, we expect to see in 2004 a surge in modeling tools in particular those that claim to be \u201cMDA-Compliant\u201d. Tool support is essential to realizing\u00a0\u2026", "num_citations": "3\n", "authors": ["1502"]}
{"title": "UML2Z: An UML-Based Object-Oriented Modeling Tool for an Internet Integrated Formalization Process\n", "abstract": " UML2Z | Proceedings of the 6th International Conference on Object Oriented Information Systems ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleProceedingsOOIS '00UML2Z: An UML-Based Object-Oriented Modeling Tool for an Internet Integrated Formalization Process ARTICLE UML2Z: An UML-Based Object-Oriented Modeling Tool for an Internet Integrated Formalization Process Share on Authors: Emanuel Sylvester Grant profile image Emanuel Grant View Profile , Robert B. France (Deceased) profile image Robert B. France View Profile , Ramchander Varadarajan profile image Ramchander Varadarajan View Profile , Adam \u2026", "num_citations": "3\n", "authors": ["1502"]}
{"title": "An industrial application of an integrated UML and SDL modeling technique\n", "abstract": " The use of rigorous software development techniques provides opportunities for the early detection of defects in software requirements and design. Early detection and correction of defects can, in turn, reduce the time spent on implementing defective software models. A number of rigorous techniques that target specific development phases exist. Industrial use of these techniques requires the development of appropriate integration strategies that result in cohesive sets of techniques that effectively cover the software development process. In this paper we present some of the experiences we gained in developing and applying an integrated requirements and design modeling approach.", "num_citations": "3\n", "authors": ["1502"]}
{"title": "A real-time specification environment based on Z and graphical object-oriented modeling techniques\n", "abstract": " The critical and complex nature of most real-time systems necessitates the use of rigorous techniques in their development. Formal specification techniques (FSTs) offer a foundation for rigorous design of complex systems. Though developers are aware of the benefits FSTs can bring to the software development effort, they often cite the difficulty of applying the techniques to their problems as a reason for not using them. We describe a Z-based specification environment that we are developing. The goal of the environment is to facilitate the application of FSTs to industrial-strength real-time system development. The environment is based on an integrated Z specification technique and a graphical object-oriented design technique.", "num_citations": "3\n", "authors": ["1502"]}
{"title": "Modeling big smart data\n", "abstract": " Large volumes of data are generated continuously by billions of human data producers, sensors, surveillance systems, communication devices and networks (eg, the Internet). Proper analysis of this data can lead to new scientific insights, new products and services, more creative outputs (eg, new recipes, music scores, fashion styles), improved performance of business and civic organizations, and to better informed government and non-government organizations. In other words, deriving information from these large volumes of data can lead to, among other things, smarter individuals capable of making scientific breakthroughs, producing innovative products, and making effective decisions. Data can be well structured or not. We have observed that the term \u201csemistructured\u201d data is also used in cases where the structure of the data is not yet known or is overly complex (eg, the structure of natural language). One of\u00a0\u2026", "num_citations": "2\n", "authors": ["1502"]}
{"title": "Analysing Requirements to Detect Latent Security Vulnerabilities\n", "abstract": " To fully embrace the challenge of securing software, security concerns must be considered at the earliest stages of software development. Studies have shown that this reduces the time, cost and effort required to integrate security features into software during development. In this paper we describe a loophole analysis technique for uncovering potential vulnerabilities in software requirements specifications and describe its use using an example.", "num_citations": "2\n", "authors": ["1502"]}
{"title": "Model-based lifecycle management of software-intensive systems, applications, and services\n", "abstract": " The lifecycle of a successful system is the time period that covers all activities associated with developing, configuring, deploying, operating, and retiring the system. Variations in system lifecycles can be expected, for example, differences may arise as a result of the inclusion of physical parts in the system and the number of installations. In addition, software retirement activities may extend over a long period of time, for example, in cases where access to data provided by a system may be required long after the system is terminated. Lifecycle management has a lot to do with managing the available information about a system. A significant amount of this information can typically be found in the models produced during various development. Software models can thus play a vital role in system lifecycle management. For example, requirement models can be used to support management of requirements, feature\u00a0\u2026", "num_citations": "2\n", "authors": ["1502"]}
{"title": "Computer Science Curricula 2013 (CS2013)\n", "abstract": " Computer Science Curricula 2013(CS2013) - Kent Academic Repository Skip to main content kent-logo Logo Login Admin Dashboards Accessibility Statement Help Simple search | Advanced search Home Browse Latest additions Policies Computer Science Curricula 2013(CS2013) Sahami, Mehran and Roach, Steve and Cuadros-Vargas, Ernesto and Danyluk, Andrea and Dodge, Ronald and Fisher, Kathleen and Fincher, Sally and France, Robert and Grossman, Dan and Hawthorne, Beth and Katz, Randy and Kumar, Amruth and LeBlanc, Rich and Reed, Dave and Robinson, Brian H. and Seker, Remzi and Thompson, Alfred (2013) Computer Science Curricula 2013(CS2013). Technical report. ACM Press and IEEE Computer Society Press, New York 10.1145/2534860. (doi:10.1145/2534860) (The full text of this publication is not currently available from this repository. You may be able to access a copy if URLs \u2026", "num_citations": "2\n", "authors": ["1502"]}
{"title": "Modeling to improve quality or efficiency? An automotive domain perspective\n", "abstract": " What added-value does modeling bring to the development process? An often stated value is the productivity improvement gained by using models to automatically generate code. Model-to-code generators provide automated support for bridging abstraction gaps, and thus relieve developers from routine, often tedious, decision-making and implementation activities. Developers using model-driven software development techniques should be able to deliver working software at a faster rate, and thus reduce time-to-market. Model-to-code generation is particularly valuable when it supports synchronized evolution of generated code and models, as opposed to \u201cone-shot generation\u201d in which generated code that has been modified cannot be re-generated from models because the models do not reflect the changes made to the generated code. Maintaining fidelity between abstract models and the more detailed code\u00a0\u2026", "num_citations": "2\n", "authors": ["1502"]}
{"title": "Why Johnny can\u2019t model\n", "abstract": " I recently taught an undergraduate C++ course for second year undergraduate students. Teaching this course provided me with some insight into why some students have difficulty grasping the abstraction and modeling concepts introduced in the advanced software development courses we offer to third and fourth year students. While grading their programming assignments it became evident that students were not thinking of their solutions in an object-oriented (OO) manner. The students were becoming skilled at stringing together C++ statements to produce working programs, but they were having problems thinking about solutions in terms of collaborating objects. Many students used objects more as passive maintainers of data rather than as active participants in a collaborative effort to accomplish functional goals. For example, classes with references to other classes were rare; many classes had only basic get and set methods, and had attributes that uniquely identified objects. What was surprising was the extensive use of globally declared data structures in some of the programs. If students do not understand how to effectively use OOP concepts to solve problems then it is not surprising that they have problems building good models of OO solutions. Their underdeveloped OOP skills make it difficult for them to distinguish good and bad OO abstractions. The link between modeling and programming skills should not be undervalued. A good modeler should also be a skilled programmer. A great modeler is invariably an expert programmer. On the other hand, good programmers are not necessarily good modelers. Highly-skilled programmers\u00a0\u2026", "num_citations": "2\n", "authors": ["1502"]}
{"title": "Fair treatment of evaluations in reviews\n", "abstract": " As scientists, we understand and appreciate the value of evaluating the results of our research effort. As software engineers, we are painfully aware of the difficult challenges we must address when attempting to rigorously evaluate the methods, techniques, tools, languages, and other artifacts that we produce. The pressing problems that we tackle in the software and system modeling research domain can be classified as \u201cwicked problems\u201d: we learn more about the nature of the problems we tackle through experimentation with proposed solutions. Rigorous evaluation of these solutions invariably entails costly and lengthy experimentation in industrial contexts. Experiments that seek to evaluate solutions based on novel or radically different ideas are particularly difficult to sell to potential industrial partners because the risks are not well-understood by all involved. Even with committed industrial partners, the wide variations in industrial development environments makes it difficult (if not foolhardy) to extrapolate the results beyond the specific industries. Despite the difficulties, there is no getting away from the reality that evaluation is key to developing progressively better solutions to wicked problems. As researchers, we must evaluate the products of our research. The responsibilities of manuscript authors with respect to the evaluation content are not the focus of this editorial; there are many published high quality articles on this topic. Rather, this editorial focuses on the responsibilities of reviewers when it comes to commenting on the evaluation content of submitted journal papers. Many of us have seen or written manuscript reviews in which the lack\u00a0\u2026", "num_citations": "2\n", "authors": ["1502"]}
{"title": "EPTUD: an eclipse plugin for testing UML designs\n", "abstract": " For model driven development approaches to succeed, there is a need for developing techniques for validating models. Studies show that many software faults occur in the design phase. Hence, it is essential to find and remove faults in design models. Currently, UML design models are typically evaluated using walkthroughs, inspections, and other informal types of design review techniques that are largely manual and consequently, tedious, error-prone and less effective.", "num_citations": "2\n", "authors": ["1502"]}
{"title": "Assessing model quality\n", "abstract": " Editorial Assessing model quality Page 1 Softw Syst Model (2004) 3: 179\u2013180 / Digital Object Identifier (DOI) 10.1007/s10270-004-0068-8 Editorial Assessing model quality Robert France, Bernhard Rumpe Published online: 13 August 2004 \u2013 \u00a9 Springer-Verlag 2004 Students in software engineering courses that cover modeling often ask some variant of the following question: \u201cHow do I know that my model is a good model?\u201d. It is not easy to provide a satisfactory response to this question. Good instructors provide students with some criteria and guidelines in the form of patterns (eg, Craig Larman\u2019s GRASP patterns), rules of thumb (eg, \u201cminimize coupling, maximize cohesion\u201d, \u201ckeep inheritance depth shallow\u201d), and exemplar models to better understand good modeling practices. While these help, the reality is that students ultimately rely on feedback from their instructors to determine the quality of their models. The \u2026", "num_citations": "2\n", "authors": ["1502"]}
{"title": "Model-driven approaches to software development\n", "abstract": " \u201cExtreme Programming\u201d, \u201cAgile Modeling\u201d, \u201cModel-driven software development\u201d, \u201cModel-driven architectures\u201d, \u201cAgile Development\u201d, \u201cOMG\u2019s MDA\u201d. These catch-phrases are currently the topic of much discussion in the software development world.", "num_citations": "2\n", "authors": ["1502"]}
{"title": "RIGR-a repository model based approach to management\n", "abstract": " Organizations with large integrated computer-based systems are often faced with the challenge of evolving their mission-critical systems in a manner that maximizes reuse opportunities, minimizes redundancies, and addresses business goals. To support these goals system developers must be provided with tools that allow them effectively assess the impact of change across the systems (impact analyses), identify reuse opportunities (reuse analyses), identify gaps in existing system functionalities (gap analyses), and identify redundancies (redundancy analyses). In this paper we discuss some of the issues related to implementing a model-based repository capable of supporting Redundancy, Impact, Gap, and Reuse (RIGR) analyses.", "num_citations": "2\n", "authors": ["1502"]}
{"title": "A UML pro le for rigorous requirements modeling\n", "abstract": " A pro le is a mechanism that allows one to specialize the syntax and semantics of the Uni ed Modeling Language (UML) to a particular usage. In this paper we outline a pro le that de nes a specialization of the UML that supports precise modeling and rigorous analysis of software requirements.", "num_citations": "2\n", "authors": ["1502"]}
{"title": "Using Integrated Formal and Informal Modeling Techniques To Analyze Software Requirements: A Petri-Net/SART Case Study\n", "abstract": " Many well-known graphical modeling techniques, for example, the Structured Analysis/Real Time (SA/RT) method developed by Hatley and Pirbhai, provide mechanisms that allow one to 1) abstract over details best left to later stages of development, 2) model an application along di erent views, and 3) modularize problems and solutions. It has also been stated that the (apparently) simple and graphical nature of the modeling constructs facilitates the creation of concise and understandable models. Our experiences indicate that the lack of rm semantic foundations for the modeling notations used in these methods can make understanding more apparent than real. In particular, the lack of adequate semantic foundations makes rigorous analysis of semantic properties captured by the models di cult. In this paper we illustrate how formal speci cation techniques can be used to rigorously analyze models created by informal structured methods through a case study. In the case study, a Hatley/Pirbhai SA/RT model of an application is analyzed by generating, modifying, and exercising an extended Petri-Net model of the SA/RT model. The Petri-Net model can be viewed as a prototype of the behavior captured in the informal model, and is used primarily to dynamically validate the requirements expressed in the SA/RT model. The generation of a rst-cut extended Petri-Net model from a SA/RT model is supported by a set of transformation rules, and can be automated. Exercising the Petri-Net revealed problems with the informal SA/RT model related to incomplete, ambiguous, and inconsistent requirements.", "num_citations": "2\n", "authors": ["1502"]}
{"title": "A Z-based approach to specifying and analyzing complex systems\n", "abstract": " The difficult task of developing safety-critical systems requires the use of methods and tools that allow developers to manage inherent complexity and to meticulously specify, implement, and analyze desired behavior. Development environments based on formal specification techniques supported by CASE tools can facilitate quality development of such systems. We present our proposed environment for the development of high-assurance systems. The environment provides CASE support for developing and analyzing graphical and formal representations of system structure and behavior. We illustrate the use of the environment with a traffic control system.", "num_citations": "2\n", "authors": ["1502"]}
{"title": "Towards the use of slicing techniques for an efficient invariant checking\n", "abstract": " In Model Driven Development (MDD), invariant checking involves determining whether a model is consistent with invariants defined in a metamodel. Such checking can improve developers' understanding of modeled aspects of complex systems and uncover structural errors in design models during the early stages of software development. General-purpose rigorous analysis tools that check invariants are likely to perform the analysis over the entire metamodel and model. Their scalability thus becomes an issue (eg, the time used for checking can be up to several hours) with very large metamodels and models (eg, more than 500,000 elements). In this paper we introduce model slicing within the invariant checking process, and use a slicing technique to reduce the size of checking inputs to improve the scalability of existing invariant checking tools. The evaluation we performed provides evidence that model slicing\u00a0\u2026", "num_citations": "1\n", "authors": ["1502"]}
{"title": "The 2013 \u201cState of the Journal\u201d report\n", "abstract": " \u2022 As the backlog became too large, we do two things: SoSyM permanently increases the number of papers per issue from 192 to 224 pages (+ 32 pages) and we almost double (!) the number of pages for 2014 to 448 pages (issue 1 and 2) and 304 pages (issue 3 and 4).\u2022 Impact factor SCI: 1.250 (previous: 1,061). This is an increase of 17.8%.", "num_citations": "1\n", "authors": ["1502"]}
{"title": "Data warehouse concepts for model artifacts?\n", "abstract": " Manufacturing industries, in particular avionics and automotive industries, that have embraced model-driven system development approaches, are faced with the challenge of getting development tools that address different, but related aspects of the development process to interoperate. This challenge led to increased interest in and work on tool-integration approaches that enable the creation of \u201ctool chains\u201d. These approaches are based on the assumption that it is best to use tools that are specialized for specific purposes. An appropriate way to integrate the tools is to provide facilities for transferring the outputs of one tool to another specialized tool. This typically requires transformation of data produced from one tool to a format suitable for input to other tools. As an example, the development of software for a cyberphysical system (CPS) based on a communication bus (eg, software found in cars) is based on a dominant bus architecture. We have seen in current development approaches any piece of data (signal) flowing between control devices that are connected with a bus needs a unique name (identifier). This enforces that signals be maintained in a centralized catalog to help ensure qualities such as consistency and completeness, even though they never flow on the same bus and do not interfere at all in the CPS and ruins flexible adaption of the CPS.", "num_citations": "1\n", "authors": ["1502"]}
{"title": "On the relationship between modeling and programming languages\n", "abstract": " 1. Do you agree with the implied assumption in the panel abstract that \u201ccode\u201d is different to \u201cmodels, at least in the minds of practicing software engineers? 2. If so, do you agree with the premise that code is still the primary artifact, or at least still an important artifact, in software engineering?", "num_citations": "1\n", "authors": ["1502"]}
{"title": "Supporting community-driven evolution of model-driven development knowledge using remodd\n", "abstract": " Summary form only given. Research on model-driven development (MDD) tackles the problem of developing complex, critical software systems by providing support for systematically transforming abstract models of software systems to dependable implementations. A problem that significantly impedes MDD research productivity and hampers efforts to effectively teach MDD concepts is the lack of accessible models and other artifacts produced in MDD projects. MDD researchers exert significant effort developing convincing exemplar models, transformations, and other artifacts that are used to validate or demonstrate the capabilities of their research products. Educators also spend significant time developing suitable MDD artifacts for use in the classroom. The Repository for Model Driven Development (ReMoDD) is a National Science Foundation funded project that aims to develop and maintain a repository\u00a0\u2026", "num_citations": "1\n", "authors": ["1502"]}
{"title": "Essentials of the 5th Educators\u2019 Symposium at MODELS 2009\n", "abstract": " This paper reports on the Educators\u2019 Symposium held at the MODELS 2009 conference. It shortly explains motivation of the symposium, shows the accepted papers of the symposium and mentions the people who have contributed.", "num_citations": "1\n", "authors": ["1502"]}
{"title": "Third International Workshop on Models@ run. time\n", "abstract": " The third edition of the workshop Models@run.time was held at the ACM/IEEE 11th International Conference on Model Driven Engineering Languages and Systems (MODELS). The workshop took place in the beautiful city of Toulouse, France, on the 30th of October, 2008. The workshop was organised by Nelly Bencomo, Robert France, Gordon Blair, Freddy Mu\u00f1oz, and C\u00e9dric Jeanneret. It was attended by at least 44 people from more than 10 countries. In this summary we present an overview of the presentations and fruitful discussions that took place during the 3rd edition of the workshop Models@run.time.", "num_citations": "1\n", "authors": ["1502"]}
{"title": "Critical Systems Development Using Modeling Languages\u2013CSDUML 2006 Workshop Report\n", "abstract": " The CSDUML 2006 workshop is a continuation of the series regarding development of critical systems using modeling languages. The report summarizes papers presented and discussion at the workshop.", "num_citations": "1\n", "authors": ["1502"]}
{"title": "Modeling the complex living world\n", "abstract": " In the software development domain, models of software systems are typically used to understand and predict properties of the system or to produce implementations. A model is normally created before the software system is implemented and, in many cases, acts as a specification of behavioral and structural properties that must be present in implemented systems. In theory, implementations can be generated from formal models in a manner that ensures their correctness with respect to the models.In other non-engineering disciplines, models are used differently. For example, physicists use models primarily to understand and explain phenomena that occur in the world around them. They build models that are consistent with their observations of the phenomena, and they test the models to determine their fidelity and the circumstances under which the models make accurate predictions. Unlike software models\u00a0\u2026", "num_citations": "1\n", "authors": ["1502"]}
{"title": "UML2Z: An UML-Based Modeling Tool for an Internet Integrated Formalization Process\n", "abstract": " An approach to making informal OO models semantics precise and thus amenable to rigorous analysis is by integrating them with a suitable formal notation. Such work has been carried out in the development of a CASE tool (FuZE) for formalizing UML class diagrams. Two major drawbacks with the current approach are that it is CASE tool specific, and the models developed are not portable across multiple hardware and software platforms. In this paper we propose an UML XMI interchange tool (UML2Z) for transforming UML class diagrams to the Z notation. With this approach the integration process, will be CASE tool and platform independent. This makes it available to a larger sphere of usage in terms of available CASE tools, and diverse development teams.", "num_citations": "1\n", "authors": ["1502"]}
{"title": "A core language and simple formal denotational semantics for VHDL-AMS\n", "abstract": " This paper sets out a simple denotational semantics for the core of the draft IEEE standard analog and mixed signal design language VHDL-AMS (an extension of the IEEE digital design language VHDL [9]). VHDL-AMS mixes computational scheduling and real time simulation; a mixture that is intractible because of (1) the very different underlying semantic domains,(2) the inherent complexities of a language written by committee for real world use. Our semantic model reconciles these issues and allows general theory about the behaviour of VHDL-AMS programs to be developed from it. This paper includes, for example, a demonstration that VHDL-AMS parallelism is benign in the absence of shared quantity initializations. As proof of concept we have built an interpreted simulator that prototypes the semantics set out here and which runs multi-process mixed analog and digital descriptions of some dozens of lines correctly.", "num_citations": "1\n", "authors": ["1502"]}
{"title": "Incorporating a Formal Design Technique into an Industrial Environment: An Experience Report\n", "abstract": " Formal Specification Techniques (FSTs) are mathematically-based techniques that can be used by system designers to specify the desired behavior of a computer-based system and its structural properties. It has been hypothesized that the use of FSTs in software design has two primary advantages:(1) the act of formalizing design concepts provides the designer with insights that can lead to a deeper understanding of solutions and can uncover faults in designs, and (2) rigorous analysis of the design can reveal errors not easily captured in reviews of informal models. This paper describes a technology transfer pilot project that was initiated to test this hypothesis in an industrial, rather than academic, environment.", "num_citations": "1\n", "authors": ["1502"]}
{"title": "Applying fusion/UML to the invoice problem\n", "abstract": " In this paper, we use the Fusion Object-Oriented (OO) analysis method to create graphical OO models of the Invoicing Case Study proposed by Henri Habrias. The OO models are expressed in the Unied Modeling Language (UML). The UML models we produced were analyzed by transforming them to Z speci cations.", "num_citations": "1\n", "authors": ["1502"]}
{"title": "Towards a Formal Semantic Base for the Type Models of the Unified Modeling Language\n", "abstract": " In order to rigorously analyze the structure and behavior of object-oriented (00) models, a firm semantic base needs to be developed for the 00 concepts. The Unified Modeling Language (UML) is fast becoming the de facto 00 modeling language, thus it is important that it have a formally defined semantic base. In this paper we discuss some early results of our efforts to formalize the UML using the Z formal notation. This paper illustrates the application of our recently developed rules to non-n-trivial UML type structures. The non-trivial type structures considered include combinations of generalization, aggregation, and recursive structures.", "num_citations": "1\n", "authors": ["1502"]}
{"title": "Formalizing fusion object-oriented analysis models\n", "abstract": " Most popular object-oriented analysis (OOA) methods provide good support for creating abstract, understandable models of system behavior and structure. The lack of firm semantic bases for most of these methods makes it difficult to rigorously reason about modeled behavior, and also makes it difficult to check the compliance of implementations (design and programs) against them. In this paper* we formalize the Fusion object-oriented analysis modeling techniques to make the models produced more amenable to formal analysis. We illustrate the formalization process by presenting some of the results of a case study carried out as part of our experimentations on formalized Fusion models.", "num_citations": "1\n", "authors": ["1502"]}
{"title": "Real-time and safety critical systems specification: A Z-based specification environment\n", "abstract": " A real-time system is a system which must produce its outputs within specified time intervals. Generally, the failure of such systems has catastrophic consequences. The critical nature of such systems suggests the use of formal specification techniques (FSTs) in their development. In developing industrial-strength FSTs it is imperative that they enhance and/or strengthen good industrial habits and practice. FSTs that utilize notations and concepts that are not familiar to system developers would invariably lead to mistakes. In this paper the authors present an environment for developing formal system models in a manner consistent with good industrial practices.", "num_citations": "1\n", "authors": ["1502"]}
{"title": "Towards CASE tool support for rigorous structured analysis\n", "abstract": " Despite their potential, formal specification techniques (FSTs) are rarely used in industry. This may be due to the perceived gap between the specification methods currently used in industry and the proposed FSTs. In this paper we describe our work on the development of a CASE tool, called Eclectic, that seeks to reduce the gap between formal and non-formal structured methods by integrating them in a complementary manner.< >", "num_citations": "1\n", "authors": ["1502"]}