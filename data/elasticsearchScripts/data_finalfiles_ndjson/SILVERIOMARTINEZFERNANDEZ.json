{"title": "A Survey on the Benefits and Drawbacks of AUTOSAR\n", "abstract": " The use of software reference architectures plays a fundamental role in software development, as it could bring several benefits such as providing means to design applications' software architectures with higher productivity and quality. However, many organizations still find scarce the existing empirical evidence about the benefits and drawbacks of software reference architectures. Organizations need such evidence to make informed decisions whether or not to adopt a software reference architecture for the development and maintenance of software applications. In this context, this paper aims to gather evidence on AUTOSAR, a mature and accepted software reference architecture for automotive applications used worldwide by more than 180 organizations. We designed and executed a web-based survey addressed to practitioners with experience in using AUTOSAR. We obtained 51 valid responses. The survey\u00a0\u2026", "num_citations": "32\n", "authors": ["247"]}
{"title": "Benefits and drawbacks of reference architectures\n", "abstract": " Reference architectures (RA) have been studied to create a consistent notion of what constitutes them as well as their benefits and drawbacks. However, few empirical studies have been conducted to provide evidence that support the claims made. To increase this evidence, this paper investigates the actual industrial practice of using RAs. The study consists of a survey with 28 stakeholders from everis, a multinational consulting company based in Spain. We report the findings and contextualize them with previous research.", "num_citations": "31\n", "authors": ["247"]}
{"title": "A quality model for actionable analytics in rapid software development\n", "abstract": " Background: Accessing relevant data on the product, process, and usage perspectives of software as well as integrating and analyzing such data is crucial for getting reliable and timely actionable insights aimed at continuously managing software quality in Rapid Software Development (RSD). In this context, several software analytics tools have been developed in recent years. However, there is a lack of explainable software analytics that software practitioners trust. Aims: We aimed at creating a quality model (called Q-Rapids quality model) for actionable analytics in RSD, implementing it, and evaluating its understandability and relevance. Method: We performed workshops at four companies in order to determine relevant metrics as well as product and process factors. We also elicited how these metrics and factors are used and interpreted by practitioners when making decisions in RSD. We specified the Q\u00a0\u2026", "num_citations": "29\n", "authors": ["247"]}
{"title": "Continuously assessing and improving software quality with software analytics tools: a case study\n", "abstract": " In the last decade, modern data analytics technologies have enabled the creation of software analytics tools offering real-time visualization of various aspects related to software development and usage. These tools seem to be particularly attractive for companies doing agile software development. However, the information provided by the available tools is neither aggregated nor connected to higher quality goals. At the same time, assessing and improving the software quality has also been the key targets for the software engineering community, yielding several proposals for standards and software quality models. Integrating such quality models into software analytics tools could close the gap by providing the connection to higher quality goals. This paper aims at understanding whether the integration of quality models into software analytics tools provides understandable, reliable, useful, and relevant information\u00a0\u2026", "num_citations": "28\n", "authors": ["247"]}
{"title": "Data-driven requirements engineering in agile projects: the Q-rapids approach\n", "abstract": " Requirements identification, specification and management are key activities in the software development process. In the last years, many approaches to these activities have emerged, based on the exploitation of huge amounts of data gathered from software repositories and system usage. The Q-Rapids project proposes the collection and analysis of such data and its consolidation into a set of strategic indicators as product quality, time to market and team productivity. These indicators are visualized through a dashboard designed to support decision-makers. In this paper, we present the ongoing research undertaken in this project. We use the concept of blocking situation to exemplify the Q-Rapids approach.", "num_citations": "26\n", "authors": ["247"]}
{"title": "Q-rapids tool prototype: Supporting decision-makers in managing quality in rapid software development\n", "abstract": " Software quality is an essential competitive factor for the success of software companies today. Increasing the software quality levels of software products and services requires an adequate integration of quality requirements (QRs) in the software life-cycle, which is still scarcely supported in current rapid software development (RSD) approaches. One of the goals of the Q-Rapids (Quality-aware Rapid Software Development) method is providing tool support to decision-makers for QR management in RSD. The Q-Rapids method is based on gathering data from several and heterogeneous sources, to be aggregated into quality-related strategic indicators (e.g., customer satisfaction, product quality) and presented to decision-makers using a highly informative dashboard. The current release of Q-Rapids Tool provides four sets of functionality: (1) data gathering from source tools (e.g. GitLab, Jira, SonarQube, and\u00a0\u2026", "num_citations": "25\n", "authors": ["247"]}
{"title": "REARM: A Reuse-Based Economic Model for Software Reference Architectures\n", "abstract": " To remain competitive, organizations are challenged to make informed and feasible value-driven design decisions in order to ensure the quality of their software systems. However, there is a lack of support for evaluating the economic impact of these decisions with regard to software reference architectures. This damages the communication among architects and management, which can result in poor decisions. This paper aims at ameliorating this problem by presenting a pragmatic preliminary economic model to perform cost-benefit analysis on the adoption of software reference architectures as a key asset for optimizing architectural decision-making. The model is based on existing value-based metrics and economics-driven models used in other areas. A preliminary validation based on a retrospective study showed the ability of the model to support a cost-benefit analysis presented to the management of\u00a0\u2026", "num_citations": "25\n", "authors": ["247"]}
{"title": "Management of quality requirements in agile and rapid software development: A systematic mapping study\n", "abstract": " ContextQuality requirements (QRs) describe the desired quality of software, and they play an important role in the success of software projects. In agile software development (ASD), QRs are often ill-defined and not well addressed due to the focus on quickly delivering functionality. Rapid software development (RSD) approaches (e.g., continuous delivery and continuous deployment), which shorten delivery times, are more prone to neglect QRs. Despite the significance of QRs in both ASD and RSD, there is limited synthesized knowledge on their management in those approaches.ObjectiveThis study aims to synthesize state-of-the-art knowledge about QR management in ASD and RSD, focusing on three aspects: bibliometric, strategies, and challenges.Research methodUsing a systematic mapping study with a snowballing search strategy, we identified and structured the literature on QR management in ASD and\u00a0\u2026", "num_citations": "23\n", "authors": ["247"]}
{"title": "A framework for software reference architecture analysis and review\n", "abstract": " Tight time-to-market needs pushes software companies and IT consulting firms to continuously look for techniques to improve their IT services in general, and the design of software architectures in particular. The use of soft-ware reference architectures allows IT consulting firms reusing architectural knowledge and components in a systematic way. In return, IT consulting firms face the need to analyze the return on investment in software reference architectures for organizations, and to review these reference architectures in order to ensure their quality and incremental improvement. Little support exists to help IT consulting firms to face these challenges. In this paper we present an empirical framework aimed to support the analysis and review of software reference architectures and their use in IT projects by harvesting relevant evidence from the wide spectrum of involved stakeholders.", "num_citations": "22\n", "authors": ["247"]}
{"title": "Data-driven elicitation, assessment and documentation of quality requirements in agile software development\n", "abstract": " Quality Requirements (QRs) are difficult to manage in agile software development. Given the pressure to deploy fast, quality concerns are often sacrificed for the sake of richer functionality. Besides, artefacts as user stories are not particularly well-suited for representing QRs. In this exploratory paper, we envisage a data-driven method, called Q-Rapids, to QR elicitation, assessment and documentation in agile software development. Q-Rapids proposes: (1) The collection and analysis of design and runtime data in order to raise quality alerts; (2) The suggestion of candidate QRs to address these alerts; (3) A strategic analysis of the impact of such requirements by visualizing their effect on a set of indicators rendered in a dashboard; (4) The documentation of the requirements (if finally accepted) in the backlog. The approach is illustrated with scenarios evaluated through a questionnaire by experts from a\u00a0\u2026", "num_citations": "19\n", "authors": ["247"]}
{"title": "Benefits and drawbacks of software reference architectures: A case study\n", "abstract": " ContextSoftware Reference Architectures (SRAs) play a fundamental role for organizations whose business greatly depends on the efficient development and maintenance of complex software applications. However, little is known about the real value and risks associated with SRAs in industrial practice.ObjectiveTo investigate the current industrial practice of SRAs in a single company from the perspective of different stakeholders.MethodAn exploratory case study that investigates the benefits and drawbacks perceived by relevant stakeholders in nine SRAs designed by a multinational software consulting company.ResultsThe study shows the perceptions of different stakeholders regarding the benefits and drawbacks of SRAs (e.g., both SRA designers and users agree that they benefit from reduced development costs; on the contrary, only application builders strongly highlighted the extra learning curve as a\u00a0\u2026", "num_citations": "14\n", "authors": ["247"]}
{"title": "Practical Experiences in Designing and Conducting Empirical Studies in Industry-Academia Collaboration\n", "abstract": " More and more, software engineering researchers are motivated to solve real problems that bring value to industry. An example is the industry-academia collaboration described in this paper among everis, an IT consulting firm, and the GESSI research group at UPC. The goal of this paper is twofold: to evaluate the success of the collaboration, and to report the experience with conducting empirical studies in the industry and lessons learnt. We evaluated our collaboration with an existing model for technology transfer, and performed a focus group discussion to identify challenges we have faced. After initialization and alignment of the collaboration, a high maturity level has been achieved: we have obtained the first results in form of proposed solutions, scientific publications, and pilots run in real projects. In spite of this positive progress, further initiatives need to be undertaken in the last phases of the collaboration to\u00a0\u2026", "num_citations": "14\n", "authors": ["247"]}
{"title": "Artifacts of Software Reference Architectures: A Case Study\n", "abstract": " Context: Software reference architectures (SRA) have emerged as an approach to systematically reuse architectural knowledge and software elements in the development of software systems. Over the last years, research has been conducted to uncover the artifacts that SRAs provide in order to build software systems. However, empirical studies have not focused on providing industrial evidence about such artifacts. Aim: This paper investigates which artifacts constitute an SRA, how SRAs are designed, the potential reuse of SRA's artifacts, and how they are used in practice. Method: The study consists of a case study made in collaboration with a multinational consulting company that designs SRAs for diverse client organizations. A total of nine European client organizations that use an SRA participated in the study. We analyzed available documentation and contacted 28 practitioners. Results: In the nine analyzed\u00a0\u2026", "num_citations": "14\n", "authors": ["247"]}
{"title": "A reuse-based economic model for software reference architectures\n", "abstract": " The growing size and complexity of software systems, together with critical time-to-market needs, demand new software engineering approaches for software development. To remain competitive, organizations are challenged to make informed and feasible value-driven design decisions in order to ensure the quality of the systems. However, there is a lack of support for evaluating the economic impact of these decisions with regard to software reference architectures. This damages the communication among architects and management, which can result in poor decisions. This paper aims at opening a path in this direction by presenting a pragmatic preliminary economic model to perform cost-benefit analysis on the adoption of software reference architectures as key asset for optimizing architectural decision-making. A preliminary validation based on a retrospective study showed the ability of the model to support a cost-benefit analysis presented to the management of an IT consulting company.", "num_citations": "13\n", "authors": ["247"]}
{"title": "Success factors for effective process metrics operationalization in agile software development: a multiple case study\n", "abstract": " Existing literature proposes success factors for establishing metrics programs. However, very few studies focus on factors that could ensure long-term use of metrics, and even fewer studies investigate such factors in the context of Agile Software Development (ASD). Motivated by this knowledge gap, we aim to identify success factors for operationalizing metrics in ASD, particularly, factors that could help in the long-term use of metrics. We conducted a multiple case study, where we operationalized process metrics at two software-intensive companies using ASD. We learned that data availability and development process are the two fundamental success factors for process metrics operationalization, albeit less prominent in literature. Companies prefer iterative and incremental operationalization of stable and functional process metrics, which is analogous to the agile way of working. Metrics trustworthiness plays a\u00a0\u2026", "num_citations": "12\n", "authors": ["247"]}
{"title": "Data-driven and tool-supported elicitation of quality requirements in agile companies\n", "abstract": " Quality requirements (QRs) are a key artifact needed to ensure the quality and success of a software system. Despite their importance, QRs rarely get the same degree of attention as their functional counterpart in agile software development (ASD) projects. Moreover, crucial information that can be obtained from software development repositories (e.g., JIRA, GitHub) is not fully exploited, or is even neglected, in QR elicitation activities. In this work, we present a data-driven tooled approach for the semi-automatic generation and documentation of QRs in the context of ASD. The approach is based on the declaration of thresholds over quality-related issues, whose violation triggers user-defined alerts. These alerts are used to browse a catalog of QR patterns that are presented to the ASD team by means of a dashboard that implements several analysis techniques. Once selected, the patterns generate the QRs\u00a0\u2026", "num_citations": "11\n", "authors": ["247"]}
{"title": "Measuring and improving agile processes in a small-size software development company\n", "abstract": " Context: Agile software development has become commonplace in software development companies due to the numerous benefits it provides. However, conducting Agile projects is demanding in Small and Medium Enterprises (SMEs), because projects start and end quickly, but still have to fulfil customers' quality requirements. Objective: This paper aims at reporting a practical experience on the use of metrics related to the software development process as a means supporting SMEs in the development of software following an Agile methodology. Method: We followed Action-Research principles in a Polish small-size software development company. We developed and executed a study protocol suited to the needs of the company, using a pilot case. Results: A catalogue of Agile development process metrics practically validated in the context of a small-size software development company, adopted by the\u00a0\u2026", "num_citations": "11\n", "authors": ["247"]}
{"title": "Towards automated data integration in software analytics\n", "abstract": " Software organizations want to be able to base their decisions on the latest set of available data and the real-time analytics derived from them. In order to support\" real-time enterprise\" for software organizations and provide information transparency for diverse stakeholders, we integrate heterogeneous data sources about software analytics, such as static code analysis, testing results, issue tracking systems, network monitoring systems, etc. To deal with the heterogeneity of the underlying data sources, we follow an ontology-based data integration approach in this paper and define an ontology that captures the semantics of relevant data for software analytics. Furthermore, we focus on the integration of such data sources by proposing two approaches: a static and a dynamic one. We first discuss the current static approach with a predefined set of analytic views representing software quality factors and further envision\u00a0\u2026", "num_citations": "10\n", "authors": ["247"]}
{"title": "Towards Guidelines for Building a Business Case and Gathering Evidence of Software Reference Architectures in Industry\n", "abstract": " Software reference architectures are becoming widely adopted by organizations that need to support the design and maintenance of software applications of a shared domain. For organizations that plan to adopt this architecture-centric approach, it becomes fundamental to know the return on investment and to understand how software reference architectures are designed, maintained, and used. Unfortunately, there is little evidence-based support to help organizations with these challenges. We have conducted action research in an industry-academia collaboration between the GESSI research group and everis, a multinational IT consulting firm based in Spain. The results from such collaboration are being packaged in order to create guidelines that could be used in similar contexts as the one of everis. The main result of this paper is the construction of empirically-grounded guidelines that support organizations to decide on the adoption of software reference architectures and to gather evidence to improve RA-related practices. The created guidelines could be used by other organizations outside of our industry-academia collaboration. With this goal in mind, we describe the guidelines in detail for their use.", "num_citations": "10\n", "authors": ["247"]}
{"title": "Data-driven elicitation of quality requirements in agile companies\n", "abstract": " Quality Requirements (QRs) are a key artifact to ensure the quality and success of a software system. Despite its importance, QRs have not reached the same degree of attention as its functional counterparts, especially in the context of trending software development methodologies like Agile Software Development (ASD). Moreover, crucial information that can be obtained from data sources of a project under development (e.g. JIRA, github,\u2026) are not fully exploited, or even neglected, in QR elicitation activities. In this work, we present a data-driven approach to semi-automatically generate and document QRs in the context of ASD. We define an architecture focusing on the process and the artefacts involved. We validate and iterate on such architecture by conducting workshops in four companies of different size and profile. Finally, we present the implementation of such architecture, considering the feedback\u00a0\u2026", "num_citations": "9\n", "authors": ["247"]}
{"title": "Reference architectures and Scrum: friends or foes?\n", "abstract": " Software reference architectures provide templates and guidelines for designing systems in a particular domain. Companies use them to achieve interoperability of (parts of) their software, standardization, and faster development. In contrast to system-specific software architectures that\" emerge\" during development, reference architectures dictate significant parts of the software design early on. Agile software development frameworks (such as Scrum) acknowledge changing software requirements and the need to adapt the software design accordingly. In this paper, we present lessons learned about how reference architectures interact with Scrum (the most frequently used agile process framework). These lessons are based on observing software development projects in five companies. We found that reference architectures can support good practice in Scrum: They provide enough design upfront without too much\u00a0\u2026", "num_citations": "9\n", "authors": ["247"]}
{"title": "Software Engineering for AI-Based Systems: A Survey\n", "abstract": " AI-based systems are software systems with functionalities enabled by at least one AI component (e.g., for image- and speech-recognition, and autonomous driving). AI-based systems are becoming pervasive in society due to advances in AI. However, there is limited synthesized knowledge on Software Engineering (SE) approaches for building, operating, and maintaining AI-based systems. To collect and analyze state-of-the-art knowledge about SE for AI-based systems, we conducted a systematic mapping study. We considered 248 studies published between January 2010 and March 2020. SE for AI-based systems is an emerging research area, where more than 2/3 of the studies have been published since 2018. The most studied properties of AI-based systems are dependability and safety. We identified multiple SE approaches for AI-based systems, which we classified according to the SWEBOK areas. Studies related to software testing and software quality are very prevalent, while areas like software maintenance seem neglected. Data-related issues are the most recurrent challenges. Our results are valuable for: researchers, to quickly understand the state of the art and learn which topics need more research; practitioners, to learn about the approaches and challenges that SE entails for AI-based systems; and, educators, to bridge the gap among SE and AI in their curricula.", "num_citations": "7\n", "authors": ["247"]}
{"title": "Towards an ontology for strategic decision making: The case of quality in rapid software development projects\n", "abstract": " Strategic decision making is the process of selecting a logical and informed choice from the alternative options based on key strategic indicators determining the success of a specific organization strategy. To support this process and provide a common underlying language, in this work, we present an empirically-grounded ontology to support different strategic decision-making processes and extend the ontology to cover the context of managing quality in Rapid Software Development projects. We illustrate the complete ontology with an example.", "num_citations": "7\n", "authors": ["247"]}
{"title": "Quality-aware rapid software development project: the Q-rapids project\n", "abstract": " Software quality poses continuously new challenges in software development, including aspects related to both software development and system usage, which significantly impact the success of software systems. The Q-Rapids H2020 project defines an evidence-based, data-driven quality-aware rapid software development methodology. Quality requirements (QRs) are incrementally elicited, refined and improved based on data gathered from software repositories, project management tools, system usage and quality of service. This data is analysed and aggregated into quality-related key strategic indicators (e.g., development effort required to include a given QR in the next development cycle) which are presented to decision makers using a highly informative dashboard. The Q-Rapids platform is being evaluated in-premises by the four companies participating in the consortium, reporting useful lessons\u00a0\u2026", "num_citations": "5\n", "authors": ["247"]}
{"title": "How practitioners manage quality requirements in rapid software development: A Survey\n", "abstract": " Software quality is an essential competitive factor for the success of software companies today. Increasing software quality levels of software products and services requires an adequate integration of quality requirements (QRs) in the software life-cycle, which is still scarcely supported in current rapid software development (RSD) approaches. RSD refers to the organizational capability to develop, release, and learn from software in rapid cycles. Q-Rapids (Quality-aware Rapid Software Development) research project aims to support decision-makers for QRs management in RSD. The goal of this survey is to explore how software development organizations using RSD manage QRs. The survey focuses on: (a) how data is gathered for assessing decisions related to product evolution, (b) how QRs are managed, and (c) the considered QRs in their products. We received 30 responses, from them we can conclude that\u00a0\u2026", "num_citations": "5\n", "authors": ["247"]}
{"title": "Quality-aware architectural model transformations in adaptive mashups user interfaces\n", "abstract": " Mashup user interfaces provides their functionality through the combination of different services. The integration of such services can be solved by using reusable and third-party components. Furthermore, these interfaces must be adapted to user preferences, context changes, user interactions and component availability. Model transformation is a useful mechanism to address this adaptation but normally these operations only focus on the functional requirements. In this sense, quality attributes should be included in the adaptation process to obtain the best adapted mashup user interface. This paper proposes a generic quality-aware transformation process to support the adaptation of software architectures. The transformation process has been applied in ENIA, a geographic information system, by constructing a specific quality model for the adaptation of mashup user interfaces. This model is taken into account for\u00a0\u2026", "num_citations": "5\n", "authors": ["247"]}
{"title": "Towards supporting the adoption of software reference architectures: an empirically-grounded framework\n", "abstract": " A Software Reference Architecture (SRA) allows organizations to reuse architectural knowledge and software components in a systematic way and, therefore, to reduce costs. SRAs mainly appear in organizations in which the multiplicity of software systems (i.e., software systems developed at multiple locations, by multiple vendors and across multiple organizations) triggers a need for life-cycle support for all systems. Thus, SRAs are very attractive when organizations become large and distributed in order to develop new systems or new versions of systems. In return, organizations face the need to analyze the return-on-investment (ROI) in adopting SRAs, and to review these SRAs in order to ensure their quality and incremental improvement. The goal of this research is to envisage an empirically-grounded framework that supports organizations to decide on the adoption of SRAs and its subsequent design and suitability for the organization purposes. It helps organizations to harvest and arrange relevant evidence from the wide spectrum of involved stakeholders and available information and documentation in SRA projects. Such a framework is being shaped through an action-research approach between our research group and everis, an IT consulting firm.", "num_citations": "5\n", "authors": ["247"]}
{"title": "QuPreSS: A service-oriented framework for predictive services quality assessment\n", "abstract": " Nowadays there are lots of predictive services for several domains such as stock market and bookmakers. The value delivered by these services relies on the quality of their predictions. This paper presents QuPreSS, a general framework which measures predictive service quality and guides the selection of the most accurate predictive service. To do so, services are monitored and their predictions are compared over time by means of forecast verification with observations. A systematic literature review was performed to design a service-oriented framework architecture that fits into the current body of knowledge. The service-oriented nature of the framework makes it extensible and interoperable, being able to integrate existing services regardless their heterogeneity of platforms and languages. Finally, we also present an instantiation of the generic framework architecture for the weather forecast domain, freely\u00a0\u2026", "num_citations": "5\n", "authors": ["247"]}
{"title": "Conducting Empirical Studies on Reference Architectures in IT Consulting Firms\n", "abstract": " Tight time-to-market needs pushes IT consulting firms (ITCFs) to continuously look for techniques to improve their IT services in general, and the design of software architectures in particular. The use of reference architectures allows ITCFs reusing architectural knowledge and components in a systematic way. In return, ITCFs face the need to assess these reference architectures in order to ensure their quality, return on investment and incremental improvement. Little support exists to help ITCFs to face this challenge. In this work-in-progress paper we present an empirical framework aimed to assess ITCFs\u2019 reference architectures and their use in IT projects by harvesting relevant evidence from the wide spectrum of involved stakeholders. We are currently applying this framework in an ITCF and we report the issues found so far.", "num_citations": "4\n", "authors": ["247"]}
{"title": "Integration of Convolutional Neural Networks in Mobile Applications\n", "abstract": " When building Deep Learning (DL) models, data scientists and software engineers manage the trade-off between their accuracy, or any other suitable success criteria, and their complexity. In an environment with high computational power, a common practice is making the models go deeper by designing more sophisticated architectures. However, in the context of mobile devices, which possess less computational power, keeping complexity under control is a must. In this paper, we study the performance of a system that integrates a DL model as a trade-off between the accuracy and the complexity. At the same time, we relate the complexity to the efficiency of the system. With this, we present a practical study that aims to explore the challenges met when optimizing the performance of DL models becomes a requirement. Concretely, we aim to identify: (i) the most concerning challenges when deploying DL-based software in mobile applications; and (ii) the path for optimizing the performance trade-off. We obtain results that verify many of the identified challenges in the related work such as the availability of frameworks and the software-data dependency. We provide a documentation of our experience when facing the identified challenges together with the discussion of possible solutions to them. Additionally, we implement a solution to the sustainability of the DL models when deployed in order to reduce the severity of other identified challenges. Moreover, we relate the performance trade-off to a new defined challenge featuring the impact of the complexity in the obtained accuracy. Finally, we discuss and motivate future work that aims to provide\u00a0\u2026", "num_citations": "3\n", "authors": ["247"]}
{"title": "QaSD: a quality-aware strategic dashboard for supporting decision makers in agile software development\n", "abstract": " Software and data analytics solutions support improving development processes and the quality of the software produced in Agile Software Development (ASD). However, decision makers in software teams (e.g., product owner, project manager) are demanding powerful tools providing evidence data that support their strategic decision-making processes. In this paper, we present and provide access to QaSD, a Quality-aware Strategic Dashboard supporting decision makers in ASD. The dashboard allows decision makers to define high-level strategic indicators (e.g., customer satisfaction, process performance) related to software quality and to measure, explore, simulate and forecast the values of those indicators in order to explain and justify their decisions. Moreover, we also provide the results of a conducted evaluation of the dashboard quality in a real environment that evaluated the QaSD as usable, easy to use\u00a0\u2026", "num_citations": "3\n", "authors": ["247"]}
{"title": "Challenges and Benefits from Using Software Analytics in Softeam\n", "abstract": " In this industry abstract, we describe the challenges and benefits of collecting feedback from customers and systems to support development cycles. In Softeam, we have performed such collection and support in four iterations by means of a software analytics platform. We describe the encountered challenges and the effects of suggested recommendations to improve the software quality of our systems on the metrics of interest.", "num_citations": "3\n", "authors": ["247"]}
{"title": "Definition of the on-time delivery indicator in rapid software development\n", "abstract": " Rapid software development (RSD) is an approach for developing software in rapid iterations. One of the critical success factors of an RSD project is to deliver the product releases on time and with the planned features. In this paper, we elaborate an exploratory definition of the On-Time Delivery strategic indicator in RSD based on the literature and interviews with four companies. This indicator supports decision-makers to detect development problems in order to avoid delays and to estimate the additional time needed when requirements, and specifically quality requirements, are considered.", "num_citations": "3\n", "authors": ["247"]}
{"title": "Exploring quality-aware architectural transformations at run-time: the ENIA case\n", "abstract": " Adapting software systems at run-time is a key issue, especially when these systems consist of components used as intermediary for human-computer interaction. In this sense, model transformation techniques have a widespread acceptance as a mechanism for adapting and evolving the software architecture of such systems. However, existing model transformations often focus on functional requirements, and quality attributes are only manually considered after the transformations are done. This paper aims to improve the quality of adaptations and evolutions in component-based software systems by taking into account quality attributes within the model transformation process. To this end, we present a quality-aware transformation process using software architecture metrics to select among many alternative model transformations. Such metrics evaluate the quality attributes of an architecture. We validate\u00a0\u2026", "num_citations": "3\n", "authors": ["247"]}
{"title": "Accuracy Assessment of forecasting services\n", "abstract": " English: A service system is a dynamic configuration of people, technologies, organisations and shared information that create and deliver value to customers and other stakeholders [1]. The following cases are examples of customers receiving a service: taking a bus to go somewhere, or going to a restaurant to have a meal, or for a small IT (information technology) company, contracting a service to a bigger one in order to save costs and time. Service-oriented architecture (SOA) has become more popular during last years. Basically, this emerging development paradigm allows service providers to offer loosely coupled services. These services are normally only owned by the providers. As a result, the service user or client does not have to worry about the development, maintenance, infrastructure, or any other issue of how the service is working. To sum up, the user just has to find and choose the proper service. On the one hand, it presents several advantages. Firstly, common functionality can be contracted as a service in order to be able to focus on the own core missions. Secondly, it decreases the cost, since it is cheaper to contract a service than creating it yourself. Thirdly, clients take benefit of provider\u2019s latest technologies. On the other hand, there is one big drawback: lack of trust. When you contract a service, you lose the direct control, the provider has access to your own data, you depend on him, and you experiment delays since your functionality is not working in-home. That is why the user has to decide previously which service is the most appropriate for his needs. Each client has different needs: quality (it varies among services\u00a0\u2026", "num_citations": "3\n", "authors": ["247"]}
{"title": "Architectural solutions for self-adaptive systems\n", "abstract": " Increasingly adopted in critical application domains, selfadaptive systems (SaSs) present a particular ability to modify their behavior or configuration at runtime autonomously. The architectural decision-making activity in an SaS can be supported by reusing proven software structure configuration.", "num_citations": "2\n", "authors": ["247"]}
{"title": "Research Directions for Developing and Operating Artificial Intelligence Models in Trustworthy Autonomous Systems\n", "abstract": " Context: Autonomous Systems (ASs) are becoming increasingly pervasive in today's society. One reason lies in the emergence of sophisticated Artificial Intelligence (AI) solutions that boost the ability of ASs to self-adapt in increasingly complex and dynamic environments. Companies dealing with AI models in ASs face several problems, such as users' lack of trust in adverse or unknown conditions, and gaps between systems engineering and AI model development and evolution in a continuously changing operational environment. Objective: This vision paper aims to close the gap between the development and operation of trustworthy AI-based ASs by defining a process that coordinates both activities. Method: We synthesize the main challenges of AI-based ASs in industrial settings. To overcome such challenges, we propose a novel, holistic DevOps approach and reflect on the research efforts required to put it\u00a0\u2026", "num_citations": "2\n", "authors": ["247"]}
{"title": "Practical experiences and value of applying software analytics to manage quality\n", "abstract": " Background: Despite the growth in the use of software analytics platforms in industry, little empirical evidence is available about the challenges that practitioners face and the value that these platforms provide. Aim: The goal of this research is to explore the benefits of using a software analytics platform for practitioners managing quality. Method: In a technology transfer project, a software analytics platform was incrementally developed between academic and industrial partners to address their software quality problems. This paper focuses on exploring the value provided by this software analytics platform in two pilot projects. Results: Practitioners emphasized major benefits including the improvement of product quality and process performance and an increased awareness of product readiness. They especially perceived the semi-automated functionality of generating quality requirements by the software analytics\u00a0\u2026", "num_citations": "2\n", "authors": ["247"]}
{"title": "1st quasd workshop: Managing quality in agile and rapid software development processes\n", "abstract": " Optimal management of software quality calls for appropriate integration of quality management activities into the whole software (engineering) life-cycle. However, despite the competitive advantage of ensuring and maintaining high quality levels, software development methodologies still offer little support for the integration and management of quality. This is especially true for, and essential in, agile software development processes and the recent trends towards rapid and continuous software development. The premise is that faster and more frequent release cycles should not compromise quality. This workshop aims to exchange challenges, experiences, and solutions among researchers and practitioners to bring agile and rapid software processes a step further towards seamless integration of quality management activities into their practices.", "num_citations": "2\n", "authors": ["247"]}
{"title": "Verifying predictive services' quality with Mercury\n", "abstract": " Due to the success of service technology, there are lots of services nowadays that make predictions about the future in domains such as weather forecast, stock market and bookmakers. The value delivered by these predictive services relies on the quality of their predictions. This paper presents Mercury, a tool that measures predictive service quality in the domain of weather forecast, and automates the context-dependent selection of the most accurate predictive service to satisfy a customer query. To do so, candidate predictive services are monitored so that their predictions can be eventually compared with real observations obtained from some trusted source. Mercury is a proof-of-concept to show that the selection of predictive services can be driven by the quality of their predictions. Its service-oriented architecture (SOA) aims to support the easy adaptation to other prediction domains and makes feasible its integration in self-adaptive SOA systems, as well as its direct use by end-users as a classical web application. Thoughout the paper, we show how Mercury was built.", "num_citations": "2\n", "authors": ["247"]}
{"title": "Actionable Software Metrics: An Industrial Perspective\n", "abstract": " Background: Practitioners would like to take action based on software metrics, as long as they find them reliable. Existing literature explores how metrics can be made reliable, but remains unclear if there are other conditions necessary for a metric to be actionable. Context & Method: In the context of a European H2020 Project, we conducted a multiple case study to study metrics' use in four companies, and identified instances where these metrics influenced actions. We used an online questionnaire to enquire about the project participants' views on actionable metrics. Next, we invited one participant from each company to elaborate on the identified metrics' use for taking actions and the questionnaire responses (N= 17). Result: We learned that a metric that is practical, contextual, and exhibits high data quality characteristics is actionable. Even a non-actionable metric can be useful, but an actionable metric mostly\u00a0\u2026", "num_citations": "1\n", "authors": ["247"]}
{"title": "Developing and Operating Artificial Intelligence Models in Trustworthy Autonomous Systems\n", "abstract": " Companies dealing with Artificial Intelligence (AI) models in Autonomous Systems (AS) face several problems, such as users' lack of trust in adverse or unknown conditions, gaps between software engineering and AI model development, and operation in a continuously changing operational environment. This work-in-progress paper aims to close the gap between the development and operation of trustworthy AI-based AS by defining an approach that coordinates both activities. We synthesize the main challenges of AI-based AS in industrial settings. We reflect on the research efforts required to overcome these challenges and propose a novel, holistic DevOps approach to put it into practice. We elaborate on four research directions: (a) increased users' trust by monitoring operational AI-based AS and identifying self-adaptation needs in critical situations; (b) integrated agile process for the development and evolution of AI models and AS; (c) continuous deployment of different context-specific instances of AI models in a distributed setting of AS; and (d) holistic DevOps-based lifecycle for AI-based AS.", "num_citations": "1\n", "authors": ["247"]}
{"title": "Approaches for describing reference architectures: a systematic mapping study\n", "abstract": " Reference architectures have emerged as an important arti-fact of software engineering, since they provide knowledge and experi-ence about how to design architectures of software systems in a specificdomain, favoring their reuse, and standardization. Describing referencearchitectures still is a great challenge, since knowledge about the domainand the concrete architectures should be described and documented in acoherent, cohesive, unambiguous, and complete way. However, referencearchitectures practical use is difficult due mainly to problems in their de-scriptions. The main goal is evaluate existing approaches for describingRAs, analyzing six key aspects while describing RAs: type, adherence toISO/IEC 42010, applicability, maturity, interoperability, and dynamism.For this, we conducted a systematic mapping and identified 21 primarystudies with approaches to describe reference architectures. We evaluated21 approaches to describe RAs, of which four approaches (S4, S7, S16,S17) adhered to at least half of the ISO/IEC standard, six (S3, S4, S5, S7,S8, and S19) achieved a medium technological readiness level, one (S4)adopted a standard to achieve interoperability among systems, and onlyone (S8) considered the dynamism in the description of RA. We highlightthe need to propose methods for describing RAs, considering the guidesand tools to support the description of RAs.", "num_citations": "1\n", "authors": ["247"]}
{"title": "Mercury: Using the QuPreSS reference model to evaluate predictive services\n", "abstract": " Nowadays, lots of service providers offer predictive services that show in advance a condition or occurrence about the future. As a consequence, it becomes necessary for service customers to select the predictive service that best satisfies their needs. The QuPreSS reference model provides a standard solution for the selection of predictive services based on the quality of their predictions. QuPreSS has been designed to be applicable in any predictive domain (e.g., weather forecasting, economics, and medicine). This paper presents Mercury, a tool based on the QuPreSS reference model and customized to the weather forecast domain. Mercury measures weather predictive services' quality, and automates the context-dependent selection of the most accurate predictive service to satisfy a customer query. To do so, candidate predictive services are monitored so that their predictions can be eventually compared to\u00a0\u2026", "num_citations": "1\n", "authors": ["247"]}