{"title": "Integration of the grey relational analysis with genetic algorithm for software effort estimation\n", "abstract": " Accurate estimates of efforts in software development are necessary in project management practices. Project managers or domain experts usually conduct software effort estimation using their experience; hence, subjective or implicit estimates occur frequently. As most software projects have incomplete information and uncertain relations between effort drivers and the required development effort, the grey relational analysis (GRA) method has been applied in building a formal software effort estimation model for this study. The GRA in the grey system theory is a problem-solving method that is used when dealing with similarity measures of complex relations. This paper examines the potentials of the software effort estimation model by integrating a genetic algorithm (GA) to the GRA. The GA method is adopted to find the best fit of weights for each software effort driver in the similarity measures. Experimental results\u00a0\u2026", "num_citations": "279\n", "authors": ["2001"]}
{"title": "Critical success factors in aligning IT and business objectives: A Delphi study\n", "abstract": " Aligning information technology (IT) and business objectives is an important task for enterprises. IT service management (ITSM) is one of the methods used to achieve this mission. ITSM implementation often involves huge investment with unexpected risks. Understanding which are the critical areas and how to manage these can help in not only reducing the risks but can also provide helpful guidance for enterprises. However, relatively few studies exist on the critical success factors (CSFs) related to ITSM implementation. This paper presents the results of a modified Delphi study of ITSM professionals on the relative importance of various CSFs for implementing ITSM. A total of 13 factors are identified by the Pareto principle, and the rationales behind the factors are investigated. Finally, the implications based on the findings are given for the management of ITSM implementation.", "num_citations": "60\n", "authors": ["2001"]}
{"title": "The preparedness of critical success factors of IT service management and its effect on performance\n", "abstract": " Recently, information technology service management (ITSM) has emerged as a challenging research area. ITSM implementation often involves huge investment with unexpected risks. Therefore, understanding the preparedness of critical success factors (CSFs) and its effect on the organizational performance can help in not only reducing the risks but in also providing helpful guidance for enterprises. This empirical study explores the preparedness of ITSM-relevant CSFs and its effect on the organizational performance. The findings show that (1) the more important a CSF is, the more prepared the CSF is; (2) the organizational performance is mostly beneficial from customer and internal business process perspectives; and (3) only a few CSFs can significantly affect the organizational performance. Finally, the implications based on the findings are given for the management of ITSM implementation.", "num_citations": "25\n", "authors": ["2001"]}
{"title": "Accuracy and efficiency comparisons of single-and multi-cycled software classification models\n", "abstract": " Software classification models have been regarded as an essential support tool in performing measurement and analysis processes. Most of the established models are single-cycled in the model usage stage, and thus require the measurement data of all the model\u2019s variables to be simultaneously collected and utilized for classifying an unseen case within only a single decision cycle. Conversely, the multi-cycled model allows the measurement data of all the model\u2019s variables to be gradually collected and utilized for such a classification within more than one decision cycle, and thus intuitively seems to have better classification efficiency but poorer classification accuracy. Software project managers often have difficulties in choosing an appropriate classification model that is better suited to their specific environments and needs. However, this important topic is not adequately explored in software measurement and\u00a0\u2026", "num_citations": "13\n", "authors": ["2001"]}
{"title": "Investigating the learning performances between sequence\u2010and context\u2010based teaching designs for virtual reality (VR)\u2010based machine tool operation training\n", "abstract": " Background Training workers in machine tool operations is indispensable. Because training course at school with real machine tools is costly and dangerous, most researchers have concentrated on developing and adopting virtual reality (VR)\u2010based applications. However, to improve students\u2019 learning performance levels, teaching design is imperative.   Purpose This study hopes to investigate the performance differences between sequence\u2010 (traditional) and context\u2010based teaching designs along with a self\u2010developed VR computer numerical control (VRCNC) training environment.   Method Experimental design, sequence\u2010 and context\u2010based teaching designs were developed for this study. Forty male senior students were recruited from the department of mechanical engineering at an industrial high school. Then, corresponding pretests, teaching activities and posttests were implemented based on the\u00a0\u2026", "num_citations": "8\n", "authors": ["2001"]}
{"title": "Knowledge transfer of software tool development for functional requirements analysis\n", "abstract": " Knowledge transfer is a key function in software development. Software tool development is an important skills in the software engineering. However, generic teaching courses are hard to evaluate the integrated development skills from undergraduate students. This paper proposed a continuous collaboration model (CCM) and a view\u2010based semi\u2010automatic tool, OpenNeeds, develop and run as an Eclipse plug\u2010in to proceed the functional requirements' analysis. These selected methods and tools include programming languages, markup language, information exchange standards, modeling language, model\u2010view\u2010controller (MVC) software framework, virtual machine handling, interface development environment, version control platform, knowledge management, software documentation, and software unit tests. The MVC tool can simply manipulate several requirement\u2010related graphical components, such as\u00a0\u2026", "num_citations": "7\n", "authors": ["2001"]}
{"title": "Peer learning efficacy analysis on undergraduate software design course\n", "abstract": " Knowledge sharing and peer learning are important characteristics for learning similar engineering topics, especially suitable for the learning in college. Software design is an advanced required course for software engineering departments. However, most students might have no enough incentives to learn it by themselves. To distinguish the performance of the peer learning, we adopted the peer learning in software design course to analyze the possibility of adoption. Our selected course was a junior major and held on the second semester. Its regulations are declared twice before the due date of the course selection. Students can group their peer learning team by at most three ones, so they can choose as individual learning. Both review and summary quizzes were held at the first and the last 15\u2010min in the Moodle every week, respectively. There were 34 students attending this experiment with four 3\u2010student\u00a0\u2026", "num_citations": "6\n", "authors": ["2001"]}
{"title": "Using Selective Syntactic Online Compiler to Promote Programming Learning\n", "abstract": " It is an important problem that let students do practices according to course objectives, but not take tricky shortcuts. For example, one can use build-in libraries to solve a sorting question and does not really understand the fundamental principles of the sorting algorithm. To avoid this kind of problems, our research team proposed the python-based Selective Syntactic Compiler (pySSC) to limit students can only apply permitted grammars. Also, we build an instant, interactive and online compiler for the pySSC usage. Teachers can use the pySSC platform to some specific syntax constraints and then students can use this platform to build codes as well as to get real-time feed-backs. Finally, our research team also executed a questionnaire-based survey to evaluate the performance of the pySSC in terms of three types of affordances, namely cognitive, perceived and functional affordances.", "num_citations": "1\n", "authors": ["2001"]}
{"title": "A Python-based Selective Syntactic Compiler for Programming Learning\n", "abstract": " Teaching beginners to learn programming has many difficult parts. One of them is that some students often finish course exercises by taking shortcuts, such as using build-in libraries. This makes teachers difficultly identify whether students have really learnt some programming concepts and skills. To improve this problem, we propose the Selective Syntactic Compiler (SSC) approach to limit students to only utilize the permitted parts of the grammars when they code a program. In this paper, we apply the SSC approach to Python programming language to build a tool, named Python Selective Syntactic Compiler (pySSC). The pySSC supports two programming languages: Python and C and is divided into four modules: filter module, lexical analyzer, syntax analyzer and code generator. Finally, two kinds of test cases are designed for testing its functionality and error-handling mechanism.", "num_citations": "1\n", "authors": ["2001"]}