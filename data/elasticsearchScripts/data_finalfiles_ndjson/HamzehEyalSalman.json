{"title": "Distance and Similarity Measures Effect on the Performance of K-Nearest Neighbor Classifier--A Review\n", "abstract": " The K-nearest neighbor (KNN) classifier is one of the simplest and most common classifiers, yet its performance competes with the most complex classifiers in the literature. The core of this classifier depends mainly on measuring the distance or similarity between the tested examples and the training examples. This raises a major question about which distance measures to be used for the KNN classifier among a large number of distance and similarity measures available? This review attempts to answer this question through evaluating the performance (measured by accuracy, precision and recall) of the KNN using a large number of distance measures, tested on a number of real-world datasets, with and without adding different levels of noise. The experimental results show that the performance of KNN classifier depends significantly on the distance used, and the results showed large gaps between the performances of different distances. We found that a recently proposed non-convex distance performed the best when applied on most datasets comparing to the other tested distances. In addition, the performance of the KNN with this top performing distance degraded only about  while the noise level reaches , this is true for most of the distances used as well. This means that the KNN classifier using any of the top  distances tolerate noise to a certain degree. Moreover, the results show that some distances are less affected by the added noise comparing to other distances.", "num_citations": "91\n", "authors": ["2201"]}
{"title": "Effects of distance measure choice on k-nearest neighbor classifier performance: a review\n", "abstract": " The K-nearest neighbor (KNN) classifier is one of the simplest and most common classifiers, yet its performance competes with the most complex classifiers in the literature. The core of this classifier depends mainly on measuring the distance or similarity between the tested examples and the training examples. This raises a major question about which distance measures to be used for the KNN classifier among a large number of distance and similarity measures available? This review attempts to answer this question through evaluating the performance (measured by accuracy, precision, and recall) of the KNN using a large number of distance measures, tested on a number of real-world data sets, with and without adding different levels of noise. The experimental results show that the performance of KNN classifier depends significantly on the distance used, and the results showed large gaps between the\u00a0\u2026", "num_citations": "87\n", "authors": ["2201"]}
{"title": "Using Genetic algorithm as test data generator for stored PL/SQL program units\n", "abstract": " PL/SQL is the most common language for ORACLE database application. It allows the developer to create stored program units (Procedures, Functions, and Packages) to improve software reusability and hide the complexity of the execution of a specific operation behind a name. Also, it acts as an interface between SQL database and DEVELOPER. Therefore, it is important to test these modules that consist of procedures and functions. In this paper, a new genetic algorithm (GA), as search technique, is used in order to find the required test data according to branch criteria to test stored PL/SQL program units. The experimental results show that this was not fully achieved, such that the test target in some branches is not reached and the coverage percentage is 98%. A problem rises when target branch is depending on data retrieved from tables; in this case, GA is not able to generate test cases for this branch.", "num_citations": "19\n", "authors": ["2201"]}
{"title": "Identification multi-level frequent usage patterns from apis\n", "abstract": " Software developers increasingly rely on application programming interfaces (APIs) of frameworks to increase productivity. An API method is generally used within code snippets along with other methods of the API of interest. When developers invoke API methods in a framework, they often encounter difficulty to determine which methods to call due to the huge number of included methods in that API. Developers usually exploit a source code search tool searching for code snippets that use the API methods of interest. However, the number of returned code snippets is very large which hinders the developer to locate useful ones. Moreover, co-usage relationships between API methods are often not documented. This article presents an approach to identify multi-level frequent usage patterns (IML-FUP) to help developers understand API usage and facilitate the development tasks when they use new APIs. An\u00a0\u2026", "num_citations": "7\n", "authors": ["2201"]}
{"title": "API library-based identification and documentation of usage patterns\n", "abstract": " Application programming interfaces (APIs) are important sources for supporting source code reuse as each API provides a large set of pre-implemented functionalities that support programmers to achieve their daily work in different contexts. However, APIs provide huge number of classes and methods that hinder programmers to understand and use APIs. Numerous client-based approaches have been proposed for facilitating APIs usage through identifying frequent usage pattern. Although they represent significant efforts for helping APIs understanding, the client applications are not available for either newly released APIs libraries or APIs that are not widely used. In this paper, a non-client-based approach for frequent usage patterns identification and documentation is proposed. The approach incorporates hierarchical clustering algorithm and API's source code information. An experimental evaluation is\u00a0\u2026", "num_citations": "1\n", "authors": ["2201"]}