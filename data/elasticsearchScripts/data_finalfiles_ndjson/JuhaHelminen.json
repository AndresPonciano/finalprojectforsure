{"title": "How Do Students Solve Parsons Programming Problems? - An Analysis of Interaction Traces\n", "abstract": " The process of solving a programming assignment is generally invisible to the teacher. We only see the end result and maybe a few snapshots along the way. In order to investigate this process with regard to Parsons problems, we used an online environment for Parsons problems in Python to record a detailed trace of all the interaction during the solving session. In these assignments, learners are to correctly order and indent a given set of code fragments in order to build a functioning program that meets the set requirements. We collected data from students of two programming courses and among other analyses present a visualization of the solution path as an interactive graph that can be used to explore such patterns and anomalies as backtracking and loops in the solution. The results provide insights into students' solving process for these types of problems and ideas on how to improve the assignment\u00a0\u2026", "num_citations": "67\n", "authors": ["941"]}
{"title": "Jype \u2013 An Education-Oriented Integrated Program Visualization, Visual Debugging, and Programming Exercise Tool for Python\n", "abstract": " Learning to program is difficult. In international studies, students have demonstrated a surprisingly definite lack of programming skills after passing their introductory programming courses. The underlying cause appears to be their fragile knowledge of elementary programming and overall insufficient understanding of control flow and program state. Ultimately, learning to program requires practice. On large programming courses automatic assessment can be used to provide students individual feedback on programming exercises without sacrificing quantity. In addition, visualization is often used in a supporting role in order to facilitate learning of abstract concepts. However, existing research indicates that mere visualizations are not effective in learning but the learners must be engaged beyond passive viewing. Furthermore, visualization tools are typically separate from automatic assessment environments, which prevents students from easily utilizing them simultaneously. An integrated environment could be used to efficiently deliver focused assignments that target the observed deficiencies in elementary programming. To address this, we developed a web-based easy-to-use tool for visualizing and debugging Python programs. The tool can be used to deliver automatically assessed Python programming exercises that are solved directly within the environment with the help of an integrated reversible debugger and automatically generated visualizations of program state. The tool was also integrated into the TRAKLA2 course management system where students\u2019 points and submissions can be recorded and tracked.", "num_citations": "14\n", "authors": ["941"]}
{"title": "How Do Students Solve Parsons Programming Problems? \u2013 Execution-Based vs. Line-Based Feedback\n", "abstract": " In large introductory programming classes, there typically are no resources for adequate individual guidance. Automatic feedback for programming tasks can facilitate students' learning by allowing them to get immediate individual feedback regardless of time and place. This paper presents a study on how the type of automatic feedback in Parsons problems affects how students solve them. Students on their first programming class were divided into two groups and, in two assignments, each group in turn received different type of feedback. The type of feedback had an effect on how students constructed their programs and how quickly they were able to complete them. With feedback based on execution as opposed to the visible arrangement of code, the programs were more frequently executable when feedback was requested and, overall, feedback was requested less frequently. Based on the analysis, we discuss\u00a0\u2026", "num_citations": "10\n", "authors": ["941"]}
{"title": "Algorithm Visualization in Teaching Spatial Data Algorithms\n", "abstract": " Algorithm visualization is a widely-used tool for teaching data structures and algorithms. Spatial data algorithms are algorithms that are designed to process multidimensional data. This work introduces a spatial data extension to the successful TRAKLA2 learning environment, which includes automatically assessed visual algorithm simulation exercises. First impressions on using the visualizations in teaching are also described.", "num_citations": "6\n", "authors": ["941"]}
{"title": "Algorithm Visualization System for Teaching Spatial Data Algorithms\n", "abstract": " TRAKLA2 is a web-based learning environment for data structures and algorithms. The system delivers automatically assessed algorithm simulation exercises that are solved using a graphical user interface.In this work, we introduce a novel learning environment for spatial data algorithms, SDA-TRAKLA2, which has been implemented on top of the TRAKLA2 system. Spatial data items are identified by a set of coordinates, such as x and y for two-dimensional spatial data. The spatial environment contains new visualizations for representing spatial data, and a number of new exercises that cover a variety of spatial data algorithms.", "num_citations": "2\n", "authors": ["941"]}