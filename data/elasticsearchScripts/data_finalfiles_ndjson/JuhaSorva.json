{"title": "Visual Program Simulation in Introductory Programming Education\n", "abstract": " This thesis formulates and evaluates a pedagogical technique whose goal is to help beginners learn the basics of computer programming. The technique, visual program simulation (VPS), involves the learner in interactive simulations in which the learner takes on the role of the computer as the executor of a program. The student uses a given visualization of a so-called notional machine, an abstract computer, to illustrate what happens in memory as the computer processes the program. The purpose of these simulations is to help the beginner learn to reason about program execution, a skill whose development has been identified as a major challenge in introductory programming education. VPS promotes effective learning by seeking to cognitively engage the learner with a visualization. It can be made practical through visualization software. VPS software may also automatically assess students' simulations and provide personal feedback, which is a valuable asset especially in the large classes that are typical of introductory courses.  The thesis contributes to VPS in four ways. First, it formulates the concept of visual program simulation and outlines its underpinnings in terms of learning theory. Second, it presents a new software prototype that facilitates the use of VPS in practice. Third, it reports on a preliminary empirical evaluation of VPS and the software in the context of an introductory programming course. Fourth, it makes recommendations on the use of VPS in teaching and the further development of VPS tools, which arise from the empirical work.  The findings from a mixed-methods evaluation of VPS suggest that it is a promising\u00a0\u2026", "num_citations": "159\n", "authors": ["929"]}
{"title": "A Cognitive Approach to Identifying Measurable Milestones for Programming Skill Acquisition\n", "abstract": " Traditional approaches to programming education, as exemplified by the typical CS1/CS2 course sequence, have not taken advantage of the long record of psychological and experimental studies on the development of programming skills. These studies indicate a need for a new curricular strategy for developing programming skills and indicate that a cognitive approach would be a promising starting point. This paper first reviews the literature on studies of programming skills, cognition and learning, then within that context reports on a new formal structure, called an anchor graph, that supports curricular design and facilitates the setting of measurable milestones.", "num_citations": "111\n", "authors": ["929"]}
{"title": "Exploring programming misconceptions: an analysis of student mistakes in visual program simulation exercises\n", "abstract": " Visual program simulation (VPS) is a form of interactive program visualization in which novice programmers practice tracing computer programs: using a graphical interface, they are expected to correctly indicate each consecutive stage in the execution of a given program. Naturally, students make mistakes during VPS; in this article, we report a study of such mistakes.", "num_citations": "86\n", "authors": ["929"]}
{"title": "UUhistle: A Software Tool for Visual Program Simulation\n", "abstract": " This paper describes UUhistle, a highly interactive program visualization system for introductory programming courses. UUhistle's main novelty is its support for visual program simulation exercises, in which the student takes the role of the computer as executor of a program in order to learn about program dynamics and to demonstrate their understanding. The student needs to predict the steps involved in the execution of a given program and to directly manipulate the elements of a program visualization to show what happens next. Visual program simulation exercises aim to aid learning by promoting a high level of student engagement with visualizations. They are automatically assessable.", "num_citations": "86\n", "authors": ["929"]}
{"title": "A fresh look at novice programmers' performance and their teachers' expectations\n", "abstract": " This paper describes the results of an ITiCSE working group convened in 2013 to review and revisit the influential ITiCSE 2001 McCracken working group that reported [18] on novice programmers' ability to solve a specified programming problem. Like that study, the one described here asked students to implement a simple program. Unlike the original study, students' in this study were given significant scaffolding for their efforts, including a test harness. Their knowledge of programming concepts was also assessed via a standard language-neutral survey.", "num_citations": "57\n", "authors": ["929"]}
{"title": "Reflections on Threshold Concepts in Computer Programming and Beyond\n", "abstract": " I comment on and extend prior work that searches for threshold concepts in computer programming. I argue that explicitly linking threshold concepts to Brunerian fundamental ideas gives structure to the ongoing debate on threshold concepts. Program dynamics, information hiding and object interaction appear three strong candidates for threshold concepts in introductory programming, while abstraction and state seem to qualify as fundamental ideas. I further propose that the threshold concepts debate could benefit from the notion of transliminal concepts--concepts that require an understanding of a threshold concept and can'lure'students to and across thresholds.", "num_citations": "43\n", "authors": ["929"]}
{"title": "The Same But Different -- Students' Understandings of Primitive and Object Variables\n", "abstract": " From qualitative analysis of student interviews emerged three sets of categories, or outcome spaces, describing introductory students' understandings of variables. One outcome space describes different ways of understanding primitive variables. Another describes different understandings of object variables. The third outcome space describes the relationship between the primitive and object variables, again from the point of view of the student cohort. The results show that learners create various kinds of mental models of programming concepts, and that the concept of variable, which is fundamental to most types of programming, is understood in various non-viable ways. With the help of the outcome spaces, teaching materials and tools can be developed to explicitly address potential pitfalls and highlight educationally critical aspects of variables to students. A software tool, which would engage students to interact\u00a0\u2026", "num_citations": "39\n", "authors": ["929"]}
{"title": "Students' Understandings of Storing Objects\n", "abstract": " This paper reports a phenomenographic study of how introductory students view objects that have been created and stored by an object-oriented program. By analyzing student interviews, we identify five categories of description, each representing a different kind of understanding of the phenomenon. Of these categories, some represent viable understandings that we would like our students to have. Others are partially incorrect and indicate that some students mistakenly focus their awareness on aspects that are unhelpful or even harmful for constructing a viable mental model of storing objects. This paper brings together two previously disjointed branches of computer science education research: the study of misconceptions and the phenomenographic research approach. The phenomenographic approach used in this study extends traditional phenomenography by including partially incorrect understandings in a phenomenographic outcome space, and explicitly treating them as such. This approach offers a new way of studying misconceptions and linking them to correct understandings of a phenomenon.", "num_citations": "27\n", "authors": ["929"]}
{"title": "How Do Students Use Program Visualizations within an Interactive Ebook?\n", "abstract": " We investigated students' use of program visualizations (PVs) that were tightly integrated into the electronic book of an introductory course on programming. A quantitative analysis of logs showed that most students, and beginners especially, used the PVs, even where the PV did not directly affect their grade. Students commonly spent more time studying certain steps than others, suggesting they used the PVs attentively. Nevertheless, substantial numbers of students appeared to gloss over some key animation steps, something that future improvements to pedagogy may address. Overall, the results suggest that integrating PVs into an ebook can promote student engagement and has been fairly successful in the studied context. More research is needed to understand the differences between our results and earlier ones, and to assess the generalizability of our findings.", "num_citations": "23\n", "authors": ["929"]}
{"title": "Research-based design of the first weeks of CS1\n", "abstract": " On the basis of cognitive load theory, theoretical models of instructional design, and empirical findings from computing education research, we propose three independent but compatible and complementary frameworks that can be used in introductory programming education. Motivate--isolate--practice--integrate is a framework that marries project-driven learning to careful management of cognitive load through the selection of learning activities and the isolation of partial tasks. Head Straight for Objects is an outline of an introduction to programming that emphasizes object-orientation early while mediating the cognitive load intrinsic to object-oriented concepts. Finally, the principle of explicit program dynamics states that the runtime dynamics of programs should be a continuous and explicit theme in introductory programming education. We illustrate the application of the three frameworks in the context of a\u00a0\u2026", "num_citations": "20\n", "authors": ["929"]}
{"title": "Towards an Analysis of Program Complexity From a Cognitive Perspective\n", "abstract": " Instructional designers, examiners, and researchers frequently need to assess the complexity of computer programs in their work. However, there is a dearth of established methodologies for assessing the complexity of a program from a learning point of view. In this article, we explore theories and methods for describing programs in terms of the demands they place on human cognition. More specifically, we draw on Cognitive Load Theory and the Model of Hierarchical Complexity in order to extend Soloway's plan-based analysis of programs and apply it at a fine level of granularity. The resulting framework of Cognitive Complexity of Computer Programs~(CCCP) generates metrics for two aspects of a program: plan depth and maximal plan interactivity. Plan depth reflects the overall complexity of the cognitive schemas that are required for reasoning about the program, and maximal plan interactivity reflects the\u00a0\u2026", "num_citations": "18\n", "authors": ["929"]}
{"title": "Misconceptions and the beginner programmer\n", "abstract": " M1M1 AA variablevariable cancan storestore multiplemultiple values; values; itit maymay storestore thethe \u2018history\u2019\u2018history\u2019ofof valuesvalues assignedassigned toto it. it.", "num_citations": "14\n", "authors": ["929"]}
{"title": "Three views on motivation and programming\n", "abstract": " Teaching programming is one of the most widely studied areas in computing education. Part of the reason for this may be the difficulty students experience when learning programming which makes it a challenging endeavor for instructors. There is a relationship between student motivation and success in learning to program [1], and motivation is also important in the bigger picture for computing educators, having inspired two ITiCSE working groups [2]. What is perhaps surprising is that motivation does not play an equal role in the various subfields of programming education.In this panel we discuss three areas of programming education, emphasizing the importance of, or in some cases the lack of attention to, student motivation. The first panelist will consider task design, and particularly what we can do to motivate students to learn to program in CS1 courses. Here instructors must pay careful attention to the level of\u00a0\u2026", "num_citations": "14\n", "authors": ["929"]}
{"title": "Classifying the tools of contextualized programming education and forms of media computation\n", "abstract": " Teachers have used various approaches and tools to introduce computing concepts in motivating contexts. In this article, we review contextualized programming education in general as well as a form of contextualization, media computing, in particular. From a review of the literature, we formulate: 1) A broad-brush overview of the components of contextualized programming education, focusing especially on technological tools; 2) a classification of tools for media computation; and 3) a list of the operations on multimedia that feature in media computation courses. These results can help teachers and educational technologists who are interested in learning about contextualized programming education, building new tools, and positioning their work in relation to the literature.", "num_citations": "13\n", "authors": ["929"]}
{"title": "Benchmarking Introductory Programming Exams: Some Preliminary Results\n", "abstract": " The programming education literature includes many observations that pass rates are low in introductory programming courses, but few or no comparisons of student performance across courses. This paper addresses that shortcoming. Having included a small set of identical questions in the final examinations of a number of introductory programming courses, we illustrate the use of these questions to examine the relative performance of the students both across multiple institutions and within some institutions. We also use the questions to quantify the size and overall difficulty of each exam. We find substantial differences across the courses, and venture some possible explanations of the differences. We conclude by explaining the potential benefits to instructors of using the same questions in their own exams.", "num_citations": "10\n", "authors": ["929"]}
{"title": "Context-Sensitive Guidance in the UUhistle Program Visualization System\n", "abstract": " UUhistle (pronounced \u201cwhistle\u201d) is a program visualization (PV) system for introductory programming education. It is meant for visualizing the execution of small Python programs. UUhistle\u2019s pedagogical goals include promoting a dynamic view of program behavior, easing the learning of program tracing, and addressing misconceptions of programming concepts. UUhistle can be used for a number of activities that include the following.", "num_citations": "10\n", "authors": ["929"]}
{"title": "Embedded questions in ebooks on programming: useful for a) summative assessment, b) formative assessment, or c) something else?\n", "abstract": " We discuss uses of embedded computing questions (ECQs) in interactive electronic textbooks on programming, identifying a non-exhaustive list of three main categories of ECQs and nine subcategories. The main categories are: ECQs that introduce content, ECQs that reinforce learning, and ECQs that highlight content. We provide examples from an existing ebook, discuss how student perceptions may pose challenges to the use of ECQs, and invite the research community to debate ECQs and investigate them empirically.", "num_citations": "9\n", "authors": ["929"]}
{"title": "Exploring the Value of Student Self-Evaluation in Introductory Programming\n", "abstract": " Programming teachers have a strong need for easy-to-use instruments that provide reliable and pedagogically useful insights into student learning. Currently, no validated tools exist for rapidly assessing student understanding of basic programming knowledge. Concept inventories and the SCS1 questionnaire can offer great benefits; this article explores the additional value that may be gained from relatively simple self-evaluation metrics. We apply a lightweight self-evaluation instrument (SEI) in an introductory programming course and compare the results to existing performance measures, such as examination grades and the SCS1. We find that the SEI has a similar correlation with a program-writing examination as the SCS1 does, although both instruments correlate only moderately with the examination and each other. Furthermore, students are much more likely to voluntarily answer the lightweight SEI than\u00a0\u2026", "num_citations": "7\n", "authors": ["929"]}
{"title": "Benchmarking Introductory Programming Exams: How and Why\n", "abstract": " Ten selected questions have been included in 13 introductory programming exams at seven institutions in five countries. The students' results on these questions, and on the exams as a whole, lead to the development of a benchmark against which the exams in other introductory programming courses can be assessed. We illustrate some potential benefits of comparing exam performance against this benchmark, and show other uses to which it can be put, for example to assess the size and the overall difficulty of an exam. We invite others to apply the benchmark to their own courses and to share the results with us.", "num_citations": "6\n", "authors": ["929"]}
{"title": "Na\u00efve conceptions of novice programmers\n", "abstract": " Na\u00efve Conceptions of Novice Programmers \u2014 Aalto University's research portal Skip to main navigation Skip to search Skip to main content Aalto University's research portal Logo Accessibility statement English Suomi Home Profiles Research output Datasets Projects Prizes Activities Press / Media Infrastructure Research Units Impacts Search by expertise, name or affiliation Na\u00efve Conceptions of Novice Programmers Juha Sorva Lecturer Sorva Juha group Department of Computer Science Research output: Chapter in Book/Report/Conference proceeding \u203a Chapter \u203a Professional Overview Original language English Title of host publication Computer Science in K-12: An A-To-Z Handbook on Teaching Programming Editors Shuchi Grover Publication status Published - 2020 MoE publication type D2 Article in professional manuals or guides or professional information systems or text book material Access to Document \u2026", "num_citations": "5\n", "authors": ["929"]}
{"title": "Tailoring animations of example programs\n", "abstract": " We are developing a toolkit for tailoring program visualizations (PVs) so that they integrate well into their pedagogical contexts. Educators can use the toolkit, Kelmu, to alter animations of example programs with text, visual cues, audio, and interactions. Rather than generating animations itself, Kelmu attaches to other PV tools and augments their output. In this work-in-progress report, we present the research-based rationale behind Kelmu, show examples of how the toolkit can be used, and outline future work.", "num_citations": "5\n", "authors": ["929"]}
{"title": "Measuring the Cognitive Load of Learning to Program: A Replication Study\n", "abstract": " Cognitive load (CL) on a learner\u2019s working memory has emerged as an influential concept in computing education and beyond. CL is commonly divided in at least two components, intrinsic load (IL) and extraneous load (EL). We seek progress on two questions:(1) How can CL components be measured in the programming domain?(2) How should CL measurement deal with the \u201cthird component\u201d of germane load (GL)? We replicate two studies: Morrison and colleagues\u2019[49] evaluation of a questionnaire for self-assessing CL in programming, which is an adaptation of a generic instrument; and Jiang and Kalyuga\u2019s [24] study, which found support for a two-component measure of CL in language learning, with GL redundant. We crowd-sourced CL data using Morrison\u2019s questions at the end of a video tutorial on programming for beginners. A confirmatory factor analysis found strong support for a three-factor model\u00a0\u2026", "num_citations": "4\n", "authors": ["929"]}
{"title": "Splashing the Surface of Research: A Study of Koli Abstracts\n", "abstract": " Water is wet. The Pope is Catholic. In this poster, we explore what else isn't new to the Koli Calling research community. We hypothe size that the introductory sentences of abstracts reflect the commu nity's shared assumptions. Using a mixed-methods approach, we analyze all the abstracts published in Koli proceedings to date. The results suggest, among other things, that the community believes programming to be difficult and online education to be common. For deeper insights, we would have needed to actually read the papers.", "num_citations": "4\n", "authors": ["929"]}
{"title": "Break statement considered\n", "abstract": " This article reflects on the instructional design of introductory programming courses (CS1) and promotes awareness of several related threads of research, including work on looping constructs, program composition, natural programming, and abstraction. We eavesdrop on a conversation between two imaginary computing educators, Walter White and Tom \u201cDuke\u201d Martin, who revisit the venerable debate on loop exits. They begin with a discussion of the break statement but soon find themselves broaching several broader themes, as the use of break is associated with a particular style of composing programs which can impact on student learning in subtle ways. Eventually, despite their differences, Walter and Duke are able to identify several points of agreement, pertinent trade-offs related to instructional practice, and open questions.", "num_citations": "4\n", "authors": ["929"]}
{"title": "Crowdsourcing in Computing Education Research: Case Amazon MTurk\n", "abstract": " Crowdsourcing platforms such as Amazon MTurk provide access to a human workforce that can be given tasks to complete online for a fee. In this article, we review studies in computing education research (CER) that rely on crowdsourcing; we also describe our own experiences of using Amazon MTurk for a CER study. We discuss challenges in recruiting workers with specific backgrounds\u2014such as no programming experience\u2014and considerations in filtering out unreliable research participants. Combining recommendations from the literature with the lessons that we learned whilst conducting our study, we synthesize advice for researchers in CER who are considering crowdsourcing. In our case study, we did not find widespread foul play by crowdsourced workers and, overall, our experiences and the literature suggest that crowdsourced CER is feasible. It is, however, uncertain to what extent crowdsourced data\u00a0\u2026", "num_citations": "3\n", "authors": ["929"]}
{"title": "Should explanations of program code use audio, text, or both? A replication study\n", "abstract": " Studies in educational psychology suggest that people learn better when visual learning materials are accompanied by audio explanations rather than textual ones. Research on how this modality effect applies to computing education is scarce and inconclusive. We explore whether modality of instruction affects learning from videos that use a series of example programs to explain how variables work in Python. Learners (n= 186) were crowdsourced from the internet and randomized in three groups, who received explanations as audio, text, or both, respectively. We did not find significant differences between the groups in near transfer to code-tracing tasks or perceived cognitive load. The result affirms the need to further investigate instructional modalities in programming education. There are a number of theoretical, methodological, and instructional-design factors that may explain these and earlier findings; we\u00a0\u2026", "num_citations": "3\n", "authors": ["929"]}
{"title": "Investigating incorrect understandings of a CS concept\n", "abstract": " Investigating incorrect understandings of a CS concept \u2014 Aalto University's research portal Skip to main navigation Skip to search Skip to main content Aalto University's research portal Logo Accessibility statement English Suomi Home Profiles Research output Datasets Projects Prizes Activities Press / Media Infrastructure Research Units Impacts Search by expertise, name or affiliation Investigating incorrect understandings of a CS concept Juha Sorva Research output: Chapter in Book/Report/Conference proceeding \u203a Conference contribution \u203a Scientific \u203a peer-review Overview Original language English Title of host publication Second Nordic Workshop of Phenomenography in Computing Education Research, May 2008, Kristianstad, Sweden Editors Lauri Malmi Publisher Helsinki University of Technology Pages N/A Publication status Published - 2008 MoE publication type A4 Article in a conference publication \u2026", "num_citations": "3\n", "authors": ["929"]}
{"title": "Let's Ask Students About Their Programs, Automatically\n", "abstract": " Students sometimes produce code that works but that its author does not comprehend. For example, a student may apply a poorly-understood code template, stumble upon a working solution through trial and error, or plagiarize. Similarly, passing an automated functional assessment does not guarantee that the student understands their code. One way to tackle these issues is to probe students' comprehension by asking them questions about their own programs. We propose an approach to automatically generate questions about student-written program code. We moreover propose a use case for such questions in the context of automatic assessment systems: after a student's program passes unit tests, the system poses questions to the student about the code. We suggest that these questions can enhance assessment systems, deepen student learning by acting as self-explanation prompts, and provide a window into students' program comprehension. This discussion paper sets an agenda for future technical development and empirical research on the topic.", "num_citations": "2\n", "authors": ["929"]}
{"title": "A Roles-Based Approach to Variable-Oriented Programming\n", "abstract": " Delocalized variable plans pose problems for novice programmers trying to read and write programs. Variable-oriented programming is a programming paradigm that emphasizes the importance of variable-related plans, and localizes actions pertaining to each variable together in one place in the program code. This paper revisits the idea of variable-oriented programming and shows how it can be founded on roles of variables: stereotypes of variable use suitable for teaching to novices. The paper sketches out how variable-oriented, roles-based programming could be implemented using either a new programming language or a framework built on an existing language. The possible applications, merits, and problems of a roles-based approach, and variable-oriented programming in general, are discussed. This paper points toward possible research directions for the future and provides a basis for further discussions of variable-oriented, roles-based programming.", "num_citations": "2\n", "authors": ["929"]}
{"title": "Notional Machines for Scratch and Python\n", "abstract": " We originally set ourselves a goal to study and contrast the notional machines for Python and Scratch. A blog post by Greg Wilson \u201cIs this a notional machine for Python?\u201d(http://third-bit. com/2018/04/12/notional-machine-for-python. html) was used as a starting point for the discussion and a possible reference to create and contrast a Scratch version with. A notional machine can suited for a specific audience and written to target a specific part of the programming language and the execution environment. Studying Wilson\u2019s suggested notional machine for Python, we found it in many cases to be more generic in nature and describe features common to imperative languages in general\u2013characteristics such as memory management and call stack behavior. This lead to discussions about notional machines that could be used for a family of languages. Scratch, being a language that has been intentionally simplified for a younger audience, however was not found to have all the traits described in Wilson\u2019s notional machine. Recreating, for example, a recursive version of a function calculating a factorial using Scratch was not possible as Scratch only allows user-made procedures without return values.(The function studied in the first meeting can be seen here: https://tinyurl. com/dags-nm) In our second meeting our goal was to start from the most minimalistic Python (-compatible) program imaginable, to consider the minimal language required to reason about the program and to come up with a sound and complete notional machine for this specific language. Our first program consisted only of a single assignment. The notional machine for this language\u00a0\u2026", "num_citations": "1\n", "authors": ["929"]}
{"title": "Visual Program Simulation Exercises\n", "abstract": " In this paper, I propose a new kind of assignment for CS1 courses, the visual program simulation exercise, which engages beginner programmers to learn about fundamental programming concepts and the dynamics of program execution. I discuss the software support that such exercises require, and list some key points on the design and evaluation of a visual program simulator system. The paper provides as a basis for further discussions on the use of visual simulation for learning about program execution.", "num_citations": "1\n", "authors": ["929"]}
{"title": "Ontology Based Query Translation for Legislative Information Retrieval\n", "abstract": " The paper presents a conceptual approach that helps non expert users to find legislative documents from textual databases. The concepts and inter concept relationships of each legal domain involved are modeled by an ontology. Terms describing a concept at different levels of accuracy are attached to the concept, and a weight expressing the level of accuracy is associated with each of them. Initial queries presented by the user are matched against these terms. Thereafter the user is shown a graphical representation of the relevant subpart of the ontology that he can use for refining the query. The conceptual approach is preferred over traditional thesaurus because legal terms depend on the differences in law systems that can be expressed by ontologies.", "num_citations": "1\n", "authors": ["929"]}