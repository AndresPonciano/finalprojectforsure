{"title": "Software quality models: A systematic mapping study\n", "abstract": " Quality Models play a critical role in assuring quality and have evolved over 40+ years. They provide support for defining quality attributes, building and measuring the quality of the resulting product. Each quality model adopts a critical view on quality in terms of a set of model elements and relationships between them. This study aims to provide an overview of the state-of-the-art research on quality models with a focus on encompassing model elements and their support to architecting quality. The study was conducted using systematic mapping as the research methodology. A total of 238 primary papers were classified based on the type of research, standards usage, and publication trends. We identified that 17% (40) of papers belong to quality models. These 40 models were analyzed for the underlying meta-model elements and their support for a quality architecture using Bayer's reference architecture framework\u00a0\u2026", "num_citations": "20\n", "authors": ["401"]}
{"title": "An approach to carry out consistency analysis on requirements: Validating and tracking requirements through a configuration structure\n", "abstract": " Requirements management and traceability have always been one of grand challenges in software development area. Studies reveal that 30-40% of software defects can be traced to gaps or errors in requirements Although several models and techniques have been defined to optimize the requirements process, ensuring alignment and consistency of elicited requirements continues to be a challenge. All software engineering standards and methodologies recognize the importance of maintaining relationships among the software elements for traceability. We have leveraged the structured relationships among the requirement elements to come up with an approach to systematically carry out consistency analysis of requirements for software systems. The framework has multiple models: a multi layered requirement model, a configuration structure to link and track the requirement items, a consistency analysis method\u00a0\u2026", "num_citations": "16\n", "authors": ["401"]}
{"title": "Establishing content traceability for software applications: An approach based on structuring and tracking of configuration elements\n", "abstract": " Establishing content traceability between various software artifacts or configuration elements at granular level and identifying the gaps in traceability at each phase is a key challenge in software development. In other disciplines such as manufacturing and systems engineering we can find models, well established principles and practices for formulating and tracing the product parts and composition. This paper extends the system model and product breakdown structure concepts from these disciplines to software systems. We propose a model that provides a granular view of software product composition and content traceability through structured relationships among various software configuration elements. Here, we define the key configuration elements essential for the alignment and traceability, create a structure through interconnected relationships of these elements at each phase and analyze the\u00a0\u2026", "num_citations": "12\n", "authors": ["401"]}
{"title": "Quality management and Software Product Quality Engineering\n", "abstract": " The increased complexity and scale of software systems presents difficult challenges in design, development, and asserting software quality. Software organizations which develop and maintain software systems on an industrial scale, have huge challenges in addressing software product quality concerns in terms of identifying a comprehensive set of software quality requirements and ways to achieve them in spite of adoption to industry standard quality systems and processes. In this chapter, a product quality engineering approach has been proposed to assert software quality by connecting the generic software processes defined at the organization level to specific product quality concerns through quality engineering techniques. This chapter outlines the approach through a set of principles, wherein each principle focuses on systematic achievement of a specific quality engineering concern and contributes to the\u00a0\u2026", "num_citations": "6\n", "authors": ["401"]}
{"title": "An approach to understand and elicit requirements using systemic models: Ensuring a connect from problem context to requirements\n", "abstract": " The context in which Businesses operate today is becoming increasingly complex. This is due to the influence of the various factors such as societal, political, economical, regulatory, cultural, and technological on the business. For IT organizations focusing on next generation systems, the ability to understand and cope with this complexity is needed to elicit correct business requirements to build effective solutions. Research studies have highlighted \u201crequirements creep and gaps\u201d to be a major cause of many software systems problems. The inability to comprehend these business systems leads to a lot of rework at later stages including shelving of the projects in some scenarios. Research carried out in our lab to address this problem, led to the design of an approach that begins with the big picture understanding of the business, identifies suitable business objectives which are traced to business processes for\u00a0\u2026", "num_citations": "6\n", "authors": ["401"]}
{"title": "Design of sustainable IT solutions: An approach based on systems principles\n", "abstract": " Sustainability is the capacity to endure. In ecology, the word describes how biological systems remain diverse and productive over time. In the field of IT, the competition, the changing ecosystem, and the fact that users (and society in general) are becoming increasingly reliant on software, require that the software must change and evolve over time. Yet, very few software organizations are equipped with the mindset, discipline, and practices to both manage and respond to this complexity and change. The answer to this complexity and the challenges placed on software organizations lies in designing sustainable solutions. IT solutions are largely influenced by the reductionist approach. To conceive sustainable IT solutions, there is a need for new \u201ctools of thought'. Systems thinking herald a new paradigm shift to the thinking and design process. This paper outlines key systems principles and their application for\u00a0\u2026", "num_citations": "4\n", "authors": ["401"]}
{"title": "User-Centered Design Journey for Pattern Development\n", "abstract": " Digital information is widely accessed through tangible mediums such as desktop, tablets, smart phones, and so on. It is important to make the digitized information easily as well as effectively perceivable and interactive, through user interfaces on these devices. There are several challenges and complexities involved in designing interfaces to ensure good user experience.", "num_citations": "2\n", "authors": ["401"]}
{"title": "Instantiating Product\u2010Specific Processes: A Framework for Product Quality Achievement\n", "abstract": " In current systems and software engineering practice, processes are defined generically at a level of abstraction above the specific product to be delivered. Processes capture engineering best practice but do not provide specific guidance on the technical work to be done to produce the product. Best practice guidance is sufficient where expert teams work on a stream of relatively similar problems, but in project organizations where the problems being addressed differ from project to project, particular quality concerns may be missed, leading to significant quality gaps that get identified and closed only late in the life cycle. We close this gap by deriving project\u2010specific processes from the generic organizational processes, instantiating the processes with the specific tasks needed to address the particular functional and quality concerns of each deliverable. Instantiation utilizes institutional knowledge from organizational\u00a0\u2026", "num_citations": "2\n", "authors": ["401"]}
{"title": "Quality management and software process engineering\n", "abstract": " Assurance of software quality has been supported by evolving testing practices and technologies surrounding it. Capability Maturity Model Integration (CMMI) on the other hand has prescribed processes and managerial practices for software development as a whole contributing to managerial practices with respect to quality assurance. However these practices do not provide guidance on engineering the software process (including all stages in software life cycle) so that people playing different roles in the process are aware of their contribution to software quality and assuring it through related activities and design. In this book chapter, we present an approach to engineer software process to assure software quality. Before we describe the approach, we present our notion of processes which forms basis for the approach.", "num_citations": "2\n", "authors": ["401"]}
{"title": "Patterns for Interactive Line Charts on Mobile Devices\n", "abstract": " Mobile devices are gaining prominence for a variety of activities. From casual browsing to complex tasks like online shopping and banking, people have started using mobiles for almost everything previously done on a desktop. As more and more tasks are shifting towards mobiles, it has become crucial to redesign desktop elements to fit and function consistently on mobile devices as well. One such element is data visualization. The process of designing visualizations for desktops is fairly matured; however, when it comes to mobile devices there are still a number of challenges faced. Most of these challenges revolve around the limited screen space and fewer conventional mediums of interactions offered by these devices. This paper presents a set of design patterns that help overcome some of the challenges faced when designing data visualizations. These patterns are designed for line charts on mobile devices\u00a0\u2026", "num_citations": "1\n", "authors": ["401"]}
{"title": "A Process Framework for Product Quality Achievement\n", "abstract": " In current software engineering practice, there is generally a rather limited connection between software processes and product quality, because the processes are defined at a level of abstraction above the specific product being delivered. This tutorial shows how that connection can be strengthened through the introduction of product-specific processes that identify and capture the collection of tasks needed to produce the specific product. It presents a process framework for product quality achievement that has recently been published as ISO/IEC TS 30103, and implemented successfully on several projects at an IT service organization.", "num_citations": "1\n", "authors": ["401"]}