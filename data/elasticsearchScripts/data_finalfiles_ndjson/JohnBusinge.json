{"title": "Co-evolution of the Eclipse SDK Framework and its Third-party Plug-ins\n", "abstract": " Today, when constructing a new software system, many developers build their systems on top of frameworks. Eclipse framework is one such popular and widely adopted framework that has been evolving for over a decade. Like many other evolving software systems, the Eclipse SDK framework has both stable and supported APIs (good interfaces) and unstable, discouraged and unsupported non-APIs (bad interfaces). However, despite being discouraged by Eclipse, in our experience, the usage of bad interfaces is not uncommon. In this thesis, by means of a series of empirical studies, we quantify/qualify some the challenges faced by Eclipse third-party plug-in developers in using the interfaces provided by the Eclipse SDK framework. Furthermore, we propose solutions to the identified challenges, like changes in development strategy to both interface providers and interface users. In particular, the lessons learned\u00a0\u2026", "num_citations": "4\n", "authors": ["761"]}
{"title": "Can we find stable alternatives for unstable Eclipse interfaces?\n", "abstract": " The Eclipse framework is a popular and widely adopted framework that has been evolving for over a decade. Like many other evolving software systems, the Eclipse framework provides both stable and supported interfaces (APIs) and unstable, discouraged, and unsupported interfaces (non-APIs). However, despite being discouraged by Eclipse, the usage of bad interfaces is not uncommon. Our previous research has confirmed that as Eclipse states, indeed APIs are stable while non-APIs are unstable. Applications using non-APIs face compatibility challenges in new Eclipse releases. Furthermore, our previous studies further revealed that the reason why application developers use the unstable interfaces is because they cannot find stable interfaces with the functionality that they require. Moreover, in a study we conducted, Eclipse application developers stated that they manually find the functionality from Eclipse\u00a0\u2026", "num_citations": "3\n", "authors": ["761"]}
{"title": "Co-evolution of the Eclipse framework and its third-party plug-ins\n", "abstract": " The research conducted in this thesis aims at quantifying/qualifying the challenges faced by software developers building systems on top of application frameworks, in general, and specifically, Eclipse. We have observed that the use of bad Eclipse interfaces, ie, unstable, discouraged and unsupported interfaces, results in incompatibilities of the systems built on top of Eclipse and the new releases of Eclipse. Despite major maintainability risks inherent to the use of bad interfaces, developers prefer to use them due to uniqueness of the functionality provided by these interfaces. Furthermore, we have observed that older bad interfaces are less likely to introduce incompatibilities. We have developed a statistical model predicting the likelihood of a system to remain compatible with a new release of Eclipse. Using this model both the system developers and the system users can decide whether to upgrade Eclipse to a new release.", "num_citations": "3\n", "authors": ["761"]}
{"title": "Tools, Architectures and Techniques for Monitoring Energy Efficiency in Computer Networks: State of the Art Survey\n", "abstract": " Energy efficiency in data center networks is increasingly becoming a gold standard for implementers. Energy costs are becoming high while performance is highly demanded. And while efforts are directed to the design of energy efficient networks, a number of open issues require addressing including: - scalability, fault tolerance, efficiency in performance though their presence does not outweigh the benefits of networks energy-aware. Truly, we observe that improvements in computer networks hardware performance comes with increasing energy consumption. To address these complementary challenges, this paper technically surveys existing, approaches and techniques (virtualization, energy-aware routing, among others), tools, and architectures employed in energy efficient computer networks. We have also provided a thorough review of data centre networks: server centric, switch centric and dual centric architectures with a view to inform developers and implementers of the overhead given architectural choice, identified challenges and opportunities. We conclude upon the survey that dual centric computer networks architectures have various nice properties for practical computer networks and provide flexible choices in designing of computer network architectures", "num_citations": "1\n", "authors": ["761"]}