{"title": "Goal-oriented requirements engineering: A guided tour\n", "abstract": " Goals capture, at different levels of abstraction, the various objectives the system under consideration should achieve. Goal-oriented requirements engineering is concerned with the use of goals for eliciting, elaborating, structuring, specifying, analyzing, negotiating, documenting, and modifying requirements. This area has received increasing attention. The paper reviews various research efforts undertaken along this line of research. The arguments in favor of goal orientation are first briefly discussed. The paper then compares the main approaches to goal modeling, goal specification and goal-based reasoning in the many activities of the requirements engineering process. To make the discussion more concrete, a real case study is used to suggest what a goal-oriented requirements engineering method may look like. Experience, with such approaches and tool support are briefly discussed as well.", "num_citations": "2616\n", "authors": ["1583"]}
{"title": "Requirements engineering: From system goals to UML models to software\n", "abstract": " 1. Understand the basic concepts related to requirements engineering (A2) 2. Recognise the importance of the requirement phase in the software development process (A1) 3. Recognise some requirements-related problems that can arise on a software project (A4) 4. Understand the different activities inherent to the requirements engineering discipline (A4) 5. List and Explain the different kinds of requirements (A4)", "num_citations": "1604\n", "authors": ["1583"]}
{"title": "Requirements engineering in the year 00: A research perspective\n", "abstract": " Requirements engineering (RE) is concerned with the identification of the goals to be achieved by the envisioned system, the operationalization of such goals into services and constraints, and the assignment of responsibilities for the resulting requirements to agents such as humans, devices, and software. The processes involved in RE include domain analysis, elicitation, specification, assessment, negotiation, documentation, and evolution. Getting high-quality requirements is difficult and critical. Recent surveys have confirmed the growing recognition of RE as an area of utmost importance in software engineering research and practice.", "num_citations": "1071\n", "authors": ["1583"]}
{"title": "Elaborating security requirements by construction of intentional anti-models\n", "abstract": " Caring for security at requirements engineering time is a message that has finally received some attention recently. However, it is not yet very clear how to achieve this systematically through the various stages of the requirements engineering process. The paper presents a constructive approach to the modeling, specification and analysis of application-specific security requirements. The method is based on a goal-oriented framework for generating and resolving obstacles to goal satisfaction. The extended framework addresses malicious obstacles (called anti-goals) set up by attackers to threaten security goals. Threat trees are built systematically through anti-goal refinement until leaf nodes are derived that are either software vulnerabilities observable by the attacker or anti-requirements implementable by this attacker. New security requirements are then obtained as countermeasures by application of threat\u00a0\u2026", "num_citations": "563\n", "authors": ["1583"]}
{"title": "Formal refinement patterns for goal-driven requirements elaboration\n", "abstract": " Requirements engineering is concerned with the identification of high-level goals to be achieved by the system envisioned, the refinement of such goals, the operationalization of goals into services and constraints, and the assignment of responsibilities for the resulting requirements to agents such as humans, devices and programs. Goal refinement and operationalization is a complex process which is not well supported by current requirements engineering technology. Ideally some form of formal support should be provided, but formal methods are difficult and costly to apply at this stage.This paper presents an approach to goal refinement and operationalization which is aimed at providing constructive formal support while hiding the underlying mathematics. The principle is to reuse generic refinement patterns from a library structured according to strengthening/weakening relationships among patterns. The\u00a0\u2026", "num_citations": "549\n", "authors": ["1583"]}
{"title": "Formal specification: a roadmap\n", "abstract": " Formal specifications have been a focus of software engineering research for many years and have been applied in a wide variety of settings. Their industrial use is still limited but has been steadily growing. After recalling the essence, role, usage, and pitfalls of formal specification, the paper reviews the main specification paradigms to date and discuss their evaluation criteria. It then provides a brief assessment of the current strengths and weaknesses of today's formal specification technology. This provides a basis for formulating a number of requirements for formal specification to become a core software engineering activity in the future.", "num_citations": "461\n", "authors": ["1583"]}
{"title": "Goal-directed elaboration of requirements for a meeting scheduler: Problems and lessons learnt\n", "abstract": " Recently a number of requirements engineering languages and methods have flourished that not only address 'what' questions but also 'why', 'who' and 'when' questions. The objective of the paper is twofold: to assess the strengths and weaknesses of one of these methodologies on a nontrivial benchmark; and to illustrate and discuss a number of challenging issues that need to be addressed for such methodologies to become effective in supporting real, complex requirements engineering tasks. The problem considered here is that of a distributed meeting scheduler system; the methodology considered is the KAOS goal directed language and method. The issues raised from this case study include goal identification, the \"deidelization\" of unachievable goals, the handling of interfering goals, the impact of early formal reasoning, the merits of early reuse of abstract descriptions and categories, requirements\u00a0\u2026", "num_citations": "363\n", "authors": ["1583"]}
{"title": "Goal-oriented requirements enginering: a roundtrip from research to practice [enginering read engineering]\n", "abstract": " The software industry is more than ever facing the challenge of delivering WYGIWYW software (what you get is what you want). A well-structured document specifying adequate, complete, consistent, precise, and measurable requirements is a critical prerequisite for such software. Goals have been recognized to be among the driving forces for requirements elicitation, elaboration, organization, analysis, negotiation, documentation, and evolution. Growing experience with goal-oriented requirements engineering suggests synergistic links between research in this area and good practice. We discuss one journey along this road from influencing ideas and research results to tool developments to good practice in industrial projects. On the way, we discuss some lessons learnt, obstacles to technology transfer, and challenges for better requirements engineering research and practice.", "num_citations": "362\n", "authors": ["1583"]}
{"title": "Inferring declarative requirements specifications from operational scenarios\n", "abstract": " Scenarios are increasingly recognized as an effective means for eliciting, validating, and documenting software requirements. The paper focuses on the use of scenarios for requirements elicitation and explores the process of inferring formal specifications of goals and requirements from scenario descriptions. Scenarios are considered as typical examples of system usage; they are provided in terms of sequences of interaction steps between the intended software and its environment. Such scenarios are in general partial, procedural, and leave required properties about the intended system implicit. In the end such properties need to be stated in explicit, declarative terms for consistency/completeness analysis to be carried out. A formal method is proposed for supporting the process of inferring specifications of system goals and requirements inductively from interaction scenarios provided by stakeholders. The\u00a0\u2026", "num_citations": "331\n", "authors": ["1583"]}
{"title": "From system goals to software architecture\n", "abstract": " Requirements and architecture are two essential inter-related products in the software lifecycle. Software architecture has long been recognized to have a profound impact on non-functional requirements about security, fault tolerance, performance, evolvability, and so forth. In spite of this, very few techniques are available to date for systematically building software architectures from functional and non-functional requirements so that such requirements are guaranteed by construction. The paper addresses this challenge and proposes a goal-oriented approach to architectural design based on the KAOS framework for modeling, specifying and analyzing requirements. After reviewing some global architectural decisions that are already involved in the requirements engineering process, we discuss our architecture derivation process. Software specifications are first derived from requirements. An abstract\u00a0\u2026", "num_citations": "288\n", "authors": ["1583"]}
{"title": "GRAIL/KAOS: an environment for goal-driven requirements engineering\n", "abstract": " The KAOS methodology provides a language and method for goal-driven requirements elaboration. GRAIL, is an environment under development to support the KAOS methodology. The GRAIL kernel combines a graphical view, a textual view, an abstract syntax view, and an object base view of specifications. GRAIL has been used to elicit and specify the requirements of several real, industrial projects.", "num_citations": "215\n", "authors": ["1583"]}
{"title": "Generating annotated behavior models from end-user scenarios\n", "abstract": " Requirements-related scenarios capture typical examples of system behaviors through sequences of desired interactions between the software-to-be and its environment. Their concrete, narrative style of expression makes them very effective for eliciting software requirements and for validating behavior models. However, scenarios raise coverage problems as they only capture partial histories of interaction among-system component instances. Moreover, they often leave the actual requirements implicit. Numerous efforts have therefore been made recently to synthesize requirements or behavior models inductively from scenarios. Two problems arise from those efforts. On the one hand, the, scenarios must be complemented with additional input such as state assertions along episodes or flowcharts on such episodes. This makes such techniques difficult to use by the nonexpert end-users who provide the scenarios\u00a0\u2026", "num_citations": "174\n", "authors": ["1583"]}
{"title": "Requirements engineering: from craft to discipline\n", "abstract": " Getting the right software requirements under the right environment assumptions is a critical precondition for developing the right software. This task is intrinsically difficult. We need to produce a complete, adequate, consistent, and well-structured set of measurable requirements and assumptions from incomplete, imprecise, and sparse material originating from multiple, often conflicting sources. The system we need to consider comprises software and environment components including people and devices.", "num_citations": "156\n", "authors": ["1583"]}
{"title": "From system goals to intruder anti-goals: attack generation and resolution for security requirements engineering\n", "abstract": " Caring for security at requirements engineering time is a message that has finally received some attention recently. However, it is not yet very clear how to achieve this systematically through the various stages of the requirements engineering process. We briefly introduce some of the requirements such a process should meet for high assurance to be provided from the resulting requirements product. A constructive approach to security requirements elicitation, modeling and analysis is then outlined as an attempt to address such meta-requirements. The approach is based on a framework we developed before for generating and resolving obstacles to requirements achievement. Our framework integrates intentional obstacles (or \u201cantigoals\u201d) set up by attackers to break security goals. Attack trees are derived systematically through anti-goal refinement until leaf nodes are reached that are software vulnerabilities observable by the attacker or antirequirements implementable by this attacker. New security requirements are derived by resolution of the attack trees generated thereby.", "num_citations": "145\n", "authors": ["1583"]}
{"title": "The KAOS project: Knowledge acquisition in automated specification of software\n", "abstract": " \u8ca2\u732e\u5ea6\u3068\u9867\u5ba2\u306e\u30cb\u30fc\u30ba\u306b\u95a2\u3059\u308b\u59a5\u5f53\u6027\u306e\u9593\u306e\u30b3\u30f3\u30d5\u30ea\u30af\u30c8\u691c\u51fa\u306b\u304a\u3051\u308b\u5fdc\u7528\u4e0a\u306e\u554f\u984c\u3068\u305d\u306e\u89e3\u6c7a\u624b\u6cd5", "num_citations": "143\n", "authors": ["1583"]}
{"title": "Scenarios, goals, and state machines: a win-win partnership for model synthesis\n", "abstract": " Models are increasingly recognized as an effective means for elaborating requirements and exploring designs. For complex systems, model building is far from an easy task. Efforts were therefore recently made to automate parts of this process, notably, by synthesizing behavior models from scenarios of interactions between the software-to-be and its environment. In particular, our previous interactive synthesizer generates labelled transition systems (LTS) from simple message sequence charts (MSC) provided by end-users. Compared with others, the synthesizer requires no additional input such as state or flowcharting information. User interactions consist in simple scenarios generated by the synthesizer that the user has to classify as example or counterexample of desired behavior. Experience with this approach showed that the number of such scenario questions may become fairly large in interaction-intensive\u00a0\u2026", "num_citations": "133\n", "authors": ["1583"]}
{"title": "Reasoning about alternative requirements options\n", "abstract": " This paper elaborates on some of the fundamental contributions made by John Mylopoulos in the area of Requirements Engineering. We specifically focus on the use of goal models and their soft goals for reasoning about alternative options arising in the requirements engineering process. A personal account of John\u2019s qualitative reasoning technique for comparing alternatives is provided first. A quantitative but lightweight technique for evaluating alternative options is then presented. This technique builds on mechanisms introduced by the qualitative scheme while overcoming some problems raised by it. A meeting scheduling system is used as a running example to illustrate the main ideas.", "num_citations": "124\n", "authors": ["1583"]}
{"title": "Analogical reuse of requirements frameworks\n", "abstract": " Reusing similar requirements fragments is one of the most promising ways to reduce the elaboration time and increase the requirements' quality. This paper investigates the application of analogical reasoning techniques to complete partial requirement specifications. A case base is assumed to be available; it contains requirements frameworks involving goals, constraints, objects, actions and agents from systems which have already been specified. We show how a rich requirements meta-model, coupled with an expressive formal assertion language, may increase the effectiveness of analogical reuse. An acquisition problem is first specified by a requirements engineer as a query formulated in the vocabulary of the specification fragments built so far. Source cases and partial mappings are found by query generalization followed by a search through the case base. Once analogies have been confirmed, mappings\u00a0\u2026", "num_citations": "91\n", "authors": ["1583"]}
{"title": "Goal-oriented requirements animation\n", "abstract": " Requirements engineers need to make sure that the requirements models and specifications they are building do accurately capture what stakeholders really want. Requirements animation has been recognized to be a promising approach to support this. The principle is to simulate an executable version of the requirements model and to visualize the simulation in some form appealing to stakeholders. Most animation tools available to date simulate operational models. Such models in general do not directly reflect the objectives, constraints and assumptions stated declaratively by stakeholders. It is also not possible to focus the animation on particular portions of a complex model relevant to some specific concern. The paper describes a tool aimed at overcoming such limitations by animating goal-oriented requirements models. The tool automatically generates parallel state machines from goal operationalizations\u00a0\u2026", "num_citations": "85\n", "authors": ["1583"]}
{"title": "The QSM algorithm and its application to software behavior model induction\n", "abstract": " This article presents a novel application of grammatical inference techniques to the synthesis of behavior models of software systems. This synthesis is used for the elicitation of software requirements. This problem is formulated as a deterministic finite-state automaton induction problem from positive and negative scenarios provided by an end user of the software-to-be. A query-driven state merging (QSM) algorithm is proposed. It extends the Regular Positive and Negative Inference (RPNI) and blue-fringe algorithms by allowing membership queries to be submitted to the end user. State merging operations can be further constrained by some prior domain knowledge formulated as fluents, goals, domain properties, and models of external software components. The incorporation of domain knowledge both reduces the number of queries and guarantees that the induced model is consistent with such knowledge. The\u00a0\u2026", "num_citations": "76\n", "authors": ["1583"]}
{"title": "Early verification and validation of mission critical systems\n", "abstract": " Complex software and systems are pervasive in today\u2019s world. In a growing number of fields they come to play a critical role. In order to provide a high assurance level, verification and validation (V&V) should be considered early in the development process. This paper shows how this can be achieved based on a goal-oriented requirements engineering framework which combines complementary semi-formal and formal notations. This allows the analyst to formalize only when and where needed and also preserves optimal communication with stakeholders and developers.               For the industrial application of the methodology, a supporting toolbox was developed. It consist of a number of tightly integrated tools for performing V&V tasks at requirements level. This is achieved through the use of (1) a roundtrip mapping between the requirements language and the specific formal languages used in the\u00a0\u2026", "num_citations": "65\n", "authors": ["1583"]}
{"title": "GRAIL/KAOS: an environment for goal driven requirements engineering\n", "abstract": " The KAOS methodology provides a language and method for goal-driven requirements elaboration. GRAIL is an environment under development to support the KAOS methodology. The GRAIL kernel combines a graphical view, a textual view, an abstract syntax view, and an object base view of specifications. GRAIL has been used to elicit and specify the requirements of several real, industrial projects.", "num_citations": "65\n", "authors": ["1583"]}
{"title": "Formal derivation of strongly correct concurrent programs\n", "abstract": " A method is described for deriving concurrent programs which are consistent with the problem specifications and free from deadlock and from starvation. The programs considered are expressed by nondeterministic repetitive selections of pairs of synchronizing conditions and subsequent actions. An iterative, convergent calculus is developed for synthesizing the invariant and synchronizing conditions which guarantee strong correctness. These conditions are constructed as limits of recurrences associated with the specifications and the actions. An alternative method for deriving starvationfree programs by use of auxiliary variables is also given. The applicability of the techniques presented is discussed through various examples; their use for verification purposes is illustrated as well.", "num_citations": "60\n", "authors": ["1583"]}
{"title": "Engineering requirements for system reliability and security\n", "abstract": " Requirements engineering (RE) is concerned with the elicitation of the objectives to be achieved by the system-to-be, the operationalization of such objectives into specifications of requirements and assumptions, the assignment of responsibilities for those specifications to agents such as humans, devices and software, and the evolution of such requirements over time and across system families. Getting high-quality requirements is difficult and critical. Poor requirements were recurrently recognized to be the major cause of system failures. The consequences of such failures may be especially harmful in mission-critical systems. This paper overviews a systematic, goal-oriented approach to requirements engineering for high-assurance systems. The target of this approach is a complete, consistent, adequate, and structured set of software requirements and environment assumptions. The approach is model-based and partly relies on the use of formal methods when and where needed for RE-specific tasks, notably, goal refinement and operationalization, analysis of hazards and threats, conflict management, and synthesis of behavior models.", "num_citations": "57\n", "authors": ["1583"]}
{"title": "Generic lifecycle support in the ALMA environment\n", "abstract": " ALMA is an environment kernel supporting the elaboration, analysis, documentation, and maintenance of the various products developed during an entire software lifecycle. Its central component is an environment database in which properties about software objects and relations are collected. Two kinds of tools are provided: high-level tools and syntax-directed tools. A basic feature of the ALMA kernel is its genericity. Tools of the first kind are parameterized on software lifecycle models while tools of the second kind are parameterized on formalisms. Versions of specific models and formalisms are generated by a meta-environment, which also generates the environment database structure tailored to the desired lifecycle model. The database support meta-system and the instatiated database support systems it generates are emphasized, including the architectural design decisions made and the mechanisms\u00a0\u2026", "num_citations": "50\n", "authors": ["1583"]}
{"title": "A probabilistic framework for goal-oriented risk analysis\n", "abstract": " Requirements completeness is among the most critical and difficult software engineering challenges. Missing requirements often result from poor risk analysis at requirements engineering time. Obstacle analysis is a goal-oriented form of risk analysis aimed at anticipating exceptional conditions in which the software should behave adequately. In the identify-assess-control cycles of such analysis, the assessment step is not well supported by current techniques. This step is concerned with evaluating how likely the obstacles to goals are and how likely and severe their consequences are. Those key factors drive the selection of most appropriate countermeasures to be integrated in the system goal model for increased completeness. Moreover, obstacles to probabilistic goals are currently not supported; such goals prescribe that some corresponding target property should be satisfied in at least X% of the cases. The\u00a0\u2026", "num_citations": "48\n", "authors": ["1583"]}
{"title": "Generating obstacle conditions for requirements completeness\n", "abstract": " Missing requirements are known to be among the major causes of software failure. They often result from a natural inclination to conceive over-ideal systems where the software-to-be and its environment always behave as expected. Obstacle analysis is a goal-anchored form of risk analysis whereby exceptional conditions that may obstruct system goals are identified, assessed and resolved to produce complete requirements. Various techniques have been proposed for identifying obstacle conditions systematically. Among these, the formal ones have limited applicability or are costly to automate. This paper describes a tool-supported technique for generating a set of obstacle conditions guaranteed to be complete and consistent with respect to the known domain properties. The approach relies on a novel combination of model checking and learning technologies. Obstacles are iteratively learned from\u00a0\u2026", "num_citations": "48\n", "authors": ["1583"]}
{"title": "Goal-oriented requirements engineering: From system objectives to UML models to precise software specifications\n", "abstract": " This tutorial presents a comprehensive overview of state-of-the-art techniques for eliciting, modeling, specifying, analyzing and documenting high-quality system requirements.", "num_citations": "48\n", "authors": ["1583"]}
{"title": "Reasoning about confidentiality at requirements engineering time\n", "abstract": " Growing attention is being paid to application security at requirements engineering time. Confidentiality is a particular subclass of security concerns that requires sensitive information to never be disclosed to unauthorized agents. Disclosure refers to undesired knowledge states of such agents. In previous work we have extended our requirements specification framework with epistemic constructs for capturing what agents may or may not know about the application. Roughly, an agent knows some property if the latter is found in the agent's memory. This paper makes the semantics of such constructs further precise through a formal model of how sensitive information may appear or disappear in an agent's memory. Based on this extended framework, a catalog of specification patterns is proposed to codify families of confidentiality requirements. A proof-of-concept tool is presented for early checking of requirements\u00a0\u2026", "num_citations": "47\n", "authors": ["1583"]}
{"title": "On an extension of Dijkstra's semaphore primitives\n", "abstract": " The problem of ensuring mutual exclusion and synchronizztion in a sys: tit (f k. oop mtiry, WY..; en tia? processes has been nfceli solved by Dijkstra\u2019s well-known P-and v-opcrstiorls on se~;;~~: I)~-~ c~~ variables; 3, 4, S 1. These primitives have been defined at such an elementary jevel that they cow 12 class;~ k I; Mems the limi: s of b hirii h;., vc to the authors\u201d experience not yet become apt. trcnt.At a higher level, one c-in introduce more 4~: ate upeleI \u201c\u20181~ 0:; which so fk: w expressible in term s of P-and Koperotitns by means of ti more or less coax I 4fb: ed bl:.. Gk _ 1 code and which tray be tailored 0 spi; ific C&M of problems; as 8 result solutions to problems u 4 \u2018E* L 3: m cbses may be mart\u201d\u201d easily obtained owing to a more", "num_citations": "46\n", "authors": ["1583"]}
{"title": "Analyzing critical process models through behavior model synthesis\n", "abstract": " Process models capture tasks performed by agents together with their control flow. Building and analyzing such models is important but difficult in certain areas such as safety-critical healthcare processes. Tool-supported techniques are needed to find and correct flaws in such processes. On another hand, event-based formalisms such as Labeled Transition Systems (LTS) prove effective for analyzing agent behaviors. The paper describes a blend of state-based and event-based techniques for analyzing task models involving decisions. The input models are specified as guarded high-level message sequence charts, a language allowing us to integrate material provided by stakeholders such as multi-agent scenarios, decision trees, and flowchart fragments. The input models are compiled into guarded LTS, where transition guards on fluents support the integration of state-based and event-based analysis. The\u00a0\u2026", "num_citations": "44\n", "authors": ["1583"]}
{"title": "Assessing requirements-related risks through probabilistic goals and obstacles\n", "abstract": " Requirements completeness is among the most critical and difficult software engineering challenges. Missing requirements often result from poor risk analysis at requirements engineering time. Obstacle analysis is a goal-oriented form of risk analysis aimed at anticipating exceptional conditions in which the software should behave adequately. In the identify-assess-control cycles of such analysis, the assessment step is not well supported by existing techniques. This step is concerned with evaluating how likely the obstacles to goals are and how likely and severe their consequences are. Those key factors drive the selection of most appropriate countermeasures to be integrated in the system goal model for increased completeness. Moreover, obstacles to probabilistic goals are currently not supported; such goals prescribe that some corresponding target property should be satisfied in at least X\u00a0% of the\u00a0\u2026", "num_citations": "43\n", "authors": ["1583"]}
{"title": "Divergent views in goal-driven requirements engineering\n", "abstract": " This paper outlines our recent efforts in (i) modelling views associated with different actors involved in the requirements elaboration process,(ii) identifying different kinds of inconsistencies that may arise among such views,(iii) detecting inconsistencies of those various kinds, and (iv) resolving such inconsistencies. As in [Jac95], our specification language is formal; but it is a rich, multi-paradigm language for requirements specification. In particular, the explicit modelling and formalization of goals allow conflicts among requirements to be handled at their root, that is, at goal level [Rob89]. Views in our approach are also explicitly linked to their owners. Unlike [Nus93], the specification and assessment process models are kept separate from product-level views and defined at a meta level. In our approach, views may also contain formal specifications.", "num_citations": "40\n", "authors": ["1583"]}
{"title": "Building formal requirements models for reliable software\n", "abstract": " Requirements engineering (RE) is concerned with the elicitation of the goals to be achieved by the system envisioned, the operationalization of such goals into specifications of services and constraints, and the assignment of responsibilities for the resulting requirements to agents such as humans, devices, and software. Getting high-quality requirements is difficult and critical. Recent surveys have confirmed the growing recognition of RE as an area of primary concern in software engineering research and practice.               The paper first briefly introduces RE by discussing its main motivations, objectives, activities, and challenges. The role of rich models as a common interface to all RE processes is emphasized. We review various techniques available to date for system modeling, from semi-formal to formal, and discuss their relative strengths and weaknesses when applied during the RE stage of the\u00a0\u2026", "num_citations": "38\n", "authors": ["1583"]}
{"title": "Runtime monitoring and resolution of probabilistic obstacles to system goals\n", "abstract": " Software systems are deployed in environments that keep changing over time. They should therefore adapt to changing conditions to meet their requirements. The satisfaction rate of these requirements depends on the rate at which adverse conditions prevent their satisfaction. Obstacle analysis is a goal-oriented form of risk analysis for requirements engineering (RE), whereby obstacles to system goals are identified, assessed, and resolved through countermeasures. The selection of effective countermeasures relies on environment assumptions and on the assessed likelihood and criticality of the corresponding obstacles. Those various factors estimated at RE time may, however, evolve at system runtime. To meet the system\u2019s goals under changing conditions, this article proposes to defer obstacle resolution to system runtime. Techniques are presented for monitoring obstacle satisfaction rates; deciding when\u00a0\u2026", "num_citations": "28\n", "authors": ["1583"]}
{"title": "Early verification and validation of mission critical systems\n", "abstract": " Our world is increasingly relying on complex software and systems. In a growing number of fields such as transportation, finance, telecommunications, medical devices, they now play a critical role and require high assurance. To achieve this, it is imperative to produce high quality requirements. The KAOS goal-oriented requirements engineering methodology provides a rich framework for requirements elicitation and management of such systems.This paper demonstrates the practical industrial application of that methodology. The non-critical parts are modelled semi-formally using a graphical language for goal-oriented requirements engineering. When and where needed (ie. for critical parts of a system) the model can be specified at formal level using a real-time temporal logic. That formal level seamlessly extends the semi-formal level which can also help hide the formality for the non-specialist.To ensure at an\u00a0\u2026", "num_citations": "26\n", "authors": ["1583"]}
{"title": "A reflective approach to process model customization, enactment and evolution\n", "abstract": " Software processes are enacted instances of process models. Process models are themselves instances of process meta-models that provide the various abstractions in terms of which process models can be described. This paper introduces a unified framework for software process modeling, enactment and evolution. The approach supports the customization/evolution of a process model and of its underlying meta-model. The process model and its meta-model are both described as specializations of kernel object classes using an object-oriented definition toolkit. Classes at one level become object instances at the upper level. The customization/evolution of models and meta-models is supported in a uniform way by creation/modification of kernel objects and by specialization of their classes. The overall approach is illustrated through a number of simple examples. Our definition toolkit has been written in Standard\u00a0\u2026", "num_citations": "22\n", "authors": ["1583"]}
{"title": "Learning machine learning\n", "abstract": " Learning machine learning | From natural language processing to logic for expert systems ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksFrom natural language processing to logic for expert systems: a logic based approach to artificial intelligenceLearning machine learning chapter Learning machine learning Share on Author: Axel van Lamsweerde profile image Axel van Lamsweerde View Profile Authors Info & Affiliations Publication: From natural language processing to logic for expert systems: a logic based approach to artificial intelligenceJanuary 1991 Pages 263\u2013356 5citation 0 Downloads Metrics Total Citations5 Total \u2026", "num_citations": "20\n", "authors": ["1583"]}
{"title": "Handling knowledge uncertainty in risk-based requirements engineering\n", "abstract": " Requirements engineers are faced with multiple sources of uncertainty. In particular, the extent to which the identified software requirements and environment assumptions are adequate and sufficiently complete is uncertain; the extent to which they will be satisfied in the system-to-be is uncertain; and the extent to which obstacles to their satisfaction will occur is uncertain. The resolution of such domain-level uncertainty requires estimations of the likelihood that those different types of situations may or may not occur. However, the extent to which the resulting estimates are accurate is uncertain as well. This meta-level uncertainty limits current risk-based methods for requirements engineering. The paper introduces a quantitative approach for managing it. An earlier formal framework for probabilistic goals and obstacles is extended to explicitly cope with uncertainties about estimates of likelihoods of fine-grained\u00a0\u2026", "num_citations": "19\n", "authors": ["1583"]}
{"title": "Integrating exception handling in goal models\n", "abstract": " Missing requirements are known to be among the major sources of software failure. Incompleteness often results from poor anticipation of what could go wrong with an over-ideal system. Obstacle analysis is a model-based, goal-anchored form of risk analysis aimed at identifying, assessing and resolving exceptional conditions that may obstruct the behavioral goals of the target system. The obstacle resolution step is obviously crucial as it should result in more adequate and more complete requirements. In contrast with obstacle identification and assessment, however, this step has little support beyond a palette of resolution operators encoding tactics for producing isolated countermeasures to single risks. In particular, there is no single clue to date as to where and how such countermeasures should be integrated within a more robust goal model. To address this problem, the paper describes a systematic technique\u00a0\u2026", "num_citations": "19\n", "authors": ["1583"]}
{"title": "The kernel of a generic software development environment\n", "abstract": " Software development environments are currently being given more and more attention. However, in spite of definite needs and recommendations which have been expressed rather clearly (see, eg,[Soft8l],[Ost81]), it seems that many environments that have emerged recently are still mainly concerned with a single step of the sotware lifecycle (eg, requirements specification, programming, or maintenance), with a single type of development activity (eg, elaboration of a software product, documentation, validation/evaluation, or project management), or with a single functionality (eg, syntax-directed editing, version control, or support for quick prototyping).This paper presents an overview of a joint university-industry effort aimed at putting advanced software environment technology into production use while going beyond the limits suggested hereabove. Our project started in 1983 from a careful analysis of existing\u00a0\u2026", "num_citations": "17\n", "authors": ["1583"]}
{"title": "Making specification processes explicit\n", "abstract": " Making Specification Processes Explicit | DIAL.pr - BOREAL Skip to main content User menu Cart Login Home DIAL.pr - BOREAL Search form Search Home All Publications Export Help You are here Home\u00bb Making Specification Processes Explicit S'identifier sur le proxy UCLouvain : https://proxy.bib.ucl.ac.be/proxy-dial S'identifier sur le proxy Saint-Louis : https://usaintlouis.idm.oclc.org/login?url=https://dial.uclouvain.be Making Specification Processes Explicit Primary tabs Voir(active tab) Fichiers attach\u00e9s Validit\u00e9 FNRS Dubois, Eric van Lamsweerde, Axel [UCL] metadata Document type Communication \u00e0 un colloque (Conference Paper) \u2013 Pr\u00e9sentation orale avec comit\u00e9 de s\u00e9lection Publication date 1987 Language Anglais Conference \"The 4th International Workshop on Software Specification and Design (IWSSD-4)\", Monterey, California, USA (du 03/04/1987 au 04/04/1987) Peer reviewed yes Host document \"\u2026", "num_citations": "15\n", "authors": ["1583"]}
{"title": "FAUST: formal analysis using specification tools\n", "abstract": " Developing high quality requirements specifications is a necessity for a number of critical industrial systems. An integrated toolset, called FAUST, is proposed to assist in the production of such specifications based on the KAOS goal-driven methodology. The tool suite is designed to naturally extend the existing semi-formal modeling framework and to allow formalizing only the relevant critical parts. Two tools from the toolset are presented. The requirements checker performs KAOS goal-level checks using existing model checking technology. The requirements animator produces domain-level animations hiding formality even further.", "num_citations": "14\n", "authors": ["1583"]}
{"title": "Constructing correct and efficient concurrent programs\n", "abstract": " A method is presented for programming correct and efficient cooperation in a set of sequential modules, on the basis of an invariant assertion, by means of formal and static deductions. For each sequential module, the pre-and post-assertions are computed from the invariant. Whereas the pre-assertion gives the synchronizing condition required before execution in order to preserve the invariant, the post-assertion expresses the \u201ccontribution\u201d of this execution. Other assertions, called firing conditions, are derived which connect that contribution to the needs of waiting processes as expressed in their synchronizing conditions. A sequential module and its synchronizing and firing conditions are then integrated in a high-level synchronizing construct close to conditional critical regions, but allowing explicit control over the synchronizing conditions to be reevaluated at the exit for process resumption. Three levels of static\u00a0\u2026", "num_citations": "11\n", "authors": ["1583"]}
{"title": "Modeling car crash management with KAOS\n", "abstract": " Getting the right software requirements under the right environment assumptions is a critical precondition for developing the right software. KAOS is a goal-driven, model-based approach for elaborating a complete, adequate, consistent, and well-structured set of measurable software requirements and environment assumptions. The modeling language and method cover the intentional, structural, functional, and behavioral facets of the target system. Declarative and operational sub-models are integrated. Semi-formal and formal techniques complement each other for model construction, analysis and evolution. They support early and incremental reasoning on partial models for a variety of purposes including goal satisfaction arguments, property checks, animations, the evaluation of alternative options, the analysis of risks, threats and conflicts, and traceability management. The paper illustrates the modeling\u00a0\u2026", "num_citations": "10\n", "authors": ["1583"]}
{"title": "Current issues in expert systems\n", "abstract": " Early work in artificial intelligence was mainly concerned with general problem-solving procedures. The application of these procedures to large\" real world\" problems was at first unsuccessful. Major progress was later made by allowing the problem-solving process to make use of separate, explicit sources of knowledge, concerning highly specific problem domains. This gave rise to a first generation of expert knowledge-based systems. The next step was to improve the power and flexibility of the various knowledge-processing techniques and to develop effective software and hardware architectures to implement them efficiently. This major challenge remains at the core of many of the\" fifth-generation\" computer projects.", "num_citations": "10\n", "authors": ["1583"]}
{"title": "Analyzing critical decision-based processes\n", "abstract": " Decision-based processes are composed of tasks whose application may depend on explicit decisions relying on the state of the process environment. In specific domains such as healthcare, decision-based processes are often complex and critical in terms of timing and resources. The paper presents a variety of tool-supported techniques for analyzing models of such processes. The analyses allow a variety of errors to be detected early and incrementally on partial models, notably: inadequate decisions resulting from inaccurate or outdated information about the environment state; incomplete decisions; non-deterministic task selections; unreachable tasks along process paths; and violations of non-functional process requirements involving time, resources or costs. The proposed techniques are based on different instantiations of the same generic algorithm that propagates decorations iteratively through the process\u00a0\u2026", "num_citations": "9\n", "authors": ["1583"]}
{"title": "From worlds to machines\n", "abstract": " This paper provides a personal account of some of the foundational contributions made by Michael Jackson in the area of Requirements Engineering. We specifically focus on the relationship between problem worlds and machine solutions, and try to connect each contribution to related efforts while suggesting possible continuations. The anchoring of machine solutions on problem worlds is first considered together with means for delimiting, structuring, and characterizing problem worlds. The elaboration of machine specifications from world requirements is then discussed, including the use of satisfaction arguments, the questioning of requirements and assumptions, and the reuse of problem schemas. A car handbrake control system is used as a running example to illustrate the main ideas.", "num_citations": "9\n", "authors": ["1583"]}
{"title": "Goal-oriented design of domain control panels\n", "abstract": " Goal-oriented methodologies have demonstrated some adequacy for modelling composite systems, from high level desired properties to operational requirements on responsible agents. This paper shows how to derive a user interface for human agents from such a model, especially with respect to the monitor and control capabilities of those agents. A goal-oriented widget taxonomy was elaborated in order to facilitate selecting widgets that are appropriate for each element of the underlying domain model. A user-friendly tool for building user interfaces, supporting the retrieval of adequate components and their fine tuning at a graphical level, was developed and deployed on the animator of the Objectiver/FAUST requirements toolbox.", "num_citations": "9\n", "authors": ["1583"]}
{"title": "Deriving Architectural Descriptions from Goal-Oriented Requirements Models\n", "abstract": " The problem of building an architecture that satisfies the software requirements is obviously central to software engineering. By and large such building is an ad hoc, largely informal, and unsystematic process to date. One strand of research to address this challenge is based on architecture derivation from goaloriented requirements models. This paper builds on previous efforts in this direction and proposes a more formal approach to architectural derivation. The structural and behavioral parts of a formal dataflow architecture are derived first by use of transformation rules applied to the requirements model. The dataflow architecture is then refined by use of formal refinement patterns applied to components and connectors. Each refinement pattern is associated with a specific class of non-functional goal whose instances are found in the requirements model. The source and target languages are the KAOS requirements language and Wright architecture description language, respectively. A power plant supervision system is used as a case study to illustrate the main steps of the derivation.", "num_citations": "9\n", "authors": ["1583"]}
{"title": "Transformation operators for easier engineering of medical process models\n", "abstract": " The need for high-quality models is increasingly recognized for driving and documenting complex medical processes such as cancer therapies. A medical environment for such processes has to deal with a great multiplicity of dimensions such as different pathologies, different hospital departments, different agents with different concerns and expertise, different resources with a wide spectrum of capabilities, and so forth. The variety of needs along those multiple dimensions calls for multiple, complementary and consistent facets of the composite process model, each addressing a specific dimension. Building multi-dimensional process models is in our experience hard and error-prone. The paper describes various operators for composing process model facets in a coherent way or, conversely, for decomposing process models into specific facets that abstract from details irrelevant to a specific dimension. These\u00a0\u2026", "num_citations": "8\n", "authors": ["1583"]}
{"title": "Grail/kaos: An environment for goal-driven requirements analysis, integration and layout\n", "abstract": " This work presents state-of-the-art results on one of the complex datasets; known as KHATT. The KHATT dataset shows complex patterns for Arabic handwritten text. We have achieved better performance in terms of Character Recognition by implementing the most successful deep learning approach based on Long Short-Term Memory (LSTM) networks. Connectionist Temporal Classification (CTC) is used as a final layer to align the predicted labels according to the most probable path. The application of MDLSTM scans text-lines in all direction to cover fine inflammation in horizontal and vertical direction. Further, we apply pre-processing on text-lines to prune extra white regions, and de-skew the text lines for accurate height normalization. The deep learning and pre-processing allow us to improve results from 46.13% to 75.8%.", "num_citations": "7\n", "authors": ["1583"]}
{"title": "A reuse-based approach to security requirements engineering\n", "abstract": " The paper presents a reuse-based approach to the modeling, specification and analysis of application-specific security requirements. The method is based on a goaloriented framework that addresses malicious goals (called anti-goals) set up by attackers to threaten security goals. Threat tree fragments are built systematically through specializations of attack patterns. Attack patterns abstract attacker\u2019s malicious goals for known attacks. Once specialized to a specific vocabulary, they are useful to build a complete threat tree. Indeed, the specialized attack pattern is then further refined until leaf nodes are derived that are either software vulnerabilities observable by the attacker or anti-requirements implementable by this attacker. New security requirements are then obtained as specializations of reusable countermeasures associated with the attack pattern. The method is illustrated with an attack pattern for replay attacks that is specialized in an e-commerce system and a mailing system.", "num_citations": "6\n", "authors": ["1583"]}
{"title": "Risk-driven Engineering of Requirements for Dependable Systems.\n", "abstract": " Engineering the right software requirements under the right environment assumptions is a critical precondition for developing the right software. Requirements completeness, in particular, is known to be among the most critical and difficult software engineering challenges. Missing requirements often result from poor risk analysis at requirements engineering time. A natural inclination to conceive over-ideal systems prevents adverse conditions from being properly identified and, when likely and critical, resolved through adequate countermeasure requirements.The paper overviews a model-based approach for integrating risk analysis in requirements engineering. The approach is aimed at anticipating exceptional conditions in which the target system should behave adequately. In a goaloriented modeling framework, obstacles are introduced as as preconditions for the non-satisfaction of system goals. Following the identify-assess-control cycle of risk analysis, the paper reviews a variety of formal techniques available for generating obstacles, for assessing their likelihood and the severity of their consequences, and for resolving them through countermeasures whose integration in the system model results in increased requirements completeness.", "num_citations": "6\n", "authors": ["1583"]}
{"title": "Goal models as architectural knowledge\n", "abstract": " Goal models are developed in the intertwined phases of requirements engineering and early architectural design. They relate the goals of a software-intensive system, the agents forming the software and its environment, and the objects and tasks such agents control in order to operationalize the goals. We briefly discuss why and how goal models provide a key asset for documenting the contextual and derivational aspects of a software architecture.", "num_citations": "6\n", "authors": ["1583"]}
{"title": "Adapting requirements models to varying environments\n", "abstract": " The engineering of high-quality software requirements generally relies on properties and assumptions about the environment in which the software-to-be has to operate. Such properties and assumptions, referred to as environment conditions in this paper, are highly subject to change over time or from one software variant to another. As a consequence, the requirements engineered for a specific set of environment conditions may no longer be adequate, complete and consistent for another set. The paper addresses this problem through a tool-supported requirements adaptation technique. A goal-oriented requirements modelling framework is considered to make requirements' refinements and dependencies on environment conditions explicit. When environment conditions change, an adapted goal model is computed that is correct with respect to the new environment conditions. The space of possible adaptations is\u00a0\u2026", "num_citations": "5\n", "authors": ["1583"]}
{"title": "Attack Patterns for Security Requirements Engineering\n", "abstract": " The importance of security concerns at requirements engineering time is increasingly recognized. However, little support is available to help requirements engineers elaborate adequate, consistent, and complete security requirements. The paper presents a reuse-based approach for modeling, specifying, and analyzing application-specific security requirements. The method is based on a goal-oriented framework that addresses malicious goals (called anti-goals) set up by attackers to threaten security goals. Threat trees are built systematically through specializations of attack patterns. Such patterns abstract the attacker\u2019s anti-goals for known attacks. Once specialized to the specific vocabulary of the application, the patterns are further refined until finegrained anti-goals are obtained that are either software vulnerabilities observable by the attacker or anti-requirements implementable by this attacker. New security requirements are then obtained as specializations of generic countermeasures associated with the attack pattern. The method is illustrated with an attack pattern for replay attacks and its specializations to an e-commerce system and a mailing system.", "num_citations": "5\n", "authors": ["1583"]}
{"title": "A guided tour through the ICARUS project\n", "abstract": " An architecture's lifecycle includes death--it is certainly possible to go on using one past the point where it is valuable. Is the technical architecture or the agreement to use one the fundamental basis? Where in the organizational hierarchy do we begin introduction of architecture-based ways of working?", "num_citations": "5\n", "authors": ["1583"]}
{"title": "Process execution and enactment in medical environments\n", "abstract": " Process models are increasingly recognized as an important asset for higher-quality healthcare. They may be used for analyzing, documenting, and explaining complex medical processes to the stakeholders involved in the process. Models may also be used for driving single processes or for orchestrating multiple ones. Model-driven software technologies therefore appear promising. In particular, process enactment provides software-based support for executing operational processes. A wide variety of possible enactment schemes are available in medical environments, e.g., to maintain daily medical worklists, to issue warnings or reminders in specific process states, to schedule tasks competing for resources, to provide on-the-fly advice in case of staff unavailability, and so forth. Such variety of possible process enactments calls for a common conceptual framework for defining, comparing, classifying, and\u00a0\u2026", "num_citations": "4\n", "authors": ["1583"]}
{"title": "Towards a deductive approach to information system specification and design\n", "abstract": " One may thus write good or bad specifications. The following qualities might be identified, some of", "num_citations": "4\n", "authors": ["1583"]}
{"title": "Active software objects in a knowledge-based lifecycle support environment\n", "abstract": " Active software objects in a knowledge-based lifecycle support environment | DIAL.pr - BOREAL Skip to main content User menu Cart Login Home DIAL.pr - BOREAL Search form Search Home All Publications Export Help You are here Home\u00bb Active software objects in a knowledge-based lifecycle support environment Acc\u00e8s \u00e0 distance en utilisant le proxy de l'UCL : https://proxy.bib.ucl.ac.be/proxy-dial Active software objects in a knowledge-based lifecycle support environment Primary tabs Voir(active tab) Fichiers attach\u00e9s Validit\u00e9 FNRS van Lamsweerde, Axel [UCL] metadata Document type Contribution \u00e0 ouvrage collectif (Book Chapter) \u2013 Chapitre Publication date 1992 Language Anglais Host document Dino Mandrioli (Author, Editor), Bertrand Meyer (Editor) ; \"Advances in Object-Oriented Software Engineering\"- p. 82-114 (ISBN : 978-0-1300-6578-0) Publisher Prentice Hall Publication status Publi\u00e9 Affiliation \u2026", "num_citations": "3\n", "authors": ["1583"]}
{"title": "Generating Process Models in Multi-View Environments.\n", "abstract": " The role of high-quality models is increasingly recognized for driving and documenting processes in safety-critical domains such as medical processes. In general, the environment of a complex process has to deal with multiple views referring to different concerns, agents, resources, locations, and so forth. The variety of needs along those views calls for multiple, complementary and consistent facets of a composite process model, where each facet addresses a specific view. Building multi-view process models is in our experience hard and error-prone. To address this challenge, the paper describes formal operators for composing process model facets in a coherent way and, conversely, for decomposing process models into specific facets that abstract from details irrelevant to a specific view. These operators are grounded on the formal trace semantics provided by our process language and its supporting analysis toolset. The paper shows how these operators are automated and reports on their use in a real case study of model construction for a particle-therapy center.", "num_citations": "2\n", "authors": ["1583"]}
{"title": "Building Multi-View System Models for Requirements Engineering\n", "abstract": " Requirements engineering techniques are faced with a recurring problem of focus and structure [1]. Elicitation techniques raise the problem of focussing and structuring elicitation sessions and artefacts. Evaluation techniques raise the problem of identifying and comparing items at a common level of abstraction and granularity for risk analysis, conflict management, option selection, or prioritization.", "num_citations": "2\n", "authors": ["1583"]}
{"title": "Engineering Requirements for Mission-Critical Software Systems\n", "abstract": " Engineering Requirements for Mission-Critical Software Systems Page 1 Axel van Lamsweerde Engineering Requirements for Mission-Critical Systems Belgian Francqui Chair 2006-2007 Vrije Universiteit Brussel \u00a9 A. van Lamsweerde 1 Engineering Requirements for Mission-Critical Software Systems Axel van Lamsweerde University of Louvain B-1348 Louvain-la-Neuve avl@info.ucl.ac.be Belgian Francqui Chair 2006-2007 Vrije Universiteit Brussel \u2013 Goal-oriented: to ensure that requirements meet system objectives -- including safety, security \u2013 Incremental: for early analysis of partial models \u2013 Constructive: for analyst guidance \u2013 Model-based: for abstraction & structure multiple models: for capturing multiple facets \u2013 Mix declarative and operational styles as needed \u2013 Formal when and where needed, but lightweight Requirements on RE method ... Page 2 Axel van Lamsweerde Engineering Requirements for \u2026", "num_citations": "2\n", "authors": ["1583"]}
{"title": "Succeedings of the seventh international workshop on software specification and design\n", "abstract": " oc~ Oz c~ .~ ,~ ~'~ ..~ Page 1 ACM SIGSOFT Softwaze Engineering Notes vol 19 no 3 3uly 1994 Page 18 ~.~. o ~ o :.u ~ m \"~ ~ ~ o m~';~ \"~ -. .~ ~ . ..~ .3 ~ oa~=.a ~ 9 ~ 8 . ~ c~.~\"~'~ . . . . ~E-~ ~ ~ \"., o~:' ' \"~-~\" --.:'1 ~ g..~ Oo:. ,, ~-~=~ : -.. ~ ,~ ~:~ o ~ . ~ ~: ~ ~ ~ o~ ~.~.: ~ ~ ;~.,~ ~ ~\u00a2 ~ ~c~ : u : ~.----=~~;~'- -o'= ,-~=~.~e~..~,~o~E ~ ~ \" . ~ ,~-~..~o=~o.~ .<~ . ~. ~ ~ ~ o ~ ~,~ o ,~,~ ~.-= g ! g = >'~ C~ c~ z o c~ ~0 ~ ~ Oz c~ .~ z ~ ,~ OZ m 0 z g ~'~ \" o o ~ . , ~ ~.~ =....~.~ o~ ~ ~ ~ ~ ~: .~.C o~ ~ ~.~ ~'~-~ 3c~ o>,y.\" ~ = mo . -...~- - ..a ~ ~a ~. o 0 o ~ =r - .~ ~ ~~.~.~=o~ ~\"~=-~'~-~ ~ - . o ~,l \"1 o I ~J ~'q~ ~ ~ ~ I. .~;.~ \u2022 ~ ,~o ~~.~=~.:.~,'~=~.o~= .~ - .. o~ ~'~ .rN \" o o ~ 1~., ~-= . co I ..~ , =~ ~ B'~ \"~ ~.'~ o o ~.~ 0 I:l. \"G a ..~ g.~g ,=g ,.~ Page 2 ACM SIGSOFT Software Engineering Notes vol 19 no 3 July 1994 Page 19 . -'~',-_~==~,~.- 'oe-~ ~-~=.~3~-~ -=~.~-~.'~.~, =~--== ~o ~ -2 uu == ~ . ~ \" ~oo ~ = ..o-- m ~ ~.u~.~ ~I~ = - ~ : .= ~ ~ = , =.~.~ - ..., ._~ o ~.\u2026", "num_citations": "2\n", "authors": ["1583"]}
{"title": "Model engineering for model-driven engineering\n", "abstract": " The effectiveness of model-driven engineering relies on our ability to build high-quality models. This task is intrinsically difficult. We need to produce sufficiently complete, adequate, consistent, and well-structured models from incomplete, imprecise, and sparse material originating from multiple, often conflicting sources. The system we need to consider in the early stages comprises software and environment components including people and devices.", "num_citations": "1\n", "authors": ["1583"]}
{"title": "COOL: a Car pOOLing support system\n", "abstract": " Traffic congestion in the United States wastes 2.8 billion gallons of gas and significantly increases CO2 emissions every year. It causes more than 3.7 billion hours in travel delays. According to the US Census Bureau, the use of cars by single persons has increased since 1980. In 2008, 76 percent of drivers were in single-occupancy vehicles (SOV) compared to 64 percent in 1980. In addition, SOVs produce 75 percent of all transportation emissions [TSA08].In a city like Brussels, cars produce 70 percent of all transportation emissions. The average car occupancy rate has decreased by 5% between 1990 and 2007, with currently 1.28 person by car. Individual cars are estimated there to cause 532 kilotons of CO2 every year, that is, 15% of total CO2 emissions. With an average of 2 persons by car, the contribution to CO2 emissions would drop to 340 kilotons, that is, 10% of total CO2 emissions; with an average of 4\u00a0\u2026", "num_citations": "1\n", "authors": ["1583"]}
{"title": "Building Formal Models for Software Requirements.\n", "abstract": " Requirements engineering (RE) is concerned with the elicitation of the goals to be achieved by the system envisioned, the operationalization of such goals into specifications of services and constraints, and the assignment of responsibilities for the resulting requirements to agents such as humans, devices, and software. Getting high-quality requirements is difficult and critical. Recent surveys have confirmed the growing recognition of RE as an area of primary concern in software engineering research and practice.The talk will first briefly introduce RE by discussing its main motivations, objectives, activities, and challenges. The role of rich models as a common interface to all RE processes will be emphasized. We will then review various techniques available to date for system modeling, from semi-formal to formal, with the aim of showing their relative strengths and weaknesses when applied during the RE stage of\u00a0\u2026", "num_citations": "1\n", "authors": ["1583"]}
{"title": "Deadlock prevention in real-time systems\n", "abstract": " Deadlock prevention in real-time systems | DIAL.pr - BOREAL Skip to main content User menu Cart Login Home DIAL.pr - BOREAL Search form Search Home All Publications Export Help You are here Home\u00bb Deadlock prevention in real-time systems Acc\u00e8s \u00e0 distance ? S'identifier sur le proxy UCLouvain | Saint-Louis Deadlock prevention in real-time systems Primary tabs view(active tab) attached files FNRS validity van Lamsweerde, Axel [UCL] metadata Document type Communication \u00e0 un colloque (Conference Paper) \u2013 Pr\u00e9sentation orale avec comit\u00e9 de s\u00e9lection Publication date 1974 Language Anglais Conference \"International Computing Symposium\", Davos, Switzerland (du 04/09/1973 au 07/09/1973) Peer reviewed yes Host document \"Proceedings of the International Computing Symposium\"- p. 135-142 (ISBN : 9780444105967) Publication status Publi\u00e9 Affiliation UCL - FSA/INGI - D\u00e9partement d'\u2026", "num_citations": "1\n", "authors": ["1583"]}