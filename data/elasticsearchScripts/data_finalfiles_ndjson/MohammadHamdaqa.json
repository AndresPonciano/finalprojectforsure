{"title": "Blockchain-Based E-Voting System\n", "abstract": " Building a secure electronic voting system that offers the fairness and privacy of current voting schemes, while providing the transparency and flexibility offered by electronic systems has been a challenge for a long time. In this work-in-progress paper, we evaluate an application of blockchain as a service to implement distributed electronic voting systems. The paper proposes a novel electronic voting system based on blockchain that addresses some of the limitations in existing systems and evaluates some of the popular blockchain frameworks for the purpose of constructing a blockchain-based e-voting system. In particular, we evaluate the potential of distributed ledger technologies through the description of a case study; namely, the process of an election, and the implementation of a blockchain-based application, which improves the security and decreases the cost of hosting a nationwide election.", "num_citations": "252\n", "authors": ["1950"]}
{"title": "An approach based on citation analysis to support effective handling of regulatory compliance\n", "abstract": " For most global software companies with a client base that covers a large number of regulated businesses, regulatory compliance represents a significant challenge. The world of compliance has become increasingly complex due to the overwhelming number of regulations, laws, and standards that are introduced every year. These laws may vary significantly in their scope and applicability depending on the industry sector and the geographical area of the end client. In addition, many of these laws are created by different legislative bodies resulting in overlapping and sometimes conflicting provisions. To further complicate matters, laws are often created based on existing ones, forming a complex set of interdependent rules where changes made in one place can propagate to affect, sometimes in an inconsistent manner, many other laws. There is clearly a need to investigate techniques and tools that can alleviate IT\u00a0\u2026", "num_citations": "23\n", "authors": ["1950"]}
{"title": "Citation analysis: an approach for facilitating the understanding and the analysis of regulatory compliance documents\n", "abstract": " Regulated companies are required to comply with the many laws, regulations, standards, and guidelines that apply to them. The sheer volume of regulatory compliance requirements for even a small company can be considerably high, which renders the understanding of such authoritative rules a challenging task without tool support. After inspecting several regulatory documents, we noticed that they contain a significant number of citations that, if explored effectively, can reveal important information about the containing documents. In this paper, we propose a technique called citation analysis that aims at helping users to understand and analyze regulatory documents in an efficient manner. Our approach is based on the exploration of citation graphs extracted from regulatory documents. We discuss the challenges when dealing with citations. We also present an overview of a tool that can support citation analysis.", "num_citations": "19\n", "authors": ["1950"]}
{"title": "Automatic Prediction of the Severity of Bugs Using Stack Traces\n", "abstract": " The severity of a bug is a measure of how a defect affects the functionality of a system. Developers refer to the severity of the reported bugs to prioritize the handling of bug reports. The process of assigning a severity level to a bug is performed manually, often by inexperienced users, making it time consuming and error prone. Existing techniques for automatically predicting the severity of bugs rely on text mining and information retrieval algorithms applied to the description of the bugs. The problem is that the description tends to be too informal and not quite reliable. In this paper, we show how information found in stack traces (a more formal source of data containing the history of function calls to the function in which the crash happened) can be used to automatically predict the severity of bugs. Our experiments with Eclipse bug reports submitted between 2001 to 2015 show that stack traces are a better feature for\u00a0\u2026", "num_citations": "16\n", "authors": ["1950"]}
{"title": "Automatic Prediction of the Severity of Bugs Using Stack Traces and Categorical Features\n", "abstract": " ContextThe severity of a bug is often used as an indicator of how a bug negatively affects system functionality. It is used by developers to prioritize bugs which need to be fixed. The problem is that, for various reasons, bug submitters often enter the incorrect severity level, delaying the bug resolution process. Techniques that can automatically predict the severity of a bug can significantly reduce the bug triaging overhead. In our previous work, we showed that the accuracy of description-based severity prediction techniques could be significantly improved by using stack traces as a source of information.ObjectiveIn this study, we expand our previous work by exploring the effect of using categorical features, in addition to stack traces, to predict the severity of bugs. These categorical features include faulty product, faulty component, and operating system. We experimented with other features and observed that they do\u00a0\u2026", "num_citations": "15\n", "authors": ["1950"]}
{"title": "SmarthomeML: Towards a domain-specific modeling language for creating smart home applications\n", "abstract": " There is an increasing demand for smart home connectivity from controlling the home temperature, to switching light bulbs, controlling the window shades and pet feeders. Smart home control systems such as Amazon Alexa and Google Home provide user interfaces to coordinate the operation of several home appliances. While this facilitate integrating the operations of several appliances, system integrators still need to specify and define the integration and communication logic. This logic depends on both the appliance and the control system providers. This paper introduces SmartHomeML, a domain specific modelling language for smart home applications, that allows users to define new skills (functionalities). SmartHomeML consists of a model designer that supports modelling smart home applications and a model generator that uses template-based transformation to automatically generate smart home device\u00a0\u2026", "num_citations": "14\n", "authors": ["1950"]}
{"title": "The (5+1) Architectural View Model for Cloud Applications\n", "abstract": " Existing software architecture frameworks focus on application development, rather than the dynamic evolution of applications at runtime. Their view models reflect design considerations, more than service operations. However, the quality of a cloud application depends on its configuration and the architecture of its service model. For this reason, we need a view model that is constructed around deployment. This paper proposes a (5+ 1) architectural view model, where each view corresponds to a different perspective on cloud application deployment. The (5+ 1) view model has been realized as a layered, domain specific modeling language, and the capabilities of this language have been illustrated using a representative domain example. The model was derived by investigating the process of architecting cloud applications, and then providing a set of meta-models to describe cloud applications within their ecosystem.", "num_citations": "13\n", "authors": ["1950"]}
{"title": "An Effective Method for Detecting Duplicate Crash Reports Using Crash Traces and Hidden Markov Models\n", "abstract": " When a software system crashes, crash information from user's machine is sent to the developers of the system for repair. For software systems with a large client base (such as Eclipse, Web browsers, etc.), the number of reports that are submitted every day can be quite high. Managing these reports is known to be a tedious and a time consuming task. Fortunately, not all crashes are caused by new faults. Studies have shown that around 30% of the reported crashes are duplicates of previously reported ones. Automatic detection of duplicate crash reports can then reduce the time and effort dealing with crash reports. In this paper, we introduce a novel method for detecting duplicate crash reports using crash traces and Hidden Markov Models. We show that our approach outperforms existing methods in detecting duplicate crash reports.", "num_citations": "9\n", "authors": ["1950"]}
{"title": "iContractML 2.0: A domain-specific language for modeling and deploying smart contracts onto multiple blockchain platforms\n", "abstract": " Context:Smart contracts play a vital role in many fields. Despite being called smart, the development of smart contracts is a tedious task beyond defining a set of contractual rules. In addition to business knowledge, coding a smart contract requires strong technical knowledge in a multiplex of new and rapidly changing domain-specific languages and blockchain platforms.Objectives:The goal of this paper is to assist developers in building smart contracts independently from the language or the target blockchain platform. In which, we present our second-generation smart contract language iContractML\u00a02.0.Methods:We follow a feature-oriented approach to analyze three different blockchain platforms and propose an enhanced reference model and a modeling framework for smart contracts (iContractML\u00a02.0). Then, we evaluate the coverage and extensibility of iContractML\u00a02.0, first through mapping the concepts of the\u00a0\u2026", "num_citations": "4\n", "authors": ["1950"]}
{"title": "IContractML: A Domain-Specific Language for Modeling and Deploying Smart Contracts onto Multiple Blockchain Platforms.\n", "abstract": " Context:Smart contracts play a vital role in many fields. Despite being called smart, the development of smart contracts is a tedious task beyond defining a set of contractual rules. In addition to business knowledge, coding a smart contract requires strong technical knowledge in a multiplex of new and rapidly changing domain-specific languages and blockchain platforms.Objectives:The goal of this paper is to assist developers in building smart contracts independently from the language or the target blockchain platform. In which, we present our second-generation smart contract language iContractML\u00a02.0.Methods:We follow a feature-oriented approach to analyze three different blockchain platforms and propose an enhanced reference model and a modeling framework for smart contracts (iContractML\u00a02.0). Then, we evaluate the coverage and extensibility of iContractML\u00a02.0, first through mapping the concepts of the\u00a0\u2026", "num_citations": "4\n", "authors": ["1950"]}
{"title": "MobiLogLeak: A Preliminary Study on DataLeakage Caused by Poor Logging Practices\n", "abstract": " Logging is an essential software practice that is used by developers to debug, diagnose and audit software systems. Despite the advantages of logging, poor logging practices can potentially leak sensitive data. The problem of data leakage is more severe in applications that run on mobile devices, since these devices carry sensitive identification information ranging from physical device identifiers (e.g., IMEI MAC address) to communications network identifiers (e.g., SIM, IP, Bluetooth ID), and application-specific identifiers related to the location and the users' accounts. This preliminary study explores the impact of logging practices on data leakage of such sensitive information. Particularly, we want to investigate whether log-related statements inserted into an application code could lead to data leakage. While studying logging practices in mobile applications is an active research area, to our knowledge, this is the\u00a0\u2026", "num_citations": "3\n", "authors": ["1950"]}
{"title": "A Bird\u2019s-eye View on Modelling Malleable Multi-Cloud Applications\n", "abstract": " Cloud platforms advances have changed the application development landscape. Cloud platforms abstract the complexity of application delivery to enable rapid development and easy management. This changes the way development teams need to think about and deal with the underlying resources while building and managing their applications. This research describes a new methodology supported by a modeling framework to enable organizations that build cloud applications (e.g., SaaS providers) to unbiasedly exploit the cloud platform building blocks to leverage the flexibility, reliability and scalability that these platforms provide to the application layer.", "num_citations": "3\n", "authors": ["1950"]}
{"title": "Learning outcome outcomes: an evaluation of quality\n", "abstract": " Learning outcomes are a standard specification of knowledge, skills and capabilities that a student is expected to acquire by attending a course or a degree program. While, in theory, the process of evaluating learning outcomes appears to be trivial, in practice it is a complicated and daunting process. In this study, we evaluate how learning outcomes can be effectively applied. The work focuses on the quality of both the specification of the learning outcomes and the assessment of whether these outcomes are reached. We discuss different abstraction levels for learning outcomes and the issue of alignment between high-level and low-level learning outcomes. We also address the criteria for assessing whether a student is meeting a learning outcome. Our work is focused on project-oriented courses, where assessing learning outcomes is seen as particularly challenging. In particular, we draw on an empirical study\u00a0\u2026", "num_citations": "2\n", "authors": ["1950"]}
{"title": "An integrated modeling framework for managing the deployment and operation of cloud applications\n", "abstract": " Cloud computing can help Software as a Service (SaaS) providers to take advantage of the sheer number of cloud benefits such as, agility, continuity, cost reduction, autonomy, and easy management of resources. To reap the benefits, SaaS providers should create their applications to utilize the cloud platform capabilities. However, this is a daunting task. First, it requires a full understanding of the service offerings from different providers, and the meta-data artifacts required by each provider to configure the platform to efficiently deploy, run and manage the application. Second, it involves complex decisions that are specified by different stakeholders. Examples include, financial decisions (e.g., selecting a platform to reduces costs), architectural decisions (e.g., partition the application to maximize scalability), and operational decisions (e.g., distributing modules to insure availability and porting the application to other platforms). Finally, while each stakeholder may conduct a certain type of change to address a specific concern, the impact of a change may span multiple models and influence the decisions of several stakeholders. These factors motivate the need for: (i) a new architectural view model that focuses on service operation and reflects the cloud stakeholder perspectives, and (ii) a novel framework that facilitates providing holistic as well as partial architectural views, and generating the required platform artifacts by fragmenting the model into artifacts that can be easily modified separately.  This PhD research devises a novel architecture framework, \"The 5+1 Architectural View Model\", for cloud applications, in which each view corresponds to\u00a0\u2026", "num_citations": "2\n", "authors": ["1950"]}
{"title": "iContractBot: A Chatbot for Smart Contracts' Specification and Code Generation\n", "abstract": " Recently, Blockchain technology adoption has expanded to many application areas due to the evolution of smart contracts. However, developing smart contracts is non-trivial and challenging due to the lack of tools and expertise in this field. A promising solution to overcome this issue is to use Model-Driven Engineering (MDE), however, using models still involves a learning curve and might not be suitable for non-technical users. To tackle this challenge, chatbot or conversational interfaces can be used to assess the non-technical users to specify a smart contract in gradual and interactive manner. In this paper, we propose iContractBot, a chatbot for modeling and developing smart contracts. Moreover, we investigate how to integrate iContractBot with iContractML, a domain-specific modeling language for developing smart contracts, and instantiate intention models from the chatbot. The iContractBot framework provides a domain-specific language (DSL) based on the user intention and performs model-to-text transformation to generate the smart contract code. A smart contract use case is presented to demonstrate how iContractBot can be utilized for creating models and generating the deployment artifacts for smart contracts based on a simple conversation.", "num_citations": "1\n", "authors": ["1950"]}
{"title": "EnHMM: On the Use of Ensemble HMMs and Stack Traces to Predict the Reassignment of Bug Report Fields\n", "abstract": " Bug reports (BR) contain vital information that can help triaging teams prioritize and assign bugs to developers who will provide the fixes. However, studies have shown that BR fields often contain incorrect information that need to be reassigned, which delays the bug fixing process. There exist approaches for predicting whether a BR field should be reassigned or not. These studies use mainly BR descriptions and traditional machine learning algorithms (SVM, KNN, etc.). As such, they do not fully benefit from the sequential order of information in BR data, such as function call sequences in BR stack traces, which may be valuable for improving the prediction accuracy. In this paper, we propose a novel approach, called EnHMM, for predicting the reassignment of BR fields using ensemble Hidden Markov Models (HMMs), trained on stack traces. EnHMM leverages the natural ability of HMMs to represent sequential data\u00a0\u2026", "num_citations": "1\n", "authors": ["1950"]}
{"title": "MUPPIT: a method for using proper patterns in model transformations\n", "abstract": " Model transformation plays an important role in developing software systems using the model-driven engineering paradigm. Examples of applications of model transformation include forward engineering, reverse engineering of code into models, and refactoring. Poor-quality model transformation code is costly and hard to maintain. There is a need to develop techniques and tools that can support transformation engineers in designing high-quality model transformations. The goal of this paper is to present a process, called MUPPIT (method for using proper patterns in model transformations), which can be used by transformation engineers to improve the quality of model transformations by detecting anti-patterns in the transformations and automatically applying pattern solutions. MUPPIT consists of four phases: (1) identifying a transformation anti-pattern, (2) proposing a pattern-solution, (3) applying the\u00a0\u2026", "num_citations": "1\n", "authors": ["1950"]}