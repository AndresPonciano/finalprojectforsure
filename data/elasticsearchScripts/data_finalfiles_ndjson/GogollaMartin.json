{"title": "USE: A UML-based specification environment for validating UML and OCL\n", "abstract": " The Unified Modeling Language (UML) is accepted today as an important standard for developing software. UML tools however provide little support for validating and checking models in early development phases. There is also no substantial support for the Object Constraint Language\u00a0(OCL). We present an approach for the validation of UML models and OCL constraints based on animation and certification. The USE tool (UML-based Specification Environment) supports analysts, designers and developers in executing UML models and checking OCL constraints and thus enables them to employ model-driven techniques for software production.", "num_citations": "556\n", "authors": ["575"]}
{"title": "Validating UML and OCL models in USE by automatic snapshot generation\n", "abstract": " We study the testing and certification of UML and OCL models as supported by the validation tool USE. We extend the available USE features by introducing a language for defining properties of desired snapshots and by showing how such snapshots are generated. Within the approach, it is possible to treat test cases and validation cases. Test cases show that snapshots having desired properties can be constructed. Validation cases show that given properties are consequences of the original UML and OCL model.", "num_citations": "272\n", "authors": ["575"]}
{"title": "On formalizing the UML object constraint language OCL\n", "abstract": " We present a formal semantics for the Object Constraint Language (OCL) which is part of the Unified Modeling Language (UML) \u2013 an emerging standard language and notation for object-oriented analysis and design. In context of information systems modeling, UML class diagrams can be utilized for describing the overall structure, whereas additional integrity constraints and queries are specified with OCL expressions. By using OCL, constraints and queries can be specified in a formal yet comprehensible way. However, the OCL itself is currently defined only in a semi-formal way. Thus the semantics of constraints is in general not precisely defined. Our approach gives precise meaning to OCL concepts and to some central aspects of UML class models. A formal semantics facilitates verification, validation and simulation of models and helps to improve the quality of models and software designs.", "num_citations": "271\n", "authors": ["575"]}
{"title": "Validating UML models and OCL constraints\n", "abstract": " The UML has been widely accepted as a standard for modeling software systems and is supported by a great number of CASE tools. However, UML tools often provide only little support for validating models early during the design stage. Also, there is generally no substantial support for constraints written in the Object Constraint Language (OCL). We present an approach for the validation of UML models and OCL constraints that is based on animation. The USE tool (UML-based Specification Environment) supports developers in this process. It has an animator for simulating UML models and an OCL interpreter for constraint checking. Snapshots of a running system can be created, inspected, and checked for conformance with the model. As a special case study, we have applied the tool to parts of the UML 1.3 metamodel and its well-formedness rules. The tool enabled a thorough and systematic check of\u00a0\u2026", "num_citations": "242\n", "authors": ["575"]}
{"title": "Model transformations? Transformation models!\n", "abstract": " Much of the current work on model transformations seems essentially operational and executable in nature. Executable descriptions are necessary from the point of view of implementation. But from a conceptual point of view, transformations can also be viewed as descriptive models by stating only the properties a transformation has to fulfill and by omitting execution details. This contribution discusses the view that model transformations can be abstracted as being transformation models. As a simple example for a transformation model, the well-known transformation from the Entity-Relationship model to the Relational model is shown. A transformation model in this contribution is nothing more than an ordinary, simple model, i.e., a UML/MOF class diagram together with OCL constraints. A transformation model may transport syntax and semantics of the described domain. The contribution thus covers two\u00a0\u2026", "num_citations": "240\n", "authors": ["575"]}
{"title": "Towards a semantic view of an extended entity-relationship model\n", "abstract": " Nearly all query languages discussed recently for the Entity-Relationship (ER) model do not possess a formal semantics. Languages are often defined by means of examples only. The reason for this phenomenon is the essential gap between features of query languages and theoretical foundations like algebras and calculi. Known languages offer arithmetic capabilities and allow for aggregates, but algebras and calculi defined for ER models do not.  This paper introduces an extended ER model concentrating nearly all concepts of known so-called semantic data models in a few syntactical constructs. Moreover, we provide our extended ER model with a formal mathematical semantics. On this basis a well-founded calculus is developed taking into account data operations on arbitrary   user-defined data types and aggregate functions. We pay special attention to arithmetic operations, as well as multivalued terms\u00a0\u2026", "num_citations": "196\n", "authors": ["575"]}
{"title": "OCL: Syntax, semantics, and tools\n", "abstract": " The Object Constraint Language OCL allows to formally specify constraints on a UML model. We present a formal syntax and semantics for OCL based on set theory including expressions, invariants and pre- and postconditions. A formal foundation for OCL makes the meaning of constraints precise and helps to eliminate ambiguities and inconsistencies. A precise language definition is also a prerequisite for implementing Case tools providing enhanced support for UML models and OCL constraints. We give a survey of some OCL tools and discuss one of the tools in some more detail. The design and implementation of the USE tool supporting the validation of UML models and OCL constraints is based on the formal approach presented in this paper.", "num_citations": "183\n", "authors": ["575"]}
{"title": "Algebraische Spezifikation abstrakter Datentypen: eine Einf\u00fchrung in die Theorie\n", "abstract": " Dies Buch ist aus der \u00dcberarbeitung und Erweiterung von Notizen zu Vorlesungen entstanden, die seit 1977 zun\u00e4chst vom ersten Autor an der Universit\u00e4t Dortmund, seit 1982 dann von allen drei Autoren in wechselnder Folge an der Technischen Universit\u00e4t Braunschweig gehalten wurden.", "num_citations": "172\n", "authors": ["575"]}
{"title": "State diagrams in uml: A formal semantics using graph transformations-or diagrams are nice, but graphs are worth their price\n", "abstract": " We show how to transform UML (Unified Modeling Language) state diagrams into graphs by making explicit the intended semantics of the diagram. The process of state expansion in nested state diagrams is explained by graph transformations in three steps:(1) adding boundary nodes introducing a precise interface for the state to be expanded,(2) expanding the state, and (3) removing the boundary nodes. The general idea of approaching the semantics of UML diagrams by graph transformations is applicable to other forms of UML diagrams as well. The main advantage of the graph transformation approach is the closeness between the (mathematical) graph representation and the (UML) diagram representation. Keywords: UML, formal semantics, graph transformation, state diagram, nested state, stubbed transition. 1 Introduction One of the descriptions of what UML is supposed to be is given in one of its original documents [BJR97b]: The Unified Modeling Language (UML) is a general-purpose visual modeli...", "num_citations": "137\n", "authors": ["575"]}
{"title": "Expressing UML class diagrams properties with OCL\n", "abstract": " The Unified Modeling Language UML is a complex language offering many modeling features. Especially the description of static structures with class diagrams is supported by a rich set of primitives. This paper shows how to transfrom UML class diagrams involving cardinality constraints, qualifiers, association classes, aggregations, compositions, and generalizations into equivalent UML class diagrams employing only binary associations and OCL constraints. Thus we provide a better understanding of UML features. By reducing more complex features in terms of basic ones, we suggest an easy way users can gradually extend the set of UML elements they commonly apply in the modeling process.", "num_citations": "130\n", "authors": ["575"]}
{"title": "From UML and OCL to relational logic and back\n", "abstract": " Languages like UML and OCL are used to precisely model systems. Complex UML and OCL models therefore represent a crucial part of model-driven development, as they formally specify the main system properties. Consequently, creating complete and correct models is a critical concern. For this purpose, we provide a lightweight model validation method based on efficient SAT solving techniques. In this paper, we present a transformation from UML class diagram and OCL concepts into relational logic. Relational logic in turn represents the source for advanced SAT-based model instance finders like Kodkod. This paper focuses on a natural transformation approach which aims to exploit the features of relational logic as directly as possible through straitening the handling of main UML and OCL features. This approach allows us to explicitly benefit from the efficient handling of relational logic in Kodkod\u00a0\u2026", "num_citations": "129\n", "authors": ["575"]}
{"title": "Validation of UML and OCL models by automatic snapshot generation\n", "abstract": " We study the testing and certification of UML and OCL models as supported by the validation tool USE. We extend the available USE features by introducing a language for defining properties of desired snapshots and by showing how such snapshots are generated. Within the approach, it is possible to treat test cases and validation cases. Test cases show that snapshots having desired properties can be constructed. Validation cases show that given properties are consequences of the original UML and OCL model.", "num_citations": "111\n", "authors": ["575"]}
{"title": "An integrated semantics for UML class, object and state diagrams based on graph transformation\n", "abstract": " This paper studies the semantics of a central part of the Unified Modeling Language UML. It discusses UML class, object and state diagrams and presents a new integrated semantics for both on the basis of graph transformation. Graph transformation is a formal technique having some common ideas with the UML. Graph transformation rules are associated with the operations in class diagrams and with the transitions in state diagrams. The resulting graph transformations are combined into a one system in order to obtain a single coherent semantic description.", "num_citations": "109\n", "authors": ["575"]}
{"title": "An extended entity-relationship model: fundamentals and pragmatics\n", "abstract": " This text presents a comprehensive introduction to an extended Entity-Relationship model both on a conceptual and on a formal, mathematicallevel. In addition to the primitives given by the data model the text introduces a language for the formulation of constraints in order to restrict database states to consistent ones. The text explains an implementation of the approach chosen in the logic programing language PROLOG and discusses in this context the computational power of the proposedcalculus. The extended Entity-Relationship calculus is used to define the meaning of the relational query language SQL. A nice feature of the approach is that it becomes possible to prove language properties on a sound mathematical basis.", "num_citations": "104\n", "authors": ["575"]}