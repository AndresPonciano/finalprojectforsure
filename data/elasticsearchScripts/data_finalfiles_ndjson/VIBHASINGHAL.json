{"title": "A new chatbot for customer service on social media\n", "abstract": " Users are rapidly turning to social media to request and receive customer service; however, a majority of these requests were not addressed timely or even not addressed at all. To overcome the problem, we create a new conversational system to automatically generate responses for users requests on social media. Our system is integrated with state-of-the-art deep learning techniques and is trained by nearly 1M Twitter conversations between users and agents from over 60 brands. The evaluation reveals that over 40% of the requests are emotional, and the system is about as good as human agents in showing empathy to help users cope with emotional situations. Results also show our system outperforms information retrieval system based on both human judgments and an automatic evaluation metric.", "num_citations": "378\n", "authors": ["203"]}
{"title": "Ausum: approach for unsupervised bug report summarization\n", "abstract": " In most software projects, resolved bugs are archived for future reference. These bug reports contain valuable information on the reported problem, investigation and resolution. When bug triaging, developers look for how similar problems were resolved in the past. Search over bug repository gives the developer a set of recommended bugs to look into. However, the developer still needs to manually peruse the contents of the recommended bugs which might vary in size from a couple of lines to thousands. Automatic summarization of bug reports is one way to reduce the amount of data a developer might need to go through. Prior work has presented learning based approaches for bug summarization. These approaches have the disadvantage of requiring large training set and being biased towards the data on which the model was learnt. In fact, maximum efficacy was reported when the model was trained and\u00a0\u2026", "num_citations": "117\n", "authors": ["203"]}
{"title": "Transcriptional Response of Saccharomyces cerevisiae to Desiccation and Rehydration\n", "abstract": " A transcriptional analysis of the response of Saccharomyces cerevisiae strain BY4743 to controlled air-drying (desiccation) and subsequent rehydration under minimal glucose conditions was performed. Expression of genes involved in fatty acid oxidation and the glyoxylate cycle was observed to increase during drying and remained in this state during the rehydration phase. When the BY4743 expression profile for the dried sample was compared to that of a commercially prepared dry active yeast, strikingly similar expression changes were observed. The fact that these two samples, dried by different means, possessed very similar transcriptional profiles supports the hypothesis that the response to desiccation is a coordinated event independent of the particular conditions involved in water removal. Similarities between \u201cstationary-phase-essential genes\u201d and those upregulated during desiccation were also noted\u00a0\u2026", "num_citations": "109\n", "authors": ["203"]}
{"title": "Touch your heart: A tone-aware chatbot for customer care on social media\n", "abstract": " Chatbot has become an important solution to rapidly increasing customer care demands on social media in recent years. However, current work on chatbot for customer care ignores a key to impact user experience-tones. In this work, we create a novel tone-aware chatbot that generates toned responses to user requests on social media. We first conduct a formative research, in which the effects of tones are studied. Significant and various influences of different tones on user experience are uncovered in the study. With the knowledge of effects of tones, we design a deep learning based chatbot that takes tone information into account. We train our system on over 1.5 million real customer care conversations collected from Twitter. The evaluation reveals that our tone-aware chatbot generates as appropriate responses to user requests as human agents. More importantly, our chatbot is perceived to be even more\u00a0\u2026", "num_citations": "100\n", "authors": ["203"]}
{"title": "25 tweets to know you: A new model to predict personality with social media\n", "abstract": " Predicting personality is essential for social applications supporting human-centered activities, yet prior modeling methods with users\u2019 written text require too much input data to be realistically used in the context of social media. In this work, we aim to drastically reduce the data requirement for personality modeling and develop a model that is applicable to most users on Twitter. Our model integrates Word Embedding features with Gaussian Processes regression. Based on the evaluation of over 1.3 K users on Twitter, we find that our model achieves comparable or better accuracy than state-of-the-art techniques with 8 times fewer data.", "num_citations": "81\n", "authors": ["203"]}
{"title": "A study of external community contribution to open-source projects on GitHub\n", "abstract": " Open-source software projects are primarily driven by community contribution. However, commit access to such projects' software repositories is often strictly controlled. These projects prefer to solicit external participation in the form of patches or pull requests. In this paper, we analyze a set of 89 top-starred GitHub projects and their forks in order to explore the nature and distribution of such community contribution. We first classify commits (and developers) into three categories: core, external and mutant, and study the relative sizes of each of these classes through a ring-based visualization. We observe that projects written in mainstream scripting languages such as JavaScript and Python tend to include more external participation than projects written in upcoming languages such as Scala. We also visualize the geographic spread of these communities via geocoding. Finally, we classify the types of pull requests\u00a0\u2026", "num_citations": "59\n", "authors": ["203"]}
{"title": "User-centered design and business process modeling: cross road in rapid prototyping tools\n", "abstract": " Fast production of a solution is a necessity in the world of competitive IT consulting business today. In engagements where early user interface design mock-ups are needed to visualize proposed business processes, the need to quickly create UI becomes prominent very early in the process. Our work aims to speed up the UI design process, enabling rapid creation of low-fidelity UI design with traditional user-centered design thinking but different tooling concepts. This paper explains the approach and the rationale behind our model and tools. One key focal point is in leveraging business process models as a starting point of the UI design process. The other focal point is on using a model-driven approach with designer-centered tools to eliminate some design overheads, to help manage a large design space, and to cope with changes in requirements. We used examples from a real business engagement\u00a0\u2026", "num_citations": "49\n", "authors": ["203"]}
{"title": "Generating formatted documents\n", "abstract": " Techniques for generating one or more formatted documents are provided. The techniques include receiving content from one or more data sources, enabling specification of one or more formatting elements to be used in one or more generated formatted documents, enabling specification of a structure to be used in the one or more generated formatted documents, enabling specification of a style of the one or more formatting elements to be used in the one or more generated formatted documents, and generating one or more formatted documents based on the specifications.", "num_citations": "36\n", "authors": ["203"]}
{"title": "Generating business intelligence through social media analytics: Measuring brand personality with consumer-, employee-, and firm-generated content\n", "abstract": " Social media platforms provide an enormous public repository of textual data from which valuable information can be extracted. We show that firms can extract business intelligence from social media data bearing on an important business application, measuring brand personality. Specifically, we develop a text analytics framework that integrates different distinct sources of social media data generated by consumers, employees, and firms, to measure brand personality. Based on Elastic-Net regression analyses of a large corpus of social media data, including self-descriptions of 1,996,214 consumers who followed the sample of brands on social media, 312,400 employee reviews of the brands\u2019 firms, and 680,056 brand official tweets, we develop a brand personality model that achieves prediction accuracy as high as 0.78. Among key insights, we find that the profile of individuals who choose to associate with brands\u00a0\u2026", "num_citations": "33\n", "authors": ["203"]}
{"title": "Using user interface design to enhance service identification\n", "abstract": " User interface (UI) design is an integral part of the software design process. The UI design not only outlines the look and feel of the system, but also helps in flushing out the requirements - by identifying what data is visible to and processed by different users. However, in any SOA methodology, UI design is typically considered out of scope. In this paper, we highlight the importance of UI design specification in the SOA landscape, from a service- identification perspective. Service identification, which is a key activity in any SOA-based development, involves specification of business requirements as a set of granular service definitions. We propose an approach for harvesting the UI design specification to define service requirements for the intended system; more specifically in terms of information and business service requirements. Our approach consists of the following steps: (1) capture user interface design in a\u00a0\u2026", "num_citations": "33\n", "authors": ["203"]}
{"title": "Predicting perceived brand personality with social media\n", "abstract": " Brand personality has been shown to affect a variety of user behaviors such as individual preferences and social interactions. Despite intensive research efforts in human personality assessment, little is known about brand personality and its relationship with social media. Leveraging the theory in marketing, we analyze how brand personality associates with its contributing factors embodied in social media. Based on the analysis of over 10K survey responses and a large corpus of social media data from 219 brands, we quantify the relative importance of factors driving brand personality. The brand personality model developed with social media data achieves predicted R 2 values as high as 0.67. We conclude by illustrating how modeling brand personality can help users find brands suiting their personal characteristics and help companies manage brand perceptions.", "num_citations": "29\n", "authors": ["203"]}
{"title": "Exploring activeness of users in QA forums\n", "abstract": " Success of a Q&A forum depends on volume of content (questions and answers) and quality of content (are the questions asked relevant, answers provided correct etc). Community participation is essential to create and curate content. Since their inception in 2008, stack exchange based forums have been able to engage a large number of users to create a rich repository of good quality questions and answers. In this paper, we wish to investigate the \u201cactiveness\u201d of users in the stackexchange network particularly from a perspective of content creation. We also attempt to measure how the forums' incentive mechanism has enabled user's activeness. Further, we investigate how user's have diffused to other parts of the stack exchange network over time, hence bootstrapping new forums.", "num_citations": "29\n", "authors": ["203"]}
{"title": "Characterizing machine learning processes: a maturity framework\n", "abstract": " Academic literature on machine learning modeling fails to address how to make machine learning models work for enterprises. For example, existing machine learning processes cannot address how to define business use cases for an AI application, how to convert business requirements from product managers into data requirements for data scientists, and how to continuously improve AI applications in term of accuracy and fairness, how to customize general purpose machine learning models with industry, domain, and use case specific data to make them more accurate for specific situations etc. Making AI work for enterprises requires special considerations, tools, methods and processes. In this paper we present a maturity framework for machine learning model lifecycle management for enterprises. Our framework is a re-interpretation of the software Capability Maturity Model (CMM) for machine learning model\u00a0\u2026", "num_citations": "28\n", "authors": ["203"]}
{"title": "How much does large-scale crop residue burning affect the air quality in Delhi?\n", "abstract": " Elevated PM2.5 concentrations frequently cause severe air pollution events in Delhi. Till recently, the effect of crop residue burning on the air quality in Delhi has not been fully quantified and the approaches to control the impact of fire emissions have not been effective. In this study, for the first time, we quantified the statewise contribution of post-monsoon crop residue burning in the northwestern states of India to surface PM2.5 concentrations in Delhi using several sensitivity experiments with the Weather Research and Forecasting model coupled with Chemistry (WRF-Chem) and FINNv1.5 fire emission inventory. Results were evaluated with ground-based observations in Delhi (21 stations), Punjab, and Haryana (14 stations). On average, \u223c20% of PM2.5 concentration in Delhi during the post-monsoon season (October\u2013November) was found to be contributed by nonlocal fire emissions. However, on typical air\u00a0\u2026", "num_citations": "27\n", "authors": ["203"]}
{"title": "Method to identify common structures in formatted text documents\n", "abstract": " A computer implemented method, computer program product and data processing system, for identifying common structures shared across a plurality of formatted text documents. The common structure is presented as a sequence of landmarks, each of which has a starting and ending marker to describe the borders of text. The common structure is identified by counting the occurrences of repeating text segments across documents. Frequently co-occurred adjacent segments become candidates for markers of landmarks. In addition, styling information of textual content within a landmark is extracted and mapped to rules. The rules are used to merge and summarize content from multiple documents, which gives an advantage over current practice of content concatenation.", "num_citations": "27\n", "authors": ["203"]}
{"title": "Automatic generation of actionable recommendations from problem reports\n", "abstract": " Methods and arrangements for handling information technology tickets. A plurality of information technology tickets are received. The tickets are clustered into categories, and a problem area is identified with respect to at least one of the categories. At least one recommendation is automatically generated for addressing the problem area. Other variants and embodiments are broadly contemplated herein.", "num_citations": "26\n", "authors": ["203"]}
{"title": "Model-driven approach for managing human interface design life cycle\n", "abstract": " Designing a large application user interface is an iterative process. Commonly used tools lack models to support this iterative process. Research on model-driven UI design has over the years focused on modeling UI at a higher level of abstraction but lacked support during in the iteration process. This paper briefly presents the context of our research \u2013 transforming a business model into a base UI model for further customization. Specifically, we present a feature that helps reflect changes from the business model in the user interface design tool. We designed it so that the human designers can choose to react to these changes as they see appropriate. The technique is one of our attempts to apply the model-drive approach to better support design iteration through requirement changes.", "num_citations": "21\n", "authors": ["203"]}
{"title": "NeedFeed: Taming change notifications by modeling code relevance\n", "abstract": " Most software development tools allow developers to subscribe to notifications about code checked-in by their team members in order to review changes to artifacts that they are responsible for. However, past user studies have indicated that this mechanism is counter-productive, as developers spend a significant amount of effort sifting through such feeds looking for items that are relevant to them. We present NeedFeed, a system that models code relevance by mining a project's software repository and highlights changes that a developer may need to review. We evaluate several techniques to model code relevance, from a naive TOUCH-based approach to generic HISTORY-based classifiers using temporal code metrics at file and method-level granularities, which are then improved by building developer-specific models using TEXT-based features from commit messages. NeedFeed reduces notification clutter by\u00a0\u2026", "num_citations": "19\n", "authors": ["203"]}
{"title": "An adaptive tool integration framework to enable coordination in distributed software development\n", "abstract": " In this position paper we argue that to effectively address coordination challenges in distributed software development, we need to go beyond making individual development tools more collaborative and design a framework that enables common understanding of the information from different tools and supports loose coupling between them. Stakeholders can go about doing their work in their choice of tools, and as long as these tools adhere to certain interface requirements imposed by the framework, information may be shared across tools in a seamless fashion. The framework should also be able to pick up on cues within the project execution environment, analyze them, and provide useful information as alerts and advisories to stakeholders. Finally, the framework should be adaptive to new tools introduced in the development process as well as to changing project governance needs. We present a preliminary\u00a0\u2026", "num_citations": "19\n", "authors": ["203"]}
{"title": "Searching existing user interfaces to enable design, development and provisioning of user interfaces\n", "abstract": " Techniques for searching for a user interface (UI) are provided. The techniques include receiving a desired user interface as a query, determining meta-data for the desired user interface, wherein determining the meta-data for the desired user interface comprises converting the desired user interface query to a meta-data query, and using the meta-data query to search for the desired user interface, wherein searching for the desired user interface comprises querying meta-data of one or more existing user interfaces and selecting one or more similar user interfaces.", "num_citations": "16\n", "authors": ["203"]}
{"title": "Reflection of a year long model-driven business and ui modeling development project\n", "abstract": " Model-driven software development enables users to specify an application at a high level \u2013 a level that better matches problem domain. It also promises the users with better analysis and automation. Our work embarks on two collaborating domains \u2013 business process and human interactions \u2013 to build an application. Business modeling expresses business operations and flows then creates business flow implementation. Human interaction modeling expresses a UI design, its relationship with business data, logic, and flow, and can generate working UI. This double modeling approach automates the production of a working system with UI and business logic connected. This paper discusses the human aspects of this modeling approach after a year long of building a procurement outsourcing contract application using the approach \u2013 the result of which was deployed in December 2008. The paper\u00a0\u2026", "num_citations": "14\n", "authors": ["203"]}
{"title": "System and method to extract models from semi-structured documents\n", "abstract": " Systems and associated methods for automated and semi-automated building of domain models for documents are described. Embodiments provide an approach to discover an information model by mining documentation about a particular domain captured in the documents. Embodiments classify the documents into one or more types corresponding to concepts using indicative words, identify candidate model elements (concepts) for document types, identify relationships both within and across document types, and consolidate and learn a global model for the domain.", "num_citations": "13\n", "authors": ["203"]}
{"title": "Mince: Mining change history of android project\n", "abstract": " An analysis of commit history of Android reveals that Android has a code base of 550K files, where on an average each file has been modified 8.7 times. 41% of files have been modified at-least once. In terms of contributors, it has an overall contributor community of 1563, with 58.5% of them having made >; 5 commits. Moreover, the contributor community shows high churn levels, with only 13 of contributors continuing from 2005 to 2011. In terms of industry participation, Google & Android account for 22% of developers. Intel and RedHat account for 2% of contributors each and IBM, Oracle, TI, SGI account for another 1% each. Android code can be classified into 5 sub-projects: kernel, platform, device, tools and toolchain. In this paper, we profile each of these sub-projects in terms of change volumes, contributor and industry participation. We further picked specific framework topics such as UI, security, whose\u00a0\u2026", "num_citations": "13\n", "authors": ["203"]}
{"title": "Recommending a dialog act using model-based textual analysis\n", "abstract": " A computer-implemented method according to one embodiment includes receiving, utilizing a processor, textual data associated with a real-time conversation between a first participant and a second participant, receiving, utilizing the processor, an objective of the first participant for the real-time conversation between the first participant and the second participant, determining, utilizing the processor, a dialog act to be entered by the first participant at a current point in the real-time conversation that meets the objective, utilizing a model, and returning, utilizing the processor, the dialog act to the first participant.", "num_citations": "12\n", "authors": ["203"]}
{"title": "Determining an impact of a proposed dialog act using model-based textual analysis\n", "abstract": " A computer program product for determining an impact of a proposed dialog act in a conversation according to one embodiment includes a computer readable storage medium having program instructions embodied therewith. The computer readable storage medium is not a transitory signal per se. The program instructions are executable by a processor to cause the processor to perform a method comprising receiving textual data associated with a real-time conversation between a first participant and a second participant, receiving an objective of the first participant for the real-time conversation between the first participant and the second participant, receiving a proposed dialog act to be entered at a current point in the real-time conversation from the first participant, determining an impact of the proposed dialog act on the objective of the first participant, and performing one or more actions based on the impact of the\u00a0\u2026", "num_citations": "11\n", "authors": ["203"]}
{"title": "Bug resolution catalysts: Identifying essential non-committers from bug repositories\n", "abstract": " Bugs are inevitable in software projects. Resolving bugs is the primary activity in software maintenance. Developers, who fix bugs through code changes, are naturally important participants in bug resolution. However, there are other participants in these projects who do not perform any code commits. They can be reporters reporting bugs; people having a deep technical know-how of the software and providing valuable insights on how to solve the bug; bug-tossers who re-assign the bugs to the right set of developers. Even though all of them act on the bugs by tossing and commenting, not all of them may be crucial for bug resolution. In this paper, we formally define essential non-committers and try to identify these bug resolution catalysts. We empirically study 98304 bug reports across 11 open source and 5 commercial software projects for validating the existence of such catalysts. We propose a network analysis\u00a0\u2026", "num_citations": "11\n", "authors": ["203"]}
{"title": "Recommending a dialog act using model-based textual analysis\n", "abstract": " A computer program product for recommending a dialog act to a participant in a conversation according to one embodiment includes a computer readable storage medium having program instructions embodied therewith. The computer readable storage medium is not a transitory signal per se, where the program instructions are executable by a processor to cause the processor to perform a method including receiving textual data associated with a real-time conversation between a first participant and a second participant, utilizing the processor, receiving an objective of the first participant for the real-time conversation between the first participant and the second participant, utilizing the processor, determining, utilizing the processor, a dialog act to be entered by the first participant at a current point in the real-time conversation that meets the objective, utilizing a model, and returning the dialog act to the first\u00a0\u2026", "num_citations": "9\n", "authors": ["203"]}
{"title": "Determining an impact of a proposed dialog act using model-based textual analysis\n", "abstract": " A computer-implemented method according to one embodiment includes receiving, utilizing a processor, textual data associated with a real-time conversation between a first participant and a second participant, receiving, utilizing the processor, an objective of the first participant for the real-time conversation between the first participant and the second participant, receiving, utilizing the processor, a proposed dialog act to be entered at a current point in the real-time conversation from the first participant, determining, utilizing the processor, an impact of the proposed dialog act on the objective of the first participant, utilizing a model, and performing, utilizing the processor, one or more actions based on the impact of the proposed dialog act.", "num_citations": "9\n", "authors": ["203"]}
{"title": "System and method for searching error messages\n", "abstract": " A user interface component receives an input error message. A query enhancer component derives error messages from the input error messages using error pattern (s) representative of the input error message and error sub-pattern (s) of the error pattern (s). A result aggregator component inputs each error message to search engines, receives search results, aggregates the search results, and provides the search results to the user interface. The enhancer component may include a pattern composer component to locate error patterns representative of the input error message, and a sub-pattern generator component to derive error sub-patterns from the error patterns. The aggregator component may determine whether the search results are in agreement with a predetermined criterion. If not, the aggregator component may request the enhancer component to provide additional error messages to input to the search\u00a0\u2026", "num_citations": "9\n", "authors": ["203"]}
{"title": "Brand personality comparison engine\n", "abstract": " Mechanisms are provided to implement a brand comparison engine. The mechanisms receive a request to compare brand personalities of a first specified brand and a second specified brand and obtain a first brand personality scale associated with the first specified brand and a second brand personality scale associated with the second specified brand. The mechanisms calculate at least one gap value indicating a difference between at least one personality trait in the first brand personality scale and a corresponding at least one personality trait in the second brand personality scale. The mechanisms also output an output indicating an aspect of the at least one gap based on the calculation.", "num_citations": "8\n", "authors": ["203"]}
{"title": "Customer care training using chatbots\n", "abstract": " A system, computer program product, and method are disclosed. In an approach to train customer service agent using chatbots. The method includes training a chatbot for a customer chat simulation based on a customer service conversation data, a task scenario, and a customer persona. The method also includes monitoring an interaction between a customer service agent and the chatbot. The method further includes determining an assessment of the performance of the customer service agent based on the interaction between the customer service agent and the chatbot. The method additionally includes generating feedback for the customer service agent based on the assessment of the performance of the customer service agent.", "num_citations": "8\n", "authors": ["203"]}
{"title": "Brand Personality Inference and Recommendation System\n", "abstract": " Mechanisms are provided to implement a brand personality inference engine. The mechanisms receive crowdsource information and extract features associated with a brand from the crowdsource information. The crowdsource information comprises natural language content submitted by a plurality of providers to a crowdsource information source. The mechanisms analyze features associated with the brand in accordance with a brand personality model configured to predict a brand personality for the brand based on the features associated with the brand. The mechanisms generate an inferred brand personality data structure, representing a perceived brand personality of providers providing the crowdsource information, and output an output indicating aspects of the perceived brand personality based on the inferred brand personality data structure.", "num_citations": "8\n", "authors": ["203"]}
{"title": "Knowledge management for solution design during sales and pre-sales\n", "abstract": " Techniques, a system and an article of manufacture for designing integrated enterprise solutions. A method includes aggregating multiple work-products pertaining to solutions submitted in response to one or more previous solution requests, segmenting the multiple work-products into multiple segments based on content category, annotating each of the multiple segments with a tag based on one or more semantic associations with the content of each of the segments, adding each of the segments and each of the tags into a database, performing a search in the database to identify a set of one or more of the segments with at least one tag that corresponds to content of a current solution request, and ranking each of the segments in the set based on a degree of semantic matching with one or more parts of the current solution request.", "num_citations": "8\n", "authors": ["203"]}
{"title": "Dynamically facilitating project assembly\n", "abstract": " Methods and arrangements for dynamically facilitating project assembly. A project plan with a chosen set of plan components is submitted and a cloud portal is queried for information on chosen plan components. Information on the chosen plan components is received from the cloud portal. Plan recommendations are generated based on the received information, and a recommended plan is selected.", "num_citations": "7\n", "authors": ["203"]}
{"title": "Method and apparatus to provide user interface as a service\n", "abstract": " A user interface service composer determines, based on a user interface request from a user interface consumer, one of a plurality of user interface service providers to be invoked; and consults a particular entry (corresponding to the service provider to be invoked) in a user interface data catalog having a plurality of entries for the plurality of user interface service providers. A request message, for rendering a user interface requested in the user interface request received from the user interface consumer, is routed from the user interface service composer to the given one of the plurality of user interface service providers that is to be invoked. The request message includes configuration parameters and interaction-related data, and is formatted in accordance with the particular entry in the user interface data catalog. The user interface service composer receives, from the given one of the plurality of user interface\u00a0\u2026", "num_citations": "7\n", "authors": ["203"]}
{"title": "System and method for exchanging information between systems\n", "abstract": " A computer based system and method exchange information between systems. The system and method deliver the information from a first system to a hub application, receive the information at the hub and map the information at the hub into a predefined data structure. The system and method automatically update information stored on at least one other system using the predefined data structure.", "num_citations": "7\n", "authors": ["203"]}
{"title": "Brand personality perception gap identification and gap closing recommendation generation\n", "abstract": " Mechanisms are provided to implement a brand personality perception gap assessment engine. The mechanisms receive an inferred brand personality for a specified brand. The mechanisms further receive an intended brand personality for the specified brand. The mechanisms calculate at least one gap between the inferred brand personality and the intended brand personality. The mechanisms output an output indicating aspects of the at least one gap.", "num_citations": "6\n", "authors": ["203"]}
{"title": "Assessing the structural quality of conversations\n", "abstract": " Input of a conversation is received. The conversation includes at least a first user. An utterance of the conversation is analyzed to identify a dialog act attribute, an emotion attribute, and a tone attribute. The dialog act attribute, emotion attribute, and tone attribute are annotated to the utterance of the conversation. The conversation is validated based on the annotated attributes compared with a threshold. The annotated conversation and the validation of the conversation are stored.", "num_citations": "6\n", "authors": ["203"]}
{"title": "Controlling generation of change notifications in a collaborative authoring environment\n", "abstract": " Methods, systems and computer program products are disclosed for controlling generation of change notifications to the one or more users in a collaborative authoring environment.", "num_citations": "6\n", "authors": ["203"]}
{"title": "Fostering user engagement: Rhetorical devices for applause generation learnt from ted talks\n", "abstract": " One problem that every presenter faces when delivering a public discourse is how to hold the listeners\u2019 attentions or to keep them involved. Therefore, many studies in conversation analysis work on this issue and suggest qualitatively constructions that can effectively lead to audience\u2019s applause. To investigate these proposals quantitatively, in this study we analyze the transcripts of 2,135 TED Talks, with a particular focus on the rhetorical devices that are used by the presenters for applause elicitation. Through conducting regression analysis, we identify and interpret 24 rhetorical devices as triggers of audience applauding. We further build models that can recognize applause-evoking sentences and conclude this work with potential implications.", "num_citations": "6\n", "authors": ["203"]}
{"title": "Api as a social glue\n", "abstract": " The rapid growth of social platforms such as Facebook, Twitter and LinkedIn underscores the need for people to connect to existing and new contacts for recreational and professional purposes. A parallel of this phenomenon exists in the software development arena as well. Open-source code sharing platforms such as GitHub provide the ability to follow people and projects of interest. However, users are manually required to identify projects or other users whom they might be interested in following. We observe that most software projects use third-party libraries and that developers who contribute to multiple projects often use the same library APIs across projects. Thus, the library APIs seem to be a good fingerprint of their skill set. Hence, we argue that library APIs can form the social glue to connect people and projects having similar interests. We propose APINet, a system that mines API usage profiles from source\u00a0\u2026", "num_citations": "5\n", "authors": ["203"]}
{"title": "Extending document editors to assimilate documents returned by a search engine\n", "abstract": " Methods and arrangements for configuring document editors. A search client add-in is loaded at a document editor. At the document editor, a document is accepted from a search engine. Communication is established between the search client add-in and the search engine. At the search client add-in, supplementary information about the document is received from the search engine. User input about the document is accepted, and is directed to the search engine. The document is informatively enhanced via at least one of: the supplementary information and the user input. Other variants and embodiments are broadly contemplated herein.", "num_citations": "4\n", "authors": ["203"]}
{"title": "Voice of customer: a tone-based analysis system for online user engagement\n", "abstract": " Comprehensive analysis of online conversations is important for effective user engagement in customer care. However, conventional approaches are not effective in analyzing customer care conversations frequently and thoroughly. In this work, we introduce computational tone-based metrics derived from online conversations for customer care managers to quantify customer satisfaction, customer concerns and agent performance. We present a computational approach that seamlessly incorporates domain-specific tone analysis with product features to enable multi-faceted conversation analysis. These computational results are integrated with interactive visualizations for visual aggregation, summarization and explanation of user engagement in online customer care. We demonstrate the usefulness and effectiveness of our approach through user studies with customer care managers in an enterprise context.", "num_citations": "4\n", "authors": ["203"]}
{"title": "Understanding Purchase Behaviors through Personality-driven Traces\n", "abstract": " We present a computational approach to understanding users' purchase behavior through personality analytics. We model purchase behavior as interactions between personality traits, consumption preferences and product attributes, and represent such interactions as digital traces. We model all possible digital traces using a likelihood trace graph, and determine the likelihood of an edge based on the associations between adjacent pairs of personality attributes, consumption preferences, and product attributes, respectively. In our approach, users' personality traits are inferred from their written texts, and are correlated to a canonical set of consumption preferences. The consumption preferences are then mapped to product descriptions based on their semantic similarity. We demonstrate the effectiveness and usefulness of our approach through a case study on a real-world purchase data.", "num_citations": "4\n", "authors": ["203"]}
{"title": "Managing and using shareable search lists\n", "abstract": " Methods, systems, and articles of manufacture for managing and using shareable search lists are provided herein. A method includes generating a search list associated with a first user, wherein said search list comprises an identification of one or more sites pertaining to a given topic; managing said search list in accordance with (i) one or more instructions provided by said first user, and (ii) one or more access control policies associated with one or more additional users; and sharing said search list associated with said first user with one or more additional users based on the one or more access control policies associated with one or more additional users.", "num_citations": "4\n", "authors": ["203"]}
{"title": "Recommending a dialog act using model-based textual analysis\n", "abstract": " A computer-implemented method according to one embodiment includes receiving, utilizing a processor, textual data associated with a real-time conversation between a first participant and a second participant; receiving, utilizing the processor, an objective of the first participant for the real-time conversation between the first participant and the second participant; determining, utilizing the processor, a dialog act to be entered by the first participant at a current point in the real-time conversation that meets the objective, utilizing a model, including scoring a plurality of proposed dialog acts based on an amount that each proposed dialog act will change a probability of the objective being achieved during a current point in the real-time conversation, and determining the dialog act to be entered, based on the scoring; and returning, utilizing the processor, the dialog act to the first participant.", "num_citations": "3\n", "authors": ["203"]}
{"title": "Determining an impact of a proposed dialog act using model-based textual analysis\n", "abstract": " A computer-implemented method according to one embodiment includes receiving, utilizing a processor, textual data associated with a conversation between a first participant and a second participant, receiving, utilizing the processor, an objective of the first participant for the conversation between the first participant and the second participant, receiving, utilizing the processor, a proposed dialog act to be entered in the conversation from the first participant, determining, utilizing the processor, an impact of the proposed dialog act on the objective of the first participant, utilizing a model, and performing, utilizing the processor, one or more actions based on the impact of the proposed dialog act.", "num_citations": "3\n", "authors": ["203"]}
{"title": "Semantic and contextual searching of knowledge repositories\n", "abstract": " A method for semantic and contextual searching over a knowledge repository. The method includes creating a search query for each concept related to the target concept to form a search context, wherein the search query for each related concept comprises at least one word derived from a record of that concept previously authored in the project, running the search query on a search index of a knowledge repository to identify a record of the related concept for which the search query is created, and fetching the record of the target concept from the repository as a search result such that the fetched record of the target concept is linked in the knowledge repository to a record of the related concept returned as a result of running the search query on at least one record of the at least one related concept.", "num_citations": "3\n", "authors": ["203"]}
{"title": "Mining Developer Directories from Project Change History\n", "abstract": " Methods and arrangements for creating a searchable developer directory. A developer profile is generated relative to a project, the developer profile including information from change history with respect to the project. Metrics related to developer participation in the project are included in the developer profile, and the developer profile is indexed with at least one other developer profile to provide a search basis for search queries.", "num_citations": "3\n", "authors": ["203"]}
{"title": "Is text search an effective approach for fault localization: a practitioners perspective\n", "abstract": " There has been widespread interest in both academia and industry around techniques to help in fault localization. Much of this work leverages static or dynamic code analysis and hence is constrained by the programming language used or presence of test cases. In order to provide more generically applicable techniques, recent work has focused on devising text search based approaches that recommend source files which a developer can modify to fix a bug. Text search may be used for fault localization in either of the following ways. We can search a repository of past bugs with the bug description to find similar bugs and recommend the source files that were modified to fix those bugs. Alternately, we can directly search the code repository to find source files that share words with the bug report text. Few interesting questions come to mind when we consider applying these text-based search techniques in real\u00a0\u2026", "num_citations": "3\n", "authors": ["203"]}
{"title": "Recommending a dialog act using model-based textual analysis\n", "abstract": " A computer-implemented method according to one embodiment includes identifying a plurality of communications each having an associated objective, automatically determining a plurality of dialog acts within the plurality of communications, utilizing a classifier, determining a plurality of features within each of the plurality of communications, training the model, utilizing the plurality of communications and associated objectives, the plurality of dialog acts, and the plurality of features, receiving textual data associated with a real-time conversation between a first participant and a second participant, receiving an objective of the first participant for the real-time conversation between the first participant and the second participant, determining a dialog act to be entered by the first participant at a current point in the real-time conversation that meets the objective, utilizing the model, and determining the dialog act to be\u00a0\u2026", "num_citations": "2\n", "authors": ["203"]}
{"title": "Work-item notification classifier\n", "abstract": " Embodiments of the present invention provide a system, method, and program product for predicting the classification of a work-item notification generated by an issue tracking system. A computing device analyzes a new work-item notification using a trained binary classifier that was trained using at least a past and/or current work-item history that was collected as a tuple that includes information reflecting the workitem-ID, actor, timestamp, attribute, work-item start-value, and work-item end-value. The computing device, in response to analyzing the new work-item notification, predicts a classification of the new work-item notification. In an embodiment, the classification is used for display of the new work-item notification.", "num_citations": "2\n", "authors": ["203"]}
{"title": "Naturalness of natural language artifacts in software\n", "abstract": " We present a study on the naturalness of the natural language artifacts in software. Naturalness is essentially repetitiveness or predictability. By natural language artifacts, we mean source code comments, revision history messages, bug reports and so on. We measure\" naturalness\" using a standard measure, cross-entropy or perplexity from the widely used N-Gram models. Previously, Hindle et al. demonstrated empirically that source code was comparatively more repetitive or regular (ie, more natural) when compared with traditional English text. A question that logically follows from their work is the naturalness of other artifacts associated with software. We present our findings on source code comments, commit logs, bug reports, string messages and content present in the popular question and answer forum, StackOverflow. Each of the artifact that we examine is a natural language artifact that is associated with\u00a0\u2026", "num_citations": "2\n", "authors": ["203"]}
{"title": "Methods and systems for dynamically facilitating project assembly\n", "abstract": " Methods and arrangements for dynamically facilitating project assembly. A project plan with a chosen set of plan components is submitted and a cloud portal is queried for information on chosen plan components. Information on the chosen plan components is received from the cloud portal. Plan recommendations are generated based on the received information, and a recommended plan is selected.", "num_citations": "2\n", "authors": ["203"]}
{"title": "Quantifying customer care utilizing emotional assessments\n", "abstract": " A method, a computer program product, and an information handling system is provided for reducing cost and improving real-time performance for analyzing and representing customer care communication progression based on tone assessments by monitoring communications between a plurality of customers and a plurality of representatives to form a plurality of interaction histories. Analyzing a text form of the plurality of interaction histories according to a Tone Latent Dirichlet Allocation [T-LDA] model to determine a plurality of conversation tones. Mapping the plurality of conversation tones to a plurality of conversation phases and providing a representation of the conversation tones identifying a first customer tone at a first conversation phase and a second customer tone at a second conversation phase.", "num_citations": "1\n", "authors": ["203"]}
{"title": "Message Generation for Ranked Users Based on User Interaction Probabilities\n", "abstract": " An approach is provided in which a system determines a set of message properties corresponding to a set of products based on product data analysis. The system then identifies a set of user properties of users based on analyzing social media data corresponding to the product data. Next, the system identifies a set of candidate customers from the set of users based on analyzing the set of user properties against the set of product data. In turn, the system generates a set of target messages that are tailored to a combination of candidate customer properties corresponding to the set of candidate customers and the product data.", "num_citations": "1\n", "authors": ["203"]}
{"title": "Conversation utterance labeling\n", "abstract": " A method, a computer program product, and an information handling system is provided for labeling unlabeled utterances given a taxonomy of labels utilizing topic word semi-supervised learning.", "num_citations": "1\n", "authors": ["203"]}
{"title": "Brand follower tracking using social media data\n", "abstract": " Tracking of brand followers utilizing social media history and generation of directed advertising. A computing device receives a brand for market analysis, the brand having a brand account on a social media platform. Social media history is received regarding social media habits of social media users. A distribution of brand followers is determined among social media users following the brand account. One or more clusters are generated for viewing market segmentation regarding the brand for market analysis. Brand data is received regarding a plurality of brands having brand accounts on the social media platform, follower profiles for brand followers of the plurality of brand accounts, and social media information for the followers of the plurality of brand accounts. An influencer analysis is generated. Historical follower profiles are received. A historical distribution analysis is generated. A market analysis is generated\u00a0\u2026", "num_citations": "1\n", "authors": ["203"]}
{"title": "System and Method for Enabling Personal Branding\n", "abstract": " A method, system and a computer program product are provided for enabling personal branding by using the symbolic meanings and utilities of products and a user's brand perceptions along with users input of a desired personal brand imagery to output visual information identifying one or more gaps between the user's desired and actual self-brand, thereby enabling a user to navigate products that shape their personal imagery.", "num_citations": "1\n", "authors": ["203"]}
{"title": "Effective content reuse for business consulting practices\n", "abstract": " The \"Holy Grail\" for a business consulting company is the ability to effectively reuse content (design documents, functional specifications, code, etc) created for prior projects on current and future projects. Reuse increases productivity and quality. However, despite multiple efforts, consulting companies still struggle to achieve effective reuse. From a business perspective, the primary challenge is in creating a solution that lowers the effort required to find, consume, and create reusable content. From a technical perspective, the main challenge is in building a repository that automates the process and serves the needs of both human consultants and model-based tools. In this paper we present an approach to achieving effective content reuse that has been successfully deployed in IBM's Global Business Service SAP and Oracle practices, achieving greater than 60% content reuse on similar project.", "num_citations": "1\n", "authors": ["203"]}
{"title": "From Model Extraction to Model-based Reuse of Enterprise Documents.\n", "abstract": " The challenge in building software applications in services is that they should be readily adaptable to cus-tomers' needs. The Model-driven Architecture and Design approach promises to address this if the model, ie, a formalization of domain concepts and their interrelationships, is given. However, building ad omain model from scratch is time-consuming and cumbersome. An appealing approach is to bootstrap model acquisition by learning a probable model from sec-ondary data sources like design documentation or web. In this paper, we propose a semi-automated approach to discover an information model, comprising of enti-ties and relationships, by mining documentation about a particular domain as captured in Word documents.", "num_citations": "1\n", "authors": ["203"]}