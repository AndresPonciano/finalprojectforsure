{"title": "Software Testing \u2013 Goals, Principles, and Limitations\n", "abstract": " Software testing is an activity which is aimed for evaluating quality of a program and also for improving it, by identifying defects and problems. Software testing strives for achieving its goals (both implicit and explicit) but it does have certain limitations, still testing can be done more effectively if certain established principles are be followed. In spite of having limitations, software testing continues to dominate other verification techniques like static analysis, model checking, and proofs. So it is indispensable to understand the goals, principles and limitations of software testing so that the effectiveness of software testing could be maximized.", "num_citations": "76\n", "authors": ["1977"]}
{"title": "An Experience Report on Workshop on Emerging Software Engineering Education\n", "abstract": " The first edition of the Workshop on Software Engineering Education co-located with Innovations (formerly India) in Software Engineering Conference (ISEC) was held on 9th February 2018 at IIIT Hyderabad (India). In this paper, we present an experience report on conducting this workshop. We describe the workshop format and present the workshop program. The workshop was activity-oriented consisting of talks, discussions and engagements from all the participants. We provide an overview of the four invited talks and present few highlights of these talks. We present the challenges encountered, recommendations and future plans. We describe the motivation behind the hands-on workshop activities and their respective formats. We collect a variety of data from the participants on case-based learning, wall of ideas and an activity on the debate between computer science and software engineering as two separate\u00a0\u2026", "num_citations": "3\n", "authors": ["1977"]}
{"title": "Gap between academia and industry: a case of empirical evaluation of three software testing methods\n", "abstract": " Doing the right kind of testing has always been one of main challenging and a decisive task for industry. To choose right software testing method(s), industry needs to have an exact objective knowledge of their effectiveness, efficiency, and applicability conditions. The most common way to evaluate testing methods, for such knowledge, is with empirical studies. Reliable and comprehensive evidence can be obtained by aggregating the results of different empirical studies (family of experiments) taking into account their findings and limitations. We conducted a study to investigate the current state of the art of empirical knowledge base of three testing methods. We found that although the empirical studies conducted so far to evaluate testing methods contain many important and interesting results; however, we still lack factual and generalizable knowledge about performance and applicability conditions of\u00a0\u2026", "num_citations": "2\n", "authors": ["1977"]}
{"title": "Empirical Evaluation of Bug Proneness Index Algorithm\n", "abstract": " Researchers have devised and implemented different bug prediction approaches that use different metrics to predict bugs in software modules. However, the focus of research has been on proposing new approaches/models to predict bugs rather than on validating performance of existing approaches. In this paper, the authors evaluate and validate the findings of an algorithm that predicts the bug proneness index (bug score) of the software classes/modules. The algorithm uses normalized marginal R square values of software metrics as weights to the normalized metrics to compute bug proneness index (bug score). The experiment was performed on Eclipse JDT Core and reports significant improvements in F-measure of their algorithm as compared to the multiple linear regression. The authors found that there was no improvement in F-measure of evaluated algorithm compared to multiple linear regression. The\u00a0\u2026", "num_citations": "1\n", "authors": ["1977"]}
{"title": "A Report on the Third Workshop on Emerging Software Engineering Education (WESEE 2020)\n", "abstract": " Software engineering has to cater to the needs and challenges of fast-evolving technology innovations to produce high quality and reliable software. One of the key elements for a successful future of the software engineering industry is to have a well-trained and highly-skilled workforce. Therefore, academia has to play a prominent role in producing the workforce which is industry ready and ready to cope with the challenges and needs posed by the ever-increasing modern software revolution. Inculcating the art and science of software engineering in the young and old demands the utilization of effective teaching methods at all levels of education dissemination. With a unique theme of Software engineering Education and Training-Teaching Methodologies and Experiences, the third edition of the Workshop on Emerging Software Engineering Education (WESEE) aims to bring together software engineering\u00a0\u2026", "num_citations": "1\n", "authors": ["1977"]}
{"title": "A report on the workshop on emerging software engineering education (wesee 2018)\n", "abstract": " Software engineering represents one of the most change-prone educational contents in computer science as a plethora of new software development process models, methods and tools are unleashed each day. As software engineering is fast evolving to support the unstoppable technological innovations, there is serious demand for new innovative teaching and learning methods at various levels to help produce the highly skilled workforce which can handle these challenging forms of modern software engineering. The first Workshop on Emerging Software Engineering Education (WESEE) is an attempt to provide the educators, researchers and industry practitioners with a platform to share and discuss their experiences related to dealing with the current state, and planning for the future state of the global software engineering education. In this report, we present a pre-organization summary of this workshop to be\u00a0\u2026", "num_citations": "1\n", "authors": ["1977"]}