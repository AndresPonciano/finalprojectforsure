{"title": "Toward the design quality evaluation of object-oriented software systems\n", "abstract": " This paper presents some advances towards the quantitative evaluation of design attributes of object-oriented software systems. We believe that these attributes can express the quality of internal structure, thus being strongly correlated with quality characteristics like analyzability, changeability, stability and testabilility, which are important to software developers and maintainers. An OO design metrics set is reviewed, along with its rationale. An experiment for collection and analysis of those metrics is described and several suppositions regarding the design are evaluated. A considerable number of class taxonomies written in the C++ language were used as a sample. A tool to collect those metrics was built and used for that purpose. Statistical analysis was performed to evaluate the collected data. Results show that some design heuristics can be derived and used to help guide the design process. It was also clear that a number of follow-up topics deserve further research.", "num_citations": "221\n", "authors": ["1296"]}
{"title": "The design of eiffel programs: Quantitative evaluation using the mood metrics\n", "abstract": " The main mechanisms of the Object-Oriented paradigm are supposed to help produce better and cheaper software. As with other things, their usage is more or less intensive, depending mostly on the designer knowledge, experience and ability. This paper reviews a set of metrics called MOOD, suited for evaluating the use of those mechanisms. A MOOD-to-Eiffel binding is introduced. Some code fragments are presented to illustrate the concepts and to clarify the measurement process. A sample of Eiffel libraries is used to collect these metrics. Statistical analysis is performed on the sample and some hypotheses are drawn and discussed. Some preliminary heuristics that can be used during the design process are then derived. Those heuristics can be of some help to designers, mainly if embedded in CASE tools.", "num_citations": "62\n", "authors": ["1296"]}
{"title": "Do Software Languages Engineers Evaluate their Languages?\n", "abstract": " Domain Specific Languages (DSLs) can contribute to increment productivity, while reducing the required maintenance and programming expertise. We hypothesize that Software Languages Engineering (SLE) developers consistently skip, or relax, Language Evaluation. Based on the experience of engineering other types of software products, we assume that this may potentially lead to the deployment of inadequate languages. The fact that the languages already deal with concepts from the problem domain, and not the solution domain, is not enough to validate several issues at stake, such as its expressiveness, usability, effectiveness, maintainability, or even the domain expert's productivity while using them. We present a systematic review on articles published in top ranked venues, from 2001 to 2008, which report DSLs' construction, to characterize the common practice. This work confirms our initial hypothesis and lays the ground for the discussion on how to include a systematic approach to DSL evaluation in the SLE process.", "num_citations": "53\n", "authors": ["1296"]}
{"title": "Towards a component quality model\n", "abstract": " Component Based Development (CBD) is becoming increasingly important for the software industry. According to studies performed by four major market researchers (Gartner Group, Gica, Ovum and PriceWaterhouseCoopers) the component market has been growing steadily over the recent years and forecasts for its growth are made [1][2]. CBD is supposed to reduce the cost and time to market of software applications while increasing their quality. Since components are reused in several occasions, they are likely to be more reliable than software developed from scratch, as they were tested under a larger variety of conditions. Cost and time savings result from the effort that would otherwise be necessary to develop and integrate the functionalities provided by the components in each new software application.Most of the research dedicated to software components is focused on their functional aspects. In our ongoing research, we are concerned with the evaluation of software components quality. This evaluation should be performed using a component quality model. There are several difficulties in the development of such a model, such as (1) which quality characteristics should be considered,(2) how we can evaluate them and (3) who should be responsible for such evaluation. The development and validation of a model that answers these questions would offer a very useful evaluation tool to clients looking for components to include in their software applications. Currently, little or no information on quality is provided by component vendors. For the sake of discussion, we will use here the following component definition: a software component\u00a0\u2026", "num_citations": "38\n", "authors": ["1296"]}
{"title": "How to reach a usable DSL? Moving toward a Systematic Evaluation\n", "abstract": " Domain-Specific Languages (DSLs) are claimed to increase productivity, while reducing the required maintenance and programming expertise. In thiscontext, DSL usability by domain experts is a key factor for its successfuladoption.", "num_citations": "32\n", "authors": ["1296"]}
{"title": "The GOODLY design language for MOOD2 metrics collection\n", "abstract": " The GOODLY language can be used to specify the design of applications or libraries built according to the Object Oriented paradigm. It was conceived with the main purpose of facilitating the extraction of MOOD design metrics [Abreu94]. It allows expressing the most relevant design information for that purpose, such as the class structure with corresponding inheritance relations, uses relationships, message exchanges and information hiding. This language, whose syntax and semantics are fully described, is being used in the production of a new generation of the MOODKIT tools that allow the MOOD metrics extraction.", "num_citations": "27\n", "authors": ["1296"]}
{"title": "Programming languages for data-Intensive HPC applications: A systematic mapping study\n", "abstract": " A major challenge in modelling and simulation is the need to combine expertise in both software technologies and a given scientific domain. When High-Performance Computing (HPC) is required to solve a scientific problem, software development becomes a problematic issue. Considering the complexity of the software for HPC, it is useful to identify programming languages that can be used to alleviate this issue.Because the existing literature on the topic of HPC is very dispersed, we performed a Systematic Mapping Study (SMS) in the context of the European COST Action cHiPSet. This literature study maps characteristics of various programming languages for data-intensive HPC applications, including category, typical user profiles, effectiveness, and type of articles.We organised the SMS in two phases. In the first phase, relevant articles are identified employing an automated keyword-based search in eight\u00a0\u2026", "num_citations": "20\n", "authors": ["1296"]}
{"title": "Quality in use of dsls: Current evaluation methods\n", "abstract": " Domain Specific Languages (DSLs) are claimed to contribute to increment productivity, while reducing the required maintenance and programming expertise. In this context, the usability of these languages becomes a major issue: if the language is not easy to learn and use, it is unlikely to be successfully adopted. It is important to foster high quality DSLs during its engineering process. We argue that a systematic approach based on User Interface Experimental validation techniques should be used to assess the impact of the introduction of DSLs in the productivity of DSL user. Productivity can be fostered by assessing important usability attributes early in the language construction. This work's contribution, besides highlighting the problem of the absence of systematic approaches for experimental validation of DSLs in general, is to identify existing evaluation approaches that can be adapted from the field of User Interfaces.", "num_citations": "17\n", "authors": ["1296"]}
{"title": "Improving the developer experience with a low-code process modelling language\n", "abstract": " Context: The OutSystems Platform is a development environment composed of several DSLs, used to specify, quickly build and validate web and mobile applications. The DSLs allow users to model different perspectives such as interfaces and data models, define custom business logic and construct process models. Problem: The DSL for process modelling (Business Process Technology (BPT)), has a low adoption rate and is perceived as having usability problems hampering its adoption. This is problematic given the language maintenance costs. Method: We used a combination of interviews, a critical review of BPT using the\" Physics of Notation\" and empirical evaluations of BPT using the System Usability Scale (SUS) and the NASA Task Load indeX (TLX), to develop a new version of BPT, taking these inputs and Outsystems' engineers culture into account. Results: Evaluations conducted with 25 professional\u00a0\u2026", "num_citations": "15\n", "authors": ["1296"]}
{"title": "Introducing Usability Concerns Early in the DSL Development Cycle: FlowSL Experience Report.\n", "abstract": " Domain-Specific Languages (DSLs) developers aim to narrow the gap between the level of abstraction used by domain users and the one provided by the DSL, in order to help taming the increased complexity of computer systems and real-world problems. The quality in use of a DSL is essential for its successful adoption. We illustrate how a usability evaluation process can be weaved into the development process of a concrete DSL-FlowSL-used for specifying humanitarian campaign processes lead by an international Non-Governmental Organization. FlowSL is being developed following an agile process using Model-Driven Development (MDD) tools, to cope with vague and poorly understood requirements in the beginning of the development process.", "num_citations": "13\n", "authors": ["1296"]}
{"title": "CBSE: a Quantitative Approach\n", "abstract": " Component-Based Software Engineering (CBSE) is concerned with improving Component-Based Development (CBD) practices. In particular, CBSE aims to provide developers with final software system properties predictability based on the analysis of its constituent components. Therefore, we need to develop effective ways for evaluating both software components and component models. CBD claims include reductions both in development costs and time and the increase of the developed software system\u2019s overall quality [1]. These improvements result from reuse: building software from existing well tested building blocks is more effective than developing similar functionalities from scratch. It is important to analyse the reuse related improvement achieved through CBD. The bulk of component related research has been mainly focused on the functionality and composability of components, as well as their specification. The research niche of component quality assessment, with an emphasis on quantitative approaches, is fairly unexplored. The few existing evaluations are performed at a qualitative level, which makes the assessment of the true impact of the above-mentioned claims harder. In our research, we are particularly interested in the quantitative evaluation of software components and their impact on the systems they are integrated in. Evaluating components is useful in many ways. In project management, internal component complexity evaluation can help estimating the effort related to activities such as the construction, evolution or debugging of software components. For the components\u2019 producers, it is a way of promoting the best\u00a0\u2026", "num_citations": "12\n", "authors": ["1296"]}
{"title": "Developing a mutually-recognized cross-domain study program in cyber-physical systems\n", "abstract": " The primary scientific targets of the European COST Action Multi-Paradigm Modelling for Cyber-Physical Systems (MPM4CPS) are: i) the conceptualization of techniques and tools for improving interoperability; ii) the development of new ontologies and formalisms (and the links between them) to deal with the heterogeneity; and, iii) to perform the integration of the problems resulting from several application domains, under a common MPM4CPS umbrella. The action also aims at crystallizing MPM4CPS contents into a suitable format for educational purposes. This entails to create the base for a European Master and PhD program in MPM4CPS involving several European leading Universities and setting up the respective discipline roadmap facing the challenge of development mutually recognized cross-domain expertise based study program in CPS. This paper offers a methodology for the creation of CPS expert\u00a0\u2026", "num_citations": "9\n", "authors": ["1296"]}
{"title": "A merit factor driven approach to the modularization of object-oriented systems\n", "abstract": " La modularisation peut avoir plusieurs sens dans le monde de l\u2019orient\u00e9 objet, m\u00eame si elle correspond habituellement une division d\u2019un syst\u00e8me en groupes de classes. Le probl\u00e8me est que cette division peut \u00eatre accomplie de diff\u00e9rentes mani\u00e8res enjouant sur le nombre de groupes et la fa\u00e7on de regrouper les classes. Nous utilisons une m\u00e9thode de regroupement automatique pour d\u00e9terminer le regroupement optimal pour un nombre fixe de groupes. Pour trouver le nombre optimal de groupes, nous proposons un crit\u00e8re de d\u00e9cision bas\u00e9 sur la d\u00e9finition d'un facteur de m\u00e9rite de la modularisation. Nous utilisons ce cadre th\u00e9orique dans l'outil de MOTTO et nous l'appliquons \u00e0 un \u00e9chantillon raisonnablement grand de syst\u00e8mes logiciels. Les r\u00e9sultats les plus importants sont que (i) l'approche propos\u00e9e est faisable et est facile \u00e0 appliquer avec le support d'un outil appropri\u00e9 et que (ii) les syst\u00e8mes analys\u00e9s sont loin d'exploiter pleinement les avantages de la modularisation", "num_citations": "7\n", "authors": ["1296"]}
{"title": "Agent-based cyber-physical system development with sea_ml++\n", "abstract": " Intelligent agents are software components that can work autonomously and proactively to solve the problems collaboratively. To this end, they can behave in a cooperative manner and collaborate with other agents constituting systems called Multi-agent Systems (MAS). These systems have different perspectives such as the internal structure, plan, interaction, organisation, role, environment and so on. By having these views, MASs can consider the structure, behaviour, interaction, and environment of the complex systems such as Cyber-physical Systems (CPS). Therefore, intelligent software agents and MASs can be used in the modelling and development of CPSs.There are different Domain-specific Modelling Languages (DSMLs) to build MASs with a focus on various MAS aspects. One of the generative MAS DSMLs is SEA_ML++ which presents a thorough Model-driven Engineering practice with including the\u00a0\u2026", "num_citations": "5\n", "authors": ["1296"]}
{"title": "From objects to components: a quantitative experiment\n", "abstract": " Component based software development (CBD) is increasingly becoming a de facto approach to software development. Most software professionals were originally trained to build software using another paradigm, such as the object orientation (OO) paradigm, or the structured programming one. To face the trend to CBD, software professionals are required to make a paradigm shift. Such a shift incurs in considerable costs. This paper describes an experiment where part of a legacy software application built with the OO paradigm was transformed into a software component, using two different technologies (Object Pascal and C++). In this experiment, we were concerned not only with the qualitative aspects of the problems dealt with by a software professional in this transformation, but mostly with some quantitative ones. In particular, we compared the effort required to make such transformations with each of the technologies. The subject performing the experiment was at ease with all the involved OO languages, but not with the component models supported by the used platforms.", "num_citations": "5\n", "authors": ["1296"]}
{"title": "Indirect Keyword Recommendation\n", "abstract": " Helping users to find useful contacts or potentially interesting subjects is a challenge for social and productive networks. The evidence of the content produced by users must be considered in this task, which may be simplified by the use of the meta-data associated with the content, i.e., The categorization supported by the network -- descriptive keywords, or tags. In this paper we present a model that enables keyword discovery methods through the interpretation of the network as a graph, solely relying on keywords that categorize or describe productive items. The model and keyword discovery methods presented in this paper avoid content analysis, and move towards a generic approach to the identification of relevant interests and, eventually, contacts. The evaluation of the model and methods is executed by two experiments that perform frequency and classification analyses over the Flickr network. The results\u00a0\u2026", "num_citations": "4\n", "authors": ["1296"]}
{"title": "A comparison of maps Application Programming Interfaces\n", "abstract": " The development of web applications that manipulate geo-referenced information is often supported by Application Programming Interfaces (APIs), al-lowing a fast development cycle for high quality applications. APIs can be used by programmers with different expertise levels and choosing an adequate API may have a dramatic impact on the productivity achieved by those programmers. Our goal is to compare maps APIs with respect to their usability. We compare three different APIs: the Google Maps JavaScript API, the ArcGIS API for JavaScript, and the OpenLayers JavaScript Mapping Library. Our comparison is supported by a set of software metrics and is performed in two orthogonal ways: the comparison of three implementations of the same system prototype, each using one of the APIs under scrutiny; the comparison of the APIs specifications. The main results of the study are related to the size of the APIs, with the Google API being significantly smaller than the others.", "num_citations": "4\n", "authors": ["1296"]}
{"title": "Evidence-Based Comparison of Modularity Support Between Java and Object Teams\n", "abstract": " Background: Aspect-oriented programming (AOP) is an emerging programming paradigm whose focus is about improving modularity, with an emphasis on the modularization of crosscutting concerns. Objective: The goal of this paper is to assess the extent to which an AOP language -ObjectTeams/Java (OT/J) -improves the modularity of a software system. This improvement has been claimed but, to the best of our knowledge, this paper is the first attempting to present quantitative evidence of it. Method: We compare functionally-equivalent implementations of the Gang-of-Four design patterns, developed in Java and OT/J, using software metrics. Results: The results of our comparison support the modularity improvement claims made in the literature. For six of the seven metrics used, the OT/J versions of the patterns obtained significantly better results. Limitations: This work uses a set of metrics originally defined for object-oriented (OO) systems. It may be the case that the metrics are biased, in that they were created in the context of OO programming (OOP), before the advent of AOP. We consider this comparison a stepping stone as, ultimately, we plan to assess the modularity improvements with paradigm independent metrics, which will conceivably eliminate the bias. Each individual example from the sample used in this paper is small. In future, we plan to replicate this experiment using larger systems, where the benefits of AOP may be more noticeable. Conclusion: This work contributes with evidence to fill gaps in the body of quantitative results supporting alleged benefits to software modularity brought by AOP languages, namely OT/J.", "num_citations": "4\n", "authors": ["1296"]}
{"title": "AgentDSM-Eval: A framework for the evaluation of domain-specific modeling languages for multi-agent systems\n", "abstract": " Software development required for constructing multi-agent systems (MAS) usually becomes challenging and time-consuming due to the properties of autonomy, distributedness, and openness of these systems in addition to the complicated nature of internal agent behaviors and agent interactions. To facilitate MAS development, the researchers propose various domain-specific modeling languages (DSMLs) by enriching MAS metamodels with a defined syntax and semantics. Although the descriptions of these languages are given in the related studies with the examples of their use, unfortunately, many are not evaluated in terms of either the usability (being hard to learn, understand and use) or the quality of the generated artifacts. Hence, in this paper, we introduce an evaluation framework, called AgentDSM-Eval, with its supporting tool which can be used to evaluate MAS DSMLs systematically according to\u00a0\u2026", "num_citations": "3\n", "authors": ["1296"]}
{"title": "Multi-Paradigm Modelling Approaches for Cyber-Physical Systems\n", "abstract": " Multi-Paradigm Modelling for Cyber-Physical Systems explores modeling and analysis as crucial activities in the development of Cyber-Physical Systems, which are inherently cross-disciplinary in nature and require distinct modeling techniques related to different disciplines, as well as a common background knowledge. This book will serve as a reference for anyone starting in the field of CPS who needs a solid foundation of modeling, including a comprehensive introduction to existing techniques and a clear explanation of their advantages and limitations. This book is aimed at both researchers and practitioners who are interested in various modeling paradigms across computer science and engineering. Identifies key problems and offers solution approaches as well as tools which have been developed or are necessary for modeling paradigms across cyber physical systems Explores basic theory and current research topics, related challenges, and research directions for multi-paradigm modeling Provides a complete, conceptual overview and framework of the research done by the MPM4CPS working groups and the different types of modeling paradigms developed", "num_citations": "1\n", "authors": ["1296"]}