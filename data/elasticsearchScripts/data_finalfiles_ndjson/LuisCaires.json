{"title": "Session types as intuitionistic linear propositions\n", "abstract": " Several type disciplines for \u03c0-calculi have been proposed in which linearity plays a key role, even if their precise relationship with pure linear logic is still not well understood. In this paper, we introduce a type system for the \u03c0-calculus that exactly corresponds to the standard sequent calculus proof system for dual intuitionistic linear logic. Our type system is based on a new interpretation of linear propositions as session types, and provides the first purely logical account of all (both shared and linear) features of session types. We show that our type discipline is useful from a programming perspective, and ensures session fidelity, absence of deadlocks, and a tight operational correspondence between \u03c0-calculus reductions and cut elimination steps.", "num_citations": "389\n", "authors": ["673"]}
{"title": "A spatial logic for concurrency (part I)\n", "abstract": " We present a logic that can express properties of freshness, secrecy, structure, and behavior of concurrent systems. In addition to standard logical and temporal operators, our logic includes spatial operations corresponding to composition, local name restriction, and a primitive fresh name quantifier. Properties can also be defined by recursion; a central aim of this paper is then the combination of a logical notion of freshness with inductive and coinductive definitions of properties.", "num_citations": "262\n", "authors": ["673"]}
{"title": "A spatial logic for concurrency (part I)\n", "abstract": " We present a logic that can express properties of freshness, secrecy, structure, and behavior of concurrent systems. In addition to standard logical and temporal operators, our logic includes spatial operations corresponding to composition, local name restriction, and a primitive freshname quantifier. Properties can also be defined by recursion; a central theme of this paper is then the combination of a logical notion of freshness with inductive and coinductive definitions of properties.", "num_citations": "156\n", "authors": ["673"]}
{"title": "A basic model of typed components\n", "abstract": " This paper studies specific language level abstractions for component-based programming. We propose a simple model which captures some basic ingredients\u2014like explicit context dependence, dynamic binding and subtype polymorphism, late (dynamic) composition, and avoidance of inheritance in favor of object composition - that several authors have defended to be central to black-box object-oriented component programming styles. The model is expressed by a core imperative typed calculus, in which components are first-class entities, and whose basic constructs enable the composition, scripting, instantiation and definition of atomic components. Some motivating programming examples are presented, and the operational semantics is shown to enjoy a typesafety property. We also discuss an extension to the Java language aimed at supporting the proposed model, and some implementation issues.", "num_citations": "148\n", "authors": ["673"]}
{"title": "The conversation calculus: A model of service-oriented computation\n", "abstract": " We present a process-calculus model for expressing and analyzing service-based systems. Our approach addresses central features of the service-oriented computational model such as distribution, process delegation, communication and context sensitiveness, and loose coupling. Distinguishing aspects of our model are the notion of conversation context, the adoption of a context sensitive, message-passing-based communication, and of a simple yet expressive mechanism for handling exceptional behavior. We instantiate our model by extending a fragment of the \u03c0-calculus, illustrate its expressiveness by means of many examples, and study its basic behavioral theory; in particular, we establish that bisimilarity is a congruence.", "num_citations": "145\n", "authors": ["673"]}
{"title": "Linear Logic Propositions as Session Types\n", "abstract": " Throughout the years, several typing disciplines for the \u03c0-calculus have been proposed. Arguably, the most widespread of these typing disciplines consists of session types. Session types describe the input/output behaviour of processes and traditionally provide strong guarantees about this behaviour (i.e. deadlock-freedom and fidelity). While these systems exploit a fundamental notion of linearity, the precise connection between linear logic and session types has not been well understood. This paper proposes a type system for the \u03c0-calculus that corresponds to a standard sequent calculus presentation of intuitionistic linear logic, interpreting linear propositions as session types and thus providing a purely logical account of all key features and properties of session types. We show the deep correspondence between linear logic and session types by exhibiting a tight operational correspondence between cut\u00a0\u2026", "num_citations": "123\n", "authors": ["673"]}
{"title": "Higher-Order Processes, Functions, and Sessions: A Monadic Integration\n", "abstract": " In prior research we have developed a Curry-Howard interpretation of linear sequent calculus as session-typed processes. In this paper we uniformly integrate this computational interpretation in a functional language via a linear contextual monad that isolates session-based concurrency. Monadic values are open process expressions and are first class objects in the language, thus providing a logical foundation for higher-order session typed processes. We illustrate how the combined use of the monad and recursive types allows us to cleanly write a rich variety of concurrent programs, including higher-order programs that communicate processes. We show the standard metatheoretic result of type preservation, as well as a global progress theorem, which to the best of our knowledge, is new in the higher-order session typed setting.", "num_citations": "123\n", "authors": ["673"]}
{"title": "A spatial logic for concurrency (part II)\n", "abstract": " We present a modal logic for describing the spatial organization and the behavior of distributed systems. In addition to standard logical and temporal operators, our logic includes spatial operations corresponding to process composition and name hiding, and a fresh quantifier.", "num_citations": "117\n", "authors": ["673"]}
{"title": "Behavioral and spatial observations in a logic for the \u03c0-calculus\n", "abstract": " In addition to behavioral properties, spatial logics can talk about other key properties of concurrent systems such as secrecy, freshness, usage of resources, and distribution. We study an expressive spatial logic for systems specified in the synchronous \u03c0-calculus with recursion, based on a small set of behavioral and spatial observations. We give coinductive and equational characterizations of the equivalence induced on processes by the logic, and conclude that it strictly lies between structural congruence and strong bisimulation. We then show that model-checking is decidable for a useful class of processes that includes the finite-control fragment of the \u03c0-calculus.", "num_citations": "101\n", "authors": ["673"]}
{"title": "Dependent session types via intuitionistic linear type theory\n", "abstract": " We develop an interpretation of linear type theory as dependent session types for a term passing extension of the pi-calculus. The type system allows us to express rich constraints on sessions, such as interface contracts and proof-carrying certification, which go beyond existing session type systems, and are here justified on purely logical grounds. We can further refine our interpretation using proof irrelevance to eliminate communication overhead for proofs between trusted parties. Our technical results include type preservation and global progress, which in our setting naturally imply compliance to all properties declared in interface contracts expressed by dependent types.", "num_citations": "94\n", "authors": ["673"]}
{"title": "A spatial logic for concurrency--II\n", "abstract": " We present a modal logic for describing the spatial organization and the behavior of distributed systems. In addition to standard logical and temporal operators, our logic includes spatial operations corresponding to process composition and name hiding, and a fresh name quantifier. In Part I of this work we study the fundamental semantic properties of our logic; the focus of the present Part II is on proof theory. The main contributions are a sequent-based proof system for our logic, and a proof of cut-elimination for its first-order fragment.", "num_citations": "90\n", "authors": ["673"]}
{"title": "Conversation types\n", "abstract": " We present a type theory for analyzing concurrent multiparty interactions as found in service-oriented computing. Our theory introduces a novel and flexible type structure, able to uniformly describe both the internal and the interface behavior of systems, referred respectively as choreographies and contracts in web-services terminology. The notion of conversation builds on the fundamental concept of session, but generalizes it along directions up to now unexplored; in particular, conversation types discipline interactions in conversations while accounting for dynamical join and leave of an unanticipated number of participants. We prove that well-typed systems never violate the prescribed conversation constraints. We also present techniques to ensure progress of systems involving several interleaved conversations, a previously open problem.", "num_citations": "84\n", "authors": ["673"]}
{"title": "Behavioral Polymorphism and Parametricity in Session-Based Communication\n", "abstract": " We investigate a notion of behavioral genericity in the context of session type disciplines. To this end, we develop a logically motivated theory of parametric polymorphism, reminiscent of the Girard-Reynolds polymorphic \u03bb-calculus, but casted in the setting of concurrent processes. In our theory, polymorphism accounts for the exchange of abstract communication protocols and dynamic instantiation of heterogeneous interfaces, as opposed to the exchange of data types and dynamic instantiation of individual message types. Our polymorphic session-typed process language satisfies strong forms of type preservation and global progress, is strongly normalizing, and enjoys a relational parametricity principle. Combined, our results confer strong correctness guarantees for communicating systems. In particular, parametricity is key to derive non-trivial results about internal protocol independence, a concurrent\u00a0\u2026", "num_citations": "75\n", "authors": ["673"]}
{"title": "Dependent information flow types\n", "abstract": " In this paper, we develop a novel notion of dependent information flow types. Dependent information flow types fit within the standard framework of dependent type theory, but, unlike usual dependent types, crucially allow the security level of a type, rather than just the structural data type itself, to depend on runtime values.", "num_citations": "73\n", "authors": ["673"]}
{"title": "Linear logical relations for session-based concurrency\n", "abstract": " In prior work we proposed an interpretation of intuitionistic linear logic propositions as session types for concurrent processes. The type system obtained from the interpretation ensures fundamental properties of session-based typed disciplines\u2014most notably, type preservation, session fidelity, and global progress. In this paper, we complement and strengthen these results by developing a theory of logical relations. Our development is based on, and is remarkably similar to, that for functional languages, extended to an (intuitionistic) linear type structure. A main result is that well-typed processes always terminate (strong normalization). We also introduce a notion of observational equivalence for session-typed processes. As applications, we prove that all proof conversions induced by the logic interpretation actually express observational equivalences, and explain how type isomorphisms resulting from linear\u00a0\u2026", "num_citations": "64\n", "authors": ["673"]}
{"title": "Cut Reduction in Linear Logic as Asynchronous Session-Typed Communication\n", "abstract": " Prior work has shown that intuitionistic linear logic can be seen as a session-type discipline for the pi-calculus, where cut reduction in the sequent calculus corresponds to synchronous process reduction. In this paper, we exhibit a new process assignment from the asynchronous, polyadic pi-calculus to exactly the same proof rules. Proof-theoretically, the difference between these interpretations can be understood through permutations of inference rules that preserve observational equivalence of closed processes in the synchronous case. We also show that, under this new asynchronous interpretation, cut reductions correspond to a natural asynchronous buffered session semantics, where each session is allocated a separate communication buffer.", "num_citations": "62\n", "authors": ["673"]}
{"title": "Proof-carrying code in a session-typed process calculus\n", "abstract": " Dependent session types allow us to describe not only properties of the I/O behavior of processes but also of the exchanged data. In this paper we show how to exploit dependent session types to express proof-carrying communication. We further introduce two modal operators into the type theory to provide detailed control about how much information is communicated: one based on traditional proof irrelevance and one integrating digital signatures.", "num_citations": "54\n", "authors": ["673"]}
{"title": "Functions as Session-Typed Processes\n", "abstract": " We study type-directed encodings of the simply-typed \u03bb-calculus in a session-typed \u03c0-calculus. The translations proceed in two steps: standard embeddings of simply-typed \u03bb-calculus in a linear \u03bb-calculus, followed by a standard translation of linear natural deduction to linear sequent calculus. We have shown in prior work how to give a Curry-Howard interpretation of the proofs in the linear sequent calculus as \u03c0-calculus processes subject to a session type discipline. We show that the resulting translations induce sharing and copying parallel evaluation strategies for the original \u03bb-terms, thereby providing a new logically motivated explanation for these strategies.", "num_citations": "53\n", "authors": ["673"]}
{"title": "Linear logical relations and observational equivalences for session-based concurrency\n", "abstract": " We investigate strong normalization, confluence, and behavioral equality in the realm of session-based concurrency. These interrelated issues underpin advanced correctness analysis in models of structured communications. The starting point for our study is an interpretation of linear logic propositions as session types for communicating processes, proposed in prior work. Strong normalization and confluence are established by developing a theory of logical relations. Defined upon a linear type structure, our logical relations remain remarkably similar to those for functional languages. We also introduce a natural notion of observational equivalence for session-typed processes. Strong normalization and confluence come in handy in the associated coinductive reasoning: as applications, we prove that all proof conversions induced by the logic interpretation actually express observational equivalences, and explain\u00a0\u2026", "num_citations": "44\n", "authors": ["673"]}
{"title": "SLMC: A Tool for Model Checking Concurrent Systems against Dynamical Spatial Logic Specifications\n", "abstract": " The Spatial Logic Model Checker is a tool for verifying \u03c0-calculus systems against safety, liveness, and structural properties expressed in the spatial logic for concurrency of Caires and Cardelli. Model-checking is one of the most widely used techniques to check temporal properties of software systems. However, when the analysis focuses on properties related to resource usage, localities, interference, mobility, or topology, it is crucial to reason about spatial properties and structural dynamics. The SLMC is the only currently available tool that supports the combined analysis of behavioral and spatial properties of systems. The implementation, written in OCAML, is mature and robust, available in open source, and outperforms other tools for verifying systems modeled in \u03c0-calculus.", "num_citations": "44\n", "authors": ["673"]}
{"title": "Multiparty session types within a canonical binary theory, and beyond\n", "abstract": " A widespread approach to software service analysis uses session types. Very different type theories for binary and multiparty protocols have been developed; establishing precise connections between them remains an open problem. We present the first formal relation between two existing theories of binary and multiparty session types: a binary system rooted in linear logic, and a multiparty system based on automata theory. Our results enable the analysis of multiparty protocols using a (much simpler) type theory for binary protocols, ensuring protocol fidelity and deadlock-freedom. As an application, we offer the first theory of multiparty session types with behavioral genericity. This theory is natural and powerful; its analysis techniques reuse results for binary session types.", "num_citations": "42\n", "authors": ["673"]}
{"title": "Towards Concurrent Type Theory\n", "abstract": " We review progress in a recent line of research that provides a concurrent computational interpretation of (intuitionistic) linear logic. Propositions are interpreted as session types, sequent proofs as processes in the pi-calculus, cut reductions as process reductions, and vice versa. The strong proof-theoretic foundation of this type system provides immediate opportunities for uniform generalization, specifically, to embed terms from a functional type theory. The resulting system satisfies the properties of type preservation, progress, and termination, as expected from a language derived via a Curry-Howard isomorphism. While very expressive, the language is strictly stratified so that dependent types for functional terms can be enforced during communication, but neither processes nor channels can appear in functional terms. We briefly speculate on how this limitation might be overcome to arrive at a fully dependent\u00a0\u2026", "num_citations": "40\n", "authors": ["673"]}
{"title": "Corecursion and non-divergence in session-typed processes\n", "abstract": " Session types are widely accepted as an expressive discipline for structuring communications in concurrent and distributed systems. In order to express infinitely unbounded sessions, session typed languages often include general recursion which may introduce undesirable divergence, e.g., infinite unobservable reduction sequences. In this paper we address, by means of typing, the challenge of ensuring non-divergence in a session-typed -calculus with general (co)recursion, while still allowing interesting infinite behaviors to be definable. Our approach builds on a Curry-Howard correspondence between our type system and linear logic extended with co-inductive types, for which our non-divergence property implies consistency. We prove type safety for our framework, implying protocol compliance and global progress of well-typed processes. We also establish, using a logical relation argument, that\u00a0\u2026", "num_citations": "39\n", "authors": ["673"]}
{"title": "The Type Discipline of Behavioral Separation\n", "abstract": " We introduce the concept of behavioral separation as a general principle for disciplining interference in higher-order imperative concurrent programs, and present a type-based approach that systematically develops the concept in the context of an ML-like language extended with concurrency and synchronization primitives. Behavioral separation builds on notions originally introduced for behavioral type systems and separation logics, but shifts the focus from the separation of static program state properties towards the separation of dynamic usage behaviors of runtime values. Behavioral separation types specify how values may be safely used by client code, and can enforce fine-grained interference control disciplines while preserving compositionality, information hiding, and flexibility. We illustrate how our type system, even if based on a small set of general primitives, is already able to tackle fairly challenging\u00a0\u2026", "num_citations": "39\n", "authors": ["673"]}
{"title": "A Process Calculus Analysis of Compensations\n", "abstract": " Conversations in service-oriented computation are frequently long running. In such a setting, traditional ACID properties of transactions cannot be reasonably implemented, and compensation mechanisms seem to provide convenient techniques to, at least, approximate them. In this paper, we investigate the representation and analysis of structured compensating transactions within a process calculus model, by embedding in the Conversation Calculus certain structured compensation programming abstractions inspired by the ones proposed by Butler, Ferreira, and Hoare. We prove the correctness of the embedding after developing a general notion of stateful model for structured compensations and related results, and showing that the embedding induces such a model.", "num_citations": "39\n", "authors": ["673"]}
{"title": "Spatial-behavioral types for concurrency and resource control in distributed systems\n", "abstract": " We develop a notion of spatial-behavioral typing suitable to discipline concurrent interactions and resource usage in distributed object systems. Our type structure reflects a resource sensitive model, where a parallel composition type operator expresses resource independence, a sequential composition type operator expresses resource synchronization, and a type modality expresses resource ownership. We model the intended computational systems using a concurrent object calculus. Soundness of our type system is established using a logical relations technique, building on a interpretation of types as properties expressible in a spatial logic.", "num_citations": "38\n", "authors": ["673"]}
{"title": "Linearity, control effects, and behavioral types\n", "abstract": " Mainstream programming idioms intensively rely on state mutation, sharing, and concurrency. Designing type systems for handling and disciplining such idioms is challenging, due to long known conflicts between internal non-determinism, linearity, and control effects such as exceptions. In this paper, we present the first type system that accommodates non-deterministic and abortable behaviors in the setting of session-based concurrent programs. Remarkably, our type system builds on a Curry-Howard correspondence with (classical) linear logic conservatively extended with two dual modalities capturing an additive (co)monad, and provides a first example of a Curry-Howard interpretation of a realistic programming language with built-in internal non-determinism. Thanks to its deep logical foundations, our system elegantly addresses several well-known tensions between control, linearity, and non\u00a0\u2026", "num_citations": "37\n", "authors": ["673"]}
{"title": "Elimination of quantifiers and undecidability in spatial logics for concurrency\n", "abstract": " Aiming at a deeper understanding of the essence of spatial logics for concurrency, we study a minimal spatial logic without quantifiers or any operators talking about names. The logic just includes the basic spatial operators void, composition and its adjunct, and the next step modality; for the model we consider a tiny fragment of CCS. We show that this core logic can already encode its own extension with quantifiers, and modalities for actions. From this result, we derive several consequences. Firstly, we establish the intensionality of the logic, we characterize the equivalence it induces on processes, and we derive characteristic formulas. Secondly, we show that, unlike in static spatial logics, the composition adjunct adds to the expressiveness of the logic, so that adjunct elimination is not possible for dynamic spatial logics, even quantifier-free. Finally, we prove that both model-checking and satisfiability\u00a0\u2026", "num_citations": "37\n", "authors": ["673"]}
{"title": "Aliasing control with view-based typestate\n", "abstract": " Tracking the state of an object (in the sense of how a File can be in an Open or Closed state) is difficult not just because of the problem of managing state transitions but also due to the complexity introduced by aliasing. Unchecked duplication of object references makes local reasoning impossible by allowing situations where transitions can be triggered unexpectedly (for instance, passing aliased parameters to a method that expects unaliased parameters, or calling a method that has a side effect through an alias deeply nested in a data structure).", "num_citations": "32\n", "authors": ["673"]}
{"title": "Spatial-behavioral types, distributed services, and resources\n", "abstract": " We develop a notion of spatial-behavioral typing suitable to discipline interactions in service-based systems modeled in a distributed object calculus. Our type structure reflects a resource aware model of behavior, where a parallel composition type operator expresses resource independence, a sequential composition type operator expresses implicit synchronization, and a modal operator expresses resource ownership. Soundness of our type system is established using a logical relations technique, building on a interpretation of types as properties expressible in a spatial logic.", "num_citations": "27\n", "authors": ["673"]}
{"title": "Information Flow Analysis for Valued-Indexed Data Security Compartments\n", "abstract": " Data-intensive applications as popularised by cloud computing raise many security challenges, due to the large number of remote users involved and multi-tenancy. Frequently, the security compartment associated to data stored in shared containers, such as database tables, is not determined by the static structure of the database schema, but depends on runtime data values, as required to ensure so-called \u201crow-level\u201d security. In this paper, we investigate a programming language approach to these issues, based on a -calculus extended with data manipulation primitives. We develop a type-based information flow analysis introducing a notion of value-indexed security labels, representing value-indexed security levels, or compartments. Our results ensure that well-typed programs do not break confidentiality constraints imposed by a declared security discipline.", "num_citations": "23\n", "authors": ["673"]}
{"title": "Type-based access control in data-centric systems\n", "abstract": " Data-centric multi-user systems, such as web applications, require flexible yet fine-grained data security mechanisms. Such mechanisms are usually enforced by a specially crafted security layer, which adds extra complexity and often leads to error prone coding, easily causing severe security breaches. In this paper, we introduce a programming language approach for enforcing access control policies to data in data-centric programs by static typing. Our development is based on the general concept of refinement type, but extended so as to address realistic and challenging scenarios of permission-based data security, in which policies dynamically depend on the database state, and flexible combinations of column- and row-level protection of data are necessary. We state and prove soundness and safety of our type system, stating that well-typed programs never break the declared data access control policies.", "num_citations": "23\n", "authors": ["673"]}
{"title": "Elimination of quantifiers and undecidability in spatial logics for concurrency\n", "abstract": " The introduction of spatial logics in concurrency is motivated by a shift of focus from concurrent systems towards distributed systems. Aiming at a deeper understanding of the essence of dynamic spatial logics, we study a minimal spatial logic without quantifiers or any operators talking about names. The logic just includes the basic spatial operators void, composition and its adjunct, and the next step modality; for the model we consider a tiny fragment of CCS. We show that this core logic can already encode its own extension with quantification over actions, and modalities for actions. From this result, we derive several consequences. Firstly, we establish the intensionality of the logic, we characterize the equivalence it induces on processes, and we derive characteristic formulas. Secondly, we show that, unlike in static spatial logics, the composition adjunct adds to the expressiveness of the logic, so that adjunct\u00a0\u2026", "num_citations": "19\n", "authors": ["673"]}
{"title": "Rely-guarantee protocols\n", "abstract": " The use of shared mutable state, commonly seen in object-oriented systems, is often problematic due to the potential conflicting interactions between aliases to the same state. We present a substructural type system outfitted with a novel lightweight interference control mechanism, rely-guarantee protocols, that enables controlled aliasing of shared resources. By assigning each alias separate roles, encoded in a novel protocol abstraction in the spirit of rely-guarantee reasoning, our type system ensures that challenging uses of shared state will never interfere in an unsafe fashion. In particular, rely-guarantee protocols ensure that each alias will never observe an unexpected value, or type, when inspecting shared memory regardless of how the changes to that shared state (originating from potentially unknown program contexts) are interleaved at run-time.", "num_citations": "18\n", "authors": ["673"]}
{"title": "A Spatial-Epistemic Logic for Reasoning about Security Protocols\n", "abstract": " Reasoning about security properties involves reasoning about where the information of a system is located, and how it evolves over time. While most security analysis techniques need to cope with some notions of information locality and knowledge propagation, usually they do not provide a general language for expressing arbitrary properties involving local knowledge and knowledge transfer. Building on this observation, we introduce a framework for security protocol analysis based on dynamic spatial logic specifications. Our computational model is a variant of existing pi-calculi, while specifications are expressed in a dynamic spatial logic extended with an epistemic operator. We present the syntax and semantics of the model and logic, and discuss the expressiveness of the approach, showing it complete for passive attackers. We also prove that generic Dolev-Yao attackers may be mechanically determined for any deterministic finite protocol, and discuss how this result may be used to reason about security properties of open systems. We also present a model-checking algorithm for our logic, which has been implemented as an extension to the SLMC system.", "num_citations": "18\n", "authors": ["673"]}
{"title": "Logical semantics of types for concurrency\n", "abstract": " We motivate and present a logical semantic approach to types for concurrency and to soundness of related systems. The approach is illustrated by the development of a generic type system for the \u03c0-calculus, which may be instantiated for specific notions of typing by extension with adequate subtyping principles. Soundness of our type system is established using a logical predicate technique, based on a compositional spatial logic interpretation of types.", "num_citations": "16\n", "authors": ["673"]}
{"title": "SLWV\u2014A theorem prover for logic programming\n", "abstract": " The purpose of this work is to define a theorem prover that retains the procedural aspects of logic programing. The proof system we propose (SLWV-resolution. for Selected Linear Without contrapositive clause Variants)) is defined for a set of clauses in the implicational form (keeping to the form of logic programs). not requiring contrapositives, and has an execution method that respects the execution order of literals in a clause, preserving the procedural flavor of logic programming. SLWV-resolution can be seen as a combination of SL-resolution and case-analysis, which admits a form of linear derivation. We show its soundness and completeness by establishing a one-to-one mapping between SLWV and SL derivations which also clarifies the motivation and the method.Our work can be seen as an extension to logic programs that goes beyond normal programs, and thus beyond (positive) definite clause\u00a0\u2026", "num_citations": "16\n", "authors": ["673"]}
{"title": "Types for Dynamic Recon\ufb01guration\n", "abstract": " We de\ufb01ne a core language combining computational and architectural primitives, and study how static typing may be used to ensure safety properties of component composition and dynamic recon\ufb01guration in object-based systems. We show how our language can model typed entities analogous of con\ufb01guration scripts, make\ufb01les, components, and component instances, where static typing combined with a dynamic type-directed test on the structure of objects can enforce consistency of compositions and atomicity of recon\ufb01guration.", "num_citations": "13\n", "authors": ["673"]}
{"title": "Types and logic, concurrency and non-determinism\n", "abstract": " Behavioural types are becoming an increasingly useful instrument to reason about the behaviour of complex concurrent and interactive computing systems. While type systems for traditional programming models have been for long rooted on pure logical principles, the connections between interactive and concurrent programming models and their logically motivated type disciplines started to be better understood only recently. In this note, we motivate an approach to accommodate internal non-determinism, a phenomenon pervasively present both in the behaviour of artificial and natural computing systems but which seems to have escaped logical analysis, in a type system for session-based communication that preserves logical compatibility by supporting a Curry-Howard correspondence.\u201cEach time a man is confronted with several alternatives, he chooses one and eliminates the others; in the fiction of Tsui P\u0142n, he chooses simultaneously all of them. He creates, in this way, diverse futures, diverse times which themselves also proliferate and fork.\u201d(in The Garden of Forking Paths, Jorge Luis Borges)", "num_citations": "10\n", "authors": ["673"]}
{"title": "Substructural typestates\n", "abstract": " Finding simple, yet expressive, verification techniques to reason about both aliasing and mutable state has been a major challenge for static program verification. One such approach, of practical relevance, is centered around a lightweight typing discipline where types denote abstract object states, known as typestates.", "num_citations": "10\n", "authors": ["673"]}
{"title": "Extensionality of spatial observations in distributed systems\n", "abstract": " We discuss the tensions between intensionality and extensionality of spatial observations in distributed systems, showing that there are natural models where extensional observational equivalences may be characterized by spatial logics, including the composition and void operators. Our results support the claim that spatial observations do not need to be always considered intensional, even if expressive enough to talk about the structure of systems. For simplicity, our technical development is based on a minimalist process calculus, that already captures the main features of distributed systems, namely local synchronous communication, local computation, asynchronous remote communication, and partial failures.", "num_citations": "10\n", "authors": ["673"]}
{"title": "Composing Interfering Abstract Protocols\n", "abstract": " The undisciplined use of shared mutable state can be a source of program errors when aliases unsafely interfere with each other. While protocol-based techniques to reason about interference abound, they do not address two practical concerns the decidability of protocol composition and its integration with protocol abstraction. We show that our composition procedure is decidable and that it ensures safe interference even when composing abstract protocols. To evaluate the expressiveness of our protocol framework for ensuring safe shared memory interference, we show how this same protocol framework can be used to model safe, typeful message-passing concurrency idioms.Descriptors:", "num_citations": "8\n", "authors": ["673"]}
{"title": "Systems, methods, and apparatus for model-based security control\n", "abstract": " An integrated model-driven application development and execution environment enables declaration of a data-role in an application model. The data-role is based on a property of a data entity in the application model. The data-role provides for the enforcement of domain-specific security policies with respect to data elements corresponding to the data entity.", "num_citations": "7\n", "authors": ["673"]}
{"title": "An exception aware behavioral type system for objectoriented programs\n", "abstract": " We develop a type system for object oriented languages that combines standard type information with behavioral protocol specifications. The typing rules cover familiar constructs, as well as exceptions, which are a main novelty in this work: exceptions may cause abrupt control transfer in allowed behaviors, and have been particularly difficult to tackle with behavioral type systems. The type system guarantees protocol fidelity both at the method level and at the class level by checking consistency in the use of fields with the class\u2019 usage protocol. It also ensures that program execution always reaches a safe termination state, even in the presence of behavioral borrowing, that is, temporary aliasing of object references during methods calls.", "num_citations": "7\n", "authors": ["673"]}
{"title": "Subtyping first-class polymorphic components\n", "abstract": " We present a statically typed, class-based object oriented language where classes are first class polymorphic values. A main contribution of this work is the design of a type system that combines first class polymorphic values with structural equirecursive types and admits a subtyping algorithm which is arguably much simpler than existing alternatives. Our development is modular and can be easily instantiated for either a Kernel-Fun or a  style of subtyping discipline.", "num_citations": "7\n", "authors": ["673"]}
{"title": "ComponentJ: The reference manual\n", "abstract": " This document describes ComponentJ, a componentoriented language in the JVM that can create and manipulate components through expecific architectural constructions. The language ensures consistency of both static and dynamic compositions. We introduce the usage of ComponentJ by means of small examples. Next, we show the syntax of the language and detail some of the examples distributed with the compiler.(this page is intentionally left blank) Contents 1", "num_citations": "6\n", "authors": ["673"]}
{"title": "A language for the logical specification of processes and relations\n", "abstract": " Due to its ability to handle resources in a finely controlled way, linear logic is being adopted as a foundation of several logic programming and specification languages in which some notions of state can be modelled. In particular, some of these were proposed with the main motivation of allowing the specification of concurrent systems: such systems incorporate small subsets of linear logic or have operational interpretations that exclude the \u201cdon't know\u201d search behaviour expected from a logic programming language. On the other hand, systems incorporating larger subsets of linear logic must pay their expressiveness with a greater operational complexity. In this paper we present {ie150-01}, a simple language combining in a uniform way the reduction and state-oriented style of specification expected from a concurrent process calculus, with the more declarative and relational style of specification usual in logic\u00a0\u2026", "num_citations": "6\n", "authors": ["673"]}
{"title": "Parametrically typed components\n", "abstract": " . In previous work we proposed a simple yet powerful model of components, formally presented by a core calculus, which provides operations for type-safe instantiation and composition of components. In this paper, we discuss the addition of bounded type parameterization to our basic model, and show how it greatly enhances its expressiveness and aplicability. 1 Introduction Component oriented programming (COP)[13] is receiving increasing interest due to the promise of increasing reuse and simplifying software construction. Many component models have appeared [11, 6, 9] but most of their features, remarkably those that concern incremental composition operations lack adequate programming language and static analysis (eg. type-checking) support. In previous work [12], we proposed a simple model of components, formally presented by a core calculus, which provides operations for type-safe instantiation and composition of components. Essential aspects of the core calculus have motivate...", "num_citations": "5\n", "authors": ["673"]}
{"title": "Refinement kinds: type-safe programming with practical type-level computation\n", "abstract": " This work introduces the novel concept of kind refinement, which we develop in the context of an explicitly polymorphic ML-like language with type-level computation. Just as type refinements embed rich specifications by means of comprehension principles expressed by predicates over values in the type domain, kind refinements provide rich kind specifications by means of predicates over types in the kind domain. By leveraging our powerful refinement kind discipline, types in our language are not just used to statically classify program expressions and values, but also conveniently manipulated as tree-like data structures, with their kinds refined by logical constraints on such structures. Remarkably, the resulting typing and kinding disciplines allow for powerful forms of type reflection, ad-hoc polymorphism and type-directed meta-programming, which are often found in modern software development, but not typically\u00a0\u2026", "num_citations": "4\n", "authors": ["673"]}
{"title": "Domain-aware session types\n", "abstract": " We develop a generalization of existing Curry-Howard interpretations of (binary) session types by relying on an extension of linear logic with features from hybrid logic, in particular modal worlds that indicate domains. These worlds govern domain migration, subject to a parametric accessibility relation familiar from the Kripke semantics of modal logic. The result is an expressive new typed process framework for domain-aware, message-passing concurrency. Its logical foundations ensure that well-typed processes enjoy session fidelity, global progress, and termination. Typing also ensures that processes only communicate with accessible domains and so respect the accessibility relation. Remarkably, our domain-aware framework can specify scenarios in which domain information is available only at runtime; flexible accessibility relations can be cleanly defined and statically enforced. As a specific application, we introduce domain-aware multiparty session types, in which global protocols can express arbitrarily nested sub-protocols via domain migration. We develop a precise analysis of these multiparty protocols by reduction to our binary domain-aware framework: complex domain-aware protocols can be reasoned about at the right level of abstraction, ensuring also the principled transfer of key correctness properties from the binary to the multiparty setting.", "num_citations": "4\n", "authors": ["673"]}
{"title": "Rely-Guarantee View Typestate\n", "abstract": " We present a type-based approach to statically control aliasing and mutable state in a single-threaded procedural language with support for structures and references. By introducing views, re-combinable abstractions that encode both type structure and permission, we are able to handle shared and unique references in a way that statically ensures that no destructive interference may occur during execution. Our typestate-centric aliasing control is capable of handling common programming styles such as borrowing and capture of permissions. It furthermore provides novel information hiding mechanisms, view declarations and view equations, that define abstract views in terms of concrete state and describe how these views may be split and merged for a more fine-grained management of permission flow. We adapt the concept of rely-guarantee to create a flexible scheme for handling shared structures where each reference guarantees it will produce a certain state and relies on the other references limiting their changes to a certain state space. Similarly, by means of a focus operation, we are able to have intermediate (but not externally visible) states that temporarily break away from the previous condition, allowing additional flexibility without violating safety. Finally, we show how we control access to the internals of a structure through pack/unpack operations in a way that ensures no state inconsistencies may occur, even when structures are accessed through multiple aliases. By unifying state and aliasing control into a single abstraction-view typestate-we believe we can provide a simple and intuitive programming model that captures the main\u00a0\u2026", "num_citations": "4\n", "authors": ["673"]}
{"title": "Dynamical spatial logics: A tutorial survey\n", "abstract": " Spatial logics for concurrency have been proposed with the aim of reasoning about distribution, resource usage, mobility, and other structural aspects of general computing systems. This tutorial aims to introduce and motivate the main intuitions behind the development of dynamic spatial logics, and then present some selected results and applications. 1", "num_citations": "4\n", "authors": ["673"]}
{"title": "Behavioral and spatial observations in a logic for the-calculus\n", "abstract": " In addition to behavioral properties, spatial logics can talk about other key properties of concurrent systems such as secrecy, freshness, usage of resources, and distribution. We study an expressive spatial logic for systems specified in the synchronous 7-calculus with recursion, based on a small set of behavioral and spatial observations. We give coinductive and equational characterizations of the equivalence induced on processes by the logic, and conclude that it strictly lies between structural congruence and strong bisimulation. We then show that model-checking is decidable for a useful class of processes that includes the finite-control fragment of the 7-calculus.", "num_citations": "4\n", "authors": ["673"]}
{"title": "ComponentJ in a NutShell\n", "abstract": " ComponentJ is a programming language that raises composition from programming idioms to the level of programming abstractions. It has ocurred repeteadly in the history of programming languages that mechanisms that reveal themselves to be simple, usable, and really fundamental tend to generate new programming language constructs where they appear as primitive concepts. Thus allowing for extra readability over the source code and reasonability capabilities over the represented structures. ComponentJ is a component-oriented language in an object-oriented sense. Components are instantiated into objects that provide services which are interface typed references in the sense of the common class-based languages. Aggregates of instances based on object cross-referencing are a common programming pattern in object-oriented languages, and are used where inheritance is no longer a natural extension mechanism. This technique is prone to errors as it depends on the careful programmer to avoid them. Thus, component architectures implemented in the Java Virtual Machine (JVM) provide an alternative for instance aggregates. The development of ComponentJ is done after a component calculus that emphasizes on the manipulation of components, and where the corretness of composition mechanisms is ensured. The calculus was first published in [2] and the associated model was motivated and illustrated in some workshop papers [3, 1, 4]. There are also some internal technical reports that illustrate the complete formal calculus with parametrically typed components, and the usage of ComponentJ in several applications. A\u00a0\u2026", "num_citations": "4\n", "authors": ["673"]}
{"title": "A specification logic for mobility\n", "abstract": " We present MSL, a specification logic for generic concurrent open systems with Milner-style mobility. MSL draws its expressiveness from the integration of certain operators expressing component distribution and name scoping into a first-order many-sorted logic of actions with fixed-points. MSL semantics is presented in terms of a class of generic structures, allowing its application to diverse concrete computational models, for instance process calculi and systems of mobile objects. We will also show how MSL supports reasoning about interesting aspects of such systems, like structure, creation of new entities, local names, and their dynamics.", "num_citations": "4\n", "authors": ["673"]}
{"title": "Proof net semantics of proof search computation\n", "abstract": " We present a sound and complete compositional semantics, structured around certain abstractions of proof nets, for proof-search computation in a linear logic-based language. The model captures the interaction of agents in terms of the actions they engage into and of the dynamic creation of names. The model is adequate for reasoning about a notion of operational equivalence. We will also suggest how a partial order semantics can be derived from the present approach.", "num_citations": "4\n", "authors": ["673"]}
{"title": "Logic-based domain-aware session types\n", "abstract": " Software services and governing communication protocols are increasingly domain-aware. Domains can have multiple interpretations, such as the principals on whose behalf processes act or the location at which parties reside. Domains impact protocol compliance and access control, two central issues to overall functionality and correctness in distributed systems. This paper proposes a session-typed process framework for domain-aware communication-centric systems based on a CurryHoward interpretation of linear logic, here augmented with nominals from hybrid logic indicating domains. These nominals are explicit in the process expressions and govern domain migration, subject to a parametric accessibility relation familiar from the Kripke semantics for modal logic. Flexible access relationships among domains can be elegantly defined and statically enforced. The framework can also account for scenarios in which domain information is discovered only at runtime. Due to the logical origins of our systems, well-typed processes enjoy session fidelity, global progress, and termination. Moreover, well-typed processes always respect the accessibility relation and satisfy a form of domain parametricity, two properties crucial to show that domain-related properties of concrete programs are satisfied", "num_citations": "3\n", "authors": ["673"]}
{"title": "Typing conversation in the conversation calculus\n", "abstract": " We present a type system for the Conversation Calculus, a model of service-oriented computation. Our types discipline the behavioral structure of interactions that take place in conversations, while accounting for dynamical join and leave of a possibly unanticipated number of participants. Typed conversations are related to the notion of session types, but generalize them in new dimensions particularly adequate for modeling loosely-coupled service-oriented collaborations among several parties. Our main technical result is that a well-typed service system is certified to never violate the prescribed conversation constraints (referred as choreographies and contracts in web-services jargon) neither incur in certain kinds of runtime errors, such as service unavailability.", "num_citations": "3\n", "authors": ["673"]}
{"title": "Again, the role of conference papers in computer science and informatics\n", "abstract": " It is often claimed that in the Computer Science and Informatics many top tier conferences are high profile venues, with journal-equivalent status or even higher. The goal of this note is to highlight further evidence, based on recent publicly available indicators from the UK REF 2014 evaluation exercise and Google Scholar Metrics, of the special nature and purpose of conference venues in CS and related fields, not shared by most conference venues in other fields of science and engineering. We believe that our analysis is particularly interesting for anyone involved in research evaluation at large, but not necessarily familiar with the CS field. In particular, we focus on the comparison between the status of conferences and journals in different science and engineering fields, and discuss the status and role of conference and journal papers within the CS field itself.", "num_citations": "2\n", "authors": ["673"]}
{"title": "A type system for access control views in object-oriented languages\n", "abstract": " Access control to objects in common object-oriented languages is statically verified but cannot be changed at run-time. However, dynamic authorization is required by most applications and it would be desirable to check more flexible access control policies also statically, at least partially. In this work, we introduce a model where \u201cviews\u201d to object references represent the current access control policy of a principal for a given object, and first class authorizations support dynamic modification of those policies. To demonstrate our concepts, we have developed a core language, equipped with a provably correct type and effect system capable of detecting unauthorized method calls at compile-time, and defined and implemented a typechecking algorithm.", "num_citations": "2\n", "authors": ["673"]}
{"title": "Specification and analysis of service contracts\n", "abstract": " CITI - External Talk - Specification and Analysis of Service Contracts CITI has stopped operations in 2014, to co-launch NOVA LINCS THIS SITE IS NOT BEING UPDATED SINCE 2013 citi banner Home \\ External Talks & Seminars \\ External Talk Page Login CITI Welcome Research Areas Organization Executive Board Advisory Board Contacts Useful Information People CITI Members Visitors Activities Research Projects Publications Seminars @ CITI External Talks & Seminars Graduation Activities Organization of Events Editorial Committees Prototypes Visits & Missions Activity Reports Search & Query Search BibTeX Generator banner bottom File Top Specification and Analysis of Service Contracts (Project Meeting Talk) By: Luis Caires Date: 13 Jun 2007 Location/Event: SENSORIA General Meeting", "num_citations": "2\n", "authors": ["673"]}
{"title": "Corecursion in Session-Typed Processes\n", "abstract": " Session types are widely accepted as a useful expressive discipline for structuring communications in concurrent and distributed systems. In order to express infinitely unbounded sessions, as required to model the behaviour of realistic distributed systems, session typed languages often introduce general recursion operators at both the program and the type level. Unfortunately, general recursion, in particular when combined with name passing and mobility, may easily introduce undesirable divergence, eg, infinite unobservable reduction sequences. In this paper we address, by means of typing, the challenge of ensuring non-divergence in a session-typed \u03c0-calculus with general (co) recursion, while still allowing interesting infinite behaviours to be definable, as necessary to model realistic open process networks and distributed systems. Our approach builds on a Curry-Howard correspondence between our type system and a standard system of linear logic extended with co-inductive types, for which our non-divergence property implies consistency. We prove type safety for our framework, implying protocol compliance and global progress of well-typed processes. Remarkably, we also establish-through a logical relations argumentthat well-typed processes are compositionally non-divergent, in the sense that no well-typed composition of processes, including compositions dynamically assembled through name passing, can result in divergent behaviour, a property of practical relevance.", "num_citations": "1\n", "authors": ["673"]}
{"title": "Seguran\u00e7a de dados em aplica\u00e7\u00f5es centradas em dados por an\u00e1lise de fluxo de informa\u00e7\u00e3o\n", "abstract": " As aplica\u00e7\u00f5es centradas em dados e disponibilizadas na internet s\u00e3o cada vez mais pervasivas. Contudo, devido ao facto destas manipularem um volume elevado de dados, assim como ao meio em que estas s\u00e3o executadas ser por natureza inseguro, \u00e9 frequente propiciaren falhas de seguran\u00e7a, nomeadamente relativamente \u00e0 privacidade e a integridade dos dados que manipulam. O objectivo deste artigo \u00e9 motivar, discutir e ilustrar uma t\u00e9cnica de an\u00e1lise de fluxo de informa\u00e7\u00e3o sobre uma linguagem para modelar e programar aplica\u00e7\u00f5es centradas em dados com primitivas DML para manipula\u00e7\u00e3o e cria\u00e7\u00e3o de entidades relacionais de dados. As contribui\u00e7\u00f5es t\u00e9cnicas deste trabalho s\u00e3o duas: por um lado, um estudo e caracteriza\u00e7\u00e3o precisa dos fluxos de informa\u00e7\u00e3o inseguros que podem ocorrer em sistemas com primitivas t\u00edpicas de uma DML; assim como a defini\u00e7\u00e3o da respectiva propriedade de n\u00e3o-interfer\u00eancia.", "num_citations": "1\n", "authors": ["673"]}
{"title": "Relational Parametricity for Polymorphic Session Types (Extended Version)\u22c6\n", "abstract": " We introduce a theory of polymorphic concurrent processes, which arises from an interpretation of second-order intuitionistic linear logic propositions as polymorphic session types, in the style of the Girard-Reynolds polymorphic \u03bb-calculus. The interpretation naturally generalizes recent discoveries on the correspondence between linear logic propositions and session types. In our proposed theory, polymorphism accounts for the exchange of abstract communication protocols, and dynamic instantiation of heterogeneous interfaces. Well-typed processes enjoy a strong form of subject reduction (type preservation) and global progress, but also termination (strong normalization) and relational parametricity (representation independence). The latter two properties are obtained by adapting proof techniques in the functional setting to linear session types. Furthermore, we discuss a faithful encoding of System F into our polymorphic session calculus.", "num_citations": "1\n", "authors": ["673"]}
{"title": "Databricks: Data components for mobile groupware\n", "abstract": " This paper presents the DataBricks project approach for component-based groupware development. The project is focused on the analysis, design and implementation of system support services suitable for an easier development of groupware applications in particular those aimed at mobile users. The goals of the project are twofold. First, to devise a specialized component model and associated programming language, backed by an appropriate set of development and support tools. Second, to supply a distributed architecture and a set of standard communication and data-management basic components that can be refined and recursively composed. These two closely related goals will speedup the process of building and adapting distributed groupware applications for mobile environments.", "num_citations": "1\n", "authors": ["673"]}