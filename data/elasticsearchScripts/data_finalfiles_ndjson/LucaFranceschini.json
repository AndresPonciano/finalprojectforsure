{"title": "Towards Runtime Monitoring of Node. js and Its Application to the Internet of Things\n", "abstract": " In the last years Node.js has emerged as a framework particularly suitable for implementing lightweight IoT applications, thanks to its underlying asynchronous event-driven, non blocking I/O model. However, verifying the correctness of programs with asynchronous nested callbacks is quite difficult, and, hence, runtime monitoring can be a valuable support to tackle such a complex task. Runtime monitoring is a useful software verification technique that complements static analysis and testing, but has not been yet fully explored in the context of Internet of Things (IoT) systems. Trace expressions have been successfully employed for runtime monitoring in widespread multiagent system platforms. Recently, their expressive power has been extended to allow parametric specifications on data that can be captured and monitored only at runtime. Furthermore, they can be language and system agnostic, through the notion of event domain and type. This paper investigates the use of parametric trace expressions as a first step towards runtime monitoring of programs developed in Node.js and Node-RED, a flow-based IoT programming tool built on top of Node.js. Runtime verification of such systems is a task that mostly seems to have been overlooked so far in the literature. A prototype implementing the proposed system for Node.js, in order to dynamically check with trace expressions the correct usage of API functions, is presented. The tool exploits the dynamic analysis framework Jalangi for monitoring Node.js programs and allows detection of errors that would be difficult to catch with other techniques. Furthermore, it offers a simple REST interface which\u00a0\u2026", "num_citations": "16\n", "authors": ["1690"]}
{"title": "Towards an Acceptance Testing Approach for Internet of Things Systems\n", "abstract": " Internet of Things (IoT) applications and systems pervade our life increasingly and assuring their quality is of paramount importance. Unfortunately, few proposals for testing these complex\u2014and often safety-critical\u2014systems are present in the literature and testers are left alone to build their test cases.                 This paper is a first step towards acceptance testing of an IoT system that relies on a smartphone as principal way of interaction between the user and a complex system composed by local sensors/actuators and a remote cloud-based system. A simplified mobile health (m-health) IoT system for diabetic patients is used as an example to explain the proposed approach.", "num_citations": "10\n", "authors": ["1690"]}
{"title": "RML: runtime monitoring language: a system-agnostic DSL for runtime verification\n", "abstract": " Runtime verification (RV)[11] is a form of verification happening at runtime rather than compile-time. While static verification proves whether a property holds for every possible run of the program under scrutiny, RV only deals with a single execution (at a time). RV offers more flexibility in terms of provable properties: some specifications that may be particularly hard (or even impossible) to enforce statically can be checked at runtime, when more information are available.", "num_citations": "5\n", "authors": ["1690"]}
{"title": "A Formalism for Specification of Java API Interfaces\n", "abstract": " The standard Java API defines a number of useful and widely used interfaces, where the flow of methods invoked on objects must follow certain patterns to ensure their correct use. Typically, such patterns are informally specified in the documentation with several rules, which often do not cover full details, and are scattered throughout the whole documentation, since they usually involve more methods which are invoked subsequently. Failing to follow such rules causes a throw of IllegalStateException, or similar exceptions. Let us consider, for instance, the specification of the following types defined by the standard API of Java 10 in module java. base.", "num_citations": "2\n", "authors": ["1690"]}
{"title": "Structural Resolution for Abstract Compilation of Object-Oriented Languages\n", "abstract": " We propose abstract compilation for precise static type analysis of object-oriented languages based on coinductive logic programming. Source code is translated to a logic program, then type-checking and inference problems amount to queries to be solved with respect to the resulting logic program. We exploit a coinductive semantics to deal with infinite terms and proofs produced by recursive types and methods. Thanks to the recent notion of structural resolution for coinductive logic programming, we are able to infer very precise type information, including a class of irrational recursive types causing non-termination for previously considered coinductive semantics. We also show how to transform logic programs to make them satisfy the preconditions for the operational semantics of structural resolution, and we prove this step does not affect the semantics of the logic program.", "num_citations": "2\n", "authors": ["1690"]}
{"title": "An Abstract Machine for Asynchronous Programs with Closures and Priority Queues\n", "abstract": " We present the operational semantics of an abstract machine that models computations of event-based asynchronous programs inspired to the Node.js server-side system, a convenient platform for developing Internet of Things applications. The goal of the formal description of Node.js internals is twofold: (1) integrating the existing documentation with a more rigorous semantics and (2) validating widely used programming and transformation patterns by means of mathematical tools like transition systems. Our operational semantics is parametric in the transition system of the host scripting language to mimic the infrastructure of the V8 virtual machine where Javascript code is executed on top of the event-based engine provided by the C++ libuv concurrency library. In this work we focus our attention on priority callback queues, nested callbacks, and closures; these are widely used Node.js programming\u00a0\u2026", "num_citations": "1\n", "authors": ["1690"]}