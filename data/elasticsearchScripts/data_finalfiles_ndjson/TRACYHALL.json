{"title": "Key success factors for implementing software process improvement: a maturity-based analysis\n", "abstract": " We report on a questionnaire survey of key success factors that impact software process improvement (SPI). We analysed responses to identify factors that have a major impact, or no impact, on implementing SPI. We found four factors (reviews, standards and procedures, training and mentoring, and experienced staff) that practitioners generally considered had a major impact on successfully implementing SPI, and a further four factors (internal leadership, inspections, executive support and internal process ownership) that the more mature companies considered had a major impact on successfully implementing SPI. We also identified two factors (estimating tools and reward schemes) that may not have an impact on SPI. We briefly discuss how these factors may be broadly understood in terms of process, people, skills and leadership. We discuss some of the implications of our findings for research and practice.", "num_citations": "277\n", "authors": ["224"]}
{"title": "De-motivators for software process improvement: an analysis of practitioners\u2019 views\n", "abstract": " We present a study of software practitioners\u2019 de-motivators for software process improvement (SPI). The aim of this study is to understand the nature of the issues that de-motivate software practitioners for SPI, so that SPI managers can better manage these de-motivators. This study compares what the SPI literature reports as the factors that hinder SPI success with software practitioners\u2019 perception of the factors that de-motivate them. Focus groups are used to elicit the perceptions of over 200 software practitioners. Our findings show that software practitioners confirm what the literature reports as the major issues that de-motivate them for SPI. These issues are related to resistance to change, lack of evidence, imposed SPI initiatives, resource constraints and commercial pressures. Our findings also show that there are differences in de-motivators for SPI across staff groups and that these differences are related to the\u00a0\u2026", "num_citations": "262\n", "authors": ["224"]}
{"title": "Motivators of Software Process Improvement: an analysis of practitioners' views\n", "abstract": " We present empirical findings from our study of Software Process Improvement (SPI) motivators in 13 UK software companies. Our analysis aims to provide SPI managers with some insight into designing appropriate SPI implementation strategies to maximise practitioner support for SPI.We identify what motivates developers, project managers and senior managers to be actively involved in SPI. We characterise motivations according to classic motivation theory. We find that most motivators are specific to a particular practitioner group with only a few common to all practitioner groups. Most of the common motivators are `rewarding', according to classic motivation theory. Finally we present findings showing that managers' perceptions of developer motivators are often highly inaccurate.", "num_citations": "224\n", "authors": ["224"]}
{"title": "Trust in software outsourcing relationships: An empirical investigation of Indian software companies\n", "abstract": " This paper investigates trust in software outsourcing relationships. The study is based on an empirical investigation of eighteen high maturity software vendor companies based in India. Our analysis of the literature suggests that trust has received a lot of attention in all kinds of business relationships. This includes inter-company relationships, whether cooperative ventures or subcontracting relationships, and relationship among different parts of a single company. However, trust has been relatively under-explored in software outsourcing relationships. In this paper, we present a detailed empirical investigation of trust in commercial software outsourcing relationships. The investigation presents what vendor companies perceive about getting trust from client companies in outsourcing relationships. We present the results in two parts\u2014(1) achieving trust initially in outsourcing relationships and (2) maintaining trust in\u00a0\u2026", "num_citations": "209\n", "authors": ["224"]}
{"title": "Code bad smells: a review of current knowledge\n", "abstract": " Fowler et al. identified 22 Code Bad Smells to direct the effective refactoring of code. These are increasingly being taken up by software engineers. However, the empirical basis of using Code Bad Smells to direct refactoring and to address \u2018trouble\u2019in code is not clear, ie, we do not know whether using Code Bad Smells to target code improvement is effective. This paper aims to identify what is currently known about Code Bad Smells. We have performed a systematic literature review of 319 papers published since Fowler et al. identified Code Bad Smells (2000 to June 2009). We analysed in detail 39 of the most relevant papers. Our findings indicate that Duplicated Code receives most research attention, whereas some Code Bad Smells, eg, Message Chains, receive little. This suggests that our knowledge of some Code Bad Smells remains insufficient. Our findings also show that very few studies report on the\u00a0\u2026", "num_citations": "199\n", "authors": ["224"]}
{"title": "A quantitative and qualitative analysis of factors affecting software processes\n", "abstract": " Despite the growing body of research on software process improvement (SPI), there is still a great deal of variability in the success of SPI programmes. In this paper, we explore 26 factors that potentially affect SPI. We also consider the research strategies used to study these factors. We have used a multi-strategy approach for this study: first, by combining qualitative and quantitative analysis within case studies; second, by comparing our case study results with the results of a previously conducted survey study. Seven factors relevant to SPI (i.e. executive support, experienced staff, internal process ownership, metrics, procedures, reviews, and training) were identified by the case studies and the survey study. Two factors (reward schemes and estimating tools) were found, by both the case studies and the survey study, not to be relevant to SPI. Three additional factors (people, problems and change) were identified by\u00a0\u2026", "num_citations": "157\n", "authors": ["224"]}
{"title": "Implementing software process improvement: an empirical study\n", "abstract": " In this paper we present survey data characterizing the implementation of SPI in 85 UK companies. We aim to provide SPI managers with more understanding of the critical success factors of implementing SPI. We present an analysis of the critical implementation factors identified in published case studies. We use a questionnaire to measure the use of these factors in \u2018typical\u2019 software companies. We found that many companies use SPI but the effectiveness of SPI implementation is variable. Many companies inadequately resource SPI and fail to evaluate the impact of SPI. On the other hand, companies show a good appreciation of the human factors associated with implementing SPI. Copyright \u00a9 2002 John Wiley & Sons, Ltd.", "num_citations": "137\n", "authors": ["224"]}
{"title": "Difficulties in managing offshore software outsourcing relationships: An empirical analysis of 18 high maturity Indian software companies\n", "abstract": " In this paper, we present an empirical investigation of difficulties in offshore software outsourcing relationships. We undertake an investigation of eighteen high maturity software vendor companies based in India. An analysis of the literature suggests that the difficulties in offshore outsourcing relationships have been relatively unexplored. Therefore a detailed investigation of the difficulties in commercial offshore software outsourcing relationships is presented. We use the multiple case study research methodology in this study. We collect qualitative data through the standardized open-ended interviews and analyze it through a grounded theory approach. Results of this study indicate that outsourcing vendors are aware of potential difficulties that could be faced by both vendors and clients in offshore software outsourcing. The main offshore software outsourcing difficulties uncovered by this investigation include\u00a0\u2026", "num_citations": "96\n", "authors": ["224"]}
{"title": "Measurements of the Branching Fractions of Exclusive Charmless  Meson Decays with  or  Mesons\n", "abstract": " We present the results of searches for B decays to charmless two-body final states containing \u03b7\u2032 or \u03c9 mesons, based on 20.7 fb\u2212 1 of data collected with the BABAR detector. We find the branching fractions B (B+\u2192 \u03b7\u2032 K+)=(70\u00b18\u00b15)\u00d7 10\u2212 6, B (B 0\u2192 \u03b7\u2032 K 0)=(42\u2212 11+ 13\u00b14)\u00d7 10\u2212 6, and B (B+\u2192 \u03c9 \u03c0+)=(6.6\u2212 1.8+ 2.1\u00b10.7)\u00d7 10\u2212 6, where the first error quoted is statistical and the second is systematic. We give measurements of four additional modes for which the 90% confidence level upper limits are B (B+\u2192 \u03b7\u2032 \u03c0+)< 12\u00d7 10\u2212 6, B (B+\u2192 \u03c9 K+)< 4\u00d7 10\u2212 6, B (B 0\u2192 \u03c9 K 0)< 13\u00d7 10\u2212 6, and B (B 0\u2192 \u03c9 \u03c0 0)< 3\u00d7 10\u2212 6.", "num_citations": "91\n", "authors": ["224"]}
{"title": "Perceptions of software quality: a pilot study\n", "abstract": " Many software quality initiatives fail because they do not take account of the range of views that people have of quality. New approaches to software quality improvement will not work unless software developers believe in them, no matter how enthusiastic managers may be. This paper reports on a pilot study using the repertory grid technique that found evidence to support these assertions. The study findings justify further work and show that while the repertory grid technique is an appropriate instrument in this area it is resource intensive to apply and may not be practical in a wider study of a representative sample of the IT industry. The paper has practical recommendations for successful introduction of new software quality programmes. These recommendations stress the need for effective communication, leading to a shared understanding of \u2018quality\u2019, and for realistic goals that recognize the pressure of\u00a0\u2026", "num_citations": "75\n", "authors": ["224"]}
{"title": "Persuading developers to\" buy into\" software process improvement: a local opinion and empirical evidence\n", "abstract": " In order to investigate practitioners' opinions of software process and software process improvement, we have collected a large volume of qualitative evidence from 13 companies. At the same time, other researchers have reported investigations of practitioners, and we are interested in how their reports may relate to our evidence. Thus, other research publications can also be treated as a form of qualitative data. In this paper, we review advice on a method, content analysis, which is used to analyse qualitative data. We use content analysis to describe and analyse discussions on software process and software process improvement. We report preliminary findings from an analysis of both the focus group evidence and four publications. Our main finding is that there is an apparent contradiction between developers saying that they want evidence for software process improvement, and what developers will accept as\u00a0\u2026", "num_citations": "71\n", "authors": ["224"]}
{"title": "A framework for evaluation and prediction of software process improvement success\n", "abstract": " The literature shows that software process improvement (SPI) is a current popular approach to software quality and that many companies are undertaking formal or informal SPI programs. However, the anticipated improvements to software quality through SPI have not, as yet, been fully realised. Many companies are neither ready nor equipped to implement a successful SPI program: how do companies evaluate and validate the necessary organisational requirements for the establishment of a successful SPI program? This paper examines the outcomes of a UK study of a sample of SPI programs and compares these programs with an evaluation framework we have developed. The validated framework will help companies conduct a self-assessment of their readiness to undertake SPI.", "num_citations": "69\n", "authors": ["224"]}
{"title": "Views of software quality: a field report\n", "abstract": " The authors present findings from a recent study into the quality views of software practitioners in five UK companies. The study explored how issues of software quality have affected grassroots practitioners in ordinary companies; in particular the typical quality experiences of practitioners and what practitioners really think about quality initiatives. It is only by listening to the experiences and views of ordinary practitioners that truly effective approaches to quality can be developed. Indeed various ways are recomended in which the results presented can be used to improve the effectiveness of quality initiatives. One of the main findings is that managers and developers are keen to see software quality improved, and are positive about ways in which that can be achieved. Developers are more enthusiastic than is usually believed to see quality formalism in software development. Developers in almost all of the companies\u00a0\u2026", "num_citations": "59\n", "authors": ["224"]}
{"title": "Critical factors in software outsourcing: a pilot study\n", "abstract": " This report aims to present the critical factors in outsourcing relationships. This study analyses the vendors' views on managing outsourcing relationships. We designed this empirical study from our previous literature survey. Here, we analyze data collected in two interviews through categorization techniques. Our findings suggest the importance of process, communication, trust, value addition, consistency and financial benefits. Our findings also highlight a few difficulties in outsourcing relationships. We also detail the research methods used in this short empirical study. We explain the research approaches undertaken for data collection, and data analysis.", "num_citations": "53\n", "authors": ["224"]}
{"title": "Software developer motivation in a high maturity company: a case study\n", "abstract": " In this article, we discuss the impact of software developer motivation on projects. Motivation has been reported to be an important determinant of productivity and quality of work in many industries. In this article, we explore specifically how motivation impacts on development work in software engineering. We describe work previously done to suggest that software developers may have a different profile of motivators to other professionals. We present data collected from nine developers working in a software organisation that has been assessed at CMM level 5. We find that the developers working in this high maturity development environment are highly motivated. We also report relationships between motivation and progress in development work and describe the impact of motivating factors on specific aspects of software development. Our main conclusion is that good software developers are proactive, flexible\u00a0\u2026", "num_citations": "52\n", "authors": ["224"]}
{"title": "The neglected technical skill?\n", "abstract": " In this paper we discuss the importance of communication in software development. Communication has long been recognized as an important element of a successful software project. The quality of communication within the development team and between the development team and external entities impacts on the performance of the software project. However there is little evidence to suggest that approaches to software development have adequately emphasized high quality communications. Our findings suggest that the SEI's family of Capability Maturity Models, arguably the most influential models of software development, address communication in a very superficial way. We consider the impact of poor communication on the performance of a team of developers working in a software organization that has been assessed at CMM Level 5. We conducted multi-level interviews with all developers in the software\u00a0\u2026", "num_citations": "50\n", "authors": ["224"]}
{"title": "A critical analysis of current OO design metrics\n", "abstract": " Chidamber and Kemerer (C&K) outlined some initial proposals for language-independent OO design metrics in 1991. This suite is expanded on by C&K in 1994 and the metrics were tested on systems developed in C++ and Smalltalk\u2122. The six metrics making up the C&K suite can be criticised for a number of reasons. This does not make them bad metrics; on the contrary the C&K work represents one of the most thorough treatments of the subject at the current time. However, the authors explicitly state               ...there is no reason to believe that the proposed metrics will be found to be comprehensive, and further work could result in additions, changes and possible deletions from this suite.               This analysis will serve to make other researchers and practitioners aware of some of the problems that may arise from using these measures. As a by-product, the axioms of E. Weyuker (1983) come under\u00a0\u2026", "num_citations": "49\n", "authors": ["224"]}
{"title": "Practitioner roles in software process improvement: an analysis using grid technique\n", "abstract": " In this paper we present empirical findings from our study of software practitioners. We used the repertory grid technique to collect data from nearly 200 developers, project managers and senior managers in 13 companies. The aim of this study is to investigate the perceptions that different staff groups have regarding their role in SPI. Our results allow improved understanding of the SPI concerns and needs that different staff groups have. We suggest that this improved understanding will enable SPI managers to develop multi\u2010strand SPI implementation strategies which deliver benefit to all staff groups. Delivering SPI benefit to all staff groups increases buy\u2010in at all levels and means that SPI can be more successful in the long term. Our main findings are that all staff groups are in close agreement about their roles in SPI. However software developers often have a limited view of SPI and are unable to perceive\u00a0\u2026", "num_citations": "43\n", "authors": ["224"]}
{"title": "An analysis of some \u2018core studies\u2019 of software process improvement\n", "abstract": " In this paper we analyse 39 publications that have reported issues relating to software process improvement. Together, the 39 publications refer to 14 sites in 11 organizations. The 11 organizations include all five of the organizations that have been awarded the IEEE Computer Society Award for Process Achievement. Twelve of the 14 sites have been assessed at CMM level 3 or higher. Two main issues, and a number of more specific issues, emerge from our analysis. The two main issues are organizational stability and process expertise. We further distinguish between inter\u2010 and intra\u2010organizational stability. Several other specific issues are identified and discussed. We direct attention at how the specific issues relate to each other, how the two main issues relate to each other, and how all these issues relate to software process improvement. We speculate that organizational stability provides a stable\u00a0\u2026", "num_citations": "38\n", "authors": ["224"]}
{"title": "Software evolutionary dynamics modelled as the activity of an actor-network\n", "abstract": " The pressures which act on a software system over its life from inception to retirement are many and varied. An important goal in researching software evolvability is to understand, and if possible to manage, these influences. The authors' previous simulations of software evolution processes have concentrated on capturing the human-related aspects of software evolution, while effectively treating technical entities as objects which are acted on by humans and their organisations. Latour's actor-network theory (ANT) suggests that the non-human entities' development tools, documents, the evolution process itself are potentially active participants in their own evolution. The authors describe Latour's theory and present a model of a software evolution process in the form of a diagram which places technical and human aspects in a closer juxtaposition than previous models. They present support for this model from an\u00a0\u2026", "num_citations": "36\n", "authors": ["224"]}
{"title": "Software process improvement motivators: An analysis using multidimensional scaling\n", "abstract": " In this paper we present an analysis of software practitioners' motivations for software process improvement (SPI). Our findings are based on an empirical study of SPI in 13 software companies where we conducted focus groups with nearly 200 software practitioners. Our aim is to better understand how companies can maximise practitioner support for SPI. This insight should help SPI managers establish more effective SPI implementation strategies. In this paper we introduce the use of multidimensional scaling (MDS) in SPI research. MDS is a social science data analysis technique designed to generate a rich visual understanding of human issues. By using MDS we found evidence to suggest distinct clusters of punitive and rewarding SPI motivators. Furthermore our analysis also suggests that different clusters of motivations exist for different staff groups.", "num_citations": "36\n", "authors": ["224"]}
{"title": "Implementing a people focused SPI programme\n", "abstract": " Software Process Improvement (SPI) has become the most popular approach to delivering improvements to the software product. Based on statistical process control, the underlying theme is that by understanding and defining the current state of a company\u2019s software development processes, quality practitioners and managers can sufficiently determine and control areas within the development process to achieve improvements in the product. We support this general approach to SPI. We also believe that the people factors in SPI implementation are vital. We believe that to achieve greater success in software process improvement initiatives, greater attention needs to be paid to the perspectives and attitudes of software practitioners. However, we believe that different groups of practitioners have different experiences and attitudes towards SPI. We present preliminary evidence from our study of UK companies. We present the obstacles and motivators to successful SPI from the perspective of three groups of practitioners: strategic management, operational management and grassroots level practitioners. We find that grassroots practitioners believe that SPI generates increased workload due to the amount of documentation required by current models. We also present evidence of positive influences and motivators to SPI that we have come across in companies. We find that giving practitioners ownership of the processes to be improved encourages them to be more responsive towards the improvement programme. We draw together the common issues in the study and argue that time, financial commitment and practitioner buy-in are critical to the\u00a0\u2026", "num_citations": "36\n", "authors": ["224"]}
{"title": "Measuring OO systems: a critical analysis of the MOOD metrics\n", "abstract": " In parallel with the rise to prominence of the OO paradigm has come the acceptance that conventional software metrics are not adequate to measure object oriented systems. This has inspired a number of software practitioners and academics to develop new metrics that are suited to the OO paradigm. Arguably, the most thorough treatment of the subject is that of the MOOD team, under the leadership of Abreau. The MOOD metrics have been subjected to much empirical evaluation, with claims made regarding the usefulness of the metrics to assess external attributes such as quality and maintainability. We evaluate the MOOD metrics on a theoretical level and show that any empirical validation is premature, due to the majority of the MOOD metrics being fundamentally flawed. The metrics either fail to meet the MOOD team's own criteria or are founded on an imprecise, and in certain cases inaccurate, view of the OO\u00a0\u2026", "num_citations": "36\n", "authors": ["224"]}
{"title": "Motivating developer performance to improve project outcomes in a high maturity organization\n", "abstract": " In this paper we discuss the impact software developer performance has on project outcomes. Project performance remains unreliable in the software industry with many compromised software systems reported in the press. We investigate the impact that developer performance has on aspects of project success and explore how developer performance is motivated. We present interview, focus group and questionnaire data collected from a team of developers working in a software organization that has been assessed at CMM level 5. Our main findings are that developers value technical skills in their colleagues, but appreciate these especially when supplemented with good human skills. Software developers with a proactive, flexible, adaptable approach who are prepared to share knowledge and follow good practice are said to be the best developers. Motivators for these developers are pay and benefits\u00a0\u2026", "num_citations": "35\n", "authors": ["224"]}
{"title": "Design patterns and change proneness: a replication using proprietary C# software\n", "abstract": " This paper documents a study of change in commercial, proprietary software and attempts to determine whether a relationship exists between a class' propensity to change and its design context; more specifically: whether a class is a participant in a design pattern. We identify specific design patterns and their propensity for change. Design pattern participants were found to have a higher propensity to change than classes that did not participate in a design pattern, supporting an earlier study by Bieman et al.; some design patterns, such as the adaptor, factory method and singleton were found have a higher change propensity than others.", "num_citations": "34\n", "authors": ["224"]}
{"title": "Ethical issues in software engineering research: a survey of current practice\n", "abstract": " In this paper we explore how the software engineering research community is currently dealing with the ethical issues that some empirical research presents. We discuss how the immaturity of the software engineering discipline is reflected in an approach to ethical issues that compares unfavourably with other more mature disciplines.               We show that an analysis of recent published work measures an increase in empirical software engineering research currently being undertaken. We also discuss our survey of UK University Department Heads which explores how the software engineering research community is dealing with the ethical issues related to empirical work. Overall we found that whilst some UK Universities have taken ethical issues very seriously, others have not considered the issues.", "num_citations": "33\n", "authors": ["224"]}
{"title": "The BABAR physics book: Physics at an asymmetric B factory\n", "abstract": " The BaBar physics book : physics at an asymmetric B factory IRIS nascondi/visualizza icone a destra nascondi/visualizza menu in alto Aiuto Sfoglia Scorri i prodotti per: Autore Titolo Riviste Serie Settore Scientifico Disciplinare Tipologia Login SUrplus Archivio Istituzionale della Ricerca Prodotti della ricerca 08 - Relazione interna o rapporto di ricerca The BaBar physics book : physics at an asymmetric B factory Italiano Italiano Italiano Italiano English English The BaBar physics book : physics at an asymmetric B factory / D. Boutigny, I. De Bonis, Y. Karyotakis, R. Lafaye, V. Tisserand,C. Evangelista, A. Palano,G. Chen, S. Ren, O. Wen, H. Yu, F. Zhang, Y. Zheng,G. Chen, Y. Guo, H. Lan, H. Mao, N. Qi, PP Xie, WG Yan, C. Zhang, W. Zhao, Y. Zhu ,A. Borgland, G. Eigen, B. Stugu ,H. Koch, M. Kunze, B. Lewandowski, K. Peters, H. Schmucker, M. Steinke, JC Andress, N. Dyce, B. Foster, A. Mass,J.McFall,C. Hearty, MH Kelsey\u2026", "num_citations": "32\n", "authors": ["224"]}
{"title": "Can Thomas Kuhn's paradigms help us understand software engineering?\n", "abstract": " Recent articles in EJIS have discussed whether or not Information Systems is a \u2018discipline\u2019. In The Structure of Scientific Revolutions, Kuhn states that a scientific discipline can be identified by reference to its underlying belief system, the \u2018paradigm\u2019 or \u2018disciplinary matrix\u2019, to which all workers in that field must commit. An important element of Kuhn's model is the notion of \u2018scientific communities\u2019. We consider here the belief system underlying Software Engineering (SE). We examine the extent to which a belief system analogous to the disciplinary matrix of a Kuhnian science can be identified in SE. Our preliminary fieldwork has comprised an examination of books used by SE students and practitioners, and in-depth interviews with a number of practitioners. The results of this study suggest that the current status of the theory of SE parallels Kuhn's \u2018pre-paradigm\u2019 stage of scientific development. At this early stage\u00a0\u2026", "num_citations": "31\n", "authors": ["224"]}
{"title": "Improving the precision of fowler's definitions of bad smells\n", "abstract": " Current approaches to detecting bad smells in code are mainly based on software metrics. We suggest that these methods lack precision in detecting bad smells, and we propose a code pattern-based approach to detecting bad smells. However before such a pattern-based approach can be implemented, Fowler's original definitions of bad smells need to be made more precise. Currently Fowler's definitions are too informal to implement in a pattern-searching tool. In this paper we use an expert panel to evaluate our enhanced definitions for five of Fowler's bad smells. We use a questionnaire to survey four experts' opinions of our bad smell definitions. Our results show that the experts basically agree with our enhanced definitions of the message chains, middle man and speculative generality bad smells. However, there are strong disagreements on our definitions of the data clumps and switch statements bad smells\u00a0\u2026", "num_citations": "26\n", "authors": ["224"]}
{"title": "Measurement in software process improvement programmes: An empirical study\n", "abstract": " In this paper we report on our empirical study of SPI programmes in thirteen UK software companies. We focus on companies\u2019 approaches to SPI and how measurement relates to SPI in those companies. We present quantitative data characterising SPI and measurement in the companies. We discuss how the use of measurement relates to the maturity of software processes and how measurement supports maturing processes. Our results show that companies are generally enthusiastic about implementing measurement and they believe that SPI is impoverished without measurement. However our data shows that in reality companies have implemented very little substantive measurement. Indeed we suggest that companies find implementing measurement within SPI more difficult than they expect. Furthermore, we report on data from software personnel suggesting that companies are reluctant to\u00a0\u2026", "num_citations": "25\n", "authors": ["224"]}
{"title": "The impact of using pair programming on system evolution a simulation-based study\n", "abstract": " We investigate the impact of pair programming on the long term evolution of software systems. We use system dynamics to build simulation models which predict the trend in system growth with and without pair programming. Initial results suggest that the extra effort needed for two people to code together may generate sufficient benefit to justify pair programming.", "num_citations": "24\n", "authors": ["224"]}
{"title": "Prioritising refactoring using code bad smells\n", "abstract": " We investigated the relationship between six of Fowler et al.'s Code Bad Smells (Duplicated Code, Data Clumps, Switch Statements, Speculative Generality, Message Chains, and Middle Man) and software faults. In this paper we discuss how our results can be used by software developers to prioritise refactoring. In particular we suggest that source code containing Duplicated Code is likely to be associated with more faults than source code containing the other five Code Bad Smells. As a consequence, Duplicated Code should be prioritised for refactoring. Source code containing Message Chains seems to be associated with a high number of faults in some situations. Consequently it is another Code Bad Smell which should be prioritised for refactoring. Source code containing only one of the Data Clumps, Switch Statements, Speculative Generality, or Middle Man Bad Smell is not likely to be fault-prone. As a\u00a0\u2026", "num_citations": "23\n", "authors": ["224"]}
{"title": "A framework for improving the requirements engineering process management\n", "abstract": " This paper presents a system dynamics model for improving the requirements engineering process management. The paper argues that improving RE process management improves the quality of the specification produced. It uses a simulation modelling approach to capture the complex and dynamic nature of quality and also the cost of resources and time needed to complete the process. Current claims by various researchers and empirical evidence has led to our proposition that \u201cthe earlier in the requirements engineering phase that system dynamics simulation modelling is used, the more effective the RE process management is and the better its product quality will be.\u201d In developing such a model, the paper fills an important gap in the RE process management literature and has potential to provide requirement engineers, managers and software development organisations with a model-based process\u00a0\u2026", "num_citations": "22\n", "authors": ["224"]}
{"title": "Code smell eradication and associated refactoring\n", "abstract": " A refactoring may use many other refactorings to implement its mechanics and the dependencies thus produced form a nested \u2018chain\u2019of other refactorings. In this paper, we propose an approach which provides a coarse guide to effort required in eradicating code \u2018smells\u2019. The approach is based on the quantitative analysis of the dependencies between two sets of code smells, namely, those of Kerievsky and Fowler. A bespoke tool was developed to extract the required dependency information. Results suggest that some code smells require a considerably larger effort to remedy than others, suggesting that, where possible, developers should avoid eradicating these smells in favour of other code smells which can be eliminated relatively easily. A clear difference in the composition between the smells of Kerievsky and those of Fowler was also observed.", "num_citations": "21\n", "authors": ["224"]}
{"title": "A preliminary empirical investigation of the use of evidence based software engineering by under-graduate students.\n", "abstract": " Recently, Dyba, Jorgensen and Kitchenham have proposed a methodology, Evidence-Based Software Engineering (EBSE), that is intended to help researchers and practitioners evaluate software technologies in practice. We report the conduct of a preliminary empirical investigation of the reported use of Evidence-Based Software Engineering by 15 final-year under-graduate students. The investigation produced inconsistent results: our quantitative data suggests that students are making good use of some of the EBSE guidelines, but our qualitative evidence suggests that the students are not using the guidelines properly. Possible explanations for these results include: the superficial use of EBSE by the students; the limited \u2018power\u2019 of our research instruments to assess the use of EBSE guidelines; the difficulties of combining a required coursework with a piece of research; and the different expectations of what makes good evaluations between professional researchers and novice software practitioners.", "num_citations": "21\n", "authors": ["224"]}
{"title": "Software process simulation modelling: A survey of practice\n", "abstract": " In recent years, simulation modelling of software development processes has attracted considerable interest in software engineering. Despite the growing interest, there is little literature available that reports on the state-of-practice in software process simulation modelling (SPSM). We report results of a survey of simulation in SPSM and relate it to simulation practice in general. The results of this survey indicate that software process simulation (SPS) modellers are generally methodical, work on large complex problems, develop large models, and have a systematic simulation modelling process in place. However, on the other hand, the simulation modelling process and simulation model evaluation have been identified as the most urgent problems to be addressed in SPSM. The results from this investigation are interesting and bring many problems into focus. The paper helps understand the characteristics\u00a0\u2026", "num_citations": "19\n", "authors": ["224"]}
{"title": "Simulating global software evolution processes by combining simple models: An initial study\n", "abstract": " A number of studies of the long\u2010term evolution of commercial software products over many releases have established a consistent pattern for growth in the size of the systems examined. This shows a trend towards a progressive slowdown in growth over time. The work described here forms the first step in developing a simulation of the combined effects of the causes of this trend. A number of simple system dynamics simulations, each capturing the causal structure and behaviour of one of a number of causes believed to contribute to the observed behaviour, and its calibration to follow the observed trend, is presented. These models are then combined into a single simulation model reflecting the effect in combination of these causes. Possible causes considered here are: the reduction over time in both the conceptual space which can be searched for new uses of a system and the design spaces constraining\u00a0\u2026", "num_citations": "18\n", "authors": ["224"]}
{"title": "So You Need More Method Level Datasets for Your Software Defect Prediction? Voil\u00e0!\n", "abstract": " Context: Defect prediction research is based on a small number of defect datasets and most are at class not method level. Consequently our knowledge of defects is limited. Identifying defect datasets for prediction is not easy and extracting quality data from identified datasets is even more difficult. Goal: Identify open source Java systems suitable for defect prediction and extract high quality fault data from these datasets. Method: We used the Boa to identify candidate open source systems. We reduce 50,000 potential candidates down to 23 suitable for defect prediction using a selection criteria based on the system's software repository and its defect tracking system. We use an enhanced SZZ algorithm to extract fault information and calculate metrics using JHawk. Result: We have produced 138 fault and metrics datasets for the 23 identified systems. We make these datasets (the ELFF datasets) and our data\u00a0\u2026", "num_citations": "17\n", "authors": ["224"]}
{"title": "An initial investigation of software practitioners' motivation\n", "abstract": " Motivation is one of the most frequently cited causes of software development project failure, reportedly impacting on project productivity, software quality and the overall success of the project. Much of the previous research into software engineers' motivation cites the job itself as the main motivator, yet little research has focused on why software engineers stay in the profession. This paper reports on an empirical investigation with experienced software practitioners which focuses on this issue and compares our findings with existing work. The results show that aspects of dasiapeoplepsila are important in job satisfaction and project choice, while a practitioner's standing in the community is a key influence on whether or not he/she will stay in software engineering; aspects of dasiacreativitypsila are mentioned most often as making software development worthwhile. When asked to identify three key elements of\u00a0\u2026", "num_citations": "17\n", "authors": ["224"]}
{"title": "Software engineering practice versus evidence-based software engineering research\n", "abstract": " In this paper, we review four examples in software engineering practice of the lack of use of empirical evidence. We use these examples to support our claims that practitioners and researchers appear to have different values with regards to empirical evidence, and appear to use different criteria when evaluating the credibility of evidence. From our examples, it seems that practitioners need to be persuaded to adopt evidence-based software engineering practices. Consequently, the research community needs to consider strategies for persuading practitioners. Paradoxically for software engineering research, the more effective persuasion strategies may be ones that, initially at least, do not rely on empirical evidence.", "num_citations": "17\n", "authors": ["224"]}
{"title": "The impact of media selection on stakeholder communication in agile global software development: a preliminary industrial case study\n", "abstract": " This paper investigates the selection of appropriate communication media in agile global software development. Frequent communication between project stakeholders is core to agile software development. Furthermore the choice of media is fundamental to effective communication. In a global software development environment the challenges that distance creates must be addressed in the choice of media. The wrong media for the wrong task can cause many problems. We apply Media Synchronicity Theory to the selection of communication media in a global software company which uses Scrum. Our results show that the theory is helpful in highlighting the important factors in choosing an appropriate media for'conveying'and'converging'communications. However the theory does not cover all important factors. We confirm previous findings that media availability, media familiarity and infrastructure capabilities also\u00a0\u2026", "num_citations": "16\n", "authors": ["224"]}
{"title": "Investigating the role of trust in Agile methods using a light weight systematic literature review\n", "abstract": " In this paper we use a cut down systematic literature review to investigate the role of trust in agile methods. Our main motivation is to investigate the impact of the enhanced role of developers in agile methods. It is important to investigate the role of trust in agile methods because according to the agile manifesto the role of individual developers is central in an agile team: \u201cIndividuals and Interactions over processes and tools\u201d and \u201cBuild projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done\u201d [1]. This suggests that managers must trust their staff to make decisions. The most direct forum for trust in agile projects is in the daily stand-up meeting. Project managers must trust that what developers say in the standup they are going to achieve during the day is what they actually achieve. In this paper we investigate the role trust plays in agile methods.", "num_citations": "16\n", "authors": ["224"]}
{"title": "Implementing software metrics\u2014the critical success factors\n", "abstract": " This paper reviews the current state of industry with regard to the introduction of software metrics. It discusses the benefits that organizations have derived from metrication, it looks at why organizations have sought to introduce metrics programmes, how they have gone about introducing those programmes and the problems that they have encountered during implementation. The review found that, on the whole, only the sanitized aspects of metrics experiences have actually been published. This seems to be especially the case with respect to practitioner resistance. Very few organizations admit to having encountered resistance during the introduction of a metrics programme. The paper also includes the results of a pilot study, conducted by the first author, which examines the attitudes that developers hold towards the introduction of software metrics. The key findings of this pilot study are that positive\u00a0\u2026", "num_citations": "16\n", "authors": ["224"]}
{"title": "Towards implementing successful software inspections\n", "abstract": " The authors present their findings of using the Repertory Grid Technique with over two hundred software practitioners in thirteen UK software companies. They use their findings to establish the ways in which inspections can be optimised to be more effective and successful as software engineering tools. The findings suggest that, contrary to conventional wisdom, developers are very positive about using inspections that generate engineering benefit. Often inspections are implemented in such a way as to only benefit managers.", "num_citations": "15\n", "authors": ["224"]}
{"title": "Empirical support for two refactoring studies using commercial C# software\n", "abstract": " Objective.  This paper documents a study of the application of refactorings in commercial C# software comprising 270 versions over a two-month period. The software was developed in a continuous integration environment in a large, multi-national company where each software change committed to the source control was regarded as a new version. The aim of the research was to compare and contrast the results from two previous refactoring studies with those of the C# software. Method.  A tool was developed to compare each version with the previous and detect occurrences of fifteen types of refactorings in both production and test classes. In total, over one thousand separate refactorings were identified. We then extended the profile of refactorings to compare (separately) the types of refactorings identified in test code and those in production code. Finally, we explored the interrelationships between a subset of the fifteen refactorings as a part explanation for the results. Conclusions.  While \u2018simpler\u2019 refactorings were common, the more \u2018complex\u2019 structural refactorings were relatively rare. This supported the key result of an earlier empirical study by Advani et al. where Java open-source was used. Distinct differences were found in the types of refactoring applied to each code type. Support was found for a recent observation of Zaidman et al. in terms of parallel effort devoted to production and test classes. The study thus illustrates a strong commonality between refactoring trends found in  both  previous studies. Analysis of, and insight into all of our results were informed by follow-up discussions and consultation with the company\u2019s Architect.", "num_citations": "14\n", "authors": ["224"]}
{"title": "Introduction to Stand\u2010up Meetings in Agile Methods\n", "abstract": " In recent years, agile methods have become more popular in the software industry. Agile methods are a new approach compared to plan\u2010driven approaches. One of the most important shifts in adopting an agile approach is the central focus given to people in the process. This is exemplified by the independence afforded to developers in the development work they do. This work investigates the opinions of practitioners about daily stand\u2010up meetings in the agile methods and the role of developer in that. For our investigation we joined a yahoo group called \u201cExtreme Programming\u201d. Our investigation suggests that although trust is an important factor in agile methods. But stand\u2010ups are not the place to build trust.", "num_citations": "12\n", "authors": ["224"]}
{"title": "Do bad smells indicate\" trouble\" in code?\n", "abstract": " In 1999 Fowler et al. identified 22 Bad Smells in code to direct the effective refactoring. These are increasingly being used by software engineers. However, the empirical basis of using Bad Smells to direct refactoring and to address' trouble'in code is not clear. Our project aims to empirically investigate the impact of Bad Smells on software in terms of their relationship to faults.", "num_citations": "12\n", "authors": ["224"]}
{"title": "Getting the best out of software process simulation and empirical research in software engineering\n", "abstract": " This position paper sets out our views on the need to use simulation and quantitative experiments in combination in order to maximise the benefit of both to software engineering research. Each approach should be used to overcome weaknesses in the other in attempting to predict the behaviour of software processes when new or modified processes, tools or techniques are employed. We also express our concern at the frequently-encountered use of the term 'experiment' to describe quantitative simulation-based investigations.", "num_citations": "10\n", "authors": ["224"]}
{"title": "Program slicing metrics and evolvability: an initial study\n", "abstract": " Previous research has identified a number of metrics derived from program slicing. In this paper we discuss how these metrics relate to the effort required to evolve an existing software-based system. Whilst our interest in this work stems from our development of simulation models of long-term software evolution processes, it will also be directly relevant to the managers of software evolution activities.", "num_citations": "10\n", "authors": ["224"]}
{"title": "Assessing usability through perceptions of information scent\n", "abstract": " Information scent is an establish concept for assessing how users interact with information retrieval systems. This paper proposes two ways of measuring user perceptions of information scent in order to assess the product quality of Web or Internet information retrieval systems. An empirical study is presented which validates these measures through an evaluation based on a live e-commerce application. This study shows a strong correlation between the measures of perceived scent and system usability. Finally the wider applicability of these methods is discussed.", "num_citations": "10\n", "authors": ["224"]}
{"title": "Identifying the causes of poor progress in software projects\n", "abstract": " We present data on the progress of two projects at IBM Hursley Park. Each project lasted approximately 12 months in duration. We use the data to identify the areas in the projects where poor progress was occurring and to investigate the causes of this poor progress. We find some similarities between the two projects in terms of where some poor progress is occurring i.e. with the design, code and test processes. But we also identify differences between the two projects that can be partially explained by the dependency of these two projects on other parts of IBM. We also find that limited quantitative data is reported in the projects, and that there is little explicit comparison of actual progress with planned progress. Indeed, the reporting of progress seems to be affected by factors like the 'deadline effect' and preferences for reporting certain types of progress. We conclude that these factors may threaten the valid reporting\u00a0\u2026", "num_citations": "10\n", "authors": ["224"]}
{"title": "Evolutionary coupling measurement: Making sense of the current chaos\n", "abstract": " Objective: The aim of this research is to evaluate the measurement of evolutionary coupling (EC) in software artefacts from a measurement theory perspective.Background: Evolutionary coupling (EC) can be defined as the implicit relationship between two or more software artefacts which are frequently changed together. Previous studies on EC show that EC measures which are based on software change history information play an important role in measuring software quality and predicting defects. The many previous EC measures published are disparate and no comprehensive evaluation of the current EC measures exists. Therefore it is hard for researchers and practitioners to compare, choose and use EC measures.Methods: We define 19 evaluation criteria based on the principles of measurement theory and metrology. We evaluate previously published EC measures by applying these criteria.Results: Our\u00a0\u2026", "num_citations": "9\n", "authors": ["224"]}
{"title": "Evaluating a rapid simulation modelling process (RSMP) through controlled experiments\n", "abstract": " In recent years there has been an increasing interest in simulation modelling to study, control, and manage software development processes. Despite this, little attention has been paid towards the simulation modelling process itself. We have developed a rapid simulation modelling process (RSMP) based on our study of experienced simulation modellers. This paper reports a set of controlled experiments to evaluate the usability and utility of the RSMP. The results from this show that the RSMP has proved to be a usable and useful approach for developing software process simulation models. The results show that the RSMP is likely to bring discipline to software process simulation modellers and improve the quality of the model they produce.", "num_citations": "9\n", "authors": ["224"]}
{"title": "A policy investigation model for long-term software evolution processes\n", "abstract": " We describe a system dynamics simulation of a long-term software evolution process. The model has been deliberately kept as simple as possible, to allow for easier calibration. The simulation model is intended to allow the examination of potential effects on software system size of proposed software process changes. The model structure incorporates a number of policy variables whose values can be set to represent the effects of such process changes. Results are presented showing the calibration of the modelled trend in system size growth over 13 years against an actual trend. The sensitivity of the model trend to changes in the values of the policy inputs is also shown. An example of a process with improved fault detection is presented.", "num_citations": "8\n", "authors": ["224"]}
{"title": "Software quality programmes: a snapshot of theory versus reality\n", "abstract": " We analyse the software quality programmes of two major UK companies whose software development departments, we feel, are typical of many hundreds in the UK. The analysis is based on an almost exhaustive survey of relevant practitioners at these companies (123 out of a possible 149 individuals) using questionnaires and interviews. We discovered significant differences between senior managers' perceptions and the reality of what quality practices took place. In particular, use of reviews and inspections, which are widely believed to be an extremely cost-effective QA procedure, was very limited even when safety critical software was being developed. On the other hand there was widespread use of development and coding standards whose value is questionable. We also discovered significant differences between practitioners' and managers' views of what the company quality goals really were\u00a0\u2026", "num_citations": "8\n", "authors": ["224"]}
{"title": "Using an expert panel to empirically validate a requirements engineering mediation model\n", "abstract": " Objective: In this paper we present findings from an empirical validation study of a newly developed narrative-based requirements engineering mediation (NREMM) model. The main objective of this study is to validate whether the motivation for developing the NREMM model is justified and how well the NREMM model meets its objectives. Methods: We used semi-structured interviews with a combination of closed and open-ended questions to elicit 10 requirements experts\u2019 opinions of NREMM model. Both quantitative and qualitative data were collected. Basic frequency analysis of the quantitative data was performed, as well as content analysis of the qualitative data. Findings: Overall, we found that NREMM is potentially capable of helping RE practitioners to identify, define, and resolve conflicts in the requirements engineering (RE) process. However, the NREMM needs further improvement in terms of integrating with existing RE modelling and goal analysis techniques. In addition a set of guidelines to ensure practitioners can correctly implement NREMM in practice is also required. Conclusions: Our expert panel findings indicate that our newly developed NREMM model meets its original objective to provide an effective framework guiding practitioners to mediate conflicts in the RE process. However, NREMM needs further improvement to make it easier to adopt by practitioners.", "num_citations": "7\n", "authors": ["224"]}
{"title": "Using multi dimensional scaling to analyse software engineers' de\u2010motivators for SPI\n", "abstract": " We present analysis of factors that de\u2010motivate software practitioners from supporting software process improvement (SPI) initiatives, using a multidimensional scaling (MDS) technique. Our findings are based on an empirical study involving nearly 200 software practitioners from 13 UK companies. Our aim is to provide managers with a better understanding of the obstacles that prevent practitioners from supporting SPI. This insight should help SPI managers establish more effective SPI implementation strategies. In this article we re\u2010introduce the use of MDS techniques in SPI research. MDS is a social science data analysis technique designed to generate a rich visual understanding of human issues. By using MDS we found evidence to suggest distinct clusters of de\u2010motivators exist for different staff groups. Copyright \u00a9 2007 John Wiley & Sons, Ltd.", "num_citations": "7\n", "authors": ["224"]}
{"title": "A proposed framework for evaluating software process simulation models\n", "abstract": " Unfortunately, the modeling community still lacks a standard framework for the evaluation of software process simulation models. In this study we present an extension of the evaluation framework developed by Kitchenham et al. This framework considers five quality aspects for evaluation: syntactic quality, semantic quality, pragmatic quality, test quality and maintainability. This research recommends that the value of a model should be considered as a separate entity for evaluation as contrary to Kitchenham et al.\u2019s viewpoint, who consider it as a quality aspect. Furthermore, maintainability should be given increased importance as simulation models for software processes require enhancements and changes with organizational process change or improvement. We present to the research community the issue of methods and metrics for assessing the maintainability of simulation models.", "num_citations": "7\n", "authors": ["224"]}
{"title": "Agile Processes in Software Engineering and Extreme Programming: 17th International Conference, XP 2016, Edinburgh, UK, May 24-27, 2016, Proceedings\n", "abstract": " Agile software development continues to be adopted widely, and the submissions to XP 2016 reflected a diversity of concerns. Alongside challenges that have traditionally been the subject of discussion and research such as scalability, UX design, and agile measurement, this year\u2019s submissions included an increased focus on domains that originally shied away from agile working, such as safety-critical systems and other regulated environments. In addition, submissions considered agile sustainability, both across a software system\u2019s life, and within the organizational context. The XP conference attracts a large number of software practitioners and researchers, providing a rare opportunity for interaction between the two communities. In order to leverage this opportunity, a new Empirical Studies track was introduced this year. In this track, researchers who wanted to collect empirical data from practitioners during XP 2016 were invited to submit their research plans. Accepted plans were then associated with accepted industry and practice sessions to collect empirical data live during XP 2016 sessions. Accepted study plans are included here; papers resulting from the studies appear in a later special section of the Information and Software", "num_citations": "5\n", "authors": ["224"]}
{"title": "Using software development progress data to understand threats to project outcomes\n", "abstract": " In this paper we describe our on-going longitudinal study of a large complex software development project. We discuss how we used project metrics data collected by the development team to identify threats to project outcomes. Identifying and addressing threats to projects early in the development process should significantly reduce the chances of project failure. We have analysed project data to pinpoint the sources of threats to the project. The data we have used is embedded in the project's fortnightly progress reports produced by the project team. The progress reports are part of the software measurement program this company operates. The company has highly mature development processes which were assessed at CMM level 5 in 2004. Our analysis shows that standard project progress data can generate rich insights into the project; insights that go beyond those anticipated when the metrics were originally\u00a0\u2026", "num_citations": "5\n", "authors": ["224"]}
{"title": "Longitudinal studies in evidence-based software engineering\n", "abstract": " Longitudinal studies (LS) generate particularly valuable empirical data. There are many reasons for this, most of which are related to the fact that LS are usually large scale. This allows for a range of rich data to be collected. It also means that the scale of data collected should enable statistically significant results to be generated. Furthermore there are also strong temporal aspects to longitudinal studies. These allow changes over time to be tracked which means that the life of a system can be better understood. It also means that the temporal aspects of process change can be identified. The scale and richness of data, collected over the lifetime of a development project, makes for a valuable empirical investigation.", "num_citations": "4\n", "authors": ["224"]}
{"title": "The Relationship between Depth of Inheritance and Refactoring: An Empirical Study of Eclipse Releases\n", "abstract": " While numerous empirical studies have explored aspects of refactoring, an open research question still remaining is the extent to which refactoring and inheritance are related. In other words, is there a depth of inheritance where either the majority of refactorings are undertaken or specific refactorings have a propensity for being undertaken? The original purpose of inheritance was to allow data to be structured in a logical and easily comprehensible way. The question as to whether maintenance of those structures conforms to any patterns is also largely un-explored. In this paper, we explore three releases of the Eclipse system to establish where the refactoring activity lay vis-a-vis inheritance. We explored two research questions related to the number and type of refactorings at each level of the hierarchy. The Ref-Finder tool was used to determine all refactorings across those releases and the JHawk tool used to\u00a0\u2026", "num_citations": "3\n", "authors": ["224"]}
{"title": "Preliminary Investigation of Stand-up Meetings in Agile Methods.\n", "abstract": " In recent years, agile methods have become more popular in the software industry. Agile methods are a new approach compared to plan-driven approaches. One of the most important shifts in adopting an agile approach is the central focus given to people in the process. This is exemplified by the independence afforded to developers in the development work they do. This paper investigates the opinions of practitioners about daily stand-up meetings in the agile methods and the role of developer in that. For our investigation we joined a yahoo group called \u201cExtreme Programming\u201d. Our investigation suggests that although trust is an important factor in agile methods. But stand-ups are not the place to build trust.", "num_citations": "3\n", "authors": ["224"]}
{"title": "De-motivators for software process improvement: An analysis of practitioners' views\n", "abstract": " De-motivators for software process improvement: An analysis of practitioners' views - Dialnet Ayuda \u00bfEn qu\u00e9 podemos ayudarle? \u00d7 Buscar en la ayuda Buscar Consultar la ayuda \u00bfEn qu\u00e9 podemos ayudarle? \u00d7 Buscar en la ayuda Buscar Consultar la ayuda Ir al contenido Dialnet Buscar Revistas Tesis Congresos Ayuda De-motivators for software process improvement: An analysis of practitioners' views Autores: Nathan Baddoo, Tracy Hall Localizaci\u00f3n: Quality control and applied statistics, ISSN 0033-5207, Vol. , N\u00ba. , 2004, p\u00e1gs. 341-342 Idioma: ingl\u00e9s Texto completo no disponible (Saber m\u00e1s ...) Fundaci\u00f3n Dialnet Acceso de usuarios registrados Imagen de identificaci\u00f3n Identificarse \u00bfOlvid\u00f3 su contrase\u00f1a? \u00bfEs nuevo? Reg\u00edstrese Ventajas de registrarse Dialnet Plus M\u00e1s informaci\u00f3n sobre Dialnet Plus Opciones de compartir Facebook Twitter Opciones de entorno Sugerencia / Errata \u00a9 2001-2021 Fundaci\u00f3n \u00b7 : I\u2026", "num_citations": "3\n", "authors": ["224"]}
{"title": "An overview of the practitioners, processes and products project\n", "abstract": " An overview of the work of a research project is useful because it can provide the reader with a clear introduction to that project. This paper provides such an overview for the work we have conducted as part of the Practitioners, Processes and Products (PPP) project. Process assessment and improvement models have increased in prominence, and a number of standards or awards for quality have been introduced. While we accept the important contributions of these models and standards, we also believe that the human factors in the processes have not been properly examined. The PPP project focuses on human factors and their relationship to the implementation of software process improvement programmes. This paper describes the empirical \u2018breadth\u2019 and \u2018depth\u2019 of the project, summarises the main arguments that underpin the project, reviews the publications to-date, provides a \u2018profile\u2019 of the companies involved in the main study, and presents some preliminary findings.", "num_citations": "3\n", "authors": ["224"]}
{"title": "Reducing Software Developer Human Errors by Improving Situation Awareness\n", "abstract": " Software development is prone to errors, which are partially related to losing situation awareness. We recommend that developers know their own weaknesses, use cognitive training to manage those weaknesses, simplify their working environment, and communicate carefully with external stakeholders.", "num_citations": "2\n", "authors": ["224"]}
{"title": "Building a narrative based Requirements Engineering mediation model\n", "abstract": " This paper presents a narrative-based Requirements Engineering (RE) mediation model to help RE practitioners to effectively identify, define, and resolve conflicts of interest, goals, and requirements. Within the SPI community, there is a common belief that social, human, and organizational issues significantly impact on the effectiveness of software process improvement in general and the requirements engineering process in particularl. Conflicts among different stakeholders are an important human and social issue that need more research attention in the SPI and RE community. By drawing on the conflict resolution literature and IS literature, we argue that conflict resolution in RE is a mediated process, in which a requirements engineer can act as a mediator among different stakeholders. To address socio-psychological aspects of conflict in RE and SPI, Winslade and Monk (2000)\u2019s narrative mediation\u00a0\u2026", "num_citations": "2\n", "authors": ["224"]}
{"title": "Simulation modelling practices of ProSim03 participants: A survey\n", "abstract": " Despite the increasing interest in software process simulation, the literature does not report the use of a formal process for software process simulation model development. We report the results of a preliminary survey of how people go about developing simulation models of software processes. We discuss potential issues that may arise because of an informal or ad hoc process for model development e.g. model quality, inadequate management, poor communication etc. We conducted a survey of simulation model development practices at the ProSim03 workshop. The results from this preliminary investigation are interesting and bring many issues into focus. The majority of the participants say that they have a systematic process for model development. The majority of participants' perceptions are that the provision of a formal modelling process coupled with model evaluation is the most urgent issue to be\u00a0\u2026", "num_citations": "2\n", "authors": ["224"]}
{"title": "Agile Methods and Motivation: A Position Paper\n", "abstract": " Even though it has been widely acknowledged that human factors are critically important to effective software development processes, they continue to be neglected in the industry. One such human factor is the motivation needs of software developers. In this paper we argue that plandriven software development methods do not satisfy the motivation needs of software developers, who have been shown to have significantly different motivation needs. This is because plan-driven development methods have been derived from the manufacturing and engineering disciplines and thus tend to be more predictive and less people oriented. We hypothesise that agile development methods may better satisfy the motivation needs of software developers because they happen to be adaptive and essentially peope oriented. In this paper, we propose a programme of research to investigate the impact of agile methods on software developers' motivation needs. This programme of research should include a comparative study of how motivation needs are met in planned-driven versus agile environments. We suggest that the results of this study can provide useful insight into the factors that can improve software developers' performance.", "num_citations": "2\n", "authors": ["224"]}
{"title": "Persuading developers to buy into software process improvement: an exploratory analysis\n", "abstract": " In order to investigate practitioners' opinions of software process and software process improvement, we have collected information from 13 companies, in a variety of ways i.e. the use of Repertory Grid Technique, survey and focus group discussions. Both the Repertory Grid Technique and the focus group discussions (43 discussions occurred, in total) produced a large volume of qualitative data. At the same time, other researchers have reported--investigations of practitioners, and we are interested in how their reports may relate to our own. Thus, other research publications can also be treated as a form of qualitative data. In this paper, we review advice on a method, content analysis, that is used to analyse qualitative data. Content analysis is a method for identifying and classifying words and phrases used in--ordinary language. We use content analysis to describe and analyse discussions on software--process and software process improvement. We report preliminary findings from an analysis--of both the focus group evidence and some publications. Our main finding is that there is an--apparent contradiction between developers saying that they want evidence for software process improvement, and what developers will accept as evidence. This presents a serious problem for research: even if researchers could demonstrate a strong, reliable relationship between software process improvement and improved organisational performance, there would still be the problem of convincing practitioners that the evidence applies to their particular situation.", "num_citations": "2\n", "authors": ["224"]}
{"title": "The Impact of Bad Smells on Code\n", "abstract": " You see message chains when a client asks one object for another object, which the client then asks for yet another object, which the client then asks for yet another another object, and so on. You may see these as a long line of getThis methods, or as a sequence of temps.(Fowler et al., 1999)", "num_citations": "1\n", "authors": ["224"]}
{"title": "What Good Are Metrics? The Views of Industry and Academia.\n", "abstract": " The panellists will discuss why we should use metrics. Are they good for business? Do they really tell us something about quality and productivity? Are the predictions ever right? Are there metrics that business needs that researchers are not producing? How can we make the reality match the vision?", "num_citations": "1\n", "authors": ["224"]}
{"title": "Implementing\n", "abstract": " 3-5 metrics programs within improve without enthusiasm and the data will a company and should range from ment initiatives.'However, perhaps probably lack validity. awareness raising to training in statistithe most important positive push for\u2022 Developer participation. Developers cal analysis techniques. metrics programs was the publication should participate in designing the\u2022 Gurus and champions. Organi-of Robert Grady and Deborah metrics program. With high levels of zations can increase practitioners' ini-Caswell's 1987 book, Software Metrics: developer participation, buy-in is more tial enthusiasm by bringing in an exter-", "num_citations": "1\n", "authors": ["224"]}