{"title": "Measuring software reuse: principles, practices, and economic models\n", "abstract": " Software reuse appears to be an important practice, but we will not know this (and be able to convince others) without hard empirical evidence, usually in the form of quantitative data. This is the justification for a book about standard reuse metrics and how to apply them. This book is clearly intended for practitioners rather than students or researchers. Although it is short and consists of many short chapters, there are no exercises, and the book presumes readers with considerable knowledge about software development, not students. On the other hand, the chapters surveying the reuse literature do not go into depth, and sometimes make broad claims without much justification, a practice clearly not intended to satisfy researchers. Practitioners who need to set up their own software reuse metrics programs will find this book very helpful, but sometimes confusing or misleading as well. On the positive side, the book is\u00a0\u2026", "num_citations": "433\n", "authors": ["2188"]}
{"title": "The business case for software reuse\n", "abstract": " To remain competitive, software development organizations must reduce cycle time and cost, while at the same time adding function and improving quality. One potential solution lies in software reuse. Because software reuse is not free, we must weigh the potential benefits against the expenditures of time and resources required to identify and integrate reusable software into products. We first introduce software reuse concepts and examine the cost-benefit trade-offs of software reuse investments. We then provide a set of metrics used by IBM to accurately reflect the effort saved by reuse. We define reuse metrics that distinguish the savings and benefits from those already gained through accepted software engineering techniques. When used with the return-on-investment (ROI) model described in this paper, these metrics can effectively establish a sound business justification for reuse and can help assess the\u00a0\u2026", "num_citations": "188\n", "authors": ["2188"]}
{"title": "Measuring software reusability\n", "abstract": " This paper examines various approaches to measuring software reusability. Knowing what makes software \"reusable\" can help us learn how to build new reusable components and help us to identify potentially useful modules in existing programs. The paper begins by establishing a taxonomy of approaches to reusability metrics based on their empirical or qualitative orientation. The paper then examines the disciplines, theories, and techniques used by numerous existing reusability measurement methods as they relate to the taxonomy. Recognizing that most of these methods focus exclusively on internal characteristics of components and ignore environmental factors, the paper challenges reusability researchers to incorporate domain attributes into their metrics. In fact, the application domain represents a critically important factor in whether or not we find a component reusable. The research, framework, and\u00a0\u2026", "num_citations": "151\n", "authors": ["2188"]}
{"title": "A reuse metrics and return on investment model\n", "abstract": " It is argued that establishing a realistic return on investment on a reuse program is essential to inserting reuse into a corporate software development process, and that clearly stating the potential benefits of reuse in financial terms has proven to be a powerful motivator. A reuse metrics and return on investment (ROI) model that distinguish the savings and benefits from those already gained through accepted software engineering techniques are defined. Three reuse metrics are derived from readily available and observable software data elements. The metrics are used in the return on investment model to establish sound business justification for reuse.< >", "num_citations": "87\n", "authors": ["2188"]}
{"title": "Populating software repositories: Incentives and domain-specific software\n", "abstract": " Reusable Software Libraries (RSLs) often form the core on an organizational reuse strategy. Although RSLs provide a place to deposit software for use by others, RSLs do not guarantee reuse success. The implementation of an RSL depends on many factors including the availability of quality and useful software. Domain-specific considerations most often determine the usefulness of software and therefore should influence how an organization populates an RSL. This article presents IBM's1 experiences with a corporate RSL, reuse incentive programs, and summarizes the results of an enterprise-wide initiative to develop reusable software for the RSL. The article explains some of the issues surrounding a large RSL and defines a three-phased progression typical of corporate reuse libraries.", "num_citations": "72\n", "authors": ["2188"]}
{"title": "Technical opinion: reuse: been there, done that\n", "abstract": " Note that without domain analysis, a project can hope for little more than about 20% reuse. Because up to 65% of an application can come from domain-specific software, high levels of reuse\u2014as well as the corresponding benefits\u2014depend on the planning, discipline, and investment that comes though this kind of formal reuse. Organizations that desire to achieve high levels of reuse can choose from several existing, effective, and proven methods.", "num_citations": "58\n", "authors": ["2188"]}
{"title": "Experiences with a faceted classification scheme in a large reusable software library (RSL)\n", "abstract": " This paper presents experiences with software classification in a large corporate reuse software library (RSL) at IBM. We use facets extensively as one method of component classification in the IBM RSL. However, facets alone cannot adequately provide all the information needed to fully classify and understand a reusable component. Experience with an operational RSL reveals that we require a combination of classification techniques to meet the needs of software developers. Following an overview of the IBM classification method, we discuss the issues surrounding the use of facets and software classification in a large reuse system and give techniques used at IBM to address those issues.< >", "num_citations": "54\n", "authors": ["2188"]}
{"title": "The business case for software reuse: Reuse metrics, economic models, organizational issues, and case studies\n", "abstract": " Successfully introducing a reuse program into an organization requires many things, such as proven processes, an organization for reuse, and management support. However, management needs to understand the value of reuse before they will allocate resources. Key to showing this value is a business case based on consistent, realistic, and easy to understand metrics. I have found that combining realistic assumptions with simple, easy-to-understand metrics often provides the incentive needed to \u201csell\u201d reuse to management.", "num_citations": "29\n", "authors": ["2188"]}
{"title": "The economics of product line development\n", "abstract": " This paper uses an established reuse metric and return on investment (ROI) model to present a new metric for estimating the financial benefit of software development within product lines. This metric can help organizations develop a business case to support the early development of shared software for use across families of related applications and products. The discussion and metrics apply (1) early in the software life-cycle for estimating product line benefits, and (2) after product release for calculating the benefits that resulted from product line development.", "num_citations": "29\n", "authors": ["2188"]}
{"title": "Melding structured abstracts and World Wide Web for retrieval of reusable components\n", "abstract": " Reusable Software Libraries (RSLs) often suffer from poor interfaces, too many formal standards, high levels of training required for their use, and most of all, a high cost to build and maintain. Hence, RSLs have largely failed to return the reuse benefits promised by their developers. This paper first describes an RSL implementation using the World Wide Web (WWW) browser Mosaic and shows how it meets most RSL needs, avoids most RSL pitfalls, and costs only a fraction of the cost for the average commercial RSL. Second, the paper describes a way to quickly assess the important aspects of a piece of software so programmers can decide whether or not to reuse it. Using the observation that when programmers discuss software they tend to convey the same key information in a somewhat predictable order, this paper describes a method to automatically mimic this activity using a Structured Abstract of reusable\u00a0\u2026", "num_citations": "29\n", "authors": ["2188"]}
{"title": "Determining the value of a corporate reuse program\n", "abstract": " Reuse metrics must accurately reflect the amount of effort saved. One must have realistic measures to ensure the credibility of the value placed on reuse and to separate reuse benefits from those of other technologies also competing for limited investment dollars. The paper defines a reuse metric and return on investment (ROI) model at IBM that distinguishes reuse savings and benefits from those already gained through accepted software engineering techniques. Used in conjunction with a planned reuse program, the potential of reuse serves as a powerful motivator. They derive three reuse metrics from readily available software data elements and use these metrics in return on investment model that establishes a sound business justification for reuse.< >", "num_citations": "28\n", "authors": ["2188"]}
{"title": "Integrated support for software reuse in computer-aided software engineering (CASE)\n", "abstract": " The success and acceptance of reuse tools and libraries depends on their integration into existing software development environments. However, the addition of large libraries of reusable components to software design databases only exacerbates the problem of design data management. Object-oriented databases originated to meet the requirements of design data management that relational databases could not satisfy. This paper describes a semantic data model for an object-oriented database supporting an integrated Computer Aided Software Engineering environment (CASE). The data model promotes reuse by providing objects that match program design requirements to existing components in the reuse library.", "num_citations": "24\n", "authors": ["2188"]}
{"title": "Software architectures, product lines, and DSSAs: Choosing the appropriate level of abstraction\n", "abstract": " There exists a general confusion regarding the relationship between reuse, domains, product lines, and software architectures. High levels of reuse can occur within domains, due to opportunities for reuse across applications within the domain. Software architectures describe the highest level organization of a software system, and may include many domains. This paper shows that product lines represent the exact same level of abstraction as domains. The paper then explains that the term\" product line\" exists primarily to help the software technical community effectively communicate concepts about problems (domains) to managers, who think in terms of solutions (products). This paper discusses the relationship between these concepts and warns against unnecessarily creating or raising abstraction levels when discussing software design issues.", "num_citations": "17\n", "authors": ["2188"]}
{"title": "Evolution of a software architecture for management information systems\n", "abstract": " This paper describes the evolution of a software architecture developed for use on very large scale applications in the domain of Management Information Systems (MIS). We documented the architecture in 1995 using the concepts of Garlan, Shaw, Zachman, and others. Describing the architecture using well-established and accepted principles allows us to more effectively apply the architecture to existing programs and to reuse the architecture on upcoming programs. However, new requirements and insights derived from 3 years of software development brought the need for several updates to the architecture. This paper describes work in progress to account for these new requirements and what we call a \u201cdual-baseline\u201d architectural description: the objective architecture we seek to achieve, and the current architecture we actually can implement based on the realities of technology, funding, and other resource\u00a0\u2026", "num_citations": "12\n", "authors": ["2188"]}
{"title": "Software reuse libraries with Mosaic\n", "abstract": " This paper describes a Reusable Software Library (RSL) interface and search tool implemented using Mosaic. Mosaic provides a simple, easy-to-use method to find and extract reusable assets from a RSL, allows distributed access to assets from a variety of platforms, and can support most of the features of formal RSLs without any modifications. Through the use of Hyper-Text Markup Language (HTML) forms, we implemented functions normally found in commercial-grade RSLs, such as component search, user registration, and problem reporting. Automatic generation of HTML pages and the use of command scripts further allowed us to provide different views of the RSL, such as search by subject. Finally, integrating the RSL with Wide Area Information Search (WAIS) provided a keyword search with minimal effort. Our Mosaic RSL cost less than 1% of the cost to develop a standard RSL and has quickly gained favor due to its intuitive interface and simple yet powerful information retrieval tools....", "num_citations": "12\n", "authors": ["2188"]}
{"title": "Reuse research and development: is it on the right track?\n", "abstract": " 2-People from industry: software development practitioners, could tell us if reuse research has been relevant and useful in their day-to-day work, whether the tools and methods put out during the past 10 years have been useful, and what their expectationsarefromusefultoolsandtechniques. 3-How people in smaWmedium sized shops have benefited from ongoing R&D snd how their needs are different from the large scale software shop.Permission to make digital/hard copy of part or all this work for personal or classroom uae ia granted without fee provided that copies are not made or distributed for profit or commercial advantage, the copyright notice, the titla of the publication and its date appear, and notice ia given that copying is by permission of ACM, Inc. To copy otherwiaa, to republish, to peat on servera, or to redistribute to hats, requires prior specific permission and/or a fee. SSR\u201997 MA, USA", "num_citations": "11\n", "authors": ["2188"]}
{"title": "The search for a general reusability metric\n", "abstract": " Many researchers have attempted to derive a general reusablity metric for software. Such a metric would quickly tell us the relative ease of using a given software component in new environments. However, deriving this metric requires an objective, repeatable, and quantifiable approach. The answer to this search eludes us because reusability inherently defies these requirements. The reasons for this include (1) the fact that researchers cannot agree on what makes software reusable, which leads to serious practical and theoretical barriers, and (2), the ability to use software depends on the environment as well as the internal characteristics of the software.", "num_citations": "10\n", "authors": ["2188"]}
{"title": "Issues in the development and application of reuse metrics in a corporate environment\n", "abstract": " This paper describes the issues addressed when developing and implementing the IBM reuse metrics and return on investment model [25]. Recognizing the potential benefits of reuse has proven instrumental in inserting reuse in the IBM programming process. However, many issues arise in a large organization when implementing metrics due to the diversity in computer languages, environments, and cultures. This paper presents the options and methods to resolve many of these issues [29]. 1.0 Overview The uniqueness of reuse metrics comes from the fact that, unlike productivity metrics, they reflect on what a programmer does not do. Organizations reward those who deliver the most function, thereby encouraging developers to write code. In reuse we want to reward developers for not writing code. This paper first discusses the goals and some criteria for reuse metrics. The paper then describes what to measure as reuse and how to measure reuse. This paper defines, from the business case perspective,...", "num_citations": "10\n", "authors": ["2188"]}
{"title": "An agenda for software Reuse Economics\n", "abstract": " Purpose: A Reuse Level metric to show what portion of your work you saved by reusing software.", "num_citations": "9\n", "authors": ["2188"]}
{"title": "Balancing the need for large corporate and small domain-specific reuse libraries\n", "abstract": " This paper presents IBM's experiences with a corporate Reusable, Software Library (RSL) and summarizes the results of a coq~ orate-wide incentive program to develop reusable software for the RSL. The paper then explains why many different organizations can use some software but not all software. In short, successful reuse programs depend on locally administered domain-specific\u00a2 ollections of software, not large libraries intended to meet the needs of everyone. The paper concludes that a company must organize for reuse so cL~ to make the most of local domain knowledge and expertise. 7\" his approach relies on locally administered parts centers, where individual organizations and sites can best address their needs.", "num_citations": "8\n", "authors": ["2188"]}
{"title": "A reuse-based software architecture for management information systems\n", "abstract": " The paper describes a software architecture for applications in the domain of management information systems (MIS). Using principles of software reuse and the architectural concepts introduced by D. Garlan and M. Shaw (1993), the paper describes the software architecture in terms of reusable components (of both and data) which provide domain independent and domain specific components for shared business functions. The architecture identifies the connectors between the components and gives rules that specify the constraints within which to apply the architecture. We describe the architecture using four \"views\" in order to help interpret the architecture for developers. We then implement the architecture with a set of architectural models in our CASE toolset; these models serve as reusable templates from which developers can instantiate their own architectural models. Designed to fully comply with Open\u00a0\u2026", "num_citations": "6\n", "authors": ["2188"]}
{"title": "Selling Software Reuse to Management\n", "abstract": " Over the past years, many reports have appeared that describe both positive [eg, Henry95, Rosenbaum95] and negative [eg, Glass98] experiences with software reuse. As one of the companies that led the introduction of software reuse into mainstream software development [Bauer93, Lenz87], we have made many observations about the theories of software reuse and what will actually work in practice. Key among these observations lies the fact that to successfully introduce a formal reuse program into an organization, management must support reuse both with words and with the necessary resources.However, before management will allocate resources, they need to see a business case. After all,\" business decisions drive reuse!\"[Poulin97a]. To build a business case, the reuse advocate must have uniform, realistic, and easy to understand reuse metrics. Not surprisingly, even conservative applications of these metrics will show very impressive returns on reuse investments. As a result, we have repeatedly used our reuse metrics as a technology insertion tool and we firmly believe in the critical role that they play when selling software reuse to management.", "num_citations": "4\n", "authors": ["2188"]}
{"title": "Reuse metrics deserve a warning label: The pitfalls of measuring software reuse\n", "abstract": " Almost everyone agrees that reuse involves using something that someone originally developed for\" someplace else.\" However, when it actually comes time to calculate reuse levels and reuse benefits, this understanding leaves a lot of room for interpretation. This article describes some of the pitfalls of measuring software reuse.In a very thorough and well-executed reuse survey of industry and government organizations by the Defense Information Systems Agency (DISA), software development leaders consistently reported impressive results. Managers gave reuse returns on investment (ROI) as high as four to one (4: 1) after two years, cycle time improvements of more than 30%, and\" a significantly increased competitive edge\"[DISA95]. However, what metrics did the managers use to come to these conclusions? When the survey team sought to understand how the survey participants measure success, they found that the survey participants provided testimonials and anecdotal results rather than objective evidence derived from quantitative measures. This article explains how reuse metrics, like all software metrics, can leave a lot of open questions [Poulin97].", "num_citations": "4\n", "authors": ["2188"]}
{"title": "Metrics for Object-Oriented Reuse\n", "abstract": " Software reuse has become a widely accepted way to reduce costs, shorten cycle times and improve quality. Unfortunately, very few OO programs have a method to actually quantify and realistically estimate the results that they have achieved. To do this, the program must have objective, easy-to-acquire, and easy-to-understand metrics. This article outlines a simple and effective set of metrics that apply to projects using OO tools and techniques.Object-orientation brings many opportunities for clarifying design, modeling real-world problems, and reducing the costs of maintenance. The concepts and language features of OO also make it easier to reuse objects in more than one application. This ability to design and implement software for use in many places has attracted the attention of nearly everyone involved in large-scale software development. Not surprisingly, OO practitioners cite reuse as one of the principle advantages of object-orientation.", "num_citations": "3\n", "authors": ["2188"]}
{"title": "Measurement-driven quality improvement in the MVS/ESA operating system\n", "abstract": " Achieving gains in software quality requires both the use of software metrics and the desire to make measurement-driven process improvements. This paper describes the experiences, changes, and kinds of metrics used to drive quantifiable results in a very large and complex software system. Developers on the IBM Multiple Virtual Storage (MVS) operating system track, respond and initiate better ways of controlling the software development process through the use of metric-based defect models, orthogonal defect classification (ODC), and object-oriented techniques. Constant attention to progress with respect to the measurements and working toward goals based on the metrics show that measurement-driven process improvement can lead to noticeably better products.< >", "num_citations": "3\n", "authors": ["2188"]}
{"title": "Creating Incentives for Reuse in Your Organisation\n", "abstract": " While an organization can easily identify the business reasons to launch a new software reuse program, the cultural changes required to support new software development processes are often much more challenging. Mandating that developers participate in the program seldom works without also providing worthwhile incentives. Creating incentives allows developers to share in the benefits that they have brought to your organization and provides a more immediate return on your reuse investment.This article suggests ways to implement and manage incentives for software reuse within your organization. It presents the experiences gained in various incentive programs throughout industry and focuses on their common characteristics [Poulin95]. In most of these programs, recognition ranges from simple public recognition to significant financial awards.", "num_citations": "2\n", "authors": ["2188"]}
{"title": "Measuring the level of reuse in object-oriented development\n", "abstract": " Defining what software to count as\" reused\" software constitutes the most difficult and meaningful problem in reuse metrics. Experience reports routinely report impressive reuse levels and benefits due to reuse. However, the reader cannot trust the report without understanding what the report counted; eg, modified software, ported software, generated software, etc. To date, only one model exists for defining a consistent method of counting and reporting software reuse. Although this model applies equally to various development paradigms to include objectoriented programming, this paper clarifies the model with respect to objects and expands on issues related to object-oriented reuse metrics. Keywords: Software Reuse, Reuse Metrics, Object-Oriented Programming Workshop Goals: Learn and discuss current reuse issues and methods. Working Groups: Useful and collectible metrics; Domain analysis and engineering; Software Architectures 1 Background To date, only one model exists for def...", "num_citations": "2\n", "authors": ["2188"]}
{"title": "5th international conference on software reuse (ICSR'5) conference summary\n", "abstract": " 5th international conference on software reuse (ICSR'5) conference summary | ACM SIGSOFT Software Engineering Notes ACM Digital Library Logo ACM Logo Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search ACM SIGSOFT Software Engineering Notes Newsletter Home Latest Issue Archive Authors Affiliations Award Winners More HomeSIGsSIGSOFTACM SIGSOFT Software Engineering NotesVol. , No. 5 th international conference on software reuse (ICSR'5) conference summary article 5 th international conference on software reuse (ICSR'5) conference summary Share on Authors: Jeffrey S Poulin profile image Jeffrey S. Poulin View Profile , P. Devanbu profile image Prem Devanbu View Profile Authors Info & Affiliations Publication: ACM \u2026", "num_citations": "1\n", "authors": ["2188"]}
{"title": "Populating Software Repositories: Incentives and Domain-Specific Software\n", "abstract": " Reusable Software Libraries (RSLs) often form the core of an organizational reuse strategy. However, while RSLs provide a place to deposit software for use by others, RSLs do not guarantee reuse success. The implementation of a RSL depends on many factors including the availability of quality and useful software. Domain-specific considerations most often determine the usefulness of software and therefore should influence how an organization populates an RSL. This paper presents IBM's 1 experiences with a corporate RSL, reuse incentive programs, and summarizes the results of an enterprise-wide initiative to develop reusable software for the RSL. The paper explains some of the issues surrounding a large RSL and defines a threephased progression typical of corporate reuse libraries. Keywords: software reuse, incentives, domainspecific reuse, software reusability, software reuse libraries 1.0 Overview Recognizing the need and potential benefits of a coordinated reuse program, IBM formed th...", "num_citations": "1\n", "authors": ["2188"]}
{"title": "Debate on software reuse libraries\n", "abstract": " High levels of reuse depend on the source of software to be reused. To meet this need many organizations have based their reuse programs on a centrally managed reusable software library (RSL). However, although the library metaphor has guided early work in classification, retrieval, and other areas of reuse technology, experiences vary on whether a centrally-managed RSL or domain-specific RSL provides the best focus for a reuse program. While library-based reuse has worked with stable and well understood application areas, experiences differ where the diversity of business makes it difficult to share all but the most general-purpose, low-level functions.<>", "num_citations": "1\n", "authors": ["2188"]}
{"title": "Object-oriented CAD database support for software reusability in computer-aided software engineering environments\n", "abstract": " There is currently a large research effort underway to develop new techniques and methods for the efficient development of software. However, much of this effort ignores the vast sum of knowledge that has been acquired through our experiences in the field of engineering CAD, especially in the area of VLSI design. Much of what has been learned in this area centers on database support for the design process, and in particular, efficient object-oriented modeling techniques for software design data. It is believed that the data model for software is a central issue surrounding the development of CASE systems.", "num_citations": "1\n", "authors": ["2188"]}