{"title": "DevOps: A software architect's perspective\n", "abstract": " The First Complete Guide to DevOps for Software Architects DevOps promises to accelerate the release of new software features and improve monitoring of systems in production, but its crucial implications for software architects and architecture are often ignored. In DevOps: A Software Architect\u0393\u00c7\u00d6s Perspective, three leading architects address these issues head-on. The authors review decisions software architects must make in order to achieve DevOps\u0393\u00c7\u00d6 goals and clarify how other DevOps participants are likely to impact the architect\u0393\u00c7\u00d6s work. They also provide the organizational, technical, and operational context needed to deploy DevOps more efficiently, and review DevOps\u0393\u00c7\u00d6 impact on each development phase. The authors address cross-cutting concerns that link multiple functions, offering practical insights into compliance, performance, reliability, repeatability, and security. This guide demonstrates the authors\u0393\u00c7\u00d6 ideas in action with three real-world case studies: datacenter replication for business continuity, management of a continuous deployment pipeline, and migration to a microservice architecture. Comprehensive coverage includes\u0393\u00c7\u00f3 Why DevOps can require major changes in both system architecture and IT roles\u0393\u00c7\u00f3 How virtualization and the cloud can enable DevOps practices\u0393\u00c7\u00f3 Integrating operations and its service lifecycle into DevOps\u0393\u00c7\u00f3 Designing new systems to work well with DevOps practices\u0393\u00c7\u00f3 Integrating DevOps with agile methods and TDD\u0393\u00c7\u00f3 Handling failure detection, upgrade planning, and other key issues\u0393\u00c7\u00f3 Managing consistency issues arising from DevOps\u0393\u00c7\u00d6 independent deployment models\u0393\u00c7\u00f3 Integrating security controls, roles, and audits\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "682\n", "authors": ["49"]}
{"title": "A taxonomy of blockchain-based systems for architecture design\n", "abstract": " Blockchain is an emerging technology for decentralised and transactional data sharing across a large network of untrusted participants. It enables new forms of distributed software architectures, where agreement on shared states can be established without trusting a central integration point. A major difficulty for architects designing applications based on blockchain is that the technology has many configurations and variants. Since blockchains are at an early stage, there is little product data or reliable technology evaluation available to compare different blockchains. In this paper, we propose how to classify and compare blockchains and blockchain-based systems to assist with the design and assessment of their impact on software architectures. Our taxonomy captures major architectural characteristics of blockchains and the impact of their principal design decisions. This taxonomy is intended to help with\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "569\n", "authors": ["49"]}
{"title": "Quality attributes for service-oriented architectures\n", "abstract": " The SOA approach is a very popular choice today for the implementation of distributed systems. The use of SOA or more specifically the Web services technology is an important architecture decision. An architect should understand how different quality attributes for a system are impacted by that decision. While there are significant benefits with respect to interoperability and modifiability, other qualities such as performance, security and testability are concerns. This paper discusses how the different quality attributes of a system can be positively or negatively affected by the use of such technology. It describes the factors related to each attribute, as well as possible tradeoffs and existing efforts to achieve that quality. The paper also discusses open issues in service level agreements that are used to contract the level of service quality between service providers and users.", "num_citations": "431\n", "authors": ["49"]}
{"title": "Managing variability in software architectures\n", "abstract": " This paper presents experience with explicitly managing variability within a software architecture. Software architects normally plan for change and put mechanisms in the architecture to support those changes. Understanding the situations where change has been planned for and recording the options possible within particular situations is usually not done explicitly. This becomes important if the architecture is used for many product versions over a long period or in a product line context where the architecture is used to build a variety of different products. That is, it is important to explicitly represent variation and indicate within the architecture locations for which change has been allowed. We will describe how the management of variations in an architecture can be made more explicit and how the use of variation points connected to the choices a customer has when ordering a product can help to navigate to the\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "274\n", "authors": ["49"]}
{"title": "Volume II: Technical concepts of component-based software engineering\n", "abstract": " The Software Engineering Institute (SEI) is undertaking a feasibility study of \u0393\u00c7\u00a3componentbased software engineering\u0393\u00c7\u00a5(CBSE). The objective of this study is to determine whether CBSE has the potential to advance the state of software engineering practice and, if so, whether the SEI can contribute to this advancement. This report is the second part of a threepart report on the study. Volume I contains a market assessment for CBSE. Volume III outlines a proposed course of action for the SEI. Volume II, this report, establishes the technical foundation for SEI work in CBSE. The paper asserts that the key technical challenge facing CBSE is to ensure that the properties of a system of components can be predicted from the properties of the components themselves. The key technical concepts of CBSE that are needed to support this vision are described: component, interface, contract, component model, component framework, composition, and certification.", "num_citations": "253\n", "authors": ["49"]}
{"title": "Developing software for the user interface\n", "abstract": " From the Publisher: This book provides the information needed to design and build user interface software. Focusing on software engineering needs, rather than human factors issues, the book's overall goal is to facilitate the development of less costly and more effective user interfaces.", "num_citations": "248\n", "authors": ["49"]}
{"title": "Linking usability to software architecture patterns through general scenarios\n", "abstract": " Usability is an important quality attribute to be considered during software architecture design. Up to this point, usability has been served only by separating a system\u0393\u00c7\u00d6s user interface from its functionality to support iterative design. However, this has the effect of pushing revisions to achieve usability toward the end of the software development life cycle. Many usability benefits link directly to a variety of architectural tactics in addition to separation of the user interface and these benefits can be discovered early in the life cycle. For each of 27 scenarios, we identified potential usability benefits a user could realize and an architectural pattern that supports achievement of those benefits. We organized the scenarios into an emergent hierarchy of potential benefits to the user and into an emergent hierarchy of architectural tactics used in the supporting patterns. The range of architectural tactics identified in this hierarchy\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "223\n", "authors": ["49"]}
{"title": "Quality attribute design primitives and the attribute driven design method\n", "abstract": " This paper discusses the understanding of quality attributes and their application to the design of a software architecture. We present an approach to characterizing quality attributes and capturing architectural patterns that are used to achieve these attributes. For each pattern, it is important not only how the pattern achieves a quality attribute goal but also what impact the pattern has on other attributes. We embody this investigation of quality into the Attribute Driven Design Method for designing software architecture.", "num_citations": "211\n", "authors": ["49"]}
{"title": "The architecture based design method\n", "abstract": " This paper presents the Architecture Based Design ABD method for designing the high-level software architecture for a product line or long-lived system. Designing an architecture for a product line or long-lived system is difficult because detailed requirements are not known in advance. The ABD method fulfills functional, quality, and business requirements at al level of abstraction that allows for the necessary variation when producing specific products. Its application relies on an understanding of the architectural mechanisms used to achieve this fulfillment. The method provides a series of steps for designing the conceptual software architecture. The conceptual software architecture provides organization of function, identification of synchronization points for independent threads of control, and allocation of function to processors. The method ends when commitments to classes, processes and operating system threads begin to be made. In addition, one output of the method is a collection of software templates that constrain the implementation of components of different types. The software templates include a description of how components interact with shared services and also include citizenship responsibilities for components.Descriptors:", "num_citations": "209\n", "authors": ["49"]}
{"title": "Deriving architectural tactics: A step toward methodical architectural design\n", "abstract": " This is one of several reports that provide the current status on the work being done by the Software Engineering Institute SEIsm to understand the relationship between quality requirements and architectural design. The ultimate objective of this work is to provide analysis-based guidance to designers so that the quality attributes of generated designs are more predictable and better understood. Currently, four distinct problems must be solved to achieve that objective 1 the precise specification of quality attribute requirements, 2 the enumeration of architectural decisions that can be used to achieve desired quality attribute requirements, 3 a means of coupling one quality attribute requirement to the relevant architectural decisions, and 4 a means of composing the relevant architectural decisions into a design. Embodying the solutions to these four problems into a design method that is sensitive to business priorities is an additional problem. This report deals with the third problem-coupling one quality attribute requirement to architectural decisions that achieve it. This report provides initial evidence that there is, in fact, a systematic relationship between general scenarios, concrete scenarios, architectural tactics, and design fragments. It examines, in detail, two concrete scenarios for performance and one for modifiability-and describes how to move from each scenario, through tactics, to design fragments that satisfy the scenario.Descriptors:", "num_citations": "159\n", "authors": ["49"]}
{"title": "The design of a wearable computer\n", "abstract": " The design process used to produce an innovative computer system is presented. The computer system that resulted from the process uses a circular motif both for the user interface and the input device. The input device is a dial and the user interface is visually organized around the concept of a circle. The design process itself proceeded in the presence of a great many constraints and we discuss these constraints and how an innovative design was achieved in spite of the constraints.", "num_citations": "145\n", "authors": ["49"]}
{"title": "Scenario-based software architecture evaluation methods: An overview\n", "abstract": " Software analysis and evaluation becomes a well-established practice inside the architecting community of the software systems. The development effort, the time and costs of complex systems are considerably high. In order to assess system\u0393\u00c7\u00d6s quality against the requirements of its customers, the architects and the developers need methods and tools to support them during the evaluation process. Different research groups have taken such initiatives and are proposing various methods for software architecture quality evaluation.", "num_citations": "139\n", "authors": ["49"]}
{"title": "Achieving usability through software architecture\n", "abstract": " In this report, we present an approach to improving the usability of software systems by means of software architectural decisions. We identify specific connections between aspects of usability, such as the ability to undo, and software architecture. We also formulate each aspect of usability as a scenario with a characteristic stimulus and response. For every scenario, we provide an architecture pattern that implements its aspect of usability. We then organize the usability scenarios by category. One category presents the benefits of these aspects of usability to users or their organizations. A second category presents the architecture mechanisms that directly relate to the aspects of usability. Finally, we present a matrix that correlates these two categories with the general scenarios that apply to them.Descriptors:", "num_citations": "135\n", "authors": ["49"]}
{"title": "Designing software architectures to achieve quality attribute requirements\n", "abstract": " In order to have a software architecture design method that achieves quality attribute requirements several aspects of the method must be in place. First there must be some way to specify quality attribute requirements so that it can be determined whether the designed architecture can achieve them. Secondly, there must be some way for modularising the knowledge associated with quality attributes so that the design method does not need to know how to reason about all of the multiplicity of quality attributes that exist. Finally, there must be some way for managing the interactions among the quality attributes so that either the requirements can be satisfied or the ones that cannot be satisfied are identified. The authors describe a structure called a \u0393\u00c7\u00ffreasoning framework\u0393\u00c7\u00d6 as a modularisation of quality attribute knowledge. The requirements that the architecture must satisfy are specified as concrete quality attribute\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "120\n", "authors": ["49"]}
{"title": "Architecture-centric software project management: A practical guide\n", "abstract": " From the Book: As computer hardware provides more functionality at a lower cost, the need for new applications software is exploding. The world-wide-web is providing more information to more people at an ever-faster rate. Software products must be developed quicker, with increased functionality, performance, and quality. The pressure on the software engineers who are developing new products and maintaining existing products is increasing. This book provides some support to the software project managers who are attempting to juggle the demands of meeting their schedule while delivering features with good quality. Our experience with observing and participating in many software development projects indicates that good design and project management skills go a long way in achieving successful projects. What is very clear is that it is unlikely that projects will be successful when the software architecture is\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "116\n", "authors": ["49"]}
{"title": "MoCCA: A mobile communication and computing architecture\n", "abstract": " We present an integrated computing system designed to help increase the efficiency of mobile workers, specifically field service engineers. Our solution, a Mobile Communications and Computing Architecture (MoCCA), consists of both a futuristic award-winning concept design and a first-generation working prototype. The prototype has support for collaborative multimedia: on-the-move networking for high-tech equipment maintenance using voice, video clips, and access to maintenance databases. We describe the user interface, software, and hardware architectures of our prototype. The hardware architecture uses a multi-tier networking scheme to trade off a small lightweight client and high computation power and battery life. Finally, we present lessons learned from user tests in applying a novel mobile computing architecture to a complex real-world task.", "num_citations": "99\n", "authors": ["49"]}
{"title": "Attribute-driven design (ADD), version 2.0\n", "abstract": " This report revises the Attribute-Driven Design ADD method that was developed by the Carnegie Mellon Software Engineering Institute. The motivation for revising ADD came from practitioners who use the method and want ADD to be easier to learn, understand, and apply. The ADD method is an approach to defining a software architecture in which the design process is based on the software quality attribute requirements. ADD follows a recursive process that decomposes a system or system element by applying architectural tactics and patterns that satisfy its driving quality attribute requirements. This technical report revises the steps of ADD and offers practical guidelines for carrying out each step. In addition, important design decisions that should be considered at each step are provided.Descriptors:", "num_citations": "95\n", "authors": ["49"]}
{"title": "Adtranz: a mobile computing system for maintenance and collaboration\n", "abstract": " The paper describes the mobile information and communication aspects of a next generation train maintenance and diagnosis system, discusses the working prototype features, and research results. Wearable/Mobile computers combined with the wireless technology improve efficiency and accuracy of the maintenance work. This technology enables maintenance personnel at the site to communicate with a remote helpdesk/expertise center through digital data, audio, and image.", "num_citations": "93\n", "authors": ["49"]}
{"title": "Quality attribute design primitives\n", "abstract": " This report focuses on the quality attribute aspects of mechanisms. An architectural mechanism is a structure whereby objects collaborate to provide some behavior that satisfies a requirement of the problem. The authors identity mechanisms that significantly affect quality attribute behavior and have sufficient content for analysis. Codifying such mechanisms will enable architects to identify the choices necessary to achieve quality attribute goals.Descriptors:", "num_citations": "86\n", "authors": ["49"]}
{"title": "Product Line Practice Workshop Report.\n", "abstract": " The first Software Engineering Institute Product Line Practice Workshop was a hands-on meeting held in December 1996 to share industry and government practices in software product lines and to explore the technical and nontechnical issues involved. This report synthesizes the workshop presentations and discussions, which identified factors involved in product line practices and analyzed issues in the areas of architecture, people-organization-management and business models.Descriptors:", "num_citations": "85\n", "authors": ["49"]}
{"title": "Modifiability tactics\n", "abstract": " An architectural tactic is a design decision that affects how well a software architecture addresses a particular quality attribute. This report describes how tactics are based on the parameters of quality attribute models. Tactics provide an architectural means of adjusting those parameters, which, in turn, can improve the quality-attribute-specific behavior of the resulting system. This report justifies the tactics for modifiability, using established concepts of coupling, cohesion, and cost motivations as the means of identifying parameters of interest. Various tactics are then described based on their ability to control these parameters. The report also describes a standard set of architectural patterns and their variants in terms of the use of these tactics.Descriptors:", "num_citations": "78\n", "authors": ["49"]}
{"title": "Introduction to the attribute driven design method\n", "abstract": " This tutorial will introduce the Attribute Driven Design (ADD) method. ADD is a method for designing the software architecture of a system or collection of systems based on an explicit articulation of the quality attribute goals for the system (s). The method is appropriate for any quality attributes but has been particularly elaborated for the attributes of performance, modifiability, security, reliability/availability and usability. The method has been used for designing the software architecture of products ranging from embedded to information systems.", "num_citations": "77\n", "authors": ["49"]}
{"title": "The cyclic AMP system in normal and psoriatic epidermis\n", "abstract": " Epinephrine is known to inhibit the mitotic rate in epidermis and control glycogen content of other tissues. Since epinephrine was known to act via cyclic AMP in other tissues, we predicted that cyclic AMP might maintain the differentiated state of normal epidermis and also keep normal epidermis relatively free of glycogen. This prediction is supported by observations in those cells in which cyclic AMP appears to slow the mitotic rate and promote differentiation. A deficiency of cyclic AMP in the epidermis of a psoriatic lesion, as well as other proliferative dermatoses, could account for the characteristic epidermal triad of such a lesion\u0393\u00c7\u00f6hyperproliferation, disordered differentiation and glycogen accumulation. Using the four criteria of Robison and Sutherland we found that epinephrine-induced epidermal mitotic inhibition is probably mediated by the beta adrenergic stimulation of intraepidermal cyclic AMP synthesis\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "73\n", "authors": ["49"]}
{"title": "POD-diagnosis: Error diagnosis of sporadic operations on cloud applications\n", "abstract": " Applications in the cloud are subject to sporadic changes due to operational activities such as upgrade, redeployment, and on-demand scaling. These operations are also subject to interferences from other simultaneous operations. Increasing the dependability of these sporadic operations is non-trivial, particularly since traditional anomaly-detection-based diagnosis techniques are less effective during sporadic operation periods. A wide range of legitimate changes confound anomaly diagnosis and make baseline establishment for \"normal\" operation difficult. The increasing frequency of these sporadic operations (e.g. due to continuous deployment) is exacerbating the problem. Diagnosing failures during sporadic operations relies heavily on logs, while log analysis challenges stemming from noisy, inconsistent and voluminous logs from multiple sources remain largely unsolved. In this paper, we propose Process\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "66\n", "authors": ["49"]}
{"title": "Illuminating the fundamental contributors to software architecture quality\n", "abstract": " An architectural tactic is a design decision that helps achieve a specific quality-attribute response. Such a tactic must be motivated by a quality-attribute analysis model. This report presents the basic concepts of analysis models for two quality attributes-modifiability and performance, identifies a collection of tactics that can be used to control responses within those models, and discusses how to analyze the models in terms of these tactics. This report also describes how to interpret architectural designs in terms of analysis models and how to apply those models to specific architectures. In addition, it presents the analysis of several different architectural patterns taken from current literature.Descriptors:", "num_citations": "66\n", "authors": ["49"]}
{"title": "Volume 1: Market assessment of component-based software engineering\n", "abstract": " To assess the market for component-based software engineering, the Software Engineering Institute SEI studied industry trends in the use of software components. The study, conducted from September 1999 to February 2000, examined software components from both technical and business perspectives. The results of this study are summarized in the following technical notes and reports Volume I Market Assessment of Component-Based Software Engineering Volume II Technical Concepts of Component-Based Software Engineering Volume III SEI Role in Component-Based Software Engineering This technical note, Volume I, examines software component technology from a business perspective. It synthesizes the views of economists, industry analysts, information technology IT managers, and engineers. It presents evidence that software component technology is indeed being adopted by commercial industry. It also explains what lies behind the adoption of software component technology, and what industry expects from software component technology.Descriptors:", "num_citations": "64\n", "authors": ["49"]}
{"title": "Fourth product line practice workshop report\n", "abstract": " The Fourth Software Engineering Institute SEI Product Line Practice Workshop was a hands-on meeting held in December 1999 to share industry practices in the area of tool support for software product lines, to explore the technical and non-technical issues involved, and to evolve the SEI Product Line Practice Framework. This report synthesizes the workshop presentations and discussions, which described practices and issues associated with tool support for software product lines.Descriptors:", "num_citations": "63\n", "authors": ["49"]}
{"title": "Preliminary design of arche: A software architecture design assistant\n", "abstract": " This report presents a procedure for moving from a set of quality attribute scenarios to an architecture design that satisfies those scenarios. This procedure is embodied in a preliminary design for an architecture design assistant named ArchE Architecture Expert, which will be implemented on a rule-based platform. This report includes the theory and rationale precipitating the design of ArchE and then describes this design in detail.Descriptors:", "num_citations": "61\n", "authors": ["49"]}
{"title": "Integrating quality-attribute reasoning frameworks in the ArchE design assistant\n", "abstract": " Techniques and tools for specific quality-attribute issues are becoming a mainstream in architecture design. This approach is practical for evaluating the architecture in early stages but also for planning improvements for it. Thus, we believe that one challenge is the integration of the individual capabilities of quality-attribute techniques. This paper presents our research work on a design assistant called ArchE that, based on reasoning framework technology, provides an infrastructure for third-party researchers to integrate their own quality-attribute models. This infrastructure aims at facilitating the experimentation and sharing of quality-attribute knowledge in both research and educational contexts.", "num_citations": "60\n", "authors": ["49"]}
{"title": "Supporting usability through software architecture\n", "abstract": " Software engineers should consider usability as a quality attribute in their architectural a designs. Usability determines how effectively and comfortably an end-user can achieve the goals that gave rise to an interactive system. It is an important attribute to consider during all phases of software design, but especially during architectural design because of the expense involved in adding usability aspects after users have tested the system. Since the 1980s, ongoing work on supporting usability through software architectural constructs has focused on the iterative design process for the user interface, which involves initial design, user testing, re-design to correct detected flaws, re-testing, and so on. The traditional software architectural response to repeated and expected modifications to the user interface is to use separation, encapsulation and information hiding to localize the user interface.", "num_citations": "60\n", "authors": ["49"]}
{"title": "The software architect and DevOps\n", "abstract": " DevOps practices deal with such things as the velocity of releases, how fast incidents are handled, and the enforcement of organizationally specified security practices. All these are critical for success in today's environment, and the architect is critical for success in adopting DevOps practices. This instalment of the Pragmatic Architect explains why.", "num_citations": "54\n", "authors": ["49"]}
{"title": "Securing a deployment pipeline\n", "abstract": " At the RELENG 2014 Q&A, the question was asked, \u0393\u00c7\u00a3What is your greatest concern?\u0393\u00c7\u00a5 and the response was \u0393\u00c7\u00a3someone subverting our deployment pipeline\u0393\u00c7\u00a5. That is the motivation for this paper. We explore what it means to subvert a pipeline and provide several different scenarios of subversion. We then focus on the issue of securing a pipeline. As a result, we provide an engineering process that is based on having trusted components mediate access to sensitive portions of the pipeline from other components, which can remain untrusted. Applying our process to a pipeline we constructed involving Chef, Jenkins, Docker, Github, and AWS, we find that some aspects of our process result in easy to make changes to the pipeline, whereas others are more difficult. Consequently, we have developed a design that hardens the pipeline, although it does not yet completely secure it.", "num_citations": "53\n", "authors": ["49"]}
{"title": "Reasoning frameworks\n", "abstract": " Determining whether a system will satisfy critical quality attribute requirements in areas such as performance, modifiability, and reliability is a complicated task that often requires the use of many complex theories and tools to arrive at reliable answers. This report describes a vehicle for encapsulating the quality attribute knowledge needed to understand a systems quality behavior as a reasoning framework that can be used by nonexperts. A reasoning framework includes the mechanisms needed to use sound analytic theories to analyze the behavior of a system with respect to some quality attribute. This report defines the elements of a reasoning framework and illustrates the reasoning framework concept by describing several reasoning frameworks and how they realize these elements.Descriptors:", "num_citations": "53\n", "authors": ["49"]}
{"title": "Usability and software architecture\n", "abstract": " The role of software architecture with respect to usability has evolved over the past 20 years. The architectures of the 1980s and early 1990s assumed that usability was primarily a property of the presentation of information. Therefore, simply separating the presentation from the dialogue and application made it easy to modify that presentation after user testing. A more popular belief in the 1990s was that usability concerns greatly affected system functionality as well as the presentation. This emphasis took attention away from architectural support (beyond separation). Achieving the correct functionality for a given system became paramount. It is our observation that even if presentation and functionality of a system are well designed, the usability of a system can be greatly compromised if the underlying architecture does not support human concerns beyond modifiability. This paper will present a new role for\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "52\n", "authors": ["49"]}
{"title": "Bringing usability concerns to the design of software architecture\n", "abstract": " Software architects have techniques to deal with many quality attributes such as performance, reliability, and maintainability. Usability, however, has traditionally been concerned primarily with presentation and not been a concern of software architects beyond separating the user interface from the remainder of the application. In this paper, we introduce usability-supporting architectural patterns. Each pattern describes a usability concern that is not supported by separation alone. For each concern, a usability-supporting architectural pattern provides the forces from the characteristics of the task and environment, the human, and the state of the software to motivate an implementation independent solution cast in terms of the responsibilities that must be fulfilled to satisfy the forces. Furthermore, each pattern includes a sample solution implemented in the context of an overriding separation based pattern such\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "51\n", "authors": ["49"]}
{"title": "Applicability of general scenarios to the architecture tradeoff analysis method\n", "abstract": " The SE has been developing a list of scenarios to characterize quality attributes. The SEl has also been conducting Architecture Trade Off Analysis Method ATAM evaluations. One output of an ATAM evaluation is a collection ot scenarios that relate to quality attribute requirements for the specific system being evaluated. In this report, we compare the scenarios elicited from five ATAM evaluations with the scenarios used to characterize the quality attributes. This eftort was designed to validate the coverage of the existing set of general scenarios and to analyze trends in the risks uncovered in ATAM reports. Architecture Tradeoff Analysis Method and ATAM are service marks of Carnegie Mellon University.Descriptors:", "num_citations": "51\n", "authors": ["49"]}
{"title": "The value of a usability-supporting architectural pattern in software architecture design: a controlled experiment\n", "abstract": " Design patterns have been claimed to facilitate modification and improve understanding in software design. A controlled experiment was performed to assess the usefulness of portions of a Usability-Supporting Architectural Pattern (USAP) in modifying the design of software architectures to support a specific usability concern. Software engineering and information technology graduate students received different subsets of a USAP supporting cancellation functionality. They then studied a software architecture design and made modifications to add the ability to cancel commands. Results showed that participants who received a usability scenario, a list of general responsibilities, and a sample solution thought of significantly more key issues than participants who saw only the scenario. Implications for software development are that usability concerns can be included at architecture design time, and that USAPs can\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "50\n", "authors": ["49"]}
{"title": "Relating business goals to architecturally significant requirements for software systems\n", "abstract": " The primary purpose of the architecture for a software-reliant system is to satisfy the driving behavioral and quality attribute requirements. Quality attribute requirements tend to be poorly captured and poorly represented in requirements specifications, which focus on functionality. It is often up to the architects own initiative to capture the actual quality attribute requirements for a system under development. Quality attributes come about because of the business goals behind the system being developed. Business goals drive the conception, creation, and evolution of software-reliant systems. This report examines business goals from the point of view of the software architect. It presents a wide survey of business goal categories from the business literature and uses that survey to produce a classification of business goals. It introduces the concept of goal-subject the person or entity who owns the business goal and goal-object the person or entity that the goal is intended to benefit. Those concepts are essential to the structure of a business goal scenario--a systematic way to elicit and express business goals. Using the concept of a business goal scenario drives the Pedigreed Attribute eLicitation Method PALM, developed by the authors for eliciting architecturally significant business goals. The report illustrates how to use architecturally significant business goals to produce a set of derived quality attribute requirements that can then be vetted and elaborated with the appropriate goal-subjects and goal-objects. This approach has been vetted in two workshops and the method piloted in an industrial setting.Descriptors:", "num_citations": "45\n", "authors": ["49"]}
{"title": "Using arche in the classroom: One experience\n", "abstract": " The Architecture Expert ArchE tool serves as a software architecture design assistant. It embodies knowledge of quality attributes and the relation between the achievement of quality attribute requirements and architecture design. This technical note describes the use of a pre-alpha release of ArchE in a graduate-level software architecture class at Clemson University. ArchE was used to assist the students in the architecting process. The tool was then evaluated by the students and instructor. The instructor felt that ArchE met his objectives as a pedagogical tool. The students, although critical of the pre-alpha status of ArchE, were enthusiastic about the benefits of having the step-by-step guide to the architects designing process as provided by ArchE.Descriptors:", "num_citations": "38\n", "authors": ["49"]}
{"title": "Factors influencing industrial practices of software architecture evaluation: an empirical investigation\n", "abstract": " To support software architecture evaluation practices, several efforts have been made to provide a basis for comparing and assessing evaluation methods, document various best practices, and report the factors that may influence industrial practices. However, there has been no study to explore the experiences and perceptions of architects for determining the factors that influence architecture evaluation practices in a wide range of organizations. Hence, there is little empirically founded knowledge available on the factors that influence the industrial practices of software architecture evaluation. The goal of this paper is to report the results of an empirical study aimed at gaining an understanding of different factors involved in evaluating architectures in industry. The results of this study shed light on the factors that influence architecture evaluation practices based on the experiences and perception of\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "38\n", "authors": ["49"]}
{"title": "Second Product Line Practice Workshop Report\n", "abstract": " The second Software Engineering Institute Product Line Practice Workshop was a hands-on meeting held in November 1997 to share industry practices in software product lines and to explore the technical and non-technical issues involved. This report synthesizes the workshop presentations and discussions, which identified factors involved in product line practices and analyzed issues in the areas of software engineering, technical management, and enterprise management.", "num_citations": "34\n", "authors": ["49"]}
{"title": "Role of Cyclic AMP in the Control of Epidermal Cell Growth and Differentiation 1, 2\n", "abstract": " A model of epidermal growth control is presented, which seems to account for many ob-served facts, both old and new. It gives each epidermal cell a sphere of influence, with the ability to adjust its own proliferative capacity and that of its neighbors via the second messenger and morphogen, cyclic AMP. In this regard the intracellular lezels of cyclic AMP may not be under primary hormonal control but may be controlled by a specific local substance previously called a\" chalone.\" Until this supposedly tissue-specific, species-nonspecific molecule or series of molecules have been chemically purified from histologically pure epidermis, we suggest that the term\" chalone\" be reserved for the overall concept of epidermal autoregulation. In this way, modern chalone research can be integrated into the mainstream of the massive amount of investigation which is under way on the nature of growih control in cancer. In this presentation we discuss what in our view is a neglected but nonetheless excellent model of disturbed growth control\u0393\u00c7\u00f6ie, psoriasis. Psoriasis shares many features with cancer but psoriasis in itself never becomes malignant. An understanding of why psoriasis, a disease afflicting 6 million Americans, is not cancer and why cancer is not psoriasis would in all probability bring us much closer to an understanding of both disorders.\u0393\u00c7\u00f6Natl Cancer Inst Monogr 38: 47\u0393\u00c7\u00f459, 1973.", "num_citations": "34\n", "authors": ["49"]}
{"title": "Eliciting operations requirements for applications\n", "abstract": " The DevOps community advocates communication between the operations staff and the development staff as a means of ensuring that the developers understand the issues associated with operations. This paper argues that \u0393\u00c7\u00a3communication\u0393\u00c7\u00a5 is too vague and that there are a variety of specific and well known sources that developers can examine to determine requirements to support the installation and operations of an application product. These sources include standards, process descriptions, studies about sources of failure in configuration and upgrade, and models that include both product and process.", "num_citations": "31\n", "authors": ["49"]}
{"title": "On site wearable computer system\n", "abstract": " A wearable computer system designed for on site, hands free maintenance operations will be demonstrated. This system is the latest completed model in afamily of wearable computers developed by Carnegie Mellon University. It is approximately one and ahalf pounds in weight (including batteries), uses a 386 processor and a Private Eye display device. Also being demonstrated are components for the next iteration of the device. The system is designed to be used in a hands free operating mode by large vehicle maintenance personnel.", "num_citations": "30\n", "authors": ["49"]}
{"title": "A generalized user interface for applications programs (II)\n", "abstract": " A display-screen management system for user interaction with an arbitrary application program is simple enough so that the end user controls the dialogue and screens yet powerful enough to provide for user specification of screen geometry, input constraints, computation facilities, and display logic\u0393\u00c7\u00f6quite independently of the application system.", "num_citations": "30\n", "authors": ["49"]}
{"title": "Identifying aspects using architectural reasoning\n", "abstract": " Software architecture, which encompasses the structures of software systems, has emerged as a crucial part of the design process. A software architecture is developed as the first step toward designing a system with certain desired properties. A growing body of experience and evidence suggest that the dominant design drivers for any software architecture are its quality attribute requirements [3]. By quality attributes we mean such properties as reliability, security, usability, modifiability, performance, portability, etc. Quality attribute requirements articulate the important quality attributes for a system in system-specific characterizations. We are developing a method to derive a software architecture from its quality attribute requirements via insights gained from quality attribute models called architectural tactics. We believe that some of the discoveries that occur during the derivation process can be viewed as candidate aspects. In particular, the derivation process illuminates what we call architectural aspects. Architectural aspects come with architectural analogous advice, pointcuts, and join points. The architectural aspects are candidate aspects to be carried through detailed design and implemented using AOP.We describe this connection in a bottom-up fashion because we think it is helpful to see the concepts at work in a simple example before delving into the details of the method. So after we set the stage by introducing some new terminology, we begin with a small set of quality requirements for an example system, present a software architecture that satisfies those requirements, and highlight the architectural tactics at work in that architecture. We\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "28\n", "authors": ["49"]}
{"title": "A responsibility-based pattern language for usability-supporting architectural patterns\n", "abstract": " Usability-supporting architectural patterns (USAPs) were developed as a way to explicitly connect the needs of architecturally-sensitive usability concerns to the design of software architecture. In laboratory studies, the Cancellation USAP was shown to significantly improve the quality of architecture designs for supporting the ability to cancel a long-running command, sparking interest from a large industrial organization to develop new USAPs and apply them to their product line architecture design. The challenges of delivering the architectural information contained in USAPs to practicing software architects led to the development of a pattern language for USAPs based on software responsibilities and a web-based tool for evaluating an architecture with respect to those patterns.", "num_citations": "27\n", "authors": ["49"]}
{"title": "The business goals viewpoint\n", "abstract": " A business goals viewpoint can help capture precise, unambiguous business goals, which in turn helps architects design systems that are more responsive to organizational needs. There are reasons other than cost reduction for improving business processes. A business goal expresses why a system is being developed at all, and what stakeholders in the developing organization, the customer organization, and beyond aspire to achieve through its production and use.", "num_citations": "26\n", "authors": ["49"]}
{"title": "A practical method for documenting software architectures\n", "abstract": " A practical approach for documenting software architectures is presented. The approach is based on the well-known architectural concept of views, and holds that documentation consists of documenting the relevant views and then documenting the information that applies to more than one view. Views can be usefully grouped into viewtypes, corresponding to the three broad ways an architect must think about a system: as a set of implementation units, as a set of runtime elements interacting to carry out the system\u0393\u00c7\u00d6s work, and as a set of elements existing in and relating to external structures in its environment. A simple three-step procedure for choosing the relevant views to document is given, and applied to the problem of documentation for a large, complex NASA system.", "num_citations": "26\n", "authors": ["49"]}
{"title": "Experience using an expert system to assist an architect in designing for modifiability\n", "abstract": " ArchE (Architecture Expert) is an rule based system that contains a model of modifiability. The model plus modifiability scenarios that characterize expected change enable ArchE to collaborate with an architect to produce a design of the architecture that supports the expected change. ArchE has been used with real requirements from a manufacturer. This paper describes the model used in ArchE and how the architect and ArchE interact in order to produce a design.", "num_citations": "25\n", "authors": ["49"]}
{"title": "Rollup: Non-disruptive rolling upgrade with fast consensus-based dynamic reconfigurations\n", "abstract": " Rolling upgrade consists of upgrading progressively the servers of a distributed system to reduce service downtime.Upgrading a subset of servers requires a well-engineered cluster membership protocol to maintain, in the meantime, the availability of the system state. Existing cluster membership reconfigurations, like CoreOS etcd, rely on a primary not only for reconfiguration but also for storing information. At any moment, there can be at most one primary, whose replacement induces disruption. We propose Rollup, a non-disruptive rolling upgrade protocol with a fast consensus-based reconfiguration. Rollup relies on a candidate leader only for the reconfiguration and scalable biquorums for service requests. While Rollup implements a non-disruptive cluster membership protocol, it does not offer a full-fledged coordination service. We analyzed Rollup theoretically and experimentally on an isolated network of 26\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "24\n", "authors": ["49"]}
{"title": "Structural modeling: An application framework and development process for flight simulators\n", "abstract": " In this paper, we present the structural modeling approach, an application framework and development process for the construction of flight simulators. Structural modeling was developed to address functional, nonfunctional, and process requirements for flight simulators. It has been successfully use in the development of large scale one million lines of Ada code flight simulators for the United States Air Force. A structural model promotes a simple and coherent software architecture with a small number of specialized structural elements obeying a few system-wide coordination strategies. It is this simplicity coherence of the software architecture that enables analysis to demonstrate the quality of the system.Descriptors:", "num_citations": "24\n", "authors": ["49"]}
{"title": "Using business goals to inform a software architecture\n", "abstract": " Requirements specifications seldom allow software and system architects to understand the business goals for a system. Architects need that information in order to design an appropriate architecture for the problem at hand. In this paper, we present a lightweight method based on goal oriented requirements engineering that begins with a canonical list of business goals and elicits specific business goals from the perspective of various stakeholders. It then interprets those business goals in terms of the quality attribute requirements that are so important to software architectures. Experience with using this method for a Boeing Air Transport System is presented.", "num_citations": "23\n", "authors": ["49"]}
{"title": "Analysis of architecture evaluation data\n", "abstract": " The output of 18 software architecture evaluations is analyzed. The goal of the analysis is to find patterns in the important quality attributes and risk themes identified in the evaluations. The major results are\u0393\u00c7\u00f3A categorization of risk themes.\u0393\u00c7\u00f3The observation that twice as many risk themes are risks of \u0393\u00c7\u00a3omission\u0393\u00c7\u00a5 as are risks of \u0393\u00c7\u00a3commission\u0393\u00c7\u00a5.\u0393\u00c7\u00f3A failure to find a relationship between the business and mission goals of a system and the risk themes from an evaluation of that system.\u0393\u00c7\u00f3A failure to find a correlation between the domain of a system being evaluated and the important quality attributes for that system.\u0393\u00c7\u00f3A wide diversity of names used for various quality attributes.The results of this investigation have application to practitioners by suggesting activities on which developers should put greater focus. They also have application to researchers by suggesting further areas of investigation.", "num_citations": "23\n", "authors": ["49"]}
{"title": "Usability-supporting architectural patterns\n", "abstract": " Software architects have techniques to deal with many quality attributes such as performance, reliability, and maintainability. Usability, however, has traditionally been concerned primarily with presentation and not been a concern of software architects beyond separating the user interface from the remainder of the application. In this paper, we present usability-supporting architectural patterns. Each pattern describes a usability concern that is not supported by separation alone. For each concern, a usability-supporting architectural pattern provides the forces from the characteristics of the task and environment, the human, and the state of the software to motivate an implementation independent solution cast in terms of the responsibilities that must be fulfilled to satisfy the forces. Furthermore, each pattern includes a sample solution implemented in the context of an overriding separation based pattern such as J2EE\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "23\n", "authors": ["49"]}
{"title": "Moving from Quality Attribute Requirements to Architectural Decisions.\n", "abstract": " Quality attribute models are proposed as the linkage between a specification of a quality attribute requirement and a design fragment that is focused on achieving that requirement. Each quality attribute model has a collection of parameters that must be specified in order to determine from the model whether a requirement will be met. These parameters can be bound through design decisions, through values given from a quality requirement, or through knowledge of the designer. Architectural tactics are designed to relate design decisions to control of a quality attribute model parameter in order to achieve particular responses. In this paper, we present a series of steps that enable moving from a single quality attribute requirement to a design fragment focused on achieving that requirement. We demonstrate these steps through application to an embedded system.", "num_citations": "23\n", "authors": ["49"]}
{"title": "Third Product Line Practice Workshop Report.\n", "abstract": " The Third Software Engineering Institute Product Line Practice Workshop was a hands-on meeting held in December 1998 to share industry practices in software product lines, to explore the technical and non-technical issues involved, and to evolve the SEl Product Line Practice Framework. This report synthesizes the workshop presentations and discussions, which described product line practices and analyzed issues in the areas of software engineering, technical management, and organizational management.Descriptors:", "num_citations": "23\n", "authors": ["49"]}
{"title": "A generalized user interface for applications programs\n", "abstract": " A general method for using disk files (instead of a more conventional parameter-passing mechanism) to transfer control information from a user interface to a set of related applications programs is described. This technique effectively moves much of the user interface, including command decoding and limited parameter checking, from the applications programs to a table-driven executive.", "num_citations": "22\n", "authors": ["49"]}
{"title": "Composing patterns to construct secure systems\n", "abstract": " Building secure applications requires significant expertise. Secure platforms and security patterns have been proposed to alleviate this problem. However, correctly applying patterns to use platform features is still highly expertise-dependent. Patterns are informal and there is a gap between them and platform features. We propose the concept of reusable verified design fragments, which package security patterns and platform features and are verified to provide assurance about their security properties. Design fragments can be composed through four primitive tactics. The verification of the composed design against desired security properties is presented in an assurance case. We demonstrate our approach by securing a Continuous Deployment pipeline and show that the tactics are sufficient to compose design fragments into a secure system. Finally, we formally define composition tactics, which are intended to\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "21\n", "authors": ["49"]}
{"title": "Discovering and visualizing operations processes with pod-discovery and pod-viz\n", "abstract": " Understanding the behavior of an operations process and capturing it as an abstract process model has been shown to improve dependability significantly [1]. In particular, process context can be used for error detection, diagnosis, and even automated recovery. Creating the process model is an essential step in determining process context and, consequently, improving dependability. This paper describes two systems. The first, POD-Discovery, simplifies the creation of such an abstract process model from operations logs. An activity that previously required many manual steps can now be done largely automatically and in minutes. Using the discovered model, the second system, POD-Viz, provides operators with the ability to visualize the current state of an operations process in near-real-time and to replay a set of events to understand how the process context changed over time. This allows operators to trace the\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "21\n", "authors": ["49"]}
{"title": "On open and collaborative software development in the DoD\n", "abstract": " The US Department of Defense specifically, but not limited to, the DoD CIOs Clarifying Guidance Regarding Open Source Software, DISAs launch of Forge. mil and OSDs Open Technology Development Roadmap Plan has called for the increased use of open source software and the adoption of best practices from the freeopen source software FOSS community to foster greater reuse and innovation among programs in the DoD. In this paper, the authors examine some key aspects of open and collaborative software development inspired by the success of the FOSS movement as it might manifest itself within the US DoD. The examination is made from two perspectives the reuse potential among DoD programs sharing software and the incentives, strategies, and policies that will be required to foster a culture of collaboration needed to achieve the benefits indicative of FOSS. To achieve predictable and expected reuse two things are needed technical infrastructures, and a shift to business practices in the software development and delivery patterns of the traditional acquisition life cycle. Thus, there is potential to overcome the challenges discussed in this paper and engender a culture of openness and community collaboration to support the DoD mission. The presentation includes 17 briefing charts.Descriptors:", "num_citations": "21\n", "authors": ["49"]}
{"title": "Cloud application HA using SDN to ensure QoS\n", "abstract": " Users expect cloud applications to be highly available with minimum service disruption. Some of the cloud applications also have Quality of Service (QoS) requirements. The High Availability (HA) module needs to consider QoS requirements while placing or failing over the application, application's components and its replicas. In this paper we propose a new QoS module in the SDN controller. This module creates QoS queues with certain minimum bandwidth on Open Flow based switches on the route between components requiring certain minimum network bandwidth. Our approach is similar to 'Aggregation of RSVP for IPv4 and IPv6 Reservations' (RFC 3175). DiffServ based approaches reserve bandwidth for an entire class of flows and do not cater for requirements from individual applications. Our approach reserves bandwidth on a per-flow basis while overcoming the well-known scalability problem of IntServ\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "20\n", "authors": ["49"]}
{"title": "Is there a wearable computer in your future?\n", "abstract": " Wearable computers are beginning to appear in research environments and soon will be commercially available. We present several different philosophies behind wearable computers and then focus on a particular project at Carnegie Mellon University involving the development of a wearable designed for on-site maintenance of large vehicles. This computer is discussed in terms of its projected use (both solo and collaborative), its development process (rapid), and its physical characteristics. The paper concludes by discussing some implications of wearable computers on current user-interface evaluation techniques, on user-interface development environments, and on models for cooperative work.", "num_citations": "20\n", "authors": ["49"]}
{"title": "A Construct for Describing Software Development Risks (CMU/SEI-94-TR-14\n", "abstract": " The ideas and findings in this report should not be construed as an official DoD position. It is published in the interest of scientific and technical information exchange. FOR THE COMMANDER (signature on file)", "num_citations": "20\n", "authors": ["49"]}
{"title": "Making real time data analytics available as a service\n", "abstract": " Conducting (big) data analytics in an organization is not just about using a processing framework (eg Hadoop/Spark) to learn a model from data currently in a single file system (eg HDFS). We frequently need to pipeline real time data from other systems into the processing framework, and continually update the learned model. The processing frameworks need to be easily invokable for different purposes to produce different models. The model and the subsequent model updates need to be integrated with a product that may require a real time prediction using the latest trained model. All these need to be shared among different teams in the organization for different data analytics purposes. In this paper, we propose a real time data-analytics-as-service architecture that uses RESTful web services to wrap and integrate data services, dynamic model training services (supported by big data processing framework\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "19\n", "authors": ["49"]}
{"title": "Capturing and using rationale for a software architecture\n", "abstract": " Documentation of design rationale acts as the collective memory for a system. A special case of design, and therefore of design rationale, is found by considering the set of design decisions that constitute a system\u0393\u00c7\u00d6s software architecture. This chapter discusses the special role of architecture in design and the kinds of rationale that are important to capture. We discuss capturing and structuring rationale using two different graphs (the causal graph and the structural graph) in order to facilitate its (possibly automated) recovery and use in question\u0393\u00c7\u00f4answering later in the life cycle. The information collected in these structures can be used manually (especially in the case of documentation) or as the basis for an automatic search to determine the answers to common questions asked of architectural design rationale such as how a requirement has been satisfied and what are the implications of a proposed modification\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "19\n", "authors": ["49"]}
{"title": "Constructing superior software\n", "abstract": " This is a book about constructing high-quality software systems. Achieving high product quality, while at the same time meeting time-to-market and cost goals, has emerged as a critical priority for software development companies because quality is often the greatest, most visible product differentiator. Quality means a satisfied customer community, increased market share, and a solid basis from which to launch new product initiatives.Our emphasis on quality is no accident, because this is the first book in a series produced by the Software Quality Institute (SQI) at the University of Texas at Austin. The books will discuss high-leverage problems and offer strategies for improving software quality and software business practices. They will be written by experienced practitioners who understand and can help solve the problems facing real-life software professionals. This flagship book in the SQI series was cooperatively written by members of the editorial board overseeing the series.(And we have also invited a few others to join us as well.) As such, it offers a unique combined perspective on what some of the finest and most practical writers of software engineering today consider keys to producing quality products.", "num_citations": "19\n", "authors": ["49"]}
{"title": "Incorporating uncertainty into in-cloud application deployment decisions for availability\n", "abstract": " Cloud consumers have a variety of deployment related techniques, such as auto-scaling policies and recovery strategies, for dealing with the uncertainties in the cloud. Uncertainties can be characterized as stochastic (such as failures, disasters, and workload spikes) and subjective (such as choice among various deployment options). Cloud consumers must consider both stochastic and subjective uncertainties. Analytic support for consumers in selecting appropriate techniques and setting the required parameters in the face of different types of uncertainty is currently limited. In this paper, we propose a set of application availability analysis models that capture subjective uncertainties in addition to stochastic uncertainties. We built and validated the models by using industry best practices on deployment, and actual commercial products for disaster recovery and live migration. Our results show that the models permit\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "18\n", "authors": ["49"]}
{"title": "Issues in wearable computing: A CHI 97 workshop\n", "abstract": " Finding meaning. in d1is st: uemem wa $ rhe purpose of a two day work~ hop on wearable computers organized by c. he four authors of this paper. at C HI 97 in Morch, 1997. The workshop was attended by 37 pcoplt represcnring 2l diffc: renr org~ nizations. 11le anendecs an: li. sc \u252c\u00bdl in the Appendix. This while paper is a reporr on 1har workshop.", "num_citations": "18\n", "authors": ["49"]}
{"title": "MEMS: a method for evaluating middleware architectures\n", "abstract": " Middleware architectures play a crucial role in determining the overall quality of many distributed applications. Systematic evaluation methods for middleware architectures are therefore important to thoroughly assess the impact of design decisions on quality goals. This paper presents MEMS, a scenario-based evaluation approach. MEMS provides a principled way of evaluating middleware architectures by leveraging generic qualitative and quantitative evaluation techniques such as prototyping, testing, rating, and analysis. It measures middleware architectures by rating multiple quality attributes, and the outputs aid the determination of the suitability of alternative middleware architectures to meet an application\u0393\u00c7\u00d6s quality goals. MEMS also benefits middleware development by uncovering potential problems at early stage, making it cheaper and quicker to fix design problems. The paper describes a case\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "17\n", "authors": ["49"]}
{"title": "Security and survivability reasoning frameworks and architectural design tactics\n", "abstract": " The Software Engineering Institute SEI has been investigating disciplined software architecture design for several years. The SEI approach includes a collection of quality attribute reasoning frameworks that understand both quality attribute reasoning and how architects design for the quality attribute under particular situations. The approach was first applied to the quality attributes of modifiability and performance. This report is an initial attempt to use the same method for the related quality attributes of security and survivability. The report includes an initial organization of security within the framework, a partial explication of elements ofDescriptors:", "num_citations": "17\n", "authors": ["49"]}
{"title": "Constructing wearable computers for maintenance applications\n", "abstract": " The maintenance of large vehicles (airplanes, trains, and tractors) provides difficult problems for computing devices due both to environmental and human factors. The environment has extremes of temperature and light, dirt and grease are common, and tools such as computers must be very robust. The technicians who perform the maintenance must have the mobility to move around, over, under, and inside the vehicle and must have their hands free much of the time. Maintenance is an activity that is performed both solo and with collaboration and the individuals who perform it tend to have little computer sophistication.ABSTRACT", "num_citations": "17\n", "authors": ["49"]}
{"title": "An approach to user specification of interactive display interfaces\n", "abstract": " Forms have become widely used as a user interface for database systems. By analyzing the components of forms, a unified treatment of aggregation operators, headings, subheadings, and internal logic of a form is possible. In this paper we present a theory and a system based on that theory which allows users to easily specify displays. Displays are composed of components and the user can specify geometry of the components and grouping relationships between the components which allow for the generation of the desired display.", "num_citations": "17\n", "authors": ["49"]}
{"title": "Hierarchies based on computational complexity and irregularities of class determining measured sets (Preliminary Report)\n", "abstract": " We consider here the problem of building transfinite hierarchies of computable functions on the basis of their difficulty of computation. Previous hierarchies of functions through the constructive ordinals have had two major problems, each apparently caused by not having techniques to restrict the classes considered at limit ordinals. These problems are, first that every function occurs at some name for \u2567\u00eb, or some other small ordinal, and second that two names for the same constructive ordinal have two different classes of functions associated with them.", "num_citations": "17\n", "authors": ["49"]}
{"title": "Understanding the context of architecture evaluation methods\n", "abstract": " This paper analyzes several industrial software architecture evaluation methods from the perspective of their contextual elements. Contextual elements include the time available for the evaluation, the personnel available, the openness of the results, the involvement of stakeholders, and so forth. The goal of this analysis is to inform managers and technical personnel about the possibilities for an architecture evaluation method given their particular context.", "num_citations": "16\n", "authors": ["49"]}
{"title": "Communication across the HCI/SE divide: ISO 13407 and the Rational Unified Process\n", "abstract": " Human-computer interaction practitioners and software engineers must work together to develop useful and usable systems. Although both groups learn techniques for product development activities like requirements generation, high-level and detailed design, and testing, the traditional outputs of these techniques may not make effective contact with the results of the other group or the needs of the project as a whole. We examine the products of different activities in software development to explore whether information flow from one group to the other has natural points of contact or if gaps exist. We use ISO 13407 as an example of a human-centred development process and the Rational Unified Process\u252c\u00ab as an example of a software engineering process.", "num_citations": "16\n", "authors": ["49"]}
{"title": "An Application of the Architecture-Based Design Method to the Electronic House\n", "abstract": " The Architecture-Based Design ABD Method is a method for designing the software architecture of a product line of systems. It has previously been described in the technical report, The Architecture Based Design Method CMUSEI-2000-TR-001 Bachmann 00. This report elaborates an example of the application of this method to designing the software architecture. The example is the house of the future. The house of the future is assumed to have a collection of devices within the house that are controlled by a computer network. Entertainment, security, heatingair conditioning, and utility devices will all interoperate and will be controlled from a central network. The software architecture to support the house must be extendible and flexible, and it must have high security, high performance, and high availability. In this report, we present a first-level decomposition of the software architecture as a demonstration of the ABD Method.Descriptors:", "num_citations": "15\n", "authors": ["49"]}
{"title": "Using an architecture reasoning tool to teach software architecture\n", "abstract": " The Architecture Expert (ArchE) is a software architecture design assistant under development at the Software Engineering Institute (SEI). It embodies knowledge of quality attributes and the relation between the achievement of quality attribute requirements and architecture design. In this paper, we describe the use of ArchE in a graduate level software architecture class at Clemson University. The discussion combines aspects of using ArchE as a tool to produce architectures and using ArchE to teach about architecting. The students were positive about the use of ArchE although critical of ArchE's immaturity. The instructor was also positive about the use of ArchE.", "num_citations": "14\n", "authors": ["49"]}
{"title": "Achieving usability through software architectural styles\n", "abstract": " Design decisions at the architecture level can have far-reaching effects on the qualities of a computer system. Recent developments in software engineering link architectural styles to quality attribute analysis techniques to predict the effects of architectural design decisions on the eventual manifestation of quality. An Attribute-Based Architecture Style (ABAS) is a structured description of a particular software quality attribute, a particular architectural style, and the relevant qualitative and quantitative analysis techniques. Thus, it is a description that is meaningful to software engineers as they design or analyze proposed software architectures. We are producing a collection of ABASs that speak to the usability quality attribute. These ABASs will enable software engineers make early architectural design decisions that achieve specific usability functions.", "num_citations": "14\n", "authors": ["49"]}
{"title": "Crying wolf and meaning it: Reducing false alarms in monitoring of sporadic operations through pod-monitor\n", "abstract": " When monitoring complex applications in cloud systems, a difficult problem for operators is receiving false positive alarms. This becomes worse when the system is sporadically being changed and upgraded due to the emerging continuous deployment practice. Other legitimate but sporadic maintenance operations, such as log compression, garbage collection and data reconstruction in distributed systems can also trigger false alarms. Consequently, traditional baseline-based anomaly detection and monitoring is less effective. A normal but dangerous practice is to turn off normal monitoring during sporadic operations such as upgrade and maintenance. In this paper, we report on the use of the process context information of sporadic operations to suppress false positive alarms. We use the context information both directly and in machine learning. Our experimental evaluation shows that 1) using process context\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "13\n", "authors": ["49"]}
{"title": "Preparing Usability Supporting Architectural Patterns for Industrial Use.\n", "abstract": " Usability supporting architectural patterns (USAPs) have been shown to provide developers with useful guidance for producing a software architecture design that supports usability in a laboratory setting [7]. In close collaboration between researchers and software developers in the real world, the concepts were proven useful [2]. However, this process does not scale to industrial development efforts. In particular, development teams need to be able to use USAPs while being distributed world-wide. USAPs also must support legacy or already partially-designed architectures, and when using multiple USAPs there could be a potentially overwhelming amount of information given to the software architects. In this paper, we describe the restructuring of USAPs using a pattern language to simplify the development and use of multiple USAPs. We also describe a delivery mechanism that is suitable for industrial-scale adoption of USAPs. The delivery mechanism involves organizing responsibilities into a hierarchy, utilizing a checklist to ensure responsibilities have been considered, and grouping responsibilities in a fashion that both supports use of multiple USAPs simultaneously and also points out reuse possibilities to the architect.", "num_citations": "13\n", "authors": ["49"]}
{"title": "Encapsulating quality attribute knowledge\n", "abstract": " This paper presents a technique developed at the Software Engineering Institute (SEI) for encapsulating quality attribute knowledge for use in the design and validation of software architectures. A reasoning framework, our encapsulation mechanism, can be used by nonexperts to analyze a specific quality (e.g., performance, modifiability, availability) of a system.", "num_citations": "13\n", "authors": ["49"]}
{"title": "On site maintenance using a wearable computer system\n", "abstract": " This poster displays a vision of the future of vehicle maintenance. This future includes a wearable computer system that can be operated with the mechanics\u0393\u00c7\u00d6 hands free. The computer system will provide necessary information to solve maintenance tasks and to communicate with collaborators. The ability to support both solo and collaborative maintenance activity, especially trouble shooting and the ability to effectively deliver light weight, hands free information access will be achieved through improvements in both technology and HCI. The poster displays the current state, avision of the future and identifies the HCI and technological improvements necessary to achieve this future state of vehicle maintenance.", "num_citations": "13\n", "authors": ["49"]}
{"title": "User-interface development tools\n", "abstract": " A brief description is given of three approaches to user-interface development: tool kits, user-interface management systems (UIMS), and interactive design tools. Six selected tools are then introduced, in separate presentations, by their originating organization. They provide a cross-section of work in progress today. The tools selected represent a combination of traditional UIMs and new interactive design tools, although they all call themselves UIMs. The tools covered are: UIMX; Jam; Speedcode Universe; Serpent; Framer; and Mode.< >", "num_citations": "13\n", "authors": ["49"]}
{"title": "Engineering for HCI\n", "abstract": " The volume contains all papers presented at the Working Conference on Engineering for Human-Computer Interaction (EHCI'95), grouped into the topic areas Formal Methods, Tools, Multimedia, Architecture, CSCW, and Design. It includes transcripts of all discussions among the presenters and the conference participants. It further contains the results of several mini-workshops held during the conference on topics like the Human Context, How to make Formal Methods Useful, Rapid Implementation and Development, Usability Testing, CSCW Mini Scenarios.", "num_citations": "12\n", "authors": ["49"]}
{"title": "Formal specifications better than function points for code sizing\n", "abstract": " Size and effort estimation is a significant challenge for the management of large-scale formal verification projects. We report on an initial study of relationships between the sizes of artefacts from the development of seL4, a formally-verified embedded systems microkernel. For each API function we first determined its COSMIC Function Point (CFP) count (based on the seL4 user manual), then sliced the formal specifications and source code, and performed a normalised line count on these artefact slices. We found strong and significant relationships between the sizes of the artefact slices, but no significant relationships between them and the CFP counts. Our finding that CFP is poorly correlated with lines of code is based on just one system, but is largely consistent with prior literature. We find CFP is also poorly correlated with the size of formal specifications. Nonetheless, lines of formal specification correlate with\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "12\n", "authors": ["49"]}
{"title": "Principles for designing software architecture to achieve quality attribute requirements\n", "abstract": " Summary form only given. In this article, the author describes the principles involved in the design of software architecture. The premise is that the design of software architecture is determined by the quality attributes requirements for a system. The quality attributes that we have focused on are: availability, modifiability, performance, security, and usability. The author discusses why quality attributes are important, how to specify quality attribute requirements in a common form, design primitives to support the achievement of each quality attribute and how these can be applied to the design and evaluation of software architectures", "num_citations": "12\n", "authors": ["49"]}
{"title": "Quality vs. quantity: Comparing evaluation methods in a usability-Focused Software architecture modification task\n", "abstract": " A controlled experiment was performed to assess the usefulness of portions of a usability-supporting architectural pattern (USAP) in modifying the design of software architectures to support a specific usability concern. Results showed that participants using a complete USAP produced modified designs of significantly higher quality than participants using only a usability scenario. Comparison of solution quality ratings with a quantitative measure of responsibilities considered in the solution showed positive correlation between the measures. Implications for software development are that usability concerns can be included at architecture design time, and that USAPs can significantly help software architects to produce better designs to address usability concerns. Implications for empirical software engineering are that validated quantitative measures of software architecture quality may potentially be substituted for\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "12\n", "authors": ["49"]}
{"title": "Applying general usability scenarios to the design of the software architecture of a collaborative workspace\n", "abstract": " Architecturally-sensitive usability scenarios are important usability concerns that require early consideration in software design so that architectural support can render them easy and cost-effective to implement. Examples include providing the ability to cancel a command, undo commands, aggregate data, etc. This chapter reports on our experiences applying these scenarios to the design of MERBoard, a wall-sized interactive system developed by NASA to assist Mars Rover science teams with collaborative data analysis. We applied the scenarios during a major redesign of the software architecture that introduced usability as a valued quality attribute. In the process, we found that the scenarios were well-received by developers who readily understood how they related to MERBoard, that they applied to a collaborative workspace despite having been initially developed for a single-user desktop system, that they had a real impact on the architecture redesign, and that the scenario consideration process was quick and not too onerous for any of the team members.", "num_citations": "12\n", "authors": ["49"]}
{"title": "Supporting the CANCEL command through software architecture\n", "abstract": " A system that supports the users ability to cancel a command should be designed to achieve particular results. These results include the responses the system should make to the user, such as providing feedback to the user about the commands receipt, predicting the time the cancellation should take for long-running cancellations, and indicating the state to which the system was returned after the completion of the cancellation. To support a cancellation command, a system should be designed so that the command is handled on a thread separate from that of the command being cancelled, the resources being used by the command being cancelled should be freed, and any processes collaborating with the command being cancelled should be informed of the cancellation. This note details the responsibilities that a system must implement to support command cancellation.Descriptors:", "num_citations": "11\n", "authors": ["49"]}
{"title": "Chronic granulomatous disease of childhood: Superficial pyoderma as a major dermatologic manifestation\n", "abstract": " A patient had chronic granulomatous disease of childhood (CGD) with an indolent superficial pyoderma. Sixty-three of 92 cases (68%) of CGD in the world literature were associated with some form of superficial pustular dermatosis including impetigo, infected seborrheic dermatitis, and infectious eczematoid dermatitis. Thirty-three (35%) of these cases exhibited pyoderma as the sole initial manifestation of the disease. The importance of chronic, indolent, superficial pyoderma as an early manifestation of CGD is discussed in relation to therapy, follow-up, and genetic counseling.", "num_citations": "11\n", "authors": ["49"]}
{"title": "Making variability decisions during architecture design\n", "abstract": " Two different models for variability are used to enable selections among various architectural choices to achieve variability. A cost model is used to justify and rationalize choices among architectural mechanisms intended to defer the binding time. A dependency model is used to justify and rationalize architectural choices intended to keep a variability from affecting more than the necessary number of modules.", "num_citations": "10\n", "authors": ["49"]}
{"title": "Software architecture design principles\n", "abstract": " Software architecture design principles | Component-based software engineering ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksComponent-based software engineering: putting the pieces togetherSoftware architecture design principles chapter Software architecture design principles Share on Author: Len J Bass profile image Len Bass View Profile Authors Info & Affiliations Publication: Component-based software engineering: putting the pieces togetherJune 2001 Pages 389\u0393\u00c7\u00f4403 0citation 0 Downloads Metrics Total Citations0 Total Downloads0 Last 12 Months0 Last 6 weeks0 Get Citation Alerts New Citation Alert added! This \u0393\u00c7\u00aa", "num_citations": "10\n", "authors": ["49"]}
{"title": "Dynamic software science with applications\n", "abstract": " Two disciplines have been developed during the past few years for the study of computer software. Software physics has as its purpose the analysis of execution characteristics of programs. Basic measures of software work, time, and shortage occupancy are used to derive measures such as power, capacity usage, and storage work, with applications to the choice of processor and device speeds. Software science is related to information theory. Occurrences of operators and operands in the text of programs are counted to provide measures for a number of relationships; among them are estimates for program length, program and language level, and programming time.", "num_citations": "10\n", "authors": ["49"]}
{"title": "Error diagnosis of cloud application operation using bayesian networks and online optimisation\n", "abstract": " Operations such as upgrade or redeployment are an important cause of system outages. Diagnosing such errors at runtime poses significant challenges. In this paper, we propose an error diagnosis approach using Bayesian Networks. Each node in the network captures the potential (root) causes of operational errors and its probability under different operational contexts. Once an operational error is detected, our diagnosis algorithm chooses a starting node, traverses the Bayesian Network and performs assertion checking associated with each node to confirm the error, retrieve further information and update the belief network. The next node in the network to check is selected through an online optimisation that minimises the overall availability risk considering diagnosis time and fault consequence. Our experiments show that the technique minimises the risk of faults significantly compared to other approaches in\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "9\n", "authors": ["49"]}
{"title": "Application level HA and QoS using SDN\n", "abstract": " Users expect cloud applications to be highly available with minimum service disruption. Most of the current systems use High Availability (HA) solutions that detect host and Virtual Machine (VM) failures. These solutions don\u0393\u00c7\u00d6t detect the failure of applications running inside the VMs. Detection of application failure is critical for stateful applications. Some applications come with their own HA logic to handle application failures. There are some systems which provide system level HA to detect application failures. These system level solutions are very generic in nature and don\u0393\u00c7\u00d6t cater to individual application\u0393\u00c7\u00d6s requirements. Different applications have different HA requirements and the overall HA solution need to cater to these individual applications\u0393\u00c7\u00d6 HA requirements. Some of the cloud applications also have Quality of Service (QoS) requirements. The High Availability (HA) module needs to consider QoS requirements\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "9\n", "authors": ["49"]}
{"title": "Business goals as architectural knowledge\n", "abstract": " In this paper we argue that business goals constitute an important type of architectural knowledge. Quality attributes are often the primary drivers (shaping forces) behind an architecture, but quality attributes derive from an organization's business goals, whether the organization is the one developing or acquiring the software system. We introduce a seven-part scenario format for capturing and articulating business goals, and a set of\" standard\" business goal categories. Finally, we introduce a method to help an architect elicit business goals and tie them to quality attribute requirements, adding to the architect's store of architectural knowledge.", "num_citations": "9\n", "authors": ["49"]}
{"title": "Evaluaci\u251c\u2502n de un modelo hidrol\u251c\u2502gico semi distribuido para la estimaci\u251c\u2502n de la escorrent\u251c\u00a1a de deshielo en el r\u251c\u00a1o Juncal\n", "abstract": " La modelaci\u251c\u2502n hidrol\u251c\u2502gica actualmente est\u251c\u00ed siendo usada como una herramienta para estudiar c\u251c\u2502mo los escenarios clim\u251c\u00edticos futuros impactan en los recursos h\u251c\u00a1dricos. En Chile, uno de los modelos que m\u251c\u00eds se ha usado es WEAP, un modelo conceptual que incluye un algoritmo de nieves simple, el cual ha sido utilizado exitosamente para modelar cuencas de r\u251c\u2310gimen nival o nivo-pluvial. El objetivo principal de este trabajo es estudiar los procesos que ocurren dentro de una cuenca de alta monta\u251c\u2592a utilizando WEAP. La cuenca elegida fue la del r\u251c\u00a1o Juncal, afluente del r\u251c\u00a1o Aconcagua. Con una elevaci\u251c\u2502n media cercana a los 3500 msnm y una altura m\u251c\u00edxima de 5900 msnm, esta cuenca representa un interesante caso de estudio para evaluar la eficiencia de WEAP al modelar nieves y escorrent\u251c\u00a1a de cuencas en las que el caudal corresponde en casi su totalidad a deshielos.  El modelo se calibr\u251c\u2502 a escala mensual y diaria. Los resultados muestran un buen ajuste tanto del caudal como de la cobertura nival observada al compararla con im\u251c\u00edgenes satelitales MODIS. Se tuvieron problemas de modelaci\u251c\u2502n a a\u251c\u2592os correspondientes a episodios Ni\u251c\u2592o c\u251c\u00edlidos, en los que el modelo sobreestim\u251c\u2502 el volumen de deshielo y para ciertos a\u251c\u2592os secos en que \u251c\u2310ste fue subestimado. Los escenarios clim\u251c\u00edticos de 1, 2, 5 y 10\u252c\u2591C de aumento de temperatura muestran un adelantamiento de los caudales de deshielo (3 meses de adelanto en el caudal peak para el escenario m\u251c\u00eds desfavorable) y un leve aumento de los caudales de invierno para los primeros dos escenarios, mientras que para 5 y 10\u252c\u2591C se obtuvo un importante aumento de la escorrent\u251c\u00a1a durante\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "9\n", "authors": ["49"]}
{"title": "Supporting usability in product line architectures\n", "abstract": " This paper addresses the problem of supporting usability in the early stages of a product line architecture design. The product line used as an example is intended to support a variety of different products each with a radically different user interface. The development cycles for new products varies between three years and five years and usability is valued as an important quality attribute for each product in the line.Traditionally, usability is achieved in a product by designing according to specific usability guidelines, and then performing user tests. User interface design can be performed separately from software architecture design and prototyping, but user tests cannot be performed before detailed UI design and prototyping. If the user tests discover usability problems leading to required architectural changes, the company would not know about this until two years after the architecture design was complete. This problem was addressed by identifying a collection of 19 well known usability scenarios that require architectural support. In our example, the stakeholders for the product line prioritized three of these scenarios as key product-line scenarios for improving usability. For each of these three chosen product-line scenarios we developed an architectural responsibility pattern that provided support for the scenario. The responsibilities are expressed in terms of architectural requirements with implementation details and rationales. The responsibilities were embodied in a web based tool for the architects.", "num_citations": "9\n", "authors": ["49"]}
{"title": "Logging events crossing architectural boundaries\n", "abstract": " We describe an approach to study the long-term use of GUI applications that supplements a log of low-level events with additional data gathered at the applications\u0393\u00c7\u00d6 architectural boundaries. We implement a preliminary system based on this approach and apply it to two applications. For the second application, we compare the data collected with our technique to data collected with manual instrumentation. We demonstrate that our technique is easy to apply to new applications and captures information missed by manual instrumentation. This additional information is helpful in answering questions about the use of the application. However, our technique generates large logs and does not yet capture all of the information needed to study the use of applications. We conclude with proposals for rectifying these deficiencies in future systems.", "num_citations": "9\n", "authors": ["49"]}
{"title": "Architectures for interactive software systems: rationale and design\n", "abstract": " Architectures for interactive software systems | User interface software ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksUser interface softwareArchitectures for interactive software systems: rationale and design chapter Architectures for interactive software systems: rationale and design Share on Author: Len Bass View Profile Authors Info & Affiliations User interface softwareJuly 1993 Pages 31\u0393\u00c7\u00f444 Published:30 July 1993 0citation 0 Downloads Metrics Total Citations0 Total Downloads0 Last 12 Months0 Last 6 weeks0 Get Citation Alerts New Citation Alert added! This alert has been successfully added and will be sent to: You will . .\u0393\u00c7\u00aa", "num_citations": "9\n", "authors": ["49"]}
{"title": "Runtime recovery actions selection for sporadic operations on public cloud\n", "abstract": " Sporadic operations such as rolling upgrade or machine instance redeployment are prone to unpredictable failures in the public cloud largely because of the inherent high variability nature of public cloud. Previous dependability research has established several recovery methods for cloud failures. In this paper, we first propose eight recovery patterns for sporadic operations on public cloud. We then present the filtering process which filters applicable recovery patterns. We propose an automation mechanism to automatically generate recovery actions for those applicable recovery patterns based on our resource state transition algorithm. We also propose a methodology to evaluate the recovery actions generated for the applicable recovery patterns based on the recovery evaluation metrics of Recovery Time, Recovery Cost, and Recovery Impact. This quantitative evaluation will lead to selection of the acceptable\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "8\n", "authors": ["49"]}
{"title": "Leadership and management in software architecture (LMSA'08) a report on an ICSE workshop\n", "abstract": " This is a report of the Leadership and Management in Software Architecture workshop that took place at ICSE 2008. The workshop focused on the non-technical aspects of software architecture. In particular, it focused on the skills that a software architect should have as well as the type of support an organization should provide for the architect.", "num_citations": "8\n", "authors": ["49"]}
{"title": "User interface software\n", "abstract": " Provides a practical survey of new user interface software, including both the technology for implementing novel user interfaces and techniques for evaluating them. The authors address multi-user interfaces, user interfaces for advanced software, development environments, animation-based user interfaces, user interfaces that support virtual reality, direct-manipulation user interfaces and new technology and techniques needed for multi-media user interfaces.", "num_citations": "8\n", "authors": ["49"]}
{"title": "Ordinal hierarchies and naming complexity classes\n", "abstract": " The relationship between computational complexity and hierarchies of computable Functions is explored. It is shown that known results of hierarchy theory have interesting applications to the Blum theory of computational complexity and, conversely, the Blum theory has applications to hierarchy theory. For example, it is shown that the Blum Speed-up Theorem guarantees the existence of nondegenerate hierarchies of computable functions through all the Church-Kleene constructive ordinal numbers without obtaining all total recursive functions in the hierarchy. In the other direction, a theorem of Kreisel and Parikh on the nonuniqueness of hierarchies forces a number of\" irregularities\" in the McCreight-Meyer notion of\" class-determining measured sets.\" A variation of the well-known Borodin-Constable Gap Theorem is presented. In toto, still more evidence is presented for the claim originally advanced by Young that\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "8\n", "authors": ["49"]}
{"title": "Quantifying failure risk of version switch for rolling upgrade on clouds\n", "abstract": " Rolling upgrade is an industry technique for online dynamic software update. A rolling upgrade updates a small number of instances in an old version to a new version at a time and the operation is repeated in a wave rolling until all of the instances have been upgraded. In many cases, the software needs to avoid interactions between different versions. One common simple approach is to make instances version aware, and then a version switch point can be chosen to deactivate the old service and activate the new service. On a Cloud platform, upgrades can be implemented simply through replacing old virtual machine instances with ones in new versions, and during the process of rolling upgrade various failures may present. If an instance fails, a new instance has to be launched from the backup images, which in most software systems are in an old version and cannot be simply replaced to a new version if the\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "7\n", "authors": ["49"]}
{"title": "Analyzing enterprise javabeans systems using quality attribute design primitives\n", "abstract": " Quality attribute requirements such as those for performance, security, modifiability, reliability, and usability have a significant influence on the software architecture of a system. At the Software Engineering Institute, we are studying and codifying the relationship between quality attribute requirements and the architectural design strategies that impact their achievement. In CMUSEI-2000-TN-017 Bass 00, we introduced the notion of quality attribute design primitives. Quality attribute design primitives or attribute primitives are architectural building blocks that target the achievement of one-or sometimes several-quality attribute requirements. Our intent is to codify a fairly comprehensive set of attribute primitives in a manner that articulates how each attribute primitive makes its specific contribution toward the achievement of one or several attribute goals. We believe this will provide a very powerful language for constructing or analyzing software architectures in relation to quality attribute requirements. To determine the expressive and explanatory power of these attribute primitives, we will examine various classes of systems. This paper uses attribute primitives to examine the qualities of Enterprise JavaBeans EJB-based systems. In particular, we find that attribute primitives hold promise for providing insight into the quality attribute consequences of using various EJB infrastructure features.Descriptors:", "num_citations": "6\n", "authors": ["49"]}
{"title": "IFIP Working Group 2.7 User Interface Engineering: A reference model for interactive system construction\n", "abstract": " IFIP Working Group 2.7 User Interface Engineering | Proceedings of the IFIP TC2/WG2.7 Working Conference on Engineering for Human-Computer Interaction ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleProceedingsProceedings of the IFIP TC2/WG2.Working Conference on Engineering for Human-Computer InteractionIFIP Working Group 2.7 User Interface Engineering: A Reference Model for Interactive System Construction Article IFIP Working Group 2.7 User Interface Engineering: A Reference Model for Interactive System Construction Share on Authors: Len J Bass profile image Leonard J. Bass View Profile , G Cockton profile , : \u0393\u00c7\u00aa", "num_citations": "6\n", "authors": ["49"]}
{"title": "On optimal processor scheduling for multiprogramming\n", "abstract": " This paper investigates the problem of scheduling a processor to optimize throughput in a multiprogramming environment. A deterministic model is used to study the scheduling of a batch of k programs residing in main memory of a system consisting of a single processor and k input\u0393\u00c7\u00f4output devices in such a way as to minimize the time to complete all k jobs.It is shown that for any set of independent programs a preemptive strategy is not necessary to obtain the minimum running time for the entire batch. There is always an interrupt driven schedule which is as good as the best preemptive schedule.It is also shown that processor bound programs are easy to schedule. A lower bound on the completion time for any set of programs is observed, and it is shown that with processor bound programs the lower bound can always be obtained. An algorithm for obtaining this bound is given.These results provide some insight\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "6\n", "authors": ["49"]}
{"title": "A decision model for choosing patterns in blockchain-based applications\n", "abstract": " Blockchains have been applied in different domains to guarantee data integrity and provide a decentralized computational infrastructure for executing smart contracts. Multiple blockchain-related patterns have been summarized by academics and industry practitioners covering different aspects, such as engineering applications on top of a blockchain, structuring smart contracts, and security. The existence of these patterns is both helpful and challenging for designers. Helpful, as the existence of these patterns means that developers do not need to recreate solutions to common problems. Challenging, as the multitude of patterns leaves a designer confused about when to adopt or adapt patterns. In this paper, we propose a decision model that assists developers and architects in selecting appropriate patterns for blockchain-based applications. The selection is based on the characteristics of the use cases and trade\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "5\n", "authors": ["49"]}
{"title": "Runtime recovery actions selection for sporadic operations on cloud\n", "abstract": " Sporadic operations such as rolling upgrade or machine instance redeployment are prone to unpredictable failures in the cloud largely due to the inherent high variability nature of cloud. Previous dependability research has established several recovery methods for cloud failures. In this paper, we first propose eight recovery patterns for sporadic operations. We then present the filtering process which filters applicable recovery patterns for a given operational step. We also propose a methodology to evaluate the recovery actions generated for the applicable recovery patterns based on the metrics of Recovery Time, Recovery Cost and Recovery Impact. This quantitative evaluation will lead to selection of optimal recovery actions. We implement a recovery service and illustrate its applicability by recovering from errors occurring in Asgard rolling upgrade operation on cloud. The experimental results show that the\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "5\n", "authors": ["49"]}
{"title": "Towards a taxonomy of cloud recovery strategies\n", "abstract": " Recovering from failures of sporadic operations such as rolling upgrade or migration is complicated by the fact that the application being upgraded or migrated must continue to provide service. This means that recovery strategies for sporadic operations must include facilities for recovering from normal operations as well. As a step in deriving methods for recovering from failures in sporadic operations, we classify existing methods into four categories according to their purposes and the life cycle phase for which they are applicable. Not only does this taxonomy facilitate the research on recoverability of cloud sporadic operations but also it can help better understand the existing cloud recovery strategies.", "num_citations": "5\n", "authors": ["49"]}
{"title": "A recoverability-oriented analysis for operations on cloud applications\n", "abstract": " Consumer-initiated sporadic operations on cloud applications, such as deployment, upgrade and reconfiguration, may fail because of the inherent uncertainty of operating in a cloud environment. For example, if a VM is not able to start, operations dependent on that VM will fail. In this paper we propose an approach for analyzing sporadic operations on cloud applications to facilitate recovery. We do this by first creating a process model of the sporadic cloud operation. The Process may not be suitable for recovery operations or the application's deployment architecture since an individual step may be at the wrong level of granularity or a failure may unnecessarily affect multiple steps. We then propose a set of process division criteria for revising an operation process to support recovery. This set of criteria contains four aspects: 1) Atomicity to support the imposition of transactions on portions of the process, 2\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "5\n", "authors": ["49"]}
{"title": "Generate and test as a software architecture design approach\n", "abstract": " In the last several years, the concept of a design decision has become important in the software architecture design community. A design decision begins with an issue and then focuses on the alternative solutions and the rationale for these solutions. The question of where the issues come from is not usually addressed within this approach. In this paper, we present a \"generate and test\" approach to design. If the design process is viewed as a generate and test process, then the set of questions that must be answered include where does the initial hypothesis come from, what are our test cases for any hypothesis, and how is the next hypothesis generated.", "num_citations": "5\n", "authors": ["49"]}
{"title": "Creating meaningful assessments for professional development education in software architecture\n", "abstract": " Extensive instructional materials have been developed and used for courses in specific software architecture topics offered at the Software Engineering Institute (SEI) at Carnegie Mellon University, to support the instructional goals laid out by the creators of the SEI's professional education program and the designers of the individual courses. However, to date, these courses have lacked any assessment component, certification for the course being granted solely on attendance. For an assessment component to be meaningful, it must derive from and support these instructional goals, determine which goals must be assessed and how to assess them, and determine how best to assess whether those goals have been achieved through application of the instructional materials, lectures, and activities which are included in each two-day course. In order to ensure that the course assessments target the intended learning\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "5\n", "authors": ["49"]}
{"title": "Avoiding\" we Can't Change That!\": Software Architecture & Usability\n", "abstract": " The usability analyses or user test data are in; the development team is poised to respond. The software had been carefully modularized so that modifications to the UI would be fast and easy. When the usability problems are presented, someone around the table exclaims,\u0393\u00c7\u00a3Oh, no, we can\u0393\u00c7\u00d6t change THAT!\u0393\u00c7\u00a5 The requested modification or feature reaches too far in to the architecture of the system to allow economically viable and timely changes to be made. Even when the functionality is right, even when the UI is separated from that functionality, architectural decisions made early in development have precluded the implementation of a usable system. The members of the design team are frustrated and disappointed that despite their best efforts, despite following current best practice, they must ship a product that is far less useable than they know it could be. This scenario need not be played out if usability concerns are considered during the earliest design decisions of a system, that is, during the architectural design, just as concerns for performance, availability, security, modifiability, and other quality attributes are considered. The relationships between these attributes and architectural decisions are relatively well understood and taught routinely in software architecture courses. However, the prevailing wisdom in the last 20 years has been that usability had no architectural role except through modifiability; design the UI to be easily modified and usability will be realized through iterative design, analysis and testing. Separation of the user interface has been quite effective, and is commonly used in practice, but it has problems. First, there are many\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "5\n", "authors": ["49"]}
{"title": "Human-Computer Interaction: Third International Conference, EWHCI'93, Moscow, Russia, August 3-7, 1993. Selected Papers\n", "abstract": " The International Conference on Human-Computer Interaction EWHCI'93 was thethird conference in a series which started in 1991 in Moscow. Like its predecessors, it was occasioned by the long separation of workers in HCI from one another and the new opportunity to learn from one another and to start cooperations with each other. The conference was international, with papers and participants from 16 countries. This volume contains a selection of the best papers presented at the conference. The papers are grouped into parts on: foundations of HCI; techniques, tools and paradigms for interface design; information visualization; empiricalstudies; multimedia; hypertext; customizing interfaces; teaching and learning; applications.", "num_citations": "5\n", "authors": ["49"]}
{"title": "Process-oriented recovery for operations on cloud applications\n", "abstract": " A large number of cloud application failures happen during sporadic operations on cloud applications, such as upgrade, deployment reconfiguration, migration and scaling-out/in. Most of them are caused by operator and process errors [1]. From a cloud consumer's perspective, recovery from these failures relies on the limited control and visibility provided by the cloud providers. In addition, a large-scale system often has multiple operation processes happening simultaneously, which exacerbates the problem during error diagnosis and recovery. Existing built-in or infrastructure-based recovery mechanisms often assume random component failures and use checkpoint-based rollback, compensation actions [2], redundancy and rejuvenation to handle recovery [3]. These recovery mechanisms do not consider the characteristics of a specific operation process that consists of a set of steps carried out by scripts and\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "4\n", "authors": ["49"]}
{"title": "Eliciting and capturing business goals to inform a product line\u0393\u00c7\u00d6s business case and architecture\n", "abstract": " Business goals constitute an important kind of knowledge for a software product line. They inform the product line\u0393\u00c7\u00d6s business case and they inform its architecture and quality attribute requirements. This paper establishes the connection between business goals and a product line\u0393\u00c7\u00d6s business case and architecture. It then presents a set of common business goal categories, gleaned from a systematic search of the business literature that can be used to elicit an organization\u0393\u00c7\u00d6s business goals from key stakeholders. Finally, it presents a well-defined method, which we have tried out in practice, for eliciting and capturing business goals and tying them to quality attribute requirements.", "num_citations": "4\n", "authors": ["49"]}
{"title": "Non-functional property driven service governance: Performance implications\n", "abstract": " Service governance is a set of businesses processes, policies and technical solutions that support enterprises in their implementation and management of their SOA. The decisions of service governance, especially concerning service boundaries at the enterprise level, influence the deployment topology of business services across or within business organizations. Deployment topologies are realized by integration technologies such as Enterprise Service Bus (ESB). Service governance and technical solutions interact in a subtle way including through communication patterns and protocols between services and ESBs, as well as the deployment and configuration of ESB. These factors have a strong influence on the Non-Functional Properties (NFP) of a SOA solution. A systematic approach is essential to understand alternative technical solutions for a specific service governance decision. This paper\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "4\n", "authors": ["49"]}
{"title": "Understanding architectural patterns in terms of tactics and models\n", "abstract": " Architects use architectural patterns and tactics to improve software architectural decisions and simplify the design process. In this column, we explore the relationships of tactics and architectural patterns, focusing on the quality attribute of modifiability.Patterns are solutions that resolve multiple forces, whereas tactics focus on specific quality attributes. To more effectively apply both tactics and patterns, architects need to understand how architectural tactics and patterns relate and how to use them effectively.", "num_citations": "4\n", "authors": ["49"]}
{"title": "Risk themes from ATAM data: preliminary results\n", "abstract": " There is a lack of support for data management: There is no uniform specification for managing meta-data and its persistence. There is no strategy for ensuring that data sets are accessible outside of an implementation of a sub domain. This means that while data is, in theory, exchanged by all sub domains, they may not be sharing the same assumptions about the data. And it may not be easy for one sub domain to gain access to data sets from another domain.There is a trend to move toward an integration role for the development organization. This increases exposure to liability risks in customer and 3rd party software integrated with development organization software. The market is forcing the development organization to be an integrator, but there is no clear business goal that states this.", "num_citations": "4\n", "authors": ["49"]}
{"title": "Rollback mechanisms for cloud management APIs using AI planning\n", "abstract": " Human-induced faults play a large role in systems reliability. In cloud platforms, system administrators may inadvertently make catastrophic mistakes, like deleting a virtual disk with important data. Providing rollback for cloud operations can reduce the severity and impact of such mistakes, by allowing to revert to a known, good state. However, in the context of cloud management this is non-trivial, since cloud consumers only have limited visibility and indirect control. In this paper, we present a scalable approach to rollback operations that change the state of a system on proprietary cloud platforms. In our previous work, we provided a system that augments cloud APIs and provides rollback operation using an AI planner. In this paper, we build upon our previous work, but parallelize the rollback plan generation based on characteristics unique to rollback scenario. Furthermore, we introduce a distributed anytime\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "3\n", "authors": ["49"]}
{"title": "Process-oriented non-intrusive recovery for sporadic operations on cloud\n", "abstract": " Cloud-based systems get changed more frequently than traditional systems. These frequent changes involve sporadic operations such as installation and upgrade. Sporadic operations may fail due to the uncertainty of cloud platforms. Each sporadic operation manipulates a number of cloud resources. The accessibility of resources manipulated makes it possible to build an accurate process model of the correct behavior for an operation and its desired effects. This paper proposes a non-intrusive recovery approach for sporadic operations on cloud, called POD-Recovery. POD-Recovery utilizes the above-mentioned process model of the operation. When needed, it triggers recovery actions based on the model through non-intrusive means, i.e., without modifying the code which implements the sporadic operation. POD-Recovery employs an efficient artificial intelligence (AI) planning technique for generating recovery\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "3\n", "authors": ["49"]}
{"title": "Using simulation to evaluate error detection strategies: a case study of cloud-based deployment processes\n", "abstract": " The processes for deploying systems in cloud environments can be the basis for studying strategies for detecting and correcting errors committed during complex process execution. These cloud-based processes encompass diverse activities, and entail complex interactions between cloud infrastructure, application software, tools, and humans. Many of these processes, such as those for making release decisions during continuous deployment and troubleshooting in system upgrades, are highly error-prone. Unlike the typically well-tested deployed software systems, these deployment processes are usually neither well understood nor well tested. Errors that occur during such processes may require time-consuming troubleshooting, undoing and redoing steps, and problem fixing. Consequently, these processes should ideally be guided by strategies for detecting errors that consider trade-offs between efficiency and\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "3\n", "authors": ["49"]}
{"title": "Scalable rollback for cloud operations using AI planning\n", "abstract": " Human-induced faults play a large role in systems reliability. In cloud platforms, system administrators may inadvertently make catastrophic mistakes, like deleting a virtual disk with important data. Providing rollback for cloud operations can reduce the severity and impact of such mistakes by allowing to revert back to a known, good state. In this paper, we present a scalable approach to rollback operations that change state of a system on proprietary cloud platforms. In our previous work, we provided a system that augments cloud APIs and provides roll-back operation using an AI planner. However, the previous system eventually suffers from the exponential complexity inherent to AI planning tasks. In this paper, we divide and parallelize rollback plan generation, based on characteristics unique to the rollback scenario. Through experimental evaluation, we show that this approach scales better than the previous, naive\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "3\n", "authors": ["49"]}
{"title": "Consumer Monitoring of Infrastructure Performance in a Public Cloud\n", "abstract": " Many web information systems and applications are now run as cloud-hosted systems. The organization that owns the information system or application is thus a consumer of cloud services, and often relies on the cloud provider to monitor the virtual infrastructure and alert them of any disruption of the offered services. For example, Amazon Web Services\u0393\u00c7\u00d6 cloud disruptions are announced by the cloud provider on a dedicated RSS feed so that the consumers can watch and act quickly. In this paper, we report on a long-running experiment for the monitoring and continuous benchmarking of a number of cloud resources on Amazon Cloud from a consumer\u0393\u00c7\u00d6s perspective, aiming to check whether the service disruptions announced by the cloud provider are consistent with what we observe. We evaluate the performance of cloud resources over several months. We find that the performance of the cloud can vary\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "3\n", "authors": ["49"]}
{"title": "Business goals and architecture\n", "abstract": " Software systems exist to fulfill the business goals of organizations \u0393\u00c7\u00f4 developing organizations, purchasing organizations, user organizations, and others \u0393\u00c7\u00f4 and these goals turn out to be a significant source of requirements. These requirements are not currently well understood and are seldom captured explicitly, yet they can have a profound effect on the architecture for a system. Systems that meet the published requirements but do not satisfy the important business goals are considered failures. Our research has produced a standard categorization of business goals that can be used to aid in elicitation and capture. We have also created a form for a business goal scenario, which is an expression to capture a stakeholder\u0393\u00c7\u00d6s business goal in an unambiguous form, along with its pedigree, by which we mean its source, value, and stability. Finally, we have used these developments to create a lightweight method\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "3\n", "authors": ["49"]}
{"title": "Software Architecture Design with ArchE\n", "abstract": " The goal of our work in software architectures is to understand the mechanics behind creating good architectures and make this knowledge public.", "num_citations": "3\n", "authors": ["49"]}
{"title": "Experience with using general usability scenarios on the software architecture of a collaborative system\n", "abstract": " Architecturally-sensitive usability scenarios are important usability concerns that require early consideration in software design so that architectural support can render them easy and cost-effective to implement. Examples include providing the ability to cancel a command, undo commands, aggregate data, etc. This chapter reports on our experiences applying these scenarios to the design of MER Board, a wall-sized interactive system developed by NASA to assist Mars Rover science teams with collaborative data analysis. We applied the scenarios during a major redesign of the software architecture that introduced usability as a valued quality attribute. In the process, we found that the scenarios were well-received by developers who readily understood how they related to MERBoard, that they applied to a collaborative workspace despite having been initially developed for a single-user desktop system, that\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "3\n", "authors": ["49"]}
{"title": "Software Architectures\n", "abstract": " For all but the most trivial software systems, you cannot hope to succeed without paying careful attention to its architecture: the way the system is decomposed into constituent parts and the ways those parts interact with each other. Without an architecture that is appropriate for the problem being solved the project will fail. Even with a superb architecture, if it is not well understood and well communicated--in other words, well documented--the project will fail. Not may fail. Will fail.Accordingly, software architecture is at the center of a frenzy of attention these days. A new book about it seems to pop out monthly. In response to industrial need, universities are adding software architecture to their software engineering curricula. It\u0393\u00c7\u00d6s now common for \u0393\u00c7\u00a3software architect\u0393\u00c7\u00a5 to be a defined position in organizations, and professional practice groups for software architects are emerging. It has been the subject of major international conferences and workshops. The purveyors of the Unified Modeling Language promote their product by calling it \u0393\u00c7\u00a3the standard notation for software architecture\u0393\u00c7\u00a5(a claim that may say at least as much about the pervasiveness of architecture as about UML). The Software Engineering Institute maintains a bibliography of journal and conference papers about software architecture and its population is approaching 1000.", "num_citations": "3\n", "authors": ["49"]}
{"title": "CMU\n", "abstract": " We are in receipt of Council's letter dated 7/19/18 requesting an updated Structural Analysis for the abovereferenced modification. As we are uncertain whether it will be received by 8/16/18, we would like to request an extension of time to provide.", "num_citations": "3\n", "authors": ["49"]}
{"title": "A note on the intersection of complexity classes of functions\n", "abstract": " The classes of computable functions defined by a bound on the computation time are shown not to be closed under infinite descending intersection.", "num_citations": "3\n", "authors": ["49"]}
{"title": "Supporting operations personnel through performance engineering\n", "abstract": " Operations costs are around 50% of the worldwide costs of Information Technology. Yet operations problems are mainly viewed as the problem of IT and not of the problem of product developers or performance engineers. I will discuss some areas where performance engineers could be of great assistance to operations and where an understanding of operations process could inform the models created by performance engineers.", "num_citations": "2\n", "authors": ["49"]}
{"title": "Results of SEI Independent Research and Development Projects\n", "abstract": " The Software Engineering Institute SEI annually undertakes several independent research and development IRAD projects. These projects serve to 1 support feasibility studies investigating whether further work by the SEI would be of potential benefit and 2 support further exploratory work to determine whether there is sufficient value in eventually funding the feasibility study work as an SEI initiative. Projects are chosen based on their potential to mature andor transition software engineering practices, develop information that will help in deciding whether further work is worth funding, and set new directions for SEI work. This report describes the IRAD projects that were conducted during fiscal year 2009 October 2008 through September 2009.Descriptors:", "num_citations": "2\n", "authors": ["49"]}
{"title": "Leadership and management in software architecture\n", "abstract": " The workshop will be conducted primarily through discussion by the participants. The papers have opened up a wide number of issues that have no easy solution and where, most likely, the solutions will vary from case to case. The discussion portion of the workshop will be broad ranging over the topics we have introduced here.", "num_citations": "2\n", "authors": ["49"]}
{"title": "Elements of a Usability Reasoning Framework\n", "abstract": " This technical note brings together two different threads of work 1 investigating the relationship between usability and software architecture that has generated a number of usability scenarios with implications for software architecture, and 2 developing an architecture design assistant, Architecture Expert ArchE. One key element of ArchE is that quality-attribute knowledge can be encapsulated into reasoning frameworks, and a Carnegie Mellon University Master of Software Engineering project team has developed an ArchE reasoning language ARL with which to specify the actions of reasoning frameworks within ArchE. This note describes an ARL implementation of two usability scenarios 1 displaying progress feedback and 2 allowing cancel. These implementations begin to provide ArchE with the ability to reason about aspects of usability that have software architecture implications.Descriptors:", "num_citations": "2\n", "authors": ["49"]}
{"title": "Applicability of General Scenarios to the Architecture Tradeoff Analysis Method, CMU/SEI-2001-TR-014\n", "abstract": " CiteSeerX \u0393\u00c7\u00f6 Applicability of General Scenarios to the Architecture Tradeoff Analysis Method, CMU/SEI-2001-TR-014 Documents Authors Tables Log in Sign up MetaCart DMCA Donate CiteSeerX logo Documents: Advanced Search Include Citations Authors: Advanced Search Include Citations Tables: DMCA Applicability of General Scenarios to the Architecture Tradeoff Analysis Method, CMU/SEI-2001-TR-014 Cached Download as a PDF Save to List Add to Collection Correct Errors Monitor Changes by Len Bass , Mark H. Klein , Gabriel A. Moreno , Mark Klein , Gabriel Moreno Citations: 13 - 4 self Summary Citations Active Bibliography Co-citation Clustered Documents Version History Share Facebook Twitter Reddit Bibsonomy OpenURL Abstract REPORT CMU/SEI-2001-TR-014 ESC-TR-2001-014 Keyphrases architecture tradeoff analysis method cmu sei-2001-tr-014 general scenario report cmu sei-2001-tr-esc\u0393\u00c7\u00aa", "num_citations": "2\n", "authors": ["49"]}
{"title": "Working group on formal methods in HCI and software engineering\n", "abstract": " This report describes the discussions of a working group on the application of formal methods to human computer interaction. The group made a distinction between models, notations, and methods and discussed the use of these techniques in HCI. The group also discussed the problems associated with the use of formal methods in HCI and identified several problems that, if solved, would simplify the application of formal methods.", "num_citations": "2\n", "authors": ["49"]}
{"title": "Requirements for UIMSs\n", "abstract": " The notion of UIMS covers different levels of services ranging from ad-hoc dialogue controllers to user interface generators. In this article, the term\" UIMS\" is employed in a generic way. We first propose an interpretation of the Seeheim model in which we stress separation of concerns, high band width and parallelism between the basic components of a UIMS. For each of the fundamental components we then identify precise requirements. These requirements aim at satisfying cognitive psychology principles such as the opportunistic behavior of the end user, and at supporting software engineering principles such as reusability and iterative refinement.", "num_citations": "2\n", "authors": ["49"]}
{"title": "Human-Machine Interaction Considerations for Interactive Software\n", "abstract": " This document introduces current concepts and techniques relevant to the design and implementation of user interfaces. A user interface refers to those aspects of a system that the user refers to, perceives, knows and understands. A user interface is implemented by code that mediates between a user and a system. This document covers both aspects. The first chapter is an introduction to the psychology of human-computer interaction. It presents the theoretical models that have had a significant impact on the evolution of the field. These models offer a way to organize the design process and help understand the cognitive process involved in interacting with a computer. The rest of the document is concerned with the software design of user interfaces and shows how the principles established by the cognitive principles can be put into practice. Following a presentation on the abstractions involved in the organization of an interactive system, attention is then directed to the tools for constructing user interfaces windowing systems, tool kits and user interface management systems.Descriptors:", "num_citations": "2\n", "authors": ["49"]}
{"title": "Ergonomics and Software Principles for the Construction of Interactive Software\n", "abstract": " Ergonomics and software principles for the construction of interactive software - OpenGrey fra | eng OpenGrey Open System for Information on Grey literature in Europe Home Search Subjects Partners Export Help Search XML To cite or link to this reference: http://hdl.handle.net/10068/47148 Title : Ergonomics and software principles for the construction of interactive software Authors : Coutaz, Joelle ; Bass, Len ; Corporate author : Informatique et Mathematiques Appliquees de Grenoble (IMAG), 38 - Saint-Martin-d'Heres (France). Lab. de Genie Informatique de Grenoble (LGIG) ; Publication year : 1988 Language : English ; Pagination/Size : 116 p. ; SIGLE classification : 09H - Computer software, programming ; Document type : R - Report ; Report number : IMAG-RR--732-I ; Other identifier : FR ; FR_ 1989:473 ; handle : http://hdl.handle.net/10068/47148 Provenance : SIGLE ; Get a copy : INIST-CNRS - Institut de l'et : : ; \u0393\u00c7\u00aa", "num_citations": "2\n", "authors": ["49"]}
{"title": "Contexts: A Concept for Command Language Modelling\n", "abstract": " There is a widespread informally used notion of\" context\", meaning that the semantics of a command depend on the context in which it is used. A general concept of\" context\" is proposed for modelling aspects of present or future command languages. The concept is described and modelling aspects are discussed.", "num_citations": "2\n", "authors": ["49"]}
{"title": "Deployment and operations for software engineers\n", "abstract": " Software engineering practices require knowledge of the environment in which an application is to be run. In the modern world, this means knowledge of virtualization, containers, networking, the cloud, and security techniques for the internet. A developer should also know about microservices, configuration management, the deployment pipeline, monitoring and post production, disaster recovery, and how to develop secure applications. These topics, and more, are all covered in this book. The book includes exercises and discussion questions to facilitate classroom or group learning.. Order it from Amazon.", "num_citations": "1\n", "authors": ["49"]}
{"title": "Rollup: Non-disruptive rolling upgrade\n", "abstract": " Rolling upgrade consists of upgrading progressively the servers of a distributed system to reduce service downtime. Upgrading a subset of servers requires a wellengineered cluster membership protocol to maintain, in the meantime, the availability of the system state. Existing cluster membership reconfigurations, like Zookeeper and CoreOS etcd, rely on a primary not only for reconfiguration but also for storing information. At any moment, there can be at most one primary, whose replacement necessarily induces disruption.We propose Rollup, a fully distributed rolling upgrade protocol that uses biquorums to solve consensus. Rollup relies on a candidate leader only for the reconfiguration making service requests scalable. Although Rollup builds upon existing lower-bound results in terms of load and time, its key contribution is to bridge the gap between a long body of theoretical results and recent system achievements through the rolling upgrade application. We evaluate Rollup on an isolated network of 26 physical machines and on an Amazon EC2 cluster of 59 virtual machines. Our comparison against a rolling upgrade using the primary-backup paradigm shows a 6-fold speedup thanks to a reconfiguration building block up to one order of magnitude faster than Zookeeper\u0393\u00c7\u00d6s.", "num_citations": "1\n", "authors": ["49"]}
{"title": "Prologue: Software Architectures and Documentation\n", "abstract": " 1.1 PurposeIdentify the purpose of this SDD and its intended audience.(eg \u0393\u00c7\u00a3This software design document describes the architecture and system design of XX.\u0393\u00c7\u00aa.\u0393\u00c7\u00a5).", "num_citations": "1\n", "authors": ["49"]}
{"title": "Supporting quality-driven software design through intellectual assistants\n", "abstract": " Software design decisions are usually made at early stages but have far-reaching effects regarding system organization, quality, and cost. When doing design, developers apply their technical knowledge to decide among multiple solutions, seeking a reasonable balance between functional and quality-attribute requirements. Due to the complexity of this exploration, the resulting solutions are often more a matter of developer\u0393\u00c7\u00d6s experience than of systematic reasoning. It is argued that AI-based tools can assist developers to search the design space more effectively. In this chapter, the authors take a software design approach driven by quality attributes, and then present two tools that have been specifically developed to support that approach. The first tool is an assistant for exploring architectural models, while the second tool is an assistant for the refinement of architectural models into object-oriented models\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "1\n", "authors": ["49"]}
{"title": "Leadership and management in software architecture workshop 2009 report\n", "abstract": " This is a report of a workshop on Leadership and Management in Software Architecture held at ICSE on May 19, 2009.", "num_citations": "1\n", "authors": ["49"]}
{"title": "Towards an agent-based framework for guiding design exploration\n", "abstract": " One of the premises of conceptual design is that the designer must evaluate a range of candidate solutions before selecting the final solution. Tool support is critical to aid designers in that exploration, because the design space is usually large and involves multiple constraints. A modality of assistance is that the tool criticizes the current design and provides the designer with recommendations for improving it. Traditional knowledge-based systems and optimization tools tend to be inappropriate when the designer is actively involved in the search loop, because the design proposals should match the designer's context. To address this challenge, this paper describes an agent-based framework for developing design recommendation tools that help designers to perform explorative search more effectively. The approach is exemplified with an experimental design assistant for software architecture design.", "num_citations": "1\n", "authors": ["49"]}
{"title": "2 Improving Architectural Design Through Organizational Considerations\n", "abstract": " 2.1 PURPOSEArchitectural design decisions and organizational coordination mechanisms must be aligned in order for development to proceed smoothly. Our goal is to make the factors of this alignment precise and to use this understanding to provide guidance to designers and managers. The guidance for designers will be of the form:\u0393\u00c7\u00f2in this type of organizational environment with this type of organization coordination mechanisms, these are the decisions that may be problematic.\u0393\u00c7\u00fb The guidance for managers will be of the form:\u0393\u00c7\u00f2these are the types of coordination mechanisms that should be in place to support these particular architectural decisions.\u0393\u00c7\u00fb We also expect to develop indicators that managers can use to provide early indications of potential organizational or architectural misalignment.", "num_citations": "1\n", "authors": ["49"]}
{"title": "Implications of a single mobile computing device\n", "abstract": " This paper explores some of the implications of having a single platform that suffices for all of the mobile computing needs of an individual. It examines a mobile computing scenario from the perspective of designing the user interface software, and potential reliability and security issues.", "num_citations": "1\n", "authors": ["49"]}
{"title": "Quality Session Report\n", "abstract": " This is a report of a working session on quality in the Working International Conference on Software Architecture, 2005", "num_citations": "1\n", "authors": ["49"]}
{"title": "Evaluating software architectures for usability\n", "abstract": " For the last twenty years, techniques to design software architectures for interactive systems that support usability have been a concern of both researchers and practitioners. Recently, in the context of performing architecture evaluations, we were reminded that the techniques developed thus far are of limited utility when evaluating the usability of a system based on its architecture. Techniques for supporting usability have historically focussed on selecting the correct overall system structure. Proponents of these techniques argue that their structure retains the modifiability needed during an iterative design process while still providing the required support for performance and other functionality.               We are taking a different approach. We are preparing a collection of connections between specific aspects of usability (such as the ability for a user to \u0393\u00c7\u00a3undo\u0393\u00c7\u00a5 or \u0393\u00c7\u00a3cancel\u0393\u00c7\u00a5) and their implications for software\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "1\n", "authors": ["49"]}
{"title": "Methods, models and architectures for graphical user interface design: IFIP working groups 13.2/2.7 joint workshop, Loughborough, UK, September 1994\n", "abstract": " The purpose of this workshop was to bring together researchers and practitioners to focus on GUI design problems. The two working groups represent methodological (13.2) and an architectures/tool (2.7) interests, so the workshop focused on intersection of how methods can support tools and user interface development and vice versa, how tools, architectures and reusable components can empower the design process. The suggested topics for the workshop were:", "num_citations": "1\n", "authors": ["49"]}
{"title": "Mini-workshop: scenarios for CSCW systems\n", "abstract": " Scenarios are useful during system design, system evaluation, system illustration and the comparison of two systems. The goal of this workshop was to construct a collection of scenarios for Computer Supported Cooperative Work that could be used for these purposes. The first thing we discovered, however, is that there are at least two fundamentally different uses of the term \u0393\u00c7\u00a3scenario\u0393\u00c7\u00a5:                                         1.                                             A large, detailed description of a real-world (i.e. messy) situation, and                                                                                2.                                             Specific, system independent task such as \u0393\u00c7\u00a3add a new user\u0393\u00c7\u00a5. This type of scenario resembles a benchmark.", "num_citations": "1\n", "authors": ["49"]}
{"title": "The role of a body worn CSCW system in the generation of a CSCW reference architecture\n", "abstract": " The concept of a reference architecture for CSCW is viewed from two perspectives: the software architecture perspective and the perspective that requires a common understanding of the functioning of such systems. Software architecture is explained as having multiple perspectives and these are briefly described. One aspect of a reference architecture is a canonical functional partitioning of the CSCW domain and a particular body worn CSCW system currently under developed is posed as a boundary case for any proposed functional partitioning.", "num_citations": "1\n", "authors": ["49"]}
{"title": "Concepts, methods, methodologies working group\n", "abstract": " Paul ten Hagen opened the session on Monday afternoon by saying that the Working Group should concentrate on looking at existing concepts, methods and methodologies and see how we can develop ideas from these. Six papers were to be presented and the authors should concentrate on answering the two questions:                                             (1)                                                 Which design techniques, toolkits, environments, UIMS are currently in use?                                                                                        (2)                                                 Who uses them, how and for what?                                                                The presentations should concentrate on the relationship of their work to the aims of the Working Group.", "num_citations": "1\n", "authors": ["49"]}
{"title": "Role of a Historian in a Database Management System\n", "abstract": " Traditionally, a database manager tracks only transactions an insufficient way to maintain a complete history. This multilevel system tracks three history levels: character, transaction, and global action.", "num_citations": "1\n", "authors": ["49"]}
{"title": "The Components of a Generalised User Interface\n", "abstract": " In order to develop integrated systems, the command interpreter and the various applications musi all work together so thai the user is unaware of any division between commands to the operating system and commands to the applications. One prerequisite for the development of integrated systems is to have a common set of tools which are used by these applications and the command interpreter. This set of tools must provide an environment in which both sophisticated and naive users can operate efficiently and in which new applications can be easily added to the system.This paper describes a set of three interacting tools designed to allow the development of integrated, supportive, systems. These tools are a structure for a command interpreter, an end user interface and, as a result of the requirement for a supportive system, a semantic monitoring tool which gathers information from the application, necessary for user support. All of these tools are developed with a simple well-defined interface for the application programs which allows them to be written without concern for the details of the user or command interface. It allows them to be easily integrated into the existing system of such applications. The implementa-tion of preliminary versions of these tools within the context of a relational database system is also described.", "num_citations": "1\n", "authors": ["49"]}
{"title": "A graphical interface for report specification\n", "abstract": " A great deal of effort has gone into evaluating the usability of different syntaxes for query languages. A different type of query \u0393\u00c7\u00a3language\u0393\u00c7\u00a5 is exemplified by QBE and other graphical query systems where the specification of a query is simpler than in query languages. A common application of data retrieved by a query is generating reports. Most report format specifications are still produced by linguistic means. This talk describes a graphical report construction tool which has been successfully used with a production scientific data base management system.", "num_citations": "1\n", "authors": ["49"]}
{"title": "Errata: On optimal processor scheduling for multiprogramming\n", "abstract": " Z t2,j forl < <= nl T2,i : E tl,j forl < <= n2, Page 1 SIAM J. COMPU\u0393\u00c7\u00d6r. Vol. 5, No. , December 1976 ERRATA\" ON OPTIMAL PROCESSOR SCHEDULINGFOR MULTIPROGRAMMING* LJ BASS]\" Modify thedefinition of processor bound on p. 278 as follows\" We say two programs P1 and P2 are processor bound with respect to each other if and and either n2-- Tl,i Z t2,j forl < <= nl j=l T2,i : E tl,j forl < <= n2, j=l T1,1 t2,1 or T2, ->_ t, Intuitively, this definition says that, with the possible exception of one of the initial compute times, all of the compute times of P are greater than the sum of the wait times of P2, and vice versa. Modify the statement ofTheorem 2 on pp. 278-279 as follows: THEOREM 2. Let PI and P2 be processor bound with respe\u0393\u00c7\u00d6ct to each other. Then Furthermore, if Tad R(P,, P2) T/,j. i= 1,2 j<-ni t2, r2,1 -tl,, then R(P,, P) R(P,, P). The proof isas previously stated. I am grateful to Eike Riedemann of the Universitfit for this . \u0393\u00c7\u00aa", "num_citations": "1\n", "authors": ["49"]}
{"title": "Some experiments in simulating OS/360 from performance data\n", "abstract": " Recent work has indicated that the time a program spends in memory is the primary determinant of the turnaround of the program. We constructed a simulation model of our OS/360 system, using as input performance data gathered by a software monitor, and experimented with differing models of the operating system, program behavior, and hardware configurations to determine an appropriate trade-off between the complexity of models used and the accuracy of the simulation. We constructed a fairly simple model which simulated, from resource requirements of programs, the time a collection of programs resided in memory to within 10% accuracy for the actual completion time of the various programs.", "num_citations": "1\n", "authors": ["49"]}