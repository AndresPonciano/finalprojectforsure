{"title": "Language independent metrics support towards refactoring inference\n", "abstract": " One of the current trends in refactoring is when and where we should refactor. Until now, most of the proposals establish that the refactoring process starts from the programmer intuition and experience. From the bad smell concept, and using metrics, it is possible to discover refactoring opportunities, not only from a subjective point of view but also from an objective point of view. The following work presents an exploratory case study on the use of metrics in the detection of bad smells. This leads to related refactorings in order to improve underlying design. The process is achieved in a language independent manner. In this sense, it is briefly described a framework support for collecting metrics that allows to reuse the effort on a wide family of object-oriented languages. Framework solution is based on the use of metamodels describing family of languages. In addition to this, it is also described how to use the approach and its support, with other metamodels.", "num_citations": "34\n", "authors": ["819"]}
{"title": "Extending a taxonomy of bad code smells with metrics\n", "abstract": " Bad Smells define in an informal way code flaws, in order to suggest refactorings, their aim is to improve the design of the code. Current taxonomies group code smells, making use of similarity or correlation criteria between them, and leading to a manual revision of the code. By other side, it is suggested the assistance of using metrics in the detection of bad smells. Metrics can be collected automatically helping to suggest the presence of flaws. Nevertheless, current taxonomies do not link these concepts.This work tries to establish additional criteria when we want to classify bad smells. These criteria are also related to metric features. Following the current classifications, we propose a method to evaluate the suitability of the tools assisting bad code smell detection, as well as selection and implementation of metrics linked with bad code smells.", "num_citations": "26\n", "authors": ["819"]}
{"title": "MR-DIS: democratic instance selection for big data by MapReduce\n", "abstract": " Instance selection is a popular preprocessing task in knowledge discovery and data mining. Its purpose is to reduce the size of data sets maintaining their predictive capabilities. The usual emerging problem at this point is that these methods quite often suffer of high computational complexity, which becomes highly inconvenient for processing huge data sets. In this paper, a parallel implementation for the instance selection algorithm Democratic Instance Selection (DIS) is presented. The main advantages of the DIS algorithm turn out to be its computational complexity, linear in the number of instances, as well as its internal structure, intuitively parallelizable. The purpose of this paper is threefold: firstly, the design of the DIS algorithm by following the MapReduce model; secondly, its implementation in the popular big data framework Spark; and finally, its empirical comparison over large-scale data sets. The\u00a0\u2026", "num_citations": "25\n", "authors": ["819"]}
{"title": "Object-Oriented Design Knowledge: Principles, Heuristics and Best Practices: Principles, Heuristics and Best Practices\n", "abstract": " In order to properly understand a field, a researcher has to first understand the accumulated knowledge of that field. Micro-architectural design has accumulated knowledge elements that are clearly defined. These elements, such as design patterns, are properly differentiated and generally understood, but other elements? such as heuristics, best practices, and others? are just vague concepts. Object-Oriented Design Knowledge: Principles, Heuristics and Best Practices provides a unified and global vision about the lesser-defined areas of micro-architectural design knowledge, exposing the main techniques, experiences, and methods in order to help researchers apply these concepts. Understanding the experiences presented in this book will help readers correctly apply design knowledge.", "num_citations": "25\n", "authors": ["819"]}
{"title": "Implantaci\u00f3n de UBUVirtual en la Universidad de Burgos: evaluaci\u00f3n y expectativas de uso\n", "abstract": " Este estudio eval\u00faa la utilizaci\u00f3n, por parte de alumnos y profesores, de la nueva plataforma de apoyo a la docencia de la Universidad de Burgos (UBUVirtual), analizando adem\u00e1s las valoraciones de los docentes del proceso de migraci\u00f3n desde la antigua plataforma. Los datos se han obtenido de la base de datos de Moodle y mediante encuestas a profesores. Los resultados muestran un uso adecuado de la plataforma por parte de alumnos y docentes, si bien se debe trabajar en incrementar los recursos disponibles y especialmente las actividades colaborativas.", "num_citations": "20\n", "authors": ["819"]}
{"title": "Parallel inheritance hierarchy: Detection from a static view of the system\n", "abstract": " We expose a case study of a bad smell detection through metrics. In practice, bad smell detection emerges from human observations. Metrics allow to obtain an objective view of the software, so they must be used as instruments to detect bad smells. Concretely, we focus in the bad smell: Parallel Inheritance Hierarchy, using a metric subset. Although it is not a serious bad smell, however its detection is difficult in large and medium size systems. Besides, it is usually necessary to have several versions of the system to detect its presence.We define a process to manage the big amount of data extracted from a system to determine where exists this bad smell, only with an available version. The saving of time and effort in this process is showed as an advantage opposite to other solutions.", "num_citations": "16\n", "authors": ["819"]}
{"title": "Emerging topics in mining software repositories\n", "abstract": " A software process is a set of related activities that culminates in the production of a software package: specification, design, implementation, testing, evolution into new versions, and maintenance. There are also other supporting activities such as configuration and change management, quality assurance, project management, evaluation of user experience, etc. Software repositories are infrastructures to support all these activities. They can be composed with several systems that include code change management, bug tracking, code review, build system, release binaries, wikis, forums, etc. This position paper on mining software repositories presents a review and a discussion of research in this field over the past decade. We also identify applied machine learning strategies, current working topics, and future challenges for the improvement of company decision-making systems. Machine learning is defined\u00a0\u2026", "num_citations": "15\n", "authors": ["819"]}
{"title": "Un Framework para la reutilizaci\u00f3n de la definici\u00f3n de refactorizaciones\n", "abstract": " Actualmente la inclusi\u00f3n de refactorizaciones en los entornos de desarrollo orientados a un lenguaje concreto de programaci\u00f3n est\u00e1 ampliamente extendida. Sin embargo se detecta una p\u00e9rdida de reutilizaci\u00f3n del esfuerzo realizado cuando se implementan esas mismas refactorizaciones para otros lenguajes de programaci\u00f3n. El presente trabajo expone el diseno de los distintos elementos de un motor de refactorizaciones que permite definir y aplicar refactorizaciones. Su diseno basado en frameworks abre la posibilidad de extensi\u00f3n sobre otros lenguajes y otras refactorizaciones, de cara al desarrollo para y con reutilizaci\u00f3n de herramientas de soporte a la refactorizaci\u00f3n de c\u00f3digo. Por otro lado tambi\u00e9n se discuten diferentes alternativas de diseno frente al problema de regeneraci\u00f3n de c\u00f3digo una vez realizadas las refactorizaciones.", "num_citations": "11\n", "authors": ["819"]}
{"title": "From Bad Smells to Refactoring: Metrics Smoothing the Way\n", "abstract": " This chapter presents a study on the relation of refactoring, bad smells, and metrics. The notions of refactoring and bad smells are revised as well as metrics that can be used as guides in the refactoring process. Connection among those metrics, the usual flaws that could be suggested by them, and the required corrective actions to reduce or erase these flaws are analyzed. The usual flaws can be described in terms of bad smells and the corrective actions, in terms of the refactoring operations suggested by each bad smell. Then, we can go from metrics to bad smells and from this, to refactoring. The chapter also describes solutions for tool support in a language independent manner. In this sense, it describes the tool architecture which can be defined as metamodel-centered. A metamodel representing a family of languages is defined as well as framework based solutions for collecting metrics, as well as for a\u00a0\u2026", "num_citations": "10\n", "authors": ["819"]}
{"title": "Relative thresholds: Case study to incorporate metrics in the detection of bad smells\n", "abstract": " To detect flaws, bad smells, etc, we often use quantitative methods: metrics or measures. It is common in practice to use thresholds to set the correctness of the measures. Most of the current tools use generic values. Nevertheless, there is a certain concern about the effects of threshold applications on obtained values. Current research is working on case studies of thresholds for several products and different versions. However, product domain and size could also affect the results, so we deal with the question of using generic vs. relative thresholds, looking at what effects this could have in bad smell detection.", "num_citations": "10\n", "authors": ["819"]}
{"title": "Early and extremely early multi-label fault diagnosis in induction motors\n", "abstract": " The detection of faulty machinery and its automated diagnosis is an industrial priority because efficient fault diagnosis implies efficient management of the maintenance times, reduction of energy consumption, reduction in overall costs and, most importantly, the availability of the machinery is ensured. Thus, this paper presents a new intelligent multi-fault diagnosis method based on multiple sensor information for assessing the occurrence of single, combined, and simultaneous faulty conditions in an induction motor. The contribution and novelty of the proposed method include the consideration of different physical magnitudes such as vibrations, stator currents, voltages, and rotational speed as a meaningful source of information of the machine condition. Moreover, for each available physical magnitude, the reduction of the original number of attributes through the Principal Component Analysis leads to retain a\u00a0\u2026", "num_citations": "9\n", "authors": ["819"]}
{"title": "Proceso de gesti\u00f3n de trabajos fin de carrera\n", "abstract": " El desarrollo de trabajos final de carrera en las actuales titulaciones de inform\u00e1tica es una de las materias fundamentales a la conclusi\u00f3n de los estudios. En las propuestas de grado y m\u00e1ster este punto sigue siendo fundamental, no existiendo apenas discusi\u00f3n en la necesidad de realizar un proyecto donde se aglutinen todos los conocimientos y competencias, que han sido adquiridos a lo largo de los estudios realizados. En este trabajo, se propone un modelo de gesti\u00f3n de la asignatura dentro de un contexto universitario, aplicando buenas pr\u00e1cticas de ingenier\u00eda del software: monitorizaci\u00f3n, control de proceso, revisiones, evaluaci\u00f3n y medici\u00f3n. A partir de dicho modelo se describe una herramienta que lo automatiza, y se muestran dos casos de estudio resultado de su aplicaci\u00f3n. El primero muestra los productos obtenidos de la aplicaci\u00f3n del proceso. El segundo compara los resultados al utilizar la herramienta de evaluaci\u00f3n entre trabajos de dos asignaturas distintas de proyectos: la de ingenier\u00eda y la de ingenier\u00eda t\u00e9cnica en inform\u00e1tica.", "num_citations": "9\n", "authors": ["819"]}
{"title": "Design of e-activities for the learning of code refactoring tasks\n", "abstract": " In this work a number of online e-activities are presented for the process of teaching and learning of code refactoring tasks. The pedagogical design of the set of activities is progressive, according to the levels of knowledge of Bloom's taxonomy. First, activities to help knowing and understanding a concept are proposed, then activities to apply refactorings in the context of small software implementations, and last, the analysis and synthesis of the use of refactorings in software maintenance tasks in open source projects. The resources used to solve the activities are related to those the student may find during their professional career, if oriented towards software development: integrated development environments, task tracking systems and revision control systems. It is also described the use of these e-activities in the context of the course Software Engineering of the Bachelor's Degree in Computer Science at the\u00a0\u2026", "num_citations": "8\n", "authors": ["819"]}
{"title": "Pruebas de caja negra: una experiencia real en laboratorio\n", "abstract": " En este trabajo se presenta la problem\u00e1tica de la realizaci\u00f3n de pruebas de caja negra en laboratorios de programaci\u00f3n, as\u00ed como la experiencia realizada con el objetivo de resolver dichos problemas. Explicando las aproximaciones iniciales y experiencias previas efectuadas en cursos anteriores, se propone un proceso de preparaci\u00f3n a la realizaci\u00f3n de pr\u00e1cticas, un desarrollo de las mismas, as\u00ed como un resumen de los resultados obtenidos desde la \u00f3ptica del alumnado. Se concluye con unas reflexiones sobre la experiencia por parte del profesorado. De manera adicional, se plantean problemas y sus soluciones para cada uno de los temas que no son usualmente resueltos en las pruebas en orientaci\u00f3n a objetos: pruebas de interfaces y pruebas de clases gen\u00e9ricas. El prop\u00f3sito final es dar una propuesta que pueda ser reproducida en otros entornos y contextos universitarios, teniendo en cuenta los resultados aqu\u00ed mostrados.", "num_citations": "8\n", "authors": ["819"]}
{"title": "Label prediction on issue tracking systems using text mining\n", "abstract": " Issue tracking systems are overall change-management tools in software development. The issue-solving life cycle is a complex socio-technical activity that requires team discussion and knowledge sharing between members. In that process, issue classification facilitates an understanding of issues and their analysis. Issue tracking systems permit the tagging of issues with default labels (e.g., bug, enhancement) or with customized team labels (e.g., test failures, performance). However, a current problem is that many issues in open-source projects remain unlabeled. The aim of this paper is to improve maintenance tasks in development teams, evaluating models that can suggest a label for an issue using its text comments. We analyze data on issues from several GitHub trending projects, first by extracting issue information and then by applying text mining classifiers (i.e., support vector machine and naive\u00a0\u2026", "num_citations": "7\n", "authors": ["819"]}
{"title": "Caracterizaci\u00f3n de refactorizaciones para la implementaci\u00f3n en herramientas\n", "abstract": " Aunque existen varias clasificaciones de refactorizaciones, ninguna est\u00e1 orientada a guiar su implementaci\u00f3n. Este trabajo establece unos criterios de caracterizaci\u00f3n considerando el proceso completo de refactorizaci\u00f3n. A trav\u00e9s de \u00e9stos, se asiste a la selecci\u00f3n de un conjunto de refactorizaciones relacionadas, as\u00ed como un orden de implementaci\u00f3n de las mismas. Se proporciona un modelo de caracterizaci\u00f3n abierto para cualificar y cuantificar la complejidad de las refactorizaciones incluidas en distintos cat\u00e1logos. Utilizando el modelo se presenta un caso de estudio, para guiar la decisi\u00f3n de implementaci\u00f3n relacionada con el orden de implementaci\u00f3n y selecci\u00f3n de refactorizaciones asociadas con un conocimiento declarativo.", "num_citations": "7\n", "authors": ["819"]}
{"title": "The identification of anomalous code measures with conditioned interval metrics\n", "abstract": " Anomalous measurements are identified in the software measurement process using valid metrics intervals. In the particular case of code measurements, the same intervals are used independently of the nature of the problem solved by the entity being measured. Our proposal is to condition the measurement intervals according to the nature of the problem solved by the said code entity. By \u2018nature\u2019we understand that which is expressed through standard UML classifier stereotypes. This paper identifies the requirements needed for a code measurement support tool to be able to take on this new perspective. Using these requirements as a basis, some existing tools are reviewed and the difficulty of applying this proposal with its current functionality is recognized. To this end, we present the adaptation of one of the reviewed tools (RefactorIt) and, in addition, the measurement process is applied to ten real projects, obtaining some initial intervals conditioned by the nature of the code entities.", "num_citations": "6\n", "authors": ["819"]}
{"title": "Evaluaci\u00f3n de la eficiencia de m\u00e9todos de identificaci\u00f3n del defecto de diseno godclass\n", "abstract": " La identificaci\u00f3n de defectos de diseno en entidades de c\u00f3digo es una de las tareas del proceso de mantenimiento del software que sirve para evaluar la calidad de un sistema. Un defecto de diseno describe una situaci\u00f3n que sugiere un problema potencial en la estructura del software. La intenci\u00f3n de diseno de la entidad, que puede ser expresada como estereotipos de clasificadores est\u00e1ndar de UML, proporciona una fuente de informaci\u00f3n utilizada en algunas definiciones textuales de defectos. En las entidades de c\u00f3digo de un sistema software orientado a objetos la informaci\u00f3n de estereotipos UML no suele estar disponible expl\u0131citamente, aunque los disenadores y programadores la hayan tenido en cuenta en sus soluciones. En la pr\u00e1ctica de la automatizaci\u00f3n de detecci\u00f3n de defectos de diseno, esta informaci\u00f3n es obviada a pesar de su posible utilidad en el proceso de identificaci\u00f3n de defectos. Actualmente existen m\u00e9todos de identificaci\u00f3n del defecto de diseno GodClass basados en m\u00e9tricas de c\u00f3digo. Incluso existen herramientas que lo automatizan, como InCode y JDeodorant, ambas avaladas con importantes publicaciones de investigaci\u00f3n, en las que esta informaci\u00f3n no se tiene en cuenta. Nosotros proponemos utilizar t\u00e9cnicas de aprendizaje supervisado basado en clasificadores de tipo \u00e1rbol de decisi\u00f3n, para modelar el problema de la detecci\u00f3n de defectos de diseno como una clasificaci\u00f3n de entidades de c\u00f3digo \u201ccon defecto\u201d o \u201csin defecto\u201d. La clasificaci\u00f3n inicial en la fase de entrenamiento se puede obtener a partir de los m\u00e9todos actuales. Este trabajo presenta un caso de estudio para evaluar c\u00f3mo influye la\u00a0\u2026", "num_citations": "5\n", "authors": ["819"]}
{"title": "Gesti\u00f3n de trabajos fin de carrera\n", "abstract": " El desarrollo de trabajos final de carrera en las actuales titulaciones de inform\u00e1tica es una de las materias fundamentales a la conclusi\u00f3n de los estudios. En las propuestas de grado y m\u00e1ster este punto sigue siendo fundamental, no existiendo apenas discusi\u00f3n en la necesidad de realizar un proyecto, donde se aglutinen todos los conocimientos y competencias, que han sido adquiridos a lo largo de los estudios realizados. Sin embargo, la gesti\u00f3n y desarrollo de esta asignatura tiene unas caracter\u00edsticas muy particulares: alto grado de profesorado involucrado, tutor\u00edas personalizadas, contenidos personalizados, etc. Por otro lado, la gesti\u00f3n de proyectos es un tema ampliamente tratado en Ingenier\u00eda del Software con gran cantidad de tareas asociadas. En este trabajo, se propone un modelo de gesti\u00f3n de la asignatura dentro de un contexto universitario, aplicando buenas pr\u00e1cticas de ingenier\u00eda del software\u00a0\u2026", "num_citations": "5\n", "authors": ["819"]}
{"title": "Hacia una soluci\u00f3n basada en frameworks para la definici\u00f3n de refactorizaciones con independencia del lenguaje.\n", "abstract": " En este trabajo se presenta el estudio de un conjunto de refactorizaciones desde el punto de vista de un lenguaje modelo. El objetivo es validar la factibilidad de llevar a cabo, sobre un framework que conceptualice las abstracciones del lenguaje modelo, las operaciones de refactorizaci\u00f3n definidas en base a dichas abstracciones. De esta manera se avanza hacia una soluci\u00f3n al desarrollo de herramientas de refactorizaci\u00f3n con independencia del lenguaje. El trabajo tambi\u00e9n presenta el estudio de un lenguaje (GJ, Generic Java) como instancia del lenguaje modelo, de manera que se avanza tambi\u00e9n en la validaci\u00f3n del modelo desde el punto de vista de la factibilidad de instanciar el framework para diferentes lenguajes.", "num_citations": "5\n", "authors": ["819"]}
{"title": "Uso de GitHub en el dise\u00f1o de e-actividades para la refactorizaci\u00f3n del software\n", "abstract": " [ES]El objetivo de este trabajo es dise\u00f1ar, planificar, aplicar y evaluar actividades docentes que ayuden en el proceso de ense\u00f1anza y aprendizaje del concepto de refactorizaci\u00f3n. La metodolog\u00eda did\u00e1ctica seguida se basa en dos pilares. El primero es en un aprendizaje progresivo del concepto de refactorizaci\u00f3n mediante e-actividades definidas en diferentes niveles de conocimiento de la taxonom\u00eda de Bloom (conocer, comprender, aplicar, analizar, sintetizar). El segundo es la utilizaci\u00f3n de recursos en las e-actividades, que est\u00e9n relacionados con los que el estudiante podr\u00e1 encontrarse al ejercer su carrera profesional orientada al desarrollo del software: entornos de desarrollo integrados y repositorios de gesti\u00f3n de proyectos. El resultado del trabajo es la definici\u00f3n de un conjunto de e-actividades de refactorizaci\u00f3n de c\u00f3digo Java, donde se utiliza de diferentes formas seg\u00fan el tipo de e-actividad, la funcionalidad del versionado del repositorio de proyectos de c\u00f3digo abierto GitHub. Bajo estas premisas se dise\u00f1an cinco tipos de e-actividades: lecturas y comprensi\u00f3n, pruebas objetivas, aprendizaje basado en problemas, estudio de casos y seminarios virtuales. Las e-actividades dise\u00f1adas se aplican en el contexto de una asignatura de Ingenier\u00eda del Software del Grado en Ingenier\u00eda Inform\u00e1tica de la Universidad de Burgos. El trabajo concluye analizando preliminarmente algunas consecuencias de la experiencia, tanto desde la perspectiva de utilizar estas nuevas e-actividades en el proceso de ense\u00f1anza aprendizaje, como desde la perspectiva de carga de trabajo que supone al docente y al estudiante.", "num_citations": "4\n", "authors": ["819"]}
{"title": "M\u00f3dulo Moodle para Gestionar Trabajos Final de Grado o M\u00e1ster.\n", "abstract": " These subjects are atypical as have a number of peculiarities that make them special and complex, and therefore can make a virtual learning environment does not quite fit easily. This paper presents a management process to apply in these subjects and introduces and describes a Moodle 1.9 module that implements the defined process.", "num_citations": "3\n", "authors": ["819"]}
{"title": "Final year project management process\n", "abstract": " Development of final year projects on current IT degrees is one of the key subjects at the end of the studies. It is besides a key factor on degree and masters offers in European convergence process, and there is little discussion on the necessity to instruct students how to develop a project which can bring together the knowledge and competences acquired throughout their studies. In this work, a subject management model within a university context is proposed. Good Software Engineering Practices are applied: monitoring, process control, reviews, evaluation and measurement. Based on this model an automated-tool is described, along through two case studies showing results of its application. The first case study shows the products obtained out of the process' application. Second case study shows the results obtained when using the evaluation tool to compare final year projects in two different subjects: on one hand for the IT Engineering Hons (Ingenier\u00eda Inform\u00e1tica II, 5 years) and, or the other hand, for the IT Management Engineering (Ingenier\u00eda Inform\u00e1tica de Gesti\u00f3n ITIG, 3 years).", "num_citations": "3\n", "authors": ["819"]}
{"title": "Estudio de la distribuci\u00f3n docente de pruebas del software y refactoring para la incorporaci\u00f3n de metodolog\u00edas \u00e1giles\n", "abstract": " En este trabajo se presenta una propuesta para incorporar en las titulaciones de inform\u00e1tica la docencia relativa a pruebas del software y refactoring.Se busca introducir de una manera gradual y acorde a las etapas de desarrollo las distintas t\u00e9cnicas y herramientas en dichos campos, frente a la problem\u00e1tica actual de intentar llevar a cabo metodolog\u00edas \u00e1giles en experiencias de laboratorio y trabajos final de carrera, debido a la falta de conocimientos en estos temas por parte de los alumnos.", "num_citations": "3\n", "authors": ["819"]}
{"title": "Rotation Forest for Big Data\n", "abstract": " The Rotation Forest classifier is a successful ensemble method for a wide variety of data mining applications. However, the way in which Rotation Forest transforms the feature space through PCA, although powerful, penalizes training and prediction times, making it unfeasible for Big Data. In this paper, a MapReduce Rotation Forest and its implementation under the Spark framework are presented. The proposed MapReduce Rotation Forest behaves in the same way as the standard Rotation Forest, training the base classifiers on a rotated space, but using a functional implementation of the rotation that enables its execution in Big Data frameworks. Experimental results are obtained using different cloud-based cluster configurations. Bayesian tests are used to validate the method against two ensembles for Big Data: Random Forest and PCARDE classifiers. Our proposal incorporates the parallelization of both the\u00a0\u2026", "num_citations": "2\n", "authors": ["819"]}
{"title": "An innovative moodle final project management module for bachelor and master's studies\n", "abstract": " Bachelor and master's qualifications include assignments that involve the preparation of final projects. Their underlying pedagogical model is often based on final or end-of-course projects, which carry a high number of ECTS credits (12 or more), to be completed over one semester. Each project, which simulates a real life professional situation, is completed by an individual student or a group of students in their last year of a university graduate or post-graduate course, in the case of engineering and architecture degrees. The special and complex perculiarities of these atypical assignments mean that they are not easily adapted to a virtual learning environment. This paper defines a management process for such projects and introduces a Moodle 1.9 module for its implementation.", "num_citations": "2\n", "authors": ["819"]}
{"title": "Detecci\u00f3n de la Copia de Pr\u00e1cticas de Programaci\u00f3n con JDup\n", "abstract": " Un problema bien conocido a la hora de evaluar a los alumnos, en el \u00e1mbito de la programaci\u03ccn, es lo f\u00e1cil y habitual que resulta la copia de la pr\u00e1cticas. Si se quiere realizar una evaluaci\u03ccn justa y objetiva, el docente debe disponer de herramientas que faciliten la labor de separar las pr\u00e1cticas originales, fruto del trabajo de los alumnos, de aquellas entregas, fruto de la mera acci\u03ccn del plagio o copia. Con este objetivo, se presenta y describe en este trabajo una herramienta que facilita la labor de detecci\u03ccn de copias a trav\u00e9s de indicadores de similitud. Trabajando con un volumen notable de entrega de pr\u00e1cticas, y con unos recursos m\u00ednimos, habilita de una manera amigable la detecci\u03ccn y la generaci\u03ccn de informes de similitud de pr\u00e1cticas. Esto permite un an\u00e1lisis m\u00e1s completo por parte del docente, para detectar y tratar de solucionar este problema.", "num_citations": "2\n", "authors": ["819"]}
{"title": "Un caso de estudio sobre la identificaci\u00f3n de valores umbrales para medidas de c\u00f3digo\n", "abstract": " La identificaci\u00f3n de medidas an\u00f3malas, bas\u00e1ndose en valores umbrales de diferentes m\u00e9tricas, es uno de los recursos m\u00e1s utilizados para detectar posibles problemas en elementos software. En el caso particular del c\u00f3digo, esta identificaci\u00f3n puede afectar sobre todo al mantenimiento del mismo. En cuanto se refiere a valores umbrales de medidas de c\u00f3digo, hemos constatado que para construir dichos valores umbrales, no se tiene en cuenta la naturaleza del problema que resuelve la entidad. En este contexto definimos la naturaleza del problema como aquella que se expresa con estereotipos est\u00e1ndar de clasificadores UML. Nuestra hip\u00f3tesis de partida es que los valores umbrales de medidas est\u00e1n condicionados por la naturaleza del problema que resuelve dicha entidad de c\u00f3digo. El trabajo presenta un caso de estudio con un doble objetivo, por un lado, definir una clasificaci\u00f3n de entidades de c\u00f3digo que se pueda automatizar, y por otro lado, estudiar la relaci\u00f3n entre la clasificaci\u00f3n y las medidas de las entidades. Los objetos para obtener la clasificaci\u00f3n son proyectos de c\u00f3digo abierto y los sujetos son un experto y dos estudiantes. Los resultados obtenidos han sido una clasificaci\u00f3n de entidades y la constataci\u00f3n emp\u0131rica de la existencia de relaci\u00f3n entre la clasificaci\u00f3n y las medidas.", "num_citations": "2\n", "authors": ["819"]}
{"title": "Approx-SMOTE: Fast SMOTE for Big Data on Apache Spark\n", "abstract": " One of the main goals of Big Data research, is to find new data mining methods that are able to process large amounts of data in acceptable times. In Big Data classification, as in traditional classification, class imbalance is a common problem that must be addressed, in the case of Big Data also looking for a solution that can be applied in an acceptable execution time. In this paper we present Approx-SMOTE, a parallel implementation of the SMOTE algorithm for the Apache Spark framework. The key difference with the original SMOTE, besides parallelism, is that it uses an approximated version of k-Nearest Neighbor which makes it highly scalable. Although an implementation of SMOTE for Big Data already exists (SMOTE-BD), it uses an exact Nearest Neighbor search, which does not make it entirely scalable. Approx-SMOTE on the other hand is able to achieve up to 30 times faster run times without sacrificing the\u00a0\u2026", "num_citations": "1\n", "authors": ["819"]}
{"title": "LESSON PLAN AN INTERACTIVE DIGITAL NOTEPAD TO UPGRADE FOREIGN LANGUAGE TEACHER EDUCATION DURING PRACTICUM\n", "abstract": " 1.1. Why an Interactive Digital Notepad for Practicum Management? In 21st century, internationalisation and exceptional measures on education derived from global health problems demand rapid technological changes that challenge current practices in teacher education (Townsend, 2011). It is undeniable that teacher training has become more international in the last decades (Mart\u00ednez-Rodr\u00edguez, 2004). International school placement offers teacher candidates benefits on both personal and professional levels (Lee, 2011). However, there is an evident lack of unified formats for teacher training programs at an international level. National agencies tend to work in each country separately and this embeds initial teacher education with an excessively local projection (Karatsiori, 2019). The implementation of Practicum abroad has been recommended as a meaningful and consciousness-raising opportunity, and\u00a0\u2026", "num_citations": "1\n", "authors": ["819"]}
{"title": "Evaluaci\u00f3n de c\u00f3digo mediante m\u00faltiples intervalos de m\u00e9tricas\n", "abstract": " La evoluci\u00f3n y mantenimiento del c\u00f3digo incorporan en su proceso actividades de medici\u00f3n para detectar posibles defectos y proponer mejoras. Una manera de detectar anomal\u00edas sobre entidades de c\u00f3digo se basa en comprobar que el valor de una m\u00e9trica est\u00e1 fuera de un intervalo de valores recomendados. En este sentido, desde la d\u00e9cada de los 90, existen multitud de trabajos que proponen de manera emp\u00edrica intervalos recomendables para un conjunto de las mismas. Una de las cr\u00edticas expuesta en la literatura a este planteamiento es la dificultad de transportar estos resultados a otros contextos. La determinaci\u00f3n de los valores que comprenden el intervalo puede estar condicionada por m\u00faltiples variables, entre ellas la relacionada con la naturaleza del problema que resuelve: excepciones, interfaces gr\u00e1ficas, modelo, controladores y pruebas. Esta informaci\u00f3n puede ser incorporada por el usuario en el proceso de medici\u00f3n, transform\u00e1ndolo en semiautom\u00e1tico. Para corroborar esta hip\u00f3tesis, en este trabajo se define un caso de estudio donde el proceso de medici\u00f3n es guiado por el inspector/evaluador, que clasifica las entidades de c\u00f3digo a medir dependiendo su naturaleza. Como resultado del caso de estudio se propone unos intervalos relativos a las m\u00e9tricas para los diferentes tipos y relativos a una organizaci\u00f3n concreta.", "num_citations": "1\n", "authors": ["819"]}
{"title": "Refactorizaciones en la Migraci\u00f3n del Software\n", "abstract": " Es habitual que el software evolucione y cambie. Partiendo de las nuevas posibilidades del lenguaje, algunas migraciones entre versiones no implican cambios funcionales pero s\u0131 una forma diferente de utilizaci\u00f3n de la aplicaci\u00f3n, biblioteca o framework, manteniendo el mismo comportamiento observable. En este trabajo se presenta c\u00f3mo el concepto de refactorizaci\u00f3n es una soluci\u00f3n que permite automatizar este tipo de migraciones. En particular se mostrar\u00e1 el estudio realizado sobre el uso de anotaciones en la nueva versi\u00f3n de un framework ampliamente extendido, como es JUnit. Partiendo de las nueva gu\u0131a de instanciaci\u00f3n del framework, se definen, construyen y ejecutan refactorizaciones que permiten facilitar la migraci\u00f3n de tests realizados en versiones previas, utilizando los nuevos elementos.", "num_citations": "1\n", "authors": ["819"]}
{"title": "Experiencias de Colaboraci\u00f3n con Empresas en la Realizaci\u00f3n de Proyectos Fin de Carrera de la Ingenier\u00eda en Inform\u00e1tica de Gesti\u00f3n de la Universidad de Burgos\n", "abstract": " El presente art\u00edculo presenta algunas de las experiencias que el \u00e1rea de Lenguajes y Sistemas Inform\u00e1ticos de la Universidad de Burgos ha tenido en la realizaci\u00f3n de proyectos fin de carrera en colaboraci\u00f3n con empresas. En opini\u00f3n de los autores es sumamente interesante que los alumnos puedan aprovechar la realizaci\u00f3n de su proyecto fin de carrera para ser protagonistas de una experiencia de trabajo en un entorno real.", "num_citations": "1\n", "authors": ["819"]}
{"title": "Afrontando la Evoluci\u00f3n de los Lenguajes de Programaci\u00f3n a trav\u00e9s de Refactorizaciones\n", "abstract": " El c\u00f3digo fuente juega un papel fundamental en las labores de mantenimiento del software, sufriendo un cambio continuo motivado por la detecci\u00f3n de errores, la correcci\u00f3n de defectos en el diseno, cambios en los requisitos, etc (mantenimiento correctivo, perfectivo y evolutivo). Pero se da la particularidad de que a medida que se hacen cambios sobre el c\u00f3digo fuente, los mismos fundamentos del lenguaje de programaci\u00f3n utilizado, las especificaciones o est\u00e1ndares tambi\u00e9n cambian. Esto introduce en la pr\u00e1ctica nuevos retos en el mantenimiento, dado que surge una nueva causa para modificar el c\u00f3digo dada por caracter\u0131sticas del lenguaje que pasan a estar en desuso y por las nuevas caracter\u0131sticas introducidas en el lenguaje, que ofrecen un conjunto de nuevas posibilidades de realizaci\u00f3n en diseno. Las operaciones de refactorizaci\u00f3n de software, definidas como operaciones que ejecutan cambios en la estructura del c\u00f3digo que no alteran su comportamiento, y las herramientas que asisten o automatizan en la ejecuci\u00f3n de estas operaciones, brindan una forma organizada y controlada de afrontar la transformaci\u00f3n del c\u00f3digo para adaptarse a la evoluci\u00f3n del lenguaje de programaci\u00f3n. En el presente trabajo se expone la definici\u00f3n, construcci\u00f3n y ejecuci\u00f3n de algunas operaciones de refactorizaci\u00f3n que permiten transformar el c\u00f3digo fuente para adaptarse a la evoluci\u00f3n del lenguaje de programaci\u00f3n.", "num_citations": "1\n", "authors": ["819"]}