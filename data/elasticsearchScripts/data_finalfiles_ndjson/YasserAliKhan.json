{"title": "Using model transformation to refactor use case models based on antipatterns\n", "abstract": " Use Case modeling is a popular technique for documenting functional requirements of software systems. Refactoring is the process of enhancing the structure of a software artifact without changing its intended behavior. Refactoring, which was first introduced for source code, has been extended for use case models. Antipatterns are low quality solutions to commonly occurring design problems. The presence of antipatterns in a use case model is likely to propagate defects to other software artifacts. Therefore, detection and refactoring of antipatterns in use case models is crucial for ensuring the overall quality of a software system. Model transformation can greatly ease several software development activities including model refactoring. In this paper, a model transformation approach is proposed for improving the quality of use case models. Model transformations which can detect antipattern instances in a\u00a0\u2026", "num_citations": "18\n", "authors": ["2040"]}
{"title": "Mutation operators for the atlas transformation language\n", "abstract": " Faults in model transformations will result in defective models, and eventually defective code. Correction of defects at the code level is considered very late and is often expensive. Uncorrected defects in the models will propagate to other artifacts; thus, adversely affecting the quality of the end product. Moreover, defect propagation may result in a system that does not meet the stakeholders' requirements. Therefore, model transformations must be thoroughly tested to maintain product quality, while keeping development cost at reasonable levels. Existing literature on model transformation verification and validation has considered coverage based techniques. Mutation testing is a popular technique that has been extensively studied in the literature, and shown to perform better than coverage based techniques. To support the mutation testing of model transformations, this paper proposes a suite of mutation operators\u00a0\u2026", "num_citations": "14\n", "authors": ["2040"]}
{"title": "Generating UML sequence diagrams from use case maps: a model transformation approach\n", "abstract": " Use case map (UCM) is a modeling language designed to bridge the gap between requirements and high-level design artifacts. UCM graphical models describe functional requirements as scenarios using a structure of components. UCM specifies multiple scenarios abstractly in a single integrated view that facilitates understanding of the system-to-be and the early detection of inconsistent scenarios. However, once requirements have been expressed as scenarios, unified modeling language (UML) sequence diagrams are suitable for developing and presenting the details of interactions and help in the transition to a more formal level of refinement. Typically, system analysts are responsible for this transition, and they usually perform it manually, which makes subsequent design models prone to mistakes. As a result, system analysts may design an application that does not accurately realize the behavior\u00a0\u2026", "num_citations": "10\n", "authors": ["2040"]}
{"title": "Automated Transformation of Use Case Maps to UML Activity Diagrams.\n", "abstract": " Department of Information and Computer Science King Fahd University of Petroleum and Minerals Dhahran, Kingdom of Saudi Arabia {yasera, melattar}@ kfupm. edu. sa", "num_citations": "8\n", "authors": ["2040"]}
{"title": "A model transformation approach towards refactoring use case models based on antipatterns\n", "abstract": " The quality of use case models is crucial towards the success of a software development project, especially projects that utilize a use case driven development approach. Hence, the literature has presented many approaches to improve the quality of use case models. A category of such approaches is based on revising the use case model to better reflect the intended functional requirements. These approaches are based on the detection of unsound structures in existing diagrams and then refactoring the diagrams to improve their quality. One such promising approach is the utilization of antipatterns. An antipattern will describe a debatable structure in use case diagrams and its harmful consequences. The antipattern will also describe the proper form the diagram should be in. While the detection of the unsound structures described in antipatterns has been automated, the refactoring effort to enhance the use case diagram remains a manual process, which can be cumbersome and error-prone. In this paper, we present an approach to automate the refactoring of use case diagrams using model transformation. The transformation algorithms were tested using a biodiversity database system case study. The results show the refactorings have been applied correctly and accurately.", "num_citations": "4\n", "authors": ["2040"]}
{"title": "A systematic review on the relationships between mood/qmood metrics and external software quality attributes\n", "abstract": " The MOOD and QMOOD metrics suite are one of the suites for measuring Object-Oriented (OO) designs. Empirical studies have been conducted to evaluate these metrics as indicators of external software quality attributes (ESQAs). However, there has been no attempt to systematically review and report these empirical evidences. To identify the relation of MOOD/QMOOD metrics with ESQAs, we have performed a systematic review of empirical evidences published in the literature that support or reject MOOD/QMOOD metrics as indicators of ESQAs. Our search strategy identified 413 papers, out of which 15 papers were identified as reporting empirical evidence showing relation between CK metrics and ESQAs. Our results conclude that MOOD metrics MHF and AIF have a positive relationship with functional correctness of OO designs. On the contrary, AHF MIF, and COF have a negative relationship with functional correctness. POF showed a positive relationship with maintainability, whereas COF showed a negative relationship with maintainability and reusability. QMOOD metrics DAM, CAM, and MFA have a positive relationship with functional correctness of OO classes. On the contrary, MOA CIS, and NOM have a negative relationship with functional correctness. CAM also has a positive effect on the maintainability and reusability of web services.", "num_citations": "3\n", "authors": ["2040"]}