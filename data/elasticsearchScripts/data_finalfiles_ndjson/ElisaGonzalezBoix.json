{"title": "Ambienttalk: Object-oriented event-driven programming in mobile ad hoc networks\n", "abstract": " In this paper, we describe AmbientTalk: a domain- specific language for orchestrating service discovery and composition in mobile ad hoc networks. AmbientTalk is a distributed object-oriented language whose actor-based, event-driven concurrency model makes it highly suitable for composing service objects across a mobile network. The language is a so-called ambient-oriented programming language which treats network partitions as a normal mode of operation. We describe AmbientTalk's object model, concurrency model and distributed communication model in detail. We also highlight influences from other languages and middleware that have shaped AmbientTalk's design.", "num_citations": "176\n", "authors": ["1897"]}
{"title": "An evaluation of reactive programming and promises for structuring collaborative web applications\n", "abstract": " JavaScript programs are highly event-driven, resulting in'asynchronous spaghetti'code that is difficult to maintain as the magnitude programs written in the language grows. To reduce the effects of this callback hell, various concepts have been employed by a number of JavaScript libraries and frameworks. In this paper we investigate the expressiveness of two such techniques, namely reactive extensions and promises. We have done this by means of a case study consisting of an online collaborative drawing editor. The editor supports advanced drawing features which we try to model using the aforementioned techniques. We then present a discussion on our overall experience in implementing the application using the two concepts. From this, we propose a roadmap of how to improve support of programming event-driven web applications in JavaScript.", "num_citations": "71\n", "authors": ["1897"]}
{"title": "A study of the accuracy of mobile technology for measuring urban noise pollution in large scale participatory sensing campaigns\n", "abstract": " The study reports on the relevancy and accuracy of using mobile phones in participatory noise pollution monitoring studies in an urban context. During one year, 60 participants used the same smartphone model to measure environmental noise at 28 different locations in Paris. All measurements were performed with the same calibrated application. The sound pressure level was recorded from the microphone every second during a 10-min period. The participants frequently measured the evolution of the sound level near two standard monitoring sound stations (in a square and near a boulevard), which enables the assessment of the accuracy and relevancy of collected acoustic measurements. The instantaneous A-weighting sound level, energy indicators such as LA,eq, LA10, LA50 or LA90 and event indicators such as the number of noise events exceeding a certain threshold L\u03b1 (NNEL\u00a0\u2a7e\u00a0L\u03b1) were measured and\u00a0\u2026", "num_citations": "50\n", "authors": ["1897"]}
{"title": "AmbientTalk: programming responsive mobile peer-to-peer applications with actors\n", "abstract": " The rise of mobile computing platforms has given rise to a new class of applications: mobile applications that interact with peer applications running on neighbouring phones. Developing such applications is challenging because of problems inherent to concurrent and distributed programming, and because of problems inherent to mobile networks, such as the fact that wireless network connectivity is often intermittent, and the lack of centralized infrastructure to coordinate the peers.We present AmbientTalk, a distributed programming language designed specifically to develop mobile peer-to-peer applications. AmbientTalk aims to make it easy to develop mobile applications that are resilient to network failures by design. We describe the language\u05f3s concurrency and distribution model in detail, as it lies at the heart of AmbientTalk\u05f3s support for responsive, resilient application development. The model is based on\u00a0\u2026", "num_citations": "46\n", "authors": ["1897"]}
{"title": "Using CityGML to deploy smart-city services for urban ecosystems\n", "abstract": " The rapid technological evolution, which is characterizing all the disciplines involved within the wide concept of smart cities, becomes a key factor to trigger true user-driven innovation. In this context 3D city models will play an increasingly important role in our daily lives and become an essential part of the modern city information infrastructure (Spatial Data Infrastructure). The goal of this paper is to introduce the i-SCOPE (interoperable Smart City services through an Open Platform for urban Ecosystems) project methodology and implementations together with key technologies and open standards. Based on interoperable 3D CityGML UIMs, the aim of i-Scope is to deliver an open platform on top of which it possible to develop, within different domains, various \u2018smart city\u2019services.Moreover, in i-SCOPE different issues, transcending the mere technological domain, are being tackled, including aspects dealing with social and environmental issues. Indeed several tasks including citizen awareness, crowd source and voluntary based data collection as well as privacy issue concerning involved people should be considered.", "num_citations": "41\n", "authors": ["1897"]}
{"title": "Flocks: Enabling dynamic group interactions in mobile social networking applications\n", "abstract": " Mobile social networking applications enable end-users to interact on the move. Current applications model user groups as simple lists which have to be manually enumerated. This representation is both unsuitable and inefficient for group interactions: due to the openness and the mobility to which these applications are exposed, the contents of such lists are likely to change frequently. Updating the lists manually while interacting with users quickly becomes impractical. In this paper, we introduce an alternative representation for user groups named flocks. A flock represents a loosely-defined user group in terms of an intensional description. The flock content is implicitly updated when changes occur, eg the users's location. Flocks have group interaction provisions based on asynchronous message passing. Benchmarks indicate that flocks can be implemented efficiently by exploiting structure in their definitions. We\u00a0\u2026", "num_citations": "38\n", "authors": ["1897"]}
{"title": "Mirror\u2010based reflection in AmbientTalk\n", "abstract": " This paper introduces a novel mechanism to perform intercession (a form of reflection) in an object\u2010oriented programming language with the goal of making the language extensible from within itself. The proposed mechanism builds upon a mirror\u2010based architecture, leading to a reusable reflective application programming interface that cleanly separates interface from implementation details. However, support for intercession has been limited in contemporary mirror\u2010based architectures. This is due to the fact that mirror\u2010based architectures only support reflection explicitly triggered by metaprograms, while intercession requires reflection implicitly triggered by the language interpreter. This work reconciles mirrors with intercession in the context of an actor\u2010based, object\u2010oriented programming language named AmbientTalk. We describe this language's full reflective architecture, highlighting its novel mirror\u2010based\u00a0\u2026", "num_citations": "34\n", "authors": ["1897"]}
{"title": "Orchestration support for participatory sensing campaigns\n", "abstract": " In this paper we argue the need for orchestration support for participatory campaigns to achieve campaign quality, and automatisation of said support to achieve scalability, both issues contributing to stakeholder usability. This goes further than providing support for defining campaigns, an issue tackled in prior work. We provide a formal definition for a campaign by extracting commonalities from the state of the art and expertise in organising noise mapping campaigns. Next, we formalise how to ensure campaigns end successfully, and translate this formal notion into an operational recipe for dynamic orchestration. We then present a framework for automatising campaign definition, monitoring and orchestration which relies on workflow technology. The framework is validated by re-enacting several campaigns previously run through manual orchestration and quantifying the increased efficiency.", "num_citations": "25\n", "authors": ["1897"]}
{"title": "Context-aware adaptation in DySCAS\n", "abstract": " DySCAS is a dynamically self-configuring middleware for automotive control systems. The addition of autonomic, context-aware dynamic configuration to automotive control systems brings a potential for a wide range of benefits in terms of robustness, flexibility, upgrading etc. However, the automotive systems represent a particularly challenging domain for the deployment of autonomics concepts, having a combination of real-time performance constraints, severe resource limitations, safety-critical aspects and cost pressures. For these reasons current systems are statically configured. This paper describes the dynamic run-time configuration aspects of DySCAS and focuses on the extent to which context-aware adaptation has been achieved in DySCAS, and the ways in which the various design and implementation challenges are met.", "num_citations": "24\n", "authors": ["1897"]}
{"title": "Totam: Scoped tuples for the ambient\n", "abstract": " Coordination of mobile applications posses a number of issues. Devices should be able to communicate with each other without being connected with each other at the same time while maintaining privacy and limited network traffic. Current tuple based approaches solve these issues partially but none of them solves all of them. We propose a novel tuple space-based approach where tuple spaces are annotated with tuple space descriptors used to determine the scope of a tuple. The novelty of our approach lies in the use of these tuple space descriptors to determine that a tuple should be propagated before it is transmitted. This enhances privacy and decreases the burden on the network traffic in a wide range of applications.", "num_citations": "19\n", "authors": ["1897"]}
{"title": "Linvail: A general-purpose platform for shadow execution of JavaScript\n", "abstract": " We present Linvail, a novel instrumentation platform for developing dynamic analyses of JavaScript programs. Linvail is particularly well-suited to implementing shadow executions which involve tagging runtime values with analysis-specific data. In contrast to existing instrumentation platforms, Linvail is capable of tracking both tagged objects and tagged primitive values during their entire life-time in a behavior-preserving manner. To demonstrate the expressiveness of our platform, we present the implementation of several state-of-the-art analyses. Our experiments demonstrate that Linvail's accuracy comes at the price of a performance overhead, but we believe that real-world applications will remain usable under analysis.", "num_citations": "18\n", "authors": ["1897"]}
{"title": "Citizen-friendly participatory campaign support\n", "abstract": " Participatory sensing, which appropriates wearable devices such as mobile phones to enable ad-hoc, person-centric mobile sensing networks, has the potential of delivering datasets with high spatio-temporal granularity. We argue that to obtain such datasets the concept of a participatory campaign, a recipe for gathering data to answer a particular concern, is essential, and that technological support for organising such campaigns is currently lacking. Campaign support is crucial to ensure that a dataset of adequate quality is gathered to study the concern under consideration, and additionally, to empower communities by providing them with a tool to answer local concerns and set up grassroots sensing actions without having to wait for an institutionalised action to take place. In this article we present a proof-of-concept architecture for participatory campaigns. The latter is built upon a formal definition of a campaign\u00a0\u2026", "num_citations": "18\n", "authors": ["1897"]}
{"title": "Towards scalable blockchain analysis\n", "abstract": " Analysing the blockchain is becoming more and more relevant for detecting attacks and frauds on cryptocurrency exchanges and smart contract activations. However, this is a challenging task due to the continuous growth of the blockchain. For example, in early 2017 Ethereum was estimated to contain approximately 300GB of data [1], a number that keeps growing day after day. In order to analyse such ever-growing amount of data, this paper argues that blockchain analysis should be treated as a novel type of application for Big Data platforms. In this paper we explore the application of parallelization techniques from the Big Data domain, in particular Map/Reduce, to extract and analyse information from the blockchain. We show that our approach significantly improves the index generation by 7.77 times, with a setup of 20 worker nodes, 1 Ethereum node and 1 Database node. We also share our findings of our\u00a0\u2026", "num_citations": "14\n", "authors": ["1897"]}
{"title": "Programming mobile context-aware applications with TOTAM\n", "abstract": " In tuple space approaches to context-aware mobile systems, the notion of context is defined by the presence or absence of certain tuples in the tuple space. Existing approaches define such presence either by collocation of devices holding the tuples or by replication of tuples across all devices. We show that both approaches can lead to an erroneous perception of context. Collocation ties the perception of context to network connectivity which does not always yield the expected result. Tuple replication can cause that a certain context is perceived even if the device has left the context a long time ago. We propose a tuple space approach in which tuples themselves carry a predicate that determines whether they are in the right context or not. We present a practical API for our approach and show its use by means of the implementation of various mobile applications. Benchmarks show that our approach can lead to a\u00a0\u2026", "num_citations": "14\n", "authors": ["1897"]}
{"title": "Reme-d: A reflective epidemic message-oriented debugger for ambient-oriented applications\n", "abstract": " Debuggers are an integral part, albeit often neglected, of the development of distributed applications. Ambient-oriented programming (AmOP) is a distributed paradigm for applications running on mobile ad hoc networks. In AmOP the complexity of programming in a distributed setting is married with the network fragility and open topology of mobile applications. To our knowledge, there is no comprehensive debugging approach that tackles both these issues. In this paper we present REME-D, an online debugger that integrates techniques from distributed debugging (event-based debugging, message breakpoints) and proposes facilities to deal with ad hoc, fragile networks--epidemic debugging, and support for frequent disconnections. A prototype for REME-D is implemented for the AmbientTalk language using the meta-actor protocol provided by AmbientTalk to implement its features.", "num_citations": "14\n", "authors": ["1897"]}
{"title": "Distributed Debugging for Mobile Networks\n", "abstract": " Debuggers are an integral part, albeit often neglected, of the development of distributed applications. Ambient-oriented programming (AmOP) is a distributed paradigm for applications running on mobile ad hoc networks. In AmOP the complexity of programming in a distributed setting is married with the network fragility and open topology of mobile applications. To our knowledge, there is no debugging approach that tackles both these issues. In this paper we argue that a novel kind of distributed debugger that we term an ambient-oriented debugger, is required. We present REME-D (read as remedy), an online ambient-oriented debugger that integrates techniques from distributed debugging (event-based debugging, message breakpoints) and proposes facilities to deal with ad hoc, fragile networks \u2013 epidemic debugging, and support for frequent disconnections.", "num_citations": "13\n", "authors": ["1897"]}
{"title": "Two decades of smalltalk VM development: live VM development through simulation tools\n", "abstract": " OpenSmalltalk-VM is a virtual machine (VM) for languages in the Smalltalk family (eg Squeak, Pharo) which is itself written in a subset of Smalltalk that can easily be translated to C. Development is done in Smalltalk, an activity we call \u201cSimulation\u201d. The production VM is derived by translating the core VM code to C. As a result, two execution models coexist: simulation, where the Smalltalk code is executed on top of a Smalltalk VM, and production, where the same code is compiled to an executable through a C compiler. In this paper, we detail the VM simulation infrastructure and we report our experience developing and debugging the garbage collector and the just-in-time compiler (JIT) within it. Then, we discuss how we use the simulation infrastructure to perform analysis on the runtime, directing some design decisions we have made to tune VM performance.", "num_citations": "11\n", "authors": ["1897"]}
{"title": "Context-aware leasing for mobile ad hoc networks\n", "abstract": " Distributed memory management is substantially complicated in mobile ad hoc networks due to the fact that nodes in the network only have intermittent connectivity and often lack any kind of centralized coordination facility. Leasing provides a robust mechanism to manage reclamation of remote objects in mobile ad hoc networks. However, leasing techniques limits the lifetime of remote objects based on timeouts. In mobile networks, we also observe that devices need to continuously adapt to changes in their context. In this position paper, we argue that changes in context not only require adaptation in the behaviour of the application but also permeate to distributed memory management, leading to the concept of context-aware leasing.", "num_citations": "10\n", "authors": ["1897"]}
{"title": "Ambient-oriented exception handling\n", "abstract": " Writing ambient-oriented software for mobile devices connected through wireless network connections provides new challenges in the field of exception handling. It involves dealing with issues such as asynchronous communication, moving hardware and software, only to name a few. Building on an analysis of the fundamental differences between mobile networks and their stationary counterparts, this paper establishes a set of criteria for an ambient-oriented exception handling mechanism. We subsequently present ambient conversations, a novel distributed exception handling mechanism that adheres to the prescribed criteria, and describe its realisation in the experimental ambient-oriented programming language AmbientTalk.", "num_citations": "10\n", "authors": ["1897"]}
{"title": "Out-Of-Place debugging: a debugging architecture to reduce debugging interference\n", "abstract": " Context Recent studies show that developers spend most of their programming time testing, verifying and debugging software. As applications become more and more complex, developers demand more advanced debugging support to ease the software development process. Inquiry Since the 70\u2019s many debugging solutions have been introduced. Amongst them, online debuggers provide good insight on the conditions that led to a bug, allowing inspection and interaction with the variables of the program. However, most of the online debugging solutions introduce debugging interference to the execution of the program, ie pauses, latency, and evaluation of code containing side-effects. Approach This paper investigates a novel debugging technique called out-of-place debugging. The goal is to minimize the debugging interference characteristic of online debugging while allowing online remote capabilities. An out-of-place debugger transfers the program execution and application state from the debugged application to the debugger application, each running in a different process. Knowledge On the one hand, out-of-place debugging allows developers to debug applications remotely, overcoming the need of physical access to the machine where the debugged application is running. On the other hand, debugging happens locally on the remote machine avoiding latency. That makes it suitable to be deployed on a distributed system and handle the debugging of several processes running in parallel. Grounding We implemented a concrete out-of-place debugger for the Pharo Smalltalk programming language. We show that our approach is\u00a0\u2026", "num_citations": "9\n", "authors": ["1897"]}
{"title": "Debugging cyber-physical systems with pharo: An experience report\n", "abstract": " Cyber-Physical Systems (CPS) integrate sensors and actuators to collect data and control entities in the physical world. Debugging CPS systems is hard due to the time-sensitive nature of a distributed applications combined with the lack of control on the surrounding physical environment. This makes bugs in CPS systems hard to reproduce and thus to fix. In this context, on-line debugging techniques are helpful because the debugger is connected to the device when an exception or crash occurs.", "num_citations": "9\n", "authors": ["1897"]}
{"title": "Context-aware tuples for the ambient\n", "abstract": " In tuple space approaches to context-aware mobile systems, the notion of context is defined by the presence or absence of certain tuples in the tuple space. Existing approaches define such presence either by collocation of devices holding the tuples or by replication of those tuples across all devices. We show that both approaches can lead to an erroneous perception of context. The former ties the perception of context to network connectivity which does not always yield the expected result. The latter causes context to be perceived even if a device has left that context a long time ago. We propose a tuple space approach in which tuples themselves carry a predicate that determines whether they are in the right context or not. We present a practical API for our approach and show its use by means of the implementation of a mobile game.", "num_citations": "9\n", "authors": ["1897"]}
{"title": "Putting order in strong eventual consistency\n", "abstract": " Conflict-free replicated data types (CRDTs) aid programmers develop highly available and scalable distributed systems. However, the literature describes only a limited portfolio of conflict-free data types and implementing custom ones requires additional knowledge of replication and consistency techniques. As a result, programmers resort to ad hoc solutions which are error-prone and result in brittle systems. In this paper, we introduce strong eventually consistent replicated objects (SECROs), a general-purpose data type for building available data structures that guarantee strong eventual consistency (SEC) without restrictions on the operations. To evaluate our solution we compare a real-time collaborative text editor built atop SECROs with a state-of-the-art implementation that uses JSON CRDTs. This comparison quantifies various performance aspects. The results show that SECROs are truly general\u00a0\u2026", "num_citations": "8\n", "authors": ["1897"]}
{"title": "Programming urban-area applications\n", "abstract": " The evolution of smartphones has given rise to urban-area applications: applications that communicate in a city by means of the public (moving) infrastructure, eg buses and trams. In this setting, applications need to communicate and discover each other using intermediaries that move around the city and transfer data between them. This requires programmers to scatter code that deals with routing messages to the correct place and dealing with network failures all over their programs. Our approach allows the programmer to specify urban-area applications in a high-level manner without the burden of directly encoding communication using intermediaries. We present this as a translation from a high-level object-oriented programming paradigm to a low-level communication mechanism.", "num_citations": "8\n", "authors": ["1897"]}
{"title": "Bringing Scheme programming to the iPhone\u2014Experience\n", "abstract": " The iPhone SDK provides a powerful platform for the development of applications that make use of iPhone capabilities, such as sensors, GPS, Wi\u2010Fi, or Bluetooth connectivity. We observe that so far the development of iPhone applications has mostly been restricted to using Objective\u2010C. However, developing applications in plain Objective\u2010C on the iPhone OS suffers from limitations, such as the need for explicit memory management and lack of syntactic extension mechanism. Moreover, when developing distributed applications in Objective\u2010C, programmers have to manually deal with distribution concerns, such as service discovery, remote communication, and failure handling. In this paper, we discuss our experience in porting the Scheme programming language to the iPhone OS and how it can be used together with Objective\u2010C to develop iPhone applications. To support the interaction between Scheme\u00a0\u2026", "num_citations": "8\n", "authors": ["1897"]}
{"title": "A leasing model to deal with partial failures in mobile ad hoc networks\n", "abstract": " In mobile ad hoc networks (MANETs) many partial failures are the result of temporary network partitions due to the intermittent connectivity of mobile devices. Some of these failures will be permanent and require application-level failure handling. However, it is impossible to distinguish a permanent from a transient failure. Leasing provides a solution to this problem based on the temporal restriction of resources. But to date no leasing model has been designed specifically for MANETs. In this paper, we identify three characteristics required for a leasing model to be usable in a MANET, discuss the issues with existing leasing models and then propose the leased object references model, which integrates leasing with remote object references. In addition, we describe an implementation of the model in the programming language AmbientTalk. Leased object references provide an extensible framework that\u00a0\u2026", "num_citations": "8\n", "authors": ["1897"]}
{"title": "GUARDIA: specification and enforcement of javascript security policies without VM modifications\n", "abstract": " The complex architecture of browser technologies and dynamic characteristics of JavaScript make it difficult to ensure security in client-side web applications. Browser-level security policies alone are not sufficient because it is difficult to apply them correctly and they can be bypassed. As a result, they need to be completed by application-level security policies.", "num_citations": "7\n", "authors": ["1897"]}
{"title": "Influence of loudness of noise events on perceived sound quality in urban context\n", "abstract": " One of the aims of Cart_ASUR project is to propose an indicator of urban sound quality based on perceptive and acoustic data. The originality of this project consists in using mobile phone technology to collect data. 60 persons had to assess about 20 locations in Paris at four or five homogenous periods (days, evening, night, summer, winter) with a specific questionnaire through mobiles. In the questionnaire, the first questions are related to global sound environment characterization with semantic scales. The next questions concern the perceived loudness assessment of some emergent sources (light vehicles, trucks, bus and mopeds). Finally, the last questions deals with the presence time ratio assessment of sources that do not emerge from the background (birds, voices, steps, etc). Before each assessment, sound pressure level is recorded each second from the mobile phone\u2019s microphone during a 10-minute period. In this paper, the link between global sound quality and loudness assessment of emergent sources is developed. A particular attention is devoted to the situation classification. Depending on the type of location, some identified sources have an influence on the sound quality of the environment.", "num_citations": "7\n", "authors": ["1897"]}
{"title": "Handling partial failures in mobile ad hoc network applications: From programming language design to tool support\n", "abstract": " Progress in the field of wireless technology has resulted in a growing body of research that deals with mobile ad hoc networks (MANETs): networks composed of mobile devices that are connected by wireless communication links with a limited communication range. The limited communication range of devices combined with the fact that devices move about renders applications subject to higher rates of partial failures than in traditional, stationary networks. This dissertation investigates programming language support to deal with the effects engendered by partial failures in the software development process. In particular, we investigate support for handling partial failures in MANET applications, from the programming language design to tool support. In order to support distributed programming in such a dynamically changing environment, it is worth to investigate software engineering techniques where network disconnections are not treated as the exception but the rule. This observation motivated the development of the ambient-oriented programming paradigm in which this work is rooted. Within the context of this paradigm, we propose expressive abstractions that aid developers to detect, reason about, and handle partial failures. Our survey of related work will reveal that leasing provides a solution for a failure handling model in MANETs. However, to date no leasing model has been designed specifically for MANETs. In this context, leasing needs to be reconciled with computational models that deal with transient failures, and provide a well-defined high-level interface to allow developers to handle failures in a modular and reusable way, while\u00a0\u2026", "num_citations": "7\n", "authors": ["1897"]}
{"title": "Towards Advanced Debugging Support for Actor Languages\n", "abstract": " With the ubiquity of multicore hardware, concurrent and parallel programming has become a fundamental part of software development. If writing concurrent programs is hard, debugging them is even harder. The actor model is attractive for developing concurrent applications because actors are isolated concurrent entities that communicates through asynchronous message sending and do not share state, thus they avoid common concurrency bugs such as race conditions. However, they are not immune to bugs. This paper presents initial work on a taxonomy of concurrent bugs for actor-based applications. Based on this study, we propose debugging tooling to assist the development process of actor-based applications.", "num_citations": "6\n", "authors": ["1897"]}
{"title": "Ambient Clouds: Reactive asynchronous collections for mobile ad hoc network applications\n", "abstract": " In MANET applications, a common pattern is to maintain and query time-varying collections of remote objects. Traditional approaches require programmers to manually track the connectivity state of these remote objects and adding or removing them from local collections on a per-object basis. Queries over these collections have to be manually recomputed whenever the collection or its elements change.               The code for maintaining these ad-hoc collections is scattered across the application code and leads to bugs hindering the application development process. In this paper, we propose an object-oriented abstraction called ambient clouds: a collection of objects whose contents are implicitly updated when changes occur. Ambient clouds can be queried and composed using reactive standard query operators. We show how ambient clouds ease the development of a collaborative peer-to-peer drawing\u00a0\u2026", "num_citations": "6\n", "authors": ["1897"]}
{"title": "Memory efficient crdts in dynamic environments\n", "abstract": " Modern distributed applications increasingly replicate data in order to guarantee both high availability of systems and an optimal user experience. Conflict-Free Replicated Data Types (CRDTs) are a family of data types specially designed for highly available systems which guarantee some form of eventual consistency. However, memory usage may grow unboundedly in their implementations, as garbage collection of meta-data is not tackled in most approaches.", "num_citations": "5\n", "authors": ["1897"]}
{"title": "Programming urban-area applications by exploiting public transportation\n", "abstract": " The evolution of smartphones has given rise to urban-area applications: applications that communicate in a city by means of the public (moving) infrastructure (e.g., buses and trams). In this setting, applications need to communicate with and discover each other using intermediaries that move around the city and transfer data between them. This requires programmers to scatter code that deals with routing messages to the correct place and deal with network failures all over their programs. Our approach allows the programmer to specify urban-area applications in a high-level manner without the burden of directly encoding communication using intermediaries. We present this as a translation from a high-level object-oriented programming paradigm to a low-level communication mechanism. This translation allows the programmer to restrict routing of messages to, for example, a certain number of hops, geographic\u00a0\u2026", "num_citations": "5\n", "authors": ["1897"]}
{"title": "Network-aware references for pervasive social applications\n", "abstract": " In recent years, mobile devices such as smartphones have become more powerful, gaining the ability to communicate using multiple networking technologies. This evolution has given rise to pervasive social applications that enable social networking on the move. Currently, it is hard to take advantage of the available networking technologies because communication has to be managed separately for each technology. This forces programmers to manually keep track of the connectivity state and duplicate communication code per connection. This paper presents network-aware references, a distributed object-oriented programming abstraction that combines multi-networking and network awareness. They abstract over the implementation details of the different networking technologies while allowing programmers to react to changes in the connectivity of different networks around them.", "num_citations": "5\n", "authors": ["1897"]}
{"title": "Resilient actors: a runtime partitioning model for pervasive computing services\n", "abstract": " In pervasive computing, software applications vanish into the user's environment spreading their functionality to computers integrated into everyday devices. With the current state-of-the-art software tools, these characteristics put a great burden on programmers who have to enable the applications to dynamically partition across multiple devices, and to adapt such partitioning to frequent context changes such as network failures. This paper explores service partitioning techniques for development of pervasive computing applications. We propose a resilient actor model to structurally add service partitioning property to the pervasive applications. The service partitioning realised using resilient actor model happens at runtime, is user guided and the resulting partitioned application is retractable, and resilient to network failures.", "num_citations": "5\n", "authors": ["1897"]}
{"title": "CScript: A distributed programming language for building mixed-consistency applications\n", "abstract": " Current programming models only provide abstractions for sharing data under a homogeneous consistency model. It is, however, not uncommon for a distributed application to provide strong consistency for one part of the shared data and eventual consistency for another part. Because mixing consistency models is not supported by current programming models, writing such applications is extremely difficult. In this paper we propose CScript, a distributed object-oriented programming language with built-in support for data replication. At its core are consistent and available replicated objects. CScript regulates the interactions between these objects to avoid subtle inconsistencies that arise when mixing consistency models. Our evaluation compares a collaborative text editor built atop CScript with a state-of-the-art implementation. The results show that our approach is flexible and more memory efficient.", "num_citations": "4\n", "authors": ["1897"]}
{"title": "Orchestrating dynamic analyses of distributed processes for full-stack JavaScript programs\n", "abstract": " Dynamic analyses are commonly implemented by instrumenting the program under analysis. Examples of such analyses for JavaScript range from checkers of user- defined invariants to concolic testers. For a full-stack JavaScript program, these analyses would benefit from reasoning about the state of the client-side and server-side processes it is comprised of. Lifting a dynamic analysis so that it supports full-stack programs can be challenging. It involves distributed communication to maintain the analysis state across all processes, which has to be deadlock-free. In this paper, we advocate maintaining distributed analysis state in a centralized analysis process instead \u2014 which is communicated with from the processes under analysis. The approach is supported by a dynamic analysis platform that provides abstractions for this communication. We evaluate the approach through a case study. We use the platform to\u00a0\u2026", "num_citations": "4\n", "authors": ["1897"]}
{"title": "Urbiflock: An experiment in dynamic group management in Pervasive social applications\n", "abstract": " Pervasive social applications are applications that enable end users to interact and share information on the move. In these applications, the concept of a user group plays a central role as it models the user's social networks. Most pervasive social applications today model these user groups as simple lists of users that have to be manually managed by the user to reflect the changes in a frequently changing context. Managing user groups in current frameworks is complicated because of three main reasons. There is a lack of abstractions (i) to discover users on the move, (ii) to organize these users in composable context-aware user groups, and (iii) to manage the communication between the users and groups of users. Our research focuses on providing proper abstractions to deal with the specific characteristics of user groups in pervasive social applications. In this paper we describe Urbiflock, a framework which\u00a0\u2026", "num_citations": "4\n", "authors": ["1897"]}
{"title": "A debugging approach for live Big Data applications\n", "abstract": " Many frameworks exist for programmers to develop and deploy Big Data applications such as Hadoop Map/Reduce and Apache Spark. However, very little debugging support is currently provided in those frameworks. When an error occurs, developers are lost in trying to understand what has happened from the information provided in log files. Recently, new solutions allow developers to record & replay the application execution, but replaying is not always affordable when hours of computation need to be re-executed. In this paper, we present an online approach that allows developers to debug Big Data applications in isolation by moving the debugging session to an external process when a halting point is reached. We introduce IDRAMR, our prototype implementation in Pharo. IDRAMR centralizes the debugging of parallel applications by introducing novel debugging concepts, such as composite debugging\u00a0\u2026", "num_citations": "3\n", "authors": ["1897"]}
{"title": "Connect\n", "abstract": " Set out supplies and tell children they\u2019ll be making spoon people. Demonstrate how to glue two wiggly eyes on the bowl of a spoon and wrap a chenille wire around the neck of the spoon to form arms. Encourage children to cut small lengths of yarn and glue them on the spoon for hair, and to use markers to draw facial details. As children are working, ask questions such as,\u201cWhat\u2019s special about the spoon person you\u2019re making?\u201d and \u201cWhat makes you special?\u201d Say that today they\u2019ll hear how God created people and how [Bottom Line]\u201cGod made me in His image.", "num_citations": "3\n", "authors": ["1897"]}
{"title": "A debugging approach for big data applications in pharo\n", "abstract": " Big Data applications are more and more popular; they typically analyze big sets of data from different domains. Many frameworks exist for programmers to develop and execute their Big Data applications such as Hadoop Map/Reduce and Apache Spark. However, very few debugging support is currently provided in those frameworks. When an error hap-pens, developers are lost in trying to understand what happened from the information provided in log files. Alternatively, few solutions allow to replay the execution, but they are slow and time-consuming. In this paper, we present an online approach to debug Big Data applications. We first introduce Port, a framework on top of Hadoop Yarn that al-lows to deploy and execute Pharo Map/Reduce applications. We debug applications deployed on such framework using IDRA, a novel online debugger for Pharo applications. With IDRA the running application can be debugged in a centralized way, and the code of the application can be dynamically updated to fix bugs.", "num_citations": "3\n", "authors": ["1897"]}
{"title": "Object-oriented reactive programming is not reactive object-oriented programming\n", "abstract": " According to chapter 3 of Abelson & Sussman [1], there are two fundamentally different ways to organise large systems: according to the objects that live in the system, or according to the streams of values that flow through the system. Even though the notions of \u201cobject\u201d and \u201cstream\u201d have meanwhile taken many incarnations, the dichotomy still exists in modern programming languages. Marrying reactive programming and OOP is a research endeavour to come up with a unified model that embraces both styles of thinking. We identify two opposing research tracks towards the marriage. Existing work focuses on OO reactive programming, ie, it uses object technology to compose reactions. Our work explores the converse: in the paper, we present the ROAM (Reactive Objects in AmbientTalk) model which is an experimental framework that explores objects as streams of reactive state.", "num_citations": "3\n", "authors": ["1897"]}
{"title": "Towards resilient partitioning of pervasive computing services\n", "abstract": " In pervasive computing, software applications vanish into the users' environment, spreading their functionality in computers integrated into everyday devices. This puts a great burden on programmers who have to enable the applications to dynamically partition across the devices, and to adapt such partitioning to the context of use. In this paper, we identify the need for resilient partitioning and propose the Resilient Actor model to structurally add this property to pervasive computing applications. Our model ensures that an application can be dynamically partitioned and it can always retract to the original or updated local state.", "num_citations": "3\n", "authors": ["1897"]}
{"title": "Flec: a versatile programming framework for eventually consistent systems\n", "abstract": " Modern distributed applications increasingly replicate data in order to guarantee both high availability of systems and an optimal user experience. Conflict-Free Replicated DataTypes (CRDTs) are a family of data types specially designed for highly available systems which guarantee some form of eventual consistency. However, currently CRDT implementations are hard to integrate with existing applications and/or programming languages. In this extended abstract we describe Flec, a versatile programming framework for operation-based CRDTs that ultimately can be run in any environment supporting WebAssembly.", "num_citations": "2\n", "authors": ["1897"]}
{"title": "A generic replicated data type for strong eventual consistency\n", "abstract": " Conflict-free replicated data types (CRDTs)[7] aid programmers develop highly available and scalable distributed systems. However, CRDTs require operations to commute which is not practical. This means that programmers cannot replicate regular objects without worrying about concurrency. In this paper, we introduce strong eventually consistent replicated objects (SECROs), a generic data type that is highly available and guarantees strong eventual consistency (SEC) without imposing restrictions on its operations.", "num_citations": "2\n", "authors": ["1897"]}
{"title": "Practical Information Flow Control for Web Applications\n", "abstract": " Current browser-level security solutions do not provide a mechanism for information flow control (IFC) policies. As such, they need to be combined with language-based security approaches. Practical implementations for ICF enforcement remains a challenge when the full spectrum of web applications features is taken into account (i.e. JavaScript features, web APIs, DOM, portability, performance, etc.). In this work we develop Gifc, a permissive-upgrade-based inlined monitoring mechanism to detect unwanted information flow in web applications. Gifc covers a wide range of JavaScript features that give rise to implicit flows. In contrast to related work, Gifc also handles dynamic code evaluation online, and it features an API function model mechanism that enables information tracking through APIs calls. As a result, Gifc can handle information flows that use DOM nodes as channels of information. We validate\u00a0\u2026", "num_citations": "2\n", "authors": ["1897"]}
{"title": "Serena: scalable middleware for real-time web applications\n", "abstract": " With the advent of the Internet of Things, an increasing number of devices are expected to contribute to larger software systems hosted on the web. The client devices send massive amounts of data to servers that need to send feedback to clients in a real-time fashion. The supporting technologies on these servers have little or no capacity to handle processing of continuous data with dynamic constraints whilst at the same time responding to the effects of the data in real time. In this paper we present Serena, a middleware for real-time web applications. Serena utilizes a scoped, rule-based approach to ease the dynamic definition of requirements or constraints and to support the scalable processing of real-time data, giving instantaneous feedback. Serena also abstracts the underlying infrastructure needed to support real-time communication. We evaluate our approach by implementing a non-trivial web-based\u00a0\u2026", "num_citations": "2\n", "authors": ["1897"]}
{"title": "Evaluation de l\u2019agr\u00e9ment sonore en milieu urbaina l\u2019aide de t\u00e9l\u00e9phone mobile\n", "abstract": " Le but du projet de recherche Cart_Asur est de proposer un indicateur de qualit\u00e9 sonore en croisant des donn\u00e9es acoustiques, perceptives et g\u00e9o-r\u00e9f\u00e9renc\u00e9es. Le recueil des donn\u00e9es acoustiques et perceptives est r\u00e9alis\u00e9 par l'interm\u00e9diaire de t\u00e9l\u00e9phones portables distribu\u00e9s \u00e0 60 participants. Une application sp\u00e9cialement d\u00e9velopp\u00e9e leur permet de r\u00e9aliser une centaine de mesures dans diff\u00e9rents lieux du 13e et 14e arrondissements de Paris \u00e0 diff\u00e9rents cr\u00e9neaux horaires. Pour chaque mesure, le participant enregistre le niveau sonore pendant 10 minutes puis r\u00e9pond \u00e0 une s\u00e9rie de questions relatives \u00e0 la caract\u00e9risation de l'environnement dans sa globalit\u00e9, \u00e0 l'intensit\u00e9 sonore de sources \u00e9mergentes et au temps de pr\u00e9sence des sources participant au bruit de fond. Ces donn\u00e9es sont ensuite envoy\u00e9es et stock\u00e9es sur un serveur. \u00c0 la fin de l'exp\u00e9rimentation, plus de 5000 points de mesures sont attendus\u00a0\u2026", "num_citations": "2\n", "authors": ["1897"]}
{"title": "Scripting mobile devices with ambienttalk\n", "abstract": " This chapter is about programming mobile handheld devices with a scripting language called AmbientTalk. This language has been designed with the goal of easily prototyping applications that run on mobile devices interacting via a wireless network. Programming such applications traditionally involves interacting with low-level APIs in order to perform basic tasks like service discovery and communicating with remote services. We introduce the AmbientTalk scripting language, its implementation on top of the Java Micro edition platform (J2ME) and finally introduce Urbiflock, a pervasive social application for handheld devices developed entirely in AmbientTalk.", "num_citations": "2\n", "authors": ["1897"]}
{"title": "Towards a domain-specific aspect language for leasing in mobile ad hoc networks\n", "abstract": " Leasing provides a robust mechanism to manage reclamation of remote objects in mobile ad hoc networks. However, applying the leasing semantics on each remote object reference places a considerable burden on developers. Low-level leasing management details can be abstracted away as much as possible by means of dedicated language support. This paper focusses on the software engineering issues that arise using language support for leasing. We observe that the concerns dealing with leasing are inherently cross-cutting and argue in favour of a modularization of such concerns in an aspect. We propose a domain-specific aspect language (DSAL) for leasing which provides dedicated means to express the leasing concerns separately from the base functionality.", "num_citations": "2\n", "authors": ["1897"]}
{"title": "The Message-Oriented Mobility Model.\n", "abstract": " Mobile networks composed of devices interconnected by wireless communication media frequently suffer from partitions. If mobile devices depend on software services running on remote devices, such partitions may render the software services unavailable. We propose the use of code mobility to mitigate the unavailability of software services in mobile networks. We discuss the issues of existing mobility mechanisms, identify four characteristics necessary to support code mobility in mobile networks, and propose a model for code mobility, the Message-Oriented Mobility (MOM) model, that features such characteristics.", "num_citations": "2\n", "authors": ["1897"]}
{"title": "Language support for leasing in mobile ad hoc networks\n", "abstract": " In mobile ad hoc networks, distributed programming is substantially complicated by the fact that nodes in the network only have intermittent connectivity and the lack of any centralized coordination facility. Because transient disconnections are so omnipresent in mobile networks, we assume a distributed object-oriented programming model in which remote object references abstract over network disconnections by default. However, this language design decision has repercussions on distributed memory management, as disconnected remote references can prevent an object from being reclaimed. To address this issue, we integrate memory management based on leasing directly into the remote object reference abstraction, leading to the concept of a leased object reference. We explore the language design issues, the integration with other language features and illustrate the applicability of the language construct by means of a concrete example.", "num_citations": "2\n", "authors": ["1897"]}
{"title": "A Survey on Mobile Applications for Smart Agriculture\n", "abstract": " The increasing global demand for food and nutrition security has raised the need to automate processes in modern farming. As such, a promising way to automate those processes is by using smart agriculture applications (SAAs). Different studies in the literature classify these applications based on agricultural themes, agricultural domains, and farming scenarios. However, this classification is not sufficient for researchers and industry to gain deeper insights on software engineering issues pertaining to SAAs. In this survey, we explore SAAs and further classify them based on architectural models, supported software engineering issues, and target mobile platforms. The survey results show that SAAs in general (1) follow different architectural models,(2) are targeted for different mobile platforms, and (3) satisfy different software engineering issues. Most importantly, the key findings from this study reveal that SAAs can\u00a0\u2026", "num_citations": "1\n", "authors": ["1897"]}
{"title": "Framework-aware debugging with stack tailoring\n", "abstract": " Debugging applications that execute within a framework is not always easy: the call-stack offered to developers is often a mix-up of stack frames that belong to different frameworks, introducing an unnecessary noise that prevents developers from focusing on the debugging task. Moreover, relevant application code is not always available in the call-stack because it may have already returned, or is available in another thread. In such cases, manually gathering all relevant information from these different sources is not only cumbersome but also costly.", "num_citations": "1\n", "authors": ["1897"]}
{"title": "Lazy pointer update for low heap compaction pause times\n", "abstract": " To keep applications highly responsive, garbage collectors (GCs) try to minimize interruptions of the application threads. While pauses due to non moving GCs can be drastically reduced through concurrent or incremental strategies, compaction pauses remain a big problem.", "num_citations": "1\n", "authors": ["1897"]}
{"title": "Squirrel: an extensible distributed key-value store\n", "abstract": " Distributed key-value (KV) stores are a rising alternative to traditional relational databases since they provide a flexible yet simple data model. Recent KV stores use eventual consistency to ensure fast reads and writes as well as high availability. Support for eventual consistency is however still very limited as typically only a handful of replicated data types are provided. Moreover, modern applications maintain various types of data, some of which require strong consistency whereas other require high availability. Implementing such applications remains cumbersome due to the lack of support for data consistency in today's KV stores. In this paper we propose Squirrel, an open implementation of an in-memory distributed KV store. The core idea is to reify distribution through consistency models and protocols. We implement two families of consistency models (strong consistency and strong eventual consistency) and\u00a0\u2026", "num_citations": "1\n", "authors": ["1897"]}
{"title": "AmbientJS\n", "abstract": " In this paper, we argue that due to technological advances programmers today are faced with a ninth fallacy of distributed computing: \u201cthere is only one fixed application architecture throughout the lifetime of the application\u201d. Mobile devices are nowadays equipped with wireless technology which allows them to interact with one another in both a peer-to-peer way (e.g. Wi-Fi-direct, bluetooth, etc.), and via a server in the cloud. Distributed software engineering abstractions, however, do not aid the programmer in developing mobile applications which communicate over multiple networking technologies. This paper introduces AmbientJS, a mobile cross-platform actor library which incorporates a novel type of remote reference, called network transparent references (NTRs), which allows to seamlessly combine multiple application architectures. We give an overview of the NTR model, detail their implementation\u00a0\u2026", "num_citations": "1\n", "authors": ["1897"]}
{"title": "Coordinating Collaborative Interactions in Web-based Mobile Applications\n", "abstract": " Mobile applications for interactive surfaces that utilize the web as a platform now have the ability to provide richer interactions hitherto unrealized by running them on isolated devices. These modern applications can now support proximal and remote collaborative interactions for multiple clients simultaneously connected to each other. Most technologies however currently lack programming language abstractions for coordinating complex interactions, such as to define, detect and combine complex events coming from multiple clients or other software entities. Furthermore, they lack the expressiveness required to support non-trivial levels of collaborative interactions for connected clients. In this paper we identify two software mechanisms that web-based mobile applications should provide to support the development of collaborative interactions:~ distributed event composition and group coordination. We present the\u00a0\u2026", "num_citations": "1\n", "authors": ["1897"]}
{"title": "Connect. js: A cross mobile platform actor library for multi-networked mobile applications\n", "abstract": " Developing mobile applications which communicate over multiple networking technology is a difficult task. First, de-velopers usually have to maintain a different version of the application for each mobile platform they target. Recent trends in mobile cross-platform solutions may alleviate this issue. However, developers still need to program a variation of the application for each different network interface. In ad-dition, the APIs for communicating over ad-hoc network-ing technologies (eg. wifi direct), are very different from the cloud APIs. Finally, developers need to write highly asyn-chronous code for communication. This is often written with callbacks which invert the control flow of the application leading to code which is hard to debug and maintain. This paper introduces Connect. js, a JavaScript library for writing multi-networked cross-platform mobile applications. Appli-cations consists of distributed objects which communicate with one another by means of asynchronous messages via a special kind of reference which is transparent for the un-derlying network technology used. Connect. js also provides dedicated language constructs for structuring asynchronous code by means of future combinators.", "num_citations": "1\n", "authors": ["1897"]}
{"title": "Program Testing Using High-Level Property-Driven Models.\n", "abstract": " Testing is a crucial part of the software development life cycle that necessitates adequate techniques and tools. On the one hand, unit testing techniques are particularly easy and lightweight to use but are restricted to testing the external behaviour of a program. On the other hand, testing techniques that use property-driven models of the software are able to test behavioural properties of the entire execution of a program. However, these models are often specified in terms of low-level execution events of the program. In this paper, we present the lightweight propertydriven testing platform called BEHAVE, where tests are written as property-driven behavioural models over highlevel run-time events. We validate our approach by testing behavioural properties related to the automatic memory management in the interpreter of the Pico programming language.", "num_citations": "1\n", "authors": ["1897"]}