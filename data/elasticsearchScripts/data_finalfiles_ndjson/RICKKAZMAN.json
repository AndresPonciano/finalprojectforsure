{"title": "Evaluating software architectures\n", "abstract": " To put it bluntly, an architecture is a bet, a wager on the success of a system. Wouldn't it be nice to know in advance if you've placed your bet on a winner, as opposed to waiting until the system is mostly completed before knowing whether it will meet its requirements or not? This chapter from Evaluating Software Architectures introduces you to methods for evaluating software architecture.", "num_citations": "1688\n", "authors": ["45"]}
{"title": "The architecture tradeoff analysis method\n", "abstract": " This paper presents the Architecture Tradeoff Analysis Method (ATAM), a structured technique for understanding the tradeoffs inherent in the architectures of software-intensive systems. This method was developed to provide a principled way to evaluate a software architecture's fitness with respect to multiple competing quality attributes: modifiability, security, performance, availability, and so forth. These attributes interact-improving one often comes at the price of worsening one or more of the others-as is shown in the paper, and the method helps us to reason about architectural decisions that affect quality attribute interactions. The ATAM is a spiral model of design: one of postulating candidate architectures followed by analysis and risk mitigation, leading to refined architectures.", "num_citations": "855\n", "authors": ["45"]}
{"title": "ATAM: Method for architecture evaluation\n", "abstract": " If a software architecture is a key business asset for an organization, then architectural analysis must also be a key practice for that organization. Why Because architectures are complex and involve many design tradeoffs. Without undertaking a formal analysis process, the organization cannot ensure that the architectural decisions made-particularly those which affect the achievement of quality attribute such as performance, availability, security, and modifiability-are advisable ones that appropriately mitigate risks. In this report, some of the technical and organizational foundations for performing architectural analysis are discussed, the Architecture Tradeoff Analysis Method ATAM, is presented. The ATAM is a technique for analyzing software architectures that has been developed and refined in practice over the past three years.Descriptors:", "num_citations": "845\n", "authors": ["45"]}
{"title": "Ultra-large-scale systems: The software challenge of the future\n", "abstract": " The US Department of Defense DoD has a goal of information dominance to achieve and exploit superior collection, fusion, analysis, and use of information to meet mission objectives. This goal depends on increasingly complex systems characterized by thousands of platforms, sensors, decision nodes, weapons, and warfighters connected through heterogeneous wired and wireless networks. These systems will push far beyond the size of today s systems and systems of systems by every measure number of lines of code number of people employing the system for different purposes amount of data stored, accessed, manipulated, and refined number of connections and interdependencies among software components and number of hardware elements. They will be ultra-largescale ULS systems. The sheer scale of ULS systems will change everything. ULS systems will necessarily be decentralized in a variety of ways, developed and used by a wide variety of stakeholders with conflicting needs, evolving continuously, and constructed from heterogeneous parts. People will not just be users of a ULS system they will be elements of the system. Software and hardware failures will be the norm rather than the exception. The acquisition of a ULS system will be simultaneous with its operation and will require new methods for control. These characteristics are beginning to emerge in today s DoD systems of systems in ULS systems they will dominate. Consequently, ULS systems will place unprecedented demands on software acquisition, production, deployment, management, documentation, usage, and evolution practices.Descriptors:", "num_citations": "651\n", "authors": ["45"]}
{"title": "Managing technical debt in software-reliant systems\n", "abstract": " Delivering increasingly complex software-reliant systems demands better ways to manage the long-term effects of short-term expedients. The technical debt metaphor is gaining significant traction in the agile development community as a way to understand and communicate such issues. The idea is that developers sometimes accept compromises in a system in one dimension (eg, modularity) to meet an urgent demand in some other dimension (eg, a deadline), and that such compromises incur a\" debt\": on which\" interest\" has to be paid and which the\" principal\" should be repaid at some point for the long-term health of the project. We argue that the software engineering research community has an opportunity to study and improve this concept. We can offer software engineers a foundation for managing such trade-offs based on models of their economic impacts. Therefore, we propose managing technical debt as\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "426\n", "authors": ["45"]}
{"title": "Playing detective: Reconstructing software architecture from available evidence\n", "abstract": " Because a system's software architecture strongly influences its quality attributes such as modifiability, performance, and security, it is important to analyze and reason about that architecture. However, architectural documentation frequently does not exist, and when it does, it is often \u0393\u00c7\u00a3out of sync\u0393\u00c7\u00a5 with the implemented system. In addition, it is rare that software development begins with a clean slate; systems are almost always constrained by existing legacy code. As a consequence, we need to be able to extract information from existing system implementations and utilize this information for architectural reasoning. This paper presents Dali, an open, lightweight workbench that aids an analyst in extracting, manipulating, and interpreting architectural information. By assisting in the reconstruction of architectures from extracted information, Dali helps an analyst redocument architectures, discover the relationship\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "359\n", "authors": ["45"]}
{"title": "WebQuery: Searching and visualizing the Web through connectivity\n", "abstract": " Finding information located somewhere on the World-Wide Web is an error-prone and frustrating task. The WebQuery system offers a powerful new method for searching the Web based on connectivity and content. We do this by examining links among the nodes returned in a keyword-based query. We then rank the nodes, giving the highest rank to the most highly connected nodes. By doing so, we are finding \u0393\u00c7\u00a3hot spots\u0393\u00c7\u00a5 on the Web that contain information germane to a user's query. WebQuery not only ranks and filters the results of a Web query, it also extends the result set beyond what the search engine retrieves, by finding \u0393\u00c7\u00a3interesting\u0393\u00c7\u00a5 sites that are highly connected to those sites returned by the original query. Even with WebQuery filtering and ranking query results, the result sets can be enormous. So, we need to visualize the returned information. We explore several techniques for visualizing this information\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "333\n", "authors": ["45"]}
{"title": "Quantifying the costs and benefits of architectural decisions\n", "abstract": " The benefits of a software system are assessable only relative to the business goals the system has been developed to serve. In turn, these benefits result from interactions between the system's functionality and its quality attributes (such as performance, reliability and security). Its quality attributes are, in most cases, dictated by its architectural design decisions. Therefore, we argue that the software architecture is the crucial artifact to study in making design tradeoffs and in performing cost-benefit analyses. A substantial part of such an analysis is in determining the level of uncertainty with which we estimate both costs and benefits. We offer an architecture-centric approach to the economic modeling of software design decision making called CBAM (Cost Benefit Analysis Method), in which costs and benefits are traded off with system quality attributes. We present the CBAM, the early results from applying this method\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "284\n", "authors": ["45"]}
{"title": "Experience with performing architecture tradeoff analysis\n", "abstract": " Software architectures, like complex designs in any field, embody tradeoffs made by the designers. However, these tradeoffs are not always made explicitly by the designers and they may not understand the impacts of their decisions. This paper describes the use of a scenario-based and model-based analysis technique for software architectures-called ATAM-that not only analyzes a software architecture with respect to multiple quality attributes, but explicitly considers the tradeoffs inherent in the design. This is a method aimed at illuminating risks in the architecture through the identification of attribute trends, rather than at precise characterizations of measurable quality attribute values. In this paper, the operationalization of ATAM is illustrated via a specific example in which we analyzed a U.S. Army system for battlefield management.", "num_citations": "268\n", "authors": ["45"]}
{"title": "Requirements for integrating software architecture and reengineering models: CORUM II\n", "abstract": " This paper discusses the requirements and a generic framework for the integration of architectural and code-based reengineering tools. This framework is needed because there is a large number of stand-alone reengineering tools that operate at different levels of abstraction ranging from \"code-level\" to software architecture. For the purposes of reengineering a complete system however, these tools need to be able to share information so that not only can the code be updated or corrected, but also the system's software architecture can be simultaneously rationalized or modernized. To this end, we have built upon the CORUM model of reengineering tool interoperation to include software architecture concepts and tools. This extended framework-called CORUM II-is organized around the metaphor of a \"horseshoe\", where the left-hand side of the horseshoe consists of fact extraction from an existing system, the right\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "222\n", "authors": ["45"]}
{"title": "Interacting with huge hierarchies: Beyond cone trees\n", "abstract": " The paper describes an implementation of a tool for visualizing and interacting with huge information hierarchies, and some preliminary empirical evaluation of the tool's efficacy. Existing systems for visualizing huge hierarchies using cone trees \"break down\" once the hierarchy to be displayed exceeds roughly 1000 nodes, due to increasing visual clutter. The paper describes a system called fsviz which visualizes arbitrarily large hierarchies while retaining user control. This is accomplished by augmenting cone trees with several graphical and interaction techniques: usage-based filtering, animated zooming, hand-coupled rotation, fish-eye zooming, coalescing of distant nodes, texturing, effective use of colour for depth cueing, and the applications of dynamic queries. The fsviz system also improves upon earlier cone tree visualization systems through a more elaborate node layout algorithm. This algorithm enhances\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "213\n", "authors": ["45"]}
{"title": "The metropolis model a new logic for development of crowdsourced systems\n", "abstract": " It takes a city of developers to build a big system that is never done.", "num_citations": "209\n", "authors": ["45"]}
{"title": "Decision-making techniques for software architecture design: A comparative survey\n", "abstract": " The architecture of a software-intensive system can be defined as the set of relevant design decisions that affect the qualities of the overall system functionality; therefore, architectural decisions are eventually crucial to the success of a software project. The software engineering literature describes several techniques to choose among architectural alternatives, but it gives no clear guidance on which technique is more suitable than another, and in which circumstances. As such, there is no systematic way for software engineers to choose among decision-making techniques for resolving tradeoffs in architecture design. In this article, we provide a comparison of existing decision-making techniques, aimed to guide architects in their selection. The results show that there is no \u0393\u00c7\u00a3best\u0393\u00c7\u00a5 decision-making technique; however, some techniques are more susceptible to specific difficulties. Hence architects should choose a\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "169\n", "authors": ["45"]}
{"title": "Architecture, design, implementation\n", "abstract": " The terms architecture, design, and implementation are typically used informally in partitioning software specifications into three coarse strata of abstraction. Yet these strata are not well-defined in either research or practice, causing miscommunication and needless debate. To remedy this problem we formalize the Intension and the Locality criteria, which imply that the distinction between architecture, design, and implementation is qualitative and not merely quantitative. We demonstrate that architectural styles are intensional and non-local; that design patterns are intensional and local; and that implementations are extensional and local.", "num_citations": "156\n", "authors": ["45"]}
{"title": "View extraction and view fusion in architectural understanding\n", "abstract": " When performing architectural analysis on legacy software systems, it is frequently necessary to extract the architecture of the system, because it has not been documented, or because its documentation is out of date. However, architectural information does not exist directly in the artifacts that we can extract. The architecture exists in abstractions; compositions of extracted information. Thus, extracted artifacts must be able to be flexibly aggregated and combined. We call this process \"view refinement and fusion\". This paper presents a workbench for architectural extraction called Dali, and shows how Dali supports flexible extraction and fusion of architectural information. Its use is described through two extended examples of architectural reconstruction.", "num_citations": "145\n", "authors": ["45"]}
{"title": "A software architecture reconstruction method\n", "abstract": " Changes to a software system during implementation and maintenance can cause the architecture of a system to deviate from its documented architecture. If design documents are to be useful, maintenance programmers must be able to easily evaluate how closely the documents conform to the code they are meant to describe. Software architecture recovery, which deals with the extraction and analysis of a system\u0393\u00c7\u00d6s architecture, has gained more tool support in the past few years. However, there is little research on developing effective and efficient architectural conformance methods. In particular, given the increasing emphasis on patterns and styles in the software engineering community, a method needs to explicitly aid a user in identifying architectural patterns.               This paper presents a semi-automatic method, called ARM (Architecture Reconstruction Method), that guides a user in the reconstruction\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "141\n", "authors": ["45"]}
{"title": "A case study in locating the architectural roots of technical debt\n", "abstract": " Our recent research has shown that, in large-scale software systems, defective files seldom exist alone. They are usually architecturally connected, and their architectural structures exhibit significant design flaws which propagate bugginess among files. We call these flawed structures the architecture roots, a type of technical debt that incurs high maintenance penalties. Removing the architecture roots of bugginess requires refactoring, but the benefits of refactoring have historically been difficult for architects to quantify or justify. In this paper, we present a case study of identifying and quantifying such architecture debts in a large-scale industrial software project. Our approach is to model and analyze software architecture as a set of design rule spaces (DRSpaces). Using data extracted from the project's development artifacts, we were able to identify the files implicated in architecture flaws and suggest refactorings\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "133\n", "authors": ["45"]}
{"title": "Making architecture design decisions: An economic approach\n", "abstract": " The resources available to build any system are finite. The decisions involved in building any nontrivial system are complex and typically involve many stakeholders, many requirements, and many technical decisions. The stakeholders have an interest in ensuring that good design decisions are made decisions that meet their technical objectives and their tolerance for risk. These decisions should, as much as possible, maximize the benefit that the system provides and minimize its cost. The Cost Benefit Analysis Method CBAM was created to provide some structure to this decision-making process. The CBAM analyzes architectural decisions from the perspectives of cost, benefit, schedule, and risk. While the CBAM does not make decisions for the stakeholders, it does serve as a tool to inform managers and to structure the inquiry so that rational decisions can be made. This report describes the steps of the CBAM and its application to a real-world system.Descriptors:", "num_citations": "129\n", "authors": ["45"]}
{"title": "Hotspot patterns: The formal definition and automatic detection of architecture smells\n", "abstract": " In this paper, we propose and empirically validate a suite of hotspot patterns: recurring architecture problems that occur in most complex systems and incur high maintenance costs. In particular, we introduce two novel hotspot patterns, Unstable Interface and Implicit Cross-module Dependency. These patterns are defined based on Baldwin and Clark's design rule theory, and detected by the combination of history and architecture information. Through our tool-supported evaluations, we show that these patterns not only identify the most error-prone and change-prone files, they also pinpoint specific architecture problems that may be the root causes of bug-proneness and change-proneness. Significantly, we show that 1) these structure-history integrated patterns contribute more to error- and change-proneness than other hotspot patterns, and 2) the more hotspot patterns a file is involved in, the more error- and\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "122\n", "authors": ["45"]}
{"title": "Audio enhanced 3D interfaces for visually impaired users\n", "abstract": " Three dimensional computer applications such as CAD packages are often difficult to use because of inadequate depth feedback to the user. It has, however, been shown that audio feedback can help improve a user's sense of depth perception. This paper describes an experiment which evaluates the use of three different audio environments in a 3D task undertaken by visually impaired users. The three audio environments map tonal, musical, and orchestral sounds to an (x, y, z) position in a 3D environment. In each environment the user's task is to locate a target in three dimensions as accurately and quickly as possible. This experiment has three important results: that audio feedback improves performance in 3D applications for all users; that visually impaired users can use 3D applications with the accuracy of sighted users; and that visually impaired users can attain greater target accuracy than sighted users in a\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "113\n", "authors": ["45"]}
{"title": "An approach to software architecture analysis for evolution and reusability\n", "abstract": " Software evolution and reuse is more likely to receive higher payoff if high-level artifacts\u0393\u00c7\u00f6such as architectures and designs\u0393\u00c7\u00f6can be reused and can guide low-level component reuse. In practice, however, high-level artifacts are often not appropriately captured. This paper presents an approach to capturing and assessing software architectures for evolution and reuse. The approach consists of a framework for modeling various types of relevant information and a set of architectural views for reengineering, analyzing, and comparing software architectures. We have applied this approach to large-scale telecommunications systems, where the approach is useful to reveal areas for improvement and the potential for reuse.", "num_citations": "107\n", "authors": ["45"]}
{"title": "Designing software architectures: a practical approach\n", "abstract": " Designing Software Architectures will teach you how to design any software architecture in a systematic, predictable, repeatable, and cost-effective way. This book introduces a practical methodology for architecture design that any professional software engineer can use, provides structured methods supported by reusable chunks of design knowledge, and includes rich case studies that demonstrate how to use the methods. Using realistic examples, you\u0393\u00c7\u00d6ll master the powerful new version of the proven Attribute-Driven Design (ADD) 3.0 method and will learn how to use it to address key drivers, including quality attributes, such as modifiability, usability, and availability, along with functional requirements and architectural concerns. Drawing on their extensive experience, Humberto Cervantes and Rick Kazman guide you through crafting practical designs that support the full software life cycle, from requirements to maintenance and evolution. You\u0393\u00c7\u00d6ll learn how to successfully integrate design in your organizational context, and how to design systems that will be built with agile methods. Comprehensive coverage includes Understanding what architecture design involves, and where it fits in the full software development life cycle Mastering core design concepts, principles, and processes Understanding how to perform the steps of the ADD method Scaling design and analysis up or down, including design for pre-sale processes or lightweight architecture reviews Recognizing and optimizing critical relationships between analysis and design Utilizing proven, reusable design primitives and adapting them to specific problems and contexts Solving design\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "103\n", "authors": ["45"]}
{"title": "Four paradigms for indexing video conferences\n", "abstract": " Meetings in which participants are linked by video, audio, and shared computer applications produce several parallel information streams. We created a meeting indexer, Jabber, that uses content-based indexing of the audio stream to access these parallel streams. It performs speech recognition on the audio stream, then groups the recognized words into semantically linked trees. The user interface is designed to display information with minimal distraction during meetings.", "num_citations": "100\n", "authors": ["45"]}
{"title": "BITAM: An engineering-principled method for managing misalignments between business and IT architectures\n", "abstract": " As the rates of business and technological changes accelerate, misalignments between business and IT architectures are inevitable. Existing alignment models, while important for raising awareness of alignment issues, have provided little in the way of guidance for actually correcting misalignment and thus achieving alignment. This paper introduces the BITAM (Business IT Alignment Method) which is a process that describes a set of twelve steps for managing, detecting and correcting misalignment. The methodology is an integration of two hitherto distinct analysis areas: business analysis and architecture analysis. The BITAM is illustrated via a case study conducted with a Fortune 100 company.", "num_citations": "99\n", "authors": ["45"]}
{"title": "Toward a discipline of scenario\u0393\u00c7\u00c9based architectural engineering\n", "abstract": " Software architecture analysis is a cost\u0393\u00c7\u00c9effective means of controlling risk and maintaining system quality throughout the processes of software design, development and maintenance. This paper presents a sequence of steps that maps architectural quality goals into scenarios that measure the goals, mechanisms that realize the scenarios and analytic models that measure the results. This mapping ensures that design decisions and their rationale are documented in such a fashion that they can be systematically explored, varied, and potentially traded off against each other. As systems evolve, the analytic models can be used to assess the impact of architectural changes, relative to the system's changing quality goals. Although scenarios have been extensively used in software design to understand the ways in which a system meets its operational requirements, there has been little systematic use of\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "99\n", "authors": ["45"]}
{"title": "Architecture reconstruction guidelines\n", "abstract": " Architecture reconstruction is the process of obtaining the as-built architecture of an implemented system from the existing legacy system. For this process, tools are used to extract information about the system that will assist in building successive levels of abstraction. Although generating a useful representation is not always possible, a successful reconstruction results in an architectural representation that aids in reasoning about the system. This recovered representation is most often used as a basis for redocumenting the architecture of an existing system if the documentation is out of date or nonexistent, and can be used to check the as-built architecture against the as-designed architecture. The architectural representation can also be used as a starting point for reengineering the system to a new desired architecture. Finally, the representation can be used to help identify components for reuse or to help establish a software product line. This report describes the process of architecture reconstruction using the Dali architecture reconstruction workbench. Guidelines are presented for reconstructing the architectural representations of existing systems. Most of these guidelines are not specific to the Dali tool, can be used with other tools, and are useful even if the architecture reconstruction is carried out manually.Descriptors:", "num_citations": "94\n", "authors": ["45"]}
{"title": "Identifying and quantifying architectural debt\n", "abstract": " Our prior work showed that the majority of error-prone source files in a software system are architecturally connected. Flawed architectural relations propagate defectsamong these files and accumulate high maintenance costs over time, just like debts accumulate interest. We model groups of architecturally connected files that accumulate high maintenance costs as architectural debts. To quantify such debts, we formally define architectural debt, and show how to automatically identify debts, quantify their maintenance costs, and model these costs over time. We describe a novel history coupling probability matrix for this purpose, and identify architecture debts using 4 patterns of architectural flaws shown to correlate with reduced software quality. We evaluate our approach on 7 large-scale open source projects, and show that a significant portion of total project maintenance effort is consumed by paying interest on\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "92\n", "authors": ["45"]}
{"title": "Design rule spaces: A new form of architecture insight\n", "abstract": " In this paper, we investigate software architecture as a set of overlapping design rule spaces, formed by one or more structural or evolutionary relationships and clustered using our design rule hierarchy algorithm. Considering evolutionary coupling as a special type of relationship, we investigated (1) whether design rule spaces can reveal structural relations among error-prone files;(2) whether design rule spaces can reveal structural problems contributing to error-proneness. We studied three large-scale open source projects and found that error-prone files can be captured by just a few design rule sub-spaces. Supported by our tool, Titan, we are able to flexibly visualize design rule spaces formed by different types of relationships, including evolutionary dependencies. This way, we are not only able to visualize which error-prone files belong to which design rule spaces, but also to visualize the structural problems\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "89\n", "authors": ["45"]}
{"title": "Integrating the Architecture Tradeoff Analysis Method (ATAM) with the cost benefit analysis method (CBAM)\n", "abstract": " The Architecture Tradeoff Analysis Initiative at the Carnegie Mellon Software Engineering Institute SEl has developed a number of architecture-centric methods currently in use including the SEISM Architecture Tradeoff Analysis Method ATAM, the SEl Quality Attribute Workshop QAW, the SEl Cost Benefit Analysis Method CBAM, SEl Active Reviews for Intermediate Designs ARID, and the SE Attribute-Driven Design ADD method. Building on our success in developing and piloting a collection of software architecture methods, were now focusing on integrating them, and building the bridges between them and the processes and architecture efforts outside the SEl, all the while continuing to refine existing methods and models. This technical note reports on a proposal to integrate the SE ATAM and SEl CBAM. The ATAM provides software architects with a framework for understanding the technical tradeoffs and risks they face as they make design decisions, but it does not provide any guidance for understanding economic tradeoffs. The CBAM helps software architects consider the return on investment of any architectural decision and provides guidance on the economic tradeoffs involved. The CBAM takes the architectural decision analysis done during the ATAM arid helps make it part of a strategic roadmap for software design and evolution by associating priorities, costs, and benefits with architectural decisions.Descriptors:", "num_citations": "82\n", "authors": ["45"]}
{"title": "From software architecture analysis to service engineering: An empirical study of methodology development for enterprise SOA implementation\n", "abstract": " This paper presents an integrated service-oriented enterprise system development framework (called the BITAM-SOA Framework) as well as an instantiated design process model (called the Service Engineering Schematic) that was a result from a three-year action research case study with a Fortune 50 company in the financial services industry. The BITAM-SOA Framework and Schematic advance are both business-IT alignment and software architecture analysis techniques supporting the engineering of enterprise-wide service-oriented systems-that is, service engineering.", "num_citations": "80\n", "authors": ["45"]}
{"title": "Tool support for architecture analysis and design\n", "abstract": " ABSTRACT\u0393\u00c7\u00d6The needs of software architectural design and analysis have led to a desire to create CASE tools to support the processes. Such a tool should help: to document an architecture; to reuse architectural artifacts; to aid in exploring architectural alternatives; and to support architectural metrics. This position paper first presents a set of requirements that an ideal tool for architectural design and analysis, and then presents a tool-called SAAMtool-that meets most, but not all, of these requirements. SAAMtool embodies both SAAM (Software Architecture Analysis Method) and an architectural description framework which describes architectural elements according to their static and temporal features. The tool serves several purposes. It supports and documents the results of architectural design and analysis efforts at varying degrees of resolution, it acts as a repository of both designs and design rationales in the\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "78\n", "authors": ["45"]}
{"title": "The duties, skills, and knowledge of software architects\n", "abstract": " This paper focuses on the human aspects of architecting software-in particular, the duties, skills, and knowledge of software architects. We present the results of a survey of approximately 200 public sources of information aimed at professional software architects that we conducted in the summer of 2006. We summarize what those sources have to say about the duties, skills, and knowledge that competent architects must perform and have.", "num_citations": "77\n", "authors": ["45"]}
{"title": "Assessing architectural complexity\n", "abstract": " While it is widely agreed that architectural simplicity is a key factor to the success of large software systems, it is not obvious how to measure architectural complexity. Our approach to measuring complexity is based on the observation that large systems with a regular substructure are simple to create and maintain, whereas even relatively small systems created in an ad hoc fashion quickly become unmaintainable. The paper describes a system called IAPR, that aids in architectural exploration and measurement by attempting to match patterns to an architecture. To do this, IAPR implements a heuristic form of sub graph isomorphism-an NP hard problem-using the constraint satisfaction paradigm to limit the complexity of the problem space.", "num_citations": "77\n", "authors": ["45"]}
{"title": "Investigating antecedents of technology acceptance of initial eCRM users beyond generation X and the role of self-construal\n", "abstract": " eCRM (electronic Customer Relationship Management) systems focus on using the web-site as the main interaction channel for businesses to simulate an old fashioned one-to-one direct relationship\u0393\u00c7\u00f6high touch\u0393\u00c7\u00f6with customers. In this research two distinct but related concepts, media richness from the Human Computer Interaction and Computer Mediated Communication fields and perceived interactivity from the Marketing and MIS fields, are disentangled and their unique impacts on technology acceptance variables are examined in the eCRM Acceptance Model. The present study contributes in extending the Technology Acceptance Model for the eCRM context and in establishing media richness and perceived interactivity as antecedents to perceived usefulness and perceived ease of use. Our research model integrates system perception (e.g., perceived usefulness and perceived ease of use) and\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "73\n", "authors": ["45"]}
{"title": "Using economic considerations to choose among architecture design alternatives\n", "abstract": " The software architecture forms an essential part of a complex software-intensive system. Architecture design decision-making involves addressing tradeoffs due to the presence of economic constraints. The problem is to develop a process that helps a designer choose amongst architectural options, during both initial design and its subsequent periods of upgrade, while being constrained to finite resources. To address this need for better decision-making, we have developed a method for performing economic modeling of software systems, centered on an analysis of their architecture. We call this method the Cost Benefit Analysis Method CBAM. The CBAM incorporates the costs and benefits of architectural design decisions and provides an effective means of making such decisions. The CBAM provides a structured integrated assessment of the technical and economic issues and architectural decisions. The CBAM utilizes techniques in decision analysis, optimization, and statistics to help software architects characterize their uncertainty and choose a subset of changes that should be implemented from a larger set of alternatives. We also report on the application of this method to a real world case study.Descriptors:", "num_citations": "73\n", "authors": ["45"]}
{"title": "Quantifying the value of architecture design decisions: lessons from the field\n", "abstract": " This paper outlines experiences with using economic criteria to make architecture design decisions. It briefly describes the CBAM (Cost Benefit Analysis Method) framework applied to estimate the value of architectural strategies in a NASA project, the ECS. This paper describes the practical difficulties and experiences in applying the method to a large realworld system. It concludes with some lessons learned from the experience.", "num_citations": "71\n", "authors": ["45"]}
{"title": "Software architectural transformation\n", "abstract": " Software architecture, as a vehicle for communication and reasoning about software systems and their quality, is becoming an area of focus in both the forward- and reverse-engineering communities. In the past, we have attempted to unify these areas via a semantic model of reengineering called CORUM II. In this paper we present a concrete example of an architecturally-motivated reengineering task. In executing this task, we perform architecture reconstruction, reason about the reconstructed architecture, motivate an architectural transformation with new architectural quality requirements, and realize this architectural transformation via an automated code transformation.", "num_citations": "68\n", "authors": ["45"]}
{"title": "Making WAVES: On the design of architectures for low-end distributed virtual environments\n", "abstract": " Different hardware platforms are best suited for different tasks in simulating a virtual world. Any distributed virtual world must be prepared to support communication among a large and heterogeneous set of software and hardware devices. By developing a scalable environment for virtual worlds based on heterogeneous platforms, researchers can utilize existing hardware, and so can begin to do research without a large capital outlay. For these reasons, it is imperative to explore the architectural constraints placed on a virtual world by distribution and parallelism. The author examines what it means to distribute functionality such as simulation, interaction detection and messaging in a virtual world, how to \"scale up\" such a world, and how to deal with communication delays. The WAVES (WAterloo Virtual Environment System) architecture attempts to address these concerns.< >", "num_citations": "64\n", "authors": ["45"]}
{"title": "Decoupling level: a new metric for architectural maintenance complexity\n", "abstract": " Despite decades of research on software metrics, we still cannot reliably measure if one design is more maintainable than another. Software managers and architects need to understand whether their software architecture is \"good enough\", whether it is decaying over time and, if so, by how much. In this paper, we contribute a new architecture maintainability metric---Decoupling Level (DL)---derived from Baldwin andClark's option theory. Instead of measuring how coupled an architecture is, we measure how well the software can be decoupled into small and independently replaceable modules. We measured the DL for 108 open source projects and 21 industrial projects, each of which has multiple releases. Our main result shows that the larger the DL, the better thearchitecture. By \"better\" we mean: the more likely bugs and changes can be localized and separated, and the more likely that developers can make\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "63\n", "authors": ["45"]}
{"title": "How Lufthansa Capitalized on Big Data for Business Model Renovation.\n", "abstract": " Enterprises have begun to derive value from big data, but many challenges remain. This article reports how Lufthansa successfully discovered big data value, addressed the technical complexities, and used big data as the basis for renovating its traditional business model to one that embraces customers as value co-creators. From Lufthansa's experience, we identify the challenges and critical success factors for innovating with big data and navigating through uncharted waters. The key is to shift the focus from technology to business values.", "num_citations": "61\n", "authors": ["45"]}
{"title": "Quality-attribute based economic valuation of architectural patterns\n", "abstract": " Architectural patterns generate value depending on the utility of the quality attributes that can be achieved from the application of those patterns. However, methods to rigorously evaluate the value-added of patterns do not exist. In this position paper, we make the case that architectural patterns carry economic value in the form of real options, providing designers with the right, but not the obligation, to take subsequent design actions in the future in the face of uncertainty. We summarize our observations in evaluating the relative value of patterns using real option valuation models on a model problem. We draw attention to how such economics-informed approaches can provide belter insights for the selection of situated design strategies.", "num_citations": "60\n", "authors": ["45"]}
{"title": "Toward design decisions to enable deployability: Empirical study of three projects reaching for the continuous delivery holy grail\n", "abstract": " There is growing interest in continuous delivery practices to enable rapid and reliable deployment. While practices are important, we suggest architectural design decisions are equally important for projects to achieve goals such continuous integration (CI) build, automated testing and reduced deployment-cycle time. Architectural design decisions that conflict with deploy ability goals can impede the team's ability to achieve the desired state of deployment and may result in substantial technical debt. To explore this assertion, we interviewed three project teams striving to practicing continuous delivery. In this paper, we summarize examples of the deploy ability goals for each project as well as the architectural decisions that they have made to enable deploy ability. We present the deploy ability goals, design decisions, and deploy ability tactics collected and summarize the design tactics derived from the interviews in\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "58\n", "authors": ["45"]}
{"title": "A cost-benefit framework for making architectural decisions in a business context\n", "abstract": " In any IT-intensive organization, it is useful to have a model to associate a value with software and system architecture decisions. More generally, any effort-a project undertaken by a team-needs to have an associated value to offset its labor and capital costs. Unfortunately, it is extremely difficult to precisely evaluate the benefit of \"architecture projects\"-those that aim to improve one or more quality attributes of a system via a structural transformation without (generally) changing its behavior. We often resort to anecdotal and informal \"hand-waving\" arguments of risk reduction or increased developer productivity. These arguments are typically unsatisfying to the management of organizations accustomed to decision-making based on concrete metrics. This paper will discuss research done to address this long-standing dilemma. Specifically, we will present a model derived from analyzing actual projects undertaken at\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "55\n", "authors": ["45"]}
{"title": "Agile big data analytics for web-based systems: An architecture-centric approach\n", "abstract": " This article contributes an architecture-centric methodology, called AABA (Architecture-centric Agile Big data Analytics), to address the technical, organizational, and rapid technology change challenges of both big data system development and agile delivery of big data analytics for Web-based Systems (WBS). As the first of its kind, AABA fills a methodological void by adopting an architecture-centric approach, advancing and integrating software architecture analysis and design, big data modeling and agile practices. This article describes how AABA was developed, evolved and validated simultaneously in 10 empirical WBS case studies through three CPR (Collaborative Practice Research) cycles. In addition, this article presents an 11th case study illustrating the processes, methods and techniques/tools in AABA for cost-effectively achieving business goals and architecture agility in a large scale WBS. All 11 case\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "53\n", "authors": ["45"]}
{"title": "Realizing and refining architectural tactics: Availability\n", "abstract": " Architectural tactics are fundamental design decisions. They are the building blocks for both architectural design and analysis. A catalog of architectural tactics has now been in use for several years in academia and industry. This report illustrates the use of this catalog in industrial applications, describing how tactics can be used in both design and analysis. The report further shows how the needs of practice have caused the catalog of availability tactics to be updated, but demonstrates that the underlying structure of the tactics categorization has re-mained stable. Finally, a real-world example is provided of the application of the updated set of availability tactics, showing how it illuminates design decisions, as guided by associated heuristics and analytic models.Descriptors:", "num_citations": "53\n", "authors": ["45"]}
{"title": "From requirements negotiation to software architecture decisions\n", "abstract": " Architecture design and requirements negotiations are conceptually tightly related but often performed separately in real-world software development projects. As our prior case studies have revealed, this separation causes uncertainty in requirements negotiation that hinders progress, limits the success of architecture design, and often leads to wasted effort and substantial re-work later in the development life-cycle. Explicit requirements elicitation and negotiation is needed to be able to appropriately consider and evaluate architecture alternatives and the architecture alternatives need be understood during requirements negotiation. This paper propose the WinCBAM framework, extending an architecture design method, called cost benefit analysis method (CBAM) framework to include an explicit requirements negotiation component based on the WinWin methodology. We then provide a retrospective case study\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "53\n", "authors": ["45"]}
{"title": "Vibrotactile feedback in delicate virtual reality operations\n", "abstract": " Virtual environments are often unsuitable for delicate operations because of the poverty of feedback, particularly tactile and force feedback. However, force feedback done properly requires large, heavy, expensive equipment. We have experimented with a particular form of tactile feedback using vibration as a substitute for force feedback. Substituting vibration for force feedback is intuitively appealing because it is cheap and low cost. But is it effective? Unfortunately, the answer is both \u0393\u00c7\u00a3yes\u0393\u00c7\u00a5 and \u0393\u00c7\u00a3no\u0393\u00c7\u00a5. We describe an experiment evahtating the effect of vibrotactile sensory substitution on user performance during a grasping task with delicate virtual objects. We found that adding vibrotactile feedback to visual and audio feedback improved task completion time for novice users, but led to increased grasp pressure over repeated uses of the system.", "num_citations": "51\n", "authors": ["45"]}
{"title": "Steps in an architecture tradeoff analysis method: Quality attribute models and analysis\n", "abstract": " This paper presents some of the steps in an emerging architecture tradeoff analysis method ATAM. The objective of the method is to provide a principled way to understand a software architectures fitness with respect to multiple competing quality attributes 1 modifiability, 2 security, 3 performance, availability, and 4 so forth. These attributes can interact or conflict-improving one often comes at the price of worsening one or more of the others, thus it is necessary to trade off among multiple software quality attributes at the time the software architecture of a system is specified, and before the system is developed. This report illustrates typical quality attribute models, analyses, and tradeoffs using a small real-time industrial application.Descriptors:", "num_citations": "49\n", "authors": ["45"]}
{"title": "Big data system development: An embedded case study with a global outsourcing firm\n", "abstract": " Big data system development is dramatically different from small (traditional, structured) data system development. At the end of 2014, big data deployment is still scarce and failures abound. Outsourcing has become a main strategy for many enterprises. We therefore selected an outsourcing company who has successfully deployed big data projects for our study. Our research results from analyzing 10 outsourced big data projects provide a glimpse into early adopters of big data, illuminates the challenges for system development that stem from the 5Vs of big data and crystallizes the importance of architecture design choices and technology selection. We followed a collaborative practice research (CPR) method to develop and validate a new method, called BDD. BDD is the first attempt to systematically combine architecture design with data modeling approaches to address big data system development challenges\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "48\n", "authors": ["45"]}
{"title": "Manufacturing execution systems: A vision for managing software development\n", "abstract": " Software development suffers from a lack of predictability with respect to cost, time, and quality. Predictability is one of the major concerns addressed by modern manufacturing execution systems (MESs). A MES does not actually execute the manufacturing (e.g., controlling equipment and producing goods), but rather collects, analyzes, integrates, and presents the data generated in industrial production so that employees have better insights into processes and can react quickly, leading to predictable manufacturing processes. In this paper, we introduce the principles and functional areas of a MES. We then analyze the gaps between MES-vision-driven software development and current practices. These gaps include: (1) lack of a unified data collection infrastructure, (2) lack of integrated people data, (3) lack of common conceptual frameworks driving improvement loops from development data, and (4) lack of support\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "48\n", "authors": ["45"]}
{"title": "A life-cycle view of architecture analysis and design methods\n", "abstract": " Many architecture-centric analysis and design methods have been created in the past 10 years at the Software Engineering Institute, beginning with the Software Architecture Analysis Method SAAM. The SAAM inspired the creation of other methods, namely the Architecture Tradeoff Analysis MethodSM, the Quality Attribute Workshop, the Cost-Benefit Analysis Method, Active Reviews for Intermediate Designs, and the Attribute-Driven Design method. As these methods become more widespread, more widely adopted, and integrated into the software development life cycle, organizations inevitably will want to tailor them. Consequently, organizations that wish to include quality-attribute-based requirements, explicit architecture design, and architecture analysis in their software development life cycles will be best served if they can do so organically. The steps and artifacts of the five methods listed above, therefore, may require tailoring, blending, and, in some cases, removal when integrated into an existing life cycle. This report examines these methods and activities to understand their commonalities and relationships to life-cycle changes, and proposes a means of tailoring the activities so that they can fit more easily into existing life-cycle models.Descriptors:", "num_citations": "47\n", "authors": ["45"]}
{"title": "Strategic prototyping for developing big data systems\n", "abstract": " Conventional horizontal evolutionary prototyping for small-data system development is inadequate and too expensive for identifying, analyzing, and mitigating risks in big data system development. RASP (Risk-Based, Architecture-Centric Strategic Prototyping) is a model for cost-effective, systematic risk management in agile big data system development. It uses prototyping strategically and only in areas that architecture analysis can't sufficiently address. Developers use less costly vertical evolutionary prototypes instead of blindly building full-scale prototypes. An embedded multiple-case study of nine big data projects at a global outsourcing firm validated RASP. A decision flowchart and guidelines distilled from lessons learned can help architects decide whether, when, and how to do strategic prototyping. This article is part of a special issue on Software Engineering for Big Data Systems.", "num_citations": "45\n", "authors": ["45"]}
{"title": "VIRE: Sailing a blue ocean with value-innovative requirements\n", "abstract": " Value-innovative requirements engineering guides software development organizations in creating new markets based on new product values for potential customers. Most requirements-engineering techniques and practices focus on eliciting requirements from existing, known customers. However, these techniques and practices aren't sufficient for surviving in current highly competitive markets. In particular, small organizations typically lack sufficient resources to compete effectively with large companies. W. Chan Kim and Renee Mauborgne proposed the blue-ocean strategy to create new marketplace value and so make competition irrelevant. A \"blue ocean\" is a potential market where competition doesn't yet exist.", "num_citations": "45\n", "authors": ["45"]}
{"title": "Scaling up software architecture analysis\n", "abstract": " This paper will show how architecture design and analysis techniques rest on a small number of foundational principles. We will show how those principles have been instantiated as a core set of techniques. These techniques, combined together, have resulted in several highly successful architecture analysis and design methods. Finally, we will show how these foundations, and the techniques that instantiate them, can be re-combined for new purposes addressing problems of ever-increasing scale, specifically: addressing the highly complex problems of analyzing software-intensive ecosystems.", "num_citations": "44\n", "authors": ["45"]}
{"title": "Surveying the solitudes: An investigation into the relationships between human computer interaction and software engineering in practice\n", "abstract": " In this chapter, we analyze the state of software engineering and Human-Computer Interaction research and practice. In particular we are interested in the overlaps and interfaces between these two influential fields. We begin with an analysis of the state of the research that lies at the conjunction of these two areas, and then present the results of a survey that examines how HCI practitioners and software engineers interact in industry. The main findings of the survey are disturbing: there is a substantial lack of mutual understanding among software engineers and HCI specialists, and the results from research do not appear to be strongly influencing this interaction. Furthermore, there appear to be important differences in how software engineers and HCI practitioners view their interaction in the software engineering life cycle. The final, and perhaps most serious, finding of this chapter is that software engineers\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "41\n", "authors": ["45"]}
{"title": "Structuring the text of the Oxford English Dictionary through finite state transduction\n", "abstract": " By Fall 1986 the Oxford English Dictionary will have been completely entered into machine-readable form as a \u2229\u00bc\u00fcrst step toward creating an integrated version of the Dictionary and its Supple-ment. The ability to update and revise the OED requires the addition of a considerable amount of structure to the keyboarded text. Various software approaches to transducing the text of the OED in order to add this structure were evaluated, and eventually INR and lsim were chosen. The use of INR, a program for computing \u2229\u00bc\u00fcnite automata, necessitated that the structure of the OED be described as a regular language. The methods used to describe the OED, resolve ambiguities and deal with space limitations are detailed. These methods are not limited to the OED, but may be applied to any text in which one wishes to augment the structural information.", "num_citations": "41\n", "authors": ["45"]}
{"title": "Agile big data analytics development: An architecture-centric approach\n", "abstract": " Agile development for big data analytics has become the new normal. However, research questions remain: 1) how should a big data system be designed and developed to effectively support advanced analytics? and 2) how should the agile process be adapted for big data analytics development? This article contributes an Architecture-centric Agile Big data Analytics (AABA) development methodology evolved and validated in 10 case studies through Collaborative Practice Research. Our studies showed that architecture agility is the key for successful agile big data analytics development. Employing an architecture-centric approach, the AABA methodology integrates the Big Data system Design (BDD) method and Architecture-centric Agile Analytics with architecture-supported DevOps (AAA) model for effective value discovery and rapid continuous delivery of value. The uses of a design concepts catalog and\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "40\n", "authors": ["45"]}
{"title": "Accessing multimedia through concept clustering\n", "abstract": " Multimedia information retrieval is a challenging problem because multimedia information is not inherently structured. Jabber is an experimental system that attempts to bring some structure to this task. Jabber allows users to retrieve records of videoconferences based upon the concepts discussed. In this paper we introduce ConceptFinder, a sub-system within Jabber, and show how it is able to process the spoken text of a meeting into meeting topics. ConceptFinder can make subtle distinctions among different senses of the same words, and is able to summarize a set of related words, giving a name to each topic. Users can then use this name to query or browse the stored multimedia, through Jabber\u0393\u00c7\u00d6s user interface. By presenting information that closely matches a user\u0393\u00c7\u00d6s expectations, the challenge of multimedia retrieval is rendered more tractable.", "num_citations": "39\n", "authors": ["45"]}
{"title": "Toward agile architecture: Insights from 15 years of ATAM data\n", "abstract": " Agile teams strive to balance short-term feature development with longer-term quality concerns. These evolutionary approaches often hit a \"complexity wall\"' from the cumulative effects of unplanned changes, resulting in unreliable, poorly performing software. So, the agile community is refocusing on approaches to address architectural concerns. Researchers analyzed quality attribute concerns from 15 years of Architecture Trade-Off Analysis Method data, gathered from 31 projects. Modifiability was the dominant concern across all project types; performance, availability, and interoperability also received considerable attention. For IT projects, a relatively new quality-deployability-emerged as a key concern. The study results provide insights for agile teams allocating architecture-related tasks to iterations. For example, teams can use these results to create checklists for release planning or retrospectives to help\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "37\n", "authors": ["45"]}
{"title": "Simulated annealing techniques\n", "abstract": " This chapter will present the essential components of the simulated annealing (SA) algorithm and review its origins and potential for solving a wide range of optimization problems, in a manner that is accessible to the widest possible audience. Some historical perspective and description of recent research results will also be provided. During the course of this review bibliographical references will be provided to guide the interested reader to sources that contain additional theoretical results and complete details of individual applications.Many problems in a variety of disciplines can be formulated as optimization problems; and most of these can be solved by adopting one of two \u0393\u00c7\u00a3popular\u0393\u00c7\u00a5 approaches: divide-and-conquer or hillclimbing techniques (other approaches can be adopted, see for example,[31], and see also Chapters 30\u0393\u00c7\u00f432). In the first approach, the solution is problem-dependent, and typically detailed\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "36\n", "authors": ["45"]}
{"title": "A principled way to use frameworks in architecture design\n", "abstract": " In the past decade, researchers have devised many methods to support and codify architecture design. However, what hampers such methods' adoption is that these methods employ abstract concepts such as views, tactics, and patterns, whereas practicing software architects choose technical design primitives from the services offered in commercial frameworks. A holistic and more realistic approach to architecture design addresses this disconnect. This approach uses and systematically links both top-down concepts, such as patterns and tactics, and implementation artifacts, such as frameworks, which are bottom-up concepts. The Web extra at http://youtu.be/kygFOV8TqEw is a video in which Humberto Cervantes from Autonomous Metropolitan University interviews Josu\u251c\u2310 Mart\u251c\u00bcnez Buenrrostro, a software architect at Quarksoft in Mexico City, about the design process discussed in the article \"A Principled Way to\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "35\n", "authors": ["45"]}
{"title": "The affective and cognitive impacts of perceived touch on online customers' intention to return in the web-based eCRM environment\n", "abstract": " Electronic Customer Relationship Management (ECRM) systems focus on a website as the interaction channel for creating a one-to-one relationship with customers via various \u0393\u00c7\u00a3touch\u0393\u00c7\u00a5 options. The intention of such technologies is to affectively and cognitively impact on online customers\u0393\u00c7\u00d6 intention to return to the website. To capture the influence of eCRM systems, we define a construct, Perceived Touch, to differentiate the customer\u0393\u00c7\u00d6s perception of the touch received from the actual level of touch deployed. We report the results of an empirical study that provides evidence that Perceived Touch positively influences customers\u0393\u00c7\u00d6 Behavioral Intention to Return via both affective and cognitive routes. Our results show that Perceived Touch provides a theoretical underpinning for eCRM system design and suggests that e-business managers invest in the design and evaluation of the users\u0393\u00c7\u00d6 perception of touch options and pay\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "35\n", "authors": ["45"]}
{"title": "Amazon in the air: Innovating with big data at Lufthansa\n", "abstract": " Big data offers great opportunities for innovation. However, at the end of 2014, at the peak of its hype, big data deployment was still scarce and failures abounded. This article presents a case of how Lufthansa, the largest airline in Europe, successfully tackled the task of discovering value from big data, addressing the inherent technical complexities, and transforming their business model of selling airline tickets to customers to one that we call \"Amazon in the Air\" where service-dominant logic prevails. This case demonstrates that IT innovation is the business imperative to survive and exemplifies the complex business environment and rapid changes for which big data is being considered. Our case study also sheds light on the challenges and critical success factors for innovating with big data and how to navigate through uncharted waters, employing new thinking and new approaches to seize innovation with big data.", "num_citations": "34\n", "authors": ["45"]}
{"title": "Architecting ultra-large-scale green information systems\n", "abstract": " As environmental sustainability issues have come to the societal and governmental forefront, a new breed of Green Information Systems (IS) - Ultra-Large-Scale (ULS) Green IS - is emerging. A ULS Green IS is an open socio-technical ecosystem that differs from traditional IS in scale, complexity and urgency. Design issues found in ULS systems, System of Systems, Edge-dominant, Metropolis systems and Green IS converge and multiply in the ULS Green IS context. This paper presents a design framework and an architecture analysis method, ECO-ARCH, to address the design of such systems. Through an action research study on architecting for Demand Response systems in the Smart Grid, this article illuminates the system characteristics of ULS Green IS and endorses a fundamental shift in design thinking for its design - from \u0393\u00c7\u00a3bounded rationality\u0393\u00c7\u00a5 for problem solving to \u0393\u00c7\u00a3expandable rationality\u0393\u00c7\u00a5 for design for the\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "34\n", "authors": ["45"]}
{"title": "Abstraction classes in software design\n", "abstract": " We distinguish three abstraction strata in software design statements:(i) Strategic design statements (\u0393\u00c7\u00ffarchitectural design\u0393\u00c7\u00d6) determine global constraints, such as programming paradigms, architectural styles, component-based software enginering standards, design principles, and lawgoverned regularities;(ii) Tactical design statements (\u0393\u00c7\u00ffdetailed design\u0393\u00c7\u00d6) determine local constraints, such as design patterns, programming idioms, and refactorings;(iii) Implementation statements determine specific properties of the implementation, such as a class diagrams and program documentation. Seeking to ground this intuition in a well-defined vocabulary, we define two criteria of distinction in mathematical logic. We present the Intension/Locality hypothesis, postulating that the spectrum of software design statements is divided into three well-defined \u0393\u00c7\u00ffabstraction classes\u0393\u00c7\u00d6 as follows:(i) the class of non-local statements (NL\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "32\n", "authors": ["45"]}
{"title": "A foundation for the economic analysis of software architectures\n", "abstract": " This position paper is an attempt to show how realoptions theory and portfolio theory\u0393\u00c7\u00f6can be applied to making software investment decisions in practice. We have previously developed a method, called CBAM, for making software investment decisions based upon architectural analysis, and have applied this method to a large-scale system development\u0393\u00c7\u00f6NASA\u0393\u00c7\u00d6s ECS project. Building upon this experience, we reflect upon the relationship between the theory of economic models and what can be done in practice.", "num_citations": "32\n", "authors": ["45"]}
{"title": "A semantic foundation for architectural reengineering and interchange\n", "abstract": " The article describes our view on the importance of exchanging not only system information in the reengineering community, but also exchanging a description of the semantics that underly the extraction, annotation and augmentation of the information one wishes to exchange. The semantics are more than the schema of the information exchanged. They include the rationale for the structure of the schema itself. We also make the point that we need to be explicit about what it means to reconstruct architecture, in terms of the architectural semantics that we are hypothesizing for the system being analyzed. We present the discussion in the context of a revised set of levels based on the CORUM II model.", "num_citations": "32\n", "authors": ["45"]}
{"title": "Service candidate identification from monolithic systems based on execution traces\n", "abstract": " Monolithic systems increasingly suffer from maintainability and scalability issues as they grow in functionality, size, and complexity. It is widely believed that (micro)service-based architectures can alleviate these problems as each service is supposed to have the following characteristics: clearly defined functionality, sufficient modularity, and the ability to evolve independently. Industrial practices show that service extraction from a legacy monolithic system is labor-intensive and complex. Existing work on service candidate identification aims to group entities of a monolithic system into potential service candidates, but this process has two major challenges: first, it is difficult to extract service candidates with consistent quality; second, it is hard to evaluate the identified service candidates regarding the above three characteristics. To address these challenges, this paper proposes the Functionality-oriented Service\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "30\n", "authors": ["45"]}
{"title": "Null arguments and the acquisition of Case and Infl\n", "abstract": " This paper will attempt to provide a theoretical framework for the analysis of the acquisition of abstract Case and Infl in children and their relationship to the acquisition of obligatory subjects and several other phenomena of language development. This analysis will be done within the Government Binding (GB) framework, as described in Chomsky [Cho81] and in subsequent works. This framework will ideally account for the order of acquisition of the elements of language, for many of the typical mistakes which children make, and for the way in which these mistakes are made.We will be appealing to Borer and Wexler's maturational hypothesis of language acquisition [BW87] throughout this paper. Borer and Wexler, challenging Pinker's\" continuity hypothesis\"[Pin84], claim that we should endeavour to model a time-dependent process, such as language acquisition, in a paradigm which takes into account the maturation of the learner. Pinker's claim is that the principles and the representations with which a child analyzes his language do not change, whereas Borer and Wexler's hypothesis states that certain principles of linguistic competence mature, on analogy with other biological processes, such as the development of long-term memory, or of secondary sexual characteristics. The availability of certain linguistic principles is not, therefore, solely dependent upon external evidence. Although, as will be seen in Section 3, we disagree with Borer and Wexler on some details of their analysis\u0393\u00c7\u00f6in particular their hypothesis about the maturation of A-chains\u0393\u00c7\u00f6we believe that their proposal that some linguistic abilities mature is essentially correct.", "num_citations": "30\n", "authors": ["45"]}
{"title": "Architectural analysis for security\n", "abstract": " Existing research on systems security has focused on coding, providing little insight into how to create a secure architecture. Combining architectural analysis techniques based on tactics, patterns, and vulnerabilities will achieve the best outcomes.", "num_citations": "29\n", "authors": ["45"]}
{"title": "Demystifying big data adoption: Beyond IT fashion and relative advantage\n", "abstract": " There is a paradox in big data adoption: a peak of hype and simultaneously an unexpectedly low deployment rate. The present multiple case study research develops a Big Data Adoption (Big 2) model that helps to explain this paradox and sheds light on the \u0393\u00c7\u00a3whether\u0393\u00c7\u00a5,\u0393\u00c7\u00a3why\u0393\u00c7\u00a5, and \u0393\u00c7\u00a3how\u0393\u00c7\u00a5 questions regarding big data adoption. The Big 2 model extends beyond the existing Relative Advantage and IT Fashion theories to include organizational, environmental, social variables as well as new psychological factors that are unique to big data adoption. Our analysis reveals that the outcome of big data adoption is indeterministic, which defies the implicit assumption of most simplistic \u0393\u00c7\u00a3rational-calculus\u0393\u00c7\u00a5 models of innovation adoption: Relative Advantage is a necessary but not sufficient condition for big data adoption. Most importantly, our study uncovered a \u0393\u00c7\u00a3Deployment Gap\u0393\u00c7\u00a5 and a \u0393\u00c7\u00a3Limbo Stage\u0393\u00c7\u00a5 where companies continuously experiment for a long time and do not proceed to deployment despite the intent to adopt big data. As a result there are four big data adoption categories: Not adopting, Experimented but Not Adopting, Not Yet Deployed, Deployed. Our Big 2 model contributes to provide a Paradigm Shift and Complexity Tolerance perspective to understand the \u0393\u00c7\u00a3why\u0393\u00c7\u00a5 in each of the 4 adoption categories. This study further identifies 9 complexity tolerance strategies to help narrow the Deployment Gap but also shows that big data is not for everyone.", "num_citations": "29\n", "authors": ["45"]}
{"title": "iUCP: Estimating Interactive-Software Project Size with Enhanced Use-Case Points.\n", "abstract": " A proposed approach adapts use-case point (UCP) estimation to agile development of interactive software. To create product cost estimates early during development, developers must agree on the concepts driving the estimations and rely on substantial data from past projects, along with constant feedback and fine-tuning. To enhance the estimations' consistency, interactive UCP (iUCP) uses information extracted according to the concepts of usage-centered design (usageCD). It assigns complexity factors to actors and use cases and uses those factors to calculate unadjusted UCPs reflecting the requirements' complexity. The main basis for weighting complex actors is the user roles. The bases for weighting use cases are essential use-case steps portrayed as user intentions and system responsibilities along with analysis classes extracted from the usageCD architecture. An empirical study shows that estimations\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "29\n", "authors": ["45"]}
{"title": "The metropolis model and its implications for the engineering of software ecosystems\n", "abstract": " In this paper, we claim that existing models of software engineering and software development lifecycles are seriously out of touch with some of the most important systems in the world---those that are created as a result of commons-based peer production (sometimes known as\" crowdsourcing\"). To be relevant, software engineering needs a new model of how such software is to be created, maintained, and operated. We propose just such a new model, called the Metropolis Model, which attempts to capture and provide a framework for reasoning about this new and increasingly important form of software-intensive system production.", "num_citations": "29\n", "authors": ["45"]}
{"title": "Rapid prototyping of information visualizations using VANISH\n", "abstract": " Discusses a software tool called VANISH (Visualizing And Navigating Information Structured Hierarchically), which supports the rapid prototyping of interactive 2D and 3D information visualizations. VANISH supports rapid prototyping through a special-purpose visual language called VaPL (VANISH Programming Language) tailored for visualizations, through a software architecture that insulates visualization-specific code from changes in both the domain being visualized and the presentation toolkit used, and through the reuse of visualization techniques between application domains. The generality of VANISH is established by showing how it is able to re-create a wide variety of \"standard\" visualization techniques. VANISH's support for prototyping is shown through an extended example, where we build a C++ class browser, exploring many visualization alternatives in the process.", "num_citations": "29\n", "authors": ["45"]}
{"title": "Load balancing, latency management and separation of concerns in a distributed virtual world\n", "abstract": " Although many research groups are currently designing and building virtual worlds based upon the functionality of a single hardware platform or a small number of tightly connected platforms, the need for distributing virtual worlds has been well demonstrated in domains such as ight simulators (Lee, Rissman, D'Ippolito, Plinta and Van Scoy 1988) and distributed tank combat simulations (Blau, Hughes, Moshell and Lisle 1992). As soon as developers attempt to build virtual worlds of real-world delity, the need to distribute becomes apparent (current ight simulators require dozens of CPUs working in concert| and a ight simulator is potentially a single participant in a virtual world) because these worlds must be able to scale up gracefully.The need to distribute functionality exists for two reasons, one purely technical and one psychological: 1) no single processor, even a super-computer, can provide su cient resources to computer even a tiny fraction of what we might demand from a virtual world; 2) the ability of humans to comprehend a code module decreases rapidly as the size of the module increases (Myers 1978).", "num_citations": "29\n", "authors": ["45"]}
{"title": "From requirements negotiation to software architectural decisions\n", "abstract": " Uncertainty of system properties (eg, performance, reliability, security, interoperability, usability, etc.) often hinders the progress of requirements negotiation. Software architecture evaluation techniques enable stakeholders to clarify the uncertainty of system properties. In another hand, software architecture alternatives cannot be evaluated in a thorough way without consideration of different stakeholders\u0393\u00c7\u00d6 negotiated requirements. Effective requirements negotiation is therefore needed to evaluate architecture alternatives.", "num_citations": "28\n", "authors": ["45"]}
{"title": "Hidra: An architecture for highly dynamic physically based multi-agent simulations\n", "abstract": " : The design of highly dynamic physically based multi-agent simulations is complicated by many potentially conflicting factors, among them: ease of specification, flexibility and reuse of components, real-time performance, communication loads, and ease of distribution. This paper introduces HIDRA (highly interactive distributed real-time architecture), which was designed not only to ease the specification of multi-agent simulations, but also to enable a designer to make informed choices among the factors influencing such a system. The HIDRA architecture revolves around three concepts: autonomous objects---objects which contain an explicit model of their own behavior and can simulate this behavior autonomously in real time; the management of a world view---a distributed description of the environment in which objects are simulated; and separation of the detection and resolution of interactions in discrete processes. Autonomous objects can be described which exhibit varying levels of au...", "num_citations": "28\n", "authors": ["45"]}
{"title": "Automated verification of design patterns: A case study\n", "abstract": " Representing design decisions for complex software systems, tracing them to code, and enforcing them throughout the lifecycle are pressing concerns for software architects and developers. To be of practical use, specification and modeling languages for software design need to combine rigor with abstraction and simplicity, and be supported by automated design verification tools that require minimal human intervention. This paper examines closely the use of the visual language of Codecharts for representing design decisions and demonstrate the process of verifying the conformance of a program to the chart. We explicate the abstract semantics of segments of the Java package java.awt as a finite structures, specify the Composite design pattern as a Codechart and unpack it as a set of formulas, and prove that the structure representing the program satisfies the formulas. We also describe a set of tools for\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "27\n", "authors": ["45"]}
{"title": "Inception of software validation and verification practices within CMMI Level 2\n", "abstract": " Validation and verification are mandatory activities that software companies must perform when developing software products with a high degree of quality. Currently, more companies become aware that adopting CMMI (the software process maturity model developed by the Software Engineering Institute) can be a way to develop quality software. However, some companies are resistant to adopt CMMI maturity level 2 because they do not considerer this maturity level a benefit since its implementation is expensive and does not cover the validation and verification efforts. The simultaneous adoption of CMMI maturity level 2 with validation and verification process areas (from maturity level 3) lacks some methodological recommendations, since some dependencies exist between those two CMMI maturity levels. This PhD thesis will propose one approach to conciliate validation and verification practices with of CMMI\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "27\n", "authors": ["45"]}
{"title": "Exploring community smells in open-source: An automated approach\n", "abstract": " Software engineering is now more than ever a community effort. Its success often weighs on balancing distance, culture, global engineering practices and more. In this scenario many unforeseen socio-technical events may result into additional project cost or ?social\" debt, e.g., sudden, collective employee turnover. With industrial research we discovered community smells, that is, sub-optimal patterns across the organisational and social structure in a software development community that are precursors of such nasty socio-technical events. To understand the impact of community smells at large, in this paper we first introduce CodeFace4Smells, an automated approach able to identify four community smell types that reflect socio-technical issues that have been shown to be detrimental both the software engineering and organisational research fields. Then, we perform a large-scale empirical study involving over 100\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "26\n", "authors": ["45"]}
{"title": "Evaluating the effects of architectural documentation: A case study of a large scale open source project\n", "abstract": " Sustaining large open source development efforts requires recruiting new participants; however, a lack of architectural documentation might inhibit new participants since large amounts of project knowledge are unavailable to newcomers. We present the results of a multitrait, multimethod analysis of the effects of introducing architectural documentation into a substantial open source project-the Hadoop Distributed File System (HDFS). HDFS had only minimal architectural documentation, and we wanted to discover whether the putative benefits of architectural documentation could be observed over time. To do this, we created and publicized an architecture document and then monitored its usage and effects on the project. The results were somewhat ambiguous: by some measures the architecture documentation appeared to effect the project but not by others. Perhaps of equal importance is our discovery that the\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "25\n", "authors": ["45"]}
{"title": "Evaluating software architectures for real-time systems\n", "abstract": " In this paper we describe a process for evaluating the architectures of large, complex software-intensive systems. This process involves both social and technical aspects. The social aspects deal with planning and running an evaluation. The technical aspects concentrate on the representation of architectural information, standard questions, analyses, and quality attribute characterizations. We then take the generic notion of architectural evaluation, and discuss some techniques for applying this technique to the domain of real-time systems.", "num_citations": "25\n", "authors": ["45"]}
{"title": "Evaluating security properties of architectures in unpredictable environments: A case for cloud\n", "abstract": " The continuous evolution and unpredictability underlying service-based systems leads to difficulties in making exact QoS claims about the dependability of architectures interfacing with them. Hence, there is a growing need for new methods to evaluate the dependability of architectures interfacing with such environments. This paper presents a method for evaluating the security quality attribute of architectures in service-based systems. The proposed method combines some properties of the Architectural Tradeoff Analysis Method (ATAM) and security testing using Implied Scenario. In particular, the scenario elicitation process of ATAM is improved by utilising Implied Scenario technique to generate scenarios which may be undetected using plain ATAM. An industrial case study of a problem related to securing data at the Software-as-a-Service layer on Force.com Cloud platform is adopted to validate the new method\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "23\n", "authors": ["45"]}
{"title": "Software architecture\n", "abstract": " Software architecture is a rapidly growing sub-area of research and practice within software engineering. The foundation of any large software intensive system is its architecture. This artifact describes how the system will accomplish its tasks, how the development work will be broken down, how quality goals will be met, and much more. Because of its central importance, an architecture needs to be carefully designed and carefully analyzed, particularly in light of its ability to meet its quality requirements, such as performance, availability, security, and modifiability. The technical and business implications of an architecture need to be fully understood. And, in cases of legacy systems, the architecture of an existing system may need to be reverse engineered.", "num_citations": "23\n", "authors": ["45"]}
{"title": "Temporal indexing through lexical chaining\n", "abstract": " As computerized repositories of information move increasingly away from traditional structured record-and field-oriented relational and hierarchical databases, to databases that include large bodies of unstructured data, new techniques will be needed to aid in the storage, indexing, and retrieval of this information (Kazman and Kominek 1993). The sources of such data are all around: televised newscasts, movies, videotaped lectures, requirements elicitation, computer-scanned photographs, computercaptured and computer-generated music. All of these new computer media types are either inherently unstructured or structured only within a limited domain (Zhang et al. 1995). The domain of interest for the research being presented here is videoconferences: conferences where the participants are physically remote and communicate through video and audio channels, as well as potentially sharing computer applications. Such conferences are already being used to reduce some of the need for business travel and to extend the reach of university courses to remote communities. However, the data resulting from such conferences are currently stored as a set of parallel streams of unstructured data. Occasionally, videotaped meetings are indexed so that they may be queried like a database or browsed like an encyclopedia, but typically this indexing requires enormous amounts of manual labor (Salomon, Oren, and Kreitman 1989). There is little research into the management and automatic indexing of such repositories of information. Such research is clearly needed if the potential of distributed communication is to become a reality.", "num_citations": "23\n", "authors": ["45"]}
{"title": "Architecture anti-patterns: Automatically detectable violations of design principles\n", "abstract": " In large-scale software systems, error-prone or change-prone files rarely stand alone. They are typically architecturally connected and their connections usually exhibit architecture problems causing the propagation of error-proneness or change-proneness. In this paper, we propose and empirically validate a suite of architecture anti-patterns that occur in all large-scale software systems and are involved in high maintenance costs. We define these architecture anti-patterns based on fundamental design principles and Baldwin and Clark's design rule theory. We can automatically detect these anti-patterns by analyzing a project's structural relationships and revision history. Through our analyses of 19 large-scale software projects, we demonstrate that these architecture anti-patterns have significant impact on files' bug-proneness and change-proneness. In particular, we show that 1) files involved in these architecture\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "22\n", "authors": ["45"]}
{"title": "Design rule spaces: A new model for representing and analyzing software architecture\n", "abstract": " In this paper, we propose an architecture model called Design Rule Space (DRSpace). We model the architecture of a software system as multiple overlapping DRSpaces, reflecting the fact that any complex software system must contain multiple aspects, features, patterns, etc. We show that this model provides new ways to analyze software quality. In particular, we introduce an Architecture Root detection algorithm that captures DRSpaces containing large numbers of a project's bug-prone files, which are called Architecture Roots (ArchRoots). After investigating ArchRoots calculated from 15 open source projects, the following observations become clear: from 35 to 91 percent of a project's most bug-prone files can be captured by just 5 ArchRoots, meaning that bug-prone files are likely to be architecturally connected. Furthermore, these ArchRoots tend to live in the system for significant periods of time, serving as\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "22\n", "authors": ["45"]}
{"title": "Interface descriptions for enterprise architecture\n", "abstract": " This paper describes our experiences in implementing a repository-based system that records and manages architectural information for an organization-wide set of enterprise information systems. The system is called Interface Descriptions for Enterprise Architecture (IDEA). The IDEA system business case and system creation are discussed, and the use of the system is exemplified by applying it to a set of information systems within a large corporation. We show how the existence of a managed enterprise architecture description enables an important set of analyses: risk analyses, architecture analyses, and change management analyses. Finally, we discuss how the IDEA system has the potential to catalyze even more profound change by changing how the various systems\u0393\u00c7\u00d6 stakeholders interact.", "num_citations": "22\n", "authors": ["45"]}
{"title": "Software Architecture Evaluation with ATAM in the DoD System Acquisition Context\n", "abstract": " Many modern defense systems rely heavily on software to achieve system functionality. Because software architecture is a major determinant of software quality, it follows that software architecture is critical to the quality of a software-intensive system. For a Department of Defense DoD acquisition organization, the ability to evaluate software architectures can have a favorable impact on the delivered system. This technical note explains the basics of software architecture and software architecture evaluation in a system-acquisition context. It also sets the context for applying software architecture evaluation based on the Architecture Tradeoff Analysis Methodsm ATAMsm in the DoD acquisition environment. Future versions of this technical note will expand upon this conceptual approach and provide additional details drawn from real experiences.Descriptors:", "num_citations": "21\n", "authors": ["45"]}
{"title": "Vulnerability-based security pattern categorization in search of missing patterns\n", "abstract": " A Security Pattern encapsulates security design expertise that addresses recurring information security problems in the form of a credentialed solution. It also presents potential problems and trade-offs in its application. This paper proposes a novel classification model for security patterns. Based on our review of more than one hundred security patterns, we categorize security patterns according to the type of vulnerability they address and also identify similar or identical patterns with different names. Our literature review indicates that there exists very little research on the categorization of security patterns based on vulnerabilities. Any attackers need to exploit existing vulnerabilities to break the security of an information system. To solve security problems effectively, we have to fix their root causes, which are vulnerabilities. The primary contribution of this paper is twofold: (1) to propose a novel security pattern\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "20\n", "authors": ["45"]}
{"title": "Microservice transition and its granularity problem: A systematic mapping study\n", "abstract": " Microservices have gained wide recognition and acceptance in software industries as an emerging architectural style for autonomic, scalable, and more reliable computing. The transition to microservices has been highly motivated by the need for better alignment of technical design decisions with improving value potentials of architectures. Despite microservices' popularity, research still lacks disciplined understanding of transition and consensus on the principles and activities underlying that transition. In this paper, we report on a systematic mapping study that consolidates various views, approaches and activities that commonly assist in the transition to microservices. The study aims to provide a better understanding of the transition; it also contributes a working definition of the transition and technical activities underlying it. We term the transition and technical activities leading to microservice architectures as\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "19\n", "authors": ["45"]}
{"title": "Software architectural analysis: an experience report\n", "abstract": " As the software marketplace becomes more competitive, customers and developers demand more from their products. Software quality is now seldom measured solely in terms of executable features. Non-functional qualities, such as portability, modi ability and extendibility are becoming increasingly important in the success of a software product. Software architecture analysis is based upon the assumption that the product's architecture is responsible for a substantial amount of its non-functional qualities. Making such analyses is important because they represent a relatively low-cost means of improving a product early in the software development life cycle or in determining directions for product evolution later in it. Moreover, if architectural analysis is done at the design stage and maintained at every stage of the development of the product, then it also constitutes a very e ective tool for communication within the development team. This paper presents the experience of applying SAAM (Software Architecture Analysis Method) to the analysis and evaluation of a commercial revision control system. The methodology is described, concentrating on (1) the usage scenarios of interest to the various users, developers, and administrators of the system;(2) a technique for characterizing the system at an architectural level; and (3) the evaluation and recommendations made, and their impact on the software development company.", "num_citations": "19\n", "authors": ["45"]}
{"title": "Information organization in multimedia resources\n", "abstract": " The advent of multimedia docume ntation has has tened the rise of video, line art, graphics, image, and sound libraries as \u0393\u00c7\u00a3natural resm. ures\u0393\u00c7\u00a5 for writing. And yet, the potency of today\u0393\u00c7\u00d6s \u0393\u00c7\u00a3mining tools\u0393\u00c7\u00a5 are little better than the pick axe and sifting pan of the 19th century gold prospector-a shortcoming to be overcome if we are to release theinforrnational value and potential of muhhnedia. Quite simply, while we luiveaccessto everincreasingbodiesof information, finding a specific itern within these bodies is pmb lernatic.Even onpersoml computers, finding information is aproblem. Often, theonlyhandle to an itemisa short and insufficiently descriptive filename. Using aconsistent naming scheme helps but is no substitute for goodorganization. Onepossibilityis thehierarchical file system-a ubiquitous struckue having the big advantage of being free, but not without costs, such as what to name your newly created gmphic and\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "19\n", "authors": ["45"]}
{"title": "Revising a security tactics hierarchy through decomposition, reclassification, and derivation\n", "abstract": " Software architecture is the set of important design decisions that address cross-cutting system quality attributes such as security, reliability, availability, and performance. Practitioners often face difficulty in beginning an architectural design due to the lack of concrete building blocks available to them. Tactics are fundamental design decisions and play the role of these initial design primitives and complement the existing design constructs such as architectural or design patterns. A tactic is a relatively new design concept, and tactics repositories are still being developed. However, the maturity of these repositories is inconsistent, and varies depending on the quality attribute. To address this inconsistency and to promote a more rigorous, repeatable method for creating and revising tactics hierarchies, we propose a novel methodology of extracting tactics. This methodology, we claim, can accelerate the development of\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "18\n", "authors": ["45"]}
{"title": "A methodology for mining security tactics from security patterns\n", "abstract": " Although many aids such as architectural styles and patterns are now available for software architects, making optimal design decisions on appropriate architectural structures still requires significant creativity. In an effort to introduce a more direct link between an architectural decision and its consequences, a finer grained architectural concept called a tactic has emerged. Since its introduction, many tactics have been identified and used in real- life applications. However, the number of tactics discovered is not sufficient to cover all the necessary aspects of architectural decision making. The tactics could be created from scratch, but it would be more efficient if tactics could be mined from a proven source. One possible source is any architectural pattern that consists of tactics. Therefore, in this paper we propose a novel way to retrieve tactics from well known patterns. Among the many different types of existing patterns\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "18\n", "authors": ["45"]}
{"title": "The design navigator: charting Java programs\n", "abstract": " The Design Navigator is a semi-automated design mining tool which reverse engineers LePUS3 design charts from Java\u0393\u00e4\u00f3 1.4 programs at any level of abstraction in reasonable time. We demonstrate the Design Navigator's step-wise charting process of Java Foundation Classes, generating decreasingly abstract charts of java. awt and discovering building-blocks in its design.", "num_citations": "18\n", "authors": ["45"]}
{"title": "Attribute-based architectural styles\n", "abstract": " Attribute-based architectural styles (ABASs) are architecture patterns that can be used as primitives for designing and analyzing software architectures. ABASs build on architectural styles by explicitly associating a reasoning framework (qualitative or quantitative) with a style. ABASs allow an architect to reuse the collected wisdom of the architecture design community in much the same way that object-oriented design patterns have given novice designers access to a vast array of experience in the object-oriented design community.Software architecture is a key artifact in the development of complex software-intensive systems. If you are reading this column, presumably you already agree with this statement. To realize the benefits of architectures, they must be designed so that the resulting systems behave predictably. But there is no real discipline of architectural design today\u0393\u00c7\u00f6it is a \u0393\u00c7\u00a3black art,\u0393\u00c7\u00a5 left to a select number\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "18\n", "authors": ["45"]}
{"title": "Assessing and maintaining architectural quality\n", "abstract": " Software architecture analysis is a cost effective means of controlling risk and maintaining system quality throughout the processes of software design, development and maintenance. The paper presents a sequence of steps that maps architectural quality goals into scenarios that measure the goals, mechanisms that realize the scenarios and analytic models that measure the results. This mapping ensures that design decisions and their rationale are documented in such a fashion that they can be systematically explored, varied, and potentially traded off against each other. As systems evolve, the analytic models can be used to assess the impact of architectural changes, relative to the system's changing quality goals.", "num_citations": "18\n", "authors": ["45"]}
{"title": "Architectural support for DevOps in a neo-metropolis BDaaS platform\n", "abstract": " Big data as a Service (BDaaS) provides a viable strategy for organizations to implement scalable, tailorable big data infrastructure and applications built on this infrastructure. New trends in the BDaaS market are moving toward an open world model -- what we call the Neo-Metropolis model -- for developing BDaaS platforms. The key to the success of such large-scale technology-agnostic platforms, we posit, is an architectural strategy revolving around microservices and DevOps. This article presents the results of an action research with a Neo-Metropolis BDaaS vendor and illustrates how architectural support for DevOps is critical in achieving desired system qualities and enabling platform success. This research contributes to illuminate best practices of DevOps, and to validate and augment a set of DevOps tactics previously developed, while adding and recategorizing new instances of well-established\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "17\n", "authors": ["45"]}
{"title": "Empowering end-users to collaboratively structure processes for knowledge work\n", "abstract": " Knowledge work is becoming the predominant type of work in many countries and is involved in the most important processes in organizations. Despite its increasing importance business information systems still lack appropriate support for knowledge-intensive processes, since existing workflow management solutions are too rigid and provide no means to deal with unpredictable situations. Future business information systems that attempt to improve this support need to solve the problem of facilitating non-expert users to structure their processes. The recently published Case Management Model and Notation (CMMN) might overwhelm non-expert users. Our research hypotheses is that end-users can be empowered to structure processes for knowledge work. In an evaluation with two student teams working on a software development project our solution improved the information structure, reproducibility\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "17\n", "authors": ["45"]}
{"title": "Agility and experimentation: Practical techniques for resolving architectural tradeoffs\n", "abstract": " This paper outlines our experiences with making architectural tradeoffs between performance, availability, security, and usability, in light of stringent cost and time-to-market constraints, in an industrial web-conferencing system. We highlight the difficulties in anticipating future architectural requirements and tradeoffs and the value of using agility and experiments as a tool for mitigating architectural risks in situations when up front pen- and-paper analysis is simply impossible.", "num_citations": "17\n", "authors": ["45"]}
{"title": "Supporting the retrieval process in multimedia information systems\n", "abstract": " The paper discusses problems inherent in retrieval from multimedia information systems. These problems stem from the diverse and inherently unstructured nature of multimedia. We examine some problems in this area, identify some notable successes, and present a set of user interface design principles for creating effective interfaces to multimedia information. We then discuss information retrieval problems associated with Jabber, a system that captures, indexes, and allows users to browse the results of multimedia meetings. Finally, we detail a set of techniques that we are using in Jabber's user interface that follow the design principles, and attempt to address the problems of retrieving information from a multimedia database.", "num_citations": "15\n", "authors": ["45"]}
{"title": "Modeling and visualizing object-oriented programs with codecharts\n", "abstract": " Software design, development and evolution commonly require programmers to model design decisions, visualize implemented programs, and detect conflicts between design and implementation. However, common design notations rarely reconcile theoretical concerns for rigor and minimality with the practical concerns for abstraction, scalability and automated verifiability. The language of Codecharts was designed to overcome these challenges by narrowing its scope to visual specifications that articulate automatically-verifiable statements about the structure and organization of object-oriented programs. The tokens in its visual vocabulary stand for the building-blocks of object-oriented design, such as inheritance class hierarchies, sets of dynamically-bound methods, and their correlations. The formalism was tailored for those pragmatic concerns which arise from modeling class libraries and design\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "14\n", "authors": ["45"]}
{"title": "Augmented reality for mining teleoperation\n", "abstract": " Automated mining has been proposed as a solution to reducing mining costs associated with labor and development. Quite simply, no-one will need to work underground. A series of special-purpose mining vehicles is currently being designed for both semi-autonomous operation and teleoperation. A preliminary implementation at INCO's North Mine complex in Copper Cliff, Ontario, Canada, has met with great success. Improvements are required, however, in the presentation and integration of feedback from the remotely operated vehicle due to the poor video image quality. Depth cues in particular have been found to be deficient. Work currently underway at the University of Waterloo involves the development of a graphics engine responsible for the integration and rendering of data from various sources including: live video (analog and/or digital), range-finding data, an intelligent vision system, CAD mine models\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "14\n", "authors": ["45"]}
{"title": "On the worthiness of software engineering research\n", "abstract": " We reflect on the worthiness and impact of software engineering research and we observe that much of the research output by the academic community brings little value to SE practitioners. To understand the situation, we analyze the motivations behind conducting SE research, and the issues that prevent SE research from becoming more valuable and impactful. To address some of these issues, we propose five criteria to help SE researchers reflect on their research and align their research goals with practical needs. Finally we provide some concrete suggestions on how to improve the quality of SE research and how to better transition research results to practice.", "num_citations": "13\n", "authors": ["45"]}
{"title": "Recommended best industrial practice for software architecture evaluation\n", "abstract": " Architectural decisions have a great impact on the consequent quality of software systems. As a result, it is important to evaluate how a software architecture meets its quality demands. Though much focus has been placed on modeling and describing the software architecture as a design artifact, we found that relatively little is known about the current experience with software architecture evaluation. This report details the results of two workshops on software architecture evaluation, held at the Software Engineering Institute (SEI) on November 9-10, 1995 and May 9-10, 1996. The purpose of the workshops was to determine the state of industrial practice in the evaluation of software architectures with respect to a set of desired quality attributes, and to uncover recommendations for best practices. In this report, we summarize the findings of the two workshops, define a set of dimensions to characterize various software\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "13\n", "authors": ["45"]}
{"title": "Experiences applying automated architecture analysis tool suites\n", "abstract": " In this paper, we report our experiences of applying three complementary automated software architecture analysis techniques, supported by a tool suite, called DV8, to 8 industrial projects within a large company. DV8 includes two state-of-the-art architecture-level maintainability metrics-Decoupling Level and Propagation Cost, an architecture flaw detection tool, and an architecture root detection tool. We collected development process data from the project teams as input to these tools, reported the results back to the practitioners, and followed up with telephone conferences and interviews. Our experiences revealed that the metrics scores, quantitative debt analysis, and architecture flaw visualization can effectively bridge the gap between management and development, help them decide if, when, and where to refactor. In particular, the metrics scores, compared against industrial benchmarks, faithfully reflected the\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "12\n", "authors": ["45"]}
{"title": "Making the case for a\" manufacturing execution system\" for software development\n", "abstract": " Seeking to improve information integration throughout the manufacturing process.", "num_citations": "12\n", "authors": ["45"]}
{"title": "In search of architectural patterns for software security\n", "abstract": " Software architects design by combining and tailoring styles, patterns, and tactics with known properties. A security-relevant research agenda will give architects a principled body of knowledge from which to reason.", "num_citations": "12\n", "authors": ["45"]}
{"title": "Performing architecture tradeoff analysis\n", "abstract": " Software architectures, like complex designs in any field, embody trade-offs made by the designers. However, these trade-offs are not always made explicitly by the designers and they may not understand the impacts of their decisions. This paper introduces a scenariobased analysis technique for software architectures-called ATAM-that not only analyzes a software architecture with respect to multiple quality attributes, but explicitly considers the trade-offs inherent in the design.", "num_citations": "12\n", "authors": ["45"]}
{"title": "Analyzing differences between Internet information system software architectures\n", "abstract": " The history of software development is a steady progression of complexity. In response to increasingly complex software, software engineers have provided ever higher levels of abstraction with which to design, code, and analyze systems. The next logical step in this progression is to consider systems at the level of their architecture. We present a scenario-based method for analyzing systems based on their software architecture. We demonstrate this method, the software architecture analysis method (SAAM), by applying it to Internet information systems. The greatest benefits of such an analysis are people and process-oriented: it encourages communication both within a development team and between the team and customers, and it promotes a common understanding of design goals and mechanisms. Because this analysis can be done at low cost and early in the software life cycle, its benefits are enormous.", "num_citations": "12\n", "authors": ["45"]}
{"title": "Determining the usefulness of colour and fonts in a programming task\n", "abstract": " Reports on the results of an experiment that was run in order to help determine if colour or font size was more useful for displaying code in a programming task, and if so, which was more useful. The null hypothesis of the experiment was that neither colour nor font size were of any benefit to users in programming tasks. The null hypothesis was refuted. It was determined that the colour display mechanism both lessened the time taken to perform a code optimization task, and was preferred by subjects. The use of the font size display mechanism showed no significant benefits.< >", "num_citations": "12\n", "authors": ["45"]}
{"title": "Simulating the child's acquisition of the lexicon and syntax\u0393\u00c7\u00f6Experiences with Babel\n", "abstract": " This paper describes the theory and implementation of Babel, a system which explores the hypothesis that much of the differences in the world's languages may be characterized by the inventory and properties of the lexical items and functional categories of those languages. The structure of Babel assumes that functional categories are originally lacking in a child's syntax, and are acquired through a statistical induction process of lexical acquisition. Babel then uses information induced from the structure of the lexicon to create a model of syntax via a deductive, rule-based process. This model makes a number of predictions about the time course of language acquisition. These predictions are tested by running Babel as a simulation of child language acquisition, using large samples of adult speech to children as input. The simulation results are shown to highly correlate to longitudinal studies of child\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "12\n", "authors": ["45"]}
{"title": "A longitudinal study of identifying and paying down architecture debt\n", "abstract": " Architecture debt is a form of technical debt that derives from the gap between the intended and the actual architecture design. In this study we measured architecture debt in two ways: 1) in terms of system-wide coupling measures, and 2) in terms of the number and severity of architecture flaws. In recent research it was shown that the amount of architecture debt has a huge impact on software maintainability and evolution. Consequently, reducing debt is expected to make software less costly and more amenable to change. This paper reports on a longitudinal study of a healthcare communications product created by BrightSquid Secure Communications Corp. This young company is facing the typical trade-off problem of desiring responsiveness to change requests, but wanting to avoid the ever-increasing effort that the accumulation of quick-and-dirty changes eventually incurs. In the first stage of the study, we\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "11\n", "authors": ["45"]}
{"title": "General methods for software architecture recovery: a potential approach and its evaluation\n", "abstract": " Software architecture is a critical artefact in the software lifecycle. It is a system blueprint for construction, it aids in planning teaming and division of work, and it aids in reasoning about system properties. But architecture documentation is seldom created and, even when it is initially created, it is seldom maintained. For these reasons organisations often feel the need to recover legacy architectures, for example, as part of planning for evolution or cloud migration. But there is no existing general architecture recovery approach nor tool that can be applied to any type of system, under any condition. We will show that one way of achieving such generality is to apply systematic code inspection following a Grounded Theory (GT) approach. Though relatively costly and human-intensive, a GT-based approach has several merits, for example: (a) it is general by design; (b) it can be partially automated; (c) it yields\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "11\n", "authors": ["45"]}
{"title": "Lean startup meets software product lines: Survival of the fittest or letting products bloom?\n", "abstract": " Typical management strategies proven to work in already established businesses do not work as expected in startups. Startups do not yet have a business model and product that they could focus on, but are still looking for a working business model. Lean Startup is a method for startup management that focuses on quick iteration and on fast learning to find an iterable business model. As a method, Lean Startup is still quite novel. It does not have much scientific literature written about it, but it is used by startups. The two case study companies were both positive about Lean Startup and felt that the method had given them a helpful approach.", "num_citations": "11\n", "authors": ["45"]}
{"title": "Automated verification of design patterns with LePUS3\n", "abstract": " Specification and [visual] modelling languages are expected to combine strong abstraction mechanisms with rigour, scalability, and parsimony. LePUS3 is a visual, object-oriented design description language axiomatized in a decidable subset of the first-order predicate logic. We demonstrate how LePUS3 is used to formally specify a structural design pattern and prove (\u0393\u00c7\u00f9verify\u0393\u00c7\u00ff) whether any JavaTM 1.4 program satisfies that specification. We also show how LePUS3 specifications (charts) are composed and how they are verified fully automatically in the Two-Tier Programming Toolkit.", "num_citations": "11\n", "authors": ["45"]}
{"title": "An adaptable software architecture for rapidly creating information visualizations\n", "abstract": " While data visualization is an increasingly important analysis tool, both in research and commercial communities, the process of creating these visualizations is still quite complex. Visualizations tend to be hand-crafted, each one different from the previous. This paper presents VANISH, a system created to ease the rapid creation of arbitrary data visualizations. VANISH simplifies the creation of visualizations in two ways: by providing a special-purpose visual language, called VaPL, which maps semantic domains to visual domains; and by easing the integration of new semantic and visual domains. The software structure of VANISH emphasizes separation of concerns: we follow the Arch/Slinky metamodel of user interface software by not only separating the underlying semantic domain to be visualized from the dialog and presentation components, but by providing virtual semantic domain and presentation layers. In this way, it is simple to port from one visualization domain to another, and from one presentation component to another. We demonstrate that it is simple to create abitrary visualizations by implementing several well-known visualization styles such as cone-trees, tree-maps, fisheye views.", "num_citations": "11\n", "authors": ["45"]}
{"title": "Run-time evaluation of architectures: A case study of diversification in IoT\n", "abstract": " Run-time properties of modern software system environments, such as Internet of Things (IoT), are a challenge for existing software architecture evaluation methods. Such systems are largely data-driven, characterized by their dynamism, unpredictability in operation, hyper-connectivity, and scale. Properties, such as performance, delayed delivery, and scalability, are acknowledged to pose great risk and are difficult to evaluate at design-time. Run-time evaluation could potentially be used to complement design-time evaluation, enabling significant deviations from the expected performance values to be captured. However, there are no systematic software architecture evaluation methods that intertwine and interleave design-time and run-time evaluation. This paper addresses this gap by proposing a novel run-time architecture evaluation method suited for systems that exhibit uncertainty and dynamism in their\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "10\n", "authors": ["45"]}
{"title": "Architectural approaches to security: Four case studies\n", "abstract": " An examination of the security approaches in industrial and open source projects shows that a strategic, systemwide architectural approach, implemented as a security framework or as a platform built using these frameworks, results in the highest security and lowest maintenance costs.", "num_citations": "10\n", "authors": ["45"]}
{"title": "Smart decisions: an architectural design game\n", "abstract": " Architecture design is notoriously difficult to teach and to learn. Most competent architects in industry have deep knowledge won from long years of experience. But if we want architecture design to be methodical and repeatable, we need better methods for teaching it. Simply waiting for an aspiring architect to accumulate 10 or 20 years of experience is not acceptable if we believe that software engineering is a true engineering discipline. In this paper we describe our experiences with the development of a game that aids in teaching architecture design, specifically design employing the Attribute-Driven Design method. We discuss our approach to creating the game, and the\" design concepts catalog\" that provides the knowledge base for the game. Finally, we report on our experiences with deploying the game, and the (enthusiastic) assessments and feedback that we have received from industrial and academic\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "10\n", "authors": ["45"]}
{"title": "Can knowledge of technical debt help identify software vulnerabilities?\n", "abstract": " Software vulnerabilities originating from design decisions are hard to find early and time consuming to fix later. We investigated whether the problematic design decisions themselves might be relatively easier to find, based on the concept of \u0393\u00c7\u00a3technical debt,\u0393\u00c7\u00a5 ie, design or implementation constructs that are expedient in the short term but make future changes and fixes more costly. If so, can knowing which components contain technical debt help developers identify and manage certain classes of vulnerabilities? This paper provides our approach for using knowledge of technical debt to identify software vulnerabilities that are difficult to find using only static analysis of the code. We present initial findings from a study of the Chromium open source project that motivates the need to examine a combination of evidence: quantitative static analysis of anomalies in code, qualitative classification of design consequences in issue trackers, and software development indicators in the commit history.", "num_citations": "10\n", "authors": ["45"]}
{"title": "Extending aadl for security design assurance of cyber physical systems\n", "abstract": " Attacks such as the one that compromised the control systems for Iranian centrifuges demonstrate a growing need to improve the design of security in cyber-physical systems. While much of the work on security has focused on coding, many of the common weaknesses that lead to successful attacks are actually introduced by design. This technical report shows how important system-wide security properties can and must be described and validated at the architectural level. This is done through the adoption and use of the Architecture Analysis and Design Language AADL and a further extension of it to describe security properties. This report demonstrates the viability and limitations of this approach through an extended example that allows for specifying and analyzing the security properties of an automotive electronics system. The report begins with a modeling of threats using the Microsoft STRIDE framework and then translates them into attack scenarios. Next, the report describesas AADL components, relationships, and propertiesthe architectural structures, services, and properties needed to guard against such attacks. Finally, the report shows how these properties can be validated at design time using a model checker such as Resolute and discusses the limitations of this approach in addressing common security weaknesses.Descriptors:", "num_citations": "10\n", "authors": ["45"]}
{"title": "Mining big data for detecting, extracting and recommending architectural design concepts\n", "abstract": " An architecture recommender system can help programmers make better design choices to address their architectural quality attribute concerns while doing their daily programming tasks. We mine big data to detect and extract a large set of architectural design concepts, such as design patterns, design tactics, architecture styles, etc., to be used in our architecture recommender system called ARS. However, mining big data poses many practical challenges for system implementation. The volume, velocity and variety of our data set, like all other big data systems, requires careful planning. This first challenge is to select appropriate technologies from the large number of available products for our system implementation. Building on these technologies our greatest challenge is to custom-fit our algorithms to the parallel processing platform we have selected for ARS, to meet our performance goals.", "num_citations": "10\n", "authors": ["45"]}
{"title": "A decision-support system approach to economics-driven modularity evaluation\n", "abstract": " Modularity debt is the most difficult kind of technical debt to quantify and manage. Modularity decay, thus modularity debt, causes huge losses over time in terms of reduced ability to provide new functionality and fix bugs, operational failures, and even canceled projects. As modularity debt accumulates over time, software system managers are often faced with a challenging task of deciding when and whether to refactor, for example, choosing to improve modularity or not. While the costs of refactoring are significant and immediate, their benefits are largely invisible, intangible, and long term. Existing research lacks effective methods to quantify the costs and benefits of refactoring to support refactoring decision making. In this chapter, we present a decision-support system (DSS) approach to the modularity debt management. Using such a system, managers would be able to play out various \u0393\u00c7\u00a3what-if\u0393\u00c7\u00a5 scenarios to make\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "10\n", "authors": ["45"]}
{"title": "Introducing tool-supported architecture review into software design education\n", "abstract": " While modularity is highly regarded as an important quality of software, it poses an educational dilemma: the true value of modularity is realized only as software evolves, but student homework, assignments and labs, once completed, seldom evolve. In addition, students seldom receive feedback regarding the modularity and evolvability of their designs. Prior work has shown that it is extremely easy for students and junior developers to introduce extra dependencies in their programs. In this paper, we report on a first experiment applying a tool-supported architecture review process in a software design class. To scientifically address this education problem, our first objective is to advance our understanding of why students make these modularity mistakes, and how the mistakes can be corrected. We propose tool-guided architecture review so that modularity problems in students' implementation can be revealed and\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "10\n", "authors": ["45"]}
{"title": "Dynamic meeting annotation and indexing\n", "abstract": " : This paper presents research on a system which automatically indexes meetings where distributed participants are linked by voice, video, and shared computer applications. We approach the indexing of such meetings in four ways: 1) indexing by what people say (through speech recognition and lexical chaining), 2) indexing by meeting agendas, 3) indexing by people's temporal interaction paradigms, and 4) indexing by the participants' interactions with the application. We discuss each of the interaction paradigms we propose, the indexing techniques we use, and a prototype implementation of the system, called Jabber. Special attention is given to the user interface design issues of this dynamic annotation tool since meetings demand the full cognitive attention of participants making it difficult to introduce computer support tools. Keywords: CSCW, video conferencing, video annotation, distributed meeting support, information retrieval, automatic indexing 1 Introduction As more market and...", "num_citations": "10\n", "authors": ["45"]}
{"title": "Software architecture measurement\u0393\u00c7\u00f6Experiences from a multinational company\n", "abstract": " In this paper, we present our 4-year experience of creating, evolving, and validating an automated software architecture measurement system within Huawei. This system is centered around a comprehensive scale called the Standard Architecture Index (SAI), which is composed of a number of measures, each reflecting a recurring architecture problem. Development teams use this as a guide to figure out how to achieve a better score by addressing the underlying problems. The measurement practice thus motivates desired behaviors and outcomes. In this paper, we present our experience of creating and validating SAI 1.0 and 2.0, which has been adopted as the enterprise-wide standard, and our directions towards SAI 3.0. We will describe how we got the development teams to accept and apply SAI through pilot studies, constantly adjusting the formula based on feedback, and correlating SAI scores with\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "9\n", "authors": ["45"]}
{"title": "Toward big data value engineering for innovation\n", "abstract": " This article articulates the requirements for an effective big data value engineering method. It then presents a value discovery method, called Eco-ARCH (Eco-ARCHitecture), tightly integrated with the BDD (Big Data Design) method for addressing these requirements, filling a methodological void. Eco-ARCH promotes a fundamental shift in design thinking for big data system design - from \"bounded rationality\" for problem solving to \"expandable rationality\" for design for innovation. The Eco-ARCH approach is most suitable for big data value engineering when system boundaries are fluid, requirements are ill-defined, many stakeholders are unknown and design goals are not provided, where no architecture pre-exists, where system behavior is non-deterministic and continuously evolving, and where co-creation with consumers and prosumers is essential to achieving innovation goals. The method was augmented\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "9\n", "authors": ["45"]}
{"title": "Predicting and fixing vulnerabilities before they occur: a big data approach\n", "abstract": " The number and variety of cyber-attacks is rapidly increasing, and the rate of new software vulnerabilities is also rising dramatically. The cybersecurity community typically reacts to attacks after they occur. Being reactive is costly and can be fatal, where attacks threaten lives, important data, or mission success. Taking a proactive approach, we are:(I) identifying potential attacks before they come to fruition, and based on this identification;(II) developing preventive counter-measures. We describe a Proactive Cybersecurity System (PCS), a layered, modular service platform that applies big data collection and processing tools a wide variety of unstructured data sources to identify potential attacks and develop countermeasures. The PCS provides security analysts a holistic, proactive, and systematic approach to cybersecurity. Here we describe our research vision and progress towards that vision.", "num_citations": "9\n", "authors": ["45"]}
{"title": "Customer requirements validation method based on mental models\n", "abstract": " Customer requirements are critical factors in the success of a software project. Owing to their importance, several methods for understanding customer requirements have been studied in requirements engineering. Although previous studies have mainly focused on the elicitation and analysis of requirements, a method for validating elicited requirements from the customers' perspective has not been actively studied. In this paper, we propose a customer requirements validation (Curve) method using the mental model technique, which is used for analyzing customers' behaviors and their mental states. The Curve provides clear criteria for requirements validation, an integrated framework for evaluating requirements, and it enables prioritization of key requirements based on customers' inner needs. Through this method it is possible to produce software products that better satisfy customers' true needs.", "num_citations": "9\n", "authors": ["45"]}
{"title": "Working session: software architecture competence\n", "abstract": " Much research in the software architecture field has focused on the purely technical aspects of architecting: architectural styles, documentation, analysis, architecture description languages, reverse engineering, and so forth. In this working session we seek to explore a less exhaustively studied, but equally important, realm: architectural competence. What defines a competent software architect? And equally important, what defines an architecturally competent software development organization? In particular, we seek to better understand the following issues: (a) What do architects actually do on a day-to-day basis? (b) What skills and knowledge must a competent architect have? (c) What does it mean to be a competent architect? (d) What can an organization do to get the best performance from its software architects? (e) How can we measure architectural competence of an individual or an organization and how\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "9\n", "authors": ["45"]}
{"title": "Big data value engineering for business model innovation\n", "abstract": " Big data value engineering for business model innovation requires a drastically different approach as compared with methods for engineering value under existing business models. Taking a Design Science approach, we conducted an exploratory study to formulate the requirements for a method to aid in engineering value via innovation. We then developed a method, called Eco-ARCH (Eco-ARCHitecture) for value discovery. This method is tightly integrated with the BDD (Big Data Design) method for value realization, to form a big data value engineering methodology for addressing these requirements. The Eco-ARCH approach is most suitable for the big data context where system boundaries are fluid, requirements are ill-defined, many stakeholders are unknown, design goals are not provided, no central architecture pre-exists, system behavior is non-deterministic and continuously evolving, and co-creation with consumers and prosumers is essential to achieving innovation goals. The method was empirically validated in collaboration with an IT service company in the Electric Power industry.", "num_citations": "8\n", "authors": ["45"]}
{"title": "Two-tier programming\n", "abstract": " In practice, the development and maintenance (if any) of a system\u0393\u00c7\u00d6s design specifications are carried out in veritable isolation from the development and maintenance of the implementation. Design decisions are represented independently from the implementation and its analysis and verification are carried out (if at all) by a separate tool set. The dissociation between the specification layers produces architectural drift and architectural erosion, leading causes for the incomprehensibility and unmaintainability of aging programs.We present two-tier programming, a conceptual framework for integrated representation of programs in two layers of specification:(1) architecture (\u0393\u00c7\u00a3second-order programs\u0393\u00c7\u00a5) and (2) traditional implementation (\u0393\u00c7\u00a3first-order programs.\u0393\u00c7\u00a5) We review two-tier programs, environments and tools, and analyse the two-tier approach to programming.", "num_citations": "8\n", "authors": ["45"]}
{"title": "An architectural approach to software cost modeling\n", "abstract": " The aim of a successful software project is to maximize the difference between the value of the software product and its cost. The value of a complex softwareintensive system results from the interaction of the functionality and quality of the software, and the marketplace. Traditional cost-estimation models [Londeix 87] have concentrated on methods to estimate the \u0393\u00c7\u00a3as-built\u0393\u00c7\u00a5 costs of simply building the software products. Some cost-estimation techniques at the design stages [Jones 98] only consider the costs of functionality through the use of function points. However, the costs incurred for meeting the system\u0393\u00c7\u00d6s quality goals are never estimated. These techniques also do not consider the costs that occur during the entire lifetime of the product, including stochastic events such as the failure or change of components, change of platforms, or even change of methods of communication among components.", "num_citations": "8\n", "authors": ["45"]}
{"title": "A basis (or abass) for reasoning about software architectures\n", "abstract": " This paper discusses the use of Attribute-Based Architectural Styles (ABASs)\u0393\u00c7\u00f6architectural styles accompanied by explicit analysis reasoning frameworks\u0393\u00c7\u00f6in design. The paper has two main objectives: to convince readers that ABASs provide a basis for insightful reasoning about a software architecture\u0393\u00c7\u00d6s ability to meet its quality attribute goals; and to demonstrate the utility of ABASs by showing an example of how ABASs are used to design an industrial system architecture entirely via ABASs. In the process of designing this architecture, we show excerpts from our growing ABAS handbook and argue for why ABASs help us in designing architectures efficiently and predictably.", "num_citations": "8\n", "authors": ["45"]}
{"title": "The perils and joys of reconstructing architectures\n", "abstract": " Evaluation of an architecture\u0393\u00c7\u00d6s properties is critical to successful system development [1]. However, reasoning about a system\u0393\u00c7\u00d6s intended architecture must be recognized as distinct from reasoning about its realized architecture. As design and eventually implementation of an architecture proceed, faithfulness to the principles of the intended architecture is not always easy to achieve. This is particularly true in cases where the intended architecture is not completely specified, documented or disseminated to all of the project members. In our experience this is the rule, and well-specified, documented, disseminated, and controlled architectures are the exception.This problem is exacerbated during maintenance and evolutionary development, as architectural drift and erosion occur. However, if we wish to transfer our reasoning about the properties of a system\u0393\u00c7\u00d6s intended architecture to the properties of the implemented system, we must understand to what degree the realized architecture conforms to the intended architecture.", "num_citations": "8\n", "authors": ["45"]}
{"title": "The perils of reconstructing architectures\n", "abstract": " A documented, analyzed software architecture is a key ingredient in achieving quality in large software intensive systems. But the system that is implemented must conform to its architecture for the qualities of the design to carry over into the implementation. To ensure that systems conform to their architectures, and remain in conformance throughout their lifetimes, we need to reconstruct architecture from source artifacts. To do this properly, a wide variety of tools that provide both static and dynamic information are needed. Thus, we advocate a workbench approach to architecture reconstruction tools.", "num_citations": "8\n", "authors": ["45"]}
{"title": "Babel: A psychologically plausible cross-linguistic model of lexical and syntactic acquisition\n", "abstract": " I will be investigating the notion that the acquisition of syntax is a two-stage process: 1) the contents and structure of the lexicon are learned through a statistical inductive procedure; and 2) a deductive, rule-based procedure, examining the contents of this lexicon, allows the child to make syntactic generalizations. Using these tools, along with the assumption that the child learns thematic words (nouns, verbs, adjectives) and function words (prepositions, auxiliaries, inflection) in different ways, 1 have been able to construct a model of early language acquisition: Babel. Simulations using Babel are shown to make predictions about the time course of acquisition across languages which are highly correlated with longitudinal studies of early child language.", "num_citations": "8\n", "authors": ["45"]}
{"title": "ENRE: a tool framework for extensible eNtity relation extraction\n", "abstract": " Understanding the dependencies among code entities is fundamental to many software analysis tools and techniques. However, with the emergence of new programming languages and paradigms, the increasingly common practice of writing systems in multiple languages, and the increasing popularity of dynamic languages, no existing framework can reliably extract this information. That is, no tools exist to accurately extract dependencies from systems written in multiple and dynamic languages. To address this problem, we have designed and implemented the Extensible eNtity Relation Extraction (ENRE) framework. ENRE supports the extraction of entities and their dependencies from systems written in multiple languages, enables the customization of dependencies of interest to the user, and makes implicit dependencies explicit. To demonstrate feasibility of this framework, we developed two ENRE instances\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "7\n", "authors": ["45"]}
{"title": "Natural Language Processing to Quantify Security Effort in the Software Development Lifecycle.\n", "abstract": " Addressing security in the software development lifecycle is an ever-present concern for software engineers and organizations. From a management and monitoring perspective, it is difficult to measure 1) the amount of effort being focused on security concerns during active development and 2) the success of security related design and development efforts. Such data is simply not recorded. If reliable measurements were available, software project leaders would have a powerful tool to assess risk and inform decision making. This would enable managers to direct development and testing to assure a desired level of security in their software products, to protect both their organizations and customers. To fill this need and provide such data, we propose a technique for performing topic detection on data commonly available in most software development projects: text artifacts from issue tracking and version control systems. We apply machine learning and natural language processing techniques to create classifiers capable of accurately detecting whether a given text snippet is related to the topic of security. Realization of such a capability will give software teams the ability to analyze current and past levels of security effort, revealing immediate project focus and the long-term impacts of security tasking. We validate our approach via experiments on data from the large-scale open source Chromium software project. Our results show that a Na\u251c\u00bbve Bayes classification scheme using an n-gram feature-space is an appropriate and effective approach to automated topic detection of software security text snippets, and that effective training data can be derived\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "7\n", "authors": ["45"]}
{"title": "A core-periphery-legality architectural style for open source system development\n", "abstract": " Despite the rapid rise of open source systems (OSS), it is unclear what architectural patterns enable the success of these systems. There is little guidance on architectural patterns for OSS development. Consequently the creators of OSS projects have often come to their own solutions intuitively, via trial-and-error and design iterations. To fill this void we study the architectural challenges encountered by OSS projects and identify architectural patterns that address these challenges. We propose an integrated architectural style that addresses two challenges for OSS success: 1) what architectural principles and patterns enable the active participation of a large, distributed community, and 2) how to manage OSS licensing issues that prohibit open source (and proprietary) software to mix freely. It is critical to address these issues together as architectural decisions impact on licensing issues, which have an impact on the\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "7\n", "authors": ["45"]}
{"title": "Using Scenarios in Architecture Evaluations\n", "abstract": " When we analyze software architectures, we always want to do so with respect to an explicit or assumed set of quality attributes: modifiability, reusability, performance, and so forth. Most software quality attributes are, however, too complex and amorphous to be evaluated on a simple scale, in spite of our persistence in describing them that way.", "num_citations": "7\n", "authors": ["45"]}
{"title": "Neurophysiological impact of software design processes on software developers\n", "abstract": " Software development often leads to failed implementations resulting from several factors related to individual reactions to software design. Some design metrics give software developers guidelines and heuristics for use in software design. Furthermore, many metrics have been created to measure outcomes in terms of \u0393\u00c7\u00a3code quality.\u0393\u00c7\u00a5 However, these guidelines and metrics have been shown only to have a weak relationship and are poorly implemented. This study takes a new approach using tools from cognitive neuroscience to examine the cognitive load and arousal level placed on software engineers while working with different software designs. Specifically, we use electroencephalography (EEG) and skin conductance (SCR) to examine cognitive and emotional reactions to software structure. We propose to examine whether modular design affects levels of cognitive load and arousal. Our findings open\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "6\n", "authors": ["45"]}
{"title": "Can Cybersecurity Be Proactive? A Big Data Approach and Challenges\n", "abstract": " The cybersecurity community typically reacts to attacks after they occur.  Being reactive is costly and can be fatal where attacks threaten lives, important data, or mission success.  But can cybersecurity be done proactively? Our research capitalizes on the Germination Period\u0393\u00c7\u00f6the time lag between hacker communities discussing software flaw types and flaws actually being exploited\u0393\u00c7\u00f6where proactive measures can be taken. We argue for a novel proactive approach, utilizing big data, for (I) identifying potential attacks before they come to fruition; and based on this identification, (II) developing preventive counter-measures. The big data approach resulted in our vision of the Proactive Cybersecurity System (PCS), a layered, modular service platform that applies big data collection and processing tools to a wide variety of unstructured data sources to predict vulnerabilities and develop countermeasures.  Our exploratory study is the first to show the promise of this novel proactive approach and illuminates challenges that need to be addressed.", "num_citations": "6\n", "authors": ["45"]}
{"title": "Big Data as a Service: A Neo-Metropolis Model Approach for Innovation\n", "abstract": " Big data as a Service (BDaaS) provides a viable alternative to circumvent many obstacles in implementing a big data strategy. Many BDaaS vendors are providing cloud platforms utilizing microservices and DevOps technologies to enable big data analytics for organizations that seek cost-effective and elastic deployments. However, existing models of BDaaS are mostly proprietary, closed-world operations and this can limit the potential for innovation. In this article, we argue for a new model called the Neo-Metropolis model -- a variant of the Metropolis model -- that offers an organized, coherent set of open-world innovation opportunities for vendors as well as for the platform's edge customers. We identify Neo-Metropolis model characteristics and illustrate Neo-Metropolis principles for developing BDaaS using a case study of Cisco's Intercloud Analytics platform. The implications of the Neo-Metropolis model are far\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "6\n", "authors": ["45"]}
{"title": "Architektura oprogramowania: metody oceny oraz analiza przypadk\u251c\u2502w\n", "abstract": " Podstaw\u252c\u2563 ka\u252c\u2510 dego systemu oprogramowania jest jego architektura, czyli spos\u251c\u2502b, w jaki oprogramowanie jest tworzone z niezale\u252c\u2510 nie rozwijanych komponent\u251c\u2502w oraz mechanizmy interakcji i wzajemne zale\u252c\u2510 no\u253c\u00f4ci pomi\u251c\u00acdzy nimi. Je\u253c\u00f4li system ma by\u251c\u00aa tworzony przez wi\u251c\u00accej ni\u252c\u2510 jedn\u252c\u2563 osob\u251c\u00ac, w\u252c\u2502a\u253c\u00f4nie architektura pozwala im na wzajemn\u252c\u2563 komunikacj\u251c\u00ac. Cho\u251c\u00aa architektura jest postrzegana jako jeden z najwa\u252c\u2510 niejszych aspekt\u251c\u2502w rozwoju wsp\u251c\u2502\u252c\u2502czesnych system\u251c\u2502w, to jej ewaluacja niemal nigdy nie staje si\u251c\u00ac standardow\u252c\u2563 cz\u251c\u00ac\u253c\u00f4ci\u252c\u2563 procesu rozwojowego.Wykorzystuj\u252c\u2563c wyra\u253c\u2555nie okre\u253c\u00f4lone zwi\u252c\u2563zki mi\u251c\u00acdzy decyzjami dotycz\u252c\u2563cymi architektury projektu a wynikaj\u252c\u2563cymi z nich w\u252c\u2502a\u253c\u00f4ciwo\u253c\u00f4ciami oprogramowania, niniejsza ksi\u252c\u2563\u252c\u2510 ka opisuje metody ewaluacji architektury oraz przypadki ich praktycznego zastosowania. Ksi\u252c\u2563\u252c\u2510 ka \u0393\u00c7\u20a7Architektura oprogramowania. Metody oceny oraz analiza przypadk\u251c\u2502w\u0393\u00c7\u00a5 prezentuje podstawow\u252c\u2563 wiedz\u251c\u00ac poj\u251c\u00acciow\u252c\u2563 z zakresu metod oceny architektury i stanowi podr\u251c\u00accznik opisuj\u252c\u2563cy krok po kroku proces takich ewaluacji przeprowadzanych w przypadku wielu organizacji rz\u252c\u2563dowych i przemys\u252c\u2502owych.", "num_citations": "6\n", "authors": ["45"]}
{"title": "Aligning Business Models, Business Archtectures, and IT Architectures\n", "abstract": " The alignment of business models and IT (information technology) architectures has been a critical issue for IT organizations for as long as IT has been an important factor in the success of organizations. Despite the near-universal acceptance of this principle, how to actually realize alignment is no clearer today than it was ten years ago. Specifically, it is not always clear when to align, what to align, and how to align. For example, when businesses encounter changes (either internal or external changes, such as business strategies, new IT products, or new legal requirements), they have to \u0393\u00c7\u00a3know\u0393\u00c7\u00a5 whether there is any misalignment caused by the changes, have a way to gauge the misalignment, and then correct the misalignment. They have to decide in what ways, how much, at what cost, and according to what timetable the misalignment should be corrected. Since rapid change in the business environment is the\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "6\n", "authors": ["45"]}
{"title": "How does refactoring impact security when improving quality? a security-aware refactoring approach\n", "abstract": " While state of the art of software refactoring research uses various quality attributes to identify refactoring opportunities and evaluate refactoring recommendations, the impact of refactoring on the security of software systems when improving other quality objectives is under-explored. It is critical to understand how a system is resistant to security risks after refactoring to improve quality metrics. For instance, refactoring is widely used to improve the reusability of code, however such an improvement may increase the attack surface due to the created abstractions. Increasing the spread of security-critical classes in the design to improve modularity may result in reducing the resilience of software systems to attacks. In this paper, we investigated the possible impact of improving different quality attributes (e.g. reusability, extendibility, etc.), from the QMOOD model, effectiveness on a set of 8 security metrics defined in the\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "5\n", "authors": ["45"]}
{"title": "Component Comparison, Evaluation, and Selection: A Continuous Approach\n", "abstract": " Early visions of component-based software development have been realized, with software projects now composed mostly of other peoples code. However, the challenge of selecting the best components, with speed and confidence in the result, has only become more difficult. Previous work has focused on systematic approaches to component selection, but in continuous- *  and agile settings, the increase in confidence from being systematic is not worth the cost of delay. In this emerging ideas paper, we present early results on work to balance speed with confidence in component selection. Our idea is to define a scorecard for components based on high-level quality attribute indicators, project health measures, and a context-specific aggregation function for producing a single yes/no decision for integrators. We present preliminary results showing how this scorecard approach works on computer vision components.", "num_citations": "5\n", "authors": ["45"]}
{"title": "Towards rapid composition with confidence in robotics software\n", "abstract": " Robotics software is booming thanks in part to a rich and productive ecosystem around the Robot Operating System. We introduce a military effort to leverage the ROS ecosystem and reduce the challenges in building military robots, called ROS-M. We outline some of the work we have done on the ROS-M initiative, and explain our future directions in analyzing ROS code to balance between rapid adoption and confidence in the component.", "num_citations": "5\n", "authors": ["45"]}
{"title": "Software architecture health monitor\n", "abstract": " In this paper, we first discuss the concept of architecture debt and how this debt grows in virtually every software-intensive project. Next we propose a methodology for developers to monitor the health of a project's architecture through an analysis of the development artifacts that a project produces. Our objective is to monitor and manage architecture debt by leveraging an architecture model that we proposed recently, called the Design Rule Space (DRSpace). We use DRSpaces to split a complex system into smaller subsystems based on features, patterns, refactoring targets, etc., so that we can monitor and analyze the evolution and interaction of each subsystem separately. We also employ a recently proposed architectural metric---Decoupling Level---to quantitatively monitor changes in a project's overall level of architecture maintainability. Using these tools, we describe our vision for a software architecture\"\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "5\n", "authors": ["45"]}
{"title": "Insights from 15 Years of ATAM Data: Towards Agile Architecture\n", "abstract": " Agile teams strive to balance short term feature development with longer term quality concerns. These evolutionary approaches often hit a\" complexity wall\" from the cumulative effects of unplanned changes, resulting in unreliable, poorly performing software. Consequently, there is renewed focus on approaches to address architectural concerns within the Agile community. We present an analysis of quality attribute concerns from 15 years of Architecture Trade-off Analysis Method data, gathered from 31 projects. We found that modifiability is the dominant concern across all project types; additionally there was considerable focus on performance, availability, and interoperability. For information technology projects, a relatively new quality\u0393\u00c7\u00f6deployability\u0393\u00c7\u00f6has emerged as a key concern. Our results provide insights for Agile teams allocating architecture-related tasks to iterations. For example they can use these results to create checklists for release planning or retrospectives to help assess whether a given quality should be addressed to support future needs.", "num_citations": "5\n", "authors": ["45"]}
{"title": "An early look at defining variability requirements for system of systems platforms\n", "abstract": " In the commercial domain, platform-based approaches, in which a set of functions or services are bundled to form the basis of many products, have enabled efficient development of systems and their composition into systems of systems. A successful platform must balance sufficient commonality to support economical reuse, while also providing variability and extensibility to enable innovation in system and system of systems (SoS) capabilities. These commonality/variability tradeoffs for SoS platforms are frequently tacit decisions, since there are no accepted techniques for analyzing such decisions at the scale and degree of requirements uncertainty that characterize most SoSs. The objective of our work is to develop a method for analyzing decisions about requirements for common platforms for SoSs. The method begins with the requirements tasks of identifying and selecting appropriate variabilities (variation\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "5\n", "authors": ["45"]}
{"title": "A simulation test-bed for mobile adaptive architectures\n", "abstract": " Existing mobile systems are typically highly constrained with regards to their run-time resources: CPU, memory, communication bandwidth, screen real-estate, battery, and so forth. In current mobile systems, resource allocation decisions are almost always fixed at the time of system creation. However, this situation is arguably changing as mobile systems are becoming more powerful and as the demands being placed upon them are also increasing dramatically. For this reason, such systems need effective methods to manage and control their resources at run-time, particularly in the face of changing environmental conditions and user needs. This paper presents a simulation test-bed for experimenting with architectural design decisions such as communication and negotiation strategies among components, scheduling algorithms, and usability considerations. One significant area that we have begun to experiment\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "5\n", "authors": ["45"]}
{"title": "Software Engineering Institute\n", "abstract": " The benefity of a software system are assessable only relative to the business goals the system has been developed to serve. In turn, these benefits result from interactions between the system's functionality and its quality attributes (such as performance, reliability and security). Its quality attributes are, in most cases, dictated by its architectural design decisions. Therefore, we argue in this paper that the software architecture is the crucial artifact to study in making design tradeoffs and in performing cost-benefit analy-Se8. A substantial part of such an analysis is in determining the level of uncertainty with which we estimate both costs and benefits. In this paper we offer an architecture-centric approach to the economic modeling of sofware design decision making called CBAM (Cost Benefit Analysis Method), in which costs and benefits are traded off with sys-tem quality attributes. We present the CBAM, the early results\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "5\n", "authors": ["45"]}
{"title": "Recommending refactorings via commit message analysis\n", "abstract": " ContextThe purpose of software restructuring, or refactoring, is to improve software quality and developer productivity.ObjectivePrior studies have relied mainly on static and dynamic analysis of code to detect and recommend refactoring opportunities, such as code smells. Once identified, these smells are fixed by applying refactorings which then improve a set of quality metrics. While this approach has value and has shown promising results, many detected refactoring opportunities may not be related to a developer\u0393\u00c7\u00d6s current context and intention. Recent studies have shown that while developers document their refactoring intentions, they may miss relevant refactorings aligned with their rationale.MethodIn this paper, we first identify refactoring opportunities by analyzing developer commit messages and check the quality improvements in the changed files, then we distill this knowledge into usable context-driven\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "4\n", "authors": ["45"]}
{"title": "Success and failure in software engineering: a followup systematic literature review\n", "abstract": " Success and failure in software engineering are still among the least understood phenomena in the discipline. In a recent special journal issue on the topic, M\u251c\u00f1ntyl\u251c\u00f1 et al. started discussing these topics from different angles; the authors focused their contributions on offering a general overview of both topics without deeper detail. Recognizing the importance and impact of the topic, in this article we have executed a followup, more in-depth systematic literature review with additional analyses beyond what was previously provided. These new analyses offer: a grounded-theory of success and failure factors, harvesting over 500+ factors from the literature; 14 manually validated clusters of factors that provide relevant areas for success- and failure-specific measurement and risk-analysis; a quality model composed of previously unmeasured organizational structure quantities which are germane to software product\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "4\n", "authors": ["45"]}
{"title": "Software engineering in society\n", "abstract": " Modern Software Systems pervade our lives. They have become more open and hyperconnected, manage large amounts of our personal data, and are used to support the lives of individuals and communities and the functions of businesses and governments. They are a part of our society and play an important role in shaping it.", "num_citations": "4\n", "authors": ["45"]}
{"title": "Greenbundle: An empirical study on the energy impact of bundled processing\n", "abstract": " Energy consumption is a concern in the data-center and at the edge, on mobile devices such as smartphones. Software that consumes too much energy threatens the utility of the end-user's mobile device. Energy consumption is fundamentally a systemic kind of performance and hence it should be addressed at design time via a software architecture that supports it, rather than after release, via some form of refactoring. Unfortunately developers often lack knowledge of what kinds of designs and architectures can help address software energy consumption. In this paper we show that some simple design choices can have significant effects on energy consumption. In particular we examine the Model-View-Controller architectural pattern and demonstrate how converting to Model-View-Presenter with bundling can improve the energy performance of both benchmark systems and real world applications. We show the\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "4\n", "authors": ["45"]}
{"title": "Data-driven selection of security application frameworks during architectural design\n", "abstract": " The selection of application frameworks is an important aspect of architectural design. Selection often requires satisficing, that is, searching a potentially large space of design alternatives until an acceptable solution is found. There is, however, little help for architects in selecting software frameworks. In this paper we investigate the criteria used by practicing software architects in selecting security frameworks. We also propose how information associated with some of the criteria that are important to architects can be obtained manually or in an automated way from online sources such as GitHub. Our ultimate goal is to identify measures associated with these criteria that can be helpful in providing support for architects to select software frameworks.", "num_citations": "4\n", "authors": ["45"]}
{"title": "Splicing community and software architecture smells in agile teams: an industrial study\n", "abstract": " Software engineering nowadays largely relies on agile methods to carry out software development. In often highly distributed organizations, agile teams can develop organisational and socio-technical issues loosely defined as community smells, which reflect sub-optimal organisational configurations that bear additional project cost, a phenomenon called social debt. In this paper we look into the co-occurrence of such nasty organisational phenomena\u0393\u00c7\u00f6community smells\u0393\u00c7\u00f6with software architecture smells\u0393\u00c7\u00f6indicators that software architectures may exhibit sub-optimal modularization structures, with consequent additional cost. We conclude that community smells can serve as a guide to steer the qualities of software architectures within agile teams.", "num_citations": "4\n", "authors": ["45"]}
{"title": "Indexing text related to software vulnerabilities in noisy communities through topic modelling\n", "abstract": " Despite efforts in the security community to quickly index and disseminate vulnerabilities as they are discovered and addressed, there are concerns about how to scale up the knowledge management of vulnerabilities given its dramatic growth rate. To address these concerns, recent research shifted towards more proactive approaches, in particular leveraging text mining methods to improve vulnerability identification and dissemination to security investigators. While providing a starting point for understanding vulnerability trends, recent methods are still reliant on curated identifiers, such as 'CVE-*', hence missing the majority of cybersecurity activity. We show that we can leverage overlapping textual themes in software vulnerabilities to identify related software vulnerability discussions without prior knowledge of identifiers. Our method obtained 86% accuracy in identifying related vulnerabilities with minimal pre\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "4\n", "authors": ["45"]}
{"title": "From craft to science: The road ahead for empirical software engineering research\n", "abstract": " Empirical software engineering (SE) research is often criticized for poorly designed and reported studies, a lack of replications to build up bodies of knowledge, and little practical relevance. In this paper, we discuss issues in empirical software architecture research as an illustration of these issues in one subfield of SE and as a step towards better understanding empirical research in SE in general. Based on feedback from software architecture researchers and practitioners, we explore why, despite persistent discussions in the SE research community, there are still disagreements about why and how to conduct empirical research. Then, we explore how empirical SE research can progress beyond \"one-off\" studies and endless \"new and exciting\" results toward SE research as a mature science. This would allow us to establish foundations for evaluating existing and future empirical research and help researchers\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "4\n", "authors": ["45"]}
{"title": "ADD 3.0: Rethinking Drivers and Decisions in the Design Process\n", "abstract": " ADD 3.0: Rethinking Drivers and Decisions in the Design Process Page 1 ADD 3.0: Rethinking Drivers and Decisions in the Design Process Rick Kazman Humberto Cervantes SATURN 2015 Page 2 Outline \u0393\u00c7\u00f3 Presentation \u0393\u00c7\u00f3 Architectural design and types of drivers \u0393\u00c7\u00f3 The Attribute Driven Design Method \u0393\u00c7\u00f3 Design decisions \u0393\u00c7\u00f3 Example \u0393\u00c7\u00f3 Conclusion 2 Page 3 Speakers \u0393\u00c7\u00f3 Rick Kazman \u0393\u00c7\u00f3 Humberto Cervantes 3 Page 4 Learning Objectives \u0393\u00c7\u00f3 At the end of the presentation, participants should be able to understand: \u0393\u00c7\u00f4 The different types of architectural drivers \u0393\u00c7\u00f4 What are design concepts and the decisions regarding their selection \u0393\u00c7\u00f4 What ADD is and how an architecture is designed iteratively using this method 4 Page 5 Outline \u0393\u00c7\u00f3 Presentation \u0393\u00c7\u00f3 Architectural design and types of drivers \u0393\u00c7\u00f3 The Attribute Driven Design Method \u0393\u00c7\u00f3 Design decisions \u0393\u00c7\u00f3 Example \u0393\u00c7\u00f3 Conclusion 5 Page 6 Software Architecture \u0393\u00c7\u00f3 The software architecture of a is , \u0393\u00c7\u00aa", "num_citations": "4\n", "authors": ["45"]}
{"title": "Mapping CMMI and RUP process frameworks for the context of elaborating software project proposals\n", "abstract": " To improve quality, organizations are widely using Software Process Improvement (SPI) models and in particular CMMI. Nevertheless, Small and Medium Enterprises (SMEs) are reluctant in adopting CMMI since the complexity and size of the framework discourage its adoption. RUP is presented as a disciplined approach for assigning tasks and responsibilities within a software organization, with the aim of ensuring the production of software meeting the users\u0393\u00c7\u00d6 needs and in strict compliance with a predictable timetable and budget. CMMI and RUP can be used together since CMMI defines \u0393\u00c7\u00a3what to do\u0393\u00c7\u00a5 and RUP defines \u0393\u00c7\u00a3how to do\u0393\u00c7\u00a5. In this paper, we present the mappings between the CMMI Maturity Levels 2 and 3 process areas and the RUP activities, tasks, artifacts and roles. Our main contribution relates to the alignment of CMMI and RUP when adopted in the preliminary stage of every project: the\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "4\n", "authors": ["45"]}
{"title": "An integrated framework for service engineering: a case study in the financial services industry\n", "abstract": " Service engineering, the application of engineering disciplines to develop service-oriented enterprise systems (service systems) with predicable results, has faced a brand new array of challenges in recent years. Existing development approaches that might help addressing these challenges are scattered in separate research fields or in different units of an organization, just like the\" blind men and the elephant.\" This article presents a 3-year action research case study with a Fortune 50 company in the financial services industry, validating an integrated service-oriented business-IT alignment framework, called the BITAM-SOA Framework, to shed light on complex service engineering issues, including the interplay between business-IT alignment approaches (alignment via architecture, via governance and via communication) and Service Oriented Architecture adoption as well as methodological challenges of service\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "4\n", "authors": ["45"]}
{"title": "Workshop on software technologies for ultra-large scale systems\n", "abstract": " Given the inevitable trends towards increasing complexity of software-intensive systems, many future software-intensive systems will be ultra-large scale (ULS). Radical scale-up of systems will be manifested in many dimensions: implementation complexity, distribution, decentralization, networking, storage, and quality-of-service, dependability/security, size and structure of development organizations and methods, complexity of organizations surrounding deployed systems, and so forth. Radical increases in scale and complexity will demand new approaches to all aspects of system conception, definition, development, deployment, use, maintenance, evolution, and regulation. This workshop, the First ICSE Workshop on ULS systems, has several goals: to raise awareness of ULS systems in the ICSE community; to further our understanding of the characteristics of such systems; to explore the unique research\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "4\n", "authors": ["45"]}
{"title": "Abstraction Strata in Software Design\n", "abstract": " \u0393\u00ea\u00c4\u0393\u00c7\u00a3Design\u0393\u00c7\u00a5 Vs.\u0393\u00c7\u00a3Architecture\u0393\u00c7\u00a5\u0393\u00f9\u00ef Is the difference just a matter of scale?\u0393\u00f9\u00ef Is the difference qualitative or merely quantitative?\u0393\u00ea\u00c4 Language: How can we specify architectural styles? Design patterns?", "num_citations": "4\n", "authors": ["45"]}
{"title": "Tailorable architecture methods\n", "abstract": " In this paper we discuss a set of architecture-based methods for architecture design and analysis that have been developed over the past 10 years at the Software Engineering Institute. We then discuss the need for integrating these architecture-based methods, both with each other and into an organization's system development life cycle, based on experience with NASA's EOSDIS project. We discuss the framework for doing this integration, and present a life cycle view of architecture-based design and analysis methods.", "num_citations": "4\n", "authors": ["45"]}
{"title": "Designing and analyzing software architectures using ABASs (tutorial session)\n", "abstract": " This tutorial will discuss, exemplify, and involve the students in the use of Attribute-Based Architectural Styles (ABASs)\u0393\u00c7\u00f6architectural styles accompanied by explicit analysis reasoning frameworks\u0393\u00c7\u00f6in both the design and analysis of software and system architectures. The tutorial has several objectives: to introduce the students to a catalog of ABASs covering performance, availability, testability, modifiability, and usability; to convince students that ABASs provide a basis for insightful reasoning about a software architecture's ability to meet its quality attribute goals; and to demonstrate the utility of ABASs by showing examples of how ABASs are used to design and analyze real-world system architectures. We will present some large excerpts from our growing ABAS handbook and show that ABASs help us in designing architectures efficiently and predictably and in quickly finding architectural risks and tradeoffs when\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "4\n", "authors": ["45"]}
{"title": "Software Architecture Evaluation in the DoD Systems Acquisition Context\n", "abstract": " Many modern defense systems rely heavily on software to achieve system functionality. Because software architecture is a major determinant of software quality, it follows that software architecture is critical to the quality of any softwareintensive system. For a DoD acquisition organization, the ability to evaluate software architectures before these are realized as finished systems can substantially reduce the risk that the delivered systems will not meet their quality goals. This column presents the basic principles of applying a software architecture evaluation in the DoD system acquisition context.", "num_citations": "4\n", "authors": ["45"]}
{"title": "A joint CS/E&CE undergraduate option in software engineering\n", "abstract": " The paper describes a software engineering option which has been developed and is being taught jointly by two departments in two faculties: Computer Science (Faculty of Mathematics) and Electrical and Computer Engineering (Faculty of Engineering). The attempt to create a joint option has resulted in certain strengths and weaknesses. The strengths derive from the different approaches to software engineering in the two departments. The weaknesses derive from the constraints of having to deal with two sets of departmental, faculty, and accreditation board constraints, which leaves the option less flexibility. We describe the option, emphasizing three components: the course selection and, in particular the three new courses which were created specifically for the option; the CASE tools which accompany each of the new courses; and the project which spans all three of the new courses. The project is described in\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "4\n", "authors": ["45"]}
{"title": "Parsing with changing grammars: Evaluating a language acquisition model\n", "abstract": " The use of parsing in creating and evaluating models of language development has not received a great deal of attention from theoretical linguists and language development researchers in the past. The attention that it has received has largely concentrated on the use of a parser to help to create a language model. Attempts of this sort can be found in Berwick (1985), Selfridge (1980), and Anderson (1975), for example. Each of these efforts consists of an acquisition system that attempts to modify its grammar in response to failed parses.", "num_citations": "4\n", "authors": ["45"]}
{"title": "Technical Debt in Practice: How to Find It and Fix It\n", "abstract": " The practical implications of technical debt for the entire software lifecycle; with examples and case studies. Technical debt in software is incurred when developers take shortcuts and make ill-advised technical decisions in the initial phases of a project, only to be confronted with the need for costly and labor-intensive workarounds later. This book offers advice on how to avoid technical debt, how to locate its sources, and how to remove it. It focuses on the practical implications of technical debt for the entire software life cycle, with examples and case studies from companies that range from Boeing to Twitter. Technical debt is normal; it is part of most iterative development processes. But if debt is ignored, over time it may become unmanageably complex, requiring developers to spend all of their effort fixing bugs, with no time to add new features--and after all, new features are what customers really value. The authors explain how to monitor technical debt, how to measure it, and how and when to pay it down. Broadening the conventional definition of technical debt, they cover requirements debt, implementation debt, testing debt, architecture debt, documentation debt, deployment debt, and social debt. They intersperse technical discussions with\" Voice of the Practitioner\" sidebars that detail real-world experiences with a variety of technical debt issues.", "num_citations": "3\n", "authors": ["45"]}
{"title": "Immutable Infrastructure Calls for Immutable Architecture\n", "abstract": " With the advent of cloud computing and the concept of immutable infrastructure, the scaling and deployment of applications has become significantly easier. This increases the possibility of \u0393\u00c7\u00a3configuration drift\u0393\u00c7\u00a5 as an operations team manages this cluster of machines, both virtual and actual. In this paper we propose a revised view on configuration and architecture. We propose that software deployed on a public or private cloud should, to the furthest possible extent, be immutable and source controlled. This reduces configuration drift and ensures no configuration problems in production as a result of updates or changes. We will show an example of a software project deployed on Amazon Web Services with an immutable Jenkins setup which manages updating the whole cluster and is self-regenerating. We will also discuss how this lends itself naturally to interoperability between clouds, because of the infrastructure-agnostic nature of this approach.", "num_citations": "3\n", "authors": ["45"]}
{"title": "Round-trip engineering with the two-tier programming toolkit\n", "abstract": " A major impediment to the long-term quality of large and complex programs is inconsistency between design and implementation. Conflicts between intent and execution are common because detecting them is laborious, error-prone, and poorly supported, and because the costs of continuously maintaining design documents outweigh immediate gains. A growing inconsistency between design and implementation results in software that is unpredictable and poorly understood. Round-trip engineering tools support an iterative process of detecting conflicts and resolving them by changing either the design or the implementation. We describe a Toolkit which supports a round-trip engineering of native Java programs without interfering with any existing practices, tools, or development environments, thereby posing a minimal barrier on adoption. The Toolkit includes a user-guided software visualization and\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "3\n", "authors": ["45"]}
{"title": "Navigating through the design of object-oriented programs\n", "abstract": " The design navigator is a tool for reverse-engineering object-oriented programs into charts at any level of abstraction. The design navigator discovers the object-oriented building blocks in the design of programs and visualises them in terms of LePUS3, a formal design description language. We demonstrate that program visualization in a formal language is not only possible in principle but also of practical benefit.", "num_citations": "3\n", "authors": ["45"]}
{"title": "COTS-Based Software Systems: Third International Conference, ICCBSS 2004, Redondo Beach, CA, USA, February 1-4, 2004, Proceedings\n", "abstract": " In the short space of about a decade, Commercial-Off-the-Shelf (COTS) software has evolved through being a relatively minor aspect of software development; a t-management-endorsedsilverbulletsolutionforsoftwaredevelopment; adisruptivete-nology requiring people and organizations to extensively rethink their approaches to software development; to an increasingly well-understood software phenomenon for which effective solutions are being developed. Part of this understanding has been to recognize that different COTS application sectors can be at different stages of this evolution. Some sectors are just beginning to become COTS-intensive. Some have evolved COTS solutions that are very well matched to their problem domain. Others, including most large-scale applications, still involve their developers in rethinking how to adapt their traditional software architectures, processes, management practices, and personnel skills to accommodate economically attractive but complex combinations of powerful but incompletely compatible and independently evolving COTS products. The series of International Conferences on COTS-Based Software Systems (ICCBSS) has been established as a continuing forum for bringing together CBSS developers, s-pliers, and researchers to summarize and discuss progress toward understanding and resolving CBSS problems. This year\u0393\u00c7\u00d6s conference theme,\u0393\u00c7\u00a3Matching Solutions to P-blems,\" re? ectsthisobjective. Wehavebeenfortunatetohavethreeoutstandingkeynote speakers, David Carr, Tricia Oberndorf, and Douglas Schmidt, who have contributed signi? cantly both in analyzing CBSS problems and\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "3\n", "authors": ["45"]}
{"title": "On the Definition of Architecture, Design and Implementation\n", "abstract": " The terms architecture, design, and implementation are typically used informally in partitioning software specifications into three coarse strata of abstraction. But these strata are not well-defined in either research or practice and often overlap causing confusion and needless discussion. To remedy this problem we formally define two criteria: the Intension and the Locality Criteria, and show that the intuitive discrimination between the three terms architecture, design, and implementation is qualitative and not merely quantitative. We demonstrate that architectural styles are intensional and non-local; that design patterns are intensional and local; and that implementations are extensional and local", "num_citations": "3\n", "authors": ["45"]}
{"title": "Assessment of CORBA and POSIX. 21 Designs for FAA En Route Resectorization\n", "abstract": " Modernizing the En Route system presents major acquisition issues to the Federal Aviation Administration FAA. At the present time, efforts are underway to upgrade the En Route system, primarily focusing on the host computer system. Some of the major issues include the following 1 What are the consequences of using different technologies and products 2 How can one assess the use of different technologies Resolving issues such as these will affect the acquisition strategy for upgrading the En Route system. For example, the use of different technologies will influence the design character of the En Route system. This will consequently effect the ability to integrate different components and influence the amount of developed integration code that may be required. Clearly, the ability to optimize the acquisition strategy will have far reaching consequences for the FAA and must be carefully considered. This report addresses the use of different technologies and an architecture trade off approach to a typical En Route system problem. We were requested to consider the problem of resectorization, ie, the combination and decombination of sectors and fix posting areas during operation of an En Route center. Such capabilities may become desirable for an implementation of free flight. Two technologies have been applied to develop solutions to this problem, namely Common Object Request Broken Architecture CORBA and POSIX. 21 Portable Operating System Interface Standard. The former is based on an object oriented model, while the latter is based on a message passing model.Descriptors:", "num_citations": "3\n", "authors": ["45"]}
{"title": "Assessing design quality from a software architectural perspective\n", "abstract": " In this paper, we take the position that good object oriented designs accrue from attention to both the design of objects and classes and to the architectural framework which defines how instances of those classes interact. We argue that an architecture should be assessed for conceptual integrity, and describe tool support for making such an assessment.", "num_citations": "3\n", "authors": ["45"]}
{"title": "Why Do Children Say \u0393\u00c7\u00ffMe do it'\n", "abstract": " A common feature of early speech is that children use case marking incorrectly. Several researchers have proposed that the child's mistakes are limited to the misuse of nominative case, and are corrected once the child acquires verbal morphology. In this paper I will show that this characterization of the problem is incorrect: children misuse all case forms, not just nominative case. In addition, I will show that the child's use of case is related to the acquisition of nominal morphology, not verbal. Case marking can be better understood as a result of the child learning the productive agreement processes of his language. This characterization accounts for the acquisition of case and the\\waffling\" which children exhibit, and does so within a unified theory of lexical and syntactic acquisition.", "num_citations": "3\n", "authors": ["45"]}
{"title": "Constructing a Shared Infrastructure for Software Architecture Analysis and Maintenance\n", "abstract": " Over the past three decades software engineering researchers have produced a wide range of techniques and tools for understanding the architectures of large, complex systems. However, these have tended to be one-off research projects, and their idiosyncratic natures have hampered research collaboration, extension and combination of the tools, and technology transfer. The area of software architecture is rich with disjoint research and development infrastructures, and datasets that are either proprietary or captured in proprietary formats. This paper describes a concerted effort to reverse these trends. We have designed and implemented a flexible and extensible infrastructure (SAIN) with the goal of sharing, replicating, and advancing software architecture research. We have demonstrated that SAIN is capable of incorporating the constituent tools extracted from three independently developed, large, long-lived\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "2\n", "authors": ["45"]}
{"title": "Multi-objective code reviewer recommendations: balancing expertise, availability and collaborations\n", "abstract": " Modern Code review is one of the most critical tasks in software maintenance and evolution. A rigorous code review leads to fewer bugs and reduced overall maintenance costs. Most existing studies focus on automatically identifying the most qualified reviewers, based on their expertise, to review pull-up requests. However, the management of code reviews is a complex problem in practice due to a project\u0393\u00c7\u00d6s limited resources, including the availability of peer reviewers. Furthermore, the history of collaborations between developers and reviewers could affect the quality of the reviews, in positive or negative ways. In this paper, we formulate the recommendation of code reviewers as a multi-objective search problem to balance the conflicting objectives of expertise, availability, and history of collaborations. Our validation confirms the effectiveness of our multi-objective approach on 9 open source projects by making\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "2\n", "authors": ["45"]}
{"title": "\u0393\u00c7\u00a3The Canary in the Coal Mine\u0393\u00c7\u00aa\u0393\u00c7\u00a5 A cautionary tale from the decline of SourceForge\n", "abstract": " Forges are online collaborative platforms to support the development of distributed open source software. While once mighty keepers of open source vitality, software forges are rapidly becoming less and less relevant. For example, of the top 10 forges in 2011, only one survives today\u0393\u00c7\u00f6SourceForge\u0393\u00c7\u00f6the biggest of them all, but its numbers are dropping and its community is tenuous at best. Through mixed\u0393\u00c7\u00c9methods research, this article chronicles and analyze the software practice and experiences of the project's history\u0393\u00c7\u00f6in particular its architectural and community/organizational decisions. We discovered a number of suboptimal social and architectural decisions and circumstances that, may have led to SourceForge's demise. In addition, we found evidence suggesting that the impact of such decisions could have been monitored, reduced, and possibly avoided altogether. The use of sociotechnical insights needs to\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "2\n", "authors": ["45"]}
{"title": "Integrability\n", "abstract": " This report summarizes how to systematically analyze a software architecture with respect to a quality attribute requirement for integrability. The report introduces integrability and common forms of integrability requirements for software architecture. It provides a set of definitions, core concepts, and a framework for reasoning about integrability and satisfaction or not of integrability requirements by an architecture and, eventually, a system. It describes a set of mechanisms, such as patterns and tactics, that are commonly used to satisfy integrability requirements. It also provides a method by which an analyst can determine whether an architecture documentation package provides enough information to support analysis and, if so, to determine whether the architectural decisions made contain serious risks relative to integrability requirements. An analyst can use this method to determine whether those requirements, represented as a set of scenarios, have been sufficiently well specified to support the needs of analysis. The reasoning around this quality attribute should allow an analyst, armed with appropriate architectural documentation, to assess the risks inherent in todays architectural decisions, in light of tomorrows anticipated needs.Descriptors:", "num_citations": "2\n", "authors": ["45"]}
{"title": "Assessing an architecture's ability to support feature evolution\n", "abstract": " Enabling rapid feature delivery is essential for product success and is therefore a goal of software architecture design. But how can we determine if and to what extent an architecture is\" good enough\" to support feature addition and evolution, or determine if a refactoring effort is successful in that features can be added more easily? In this paper, we contribute a concept called the Feature Space, and a formal definition of Feature Dependency, derived from a software project's revision history. We capture the dependency relations among the features of a system in a feature dependency structure matrix (FDSM), using features as first-class design elements. We also propose a Feature Decoupling Level (FDL) metric that can be used to measure the level of independence among features. Our investigation of 17 open source projects shows that files within each feature space are much more likely to be changed together\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "2\n", "authors": ["45"]}
{"title": "Analyzing the Architectures of Software-Intensive Ecosystems\n", "abstract": " Software-intensive ecosystems include large numbers of independent software-intensive and human agents interacting with and responding to each other\u0393\u00c7\u00d6s demands in ways that are not amenable to traditional \u0393\u00c7\u00a3closed-world\u0393\u00c7\u00a5 assumptions. The describes the core-periphery structures of the systems participating in ecosystems, and approaches the analysis of their \u0393\u00c7\u00a3wicked\u0393\u00c7\u00a5 behavior from the perspective of the market behaviors that they are expected to support. It proposes that a key driver of the \u0393\u00c7\u00a3wickedness\u0393\u00c7\u00a5 is the accelerating tempo at which an ecosystem is expected to respond to new kinds of demand, making it necessary to extend the concept of \u0393\u00c7\u00a3architecture\u0393\u00c7\u00a5 to include the resultant processes of dynamic alignment. As a result, it becomes necessary to analyze architecture in a way that includes the operational contexts-of-use within which systems are being used. The proposes the use of a multisided matrix to\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "2\n", "authors": ["45"]}
{"title": "Edge Enabled Systems\n", "abstract": " Users of today have ever-increasing levels of technical skill with computing and communication technologies. For example, on the battlefield, some soldiers are capable of creating or modifying existing systems in response to needs that were not anticipated by the designers of the original systems. In a growing number of situations this ability is crucial, because the soldier must be able to adapt rapidly to a dynamically changing operating environment; thus the software must also be adaptable. Software architectures and software development methods must be created that enable user innovation \u0393\u00c7\u00a3at the edge\u0393\u00c7\u00a5 so that users can be as effective as possible in the face of changing missions and unanticipated needs. In this paper, we describe the characteristics of edge systems and the edge organizations in which these systems operate, and make initial recommendations about how such systems and organizations can be created to serve the needs of users at the edge.", "num_citations": "2\n", "authors": ["45"]}
{"title": "Integrating Software Engineering and Usability Engineering\n", "abstract": " Linear and selective undo mechanisms have been studied extensively. However, relatively little attention has been given to the semantics of selective undo in situations in which the undone command has dependency relationships with actions later in the command history. We propose a new approach to selective undo using a process modeling language from the software process community to model dependencies between commands, and we outline semantics for undo in the face of these dependencies.", "num_citations": "2\n", "authors": ["45"]}
{"title": "Understanding Change Contribution Pattern in Open Source and Commercial Software Projects\n", "abstract": " Despite the substantial interest in and considerable market impact of Open Source Software (OSS), there have been few empirical studies that rigorously describe or analyze this form of development. In this paper, we analyze the OSS development process, and in particular the manner in which contributions are made to the OSS product. We used detailed information from the contribution logs of two OSS projects as a basis for our examination of this software development model. Our empirical analysis indicates that in spite of a relatively large number of people participating in the OSS projects, a majority of the coderelated contributions come from a select few developers. Using the Gini coefficient to compare and contrast contribution patterns within the OSS projects and four commercial projects, we find that the distribution of software development is relatively more concentrated in the OSS projects. We then\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "2\n", "authors": ["45"]}
{"title": "Architecture reconstruction guidelines third edition\n", "abstract": " Architecture reconstruction is the process of obtaining the as-built architecture of an implemented system from the existing legacy system. For this process, tools are used to extract information about the system that will assist in building successive levels of abstraction. Although generating a useful representation is not always possible, a successful reconstruction results in an architectural representation that aids in reasoning about the system. This recovered representation is most often used as a basis for redocumenting the architecture of an existing system if the documentation is out of date or nonexistent, and can be used to check the as-built architecture against the as-designed architecture. The architectural representation can also be used as a starting point for reengineering the system to a new desired architecture. Finally, the representation can be used to help identify components for reuse or to help establish a software product line. This report describes the process of architecture reconstruction using the Architecture Reconstruction and Mining ARMIN tool developed by the Carnegie Mellonregistered Software Engineering Institute and the Robert Bosch Corporation. Guidelines are presented for reconstructing the architectural representations of existing systems. Most of these guidelines are not specific to ARMIN, can be used with other tools, and are useful even if the architecture reconstruction is carried out manually.Descriptors:", "num_citations": "2\n", "authors": ["45"]}
{"title": "Rethinking the Software Life Cycle\n", "abstract": " Several architecture-centric analysis and design methods have been created in the past 10 years, beginning with the Software Architecture Analysis Method, or SAAM. The SAAM inspired the creation of a number of other methods. The first of these methods created at the Software Engineering Institute was the Architecture Tradeoff Analysis Method, or ATAM, which has in turn inspired the Quality Attribute Workshop, or QAW, the Cost-Benefit Analysis Method, or CBAM, Active Reviews for Intermediate Designs, or ARID, and the Attribute-Driven Design, or ADD, method.These methods share not only a common heritage, but also a common set of characteristics aside from being architecture-centric. For example, they all use scenarios to direct and focus activities in the methods; and they are all driven by operationalized quality-attribute models. The SAAM was focused on modifiability. The ATAM focuses on tradeoffs\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "2\n", "authors": ["45"]}
{"title": "Software architecture evaluation panel\n", "abstract": " Software architectural evaluation, while still in its infancy as a discipline, promises large dividends. It is important to be able to determine the quality characteristics of a system-properties like modifiability, reliability and performance-before the system is built. This kind of analysis can help to evaluate a design or to choose among competing designs. The objective is to discuss what can be evaluated, and to identify the current state of the art in architectural evaluation. For example, the authors would like to identify quality attributes that can be quantitatively characterized, measured, or only intuitively reviewed and evaluated. They also attempt to identify a number of pressing research goals motivated by the needs of industry.", "num_citations": "2\n", "authors": ["45"]}
{"title": "An empirical study of architectural design operations\n", "abstract": " Recent research in software architecture and design patterns has focussed on identifying existing large-scale chunks of design, with the intent of communicating these designs so that they may be reused. However, these design patterns, idioms, and styles are typically given to designers whole and the rationale for their internal structure is seldom made clear. Because of this, the relationship between these operations and non-functional qualities is difficult to reason about.This paper presents a theory of more primitive design operations (called unit operations) that have been derived through a study of the software design literature and interviews with expert software designers. Unit operations are common structure-modifying operations that designers regularly employ, things like: abstraction, resource sharing, is-a decomposition, etc. The relationship between unit operations and non-functional qualities is determined through an empirical study that surveys expert industrial designers of large-scale software systems. The result of this study is a design space\u0393\u00c7\u00f6a set of design rules\u0393\u00c7\u00f6that not only clarifies the complex relationships between the unit operations, system requirements, and nonfunctional qualities, but suggests areas where further refinement of the operations needs to be made.", "num_citations": "2\n", "authors": ["45"]}
{"title": "Distributed Flight Simulation: A Challenge for Software Architecture\n", "abstract": " Flight simulation has always been an application which needed to be distributed in order to be computable at all. Although examples of single-processor flight simulators exist [2] they are typically simulators of low fidelity, often games. True flight simulation has extremely high fidelity demands: the virtual environment which the simulator creates must be as life-like as possible in order to train the aircrew as effectively as possible.", "num_citations": "2\n", "authors": ["45"]}
{"title": "Architecting Internet of Things Systems with Blockchain: A Catalog of Tactics\n", "abstract": " Blockchain offers a distributed ledger to record data collected from Internet of Thing (IoT) devices as immutable and tamper-proof transactions and securely shared among authorized participants in a Peer-to-Peer (P2P) network. Despite the growing interest in using blockchain for securing IoT systems, there is a general lack of systematic research and comprehensive review of the design issues on the integration of blockchain and IoT from the software architecture perspective. This article presents a catalog of architectural tactics for the design of IoT systems supported by blockchain as a result of a Systematic Literature Review (SLR) on IoT and blockchain to extract the commonly reported quality attributes, design decisions, and relevant architectural tactics for the architectural design of this category of systems. Our findings are threefold:<?brk?> (i) identification of security, scalability, performance, and\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "1\n", "authors": ["45"]}
{"title": "Worst Smells and Their Worst Reasons\n", "abstract": " The aims of this paper are: 1) to identify \"worst smells\", i.e., bad smells that never have a good reason to exist, 2) to determine the frequency, change-proneness, and severity associated with worst smells, and 3) to identify the \"worst reasons\", i.e., the reasons for introducing these worst smells in the first place. To achieve these aims we ran a survey with 71 developers. We learned that 80 out of 314 catalogued code smells are \"worst\"; that is, developers agreed that these 80 smells should never exist in any code base. We then checked the frequency and change-proneness of these worst smells on 27 large Apache open-source projects. Our results show insignificant differences, in both frequency and change proneness, between worst and non-worst smells. That is to say, these smells are just as damaging as other smells, but there is never any justifiable reason to introduce them. Finally, in follow-up phone interviews with five developers we confirmed that these smells are indeed worst, and the interviewees proposed seven reasons for why they may be introduced in the first place. By explicitly identifying these seven reasons, project stakeholders can, through quality gates or reviews, ensure that such smells are never accepted in a code base, thus improving quality without compromising other goals such as agility or time to market.", "num_citations": "1\n", "authors": ["45"]}
{"title": "Augmenting Topic Finding in the NASA Aviation Safety Reporting System using Topic Modeling\n", "abstract": " Context: The NASA Aviation Safety Reporting System (ASRS) is a voluntary confidential aviation safety reporting system. The ASRS receives reports from pilots, air traffic controllers, flight attendants and others involved in aviation operations. The reports are de-identified and coded by ASRS expert safety analysts and a short descriptive synopsis is written to describe the safety issue. The de-identified reports are then disseminated to the aviation community in a number of ways including entry into an online database, Safety Alert Bulletins, For Your Information Notices, and the CALLBACK newsletter. In this paper we consider whether we can improve the dissemination of safety concerns through the use of topic modeling. Topic modeling may improve the dissemination of safety concerns by grouping and summarizing large collections of reports simultaneously. However, the groupings must be both meaningful and\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "1\n", "authors": ["45"]}
{"title": "Usability implications in software architecture: The case study of a mobile app\n", "abstract": " Usability is a highly desired but often ignored software quality. Effective user interfaces tend to increase learnability, effectiveness and user satisfaction. But usability is often neglected in the early stages of software development and is thus frequently not address in a system\u0393\u00c7\u00d6s architectural design. Furthermore, because usability is often neglected or deferred, it is difficult to estimate the effort specifically spent on adding or improving usability mechanisms in the software architecture and in code. In this work, we present a case study where we analyze the impact of introducing a variety of usability mechanisms to a mobile application and we report on the architectural changes that must be made in the software architecture to accommodate them. We also report on the additional code required to implement these usability mechanisms and we investigate the users\u0393\u00c7\u00d6 satisfaction of combining and using several usability\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "1\n", "authors": ["45"]}
{"title": "Enabling decision and objective space exploration for interactive multi-objective refactoring\n", "abstract": " Due to the conflicting nature of quality measures, there are always multiple refactoring options to fix quality issues. Thus, interaction with developers is critical to inject their preferences. While several interactive techniques have been proposed, developers still need to examine large numbers of possible refactorings, which makes the interaction time-consuming. Furthermore, existing interactive tools are limited to the \"objective space\" to show developers the impacts of refactorings on quality attributes. However, the \"decision space\" is also important since developers may want to focus on specific code locations. In this paper, we propose an interactive approach that enables developers to pinpoint their preference simultaneously in the objective (quality metrics) and decision (code location) spaces. Developers may be interested in looking at refactoring strategies that can improve a specific quality attribute, such as\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "1\n", "authors": ["45"]}
{"title": "Do Software Architecture Patterns Reduce Security Vulnerabilities? xB; Insight from Causal Learning\n", "abstract": " Motivation for Causal Learning Controlling costs requires knowing which independent factors actually cause item outcomes, so that we may change items in a predictable manner. Just as correlation may be fooled by spurious association, so can regression. We must move beyond correlation to causation, if we want to make use of cause and effect relationships. We can now evaluate causation without expensive and difficult experiments. Establishing causation with observational data remains a vital need and a key technical challenge, but is becoming more feasible and practical.Descriptors:Subject Categories:Computer Systems Management and StandardsDistribution Statement:[A, Approved For Public Release]", "num_citations": "1\n", "authors": ["45"]}
{"title": "Active hotspot: an issue-oriented model to monitor software evolution and degradation\n", "abstract": " Architecture degradation has a strong negative impact on software quality and can result in significant losses. Severe software degradation does not happen overnight. Software evolves continuously, through numerous issues, fixing bugs and adding new features, and architecture flaws emerge quietly and largely unnoticed until they grow in scope and significance when the system becomes difficult to maintain. Developers are largely unaware of these flaws or the accumulating debt as they are focused on their immediate tasks of address individual issues. As a consequence, the cumulative impacts of their activities, as they affect the architecture, go unnoticed. To detect these problems early and prevent them from accumulating into severe ones we propose to monitor software evolution by tracking the interactions among files revised to address issues. In particular, we propose and show how we can automatically\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "1\n", "authors": ["45"]}
{"title": "Towards explaining security defects in complex autonomous aerospace systems\n", "abstract": " Current-day autonomous aerospace systems are increasingly being designed with serviceoriented architectures. These architectures make it easy to reconfigure off-the-shelf components and capabilities for new missions and to plug-and-play new capabilities as they are developed. However, such components tend to be assured only in isolation. Validation and verification of the overall system, including the interactions of these components, is likely to rely on a contract-based guarantee approach for the components and runtime verification. Specifying contracts in order to insure overall system performance and safety is a difficult problem. In this paper, we discuss the current gaps towards achieving cybersecurity assurance given these architectures. We also briefly discuss an approach to learning these contracts in order to assure security behavior for the Air Force Research Lab (AFRL) UxAS use case.", "num_citations": "1\n", "authors": ["45"]}
{"title": "The birth, growth, death and rejuvenation of software maintenance communities\n", "abstract": " Background: Though much research has been conducted to investigate software maintenance activities, there has been little work charactering maintenance files as a community and exploring the evolution of this community. Aims: The goal of our research is to identify maintenance communities and monitor their evolution-birth, growth, death and rejuvenation. Method: In this paper, we leveraged a social community detection algorithm---clique prelocation method (CPM)---to identify file communities. Then we implemented an algorithm to detect new communities, active communities, inactive communities and reactivated communities by cumulatively detecting and constantly comparing communities in time sequences. Results: Based on our analysis of 14 open-source projects, we found that new communities are mostly caused by bug and improvement issues. An active community can be vigorous, on and off\u252c\u00e1\u0393\u00c7\u00aa", "num_citations": "1\n", "authors": ["45"]}
{"title": "RUP Alignment and Coverage Analysis of CMMI ML2 Process Areas for the Context of Software Projects Execution\n", "abstract": " The simultaneous adoption of CMMI and RUP allows the definition of \u0393\u00c7\u00a3what to do\u0393\u00c7\u00a5 (with the support of CMMI) and \u0393\u00c7\u00a3how to do\u0393\u00c7\u00a5 (with the support of RUP) in the context of executing software development projects. In this paper, our main contribution relates to the alignment of CMMI ML2 with RUP, in the context of executing software projects and the analysis of RUP coverage. We present the alignment for CMMI ML2 process areas, incorporating priority mechanisms. The adopted case study allows the analysis of the way RUP supports CMMI ML2 process areas taking into account the proposed alignment and the theoretical coverage analyzed. For particular process areas, RUP can be considered a good approach for CMMI ML2 implementation.", "num_citations": "1\n", "authors": ["45"]}
{"title": "Common Software Platforms in System-of-Systems Architectures: The State of the Practice\n", "abstract": " Goals of this StudyMany examples of successful commercial SoS platforms, but success in defense and other domains has been elusive. We wanted to answer the following questions:\u0393\u00c7\u00f3 What processes are used to develop SoS architectures, and how are software elements of the architecture treated in the processes used?\u0393\u00c7\u00f3 What challenges do SoS programs face in developing architectures; performing test, integration, and assurance; managing runtime configuration and operation; and evolving the SoS? What approaches have been used in successful programs to overcome these challenges?\u0393\u00c7\u00f3 What are the constraints on new approaches to developing, using, and evolving these SoS architectures?", "num_citations": "1\n", "authors": ["45"]}
{"title": "Results of SEI Line-Funded Exploratory New Starts Projects\n", "abstract": " Results of SEI Line-Funded Exploratory New Starts Projects Carnegie Mellon University Research Showcase@ CMU Software Engineering Institute 7-2013 Results of SEI Line-Funded Exploratory New Starts Projects Bjorn A. Andersson Carnegie Mellon University, baandersson@ sei. cmu. edu Stephany Bellomo Carnegie Mellon University, sbellomo@ sei. cmu. edu Lisa Brownsword Carnegie Mellon University, llb@ sei. cmu. edu Sagar J. Chaki Carnegie Mellon University, chaki@ sei. cmu. edu William Claycomb Carnegie Mellon University, claycomb@ cert. org See next page for additional authors Follow this and additional works at: http://repository. cmu. edu/sei This Technical Report is brought to you for free and open access by Research Showcase@ CMU. It has been accepted for inclusion in Software Engineering Institute by an authorized administrator of Research Showcase@ CMU. For more information, @ :\u0393\u00c7\u00aa", "num_citations": "1\n", "authors": ["45"]}
{"title": "A mashup of techniques to create reference architectures\n", "abstract": " A reference architecture is a complex and high-risk artifact. It is essential to the successful definition and management of a set of architectures that share common attributes and assets. You simply cannot afford to get it wrong, but there are few techniques that have been specifically aimed at defining reference architectures. We have developed a mashup of existing techniques that supports an architecture team in organizing the inputs required to create a robust reference architecture. This mashup takes advantage of several proven, widely used architecture methods. This approach allows the architecture-definition team to incrementally define the appropriate abstractions and patterns and to organize the information so that it is accessible and actionable. The resulting technique has been applied to a large development effort aimed at creating a family of embedded computing architectures and applications for the DoD. The mashup is proving to be effective at focusing the team and giving them practical and proven tools for coordinating their work and making meaningful progress.Descriptors:", "num_citations": "1\n", "authors": ["45"]}
{"title": "Introduction to special issue: model-based development methodologies\n", "abstract": " Developing software solutions is not an easy task. Brown [1] names the following difficulties arising in the development of software solutions:(1) understanding highly complex business domains and management of the huge development effort;(2) time-to-market pressures;(3) complexity of target software platforms involving not only new hot technologies, but also a diverse and complex assortment of legacy technology infrastructure frequently kept with poor documentation. The effective development of today\u0393\u00c7\u00d6s software applications requires consistent effort to research better approaches, languages, techniques and tools that allow us to face the continuously increasing of complexity. Today, when building large software systems, the main challenge for software developers is to \u0393\u00c7\u00a3handle complexity and to adapt quickly to changes\u0393\u00c7\u00a5[2]. Model-based development methodologies can be a response to this challenge, as they can \u0393\u00c7\u00a3increase productivity and reduce time-to-market\u0393\u00c7\u00a5, by developing concepts closer to the problem domain than \u0393\u00c7\u00a3those offered by programming languages\u0393\u00c7\u00a5[3].", "num_citations": "1\n", "authors": ["45"]}
{"title": "The 8th international workshop on economics-driven software engineering research\n", "abstract": " This paper presents the 8th International Workshop on Economics-Driven Software Engineering Research (EDSER-8).", "num_citations": "1\n", "authors": ["45"]}
{"title": "Integrating Architecture Methods: The Case of the ATAM and the CBAM\n", "abstract": " In a previous column (\u0393\u00c7\u00a3Rethinking the Software Life Cycle\u0393\u00c7\u00a5, Vol. 6, No. 3, Q3, 2003), we took a look at the traditional software development life cycle (SDLC) in the context of the architecture-centric methods that we have developed at the Software Engineering Institute over the past 10 years, including the Architecture Tradeoff Analysis Method, or ATAM, which helps a system\u0393\u00c7\u00d6s stakeholders understand the consequences of architectural decisions with respect to the system\u0393\u00c7\u00d6s quality-attribute requirements [1, 2].The common wisdom is that the earlier in the SDLC that problems are found, the easier and cheaper it is to fix them. The problems that can be found by an architecture evaluation include unreasonable requirements, performance problems, problems associated with potential future modifications, and many others related to quality attributes. As we have gained experience from conducting ATAM-based architecture evaluation exercises, we have found the need to develop methods that extend even earlier into the SDLC. In this way, rather than simply reporting on problems following an architecture evaluation, we can anticipate these problems at requirements or design time. The Quality Attribute Workshop, or QAW, provides a method for eliciting quality attribute requirements [3]. The Attribute-Driven Design, or ADD, method provides a way of defining a software architecture by basing the design process on the qualityattribute requirements of the system [4].", "num_citations": "1\n", "authors": ["45"]}
{"title": "Report from the ICSE workshop: bridging the gaps between software engineering and human-computer interaction\n", "abstract": " The First International Workshop on the Relationships between Software Engineering and Human-Computer Interaction was held on May 3--4, 2003 as part of the 2003 International Conference on Software Engineering, in Portland, OR, U.S.A. This workshop was motivated by a perception among researchers, practitioners, and educators that the fields of Human-Computer Interaction and Software Engineering were largely ignoring each other and that they needed to work together more closely and to understand each other better. This report describes the motivation, goals, organization, and outputs of the workshop and the significant activity that it has subsequently fostered.", "num_citations": "1\n", "authors": ["45"]}
{"title": "SEI Independent Research and Development Projects\n", "abstract": " Each year, the Software Engineering Institute SEI undertakes several Independent Research and Development IRD projects. These projects serve to a support feasibility studies investigating whether further work by the SEI would be of potential benefit and bsupport further exploratory work to determine if there is sufficient value in eventually funding the feasibility study work as an SEI initiative. Projects are chosen based on their potential to mature andor transition software engineering practices, develop information that will help in deciding whether further work is worth funding, and set new directions for SEI work. This report describes the IRD projects that were conducted during fiscal year 2002 October 2001 through September 2002.Descriptors:", "num_citations": "1\n", "authors": ["45"]}
{"title": "SCENARIO-BASED SOFTWARE ARCHITECTURE EVALUATION METHODS An overview\n", "abstract": " Software analysis and evaluation becomes a well-established practice inside the architecting community of the software systems. The development effort, the time and costs of complex systems are considerably high. In order to assess system\u0393\u00c7\u00d6s quality against the requirements of its customers, the architects and the developers need methods and tools to support them during the evaluation process. Different research groups have taken such initiatives and are proposing various methods for software architecture quality evaluation.", "num_citations": "1\n", "authors": ["45"]}