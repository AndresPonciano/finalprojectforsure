{"title": "Using dynatrace monitoring data for generating performance models of java ee applications\n", "abstract": " Performance models assist capacity management and planning for large-scale enterprise applications by predicting their performance for different workloads and hardware environments. Manually creating these models often outweighs their benefits. Automatic performance model generators have been introduced to facilitate the model creation. These generators often use custom monitoring solutions to generate the required input data for the model creation. In contrast, standardized application performance management (APM) solutions are used in industry to control performance metrics for productive systems. This work presents the integration of industry standard APM solutions with a performance model generation framework. We apply the integration concepts using the APM solution Dynatrace and a performance model generation framework for Palladio Component Models (PCM).", "num_citations": "31\n", "authors": ["722"]}
{"title": "Comparing the accuracy of resource demand measurement and estimation techniques\n", "abstract": " Resource demands are a core aspect of performance models. They describe how an operation utilizes a resource and therefore influence the systems performance metrics: response time, resource utilization and throughput. Such demands can be determined by two extraction classes: direct measurement or demand estimation. Selecting the best suited technique depends on available tools, acceptable measurement overhead and the level of granularity necessary for the performance model. This work compares two direct measurement techniques and an adaptive estimation technique based on multiple statistical approaches to evaluate strengths and weaknesses of each technique. We conduct a series of experiments using the SPECjEnterprise2010 industry benchmark and an automatic performance model generator for architecture-level performance models based on the Palladio Component Model\u00a0\u2026", "num_citations": "27\n", "authors": ["722"]}
{"title": "Optimization of deployment topologies for distributed enterprise applications\n", "abstract": " Enterprise applications are typically implemented as distributed systems composed of several components. Deciding where to deploy which component is a difficult task that today is usually assisted by logical topology recommendations. Choosing inefficient topologies allocates the wrong amount of resources, leads to unnecessary operation costs, or results in poor performance. Testing different topologies to find good solutions takes a lot of time and might delay productive operations. Therefore, this work introduces a software based deployment topology optimization approach for distributed enterprise applications. We use an enhanced performance model generator that extracts models from running applications. The extracted model is used to simulate performance metrics (e.g., resource utilization, response times, throughput) of an enterprise application. Subsequently, we introduce a deployment topology\u00a0\u2026", "num_citations": "15\n", "authors": ["722"]}
{"title": "Predicting Energy Consumption by Extending the Palladio Component Model.\n", "abstract": " The rising energy demand in data centers and the limited battery lifetime of mobile devices introduces new challenges for the software engineering community. Addressing these challenges requires ways to measure and predict the energy consumption of software systems. Energy consumption is influenced by the resource demands of a software system, the hardware on which it is running, and its workload. Trade-off decisions between performance and energy can occur. To support these decisions, we propose an extension of the meta-model of the Palladio Component Model (PCM) that allows for energy consumption predictions. Energy consumption is defined as power demand integrated over time. The PCM meta-model is thus extended with a power consumption model element in order to predict the power demand of a software system over time. This paper covers two evaluations for this meta-model extension: one for a Java-based enterprise application (SPECjEnterprise2010) and another one for a mobile application (Runtastic). Predictions using an extended PCM meta-model for two SPECjEnterprise2010 deployments match energy consumption measurements with an error below 13%. Energy consumption predictions for a mobile application match corresponding measurements on the Android operating system with an error of below 17.2%.", "num_citations": "13\n", "authors": ["722"]}
{"title": "Full-stack performance model evaluation using probabilistic garbage collection simulation\n", "abstract": " Performance models can represent the performance relevant aspects of an enterprise application. Corresponding simulation engines use such models for simulating performance metrics (eg, response times, resource utilization, throughput) and allow for performance evaluations without load testing the actual system. Creating such models manually often outweighs their benefits. Therefore, recent research created performance model generators, which can generate such models out of Application Performance Management software. However, a full-stack evaluation containing all relevant resources of an enterprise application (Central Processing Unit, memory, network and Hard Disk Drive) has not been conducted to the best of our knowledge. This work closes this gap using a pre-release version of the next generation industry benchmark SPECjEnterpriseNEXT of the Standard Performance Evaluation Corporation as example enterprise application, the Palladio Component Model as performance model and the performance model generator of the RETIT Capacity Manager. Furthermore, this work extends the generated model with a probabilistic garbage collection model to simulate memory allocation and releases more accurately.", "num_citations": "11\n", "authors": ["722"]}
{"title": "Architekturen mobiler Multiplattform-Apps\n", "abstract": " Die dramatisch schnelle Entwicklung von Smartphones und Tablets hatte zur Folge, dass extrem heterogene Systemlandschaften entstanden sind. F\u00fcr die Entwicklung von Applikationen der Post-PC-\u00c4ra sind daher eine Reihe von Ans\u00e4tzen zur Multiplattform-Entwicklung entstanden. Dieser Beitrag beleuchtet die Vor- und Nachteile verschiedener Systemarchitekturen f\u00fcr die Entwicklung von Multiplattform-Smart-Mobile-Apps: Angefangen bei Web Apps, \u00fcber Hybrid Apps und Cross-Compiler bis hin zu Applikationsbeschreibungssprachen.", "num_citations": "11\n", "authors": ["722"]}
{"title": "Model-based Energy Consumption Prediction for Mobile Applications.\n", "abstract": " Investigating the energy consumption of mobile applications (apps) is becoming a growing software engineering challenge due to the limited battery lifetime of mobile devices. Energy consumption is defined as the power demand integrated over time. Profiling the power demand of an app is a time consuming activity and the results are only valid for the target hardware used during the measurements. The energy consumption is influenced by the resource demands of an app, the hardware on which the app is running, and its workload. This work adapts resource profiles for enterprise applications to predict the energy consumption of mobile apps without the need to own a physical device. Resource profiles are models that represent all aspects influencing the energy consumption of an app. They can be used to predict the energy consumption for different hardware devices and evaluate the overall efficiency of an app. Moreover, the workload can be changed so that the impact of different usage patterns can be investigated. These capabilities lay the foundation for a platform-independent way of quantifying the energy consumption of mobile apps.", "num_citations": "9\n", "authors": ["722"]}
{"title": "Model-based prediction of automatic memory management and garbage collection behavior\n", "abstract": " Performance models focus on resource consumption and the effects of CPU, network, or hard-disk utilization. These resources usually have the largest effect on the response times and throughput of an application. However, deficient memory management can have severe effects on an application and its runtime, such as overlong response times or even crashes. As memory management has been disregarded in performance simulations, we address this gap with an approach based on memory measurements and derived metrics to predict the behavior of this resource and the effects on the CPU. Although numerous works exist that analyze memory management and especially garbage collections, accurate prediction models are rare. We demonstrate the automatic extraction of memory behavior using a performance model generator. Furthermore, the approach is evaluated using the SPECjEnterprise2010 and\u00a0\u2026", "num_citations": "4\n", "authors": ["722"]}
{"title": "Multi-objective optimization of deployment topologies for distributed applications\n", "abstract": " Modern applications are typically implemented as distributed systems comprising several components. Deciding where to deploy which component is a difficult task that today is usually assisted by logical topology recommendations. Choosing inefficient topologies allocates the wrong amount of resources, leads to unnecessary operation costs, or results in poor performance. Testing different topologies to find good solutions takes a lot of time and might delay productive operations. Therefore, this work introduces a software-based deployment topology optimization approach for distributed applications. We use an enhanced performance model generator that extracts models from operational monitoring data of running applications. The extracted model is used to simulate performance metrics (e.g., resource utilization, response times, throughput) and runtime costs of distributed applications. Subsequently, we\u00a0\u2026", "num_citations": "4\n", "authors": ["722"]}
{"title": "Long-term power demand recording of running mobile applications\n", "abstract": " Determining the power demand of mobile applications (apps) is becoming a key area of interest for both end-users and developers due to the limited battery lifetime of mobile devices. Addressing this issue requires tools that measure the power demand of a mobile app. This power demand depends on the hardware components and the called operations of the mobile app. Therefore, this paper presents a prototype that records the power demand of hardware components and called operations of running mobile apps. This data can help developers in determining the cause of high power demand of their apps, which assists in power demand reduction. This paper covers an analysis of the overhead produced by the prototype and an evaluation that includes: firstly the evaluation of the accuracy of the total power demand measurements, secondly the evaluation for the allocation of the GPS power demand of the\u00a0\u2026", "num_citations": "3\n", "authors": ["722"]}
{"title": "SiaaS: Simulation as a Service\n", "abstract": " One major advantage of performance models over tests using real systems is the ability to simulate design alternatives by simply modifying or exchanging parts of such models. However, the evaluation of numerous design alternatives can be time consuming depending on the number of alternatives and the complexity of the model. To overcome this challenge, this work presents a scalable simulation service for the Palladio Component Model (PCM) workbench based on a headless Eclipse instance, a Java EE application server, packaged in a docker container and run in kubernetes. The simulation service supports parallel simulation runs, multiple PCM instances in the same container and scales out automatically, when resources of one container instance exceed. Simulation jobs are triggered by a platform-independent REST interface and can be re-used by other applications. This allows to simulate a vast amount of model instances in parallel on cloud or on-premise installations.", "num_citations": "2\n", "authors": ["722"]}
{"title": "Machine Learning Assisted Position Detection of UHF RFID Tags\n", "abstract": " A typical problem of UHF RFID installations is the lack of location information. UHF systems are designed for large bulk read processes as opposed to sequential reads typical for optical systems (e.g., Barcode) or short range low frequency systems such as NFC. [1] In optical systems the position of an object can easily be determined because the scanner must be have a light of sight to the targeted tag. However, such information is not available in UHF-based RFID technology. This paper describes a novel method - based on radar technology and machine learning algorithms - that can estimate position of RFID tags using the UHF signals reflected from the tags. Another advantage of this method is the elimination overreaching problems.", "num_citations": "1\n", "authors": ["722"]}