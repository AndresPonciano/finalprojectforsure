{"title": "A study on test coverage in software testing\n", "abstract": " Test Coverage is an important indicator of software quality and an essential part of software maintenance. It helps in evaluating the effectiveness of testing by providing data on different coverage items. Although much research effort has been put on how to get coverage information by either code based testing or requirement based testing, not much has been paid to measure and analyze the coverage by covering maximum number of coverage items. This paper provides a study of the current test coverage researches conducted by other researchers for test coverage in software testing. By looking at the existing approaches; gaps and uncovered measurement of Test Coverage can be explored further.", "num_citations": "35\n", "authors": ["1259"]}
{"title": "An Evaluation of Test Coverage Tools in Software Testing\n", "abstract": " Test Coverage is an important indicator of software quality and an essential part of software maintenance. It helps in evaluating the effectiveness of testing by providing data on different coverage items. Automated testing tools can be used to enhance the maintainability, testability and stability of the software. This paper aims to provide an evaluation of current test coverage tools in software testing. Management and test managers require an appropriate tool for the software under test. We hope, evaluation identified here will help to select the efficient and effective tool.", "num_citations": "33\n", "authors": ["1259"]}
{"title": "Change impact analysis with a software traceability approach to support software maintenance\n", "abstract": " Change impact is an important issue in software maintenance phase. As retesting is required over a software change, there is a need to keep track of software impact associated with changes. Even a small software change can ripple through to cause a large unintended impact elsewhere in the system that makes it difficult to identify the affected functionalities. The impact after changes demands for a special traceability approach. This paper presents a new approach and prototype tool, Hybrid Coverage Analysis Tool (HYCAT), as a proof of concept to support the software manager or maintainers to manage impact analysis and its related traceability before and after a change in any software artifact. The proposed approach was then evaluated using a case study, On-Board Automobile (OBA), and experimentation. The traceability output before and after changes were produced and analyzed to capture impact\u00a0\u2026", "num_citations": "20\n", "authors": ["1259"]}
{"title": "An evaluation of requirements management and traceability tools\n", "abstract": " Requirements management is critical to software delivery success and project lifecycle. Requirements management and their traceability provide assistance for many software engineering activities like impact analysis, coverage analysis, requirements validation and regression testing. In addition requirements traceability is the recognized component of many software process improvement initiatives. Requirements traceability also helps to control and manage evolution of a software system. This paper aims to provide an evaluation of current requirements management and traceability tools. Management and test managers require an appropriate tool for the software under test. We hope, evaluation identified here will help to select the efficient and effective tool.", "num_citations": "16\n", "authors": ["1259"]}
{"title": "A new code based test case prioritization technique\n", "abstract": " Test Cases are treated as one of the most important part of software testing activity. They are responsible for the validation of the software under inspection. Test suites are also used to test changes in the source code during regression testing. In number of cases, the test suites are so big that executing all tests for every source code change is absurd. Developers/testers need to prioritize the test suite so that most beneficial test cases are executed first. This can result in increasing the effectiveness of testing and saving a lot of time and cost. In this paper, we introduce a new algorithm for test case prioritization that is based on the code coverage of the test cases. The test cases that cover maximum part of the code are considered more valuable. We applied this new algorithm to a case study. The results are very effective and promising.", "num_citations": "14\n", "authors": ["1259"]}
{"title": "Impact of avoiding non-functional requirements in software development stage\n", "abstract": " Non-functional requirements such as security, performance, usability, scalability and maintenance define the quality attributes or constraints of software to be developed. During the development of software, they are as critical as their counterpart functional requirements because they ensure the quality of software product. Avoiding non-functional requirements or constraints during the requirements engineering process could lead to the failure of software projects. In order to investigate this problem, we have reviewed several published research papers. Based on the study of previously published research this paper gives an overview of impact of avoiding nonfunctional requirements of software project during requirements engineering process. In this research we will also give our recommendations for the improvement of requirements engineering practices.", "num_citations": "9\n", "authors": ["1259"]}
{"title": "Code Coverage Information to Support Regression Testing\n", "abstract": " Code coverage information is widely used to address problems in software development and maintenance phase. Software undergoes changes at all stages of the software development process and in maintenance life cycle. As subsequent versions of software program are created, coverage data is needed for those programs for regression testing tasks. Code coverage information helps in selecting test cases that are required to run on modified software. Researchers have developed different approaches using code coverage to accomplish regression testing tasks. We are of the opinion that there is a need to combine code based coverage and requirement based coverage to get hybrid coverage information to support regression testing.", "num_citations": "5\n", "authors": ["1259"]}
{"title": "Test Coverage Measurement and Analysis on the Basis of Software Traceability Approaches\n", "abstract": " Test Coverage is an important step in software testing and a good indicator of software quality. It helps in evaluating the effectiveness of testing by providing data on different coverage items. It ensures that testing is effectively carried out without missing out all the key functional areas or the features of the software under development. We have analyzed several software traceability approaches to understand the existing test coverage framework. These approaches have been classified in different categories. Moreover, we have compared researchers work based on these approaches. Comparison has been made based on some criteria such as coverage types, data base support, software traceability support, regression testing support, coverage construction and coverage re-construction techniques. We are of the opinion, although much research effort has been put on how to get coverage information by either code based testing or requirement based testing, not much has been paid to measure the coverage by combining both to get integrated coverage.", "num_citations": "3\n", "authors": ["1259"]}
{"title": "A New Model For Requirements to Code Traceability to Support Code Coverage Analysis\n", "abstract": " Requirements traceability is one of the most important and challenging tasks in the industry to ensure that software has been developed according to all user requirements. Requirements need to be specified and traced throughout the software development life cycle in order to map links between different software artifacts. This paper proposes a new model for finding traceability of functional requirements into artifacts such as methods, classes and packages. In this approach, requirements traceability links to code remains updated every time even after changes in code and requirements. This can be applied in updated coverage data and analysis to know which part of code has been tested and which has not been tested yet. Management can visualize the progress and quality of the software by knowing the traced code.", "num_citations": "3\n", "authors": ["1259"]}