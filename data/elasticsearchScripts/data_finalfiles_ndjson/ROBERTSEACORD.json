{"title": "Secure Coding in C and C++\n", "abstract": " \" The security of information systems has not improved at a rate consistent with the growth and sophistication of the attacks being made against them. To address this problem, we must improve the underlying strategies and techniques used to create our systems. Specifically, we must build security in from the start, rather than append it as an afterthought. That's the point of Secure Coding in C and C++. In careful detail, this book shows software developers how to build high-quality systems that are less vulnerable to costly and even catastrophic attack. It's a book that every developer should read before the start of any serious project.\"--Frank Abagnale, author, lecturer, and leading consultant on fraud prevention and secure documents Learn the Root Causes of Software Vulnerabilities and How to Avoid Them Commonly exploited software vulnerabilities are usually caused by avoidable software defects. Having analyzed nearly 18,000 vulnerability reports over the past ten years, the CERT/Coordination Center (CERT/CC) has determined that a relatively small number of root causes account for most of them. This book identifies and explains these causes and shows the steps that can be taken to prevent exploitation. Moreover, this book encourages programmers to adopt security best practices and develop a security mindset that can help protect software from tomorrow's attacks, not just today's. Drawing on the CERT/CC's reports and conclusions, Robert Seacord systematically identifies the program errors most likely to lead to security breaches, shows how they can be exploited, reviews the potential consequences, and presents secure alternatives\u00a0\u2026", "num_citations": "281\n", "authors": ["357"]}
{"title": "Volume II: Technical concepts of component-based software engineering\n", "abstract": " The Software Engineering Institute (SEI) is undertaking a feasibility study of \u201ccomponentbased software engineering\u201d(CBSE). The objective of this study is to determine whether CBSE has the potential to advance the state of software engineering practice and, if so, whether the SEI can contribute to this advancement. This report is the second part of a threepart report on the study. Volume I contains a market assessment for CBSE. Volume III outlines a proposed course of action for the SEI. Volume II, this report, establishes the technical foundation for SEI work in CBSE. The paper asserts that the key technical challenge facing CBSE is to ensure that the properties of a system of components can be predicted from the properties of the components themselves. The key technical concepts of CBSE that are needed to support this vision are described: component, interface, contract, component model, component framework, composition, and certification.", "num_citations": "253\n", "authors": ["357"]}
{"title": "Agora: A search engine for software components\n", "abstract": " Using JavaBeans and CORBA agents in conjunction with Web search technologies, this prototype search engine (Agora), automatically generates and indexes a worldwide database of software products, classified by component model. Users of Agora can search for components in this database by describing specific properties of a component's interface. The system combines Web search engines with an introspection process. Introspection, primarily associated with JavaBeans, describes the capability of components to provide information about their own interfaces. The Common Object Request Broker Architecture offers a similar capability, although this data is maintained external to the CORBA server in an interface repository.", "num_citations": "174\n", "authors": ["357"]}
{"title": "The CERT C secure coding standard\n", "abstract": " \u201cI\u2019m an enthusiastic supporter of the CERT Secure Coding Initiative. Programmers have lots of sources of advice on correctness, clarity, maintainability, performance, and even safety. Advice on how specific language features affect security has been missing. The CERT\u00ae C Secure Coding Standard fills this need.\u201d\u2013Randy Meyers, Chairman of ANSI C \u201cFor years we have relied upon the CERT/CC to publish advisories documenting an endless stream of security problems. Now CERT has embodied the advice of leading technical experts to give programmers and managers the practical guidance needed to avoid those problems in new applications and to help secure legacy systems. Well done!\u201d\u2013Dr. Thomas Plum, founder of Plum Hall, Inc.\u201cConnectivity has sharply increased the need for secure, hacker-safe applications. By combining this CERT standard with other safety guidelines, customers gain all-round protection and approach the goal of zero-defect software.\u201d\u2013Chris Tapp, Field Applications Engineer, LDRA Ltd.\u201cI\u2019ve found this standard to be an indispensable collection of expert information on exactly how modern software systems fail in practice. It is the perfect place to start for establishing internal secure coding guidelines. You won\u2019t find this information elsewhere, and, when it comes to software security, what you don\u2019t know is often exactly what hurts you.\u201d\u2013John McDonald, coauthor of The Art of Software Security Assessment Software security has major implications for the operations and assets of organizations, as well as for the welfare of individuals. To create secure software, developers must know where the dangers lie. Secure\u00a0\u2026", "num_citations": "131\n", "authors": ["357"]}
{"title": "A survey of legacy system modernization approaches\n", "abstract": " Information systems are critical assets for modern enterprises and incorporate key knowledge acquired over the life of an organization. Although these systems must be updated continuously to reflect evolving business practices, repeated modification has a cumulative effect on system complexity, and the rapid evolution of technology quickly renders existing technologies obsolete. Eventually, the existing information systems become too fragile to modify and too important to discard. However, organizations must consider modernizing these legacy systems to remain viable. The commercial market provides a variety of solutions to this increasingly common problem of legacy system modernization. However, understanding the strengths and weaknesses of each modernization technique is paramount to select the correct solution and the overall success of a modernization effort. This paper provides a survey of modernization techniques including screen scraping, database gateway, XML integration, database replication, CGI integration, object-oriented wrapping, and componentization of legacy systems. This general overview enables engineers performing legacy system modernization to preselect a subset of applicable modernization techniques for further evaluation.Descriptors:", "num_citations": "129\n", "authors": ["357"]}
{"title": "A Survey of Black-Box Modernization Approaches for Information Systems.\n", "abstract": " Information systems are critical assets for modern enterprises and incorporate key knowledge acquired over the life of an organization. These systems must be updated continuously to reflect evolving business practices. Unfortunately, repeated modification has a cumulative effect on system complexity, and the rapid evolution of technology quickly renders existing technologies obsolete. Eventually, the existing information systems become too fragile to modify and too important to discard. For this reason, organizations must consider modernizing these legacy systems to remain viable. The commercial market provides a variety of solutions to this increasingly common problem of legacy system modernization. Understanding the strengths and weaknesses of each modernization technique is paramount to select the correct solution and the overall success of a modernization effort. This paper provides a survey of\u00a0\u2026", "num_citations": "94\n", "authors": ["357"]}
{"title": "Secure design patterns\n", "abstract": " The cost of fixing system vulnerabilities and the risk associated with vulnerabilities after system deployment are high for both developers and end users. While there are a number of best practices available to address the issue of software security vulnerabilities, these practices are often difficult to reuse due to the implementation-specific nature of the best practices. In addition, greater understanding of the root causes of security flaws has led to a greater appreciation of the importance of taking security into account in all phases in the software development life cycle, not just in the implementation and deployment phases. This report describes a set of secure design patterns, which are descriptions or templates describing a general solution to a security problem that can be applied in many different situations. Rather than focus on the implementation of specific security mechanisms, the secure design patterns detailed in this report are meant to eliminate the accidental insertion of vulnerabilities into code or to mitigate the consequences of vulnerabilities. The patterns were derived by generalizing existing best security design practices and by extending existing design patterns with security-specific functionality. They are categorized according to their level of abstraction architecture, design, or implementation.Descriptors:", "num_citations": "93\n", "authors": ["357"]}
{"title": "The CERT Oracle Secure Coding Standard for Java\n", "abstract": " \u201cIn the Java world, security is not viewed as an add-on a feature. It is a pervasive way of thinking. Those who forget to think in a secure mindset end up in trouble. But just because the facilities are there doesn\u2019t mean that security is assured automatically. A set of standard practices has evolved over the years. The Secure\u00ae Coding\u00ae Standard for Java\u2122 is a compendium of these practices. These are not theoretical research papers or product marketing blurbs. This is all serious, mission-critical, battle-tested, enterprise-scale stuff.\u201d\u2014James A. Gosling, Father of the Java Programming Language An essential element of secure coding in the Java programming language is a well-documented and enforceable coding standard. Coding standards encourage programmers to follow a uniform set of rules determined by the requirements of the project and organization, rather than by the programmer\u2019s familiarity or preference. Once established, these standards can be used as a metric to evaluate source code (using manual or automated processes). The CERT\u00ae Oracle\u00ae Secure Coding Standard for Java\u2122 provides rules designed to eliminate insecure coding practices that can lead to exploitable vulnerabilities. Application of the standard\u2019s guidelines will lead to higher-quality systems\u2013robust systems that are more resistant to attack. Such guidelines are required for the wide range of products coded in Java\u2013for devices such as PCs, game players, mobile phones, home appliances, and automotive electronics. After a high-level introduction to Java application security, seventeen consistently organized chapters detail specific rules for key areas of Java\u00a0\u2026", "num_citations": "84\n", "authors": ["357"]}
{"title": "Method in a structure editor\n", "abstract": " The present invention relates to a method for providing improved editing capability in a structure editor, and more particularly for syntax-directed editors. A set of methods provide an approach to selecting arbitrary nodes from within a tree, and using those arbitrarily selected groups of nodes in otherwise conventional editing operations such as move, copy, delete, collect, and the like. In syntax-directed editors, the present invention provides a way of maintaining syntax while these novel and highly flexible editing operations are performed.", "num_citations": "70\n", "authors": ["357"]}
{"title": "A structured approach to classifying security vulnerabilities\n", "abstract": " Understanding vulnerabilities is critical to understanding the threats they represent. Vulnerabilities classification enables collection of frequency data trend analysis of vulnerabilities correlation with incidents, exploits, and artifacts and evaluation of the effectiveness of countermeasures. Existing classification schemes are based on vulnerability reports and not on an engineering analysis of the problem domain. In this report a classification scheme that uses attribute-value pairs to provide a multidimensional view of vulnerabilities is proposed. Attributes and values are selected based on engineering distinctions that allow vulnerabilities to be exploited by a given technique or determine which countermeasures are effective. Successful classification of vulnerabilities should lead to greater automation in analyzing code vulnerabilities and supporting effective communication between geographically remote vulnerability handling teams and vendors.Descriptors:", "num_citations": "47\n", "authors": ["357"]}
{"title": "The CERT C coding standard: 98 rules for developing safe, reliable, and secure systems\n", "abstract": " \" At Cisco, we have adopted the CERT C Coding Standard as the internal secure coding standard for all C developers. It is a core component of our secure development lifecycle. The coding standard described in this book breaks down complex software security topics into easy-to-follow rules with excellent real-world examples. It is an essential reference for any developer who wishes to write secure and resilient software in C and C++.\"--Edward D. Paradise, vice president, engineering, threat response, intelligence, and development, Cisco Systems Secure programming in C can be more difficult than even many experienced programmers realize. To help programmers write more secure code, The CERT\u00ae C Coding Standard, Second Edition, fully documents the second official release of the CERT standard for secure coding in C. The rules laid forth in this new edition will help ensure that programmers' code fully complies with the new C11 standard; it also addresses earlier versions, including C99. The new standard itemizes those coding errors that are the root causes of current software vulnerabilities in C, prioritizing them by severity, likelihood of exploitation, and remediation costs. Each of the text's 98 guidelines includes examples of insecure code as well as secure, C11-conforming, alternative implementations. If uniformly applied, these guidelines will eliminate critical coding errors that lead to buffer overflows, format-string vulnerabilities, integer overflow, and other common vulnerabilities. This book reflects numerous experts' contributions to the open development and review of the rules and recommendations that comprise this standard\u00a0\u2026", "num_citations": "43\n", "authors": ["357"]}
{"title": "Software engineering component repositories\n", "abstract": " Traditional, large-scale software repositories have historically failed, principally as a result of their conception as centralized systems. New and emerging technologies such as traders, brokers, location services and search engines have yet to be proven effective in the location and adoption of reusable software components. The Component-Based Systems (CBS) Initiative at the Software Engineering Institute (SEI) developed the Agora software prototype to investigate the integration of search technology with component introspection to create a distributed, worldwide component repository. This paper provides a description of Agora, its strengths and shortcomings, and discusses the evolution of component-based software engineering necessary to support an effective component repository.", "num_citations": "41\n", "authors": ["357"]}
{"title": "Java coding guidelines: 75 recommendations for reliable and secure programs\n", "abstract": " \u201cA must-read for all Java developers.... Every developer has a responsibility to author code that is free of significant security vulnerabilities. This book provides realistic guidance to help Java developers implement desired functionality with security, reliability, and maintainability goals in mind.\u201d\u2013Mary Ann Davidson, Chief Security Officer, Oracle Corporation Organizations worldwide rely on Java code to perform mission-critical tasks, and therefore that code must be reliable, robust, fast, maintainable, and secure. Java\u2122 Coding Guidelines brings together expert guidelines, recommendations, and code examples to help you meet these demands. Written by the same team that brought you The CERT\u00ae Oracle\u00ae Secure Coding Standard for Java\u2122, this guide extends that previous work\u2019s expert security advice to address many additional quality attributes. You\u2019ll find 75 guidelines, each presented consistently and intuitively. For each guideline, conformance requirements are specified; for most, noncompliant code examples and compliant solutions are also offered. The authors explain when to apply each guideline and provide references to even more detailed information. Reflecting pioneering research on Java security, Java\u2122 Coding Guidelines offers updated techniques for protecting against both deliberate attacks and other unexpected events. You\u2019ll find best practices for improving code reliability and clarity, and a full chapter exposing common misunderstandings that lead to suboptimal code. With a Foreword by James A. Gosling, Father of the Java Programming Language", "num_citations": "32\n", "authors": ["357"]}
{"title": "K-bacee: Knowledge-based automated component ensemble evaluation\n", "abstract": " Component reuse suffers from the inability of system integrators to effectively identify ensembles of compatible software components that can be easily integrated into a system. To address this problem, we developed a process for identifying component ensembles that satisfy a system requirements specification, and for ranking these ensembles based on a knowledge base of system integration rules. We also built a prototype system that automates this process.", "num_citations": "31\n", "authors": ["357"]}
{"title": "Secure coding in C and C++ of strings and integers\n", "abstract": " Although the flexibility and performance of C and C++ aren't in question, security has increasingly become an issue. The C and C++ communities have recognized this and have taken steps to improve security at all levels, including improved standards, compiler implementations, and static and runtime analysis tools.", "num_citations": "26\n", "authors": ["357"]}
{"title": "As-if infinitely ranged integer model\n", "abstract": " Integers represent a growing and underestimated source of vulnerabilities in C and C++ programs. This paper presents the As-if Infinitely Ranged (AIR) Integer model for eliminating vulnerabilities resulting from integer overflow, truncation, and unanticipated wrapping. The AIR Integer model either produces a value equivalent to that obtained using infinitely ranged integers or results in a runtime-constraint violation. With the exception of wrapping (which is optional), this model can be implemented by a C99-conforming compiler and used by the programmer with little or no change to existing source code. Fuzz testing of libraries that have been compiled using a prototype AIR integer compiler has been effective in discovering vulnerabilities in software with low false positive and false negative rates. Furthermore, the runtime overhead of the AIR Integer model is low enough that typical applications can enable it in\u00a0\u2026", "num_citations": "23\n", "authors": ["357"]}
{"title": "Replaceable components and the service provider interface\n", "abstract": " A highly touted property of components and component-based software engineering is the ability to treat components as fully replaceable units. Commercially successful component models such as EJB, COM and JavaBeans have not yet produced a marketplace of replaceable components while Sun\u2019s service provider interface (SPI) has produced replaceable components in several technology areas. This paper considers both the meaning of, and motivation for, replaceable components and evaluates the properties of commercially successful component models and the SPI approach that effect their ability to support replaceable components.", "num_citations": "22\n", "authors": ["357"]}
{"title": "Secure coding standards\n", "abstract": " Secure coding standards define rules and recommendations to guide the development of secure software systems. Establishing secure coding standards provides a basis for secure system development as well as a common set of criteria that can be used to measure and evaluate software development efforts and software development tools and processes. This paper describes plans by the CERT/Coordination Center at the Software Engineering Institute at Carnegie Mellon University to establish, through a coordinated community effort, a set of secure coding standards for commonly used programming languages.", "num_citations": "21\n", "authors": ["357"]}
{"title": "Custom vs. off-the-shelf architecture\n", "abstract": " Members of the COTS-based system initiative at the Software Engineering Institute have developed the Generic Enterprise Ensemble (GEE), a generic approach to building distributed, transaction based, secure enterprise information systems (EIS). GEE is a tool to help in the selection of technologies and architectural choices when building enterprise information systems. Enterprise JavaBeans/sup TM/ (EJB) is a specification from Sun Microsystems for an application server based on Java technology. a comparison is made between GEE based solutions and off-the-shelf solutions based on the EJB specification.", "num_citations": "18\n", "authors": ["357"]}
{"title": "Ranged integers for the C programming language\n", "abstract": " This report describes an extension to the C programming language to introduce the notion of ranged integers, that is, integer types with a defined range of values. A variable of a ranged integer type will always have a value within the defined range as a result of initialization or assignment. Use of ranged integers would help prevent integer overflow errors and thus would result in more reliable and secure C programs. The syntax and semantics of ranged integers are presented, and some examples are given to illustrate their use.Descriptors:", "num_citations": "11\n", "authors": ["357"]}
{"title": "Mining and managing software assets\n", "abstract": " Mining and managing software assets are important for strategic reuse of assets in new systems. This report outlines the SEI's Options Analysis for Reengineering (OAR) method, which is an approach for mining components and discusses component repositories and in particular the SEI's Knowledge-Based Automated Component Ensemble Evaluation (K-BACEE). OAR is a systematic, architecture-centric method for mining existing components for a product line or new software architecture. The method incorporates a set of scalable techniques and activities to collaboratively analyze existing components, determine viable mining options, and evaluate the most promising options. Once mined, software assets need to be managed to be useful. Compatibility with other legacy assets, commercial-off-the-shelf software products, and other software components needs to be understood and codified in such a way that it\u00a0\u2026", "num_citations": "10\n", "authors": ["357"]}
{"title": "Teaching secure coding: report from summit on education in secure software\n", "abstract": " Software is critical to life in the 21st century. It drives financial, medical, and government computer systems as well as systems that provide critical infrastructures in areas such as transportation, energy, networking, and telecommunications. As the number and severity of attacks that exploit software vulnerabilities increase, writing reliable, robust, and secure programs will substantially improve the ability of systems and infrastructure to resist such attacks. Education plays a critical role in addressing cybersecurity challenges of the future, such as designing curricula that integrate principles and practices of secure programming into educational programs. To help guide this process, the National Science Foundation Directorates of Computer and Information Science and Engineering (CISE) and Education and Human Resources (EHR) jointly sponsored the Summit on Education in Secure Software (SESS), held in\u00a0\u2026", "num_citations": "9\n", "authors": ["357"]}
{"title": "Life cycle activity areas for component-based software engineering processes\n", "abstract": " Although traditional software engineering focuses on development Component-based software engineering (CBSE) processes must focus on integration. In this paper, we elaborate on this focus into a process framework for CBSE consisting of four major activity areas: engineering, business, management, and overarching. We show how these activities are concurrent with respect to an iterative and incremental development model. Detailed discussions are also presented on the consequent issues, concerns, problems, and recommended solutions..", "num_citations": "9\n", "authors": ["357"]}
{"title": "An online learning approach to information systems security education\n", "abstract": " The demand for information systems security education has never been higher, while the availability of high-quality information systems security instruction and of well-qualified instructors are both extremely limited. Meeting the demand requires converting teaching from an individual activity to a community-based research activity. As a result, Carnegie Mellon University\u2019s Open Learning Initiative and the Software Engineering Institute\u2019s CERT\u00ae Program have collaborated in the development of an online secure coding module that exemplifies how to capture expert content, ensure high-quality learning, and scale to meet rapidly growing demand. This paper describes this effort and how high-quality information systems security instruction can be scaled to meet existing and projected demand.", "num_citations": "8\n", "authors": ["357"]}
{"title": "As-if infinitely ranged integer model\n", "abstract": " Integer overflow and wraparound are a major cause of software vulnerabilities in the C and C programming languages. In this paper, we present the as-if infinitely ranged AIR integer model, which provides a largely automated mechanism for eliminating integer overflow and integer truncation. The AIR integer model either produces a value which is equivalent to a value that would have been obtained using infinitely ranged integers or results in a runtime constraint violation. Unlike previous integer models, AIR integers do not require precise traps, and consequently do not break or inhibit most existing optimizations.Descriptors:", "num_citations": "8\n", "authors": ["357"]}
{"title": "A Comparison of Component Integration Between JavaBeans and PCTE\n", "abstract": " One of the latest approaches to software development is \u201ccomponent-based integration\u201d[1] in which an application is composed by integrating a number of, usually small, software components. A number of component-based integration technologies have appeared, for example CORBA, ActiveX, JavaBeans. These technologies offer great promise.", "num_citations": "8\n", "authors": ["357"]}
{"title": "Java Concurrency Guidelines\n", "abstract": " An essential element of secure coding in the Java programming language is well-documented and enforceable coding standards. Coding standards encourage programmers to follow a uniform set of guidelines determined by the requirements of the project and organization, rather than by the programmers familiarity or preference. Once established, these standards can be used as a metric to evaluate source code using manual or automated processes. The CERT Oracle Secure Coding Standard for Java provides guidelines for secure coding in the Java programming language. The goal of these guidelines is to eliminate insecure coding practices and undefined behaviors that can lead to exploitable vulnerabilities. Applying this standard will lead to higher quality systems that are robust and more resistant to attack. This report documents the portion of those Java guidelines that are related to concurrency.Descriptors:", "num_citations": "7\n", "authors": ["357"]}
{"title": "Automated component ensemble evaluation\n", "abstract": " Russ Bunting Software Engineering Institute Pittsburgh, Pennsylvania 15213+ 1 412/268-9150 rbunting@ sei. cmu. edu", "num_citations": "7\n", "authors": ["357"]}
{"title": "Theory and Practice of Enterprise JavaBean Portability\n", "abstract": " The modern Enterprise Information System (EIS) requires the integration of numerous technologies such as distribution, transactions, data management, security, and naming. Offthe-shelf architectures such as Enterprise JavaBeans\u2122(EJB) provide a pre-integrated solution that supports the quick development and deployment of information systems. Unfortunately, the EJB specification is extremely porous, leading to portability problems. In addition, the line between vendor extensions and EJB standard functionality is blurred, making it difficult for bean providers to know what functionality can be depended upon across server implementations. This paper presents sources of portability problems in EJB and illustrates them with some real examples. We also present our opinion about the direction the EJB specification should take to enable effective reuse of Enterprise Beans\u2122 between servers.", "num_citations": "7\n", "authors": ["357"]}
{"title": "Source code analysis laboratory (scale)\n", "abstract": " The Source Code Analysis Laboratory SCALe is a proof-of-concept demonstration that software systems can be conformance tested against secure coding standards. CERT secure coding standards provide a detailed enumeration of coding errors that have resulted in vulnerabilities for commonly used software development languages. The SCALe team at the CERT Program, part of Carnegie Mellon Universitys Software Engineering Institute, analyzes a developers source code and provides a detailed report of findings to guide the codes repair. After the developer has addressed these findings and the SCALe team determines that the product version conforms to the standard, the CERT Program issues the developer a certificate and lists the system in a registry of conforming systems. This report details the SCALe process and provides an analysis of selected software systems.Descriptors:", "num_citations": "6\n", "authors": ["357"]}
{"title": "Source Code Analysis Laboratory (SCALe) for Energy Delivery Systems\n", "abstract": " The Source Code Analysis Laboratory SCALe is an operational capability that tests software applications for conformance to one of the CERTregistered name secure coding standards. CERT secure coding standards provide a detailed enumeration of coding errors that have resulted in vulnerabilities for commonly used software development languages. The SCALe team at CERT, a program of Carnegie Mellon Universitys Software Engineering Institute, analyzes a developers source code and provides a detailed report of findings to guide the codes repair. After the developer has addressed these findings and the SCALe team determines that the product version conforms to the standard, CERT issues the developer a certificate and lists the system in a registry of conforming systems. This report details the SCALe process and provides an analysis of energy delivery systems. Though SCALe can be used in various capacities, it is particularly significant for conformance testing of energy delivery systems because of their critical importance.Descriptors:", "num_citations": "5\n", "authors": ["357"]}
{"title": "Strengths in Security Solutions\n", "abstract": " The Carnegie Mellon Software Engineering Institute (SEI) works closely with defense and government organizations, industry, and academia to continually improve software-intensive systems. Our core purpose is to help organizations improve their software engineering capabilities and to develop or acquire the right software, defect free, within budget and on time, every time. The CERT1\u00e2 Division of the Software Engineering Institute (SEI) works to anticipate and solve our nation\u2019s cybersecurity challenges. Our cybersecurity work spans the acquisition and development lifecycle and includes research, development, deployment of methods and tools, and operational support. Our main customers include the military services, defense and other federal agencies, state and local government agencies, commercial entities, and academia. As a federally funded research and development center, the SEI is primarily funded by the government and may not compete with private industry.", "num_citations": "4\n", "authors": ["357"]}
{"title": "TSP Secure\n", "abstract": " ObjectiveBuild software that is free from known vulnerabilities; vulnerabilities that\u2013if exploited\u2013enable a determined adversary to", "num_citations": "4\n", "authors": ["357"]}
{"title": "Browsers for distributed systems: Universal paradigm or siren's song?\n", "abstract": " Web\u2010based browsers are quickly becoming ubiquitous in the workplace. Software development managers are quick to incorporate browsers into a broad range of software development projects, often inappropriately. The purpose of this paper is to examine the technical issues relevant to incorporating browsers as a component of a commercial off\u2010the\u2010shelf (COTS)\u2010based solution. Issues examined include portability, performance, functionality, security, human factors, distribution, installation, upgrading, component\u2010based development, runtime configuration management, and licensing.", "num_citations": "4\n", "authors": ["357"]}
{"title": "Mobile device security\n", "abstract": " This paper provides an overview of the mobile device security ecosystem and identifies the top security challenges.", "num_citations": "3\n", "authors": ["357"]}
{"title": "Dangerous Optimizations and the Loss of Causality\n", "abstract": " THIS MATERIAL OF CARNEGIE MELLON UNIVERSITY AND ITS SOFTWARE ENGINEERING INSTITUTE IS FURNISHED ON AN \u201cAS-IS\" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.", "num_citations": "3\n", "authors": ["357"]}
{"title": "Case Study: Global Combat Support System-Air Force\n", "abstract": " This case study describes the use of components to modernize legacy systems. The Global Combat Support System for the Air Force (GCSS-AF) seeks to modernize base level support systems into integrated systems that are responsive to Air Force needs during war and peace time. GCSS-AF mission areas include: Logistics, Finance, Personnel, Medical, Business Information and Functional Information Systems. The modernization efforts seek to maintain or improve current capabilities and reduce life cycle support costs without degrading current operations.", "num_citations": "3\n", "authors": ["357"]}
{"title": "Effective C: An Introduction to Professional C Programming\n", "abstract": " A detailed introduction to the C programming language for experienced programmers. The world runs on code written in the C programming language, yet most schools begin the curriculum with Python or Java. Effective C bridges this gap and brings C into the modern era--covering the modern C17 Standard as well as potential C2x features. With the aid of this instant classic, you'll soon be writing professional, portable, and secure C programs to power robust systems and solve real-world problems. Robert C. Seacord introduces C and the C Standard Library while addressing best practices, common errors, and open debates in the C community. Developed together with other C Standards committee experts, Effective C will teach you how to debug, test, and analyze C programs. You'll benefit from Seacord's concise explanations of C language constructs and behaviors, and from his 40 years of coding experience. You'll learn:-How to identify and handle undefined behavior in a C program-The range and representations of integers and floating-point values-How dynamic memory allocation works and how to use nonstandard functions-How to use character encodings and types-How to perform I/O with terminals and filesystems using C Standard streams and POSIX file descriptors-How to understand the C compiler's translation phases and the role of the preprocessor-How to test, debug, and analyze C programs Effective C will teach you how to write professional, secure, and portable C code that will stand the test of time and help strengthen the foundation of the computing world.", "num_citations": "2\n", "authors": ["357"]}
{"title": "Bounds-checking Interfaces: Field Experience and Future Directions\n", "abstract": " Annex K of C11, Bounds-checking interfaces, introduced a set of new, optional functions into the standard C library with the goal of mitigating the security implications of a subset of buffer overflows in existing code. The boundschecking interfaces originated as an ISO/IEC technical report in 2007 before being incorporated in C11 as the optional but normative Annex K. Field experience with the bounds-checking interfaces has been hampered by a lack of adoption by compiler implementations, despite these interfaces being available for over a decade. This lack of adoption resulted largely from unfounded criticism of the API as well as actual flaws. As a result, the international standardization working group for the C programming language is evenly divided between repairing and eliminating Annex K for the next major release of the C language (C2X). This paper examines the arguments both for and against the\u00a0\u2026", "num_citations": "2\n", "authors": ["357"]}
{"title": "Combating Java Deserialization Vulnerabilities with Look-Ahead Object Input Streams (LAOIS)\n", "abstract": " Java Serialization is an important and useful feature of Core Java that allows developers to transform a graph of Java objects into a stream of bytes for storage or transmission and then back into a graph of Java objects. Unfortunately, the Java Serialization architecture is highly insecure and has led to numerous vulnerabilities, including remote code execution (RCE) and denial-of-service (DoS) attacks. Any Java program that deserializes a stream is susceptible to such vulnerabilities unless proper mitigations are taken. One such mitigation strategy is look-ahead deserialization or look-ahead object input streams (LAOIS). This whitepaper examines Java deserialization vulnerabilities and evaluates various LAOIS solutions including JDK Enhancement Proposal (JEP) 290.", "num_citations": "2\n", "authors": ["357"]}
{"title": "Uninitialized reads\n", "abstract": " Understanding the proposed revisions to the C language.", "num_citations": "2\n", "authors": ["357"]}
{"title": "Supporting the Use of CERT\u00ae Secure Coding Standards in DoD Acquisitions\n", "abstract": " The United States Department of Defense (DoD) increasingly depends on networked software systems. One result of this dependency is an increase in attacks on both military and non-military systems as attackers look to exploit software vulnerabilities. Program acquisition offices are emphasizing information assurance to address various threats. The Defense Information Systems Agency (DISA) created the Application Security and Development Security Technical Implementation Guide (STIG) in response to DoD Directive 8500. IE, which establishes policies and assigns responsibilities for achieving DoD information assurance. That STIG provides guidance for information assurance and security throughout a program\u2019s lifecycle, and it is specified as a requirement for DoD-developed,-architected, and-administered applications and systems that are connected to DoD networks.", "num_citations": "2\n", "authors": ["357"]}
{"title": "Secure Coding\n", "abstract": " Checks to see if the computer is already infected. Runs when Windows starts. Generates a random IP address. Attempts to infect the computer with that address. Sends data on TCP port 135 to exploit the DCOM RPC vulnerability on either Windows XP or Windows 2000.", "num_citations": "2\n", "authors": ["357"]}
{"title": "Secure Coding Standards\n", "abstract": " Inherent weaknesses in programming languages contribute to software vulnerabilities. Increasingly, organizations are producing standards to improve software security. Current efforts to develop software security standards are surveyed, and two such efforts are described in detail. An international standards group is writing a document providing guidance to users of programming languages on how to avoid the vulnerabilities that exist in the programming language selected for a particular project. Carnegie Mellon University\u2019s (CMU\u2019s) Computer Emergency Response Team (CERT) is developing secure coding practices for the C and C++ programming languages1.", "num_citations": "2\n", "authors": ["357"]}
{"title": "Secure Software Architecture, Design, Implementation and Assurance\n", "abstract": " The secure software architecture, design, implementation and assurance minitrack focuses on the research and automation required to develop secure software systems that do not compromise other system properties such as performance and reliability. The goal of this minitrack is to facilitate a dialogue between software security researchers and practitioners so that software security research can be guided by practical requirements and research techniques can be more quickly transitioned to practice", "num_citations": "2\n", "authors": ["357"]}
{"title": "Half day tutorial in methods of component-based software engineering essential concepts and classroom experience\n", "abstract": " The question of which design methods are appropriate for component-based development (CBD) is complicated by different understandings of the end objectives CBD. A further complication is different understandings of what is meant by \"component.\" These differences lead to entirely distinct classes of design problem. The aim of this tutorial is to, first, outline the differing interpretations of CBD, and, second, to outline the required methodological responses to these design problems.", "num_citations": "2\n", "authors": ["357"]}
{"title": "Theory and Practice of Enterprise JavaBean Portability\n", "abstract": " The modern enterprise information system (EIS) requires the integration of numerous technologies such as distribution, transactions, data management, security, and naming. Off-the-shelf architectures such as Enterprise JavaBeans (EJB) provide a pre-integrated solution that supports the quick development and deployment of information systems. Unfortunately, the EJB specification is extremely porous, leading to portability problems. In addition, the line between vendor extensions and EJB standard functionality is blurred, making it difficult for bean providers to know what functionality can be depended upon across server implementations. This paper presents sources of portability problems in EJB and illustrates them with some real examples. We also present our opinion about the direction the EJB specification should take to enable effective reuse of Enterprise Beans between servers.", "num_citations": "2\n", "authors": ["357"]}
{"title": "Custom vs. Vendor-Integrated COTS Software\n", "abstract": " The Generic Enterprise Ensemble (GEE) developed by the COTS-Based Systems initiative at the Software Engineering Institute is designed to be a generic approach to building Enterprise Information systems that are distributed, transaction-based and secure. Two GEE variants were developed: one by integrating \u201clatest and greatest\u201d components from leading vendors and one using Enterprise JavaBeans (EJB). Where the development of this system has proven impossible using \u201clatest and greatest\u201d components, initial indications are that an EJB solution is relatively straightforward. Our experiences have implications for third-party integrators.", "num_citations": "2\n", "authors": ["357"]}
{"title": "Effective C\n", "abstract": " The world runs on code written in C, yet more can be done to help developers learn to write professional, secure, and effective C programs. This article describes why the C programming language has succeeded and what\u2019s next for the language from the perspective of a longterm C Standards Committee expert.", "num_citations": "1\n", "authors": ["357"]}
{"title": "Java Deserialization Vulnerabilities and Mitigations\n", "abstract": " This tutorial provides developers with practical guidance for securely implementing Java Serialization. Java deserialization is a clear and present danger as its widely used both directly by applications and indirectly by Java subsystems such as RMI (Remote Method Invocation), JMX (Java Management Extension), JMS (Java Messaging System). Deserialization of untrusted streams can result in remote code execution (RCE), denial-of service (DoS), and a range of other exploits. Applications can be vulnerable to these attacks even if they did nothing wrong.", "num_citations": "1\n", "authors": ["357"]}
{"title": "Uninitialized Reads: Understanding the proposed revisions to the C language\n", "abstract": " Most developers understand that reading uninitialized variables in C is a defect, but some do it anyway. What happens when you read uninitialized objects is unsettled in the current version of the C standard (C11).3 Various proposals have been made to resolve these issues in the planned C2X revision of the standard. Consequently, this is a good time to understand existing behaviors as well as proposed revisions to the standard to influence the evolution of the C language. Given that the behavior of uninitialized reads is unsettled in C11, prudence dictates eliminating uninitialized reads from your code.", "num_citations": "1\n", "authors": ["357"]}
{"title": "Software Security\n", "abstract": " 517 SMXS/MXDEA 6022 Fir AVE BLDG 1238 Hill AFB, UT 84056-5820 Article Submissions: We welcome articles of interest to the defense software community. Articles must be approved by the CROSSTALK editorial board prior to publication. Please follow the Author Guidelines, available at< www. stsc. hill. af. mil/crosstalk/xtlkguid. pdf>. CROSSTALK does not pay for submissions. Articles published in CROSSTALK remain the property of the authors and may be submitted to other publications.", "num_citations": "1\n", "authors": ["357"]}
{"title": "Workshop on Component-Based Software Engineering Processes\n", "abstract": " Component-based software engineering (CBSE) spans a range of technologies and engineering practices. Engineering practices for component-based systems (eg, design, integrate, test, deploy and sustain) are emerging, but in isolated settings rather than at a community level. The goal of this workshop is to provide a baseline understanding of the broad aspects of CBSE processes.", "num_citations": "1\n", "authors": ["357"]}
{"title": "Rule-based COTS integration\n", "abstract": " Component-based software development is considered to be a promising technology to increase software development productivity. However, developing componentbased applications faces different challenges. One of them is identifying component ensembles that satisfy any particular system requirements specification. In this paper we introduce a component integration evaluation based on software engineering integration rules. These rules represent real-world experiences and are combined into knowledge base. These representative rules evaluate compatibility among components according to their attributes of component specification.", "num_citations": "1\n", "authors": ["357"]}
{"title": "K-BACEE: A Knowledge-Based Automated Component Ensemble Evaluation Tool\n", "abstract": " Component reuse suffers from the inability of system integrators to effectively identify ensembles of compatible software components that can be easily integrated into a system. To address this problem, we have developed an automated process for identifying component ensembles that satisfy a system requirements specification and for ranking these ensembles based on a knowledge base of system integration rules.Descriptors:", "num_citations": "1\n", "authors": ["357"]}
{"title": "Component web search engines\n", "abstract": " Traditional, large-scale software repositories have historically failed, principally as a result of their conception as centralized systems. New and emerging technologies such as traders, brokers, location services and search engines have yet to be proven effective in the location and adoption of reusable software components. The COTS-Based Systems (CBS) Initiative at the Software Engineering Institute (SEI) developed the Agora software prototype to investigate the integration of search technology with component introspection to create a distributed, component repository. This chapter describes the objectives of this work, the features and capabilities of Agora, and the design and implementation of the prototype. Agora is positioned relative to existing products that provide similar services and the issues, tradeoffs and future evolution of the approach are discussed.", "num_citations": "1\n", "authors": ["357"]}
{"title": "Securing Internet Sessions With Sorbet\n", "abstract": " More and more organizations are using intranets and even the Internet as the communications media for important data. However, such communications media are inherently insecure and subject to hijacking. To secure these connections, mechanisms must be built on top of the underlying communications facilities. We discuss one such security mechanism and describe an implementation using common object request broker architecture (CORBA) based interceptors.", "num_citations": "1\n", "authors": ["357"]}