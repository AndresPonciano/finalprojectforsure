{"title": "Feature interaction and dependencies: Modeling features for reengineering a legacy product line\n", "abstract": " Reengineering a legacy product line has been addressed very little by current product line research activities. This paper introduces a method to investigate feature dependencies and interactions, which restricts the variants that can be derived from the legacy product line assets. Reorganizing the product line assets with respect to new requirements requires more knowledge than what is easily provided by the classical feature-modeling approaches. Hence, adding all the feature dependencies and interactions into the feature tree results in unreadable and unmanageable feature models that fail to achieve their original goals.             We therefore propose two complementary views to represent the feature model. One view shows the hierarchical refinement of features similar to common feature-modeling approaches in a feature tree. The second view describes what kind of dependencies and interactions there\u00a0\u2026", "num_citations": "170\n", "authors": ["2186"]}
{"title": "Requirements engineering for product families\n", "abstract": " In search of improved software quality and high productivity, software reuse has become a key research area. One of the most promising reuse approaches is product families. However, current practices in requirements engineering do not support product families. The paper describes a definition hierarchy method for requirements capturing, structuring, analysis and documentation. This method helps to identify architectural drivers of the product family and shows how different products in the family vary.", "num_citations": "113\n", "authors": ["2186"]}
{"title": "System, method and computer program product for accessing at least one virtual private network\n", "abstract": " A system for accessing at least one Virtual Private Network (VPN) includes a terminal, and can include at least one Security Policy Database (SPD). The terminal is capable of communicating with a VPN client and at least one application. The VPN client, in turn, is capable of defining at least one VPN access point, each VPN access point including an associated physical access point and VPN policy. Thereafter, the VPN client can access at least one VPN based upon the VPN access point (s) to thereby establish at least one data connection from at least one application across the at least one VPN. In addition, the VPN client can be capable of downloading at least one VPN policy from the SPD. A system for managing at least one Virtual Private Network (VPN) policy is also provided, where the VPN polic (ies) are for use in accessing at least one VPN.", "num_citations": "87\n", "authors": ["2186"]}
{"title": "Automated support for combinational creativity in requirements engineering\n", "abstract": " Requirements engineering (RE), framed as a creative problem solving process, plays a key role in innovating more useful and novel requirements and improving a software system's sustainability. Existing approaches, such as creativity workshops and feature mining from web services, facilitate creativity by exploring a search space of partial and complete possibilities of requirements. To further advance the literature, we support creativity from a combinational perspective, i.e., making unfamiliar connections between familiar possibilities of requirements. In particular, we propose a novel framework that extracts familiar ideas from the requirements and stakeholders' comments using topic modeling and applies part-of-speech tagging to obtain unfamiliar idea combinations. We apply our framework on two large open source software systems and further report a human subject evaluation. The results show that our\u00a0\u2026", "num_citations": "62\n", "authors": ["2186"]}
{"title": "Transition to agile development-rediscovery of important requirements engineering practices\n", "abstract": " Many organizations have started to use agile development processes to speed up the development cycle and to improve the ability of the company in reacting to changing requirements. Adopting agile practices may happen as a revolution where all old practices are removed or as a more gradual process. In this paper, we discuss lessons learnt in two agile transition processes. Based on our experience, agile processes can be used in embedded software development for products. The challenges include the varying size of user requirements, the role of system requirements, and architecturally significant requirements. It is difficult for large organizations to be agile. Work allocation for a large number of different teams with different competencies tends to decrease speed, and increase the role of design and management. We conclude that agile development in this context needs very skilled developers and has to be\u00a0\u2026", "num_citations": "60\n", "authors": ["2186"]}
{"title": "A systems approach to product line requirements reuse\n", "abstract": " Product line engineering has become the main method for achieving systematic software reuse. Embracing requirements in a product line's asset base enhances the effectiveness of reuse as engineers can work on the abstractions closer to the domain's initial concepts. Conventional proactive approaches to product line engineering cause excessive overhead when codifying the assets. In this paper, we propose a systems-oriented approach to extracting functional requirements profiles. The validated extraction constructs are amenable to semantic case analysis and orthogonal variability modeling, so as to uncover the variation structure and constraints. To evaluate our approach, we present an experiment to quantify the extraction overhead and effectiveness and a case study to assess our approach's usefulness. The results show that our automatic support offers an order-of-magnitude saving over the manual\u00a0\u2026", "num_citations": "58\n", "authors": ["2186"]}
{"title": "System and method for access point translation of web service content\n", "abstract": " A system and method for using a network access point to implement transparent Web Service functionality between processing deficient terminals and Web Service providers by allowing the terminals to access Web Services using abbreviated Web Service requests. The abbreviated Web Service requests are then translated into conventional Web Service requests by the network access point and subsequently forwarded onto the Web Service provider. The conventional Web Service response is then optionally translated into an abbreviated response to accommodate the processing deficiencies of the Web Service requester.", "num_citations": "54\n", "authors": ["2186"]}
{"title": "oriented variability modeling\n", "abstract": " Software product lines have emerged as the main method achieving reuse. Traditionally, a product line has a single feature model shared by all the products. For large and evolving product lines with numerous stakeholders, the feature model becomes increasingly complex and hard to manage. Having just one large feature model with all allowed variability makes understanding the reasons for variability very difficult. This may lead to reluctance of changing feature variability and removing unnecessary variability rules from the model. In this paper, we propose a method to use viewpoints for capturing the needs of all stakeholders without resorting to a one large feature model. Different viewpoints can be combined to gain insight to the product line and to derive products. The method supports current industrial practices.", "num_citations": "39\n", "authors": ["2186"]}
{"title": "From feature development to customer value creation\n", "abstract": " Marketing experts emphasize that the creation of superior customer value is a key element for companies' success. Understanding how to create value for customers, however, is not trivial in practice. The purpose of this paper is to analyze the role of requirements engineering (RE) in customer value creation. The paper describes experiences gained from six Finnish companies that develop software-intensive products and services for global markets. In practice, the focus of RE activities is mainly on product features. Customer value creation is, however, more than developing a competitive set of product features. It is important for companies to understand customers' processes and develop solutions that support these processes. To enable practitioners to change the focus from feature development to customer value creation, we propose a set of RE practices.", "num_citations": "38\n", "authors": ["2186"]}
{"title": "Variability evolution and erosion in industrial product lines: a case study\n", "abstract": " Successful software products evolve continuously to meet the changing stakeholder requirements. For software product lines, modifying variability is an additional challenge that must be carefully tackled during the evolution of the product line. This bears considerable challenges for industry as understanding on how variability realizations advance over time is not trivial. Moreover, it may lead to an erosion of variability, which needs an investigation of techniques on how to identify the variability erosion in practice, especially in the source code. To address various erosion symptoms, we have investigated the evolution of a large-scale industrial product line over a period of four years. Along improvement goals, we have researched a set of appropriate metrics and measurement approaches in a goal-oriented way, applied them in this case study with tool support, and interpreted the results including identified erosion\u00a0\u2026", "num_citations": "37\n", "authors": ["2186"]}
{"title": "Leveraging topic modeling and part-of-speech tagging to support combinational creativity in requirements engineering\n", "abstract": " Requirements engineering (RE), framed as a creative problem solving process, plays a key role in innovating more useful and novel requirements and improving a software system\u2019s sustainability. Existing approaches, such as creativity workshops and feature mining from web services, facilitate creativity by exploring a search space of partial and complete possibilities of requirements . To further advance the literature, we study creativity from a combinational perspective, i.e., making unfamiliar connections between familiar possibilities of requirements. In particular, we propose a novel framework that extracts familiar ideas from the requirements and stakeholders\u2019 comments using topic modeling, and automatically generates requirements by obtaining unfamiliar idea combinations by means of flipping the part-of-speech of identified topics. We apply our framework on two large-scale open-source software\u00a0\u2026", "num_citations": "36\n", "authors": ["2186"]}
{"title": "Requirements engineering as a driver for innovations\n", "abstract": " Under today's fiercely competitive conditions, companies are seeking new means to develop innovative products that satisfy customer and user needs. In order to understand how requirements engineering (RE) can support innovations, we observed RE activities in six Finnish companies. Our observations indicate that RE can play a vital role in the development of innovative products. We identified three main opportunities for innovations: 1) discovering hidden customer and user needs, 2) inventing new product features that satisfy these needs, and 3) supporting feature development with an innovative technical solution. Based on our observations, as well as on existing innovation and business-management literature, we have concluded that RE research can gain significant results by investigating how to discover and model hidden customer and user needs. We believe that this would allow RE to much better\u00a0\u2026", "num_citations": "34\n", "authors": ["2186"]}
{"title": "Identifying improvement potential in evolving product line infrastructures: 3 case studies\n", "abstract": " Successful software products evolve continuously to meet the changing stakeholder requirements. For software product lines, an additional challenge is that variabilities, characteristics that vary among products, change as well over time. That challenge must be carefully tackled during the evolution of the product line infrastructure. This is a significant problem for many software development organizations, as practical guidelines on how to evolve core assets, and especially source code, are missing.", "num_citations": "30\n", "authors": ["2186"]}
{"title": "Advancing repeated research in requirements engineering: a theoretical replication of viewpoint merging\n", "abstract": " Compared to building a single requirements view, modeling stakeholder viewpoints and then merging them is shown to improve the understanding of the problem domain, but also very time consuming. How has the situation changed? This paper reports our replication of a case study, where we take theoretical replication's advantage to mitigate the original study design's threat and to embrace an important evolving factor, namely automated tool support for producing i* models. Our replicate case study verifies the rich domain understanding gained through viewpoint-based modeling, and updates the prior results by showing the time saving enabled by the tool. Our work offers operational insights into independent, theoretical replications. These insights, we believe, can advance requirements engineering research toward an empirically backed body of knowledge.", "num_citations": "28\n", "authors": ["2186"]}
{"title": "Consistency management of product line requirements\n", "abstract": " Contemporary software engineering utilizes product lines for reducing time to market and development cost of a single product variant, for improving quality of the products, and for creating better estimations of the development process. Most product line development processes rely on performing a domain analysis to find out commonalities among proposed family members and to estimate how they will vary. On the other hand, most requirements engineering methods focus on the specification of a single system. Despite active research efforts to close this, gap there is still no effective method that allows product specifications in arbitrary levels of detail for a hierarchical product family. In particular, it is not possible to combine different specification mechanisms to produce a complete family specification. The authors approach these problems by presenting a method that allows system specifications both in the\u00a0\u2026", "num_citations": "28\n", "authors": ["2186"]}
{"title": "Violatility analysis framework for product lines\n", "abstract": " Evolution of a software intensive system is unavoidable. In fact, evolution can be seen as a part of reuse process. During the evolution of the software asset, the major part of the system functionality is normally reused. So the key issue is to identify the volatile parts of the domain requirements. Additionally, there is promise that tailored tool support may help supporting evolution in software intensive systems. In this paper, we describe the volatility analysis method for product lines. This highly practical method has been used in multiple domains and is able to express and estimate common types of evolutional characteristics. The method is able to represent volatility in multiple levels and has capacity to tie the volatility estimation to one product line member specification. We also briefly describe current tool support for the method. The main contribution of this paper is a volatility analysis framework that can be used to\u00a0\u2026", "num_citations": "27\n", "authors": ["2186"]}
{"title": "Variability modeling for product line viewpoints integration\n", "abstract": " Modern software product line development uses viewpoints to capture the needs of various stakeholders without resorting to a single complex model. Comparing and integrating different viewpoints help to gain insights into the product line and to derive products. Recent research has proposed conflict resolution rules for handling variability in the integration process. However, one benefit viewpoints bring is to tolerate inconsistency until the rationales about variability are better understood. In this paper, we propose a method for modeling variability when product line viewpoints are consolidated. Our method takes advantage of a lattice ordering to support late binding of variability and stakeholder traceability. We apply our method to viewpoints derived from the mobile phone domain, and show how delayed commitment can support product line evolution and product derivation.", "num_citations": "23\n", "authors": ["2186"]}
{"title": "Layered architecture revisited\u2014Comparison of research and practice\n", "abstract": " Organizing a software architecture into layers has been one of the earliest architectural styles ever used. Even today layered structure is a very common architectural style used in various industrial systems. However, we have observed that the usage of layered architectural style varies greatly in different contexts. This paper aims to compare the notion of software architecture layers in research literature as well as in industrial practice. Firstly, we performed a systematic literature review of research articles on layered software architectures; we also reviewed selected books of software architecture. Secondly, to understand the practice, we investigated a number different recent architecture documents to cover the current usage of layered architectures. Our results indicate that there is very little actual research done on layered architectures. The current usage of layered structures seems to be more complex than\u00a0\u2026", "num_citations": "23\n", "authors": ["2186"]}
{"title": "Advancing viewpoint merging in requirements engineering: a theoretical replication and explanatory study\n", "abstract": " Compared to building a single requirements view, modeling stakeholder viewpoints and then merging them is shown to improve the understanding of the problem domain, but also very time-consuming. How has the situation changed? This paper reports our replication of a case study, where we take advantage of theoretical replication to mitigate one of the original study design\u2019s threats and to embrace an important evolving factor, namely automated tool support for producing  models. Our replicate study updates the prior results by showing the time saving enabled by the tool and verifies the rich domain understanding gained through viewpoint-based modeling. In an attempt to explain why viewpoints lead to richer domain understanding, we examine in a posteriori way the role that traceability plays in building individual and team-wide requirements models. Our post hoc analysis results suggest that\u00a0\u2026", "num_citations": "22\n", "authors": ["2186"]}
{"title": "Teaching software architecture design\n", "abstract": " Teaching software architecture design in an academic course so that it would equip the students with industrially useful capabilities is challenging. The real software architecture design problems are less clear than what the students are used to learning; the existing mass of assets of an industrial environment is hard to bring into a classroom; and so forth. We have designed a special course into an academic software engineering curriculum, taking into account the industrial needs in teaching the problem of understanding and solving demanding software architecture design problems. The course form is similar to an industrial architecture study assigned to a team of architects. In this paper, we discuss the industrial motivation for the course, the development of the course to its current form, and the lessons learned from running the course.", "num_citations": "22\n", "authors": ["2186"]}
{"title": "Transitioning from product line requirements to product line architecture\n", "abstract": " Software product line development is a compromise between customer requirements, existing product line architectural constraints and commercial needs. Managing variability is the key to a successful product line development. Product line models of requirements and features can be constructed that contain variation points. New products can be driven by making requirement selections from a product line model of requirements but as the product line evolves selections are constrained by the design of the existing product line architecture and the cost of making these changes. We present a set of rules that map the selection constraint values of requirements to the selection constraint values of features which in turn map on to the selection constraint values of architectural assets. We illustrate the application of the rules using a worked example.", "num_citations": "22\n", "authors": ["2186"]}
{"title": "Green software: Greening what and how much?\n", "abstract": " In applications in which embedded devices cooperate with ICT (information and communication technology) systems to make industrial processes more efficient, reduce waste or raw materials, and save the environment, the concept of green software becomes increasingly complex. To deal with this issue, the green-software community has introduced the concepts of greening ICT or greening through ICT.", "num_citations": "20\n", "authors": ["2186"]}
{"title": "Service grid variability realization\n", "abstract": " Variability management has long been recognized as a key part of software product family development. This article builds on this notion by presenting a set of Web service related technologies in the context of variability management. Additionally we adapt an existing process for planning variability for use with our technologies. We expect that Web service technology, already very successful in the domain of enterprise applications, would emerge as the integration technology of choice for constructing so called product family populations, i. e. populations of products constructed from multiple, independently developed product families", "num_citations": "19\n", "authors": ["2186"]}
{"title": "Requirements reuse at Danfoss\n", "abstract": " Requirements engineering is an essential activity in creating embedded real-time systems. Companies that produce a number of partially similar products can reduce development time and cost, improve quality and simplify software maintenance by applying reuse practices. Requirements reuse is an essential enabler to achieve effective software reuse. This study describes two different approaches for requirements reuse at Danfoss. The first approach reuses those requirements that are envisioned to be common between two consecutive projects and allows changing and parameterization of parts of the requirements. The second approach organizes all requirements into a common model and explicitly manages variability and different requirement variants in this common model. The results show that both approaches can result in significant savings in reduced effort by reusing common requirements. The first\u00a0\u2026", "num_citations": "17\n", "authors": ["2186"]}
{"title": "Coevolution of variability models and code: an industrial case study\n", "abstract": " In Software Engineering, reuse of artifacts is essential for high productivity. Different studies have shown that efficient reuse needs systematic planning and realization. Variability Management plays a key role in Software Product Line Engineering. We investigate code artifacts and variability models of a real-world Software Product Line over time in order to clarify whether code and variability model evolve congeneric. Furthermore, we suggest and test metrics that would allow detecting variability erosion in the code based on changes in the variability model.", "num_citations": "16\n", "authors": ["2186"]}
{"title": "Long-term product line sustainability with planned staged investments\n", "abstract": " Software product lines (SPL) are long-living systems that enable systematic reuse in application engineering. Product-specific changes over time can result in architecture drift, which requires updating assumptions made in the SPL's reuse infrastructure. A model called planned staged investments supports SPL rearchitecting in a sustainable way. The key idea is to use two different operational phases--investment and harvesting--to coordinate the competing, parallel needs of redesign and reuse.", "num_citations": "16\n", "authors": ["2186"]}
{"title": "Method and system for maintaining a secure tunnel in a packet-based communication system\n", "abstract": " The invention relates to a mechanism for maintaining a secure tunnel in a packet-based communication system. A secure tunnel is established between a security gateway and a mobile terminal being located at a first address in a first network, wherein the security gateway connects the first network to a second network and the mobile terminal has a second address that identifies the mobile terminal in the second network. In the gateway, the tunnel is identified based on the second address in packets destined for the mobile terminal from the second network. A change is detected in the first address of the mobile terminal and an update message including a new address value of the first address is sent to the security gateway. Based on the update message, the first address associated with the secure tunnel is updated in the security gateway.", "num_citations": "16\n", "authors": ["2186"]}
{"title": "Analyzing and re-structuring product line dependencies\n", "abstract": " Software product lines have proven to be successful for developing many critical software systems. Sharing thoroughly tested components can greatly improve the quality of individual products. The structuring of commonality and variability in the product line creates dependencies among features and components. Because of the dependencies, individual products may be bloated with features and components not required by the product specification. This increases complexity and resource consumption, affecting product quality negatively. We propose a method for analyzing product line dependencies for identifying unnecessary features. If these features are found, the method also addresses how to correct the situation. Our approach is demonstrated with a running example and our experiences in real industrial cases are discussed.", "num_citations": "16\n", "authors": ["2186"]}
{"title": "Performance variability in software product lines: proposing theories from a case study\n", "abstract": " In the software product line research, product variants typically differ by their functionality and quality attributes are not purposefully varied. The goal is to study purposeful performance variability in software product lines, in particular, the motivation to vary performance, and the strategy for realizing performance variability in the product line architecture. The research method was a theory-building case study that was augmented with a systematic literature review. The case was a mobile network base station product line with capacity variability. The data collection, analysis and theorizing were conducted in several stages: the initial case study results were augmented with accounts from the literature. We constructed three theoretical models to explain and characterize performance variability in software product lines: the models aim to be generalizable beyond the single case. The results describe capacity\u00a0\u2026", "num_citations": "14\n", "authors": ["2186"]}
{"title": "Complementarity in requirements tracing\n", "abstract": " Complementarity between activities reveals that doing any one of them increases the returns to doing the others. In other words, complementarity leads to the synergistic effect that the whole is greater than the sum of its parts. Identifying and exploiting complementarity can benefit many cybernetic activities, where human-machine interactions are inherent and dominant. One such activity is requirements tracing that helps stakeholders to track the status of their goals. Although various kinds of support for human analysts in requirements tracing have been proposed, little is known about the nature of complementarity when different tracing practices are involved. In this paper, we explore the role of complementarity by considering together the tagging-to-trace (T2T) and learning-to-trace (L2T) activities. We present a novel approach to examining which T2T and L2T practices enhance the qualities of each other. Our\u00a0\u2026", "num_citations": "13\n", "authors": ["2186"]}
{"title": "Mobile content as a service a blueprint for a vendor-neutral cloud of mobile devices\n", "abstract": " Mobile devices have become a commodity: we use several devices for various purposes. Although we carry only some of our devices with us, we still want to access content originating from any device. To overcome this issue, device users often upload content into a hosting service available in the cloud. However, cloud-based hosting can alienate the control and ownership of the content. A proposed architecture views development of a cloud computing service for mobile devices from a different angle. This approach maintains the content in the device where it was first created. The resulting design leads to a mobile device cloud that treats devices, together with the content and resources they host, as first-class cloud citizens. A proof-of-concept implementation is based on standard Web protocols. The underlying design can be configured for various contexts, such as individuals having several mobile devices, social\u00a0\u2026", "num_citations": "13\n", "authors": ["2186"]}
{"title": "Conflict-centric software architectural views: exposing trade-offs in quality requirements\n", "abstract": " Architectural documentation improves the overall understanding of a proposed software system's design, but its true value comes from facilitating the process of satisfying architecturally significant requirements (ASRs). Architectural views are a tool for documenting ASRs in the context of particular quality attributes. Views offer a convenient way to capture architectural decisions, rationales, and alternatives considered. However, when multiple stakeholders have conflicting quality requirements, traditional architectural views tend to scatter their resolutions throughout the documentation.", "num_citations": "13\n", "authors": ["2186"]}
{"title": "Requirements socio-technical graphs for managing practitioners\u2019 traceability questions\n", "abstract": " To understand requirements traceability in practice, we contribute, in this paper, an automated approach to identifying questions from requirements repositories and examining their answering status. Applying our approach to 345 open-source projects results in 20622 questions, among which 53% and 15% are classified as successfully and unsuccessfully answered, respectively. By constructing a novel requirements socio-technical graph, we explore the impact of stakeholder-artifact relationships on traceability. The number of people, surprisingly, has little influence compared to other graph-theoretic measures like the clustering coefficient. Based on the repository mining results, we formulate a set of novel hypotheses about traceability. A case study supports some hypotheses while offering new insights.", "num_citations": "12\n", "authors": ["2186"]}
{"title": "A novel approach to tracing safety requirements and state-based design models\n", "abstract": " Traceability plays an essential role in assuring that software and systems are safe to use. Automated requirements traceability faces the low precision challenge due to a large number of false positives being returned and mingled with the true links. To overcome this challenge, we present a mutation-driven method built on the novel idea of proactively creating many seemingly correct tracing targets (i.e., mutants of a state machine diagram), and then exploiting model checking within process mining to automatically verify whether the safety requirement's properties hold in the mutants. A mutant is killed if its model checking fails; otherwise, it is survived. We leverage the underlying killed-survived distinction, and develop a correlation analysis procedure to identify the traceability links. Experimental evaluation results on two automotive systems with 27 safety requirements show considerable precision improvements\u00a0\u2026", "num_citations": "11\n", "authors": ["2186"]}
{"title": "SysML modeling mistakes and their impacts on requirements\n", "abstract": " The Systems Modeling Language (SysML) represents a significant and increasing segment of industrial support for building critical systems. Because modeling is a human-centric activity, mistakes are unavoidable. Although there exist several software defect classifications, little is known about the mistakes pertaining to SysML modeling and the implications of those mistakes in model-driven requirements engineering. In this paper, we report a systematic mapping through which 42 SysML modeling mistakes are identified from 19 primary studies. With an emphasis on the evidence of industrial relevance, we further uncover that, despite some mistakes hurt requirements satisfaction, others help make the requirements more complete and the specifications more precise. Our work sheds light on understanding the scope of the SysML mistakes and checking requirements fulfillment in the face of the mistakes.", "num_citations": "10\n", "authors": ["2186"]}
{"title": "Pragmatic software reuse in bioinformatics: How can social network information help?\n", "abstract": " Little is known about the specific kinds of questions that bioinformatics programmers ask during pragmatic software reuse tasks and how well development online social networks help answer those questions. To fill the gap, we report an empirical study involving 20 biomedical software developers performing reuse tasks. A key contribution of our study is the discovery of 31 questions needed to be addressed, which we further classify into 5 categories along a software-architecture-centric and problem-domain-centric spectrum. Our study further provides evidence for the positive effect of social network information on pragmatic reuse tasks. Our work can lead to enhanced tool support so as to improve biomedical software reuse in practice.", "num_citations": "10\n", "authors": ["2186"]}
{"title": "Combining different product line models to balance needs of product differentiation and reuse\n", "abstract": " Software reuse is a key enabler for producing successful software intensive consumer products. Initially, just adopting reuse was enough to achieve competitive advantage; today an efficiently running product line is almost expected for any organization producing widely varying, software intensive consumer products. The major source for competitive advantage has shifted to product line management, and especially an organization\u2019s ability to optimize the alignment of its product line development approach with its competitive strategy. In this paper, we explore ways to match product line development for an organization pursuing differentiation strategy. In this context, the success of the product line is determined by the success of the resulting products, their ability to gain differentiation against the competition as well as within the product portfolio. If all products appear too similar to each other, market\u00a0\u2026", "num_citations": "10\n", "authors": ["2186"]}
{"title": "Framework for goal driven system design\n", "abstract": " Architecture has been identified as a main tool for high quality system development. It encapsulates the earliest design decisions of the system under development. However, these decisions heavily constrain the overall design space; therefore it is worth emphasising the reasons behind architectural choices. Methods for architecture have been suggested by various research. Unfortunately, they fail to achieve frameworks that can reason about the strong relationship between general system goals and the decisions that are made to fulfill those requirements. In this paper, we have three major contributions: (i) we introduce a general framework for the architectural design cycle. This framework describes an iterative process that assists in transforming system-wide goals into effective architectural description that satisfies the main requirements. (ii) We show how the prioritizations among goals and environmental\u00a0\u2026", "num_citations": "10\n", "authors": ["2186"]}
{"title": "Tools for design rationale documentation in the development of a product family\n", "abstract": " Building a product family is a complex task that requires careful management. To be successful in this development one has to be able to satisfy requirements for all the different members of the product family. In order to support this task we present a unified method integrating two different ways to describe software architectures. Our approach supports documenting design rationale in a complete way allowing the design to evolve gracefully. This is achieved by presenting all the design steps in a design decision tree and simultaneously mapping variation of system characteristics in a requirement space.", "num_citations": "10\n", "authors": ["2186"]}
{"title": "Using obstacle analysis to support SysML-based model testing for cyber physical systems\n", "abstract": " Cyber-physical systems play a crucial role in various applications, ranging from critical infrastructure control like power grid to the technological revolution of Industry 4.0 aimed to integrate and automate the manufacturing value chain. The Systems Modeling Language (SysML) represents a significant and increasing segment of industrial support for the development of cyber-physical systems partly due to the language's built-in mechanisms for modeling the requirements. In this paper, we leverage goal-oriented obstacle analysis to systematically identify the impediments to the fulfillment of requirements, and further examine several machine learning algorithms' capabilities of classifying these impediments into the components that constitute the cyber physical systems. We then investigate the extent to which a state-of-the-practice SysML tool simulates these obstacles, thereby assessing the risks of system failures at\u00a0\u2026", "num_citations": "9\n", "authors": ["2186"]}
{"title": "Performance variability in software product lines: A case study in the telecommunication domain\n", "abstract": " In the research on software product lines, product variants typically differ by their functionality, and quality attributes are more or less similar across products. To accumulate empirical evidence, this paper presents a descriptive case study of performance variability in a software product line of mobile network base stations. The goal is to study the motivation to vary performance, and the strategy for realizing performance variability in the product line architecture. The results highlight that the evolution of customer needs motivates performance variability; performance variability can be realized either with software or hardware variability strategy, with the latter often being prevailing; and the software strategy can be kept focused by downgrading performance.", "num_citations": "9\n", "authors": ["2186"]}
{"title": "Conflict detection and resolution for product line design in a collaborative decision making environment\n", "abstract": " Ensuring that the non-functional requirements (NFRs), of a system are satisfied is an essential task in software development. However, this task is complicated by the fact that many NFRs conflict with each other from multiple perspectives. It is essential to resolve conflicts collectively in a collaborative decision making process since stakeholders often disagree on how conflicts should be resolved. In this paper, we describe a method for dividing high-level NFR conflicts within a product line into more manageable sub-problems. Stakeholders make use of an argumentation based collaborative decision support system to determine which design alternatives provide the best trade-offs between NFRs. Finally, we present an empirical study in which the aforementioned system was used to resolve a single instance of an NFR conflict across 3 members of a product line. It shows that the system is effective in resolving\u00a0\u2026", "num_citations": "9\n", "authors": ["2186"]}
{"title": "Identifying key requirements for a new product line\n", "abstract": " Product lines should be based on the business reality in the selected market segments. Since the success of the product line is determined by the success of the resulting products, it is essential to guarantee that the key requirements of each identified market segment are satisfied. A critical issue for any company pursuing product line development is the competitiveness of their products against products from other manufacturers. The competitiveness can be realized by carefully managing the differentiating requirements during the initial analysis of the product line requirements. For industrial scale product lines, the number of initial requirements can be large, seriously hindering the analysis. In this paper, we first discuss the economic foundation of differentiating requirements. Then we show how to identify the key requirements for a product line and in which way we can reduce the set of requirements that needs to\u00a0\u2026", "num_citations": "9\n", "authors": ["2186"]}
{"title": "An integrated model for requirements structuring and architecture design\n", "abstract": " Requirements guide the development of a software intensive system, whereas the software architecture largely dictates the achievable properties of the system. This interplay of requirements and architectures has been largely accepted by the researchers and practitioners alike. Despite the common understanding of the general approach, the exact guidelines on how to develop systems in practice are missing. Features are often used to map customer requirements into product properties. However, our experience shows that features are often misused. Their real role is not understood or they are used for premature design and solution specification purposes. A number of different methods for either analysing and modelling requirements or for designing architectures exists, but the combination and customisation of these methods is left for the practitioners. The transition from problem definition to architecture is mainly dependent on the creativity and problem understanding of the chief architect. In this paper, we argue how 4 existing models, problem domain models, context diagrams, feature models, and architectural descriptions can be used together to make the transition process more transparent.", "num_citations": "9\n", "authors": ["2186"]}
{"title": "A framework for examining topical locality in object-oriented software\n", "abstract": " The software entities of an object-oriented system should be organized in such a way that \"spatial relatedness entails semantic relatedness\". We refer this as the tenet of \"topical locality\" and argue that it is fundamental for the code base to be navigable. In this paper, we propose a novel experimental framework to test this key tenet and use large-scale open-source projects to assess three relationships. In particular, we find that: (1) class name along with header comments conveys class body's topic; (2) a code line is indicative of its surroundings; and (3) a contiguous code fragment may serve as a snapshot of the entire class. Our work not only shows the foundations necessary for the success of many code navigation approaches, but also opens avenues for further tool enhancements.", "num_citations": "8\n", "authors": ["2186"]}
{"title": "Hypermedia-driven framework for scalable and adaptive application sharing\n", "abstract": " This chapter describes our experiences designing a solution for scalable and adaptive sharing of desktop and mobile applications, using a lightweight network-based system compliant with the REST architectural style. The system delivers consistency of the rendered user interfaces with the state of the application logic using a stateless networking substrate. We describe the architecture focusing on how to model the user interfaces as a set of web resources. Then, we present the prototype that implements the functionality as an extension of the Qt framework, which works with different Qt-based user interface toolkits. Finally, we present a multi-display and multi-user Texas Hold\u2019em application that shows how the system is used in practice.", "num_citations": "7\n", "authors": ["2186"]}
{"title": "Quality of service management for service grids\n", "abstract": " The present invention provides a system and method for predicting and managing end-to-end quality of service (QoS) and capacity in systems using a telecommunication service grid architecture. A Service Level Specification (SLS) is provided to specify a service offered by the service grid. A Service Level Agreement (SLA) is provided to specify capacity and quality of service (QoS) characteristics between a client and the service. The client then instantiates the SLA with the service running on the service grid, and a grid node is provided to host a service configuration with the specified capacity and quality of service (QoS).", "num_citations": "7\n", "authors": ["2186"]}
{"title": "Rajank\u00e4ynti\u00e4\n", "abstract": " On demarcation \u2014 University of Helsinki Skip to main navigation Skip to search Skip to main content University of Helsinki Logo English Svenska Suomi Home Persons Publications Projects Research Infrastructures Research Units Datasets Activities Prizes Press / Media Rajank\u00e4ynti\u00e4 Translated title of the contribution : On demarcation Juha Savolainen, Hannu Simola Research output: Chapter in Book/Report/Conference proceeding \u203a Chapter \u203a Scientific \u203a peer-review Overview Original language Finnish Title of host publication Arvot, hyveet ja tieto : El\u00e4m\u00e4nkatsomustiedon opetuksen 10-vuotisjuhlakirja Editors P. Elo, H. Simola Publisher Painatuskeskus Publication date 1995 ISBN (Print) 951-37-1741-0 Publication status Published - 1995 MoE publication type A3 Book chapter Cite this APA Author BIBTEX Harvard Standard RIS Vancouver Savolainen, J., & Simola, H. (1995). Rajank\u00e4ynti\u00e4. In P. Elo, & H. Simola (Eds\u2026", "num_citations": "7\n", "authors": ["2186"]}
{"title": "Developing platforms for multiple software product lines\n", "abstract": " Many approaches to software product line engineering have been founded on the development of a single product line platform. However as customer requirements change and new products are added to the product line, software producers recognize that the platform cannot be\" stretched\" indefinitely and a significant problem is striking a balance between development efficiency by increasing platform commonality and customer dissatisfaction from products with additional undesirable features and properties.", "num_citations": "6\n", "authors": ["2186"]}
{"title": "The role of ontology in software architecture\n", "abstract": " Having conceptual models of software is nothing new. Software design deals with making abstractions of a machine to be built. These descriptions show the problem domain (the environment) and the solution domain (the machine). Both of these domains have entities that manifest different concepts. The collection of these concepts and their connections create the language of the application.These domains have also reoccurring forms that exhibit some characteristics of the domain. These proven solutions, in the context, are called patterns. The patterns are typically reusable across different domains. They can be adapted to the conceptual model of the particular application. The most commonly known form of the patterns is design patterns (Gamma et. al. 1994). Now also patterns for the problem domain have been proposed to better understand, analyse and classify the problem (Jackson 2001).", "num_citations": "6\n", "authors": ["2186"]}
{"title": "Using similarity metrics for mining variability from software repositories\n", "abstract": " Much activity within software product line engineering has been concerned with explicitly representing and exploiting commonality and variability at the feature level for the purpose of a particular engineering task eg requirements specification, design, coding, verification, product derivation process, but not for comparing how similar products in the product line are with each other. In contrast, a case-based approach to software development is concerned with descriptions and models as a set of software cases stored in a repository for the purpose of searching at a product level, typically as a foundation for new product development. New products are derived by finding the most similar product descriptions in the repository using similarity metrics.", "num_citations": "5\n", "authors": ["2186"]}
{"title": "Extending variability management to the next level\n", "abstract": " Danfoss Power Electronics is a centre with both extensive power electronics know-how and many competencies within frequency converters and solar inverters. Development of embedded controllers built in Danfoss products raises similar challenges found in many other companies: creation of product series with an increasing number of variants, while at the same time decreasing time-to-market and keeping development costs low. Introduction of a Software Product Line approach into product development is a challenge that Danfoss Power Electronics decided to take in order to reduce software development efforts few years ago. The approach has been successful allowing for development of a number of highly engineered products. However, the software product line is in a constant evolution. It grows over time as new functionality is added in the form of extra software artefacts and further products are\u00a0\u2026", "num_citations": "5\n", "authors": ["2186"]}
{"title": "Cloudifying user-created content for existing applications in mobile devices\n", "abstract": " Currently users own and use many network-connected devices such as laptop, smart phone, or tablet. The user creates content using the default applications in these devices. One approach is to share and ubiquitously access the contents through a social media. Nevertheless, the contents residing in these devices should be available from anywhere, without any explicit user activity, even the contents residing in a remote location should also appear to be locally available in the operating device. With this approach we believe a user's content gets cloudified, while still remaining operable with the existing applications. In this paper we propose to cloudify a user's content in all her mobile devices. We present a middleware that allows a user to uniformly use the existing applications on local as well as remote content, and to also share the contents in a controlled way. The middleware hides all network activity to the\u00a0\u2026", "num_citations": "5\n", "authors": ["2186"]}
{"title": "From product line requirements to product line architecture: optimizing industrial product lines for new competitive advantage\n", "abstract": " Product lines are a highly successful form of software reuse. Initially, achieving reuse was enough for gaining competitive advantage. In today's competition more is needed. Those companies that can optimize their product line approach to their business strategy can increase their competitiveness against the competition. The main tools for optimization are evaluation the current state of the product line, identifying possible problems, and choosing a correct way to improve the product line approach to match the business strategy.", "num_citations": "5\n", "authors": ["2186"]}
{"title": "Scheduling product line features for effective roadmapping\n", "abstract": " Large industrial product lines may produce tens of thousands of variants each year. Each variant typically contains both reusable assets as well as product specific code created by different organizational units. To produce this vast number of variants the organizational resources must be used efficiently. For roadmapping this means an ability to schedule production of reusable assets so that all variants can be completed according to their requirements. When aiming for centralized variability management, roadmapping requires effective management of product line feature dependences and priorities. In this paper, we first introduce the problems haunting feature roadmapping in industrial product lines. Then we investigate how these problems can be solved using a novel approach for organizing product lines based on our practical experiences. Finally, we discuss our experiences and compare our approach with\u00a0\u2026", "num_citations": "5\n", "authors": ["2186"]}
{"title": "Poster: Answering the Requirements Traceability Questions\n", "abstract": " To understand requirements traceability in practice, we present a preliminary study of identifying questions from requirements repositories and examining their answering status. Investigating four open-source projects results in 733 requirements questions, among which 43% were answered successfully, 35% were answered unsuccessfully, and 22% were not answered at all. We evaluate the accuracy of using a state-of-the-art natural language processing tool to identify the requirements questions and illuminate automated ways to classify their answering status.", "num_citations": "4\n", "authors": ["2186"]}
{"title": "What Kind of Ethical Education will Serve our Future Needs?\n", "abstract": " Introduction: People tend to ask us: What kind of knowledge and skills will our young generation need in the future? The obvious answer is: Skills of learning and thinking! Schools must be learning centres where we all study the skills of learning and are seekers of knowledge. But what does this mean if we think of ethics and, in particular, of ethical instruction in formal education? What sorts of skills in ethics does a good life call for in our modern, or perhaps, in our post modern condition?", "num_citations": "4\n", "authors": ["2186"]}
{"title": "Eight practical considerations in applying feature modeling for product lines\n", "abstract": " Feature modeling has enjoyed success as a widely used variability modeling method in companies utilizing product lines. A number of different feature modeling methods have been proposed with expanded notational concepts and ability to model various dependencies among features. Despite popular usage and relatively simple concepts, different feature modeling methods tend not to explicate their purposes and assumptions and, in particular, how exactly the model is intended to be used. Consequently, many practitioners have a hard time evaluating whether a particular method is good for their purposes. In this paper, we intend to discuss the practical considerations when applying feature models. On the one hand, discussion of these considerations in research papers would clarify the intent of a proposed method. On the other hand, the considerations could help practitioners in clarifying the guiding\u00a0\u2026", "num_citations": "3\n", "authors": ["2186"]}
{"title": "Aligning business and technical strategies for software product lines\n", "abstract": " A successful software product line strategy has business goals, a business strategy, a target market and a technical strategy that is aligned with the business goals and the target market. A common challenge in a number of organizations is for business and engineering units to understand what business and technical strategy alignment actually means in practice and to maintain that alignment as business goals and target markets evolve. If they are misaligned, then at best significant development inefficiencies occur, and at worst there is loss of market share. This paper explains different business and technical strategies, describes commonly used engineering techniques to manage commonality and variability and their deployment under different strategies.", "num_citations": "3\n", "authors": ["2186"]}
{"title": "Improving product line development with subject-oriented programming\n", "abstract": " It has been demonstrated the product lines have introduced large improvements to quality, time to market and overall productivity. However, creating a successful product line is a highly complex and difficult task. There are still many technological barriers to overcome in effective product line development. The current industrial practice employs patterns, idioms and components to handle complexity, but shortcomings in current object-oriented languages limit the effectiveness of product line development. Subject-oriented programming and more recently multi-dimensional separation of concerns promise improved support for product line development. Ideally, a product line can be composed of slices of an overall system that provide low coupling among components, good separation of unrelated concerns and improved understandability of the system structure. In this paper we describe our experiences on applying subject-oriented programming to product line development.", "num_citations": "3\n", "authors": ["2186"]}
{"title": "Filosofian ja el\u00e4m\u00e4nkatsomustiedon rajank\u00e4ynti\u00e4\n", "abstract": " Elo, P., Savolainen, J., & Simola, H.(1995). Filosofian ja el\u00e4m\u00e4nkatsomustiedon rajank\u00e4ynti\u00e4. In S. Tella (Ed.), Juuret ja arvot: Etnisyys ja eettisyys-aineen opettaminen monikulttuurisessa oppimisymp\u00e4rist\u00f6ss\u00e4 (Helsingin yliopiston opettajankoulutuslaitoksen tutkimuksia; No. 150). Helsingin yliopisto, opettajankoulutuslaitos.", "num_citations": "3\n", "authors": ["2186"]}
{"title": "Product Line Strategies and Feature Reuse\n", "abstract": " Successful organizations working with software product lines evolve by ensuring they align their forecasts of market trends with their product line strategy. Without careful management of that alignment over time, the execution of a product line strategy becomes far less effective. This tutorial describes how business strategy choices affect product line strategy, which in turn impacts upon engineering decisions to make, buy or reuse features. It will present a feature development decision framework that guides the choice of make/buy/reuse, depending on the product line strategy and whether the feature is to be in some products or all. A discussion of the implementation of the reuse choice will follow by exploring two different approaches. The first approach is product configuration based on feature selection at feature variation points popular in modern software product line engineering. The second approach is drawn\u00a0\u2026", "num_citations": "2\n", "authors": ["2186"]}
{"title": "Choosing reusable software strategies\n", "abstract": " For many organisations, choosing a reusable software strategy such as whether to be developing products, platforms or components, or some combination of these is not straightforward. The appropriateness of the choice can also change as an organisation's internal and external business environment context changes. In this paper we provide a management tool to help guide that decision making. We set out four broad types of business strategy and map these against four different types of reusable software development strategy. The four types of business strategy correspond to different business environments which are in turn characterised by different combinations of market predictability (low to high) and an organisation's ability to influence it (low to high). To demonstrate the framework as an analytical tool we have mapped examples of different organisations reusable software strategies and explained some\u00a0\u2026", "num_citations": "2\n", "authors": ["2186"]}
{"title": "A make/buy/reuse feature development framework for product line evolution\n", "abstract": " In software product lines, feature development options can be categorized as make or buy or, a variation on buy, called reuse. In transaction economic cost theory a group of features is an asset and there is an increasing correlation between an asset's relative importance to a supplier and the decision to make rather than buy. In this paper we argue that the make or buy decision should also consider an asset's relative importance to the set of customers who buy the products containing the asset and we present a decision-making feature development framework that factors in feature relative importance to supplier and customer. To evaluate our framework we compared its recommendations with actual decisions made on three different industrial product lines. Our results showed broad consistency between framework guidance and actual practice, but revealed some instances not adequately explained by the\u00a0\u2026", "num_citations": "2\n", "authors": ["2186"]}
{"title": "Past, present and future of product line engineering in industry: reflecting on 15 years of variability management in real projects\n", "abstract": " Product line engineering has evolved from being a practice invented by individual companies out of the urgent need to find ways to manage a set of products, into a science commonly practiced by a large number of companies. In this talk, we look back how companies used to manage variability and how that has evolved over time. We also explore the reasons why variability is needed and discuss if the needs to manage variability will change in the future. We investigate the difference of managing variability in functional and quality requirements and explain the commercial rationale behind the choices of variability management. In summary, we try to answer the following questions concerning the past, present, and future of product line engineering: What has worked and what has not? Why deploying research innovations often fail in practice? What are the characteristics of the real product lines that are often\u00a0\u2026", "num_citations": "2\n", "authors": ["2186"]}
{"title": "Challenges in balancing the amount of solution information in requirement specifications for embedded products\n", "abstract": " Requirements are traditionally viewed as being free of the details of an envisioned solution and specified using purely problem domain entities. Preventing premature design in the requirements permits the available design space not to be restricted too early which might inhibit innovative designs. In practice, on many industrial projects, separating the problem and solution domain entities can be difficult, and arguably there are benefits for not doing so. Many customers feel more confident describing their requirements, often as the difference between the existing products and their needs, some customers have such intimate knowledge of their products that their requirements tend to be very specific, and if the customer knows the exact solution needed that naturally will reduce the cost of the requirements elicitation as well as design activities. Practitioners are challenged to understand when having solution\u00a0\u2026", "num_citations": "2\n", "authors": ["2186"]}
{"title": "Product Line Management Techniques with Requirement and Feature Models\n", "abstract": " Product Line Management Techniques with Requirement and Feature Models Product Line Management Techniques with Requirement and Feature Models | Login Aaltodoc \u2192 1d V\u00e4it\u00f6skirjat / Doctoral dissertations \u2192 [diss] Perustieteiden korkeakoulu / SCI \u2192 View Item Product Line Management Techniques with Requirement and Feature Models Title: Product Line Management Techniques with Requirement and Feature Models Author(s): Savolainen, Juha Erik Date: 2011 Language: en Pages: 89 + app. 74 Department: Tietotekniikan laitos Department of Computer Science and Engineering ISBN: 978-952-60-4355-5 (electronic) 978-952-60-4354-8 (printed) Series: Aalto University publication series DOCTORAL DISSERTATIONS, 114/2011 ISSN: 1799-4942 (electronic) 1799-4934 (printed) 1799-4934 (ISSN-L) Bibid: 554441 | Availability info (Aalto-Finna) Supervising professor(s): M\u00e4nnist\u00f6, Tomi, Prof., Aalto \u2026", "num_citations": "2\n", "authors": ["2186"]}
{"title": "Experiences in making architectural decisions during the development of a new base station platform\n", "abstract": " Creating architecture for a complex telecommunication system is a difficult task and requires expertise of many different stakeholders. The software architecture design process relies on understanding the architecturally significant requirements (ASRs) for the system under design. This paper describes experiences in creating a new base station product line. A goal was to create a process to facilitate fulfillment of ASRs during the development of the product line. The approach proved to be feasible for developing large-scale systems in the telecommunications infrastructure domain. This paper describes the approach taken, experiences gathered during the development process and promotes the idea of defining concrete ASRs for each project and refining them through architecture for all relevant subsystems.", "num_citations": "2\n", "authors": ["2186"]}
{"title": "Matching service requirements to empirical capability models in service-oriented architectures\n", "abstract": " The importance of reliably achieving quality of service (QoS) requirements in service-oriented architectures is constantly increasing. This trend has changed the characteristics that are needed from the service architectures, hosting environments and to the methods to create new services. To enable hosting services with strict QoS requirements, abilities to model service requirements, identify the capabilities of the hosting environment, and effectively match those for the wanted service configuration are needed. Many current methods build theoretical models of service requirements and capabilities of the hosting infrastructure. Based on our experience, using these in commercial systems is hard. In this paper, we highlight the key requirements for commercial service oriented architectures with strict latency requirements. We also propose using empirical models of the service infrastructure to provide accurate and\u00a0\u2026", "num_citations": "2\n", "authors": ["2186"]}
{"title": "Reliability of convolutional neural networks: Failure metrics with metamorphic test cases\n", "abstract": " The data-driven software development paradigm and the uncertain nature of deep neural networks bring new challenges for reliability engineering. In autonomous driving and other safety-critical domains, high reliability must be assured. However, failure metrics measuring reliability post deployment can be costly. To explore more efficient ways of assessing reliability, we leverage metamorphic testing where a follow-up test case (TC) can be automatically generated to account for unseen conditions once a source TC is given. We further determine source TCs by investigating various TC prioritization strategies based on risk, fault, similarity, and coverage. Our experiment on a convolutional neural network's image classifications shows that TC priorities determined by code coverage are prominent in exposing reliability issues, combined with the metamorphic TCs generated by semantic input data changes. The results\u00a0\u2026", "num_citations": "1\n", "authors": ["2186"]}
{"title": "A process mining approach to improving defect detection of SysML models\n", "abstract": " The development of complex and dependable systems like autonomous vehicles relies increasingly on the use of systems modeling language (SysML). In fact, SysML has become a de facto standard for systems engineering. With model-driven engineering, a SysML model serves as a reference for the early defect detection of the system under design: the earlier the errors are detected, the less is the cost of handling the errors. Mutation testing is a fault-based technique that has recently seen its applications to SysML behavioral models (eg, state machine diagrams). Specifically, a system\u2019s state-transition design can be fed to a model checker where mutants are automatically generated and then killed against the desired design specifications (eg, safety properties). In this paper, we present a novel approach based on process mining to improve the effectiveness and efficiency of the SysML mutation testing based on model checking. In our approach, the mutation operators are applied directly to the state machine diagram. These mutants are then fed as traces into a process mining tool and checked according to the event logs. Our initial results indicate that the process mining approach kills more mutants faster than the model checking method.", "num_citations": "1\n", "authors": ["2186"]}
{"title": "Architecture management and evaluation in mature products: experiences from a lightweight approach\n", "abstract": " Software architecture evaluation is an essential part of architecture management and a means to uncover problems and increase confidence in the capability of the software architecture in fulfilling the most critical requirements. Architecture evaluation is typically carried out at an early stage of a software development. However, development efforts are often related to further development of existing software. We present a case study of the software architecture board (SWAB) initiative carried out at in a company called NSN. SWAB employed a lightweight architecture evaluation and management approach to exchange architectural experiences with related products and assess ability to fulfill future requirements. SWAB operated for two years but ultimately came to an end because the desired objectives were not achieved. The case study provides lessons for the evaluation of architecture in mature products and for\u00a0\u2026", "num_citations": "1\n", "authors": ["2186"]}
{"title": "Aligning product line business and technical strategies: mapping product line requirements to a product line architecture\n", "abstract": " In the consumer product market space a commercial challenge is to offer personalization of products and services for individual customers at a mass production price. One solution is the development of a software product line platform comprising a set of products that have similar functions, behaviours and properties but with sufficient variability to capture customer differences. However as a product line evolves, customer requirements change and new products are added to the product line, software producers realize the platform cannot be\" stretched\" indefinitely. The central problem is striking a balance between development efficiency through increasing platform commonality and customer dissatisfaction with products that have unwanted features/properties. The introduction of multiple product lines may be a better alternative. In practice, achieving the balance is a compromise between satisfying customers'\u00a0\u2026", "num_citations": "1\n", "authors": ["2186"]}
{"title": "Evaluating Simple Dependency Diagrams in Industry\n", "abstract": " The research and practice on designing and analyzing software architectures has evolved considerably during the past decade. In particular, more precise architecture modeling methods have reached industrial practice. Despite this, simple dependency diagrams are still widely used ease communication with non-technical stakeholders, to reduce need for domain knowledge, and to make initial design before detailed architecture phase. Based on our experience, seasoned architects can easily find potential architectural problems in these descriptions. In this paper, we describe a representative set of potentially problematic structures in dependency diagrams to raise relevant questions on the decisions made to create the software architecture.", "num_citations": "1\n", "authors": ["2186"]}
{"title": "Just Learning\n", "abstract": " Pekka Elo & Juha Savolainen, Just Learning - PhilPapers Sign in | Create an account PhilPapers PhilPeople PhilArchive PhilEvents PhilJobs PhilPapers home Syntax Advanced Search Syntax Advanced Search Syntax Advanced Search Just Learning Pekka Elo & Juha Savolainen Acta Philosophica Fennica 65:149-188 (2000) Abstract This article has no associated abstract. (fix it) Keywords No keywords specified (fix it) Categories Conscious and Unconscious Memory in Philosophy of Cognitive Science Unconscious and Conscious Processes in Philosophy of Cognitive Science (categorize this paper) Options Edit this record Mark as duplicate Export citation Find it on Scholar Request removal from index Revision history Download options PhilArchive copy Upload a copy of this paper Check publisher's policy Papers currently archived: 59,243 External links This entry has no external links. Add one. Setup an \u2026", "num_citations": "1\n", "authors": ["2186"]}
{"title": "Towards multi dimensional methods\n", "abstract": " Recently, new paradigms have emerged to improved standard object-oriented methods. However, most of these lack guidelines for developers on how to design complex real-life systems using these techniques. In this position paper, we investigate proposed methods and reason why they still fail to meet key requirements of the standard design methodology. We also present a few key requirements for such methodology and show potential pitfalls along the way.", "num_citations": "1\n", "authors": ["2186"]}