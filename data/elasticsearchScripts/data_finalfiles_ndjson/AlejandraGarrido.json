{"title": "Program refactoring in the presence of preprocessor directives\n", "abstract": " The C preprocessor is heavily used in C programs because it provides useful and even necessary additions to the C language. Since preprocessor directives are not part of C, they are removed before parsing and program analysis take place, during the phase called preprocessing. In the context of refactoring, it is inappropriate to remove preprocessor directives: if changes are applied on the preprocessed version of a program, it may not be possible to recover the un-preprocessed version. This means that after refactoring, all the source code would be contained in a single unit, targeted to a single configuration and without preprocessor macros.", "num_citations": "87\n", "authors": ["796"]}
{"title": "Analyzing multiple configurations of a C program\n", "abstract": " Preprocessor conditionals are heavily used in C programs since they allow the source code to be configured for different platforms or capabilities. However, preprocessor conditionals, as well as other preprocessor directives, are not part of the C language. They need to be evaluated and removed, and so a single configuration selected, before parsing can take place. Most analysis and program understanding tools run on this preprocessed version of the code so their results are based on a single configuration. This paper describes the approach of CRefactory, a refactoring tool for C programs. A refactoring tool cannot consider only a single configuration: changing the code for one configuration may break the rest of the code. CRefactory analyses the program for all possible configurations simultaneously. CRefactory also preserves preprocessor directives and integrates them in the internal representations. The\u00a0\u2026", "num_citations": "81\n", "authors": ["796"]}
{"title": "Refactoring C with conditional compilation\n", "abstract": " Refactoring, an important technique for increasing flexibility of the source code, can be applied with much ease and efficiency by using automated tools. There is currently a lack of refactoring tools for C with full support for preprocessor directives because directives complicate refactorings in many ways. This paper describes refactoring of C programs in the presence of conditional compilation directives and how we propose to support them in a refactoring tool.", "num_citations": "81\n", "authors": ["796"]}
{"title": "Challenges of refactoring C programs\n", "abstract": " Refactoring has become a well-known technique for transforming code in a way that preserves behavior. Refactorings may be applied manually, although manual code manipulation is error prone and cumbersome, so maintainers need tools to make automatic refactorings. There is currently extensive literature on refactoring object-oriented programs and some very good tools for refactoring Smalltalk and Java code. Although there is more code written in C or C++ than in any other language, refactoring tools for C with full support for preprocessor directives have not yet appeared. The C programming language, especially the preprocessor directives that coexist with it, complicates refactorings in different ways as directives are not legal C code and may violate otherwise correct refactorings. Refactoring C poses two major research challenges. On the one hand, as preprocessor directives may violate correctness, new\u00a0\u2026", "num_citations": "80\n", "authors": ["796"]}
{"title": "Formal specification and verification of Java refactorings\n", "abstract": " There is an extensive literature about refactorings of object-oriented programs, and many refactoring tools for the Java programming language. However, except for a few studies, in practice it is difficult to find precise formal specifications of the preconditions and mechanisms of automated refactorings. Moreover, there is usually no formal proof that a refactoring is correct, i.e., that it preserves the behavior of the program. We present an equational semantics based approach to Java refactoring. Specifically, we use an executable Java formal semantics in the Maude language to: (i) formally specify three useful Java refactorings; and (ii) give detailed proofs of correctness for two of those refactorings, showing that they are behavior-preserving transformations. Besides the obvious benefits of providing rigorous specifications for refactoring tool builders and rigorous correctness guarantees, our approach has the additional\u00a0\u2026", "num_citations": "64\n", "authors": ["796"]}
{"title": "Hand-made and Computed Links, Precomputed and Dynamic Links.\n", "abstract": " There are alternative approaches to link creation in hypermedia applications. The first distinction differs in the direct or indirect involvement of a human author in the process. The second distinction among computed links refers to when the computation is done, ie whether links are dynamically computed or precomputed. The aim is to investigate the relative merits of these different approaches. The approaches are exemplified with three projects familiar to the authors. While most of the paper is concerned with raising the issues involved, it also outlines two methodologies to help hypermedia designers choose the best approach or combination of them to include in their developments, depending on the type of application, data characteristics and user and operational requirements.", "num_citations": "35\n", "authors": ["796"]}
{"title": "Software refactoring applied to C programming language\n", "abstract": " SOFTWARE REFACTORING APPLIED TO C PROGRAMMING LANGUAGE BY ALEJANDRA GARRIDO Licenciada, Universidad Nacional de La Plata, 1997 T Page 1 SOFTWARE REFACTORING APPLIED TO C PROGRAMMING LANGUAGE BY ALEJANDRA GARRIDO Licenciada, Universidad Nacional de La Plata, 1997 THESIS Submitted in partial fulfillment of the requirements for the degree of Master of Science in Computer Science in the Graduate College of the University of Illinois at Urbana-Champaign, 2000 Urbana, Illinois Page 2 iii To Federico, my beloved husband and unconditional partner. Page 3 iv \u00a1 \u00a2 \u00a3 \u00a4 \u00a5 \u00a6 \u00a7 \u00a9 \u00a7 \u00a3 I would like to sincerely thank my advisor, Dr. Ralph Johnson, for his constant guidance and support. He has reviewed this thesis with significant patience and care. I thank Don Roberts for his valuable help with T-gen and how to approach refactoring. I thank my friends, both in Argentina \u2026", "num_citations": "24\n", "authors": ["796"]}
{"title": "Embracing the C preprocessor during refactoring\n", "abstract": " C preprocessor directives are heavily used in C programs because they provide useful and even necessary additions to the C language. However, they are usually executed and discarded before any analysis is applied on C programs. In refactoring, preprocessor directives must be preserved through the whole process of parsing, analysis and transformation to retain editable yet correct source code. We propose a new preprocessing approach and special program representations that allow a program to be analyzed and transformed without losing its preprocessor directives, but treating them as first\u2010class program entities. These representations are essential for a correct refactoring tool. We also describe the challenges that preprocessor directives bring to refactoring and how the program representations that we propose solve those challenges. Finally, we give details of two refactorings and present some case\u00a0\u2026", "num_citations": "18\n", "authors": ["796"]}
{"title": "Bodyguard\n", "abstract": " Bodyguard | Design patterns in communications software ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksDesign patterns in communications softwareBodyguard chapter Bodyguard Share on Authors: Fernando Das Neves Virginia Tech Virginia Tech View Profile , Alejandra Garrido View Profile Authors Info & Affiliations Publication: Design patterns in communications softwareAugust 2001 Pages 209\u2013224 0citation 0 Downloads Metrics Total Citations0 Total Downloads0 Last 12 Months0 Last 6 weeks0 Get Citation Alerts New Citation Alert added! This alert has been successfully added and will be sent to: You will be notified \u2026", "num_citations": "14\n", "authors": ["796"]}
{"title": "Algebraic semantics of the C preprocessor and correctness of its refactorings\n", "abstract": " Refactoring has become a popular technique for the development and maintenance of object-oriented systems. We have been working on the refactoring of C programs, including the C preprocessor (Cpp), and we have built CRefactory, a refactoring tool for C programs. The independence of Cpp from the underlying programming language complicates the analysis and refactoring of programs that use Cpp. Nevertheless, that independence is helpful when implementing refactorings on Cpp directives.  While refactorings are defined as \"behavior preserving transformations\", there is usually no formal proof of their correctness. By using rewriting logic and its Maude implementation, we have formally specified the semantics of Cpp and also of some refactorings on Cpp directives. The specifications are then used to formally prove refactoring correctness. This paper describes the formal specifications of Cpp and of three of its refactorings, and presents the proofs of their correctness.", "num_citations": "13\n", "authors": ["796"]}
{"title": "Estudio HAURTXO. Valoraci\u00f3n de creatininemia, crestininuria y aclaramiento de creatinina en ni\u00f1os normales.\n", "abstract": " Hemos estudiado 521 ni\u00f1os, de 3 a 14 a\u00f1os, de los cuales 361 recogieron orina de 24 horas. Obtuvimos los valores de referencia de la creatininemia, de la creatininuria y del aclaramiento de creatinina. Se comprob\u00f3 que la creatininemia variaba significativamente a lo largo del crecimiento, sin que hubiese diferencias entre sexos. La creatininuria se debe expresar en mg/kg/24 h, dado que es la forma de expresi\u00f3n que anula las diferencias entre sexos y disminuye muy importantemente las variaciones con la edad. El aclaramiento de creatinina tambi\u00e9n var\u00eda con la edad y no con el sexo. Sus valores de referencia se distribuyeron en dos grupos de edad diferentes entre s\u00ed.", "num_citations": "13\n", "authors": ["796"]}
{"title": "Estudio HAURTXO. Valores de referencia del \u00e1cido \u00farico en sangre y orina en la infancia.\n", "abstract": " Hemos establecido los valores de referencia de la uricemia, uricosuria en orina de 24 horas, aclaramiento y excreci\u00f3n faccionada de \u00e1cido \u00farico, as\u00ed como del \u00edndice \u00e1cido \u00farico/creatinina en micci\u00f3n aislada en 361 ni\u00f1os de 3 a 14 a\u00f1os en r\u00e9gimen de dieta libre. Los valores de la uricemia y de la uricosuria aumentan con la edad. Sin embargo, la uricosuria expresada en relaci\u00f3n al peso ya la superficie corporal, el aclaramiento de \u00e1cido \u00farico y el \u00edndice de \u00e1cido \u00farico/creatinina en micci\u00f3n aislada disminuyen a medida que aumenta la edad. Los niveles de uricemia que encontramos son ligeramente in-feriores a los publicados en nuestro pa\u00eds, siendo similares los de la uricosuria. Los datos encontrados para el aclaramiento del \u00e1cido \u00farico son sensiblemente m\u00e1s elevados que los publicados por Stapleton. La dieta de los ni\u00f1os y el m\u00e9todo anal\u00edtico utilizado para la determinaci\u00f3n de \u00e1cido \u00farico son los factores\u00a0\u2026", "num_citations": "12\n", "authors": ["796"]}
{"title": "A catalog and classification of fortran refactorings\n", "abstract": " This paper presents a catalog of code refactorings that are intended to improve different quality attributes of Fortran programs. We classify the refactorings according to their purpose, that is, the internal or external quality attribute (s) that each refactoring targets to improve. We sketch the implementation of one refactoring in Photran, a refactoring tool for Fortran.", "num_citations": "11\n", "authors": ["796"]}
{"title": "Gestalt framework in the design of interfaces for mobile devices: Theoretical approach.\n", "abstract": " The present work supports a conceptual Framework that includes a constructive - evaluative model with visual references, metrics and usability tests, based on user experience parameters applied through Gestalt principles. We believe this framework may reduce errors in the prototype tests, during the development of Interfaces for mobile applications.", "num_citations": "5\n", "authors": ["796"]}
{"title": "Connection between safe refactorings and acceptance test driven development\n", "abstract": " With the advent of improved strategies over Test Driven Development (TDD), like Acceptance TDD (ATDD), several benefits were recognized over the simple use of TDD with unit testing. In this article we propose an additional benefit of ATDD: the use of acceptance tests as ultimate invariants of the behavior that refactorings must preserve. Even when previous works have referred to this advantage of ATDD, the problem that remained unsolved was the lack of a complete and practical method that includes the different layers created by different types of tests. In this article we describe such a method, which uses multiple layers of tests and connects the layers through coverage analysis, in order to allow safe refactoring even when the refactorings break some tests. We also present Multilayer Coverage, an automatic tool for coverage analysis at different layers of tests and its intersection, to assist with the proposed\u00a0\u2026", "num_citations": "5\n", "authors": ["796"]}
{"title": "A Catalog and two possible classifications of Fortran refactorings\n", "abstract": " This paper presents a catalog of code refactorings that are intended to improve the different quality attributes of Fortran programs.  We classify the refactorings according to their purpose, that is, the internal or external quality attribute(s) that each refactoring targets to improve.  We sketch the implementation of one refactoring in Photran, a refactoring tool for Fortran.", "num_citations": "5\n", "authors": ["796"]}
{"title": "Handling preprocessor macros in refactoring\n", "abstract": " C preprocessor macros are heavily used in C programs but they cause many problems for analysis and refactoring tools.This paper describes parsing and program representation techniques that we have developed for CRefactory, a refactoring tool for C, to support macros. We believe these techniques can also be used by analysis tools for C or C++. The paper also discusses the problems that macros bring to behavior-preserving transformations, and the kind of analysis needed to account for those problems.", "num_citations": "4\n", "authors": ["796"]}
{"title": "BodyGuard\n", "abstract": " Bodyguard | Pattern languages of program design 3 ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksPattern languages of program design 3Bodyguard chapter Bodyguard Share on Authors: Fernando Adrian Das Neves profile image Fernando Das Neves View Profile , Alejandra Garrido profile image Alejandra Garrido View Profile Authors Info & Affiliations Publication: Pattern languages of program design 3October 1997 Pages 231\u2013244 Get Citation Alerts New Citation Alert added! This alert has been successfully added and will be \u2026", "num_citations": "4\n", "authors": ["796"]}
{"title": "Hacia un enfoque metodol\u00f3gico de cobertura m\u00faltiple para refactorizaciones m\u00e1s seguras\n", "abstract": " Habitualmente se considera que la preservaci\u00f3n del comportamiento del software despu\u00e9s del refactoring puede ser verificada con pruebas unitarias automatizadas. Sin embargo, hay situaciones en las cuales estas pruebas dejan de funcionar precisamente por los cambios realizados en el c\u00f3digo. Para agregar seguridad al refactoring es necesario entonces utilizar pruebas a distintos niveles que aumenten la redundancia en la cobertura, aunque esto agrega complejidad adicional al testing y al refactoring. Para mitigar este problema hemos desarrollado un enfoque metodol\u00f3gico basado en distintos niveles de prueba con cobertura redundante. Asimismo este art\u00edculo presenta una herramienta de chequeo de cobertura simult\u00e1nea de varios tipos de pruebas, y un caso de estudio donde se usa la misma. M\u00e1s all\u00e1 de las ventajas conocidas de contar condistintos niveles de pruebas, una adicional es la colaboraci\u00f3n que prestan en situaciones de refactoring, por lo que se esperar\u00eda una adopci\u00f3n mayor en la industria.", "num_citations": "3\n", "authors": ["796"]}
{"title": "Relationship between Gestalt and usability heuristics in mobile device interfaces\n", "abstract": " While usability heuristics are universal concepts, visual references for using them in an application are limited, contradictory, and sometimes confusing, especially for novice developers. The present work has linked Nielsen\u2019s heuristics with Gestalt principles, which are the foundation of human perception, developed from psychology, and which have been used in art, design, and architecture, to understand how different visual stimulus can be interpreted by the human being. The heuristics, Match between system and the real world, Recognition rather than recall and Aesthetic and minimalistic design, have been linked with the Gestalt principles of Similarity, Proximity, Common direction, and Simplicity. This link is possible because Gestalt principles have certain conceptual similarities with usability heuristics, in addition to the fact that these fundamentals were identified in some mobile interfaces and are related to\u00a0\u2026", "num_citations": "2\n", "authors": ["796"]}
{"title": "Refactorizaci\u00f3n en c\u00f3digo Fortran heredado\n", "abstract": " Este art\u00edculo exhibe los obst\u00e1culos hallados por los programadores en las tareas de mantenimiento de software heredado escrito en Fortran. Por un lado se se~ nalan las dificultades que se presentan en los procesos de comprensi\u00f3n, adaptaci\u00f3n y mejora de este tipo de software.Resumen: Este art\u00edculo exhibe los obst\u00e1culos hallados por los programadores en las tareas de mantenimiento de software heredado escrito en Fortran. Por un lado se se~ nalan las dificultades que se presentan en los procesos de comprensi\u00f3n, adaptaci\u00f3n y mejora de este tipo de software. Por otro lado se encuadra una soluci\u00f3n a este problema proponiendo la refactorizaci\u00f3n como t\u00e9cnica para ser aplicada en dichos procesos, intentando adem\u00e1s, desmitificar los prejuicios que Fortran ha adquirido dentro del \u00e1mbito de la producci\u00f3n de software. Asimismo se describe detalladamente la implementaci\u00f3n de algunas refactorizaciones en Photran, una nueva herramienta gr\u00e1fica automatizada de refactorizaci\u00f3n para Fortran.", "num_citations": "2\n", "authors": ["796"]}
{"title": "Adding hypermedia functionality to object-oriented applications\n", "abstract": " Sauf mention contraire ci-dessus, le contenu de cette notice bibliographique peut \u00eatre utilis\u00e9 dans le cadre d\u2019une licence CC BY 4.0 Inist-CNRS/Unless otherwise stated above, the content of this bibliographic record may be used under a CC BY 4.0 licence by Inist-CNRS/A menos que se haya se\u00f1alado antes, el contenido de este registro bibliogr\u00e1fico puede ser utilizado al amparo de una licencia CC BY 4.0 Inist-CNRS", "num_citations": "2\n", "authors": ["796"]}
{"title": "Warden: A Pattern for Object Distribution\n", "abstract": " Allow to share objects and control their access in a distributed environment without system level support for distributed objects. The Warden is an object behavioral pattern that simplifies the management of object sharing over a network, and provides message dispatching conformance and assignment of access rights in non-local environments, to prevent the incorrect access to an object in colaborative applications.Motivation:", "num_citations": "2\n", "authors": ["796"]}
{"title": "Gestalt Prototyping Framework-Evaluation Tool\n", "abstract": " The Gestalt Prototyping Framework linked the Nielsen Usability Heuristics to the principles of human perception and presents some parameters that can be used in developing high and low-fidelity prototypes for mobile application interfaces. The link between the fundamentals of usability and Gestalt principles focuses on the graphical components of the interfaces and the functions that they fulfill in the development of different functional actions. Previous articles have presented promising experimental results in reducing trial-error regressions in the interface design process and improving interface redesign processes; There have been positive results in parameters such as learnability, ease of use, perception of simplicity, and user preference. Within this same line of research, the present work describes the development process of an application that summarizes the fundamental aspects of the Gestalt\u00a0\u2026", "num_citations": "1\n", "authors": ["796"]}
{"title": "A Conceptual Framework for Crop-Based Agri-food Supply Chain Characterization Under Uncertainty\n", "abstract": " Crop-based Agri-food Supply Chains (AFSCs) are complex systems that face multiple sources of uncertainty that can cause a significant imbalance between supply and demand in terms of product varieties, quantities, qualities, customer requirements, times and prices, all of which greatly complicate their management. Poor management of these sources of uncertainty in these AFSCs can have negative impact on quality, safety, and sustainability by reducing the logistic efficiency and increasing the waste. Therefore, it becomes crucial to develop models in order to deal with the key sources of uncertainty. For this purpose, it is necessary to precisely understand and define the problem under study. Even, the characterisation process of this domains is also a difficult and time-consuming task, especially when the right directions and standards are not in place. In this chapter, a Conceptual Framework is proposed that\u00a0\u2026", "num_citations": "1\n", "authors": ["796"]}
{"title": "Framework based on Gestalt principles to design mobile interfaces for a better user experience\n", "abstract": " This paper presents the results of the user experience test comparing a real functional application and a high fidelity prototype that used a Framework to design graphic user interfaces on mobile devices. This Framework links Nielsen\u2019s heuristics with the principles of perception of Gestalt, offering to developers and usability experts, references to generate and evaluate mockups and prototypes. The constructive and evaluative model of the Framework allows to recognize usability criteria in visual components of the interfaces, during the initial phases of a project that uses agile software development methodologies, reducing the \u201ctrial - error\u201d regressions. The experiment allowed obtaining data about satisfaction measures and specific user attitudes regarding the interfaces developed.", "num_citations": "1\n", "authors": ["796"]}
{"title": "User Experience Evaluation through Automatic A/B Testing\n", "abstract": " The goal of this research is to develop an A/B testing method to automatically compare the user experience (UX) of alternative designs for a web application in a real context with a large number of users. The challenge that it poses is to find mechanisms to predict the UX with machine learning techniques. This submission outlines the motivation, research goal, current status and remaining work.", "num_citations": "1\n", "authors": ["796"]}
{"title": "Using LEL and scenarios to derive mathematical programming models. Application in a fresh tomato packing problem\n", "abstract": " Mathematical programming models are invaluable tools at decision making, assisting managers to uncover otherwise unattainable means to optimize their processes. However, the value they provide is only as good as their capacity to capture the process domain. This information can only be obtained from stakeholders, i.e., clients or users, who can hardly communicate the requirements clearly and completely. Besides, existing conceptual models of mathematical programming models are not standardized, nor is the process of deriving the mathematical programming model from the concept model, which remains ad hoc. In this paper, we propose an agile methodology to construct mathematical programming models based on two techniques from requirements engineering that have been proven effective at requirements elicitation: the language extended lexicon (LEL) and scenarios. Using the pair of LEL\u00a0\u2026", "num_citations": "1\n", "authors": ["796"]}
{"title": "M\u00e9todos y herramientas de desarrollo y evaluaci\u00f3n de refactorings para la mejora de la experiencia del usuario en aplicaciones web\n", "abstract": " La trascendencia de las aplicaciones web ha crecido exponencialmente en los \u00faltimos a\u00f1os, pero a medida que las posibilidades de interacci\u00f3n con las mismas se tornan m\u00e1s complejas, la usabilidad y accesibilidad de las aplicaciones se va debilitando. En general se habla de experiencia del usuario (UX) para denotar caracter\u00edsticas tanto de usabilidad y accesibilidad, como de aspectos subjetivos tales como armon\u00eda, placer y confort en el uso de las aplicaciones. A pesar de los estudios recientes en el campo de UX, resulta a\u00fan muy dif\u00edcil integrar pr\u00e1cticas para su evaluaci\u00f3n y mejora incremental dentro del proceso de desarrollo y mantenimiento de software. M\u00e1s a\u00fan, estas pr\u00e1cticas resultan demasiado costosas y por lo tanto inasequibles para peque\u00f1as y medianas empresas. El objetivo general de este trabajo es avanzar en la evaluaci\u00f3n autom\u00e1tica y la mejora incremental de UX, tanto en aplicaciones web desktop como m\u00f3viles, a trav\u00e9s de refactorings dirigidos por el feedback de uso de estas aplicaciones, e incorporando a la comunidad de usuarios a participar en este proceso. La propuesta de este trabajo es crear un ciclo de mejora continua e incremental de la calidad externa de las aplicaciones web a trav\u00e9s de un proceso iterativo de testing y refactoring, que incorpore t\u00e9cnicas entre las que encontramos: miner\u00eda de datos, refactoring y A/B testing. Los objetivos espec\u00edficos est\u00e1n relacionados con la aplicaci\u00f3n de las t\u00e9cnicas en tres etapas del ciclo de mejora continua: 1. Identificaci\u00f3n de problemas de UX que los mismos usuarios sufren a trav\u00e9s de miner\u00eda de datos de uso y feedback de los mismos usuarios, 2. Reparaci\u00f3n de\u00a0\u2026", "num_citations": "1\n", "authors": ["796"]}
{"title": "Software patterns for asymmetric multiprocessing devices on embedded systems: A performance assessment\n", "abstract": " In embedded systems there is a variant of Multicore System on Chip devices (MSoC devices) where not all the computing elements (processor cores) are equal. The differences in the cores of these devices range from different hardware architectures using the same instruction set to completely different processors working together inside the same device. These SoCs are called \u201cAsymmetric Multi Processing Devices\u201d (AMP Devices). In order to help developers to take advantage of the possibilities that these devices may offer in the context of embedded systems, software design patterns have been defined, describing software architectural solutions with known uses. However, there are still no experimental results showing the benefits of these solutions. In this work we measure the performance of a design pattern called Mini Me, applied on an AMP device configuration, and compare it against two Symmetric\u00a0\u2026", "num_citations": "1\n", "authors": ["796"]}
{"title": "A design toolbox for first academic year students\n", "abstract": " An course on object-oriented (OO) design in the first academic year includes basic design principles that students learn at the same time than OO programming. Following, when they are faced with their first design problems, they do not have enough programming experience to forget low-level problems and reach a higher level of abstraction. Students learn the desired characteristics of an OO design in their lectures, but they lack of a starting point in order to apply them. Therefore, how do they learn to create and evaluate designs and how do we get across our experience?", "num_citations": "1\n", "authors": ["796"]}
{"title": "On the Automatic and Hand-made Link Creation at the Information System Level Functionality\n", "abstract": " The previous HTF workshop and some publications have recognized hypermedia functionality as an evolving approach from which a wide variety of applications may benefit remarkably. Adding this functionality may imply either a set of navigational aspects enriching the application on its own scope, eg [Bieber94],[Rossi94], or an external link engine through which the application is recognized and linked in an open hypermedia environment, eg [Ashman94],[Arents94]. These approaches may be called respectively as Information System Level Functionality and Operating System Level Functionality [Oinas-Kukkonen94, 95a]. This paper addresses the first one, for which we have found a secondary characterization, composed of automatic link generation and hand-made link creation. The research question for this paper can be expressed as: Should links be generated automatically or created manually in information system applications? Firstly, the key aspects of information system level functionality are outlined, identifying different kind of applications for which they can be added. Secondly, automatic link generation and hand-made link creation are discussed.", "num_citations": "1\n", "authors": ["796"]}