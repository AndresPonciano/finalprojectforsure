{"title": "LeakChaser: helping programmers narrow down causes of memory leaks\n", "abstract": " In large programs written in managed languages such as Java and C#, holding unnecessary references often results in memory leaks and bloat, degrading significantly their run-time performance and scalability. Despite the existence of many leak detectors for such languages, these detectors often target low-level objects; as a result, their reports contain many false warnings and lack sufficient semantic information to help diagnose problems. This paper introduces a specification-based technique called LeakChaser that can not only capture precisely the unnecessary references leading to leaks, but also explain, with high-level semantics, why these references become unnecessary.", "num_citations": "93\n", "authors": ["466"]}
{"title": "GRace: a low-overhead mechanism for detecting data races in GPU programs\n", "abstract": " In recent years, GPUs have emerged as an extremely cost-effective means for achieving high performance. Many application developers, including those with no prior parallel programming experience, are now trying to scale their applications using GPUs. While languages like CUDA and OpenCL have eased GPU programming for non-graphical applications, they are still explicitly parallel languages. All parallel programmers, particularly the novices, need tools that can help ensuring the correctness of their programs. Like any multithreaded environment, data races on GPUs can severely affect the program reliability. Thus, tool support for detecting race conditions can significantly benefit GPU application developers. Existing approaches for detecting data races on CPUs or GPUs have one or more of the following limitations: 1) being illsuited for handling non-lock synchronization primitives on GPUs; 2) lacking of\u00a0\u2026", "num_citations": "71\n", "authors": ["466"]}
{"title": "Efficient checkpointing of java software using context-sensitive capture and replay\n", "abstract": " Checkpointing and replaying is an attractive technique that has been used widely at the operating/runtime system level to provide fault tolerance. Applying such a technique at the application level can benefit a range of software engineering tasks such as testing of long-running programs, automated debugging, and dynamic slicing. We propose a checkpointing/replaying technique for Java that operates purely at the language level, without the need for JVM-level or OS-level support. At the core of our approach are static analyses that select, at certain program points, a safe subset of the program state to capture and replay. Irrelevant statements before the checkpoint are eliminated using control-dependence-based slicing; the remaining statements together with the captured run-time values are used to indirectly recreate the call stack of the original program at the checkpoint. At the checkpoint itself and at certain\u00a0\u2026", "num_citations": "52\n", "authors": ["466"]}
{"title": "LeakSurvivor: towards safely tolerating memory leaks for garbage-collected languages\n", "abstract": " Continuous memory leaks severely hurt program performance and software availability for garbage-collected programs. This paper presents a safe method, called LeakSurvivor, to tolerate continuous memory leaks at runtime for garbage-collected programs. Our main idea is to periodically swap out the``Potentially Leaked''(PL) memory objects identified by leak detectors from the virtual memory to disks. As a result, the virtual memory space occupied by the PL objects can be reclaimed by garbage collectors and available for future uses. If a swapped-out PL object is accesses later, LeakSurvivor will restore it from disks to the memory for correct program execution. Furthermore, LeakSurvivor helps developers to prune false positives.", "num_citations": "45\n", "authors": ["466"]}
{"title": "A comprehensive study on real world concurrency bugs in Node. js\n", "abstract": " Node.js becomes increasingly popular in building server-side JavaScript applications. It adopts an event-driven model, which supports asynchronous I/O and non-deterministic event processing. This asynchrony and non-determinism can introduce intricate concurrency bugs, and leads to unpredictable behaviors. An in-depth understanding of real world concurrency bugs in Node.js applications will significantly promote effective techniques in bug detection, testing and fixing for Node.js. In this paper, we present NodeCB, a comprehensive study on real world concurrency bugs in Node.js applications. Specifically, we have carefully studied 57 real bug cases from open-source Node.js applications, and have analyzed their bug characteristics, e.g., bug patterns and root causes, bug impacts, bug manifestation, and fix strategies. Through this study, we obtain several interesting findings, which may open up many new\u00a0\u2026", "num_citations": "37\n", "authors": ["466"]}
{"title": "Gmrace: Detecting data races in gpu programs via a low-overhead scheme\n", "abstract": " In recent years, GPUs have emerged as an extremely cost-effective means for achieving high performance. While languages like CUDA and OpenCL have eased GPU programming for nongraphical applications, they are still explicitly parallel languages. All parallel programmers, particularly the novices, need tools that can help ensuring the correctness of their programs. Like any multithreaded environment, data races on GPUs can severely affect the program reliability. In this paper, we propose GMRace, a new mechanism for detecting races in GPU programs. GMRace combines static analysis with a carefully designed dynamic checker for logging and analyzing information at runtime. Our design utilizes GPUs memory hierarchy to log runtime data accesses efficiently. To improve the performance, GMRace leverages static analysis to reduce the number of statements that need to be instrumented. Additionally, by\u00a0\u2026", "num_citations": "36\n", "authors": ["466"]}
{"title": "Lessons and actions: What we learned from 10k ssd-related storage system failures\n", "abstract": " Modern datacenters increasingly use flash-based solid state drives (SSDs) for high performance and low energy cost. However, SSD introduces more complex failure modes compared to traditional hard disk. While great efforts have been made to understand the reliability of SSD itself, it remains unclear what types of system level failures are related to SSD, what are the root causes, and how the rest of the system interacts with SSD and contributes to failures. Answering these questions can help practitioners build and maintain highly reliable SSD-based storage systems.", "num_citations": "27\n", "authors": ["466"]}
{"title": "Mc-checker: Detecting memory consistency errors in mpi one-sided applications\n", "abstract": " One-sided communication decouples data movement and synchronization by providing support for asynchronous reads and updates of distributed shared data. While such interfaces can be extremely efficient, they also impose challenges in properly performing asynchronous accesses to shared data. This paper presents MC-Checker, a new tool that detects memory consistency errors in MPI one-sided applications. MCChecker first performs online instrumentation and captures relevant dynamic events, such as one-sided communications and load/store operations. MC-Checker then performs analysis to detect memory consistency errors. When found, errors are reported along with useful diagnostic information. Experiments indicate that MC-Checker is effective at detecting and diagnosing memory consistency bugs in MPI one-sided applications, with low overhead, ranging from 24.6% to 71.1%, with an average of\u00a0\u2026", "num_citations": "25\n", "authors": ["466"]}
{"title": "D2taint: Differentiated and dynamic information flow tracking on smartphones for numerous data sources\n", "abstract": " With smartphones' meteoric growth in recent years, leaking sensitive information from them has become an increasingly critical issue. Such sensitive information can originate from smartphones themselves (e.g., location information) or from many Internet sources (e.g., bank accounts, emails). While prior work has demonstrated information flow tracking's (IFT's) effectiveness at detecting information leakage from smartphones, it can only handle a limited number of sensitive information sources. This paper presents a novel IFT tagging strategy using differentiated and dynamic tagging. We partition information sources into differentiated classes and store them in fixed-length tags. We adjust tag structure based on time-varying received information sources. Our tagging strategy enables us to track at runtime numerous information sources in multiple classes and rapidly detect information leakage from any of these\u00a0\u2026", "num_citations": "23\n", "authors": ["466"]}
{"title": "Enhanced transesterification of ethyl ferulate with glycerol for preparing glyceryl diferulate using a lipase in ionic liquids as reaction medium\n", "abstract": " Glyceryl diferulate (DFG) is a water-soluble ester of ferulic acid. A novel ionic liquid (IL) system for enzymatic transesterification of ethyl ferulate (EF) with glycerol to produce DFG was developed. Of three ILs with different anions (BF4                 \u2212, PF6                 \u2212 and TF2N\u2212) and cations (BDMIM, OMIM, HMIM, BMIM, and EMIM), EMIMTF2N proved the best using a commercial lipase. It had a significant protective effect against thermal inactivation of the enzyme. High EF conversion (~100\u00a0%) and DFG yield (45\u00a0%) were achieved using 45\u00a0mg enzyme/ml; temperature, 70\u00a0\u00b0C; reaction time, 12\u00a0h.", "num_citations": "21\n", "authors": ["466"]}
{"title": "An empirical study on crash recovery bugs in large-scale distributed systems\n", "abstract": " In large-scale distributed systems, node crashes are inevitable, and can happen at any time. As such, distributed systems are usually designed to be resilient to these node crashes via various crash recovery mechanisms, such as write-ahead logging in HBase and hinted handoffs in Cassandra. However, faults in crash recovery mechanisms and their implementations can introduce intricate crash recovery bugs, and lead to severe consequences.", "num_citations": "20\n", "authors": ["466"]}
{"title": "SyncChecker: Detecting Synchronization Errors Between MPI Applications and Libraries\n", "abstract": " While improving the performance, nonblocking communication is prone to synchronization errors between MPI applications and the underlying MPI libraries. Such synchronization error occurs in the following way. After initiating nonblocking communication and performing overlapped computation, the MPI application reuses the message buffer before the MPI library completes the use of the same buffer, which may lead to sending out corrupted message data or reading undefined message data. This paper presents a new method called Sync Checker to detect synchronization errors in MPI nonblocking communication. To examine whether the use of message buffers is well synchronized between the MPI application and the MPI library, Sync Checker first tracks relevant memory accesses in the MPI application and corresponding message send/receive operations in the MPI library. Then it checks whether the correct\u00a0\u2026", "num_citations": "19\n", "authors": ["466"]}
{"title": "System support for improving software dependability during production runs\n", "abstract": " As hardware performance and dependability have dramatically improved in the past few decades, the software dependability issues are becoming increasingly important. Unfortunately, many studies show that software bugs, which inevitably slip through various bug detection methods and even the strictest testing before releasing, can greatly affect software dependability during production runs. To improve software dependability during production runs, this dissertation proposes to address software bugs at multiple levels by leveraging support from the underlying hardware, the OS kernel, and the middle-layer runtime.  The proposed multi-level defenses address software bugs and their effects at different stages of program execution. The first-level defense detects software bugs once they are triggered. The detection at the earliest stage can effectively prevent further propagation of errors that are caused by the software bugs. It would be perfect if we could detect all the software bugs at the first-level defense. However, some bugs may still slip through the first-level defense and may be exploited by security attacks. The second-level defense is to detect the exploitation of software bugs in order to control the system damage caused by the potentially exploited bugs. Due to the limitation of the tools or methods deployed in the first-level and second-level defenses, some bugs may still escape them. Additionally, without any further actions for the detected bugs or exploitations at the previous two levels of defenses, what the target system can do is to shut down itself to prevent potential damages, thus is unavailable to users. At this point, the third-level\u00a0\u2026", "num_citations": "19\n", "authors": ["466"]}
{"title": "A strategy for detecting absorbed bioactive compounds for quality control in the water extract of rhubarb by ultra performance liquid chromatography with photodiode array detector\n", "abstract": " Objective                 To detect absorbed bioactive compounds of the water extract whose pharmacodynamic effect was craniocerebral protection for quality control assessment.                                               Methods                 Anthraquinones in water extract of rhubarb (WER), in cerebrospinal fluid (CSF) of patients with traumatic brain injury (TBI) and in ipsilateral cortex of TBI rats following oral WER were respectively explored by ultra performance liquid chromatography with photodiode array detector (UPLC-PDA) method developed in the present study. The effects of anthraquinones absorbed into injured cortex on superoxidase dismutase (SOD) activity in TBI rats were detected. The antioxidative anthraquinones absorbed into target organ were evaluated for quality control of WER.                                               Results                 Anthraquinones in WER were aloe-emodin, rhein, emodin, chrysophanol, and\u00a0\u2026", "num_citations": "18\n", "authors": ["466"]}
{"title": "Simultaneous determination of pimpinellin, isopimpinellin and phellopterin in rat plasma by a validated UPLC\u2013MS/MS and its application to a pharmacokinetic study after\u00a0\u2026\n", "abstract": " A rapid and selective ultra performance liquid chromatography\u2013tandem mass spectrometry (UPLC\u2013MS/MS) method was developed for simultaneous determination of three bioactive coumarins of Toddalia asiatica extract including pimpinellin, isopimpinellin and phellopterin in rat plasma for the first time. Phenacetin was used as the internal standard (IS). Plasma samples were extracted by liquid\u2013liquid extraction with methyl tert-butyl ether. The chromatographic separation was carried out on an ACQUITY UPLC\u2122 BEH C18 column with an isocratic mobile phase consisting of methanol-5\u00a0mmol/L ammonium acetate (65:35, v/v). The detection was performed on a triple quadrupole tandem mass spectrometer by multiple reaction monitoring (MRM) via electrospray ionization (ESI) source with positive ionization mode. The method was linear for all analytes over investigated range with all correlation coefficients greater\u00a0\u2026", "num_citations": "15\n", "authors": ["466"]}
{"title": "A strategy for detecting optimal ratio of cardioprotection-dependent three compounds as quality control of Guan-Xin-Er-Hao formula\n", "abstract": " AimsWe aimed to detect optimal ratio of cardioprotection-dependent absorbed bioactive compounds (ABCs) as quality control of Guan-Xin-Er-Hao (GXEH) formula extracted by various processings.MethodsFerulic acid (F), tanshinol (T), hydroxysafflor yellow A (A), protocatechualdehyde (P) and paeoniflorin (E) in GXEH formula and FTA in blood from rat with acute myocardial infarction (AMI) were first identified by HPLC\u2013MS/MS, and FTAPE in GXEH formulae with various herbs, extraction times and extraction water volumes were then quantitated only by HPLC.ResultsFTAPE in various GXEH were determined. FTA were selected as GXEH's ABCs. Ratios of FTA were determined, suggesting the high (1:6.1:15.6), medium (1:1.7:15.2) and low (1:0.2:15.3) ratios. Three FTA ratios and their parent formulae ratio-dependently reduced infarct size, myocardial apoptosis and caspase-3 activity.ConclusionThere is the optimal\u00a0\u2026", "num_citations": "15\n", "authors": ["466"]}
{"title": "Smart cache: An optimized mapreduce implementation of frequent itemset mining\n", "abstract": " Frequent Item set Mining (FIM) is a classic data mining topic with many real world applications such as market basket analysis. Many algorithms including Apriori, FP-Growth, and Eclat were proposed in the FIM field. As the dataset size grows, researchers have proposed MapReduce version of FIM algorithms to meet the big data challenge. This paper proposes new improvements to the MapReduce implementation of FIM algorithm by introducing a cache layer and a selective online analyzer. We have evaluated the effectiveness and efficiency of Smart Cache via extensive experiments on four public datasets. Smart Cache can reduce on average 45.4%, and up to 97.0% of the total execution time compared with the state-of-the-art solution.", "num_citations": "13\n", "authors": ["466"]}
{"title": "Understanding exception-related bugs in large-scale cloud systems\n", "abstract": " Exception mechanism is widely used in cloud systems. This is mainly because it separates the error handling code from main business logic. However, the huge space of potential error conditions and the sophisticated logic of cloud systems present a big hurdle to the correct use of exception mechanism. As a result, mistakes in the exception use may lead to severe consequences, such as system downtime and data loss. To address this issue, the communities direly need a better understanding of the exception-related bugs, i.e., eBugs, which are caused by the incorrect use of exception mechanism, in cloud systems. In this paper, we present a comprehensive study on 210 eBugs from six widely-deployed cloud systems, including Cassandra, HBase, HDFS, Hadoop MapReduce, YARN, and ZooKeeper. For all the studied eBugs, we analyze their triggering conditions, root causes, bug impacts, and their relations. To\u00a0\u2026", "num_citations": "12\n", "authors": ["466"]}
{"title": "Detecting performance anomaly with correlation analysis for Internetware\n", "abstract": " Internetware has become an emerging software paradigm to provide Internet services. The performance anomaly of Internetware services not only affects user experience, but also causes severe economic loss to service providers. Diagnosing performance anomalies has become one of the keys to improving the quality of service (QoS) of Internetware. Existing approaches create a system model to predict performance. Then, the prediction from the model is compared with the observation; a significant deviation may signal the occurrence of a performance anomaly. However, these approaches require domain knowledge and parameterization efforts. Moreover, dynamic workloads affect the accuracy of performance prediction. To address these issues, we propose a correlation analysis based approach to detecting the performance anomaly for Internetware. We use kernel canonical correlation analysis\u00a0\u2026", "num_citations": "9\n", "authors": ["466"]}
{"title": "JSGuard: Shellcode Detection in JavaScript\n", "abstract": " JavaScript (JS) based shellcode injections are among the most dangerous attacks to computer systems. Existing approaches have various limitations in detecting such attacks. In this paper, we propose a new detection methodology that overcomes these limitations by fully using JS code execution environment information. We leverage this information and create a virtual execution environment where shellcodes\u2019 real behavior can be precisely monitored and detection redundancy can be reduced. Following this methodology, we implement JSGuard, a prototype malicious JS code detection system in Debian Linux with kernel version 2.6.26. Our extensive experiments show that JSGuard reports very few false positives and false negatives with acceptable overhead.", "num_citations": "9\n", "authors": ["466"]}
{"title": "Simultaneous determination of eight major constituents in the traditional Chinese medicine Shaoyao-Gancao-Tang by UPLC-PDA\n", "abstract": " An ultra performance liquid chromatography-photodiode array detection method was first developed for simultaneous determination of gallic acid, albiflorin, peoniflorin, glycyrrhizin, benzoic acid, liquiritigenin, isoliquiritigenin and formononetin in traditional Chinese medicine prescription Shaoyao-Gancao-Tang. The chromatographic separation was performed on an Acquity BEH C18 column (100 times; 2.1 mm i. d., 1.7  M). The mobile phase was a mixture of 0.5% aqueous acetic acid and acetonitrile employing gradient elution at the flow rate of 0.3 mL/min. All calibration curves showed good linearity (R2 ge; 0.9996) over the tested ranges. The limits of detection and quantification were 3.992 - 27.00 and 13.31 - 89.99 ng/mL, respectively. The RSDs for intra- and inter-day were within 4.8% at three levels, and the recoveries were 96.22 - 102.2% with RSDs le; 3.6%. This method was found to be suitable for the quality\u00a0\u2026", "num_citations": "9\n", "authors": ["466"]}
{"title": "LiU: Hiding Disk Access Latency for HPC Applications with a New SSD-Enabled Data Layout\n", "abstract": " Unlike in the consumer electronics and personal computing areas, in the HPC environment hard disks can hardly be replaced by SSDs. The reasons include hard disk's large capacity, very low price, and decent peak throughput. However, when latency dominates the I/O performance (e.g., when accessing random data), the hard disk's performance can be compromised. If the issue of high latency could be effectively solved, the HPC community would enjoy a large, affordable and fast storage without having to replace disks completely with expensive SSDs. In this paper, we propose an almost latency-free hard-disk dominated storage system called LiU for HPC. The key technique is leveraging limited amount of SSD storage for its low-latency access, and changing data layout in a hybrid storage hierarchy with low-latency SSD at the top and high-latency hard disk at the bottom. If a segment of data would be randomly\u00a0\u2026", "num_citations": "8\n", "authors": ["466"]}
{"title": "Gmprof: A low-overhead, fine-grained profiling approach for gpu programs\n", "abstract": " Driven by the cost-effectiveness and the power-efficiency, GPUs are being increasingly used to accelerate computations in many domains. However, developing highly efficient GPU implementations requires a lot of expertise and effort. Thus, tool support for tuning GPU programs is urgently needed, and more specifically, low-overhead mechanisms for collecting fine-grained runtime information are critically required. Unfortunately, profiling tools and mechanisms available today either collect very coarse-grained information, or have prohibitive overheads. This paper presents a low-overhead and fine-grained profiling technique developed specifically for GPUs, which we refer to as GMProf. GMProf uses two ideas to help reduce the overheads of collecting fine-grained information. The first idea involves exploiting a number of GPU architectural features to collect reasonably accurate information very efficiently, and the\u00a0\u2026", "num_citations": "8\n", "authors": ["466"]}
{"title": "An OGSI Credential Manager Service\n", "abstract": " We present an OGSI CredentialManager service that allows users to obtain proxy credentials over the network using pass phrase authentication and provides a credential refresh service for long-running jobs. Users can store credentials with the CredentialManager as an alternative to manually managing private key and certificate files. The CredentialManager provides functionality similar to the widely used MyProxy Online Credential Repository, leveraging the standard services provided by OGSI.", "num_citations": "6\n", "authors": ["466"]}
{"title": "Understanding SSD reliability in large-scale cloud systems\n", "abstract": " Modern datacenters increasingly use flash-based solid state drives (SSDs) for high performance and low energy cost. However, SSDs introduce more complex failure modes compared to traditional hard disks. While great efforts have been made to understand the reliability of SSDs itself, it remains unclear how the device-level errors may affect upper layers, or how the services running on top of the storage stack may affect the SSDs. In this paper, we take a holistic view to examine the reliability of SSD-based storage systems in Alibaba's datacenters, which covers about half-million SSDs under representative cloud services over three years. By vertically analyzing the error events across three layers (i.e., SSDs, OS, and the distributed file system), we discover a number of interesting correlations. For example, SSDs with UltraDMA CRC errors, while seems benign at the device level, are nearly 3 times more likely to\u00a0\u2026", "num_citations": "5\n", "authors": ["466"]}
{"title": "PROGRESS ON SYNTHESIS OF WATER-SOLUBLE GLYCERYL FERULATES\n", "abstract": " Water-soluble ferulic acid derivatives containing glyceryl group are similar to ferulic acid in physiological functions, but have larger water solubility. In this paper, we mainly summarized the synthesis method of the water-soluble ferulic acid derivatives containing glyceryl group, and briefly overviewed the physiological functions of the water-soluble ferulic acid derivatives to provide reference for the application of water-soluble glyceryl ferulate.", "num_citations": "4\n", "authors": ["466"]}
{"title": "eDelta: Pinpointing energy deviations in smartphone apps via comparative trace analysis\n", "abstract": " Many smartphone apps can consume an unnecessarily high amount of energy, shortening battery life. Although users can easily notice the undesired fast battery drain, it is almost impossible for them to precisely remember how the abnormal battery drain (ABD) is triggered, making it difficult for developers to fix the problem. Therefore, app developers are in an urgent need for a tool that can provide them helpful information. In this paper, we propose eDelta, a framework that assists developers in pinpointing the APIs with high energy deviation, which usually have a high probability of being relevant to the non-deterministic ABD. Specifically, eDelta performs comparative trace analysis to identify APIs that have significant energy consumption deviation in different user traces. With the information provided by eDelta, developers can substantially reduce the time they spend searching for the ABD root causes. We have\u00a0\u2026", "num_citations": "3\n", "authors": ["466"]}
{"title": "Crash consistency validation made easy\n", "abstract": " Software should behave correctly even in adverse conditions. Particularly, we study the problem of automated validation of crash consistency, ie, file system data safety when systems crash. Existing work requires non-trivial manual efforts of specifying checking scripts and workloads, which is an obstacle for software developers. Therefore, we propose C3, a novel approach that makes crash consistency validation as easy as pressing a single button. With a program and an input, C3 automatically reports inconsistent crash sites. C3 not only exempts developers from the need of writing crash site checking scripts (by an algorithm that computes editing distance between file system snapshots) but also reduces the reliance on dedicated workloads (by test amplification). We implemented C3 as an open-source tool. With C3, we found 14 bugs in open-source software that have severe consequences at crash and 11 of\u00a0\u2026", "num_citations": "3\n", "authors": ["466"]}
{"title": "Experimental and Numerical Simulation of TNT Explosion on the Ground [J]\n", "abstract": " For study of the propagation of shock wave by chemical explosion on the ground, the different amount TNT was experimented at testing ground. The finite element method was also used to simulate the two cases. The results show that the simulation results agree well with the test results, and the finite element model and algorithm presented in the paper are beneficial to the further study of propagation of shock wave by explosion on the ground..", "num_citations": "3\n", "authors": ["466"]}
{"title": "Simultaneous quantitation of seven anthraquinones in aqueous extract of rhubarb and analysis for absorption in cerebrospinal fluid of patients with traumatic brain injury using\u00a0\u2026\n", "abstract": " A simple and rapid ultra-performance liquid chromatography coupled with photo-diode array (UPLC-PDA) method was developed for determination of seven anthraquinones in aqueous extract of rhubarb (AER) and for detection of anthraquinones in cerebrospinal fluid (CSF) of patients with traumatic brain injury (TBI) after AER administration. Optimum separation was achieved on a reversed-phase column with methanol and 0.5% aqueous acetic acid as the mobile phase at a flow rate of 0.5 ml/min. Experimental results showed intra- and inter- day accuracy, precision, linear range and limits of detection were satisfactory for simultaneous determination of seven anthraquinones in AER. Good linear regression data (r2 gt; 0.9982) were obtained for all the calibration plots within the range tested. The method was successfully used for quantitative analysis of the seven compounds in AER, and with the aid of UPLC-PDA\u00a0\u2026", "num_citations": "3\n", "authors": ["466"]}
{"title": "CoFI: consistency-guided fault injection for cloud systems\n", "abstract": " Network partitions are inevitable in large-scale cloud systems. Despite developer's efforts in handling network partitions throughout designing, implementing and testing cloud systems, bugs caused by network partitions, ie, partition bugs, still exist and cause severe failures in production clusters. It is challenging to expose these partition bugs because they often require network partitions to start and stop at specific timings.", "num_citations": "2\n", "authors": ["466"]}
{"title": "Selective checkpointing for minimizing recovery energy and efforts of smartphone apps\n", "abstract": " Unintended smartphone rebooting and unexpected shutdown (due to reasons like battery run outs, overheating, or automatic app upgrades) is annoying. What can be even worse is that a phone user has to restart, from the very beginning, the apps he or she was using when the phone got rebooted, because all the app states would be lost, especially when the number of apps in use is large. Hence, a recovery service is sorely needed for today's smartphones where apps are becoming increasingly complex. While checkpointing has long been used for desktop and laptop computers, such whole-system state preserving techniques cannot be applied to smartphones directly, due to the constraints of smartphones on energy, delay, and storage space. In this paper, we propose SmartCP, an intelligent checkpointing methodology, in order to reduce the energy required by a smartphone and the amount of efforts required\u00a0\u2026", "num_citations": "2\n", "authors": ["466"]}
{"title": "Pharmacokinetic comparison of ferulic acid in healthy volunteers and patients with functional dyspepsia following oral administration of Chaihu-Shugan-San\n", "abstract": " Ferulic acid (FA) of Chuanxiong Rhizoma could promote gastrointestinal motor has been reported. However, its pharmacokinetic characteristics in patients with functional dyspepsia (FD) have never been investigated. The present study was designed to evaluate and compare the pharmacokinetics of FA in patients with FD and healthy volunteers following oral administration of Chaihu-Shugan-San (CSS). Eight healthy volunteers and seven patients with FD were enrolled and blood samples were obtained after oral administration of CSS. Quantification of FA in serum for pharmacokinetic study was achieved by using a simple and rapid UPLC-PDA method. After oral administration of CSS to healthy volunteers and patients, the maximum concentrations were 355.53plusmn;65.31 and 199.69plusmn;41.04 ng/ml at 26.95plusmn;7.64 and 27.51plusmn;5.02 min, respectively. Compared with the value of AUC0-480(22\u00a0\u2026", "num_citations": "2\n", "authors": ["466"]}
{"title": "Avis: In-Situ Model Checking for Unmanned Aerial Vehicles\n", "abstract": " Control firmware in unmanned aerial vehicles (UAVs) uses sensors to model and manage flight operations, from takeoff to landing to flying between waypoints. However, sensors can fail at any time during a flight. If control firmware mishandles sensor failures, UAVs can crash, fly away, or suffer other unsafe conditions. In-situ model checking finds sensor failures that could lead to unsafe conditions by systematically failing sensors. However, the type of sensor failure and its timing within a flight affect its manifestation, creating a large search space. We propose Avis, an in-situ model checker to quickly uncover UAV sensor failures that lead to unsafe conditions. Avis exploits operating modes, i.e., a label that maps software execution to corresponding flight operations. Widely used control firmware already support operating modes. Avis injects sensor failures as the control firmware transitions between modes \u2013 a key\u00a0\u2026", "num_citations": "1\n", "authors": ["466"]}
{"title": "Bioethnopharmaceutical analytical pharmacology: a strategy for elucidating ethnoherbal absorbed bioactive compounds.\n", "abstract": " To review the background and advance of a strategy of bioethnopharmaceutical analytical pharmacology pharmacology Subject Category: Disciplines, Occupations and Industries", "num_citations": "1\n", "authors": ["466"]}