{"title": "Toward a holistic software systems engineering approach for dependable autonomous systems\n", "abstract": " Autonomous systems are gaining momentum in various application domains, such as autonomous vehicles, autonomous transport robotics and self-adaptation in smart homes. Product liability regulations impose high standards on manufacturers of such systems with respect to dependability (safety, security and privacy). Today's conventional engineering methods are not adequate for providing guarantees with respect to dependability requirements in a cost-efficient manner, e.g. road tests in the automotive industry sum up millions of miles before a system can be considered sufficiently safe. System engineers will no longer be able to test and respectively formally verify autonomous systems during development time in order to guarantee the dependability requirements in advance. In this vision paper, we introduce a new holistic software systems engineering approach for autonomous systems, which integrates\u00a0\u2026", "num_citations": "32\n", "authors": ["1688"]}
{"title": "Towards the verification of safety-critical autonomous systems in dynamic environments\n", "abstract": " There is an increasing necessity to deploy autonomous systems in highly heterogeneous, dynamic environments, e.g. service robots in hospitals or autonomous cars on highways. Due to the uncertainty in these environments, the verification results obtained with respect to the system and environment models at design-time might not be transferable to the system behavior at run time. For autonomous systems operating in dynamic environments, safety of motion and collision avoidance are critical requirements. With regard to these requirements, Macek et al. [6] define the passive safety property, which requires that no collision can occur while the autonomous system is moving. To verify this property, we adopt a two phase process which combines static verification methods, used at design time, with dynamic ones, used at run time. In the design phase, we exploit UPPAAL to formalize the autonomous system and its environment as timed automata and the safety property as TCTL formula and to verify the correctness of these models with respect to this property. For the runtime phase, we build a monitor to check whether the assumptions made at design time are also correct at run time. If the current system observations of the environment do not correspond to the initial system assumptions, the monitor sends feedback to the system and the system enters a passive safe state.", "num_citations": "32\n", "authors": ["1688"]}
{"title": "UML-based analysis of power consumption for real-time embedded systems\n", "abstract": " The complexity of embedded systems has risen significantly in the last years. The model based development approach helped to keep an overview over the development and over the fulfillment of non-functional properties, as it is possible to capture and analyze the scheduling using UML development models. Other aspects, e.g. the power consumption, are not considered in development models, modelling languages, and analysis support based on development models. The common approach is to measure the consumption at the end of the development, but there is no tool support for earlier phases analysis. We present a UML profile for power/energy consumption and a simple algorithm to analyze the power consumption based on an UML model extended with our profile. As more power awareness could result in losing real-time constraints, we consider both aspects, real-time scheduling and power awareness\u00a0\u2026", "num_citations": "23\n", "authors": ["1688"]}
{"title": "Automated generation of requirements-based test cases for an adaptive cruise control system\n", "abstract": " Checking that a complex software system conforms to an extensive catalogue of requirements is an elaborate and costly task which cannot be managed only through manual testing anymore. In this paper, we construct an academic case study in which we apply automated requirements-based test case generation to the protoype of an adaptive cruise control system. We focus on two main research goals with respect to our method: (1) how much code coverage can be obtained and (2) how many faults can be found using the generated test cases. We report on our results as well as on the lessons learned.", "num_citations": "13\n", "authors": ["1688"]}
{"title": "Towards integrated rule-driven software development for IT ecosystems\n", "abstract": " Modern large-scale software-intensive systems are complex conglomerates of interacting (socio-) technical systems. The single systems are highly adaptive and autonomous leading to emergent behavior. Well-established development approaches, that are appropriate for single software-intensive systems, do not scale well for such systems-of-systems; the focus of development shifts from a complete specification of the system to the handling of emergent behavior. Traditional development approaches are not prepared for that shift. This paper outlines an integrated software development approach for IT ecosystems, a class of ultra-large scale software intensive systems. Single systems as parts of IT ecosystems are developed applying common model-driven techniques while rules specify how to detect emergent and undesired behavior and how to react. The integrated solution aims at enabling model-driven\u00a0\u2026", "num_citations": "9\n", "authors": ["1688"]}
{"title": "Graceful degradation of decision and control responsibility for autonomous systems based on dependability cages\n", "abstract": " Safe and reliable autonomous vehicles are key to solving many of today\u2019s mobility and transportation problems. However, this reliability cannot be achieved during development, as it is impossible to specify and test all situations in which a vehicle may find itself during operation. Therefore, this paper presents a novel software monitoring approach that is capable of assessing whether a situation observed by the vehicle was already tested and the vehicle behaves according to its specification. If this is not the case, it gradually transfers decision and control responsibilities from the autonomous vehicle to a remote control center in order to cope with errors or completely unknown situations. The presented concept defines four different levels of possible interventions, differing in the degree of responsibility transferred to a human remote operator.", "num_citations": "4\n", "authors": ["1688"]}
{"title": "Automated Generation of Requirements-Based Test Cases for an Automotive Function using the SCADE Toolchain\n", "abstract": " Results of acceptance tests trigger various adaptations in the architecture and design of a complex software system. Several adaptation iterations are needed until all acceptance tests are successfully passed. Checking whether the adapted software system complies with an extensive catalogue of requirements is an elaborate task, which cannot be managed only via manual testing anymore. Over the years, model checking has established itself as an efficient method for the generation of requirementsbased test cases. At the same time, the traction gained by modelbased development tools, such as SCADE Suite, especially in the automotive and the avionics domains, facilitates the use of formal methods for the analysis and verification of complex software systems developed in these industries. This paper describes an approach which supports the generation of test cases from formalized requirements using the SCADE toolchain. In order to evaluate the applicability of our approach, we apply our concept on a simple system from the automotive domain and discuss outcomming results.", "num_citations": "2\n", "authors": ["1688"]}
{"title": "Asserting Functional Equivalence between C Code and SCADE Models in Code-to-Model Transformations\n", "abstract": " Model-based development is on the rise and tool chains employing automated code generation from models using certified code generators are getting increasingly common. We present an approach which enables the reverse operation and creates an ANSYS SCADE model that is functionally equivalent to the C code. The main motivation behind this development is to enable original equipment manufacturers (OEMs) to further use and maintain legacy code in new development environments, rather than having to re-develop the respective functionality from scratch.", "num_citations": "1\n", "authors": ["1688"]}
{"title": "Data-driven Approach for Accurate Estimation and Validation of the Ego-Vehicle Speed\n", "abstract": " This paper proposes a data-oriented approach for the accurate estimation of the ego-vehicle speed. The approach combines long-term estimation with short-term estimation mechanisms to produce an accurate estimation of vehicle\u2019s tire circumference. The long-term estimation method approximates a standard value for the tire circumference on the basis of the vehicle configuration. In turn, the short-term estimation computes an estimation error for the tire circumference based on Global Positioning System (GPS) sensor data. The ego-vehicle speed is then computed on the basis of the estimated tire circumference and the current wheel speed measurement. In this approach, several error sources are considered: the GPS data, the road gradient and the rounding off of the estimated vehicle speed. The approach is validated on two real-world test data batches against the European New Car Assessment Programme (Euro NCAP) safety requirements. The results of the experimental validation demonstrate that the proposed vehicle speed estimation algorithm performs within the limits of the Euro NCAP requirements.", "num_citations": "1\n", "authors": ["1688"]}