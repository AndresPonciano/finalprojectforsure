{"title": "Dtcth: a discriminative local pattern descriptor for image classification\n", "abstract": " Despite lots of effort being exerted in designing feature descriptors, it is still challenging to find generalized feature descriptors, with acceptable discrimination ability, which are able to capture prominent features in various image processing applications. To address this issue, we propose a computationally feasible discriminative ternary census transform histogram (DTCTH) for image representation which uses dynamic thresholds to perceive the key properties of a feature descriptor. The code produced by DTCTH is more stable against intensity fluctuation, and it mainly captures the discriminative structural properties of an image by suppressing unnecessary background information. Thus, DTCTH becomes more generalized to be used in different applications with reasonable accuracies. To validate the generalizability of DTCTH, we have conducted rigorous experiments on five different applications considering nine\u00a0\u2026", "num_citations": "20\n", "authors": ["727"]}
{"title": "Cloud-niagara: A high availability and low overhead fault tolerance middleware for the cloud\n", "abstract": " Fault tolerance is the ability to a system to continue its functionality despite the presence of faults in the architecture. For a dynamic system such as the cloud, fault tolerance is required to ensure business continuity. This paper proposes a high availability middleware that ensures fault tolerance for cloud based applications. Effective Descriptive Set Theory is used to determine the model of fault detection for real life applications running on the open source cloud. A deterministic algorithm of the middleware is provided that achieves automatic allocation of backup nodes to the system based on the faults. After detection of faults, the middleware directs the system to add new nodes as replicas of the failed nodes, ensuring continuity of the cloud applications. Next, a case study including seven real life applications such as PostGreSQL Database, etc are described and fault tolerance is ensured through the proposed\u00a0\u2026", "num_citations": "12\n", "authors": ["727"]}
{"title": "MMRUC3: A recommendation approach of move method refactoring using coupling, cohesion, and contextual similarity to enhance software design\n", "abstract": " Placement of methods is one of the most important design activities for any object\u2010oriented application in terms of coupling and cohesion. Due to method misplacement, the application becomes tightly coupled and loosely cohesive, reflecting inefficient design. Therefore, a feature envy code smell emerges from the application, as many methods use more features of other classes than its current class. Hence, development and maintenance time, cost, and effort are increased. To refactor the code smell and enhance the design quality, move method refactoring plays a significant role through grouping similar behaviors of methods. This is because the manual refactoring process is infeasible due to the necessity of huge time and most of the existing techniques consider only coupling\u2010based and/or cohesion\u2010based information of nonstatic entities (methods and attributes) for the recommendation. However, this article\u00a0\u2026", "num_citations": "8\n", "authors": ["727"]}
{"title": "Mobicomonkey: context testing of Android apps\n", "abstract": " The functionality of many mobile applications is dependent on various contextual, external factors. Depending on unforeseen scenarios, mobile apps can even malfunction or crash. In this paper, we have introduced MobiCoMonkey-automated tool that allows a developer to test app against custom or auto generated contextual scenarios and help detect possible bugs through the emulator. Moreover, it reports the connection between the bugs and contextual factors so that the bugs can later be reproduced. It utilizes the tools offered by Android SDK and logcat to inject events and capture traces of the app execution.", "num_citations": "7\n", "authors": ["727"]}
{"title": "A proactive approach for context-aware self-adaptive mobile applications to ensure Quality of Service\n", "abstract": " Mobile Applications are rapidly emerging as a convenient medium for using a variety of services. With the high penetration of smart phones in society, self-adaptation has become an essential capability required by mobile application users. In an ideal scenario, an application is required to adjust its behavior according to the current context of its use. This raises the challenge in mobile computing towards the design and development of applications that sense and react to contextual changes to provide a value-added user experience. In its general sense, context information can relate to the environment, the user, or the device status. In this paper, a framework is proposed for building context aware and adaptive mobile applications. Based on the concepts of software requirement specification and probabilistic modeling, this framework guides the modeling of adaptability at design time and supports context\u00a0\u2026", "num_citations": "7\n", "authors": ["727"]}
{"title": "Provintsec: a provenance cognition blueprint ensuring integrity and security for real life open source cloud\n", "abstract": " The distributed nature and growing demand for open source cloud makes the system an ideal target for malicious attacks and unauthorised file transfers. Requirements of provenance cognition scheme can come forward to solve the problem. However, such mechanisms of provenance detection has been considered to a limited extent for open source cloud computing. ProvIntSec is a novel mechanism that ensures effective collection of provenance information from a large pool of virtual machine (VM) instances on open source cloud platform. ProvIntSec captures critical system journals from VM instances and pattern matches those with predefined signatures to detect the presence of malicious activities. In addition, ProvIntSec identifies the Linux process trees to determine unauthorised file movements across different nodes. The experiments were executed in OpenStack Essex cloud environment running on real life\u00a0\u2026", "num_citations": "7\n", "authors": ["727"]}
{"title": "A peer to peer resource provisioning scheme for cloud computing environment using multi attribute utility theory\n", "abstract": " Resource provisioning is critical for cloud computing because it manages the virtual machines (VM) and allocated resources. Traditional resource provisioning schemes make decisions based on centralized configuration and global calculation of resource allocation. However these provisioning frameworks become hindered in large deployment followed by Service Level Objectives (SLO) violation and those are exposed to single point failure as well. The proposed provisioning scheme is based on Peer to Peer (P2P) architecture with no lone decision maker. Each node in the data center makes its own provisioning decision regarding VM allocation and migration which are resolved with Multi Attribute Utility Theory (MAUT) methods. Simulation experiments demonstrate that in comparison with centralized schemes, the proposed scheme generates 60.27% less SLO violations and 83.58% less VM migrations on\u00a0\u2026", "num_citations": "6\n", "authors": ["727"]}
{"title": "MapBeing: An architecture for manipulating and publishing vector data in web based Geographic Information System\n", "abstract": " Web Geographic Information Systems (WebGIS) have been introduced for fulfilling the growing need of Geographic Information Systems (GIS) in the Internet. WebGIS can also be used to manipulate the published data according to the user's need. However, publishing of large volume interactive vector data might degrade the performance of WebGIS, due to upload/download and rendering time. In this paper, a vector data manipulating and publishing architecture named MapBeing is proposed which provides features to manipulate and publish huge volumes of data on maps without degrading performance. The proposed architecture consists of four core layers named User End, the Request Handler, Service and Data Provider. The User End layer is constructed using an open source JavaScript library called OpenLayers which shows vector data on the interactive map presented on the web. The Request Handler\u00a0\u2026", "num_citations": "5\n", "authors": ["727"]}
{"title": "Security and performance bug reports identification with class-imbalance sampling and feature selection\n", "abstract": " Nowadays, software projects receive a huge number of bug reports daily. Among them, security and performance bug reports are higher priority to software developers and users. So, rapid identification of security and performance bug reports as soon as these are reported is mandatory. But bug tracking systems do not provide any mechanism to isolate them from the collection of bug reports. In this paper, we have proposed a learning based approach to identify security and performance bug reports addressing class-bias and feature-skew phenomenon. We have proposed two separate classification models namely Sec-Model and Perf-Model, where the former classifies a bug report as security or non-security bug report and the latter classifies as performance or non-performance bug report. We have experimented our approach on four datasets of bug reports of four software projects- Ambari, Camel, Derby and\u00a0\u2026", "num_citations": "4\n", "authors": ["727"]}
{"title": "IVRIDIO: Design of a software testing framework to provide Test-first Performance as a service\n", "abstract": " Test-first Performance (TFP) is a testing paradigm that focuses on performance testing from the early stage of development. For performance oriented applications like a web service, TFP approach can reduce the overall cost of software testing. Given this potential benefit, TFP is yet to be incorporated in existing cloud testing frameworks. This paper proposes the design of a testing framework which introduces TFP as a Service (TFPaaS) named as IVRIDIO. It includes the Plugin for TFP in the Cloud (PTFPC) that will provide instant feedbacks to fix critical performance issues. To simplify the TFPaaS availing procedure, the Convention over Configuration (CoC) design paradigm has been applied. A configurable project template is designed using the CoC to maintain TFP test cases. Furthermore, necessary directions are given to prototype the framework as a testbed for related research.", "num_citations": "4\n", "authors": ["727"]}
{"title": "MobileMonkey - A Contextual Stress Testing Framework for Android Application\n", "abstract": " Development of Android Apps is inherently challenging as difficulties arise in tracing bugs and crashes due to GUI based event driven work flow, contextual scenarios and diversified sources of inputs working together. In order to alleviate developer\u2019s challenges in this regard, a state of the art contextual stress testing framework of Android apps named MobileMonkey is proposed. This framework facilitates developers to analyze Android apps using automatic stress inputs and contextual scenario generation with an inherent aim to invoke bugs or crashes, devised by a systematic and strategic execution of static analysis in a cohesive manner, which in essence, provides developers with plenty of insight regarding what went wrong based on data-intense crash logs, traceable trajectories of execution and replayable as well as replicable scripts. We evaluated MobileMonkeys effectiveness in comparison with industry standard Android app stress testing tool on 30 Android apps, 15 of which are heavily utilized real world android apps. The results demonstrate that MobileMonkey consistently performs better than the industry standard tool for stress testing in a diverse range of scenarios. Additionally, MobileMonkey is created to be resource friendly, horizontally scalable and non reliant on specific versions of Android Standard Development Kit, thus automatically becoming a better choice for being integrated as stress testing framework at any stage of Android app development.", "num_citations": "3\n", "authors": ["727"]}
{"title": "Recommendation of move method refactorings using coupling, cohesion and contextual similarity\n", "abstract": " Method placement is one of the most important design activities in any object oriented application. Recommendation of move method refactorings plays a significant role through grouping similar behavior of methods. It is also used as a refactoring technique of feature envy code smell by placing methods into correct classes from the incorrect ones. Due to this code smell, an application will be tightly coupled and loosely cohesive which reflect poor design and hence development and maintenance effort, time and cost will be increased. Existing techniques mostly used only non-static methods for refactoring the code smell and so these approaches are not generalized for all types of methods (static and non-static). This paper proposes a novel approach for recommending move method refactorings to remove the code smell for both types of methods based on coupling, cohesion and context. The results of a preliminary\u00a0\u2026", "num_citations": "3\n", "authors": ["727"]}
{"title": "Characterization and localization of performance-bugs using Naive Bayes approach\n", "abstract": " Performance of an application is a vital issue for user satisfaction. Performance bug refers to a specific kind of bugs that create lags and overheads in application execution. Often, it is difficult to localize and fix performance bugs due to insufficient developer knowledge regarding the characteristics of these bugs. Eliminating performance bugs manually from the application is time consuming and costly. This paper proposes a characterization and localization approach of performance bugs using Naive Bayes. It first detects the structures and behaviors responsible for the performance issues in source code. Then it learns the association of performance bugs with those coding characteristics from the training data set. Finally, it localizes potential performance bugs in source codes from the given bug report using Naive Bayes Classifier. Experimental result shows that our proposed approach can successfully predicts 75\u00a0\u2026", "num_citations": "3\n", "authors": ["727"]}
{"title": "A peer to peer resource discovery scheme for provisioning in cloud using multi attribute range query\n", "abstract": " Provisioning in cloud functions through obtaining information of physical and virtual machines, known as resource discovery. The existing such resource discovery schemes are centralized in nature, imposing scalability and single point failure issues in overall datacenter operations. As peer to peer (P2P) approaches are inherently scalable and invincible to single point vulnerability, this paper proposes a P2P based decentralized and scalable resource discovery method for provisioning in cloud. By using P2P architecture, routing data tuples and publishing those by storing inside nodes are also presented here. The paper also proposes searching appropriate multi attribute provisioning data stored in the nodes and fail-safe policies in case of physical machine failure. For simulation purpose, a datacenter environment was developed using a P2P overlay network over which provisioning functioned based on the\u00a0\u2026", "num_citations": "2\n", "authors": ["727"]}
{"title": "Recommendation of Move Method Refactoring to Optimize Modularization Using Conceptual Similarity\n", "abstract": " Placement of methods within classes is one of the most important design activities for any object oriented application to optimize software modularization. To enhance interactions among modularized components, recommendation of move method refactorings plays a significant role through grouping similar behaviors of methods. It is also used as a refactoring technique of feature envy code smell by placing methods into correct classes from incorrect ones. Due to this code smell and inefficient modularization, an application will be tightly coupled and loosely cohesive which reflect poor design. Hence development and maintenance effort, time and cost will be increased. Existing techniques deals with only non-static methods for refactoring the code smell and so are not generalized for all types of methods (static and non-static). This paper proposes an approach which recommends \u201emove method\u201f refactoring to remove the code smell as well as enrich modularization. The approach is based on conceptual similarity (which can be referred as similar behavior of methods) between a source method and methods of target classes of an application. The conceptual similarity relies on both static and nonstatic entities (method calls and used attributes) which differ the paper from others. In addition, it compares the similarity of used entities by the source method with used entities by methods in probable target classes. The results of a preliminary empirical evaluation indicate that the proposed approach provides better results with average precision of 65% and recall of 63% after running it on five well-known open projects than JDeodorant tool (a popular\u00a0\u2026", "num_citations": "1\n", "authors": ["727"]}
{"title": "TFPaaS: Test-first Performance as a Service to Cloud for Software Testing Environment\n", "abstract": " Performance Testing is critical for applications like web services and e-commerce platforms to ensure enhanced end user experience. In such cases, starting to test the system's performance early should significantly reduce the overall development cost. Test-first Performance (TFP) is one such paradigm that allows performance testing right from the early stage of development. Given such potential benefit, this paper proposes the design of a testing framework IVRIDIO which introduces TFP as a Service (TFPaaS). IVRIDIO incorporates the Plugin for TFP in the Cloud (PTFPC) aiming to provide instant feedbacks - a prime requirement of TFP to immediately fix critical performance issues. Furthermore, the Convention over Configuration (CoC) design paradigm has been applied by introducing a configurable project template to maintain TFP test cases. The prototyping details of the framework are given and the variation of response time to the inclusion of PTFPC has also been discussed. The Summated Usability Metric (SUM) score has been provided so that it can later be used for comparing the PTFPC plugin's usability.", "num_citations": "1\n", "authors": ["727"]}