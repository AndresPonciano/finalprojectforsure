{"title": "A systematic mapping study of software product lines testing\n", "abstract": " ContextIn software development, Testing is an important mechanism both to identify defects and assure that completed products work as specified. This is a common practice in single-system development, and continues to hold in Software Product Lines (SPL). Even though extensive research has been done in the SPL Testing field, it is necessary to assess the current state of research and practice, in order to provide practitioners with evidence that enable fostering its further development.ObjectiveThis paper focuses on Testing in SPL and has the following goals: investigate state-of-the-art testing practices, synthesize available evidence, and identify gaps between required techniques and existing approaches, available in the literature.MethodA systematic mapping study was conducted with a set of nine research questions, in which 120 studies, dated from 1993 to 2009, were evaluated.ResultsAlthough several\u00a0\u2026", "num_citations": "275\n", "authors": ["1511"]}
{"title": "A view of the dynamic software product line landscape\n", "abstract": " Dynamic software product lines extend the concept of conventional SPLs by enabling software-variant generation at runtime. Recent studies yield insights into the current state of the DSPL field, research trends, and major gaps to address.", "num_citations": "99\n", "authors": ["1511"]}
{"title": "Quality attributes for a component quality model\n", "abstract": " Component-based software development is becoming more generalized, representing a considerable market for the software industry. The perspective of reduced development costs and shorter life cycles acts as a motivation for this expansion. However, several technical issues remain unsolved before software component\u2019s industry reaches the maturity exhibited by other component industries. Problems such as the component selection by their integrators, the component catalogs formalization and the uncertain quality of third-party developed components, bring new challenges to the software engineering community. By the other hand, the software components certification area is still immature and further research is needed in order to obtain well-defined standards for certification. In this way, we aim to propose a component quality model, describing mainly the quality attributes and related metrics for the components evaluation.", "num_citations": "71\n", "authors": ["1511"]}
{"title": "Strategies for testing products in software product lines\n", "abstract": " The software product line engineering strategy enables the achievement of significant improvements in quality through reuse of carefully crafted software assets across multiple products. However, high levels of quality in the software product line assets, which are used to create products, must be accompanied by effective and efficient test strategies for the products in the software product line. The goal of this study is to understand which strategies for testing products in software product lines have been reported in the literature, enabling discussions on the significant issues, and also pointing out further research directions. A systematic literature review was carried out that identified two hundred seventy-three papers, published from the years 1998 and early in 2012. From such a set of papers, a systematic selection resulted in forty-one relevant papers. The analysis of the reported strategies comprised two important\u00a0\u2026", "num_citations": "66\n", "authors": ["1511"]}
{"title": "Software component certification: a survey\n", "abstract": " Component-based software engineering, the process of building software systems from reusable parts, offers the potential to radically improve the way in which software is developed. It promises increased reuse leading to higher quality and reduced time to market. \"Higher quality\" means that the components must have a quality stamp in terms of what level of reliability can be expected from them. Thus, the certification stands out as an essential area to evaluate the component reliability level. In this sense, this paper presents a survey of software component certification research.", "num_citations": "66\n", "authors": ["1511"]}
{"title": "Agile software product lines: a systematic mapping study\n", "abstract": " Background: Software product lines and Agile methods have been an effective solution for dealing with the growing complexity of software and handling competitive needs of software organizations. They also share common goals, such as improving productivity, reducing time\u2010to\u2010market, decreasing development costs and increasing customer satisfaction. There has been growing interest in whether the integration of Agile and SPL could provide further benefits and solve many of the outstanding issues surrounding software development. Objective: This study investigates the state\u2010of\u2010the\u2010art in Agile SPL approaches, while identifying gaps in current research and synthesizing available evidence. It also provides a basis for a deeper understanding of the issues involved in the integration of Agile and SPL. Method: A mapping study was undertaken to analyze the relation between Agile and SPL methods. A set of four\u00a0\u2026", "num_citations": "61\n", "authors": ["1511"]}
{"title": "AMBAP: um ambiente de apoio ao aprendizado de programa\u00e7\u00e3o\n", "abstract": " This paper presents the AMBAP environment, conceived and developed to help inexperienced students during the learning of programming. Its first purpose is to offer a set of computational tools which helps the mastering of programming, with the perspective of problems resolution, including everything from problem comprehension phases to its proper solution, due to the formulation of an algorithm. Thus, this environment permits the student to build and execute a program using a language based in algorithms, at the same time they can understand some concepts, like: variables, commands, recursion and other. The system provides ways to simulate them, so the student does not need to worry about machine internal characteristics, usually found in conventional programming languages.Resumo. Este artigo apresenta o ambiente AMBAP, concebido e desenvolvido para auxiliar o aluno iniciante no aprendizado de programa\u00e7\u00e3o. Seu objetivo \u00e9 oferecer um conjunto de ferramentas computacionais que auxiliam no ensino de programa\u00e7\u00e3o, numa perspectiva expl\u00edcita de resolu\u00e7\u00e3o de problemas, abrangendo desde a fase de compreens\u00e3o do problema \u00e0 de sua solu\u00e7\u00e3o via formula\u00e7\u00e3o de um algoritmo. Neste sentido, este ambiente permite ao aluno construir seu programa numa linguagem algor\u00edtmica, executando-o e tendo a oportunidade de entender conceitos, tais como: vari\u00e1veis, comandos, recurs\u00e3o, atrav\u00e9s de um processo de simula\u00e7\u00e3o, sem se preocupar com os detalhes inerentes \u00e0 implementa\u00e7\u00e3o comprometida com caracter\u00edsticas espec\u00edficas da m\u00e1quina, comumente encontrados nas linguagens de programa\u00e7\u00e3o convencionais.", "num_citations": "58\n", "authors": ["1511"]}
{"title": "A comparative study on software reuse metrics and economic models from a traceability perspective\n", "abstract": " A fundamental task when employing software reuse is evaluating its impacts by measuring the relation of reused and developed software, the cost for obtaining reuse and the cost avoided by reusing software during development and maintenance. Different reuse related metrics exist in the literature, varying from strictly code-based metrics, aiming to measure the amount of code reused in a product, to more elaborate cost-based metrics and models, aiming to measure the costs involved in reuse programs and to evaluate the impacts of reuse in software development. Although reuse is commonly claimed to benefit maintenance, the traceability problem is still neglected on the reuse metrics arena, despite its great impacts on software maintenance. Reuse metrics may be used as important support tools for dealing with the traceability between reused assets and their clients. The goal of this work is to evaluate the\u00a0\u2026", "num_citations": "56\n", "authors": ["1511"]}
{"title": "A software component quality model: A preliminary evaluation\n", "abstract": " Component-based software development is becoming more generalized, representing a considerable market for the software industry. The perspective of reduced development costs and shorter life cycles acts as a motivation for this expansion. However, several technical issues remain unsolved before software component's industry reaches the maturity exhibited by other component industries. Problems such as the component selection by their integrators and the uncertain quality of third-party developed components, bring new challenges to the software engineering community. By the other hand, the software components certification area is still immature and further research is needed in order to obtain well-defined standards for certification. In this way, we aim to propose a component quality model, describing consistent and well-defined characteristics, quality attributes and related metrics for the components\u00a0\u2026", "num_citations": "55\n", "authors": ["1511"]}
{"title": "Towards an approach for service-oriented product line architectures\n", "abstract": " Service-Oriented Architecture (SOA) has appeared as an emergent approach for developing distributed applications as a set of self-contained and business-aligned services. SOA aids solving integration and interoperability problems and provides a better Information Technology (IT) and business alignment, giving more flexibility for the enterprises. However, SOA does not provide support for high customization and systematic planned reuse to develop applications that fit customer individual needs. In this paper, we propose an approach in which SOA applications are developed as Software Product Lines (SPLs). Thus, the term Service-Oriented Product Line is used for serviceoriented applications that share common parts and vary in a regular and identifiable manner. In this context, high customization and systematic planned reuse are achieved through managed variability and the use of a two life-cycle model as in SPL engineering: core assets and product development. We conclude the paper with an initial case study in the conference management domain explaining the steps of our approach.", "num_citations": "53\n", "authors": ["1511"]}
{"title": "A software component quality framework\n", "abstract": " One of the major problems with Component-Based Software Engineering (CBSE) is the quality of the components used in a system. The reliability of a component-based software system depends on the reliability of the components that is made of. In CBSE, the proper search, selection and evaluation process of components is considered the cornerstone for the development of any effective component-based system. So far the software industry was concentrated on the functional aspects of components, leaving aside the difficult task of assessing their quality. In this way, we propose a software component quality framework to evaluate the quality of software components in an efficient way. Moreover, an experimental study was accomplished in order to evaluate the viability of the proposed framework.", "num_citations": "46\n", "authors": ["1511"]}
{"title": "Adopting software product lines: A systematic mapping study\n", "abstract": " Context: The benefits of taking a product line approach in order to achieve significant reductions in cost and time to market and, at the same time, increasing the quality has encouraged product line adoption. Objective: In this context, this study focuses on some SPL adoption aspects and has the following goals: investigate state-of-the-art SPL adoption, synthesize available evidence, and identify gaps between required strategies, organizational structures, maturity level and existing adoption barriers, available in the literature. Method: A systematic mapping study was undertaken to analyze the important aspects that should be considered when adopting SPL approaches. A set of four questions were defined in which 34 primary studies were evaluated. Results: A total of 34 primary studies were considered. They reported four different strategies (Incremental, Big Bang, Tactical and Pilot project), however there is\u00a0\u2026", "num_citations": "39\n", "authors": ["1511"]}
{"title": "RiDE: The RiSE process for domain engineering\n", "abstract": " A reutiliza\u00e7\u00e3o de software   o processo de criar sistemas atrav\u00e9s de artefatos existentes, ao inv\u00e9s de desenvolv\u00ea-los do zero   \u00e9 um aspecto chave para melhorias em qualidade e produtividade no desenvolvimento de software. Qualidade pode ser melhorada por reutilizar todas as formas de experi\u00eancia, incluindo produtos e processos. Por outro lado, a produtividade pode ser aumentada por utilizar experi\u00eancias existentes. Entretanto, esse processo \u00e9 mais efetivo quando sistematicamente planejado e gerenciado no contexto de um dom\u00ednio especifico, onde as aplica\u00e7\u00f5es compartilham funcionalidades comuns. Neste cen\u00e1rio, a Engenharia de Dom\u00ednio   a atividade de coletar, organizar e armazenar experi\u00eancias anteriores na constru\u00e7\u00e3o de sistemas ou partes de sistemas, de um dom\u00ednio particular, na forma de artefatos reutiliz\u00e1veis   tem sido vista como um facilitador para obter os benef\u00edcios desejados. No entanto, os processos existentes de engenharia de dom\u00ednio apresentam problemas cruciais, como, por exemplo: eles n\u00e3o cobrem os tr\u00eas passos da engenharia de dom\u00ednio, a saber, an\u00e1lise do dom\u00ednio, projeto do dom\u00ednio e implementa\u00e7\u00e3o do dom\u00ednio; al\u00e9m de n\u00e3o definir de forma sistem\u00e1tica as atividades, as sub-atividades, os pap\u00e9is, as entradas e as sa\u00eddas de cada passo. Assim, este trabalho define um processo sistem\u00e1tico para realizar a engenharia de dom\u00ednio, baseado no estado da arte da \u00e1rea, incluindo os passos de an\u00e1lise, projeto e implementa\u00e7\u00e3o do dom\u00ednio. Essa defini\u00e7\u00e3o foi embasada por surveys detalhados sobre reutiliza\u00e7\u00e3o de software e processos de reutiliza\u00e7\u00e3o, cobrindo pesquisas informais, estudos emp\u00edricos e\u00a0\u2026", "num_citations": "36\n", "authors": ["1511"]}
{"title": "A import\u00e2ncia de avaliar a usabilidade dos jogos: a experi\u00eancia do Virtual Team\n", "abstract": " Atualmente, os jogos v\u00eam se destacando n\u00e3o apenas como ferramenta de puro entretenimento, mas tamb\u00e9m como poderoso recurso de ensinoaprendizagem. Este potencial se deve principalmente ao fator motivacional que os jogos despertam em seus usu\u00e1rios-jogadores. No entanto, se sua usabilidade n\u00e3o estiver adequada, a motiva\u00e7\u00e3o do jogador ser\u00e1 comprometida e este potencial pode se perder. Neste contexto, este artigo busca dividir a experi\u00eancia vivenciada no Projeto SmartSim quanto \u00e0 cria\u00e7\u00e3o e teste da interface de seu jogo s\u00e9rio, o Virtual Team. Discorre sobre a interface desenvolvida para o jogo, bem como a import\u00e2ncia de se adotar um processo de usabilidade, testando a interface junto ao usu\u00e1rio, Sendo este processo essencial para identificar problemas n\u00e3o percebidos pela equipe de cria\u00e7\u00e3o do jogo.", "num_citations": "35\n", "authors": ["1511"]}
{"title": "Alkyl chromone and other compounds from Clusia nemorosa\n", "abstract": " From Clusia nemorosa a new alkyl chromone, 5,7-dihydroxy-2-(n-heptaeicosanyl)chromone, and n-octacosanoyl ferulate were isolated, besides kaempferol, friedelin, friedelin-3\u03b2-ol, \u03b2-sitosterol glucoside and betulinic acid. Their structures were elucidated through analysis of spectroscopic data.", "num_citations": "34\n", "authors": ["1511"]}
{"title": "Feature interaction in software product line engineering: A systematic mapping study\n", "abstract": " Context: Software product lines (SPL) engineering defines a set of systems that share common features and artifacts to achieve high productivity, quality, market agility, low time to market, and cost. An SPL product is derived from a configuration of features which need to be compounded together without violating their particular specifications. While it is easy to identify the behavior of a feature in isolation, specifying and resolving interactions among features may not be a straightforward task. The feature interaction problem has been a challenging subject for decades.Objective: This study aims at surveying existing research on feature interaction in SPL engineering in order to identify common practices and research trends.Method: A systematic mapping study was conducted with a set of seven research questions, in which the 35 studies found are mainly classified regarding the feature interaction solution presented\u00a0\u2026", "num_citations": "33\n", "authors": ["1511"]}
{"title": "Towards a software component quality model\n", "abstract": " Component based software development is becoming more generalized, representing a considerable market for the software industry. The perspective of reduced development costs and shorter life cycles acts as a motivation for this expansion. However, several technical issues remain unsolved before software component\u2019s industry reaches the maturity exhibited by other component industries. Problems such as the component selection by their integrators, the component catalogs formalization and the uncertain quality of third-party developed components, bring new challenges to the software engineering community. In this sense, this paper presents a brief survey on software component certification area, analyzing its lacks and further directions. Through this study, we propose a component quality model, describing consistent and well-defined characteristics for the components evaluation.", "num_citations": "32\n", "authors": ["1511"]}
{"title": "Applying a semantic layer in a source code search tool\n", "abstract": " A fundamental principle for reusing software assets is providing means to access them. Information retrieval mechanisms assisted by semantic initiatives, play a very important role in finding relevant reusable assets. In this context, this paper presents a semantic search tool in order to improve the precision of search returns. Furthermore, the requirements, the decomposition of architectural module and aspects of implementation are presented.", "num_citations": "31\n", "authors": ["1511"]}
{"title": "An Agile Scoping Process for Software Product Lines.\n", "abstract": " The constant changes and the search for new benefits in the software industry make possible the emergence of new research areas. In this context, a trend that has presented important benefits is the area of agile software product lines. Software Product Lines (SPL) and Agile Methods (AM) both search to satisfy the customer, increase quality and decrease timeto-market and costs. The integration between SPL and AM is a challenge, but can increase the benefits that these approaches offer. In this sense, this paper proposes an agile scoping process for SPL.", "num_citations": "29\n", "authors": ["1511"]}
{"title": "Income: Integrated cost model for product line engineering\n", "abstract": " A large number of software organizations are adopting the software product line approach in their reuse program. One fundamental factor to evaluate cost-benefit of this approach is the practical use of cost models to estimate if an investment is worthwhile for a family of products. This paper analyzes the most significant cost models for product line engineering and it highlights the set of features that makes an effective model. This work also presents an integrated cost model for product line engineering with its foundations and elements. At the end, is presented a discussion over the results of a case study where the model was applied.", "num_citations": "29\n", "authors": ["1511"]}
{"title": "Software product line scoping and requirements engineering in a small and medium-sized enterprise: An industrial case study\n", "abstract": " Software product line (SPL) engineering has been applied in several domains, especially in large-scale software development. Given the benefits experienced and reported, SPL engineering has increasingly garnered interest from small to medium-sized companies. It is possible to find a wide range of studies reporting on the challenges of running a SPL project in large companies. However, very little reports exist that consider the situation for small to medium-sized enterprises and these studies try develop universal truths for SPL without lessons learned from empirical evidence need to be contextualized. This study is a step towards bridging this gap in contextual evidence by characterizing the weaknesses discovered in the scoping (SC) and requirements (RE) disciplines of SPL. Moreover, in this study we conducted a case study in a small to medium sized enterprises (SMEs) to justify the use of agile methods\u00a0\u2026", "num_citations": "28\n", "authors": ["1511"]}
{"title": "Improving digital game development with software product lines\n", "abstract": " Introducing reuse and software product line (SPL) concepts into digital game-development processes isn't a straightforward task. This work presents a systematic process for bridging SPLs to game development, culminating with domain-specific languages and generators streamlined for game subdomains. The authors present a game SPL for arcade games as a case study to illustrate and evaluate their proposed guidelines. This article is part of a special issue on games.", "num_citations": "26\n", "authors": ["1511"]}
{"title": "A case study in software product lines-the case of the mobile game domain\n", "abstract": " Software product lines (SPL) processes are gradually being adopted by many companies in several domains. A particular domain where the adoption of such processes may bring relevant benefits is the mobile applications domain given the big diversity of handsets, although the characteristics of this domain usually create barriers to apply these processes in practice, such as, restrictions of memory size and processing power and different API implementations by different manufacturers. In this context, this work presents briefly a practical approach to implement core assets in a SPL applied to the mobile game domain combining the good practices from the already published processes and describes in details a case study performed with the application of this approach, based on three different adventure mobile games. The results of the case study have shown the approach can be suitable for the domain in question.", "num_citations": "24\n", "authors": ["1511"]}
{"title": "Towards a software component certification framework\n", "abstract": " The growing use of commercial components in large systems makes selection and evaluation of components an essential activity. Many organizations struggle in their attempts to select an appropriate component in their system. In this way, we propose a certification framework to evaluate the quality of software components in an efficient way.", "num_citations": "24\n", "authors": ["1511"]}
{"title": "A systematic review on software product lines scoping\n", "abstract": " Software Product Lines are a systematic way to achieve the benefits related with large-scale reuse. In Software Product Lines, an important phase is the Scoping, which is essential for the success of the product lines. It aims to determine the viability of a product line, identifying aspects such as: products that will constitute the product line, risks, reuse potential and costs for implementation of the core assets. However, some of their important aspects are not well-defined in the existent approaches, as the customization of the Scoping according to the context in which is inserted. In this context, this paper presents a systematic literature review in order to investigate the state-of-the-art, trying to summarize the current scenario, identifying best practices, challenges and limitations.", "num_citations": "23\n", "authors": ["1511"]}
{"title": "Testing software product lines\n", "abstract": " Two studies of testing practices for software product lines identify gaps between required techniques and existing approaches in the available literature. This Web extra offers extra details for the main article (specifically, the bibliography for the two studies described).", "num_citations": "22\n", "authors": ["1511"]}
{"title": "Evaluating domain design approaches using systematic review\n", "abstract": " Software Product Lines are growing as a systematic way for achieving reuse in software companies. It involves three processes: domain engineering, application engineering and management. In domain engineering, assets that will be reused by products are developed, composing the core assets. In this context, the product line architecture, also called Domain Specific Software Architecture (DSSA), is an essential member in the collection of core assets. A good DSSA increases the probability of the success of applications that will be instantiated from it. In order to design a good DSSA, a process should be followed to manage domain\u2019s variability and commonality. On the other hand, companies that are moving from single system development to software product lines need systematic activities for taking advantage of existing assets to develop a DSSA. Thus, this paper presents a systematic review on\u00a0\u2026", "num_citations": "22\n", "authors": ["1511"]}
{"title": "A software component maturity model (SCMM)\n", "abstract": " Component-based software development (CBSD) is focused on assembling existing components to build a software system, with a potential benefit of delivering quality systems more fast, thus, increasing its productivity. These benefits are just achieved if the software components used to compose the software system were previously evaluated in order to establish a certain quality level. However, there are a set of different risk- levels associated to each software component, depending, mainly, on its application domain. In this way, we aim to propose a software component maturity model in order to assure quality for each kind of software component risk-level, describing its levels, techniques adopted and the guidelines for selecting evaluation levels. A preliminary case study was accomplished in order to prove its real applicability and viability.", "num_citations": "22\n", "authors": ["1511"]}
{"title": "A study on service identification methods for software product lines\n", "abstract": " The combination of service-orientation and software product line engineering, called Service-Oriented Product Line Engineering (SOPLE) have received attention by researchers and practitioners in the last years, and these areas can address issues of each other. One service-orientation issue is service identification. It consists of determining candidate services to a service-oriented environment based on pre-existing software artifacts, eg, business process, source code, and so on. In order to provide a systematic identification of services, there are many available service identification methods in the literature, regarding different understanding of services, goals, and techniques. Due to this heterogeneity, this paper presents an in-depth comparison of service identification methods as well as a recommendation of the most suitable ones in the SOPLE context. This work can help the decision making of the most suitable\u00a0\u2026", "num_citations": "20\n", "authors": ["1511"]}
{"title": "Designing a set of service-oriented systems as a software product line\n", "abstract": " Software reuse is crucial for organizations interested in productivity gains and software quality. In this context, Software Product Line (SPL) and Service-Oriented Architecture (SOA) are two reuse strategies that share common goals and can be used together with the purpose of increasing reuse and producing service-oriented systems, customizable to specific customers, faster and cheaper than creating individual systems. In this sense, this work investigates the problem of designing software product lines using service-oriented architectures, and presents a systematic approach to design product lines based on services. The approach provides guidance to identify, design and document components, services, service compositions and their associated communication flows. In addition, an initial experimental study performed with the intention of validating and refining the approach is also depicted demonstrating that\u00a0\u2026", "num_citations": "20\n", "authors": ["1511"]}
{"title": "SOPLE-DE: An approach to design service-oriented product line architectures\n", "abstract": " Software reuse is crucial for enterprises interested in software quality and productivity gains. In this context, Software Product Line (SPL) and Service-Oriented Architecture (SOA) are two reuse strategies that share common goals and can be used together to increase reuse and produce service-oriented systems faster, cheaper and customizable to specific customers. In this sense, this work investigates the problem of designing software product lines using service-oriented architectures, and presents a systematic approach to design software product lines based on services. The proposed approach provides guidance to identify, design and document architectural components, services, service compositions and their associated flows. In addition, an initial experimental study performed with the intention of validating and refining the approach is also depicted demonstrating that the proposed solution can be\u00a0\u2026", "num_citations": "19\n", "authors": ["1511"]}
{"title": "25 years of software engineering in brazil: an analysis of sbes history\n", "abstract": " The application of Software Engineering involves a systematic approach to the analysis, design, assessment, implementation, test, maintenance and reengineering of software. It first appeared in the 1968 NATO Software Engineering Conference as means to overcome the software crisis. This study aims to investigate how the Software engineering area is evolving, by analyzing the 24 editions of Brazilian Symposium on Software Engineering (SBES), and understanding which is the impact of international research in this event. A scoping study was performed to figure out how the SE area is evolving and if it suffers influences from international research. We found 512 studies over the 24 SBES editions, which were analyzed and discussed. Based on the analysis, we observed that in the first years there were a few empirical studies; most of them were of theoretical nature. The industry participation and interest still\u00a0\u2026", "num_citations": "18\n", "authors": ["1511"]}
{"title": "A requirements engineering process for software product lines\n", "abstract": " A Requirements Engineering (RE) process is important to reduce the risks involved in a SPL, providing correct requirements development and management. On the other hand, there is a key challenge in RE for SPL, which involves an adequate solution to manage variabilities, integrating them and linking decisions in different assets for making easy the products derivation. Thus, the SPL development should be supported by an appropriate RE process for its context. This work defines a systematic requirements engineering process, describing activities, tasks, inputs, outputs, roles and guidelines for the SPL context, in an usable, effective and efficient way.", "num_citations": "18\n", "authors": ["1511"]}
{"title": "Using a multi-method approach to understand Agile software product lines\n", "abstract": " ContextSoftware product lines (SPLs) and Agile are approaches that share similar objectives. The main difference is the way in which these objectives are met. Typically evidence on what activities of Agile and SPL can be combined and how they can be integrated stems from different research methods performed separately. The generalizability of this evidence is low, as the research topic is still relatively new and previous studies have been conducted using only one research method.ObjectiveThis study aims to increase understanding of Agile SPL and improve the generalizability of the identified evidence through the use of a multi-method approach.MethodOur multi-method research combines three complementary methods (Mapping Study, Case Study and Expert Opinion) to consolidate the evidence.ResultsThis combination results in 23 findings that provide evidence on how Agile and SPL could be combined\u00a0\u2026", "num_citations": "15\n", "authors": ["1511"]}
{"title": "25 years of software engineering in Brazil: Beyond an insider's view\n", "abstract": " The software engineering area is facing a growing number of challenges due to the continuing increase in software size and complexity. The challenges are addressed by the very relevant and high quality publications of the Brazilian Symposium on Software Engineering (SBES), in the past 25 editions. This article summarizes the findings from two different mapping studies about these 25 SBES editions. It also reports the results of an expert opinion survey with the most important Brazilian researchers in the software engineering (SE) area. The survey reinforces the findings of the mapping studies. It also provides guidance for future research. In addition, the studies report several findings that confirmed the validity of the research methods applied. All of these findings are important input to the current Brazilian SE scenario. Our findings also suggest that greater attention should be given to the SE area, by improving\u00a0\u2026", "num_citations": "15\n", "authors": ["1511"]}
{"title": "Extending the RiPLE-DE process with quality attribute variability realization\n", "abstract": " Software product lines engineering is a viable way to achieve the productivity gains desired by companies. Product line architecture must benefit from commonalities among products in the family and enable the variability among them. The aspect of variability in quality attributes has been neglected or ignored by most of the researchers as attention has been mainly put in functional variability. This paper describes an architecture and design process for software product lines that can properly deal with quality attribute variability. The proposed approach enhances the RiPLE-DE process for software product line engineering with activities and guidelines for quality attribute variability. An initial experimental study is presented to characterize and evaluate the proposed process enhancements.", "num_citations": "15\n", "authors": ["1511"]}
{"title": "Component quality assurance: Towards a software component certification process\n", "abstract": " The griming use of commercial components in large systems makes selection and evaluation of components an essential activity. Many organizations struggle in their attempts to select an appropriate component in their system. In this way, we propose a component certification process to evaluate the quality of software components in an efficient way.", "num_citations": "15\n", "authors": ["1511"]}
{"title": "A Mapping Study on Software Product Lines Testing Tools.\n", "abstract": " The benefits of using a software testing tool in order to achieve significant reductions in cost and time to market, and, at the same time, increasing the quality has encouraged the adoption of testing tools both in single systems and product lines. In this context, this study focuses on the following goals: analyze how the available tools are supporting the Software Product Lines (SPL) Testing Process, investigate the state-of-theart on single system and SPL testing tools, synthesize available evidence, and identify gaps among the tools, available in the literature. A mapping study was undertaken to analyze important aspects that should be considered when adopting testing tools. A set of four research questions were defined in which 33 studies, dated from 1999 to 2011, were evaluated. From the total of 33 studies considered, 24 of them described single system testing tools and the other 9 described SPL testing tools. However, there is insufficient information about publications describing tools used in the industry. There is no tool suitable to all testing levels of a SPL, researchers need to consider the feasibility of adapting existing tools or constructing new tools.", "num_citations": "14\n", "authors": ["1511"]}
{"title": "Software product lines adoption in small organizations\n", "abstract": " ContextAn increasing number of studies has demonstrated improvements in product quality, and time-to-market reductions when Software Product Line (SPL) engineering is introduced. However, despite the amount of successful stories about the use of SPL engineering, there is a lack of guidelines to support its adoption, especially to small-sized software organizations.ObjectiveThe aim of this study is to investigate SPL adoption in small organizations and to improve the generalization of evidence through the use of a multi-method approach.MethodThis paper reports on a multi-method study, where results from a mapping study, industrial case study and also expert opinion survey were considered to identify a set of findings.ResultsThe study provides a better understanding of SPL adoption in the context of small to medium-sized organizations, by documenting evidence observed during the transition from single\u00a0\u2026", "num_citations": "13\n", "authors": ["1511"]}
{"title": "A survey on software variability management approaches\n", "abstract": " Variability Management (VM) is a key practice in the development of variant-rich systems. Over the years, attention has been paid to VM approaches adopted by traditional software product lines. The increasing demand for dynamic and highly configurable systems, however, calls for a closer look at the approaches used to develop these systems. We therefore conducted a survey with practitioners from organizations developing variant-rich systems in order to characterize the state of the practice. We also wanted to identify factors that might influence the adoption of specific VM approaches as well as the perception of problems/difficulties posed by those. We analyzed the answers of 31 respondents from thirteen countries and found that there is a correlation between the business domain and the adopted VM approaches. With regard to the problems/difficulties, the difficulty of assuring the quality of maintenance due to\u00a0\u2026", "num_citations": "13\n", "authors": ["1511"]}
{"title": "The importance of documentation, design and reuse in risk management for SPL\n", "abstract": " Software Product Lines (SPL) is a methodology focusing on systematic software reuse, multiple benefits have been reported as a result of this type of software development. However, establishing a SPL is not a simple task. It is a challenging activity raising many challenges for engineering and management. This research aims to manage the risks during SPL development to provide traceability among them. For this, it is important that the risks are documented and there is a common design related to them. As solution, we identified the strengths and weakness in SPL development and the importance in designing of communication for risk documentation.", "num_citations": "13\n", "authors": ["1511"]}
{"title": "Software metrics: a survey\n", "abstract": " Software metrics were defined to be a method to quantify attributes in software processes, products and projects. The software metrics area has a lack of reports about metrics usage and real applicability of those metrics. In this sense, the main goal of this paper is briefing review research in software metrics regarding source code in order to guide our research in software quality measurement. The metrics review is organized in two ages: before 1991, where the main focus was on metrics based on the complexity of the code; and after 1992, where the main focus was on metrics based on the concepts of Object Oriented (OO) systems (design and implementation). The main contribution of this work is a large overview about software code metrics that can show us the evolution in this area, and a critical analysis about the main metrics founded on the literature.", "num_citations": "13\n", "authors": ["1511"]}
{"title": "Evidence of software inspection on feature specification for software product lines\n", "abstract": " In software product lines (SPL), scoping is a phase responsible for capturing, specifying and modeling features, and also their constraints, interactions and variations. The feature specification task, performed in this phase, is usually based on natural language, which may lead to lack of clarity, non-conformities and defects. Consequently, scoping analysts may introduce ambiguity, inconsistency, omissions and non-conformities. In this sense, this paper aims at gathering evidence about the effects of applying an inspection approach to feature specification for SPL. Data from a SPL reengineering project were analyzed in this work and the analysis indicated that the correction activity demanded more effort. Also, Pareto's principle showed that incompleteness and ambiguity reported higher non-conformity occurrences. Finally, the Poisson regression analysis showed that sub-domain risk information can be a good\u00a0\u2026", "num_citations": "12\n", "authors": ["1511"]}
{"title": "Cores assets development in software product lines-towards a practical approach for the mobile game domain\n", "abstract": " The most aimed objectives in software engineering are basically high productivity, with high quality at low costs and one possible way for achieving these objectives is establishing software reuse\u2013the process of creating software systems from existing software rather than building them from scratch. In this context, one approach that can enable software reuse in practice is Software Product Line (SPL)\u2013a set of software-intensive systems sharing a common, managed set of features that are developed from a common set of reusable core assets in a prescribed way. A particular domain where the adoption of such approach may bring relevant benefits is the mobile game domain mainly because the games need to run in a big diversity of handsets and there is a big number of games of the same type being developed with common features.However, the characteristics of the mobile game domain usually create barriers to apply SPL processes in practice, such as, restrictions of memory and application size and different API implementations by different manufacturers. In addition, the current SPL processes still lack of details on the phases related to core assets implementation, making it difficult to properly handle the mentioned characteristics of the domain in question.", "num_citations": "12\n", "authors": ["1511"]}
{"title": "Software engineering in startups: a single embedded case study\n", "abstract": " Context - Software engineering practices are chal-lenging activities in the startups' context due their limited resources and need to create high-tech and innovative products. The challenge becomes even bigger when taking into consideration the startups' search for highly scalable business models. Problem - Since they cannot rely on such a heavyweight software processes they need to resort to alternative practices. Goal - Thus, the main goal of this study is to contribute to the understanding of the software startups' practices. Method - In this sense, we conducted a single embedded case study in four local software startups incubated/first born in an academic environment. The case study consisted of semi-structured interviews, questionnaires, non-participative observations, and archiving data covering the software engineering practices. Results - The results allowed us to build an Academic Startup Model to capture\u00a0\u2026", "num_citations": "11\n", "authors": ["1511"]}
{"title": "An experimental study on requirements engineering for software product lines\n", "abstract": " Requirements engineering (RE) activities in software product lines (SPL) are more complex, because they involve more products and stakeholders, and require attention to variabilities and commonalities. Thus, the SPL development should be supported by an appropriate REprocess for its context, which assures usability, effectiveness and efficiency in its activities. In order to analyze these issues, an experimental study was conducted to evaluate the viability of a proposal process. The results of the study showed that the use of an appropriate support tool increases the efficiency of the process. We also observed that subjects' experience in industrial projects and RE influences the usability of the process.", "num_citations": "10\n", "authors": ["1511"]}
{"title": "An approach for component testing and its empirical validation\n", "abstract": " The lack of information limits component consumers to understand candidate components sufficiently in a way they can check if a given component fulfills its goal. Thus, this paper presents an approach to support component testing aiming to reduce the lack of information between component producers and component consumers. Additionally, the approach is covered by a CASE tool integrated in the development environment. An experimental study was performed in order to evaluate its efficiency and difficulties of its use. The experimental study indicates that the approach is viable and the tool support provides effort reduction to component producers and component consumers.", "num_citations": "10\n", "authors": ["1511"]}
{"title": "A Case Study in Software Product: Lines An Educational Experience\n", "abstract": " In order to attend the industry needs, it is necessary to provide more practical issues of real software development in the academic curricula. This paper describes an educational experience in a post-graduation course at Federal University of Pernambuco, Brazil, involving software reuse. The course's goals were to provide the state-of-the-art of software development with reuse, and the state-of-the-practice developing the Software Product Line (SPL) approach based on a real project. Moreover, we describe the SPL process steps and the educational methodology applied, as well as the projectpsilas difficulties and lessons learned, along with possible improvements for the course extracted from studentspsila feedback during the course and the project. We also expect that this work can be used as a reference material for other universities planning on teaching software reuse or SPL courses.", "num_citations": "10\n", "authors": ["1511"]}
{"title": "Experimenting with information retrieval methods in the recovery of feature-code SPL traces\n", "abstract": " Context                 The information retrieval research provides alternatives to recover traces from existing software information. In the software product line (SPL) engineering context, further research on information retrieval methods is required to explore the existence of products\u2019 source code and support the SPL adoption by providing traceability information.                                               Objective                 This work evaluates the methods\u2019 retrieval quality targeting the extraction of feature-code trace links in a set of variant-rich software development projects.                                               Method                 We propose a research method comprising two experiments with five information retrieval methods (Classic vector, Latent semantic indexing, Neural network, Extended boolean and BM25), applied to forty-one projects. The SPLTrac suite automates the research operation, using the information retrieval\u00a0\u2026", "num_citations": "9\n", "authors": ["1511"]}
{"title": "Recovering the product line architecture of the apo-games\n", "abstract": " Software Product Line (SPL) engineering is a paradigm for the development of a family of products based on the systematic reuse of artifacts. Although its increasing adoption, organizations often start with a single system and use ad-hoc techniques such as clone-and-own to create new systems by performing small changes and adaptations to meet customers' needs. However, as the number of clones raises over time, it becomes a hard task to maintain and support all the systems. This scenario happened in the Apo-Games projects and adopting SPL Engineering can address these issues. Product Line Architecture (PLA) is one of the key assets to allow the success of SPL development. In this paper, we apply our approach to recover the PLA of the Apo-Games projects by using the source code of a set of Android and Java clones. We provide a set of information to support the development of the Apo-Games SPL\u00a0\u2026", "num_citations": "9\n", "authors": ["1511"]}
{"title": "A view of the landscape of dynamic software product lines\n", "abstract": " Inria - A View of the Landscape of Dynamic Software Product Lines Acc\u00e9der directement au contenu Acc\u00e9der directement \u00e0 la navigation Toggle navigation CCSD HAL HAL HALSHS TEL M\u00e9diHAL Liste des portails AUR\u00e9HAL API Data Documentation Episciences.org Episciences.org Revues Documentation Sciencesconf.org Support HAL-Inria Les publications, logiciels... des scientifiques Inria Accueil D\u00e9poser Consulter tout HAL par date de publication/r\u00e9daction par domaine par type de publication par collection arXiv les derniers d\u00e9p\u00f4ts Publications Inria Recherche Services HalTools : cr\u00e9er sa page web Haltools : export RAWEB X2Hal : import par lot Consulter les structures de recherche connues de HAL Documentation Aide en ligne de HAL V3 Derni\u00e8res \u00e9volutions de HAL V3 Documentation API HAL Ajouter des vignettes Aide en ligne Haltools Aide en ligne de X2hal OpenAccess Inria soutient la science \u2026", "num_citations": "9\n", "authors": ["1511"]}
{"title": "A software product lines system test case tool and its initial evaluation\n", "abstract": " The Software Product Lines (SPL) approach requires specific testing tools that should help to manage reusable testing assets and automate the test execution. Despite of the increasing interest by the research community regarding software testing tools, SPL still need tools to support the testing process. This work presents briefly the results of a mapping study on software testing tool and defines the requirements, design and implementation of a software product lines system test case tool, aiming at the creation and management of test assets. A controlled experiment was also conducted to evaluate the tool effectiveness.", "num_citations": "9\n", "authors": ["1511"]}
{"title": "Five years of lessons learned from the software engineering course: adapting best practices for distributed software development\n", "abstract": " Several companies around the world are using Distributed Software Development (DSD) to reduce costs and some Software Engineering courses are trying to simulate this distributed environment. This paper shows the experience faced by students during five years from the Software Engineering course performed at the Federal University of Pernambuco, Brazil, which the objective was adapting the best practices from traditional development for DSD. Course lectures and materials educate students about software engineering best practices and DSD. The students developed a project organized into a set of work assignments that could be distributed across groups. At the end they learned to communicate and collaborate with each other, and they also believed that the course was helpful to them, which justifies the low number of dropouts. Most of the students, but not all, successfully completed their projects.", "num_citations": "9\n", "authors": ["1511"]}
{"title": "Software ecosystems' architectural health: another view\n", "abstract": " Nowadays the software ecosystem health has received increasing attention as an important field for managing software ecosystems. Researchers have intensified studies in this area with the goal of assessing ecosystem health and possible causes for the success achieved. However, none of them have considered directly the effects of the software architecture on the ecosystem health. There are some architectural aspects weighting considerably on the balance of the whole ecosystem. So, software ecosystem health should be addressed based on different perspectives, aligned with novel assumptions and ways of thinking. In this paper, we exploit intersections between architecture and software ecosystem health. We consider the concept of the \"software ecosystem architectural health\" from the perspective of key areas and practices, which affect the state of the ecosystem health. We also identify some research\u00a0\u2026", "num_citations": "8\n", "authors": ["1511"]}
{"title": "Risk management in software product line engineering: a mapping study\n", "abstract": " Software Product Line (SPL) Engineering focuses on systematic software reuse, which has benefits such as reductions in time-to-market and effort, and improvements in the quality of products. However, establishing a SPL is not a simple matter, and can affect all aspects of the organization, since the approach is complex and involves major investment and considerable risk. These risks can have a negative impact on the expected ROI for an organization, if SPL is not sufficiently managed. This paper presents a mapping study of Risk Management (RM) in SPL Engineering. We analyzed a set of thirty studies in the field. The results points out the need for risk management practices in SPL, due to the little research on RM practices in SPL and the importance of identifying insight on RM in SPL. Most studies simply mention the importance of RM, however the steps for managing risk are not clearly specified. Our findings\u00a0\u2026", "num_citations": "8\n", "authors": ["1511"]}
{"title": "Codescoping: A source code based tool to software product lines scoping\n", "abstract": " Software Product Lines Engineering focuses on identifying and managing the commonalities and variabilities of a set of software products where core assets can be developed and (re)used to derive individual product variants with reduced costs. In this context, software product line scoping is the process responsible for identifying and delimiting products, features, sub-domains and existing assets of the product line where there are economical benefits to invest in reuse. Typically, product line engineers elicit scoping information from the available documentation of existing products and based on knowledge from domain experts. This is an effort-intensive task because much time is invested in workshops and interviews with the domain and system experts. Thus, in order to reduce costs and time in the scoping process, this paper proposes an approach to support the scoping process based on the existing products\u00a0\u2026", "num_citations": "8\n", "authors": ["1511"]}
{"title": "TIRT: A traceability information retrieval tool for software product lines projects\n", "abstract": " Software Product Line has proven to be an effective methodology for developing a diversity of software products at lower costs, in shorter time, and with higher quality. However, the adoption and maintenance of traceability in the context of product lines is considered a difficult task, due to the large number and heterogeneity of assets developed during product line engineering. Furthermore, the manual creation and management of traceability relations is difficult, error-prone, time consuming and complex. In this sense, Traceability Information Retrieval Tool (TIRT) was proposed in order to mitigate the maintenance traceability problem. An experimental study was performed in order to identify the viability of the proposed tool and traceability scenarios.", "num_citations": "8\n", "authors": ["1511"]}
{"title": "An integrated cost model for product line engineering\n", "abstract": " In the software development community, the process of using existing artifacts rather than building them from scratch\u2013generally known as software reuse\u2013has been advanced as a way in which the problems associated with cost and schedule overruns can be avoided. Despite the potential rewards from an effective reuse program, it appears that its large-scale adoption is not particularly prevalent. Among the factors that inhibit reuse adoption there are the economic obstacles faced by organizations, which are concerned with the cost related to develop software for reuse and with reuse. Currently, the decisions concerning large-scale reuse are often related with an economic viewpoint, since the development of software to be reusable can be considered as an investment. Moreover, the adoption of a software product line in a reuse context comes up with some inhibitors, such as the application of cost models in a restricted way, the lack of an investment analysis strategy, and the fact that a few cost models have a reuse scenario-based approach. In this context, this work presents an integrated cost model for product line engineering in order to help the decisions concerning reuse investment. The foundations of the model were based on an extensive survey on cost models for software reuse and its extension to the product line approach. The model presents the definition of a set of cost and benefits functions, the description of reuse scenarios for product line engineering, and an investment analysis strategy. In addition, a simulation model based on the Monte Carlo method was proposed for simulating the reuse scenarios. Finally, this work discusses\u00a0\u2026", "num_citations": "8\n", "authors": ["1511"]}
{"title": "Investigating the variability impact on the recovery of software product line architectures: an exploratory study\n", "abstract": " The Product Line Architecture (PLA) of a Software Product Line (SPL) is the core architecture that represents a high-level design for all the products of an SPL, including variation points and variants. If PLA documentation is missing, it can be recovered by reverse engineering the products. The recovered PLA is a relevant asset for developers and architects, that can be used to drive specific activities of SPL development and evolution, such as, understanding its structure and its variation points, and assessing reuse. This paper presents an exploratory study that investigated the effectiveness of recovered PLAs to address variability identification and support reuse assessment. We recovered the PLA of 15 open source SPL projects using the PLAR, a tool that supports PLA recovery and assessment based on information extracted from SPL products' source code. For each project, reuse assessment was supported by\u00a0\u2026", "num_citations": "7\n", "authors": ["1511"]}
{"title": "Risk Management in software engineering: A scoping study\n", "abstract": " Background - Risk Management (RM) practices are usually established towards avoiding or minimizing problems, likely to occur during software development. It can be stated as the task of analyzing and managing the impact of every important action to be performed in the project. Aim - In the context of RM practices, we developed a scoping study, aiming at analyzing the current scenario of RM practices in software development. Method - We analyzed 74 studies published by the most important venues published up to the year 2011. Based on the analyzed dataset, we sketched a set of useful practices for applying RM in software projects. Results - The analysis indicate that most of the studies subjectively describe ways to evaluate risks, instead of providing readers with details on how RM is to be performed. Conclusions - Such findings points out to the need of further research in the field of RM, specially due to its\u00a0\u2026", "num_citations": "7\n", "authors": ["1511"]}
{"title": "A component quality assurance process\n", "abstract": " One of the major problem with Component-Based Software Engineering (CBSE) is the quality of the components used in a system. The reliability of a component-based software system depends on the reliability of the components that is made of. In CBSE, the proper search, selection and evaluation process of components is considered the cornerstone for the development of any effective component-based system. So far the software industry was concentrated on the functional aspects of components, leaving aside the difficult task of assessing their quality. In this way, we propose a component certification process to evaluate the quality of software components in an efficient way.", "num_citations": "7\n", "authors": ["1511"]}
{"title": "A Case Study about Startups' Software Development Practices: A Preliminary Result\n", "abstract": " Recently software startups have been the focus of intense research, especially in the Software Engineering community. However, we need more empirical evidence that addresses how software startups perform their software development practices. This paper presents a case study of software startups to understand their software development practices. We conducted a multiple case study in ten software startups, incubated in industrial environments at All Saints Bay Ecosystem. The case study consisted of questionnaires, semi-structured interviews, non-participative observations, and archiving data analyses covering software development practices. The preliminary results allowed us to build an initial industrial startup model capturing the software startups' practices and the relationship among them. Early-stage startups do not adopt any software development methodology in its completeness. Instead, they work\u00a0\u2026", "num_citations": "6\n", "authors": ["1511"]}
{"title": "Software Reuse and Product Line Engineering\n", "abstract": " Systematic Software Reuse is one of the most effective software engineering approaches for obtaining benefits related to productivity, quality, and cost reduction. In this chapter, we discuss its origins and motivations, obstacles, its success and failure aspects, and future directions. In addition, we present the main ideas and important directions related to Software Product Lines, a key reuse approach.", "num_citations": "6\n", "authors": ["1511"]}
{"title": "Investigating the recovery of product line architectures: an approach proposal\n", "abstract": " Due to the complexity of managing architectural variability, maintaining the Product Line Architecture (PLA) up-to-date and synchronized with the project source code is a key challenge. Moreover, allow the variability traceability in architectural level of large-scale projects is a costly task. The systematic use of Software Architecture Recovery (SAR) techniques enables PLA recovery and keeps the PLA aligned with development. In this context, we present an initial proposal that consists of an approach to recover PLAs based on SAR techniques. We performed literature reviews and exploratory studies to investigate the relationship between SAR and PLA to identify gaps and define state-of-the-art. Learn how to combine SAR and PLA is an important strategy to address some issues of PLA design. We identified that few studies address architectural variability and provide empirical evaluation For this reason\u00a0\u2026", "num_citations": "6\n", "authors": ["1511"]}
{"title": "Initial evidence for understanding the relationship between product line architecture and software architecture recovery\n", "abstract": " Context: Over the years, the interest on software architecture recovery has increased. Due to software product line inherent complexity, the recovery of product line architecture is crucial to alleviate difficulties and enable benefits during the SPL development. Objective: In order to gather data and evidence about the relationship between product line architecture and software architecture recovery, (Method:) we performed a literature survey using some steps of systematic literature review method and an exploratory study. Results: We identified the appearance of more elaborated studies over the years and the majority of solution proposals are used to recover the architecture from legacy systems source code to provide the SPL reference architecture. Conclusion: Most of the studies presented solution proposal combined with case studies. But, only a few of them address empirical evaluation. With the software\u00a0\u2026", "num_citations": "6\n", "authors": ["1511"]}
{"title": "A systematic SOA-based architecture process\n", "abstract": " During recent years, the notion of software architecture has emerged as the appropriate level for dealing with software quality. This sub-discipline of the software engineering has a several foundations that characterize a set of aspects in the architecture processes, such as views-oriented description, quality attributes orientation and architecture evaluation. Service-Oriented Architecture (SOA) emerged as a type of software architecture to build systems through the composition of services. On the one hand, the traditional architecture processes do not comprise some SOA features. On the other hand, the available SOA approaches do not fulfill all the software architecture foundations. In this sense, this paper proposes a systematic SOA-based architecture process that complains the main software architecture foundations and SOA features in order to guide the architects in the construction of a software architecture description.", "num_citations": "6\n", "authors": ["1511"]}
{"title": "Non-functional properties in software product lines: A reuse approach\n", "abstract": " Software Product Line Engineering (SPLE) emerges for software organizations interested in customized products at reasonable costs. Based on the selection of features, stakeholders can derive programs satisfying a range of functional properties and non-functional ones. The explicit definition of Non-Functional Properties (NFP) during software configuration has been considered a challenging task. Dealing with them is not well established yet, neither in theory nor in practice. In this sense, we present a framework to specify NFP for SPLE and we also propose a reuse approach that promotes the reuse of NFP values during the product configuration. We discuss the results of a case study aimed to evaluate the applicability of the proposed work.", "num_citations": "5\n", "authors": ["1511"]}
{"title": "Software Product Lines System Test Case Tool: A Proposal.\n", "abstract": " Nowadays the decision whether to work with Software Product Lines (SPL) or not becomes a binding requirement for the strategic planning of companies. Learning how to choose the ideal tools to test a SPL is beneficial for companies in this planning process. Even though the ascending number of available software engineering testing tools, SPL testing lacks specific tools capable of supporting the SPL Testing Process and managing the variability of test assets. This paper evaluates how to reduce the effort during the SPL Testing Process and consequently, how to make the variability of test assets manageable. We propose a software product line testing tool to build system tests from use cases that addresses challenges for SPL Testing we identified in a literature review.", "num_citations": "5\n", "authors": ["1511"]}
{"title": "A web-based cooperative e-learning environment for musical harmony domain\n", "abstract": " This article presents a virtual environment of cooperative Web-based learning to support the teaching of Music, specifically Musical Harmony. Such environment offers support to both semi-distant learning courses and strict distant learning using Internet/Web. The aim of this work is to integrate artificial and human agents in an interactive environment endowed with access to several high quality contents. These contents are available in hypermedia documents and digital library. Our main purpose is to provide learners, teachers, and computer system with opportunities to get productive pedagogical interactions. The computer system is presented here as a society of artificial tutoring agents connected to a digital library and to a hypermedia document.", "num_citations": "5\n", "authors": ["1511"]}
{"title": "Designing smart city mobile applications\n", "abstract": " The software architecture community has played a crucial role in the development of mobile software. Many of the ideas used in the design of these systems came from traditional software architecture and those ideas have contributed to mobile computing becoming ubiquitous. Mobile applications in the context of smart cities are very challenging since they need to operate within the power, processor, and capacity limitations of mobile devices, the exacting demands of life critical smart city requirements, and the constantly changing and exposed environment which may not always be trusted. Since there are no widely accepted design models for this type of software, developers must resort to primitive design decisions to meet all the needs of these applications, which takes additional time and expertise. For this reason, this study aims to investigate the design process for mobile applications in the context of smart\u00a0\u2026", "num_citations": "4\n", "authors": ["1511"]}
{"title": "Product derivation in practice\n", "abstract": " ContextThe process of constructing a product from a product line of software assets is known product derivation. An effective product derivation process is important in order to ensure that the efforts required to develop these shared assets is lower than the benefits achieved through their use. Despite its importance, relatively little work has been dedicated to the product derivation process and the strategies applied in practice. Additionally, there is a lack of empirical reports describing product derivation in industrial settings, and, in general, where these reports are available, they have been conducted as informal studies.ObjectiveOur aim is to investigate how product derivation is performed in practice.MethodWe apply a multi-case study design to two different industrial software product line projects with the goal of investigating how they derive their products in practice. The findings from our studies were individually\u00a0\u2026", "num_citations": "4\n", "authors": ["1511"]}
{"title": "A feature-based environment for digital games\n", "abstract": " Digital games can be considered as an important software development area in our society. This paper proposes the Object Oriented Feature Modeling (OOFM) usage in the digital game domain. It aims to represent and manipulate distinct game features, defined by NESI and GDS models, in a parameterized and hierarchical way. As a result, a Feature-based Environment for Digital Games (FEnDiGa) is provided, a product line platform able to integrate and adapt represented game features in different types of available game engines.", "num_citations": "4\n", "authors": ["1511"]}
{"title": "Towards an integration testing approach for software product lines\n", "abstract": " Software Product Line Engineering (SPLE) involves two development processes, core asset development and product development. From a testing perspective, such a division demands for testing issues to be considered in both processes. Although existing literature include some information on integration testing for SPLE, the usual focus goes to test assets generation, despite other several important issues that a process should assemble, such as guidelines, activities, steps, inputs and outputs, personnel, and division of responsibilities regarding the both SPLE processes. In short, the existing approaches do not present detailed solutions, which can represent an extra effort to apply an existing process into a real context. In this paper, we present a first step in the endeavor described above. In the context of the RiSE Product Line Engineering (RiPLE) framework, we propose an approach for dealing with integration\u00a0\u2026", "num_citations": "4\n", "authors": ["1511"]}
{"title": "Teaching globally distributed software development: An experience report\n", "abstract": " Companies around the world routinely distribute their software development across different sites. Students, however, rarely get a chance to learn the potential problems that arise, and the potential solutions to those problems, when conducting distributed development. It is especially difficult to simulate the situation for students when development is distributed across time zones and cultures. We have developed a course that requires teams of students at widely separated universities to collaborate with each other to complete a software development project. Instances of the course have been presented four times using combinations of five different universities, and we are seeking to create a larger pool of universities interested in and capable of presenting it. This paper discusses our goals, the characteristics of the course and the results of teaching it, with a primary result that all the universities want to and will offer\u00a0\u2026", "num_citations": "4\n", "authors": ["1511"]}
{"title": "A Component Testing Approach Supported by a CASE Tool\n", "abstract": " The lack of information limits component consumers to understand candidate components sufficiently in a way they can check if a given component fulfills its goal. Thus, this work presents an approach to support component testing aiming to reduce the lack of information between component producers and component consumers. Additionally, the approach is covered by a CASE tool integrated in the development environment.", "num_citations": "4\n", "authors": ["1511"]}
{"title": "A cost framework specification for software product lines scenarios\n", "abstract": " A large number of software organizations are adopting the software product line approach in their reuse program. One fundamental factor to evaluate cost-benefit of this approach is the practical use of cost models to estimate ROI to a family of products. This paper describes the state of art of cost models for software product lines, presenting the models evolution on the last decade. This work makes a summary of basic reuse cost models and addresses the use of reuse scenarios for ROI estimation. At the end, a framework for ROI estimation in product lines is specified through the definition of a Cost Configuration Model.", "num_citations": "4\n", "authors": ["1511"]}
{"title": "A semi-automated iterative process for detecting feature interactions\n", "abstract": " For configurable systems, features developed and tested separately may present a different behavior when combined in a system. Since software products might be composed of thousands of features, developers should guarantee that all valid combinations work properly. However, features can interact in undesired ways, resulting in failures. A feature interaction is an unpredictable behavior that cannot be easily deduced from the individual features involved. We proposed VarXplorer to inspect feature interactions as they are detected and incrementally classify them as benign or problematic. Our approach provides an iterative analysis of feature interactions allowing developers to focus on suspicious cases. In this paper, we present an experimental study to evaluate our iterative process of tests execution. We aim to understand how VarXplorer could be used for a faster and more objective feature interaction\u00a0\u2026", "num_citations": "3\n", "authors": ["1511"]}
{"title": "On the implementation of dynamic software product lines: a preliminary study\n", "abstract": " Dynamic Software Product Lines (DSPL) engineering has emerged as a promising strategy to develop Software Product Lines (SPL) that incorporate reusable and dynamically reconfigurable artifacts. The central purpose of DSPL is to handle adaptability at runtime through variability management, as well as to maximize the reuse of components. Emerging domains such as the mobile applications and software-intensive embedded systems require changes and extensions to the design in terms of both functionality and adaptation capabilities. DSPL should also deal with the unavoidable changes, which reflect both user needs and execution environments. However, the evolution capability in DSPL so far has not been investigated in depth. In this paper, were port on an exploratory study aimed at evaluating the object oriented and aspect-oriented solutions on DSPL evolutionary scenarios. In this empirical evaluation\u00a0\u2026", "num_citations": "3\n", "authors": ["1511"]}
{"title": "Software product lines adoption: an industrial case study (keynote)\n", "abstract": " The benefits of applying a software product lines (SPL) approach have encouraged small and medium-sized enterprises (SMEs) for its adoption. However, additional systematic empirical investigations are necessary in order to provide more information about the transfer and application of SPL adoption in SMEs. In this sense, this study aims to understanding on the SPL adoption in the context of small to medium-sized organization, by documenting empirical evidence observed during the transition from single-system to adopt a SPL approach. A case study was undertaken to analyze the important aspects, such as: adoption strategies, organizational structures, barriers and maturity level. It provides a better understanding on the adoption of SPL in SMEs considering different points of view and also provides new findings which sets outlines for future research.", "num_citations": "3\n", "authors": ["1511"]}
{"title": "An approach for implementing core assets in service-oriented product lines\n", "abstract": " In the combination of Software Product Lines (SPL) and Service-Oriented Architectures (SOA), a key aspect is the understanding about the use of variability mechanisms for realizing variabilities in different levels of granularity, eg, components, services, and service-compositions, addressed in a specific service technology and systematic fashion. In this paper, we propose an approach for implementing core assets in service-oriented product lines based on a well defined set of activities, tasks, inputs, outputs and roles. In order to assess the quality of the proposed approach, an initial case study conducted at the university was performed.", "num_citations": "3\n", "authors": ["1511"]}
{"title": "The Analysis Activity in a Systematic SOA-based Architecture Process\n", "abstract": " Architecture processes emerged to aid the architects in the construction of software architecture descriptions. Service-Oriented Architecture (SOA) emerged as a type of software architecture to build systems through the composition of services. On the one hand, the traditional architecture processes do not comprise some SOA features. On the other hand, the available SOA approaches do not fulfill all the software architecture foundations. In this sense, this paper presents the Analysis Activity of a systematic SOA-based architecture process that comprises the main software architecture foundations and SOA features, such as quality attribute orientation, support for multiple development teams, service identification and categorization, and service-orientation principles.", "num_citations": "3\n", "authors": ["1511"]}
{"title": "Joint Letter from the Editor-in-Chief and the publications chair of the Brazilian computer society\n", "abstract": " As some of our readers may be aware of, JBCS shall be undergoing important changes in 2010 as a result of an agreement between the Brazilian Computer Society and Springer scientific publishers, that will be publishing JBCS as from March 2010. We encourage you to check the webpage http://www. springer. com/computer/journal/13173 for more information about the journal and specific paper submission instructions.", "num_citations": "3\n", "authors": ["1511"]}
{"title": "Modeling Context in Software Reuse\n", "abstract": " Software reuse research is focused in building new software based on software artifacts previously made, in order to achieve software quality and productivity. In this field, software reuse repositories are used to store reusable software artifacts for later search and retrieval. Unfortunately, it is not common to use context neither to enrich the semantics of the software artifacts stored in the repository nor to improve the possibilities of assembly between assets for further retrieval. Assembling can be seen as a processing of contextual knowledge, which can be composed by contextual elements, that is need for a given focus. In this work we propose the improvement of an existing software reuse repository inserting context information in it.", "num_citations": "3\n", "authors": ["1511"]}
{"title": "A cooperative virtual learning environment on the web for musical harmony\n", "abstract": " Advanced Technology for Learning, Vol. 1, No. 3, 2004 A COOPERATIVE VIRTUAL LEARNING ENVIRONMENT ON THE WEB FOR MUSICAL HARMONY E. Ferneda,\u2217 E. de Barros Costa,\u2217\u2217 H. Oliveira de Almeida,\u2217\u2217\u2217 DG Rodrigues,\u2217\u2217\u2217\u2217 ES de Almeida,\u2217\u2217 and M. Brandao\u2217\u2217\u2217\u2217\u2217 Abstract The research reported in this article presents a cooperative virtual web-based learning environment aimed at supporting teaching on the musical harmony domain. Such an environment has been developed to support courses in both web distance and regular classroom learning. The aim of this work is to integrate arti\ufb01cial and human agents in an interactive learning environment. This environment includes a multi-agent tutoring system that itself includes a digital library and hypermedia documents, which are concerned with the Harmony Trees Theory. Our purpose is to provide learners and teachers with the means to have \u2026", "num_citations": "3\n", "authors": ["1511"]}
{"title": "Towards a Practical and Efficient Process for Software Reuse\n", "abstract": " Software reuse is seen as a key factor for companies interested in the improvements of quality, productivity, and time-to-market. However, without adequate processes, it is too difficult to obtain the desired benefits. Moreover, current reuse processes present lack of details in important activities and are most concentrated in specific stages of the reusable software development process. Thus, this work presents a proposal for a practical and efficient reuse process. The process is composed of guidelines, metrics, economics aspects, and a well-defined set of requirements.", "num_citations": "3\n", "authors": ["1511"]}
{"title": "Feature Interactions In Highly Configurable Systems: A Dynamic Analysis Approach With Varxplorer\n", "abstract": " Highly-configurable systems provide significant reuse opportunities by tailoring system variants based on a set of features. Those features can interact in undesired ways which may result in faults. Thus, we propose VarXplorer, a dynamic and iterative approach to detect suspicious interactions. To evaluate whether VarXplorer helps improving the performance of identifying suspicious interactions, we performed two empirical studies. Our results shows that from the VarXplorer graphs, participants are able to identify suspicious interactions more than 3 times faster compared to the state-of-the-art tool. Additionally, the iterative detection process provides a more efficient feature interaction analysis, reducing the data developers needs to check to find problematic interactions.", "num_citations": "2\n", "authors": ["1511"]}
{"title": "Examining user reviews of conversational systems: a case study of Alexa skills\n", "abstract": " Conversational systems use spoken language to interact with their users. Although conversational systems, such as Amazon Alexa, are becoming common and afford interesting functionalities, there is little known about the issues users of these systems face. In this paper, we study user reviews of more than 2,800 Alexa skills to understand the characteristics of the reviews and issues that are raised in them. Our results suggest that most skills receive less than 50 reviews. Our qualitative study of user reviews using open coding resulted in identifying 16 types of issues in the user reviews. Issues related to the content, integration with online services and devices, error, and regression are top issues raised by the users. Our results also indicate differences in volume and types of complaints by users when compared with more traditional mobile applications. We discuss the implication of our results for practitioners and researchers.", "num_citations": "2\n", "authors": ["1511"]}
{"title": "Generalized statistical complexity of SAR imagery\n", "abstract": " A new generalized Statistical Complexity Measure (SCM) was proposed by Rosso et al in 2010. It is a functional that captures the notions of order/disorder and of distance to an equilibrium distribution. The former is computed by a measure of entropy, while the latter depends on the definition of a stochastic divergence. When the scene is illuminated by coherent radiation, image data is corrupted by speckle noise, as is the case of ultrasound-B, sonar, laser and Synthetic Aperture Radar (SAR) sensors. In the amplitude and intensity formats, this noise is multiplicative and non-Gaussian requiring, thus, specialized techniques for image processing and understanding. One of the most successful family of models for describing these images is the Multiplicative Model which leads, among other probability distributions, to the  law. This distribution has been validated in the literature as an expressive and tractable\u00a0\u2026", "num_citations": "2\n", "authors": ["1511"]}
{"title": "Efic\u00e1cia do gelo e g\u00e1s na determina\u00e7\u00e3o da sensibilidade pulpar antes e ap\u00f3s a restaura\u00e7\u00e3o\n", "abstract": " O objetivo do presente estudo foi comparar a frequ\u00eancia de respostas positivas e negativas, bem como a intensidade da dor do paciente frente \u00e0 aplica\u00e7\u00e3o t\u00e9rmica em 625 dentes humanos cariados antes e ap\u00f3s os procedimentos restauradores. A intensidade dolorosa foi medida por meio da Escala Anal\u00f3gica Visual representada por uma r\u00e9gua calibrada em mil\u00edmetros de 1 a 10. Antes de fazer a restaura\u00e7\u00e3o aplicou-se o bast\u00e3o de gelo e depois o g\u00e1s refrigerante, para obten\u00e7\u00e3o da resposta pulpar. Ap\u00f3s a restaura\u00e7\u00e3o, nova aplica\u00e7\u00e3o dos testes e avalia\u00e7\u00e3o da intensidade dolorosa valendo-se da referida escala. Os dados relativos antes e ap\u00f3s os procedimentos restauradores foram tabulados analisando-se a frequ\u00eancia e percentual de respostas positivas e negativas e a intensidade dolorosa em leve, moderada e intensa. Ao comparar o bast\u00e3o de gelo e g\u00e1s refrigerante ocorreu diferen\u00e7a percentual de repostas positivas e negativas com significado estat\u00edstico (p= 0, 00001) o mesmo ocorrendo \u00e0 intensidade da dor nos seus tr\u00eas n\u00edveis tanto antes como depois dos procedimentos restauradores. Concluiu-se que, o g\u00e1s refrigerante comparado com o gelo, determinou maior n\u00famero de frequ\u00eancias de respostas positivas tanto antes como depois dos procedimentos restauradores. O n\u00famero de dentes com dor intensa antes dos procedimentos restauradores foi maior do que depois da restaura\u00e7\u00e3o a aplica\u00e7\u00e3o do gelo como o g\u00e1s refrigerante. Quanto \u00e0 intensidade dolorosa moderada e leve verificou-se que antes de realizar a restaura\u00e7\u00e3o os \u00edndices percentuais foram menores em rela\u00e7\u00e3o \u00e0 intensidade dolorosa depois dos procedimentos\u00a0\u2026", "num_citations": "2\n", "authors": ["1511"]}
{"title": "Splmt-te: A software product lines system test case tool\n", "abstract": " The product lines approach requires specific testing tools that should help to manage reusable testing assets and automate the test execution. Despite of the increasing interest by the research community regarding software testing tools, Software Products Lines (SPL) still need tools to support the testing process. This work presents briefly the results of a mapping study on software testing tool and defines the requirements, design and implementation of a software product lines system test case tool, aiming at the creation and management of test assets. A controlled experiment was also conducted to evaluate the tool effectiveness.", "num_citations": "2\n", "authors": ["1511"]}
{"title": "On the investigation of risk management practices in software product lines\n", "abstract": " Software Product Line (SPL) is an approach which offers several benefits for organizations, such as significant reductions in the development and maintenance costs, reduced time-to-market, and personalized software products. In SPLs, the testing activity presents challenges due to characteristics of their development process. The cost of testing SPL is usually higher than the cost of testing traditional systems. SPLs foster the reuse of artifacts that include requirement specifications, code and models. Among different models used in an SPL, state-based models, such as Finite State Machines, are promising candidates to support the test case generation. Therefore, we propose a strategy to reuse test cases generated for different products of an SPL. Test cases are derived from Finite State Machines representing products instantiated from an SPL. The test cases generated for a product are reused when testing further products instantiated from the same SPL, in order to reduce the size of additional test cases. We illustrate our strategy in a case study using two SPLs of embedded system applications.", "num_citations": "2\n", "authors": ["1511"]}
{"title": "RiPLE-TE: A Process for Testing Software Product Lines.\n", "abstract": " Software Product Lines Testing has received special attention in recent years, due to its crucial role in quality and also due to the high cost this activity poses. In this effect, to make testing a feasible activity, some improvements are required. This paper presents a process for testing product lines, designed based on the gaps identified by a systematic mapping study, performed in order to understand the current scenario in this research field. An experimental study was performed in order to evaluate the proposed process in terms of understanding the role of a structured testing process in a SPL project.", "num_citations": "2\n", "authors": ["1511"]}
{"title": "Component-Based Development in J2ME: A Framework for Graphical Interface Development in Mobile Devices\n", "abstract": " In high-growth markets such as those that depend upon Java 2 Micro Edition (J2ME), application development with quality in a reduced time has become crucial for success. However, the diversity of handsets with this technology implies in many ports of every application, mainly in aspects related to Graphical User Interface (GUI). This paper describes the development of a framework for creating GUI in J2ME, reducing codification effort and usually producing more attractive applications. This framework was developed using a Component-Based Software Development (CBSD) method adapted for the J2ME context; both the CBSD usage and the modifications are described in the paper.", "num_citations": "2\n", "authors": ["1511"]}
{"title": "Efici\u00eancia de algumas barreiras cervicais utilizadas durante o clareamento interno\n", "abstract": " Quarenta e dois caninos superiores receberam como barreira cervical cimpat blanc, resina flow, cimento de fosfato de zinco e cimento de ion\u00f4mero de vidro. Ap\u00f3s quatro sess\u00f5es de clareamento, foi injetado azul de metileno a 2% nas c\u00e2maras pulpares sob v\u00e1cuo, permanecendo por 24 horas. Clivados, foram fotografados por uma c\u00e2mera digital acoplada a uma lupa estereosc\u00f3pica e atribu\u00eddos escores \u00e0 infiltra\u00e7\u00e3o do corante. Os resultados foram submetidos ao teste de Kruskal-Wallis, sendo significantes em n\u00edvel de 5%. A menor infiltra\u00e7\u00e3o foi alcan\u00e7ada pelo cimento de ion\u00f4mero de vidro, entretanto nenhum material foi totalmente eficaz em impedir a infiltra\u00e7\u00e3o do corante.", "num_citations": "2\n", "authors": ["1511"]}
{"title": "Distributed Component-Based Software Development Strategy Integrated By MVCase Tool.\n", "abstract": " This paper presents a Strategy that integrates different technologies to supports Distributed Component-Based Software Development. The involved technologies are: the Catalysis method, the CORBA pattern to support components distributeds distribute the components, frameworks of components and a CASE tool. The strategy drives the software engineer in two stages: in the development of problem domain components, and in the development of applications that reuse those components.", "num_citations": "2\n", "authors": ["1511"]}
{"title": "Towards an Effective Software Reuse Process\n", "abstract": " Towards an Effective Software Reuse Process Page 1 Towards an Effective Software Reuse Process Eduardo Santana de Almeida, Silvio Lemos Meira {esa2, srlm}@cin.ufpe.br, www.cin.ufpe.br/~esa2 Page 2 Research\u2019s approach \u2022 Hypothesis \u2013 Software reuse processes present gaps \u2022 Development for and with reuse \u2022 Different emphasis \u2026. \u2013 Domain analysis\u2026 Domain Design\u2026.Domain Implementation \u2013 Development for \u2013 Development with \u2022 Different trends \u2013 Domain Engineering (the begin) \u2013 Software Product-Line (currently) \u2022 Object of study \u2013 11reuse processes \u2013 State-of-the-Art \u2022 Research approach \u2013 Analysis of the state-of-the art \u2013 Key questions \u2013 Requirements for an effective process {draft} Page 3 Related Works \u2022 Previous studies \u2013 Arango [1994] \u2022 Domain Analysis Methods \u2013 Boertin [2001] \u2022 Evaluation of Component-Based Development Methods \u2013 Stojanovic [2001] \u2022 A Methodology Framework for \u2026", "num_citations": "2\n", "authors": ["1511"]}
{"title": "Investigating Variability-aware Smells in SPLs: An Exploratory Study\n", "abstract": " Variability-aware smell is a concept referring to artifact shortcomings in the context of highly-configurable systems that can degrade aspects such as program comprehension, maintainability, and evolvability. To the best of our knowledge, there is very little evidence that variability-aware smells exist in Software Product Lines (SPLs). This work presents an exploratory study that investigated (I) evidence that variability-aware smells exist in SPLs and (II) new types of variability-aware smell not yet documented in the literature based on a quantitative study with open source SPL projects. We collected quantitative data to generate reliable research evidence, by performing feature model and source code inspections on eleven open-source SPL projects. Our findings revealed that (1) instances of variability-aware smells exist in open-source SPL projects and (2) feature information presented significant associations with\u00a0\u2026", "num_citations": "1\n", "authors": ["1511"]}
{"title": "Transfer\u00eancia de tecnologia: um enfoque em contratos de fornecimento de tecnologia e assist\u00eancia t\u00e9cnica e cient\u00edfica\n", "abstract": " A Transfer\u00eancia de Tecnologia (TT) apresenta-se como uma forma de introdu\u00e7\u00e3o de Inova\u00e7\u00e3o dentro do ambiente empresarial. Neste contexto, a TT envolve tanto os contratos de fornecimento de Tecnologia como a Presta\u00e7\u00e3o de Servi\u00e7os de Assist\u00eancia T\u00e9cnica e Cient\u00edfica, e garante um grande potencial para promo\u00e7\u00e3o da inova\u00e7\u00e3o e competitividade a n\u00edvel regional e nacional (BENNETT; VAIDYA, 2005).Segundo Verbano e Venturtirini (2012), a TT consiste no processo relacionado ao uso da tecnologia, o know how, as instala\u00e7\u00f5es e experi\u00eancia para um objetivo espec\u00edfico. Proen\u00e7a (1996) aponta que a incans\u00e1vel procura pelas inova\u00e7\u00f5es tecnol\u00f3gicas determina uma rela\u00e7\u00e3o entre aqueles que desenvolvem e/ou possuem a tecnologia e aqueles que v\u00e3o usa-las, onde essa rela\u00e7\u00e3o \u00e9 denominada \u201cTransfer\u00eancia de Tecnologia\u201d.", "num_citations": "1\n", "authors": ["1511"]}
{"title": "Architectures of transportation cyber-physical systems\n", "abstract": " Architecture is the fundamental structure of a system. That structure is based on the relationships among the modules that provide the behaviour of the system. These structures appear, with variations, in many systems that address related problems. Because software is so malleable, much of this variation is implemented in the software portion of the product. These different architectures have different performance characteristics such as different levels of reliability and safety. In this chapter we will survey some of the popular architectures for cyber-physical systems, the quality attributes enhanced and degraded by each architecture and analysis techniques that are used to evaluate these qualities in the context of actual applications. Our intent is to provide the type of knowledge needed for the transportation engineer to participate in developing or acquiring software for smart transportation systems.", "num_citations": "1\n", "authors": ["1511"]}
{"title": "A Preliminary Assessment of Variability Implementation Mechanisms in Service-Oriented Computing\n", "abstract": " Service-Oriented Computing and Software Product Lines are software development strategies capable to provide a systematic means to reuse existing software assets, rather than repeatedly developing them from scratch, for every new software system. The inherent characteristics of both strategies has led the research community to combine them, in what is commonly referred to as Service-Oriented Product Lines (SOPL) strategies. Despite the perceived potential of such a combination, there are many challenges to confront in order to provide a practical generalizable solution. In particular, there is a lack of empirical evidence on the actual support of variability implementation mechanisms, typical in SPL engineering, and their suitability for SOPL. In line with such a challenge, this paper presents a preliminary assessment aimed to identify variability implementation mechanisms which may improve\u00a0\u2026", "num_citations": "1\n", "authors": ["1511"]}
{"title": "A scrum-inspired process for software product lines scoping\n", "abstract": " A atividade de escopo em linhas de produto de software \u00e9 o primeiro passo para identificar produtos, caracter\u00edsticas e ativos de software em um segmento de mercado. As abordagens tradicionais para escopo de linhas de produto de software s\u00e3o processos densos e abrangentes em cen\u00e1rios com mudan\u00e7as imprevis\u00edveis e com poucos recursos. Um desafio chave nesse cen\u00e1rio \u00e9 o gerenciamento sistem\u00e1tico da iteratividade, adaptabilidade e do feedback no processo de escopo de linhas de produto de software. Como \u00faltimo efeito, a ind\u00fastria de software pode restringir investimentos no processo de escopo. Neste contexto, o framework Scrum, abordagem mais popular para incentivar a iteratividade, a adaptabilidade e o feedback, pode lidar com esse desafio. Estudos anteriores t\u00eam combinado Scrum com algumas atividades de linhas de produto de software obtendo bons resultados. Esta tese define um processo, denominado de RiPLE-ASC, para o escopo da linha de produtos de software inspirado nas pr\u00e1ticas do Scrum. Este processo basea-se nas evid\u00eancias da ind\u00fastria (um estudo de caso real de escopo de linhas de produto usando uma abordagem tradicional), na opini\u00e3o de especialistas em linhas de produto de software \u00e1geis (atrav\u00e9s de um survey) e na literatura cient\u00edfica sobre linhas de produto de software \u00e1geis (uma mapeamento sistem\u00e1tico). Um estudo de viabilidade e um estudo de caso \u201ccross-case\u201d executados com dois parceiros industriais de nosso grupo de pesquisa indicaram que o RiPLE-ASC tem aplica\u00e7\u00e3o pr\u00e1tica e adequa-se em um ambiente de produ\u00e7\u00e3o de software industrial bem como incentiva a\u00a0\u2026", "num_citations": "1\n", "authors": ["1511"]}
{"title": "Advanced communication system for rich and green smart Grid networking\n", "abstract": " Future Green Smart Grids are expected to support sustainable, safe, robust, efficient and intelligent production, distribution and consumption of electric energy. However, evolving immaturity and issues restrict their development, confronting interoperability and reducing the reliability of the power grid. Innovating networking capabilities are of paramount to provide rich Smart Grid networking, while keeping the system performance in large scale scenarios. In view of this, we designed the Session-Oriented Communication System (SOCSys) solution for dependable IP-based Smart Grid networking over a wireless mesh QoS-aware information network. In this paper, we propose the Advanced SOCSys (ASOCSys), extending our previous work with network-centric functionalities. ASOCSys aims at improving IP-based Smart Grid networking through groupbased session admission control and rich networking IEEE 802.16\u00a0\u2026", "num_citations": "1\n", "authors": ["1511"]}
{"title": "Evidence from risk management in software product lines development: a cross-case analysis\n", "abstract": " Software Product Line Engineering (SPLE) is a paradigm in software development that enables rapid development of new applications, by means of systematically reusing assets. To take effect and deliver the promised benefits, SPLE demands for substantial upfront investments, and manageable processes. Such a scenario leads to the need of a rigorous risk management, to be employed with the aim of decreasing the impact of problems that may occur during the projects' development, thus improving the use of resources. This work presents an analysis of two case studies of Risk Management practices in software product line projects, carried out in academic and industry settings. In order to synthesize evidence and increase validity of the results, the outcomes were compared by means of a cross-case analysis, in which we analyzed the identified risks, their assessment and the activities used to mitigate them\u00a0\u2026", "num_citations": "1\n", "authors": ["1511"]}
{"title": "OOFM-A feature modeling approach to implement MPLs and DSPLs\n", "abstract": " This paper uses the Object Oriented Feature Modeling (OOFM) technique to develop Multiple Product Lines (MPLs) and Dynamic SPLs (DSPLs). The idea is combine defined OOFM resources in a Model-View-Controller (MVC) architectural style. As result, a pattern-based Product Line Architecture (PLA) is provided, a kind of middleware that performs an advanced usage of multiple and dynamic OOFM features able to generate desired MPLs and DSPLs.", "num_citations": "1\n", "authors": ["1511"]}
{"title": "A context-aware proactive source code search and retrieval tool\n", "abstract": " Software reuse is considered as a prominent strategy for software development productivity improvement. However, there are many cases of software reuse adoption failure. One of the main factors for software reuse failure is the \u201cno attempt to reuse\u201d issue, which is highly influenced by the effort needed to find reusable artifacts. In this sense, this paper presents the definition, the implementation and a case study of a proactive search system called BART (Basic Asset Retrieval Tool) created to improve the reusable artifacts search activity without increasing the user effort.", "num_citations": "1\n", "authors": ["1511"]}
{"title": "Code Inspection-A Review.\n", "abstract": " The software inspection process is generally considered a software engineering best practice. For a long time, it had the goals of finding and fixing defects as soon as possible. For this reason, techniques are suggested for use in a software reuse process in order to improve the quality of the assets developed and reused. Thus, the code become itself easier to understand and changeable, and improving its maintainability, minimizing redundancies and improving language proficiency, safety and portability. In this way, looking for analyzing this area, this paper presents a survey of code inspection research.", "num_citations": "1\n", "authors": ["1511"]}
{"title": "IPM: An Incremental Process Model for Distributed Component-Based Software Development.\n", "abstract": " In spite of recent and constant researches in the Component-Based Development (CBD) area, there is still lack of patterns, process model and methodologies that effectively support as much the development \u201cfor reuse\u201d as \u201cwith reuse\u201d. Considering the accelerated growth of the Internet over the last decade, where distribution has become an essential non-functional requirement of most applications, the problem becomes bigger. This paper proposes a novel Incremental Process Model (IPM) that integrates the concepts of Component-Based Software Engineering (CBSE), frameworks, patterns, and distribution. This process model is divided into two stages: the development \u201cfor reuse\u201d, and the development \u201cwith reuse\u201d. A CASE tool is the main mechanism to apply this process model, supporting inclusively, the code generation of components and applications. A distributed components environment is proposed for accomplishing the results of this process model. Through a case study it is shown how the process model works on a given problem domain.", "num_citations": "1\n", "authors": ["1511"]}
{"title": "Tuberculosis infection and the use of oral and intradermal BCG in school children of Laranjal Paulista, S\u00e3o Paulo, Brazil\n", "abstract": " [Tuberculosis infection and the use of oral and intradermal BCG in school children of Laranjal Paulista, S\u00e3o Paulo, Brazil]. - Abstract - Europe PMC Sign in or create an account https://orcid.org Europe PMC Menu About About Europe PMC Funders Joining Europe PMC Governance Roadmap Outreach Tools Tools overview ORCID article claiming Journal list Grant finder External links service RSS feeds Annotations Annotations submission service Developers Developer resources Articles RESTful API Grants RESTful API API use cases SOAP web service Annotations API OAI service Bulk downloads Developers Forum Help Help using Europe PMC Search syntax reference Contact us Contact us Helpdesk Feedback Twitter Blog Tech blog Developer Forum Europe PMC plus Search worldwide, life-sciences literature Search Advanced Search Recent history Saved searches Abstract Full text References Citations & \u2026", "num_citations": "1\n", "authors": ["1511"]}
{"title": "Distributed Component-Based Software Development\n", "abstract": " With the computing advance, the number of software systems in the different knowledge areas increases day by day. More and more the computer is used in the solutions of problems, with the objective of automating them, reducing costs, turning them more efficient, fast, and safe.To support the need of constructing software systems more reliable, efficient and at a low cost, new techniques are being studied, standing out, the Component-Based Development. Software Components can be understood as code blocks previously tested, with well-defined interfaces, which offer advantages to make easier the software construction, mostly through the reuse, avoiding code redundancy in the applications. Another characteristic present in the components is the easiness of being executed in distributed platforms. This characteristic became important with the vast Internet network that a lot of times demand that the systems be executed in a distributed way in a client-server platform. Motivated by these ideas, this article presents a Distributed Component-Based Software Development strategy accomplished in four steps: Define Problem, Specify Components, Project Components and Implement Components. A Case tool automates great part of the development. The strategy uses UML techniques, Corba and the Catalysis method to construct reusable components, based on the Object-Oriented principles and use of patterns.", "num_citations": "1\n", "authors": ["1511"]}