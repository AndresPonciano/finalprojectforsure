{"title": "Back to the future: origins and directions of the \u201cAgile Manifesto\u201d\u2013views of the originators\n", "abstract": " In 2001, seventeen professionals set up the manifesto for agile software development. They wanted to define values and basic principles for better software development. On top of being brought into focus, the manifesto has been widely adopted by developers, in software-developing organizations and outside the world of IT. Agile principles and their implementation in practice have paved the way for radical new and innovative ways of software and product development. In parallel, the understanding of the manifesto\u2019s underlying principles evolved over time. This, in turn, may affect current and future applications of agile principles. This article presents results from a survey and an interview study in collaboration with the original contributors of the manifesto for agile software development. Furthermore, it comprises the results from a workshop with one of the original authors. This publication focuses on the origins of\u00a0\u2026", "num_citations": "63\n", "authors": ["1388"]}
{"title": "Positive affect through interactions in meetings: The role of proactive and supportive statements\n", "abstract": " Software projects are dominated by meetings. For participants, not all meetings are useful and enjoyable. However, interaction within a meeting has an impact on individual and group affects. Group affect influences team performance and project success. Despite frequent yet vague dissatisfaction with some meetings, many software engineers are not aware of the crucial importance of their behavior in those meetings. This can set the tone for the entire project. By influencing group affect, meeting interaction influences success without participants even noticing. Due to this lack of awareness, it depends on good or bad luck whether software teams will adopt a promising meeting style.In a study of 32 student projects with 155 participants, we coded fine-grained interaction elements during the first internal meeting of each team. The analysis of resulting codes showed that constructive remarks had a positive impact on\u00a0\u2026", "num_citations": "33\n", "authors": ["1388"]}
{"title": "Becoming agile while preserving software product lines: an agile transformation model for large companies\n", "abstract": " Software process improvement has always been an essential part of software projects. Current market trends and the rapid pace of changing requirements demand fast development and adaptability. Agile software development is a popular possibility to react on these trends. Implementing agile practices promises for example a shorter time-to-market, satisfied customers and increased software quality. Consequently many companies strive for an integration of agile methods or for an agile transformation.", "num_citations": "28\n", "authors": ["1388"]}
{"title": "Communication in Teams - An Expression of Social Conflicts\n", "abstract": " The more members a team has, the more information needs to be shared with single team members or within the whole team. Sufficient information sharing is difficult to ensure, since a project leader will not be fully aware of all on-going information and communication within the team. In software engineering, information flow is essential for project success. In each part of the process, information like requirements or design decisions needs to be communicated with appropriate persons. Neither missing nor wrong implemented requirements are desirable, since extra working hours or incomplete working results need to be paid. Therefore, the right amount of information sharing is highly desirable. To ensure this, communication is a mandatory requisite. Furthermore, knowing about social conflicts is suitable, since these influence the information flow.                 In an experiment with 34 student software\u00a0\u2026", "num_citations": "27\n", "authors": ["1388"]}
{"title": "A mapping study on product owners in industry: identifying future research directions\n", "abstract": " Product Owners in the Scrum framework - respectively the On-site Customer when applying eXtreme Programming - have an important role in the development process. The Scrum Guide states that this role is responsible for the requirements and maximizing the value of the product. However, the implementation of this role depends on the individual, the organization and the team and is perceived as difficult in industry. Various research approaches provide insights in the applied PO role in industry - yet, a conclusive bigger picture of the studies and reports on this issue is missing. To fill this gap, we conducted a systematic mapping study. Our findings structure the research area of Product Owners in industry in terms of research topics and applied research methods. In total, we identified 30 contributions addressing seven research topics and generated consolidated answers for each of them. While some of those\u00a0\u2026", "num_citations": "13\n", "authors": ["1388"]}
{"title": "Behavior-driven dynamics in agile development: the effect of fast feedback on teams\n", "abstract": " Agile software development teams strive for fast and continuous feedback. Both the quality of the resulting software and the performance of the team require feedback. The performance of the team developments is often addressed in retrospectives which are not only part of the SCRUM framework, but also in general. Reflecting on incidents during the last sprint helps the team to increase performances, expressed by, e.g., efficiency and productivity. However, it is not only essential to identify volatile sprint performances, but also to characterize the primary cause to solve them. Main reasons for low performance are often not visible, primarily when they are related to social-driven team behavior, such as communication structures, mood, or satisfaction. In this paper, we analyze whether automated team feedback about retrospective sprint-behavior can help the team to increase performances due to additional\u00a0\u2026", "num_citations": "13\n", "authors": ["1388"]}
{"title": "Team meetings and their relevance for the software development process over time\n", "abstract": " Information sharing in teams is one of the most important aspects of successful software development. For instance, requirements, design decisions and guidelines need to be communicated with the whole team or with specific team members. For information exchange, communication is mandatory. Meetings are an effective way to communicate with many team members. Hence, much information can be shared during team meetings. But meeting and communication behavior may vary. During the project, the team members get to know the others more and more. This has an influence on the chosen ways of information sharing and hence changes communication behavior.We are interested in analyzing the influence of meetings on team-internal communication and collaboration. To analyze collaboration, we consider a measure of indirections representing used communication channels and the perceived\u00a0\u2026", "num_citations": "13\n", "authors": ["1388"]}
{"title": "Fake News: Simply Agile\n", "abstract": " Since 2001, agile software development has increasingly been spreading into industry. The original contributors of the manifesto for agile software development had in mind to make the world a better place for software developers. Focusing on social and human factors, it is widely accepted that the adaption of agile methods and practices leads to more satisfied and, hence, more productive developers. However, agile teams are not necessarily happier than teams working in a plan-driven way. This position paper presents reasons why an agile adaption is hard to achieve and might lead to dissatisfied developers. It is based on preliminary results of our survey with the seventeen contributors of the manifesto. It further comprises the results of an interview study. Both data sources allow drawing conclusions concerning the consequences of agile transformation for developers.", "num_citations": "13\n", "authors": ["1388"]}
{"title": "HELENA Study: Reasons for Combining Agile and Traditional Software Development Approaches in German Companies\n", "abstract": " Many software development teams face the problem of selecting a suitable development approach fitting to their specific context. According to them, the combination of agile and traditional approaches seems to be the solution to handle this problem. However, the current state of practice with respect to hybrid approaches is not sufficiently examined. Most studies focus either on traditional or on agile methods, but the combination of both is not well investigated yet. The \u201cHybrid dEveLopmENt Approaches in software systems development\u201d (HELENA) study performs a large-scale international survey in order to gain insights into the distribution of hybrid approaches. So far, the study indicates several reasons why companies combine agile and traditional approaches. The hybrid approaches aim at improving the frequency of delivery to customers, the adaptability and the flexibility of the process to react to\u00a0\u2026", "num_citations": "13\n", "authors": ["1388"]}
{"title": "Applying Social Network Analysis and Centrality Measures to Improve Information Flow Analysis\n", "abstract": " In software development projects, documents are very important for sharing requirements and other information among employees. However, information can be transported in different ways. Conversations, meetings, workshops and emails convey and impart information as well. Especially large companies struggle in dealing with unclear and incorrect information flows. These information flows can be improved by means of information flow analysis and flow patterns. One technique to analyze information flows is the FLOW method. It supports visualization and analysis of information flows to detect lacks and anomalies and thereby improves information flows. An analyst gathers information transported in the company. Afterwards, information flows are visualized and analyzed based on patterns and personal experience. Nevertheless, analysis based on individual knowledge is error-prone. Hence, we\u00a0\u2026", "num_citations": "12\n", "authors": ["1388"]}
{"title": "Making meeting success measurable by participants' feedback\n", "abstract": " In software projects, a continuous exchange of information among team members is necessary to ensure a successful project. Meetings support this information exchange because they enable team members to share information simultaneously with all other team members. However, teams often get lost in endless discussions or developers do not gain a real benefit from a meeting. Consequently, participants are often frustrated by meetings. This leads to a negative mood and the project is endangered. To ensure the quality of information exchange and to prevent frustrated developers, meetings have to be assessed periodically. We ask the participants about their perception during a meeting because participants' satisfaction with the outcome is essential for project success. Hence, the definition of a good meeting bases on effectiveness, efficiency, and satisfaction. In order to measure perceived meeting success\u00a0\u2026", "num_citations": "11\n", "authors": ["1388"]}
{"title": "Enrichment of Requirements Specifications with Videos - Enhancing the Comprehensibility of Textual Requirements\n", "abstract": " Requirements for a software product are mainly shared through a textual  specification. One key ability in successful software organizations is a good requirements communication based on understandable information. Developers can only implement a useful and satisfying software product if they obtain and understand requirements properly. One challenge of writing requirements is to describe complex and interactive contents in an understandable manner.  Videos offer a large potential to achieve such an easy-to-understand representation. Attached videos can enhance the reader\u2019s understanding by using them as supplementary material for specifications. Despite their large potential, videos are not an established part of requirements specifications: The effort to produce videos is high, the corresponding motivation is low and the use of videos is cumbersome due to missing links between requirements and videos.  We propose guidelines to support the identification of content which is appropriate to be supplemented by videos. We develope a starting set of guidelines that consider the different information types of a requirements specification with their presentation modes and characteristics. This paper presents an overview of our findings about improving the content-related linking between requirements and videos. We discuss the perspectives, advantages and obstacles for enhancing the comprehensibility of textual requirements conveyed by videos.", "num_citations": "11\n", "authors": ["1388"]}
{"title": "Transformation towards agile software product line engineering in large companies: A literature review\n", "abstract": " Almost all companies struggle with software systems that are getting increasingly complex. Therefore, in particular large companies often use software product lines, which provide an efficient way to manage software reuse as well as the high complexity. However, software product lines seem to be too slow to react to changes. Agile development approaches promise to meet this demand. At the same time, integrating an agile approach is not always easy. Consequently, there is a need for a transformation model that supports the agile transformation without harming the benefits of software product lines. In this paper, we present the results of a literature review regarding agile transformation in large software companies. Our results summarize the insights from 85 papers and present a list of 20 tasks and tasks that are recommended by several researchers to be considered during the transformation. On the basis of\u00a0\u2026", "num_citations": "10\n", "authors": ["1388"]}
{"title": "Do you just discuss or do you solve? Meeting analysis in a software project at early stages\n", "abstract": " Software development is a very cooperative and communicative task. In most software projects, meetings are a very important medium to share information. However, these meetings are often not as effective as expected. One big issue hindering productive and satisfying meetings is inappropriate behavior such as complaining. In particular, talking about problems without at least trying to solve them decreases motivation and mood of the team.", "num_citations": "9\n", "authors": ["1388"]}
{"title": "Analyse der Zusammenarbeit in Softwareprojekten mittels Informationsfl\u00fcssen und Interaktionen in Meetings\n", "abstract": " Software wird heutzutage meist im Team entwickelt, was einen regelm\u0144\u2580 igen Informationsaustausch erfordert. Oft werden Informationen jedoch nicht optimal weitergegeben und es kommt zu verloren gegangenen oder falsch \u0158bermittelten Informationen. Beides kann den Projekterfolg gef\u0144hrden. Um Schwachstellen im Informationsfluss aufzudecken, werden Informationsflussnetzwerke auf spezielle Strukturen untersucht, die auf Probleme hindeuten. Im Anschluss werden Verbesserungsm\u00f7 glichkeiten abgeleitet, die das Entwicklerteam bei der Informationsweitergabe und in ihrer t\u0144glichen Arbeit unterst\u0158tzen. In dieser Arbeit wird ein Konzept vorgestellt, das die Identifikation von Schwachstellen durch strukturelle Analysen des Netzwerks unterst\u0158tzt. Ein Gro\u2580 teil der Informationsweitergabe erfolgt in Meetings. Hier ist eine Informationsflussanalyse nur bedingt zielf\u0158hrend, da nicht nur der Informationsfluss, sondern vor allem auch die Interaktionen der Teammitglieder eine wesentliche Rolle spielen. Sowohl angemessenes als auch unangemessenes Verhalten hat Auswirkungen auf den weiteren Projektverlauf und schlussendlich auf den Projekterfolg. Um das Verhalten genauer zu untersuchen, wird in dieser Arbeit ein Konzept vorgestellt, das Interaktionsanalysen in Meetings von Entwicklerteams w\u0144hrend eines laufenden Meetings erm\u00f7 glicht. Beide Konzepte werden in Einzelfallstudien und in Experimenten evaluiert, um ihre Anwendbarkeit nachzuweisen. Die Ergebnisse motivieren die Weiterentwicklung der Konzepte im Rahmen von k\u0158nftiger Forschung.", "num_citations": "8\n", "authors": ["1388"]}
{"title": "Don\u2019t Underestimate the Human Factors! Exploring Team Communication Effects\n", "abstract": " Team communication addresses a critical issue for software developments. Understanding human behavior and communication take an important role for cost optimized scheduling and adjustment of dysfunctional manner. But team phenomena are often not trivial to interpret. Empirical studies can disclose practical information. Many kinds of research with the focus on human factors justify findings solely through linear statistics. This leads to an estimation problem of formally interpreted effects, in particular for diagnosis models. In this paper, we investigate several team communication effects with data records from an empirical study with 34 academic software projects. In general, we want to increase the awareness for often insufficiently interpreted human factors. We apply conventional linear correlation statistics in comparison with the novel exploratory analysis MINE on three sample cases concerning\u00a0\u2026", "num_citations": "7\n", "authors": ["1388"]}
{"title": "Early diagnostics on team communication: Experience-based forecasts on student software projects\n", "abstract": " Effective team communication is a prerequisite for software quality and project success. It implies correctly elicited customer requirements, conduction of occurring change requests and to adhere releases. Team communication is a complex construct that consists of numerous characteristics, individual styles, influencing factors and dynamic intensities during a project. These elements are complicated to be measured or scheduled, especially in newly formed teams. According to software developers with few experiences in teams, it would be highly desirable to recognize dysfunctional or underestimated communication behaviors already in early project phases. Otherwise, negative affects may cause delay of releases or even endanger software quality. We introduce an approach on the feasibility of forecasting team's communication behavior in student software projects. We build a very first forecasting model that\u00a0\u2026", "num_citations": "7\n", "authors": ["1388"]}
{"title": "On the Tasks and Characteristics of Product Owners: A Case Study in the Oil and Gas Industry\n", "abstract": " Product owners in the Scrum framework \u2013 respectively the on-site customer when applying eXtreme Programming \u2013 have an important role in the development process. They are responsible for the requirements and backlog deciding about the next steps within the development process. However, many companies face the difficulty of defining the tasks and the responsibilities of a product owner on their way towards an agile work environment.                 While literature addresses the tailoring of the product owner\u2019s role in general, research does not particularly consider the specifics of this role in the context of a systems development as we find for example in the oil and gas industry. Consequently, the question arises whether there are any differences between these two areas. In order to answer this question, we investigated on the current state of characteristics and tasks of product owners at Baker Hughes\u00a0\u2026", "num_citations": "6\n", "authors": ["1388"]}
{"title": "Helping Teams to Help Themselves: An Industrial Case Study on Interdependencies During Sprints\n", "abstract": " Software process improvement is a very important topic. Almost all companies and organizations face the necessity for improvement sooner or later. Sometimes, there is obvious potential for improvement (e.g., if the number of developers does not fit the project size). Nonetheless, fixing all obvious issues does not necessarily lead to a \u201cperfect\u201d project. There are a lot of interdependencies between project parameters that are difficult to detect \u2013 sometimes due to the influences of social aspects which can be hardly grasped.                 We want to support the process of improving daily work by simulating and visualizing how project parameters evolve over time. Our approach is based on building a System Dynamics model that takes into account key performance indicators as well as assumptions about social aspects. In the present case, we chose parameters of capacity, customer satisfaction, and mood. The\u00a0\u2026", "num_citations": "6\n", "authors": ["1388"]}
{"title": "Forecasting communication behavior in student software projects\n", "abstract": " Communication is an essential part of software product development. Therefore, communication is an inevitable means for information sharing. For example, ill-communicated requirements, guidelines or decisions complicate working in a team and may threaten project success. Hence, monitoring communication behavior can help fostering project success by preventing loss of information due to insufficient communication.", "num_citations": "6\n", "authors": ["1388"]}
{"title": "Characterizing Relationships for System Dynamics Models Supported by Exploratory Data Analysis\n", "abstract": " Estimating dynamic components in projects involves understanding human factors which are substantial in software development. Communication and collaboration in teams consist of social-driven characteristics with influences on the continuous delivery of software. Efficiently estimated meetings become increasingly important due to budget calculations and shortened release cycles. Experiences of project managers combined with retrospectives on historical data records support a better understanding of team dynamics. But interpreting complex effects is not always trivial, in particular without further analyzes. In several studies, information relationships are investigated through linear correlation measures. Additional analyses for higher correlations are often neglected due to the advanced functional characterization. This leads to statistical gaps with significances for explored data relationships and their functional interpretation. In this paper, we present a systematic identification and visualization of team communication effects and diversities for field study records of 34 student software projects. We combine methodologies from system dynamics with exploratory data analysis to extract and emphasize significant effects. These insights help to sensitize for advanced investigations about the statistical measures of correlation and to interpret sophisticated structures. Furthermore, it reinforces potentials for a team\u2019s communication performances and enables an enhanced understanding about how student teams meet and communicate.", "num_citations": "5\n", "authors": ["1388"]}
{"title": "Towards a Better Understanding of Team-Driven Dynamics in Agile Software Projects\n", "abstract": " In agile software development, proper team structures and sprint estimations are crucial aspects to reach high-performance outcomes. Performance can vary due to the influence of social-driven team factors. Resulting in team dynamics with the focus on human factors are usually difficult to capture and thus often not monitored. However, their impact can impede the planning and fulfillment of sprints.                 Data on team behavior should be simplified to track, analyze, and interpret as sprint influences are important to understand. We provide a centralized solution that extends JIRA functionally and continuously captures sprint characteristics in the daily working environment of teams.                 In this paper, we describe a JIRA plugin that enables the assessment of team behavior in combination with exploratory analyses. The tool became approached with six software projects and a total of 53 undergraduate\u00a0\u2026", "num_citations": "4\n", "authors": ["1388"]}
{"title": "Are Product Owners communicators? A multi\u2010method research approach to provide a more comprehensive picture of Product Owners in practice\n", "abstract": " Product Owners have an important role in the agile and hybrid software development process. While this role is supposed to maximize the value of a product, there seem to be several scattered results on how they achieve this, as well as what actually constitutes this role in practice. To consolidate current research results and to further analyze the key attribute of Product Owners, we conducted a multi\u2010method research approach spanning a systematic mapping study and a consecutive case study in a hybrid development environment. The results of the mapping study states that Product Owners are communicators. We further investigated on this and used the shadowing technique to observe three Product Owners' communication activities. The results support that statement, as the gained data reveal that Product Owners spend 65% of their time in meetings. But rather than just providing the team with the necessary\u00a0\u2026", "num_citations": "3\n", "authors": ["1388"]}
{"title": "Towards understanding the motivation of german organizations to apply certain software development methods\n", "abstract": " The motivation to apply and to integrate agile methods into established development processes can be seen all over the world. However, the motivation for applying agile methods is not well understood as different objectives are possible: some organizations address the constantly changing market and customer demands, others are doing \u201cagile\u201d as the presumed best practice. This publication aims towards a better understanding of the motivation to apply the chosen development methods in Germany. We present preliminary results based on the data collection of the \u201cHybrid dEveLopmENt Approaches in software systems development\u201d (HELENA) study. Further, we exemplary look at the role of criticality for choosing agile or traditional development methods. The results indicate that the six development methods applied most in Germany are Scrum, Kanban, DevOps, Waterfall, V-Model, and Iterative\u00a0\u2026", "num_citations": "3\n", "authors": ["1388"]}
{"title": "Development and Application of Sentiment Analysis Tools in Software Engineering: A Systematic Literature Review\n", "abstract": " Software development is a collaborative task and, hence, involves different persons. Research has shown the relevance of social aspects in the development team for a successful and satisfying project closure. Especially the mood of a team has been proven to be of particular importance. Thus, project managers or project leaders want to be aware of situations in which negative mood is present to allow for interventions. So-called sentiment analysis tools offer a way to determine the mood based on text-based communication. In this paper, we present the results of a systematic literature review of sentiment analysis tools developed for or applied in the context of software engineering. Our results summarize insights from 80 papers with respect to (1) the application domain,(2) the purpose,(3) the used data sets,(4) the approaches for developing sentiment analysis tools and (5) the difficulties researchers face when\u00a0\u2026", "num_citations": "2\n", "authors": ["1388"]}
{"title": "Identifying the Mood of a Software Development Team by Analyzing Text-Based Communication in Chats with Machine Learning\n", "abstract": " Software development encompasses many collaborative tasks in which usually several persons are involved. Close collaboration and the synchronization of different members of the development team require effective communication. One established communication channel are meetings which are, however, often not as effective as expected. Several approaches already focused on the analysis of meetings to determine the reasons for inefficiency and dissatisfying meeting outcomes. In addition to meetings, text-based communication channels such as chats and e-mails are frequently used in development teams. Communication via these channels requires a similar appropriate behavior as in meetings to achieve a satisfying and expedient collaboration. However, these channels have not yet been extensively examined in research.                 In this paper, we present an approach for analyzing\u00a0\u2026", "num_citations": "2\n", "authors": ["1388"]}
{"title": "Tool-Supported Experiments for Continuously Collecting Data of Subjective Video Quality Assessments During Video Playback\n", "abstract": " The adequate use of documentation for communication is one challenge in requirements engineering (RE). In recent years, several researchers addressed this challenge by using videos as a communication mechanism. All of them concluded that this way of using videos has the potential to facilitate requirements communication. Nevertheless, software professionals are not directors and thus do not necessarily know what constitutes a good video. This lack of knowledge is one crucial reason why videos are still not an established communication mechanism in RE. When videos shall be established in the RE activities, practices, and techniques, requirements engineers have to acquire the necessary knowledge to produce and use good videos on their own at moderate costs, yet sufficient quality. In our research project ViViReq (see Acknowledgment), we aspire to bridge this knowledge gap about what constitutes a good video. Whether a video is good or not depends on its quality perceived by its viewers. However, video quality is a rather ill-defined concept due to numerous unspecified technical and subjective characteristics. As part of our research plan, we develop a quality model for videos inspired by the idea of Femmer and Vogelsang to define and evaluate the quality of videos as RE artifacts. In addition to evaluating videos, this quality model can be used to identify the relevant characteristics of videos for their specific purpose which can be further used to specify requirements, their criteria for satisfaction, and corresponding measures. Therefore, software professionals may use the quality model as guidance for producing and using videos.", "num_citations": "2\n", "authors": ["1388"]}
{"title": "Modeling and Analyzing Information Flow in Development Teams as a Pipe System.\n", "abstract": " Teamwork is essential for developing valuable software. Working in a team requires an appropriate information exchange among team members in order to avoid loss of information. In order to analyze and improve information flows, it is recommended to observe the information exchange in a team. We propose an approach for modeling the information flow of teams as a pipe system. Different pipe diameters represent the amount of information passing through the pipe. In order to show the applicability of our approach, we conducted a case study in a globally distributed software engineering company. The study consists of the elicitation of information flows inside the company and the automated analysis by our approach. We are able to visualize the information flows, find critical paths such as bottlenecks, and improve information flow structures. This enables project leaders to customize the communication structure to the needs of their team and to prevent loss of information.", "num_citations": "2\n", "authors": ["1388"]}
{"title": "Different Views on Project Success\n", "abstract": " Software project success has various facets and definitions ranging from customer satisfaction over software quality to the degree of implemented vs. not implemented requirements. Customers, developers and project leaders strive for project success. During the development process, they try to pay attention to aspects which are perceived to be important for a satisfying project execution from their individual point of view. These aspects may vary according to the underlying definition and understanding of project success. Different views on the importance of aspects like communication can cause problems and complicate the collaboration due to different expectations and misunderstandings.                 In a study with 97 student participants and eight customers, we examine which factors are perceived to be important for a successful project execution. In order to unfold discrepancies, we analyze whether the\u00a0\u2026", "num_citations": "2\n", "authors": ["1388"]}
{"title": "Is Task Board Customization Beneficial?\n", "abstract": " The task board is an essential artifact in many agile development approaches. It provides a good overview of the project status. Teams often customize their task boards according to the team members\u2019 needs. They modify the structure of boards, define colored codings for different purposes, and introduce different card sizes. Although the customizations are intended to improve the task board\u2019s usability and effectiveness, they may also complicate its comprehension and use. The increased effort impedes the work of both the team and team externals. Hence, task board customization is in conflict with the agile practice of fast and easy overview for everyone.                 In an eye tracking study with 30 participants, we compared an original task board design with three customized ones to investigate which design shortened the required time to identify a particular story card. Our findings yield that only the\u00a0\u2026", "num_citations": "2\n", "authors": ["1388"]}
{"title": "Miscommunication in Software Projects: Early Recognition Through Tendency Forecasts\n", "abstract": " Efficient team communication is essential for software project success. Misunderstood or underestimated demands on customer requirements and insufficient information sharing within a team can rapidly cause the delay of software releases, hamper customer satisfaction or even endanger the project succeed. The challenges remain\u00a0to quantify the right amount of communication according to durations, necessary effort, and the ambitions to avoid firefighting situations. Especially newly build or less experienced teams often struggle with their information flow. To improve team communication performances for these teams, we build an experience based classifier model that interpolates tendency forecasts with five approved team communication metrics from related work. The model matches archival project communications with present team conditions and computes tendency forecasts for the ongoing\u00a0\u2026", "num_citations": "2\n", "authors": ["1388"]}
{"title": "From Textual to Verbal Communication: Towards Applying Sentiment Analysis to a Software Project Meeting\n", "abstract": " Sentiment analysis gets increasing attention in software engineering with new tools emerging from new insights provided by researchers. Existing use cases and tools are meant to be used for textual communication such as comments on collaborative version control systems. While this can already provide useful feedback for development teams, a lot of communication takes place in meetings and is not suited for present tool designs and concepts. In this paper, we present a concept that is capable of processing live meeting audio and classifying transcribed statements into sentiment polarity classes. We combine the latest advances in open source speech recognition with previous research in sentiment analysis. We tested our approach on a student software project meeting to gain proof of concept, showing moderate agreement between the classifications of our tool and a human observer on the meeting audio\u00a0\u2026", "num_citations": "1\n", "authors": ["1388"]}
{"title": "Towards Shaping the Software Lifecycle with Methods and Practices\n", "abstract": " As software projects are very diverse, each software development process must be adjusted to the needs of the project and the corresponding development team. Frequently, we find different methods and practices combined in a so-called hybrid development method. Research has shown that these hybrid methods evolve over time and are devised based on experience. However, when devising a hybrid method, the methods and practices used should cover the whole software project with its different phases including, among others, project management, requirements analysis, quality management, risk management, and implementation. In this paper, we analyze which methods and practices are used in which phase of a software project. Based on an initial survey with 27 practitioners, we provide a mapping of methods and practices to different project phases and vice versa. Despite the preliminary nature of our study and the small sample size, we observe three remarkable aspects: (1) there are discrepancies between the intended use of methods and practices according to literature and the real use in practice, (2) practices are used more consistently than methods, and (3) parts of the software lifecycle such as maintenance and evolution are hardly covered by widely distributed methods and practices. Consequently, when devising a development process, it is worth a thought whether all phases of the software lifecycle are addressed or not.", "num_citations": "1\n", "authors": ["1388"]}
{"title": "Affecting Mood, Motivation and Productivity in Requirements Engineering Meetings and Beyond: A Research Vision\n", "abstract": " In Requirements Engineering, a lot of communication takes place in conversations and meetings, such as workshops, focus groups, interviews, and review sessions. Research has shown that interactions in meetings influence the group affect after the meeting - and hence the participants' motivation for (further) contributing to the project. However, it remains unclear, how positive affect can be achieved. In this vision paper, we propose to analyze interactions in meetings to find relations between the participants' behavior and affect afterwards. This allows to identify \"good\" behavior in meetings to smooth the way to satisfied project team members and successful projects.", "num_citations": "1\n", "authors": ["1388"]}
{"title": "Product-Focused Software Process Improvement\n", "abstract": " The 19th International Conference on Product-Focused Software Process Improvement (PROFES 2018) brought together software researchers and industrial practitioners to Wolfsburg, Germany, during November 28\u201330, 2018. The hosting institutions were Clausthal University of Technology (TUC) and Leibniz Universit\u00e4t Hannover (LUH) in Germany. In the spirit of the PROFES conference series, PROFES 2018 provided a premier forum for practitioners, researchers, and educators to present and discuss experiences, ideas, innovations, as well as concerns related to professional software process improvement motivated by product and service quality needs. PROFES 2018 had an international committee of well-known experts in software quality and process improvement carefully peer-reviewing the scientific submissions. This year, we received 65 submissions for the scientific paper track of which 16 were\u00a0\u2026", "num_citations": "1\n", "authors": ["1388"]}
{"title": "Soziale Aspekte hybrider und traditioneller Software-Entwicklung.\n", "abstract": " Agile Softwareentwicklung gewinnt zunehmend an Bedeutung. In den letzten beiden Jahrzehnten wurde der Anteil agil entwickelnder Firmen immer gr\u00f6\u00dfer. Die Entscheidung, ob in einem Team plangetrieben oder agil entwickelt wird, wirkt sich auf die gesamte Organisation des Projekts und damit auf alle Beteiligten aus.", "num_citations": "1\n", "authors": ["1388"]}