{"title": "The chemical abstract machine\n", "abstract": " We introduce a new kind of abstract machine based on the chemical metaphor used in the \u0393 language of Ban\u00e2tre and Le M\u00e9tayer. States of a machine are chemical solutions where floating molecules can interact according to reaction rules. Solutions can be stratified by encapsulating subsolutions within membranes that force reactions to occur locally. We illustrate the use of this model by describing the operational semantics of the TCCS and CCS process calculi and of the fragment of Milner, Parrow and Walker's Calculus of Mobile Processes used by Milner to encode the lambda-calculus. We also give ideas on how to extract a higher-order concurrent \u03bb-calculus out of the basic concepts of the chemical abstract machine.", "num_citations": "1677\n", "authors": ["1787"]}
{"title": "The foundations of Esterel\n", "abstract": " The foundations of Esterel | Proof, language, and interaction ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksProof, language, and interaction: essays in honour of Robin MilnerThe foundations of Esterel chapter The foundations of Esterel Share on Author: G\u00e9rard Berry profile image G\u00e9rard Berry View Profile Authors Info & Affiliations Publication: Proof, language, and interaction: essays in honour of Robin MilnerJuly 2000 Pages 425\u2013454 112citation 0 Downloads Metrics Total Citations112 Total Downloads0 Last 12 Months0 Last 6 weeks0 Get Citation Alerts New Citation Alert added! This alert has been successfully added and \u2026", "num_citations": "818\n", "authors": ["1787"]}
{"title": "Real time correlation-based stereo: algorithm, implementations and applications\n", "abstract": " This paper describes some of the work on stereo that has been going on at INRIA in the last four years. The work has concentrated on obtaining dense, accurate, and reliable range maps of the environment at rates compatible with the real-time constraints of such applications as the navigation of mobile vehicles in man-made or natural environments. The class of algorithms which has been selected among several is the class of correlationbased stereo algorithms because they are the only ones that can produce su ciently dense range maps with an algorithmic structure which lends itself nicely to fast implementations because of the simplicity of the underlying computation. We describe the various improvements that we have brought to the original idea, including validation and characterization of the quality of the matches, a recursive implementation of the score computation which makes the method independent of the size of the correlation window, and a calibration method which does not require the use of a calibration pattern. We then describe two implementations of this algorithm on two very different pieces of hardware. The rst implementation is on a board with four Digital Signal Processors designed jointly with Matra MSII. This implementation can produce 64 64 range maps at rates varying between 200 and 400 ms, depending upon the range of disparities. The second implementation is on a board developed by DEC-PRL and can perform the cross-correlation of two 256 256 images in 140 ms.The rst implementation has been integrated in the navigation system of the INRIA cart and used to correct for inertial and odometric errors in\u00a0\u2026", "num_citations": "630\n", "authors": ["1787"]}
{"title": "The ESTEREL synchronous programming language and its mathematical semantics\n", "abstract": " I. IN~ ODUCTION. The goal of the ESTEREL project is to develop a real-time language based on a~ 4~ Iorous four, el model, and actually to develop simultaneously the language, its semantics and its implementation. The present paper presents a reasonably stabilized version of ESTEREL together with its formal structural operational semantics. The language is rather unclassical since it is purely svnchronous, dvterrninistic, and based on a mul'tiforrr~ notion of time, while all parallel and\" real-time\" languages such as ADA [3], CSP [19], LTR [1], OCCAM [4], RTL/2 [6], are asynchronous, nondeterministic, and consider only one notion of\" absolute\" time for their temporal primitives. The mathematical semantics leads naturally to a compiler producing small and efficient finite automata from ESTEREL programs, with possibility of temporal analysis by systems such as Clarke's EMC", "num_citations": "510\n", "authors": ["1787"]}
{"title": "From regular expressions to deterministic automata\n", "abstract": " The main theorem allows an elegant algorithm to be refined into an efficient one. The elegant algorithm for constructing a finite automaton from a regular expression is based on \u2018derivatives of\u2019regular expressions; the efficient algorithm is based on \u2018marking of\u2019regular expressions. Derivatives of regular expressions correspond to state transitions in finite automata. When a finite automaton makes a transition under input symbol a, a leading a is stripped from the remaining input. Correspondingly, if the input string is generated by a regular expression E, then the derivative of E by a generates the remaining input after a leading a is stripped. Brzozowski (1964) used derivatives to construct finite automata; the state for expression E has a transition under a to the state for the derivative of E by a. This approach extends to regular expressions with new operators, including intersection and complement; however, explicit\u00a0\u2026", "num_citations": "434\n", "authors": ["1787"]}
{"title": "Real time programming: Special purpose or general purpose languages\n", "abstract": " We diseuse real-time programming in two kinds of high-level programming languages: general purpose languages such as ADA and special purpose synchronous languages such as ESTEREL. General purpose languages are inherently asynchronous and non-deterministic; this yields severe di\ufb01iculties in real-time applications. Synchronous languages speci\ufb01cally deal with real\u2014time reaction to interrupts; they are better to program compact real\u2014time applications or application parts. Complex applications require the cooperation of both kinds of languages,", "num_citations": "412\n", "authors": ["1787"]}
{"title": "Stable models of typed \u03bb-calculi\n", "abstract": " Following Scott, the denotational semantics of programming languages are usually built from the notion of continuous functions. The need for restricted models has been emphasized by Plotkin and Milner, which showed thats continuous function models did not capture all operational properties of ALGOL-like sequential languages. We present new model constructions from a notion of stable function. This requires the introduction of two different orderings between stable functions which give very different cpo structures to the function spaces. We show that Milner's fully abstract model of Plotkin's PCP language only contains stable functions.", "num_citations": "378\n", "authors": ["1787"]}
{"title": "The constructive semantics of pure Esterel\n", "abstract": " Contents 1 Introduction 9 I Informal Presentation 17 2 The Pure Esterel Kernel Language 19 2.1 Signals and Reactions...................... 19 2.2 Kernel Esterel Statement.................... 20 2.3 The Intuitive Semantics..................... 20 2.4 Comparison with Previous Kernels............... 23 3 Logical Correctness 27 3.1 Logical Correctness........................ 28 3.2 Examples of Logically Correct Programs............ 28 3.3 Examples of Logically Incorrect Programs........... 30 3.4 A Strange Logically Correct Program.............. 32 4 The Constructive Approach 35 4.1 External Justi\u00f8cation Versus Self-justi\u00f8cation......... 35 4.2 The Constructive Behavioral Semantics............ 37 4.2. 1 Accepting Programs................... 38 4.", "num_citations": "318\n", "authors": ["1787"]}
{"title": "Sequential algorithms on concrete data structures\n", "abstract": " We provide a sequential denotational semantics for sequential programming languages, based on a new notion of sequential algorithm on the Kahn-Plotkin concrete data structures. Intuitively an algorithm may be seen either as a concrete object\u2014a \u201cprogram\u201d in a simple output-driven language \u2014 or as an abstract object \u2014 the pair of a sequential function and of a computation strategy for it. The concrete and abstract presentations are equivalent, as shown by a representation theorem. The algorithms form a cartesian closed category with straightforward solutions to recursive domain equations. Hence they may replace functions in the denotational semantics of any sequential language. An applicative programming language based on sequential algorithms is presented in a companion paper.", "num_citations": "273\n", "authors": ["1787"]}
{"title": "Compiling esterel\n", "abstract": " Designed as the definitive reference on the compilation of the Esterel synchronous reactive real-time language, Compiling Esterel covers all aspects of the language and includes a tutorial, a reference manual, its formal semantics, and detailed technical information about the many techniques used to compile it. Esterel is based on the simple idea of providing a software language that has a synchronous model of time. That is, the execution of the program is divided into discrete instants, and statements are either guaranteed to execute in a single instant, or take multiple instants as requested by the programmer. Suitable for programming safety-critical real-time systems, Esterel and its model of computation have found use in industrial applications such as avionics, integrated circuit design, and other safety-critical environments. While Compiling Esterel does not assume prior knowledge of the Esterel language, readers will appreciate having prior knowledge of programming language semantics and compiler technology, along with some familiarity with synchronous digital hardware design. Researchers as well as advanced developers will find Compiling Esterel essential for understanding Esterel at all levels.", "num_citations": "227\n", "authors": ["1787"]}
{"title": "Communicating reactive processes\n", "abstract": " We present a new programming paradigm called Communicating Reactive Processes or CRP that unifies the capabilities of asynchronous and synchronous concurrent programming languages. Asynchronous languages such as CSP, OCCAM, or ADA are well-suited for distributed algorithms; their processes are loosely coupled and communication takes time. The ESTEREL synchronous language is dedicated to reactive systems; its processes are tightly coupled and deterministic, communication being realized by instantaneous broadcasting. Complex applications such as process of robot control require to couple both forms of concurrency, which is the object of CRP. A CRP program consists of independent locally reactive ESTEREL nodes that communicate with each other by CSP rendezvous. CRP faithfully extends both ESTEREL and CSP and adds new possibilities such as precise local watchdogs on\u00a0\u2026", "num_citations": "208\n", "authors": ["1787"]}
{"title": "Constructive analysis of cyclic circuits\n", "abstract": " Traditionally, circuits with combinational loops are found only in asynchronous designs. However, combinational loops can also be useful for synchronous circuit design. Combinational loops can arise from high-level language behavioral compiling, and can be used to reduce circuit size. We provide a symbolic algorithm that detects if a sequential circuit with combinational loops exhibits standard synchronous behavior, and if so, produces an equivalent circuit without combinational loops. We present applications to hardware and software synthesis from the Esterel synchronous programming language.", "num_citations": "205\n", "authors": ["1787"]}
{"title": "Preemption in concurrent systems\n", "abstract": " Process preemption deals with contolling the life and death of concurrent processes. Well-defined preemption mechanisms are essential in control-dominated reactive and real-time programming, and accurate handling of preemption requires a time-dependent model. We first informally discuss what preemption is about and argue for the need of preemption primitives that are fully orthogonal with sequencing and concurrency ones. Then, we formally present the preemption operators of the Esterel zero-delay process calculus, which is a theoretical version of the Esterel synchronous programming language.", "num_citations": "205\n", "authors": ["1787"]}
{"title": "Real-time locating systems (RTLS) in healthcare: a condensed primer\n", "abstract": " Real-time locating systems (RTLS, also known as real-time location systems) have become an important component of many existing ubiquitous location aware systems. While GPS (global positioning system) has been quite successful as an outdoor real-time locating solution, it fails to repeat this success indoors. A number of RTLS technologies have been used to solve indoor tracking problems. The ability to accurately track the location of assets and individuals indoors has many applications in healthcare. This paper provides a condensed primer of RTLS in healthcare, briefly covering the many options and technologies that are involved, as well as the various possible applications of RTLS in healthcare facilities and their potential benefits, including capital expenditure reduction and workflow and patient throughput improvements. The key to a successful RTLS deployment lies in picking the right RTLS option(s) and solution(s) for the application(s) or problem(s) at hand. Where this application-technology match has not been carefully thought of, any technology will be doomed to failure or to achieving less than optimal results.", "num_citations": "194\n", "authors": ["1787"]}
{"title": "Modeles completement ad\u00e9quats et stables des lambda-calculs typ\u00e9s\n", "abstract": " Sauf mention contraire ci-dessus, le contenu de cette notice bibliographique peut \u00eatre utilis\u00e9 dans le cadre d\u2019une licence CC BY 4.0 Inist-CNRS/Unless otherwise stated above, the content of this bibliographic record may be used under a CC BY 4.0 licence by Inist-CNRS/A menos que se haya se\u00f1alado antes, el contenido de este registro bibliogr\u00e1fico puede ser utilizado al amparo de una licencia CC BY 4.0 Inist-CNRS", "num_citations": "186\n", "authors": ["1787"]}
{"title": "A hardware implementation of pure Esterel\n", "abstract": " esterel is a synchronous concurrent programming language dedicated to reactive systems (controllers, protocols, man-machine interfaces etc.). esterel has an efficient standard software implementation based on well-defined mathematical semantics. We present a new hardware implementation of the pure synchronization subset of the language. Each program generates a specific circuit that responds to any input in one clock cycle. When the source program satisfies some statically checkable dynamic properties, the circuit is shown to be semantically equivalent to the source program. The hardware translation has been effectively implemented on the programmable active memory perle0 developed by J Vuillemin and his group at Digital Equipment.", "num_citations": "177\n", "authors": ["1787"]}
{"title": "The Esterel v5 language primer\n", "abstract": " CiteSeerX \u2014 The Esterel v5 Language Primer Documents Authors Tables Log in Sign up MetaCart DMCA Donate CiteSeerX logo Documents: Advanced Search Include Citations Authors: Advanced Search Include Citations Tables: DMCA The Esterel v5 Language Primer (1999) Cached Download as a PDF Download Links [rw4.cs.uni-sb.de] [rw4.cs.uni-saarland.de] Save to List Add to Collection Correct Errors Monitor Changes by G\u00e9rard Berry Citations: 35 - 0 self Summary Citations Active Bibliography Co-citation Clustered Documents Version History Share Facebook Twitter Reddit Bibsonomy OpenURL Abstract Version v5 91 Keyphrases esterel v5 language primer Powered by: Apache Solr About CiteSeerX Submit and Index Documents Privacy Policy Help Data Source Contact Us Developed at and hosted by The College of Information Sciences and Technology \u00a9 2007-2019 The Pennsylvania State University \u2026", "num_citations": "164\n", "authors": ["1787"]}
{"title": "Minimal and optimal computations of recursive programs\n", "abstract": " Vufllemm's results on opumal computations of recurswe programs are generalized New syntactic results are obtained by considering spaces of denvauons instead of terms The results apply to classes of mterpretauons more general than the sequential interpretations of Vmllemm", "num_citations": "157\n", "authors": ["1787"]}
{"title": "Full abstraction for sequential languages: the state of the art\n", "abstract": " When writing programs we usually think in terms of rather abstract entities: numbers, trees, functions.... But when running programs we use machines for which these entities make no sense: they only push symbols. We generally hope that there is a reasonable correspondence between what we want to compute'and the list of symbols output by the machine at the end of the execution (if any). This resembles the classical relation between axiomatic theories and models in logic: operational semantics (what the machine does) corresponds to axiomatic deduction, while abstract semantics corresponds to models. Hence the required correspondence should be expressed by adequation and completeness results. In computer science, contrarily to what happens in classical logic, the primary concept is not that of model, but that of machine (the machine is always right). Hence adequation and completeness will be defined according to a machine, or in more accurate terms to an operational semantics.", "num_citations": "138\n", "authors": ["1787"]}
{"title": "Pourquoi et comment le monde devient num\u00e9rique\n", "abstract": " Pourquoi et comment le monde devient num\u00e9rique Page 1 1 Pourquoi et comment le monde devient num\u00e9rique G\u00e9rard Berry Chaire d'innovation technologique Liliane Bettencourt Coll\u00e8ge de France 17 janvier 2008 Page 2 2 De grands bouleversements Communication : Internet, t\u00e9l. portable, t\u00e9l. gratuit Audio-visuel : MP3, photo/vid\u00e9o num\u00e9rique, RDS, TNT, TVHD Commerce : en ligne Cartographie : cartes & photos interactives Transports: GPS, pilotage, s\u00e9curit\u00e9 Industrie: gestion, outillage, CAO, travail \u00e0 distance Sciences: mod\u00e9lisation et exp\u00e9rimentation num\u00e9rique M\u00e9decine: imagerie num\u00e9rique, chirurgie robotique Grande industrie qui irrigue toutes les autres Page 3 3 Les quatre piliers du num\u00e9rique 1. La num\u00e9risation de l'information 2. La prodigieuse machine \u00e0 information 3. La science et la technologie de sa conception et de son usage 4. Un espace d'innovation (presque) sans frein Page 4 4 Les grands \u2026", "num_citations": "102\n", "authors": ["1787"]}
{"title": "The Esterel v5 language primer: version v5_91\n", "abstract": " This document is the primer for the EsterelTM synchronous programming language, which is devoted to programming control-dominated software or hardware reactive systems. The language version is that of the Esterel v5 system, version v5 91. This new language version extends the previous version v5 21 by the addition of new pre operators, which makes it possible to access the previous status and value of a signal. This has always been possible in data-flow languages such as Lustre [33] and Signal [31], but has long been missing in Esterel. This addition should simplify programming and reduce causality problems. The rest of the language is left unmodified. The reader familiar with previous versions of this document should simply read Section 3.3, Section 3.5, Section 4.6. 1, Section 4.6. 2, Section 4.6. 3, Section 4.7. 12, Section 4.7. 13, and Chapter 5. We tried to write the primer in a precise but informal way that should make most users happy in their use of the language and system. However, the primer is not meant to be the reference document for the language and semantics. The language reference manual will be appended to the primer in a subsequent release and the formal semantics is given in the companion book \u201cThe Constructive Semantics of Pure Esterel\u201d[9], which discusses all mathematical semantics issues in depth. The use of the Esterel v5 system is presented in the documentation delivered with the system.", "num_citations": "92\n", "authors": ["1787"]}
{"title": "Multiclock esterel\n", "abstract": " We present the Multiclock Esterel language, which extends the synchronous language Esterel to multiple clock zones. While Esterel is good for compact single-clocked hardware or software designs, modern electronic designs are growing rapidly and they can no longer be designed in a monolithic fashion. Problems such as clock distribution, complexity, and power limitations have led designers to construct designs in a modular, multiple clock fashion. Multiclock Esterel is designed precisely to address this design style. It is a natural extension of Esterel, and retains its strong synchronous semantics and internal determinism. Statements driven by different clocks communicate through two special devices called the sampler and the reclocker. Multiclock Esterel should be understood as a preliminary language proposal meant to study multiclocking. It has not yet been validated by large experiments.", "num_citations": "88\n", "authors": ["1787"]}
{"title": "Latch optimization in circuits generated from high-level descriptions\n", "abstract": " In a gate-level description of a finite state machine (FSM), there is a tradeoff between the number of latches and the size of the logic implementing the next-state and output functions. Typically, an initial implementation is generated via explicit state assignment or translation from a high-level language, and the tradeoff is subsequently only lightly explored. We efficiently explore good latch/logic tradeoffs for large designs generated from high-level specifications. We reduce the number of latches while controlling the logic size. We demonstrate the efficacy of our techniques on some large industrial examples.", "num_citations": "78\n", "authors": ["1787"]}
{"title": "System level design and verification using a synchronous language\n", "abstract": " Synchronous languages such as Esterel, Lustre, Signal, and others were originally developed for safety-critical embedded software and compiled into C. They have recently been extended to hardware with new language features and compilers to RTL. Contrary to traditional HDL languages (Verilog, VHDL) and recent system-level languages (SystemC, System Verilog), they have well defined formal semantics, which facilitate bug avoidance using correct-by-construction compilation and verification techniques. The tutorial will demonstrate what the synchronous language offers for the modeling, design, analysis and implementation of systems that comprise hardware and software. It will be based on Esterel. Esterel models have proved to be useful for rapid design space exploration and verification at system level, without resorting to detailed implementation and slow bit-level event-based simulation. We show how\u00a0\u2026", "num_citations": "76\n", "authors": ["1787"]}
{"title": "SCADE: Synchronous design and validation of embedded control software\n", "abstract": " We describe the SCADE synchronous approach to model-based embedded software design, validation, and implementation for avionics, automotive, railway, and industry applications. SCADE specifications are based on block-diagrams and hierarchical state-machine graphical models with rigorous formal specifications. The SCADE KCG compiler is certified at the highest level of avionics certification, which suppresses the need for generated code unit testing. The SCADE tool has support for visual animation, test-suite coverage analysis, and formal verification. It has gateways to many other tools ranging from system-level specification to performance analysis.", "num_citations": "71\n", "authors": ["1787"]}
{"title": "Informatics education: Europe cannot afford to miss the boat\n", "abstract": " 3. Informatics covers the science behind information technology. Informatics is a distinct science, characterized by its own concepts, methods, body of knowledge and open issues. It has emerged, in a role similar to that of mathematics, as a crossdiscipline field underlying today\u2019s scientific, engineering and economic progress.", "num_citations": "68\n", "authors": ["1787"]}
{"title": "Programmation synchrone des syst\u00e8mes r\u00e9actifs: le langage Esterel\n", "abstract": " Sauf mention contraire ci-dessus, le contenu de cette notice bibliographique peut \u00eatre utilis\u00e9 dans le cadre d\u2019une licence CC BY 4.0 Inist-CNRS/Unless otherwise stated above, the content of this bibliographic record may be used under a CC BY 4.0 licence by Inist-CNRS/A menos que se haya se\u00f1alado antes, el contenido de este registro bibliogr\u00e1fico puede ser utilizado al amparo de una licencia CC BY 4.0 Inist-CNRS", "num_citations": "67\n", "authors": ["1787"]}
{"title": "Bottom-up computation of recursive programs\n", "abstract": " In this paper, we de fine and study a mechanism for the implementation of recursive programs: we call it production mechanism by opposition to the usual recursion mechanism. It computes bottom-up, starting from the basic values given by halting conditions, and g\u00e9n\u00e9r\u00e2tes intermediate values leading to the resuit. We use for this purpose a translation of a recursive program into a system of \u00e9quations in a space ofsets. We introduc\u00e9 determinism conditions providing the uniqueness of the set of intermediate values; we study the structure of this set. As an application, we show the opiimality of an implementation of Ackermann program (Rice's algorithm).", "num_citations": "60\n", "authors": ["1787"]}
{"title": "S\u00e9quentialit\u00e9 de l'\u00e9valuation formelle des lambda-expressions\n", "abstract": " Sauf mention contraire ci-dessus, le contenu de cette notice bibliographique peut \u00eatre utilis\u00e9 dans le cadre d\u2019une licence CC BY 4.0 Inist-CNRS/Unless otherwise stated above, the content of this bibliographic record may be used under a CC BY 4.0 licence by Inist-CNRS/A menos que se haya se\u00f1alado antes, el contenido de este registro bibliogr\u00e1fico puede ser utilizado al amparo de una licencia CC BY 4.0 Inist-CNRS", "num_citations": "59\n", "authors": ["1787"]}
{"title": "The semantics of pure Esterel\n", "abstract": " We present a survey of the main semantics of Pure Esterel, the communication kernel of the Esterel synchronous reactive language. We start by an informal presentation of the Pure Esterel language. We then present the behavioral semantics that defines the language. We define the notion of a haltset that corresponds to a distributed program counter. Using haltsets, we show that Pure Esterel programs have only a finite number of states. The behavioral semantics semantics is not effective in the sense that its inference rules do not yield direct proof constructions. We study Gonthier\u2019s effective operational semantics used in the Esterel v3 compiler. Finally, we study the electrical semantics, i.e. the translation of Pure Esterel programs into circuits that forms the basis of the Esterel v4 compiler.", "num_citations": "56\n", "authors": ["1787"]}
{"title": "Synchronous design and verification of critical embedded systems using SCADE and Esterel\n", "abstract": " Synchronous Design and Verification of Critical Embedded Systems using SCADE and Esterel Page 1 G. Berry, ADA 2007 - 1 \u00a9 Esterel Technologies 2007 Synchronous Design and Verification of Critical Embedded Systems using SCADE and Esterel Chief Scientist www.esterel-technologies.com Gerard.Berry@esterel-technologies.com G\u00e9rard Berry Page 2 G. Berry, ADA 2007 - 2 \u00a9 Esterel Technologies 2007 Esterel Technologies - Industries Served SCADE Drive\u2122 Safety-critical automotive embedded software \u2022 code generator certified by TUV - IEC 61508 standard Esterel Studio\u2122 Specification-to-RTL of hardware IP designs \u2022 rigorous & unambiguous executable specifications \u2022 automatically-generated efficient RTL / C code SCADE Suite\u2122 De-facto Standard for Safety-critical avionics embedded software \u2022 DO-178B Level A certified systems \u2022 automatically-generated C code Page 3 G. Berry, ADA 2007 - 3 \u00a9 \u2026", "num_citations": "50\n", "authors": ["1787"]}
{"title": "Constructive Boolean circuits and the exactness of timed ternary simulation\n", "abstract": " We classify gate level circuits with cycles based on their stabilization behavior. We define a formal class of combinational circuits, the constructive circuits, for which signals settle to a unique value in bounded time, for any input, under a simple conservative delay model, called the up-bounded non-inertial (UN) delay. Since circuits with combinational cycles can exhibit asynchronous behavior, such as non-determinism or metastability, it is crucial to ground their analysis in a formal delay model, which previous work in this area did not do.               We prove that ternary simulation, such as the practical algorithm proposed by Malik, decides the class of constructive circuits. We prove that three-valued algebra is able to maintain correct and exact stabilization information under the UN-delay model, and thus provides an adequate electrical interpretation of Malik\u2019s algorithm, which has been missing in the literature\u00a0\u2026", "num_citations": "38\n", "authors": ["1787"]}
{"title": "An implementation of constructive synchronous programs in POLIS\n", "abstract": " Design tools for embedded reactive systems commonly use a model of computation that employs both synchronous and asynchronous communication styles. We form a junction between these two with an implementation of synchronous languages and circuits (Esterel) on asynchronous networks (POLIS). We implement fact propagation, the key concept of synchronous constructive semantics, on an asynchronous non-deterministic network: POLIS nodes (CFSMs) save state locally to deduce facts, and the network globally propagates facts between them. The result is a correct implementation of the synchronous input/output behavior of the program. Our model is compositional, and thus permits implementations at various levels of granularity from one CFSM per circuit gate to one CFSM per circuit. This allows one to explore various tradeoffs between synchronous and asynchronous implementations.", "num_citations": "37\n", "authors": ["1787"]}
{"title": "The Esterel v5 language primer version 5.21 release 2.0\n", "abstract": " This document is the primer for the EsterelTM synchronous programming language, which is devoted to programming control-dominated software or hardware reactive systems. The language version is that of the Esterel v5 system, but the language proper is in no way bound to that system, and this document should be valid for other implementations.We tried to write the primer in a precise but informal way that should make most users happy in their use of the language and system. However, the primer is not meant to be the reference document for the language and semantics. The language reference manual will be appended to the primer in a subsequent release and the formal semantics is given in the companion book \u201cThe Constructive Semantics of Pure Esterel\u201d[8], which discusses all mathematical semantics issues in depth. The use of the Esterel v5 system is presented in the documentation delivered with the system.", "num_citations": "36\n", "authors": ["1787"]}
{"title": "L'hyperpuissance de l'informatique: algorithmes, donn\u00e9es, machines, r\u00e9seaux\n", "abstract": " Ce n\u2019est que r\u00e9cemment que l\u2019on a commenc\u00e9 \u00e0 mesurer \u00e0 quel point l\u2019informatique est en passe de transformer notre soci\u00e9t\u00e9, et m\u00eame de la bouleverser de fond en comble. C\u2019est \u00e0 d\u00e9crire et \u00e0 analyser les fondements de l\u2019hyperpuissance de l\u2019informatique que G\u00e9rard Berry se consacre dans ce livre qui fera date. Il montre en effet de fa\u00e7on non technique comment la science et la technologie informatiques mettent l\u2019information au c\u0153ur de l\u2019action, qu\u2019elle soit produite par les hommes ou par les machines. Algorithmes, donn\u00e9es, machines et r\u00e9seaux conduisent surtout \u00e0 un nouveau sch\u00e9ma mental bien diff\u00e9rent de celui des si\u00e8cles pr\u00e9c\u00e9dents, qui conf\u00e8re un pouvoir \u00e9tonnant \u00e0 ceux qui le comprennent et l\u2019organisent. Pour donner concr\u00e8tement \u00e0 comprendre le mode de pens\u00e9e inh\u00e9rent \u00e0 l\u2019informatique, G\u00e9rard Berry passe en revue cinq domaines de transformations massives: les t\u00e9l\u00e9communications, Internet, la photographie et la cartographie, l\u2019informatisation de la m\u00e9decine, et celle en cours de toutes les sciences. Il analyse ensuite en d\u00e9tail deux dangers de l\u2019informatique, les bugs et les trous de s\u00e9curit\u00e9, qui peuvent parfois transformer des syst\u00e8mes informatis\u00e9s en dangers publics, et montre comment la science moderne permet de mieux contr\u00f4ler ces dangers. Enfin, l\u2019auteur donne sa vision de l\u2019\u00e9volution de l\u2019informatique, bien loin des fantasmes trop souvent partag\u00e9s. Pour la premi\u00e8re fois, un livre qui explique tout de l\u2019informatique, de son monde, ses fondements, ses applications, et la r\u00e9volution qu\u2019elle repr\u00e9sente. G\u00e9rard Berry est professeur au Coll\u00e8ge de France o\u00f9 il dirige la chaire Algorithmes, machines et langages. Il est m\u00e9daille\u00a0\u2026", "num_citations": "35\n", "authors": ["1787"]}
{"title": "The constructive semantics of pure Esterel. Draft version 3\n", "abstract": " We present the reference semantical framework for the synchronous programming language Esterel, which we call the constructive framework. After a detailed explanation of the causality issues in the language and an intuitive presentation of constructiveness, we show the equivalence between three semantics: the constructive behavioral semantics, the constructive operational semantics, and the electrical semantics, which is based on a translation of Esterel programs into digital circuits. The main full abstraction result is that an Esterel program is constructive if and only if its possibly cyclic circuit reaches electrical stabilization in bounded time. The constructive semantics supersedes all previous semantical attempts for the de nition of Esterel, while remaining perfectly compatible with them. The constructive semantics is compositional, unlike its predecessors. The constructive semantics is implemented in the Esterel v5 compiler. This new compiler accepts all programs accepted by the previous Esterel v3 and v4 compiler, as well as all the constructive programs these compilers reject.This draft book is directed to the users of Esterel who want to understand the underlying language and semantics design, and, more generally, to the readers who are interested in language semantics. It complements the general presentation of Esterel called The Foundations of Esterel, see 8], the Esterel Primer, 7], and the Esterel v5 Systems Manual 12]. Our central aims are to explain the design and properties of the constructive semantics, which, to our belief, should be the nal one, to make causality issues understandable, a thing that has long been missing, and\u00a0\u2026", "num_citations": "31\n", "authors": ["1787"]}
{"title": "Programming a digital watch in Esterel v3\n", "abstract": " We study how to program a reasonably complex digital wristwatch in ESTEREL, how to simulate the ESTEREL program under the ESTEREL V3 system, and how to execute the generated C code in a fullscreen simulation of the wristwatch under UNIX. This is not intended to be a. research on wristwatchs, but a good example of a medium-size ESTEREL program where many non-trivial and interesting details have to be taken care of. We put a particular emphasis on architectural questions, on modularity considerations, and on the new synchronous programming style introduced by ESTEREL. We do not try to write a small compact program. Instead, we build our watch from reusable components, making the ESTEREL program bigger but easier to maintain and to modify. We study soma possible variants of the wristwatch.", "num_citations": "30\n", "authors": ["1787"]}
{"title": "Proof, Language, and Interaction: Essays in Honour of Robin Milner\n", "abstract": " This collection of original essays reflects the breadth of current research in computer science. This collection of original essays reflects the breadth of current research in computer science. Robin Milner, a major figure in the field, has made many fundamental contributions, particularly in theoretical computer science, the theory of programming languages, and functional programming languages. Following a brief biography of Milner, the book contains five sections: Semantic Foundations, Programming Logic, Programming Languages, Concurrency, and Mobility. Together the pieces convey a seamless whole, ranging from highly abstract concepts to systems of great utility. Contributors: Samson Abramsky, JCM Baeten, Sergey Berezin, JA Bergstra, Gerard Berry, Lars Birkedal, Gerard Boudol, Edmund Clarke, Pierre Collette, Robert L. Constable, Pierre-Louis Curien, Jaco de Bakker, Uffe H. Engberg, William Ferreira, Fabio Gadducci, Mike Gordon, Robert Harper, Matthew Hennessy, Yoram Hirshfeld, CAR Hoare, Gerard Huet, Paul B. Jackson, Alan SA Jeffrey, Somesh Jha, He Jifeng, Cliff B. Jones, Cosimo Laneve, Xinxin Liu, Will Marrero, Faron Moller, Ugo Montanari, Pavel Naumov, Mogens Nielsen, Joachim Parrow, Lawrence C. Paulson, Benjamin C. Pierce, Gordon Plotkin, MA Reniers, Amokrane Saibi, Augusto Sampaio, Davide Sangiorgi, Scott A. Smolka, Eugene W. Stark, Christopher Stone, Mads Tofte, David N. Turner, Juan Uribe, Franck van Breugel, David Walker, Glynn Winskel.", "num_citations": "24\n", "authors": ["1787"]}
{"title": "Multitier programming in hop\n", "abstract": " A first step toward programming 21st-century applications.", "num_citations": "23\n", "authors": ["1787"]}
{"title": "Compilation du langage Esterel en syst\u00e8mes d'\u00e9quations bool\u00e9ennes\n", "abstract": " Le travail que nous presentons dans cette these formalise la traduction du langage reactif synchrone esterel en systemes d'equations booleennes (un modele abstrait des circuits digitaux) et compare plusieurs algorithmes de traduction. De plus, nous faisons le lien entre cette traduction et la compilation classique d'esterel en automates et nous presentons en detail le compilateur esterel v4, qui implemente un de ces algorithmes. Pour obtenir une traduction exacte et efficace d'esterel pur (c'est-a-dire sans manipulation de donnees) en systemes d'equations booleennes, nous construisons une suite de semantiques en prouvant formellement et en detail l'equivalence entre les semantiques successives. En partant de la semantique comportementale classique du langage esterel pur, nous derivons une nouvelle semantique, dite par ensembles de points d'arret, qui procede par reecritures d'ensembles de points de controle dans le texte du programme. Cette semantique, d'interet technique, nous permet ensuite de construire une premiere traduction d'esterel pur en systemes d'equations. Cette traduction est relativement inefficace, mais elle est complete et correcte. Nous proposons ensuite plusieurs ameliorations de la premiere traduction, et nous obtenons une seconde traduction. Nous decrivons egalement l'algorithme de gerard berry utilise dans le compilateur esterel v4 et nous le comparons a nos traductions. Enfin, nous decrivons les mises en uvre des traductions en equations: le compilateur esterel v4, base sur une extension a esterel-complet de l'algorithme de gerard berry, puis un prototype de compilateur implementant nos traductions\u00a0\u2026", "num_citations": "23\n", "authors": ["1787"]}
{"title": "Incremental development of an HDLC protocol in Esterel\n", "abstract": " Esterel is a parallel programming language based on a. model of synchronous parallelism and commu\u2014\u2019nication. All the parallelism, process handling and synchronization are performed by the Esterel compiler, which produces ef\ufb01cient sequential code containing only the data handling required at run-time. Separating a task into parallel components for better modularity, adding signals for better synchronization incur no run-time overhead as they are compiled away. This paper is an advanced tutorial on the new programming style that is made possible by these features. Our working example is an HDLC protocol driver, for which we will develop a modular program in gradual steps. We start from a simple, restricted case, and then add complexity and detail while retaining most of the initial code. The emphasis is \ufb01rst on design as we develop a program architecture that captures the basic structure of the driver, and\u00a0\u2026", "num_citations": "23\n", "authors": ["1787"]}
{"title": "Hop and HipHop: Multitier web orchestration\n", "abstract": " Rich applications merge classical computing, client-server concurrency, web-based interfaces, and the complex time- and event-based reactive programming found in embedded systems. To handle them, we extend the Hop web programming platform by HipHop, a domain-specific language dedicated to event-based process orchestration. Borrowing the synchronous reactive model of Esterel, HipHop is based on synchronous concurrency and preemption primitives that are known to be key components for the modular design of complex reactive behaviors. HipHop departs from Esterel by its ability to handle the dynamicity of Web applications, thanks to the reflexivity of Hop. Using a music player example, we show how to modularly build a non-trivial Hop application using HipHop orchestration code.", "num_citations": "22\n", "authors": ["1787"]}
{"title": "Incremental development of an HDLC entity in Esterel\n", "abstract": " Esterel is a new parallel programming language based on a model of perfectly synchronous parallelism and communication. Because this model is naturally deterministic, it provides an excellent framework for the modular decomposition of programs that engage in complex patterns of deterministic interaction, such as protocol entities. Furthermore, because the Esterel compiler performs all the scheduling and synchronization at compile-time, modular with lots of subprocesses and internal communication can be just as efficient as monolithic sequential state machines.A restricted model of an HDLC entity is used to illustrate the new programming style that is made possible by these features. An Esterel program is developed in several steps, starting from a simple restricted case, and then adding features and complexity. The emphasis is first on design as we develop a program architecture that captures the basic\u00a0\u2026", "num_citations": "22\n", "authors": ["1787"]}
{"title": "The impact of rural hospital closures on equity of commuting time for haemodialysis patients: simulation analysis using the capacity-distance model\n", "abstract": " Frequent and long-term commuting is a requirement for dialysis patients. Accessibility thus affects their quality of lives. In this paper, a new model for accessibility measurement is proposed in which both geographic distance and facility capacity are taken into account. Simulation of closure of rural facilities and that of capacity transfer between urban and rural facilities are conducted to evaluate the impacts of these phenomena on equity of accessibility among dialysis patients. Post code information as of August 2011 of all the 7,374 patients certified by municipalities of Hiroshima prefecture as having first or third grade renal disability were collected. Information on post code and the maximum number of outpatients (capacity) of all the 98 dialysis facilities were also collected. Using geographic information systems, patient commuting times were calculated in two models: one that takes into account road distance\u00a0\u2026", "num_citations": "21\n", "authors": ["1787"]}
{"title": "Hiphop: a synchronous reactive extension for Hop\n", "abstract": " Hop is a Scheme-based language and system to build rich multi-tier web applications. We present HipHop, a new language layer within Hop dedicated to request and event orchestration. HipHop follows the synchronous reactive model of the Esterel and ReactiveC languages, originally developed for embedded systems programming. It is based on synchronous concurrency and preemption primitives, which are known to be key components for the modular design of complex temporal behaviors. Although the language is concurrent, the generated code is purely sequential and thread-free; HipHop is translated to Hop for the server side and to straight JavaScript for the client side. With a music playing example, we show how to modularly build non-trivial orchestration code with HipHop.", "num_citations": "21\n", "authors": ["1787"]}
{"title": "Issues in the Therapy of Hearing Children with Deaf Parents\n", "abstract": " The psychiatric literature on deaf children is sparse. Even less attention has been paid to the more common situation of the hearing child raised by deaf parents. Such a child is deprived of the parents\u2019 hearing and often the parents\u2019 speech. The oldest hearing child in the family often takes on the role of family interpreter which may be a source of both pride and resentment. This can contribute to role reversal leading to a frustration of the child's dependency needs and bitter sibling rivalry. Other problems may result from the parents\u2019 ambivalence towards their child. The available literature is surveyed and case illustrations are provided. Suggestions to therapists working with similar families are made.", "num_citations": "21\n", "authors": ["1787"]}
{"title": "Why do people hate spyware?\n", "abstract": " Few people or corporations believe spyware is beneficial to the computing experience, but this issue has not been well studied [6]. This assertion is based on the trade press and countless Internet sites providing numerous articles and stories that mention slow Internet connections [5], slow computer processing [3], or privacy concerns [1], among many other reasons. To examine the reasons for this concern beyond anecdotes, a survey was conducted to empirically identify the rhetoric and the reasoning behind users' disgust of spyware.", "num_citations": "20\n", "authors": ["1787"]}
{"title": "Optimized controller synthesis using esterel\n", "abstract": " this paper, we propose to use the Pure Esterel synchronization kernel of the Esterel language [4, 8, 2] that was specifically designed for modular descriptions of control. We present specific techniques to optimize the generated circuits. Using a set of benchmarks, we show that we obtain circuits that are smaller and faster than those obtained by available state encoding techniques and that our approach does scale up to controllers having hundreds of states.", "num_citations": "20\n", "authors": ["1787"]}
{"title": "Informatique et sciences du num\u00e9rique: sp\u00e9cialit\u00e9 ISN en terminale S, avec des exercices corrig\u00e9s et id\u00e9es de projets\n", "abstract": " Suffit-il d'apprendre \u00e0 utiliser les appareils dont on est entour\u00e9? N'a-t-on pas envie d'en comprendre le fonctionnement? Ne pr\u00e9f\u00e8re-t-on pas se former au coeur conceptuel et technique de l'informatique, plut\u00f4t que de rester les consommateurs serviles de ce qui se cr\u00e9e ailleurs? L'objectif de ce cours est d'introduire les quatre concepts de machine, d'information, d'algorithme et de langage qui sont au coeur de l'informatique, et de montrer comment ils fonctionnent ensemble. Dans la premi\u00e8re partie, nous apprendrons \u00e0 \u00e9crire des programmes, en d\u00e9couvrant les ingr\u00e9dients dont les programmes sont constitu\u00e9s: l'affectation, la s\u00e9quence et le test, les boucles, les types, les fonctions et les fonctions r\u00e9cursives. Dans la deuxi\u00e8me partie, nous apprendrons \u00e0 repr\u00e9senter les informations que l'on veut communiquer, les stocker et les transformer, textes, nombres, images et sons. Nous apprendrons \u00e9galement \u00e0 structurer et compresser de grandes quantit\u00e9s d'informations et \u00e0 les prot\u00e9ger par le chiffrement. Dans la troisi\u00e8me partie, nous verrons que derri\u00e8re les informations, il y a toujours des objets mat\u00e9riels: ordinateurs, r\u00e9seaux, robots, etc. Nous d\u00e9couvrons comment fonctionnent toutes ces machines que nous utilisons tous les jours. Dans la quatri\u00e8me partie, nous apprendrons quelques-uns des savoir-faire les plus utiles au XXIe si\u00e8cle: ajouter des nombres exprim\u00e9s en base deux, dessiner, retrouver une information par dichotomie, trier des informations et parcourir des graphes. Ce cours comporte des chapitres \u00e9l\u00e9mentaires et avanc\u00e9s. Chacun contient une partie de cours, des sections de savoir-faire qui permettent d'acqu\u00e9rir les capacit\u00e9s\u00a0\u2026", "num_citations": "19\n", "authors": ["1787"]}
{"title": "Constructive semantics of Esterel: From theory to practice\n", "abstract": " G. Berry Ecole des Mines, BP 207,[:-06904 Sophia-Antipolis CDX INRIA, Route des Lucioles, F-06565 Sophia-Antipolis berry@ cma. cma. fr http://cma. cma. fr/Personnel/Berry. html Esterel is a synchronous language dedicated to reactive systems: software or hardware controllers, embedded systems, communication protocols, etc. The language is imperative and well= adapted to control-dominated applications. Conceptually, Esterel processes evolve synchronously and communicate using zero-delay signal broadcasting. The language primitives include sequencing, concurrency, and process preemption mechanisms. The semantics is defined in a mathematical way. Software or hardware implementation is based on the finitestate character of control in the language: the generated code or circuit is composed of a FSM that possibly drives a table of data computing action. The FSM can be either represented\u00a0\u2026", "num_citations": "19\n", "authors": ["1787"]}
{"title": "Programming with concrete data structures and sequential algorithms\n", "abstract": " We describe the data definition facilities of a new applicative language called CDS, which is based on Kahn-Plotkin's theory of concrete data structures and on Berry-Curien's theory of sequential algorithms. CDS is together an higher-order applicative language in the style of Milner's ML language and a coroutine system in the style of Kahn-Mac Queen's one. Instead of exchanging values only through streams, the CDS coroutines may exchange pieces of arbitrarily complex data structures, including functional and infinite ones. All expressions are evaluated in a lazy way, even those of functional type.", "num_citations": "19\n", "authors": ["1787"]}
{"title": "Ex\u00e9cution de t\u00e2ches asynchrones depuis Esterel\n", "abstract": " De nombreux systemes informatiques sont consideres comme des systemes reactifs car ils maintiennent une interaction synchrone permanente avec leur environnement. Le langage parallele esterel est specialement concu pour programmer de tels systemes. L'hypothese de synchronisme parfait d'esterel s' enonce ainsi: les sorties d'un programme esterel sont delivrees en meme temps que les entrees, les reactions d'un programme se faisant idealement en temps nul. Cette hypothese est utilisee par le compilateur pour engendrer l'automate represente par la source esterel et doit etre validee a posteriori lors de l'implementation. Cependant cette validation pose probleme lorsque le programme doit realiser des calculs qui durent. Dans cette these, nous presentons une extension d'esterel qui permet de lancer des actions de duree non nulle: les taches asynchrones. La presentation s' appuie sur une semantique formelle d'esterel incluant une nouvelle primitive exec mais excluant variables et signaux values pour des raisons de simplicite de l'expose. Cette semantique est illustree par des exemples d'execution de programmes. Ensuite, nous presentons les modifications realisees dans le compilateur pour traiter cette nouvelle primitive. A cette occasion, nous decrivons les codes intermediaires de la chaine de compilation esterel-v3. Les modifications traitent le langage esterel complet: nous montrons ici comment resoudre les problemes d'atomicite entre retour des arguments des taches asynchrones et interruption de ces taches par des gardes temporelles. Finalement, nous decrivons le producteur de code developpe pour simplifier l\u00a0\u2026", "num_citations": "18\n", "authors": ["1787"]}
{"title": "On the definition of lambda-calculus models\n", "abstract": " Most authors use a classical Tarski-like definition of lambda-calculus models. However in earlier papers we constructed semantic \"models\" which do not obey this definition. We propose a new definition of models which is strictly more general than the usual one, takes care of all known cases, but is slightly more complicated. We illustrate the need for this definition by various examples, and compare it to the usual definition.", "num_citations": "18\n", "authors": ["1787"]}
{"title": "Program Equivalence and Canonical Forms in Stable Discrete Interpretations.\n", "abstract": " Sauf mention contraire ci-dessus, le contenu de cette notice bibliographique peut \u00eatre utilis\u00e9 dans le cadre d\u2019une licence CC BY 4.0 Inist-CNRS/Unless otherwise stated above, the content of this bibliographic record may be used under a CC BY 4.0 licence by Inist-CNRS/A menos que se haya se\u00f1alado antes, el contenido de este registro bibliogr\u00e1fico puede ser utilizado al amparo de una licencia CC BY 4.0 Inist-CNRS", "num_citations": "16\n", "authors": ["1787"]}
{"title": "The next HDL (panel session) if C++ is; the answer, what was the question?\n", "abstract": " The focus of this panel is on issues surrounding the use of C++ in modeling, integration of silicon IP and system-on-chip designs. In the last two years there have been several announcements promoting C++ based solutions and of multiple consortia (SystemC, Cynapps, Accellera, SpecC) that represent increasing commercial interest both from tool vendors as well as perhaps expression of genuine needs from the design houses. There are, however, serious questions about what value proposition does a C++ based design methodology bring to the IC or system designer? What has changed in the modeling technology (and/or available tools) that gives a new capability? Is synthesis the right target? or VAlidation? Tester modeling or testbench generation? This panel brings together advocates and opponents from the user community to highlight the achievements and the challenges that remain in use C++ for use in\u00a0\u2026", "num_citations": "15\n", "authors": ["1787"]}
{"title": "Family therapy with deaf member families\n", "abstract": " This paper examines how family therapists can be more responsive to the unique needs and problems of deaf member families. Methods of training in communication for deaf children are compared, as well as the conflicts that may accompany the adoption of a given method. The pivotal role of communication problems between hearing and deaf family members in contributing to symptomatic behavior is stressed. The relationship between the roles of interpreter and therapist as well as obstacles to treatment are reviewed. A selected case history illustrates the interplay of these variables in successful treatment.", "num_citations": "15\n", "authors": ["1787"]}
{"title": "Circuit design and verication with esterel v7 and esterel studio\n", "abstract": " Esterel v7 is a high-level behavioral hardware design language currently used by major semiconductor companies to develop circuits and software circuit models. The language is supported by the Esterel Studio tool that supports a full flow from design capture to formal verification and generation of hardware and software models. Esterel is especially suited to control-intensive circuits such as memory and cache controllers, complex DMAs, bus interfaces and bridges, power controllers, transactors, etc. It is also used to design specialized processors and to model hardware at a higher level of abstraction (e.g., instruction set architecture).", "num_citations": "14\n", "authors": ["1787"]}
{"title": "Esterel v7: From verified formal specification to efficient industrial designs\n", "abstract": " Synchronous languages were developed in the mid-80\u2019s specifically to deal with embedded systems. They are based on mathematical semantics and support formal compilation to classical software or hardware languages as well as formal verification. Esterel v7 is a major industrial evolution of the original Esterel synchronous language, mostly directed to complex hardware applications. The language is supported by the Esterel Studio integrated development environment, which provides a smooth path from verifiable executable specification to efficient circuit synthesis. The graphical Safe States Machines derived from Esterel are also used in the SCADE tool which is widely used for safety-critical software applications in avionics.", "num_citations": "14\n", "authors": ["1787"]}
{"title": "Informatics Education in Europe: Are We All In The Same Boat?\n", "abstract": " Informatics Education in Europe: Are We All In The Same Boat? - Research Portal, King's College, London King's College London King's main site Research portal Home Researchers Research Groups Research Outputs Research Funding Internal Research Outputs Theses . Journals Publishers Informatics Education in Europe: Are We All In The Same Boat? Research output: Book/Report \u203a Book Jan Vahrenhold, Michael Caspersen, G\u00e9rard Berry, Judith Gal-Ezer, Michael K\u00f6lling, Andrew McGettrick, Enrico Nardelli, Cristina Pereira, Mirko Westermeier Overview Citation formats Original language English Publisher ACM and Informatics Europe Commissioning body Informatics Europe Number of pages 251 ISBN (Print) 978-1-4503-5361-8 Published 2017 Additional links Online map accompanying the report Report overview Links http://www.informatics-europe.org/component/phocadownload/category/10-reports.html\u2026", "num_citations": "13\n", "authors": ["1787"]}
{"title": "Analyse constructive et optimisation s\u00e9quentielle des circuits g\u00e9n\u00e9r\u00e9s \u00e0 partir du langage synchrone r\u00e9actif ESTEREL\n", "abstract": " La compilation d'un programme ESTEREL produit un circuit \u00e9quivalent sous la forme d'un jeu de registres et d'un syst\u00e8me d\u2019\u00e9quations bool\u00e9ennes, pilotant un ensemble d'actions sur les donn\u00e9es. L'hypoth\u00e8se de synchronisme qui est \u00e0 la base de la s\u00e9mantique du langage ESTEREL permet d\u2019\u00e9crire des programmes qui contiennent des cycles de d\u00e9pendance statique entre les signaux. Les circuits correspondants ont des cycles dans la partie combinatoire. L'analyse constructive des circuits cycliques permet d'identifier les circuits corrects, pour lesquels on peut d\u00e9terminer de mani\u00e8re constructive les valeurs de toutes les variables pour tous les \u00e9tats atteignables. Dans la premi\u00e8re partie de la th\u00e8se nous d\u00e9crivons les techniques d'analyse et les algorithmes efficaces que nous avons mis en \u0153uvre dans un processeur logiciel. Les circuits produits par le compilateur ESTEREL actuel ne sont pas optimaux, en nombre de registres et de niveaux de logique. Dans la deuxi\u00e8me partie de la th\u00e8se nous pr\u00e9sentons des techniques efficaces pour am\u00e9liorer le codage des \u00e9tats atteignables. Nous proposons une m\u00e9thode nouvelle et tr\u00e8s rapide pour le calcul d'une approximation de cet espace d\u2019\u00e9tats permettant une r\u00e9duction importante de registres. Nous utilisons ensuite des m\u00e9thodes efficaces pour calculer l'ensemble exact d\u2019\u00e9tats atteignables, pour continuer le processus d'optimisation dans la recherche d'un compromis entre les divers param\u00e8tres importants pour les cibles mat\u00e9rielles choisies. Les r\u00e9sultats exp\u00e9rimentaux obtenus avec les processeurs d\u00e9velopp\u00e9s montrent des importantes am\u00e9liorations par rapport aux techniques existantes. Les\u00a0\u2026", "num_citations": "13\n", "authors": ["1787"]}
{"title": "Top-level validation of system-on-chip in esterel studio\n", "abstract": " We present a new tool-supported methodology for system on chip top-level validation (TLV). The addressed problem is the systematic validation of IP interaction to ensure correct global functional behavior of a SoC design, assuming that each IP has been individually validated. The goal is to generate functional tests for the final design that cover the interaction behavior in a systematic, well-defined, and complete way. The typical problem to be found is incorrect inter-IP data flow due to misconfiguration or missynchronization of IPs. The tool is Esterel Studio, a design and verification environment based on the SyncCharts hierarchical concurrent finite state machine (HFSM) formalism. SynchCharts are a graphical variant of the Esterel high-level synchronous programming language, which is used to specify and synthesize circuits and embedded software.", "num_citations": "12\n", "authors": ["1787"]}
{"title": "Circuit generation and verification of Esterel programs\n", "abstract": " We propose in this paper a method that takes external Boolean variables into account for the veri cation of Esterel programs. The intermediate code that we use is a circuit that drives an action table. The circuit represents the control of the program, and the action table manipulates its external variables. The method transforms the actions into Boolean gates and registers acting on nets instead of variables. This involves encoding the input variables into the circuit and decoding output variables. This expansion method has been implemented within the scdata processor and can be used in conjunction with the Esterel compiler.", "num_citations": "12\n", "authors": ["1787"]}
{"title": "Formally unifying modeling and design for embedded systems-a personal view\n", "abstract": " Based on the author\u2019s academic and industrial experience, we discuss the smooth relation between model-based design and programming realized by synchronous languages in the embedded systems field. These languages are used to develop high quality embedded software, in particular for safety-critical applications in avionics, railway, etc., subject to the strongest software certification processes in industry. They have also been used for the efficient model-based development of production hardware circuits. One of their main characteristics is their well-defined formal semantics, with is the base of their simulation and compiling processes and is also fundamental for their link to automatic formal verification systems and other tools related to model-based design. We briefly discuss their current limitations and some ideas to lift them.", "num_citations": "10\n", "authors": ["1787"]}
{"title": "L\u2019informatique du temps et des \u00e9v\u00e9nements: Le\u00e7on inaugurale prononc\u00e9e le jeudi 28 mars 2013\n", "abstract": " G\u00e9rer le temps et les \u00e9v\u00e9nements est central dans des domaines vari\u00e9s de l\u2019informatique, des circuits et logiciels embarqu\u00e9s dans des objets de toutes sortes \u00e0 la cr\u00e9ation musicale, en passant par la simulation de ph\u00e9nom\u00e8nes physiques. Ce sujet est pourtant peu trait\u00e9 par l\u2019informatique classique. Cette le\u00e7on pr\u00e9sente des mod\u00e9lisations du temps et des \u00e9v\u00e9nements associ\u00e9es \u00e0 de nouveaux langages de programmation. Elle traite des notions d\u2019\u00e9paisseur de l\u2019instant, de temps hi\u00e9rarchique et multiforme cr\u00e9\u00e9 par la r\u00e9p\u00e9tition d\u2019\u00e9v\u00e9nements, et du rapport temps r\u00e9el/temps continu.", "num_citations": "9\n", "authors": ["1787"]}
{"title": "Synchronous languages for hardware and software reactive systems\n", "abstract": " Synchronous languages are dedicated to hardware, software, or mixed reactive systems that maintain a continuous interaction with their environment. They come in two classes: data-oriented languages such as Lustre and Signal, which are targeted to data-intensive applications such as continuous control or signal processing, and control-oriented languages or visual formalisms such as Esterel, Statecharts, or Argos, which are tailored for discrete controllers. Data-oriented languages are equational and involve combinational or delayed operations over multiply-clocked signals. Control-oriented languages have explicit primitives for sequencing, concurrency, and process preemption.               The synchronous languages are defined by precise mathematical semantics based on a simple zero-delay model, unlike most HDLs that are based on more intricate simulation models. The semantics makes it precise\u00a0\u2026", "num_citations": "9\n", "authors": ["1787"]}
{"title": "Hiphop. js: a language to orchestrate web applications\n", "abstract": " We are interested in web orchestration, which is the problem of appropriately handling the asynchronous events appearing in program executions. It is known be one of the major difficulties of web programming (see callback hell [9, 11]).", "num_citations": "8\n", "authors": ["1787"]}
{"title": "Hardware and software synthesis, optimization, and verification from esterel programs\n", "abstract": " The Esterel synchronous programming language is dedicated to hardware or software reactive systems. The constructive semantics determines the reaction of a program to an input event. Esterel programs can be implemented in several ways that yield different time / space tradeoffs. For all the implementations, the code is composed of a control finite-state machine that drives data-handling actions. The FSM can be explicit or implicit. Implicit machines are Boolean circuits that may contain cycles. The cycles are analyzed and removed using BDD based technique. Optimization techniques consist in register removal and logic optimization techniques; they can be tailored to both hardware and software targets. Verification of Esterel programs is based either on synchronous observers and symbolic reachability techniques or on explicit or implicit bisimulation reduction.", "num_citations": "6\n", "authors": ["1787"]}
{"title": "CEYX-version 15\n", "abstract": " Car is a set of tools allouving to defne and manipulate arbitrary data structures using the LisP programming language. Semantical properties are associated to Csix structures: they are the basic actions that can be performed on such structures. Moreover, structures are arranged by families in a hierarchical manner.* mis report is the cerx Reference anual. Mots clefs: Ls. L\u025b. Lise", "num_citations": "6\n", "authors": ["1787"]}
{"title": "A survey of some syntactic results in the \u03bb-calculus\n", "abstract": " In this paper, we consider the l-calculus as a formal setting for studying procedure calls in programming languages. These languages (as in LISP) allow procedures to take procedure as arguments and also to deliver procedures as results. The l-calculus could be typed or untyped. In the first case, it is more realistic to add a recursion operator as in LCF [Mi|, PI2, Mi2, Be2]. In the untyped case, the recursion is already in the language.(Take Y= lf.(lx. f (xx))(lx. f (xx))). In both cases, the l-calculus has constants which correspond to the basic functions symbols of terms in recursive program schemes [Ni~ Vu]. Therefore, one can say that the l-calculus framework is a generalisation of recursive programs schemes to any functional order. Here, we shall look at syntactic results in [Be3, Lel]. We only consider the untyped l-calculus, because definitions are simpler in it. Of course, we do not claim that programming languages\u00a0\u2026", "num_citations": "6\n", "authors": ["1787"]}
{"title": "Challenges and potential solutions for complex embedded systems\n", "abstract": " In the 20th century, an embedded system was most often thought of as a single piece of equipment driven by a single software program. Many efficient modeling, programming and verification paradigms have been developed in this setting: mathematical modeling using differential equations, reactive and synchronous programming, data-flow based signal processing, model-checking, etc. In the 21st century, systems are becoming much more complex. They mix hardware and software in subtle ways, involve a large number of sensors and actuators, become physically distributed, and may be remotely controlled by Web-based devices such as smartphones. Designing and verifying such systems raises many challenges that were independently known in particular areas but now need to be solved together. Here are some: understanding the relation between continuous and discrete time models, still quite unclear in\u00a0\u2026", "num_citations": "5\n", "authors": ["1787"]}
{"title": "Esterel and jazz: Two synchronous languages for circuit design\n", "abstract": " We survey two synchronous languages for circuit design. Esterel is dedicated to controllers implemented either in software or in hardware. Esterel programs are imperative, concurrent, and preemption based. Programs are translated into circuits that are optimized using specific sequential optimization algorithms. A verification system restricted to the pure control part of programs is available. Esterel is currently used by several CAD vendors and circuit design companies.               Jazz is a newer language designed for fancy arithmetic circuits. Jazz resembles ML but has a richer type-system that supports inheritance. The current environment comprises a compiler, simulators, and code generators for the Pamette Xilinx-based board. Both languages are not only formal but based on real mathematics. We discuss why this is essential for good language design.", "num_citations": "5\n", "authors": ["1787"]}
{"title": "HipHop. js:(A) Synchronous reactive web programming\n", "abstract": " We present HipHop. js, a synchronous reactive language that adds synchronous concurrency and preemption to JavaScript. Inspired from Esterel, HipHop. js simplifies the programming of non-trivial temporal behaviors as found in complex web interfaces or IoT controllers and the cooperation between synchronous and asynchronous activities. HipHop. js is compiled into plain sequential JavaScript and executes on unmodified runtime environments. We use three examples to present and discuss HipHop. js: a simple web login form to introduce the language and show how it differs from JavaScript, and two real life examples, a medical prescription pillbox and an interactive music system that show why concurrency and preemption help programming such temporal applications.", "num_citations": "4\n", "authors": ["1787"]}
{"title": "Les inversions mentales de l'informatique\n", "abstract": " R\u00e9sum\u00e9La g\u00e9n\u00e9ration qui vient sera celle des digital natives, qui fonctionnent de fa\u00e7on tr\u00e8s diff\u00e9rente de nous. Sommes-nous pr\u00eats \u00e0 leur confier ce monde qui n\u2019est d\u00e9j\u00e0 plus tout \u00e0 fait le n\u00f4tre et de plus en plus le leur\u00a0?", "num_citations": "4\n", "authors": ["1787"]}
{"title": "Synchronous methodology for designing hardware, software and mixed embedded systems\n", "abstract": " When analyzing sensitive data in a cloud-deployed Hadoop stack, data-in-transit security needs to be enabled, especially in the underlying storage tier. This, however, will affect the performance of the system and may partially offset the cost benefits of the cloud. In this paper, we discuss two strategies for securing HBase deployments in the cloud. For both, we present benchmarking results which show performance impacts that significantly exceed the suggested 10% from the official documentation. These results demonstrate (i) that security configurations should follow a rational decision process based on benchmarking results and (ii) that the security architecture of HBase/HDFS should be redesigned with an emphasis on performance.", "num_citations": "4\n", "authors": ["1787"]}
{"title": "State abstraction techniques for the verification of reactive circuits\n", "abstract": " Several techniques for formal verification of synchronous circuits depend on the computation of the reachable state space (RSS) of the circuit. Computing the exact RSS may be prohibitively expensive. In order to simplify the computation, the exact RSS can be replaced by an over-approximation of it, called the ORSS. The resulting verification computation will be conservative, and the larger the ORSS, the more conservative the approximation. A common technique for computing the ORSS is to replace some of its state variables by inputs. In this paper, we present a new approach based on variable abstraction using a threevalued logic. We also present a way to reduce the over-approximation by using structural information given by compilers of high-level languages like Esterel, ECL or SyncCharts. A real example of an avionic system is used to show the improvements that variable abstraction can bring.", "num_citations": "4\n", "authors": ["1787"]}
{"title": "The foundations of Esterel\n", "abstract": " This paper informally presents the theoretical and practical foundations of synchronous programming of reactive systems, mostly focusing on the author's Esterel language. Synchronous languages are based on the perfectly synchronous concurrency model, in which concurrent processes are able to perform computation and exchange information in zero time, at least at a conceptual level. The synchronous model is well adapted to a very wide spectrum of computer applications, ranging from hardware circuit design to large-scale real-time process control, and including embedded systems, communication protocols, systems drivers, or user interfaces.The synchronous model and languages are very di erent from models and languages well-known in the Computer Science community such as Petri Nets, CCS, CSP, or the-calculus. Therefore, we nd it useful to write a foundational paper explaining the application class, the model, the programming styles and languages based on it, their semantics, their implementation, and program veri cation. The development of synchronous languages was deeply in uenced by the work of Robin Milner on process calculi and bisimulation. Since Robin Milner himself always expressed great interest in the subject, we nd it natural to write that paper for a book dedicated to him. The paper is based on two invited lectures by the author: one at LICS'94, and the rst Milner Lecture at Edinburgh University in 1996.", "num_citations": "4\n", "authors": ["1787"]}
{"title": "Syst\u00e8mes r\u00e9actifs et programmation synchrone\n", "abstract": " On appelle syst\u00e8me r\u00e9actif tout syst\u00e8me qui interagit avec son environnement par r\u00e9ception et \u00e9mission de signaux: syst\u00e8me de contr\u00f4le en temps r\u00e9el, automate de commande. Nous pr\u00e9sentons les concepts fondamentaux d\u2019un nouveau style de programmation des syst\u00e8mes r\u00e9actifs, la programmation synchrone: synchronisme des sorties sur les entr\u00e9es, ex\u00e9cution sur une machine concept\u00f9ellement in\ufb01niment rapide, diffusion des signaux, d\u00e9terminisme. Nous pr\u00e9sentons le langage parall\u00e8le ESTEREL qui int\u00e8gre ces concepts de synchronisme, et nous \u00e9tudions le style de programmation induit. Nous montrons comment on peut compiler un programme ESTEREL en un automate fini d\u00e9terministe \u00e9quivalent et tr\u00e8s efficace, et comment on peut mesurer la. validit\u00e9 de l\u2019hypoth\u00e8se de synchronisme. Nous comparons sommairement ESTEREL \u00e0 d\u2019autres langages synchrones comme LUSTRE ou SIGNAL.", "num_citations": "4\n", "authors": ["1787"]}
{"title": "Multitier Programming in Hop: A first step toward programming 21st-century applications\n", "abstract": " The Web is becoming the richest platform on which to create computer applications. Its power comes from three elements: (1) modern Web browsers enable highly sophisticated GUIs with 3D, multimedia, fancy typesetting, etc.; (2) calling existing services through Web APIs makes it possible to develop sophisticated applications from independently available components; and (3) open data availability allows applications to access a wide set of information that was unreachable or that simply did not exist before. The combination of these three elements has already given birth to revolutionary applications such as Google Maps, radio podcasts, and social networks.", "num_citations": "3\n", "authors": ["1787"]}
{"title": "L\u2019informatique \u00e0 l\u2019\u00e9cole: il ne suffit pas de savoir cliquer sur une souris\n", "abstract": " Le ministre de l'\u00c9ducation nationale, Vincent Peillon, a indiqu\u00e9 le mercredi 23 mai [1] que les d\u00e9cisions concernant les sujets de l'\u00e9ducation seraient prises fin juillet apr\u00e8s concertation, avant une loi de programmation \u00e0 l'automne.Pour la premi\u00e8re fois, l'informatique s' est invit\u00e9e dans la campagne pr\u00e9sidentielle, notamment par le souhait de son enseignement au lyc\u00e9e sous la forme d'une discipline en tant que telle.", "num_citations": "3\n", "authors": ["1787"]}
{"title": "L'informatique oblige \u00e0 repenser la classification des sciences: questions \u00e0 Gilles Dowek. On a longtemps confondu l'informatique avec ses usages, questions \u00e0 G\u00e9rard Berry\u00a0\u2026\n", "abstract": " L'informatique est-elle une science ? Discipline encore jeune, une soixantaine d'ann\u00e9es d'existence seulement, son statut \u00e9pist\u00e9mologique se d\u00e9marque de celui des sciences plus anciennes.", "num_citations": "3\n", "authors": ["1787"]}
{"title": "Manifeste pour la r\u00e9habilitation du Pavillon des Poids et Mesures\n", "abstract": " Pour comprendre le monde physique et nous mouvoir avec aisance dans ses quatre dimensions, nous avons constamment besoin de quantifier l'espace, le temps, les poids, etc. Pour cela, nous avons besoin de mesures de r\u00e9f\u00e9rence. La qu\u00eate de ces mesures a \u00e9t\u00e9 longue et difficile, et bien d'autres grands esprits s'y sont illustr\u00e9s. Citons les rois qui ont donn\u00e9 leurs pieds et leurs pouces, les r\u00e9publicains qui ont arpent\u00e9 la terre, et tous les fabricants de clepsydres, pendules, montres et chronom\u00e8tres.Scientifiquement, on distingue les unit\u00e9s des mesures, qui s' expriment elles-m\u00eames en termes d'unit\u00e9s. Par exemple, la seconde est l'unit\u00e9 de temps, alors que deux cent vingt secondes mesure le temps qu\u2019il faut pour cuire un \u0153uf \u00e0 la coque. Les physiciens ch\u00e9rissent les unit\u00e9s mais n\u2019en admettent comme primitives qu\u2019un nombre tr\u00e8s restreint: m\u00e8tre, kilogramme, seconde, amp\u00e8re forment le syst\u00e8me MKSA obligatoire \u00e0 l'\u00e9cole. Mais le commun des mortels, qui se contrefout de la science, s' int\u00e9resse principalement \u00e0 mesurer le monde en unit\u00e9s d\u00e9riv\u00e9es, multiples, sous-multiples ou variantes des primitives. Cellesci sont beaucoup plus nombreuses et plus parlantes: tout le monde dit trois minutes trente au lieu de deux cent vingt secondes et trois kilom\u00e8tres ou mieux trois bornes et pas trois mille m\u00e8tres. Dans cet ouvrage, notre ambition n\u2019est rien moins que de r\u00e9concilier les scientifiques et la population honn\u00eate.", "num_citations": "3\n", "authors": ["1787"]}
{"title": "An esterel-based formal specification methodology for power manager development\n", "abstract": " Power management is a key element in modern SoCs. Design of power managers is difficult because of their massively parallel control and the complexity of power-related action sequences. We present a new formal methodology based on the Esterel language. It allows the user specifying power management to use hierarchical concurrent state machines, performing the formal verification of key properties, finding, envisioning and correcting nasty corner bugs. This formal methodology is currently in use at Texas Instruments to specify the power management of large SoC platforms.", "num_citations": "3\n", "authors": ["1787"]}
{"title": "Late design changes (ECOs) for sequentially optimized esterel designs\n", "abstract": " Late changes in silicon design (ECO) is a common although undesired practice. The need for ECO exists even in high-level design flows since bugs may occur in the specifications, in the compilation, or due to late specification changes. Esterel compilation deploys sequential optimization to improve delay and area of the netlist. This makes it harder to find in the netlist where manual changes should be done and to trace circuit changes back to the high-level specification. We show that all sequential optimizations used in Esterel compilation can be made reversible and demonstrate that an ECO problem can be reduced to a commonly solved combinational ECO problem. This is achieved by reconstructing some of the suppressed registers in order to backannotate to the original code. We demonstrate that the cost of reversibility is negligible.", "num_citations": "3\n", "authors": ["1787"]}
{"title": "La fronde du logiciel libre\n", "abstract": " Microsoft est actuellement sur la sellette. La presse ne se prive pas de se faire l\u2019\u00e9cho d\u2019une croisade dirig\u00e9e contre son monopole, et par la m\u00eame occasion de mettre en valeur les logiciels libres, ce qui laisse entendre que les jours de la toute puissance de Microsoft seraient d\u00e9sormais compt\u00e9s. Il faudrait pour cela que les logiciels libres soient ressentis comme une alternative attrayante par nombre d\u2019utilisateurs de Microsoft, or c\u2019est loin d\u2019\u00eatre le cas. Depuis les origines de l\u2019informatique, les d\u00e9veloppeurs des logiciels libres sont rest\u00e9s trop longtemps dans leur monde, celui d\u2019informaticiens classiques, inconscients pour la plupart de l\u2019importance des \u00e9volutions en marche. Pourtant, le mode de d\u00e9veloppement des logiciels libres, leur transparence, leur ind\u00e9niable niveau de qualit\u00e9, sont des atouts pour d\u00e9boucher sur une r\u00e9elle alternative \u00e0 l\u2019emprise du monopole actuel. Il reste beaucoup \u00e0 faire pour y parvenir, mais l\u2019internet peut aider \u00e0 br\u00fbler les \u00e9tapes.", "num_citations": "3\n", "authors": ["1787"]}
{"title": "The 2Z reference manual\n", "abstract": " 2z is a high-level programming language aimed at designing synchronous circuits. Its semantics is based on the view that synchronous circuits are functions from 2-adic numbers (infinite sequences of bits) to 2-adic numbers [Vuillemin 93].The language takes this analogy as far as possible. It provides easy manipulation of arbitrary precision periodic 2-adic numbers and a seamless integration of circuits and numbers. This integration makes it very easy in 2z to do logic synthesis since every number is seen as an input-less circuit whose output happens to be known at compile-time. From a linguistic perspective, 2z is a declarative, strongly typed, first-order, single-assignment, polymorphic and lazy language with subtyping. It syntax is simple and regular and, although it is a strongly-typed language, variable declarations are not required. The main motivations that have guided the design of the language are:", "num_citations": "3\n", "authors": ["1787"]}
{"title": "Proposition d\u2019orientations g\u00e9n\u00e9rales pour un programme d\u2019informatique \u00e0 l\u2019\u00e9cole primaire\n", "abstract": " Comme dans les autres disciplines fondamentales, la sensibilisation pr\u00e9coce aux grands concepts de la science et technique informatique est essentielle. Elle donne des cl\u00e9s aux \u00e9l\u00e8ves pour comprendre le monde qui les entoure, elle \u00e9vite que se forgent des id\u00e9es fausses et repr\u00e9sentations inad\u00e9quates, elle fabrique un socle sur lequel les connaissances futures pourront se construire au Coll\u00e8ge et au Lyc\u00e9e. \u00c0 l'\u00c9cole, il est important de montrer les liens qui unissent les concepts de l'informatique et ceux enseign\u00e9s dans les autres disciplines, ainsi que ceux qui les unissent aux objets familiers que les \u00e9l\u00e8ves utilisent tous les jours. Sur ces deux points, nous pouvons nous appuyer sur des exp\u00e9riences longues et riches d'enseignements men\u00e9es en France et hors de France.Ces orientations s' inscrivent aussi dans une vision plus globale: apr\u00e8s cette premi\u00e8re sensibilisation \u00e0 l'\u00c9cole primaire, vient le temps, au Coll\u00e8ge, de l'acquisition de l'autonomie puis, au Lyc\u00e9e, celui de la ma\u00eetrise des concepts. Il est important de veiller \u00e0 la progressivit\u00e9 et \u00e0 la coh\u00e9rence des programmes pour l'\u00c9cole, le Coll\u00e8ge et le Lyc\u00e9e.", "num_citations": "2\n", "authors": ["1787"]}
{"title": "Prouver les programmes: pourquoi, quand, comment\n", "abstract": " Prouver les programmes : pourquoi, quand, comment Page 1 Prouver les programmes : pourquoi, quand, comment ALGORITHMES, MACHINES ET LANGAGES ANN\u00c9E ACAD\u00c9MIQUE 2014-2015 PR. G\u00c9RARD BERRY Cours les mercredis \u00e0 16h, suivis du s\u00e9minaire \u00e0 17h30 Amphith\u00e9\u00e2tre Maurice Halbwachs Serge Haroche Administrateur du Coll\u00e8ge de France Amphith\u00e9\u00e2tre Maurice HalbwachsMaurice Halbwachs 11, place Marcelin-Berthelot, 75005 Paris www.college-de-france.fr Mercredi 4 mars Cours : De la sp\u00e9cification \u00e0 la r\u00e9alisation, au test et \u00e0 la preuve : les approches formelles S\u00e9minaire : Conception des syst\u00e8mes Joseph Sifakis, \u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne (EPFL) Mercredi 11 mars Cours : Prouver les programmes et circuits : les m\u00e9thodes g\u00e9n\u00e9rales S\u00e9minaire : Utilisation des m\u00e9thodes formelles pour la s\u00e9curisation de syst\u00e8mes complexes: une avanc\u00e9e industrielle Dominique \u2026", "num_citations": "2\n", "authors": ["1787"]}
{"title": "Reactive programming\n", "abstract": " A reactive system is a system that is in charge of maintaining a permanent interaction with its environment at a pace that is governed by this environment. A reactive program is a program that drives a reactive system. This comparatively recent unifying concept covers a number of domains that were considered as quite distinct in the past but bear actually more similarities than differences: real\u2010time process control, hardware and software controllers, communication protocols, systems and human\u2013machine interface drivers, and signal processing. The priviledged but nonexclusive application field of reactive programming is that of embedded computing, where computers drive plants, transportation middles, house appliances, and ever more and more everyday's life objects. In these domains, it is clear that program quality and safety are very crucial concerns. Reactive programming has always shown up to be a\u00a0\u2026", "num_citations": "2\n", "authors": ["1787"]}
{"title": "Logiciels: comment chasser les bugs?\n", "abstract": " S\u2019il vous fallait pr\u00e9parer \u00e0 l\u2019avance tous les ordres \u00e0 donner \u00e0 des individus totalement stupides, mais absolument ob\u00e9issants, pour qu\u2019ils r\u00e9alisent une t\u00e2che complexe, vous diriez que c\u2019est l\u00e0 un probl\u00e8me de management nouveau: les gens ne sont, en g\u00e9n\u00e9ral, ni stupides, ni ob\u00e9issants, ce qui aide \u00e0 faire face \u00e0 l\u2019impr\u00e9vu. Si, en plus, la moindre erreur provoque une catastrophe, vous diriez que la r\u00e9ussite d\u2019un tel plan d\u2019action tient du miracle. Vous venez pourtant de d\u00e9finir ce qu\u2019est la fabrication d\u2019un logiciel. Pour que la r\u00e9ussite ne tienne pas que du miracle, il faut donc une rigueur de fer, pas mal de culture, et de bons outils tels que ceux qui apparaissent aujourd\u2019hui, ce qui n\u2019est malheureusement pas encore assez connu.", "num_citations": "2\n", "authors": ["1787"]}
{"title": "Esterel de A \u00e0 Z\n", "abstract": " Esterel de A \u00e0 Z Page 1 Cours les vendredis \u00e0 9h45 en salle 2. S\u00e9minaire les vendredis \u00e0 11h00 en salle 4. Ouverture le 5 avril 2013. 31 janvier COURS : La photographie num\u00e9rique, un parfait exemple de la puissance de l\u2019informatique S\u00c9MINAIRE : St\u00e9phane Huot, Inria Lille : Interaction homme-machine Attention ! Ce cours et ce s\u00e9minaire auront lieu \u00e0 Liliad, Lille,LILLIAD, Campus Universit\u00e9 Lille \u2013 sciences et technologies \u2014 2 avenue Jean Perrin, Villeneuve d\u2019Ascq. 07 f\u00e9vrier COURS : Principes, id\u00e9es et styles pour la programmation r\u00e9active 14 f\u00e9vrier COURS : S\u00e9mantiques, causalit\u00e9 et constructivit\u00e9 des langages synchrones S\u00c9MINAIRE : Louis Mandel, IBM Thomas J. Watson Research Center : Reactive ML, programmation r\u00e9active d\u2019applications non temps-r\u00e9el. 07 mars COURS : Traduction des programmes Esterel en circuits digitaux pour la conception des circuits \u00e9lectroniques. S\u00c9MINAIRE : Albert \u2026", "num_citations": "2\n", "authors": ["1787"]}
{"title": "Calculs ascendants du programme d'Ackermann: analyse du programme de J. Arsac\n", "abstract": " En employant la technique d'analyse des calculs ascendants, on caract\u00e9rise la strat\u00e9gie de la proc\u00e9dure propos\u00e9e par J. Arsac pour calculer la fonction d'Ackermann, et on donne une estimation de son temps de calcul.", "num_citations": "2\n", "authors": ["1787"]}
{"title": "Calculs ascendants des programmes r\u00e9cursifs\n", "abstract": " Sauf mention contraire ci-dessus, le contenu de cette notice bibliographique peut \u00eatre utilis\u00e9 dans le cadre d\u2019une licence CC BY 4.0 Inist-CNRS/Unless otherwise stated above, the content of this bibliographic record may be used under a CC BY 4.0 licence by Inist-CNRS/A menos que se haya se\u00f1alado antes, el contenido de este registro bibliogr\u00e1fico puede ser utilizado al amparo de una licencia CC BY 4.0 Inist-CNRS", "num_citations": "2\n", "authors": ["1787"]}
{"title": "Towards Coq-verified Esterel Semantics and Compiling\n", "abstract": " This paper focuses on semantics of the Esterel synchronous programming language. In particular, in addition to the usual behavioral (CBS) and state (CSS) semantics, it introduces a novel microstep semantics which does not need the Can potential function. Formal proofs in Coq of the equivalence between the CBS and CSS semantics and of the refinement between the CSS and microstep semantics are also provided.", "num_citations": "1\n", "authors": ["1787"]}
{"title": "The Informatics of Time and Events: Inaugural lecture delivered on Thursday 28 March 2013\n", "abstract": " The management of time and events is central to various domains of informatics, from embedded circuits and software programs in all sorts of objects to musical creation, or the simulation of physical phenomena. Yet this subject receives little attention in classical informatics. This lecture presents different types of time and event modelling associated with new programming languages. It discusses the notions of density of the moment and of hierarchical and multiform times created by the repetition of events, and the real time/continuous time relationship.", "num_citations": "1\n", "authors": ["1787"]}
{"title": "Constructive circuits and the exactness of ternary simulation\n", "abstract": " Constructive circuits and the exactness of ternary simulation | FIS Universit\u00e4t Bamberg Skip navigation Logo FIS University of Bamberg Home Research Outputs People Institutions Projects Awards Explore by Research Outputs People Institutions Projects Awards My FIS \u2b24 You're not signed in Sign in Deutsch English Constructive circuits and the exactness of ternary simulation Mendler, Michael Bamberg : Fak. Wirtschaftsinformatik und Angewandte Informatik, Otto-Friedrich-Univ., 2006 (Bamberger Beitr\u00e4ge zur Wirtschaftsinformatik und Angewandten Informatik; 68) Details Professorship/Faculty: Foundations of Computer Science Author(s): Mendler, Michael Responsibility: Michael Mendler, Thomas R. Shiple, G\u00e9rard Berry Publisher Information: Bamberg : Fak. Wirtschaftsinformatik und Angewandte Informatik, Otto-Friedrich-Univ. Year of publication: 2006 Page Count: 83 Bl. Illustrations: Illustrationen Series ; Volume: \u2026", "num_citations": "1\n", "authors": ["1787"]}
{"title": "Late Design Changes (ECOs) for Sequentially Optimized High-Level Esterel Designs\n", "abstract": " Late changes in silicon design, called ECO, is a common although undesired practice. They happen due to last minute changes in the specifications or to design bugs found at the late stage, sometimes after the tapeout. At this stages going through the topdown design flow is infeasible, because it would take too long and lead to undesirably large perturbations to the physical layout. High-level design flows generally reduce the number of potential bugs. However, the need for ECO still exists since there is no guarantee that all bugs are eliminated and since the spec may change late in the game. Since high-level design often deploys more powerful optimization than manual design flows, it becomes harder to find the place in the final circuit where manual changes should be done in order to correct the behavior. It is also harder to trace circuit bugs and changes back to the high-level spec. A software analogy would be to of perform manual changes in a C executable compiled with-Ox options, while back-annotating these changes to the original C code.We will illustrate this general high-level design problem by an Esterel example, with heavy sequential circuit optimization performed by the Esterel compiler backend. The desired ECO flow is as follows. The original specification S is compiled by the Esterel compiler to a circuit netlist C0, which is further optimized to the final implementation C using combinational and sequential optimization methods. If late changes are required this circuit is transformed manually into another circuit netlist C\u2217 such that perturbations to C are minimal. To maintain the high-level specification consistent with the modified\u00a0\u2026", "num_citations": "1\n", "authors": ["1787"]}
{"title": "Formal verification methods: getting around the brick wall\n", "abstract": " Do formal verification tools and methodologies require a drastic overhaul to move beyond equivalence checking? Equivalence checking catches errors in synthesis and local hand-modifications to designs. However, powerful formal verification technologies are emerging to combat\" behavioral\" errors, which represent today's biggest verification problems. Nonetheless, formal verification experts are split on how formal tools should adapt to this challenge. Some of our panelists feel that designers can sufficiently benefit from new formal verification technologies by making incremental changes to current methodologies. Others, however, argue that major changes are required to reap meaningful benefits from these new technologies. Just how much change is enough, what is the capacity of our current tools and what is limiting the full deployment of FV technology. Our panel of experts, consisting of users, tool providers\u00a0\u2026", "num_citations": "1\n", "authors": ["1787"]}
{"title": "Synchronous programming techniques for embedded systems: Present and future\n", "abstract": " The synchronous programming methodology for reactive systems has been developed since the beginning of the 80\u2019s and it is currently used in numerous critical embedded systems projetcs. The methodolody is based on a strong mathematical framework that rigorously established the semantics of synchronous formalisms. The main industrial tools are Scade (Telelogic), Esterel Studio (Esterel Technologies), and Sildex (TNI). Current applications concern avionics, transportation systems, energy, telecom and wireless systems, etc. We present the general synchronous framework and the formalisms tailored to data-flow or control-flow dominated applications. We discuss the main issues in efficient code generation and formal property verification (safety, timing, etc.). We discuss the strength and limits of the basic synchronous paradigms, and present new ways of designing globally asynchronous / locally\u00a0\u2026", "num_citations": "1\n", "authors": ["1787"]}
{"title": "SYNCHRON project, common formats of synchronous languages\n", "abstract": " SYNCHRON project The common formats of synchronous languages - OpenGrey fra | eng OpenGrey Open System for Information on Grey literature in Europe Home Search Subjects Partners Export Help Search XML To cite or link to this reference: http://hdl.handle.net/10068/42301 Title : SYNCHRON project The common formats of synchronous languages Projet SYNCHRONE Les formats communs des langages synchrones (version 0) Authors : Paris, Jean-Pierre ; Berry, Gerard ; Mignard, Frederic ; Corporate author : Institut National de Recherche en Informatique et en Automatique (INRIA), 35 (France). Unite de Recherche de Rennes ; Centre National de la Recherche Scientifique (CNRS), 35 - Rennes (France). Inst. de Recherche en Informatique et Systemes Aleatoires (IRISA) ; Rennes-1 Univ., 35 (France). Inst. de Recherche en Informatique et Systemes Aleatoires (IRISA) ; Institut National des Sciences \u2026", "num_citations": "1\n", "authors": ["1787"]}
{"title": "Essai de cartographie en temps r\u00e9el \u00e0 partir d'un vol \u00e0 basse altitude pour la reconnaissance de limites de zones sinistr\u00e9es par une crue (Crue de la Sa\u00f4ne\u2015mai 1985)\n", "abstract": " Sauf mention contraire ci-dessus, le contenu de cette notice bibliographique peut \u00eatre utilis\u00e9 dans le cadre d\u2019une licence CC BY 4.0 Inist-CNRS/Unless otherwise stated above, the content of this bibliographic record may be used under a CC BY 4.0 licence by Inist-CNRS/A menos que se haya se\u00f1alado antes, el contenido de este registro bibliogr\u00e1fico puede ser utilizado al amparo de una licencia CC BY 4.0 Inist-CNRS", "num_citations": "1\n", "authors": ["1787"]}
{"title": "CEYX-Version 15. III: VPRINT le composeur CEYX\n", "abstract": " Nous d\u00e9\ufb01nissons une machine virtuelle permettant de produire des representatians for any LISP or Cm structure.'\u00ee,\u2018PAPIER nscursns EY\u00f1ECYCLE'\u2018>", "num_citations": "1\n", "authors": ["1787"]}
{"title": "The Esterel Synchronous\n", "abstract": " We present the real\u2014time programming language ESTEREL'and its mathematioal semantics. Contrarin t0 CSP-like languages, ESTEREL is a synchronous deterministic language based on a multiform notion of time. The mathematical semant\u00efcs is a structural operational semantics given by conditional rewrite rules in Plotkin\u2019s style. It character\u00efzes completely the temporal behavior of programs, and allows us to compile e\ufb01\u00eecientIy an ESTEREL program into a \ufb01nite control automaton. The ESTEREL project is supported by an ADI contract_ (Convent\u00efon de recherche n 82/685).", "num_citations": "1\n", "authors": ["1787"]}
{"title": "INRIA\n", "abstract": " We sketch a. dynamic programing type of theory for both continuous time and discrete time non linear partial information min-max control, using the \u201ccost to come\u201d function as the informational state. We use this theory to derive conditions under which a certainty equivalence principle holds. The condition derived is less powerful than what was known from direct investigation in the continuous time case, but more powerful in the discrete time case.", "num_citations": "1\n", "authors": ["1787"]}