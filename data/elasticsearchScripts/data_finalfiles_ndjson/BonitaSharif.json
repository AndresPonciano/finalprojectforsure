{"title": "Eye movements in code reading: Relaxing the linear order\n", "abstract": " Code reading is an important skill in programming. Inspired by the linearity that people exhibit while natural language text reading, we designed local and global gaze-based measures to characterize linearity (left-to-right and top-to-bottom) in reading source code. Unlike natural language text, source code is executable and requires a specific reading approach. To validate these measures, we compared the eye movements of novice and expert programmers who were asked to read and comprehend short snippets of natural language text and Java programs. Our results show that novices read source code less linearly than natural language text. Moreover, experts read code less linearly than novices. These findings indicate that there are specific differences between reading natural language and source code, and suggest that non-linear reading skills increase with expertise. We discuss the implications for\u00a0\u2026", "num_citations": "162\n", "authors": ["2148"]}
{"title": "An eye tracking study on the effects of layout in understanding the role of design patterns\n", "abstract": " The effect of layout in the comprehension of design pattern roles in UML class diagrams is assessed. This work replicates and extends a previous study using questionnaires but uses an eye tracker to gather additional data. The purpose of the replication is to gather more insight into the eye gaze behavior not evident from questionnaire-based methods. Similarities and differences between the studies are presented. Four design patterns are examined in two layout schemes in the context of three open source systems. Fifteen participants answered a series of eight design pattern role detection questions. Results show a significant improvement in role detection accuracy and visual effort with a certain layout for the Strategy and Observer patterns and a significant improvement in role detection time for all four patterns. Eye gaze data indicates classes participating in a design pattern act like visual beacons when they\u00a0\u2026", "num_citations": "94\n", "authors": ["2148"]}
{"title": "Analyzing developer sentiment in commit logs\n", "abstract": " The paper presents an analysis of developer commit logs for GitHub projects. In particular, developer sentiment in commits is analyzed across 28,466 projects within a seven year time frame. We use the Boa infrastructure's online query system to generate commit logs as well as files that were changed during the commit. We analyze the commits in three categories: large, medium, and small based on the number of commits using a sentiment analysis tool. In addition, we also group the data based on the day of week the commit was made and map the sentiment to the file change history to determine if there was any correlation. Although a majority of the sentiment was neutral, the negative sentiment was about 10% more than the positive sentiment overall. Tuesdays seem to have the most negative sentiment overall. In addition, we do find a strong correlation between the number of files changed and the sentiment\u00a0\u2026", "num_citations": "87\n", "authors": ["2148"]}
{"title": "An XML-Based Approach to Support the Evolution of Model-to-Model Traceability Links\n", "abstract": " The paper summarizes the authors' current research on supporting model-to-model traceability. The authors present a graph theoretic definition of what they mean by models and traceability links. This definition is realized by the use of XML technologies to represent the models and traceability links. Practical means to represent different types of system models (eg, source code and design) using XML are discussed. Traceability links are also implemented using XML technologies in an efficient and scalable manner. The evolution of the system, along with the traceability links, is supported by a fine-grained versioning technique. This allows for versioning and differencing of specific elements of the models versus just lines or whole files.", "num_citations": "76\n", "authors": ["2148"]}
{"title": "Improving the accuracy of duplicate bug report detection using textual similarity measures\n", "abstract": " The paper describes an improved method for automatic duplicate bug report detection based on new textual similarity features and binary classification. Using a set of new textual features, inspired from recent text similarity research, we train several binary classification models. A case study was conducted on three open source systems: Eclipse, Open Office, and Mozilla to determine the effectiveness of the improved method. A comparison is also made with current state-of-the-art approaches highlighting similarities and differences. Results indicate that the accuracy of the proposed method is better than previously reported research with respect to all three systems.", "num_citations": "75\n", "authors": ["2148"]}
{"title": "Tracing software developers' eyes and interactions for change tasks\n", "abstract": " What are software developers doing during a change task? While an answer to this question opens countless opportunities to support developers in their work, only little is known about developers' detailed navigation behavior for realistic change tasks. Most empirical studies on developers performing change tasks are limited to very small code snippets or are limited by the granularity or the detail of the data collected for the study. In our research, we try to overcome these limitations by combining user interaction monitoring with very fine granular eye-tracking data that is automatically linked to the underlying source code entities in the IDE. In a study with 12 professional and 10 student developers working on three change tasks from an open source system, we used our approach to investigate the detailed navigation of developers for realistic change tasks. The results of our study show, amongst others, that the eye\u00a0\u2026", "num_citations": "69\n", "authors": ["2148"]}
{"title": "An eye-tracking study assessing the comprehension of C++ and Python source code\n", "abstract": " A study to assess the effect of programming language on student comprehension of source code is presented, comparing the languages of C++ and Python in two task categories: overview and find bug tasks. Eye gazes are tracked while thirty-eight students complete tasks and answer questions. Results indicate no significant difference in accuracy or time, however there is a significant difference reported on the rate at which students look at buggy lines of code. These results start to provide some direction as to the effect programming language might have in introductory programming classes.", "num_citations": "61\n", "authors": ["2148"]}
{"title": "itrace: Enabling eye tracking on software artifacts within the ide to support software engineering tasks\n", "abstract": " The paper presents iTrace, an Eclipse plugin that implicitly records developers' eye movements while they work on change tasks. iTrace is the first eye tracking environment that makes it possible for researchers to conduct eye tracking studies on large software systems. An overview of the design and architecture is presented along with features and usage scenarios. iTrace is designed to support a variety of eye trackers. The design is flexible enough to record eye movements on various types of software artifacts (Java code, text/html/xml documents, diagrams), as well as IDE user interface elements. The plugin has been successfully used for software traceability tasks and program comprehension tasks. iTrace is also applicable to other tasks such as code summarization and code recommendations based on developer eye movements. A short video demonstration is available at https://youtu. be/3OUnLCX4dXo.", "num_citations": "56\n", "authors": ["2148"]}
{"title": "A study on the effect of traceability links in software maintenance\n", "abstract": " In software development, stakeholders of the same project often collaborate asynchronously through shared artifacts. A traceability system links a project's artifacts and therefore provides support for collaboration among stakeholders. Different stakeholders are interested in different types of traceability links. The literature often states that traceability is useful but expensive to build and maintain. However, there is no study showing reduction in effort when traceability links among various software artifacts are provided and used during the maintenance phase. This paper presents a study evaluating the benefits of using traceability among requirements, design, code, code inspections, builds, defects, and tests artifacts in the maintenance phase. Before the study, a survey was conducted at a large industrial firm to determine the type of links that different stakeholders are interested in. Twenty-five stakeholders from this\u00a0\u2026", "num_citations": "36\n", "authors": ["2148"]}
{"title": "Generating duplicate bug datasets\n", "abstract": " Automatic identification of duplicate bug reports is an important research problem in the mining software repositories field. This paper presents a collection of bug datasets collected, cleaned and preprocessed for the duplicate bug report identification problem. The datasets were extracted from open-source systems that use Bugzilla as their bug tracking component and contain all the bugs ever submitted. The systems used are Eclipse, Open Office, NetBeans and Mozilla. For each dataset, we store both the initial data and the cleaned data in separate collections in a mongoDB document-oriented database. For each dataset, in addition to the bug data collections downloaded from bug repositories, the database includes a set of all pairs of duplicate bugs together with randomly selected pairs of non-duplicate bugs. Such a dataset is useful as input for classification models and forms a good base to support replications\u00a0\u2026", "num_citations": "35\n", "authors": ["2148"]}
{"title": "An empirical study assessing the effect of seeit 3d on comprehension\n", "abstract": " A study to assess the effect of SeeIT 3D, a software visualization tool is presented. Six different tasks in three different task categories are assessed in the context of a large open-source system. Ninety-seven subjects were recruited from three different universities to participate in the study. Two methods of data collection: traditional questionnaires and an eye-tracker were used. The main goal was to determine the impact and added benefit of SeeIT 3D while performing typical software tasks within the Eclipse IDE. Results indicate that SeeIT 3D performs significantly better in one task category namely overview tasks but takes significantly longer when completing bug fixing tasks. Scores obtained by the subjects in the SeeIT 3D group are 13% better and 45% faster for overview tasks.", "num_citations": "35\n", "authors": ["2148"]}
{"title": "Eye gaze and interaction contexts for change tasks\u2013Observations and potential\n", "abstract": " The more we know about software developers\u2019 detailed navigation behavior for change tasks, the better we are able to provide effective tool support. Currently, most empirical studies on developers performing change tasks are, however, limited to very small code snippets or limited by the granularity and detail of the data collected on developer\u2019s navigation behavior. In our research, we extend this work by combining user interaction monitoring to gather interaction context \u2013 the code elements a developer selects and edits \u2013 with eye-tracking to gather more detailed and fine-granular gaze context-code elements a developer looked at. In a study with 12 professional and 10 student developers we gathered interaction and gaze contexts from participants working on three change tasks of an open source system. Based on an analysis of the data we found, amongst other results, that gaze context captures different\u00a0\u2026", "num_citations": "28\n", "authors": ["2148"]}
{"title": "Empirical assessment of UML class diagram layouts based on architectural importance\n", "abstract": " The paper presents a family of experiments that investigate the effectiveness of different layout techniques for class diagrams in the Unified Modeling Language (UML). Three different layout schemes are examined based on architectural importance of class stereotypes. The premise is that layout techniques for UML class diagrams significantly impact comprehension. Both traditional questionnaire-based studies as well as eye-tracking studies are done to quantitatively measure the performance of subjects solving specific software maintenance tasks. The main contribution is the detailed empirical validation of a set of layout techniques with respect to a variety of software maintenance tasks. Results indicate that layout plays a significant role in the comprehension of UML class diagrams. In particular, there is a significant improvement in accuracy, time, and visual effort for one particular layout scheme, namely multi\u00a0\u2026", "num_citations": "24\n", "authors": ["2148"]}
{"title": "Emotional awareness in software development: Theory and measurement\n", "abstract": " Emotions have an effect on developers' progress during software development tasks. The purpose of this position paper is to investigate the effects of emotional awareness, specifically type clarity, on developers' progress. A proposal for this investigation, and a discussion of the current work implicating the effects of emotion in software development, are presented.", "num_citations": "22\n", "authors": ["2148"]}
{"title": "Developer reading behavior while summarizing java methods: Size and context matters\n", "abstract": " An eye-tracking study of 18 developers reading and summarizing Java methods is presented. The developers provide a written summary for methods assigned to them. In total, 63 methods are used from five different systems. Previous studies on this topic use only short methods presented in isolation usually as images. In contrast, this work presents the study in the Eclipse IDE allowing access to all the source code in the system. The developer can navigate via scrolling and switching files while writing the summary. New eye-tracking infrastructure allows for this improvement in the study environment. Data collected includes eye gazes on source code, written summaries, and time to complete each summary. Unlike prior work that concluded developers focus on the signature the most, these results indicate that they tend to focus on the method body more than the signature. Moreover, both experts and novices tend to\u00a0\u2026", "num_citations": "21\n", "authors": ["2148"]}
{"title": "Towards automating fixation correction for source code\n", "abstract": " During eye-tracking studies there is a possibility for the actual fixation to shift a little when recorded. The cause of this shift could be due to various reasons such as the accuracy of the calibration or drift. Researchers usually correct fixations manually. Manual corrections are error prone especially if done on large samples for extended periods. There is also no guarantee that two corrections done by different people on the same data set will be consistent with each other. In order to solve this problem, we introduce an attempt at automatically correcting fixations that uses a variable offset for groups of fixations. Our focus is on source code, which is read differently than natural language requiring an algorithm that adapts to these differences. We introduce a Hill Climbing algorithm that shifts fixations to a best-fit location based on a scoring function. In order to evaluate the algorithm's effectiveness, we compare the\u00a0\u2026", "num_citations": "19\n", "authors": ["2148"]}
{"title": "Towards an eye-tracking enabled IDE for software traceability tasks\n", "abstract": " The paper presents iTrace, an eye-tracking plug-in for the Eclipse IDE. The premise is to use developers' eye gaze as input to traceability tasks such as generating links between various artifacts. The design, architecture, and current state of iTrace is described. Support for a variety of traceability tasks such as link retrieval, link evolution, link visualization, and empirical studies are also discussed. An initial link generation heuristic using iTrace is presented with plans for future evaluation.", "num_citations": "18\n", "authors": ["2148"]}
{"title": "How novices read source code in introductory courses on programming: an eye-tracking experiment\n", "abstract": " We present an empirical study using eye tracking equipment to understand how novices read source code in the context of two introductory programming classes. Our main goal is to begin to understand how novices read source code and to determine if we see any improvement in program comprehension as the course progresses. The results indicate that novices put in more effort and had more difficulty reading source code as they progress through the course. However, they are able to partially comprehend code at a later point in the course. The relationship between fixation counts and durations is linear but shows more clusters later in the course, indicating groups of students that learned at the same pace. The results also show that we did not see any significant shift in learning (indicated by the eye tracking metrics) during the course, indicating that there might be more than one course that needs to\u00a0\u2026", "num_citations": "15\n", "authors": ["2148"]}
{"title": "Investigating eye movements in natural language and c++ source code-a replication experiment\n", "abstract": " Natural language text and source code are very different in their structure and semantics. Source code uses words from natural language such as English mainly in comments and identifier names. Is there an inherent difference in the way programmers read natural language text compared to source code? Does expertise play a role in the reading behavior of programmers? In order to start answering these questions, we conduct a controlled experiment with novice and non-novice programmers while they read small short snippets of natural language text and C++ source code. This study is a replication of an earlier study by Busjahn et al. [1] but uses C++ instead of Java source code. The study was conducted with 33 students, who were each given ten tasks: a set of seven programs, and three natural language texts. They were asked one of three random comprehension questions after each task. Using\u00a0\u2026", "num_citations": "14\n", "authors": ["2148"]}
{"title": "iTraceVis: Visualizing eye movement data within Eclipse\n", "abstract": " The paper presents iTraceVis, an eye tracking visualization component for iTrace, a gaze-aware Eclipse plugin. The visualization component is designed to work with data generated from iTrace after an eye tracking session. iTrace provides us with an automatic mapping of raw eye gaze on corresponding source code elements according to their hierarchy in the abstract syntax graph even in the presence of scrolling and context switching between files. This feature provides us with the ability to visualize eye tracking data in large source code files and is not just restricted to visualize only a method at a time i.e., something that fits on the screen. Due to the enormous size and richness of data collected from the eye tracker, visualizations help both the researcher and the developer to comprehend what transpired during an eye tracking session. iTraceVis currently supports four visualization views - heat map, gaze skyline\u00a0\u2026", "num_citations": "11\n", "authors": ["2148"]}
{"title": "Using developer eye movements to externalize the mental model used in code summarization tasks\n", "abstract": " Eye movements of developers are used to speculate the mental cognition model (ie, bottom-up or top-down) applied during program comprehension tasks. The cognition models examine how programmers understand source code by describing the temporary information structures in the programmer's short term memory. The two types of models that we are interested in are top-down and bottom-up. The top-down model is normally applied as-needed (ie, the domain of the system is familiar). The bottom-up model is typically applied when a developer is not familiar with the domain or the source code. An eye-tracking study of 18 developers reading and summarizing Java methods is used as our dataset for analyzing the mental cognition model. The developers provide a written summary for methods assigned to them. In total, 63 methods are used from five different systems. The results indicate that on average\u00a0\u2026", "num_citations": "9\n", "authors": ["2148"]}
{"title": "Visually analyzing students' gaze on c++ code snippets\n", "abstract": " The paper presents an eye tracking study with 17 students (12 novices, 5 non-novices) reading C++ methods. The novices were students who participated in the study during the last week of their semester learning C++. The non-novices were senior students who had been exposed to programming before. We report on the reading behavior of three C++ methods that use different language constructs. We analyze fixations at the line level of the code using visualizations to derive insights into code reading. Results show that most transitions were made to code lines that are close to the current line read. We observe that a large percentage of the total fixation duration is made on a small number of lines and that related lines are often viewed together in a series of short fixations.", "num_citations": "9\n", "authors": ["2148"]}
{"title": "An empirical study on the effect of 3D visualization for project tasks and resources\n", "abstract": " During software development, project managers (PMs) continually monitor, analyze and control the project schedule. The schedule contains tasks, work items, and resources assigned to carry out the tasks. Current state-of-the-art monitoring involves methods such as Gantt charts and spreadsheets/tables to display and analyze the project schedule, tasks and resources information PMBOK (2004). These methods, however, have certain limitations. It is difficult to see the entire schedule in a single view and analyze the tasks and resources especially in the case of large data. There is also little support for interacting with the data, and the Gantt chart does not show history information and trends. In this paper, we develop an approach that uses 3D visualizations to represent information about project tasks and resources, to overcome the above limitations. To assess our approach, we conduct an empirical study on real\u00a0\u2026", "num_citations": "9\n", "authors": ["2148"]}
{"title": "Factors influencing dwell time during source code reading: a large-scale replication experiment\n", "abstract": " The paper partially replicates and extends a previous study by Busjahn et al.[4] on the factors influencing dwell time during source code reading, where source code element type and frequency of gaze visits are studied as factors. Unlike the previous study, this study focuses on analyzing eye movement data in large open source Java projects. Five experts and thirteen novices participated in the study where the main task is to summarize methods. The results examine semantic line-level information that developers view during summarization. We find no correlation between the line length and the total duration of time spent looking on the line even though it exists between a token's length and the total fixation time on the token reported in prior work. The first fixations inside a method are more likely to be on a method's signature, a variable declaration, or an assignment compared to the other fixations inside a method\u00a0\u2026", "num_citations": "8\n", "authors": ["2148"]}
{"title": "Visually analyzing eye movements on natural language texts and source code snippets\n", "abstract": " In this paper, we analyze eye movement data of 26 participants using a quantitative and qualitative approach to investigate how people read natural language text in comparison to source code. In particular, we use the radial transition graph visualization to explore strategies of participants during these reading tasks and extract common patterns amongst participants. We illustrate via examples how visualization can play a role at uncovering behavior of people while reading natural language text versus source code. Our results show that the linear reading order of natural text is only partially applicable to source code reading. We found patterns representing a linear order and also patterns that represent reading of the source code in execution order. Participants also focus more on those areas that are important to comprehend core functionality and we found that they skip unimportant constructs such as brackets.", "num_citations": "6\n", "authors": ["2148"]}
{"title": "A gaze-based exploratory study on the information seeking behavior of developers on stack overflow\n", "abstract": " Software developers use Stack Overflow on a daily basis to search for solutions to problems they encounter during bug fixing and feature enhancement. In prior work, studies have been done on mining Stack Overflow data such as for predicting unanswered questions or how and why people post. However, no work exists on how developers actually use, or more importantly, read the information presented to them on Stack Overflow. To better understand this behavior, we conduct an eye tracking study on how developers seek for information on Stack Overflow while tasked with creating human-readable summaries of methods and classes in large Java projects. Eye gaze data is collected on both the source code elements and Stack Overflow document elements at a fine token-level granularity using iTrace, our eye tracking infrastructure. We found that developers look at the text more often than the title in posts. Code\u00a0\u2026", "num_citations": "6\n", "authors": ["2148"]}
{"title": "Reading behavior and comprehension of c++ source code-a classroom study\n", "abstract": " This paper presents an eye-tracking study conducted in a classroom setting with seventeen students enrolled in a Computer Science program. The students were a mix of twelve first-year undergraduates (novices) and five masters students (non-novices). Students were asked to answer a comprehension question for each of thirteen C++ programs after reading them. Each program is split into a series of chunks which logically break down meaningful parts where eye gazes hint at cognition about parts of programs useful to solving problems. We analyze these patterns across chunks for the stories they tell about how participants went about searching for cues, and to learn whether their gaze patterns predicted accurate answers to three types of questions The results show that novices tend to visit print output statements and declaration statements the same amount as they do other statements in code with the\u00a0\u2026", "num_citations": "5\n", "authors": ["2148"]}
{"title": "Studying developer gaze to empower software engineering research and practice\n", "abstract": " A new research paradigm is proposed that leverages developer eye gaze to improve the state of the art in software engineering research and practice. The vision of this new paradigm for use on software engineering tasks such as code summarization, code recommendations, prediction, and continuous traceability is described. Based on this new paradigm, it is foreseen that new benchmarks will emerge based on developer gaze. The research borrows from cognitive psychology, artificial intelligence, information retrieval, and data mining. It is hypothesized that new algorithms will be discovered that work with eye gaze data to help improve current IDEs, thus improving developer productivity. Conducting empirical studies using an eye tracker will lead to inventing, evaluating, and applying innovative methods and tools that use eye gaze to support the developer. The implications and challenges of this paradigm for\u00a0\u2026", "num_citations": "5\n", "authors": ["2148"]}
{"title": "The use of eye tracking in software development\n", "abstract": " Eye trackers have been routinely used in psychology reading experiments and in website usability studies for many years. However, it is only recently that they have been used by more researchers in the software engineering community. In this paper, we categorize two broad areas in which eye tracking technology can benefit software development in a practical way. The first area includes using the eye tracker as an assessment tool for software artifacts, tools, and techniques. The second area deals with using eye tracking data from developers to inform certain software tools and software development tasks such as providing developer recommendations and software traceability tasks. Examples of experiments and studies done in each of these broad areas is presented and discussed along with future work. The results point towards many benefits that eye trackers provide to augment the daily lives of\u00a0\u2026", "num_citations": "5\n", "authors": ["2148"]}
{"title": "Interactive Voice Modifiable 3D Dynamic Object Based Movies over the Internet\n", "abstract": " In this paper, we describe an XML based 3D-Voice Enabled Single Transmission Multiple Display Multimedia Language (3D-VE STMDML) model and its implementation. We describe 3D-scenes, mesh based 3D objects, integration of 2D and 3D objects, object animations with collision avoidance, and voice based animation control. This model has been used to download object based movies over the Internet, dynamically modify the existing movies using voice interaction in real time, and retransmit the modified movies to others over the Internet. The performance analysis shows that voice-based modification to objects in a scene is done in real time.", "num_citations": "5\n", "authors": ["2148"]}
{"title": "Studying developer reading behavior on stack overflow during api summarization tasks\n", "abstract": " Stack Overflow is commonly used by software developers to help solve problems they face while working on software tasks such as fixing bugs or building new features. Recent research has explored how the content of Stack Overflow posts affects attraction and how the reputation of users attracts more visitors. However, there is very little evidence on the effect that visual attractors and content quantity have on directing gaze toward parts of a post, and which parts hold the attention of a user longer. Moreover, little is known about how these attractors help developers (students and professionals) answer comprehension questions. This paper presents an eye tracking study on thirty developers constrained to reading only Stack Overflow posts while summarizing four open source methods or classes. Results indicate that on average paragraphs and code snippets were fixated upon most often and longest. When\u00a0\u2026", "num_citations": "4\n", "authors": ["2148"]}
{"title": "An empirical study assessing source code readability in comprehension\n", "abstract": " Software developers spend a significant amount of time reading source code. If code is not written with readability in mind, it impacts the time required to maintain it. In order to alleviate the time taken to read and understand code, it is important to consider how readable the code is. The general consensus is that source code should be written to minimize the time it takes for others to read and understand it. In this paper, we conduct a controlled experiment to assess two code readability rules: nesting and looping. We test 32 Java methods in four categories: ones that follow/do not follow the readability rule and that are correct/incorrect. The study was conducted online with 275 participants. The results indicate that minimizing nesting decreases the time a developer spends reading and understanding source code, increases confidence about the developer's understanding of the code, and also suggests that it\u00a0\u2026", "num_citations": "4\n", "authors": ["2148"]}
{"title": "Can the ez reader model predict eye movements over code? towards a model of eye movements over source code\n", "abstract": " Studies of eye movements during source code reading have supported the idea that reading source code differs fundamentally from reading natural text. The paper analyzed an existing data set of natural language and source code eye movement data using the EZ reader model of eye movement control. The results show that the EZ reader model can be used with natural text and with source code where it provides good predictions of eye movement duration. This result is confirmed by comparing model predictions to eye-movement data from this experiment and calculating the correlation score for each metric. Finally, it was found that gaze duration is influenced by token frequency in code and in natural text. The frequency effect is less pronounced on first fixation duration and single fixation duration. An eye movement control model for source code reading may open the door for tools in education and the industry\u00a0\u2026", "num_citations": "3\n", "authors": ["2148"]}
{"title": "Exploring eye tracking data on source code via dual space analysis\n", "abstract": " Eye tracking is a frequently used technique to collect data capturing users' strategies and behaviors in processing information. Understanding how programmers navigate through a large number of classes and methods to find bugs is important to educators and practitioners in software engineering. However, the eye tracking data collected on realistic codebases is massive compared to traditional eye tracking data on one static page. The same content may appear in different areas on the screen with users scrolling in an Integrated Development Environment (IDE). Hierarchically structured content and fluid method position compose the two major challenges for visualization. We present a dual-space analysis approach to explore eye tracking data by leveraging existing software visualizations and a new graph embedding visualization. We use the graph embedding technique to quantify the distance between two\u00a0\u2026", "num_citations": "2\n", "authors": ["2148"]}
{"title": "Invited talk: Towards an emotionally aware development environment\n", "abstract": " The paper takes a position on enhancing existing development environments to support awareness of developeraffect. To realize this, the environment needs to implicitly interface with biometric devices such as an eye tracker. Such development environments can help the developer detect when they need to take a break or when they need help. Besides helping the developer, researchers can also make use of such environments to study developer behavior in a realistic setting thereby improving tool support for emotional awareness as well as other software tasks.", "num_citations": "2\n", "authors": ["2148"]}
{"title": "Understanding a novice programmer\u2019s progression of reading and summarizing source code\n", "abstract": " The paper presents observations over the course of three months on the patterns and strategies a novice programmer (DO 21) uses while reading source code. The programmer was asked to read and summarize a program after completing three sets of lessons from an online course. Results indicate that the method of reading source code gets harder as the novice attempts to comprehend more difficult concepts. The analysis is presented in the form of a case study.", "num_citations": "2\n", "authors": ["2148"]}
{"title": "OnionUML: An Eclipse plug-in for visualizing UML class diagrams in onion graph notation\n", "abstract": " This paper presents OnionUML, an Eclipse plug-in that reduces the number of visible classes in a UML class diagram while preserving structure and semantics of the UML elements. Compaction of class elements is done using onion graph notation. The goal is that developers will be able to view and understand subsystems of a large software system while being able to visualize how that subsystem fits into the whole system.", "num_citations": "2\n", "authors": ["2148"]}
{"title": "Determining Differences in Reading Behavior Between Experts and Novices by Investigating Eye Movement on Source Code Constructs During a Bug Fixing Task\n", "abstract": " This research compares the eye movement of expert and novice programmers working on a bug fixing task. This comparison aims at investigating which source code elements programmers focus on when they review Java source code. Programmer code reading behaviors at the line and term levels are used to characterize the differences between experts and novices. The study analyzes programmers\u2019 eye movements over identified source code areas using an existing eye tracking dataset of 12 experts and 10 novices. The results show that the difference between experts and novices is significant in source code element coverage. Specifically, novices read more method signatures, variable declarations, identifiers, and keywords compared to experts. However, experts are better at finishing the task using fewer source code elements when compared to novices. Moreover, programmers tend to focus on the method\u00a0\u2026", "num_citations": "1\n", "authors": ["2148"]}
{"title": "A randomized controlled trial on the effects of embedded computer language switching\n", "abstract": " Polyglot programming, the use of multiple programming languages during the development process, is common practice in modern software development. This study investigates this practice through a randomized controlled trial conducted under the context of database programming. Participants in the study were given coding tasks written in Java and one of three SQL-like embedded languages. One was plain SQL in strings, one was in Java only, and the third was a hybrid embedded language that was closer to the host language. We recorded 109 valid data points. Results showed significant differences in how developers of different experience levels code using polyglot techniques. Notably, less experienced programmers wrote correct programs faster in the hybrid condition (frequent, but less severe, switches), while more experienced developers that already knew both languages performed better in\u00a0\u2026", "num_citations": "1\n", "authors": ["2148"]}
{"title": "Automated recording and semantics-aware replaying of high-speed eye tracking and interaction data to support cognitive studies of software engineering tasks\n", "abstract": " The paper introduces a fundamental technological problem with collecting high-speed eye tracking data while studying software engineering tasks in an integrated development environment. The use of eye trackers is quickly becoming an important means to study software developers and how they comprehend source code and locate bugs. High quality eye trackers can record upwards of 120 to 300 gaze points per second. However, it is not possible to map each of these points to a line and column position in a source code file (in the presence of scrolling and file switching) in real time at data rates over 60 gaze points per second without data loss. Unfortunately, higher data rates are more desirable as they allow for finer granularity and more accurate study analyses. To alleviate this technological problem, a novel method for eye tracking data collection is presented. Instead of performing gaze analysis in real time\u00a0\u2026", "num_citations": "1\n", "authors": ["2148"]}
{"title": "Towards an emotionally aware development environment: invited talk\n", "abstract": " The paper takes a position on enhancing existing development environments to support awareness of developer affect. To realize this, the environment needs to implicitly interface with biometric devices such as an eye tracker. Such development environments can help the developer detect when they need to take a break or when they need help. Besides helping the developer, researchers can also make use of such environments to study developer behavior in a realistic setting thereby improving tool support for emotional awareness as well as other software tasks.", "num_citations": "1\n", "authors": ["2148"]}
{"title": "Voice Based Interactive Modification of Web based Movies\n", "abstract": " The Internet is becoming a massive knowledge resource for 3D multimedia information such as movies, news clips, and children\u2019s stories. Multimedia information can be interactively modified using multimodal interfaces for entertainment to incorporate subjective perception in a scenario and to analyze situations using many what-if scenario modifications. In this paper we describe an XML voice interaction model for 3D XML movies retrieved over the Internet. This voice model can be used to dynamically and interactively modify and edit 3D movies and archive or transmit them to others over the Internet. Performance analysis has been presented.", "num_citations": "1\n", "authors": ["2148"]}