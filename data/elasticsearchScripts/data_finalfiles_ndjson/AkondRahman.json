{"title": "We don't need another hero? the impact of\" heroes\" on software development\n", "abstract": " A software project has\" Hero Developers\" when 80% of contributions are delivered by 20% of the developers. Are such heroes a good idea? Are too many heroes bad for software quality? Is it better to have more/less heroes for different kinds of projects? To answer these questions, we studied 661 open source projects from Public open source software (OSS) Github and 171 projects from an Enterprise Github.", "num_citations": "38\n", "authors": ["1953"]}
{"title": "What is the connection between issues, bugs, and enhancements?\n", "abstract": " Agile teams juggle multiple tasks so professionals are often assigned to multiple projects, especially in service organizations that monitor and maintain large suites of software for a large user base. If we could predict changes in project conditions change, then managers could better adjust the staff allocated to those projects. This paper builds such a predictor using data from 832 open source and proprietary projects. Using a time series analysis of the last 4 months of issues, we can forecast how many bug reports and enhancement requests will be generated the next month. The forecasts made in this way only require a frequency count of these issue reports (and do not require an historical record of bugs found in the project). That is, this kind of predictive model is very easy to deploy within a project. We hence strongly recommend this method for forecasting future issues, enhancements, and bugs in a project.", "num_citations": "24\n", "authors": ["1953"]}
{"title": "Effect of stocking density on the growth and production of freshwater prawn (Macrobrachium rosenbergii)\n", "abstract": " To study the effect of different stocking densities on the growth, survival and production of the freshwater prawn the post larvae with mean initial weight of 0.22\u00b10.04 g were stocked at 40, 50, and 80PL/decimal and cultured for a period of 150 days under gher conditions. The culture ponds were manured with cow dung and inorganic fertilizers and a supplementary feed of 28.82% crude protein was given to the prawns. Prawns were fed artificial diet with 10% of their body weight at 1st month (up to 30 days) and reduced to 7% at 2nd month (up to 60 days), 5% at 3rd month and were continued till the end of the experiment. Feed was distributed evenly over the ponds surface twice daily. The experimental ponds were harvested after five months of culture. The results indicated that at low stocking density (40post larvae/decimal) the growth, survival and production were higher. Prawns attained a final mean body weight of 38.71\u00b13.79 g and 21.59\u00b12.64 g in low and higher stocking densities, respectively. The highest survival rate was obtained from low stoking density (90.83%) and the lowest survival rate was obtained from high stoking density (47.92%). The estimated productions were 1.4 and 0.82 kg/decimal for low and high stoking densities respectively. Higher specific growth rate (3.45% per body weight) and low feed conversion ratio (1.12) were found only in the low stocking density. Hence, the growth performance was significantly (P< 0.05) decreased with increasing stocking density.", "num_citations": "18\n", "authors": ["1953"]}
{"title": "XI Commandments of Kubernetes Security: A Systematization of Knowledge Related to Kubernetes Security Practices\n", "abstract": " Kubernetes is an open-source software for automat- ing management of computerized services. Organizations, such as IBM, Capital One and Adidas use Kubernetes to deploy and manage their containers, and have reported benefits related to deployment frequency. Despite reported benefits, Kubernetes deployments are susceptible to security vulnerabilities, such as those that occurred at Tesla in 2018. A systematization of Kubernetes security practices can help practitioners mitigate vulnerabilities in their Kubernetes deployments. The goal of this paper is to help practitioners in securing their Kubernetes installations through a systematization of knowledge related to Kubernetes security practices. We systematize knowledge by applying qualitative analysis on 104 Internet artifacts. We identify 11 security practices that include (i) implementation of role-based access control (RBAC) authorization to provide least\u00a0\u2026", "num_citations": "16\n", "authors": ["1953"]}
{"title": "Characterizing the influence of continuous integration: Empirical results from 250+ open source and proprietary projects\n", "abstract": " Continuous integration (CI) tools integrate code changes by automatically compiling, building, and executing test cases upon submission of code changes. Use of CI tools is getting increasingly popular, yet how proprietary projects reap the benefits of CI remains unknown. To investigate the influence of CI on software development, we analyze 150 open source software (OSS) projects, and 123 proprietary projects. For OSS projects, we observe the expected benefits after CI adoption, eg, improvements in bug and issue resolution. However, for the proprietary projects, we cannot make similar observations. Our findings indicate that only adoption of CI might not be enough to the improve software development process. CI can be effective for software development if practitioners use CI's feedback mechanism efficiently, by applying the practice of making frequent commits. For our set of proprietary projects we observe\u00a0\u2026", "num_citations": "14\n", "authors": ["1953"]}
{"title": "Risk factors of stroke in young and old age group-a comparative study\n", "abstract": " Background: Stroke is an important cause of death and disability. Prevalence of stroke in Bangladesh differs with age. The risk factors in young differ in comparison to old age group. In this study risk factors of stroke in young in comparison to old age group were evaluated.Objectives: To compare the risk factors associated with stroke in young adult and to those of old age group.Methodology: This comparative study conducted in the department of Medicine and Neurology, Sir Salimullah Medical College & Mitford Hospital, Dhaka from January 2008 to June 2009. One hundred two stroke patient of above 15 years of age were confirmed by CT scan or MRI of brain those were included in young and old age groups. The risk factors of stroke were defined in terms of hypertension, diabetes mellitus, dyslipidaemia, ischemic heart diseases, valvular heart disease, history of transient ischemic attack or stroke, smoking and oral contraceptive pill.Results: Of total 102 cases 17 were young adults and 85 old patients between 19 to 100 years. Mean age young adult was 39.76 (\u00b16.379) and old age was 65.06 (\u00b111.238). 61.7% were male & 38.2% were female and the ratio was 1.6: 1. Amongst male 58.8% patients were smoker in each age group and only 2.9% old patients were alcoholic. Only 17.6% had previous history of transient ischemic attack or stroke in each age group. 58.8% of young and 48.2% of old were hypertensive. 7% old patients had history of ischemic heart disease. 5.9% of young and 2.4% of old patients had valvular heart disease but no patient had vasculitis. 16.7% old patients had diabetes mellitus. 4.9% of total patients (young 11.8% and 3\u00a0\u2026", "num_citations": "13\n", "authors": ["1953"]}
{"title": "Energy-efficient multiple targets tracking using target kinematics in wireless sensor networks\n", "abstract": " Target tracking is one of the cardinal applications of a wireless sensor network. Tracking multiple targets is more challenging than tracking a single target in a wireless sensor network due to targets' movement in different directions, targets' speed variations and frequent connectivity failures of low powered sensor nodes. If all the low-powered sensor nodes are kept active in tracking multiple targets coming from different directions of the network, there is high probability of network failure due to wastage of power. It would be more realistic if the tracking area can be reduced so that the less number of sensor nodes will be active which ultimately saves the energy consumption. Tracking area can be reduced by using the target's kinematics. There is almost no method to track multiple targets, based on targets' kinematics. In our paper, we propose a distributed tracking method for tracking multiple targets considering targets'\u00a0\u2026", "num_citations": "13\n", "authors": ["1953"]}
{"title": "Snakes in paradise?: Insecure python-related coding practices in stack overflow\n", "abstract": " Despite being the most popular question and answer website for software developers, answers posted on Stack Overflow (SO) are susceptible to contain Python-related insecure coding practices. A systematic analysis on how frequently insecure coding practices appear in SO answers can help the SO community assess the prevalence of insecure Python code blocks in SO. An insecure coding practice is recurrent use of insecure coding patterns in Python. We conduct an empirical study using 529,054 code blocks collected from Python-related 44,966 answers posted on SO. We observe 7.1% of the 44,966 Python-related answers to include at least one insecure coding practice. The most frequently occurring insecure coding practice is code injection. We observe 9.8% of the 7,444 accepted answers to include at least one insecure code block. We also find user reputation not to relate with the presence of insecure\u00a0\u2026", "num_citations": "11\n", "authors": ["1953"]}
{"title": "Blockchain enabled AI marketplace: The price you pay for trust\n", "abstract": " There has been a considerable amount of interest in exploring blockchain technologies for enabling marketplaces of different kinds. In this work, we provide a blockchain implementation that enables an\" AI marketplace\": a platform where consumers and data providers can transact data and/or models and derive value. Preserving privacy and trust during these transactions is a paramount concern. As an enabling use case, we consider a transfer learning setting. In this setting, a consumer entity wants to acquire a large training set, from different private data providers, that matches a small validation dataset provided by the consumer. Data providers expect fair value for their contribution and the consumer also wants to maximize its benefit. We implement a distributed protocol on a blockchain that provides guarantees on privacy and consumer's benefit. We also demonstrate that our blockchain implementation plays a crucial role in addressing the issue of fair value attribution and privacy in a trustable way. We consider three different designs for a blockchain implementation that trades off trust requirements on different entities and the overhead in terms of time taken for completion of the task. The first design provides no trust guarantees. The second one guarantees trust with respect to other participants if the platform is trustworthy. The third one guarantees complete trust with no requirements. Our experiments show that the performance in the second and third cases, with partial/complete trust guarantees, degrade by roughly 2x and 5x respectively, compared to the baseline with no trust guarantees.", "num_citations": "8\n", "authors": ["1953"]}
{"title": "Characteristics of defective infrastructure as code scripts in DevOps\n", "abstract": " Defects in infrastructure as code (IaC) scripts can have serious consequences for organizations who adopt DevOps. By identifying which characteristics of IaC scripts correlate with defects, we can identify anti-patterns, and help software practitioners make informed decisions on better development and maintenance of IaC scripts, and increase quality of IaC scripts. The goal of this paper is to help practitioners increase the quality of IaC scripts by identifying characteristics of IaC scripts and IaC development process that correlate with defects, and violate security and privacy objectives. We focus on characteristics of IaC scripts and IaC development that (i) correlate with IaC defects, and (ii) violate security and privacy-related objectives namely, confidentiality, availability, and integrity. For our initial studies, we mined open source version control systems from three organizations: Mozilla, Openstack, and Wikimedia, to\u00a0\u2026", "num_citations": "8\n", "authors": ["1953"]}
{"title": "Portable and secure multimedia data transfer in mobile phones using Record Management Store (RMS)\n", "abstract": " Nowadays mobile phones are expected to handle huge volume of multimedia data which is very challenging due to the small memory size of the mobile phone sets. We have developed an application that incorporates a novel technique which uses and enhances the Record Management Store (RMS), a subsystem of Mobile Information Device Profile (MIDP), which not only captures, upload and download multimedia data efficiently but also provides significant improvement over existing mobile applications in terms of portability and security. We illustrate our improvements by empirical analyses.", "num_citations": "7\n", "authors": ["1953"]}
{"title": "Synthesizing program execution time discrepancies in julia used for scientific software\n", "abstract": " Scientific software is defined as software that is used to analyze data to investigate unanswered research questions in the scientific community. Developers use programming languages such as Julia to build scientific software. When programming with Julia, developers experience program execution time discrepancy i.e. not obtaining desired program execution time, which hinders them to efficiently complete their tasks. The goal of this paper is to help developers in achieving desired program execution time for Julia by identifying the causes of why program execution time discrepancies happen with an empirical study of Stack Overflow posts. We conduct an empirical study with 263 Julia-related posts collected from Stack Overflow, and apply qualitative analysis on the collected 263 posts. We identify 9 categories of program execution time discrepancies for Julia, which include discrepancies related to data\u00a0\u2026", "num_citations": "6\n", "authors": ["1953"]}
{"title": "Anti-patterns in infrastructure as code\n", "abstract": " In DevOps, infrastructure as code (IaC) scripts are used by practitioners to create and manage an automated deployment pipeline that enables IT organizations to release their software changes rapidly at scale. Low quality IaC scripts can have serious consequences, potentially leading to wide-spread system outages and service discrepancies. The goal of this research is to help practitioners increase the quality of infrastructure as code (IaC) scripts by identifying anti-patterns in IaC scripts and development of IaC scripts. Using open source repositories, we conduct three initial studies to (i) quantify the frequency and categorize the defects in IaC scripts; and (ii) identify operations that characterize defective IaC scripts. Based on our empirical analysis we observe (i) the dominant defect defect categories to be related to syntax and configuration assignments, and (ii) three operations that characterize defective IaC\u00a0\u2026", "num_citations": "6\n", "authors": ["1953"]}
{"title": "An Empirical Study of Bugs in COVID19 Software Projects\n", "abstract": " Context: The dire consequences of the COVID-19 pandemic has influenced development of COVID-19 software ie, software used for analysis and mitigation of COVID-19. Bugs in COVID-19 software can be consequential, as COVID-19 software projects can impact public health policy and user data privacy. Objective: The goal of this paper is to help practitioners and researchers improve the quality of COVID-19 software through an empirical study of open source software projects related to COVID-19. Methodology: We use 129 open source COVID-19 software projects hosted on GitHub to conduct our empirical study. Next, we apply qualitative analysis on 550 bug reports from the collected projects to identify bug categories. Findings: We identify 8 bug categories, which include data bugs ie, bugs that occur during mining and storage of COVID-19 data. The identified bug categories appear for 7 categories of software projects including (i) projects that use statistical modeling to perform predictions related to COVID-19, and (ii) medical equipment software that are used to design and implement medical equipment, such as ventilators. Conclusion: Based on our findings, we advocate for robust statistical model construction through better synergies between data science practitioners and public health experts. Existence of security bugs in user tracking software necessitates development of tools that will detect data privacy violations and security weaknesses.", "num_citations": "5\n", "authors": ["1953"]}
{"title": "Comprehension effort and programming activities: related? or not related?\n", "abstract": " Researchers have observed programmers to allocate considerable amount of effort in program comprehension. But, how does program comprehension effort relate with programming activities? We answer this question by conducting an empirical study using the MSR 2018 Mining Challenge Dataset. We quantify programmers' comprehension effort, and investigate the relationship between program comprehension effort and four programming activities: navigating, editing, building projects, and debugging. We observe when programmers are involved in high comprehension effort they navigate and make edits at a significantly slower rate. However, we do not observe any significant differences in programmers' build and debugging behavior, when programmers are involved in high comprehension effort. Our findings suggest that the relationship between program comprehension effort and programming activities is\u00a0\u2026", "num_citations": "5\n", "authors": ["1953"]}
{"title": "Multiple Targets Tracking Using Kinematics in Wireless Sensor Networks\n", "abstract": " Target tracking is considered as one of the cardinal applications of a wireless sensor network. Tracking multiple targets is more challenging than tracking a single target in a wireless sensor network due to targets\u2019 movement in different directions, targets\u2019 speed variations and frequent connectivity failures of low powered sensor nodes. If all the low-powered sensor nodes are kept active in tracking multiple targets coming from different directions of the network, there is high probability of network failure due to wastage of power. It would be more realistic if the tracking area can be reduced so that less number of sensor nodes will be active and therefore, the network will consume less energy. Tracking area can be reduced by using the target\u2019s kinematics. There is almost no method to track multiple targets based on targets\u2019 kinematics. In our paper, we propose a distributed tracking method for tracking multiple targets considering targets\u2019 kinematics. We simulate our method by a sensor network simulator OMNeT++ and empirical results state that our proposed methodology outperforms traditional tracking algorithms.", "num_citations": "5\n", "authors": ["1953"]}
{"title": "Bugs in Infrastructure as Code\n", "abstract": " Infrastructure as code (IaC) scripts are used to automate the maintenance and configuration of software development and deployment infrastructure. IaC scripts can be complex in nature, containing hundreds of lines of code, leading to defects that can be difficult to debug, and lead to wide-scale system discrepancies such as service outages at scale. Use of IaC scripts is getting increasingly popular, yet the nature of defects that occur in these scripts have not been systematically categorized. A systematic categorization of defects can inform practitioners about process improvement opportunities to mitigate defects in IaC scripts. The goal of this paper is to help software practitioners improve their development process of infrastructure as code (IaC) scripts by categorizing the defect categories in IaC scripts based upon a qualitative analysis of commit messages and issue report descriptions. We mine open source version control systems collected from four organizations namely, Mirantis, Mozilla, Openstack, and Wikimedia Commons to conduct our research study. We use 1021, 3074, 7808, and 972 commits that map to 165, 580, 1383, and 296 IaC scripts, respectively, collected from Mirantis, Mozilla, Openstack, and Wikimedia Commons. With 89 raters we apply the defect type attribute of the orthogonal defect classification (ODC) methodology to categorize the defects. We also review prior literature that have used ODC to categorize defects, and compare the defect category distribution of IaC scripts with 26 non-IaC software systems. Respectively, for Mirantis, Mozilla, Openstack, and Wikimedia Commons, we observe (i) 49.3%, 36.5%, 57.6%, and 62\u00a0\u2026", "num_citations": "4\n", "authors": ["1953"]}
{"title": "Testing practices for infrastructure as code\n", "abstract": " Infrastructure as code (IaC) helps practitioners to rapidly deploy software services to end-users. Despite reported benefits, IaC scripts are susceptible to defects. Defects in IaC scripts can cause serious consequences, for example, creating large-scale outages similar to the Amazon Web Services (AWS) incident in 2017. The prevalence of defects in IaC scripts necessitates practitioners to implement IaC testing and be aware of IaC testing practices. A synthesis of IaC testing practices can enable practitioners in early mitigation of IaC defects and also help researchers to identify potential research avenues. The goal of this paper is to help practitioners improve the quality of infrastructure as code (IaC) scripts by identifying a set of testing practices for IaC scripts. We apply open coding on 50 Internet artifacts, such as blog posts to derive IaC testing practices. We identify six testing practices that include behavior-focused\u00a0\u2026", "num_citations": "3\n", "authors": ["1953"]}
{"title": "Testing biological agents and methods to control Fusarium wilt of Alfalfa plants (Medicage sativa L.)\n", "abstract": " Three strains of rhizobacteria, namely Azospirillium brasilense, Azotobacter chroococcum and Klebsilense peneumoneae and a commercial product of HALEX*(rhizobacteria mixture) were tested for health and growth promotion of alfalfa plants and for controlling Fusarium oxysporum f. sp. Medicaginis the causal agent of fusarium wilt disease in Alfalfa. In vitro, the rhizobacteria reduced the dry weight of fusarium mycelia by 31.3 to 63.7%, therefore, the highest suppression was achieved by K. peneumoneae and the three mixture isolates. In vivo a significant decrease in disease severity was observed when alfalfa seeds were coated with HALEX*. This treatment also, increased the plant fresh and dry weight. Dry weight increased from 3.31, 2.16, 1.2 to 3.8, 2.17, 1.76 g in noninfected soil with the pathogen and from 1.81, 1.07, 1.01, to 2.45, 1.33, 1.28 g in soil treated with pathogen on Najdy, Hassawy and Max cultivars\u00a0\u2026", "num_citations": "3\n", "authors": ["1953"]}
{"title": "Effect of plant density on the growth and yield of cabbage\n", "abstract": " Effect of plant density on the growth and yield of cabbage FAO_logo home-icon English Espa\u00f1ol Fran\u00e7ais \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u4e2d\u6587 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 home-icon Translate with Google Access the full text NOT AVAILABLE Lookup at Google Scholar google-logo Bibliographic information Language : English Type : Journal Article In AGRIS since : 2013 Volume : 7 Issue : 3/4 Start Page : 9 End Page : 14. ill All titles : \" Effect of plant density on the growth and yield of cabbage \" \" Effect of plant density on the growth and yield of cabbage [Brassica oleracea, Bangladesh] \" Save as: AGRIS_AP RIS EndNote(XML) Effect of plant density on the growth and yield of cabbage Loading... Paper Written Paper Effect of plant density on the growth and yield of cabbage [1982] Rahman, A. Haque, A. Access the full text NOT AVAILABLE Lookup at Google Scholar google-logo Access the full text NOT AVAILABLE Lookup at Google Scholar google-logo Loading..\u2026", "num_citations": "3\n", "authors": ["1953"]}
{"title": "\u2018Under-reported\u2019Security Defects in Kubernetes Manifests\n", "abstract": " With the advent of the fourth industrial revolution, industry practitioners are moving towards container-based infrastructure for managing their digital workloads. Kubernetes, a container orchestration tool, is reported to help industry practitioners in automated management of cloud infrastructure and rapid deployment of software services. Despite reported benefits, Kubernetes installations are susceptible to security defects, as it occurred for Tesla in 2018. Understanding how frequently security defects appear in Kubernetes installations can help cybersecurity researchers to investigate security-related vulnerabilities for Kubernetes and generate security best practices to avoid them. In this position paper, we first quantify how frequently security defects appear in Kubernetes manifests, i.e., configuration files that are use to install and manage Kubernetes. Next, we lay out a list of future research directions that researchers\u00a0\u2026", "num_citations": "2\n", "authors": ["1953"]}
{"title": "Vulnerability discovery strategies used in software projects\n", "abstract": " Malicious users can exploit undiscovered software vulnerabilities ie, undiscovered weaknesses in software, to cause serious consequences, such as large-scale data breaches. A systematic approach that synthesizes strategies used by security testers can aid practitioners to identify latent vulnerabilities. The goal of this paper is to help practitioners identify software vulnerabilities by categorizing vulnerability discovery strategies using open source software bug reports. We categorize vulnerability discovery strategies by applying qualitative analysis on 312 OSS bug reports. Next, we quantify the frequency and evolution of the identified strategies by analyzing 1,632 OSS bug reports collected from five software projects spanning across 2009 to 2019. The five software projects are Chrome, Eclipse, Mozilla, OpenStack, and PHP.", "num_citations": "2\n", "authors": ["1953"]}
{"title": "A curated dataset of security defects in scientific software projects\n", "abstract": " Scientific software is defined as software that is used to explore and analyze data to investigate unanswered research questions in the scientific community [6]. The domain of scientific software includes software needed to construct a research pipeline such as software for simulation and data analysis, large-scale dataset management, and mathematical libraries [4]. Programming languages such as Julia [1] are used to develop scientific software efficiently and achieve desired program execution time. Julia was used in Celeste 1, a software used in astronomy research. Celeste was used to load 178 terabytes of astronomical image data to produce a catalog of 188 million astronomical objects in 14.6 minutes 2. The Celeste-related example provides anecdotal evidence on the value of studying Julia-related projects from a cybersecurity perspective.", "num_citations": "2\n", "authors": ["1953"]}
{"title": "Characterizing the influence of continuous integration\n", "abstract": " Continuous integration (CI) tools integrate code changes by automatically compiling, building, and executing test cases upon submission of code changes. Use of CI tools is getting increasingly popular, yet how proprietary projects reap the benefits of CI remains unknown. To investigate the influence of CI on software development, we analyze 150 open source software (OSS) projects, and 123 proprietary projects. For OSS projects, we observe the expected benefits after CI adoption, eg, improvements in bug and issue resolution. However, for the proprietary projects, we cannot make similar observations. Our findings indicate that only adoption of CI might not be enough to the improve software development process. CI can be effective for software development if practitioners use CI\u2019s feedback mechanism efficiently, by applying the practice of making frequent commits. For our set of proprietary projects we observe practitioners commit less frequently, and hence not use CI effectively for obtaining feedback on the submitted code changes. Based on our findings we recommend industry practitioners to adopt the best practices of CI to reap the benefits of CI tools for example, making frequent commits.", "num_citations": "2\n", "authors": ["1953"]}
{"title": "Characterizing co-located insecure coding patterns in infrastructure as code scripts\n", "abstract": " Context: Insecure coding patterns (ICPs), such as hard-coded passwords can be inadvertently introduced in infrastructure as code (IaC) scripts, providing malicious users the opportunity to attack provisioned computing infrastructure. As performing code reviews is resource-intensive, a characterization of co-located ICPs, ie, ICPs that occur together in a script can help practitioners to prioritize their review efforts and mitigate ICPs in IaC scripts. Objective: The goal of this paper is to help practitioners in prioritizing code review efforts for infrastructure as code (IaC) scripts by conducting an empirical study of co-located insecure coding patterns in IaC scripts. Methodology: We conduct an empirical study with 1613, 2764 and 2845 Puppet scripts respectively collected from three organizations namely, Mozilla, Openstack, and Wikimedia. We apply association rule mining to identify co-located ICPs in IaC scripts. Results: We\u00a0\u2026", "num_citations": "1\n", "authors": ["1953"]}
{"title": "Anti-patterns in infrastructure as code\n", "abstract": " In continuous deployment, infrastructure as code (IaC) scripts are used by practitioners to create and manage an automated deployment pipeline that enables information technology (IT) organizations to release their software changes rapidly at scale. Low quality IaC scripts can have serious consequences, potentially leading to wide-spread system outages and service discrepancies. By systematically identifying which characteristics are correlated with low quality IaC scripts, we can identify anti-patterns ie recurring practices with negative consequences, which may help practitioners to take informed actions in creating and maintaining defect-free IaC scripts. The goal of this thesis is to help practitioners in increasing quality of IaC scripts by identifying development and security anti-patterns in the development of infrastructure as code scripts. Using open source repositories, we conduct five research studies and\u00a0\u2026", "num_citations": "1\n", "authors": ["1953"]}
{"title": "\u201cDoing\u201d Agile versus \u201cBeing\u201d Agile\n", "abstract": " In numerous occasions Agile practitioners have warned about the negative aspects of adopting Agile tools and techniques, without implementing the primary practices of Agile. They have coined this observation as \u201cdoing\u201d Agile, but not \u201cbeing\u201d Agile. However such warnings are opinion-based, as Agile practitioners have provided little to no empirical evidence that supports their recommendations. We mine 150 open source software (OSS) and 123 proprietary projects to investigate if empirical evidence exists for the phenomenon:\u201cdoing\u201d Agile, but not \u201cbeing\u201d Agile. In particular, we investigate if the Agile technique of continuous integration (CI) influences bug and issue resolution, as well as commit patterns. According to our empirical analysis, for OSS projects, we observe the expected benefits after CI adoption, ie, more bugs are resolved, and more issues are resolved. However, for the proprietary projects, we cannot make similar observations. Furthermore, we observe proprietary projects to \u201cdo\u201d Agile, but not \u201cbe\u201d Agile, as these projects use CI tools, without implementing the primary Agile practices for example, making frequent commits. We recommend practitioners not to use Agile techniques such as CI, without adopting the necessary practices.", "num_citations": "1\n", "authors": ["1953"]}
{"title": "Continuous Integration: The Silver Bullet?\n", "abstract": " Continuous integration (CI) tools integrate code changes by automatically compiling, building, and executing test cases upon submission of code changes. Use of CI tools is getting increasingly popular, yet how proprietary projects reap the benefits of CI remains unknown. To investigate the influence of CI on software development, we mine 661 open source software (OSS) projects, and 171 proprietary projects. For OSS projects, we observe the expected benefits after CI adoption, ie more bugs are resolved, and more issues are resolved. However, for the proprietary projects, we cannot make similar observations. Therefore, we cannot claim that CI is the \u2018silver bullet\u2019for software development. Why is this so? Our findings indicate that only adoption of CI might not be enough to improve software development. CI can be effective for software development if practitioners use CI\u2019s feedback mechanism efficiently, by applying the practice of making frequent commits. For proprietary projects we observe practitioners to commit less frequently, and hence not use CI effectively, for obtaining feedback on the submitted code changes. We recommend practitioners to (i) apply the CI best practices along with adoption of CI tools,(ii) consider their team\u2019s development context before adopting CI tools, and (iii) after adoption of CI, investigate if CI satisfies their needs by applying software analytics.", "num_citations": "1\n", "authors": ["1953"]}
{"title": "Comparative study between DoF based baor management and community based baor management in Bangladesh\n", "abstract": " A study was conducted to assess the Comparison between department of Fisheries (DoF) based baor management and community based baor management. Four baors at Chowgacha Upazilla in Jessore district of Bangladesh were selected for the study. Six major species are mainly cultured in the four baors. These are mainly self-recruited species come from the ambient locality due to drainage or over flooding during rainy season. The average stocking density of Department of Fisheries Management (Baor-1 and Baor-2) was about 123/kg/ha while stocking density of community based baor management (Baor-3 and Baor-4) was about 135/kg/ha in 2009-2010. There are three types of fishing methods are used Kochal Fishing, Komor Fishing and Chak Fishing. The kochal fishing was more than other fishing method because this method was easy and available. Total production of Department of Fisheries Management (DoFM) system was 474 kg/ha in 2011-2012 on the other hand, the total production of Community Based Baor Management (CBBM) was 575kg/ha. Community Based Baor Management (CBBM) is better than Department of Fisheries Management (DoFM) because cost-benefit ratio of Community Based Baor Management (1.0105) is more than that of Department of Fisheries Management (0.788913).", "num_citations": "1\n", "authors": ["1953"]}