{"title": "Une architecture pour les transformations de mod\u00e8les et la restructuration de mod\u00e8les UML\n", "abstract": " Avec l'ing\u00e9nierie des mod\u00e8les on cherche \u00e0 r\u00e9soudre le probl\u00e8me de l'\u00e9volution des grands syst\u00e8mes informatiques. En effet, ces syst\u00e8mes doivent s'adapter \u00e0 l'\u00e9volution des besoins et des technologies, et cette \u00e9volution est de plus en plus rapide par rapport \u00e0 celle du domaine m\u00e9tier. On souhaite donc r\u00e9utiliser l'expertise de ce domaine ind\u00e9pendamment des technologies sur lesquelles on s'appuie, gr\u00e2ce \u00e0 des techniques de manipulation de mod\u00e8les. La contribution pr\u00e9sent\u00e9e dans ce manuscrit est une architecture de manipulation de mod\u00e8les ind\u00e9pendante d'un quelconque m\u00e9tamod\u00e8le. Cette architecture favorise la r\u00e9utilisation des techniques reconnues de g\u00e9nie logiciel orient\u00e9 objet pour le d\u00e9veloppement de transformations de mod\u00e8les. La s\u00e9mantique de l'interface d'acc\u00e8s aux mod\u00e8les est sp\u00e9cifi\u00e9e par une impl\u00e9mentation de r\u00e9f\u00e9rence en langage fonctionnel. Notre approche est fond\u00e9e sur une interface de niveau mof (Meta-Object Facility) pour la manipulation de mod\u00e8les. Le langage associ\u00e9 permet de manipuler des \u00e9l\u00e9ments de mod\u00e8le directement, car la structure du m\u00e9tamod\u00e8le \u00e9tend dynamiquement l'ensemble des types accessibles au programme de transformation. D'un point de vue m\u00e9thodologique, on montre que les transformations de mod\u00e8les synth\u00e9tisent l'expertise d'implantation d'un domaine m\u00e9tier vers une technologie donn\u00e9e ; il est donc utile de mod\u00e9liser les transformations les plus complexes pour les d\u00e9velopper en appliquant r\u00e9cursivement les techniques de g\u00e9nie logiciel et d'ing\u00e9nierie des mod\u00e8les. La mise en pratique illustre ce point et montre le fonctionnement de l'architecture de manipulation de mod\u00e8les\u00a0\u2026", "num_citations": "6\n", "authors": ["133"]}
{"title": "OCL as a Core UML Transformation Language WITUML 2002\u2013Position Paper\n", "abstract": " Software developers spend most of their time modifying and maintaining existing products. In a recent article [7] we focused on the definition of UML refactorings (ie behavior-preserving transformations) specified by meta-level OCL pre-& post-conditions. In this paper we propose to extend OCL with model modification features, thus allowing to implement model transformations at the same abstraction level as their specification. We then describe the global architecture of a model manipulation tool based on an OCL core.", "num_citations": "3\n", "authors": ["133"]}
{"title": "BLOC: a Trait-Based Collections Library\u2013a Preliminary Experience Report\n", "abstract": " A trait is a programming construct which provides code reusability. Traits are groups of methods that can be reused orthogonally from inheritance. Traits offer a solution to the problems of multiple inheritance by providing a behavior-centric modularity. Since traits offer an alternative to traditional inheritance-based code reuse, a couple of questions arise. For example, what is a good granularity for a Trait enabling reuse as well as plug ease? How much reuse can we expect on large existing inheritance-based hierarchies? In this paper we take as case study the Smalltalk Collection hierarchy and we start rewriting it from scratch using traits from the beginning. We show how such library can be built using traits and we report such a preliminary experience. Since the Collection library is large, we focused and built the main classes of the library with Traits and report problems we encountered and how we solved them. Results of this experience are positive and show that we can build new collections based on the traits used to define the new library kernel.", "num_citations": "2\n", "authors": ["133"]}
{"title": "Todos al tablado... La murga, espace identificatoire d'une soci\u00e9t\u00e9 en rupture\n", "abstract": " L'Uruguay des d\u00e9cennies inf\u00e2mes a d\u00fb r\u00e9inventer ses codes de communication et, a vu ainsi se transformer le carnaval en une \u00ab voix bruyante de la conscience collective \u00bb Davis (1979). Le tablado repr\u00e9sente un espace o\u00f9 la critique est institutionnalis\u00e9e et l'\u00ab expression publique de la contestation \u00bb Mollier (2006) s'en \u00e9chappe. Les murgas, arm\u00e9es d'humour obligent \u00e0 r\u00e9fl\u00e9chir et, d\u00e9noncent tout ce qui est \u00ab tarissement de la vie et abdication de la libert\u00e9 \u00bb Favre (1995). Sous surveillance d\u00e8s le d\u00e9but des ann\u00e9es 70', leurs couplets traditionnellement grivois et/ou tint\u00e9s de critique sociale et morale, vont conna\u00eetre un tournant dans leur \u00e9volution et certains paroliers vont r\u00e9investir le genre pour parler au spectateur des exc\u00e8s du pouvoir en place. Nous nous proposons d'\u00e9tudier comment les murgas continueront \u00e0 cr\u00e9er pour essayer de briser le silence qui s'immisce dans la soci\u00e9t\u00e9 uruguayenne ; comment le tablado se transformera en un nouvel espace d'expression malgr\u00e9 le caviardage des censeurs et comment il contribuera, pour certains, \u00e0 red\u00e9finir une identit\u00e9 ax\u00e9e sur l'engagement.", "num_citations": "1\n", "authors": ["133"]}
{"title": "Towards an object grammar for electroacoustic music analysis and composition\n", "abstract": " Aims. The composition of electroacoustic inherently deals with complexity. The introduction of the object-oriented paradigm in the computing world was meant to provide a solution to complex problems, difficult to solve by functional or logic programming. Object-Orientation focus on the relations between multiple entities rather than in the entities themselves, eg they focus on simulating the roles and the interactions of those entities rather than on their individual behaviour. While the object-oriented paradigm has been extensively used in the implementation of computer music software (eg OpenMusic, SuperCollider), rarely its theoretical component has been addressed as a mean to cast light on the musical structures used in computer music composition and analysis. With the help of design and modelling tools it is possible to work on complex abstract models while maintaining coherency between abstraction layers\u2013what electroacoustic music composers themselves call'objects'(Vaggione, 2001).Main Contribution. Analysing electroacoustic music involves not only finding critical layouts of a musical piece, but also working out the syntactical elements and related grammar that are implicit in'classical'music because of the use of a more or less common language, corollary of a (more or less) standardised graphical representation strategy. One can imagine the tension the analyst can find in an electroacoustic piece as very similar to the tension experienced between the graphical and the aural (ie performance) form of a classical music piece. We argue that it is possible to define specific methods for extracting meaningful inflexions in the musical\u00a0\u2026", "num_citations": "1\n", "authors": ["133"]}