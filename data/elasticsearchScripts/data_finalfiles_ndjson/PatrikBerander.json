{"title": "Requirements prioritization\n", "abstract": " This chapter provides an overview of techniques for prioritization of requirements for software products. Prioritization is a crucial step towards making good decisions regarding product planning for single and multiple releases. Various aspects of functionality are considered, such as importance, risk, cost, etc. Prioritization decisions are made by stakeholders, including users, managers, developers, or their representatives. Methods are for combining individual prioritizations based on overall objectives and constraints. A range of different techniques and aspects are applied to an example to illustrate their use. Finally, limitations and shortcomings of current methods are pointed out, and open research questions in the area of requirements prioritization are discussed.", "num_citations": "446\n", "authors": ["1536"]}
{"title": "Using students as subjects in requirements prioritization\n", "abstract": " When conducting research in software engineering, the ultimate goal is usually to come up with results applicable in industry. However, it is not always possible to get industrial professionals to act as subjects in research studies. Instead, students are commonly used as representatives for professionals since they are more convenient to use. This paper presents an experiment on requirements prioritization that was performed with classroom students as subjects. The result of the experiment is compared to the results of similar prioritizations made in student projects, other classroom studies, literature and in an industrial case study. The objective of this comparison was to evaluate in which cases students successfully could be used as subjects in experimentation. The result indicates that students in a classroom environment are less suitable than students in projects as representatives for professionals in studies of\u00a0\u2026", "num_citations": "149\n", "authors": ["1536"]}
{"title": "Hierarchical cumulative voting (hcv)\u2014prioritization of requirements in hierarchies\n", "abstract": " Decision support in requirements engineering is an activity that plays an important role in enabling the delivery of value to stakeholders. Requirements prioritization has been identified as an integral (and important) part of requirements negotiation and release planning in incremental software development, which makes prioritization a key issue in requirements engineering decision support. The Analytical Hierarchy Process (AHP) has for long been considered as the technique to use when prioritizing requirements on a ratio scale. Several studies have reported positively about AHP, but lately a number of studies have also reported about weaknesses, without identifying any better ratio-scale alternatives. In this paper, the strengths and weaknesses of AHP and another ratio-scale prioritization technique, Cumulative Voting (CV), are compared. Based on this comparison, a new technique for prioritizing hierarchically\u00a0\u2026", "num_citations": "138\n", "authors": ["1536"]}
{"title": "A goal question metric based approach for efficient measurement framework definition\n", "abstract": " In software engineering, measurements can be used to monitor, understand and improve software processes as well as products and resource utilization. Commonly, measurement frameworks are ambitious undertakings that require large data collection and analysis efforts. Unfortunately, such frameworks usually become too extensive, resulting in graveyards with a lot of data never being analyzed and used. One well-known way for defining measurements that tries to focus on the most important ones is the Goal Question Metric (GQM) approach. GQM focuses on eliciting goals and questions as drivers for finding metrics necessary to collect. This means that there is always a purpose with the defined measurements. GQM solves part of the problem mentioned, but it is still possible that the measurements defined become too many. In this paper, an extended GQM approach is presented that facilitates identification of\u00a0\u2026", "num_citations": "103\n", "authors": ["1536"]}
{"title": "Evolving prioritization for software product management\n", "abstract": " The quality of a product is commonly defined by its ability to satisfy stakeholder needs and expectations. Therefore, it is important to find, select, and plan the content of a software product to maximize the value for internal and external stakeholders. This process is traditionally referred to as requirements engineering in the software industry, while it is often referred to as product management in industries with a larger market focus. As an increasing number of software products are delivered to a market instead of single customers, the need for product management in software companies is increasing. As a side effect, the need for mechanisms supporting decisions regarding the content of software products also increases.While decision-support within requirements engineering and product management is a broad area, requirements prioritization together with release planning and negotiation are considered as some of the most important decision activities. This is particularly true because these activities support decisions regarding the content of products, and are hence drivers for quality. At the same time, requirements prioritization is seen as an integral and important component in both requirements negotiation (with single customers) and release planning (with markets) in incremental software development. This makes requirements prioritization a key component in software engineering decision support, in particular as input to more sophisticated approaches for release planning and negotiation, where decisions about what and when to develop are made.", "num_citations": "88\n", "authors": ["1536"]}
{"title": "Towards a research framework on requirements prioritization\n", "abstract": " There exist a large number of approaches for prioritization of software requirements. Despite of several empirical studies, there is still a lack of evidence of which approaches that are to prefer, since different studies have resulted in different conclusions. Reasons may be due to differences in contexts, variables measured, and data sets used. This paper presents a research framework for studies about requirements prioritization, which aims to enable building a more consistent knowledge base and stronger evidence. The framework facilitates comparison, replication, and high-level analysis of prioritization approaches by proposing suitable variables to measure. The basis of the framework comes from a systematic review conducted on requirements prioritization techniques, and is further refined through literature studies of similar frameworks in related areas, and in a research workshop. The framework supports researchers in conducting and reporting prioritization studies, and supports practitioners in getting information about different approaches.", "num_citations": "88\n", "authors": ["1536"]}
{"title": "Evaluating two ways of calculating priorities in requirements hierarchies\u2013An experiment on hierarchical cumulative voting\n", "abstract": " When developing large-scale software systems, there is often a large amount of requirements present, and they often reside on several hierarchical levels. In most cases, not all stated requirements can be implemented into the product due to different constraints, and the requirements must hence be prioritized. As requirements on different abstraction levels shall not be compared, prioritization techniques that are able to handle multi-level prioritization are needed. Different such techniques exist, but they seem to result in unfair comparisons when a hierarchy is unbalanced. In this paper, an empirical experiment is presented where an approach that compensate for this challenge is evaluated. The results indicate that some form of compensation is preferred, and that the subjects\u2019 preference is not influenced by the amount of information given.", "num_citations": "63\n", "authors": ["1536"]}
{"title": "From traditional to streamline development\u2014opportunities and challenges\n", "abstract": " Traditional software development processes have shown to be inappropriate for markets where it is necessary to quickly respond to changing customer needs. To address this issue, a number of modern development processes have been developed that attempt to improve customer responsiveness. One such modern process is Streamline Development (SD), a process developed by and for Ericsson AB. This article presents an early evaluation of the suitability of SD for Ericsson. The evaluation was performed by finding positive and negative aspects of introducing SD, as well as identifying issues to address if implementing the new process. The data regarding the impact of introducing SD was collected in a series of interviews and then structured using a modification of Force Field Analysis (FFA). Copyright \u00a9 2007 John Wiley & Sons, Ltd.", "num_citations": "57\n", "authors": ["1536"]}
{"title": "Prioritization of stakeholder needs in Software engineering: Understanding and evaluation\n", "abstract": " In everyday life, humans confront situations where different decisions have to be made. Such decisions can be non-trivial even though they often are relatively simple, such as which bus to take or which flavor of a soft drink to buy. When facing decisions of more complex nature, and when more is at stake, they tend to get much harder. It is often possible to deal with such decisions by prioritizing different alternatives to find the most suitable one.In software engineering, decision-makers are often confronted with situations where complex decisions have to be made, and where the concept of prioritization can be utilized. Traditionally in software engineering, discussions about prioritization have focused on the software product. However, when defining or improving software processes, complex decisions also have to be made. In fact, software products and software processes have many characteristics in common which invite thoughts about using prioritization when developing and evolving software processes as well. The results presented in this thesis indicate that it is possible to share results and knowledge regarding prioritization between the two areas.", "num_citations": "47\n", "authors": ["1536"]}
{"title": "Differences in views between development roles in software process improvement\u2013a quantitative comparison\n", "abstract": " This paper presents a quantitative study that evaluates how different roles in a software development organization view different issues in software process improvement. The study is conducted in a large Swedish telecommunication organization with the traditional roles of software development. The respondents of the study got five different questions related to process improvement. The result was that the different roles disagreed in three of the questions while they agreed in two of the questions. The disagreement was related to issues about importance of improvement, urgency of problems, and threat against successful process management, while the questions where the roles agreed focused on communication of the processes (documentation and teaching). It is concluded that it is important to be aware and take into account the different needs of different roles and that looking into other areas (e.g. marketing\u00a0\u2026", "num_citations": "25\n", "authors": ["1536"]}
{"title": "Understanding and Evaluation of Software Process Deviations\n", "abstract": " Software process improvement is often mentioned in today\u2019s software marketplace. To be able to do process improvement, the organisation must have a process to improve from. These processes are commonly deviated from, and the PDU/PAY organisation at Ericsson AB has experienced that this happens too often within their organisation. The aim of this master thesis was to investigate why such deviations occur and how they could be prevented at PDU/PAY.A survey including a qualitative and a quantitative part was conducted at PDU/PAY to investigate this issue. The result was that processes were often deviated from due to lack of: management commitment, user involvement, synchronisation between processes, change management, anchoring of processes, and communication of processes.", "num_citations": "1\n", "authors": ["1536"]}