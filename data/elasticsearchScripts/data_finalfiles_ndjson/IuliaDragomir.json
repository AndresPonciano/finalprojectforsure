{"title": "The refinement calculus of reactive systems\n", "abstract": " The Refinement Calculus of Reactive Systems (RCRS) is a compositional formal framework for modeling and reasoning about reactive systems. RCRS provides a language which can describe atomic components as symbolic transition systems or QLTL formulas, and composite components formed using three primitive composition operators: serial, parallel, and feedback. The semantics of the language is given in terms of monotonic property transformers, an extension of monotonic predicate transformers to reactive systems. RCRS can specify both safety and liveness properties. It can also model input-output systems which are both non-deterministic and non-input-receptive (i.e., which may reject some inputs at some points in time), and can thus be seen as a behavioral type system. RCRS provides a set of techniques for symbolic computer-aided reasoning, including compositional static analysis and verification\u00a0\u2026", "num_citations": "33\n", "authors": ["1423"]}
{"title": "OMEGA2: A new version of the profile and the tools\n", "abstract": " In previous work we contributed to the definition of an executable profile of UML, called OMEGA UML, dedicated to the formal specification and validation of real-time systems. The prominent features of OMEGA UML are (1) a small and coherent set of concepts for describing the architecture and the behaviour of a system, (2) means for formalizing the properties of the system, in particular timing properties, and (3) a well-behaved concurrent execution model suited for real-time applications. To meet user demands, the profile has recently been updated to include hierarchical composite structures (part of the standard UML 2. x specification) and new concurrency structures. The new version (OMEGA2) is in line with the original principles: simplicity, well-defined operational semantics and tool support for simulation and verification (IFx version 2). The present paper contains an overview of both the profile and the tool.", "num_citations": "30\n", "authors": ["1423"]}
{"title": "Compositional semantics and analysis of hierarchical block diagrams\n", "abstract": " We present a compositional semantics and analysis framework for hierarchical block diagrams (HBDs) in terms of atomic and composite predicate transformers. Our framework consists of two components: (1) a compiler that translates Simulink HBDs into an algebra of transformers composed in series, in parallel, and in feedback; (2) an implementation of the theory of transformers and static analysis techniques for them in Isabelle. We evaluate our framework on several case studies including a benchmark Simulink model by Toyota.", "num_citations": "25\n", "authors": ["1423"]}
{"title": "Unambiguous UML composite structures: the OMEGA2 experience\n", "abstract": " Starting from version 2.0, UML introduced hierarchical composite structures, which are a very expressive way of defining complex software architectures, but which have a very loosely defined semantics in the standard. In this paper we propose a set of consistency rules that ensure UML composite structures are unambiguous and can be given a precise semantics. Our primary application of the static consistency rules defined in this paper is within the OMEGA UML profile [6], but these rules are general and applicable to other hierarchical component models based on the same concepts, such as MARTE GCM or SysML. The rule set has been formalized in OCL and is currently used in the OMEGA UML compiler.", "num_citations": "25\n", "authors": ["1423"]}
{"title": "Contract-based modeling and verification of timed safety requirements within SysML\n", "abstract": " In order to cope with the growing complexity of critical real-time embedded systems, systems engineering has adopted a component-based design technique driven by requirements. Yet, such an approach raises several issues since it does not explicitly prescribe how system requirements can be decomposed on components nor how components contribute to the satisfaction of requirements. The envisioned solution is to design, with respect to each requirement and for each involved component, an abstract specification, tractable at each design step, that models how the component is concerned by the satisfaction of the requirement and that can be further refined toward a correct implementation. In this paper, we consider such specifications in the form of contracts. A contract for a component consists in a pair (assumption, guarantee) where the assumption models an abstract behavior of the component\u2019s\u00a0\u2026", "num_citations": "22\n", "authors": ["1423"]}
{"title": "ESROCOS: a robotic operating system for space and terrestrial applications\n", "abstract": " ESROCOS (http://www.h2020-esrocos.eu) is a European Project in the frame of the PERASPERA SRC, (http://www.h2020-peraspera.eu/), targeting the design of a Robot Control Operating Software (RCOS) for space robotics applications. The goal of the ESROCOS project is to provide an open-source framework to assist in the development of flight software for space robots, providing adequate features and performance with space-grade Reliability, Availability, Maintainability and Safety (RAMS) properties. This paper presents the ESROCOS project and summarizes the approach and the current status.", "num_citations": "21\n", "authors": ["1423"]}
{"title": "The refinement calculus of reactive systems toolset\n", "abstract": " We present the Refinement Calculus of Reactive Systems Toolset, an environment for compositional formal modeling and reasoning about reactive systems, built around Isabelle, Simulink, and Python. The toolset implements the Refinement Calculus of Reactive Systems (RCRS), a contract-based refinement framework inspired by the classic refinement calculus and interface theories. The toolset formalizes the entire RCRS theory in about 30000 lines of Isabelle code. The toolset also contains a translator of Simulink diagrams and a formal analyzer implemented on top of Isabelle. We present the main functionalities of the RCRS Toolset via a series of pedagogical examples and also describe a larger case study from the automotive domain.", "num_citations": "16\n", "authors": ["1423"]}
{"title": "The ERGO framework and its use in planetary/orbital scenarios\n", "abstract": " ERGO (European Robotic Goal-Oriented Autonomous Controller) is one of the six space robotic projects in", "num_citations": "13\n", "authors": ["1423"]}
{"title": "A case study in formal system engineering with SysML\n", "abstract": " In the development of complex critical systems, an important source of errors is the misinterpretation of system requirements allocated to the software, due to inadequate communication between system engineering teams and software teams. In response, organizations that develop such systems are searching for solutions allowing formal system engineering and system to software bridging, based on standard languages like SysML. As part of this effort, we have defined a formal profile for SysML (OMEGA SysML) and we have built a simulation and verification toolbox for this profile (IFx). This paper reports on the experience of modelling and validating an industry-grade system, the Solar Generation System (SGS) of the Automated Transfer Vehicle (ATV) built by Astrium, using IFx-OMEGA. The experience reveals what can currently be expected from such an approach and what are the weak points that should be\u00a0\u2026", "num_citations": "13\n", "authors": ["1423"]}
{"title": "Type inference of Simulink hierarchical block diagrams in Isabelle\n", "abstract": " Simulink is a de-facto industrial standard for embedded system design. In previous work, we developed a compositional analysis framework for Simulink, the Refinement Calculus of Reactive Systems (RCRS), which allows checking compatibility and substitutability of components. However, standard type checking was not considered in that work. In this paper we present a method for the type inference of Simulink models using the Isabelle theorem prover. A Simulink diagram is translated into an (RCRS) Isabelle theory. Then Isabelle\u2019s powerful type inference mechanism is used to infer the types of the diagram based on the types of the basic blocks. One of the aims is to handle formally as many diagrams as possible. In particular, we want to be able to handle even those diagrams that may have typing ambiguities, provided that they are accepted by Simulink. This method is implemented in our toolset that\u00a0\u2026", "num_citations": "11\n", "authors": ["1423"]}
{"title": "UML/SysML semantic tunings\n", "abstract": " Recent years have seen a manifest increase in the use of modelling by the embedded systems industry. UML and SysML are two examples of languages used in this context. One of the reasons why the use of models is interesting is the possibility to perform early verification, validation and testing. A lot of work was devoted to developing theoretical results in verification and validation, and interesting results are available. Integrating these results in frameworks that take high-level models as an entry remains a challenging task, for several reasons that include the difficult scalability of the theoretical results. In previous work, we presented OMEGA 2, a framework that takes this challenge. Applying our framework on large industrial models revealed the fact that some features of the UML/SysML semantics which lead to bottlenecks in verification are not actually necessary in the models that we considered, thus\u00a0\u2026", "num_citations": "10\n", "authors": ["1423"]}
{"title": "Mechanically proving determinacy of hierarchical block diagram translations\n", "abstract": " Hierarchical block diagrams (HBDs) are at the heart of embedded system design tools, including Simulink. Numerous translations exist from HBDs into languages with formal semantics, amenable to formal verification. However, none of these translations has been proven correct, to our knowledge.               We present in this paper the first mechanically proven HBD translation algorithm. The algorithm translates HBDs into an algebra of terms with three basic composition operations (serial, parallel, and feedback). In order to capture various translation strategies resulting in different terms achieving different tradeoffs, the algorithm is nondeterministic. Despite this, we prove its semantic determinacy: for every input HBD, all possible terms that can be generated by the algorithm are semantically equivalent. We apply this result to show how three Simulink translation strategies introduced previously can be\u00a0\u2026", "num_citations": "7\n", "authors": ["1423"]}
{"title": "Integrating verifiable assume/guarantee contracts in uml/sysml\n", "abstract": " The compositional approach based on components and driven by requirements is a common method used in the development of critical real-time embedded systems. Since the satisfaction of a requirement is subject to the composition of several components, defining abstract and partial behaviors for components with respect to the point of view of the requirement allows for a manageable design of systems. In this paper we consider such specifications in the form of contracts. A contract for a component is a pair (assumption, guarantee) where the assumption is an abstraction of the component's environment behavior and the guarantee is an abstraction of the component's behavior given that the environment behaves like the assumption. In previous work we have defined a formal contract-based theory for Timed Input/Output Automata with the aim of using it to express the semantics of UML/SysML models. In this paper we propose an extension of the UML/SysML language with a syntax and semantics for contracts and for the relations they must satisfy. Besides the important role that contracts have in design, they can also be used for the verification of requirement satisfaction and for their traceability.", "num_citations": "7\n", "authors": ["1423"]}
{"title": "Early analysis of ambient systems sysml properties using omega2-ifx\n", "abstract": " Formal methods provide tools to verify the consistency and correctness of a specification with respect to the desired properties of the system. This verification is important as the development of an AAL (Ambient Assisted Living) system involves different technologies (medical services, surveillance cameras, intelligent devices, etc.) requiring a strong consistency checking between models. We illustrate in this paper how we prove some of the properties of the system before the development even starts. To model the AAL system, we use the SysML language. In terms of tools, we used Rational Rhapsody in combination with the OMEGA2 profile which is an executable Uml/SysML profile used for the formal specification and validation of critical real-time systems. This profile is supported by the IFx toolset which provides mechanisms for the model simulation and properties verification of the AAL system.", "num_citations": "7\n", "authors": ["1423"]}
{"title": "Using the ERGO Framework in a Planetary and an Orbital Scenario\n", "abstract": " The European Robotic Goal-Oriented Autonomous Controller ERGO [1] is one of the six space robotic projects in the frame of the PERASPERA SRC [2]. Its main objective is to provide an autonomous framework for future space robots that will be able to perform its activities without the need of constant human supervision and control. Future space missions, in particular those aimed at Deep Space or planetary exploration, such as Exomars [3], or Mars2020 [4] demand a greater level of autonomy. The concept of autonomy applies here to a whole set of operations to be performed on-board without human supervision; for instance, a Martian rover has to avoid getting stuck in the sand while traversing, autonomously recharge its batteries periodically, and communicate with Earth occasionally each sol [5]. Additionally, it will need to be able to detect serendipitous events (eg a rock that has a specific property). A deep space probe [6] has to take the right measurements to approach an asteroid, and due to the latency of the communication with Ground, these measurements need to be taken autonomously on board. Orbital space missions have already successfully applied autonomy concepts on board, in particular for autonomous event detection and onboard activities planning [7].In ERGO we provide a framework for autonomy aimed to cover a wide set of a capabilities, ranging from reactive capabilities (ie capabilities that demand a quick response) to deliberative capabilities (that consider different courses of actions, and evaluate among the different possibilities the best alternative).", "num_citations": "6\n", "authors": ["1423"]}
{"title": "Translating hierarchical block diagrams into composite predicate transformers\n", "abstract": " Simulink is the de facto industrial standard for designing embedded control systems. When dealing with the formal verification of Simulink models, we face the problem of translating the graphical language of Simulink, namely, hierarchical block diagrams (HBDs), into a formalism suitable for verification. In this paper, we study the translation of HBDs into the compositional refinement calculus framework for reactive systems. Specifically, we consider as target language an algebra of atomic predicate transformers to capture basic Simulink blocks (both stateless and stateful), composed in series, in parallel, and in feedback. For a given HBD, there are many possible ways to translate it into a term in this algebra, with different tradeoffs. We explore these tradeoffs, and present three translation algorithms. We report on a prototype implementation of these algorithms in a tool that translates Simulink models into algebra terms implemented in the Isabelle theorem prover. We test our tool on several case studies including a benchmark Simulink model by Toyota. We compare the three translation algorithms, with respect to size and readability of generated terms, simplifiability of the corresponding formulas, and other metrics.", "num_citations": "6\n", "authors": ["1423"]}
{"title": "Safety contracts for timed reactive components in sysml\n", "abstract": " A variety of system design and architecture description languages, such as SysML, UML or AADL, allows the decomposition of complex system designs into communicating timed components. In this paper we consider the contract-based specification of such components. A contract is a pair formed of an assumption, which is an abstraction of the component\u2019s environment, and a guarantee, which is an abstraction of the component\u2019s behavior given that the environment behaves according to the assumption. Thus, a contract concentrates on a specific aspect of the component\u2019s functionality and on a subset of its interface, which makes it relatively simpler to specify. Contracts may be used as an aid for hierarchical decomposition during design or for verification of properties of composites. This paper defines contracts for components formalized as a variant of timed input/output automata, introduces\u00a0\u2026", "num_citations": "6\n", "authors": ["1423"]}
{"title": "ADE: Autonomous DEcision making in very long traverses\n", "abstract": " ADE (Autonomous DEcision making in Very Long Traverses) is an ongoing H2020 project aiming to develop key technologies for future space robotics missions. The focus of the project is to develop an exhaustive autonomous system for planetary rover exploration that can traverse at least 1km/sol, perform and maximize the scientific data collection, take appropriate decisions in nominal and contingency situations and ensure its safety at any moment.", "num_citations": "5\n", "authors": ["1423"]}
{"title": "Safety contracts for timed reactive components (extended abstract\u22c6)\n", "abstract": " A variety of system design and architecture description languages, such as SysML, UML or AADL, rely on the decomposition of complex system designs into communicating timed components. In this paper we consider the contract-based specification of such components. A contract is a pair formed of an assumption, which is an abstraction of the component\u2019s environment, and a guarantee, which is an abstraction of the component\u2019s behaviour given that the environment behaves according to the assumption. Thus, a contract concentrates on a specific aspect of the component\u2019s functionality and on a subset of its interface, which makes it relatively simpler to specify. Contracts may be used as an aid for hierarchical decomposition during design or for verification of properties of composites. This paper defines contracts for components formalized as a variant of timed input/output automata and introduces compositional results allowing to reason with contracts", "num_citations": "4\n", "authors": ["1423"]}
{"title": "Well-formedness and typing rules for UML Composite Structures\n", "abstract": " Starting from version 2.0, UML introduced hierarchical composite structures, which are an expressive way of defining complex software architectures, but which have a very loosely defined semantics in the standard. In this paper we propose a set of consistency rules that disambiguate the meaning of UML composite structures. Our primary goal was to have an operational model of composite structures for the OMEGA UML profile, an executable profile dedicated to the formal specification and validation of real-time systems, developed in a past project to which we contributed. However, the rules and principles stated here are applicable to other hierarchical component models based on the same concepts, such as SysML. The presented ruleset is supported by an OCL formalization which is described in this report. This formalization was applied on different complex models for the evaluation and validation of the proposed principles.", "num_citations": "2\n", "authors": ["1423"]}
{"title": "Rigorous Design of FDIR Systems with BIP\n", "abstract": " The correct design of autonomous systems is a challenge, due to the uncertainties arising at execution time. A special case of uncertainties are the faults and failures that break the system\u2019s requirements. Dealing with such situations requires to design fault detection, isolation and recovery (FDIR) components. The aim of FDIR components is to detect when a fault has occurred and to apply a recovery strategy that brings the system into a mode where the requirements are satisfied. In this paper we describe an approach based on the Behavior, Interaction, Priority (BIP) tools for the rigorous design of FDIR components. This approach leverages the scalability of statistical model-checking tool BIP-SMC to check for requirement satisfaction, and the code generation feature of the BIP compiler. Moreover, the generated code is executable with the BIP engine (s) and easily integrated with the original system. The approach has been used in the H2020 ESROCOS and ERGO projects for the development of (autonomous) robotics control systems, which have been validated through field trials.", "num_citations": "1\n", "authors": ["1423"]}
{"title": "Testing Autonomous Robots: A Discussion On Performances Obtained During The Ergo Field Tests\n", "abstract": " The European Robotic Goal-Oriented Autonomous Controller (ERGO)(http://www. h2020-ergo. eu) is one of the PERASPERA SRC first call projects. The focus of this project is to develop a framework for long-range autonomy that allows commanding a spacecraft via high-level goals. The developed ERGO framework achieves this aim by providing a new paradigm based on components and tools. Two main components, that include Artificial Intelligence technology, are at the core of ERGO: an on-board mission planner, able to dynamically generate plans on-board from high-level goals, and a scientific agent, that detects targets of interest from images. Additionally, other autonomous capabilities that can be used and tailored for different robotics platforms, such as rover navigation and robotic arm motion planning, are provided by ERGO. In this paper we discuss the results and performances achieved in the field tests of two applications developed with the ERGO framework: an orbital and a planetary mission.", "num_citations": "1\n", "authors": ["1423"]}
{"title": "Quantitative risk assessment in the design of resilient systems\n", "abstract": " Deploying fault detection, isolation and recovery (FDIR) subsystems is an accepted solution to address the occurrence of faults and failures in safety-critical (real-time) systems. Yet, these FDIR subsystems should be devised only for those faults that falsify the system\u2019s requirements. As a consequence, the obtained system is minimal, although complete, and robust both with respect to safety and performance requirements. In this paper we propose a two-fold systematic and mechanized approach based on formal methods combining (1) the evaluation of faults relevance based on quantitative risk assessment, and (2) the validation of system robustness by statistical model checking. We apply this approach on an excerpt of a real-life autonomous robotics case study, and we report on the implementation and results obtained with the SBIP framework.", "num_citations": "1\n", "authors": ["1423"]}