{"title": "Agent-assisted task management that reduces email overload\n", "abstract": " RADAR is a multiagent system with a mixed-initiative user interface designed to help office workers cope with email overload. RADAR agents observe experts to learn models of their strategies and then use the models to assist other people who are working on similar tasks. The agents' assistance helps a person to transition from the normal email-centric workflow to a more efficient task-centric workflow. The Email Classifier learns to identify tasks contained within emails and then inspects new emails for similar tasks. A novel task-management user interface displays the found tasks in a to-do list, which has integrated support for performing the tasks. The Multitask Coordination Assistant learns a model of the order in which experts perform tasks and then suggests a schedule to other people who are working on similar tasks. A novel Progress Bar displays the suggested schedule of incomplete tasks as well as the\u00a0\u2026", "num_citations": "56\n", "authors": ["632"]}
{"title": "Big Data in Cloud Computing: Features and Issues.\n", "abstract": " 1Carnegie Mellon University, Institute for Software Research, Pittsburgh, PA 15213, USA 2ISEC\u2013Superior Institute of Engineering of Coimbra, Polytechnic of Coimbra, 3030-190 Coimbra, Portugal 3CISUC\u2013Centre of Informatics and Systems of the University of Coimbra, FCTUC, University of Coimbra, 3030-290 Coimbra, Portugal", "num_citations": "32\n", "authors": ["632"]}
{"title": "Comparing model-based predictive approaches to self-adaptation: CobRA and PLA\n", "abstract": " Modern software-intensive systems must often guarantee certain quality requirements under changing run-time conditions and high levels of uncertainty. Self-adaptation has proven to be an effective way to engineer systems that can address such challenges, but many of these approaches are purely reactive and adapt only after a failure has taken place. To overcome some of the limitations of reactive approaches (e.g., lagging behind environment changes and favoring short-term improvements), recent proactive self-adaptation mechanisms apply ideas from control theory, such as model predictive control (MPC), to improve adaptation. When selecting which MPC approach to apply, the improvement that can be obtained with each approach is scenario-dependent, and so guidance is needed to better understand how to choose an approach for a given situation. In this paper, we compare CobRA and PLA, two\u00a0\u2026", "num_citations": "25\n", "authors": ["632"]}
{"title": "Versioning and consistency for dynamically composed configurations\n", "abstract": " Dynamically composed software systems are constructed as they execute. Although these systems are of increasing importance and arise in a number of application areas, configuration management tools typically do not provide much support for them. This paper presents progress towards providing enhanced configuration management techniques for dynamically composed systems. The paper commences with an example of a dynamically composed system, which is used to motivate the relevance of dynamically composed systems, and to highlight various design issues and requirements for configuration management in this domain. A model, and its associated notation DCDL, is then presented to describe particular aspects of the example. This model seamlessly integrates the notions of consistency, specified in terms of complete configurations, and version families, which are relevant to the incomplete\u00a0\u2026", "num_citations": "17\n", "authors": ["632"]}
{"title": "uDesign: end-user design applied to monitoring and control applications for smart spaces\n", "abstract": " This paper introduces an architectural style for enabling end-users to quickly design and deploy software systems in domains characterized by highly personalized and dynamic requirements. The style offers an intuitive metaphor based on boxes, pipes, and wires, but retains enough preciseness that systems can be automatically assembled and dynamically reconfigured based on uDesign descriptions. uDesign was primarily motivated and validated within monitoring and control applications for smart spaces, but we envision possible extensions to other domains. Our contribution differs from early attempts at end- user programming by dealing with higher level software architectural abstractions rather than programming, and by addressing run-time descriptions rather than code structures. The paper presents validation of uDesign along the following aspects: (a) expressiveness, by means of two case studies, one in\u00a0\u2026", "num_citations": "14\n", "authors": ["632"]}
{"title": "xAcme: CMU Acme extensions to xArch\n", "abstract": " XML is emerging as an industry-standard for the representation of data, a standard that is much more flexible than HTML. XML allows one to define a document\u2019s structure using user-defined tags. This allows tags to be defined that capture structure and meaning for specific domains, allowing for exchange of structured data between participants in that domain. One specific domain to which XML is being applied is that of software architectures. A standard for architectural structure, called xArch, has been developed by the ABLE group at CMU and the ISR group at UCI. Since xArch merely represents the structure of an architecture, extensions are required to include higher-level concepts such as types, styles, constraints or variation in an architecture.This document describes the CMU extensions to xArch that allow all of Acme to be described. It is assumed that the reader is familiar with the Acme ADL, as described in http://www. cs. cmu. edu/~ able/publications/acme-fcbs/. The xAcme extensions add facilities for representing properties, types and families in XML.", "num_citations": "12\n", "authors": ["632"]}
{"title": "Rapid ethnographic assessment: data-to-model\n", "abstract": " When faced with understanding what is going on in a contested region or a military experiment it is often necessary to rapidly process vast quantities of textual data, assess the underlying situation, and identify changes early on. A human-in-the-loop approach for rapidly extracting the social and organizational networks, key activities, issues and sentiment is described. Using a combination of pre-defined ontological categorization schemes, thesauri, machine learning and topic-modeling information on people, groups/organizations, issues, activities, and locations are extracted as are relations among them. The value of this data-to-model methodology, its reusability across contexts, and key challenges are demonstrated using data from three diverse sources: a scenario driven deterrence assessment, a military multi-actor experiment, and opensource information on the Sudan. We find that segmentation of people, groups, and locations into generic and specific, syntax hierarchies for identification, and re-usable thesauri enable rapid and meaningful meta-network extraction. Sentiment and events can often be post-inferred. Forecasted change in these networks and the dispersion of sentiment can then be simulated. The data-to-model system enables improved scalability, early results are 5x greater, and decreased processing time, early results are over 500% faster than without process, with fidelity similar to that by ethnographers.", "num_citations": "10\n", "authors": ["632"]}
{"title": "Towards a formal framework for hybrid planning in self-adaptation\n", "abstract": " Decision-making approaches in self-adaptation face a fundamental trade-off between quality and timeliness of adaptation plans. Due to this trade-off, designers often have to make an offline compromise between finding adaptation plans quickly and finding closer-to-optimal plans that demand longer computation times. Recent work has proposed that hybrid planning can resolve this trade-off dynamically, achieving higher utility than either fast or slow approaches individually. The promise of hybrid planning is to combine multiple decision-making approaches at run time to produce adaptation plans of the high quality within given time constraints. However, the diversity of decision-making approaches makes the problem of hybrid planning complex and multi-faceted. This paper advances the theory of hybrid planning by formalizing the central concepts and four sub-problems of hybrid planning. This formalization can\u00a0\u2026", "num_citations": "9\n", "authors": ["632"]}
{"title": "Toward pure polylingual persistence\n", "abstract": " A heterogeneous persistent object system provides multiple programming language interfaces. This gives rise to the polylingual interoperability problem, namely, how can an application uniformly process data objects that have been defined, created and persistently stored using distinct programming language type models. At POS-7, we reported on the PolySPIN approach (polylingual support for persistence, interoperability and naming). A prototype based on PolySPIN, which was built as an extension to the TI/Darpa Open Object-Oriented Database, supports transparent polylingual access for persistent C++ and CLOS objects. The approach, however, assumes that objects in the persistent store are monolingual structures. That is, while a C++ application using the PolySPIN approach may access and manipulate a persistent CLOS object as if it were implemented in C++, that CLOS object must be entirely\u00a0\u2026", "num_citations": "8\n", "authors": ["632"]}
{"title": "Designing configuration management facilities for dynamically bound systems\n", "abstract": " Dynamically bound systems are those software systems which are able to incorporate executable components into themselves during execution. Such systems are clearly very flexible; however, they suffer from problems associated with this flexibility. These problems, which are similar to some of the problems addressed by configuration management, include how to locate and select components, how to manage change to components, how to verify the consistency of configurations of the systems and how to determine the actual system configuration. This paper describes some of the systems which support dynamic binding and discusses some of their associated problems. An approach to the design of configuration management facilities for dynamically bound systems is then outlined. This approach involves the detailed modelling of dynamic binding in a range of systems supporting this notion and the\u00a0\u2026", "num_citations": "7\n", "authors": ["632"]}
{"title": "Designing Configuration Management Tools for Dynamically Composed Systems\n", "abstract": " Software changes. In many cases, a change to software is made by a developer, and the software is reconstructed and reshipped in toto to a customer. In such cases, the old version is stopped and this remade version is brought into service. However, with the advent of networks where a software system may effectively be distributed over a wide area (such as via the internet), an approach to software composition has developed which allows systems to be constructed on the fly, as they execute. Systems such as Java [Gosling96], OMG\u2019s CORBA [Mowbray95] and Microsoft\u2019s distributed component oriented model (DCOM)[Brockschmidt94] permit the incremental provision of services to programs. These latter systems are recent examples of a class of software systems termed dynamically composed systems. In general, a dynamically composed system is one in which pieces of the system are added or changed as the system is being used. In fact, dynamically composed systems have been in use in various domains for some time and are not limited to the construction of programs. Examples of dynamically composed systems include:\u2022 browsing in a hypermedia document, which involves a user dynamically choosing \u201cpages\u201d which can be considered to form a particular document,\u2022 browsing data where the method of the data\u2019s display is dependent on the data, and the range of data types to be displayed cannot be determined statically (eg,[Schiefer93]),\u2022 distributed systems, where the system is distributed over a network and it is undesirable to locate all components and shut them down to perform an update\u2013this is known as dynamic reconfiguration\u00a0\u2026", "num_citations": "6\n", "authors": ["632"]}
{"title": "Consistency issues in partially bound dynamically composed systems\n", "abstract": " Dynamically composed systems are able to incorporate new components as they execute. Therefore, configurations of these systems are not fully elaborated until at least the time that they are executed, and they are perhaps never fully elaborated. Such incomplete configurations are termed partially bound configurations. Although partially bound, it is still important to be able to analyse these configurations to ascertain whether they meet certain assumptions about their composition. We are endeavouring to provide such support for the construction of dynamically composed systems through the application of configuration management concepts. One way in which these concepts can be applied in this domain is to explicitly state such assumptions and hence be able to validate partially bound configurations against these assumptions; in this way, inconsistencies can be reported as soon as they arise. This paper\u00a0\u2026", "num_citations": "5\n", "authors": ["632"]}
{"title": "Automating Interoperability for Heterogeneous Software Components\n", "abstract": " This position paper addresses Section 4, Research Issues and Directions, in the Proposed Outline for Handbook of CBSE. Specifically, this paper discusses research issues and directions related to the problem of assembling and integrating software components that have been constructed in different programming languages. This problem is frequently termed the interoperability problem. We claim that the interoperability problem is a fundamental concern in the area of component-based software engineering.Interest in interoperation among software components developed using multiple programming languages is growing rapidly in the software engineering and programming languages community. Reusable software libraries and integration with legacy systems are two common interoperability problems faced by software developers. The expected growth and acceptance of the Internet along with the advent of new programming languages strongly suggest that interoperability will become an even greater issue in the coming years. Although various software engineering tools and programming language constructs supporting interoperation have been proposed and used in the past, these approaches do not meet the demands imposed by today\u2019s rapidly evolving heterogeneous computing environment. They are generally difficult to use and prone to error, often forcing developers to waste valuable time dealing with the complexities of a particular interoperability mechanism.", "num_citations": "4\n", "authors": ["632"]}
{"title": "REACT: A model-based runtime environment for adapting communication systems\n", "abstract": " Trends such as the Internet of Things or edge computing lead to a growing number of networked devices. Hence, it is becoming increasingly important to manage communication systems at runtime. Adding self-adaptive capabilities is one approach to reduce administrative effort and cope with changing execution contexts. Existing frameworks for building self-adaptive software can help to reduce development effort in general. Yet, they are neither tailored towards the use in communication systems nor easily usable without profound knowledge in self-adaptive systems development. In this paper, we propose REACT, a reusable, model-based runtime environment to complement communication systems with adaptive behavior. It addresses the heterogeneity and distribution aspects of networks and reduces development effort. REACT empowers developers of communication systems to add adaptive behavior without\u00a0\u2026", "num_citations": "3\n", "authors": ["632"]}
{"title": "Automated Planning for supporting Knowledge-intensive Processes\n", "abstract": " Knowledge-intensive Processes (KiPs) are processes characterized by high levels of unpredictability and dynamism. Their process structure may not be known before their execution. One way to cope with this uncertainty is to defer decisions regarding the process structure until run time. In this paper, we consider the definition of the process structure as a planning problem. Our approach uses automated planning techniques to generate plans that define process models according to the current context. The generated plan model relies on a metamodel called METAKIP that represents the basic elements of KiPs. Our solution explores Markov Decision Processes (MDP) to generate plan models. This technique allows uncertainty representation by defining state transition probabilities, which gives us more flexibility than traditional approaches. We construct an MDP model and solve it with the help of the PRISM\u00a0\u2026", "num_citations": "3\n", "authors": ["632"]}
{"title": "Modelling Dynamic Configurations to Guide Tool Design\n", "abstract": " {The ability to update a software system as it is being used is increasingly important and manifests itself in systems that must be maintained while executing, in systems where choices about which components comprise a system are deferred until their use, and where systems can be customised. Systems that fit one or more of these characteristics we call Dynamically Composed Systems (DCSs). Although some attention has been given to providing tools to support dynamic updates, and models of such dynamic updates have been constructed, little work as been done in examining this from a configuration management perspective. This paper describes a model of configuration management for dynamically composed systems, based on an existing model of configuration management for statically composed systems. The model includes a dynamic configuration description language, DCDL, and a formalization in terms of many-sorted algebraic specification techniques. The use of this model to design tools to support configuration management for dynamically composed systems is then discussed.}", "num_citations": "2\n", "authors": ["632"]}
{"title": "Introduction to the special section on best papers from SEAMS 2015\n", "abstract": " This special section in the current issue of TAAS contains three papers that were revised and extended from the 10th ACM/IEEE International Symposium on Software Engineering for Self-Managing and Adaptive Systems (SEAMS 2015). The symposium took place in Florence, Italy on May 18\u201319, 2015, and was a colocated event of the 37th International Conference on Software Engineering. Of the 55 full and position papers submitted for review, 11 full papers and five position papers were ultimately accepted. The acceptance rate was therefore 29%, commensurate with previous editions of SEAMS. The objective of SEAMS is to bring together researchers and practitioners from many of the diverse areas of self-adaptation to investigate, discuss, and examine thoroughly the fundamental principles, state of the art, and critical challenges of engineering self-adaptive and self-managing systems. For the first time\u00a0\u2026", "num_citations": "1\n", "authors": ["632"]}