{"title": "Technical debt and the effect of agile software development practices on it-an industry practitioner survey\n", "abstract": " A major reason for the popularity of agile and lean software methods is their capability to function in resource scarce and requirement erratic environments. Both of these characteristics cause accumulation of technical debt, something that is the end result of either intentional or unintentional decisions. The ability of these methods to function with technical debt indicates that they contain components with inherent technical debt management capabilities. This study conducts a survey on industry practitioners to discover what is their level of technical debt knowledge, how does technical debt manifest in their projects and which of the applied components of agile software development -- both processes and practices -- are sensitive to technical debt. This paper contributes to the technical debt discussion by showing differences in assumed and indicated technical debt knowledge. Furthermore, components closest to\u00a0\u2026", "num_citations": "57\n", "authors": ["1324"]}
{"title": "DebtFlag: Technical debt management with a development environment integrated tool\n", "abstract": " In this paper, we introduce the DebtFlag tool for capturing, tracking and resolving technical debt in software projects. DebtFlag integrates into the development environment and provides developers with lightweight documentation tools to capture technical debt and link them to corresponding parts in the implementation. During continued development these links are used to create propagation paths for the documented debt. This allows for an up-to-date and accurate presentation of technical debt to be upheld, which enables developer conducted implementation-level micromanagement as well as higher level technical debt management.", "num_citations": "35\n", "authors": ["1324"]}
{"title": "Top management support in software cost estimation: A study of attitudes and practice in finland\n", "abstract": " Purpose                \u2013 A cost estimate is considered to have a high impact on software project success. Because of this, different methodologies for creating an accurate estimate have been studied over decades. Many methodologies produce accurate results, when used properly. However, software projects still suffer from inaccurate estimates. The disparity may result from organisational hindrances. This paper focuses on top management support (TMS) for software cost estimation (SCE). The purpose of this paper is to identify current practices and attitudes of top management involvement in SCE, and to analyse the relationship between these two and project success.                                        Design/methodology/approach                \u2013 A list of 16 TMS practices for SCE has been developed. A survey was conducted to capture the frequency of use and the experienced importance of support practices. Data has\u00a0\u2026", "num_citations": "16\n", "authors": ["1324"]}
{"title": "Comparing the collaborative and independent viewing of program visualizations\n", "abstract": " In this paper, we report a study on the differences of using a program visualization tool collaboratively or independently. We conducted a study, where students were divided randomly into two groups: the treatment group used a visualization tool called ViLLE in collaboration with another student, while the control group used the tool alone. During the study, we recorded screen captures and students' conversations. Our previous results confirmed that the treatment group outperformed the control group in the post-test in questions related to functions and in total score. Thus, we now annotated and tagged students' actions in answering the exercises, trying to find out an explanation for the difference in learning results. The results show, that the students working in collaboration spent more time answering the difficult exercises than the students working alone, and moreover, spent more time in higher level of\u00a0\u2026", "num_citations": "15\n", "authors": ["1324"]}
{"title": "Breaking the programming language barrier: Using program visualizations to transfer programming knowledge in one programming language to another\n", "abstract": " The transition from one programming language to another is an issue, which usually needs to be addressed in programming curricula, as the learning is typically started with syntactically easier languages. This study explores the possibility to use a short interactive tutorial with visualization exercises to ease the transition from Python to Java. In the experiment, the students first took a pre-test to measure their earlier programming knowledge with Python. After that, they used the tutorial with visualization exercises for 45 minutes. The tutorial and the exercises were designed to underline the syntactical and structural differences between Python and Java. Finally, the students answered to post-test, which contained questions similar to pre-test, but in Java. The results indicate, that the students were able to obtain similar program comprehension skills in Java that they previously had with Python. Moreover, the students\u00a0\u2026", "num_citations": "13\n", "authors": ["1324"]}
{"title": "Towards a diversification framework for operating system protection\n", "abstract": " In order to use resources of a computer, malware has to know the interfaces provided by the operating system. If we make these critical interfaces unique by diversifying the operating system and user applications, a piece of malware can no longer successfully interact with its environment. Diversification can be considered as a computer-specific secret. This paper discusses how this API diversification could be performed. We also study how much work would be needed to diversify the Linux kernel in order to hide the system call interface from malware.", "num_citations": "9\n", "authors": ["1324"]}
{"title": "Investigating the effects of agile practices and processes on technical debt - The viewpoint of the Brazilian software industry\n", "abstract": " The current scenario of software development is characterized by a wide adoption of agile methodologies, which define processes and practices that address a range of problems faced by development teams. However, there is still little information on how these methodologies deal with technical debt (TD). This work presents the results of a replicated survey (originally executed in Finland) whose goal was to investigate which agile practices and processes are sensitive to TD. Despite this replication allows different types of analysis, the focus of this paper will be on the analysis of the effects of the agile practices and processes on TD from the perspective of the Brazilian software industry, where the study was replicated. At total, 62 practitioners from different organizations answered the questionnaire. The results indicated that participants already had a good knowledge about TD, instances of TD reside in the software implementation and are caused due to deficiencies in its architecture, the size of a debt item is proportional to its impact on the project, and, refactoring and iteration have the most positive effect on TD. This replication also contributes to the investigated topic through the accumulation of evidence about the findings, thereby increasing the level of confidence in results.", "num_citations": "8\n", "authors": ["1324"]}
{"title": "Security risk assessment and management as technical debt\n", "abstract": " The endeavor to achieving software security consists of a set of risk-based security engineering processes during software development. In iterative software development, the software design typically evolves as the project matures, and the technical environment may undergo considerable changes. This increases the work load of identifying, assessing and managing the security risk by each iteration, and after every change. Besides security risk, the changes also accumulate technical debt, an allegory for postponed or sub-optimally performed work. To manage the security risk in software development efficiently, and in terms and definitions familiar to software development organizations, the concept of technical debt is extended to contain security debt. To accommodate new technical debt with potential security implications, a security debt management approach is introduced. The selected approach is an\u00a0\u2026", "num_citations": "6\n", "authors": ["1324"]}
{"title": "Software implementation knowledge management with technical debt and network analysis\n", "abstract": " Modern, fast-phased, iterative and incremental software development constantly struggles with limited resources and a plethora of frequently changing requirements. This environment often requires the development projects to intentionally - for example through implementing quick-and-dirty - or unintentionally - for example through misinterpretation of requirements - deviate from the optimal product state. While most of the deviation is caught through practices like customer reviews, the remainder stays hidden in the product. The undocumented remainder is difficult to remove, it expands uncontrollably and it negatively affects development as deviations are unexpectedly encountered and overcome. The term technical debt describes this process of accumulating hidden work. Management of technical debt can be expected to be a major factor in software development efficiency and sustainability and as such it should\u00a0\u2026", "num_citations": "6\n", "authors": ["1324"]}
{"title": "Important features in program visualization\n", "abstract": " Program visualization is a method which can be used to significantly enhance the learning results in introductory programming courses. We have previously conducted a qualitative study among university students about their opinions on usage of a program visualization tool. This time we repeated the study among two instances of high school programming courses. Despite the age and maturity of the students, there were some other differences as well, including the earlier experience of using the tool and the list of features included in the survey. The results show that the students find the tool both motivating and easy to use. Even more importantly, the students felt that using the tool helped them to learn the basic programming concepts. The features found most useful were the flexible controlling of visualizations and the verbal explanations about the executed code lines. Since the results in the university level were\u00a0\u2026", "num_citations": "6\n", "authors": ["1324"]}
{"title": "Internal interface diversification as a security measure in sensor networks\n", "abstract": " More actuator and sensor devices are connected to the Internet of Things (IoT) every day, and the network keeps growing, while software security of the devices is often incomplete. Sensor networks and the IoT in general currently cover a large number of devices with an identical internal interface structure. By diversifying the internal interfaces, the interfaces on each node of the network are made unique, and it is possible to break the software monoculture of easily exploitable identical systems. This paper proposes internal interface diversification as a security measure for sensor networks. We conduct a study on diversifiable internal interfaces in 20 IoT operating systems. We also present two proof-of-concept implementations and perform experiments to gauge the feasibility in the IoT environment. Internal interface diversification has practical limitations, and not all IoT operating systems have that many diversifiable interfaces. However, because of low resource requirements, compatibility with other security measures and wide applicability to several interfaces, we believe internal interface diversification is a promising and effective approach for securing nodes in sensor networks. View Full-Text", "num_citations": "5\n", "authors": ["1324"]}
{"title": "Reusability based program clone detection: case study on large scale healthcare software system\n", "abstract": " A novel process for identifying reusable program clones is described in this work. The process is applied to a very demanding context, a large-scale closed source healthcare software system. As results, the applicability and maturity of the clone detection system are discussed but also the results of the study are summarized. In this, especial care has been taken in order to retain result comparability with other hallmark studies on clone detection.", "num_citations": "5\n", "authors": ["1324"]}
{"title": "Examining technical debt accumulation in software implementations\n", "abstract": " Technical debt management requires means to identify, track, and resolve technical debt in the various software project artifacts. There are several approaches for identifying technical debt from the software implementation, but they all have their shortcomings in maintaining this information. Readily available information is a cornerstone of successful technical debt management integration. As such, this paper presents a two-partite case study that explores the role of dependency propagation in the accumulation of technical debt for software implementations. The first part, targeting a refactorization project in the ViLLE education platform, identifies a clear relation between the propagation and the accumulation in addition to making notions about special propagation characteristics. The second part considers bug reports for the Eclipse IDE, and, thus, provides further verification in observing a similar relationship at a\u00a0\u2026", "num_citations": "5\n", "authors": ["1324"]}
{"title": "The role of dependency propagation in the accumulation of technical debt for software implementations\n", "abstract": " Technical debt management requires means to identify, track, and resolve technical debt in the various software project artifacts. There are several approaches for identifying technical debt from the software implementation but they all have their shortcomings in maintaining this information. This paper presents a case study that explores the role of dependency propagation in the accumulation of technical debt for a software implementation. A clear relation between the two is identified in addition to some differentiating characteristics. We conclude that formalization of this relation can lead to solutions for the maintenance problem. As such, we use this case study to improve the propagation method implemented in our DebtFlag tool.", "num_citations": "4\n", "authors": ["1324"]}
{"title": "Illustrating Software Modifiability--Capturing Cohesion and Coupling in a Force-Optimized Graph\n", "abstract": " Software visualization aims to provide a more human-readable interface for the various software system aspects and characteristics. As majority of the time spent on modifying software is spent on gaining an understanding of an intangible and virtual system, the area of software visualization is widely researched as a solution to this. The paper in question presents a program visualization approach that focuses on illustrating the two software modifiability characteristics of cohesion and coupling. Unlike other approaches, which provide a visual representation for precalculated values, it uses the underlying cohesion and coupling mechanics to derive the actual layout. This allows the user to perceive the entire structure that has resulted to the cohesion and coupling values present in viewed nodes. There are three distinct steps to our approach. 1) Semantic analysis is used to record the static program structure into a\u00a0\u2026", "num_citations": "3\n", "authors": ["1324"]}
{"title": "Co-creative engineering curriculum design\u2014Case East Africa\n", "abstract": " This work-in-progress study reports the first findings from an engineering curriculum design process in an East African context. The design of new programs and teaching practices involves three universities with local faculty designing a new engineering curriculum with external experts involved in the design process. Innovation is something that in addition to societies and industries also the global academia is striving towards, and not only in research but more and more so also in education [1]. The big question, however, is how to achieve this and how to make innovation happen inside the classroom when the faculty needs to push the boundaries of science while at the same time being transformative educators [2]. And all this in a global higher education environment, where well-established institutions are in the cross pressure of neoliberal worldview and the humboldtian ideal of the community of scholars\u00a0\u2026", "num_citations": "2\n", "authors": ["1324"]}
{"title": "Technical Debt in Software Development: Examining Premises and Overcoming Implementation for E\ufb03cient Management\n", "abstract": " Software development is a unique \ufb01eld of engineering: all software constructs retain their modi\ufb01ability \u2014 arguably, at least \u2014 until client release, no single project stakeholder has exhaustive knowledge about the project, and even this portion of the knowledge is generally acquired only at project completion.  These characteristics imply that the \ufb01eld of software development is subject  to  design  decisions  that  are  known  to  be  sub-optimal\u2014either  deliberately emphasizing interests of particular stakeholders or indeliberately harming the project due to lack of exhaustive knowledge.  Technical debt is a concept that accounts for these decisions and their e\ufb00ects.  The concept\u2019s intention is to capture, track, and manage the decisions and their products: the a\ufb00ected software constructs.  Reviewing the previous, it is vital for software development projects to acknowledge  technical  debt  both  as  an  enabler  and  as  a  hindrance.   This thesis looks into facilitating e\ufb03cient technical debt management for varying software development projects.  In the thesis, examination of technical debt\u2019s  role  in  software  development  produces  the  premises  on  to  which  a management implementation approach is introduced.  The thesis begins with a revision of motivations. Basing on prior research in the \ufb01elds of technical debt management and software engineering in general, the \ufb01ve motivations establish the premises for technical debt in software development.  These include notions of subjectivity in technical debt estimation, update frequency demands posed on technical debt information, and technical debt\u2019s polymorphism.  Three research questions are\u00a0\u2026", "num_citations": "2\n", "authors": ["1324"]}
{"title": "Modelling propagation of technical debt\n", "abstract": " Noting the overwhelming speed during software development, and particularly in environments where rapid delivery is the norm, the lack of accumulated technical debt information could result in ineffective management. We introduce technical debt propagation channels in this paper to advance software maintenance research on two accounts: (1) We describe the fundamental components for the channels, allowing identification of distinct channels, and (2) we describe a procedure to identify and abstract technical debt channels in order to produce technical debt propagation models. Our propagation models pursue automation of technical debt information maintenance with program analysis results, and translation of the maintained information between existing-and currently disconnected-technical debt management solutions. We expect the immediate technical debt information to enhance applicability and\u00a0\u2026", "num_citations": "2\n", "authors": ["1324"]}
{"title": "94 ELECTRONIC EXAMS WITH AUTOMATICALLY ASSESSED EXERCISES\n", "abstract": " Electronic exam (or, eExam) is a method of transferring an examination into online environment. The electronic form contains some substantial benefits compared to the traditional exams: scheduling is more flexible, as the students can take the exams when they want to, typing the answers via keyboard makes it easier to write and read the answers, and, presumably, electronic form makes it possible to include question types that are not possible with pen and paper. However, the electronic exams still need to either be manually assessed, or contain only questions which are easy to assess automatically (such as multiple choice questions).ViLLE [1] is an online learning environment featuring different kinds of exercises ranging from surveys to visualizations. All exercise types feature automatic assessment and immediate feedback to students. ViLLE also provides means to build and utilize courses which combine the\u00a0\u2026", "num_citations": "2\n", "authors": ["1324"]}