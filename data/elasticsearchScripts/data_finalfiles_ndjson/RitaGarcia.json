{"title": "Systematic literature review: Self-Regulated Learning strategies using e-learning tools for Computer Science\n", "abstract": " In 1986, Barry Zimmerman and Manuel Martinez-Pons presented a taxonomy containing 14 categories on Self-Regulated Learning (SRL) strategies performed by high school students when studying. Since this study, researchers have used the taxonomy as a framework for their research on students' SRL strategies and behaviours. When the taxonomy was constructed in the mid-1980s, these categories did not consider students\u2019 SRL behaviours while using digital technologies to study. The goals of this systematic literature review are to understand if the original SRL strategies are addressed in modern Computer Science e-learning tools and to determine if tools have emerged that support SRL strategies not captured by the original taxonomy. This review organises the e-learning tools within the SRL categories. It shows that a preponderance of research has been done on certain SRL skills, with limited focus on\u00a0\u2026", "num_citations": "80\n", "authors": ["2179"]}
{"title": "Scaffolding the Design Process Using Parsons Problems\n", "abstract": " The design process for solving a problem requires recollection of previously learned strategies to identify and organise tasks for implementation. With minimal background knowledge in software design, novices might spend less time designing, potentially leading to misunderstandings about the problem's goals and a lower rate of completed tasks. Novices could benefit from explicit support in the design process, supporting them in gaining design experience to develop internal knowledge and skills in identifying and organising tasks. We present preliminary results experimenting with Parsons Problems as a scaffolding tool to provide CS1 students with design guidance. Findings reveal that students who do not complete the activity receive lower assessment grades, but additional analysis is required to realise methods to measure the impact when Parsons Problems are used to support design knowledge and skills.", "num_citations": "2\n", "authors": ["2179"]}
{"title": "Understanding Problems through Assignment Presentation: A Replication Study\n", "abstract": " This study explores how a well-formed programming assignment can assist students in understanding a problem. To determine whether the presentation of a programming assignment might help CS1 students better understand the problem, we perform a comparable replication study using Soloway's Rainfall Problem. This study integrates scaffolding treatments from prior studies using the Rainfall Problem into a theoretical assignment design pattern, to form a new presentation context. A survey was used to gain insight into how students perceived the presentation helped them understand the problem and potentially helped them solve the programming tasks. Results from the study show plan composition and natural language translation a challenge, but students appreciate the additional guidance from the assignment presentation in the form of hints and bullet points formatting to identify tasks. From the results, we\u00a0\u2026", "num_citations": "1\n", "authors": ["2179"]}
{"title": "Instructional Framework for CS1 Question Activities\n", "abstract": " Questioning is a learning activity that can promote the use of critical thinking skills, where thinking processes are required to answer a posed question. In this paper, we map instructional question types to Bloom's Taxonomy--a classification of critical thinking skills required for cognition--to form a framework for educators to construct learning activities through questioning. The preliminary instructional framework is applied to a question activity within a blended CS1 learning environment to support students in better understanding on how to solve a programming assignment. Our results show students meeting the desired Bloom's cognitive level when answering the question activity. Future research opportunities are presented to test the framework for upper-division CS courses and further explore the framework as an intervention for programming assignments.", "num_citations": "1\n", "authors": ["2179"]}
{"title": "Codification Pedagogy for Introductory Courses\n", "abstract": " Codification is a legal term defining the process of ordering rules corresponding to a plan. This term is applicable to Software Development to describe the ordering of program requirements into coding tasks. Codification is a meta-skill taught in advanced Software Engineering courses for large collaborative projects, though novices lack the experience to transfer this skill to small-scale assignments. As a result, novices form their own approach, potentially contributing to poor learning behaviors, poor self-efficacy, and course attrition. My research investigates an approach for introductory courses, enabling novices to plan before they implement a solution. The approach uses Socratic questions and Parsons Problems to relate the student's current knowledge base to the assignment. The hypothesis is that the pedagogy will reduce misconceptions about the assignment and enable students to create an ordered plan\u00a0\u2026", "num_citations": "1\n", "authors": ["2179"]}