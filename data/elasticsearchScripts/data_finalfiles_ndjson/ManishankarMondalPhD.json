{"title": "On the stability of software clones: A genealogy-based empirical study\n", "abstract": " Clones are a matter of great concern to the software engineering community because of their dual but contradictory impact on software maintenance. While there is strong empirical evidence of the harmful impact of clones on maintenance, a number of studies have also identified positive sides of code cloning during maintenance. Recently, to help determine if clones are beneficial or not during software maintenance, software researchers have been conducting studies that measure source code stability (the likelihood that code will be modified) of cloned code compared to non-cloned code. If the presence of clones in program artifacts (files, classes, methods, variables) causes the artifacts to be more frequently changed (ie, cloned code is more unstable than non-cloned code), clones are considered harmful. Unfortunately, existing stability studies have resulted in contradictory results and even now there is no concrete answer to the research question\u201d Is cloned or non-cloned code more stable during software maintenance?\u201d The possible reasons behind the contradictory results of the existing studies are that they were conducted on different sets of subject systems with different experimental setups involving different clone detection tools investigating different stability metrics. Also, there are four major types of clones (Type 1: exact; Type 2: syntactically similar; Type 3: with some added, deleted or modified lines; and, Type 4: semantically similar) and none of these studies compared the instability of different types of clones. Focusing on these issues we perform an empirical study implementing seven methodologies that calculate eight stability\u00a0\u2026", "num_citations": "3\n", "authors": ["991"]}
{"title": "Analyzing clone evolution for identifying the important clones for management\n", "abstract": " Code clones (identical or similar code fragments in a code-base) have dual but contradictory impacts (i.e., both positive and negative impacts) on the evolution and maintenance of a software system. Because of the negative impacts (such as high change-proneness, bug-proneness, and unintentional inconsistencies), software researchers consider code clones to be the number one bad-smell in a code-base. Existing studies on clone management suggest managing code clones through refactoring and tracking. However, a software system's code-base may contain a huge number of code clones, and it is impractical to consider all these clones for refactoring or tracking. In these circumstances, it is essential to identify code clones that can be considered particularly important for refactoring and tracking. However, no existing study has investigated this matter. We conduct our research emphasizing this matter, and perform five studies on identifying important clones by analyzing clone evolution history.   In our first study we detect evolutionary coupling of code clones by automatically investigating clone evolution history from thousands of commits of software systems downloaded from on-line SVN repositories. By analyzing evolutionary coupling of code clones we identify a particular clone change pattern, Similarity Preserving Change Pattern (SPCP), such that code clones that evolve following this pattern should be considered important for refactoring. We call these important clones the SPCP clones. We rank SPCP clones considering their strength of evolutionary coupling. In our second study we further analyze evolutionary coupling of code clones\u00a0\u2026", "num_citations": "1\n", "authors": ["991"]}
{"title": "Real Time Face Recognition Using Polynomial Regression and Sub-region Color Component Distribution\n", "abstract": " An efficient architecture for real time face recognition is presented here using Polynomial Regression for feature edge detection and by determining color-component distribution for feature-regions. Here we determine second order polynomial equation by polynomial regression for the edges of eyelid and chin. Chin does not change in different expressions, the change of eyelid is also rare and these show clear edges in the picture. For determining polynomial equations the coordinate system is very important here. The same curve may have different equations depending on the position of the curve on the graph. We have eliminated this problem. As we derive second-order polynomial equations we have three constants for each curve which we can call A, B and C. We also determine red, green and blue color-distribution values for three regions-eye-region, lipregion and nose-region. For the training values related to the same person these values are averaged. Finally the recognition is performed based on the weighted sum of errors obtained from A, B, C values of the edges and color distribution values of the regions. This method is too much faster and its recognition efficiency is high", "num_citations": "1\n", "authors": ["991"]}