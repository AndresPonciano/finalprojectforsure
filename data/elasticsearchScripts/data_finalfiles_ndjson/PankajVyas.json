{"title": "Eliciting additional safety requirements from use cases using SFTA\n", "abstract": " Use case based approaches for software requirement analysis have been used extensively in software development industry to capture functional and behavioral requirements. But use-case based techniques for requirement analysis has not been found to be much effective and supportive enough for capturing non-functional requirements such as safety requirements. To overcome this problem, a systematic approach for eliciting additional and or missing safety requirements from textual description of use cases by the manual application of a well known software safety analysis (SSA) technique named Software Fault Tree Analysis (SFTA) has been proposed and presented in this paper. SFTA has been derived and applied in software from a similar hardware safety analysis technique named Fault Tree Analysis (FTA). The technique presented in this paper operates with the assumption that textual description of the\u00a0\u2026", "num_citations": "9\n", "authors": ["1493"]}
{"title": "The applications of SFTA and SFMEA approaches during software development process: an analytical review\n", "abstract": " Software fault tree analysis (SFTA) and software failure modes and effects analysis (SFMEA) are two well known recommended approaches for the analysis of software induced hazards in the system and are adapted in the software domain by employing the concepts of standard hardware safety approaches namely fault tree analysis (FTA) and failure modes and effects analysis (FMEA) respectively. Both SFTA and SFMEA approaches, since their inception in the software domain, have been explored, either individually or jointly, by researchers at different stages of software development. This paper presents the critical review of the published work about the applications of both these approaches in three phases, namely requirements analysis, design and implementation/coding phases of software life cycle. After presenting the analytical review, the paper identifies the problems that are currently faced during the\u00a0\u2026", "num_citations": "4\n", "authors": ["1493"]}
{"title": "Operation level safety analysis for object oriented software design using SFMEA\n", "abstract": " Recent trends have indicated the increased use of object oriented technology not only for the design and development of traditional software but also for safety critical software. There has been an ongoing effort for the application of traditional well documented and well tested hardware safety and reliability analysis techniques to software. Software failure modes and effects analysis (SFMEA) is one such technique that has been adopted from its hardware counter part failure modes and effects analysis (FMEA). Despite differences in operational failure modes between hardware and software, the recent research has shown the usefulness of the technique in software development process. This paper aims to: (i) highlight the application of SFMEA in object oriented design process and (ii) use the results of analysis obtained from previous step at implementation phase for improving robustness of the code.", "num_citations": "4\n", "authors": ["1493"]}
{"title": "Hazard analysis of Unified Modelling Language sequence and state charts using software fault tree analysis\n", "abstract": " Software fault tree analysis (SFTA) is a well known software safety analysis technique for identifying those software related erroneous events which can force the system into a hazardous state. Over the years, the effective strengths of SFTA approach have been demonstrated by applying it practically at every phase of software development such as coding, design and requirement analysis. The focus of SFTA application research efforts at the software design phase is the automatic or semi-automatic construction of a software fault tree for the selected hazardous state of the system directly from the given Unified Modelling Language (UML) models such as sequence and state charts. But programmed application of SFTA has been successfully carried out so far only in the coding phase whereas at other phases especially at design and requirement analysis its application remains a manual process so far. This paper\u00a0\u2026", "num_citations": "1\n", "authors": ["1493"]}