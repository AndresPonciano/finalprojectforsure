{"title": "A study on the energy consumption of android app development approaches\n", "abstract": " Mobile devices have become ubiquitous in the recent years, but the complaints about energy consumption are almost universal. On Android, the developer can choose among several different approaches to develop an app. In this paper, we investigate the impact of some of the most popular development approaches on the energy consumption of Android apps. Our study uses a testbed of 33 different benchmarks and 3 applications on 5 different devices to compare the energy efficiency and performance of the most commonly used approaches to develop apps on Android: Java, JavaScript, and C/C++ (through the NDK tools). In our experiments, Javascript was more energy-efficient in 75% of all benchmarks, while their Java counterparts consume up to 36.27x more energy (median of 1.97x). On the other hand, both Java and C++ outperformed JavaScript in most of the benchmarks. Based on these results, four\u00a0\u2026", "num_citations": "60\n", "authors": ["1306"]}
{"title": "Native or web? a preliminary study on the energy consumption of android development models\n", "abstract": " Energy consumption has become an increasingly important topic in software development, especially due to the ubiquity of mobile devices, and the choice of programming language can directly impact battery life. This paper presents a study on the issue of energy efficiency on the Android platform, comparing the performance and energy consumption of 33 different benchmarks in the two main programming languages employed in Android development: Java and JavaScript. Preliminary results show that Java applications may consume up to 36.27x more energy, with a median of 2.28x, than their JavaScript counterparts, in benchmarks that are mostly CPU-intensive. In some scenarios, though, Java benchmarks exhibited better energy efficiency, with JavaScript consuming up to 2.27x more energy. Based on these results, two Java applications were re-engineered, and through the insertion of JavaScript functions\u00a0\u2026", "num_citations": "14\n", "authors": ["1306"]}
{"title": "Reactive-based complex event processing: An overview and energy consumption analysis of cep. js\n", "abstract": " Complex event processing (CEP) and Reactive Languages (RLs) are examples of solutions for the so-called reactive applications. Such applications are designed to detect and react to changes or event occurrences as they happen in a timely fashion. Both CEP and RLs have been developed by different communities, yet some researchers agree that they share certain aspects and could perhaps be integrated. With that in mind, we developed a JavaScript library called CEP. js that leverages the well-known Reactive Extensions for JavaScript (RxJS) to offer not only general-purpose stream operations but also CEP ones. The fact of being a JavaScript library allows CEP. js to be used in Web applications and easily embedded into mobile applications. Therefore, it opens many possibilities for CEP in mobile client applications. It also raises the concern of energy efficiency since CEP applications commonly have to\u00a0\u2026", "num_citations": "2\n", "authors": ["1306"]}
{"title": "Small Changes, Big Impacts: Leveraging Diversity to Improve Energy Efficiency\n", "abstract": " In this chapter, we advocate that developers should leverage software diversity to make software systems more energy efficient. Our main goal is to show that non-specialists can build software that consumes less energy by alternating at development time between readily available, diversely designed pieces of software implemented by third parties. By revisiting the main findings of research work we conducted in the past few years, we noticed that they share a common observation: small changes can make a big difference in terms of energy consumption. These changes can usually be implemented by very simple modifications, sometimes amounting to a single line of code. Based on experimental results, one small change that could make a big difference is to replace most of the uses of a Hashtable class with uses of the ConcurrentHashMap class. In most of the cases, it was only necessary to modify the\u00a0\u2026", "num_citations": "1\n", "authors": ["1306"]}