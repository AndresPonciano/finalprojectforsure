{"title": "Coordination in co-located agile software development projects\n", "abstract": " Agile software development provides a way to organise the complex task of multi-participant software development while accommodating constant project change. Agile software development is well accepted in the practitioner community but there is little understanding of how such projects achieve effective coordination, which is known to be critical in successful software projects. A theoretical model of coordination in the agile software development context is presented based on empirical data from three cases of co-located agile software development. Many practices in these projects act as coordination mechanisms, which together form a coordination strategy. Coordination strategy in this context has three components: synchronisation, structure, and boundary spanning. Coordination effectiveness has two components: implicit and explicit. The theoretical model of coordination in agile software development\u00a0\u2026", "num_citations": "203\n", "authors": ["2241"]}
{"title": "The impact of organizational culture on agile method use\n", "abstract": " Agile method proponents believe that organizational culture has an effect on the extent to which an agile method is used. Research into the relationship between organizational culture and information systems development methodology deployment has been explored by others using the Competing Values Framework (CVF). However this relationship has not been explored with respect to the agile development methodologies. Based on a multi-case study of nine projects we show that specific organizational culture factors correlate with effective use of an agile method. Our results contribute to the literature on organizational culture and system development methodology use.", "num_citations": "149\n", "authors": ["2241"]}
{"title": "A dependency taxonomy for agile software development projects\n", "abstract": " Agile software development is designed to achieve collaborative software development. A supporting pillar of collaboration is effective coordination, which is necessary to manage dependencies in projects. Understanding the dependencies arising in agile software development projects can help practitioners choose appropriate coordinative practices from the large number of practices provided by the various agile methods. To achieve this understanding, this article analyses dependencies in three typical cases of co-located agile software development and presents the dependencies as a taxonomy with decision rules for allocating dependencies into categories. Findings show that knowledge, process, and resource dependencies are present, with knowledge dependencies predominant. In addition, there are agile practices with a coordinative function that address multiple dependencies in these agile\u00a0\u2026", "num_citations": "64\n", "authors": ["2241"]}
{"title": "The agile methods: an analytical comparison of five agile methods and an investigation of their target environment\n", "abstract": " This study defines the systems development methodologies named agile methods and investigates the environmental conditions where agile methods are most suitable.", "num_citations": "52\n", "authors": ["2241"]}
{"title": "Agile methods: a comparative analysis\n", "abstract": " The agile methods are systems development methodologies currently used in the software development industry both internationally and in New Zealand. This article provides an overview of the agile methods, including the key publication of each method, the major influences on the agile methods, and describes comparative studies where analysis and comparison of methodologies has been carried out. Then a comparative study is described which was carried out on five agile methods in order to address the question \u2018what is an agile method\u2019? A comparative analytical framework suitable for this purpose is described along with the results of applying the framework to five agile methods: DSDM, XP, Scrum, ASD, and Crystal Methods. The results provide an analysis of the properties common to agile methods, the differences between the methods, the unique properties peculiar to agile methods, and provide an understanding of appropriate method combinations.", "num_citations": "42\n", "authors": ["2241"]}
{"title": "A taxonomy of dependencies in agile software development\n", "abstract": " Dependencies in a software project can contribute to unsatisfactory progress if they constrain or block the flow of work. Various studies highlight the importance of dependencies in the organisation of work; however dependencies in agile software development projects have not previously been a research focus. Drawing on three case studies of agile software projects, and the IS literature, this paper develops an initial taxonomy of agile software project dependencies. Three distinct categories of dependency are found: task, resource, and knowledge dependencies. This paper contributes to theory by providing a taxonomy of dependency types occurring in the area of agile software development. Practitioners can use this taxonomy as sensitising device to ensure they consider dependencies they might face that could hinder their projects, enabling them to take appropriate and timely mitigating action", "num_citations": "32\n", "authors": ["2241"]}
{"title": "Coordination Effectiveness In An Agile Software Development Context\n", "abstract": " Effective coordination is an important factor in successful software projects that has not been fully explored in the context of agile software development. Agile software development projects eschew many traditional practices for achieving coordination leaving a gap in our understanding of exactly how such projects are coordinated and if this coordination is effective. However, before investigating coordination behaviours provided in agile software development, and how effective they are, it is necessary to have an understanding of the concept of \u201ecoordination effectiveness\u201f. This paper defines \u201ecoordination effectiveness\u201f based on existing coordination research and case study interview data drawn from experts in the field of agile and non-agile software development. From this, a definition of coordination effectiveness is developed. Such a clearly defined concept should prove useful for future research when assessing coordination behaviours in agile software development projects and for those investigating other types of project and other classes of system development methodology.", "num_citations": "26\n", "authors": ["2241"]}
{"title": "Enabling digitization by implementing Lean IT: lessons learned\n", "abstract": " PurposeWith the rise of digitization, IT organizations are challenged to provide efficient service delivery and offer innovative digital solutions while maintaining a constant resource capacity. To address this challenge, some IT organizations have adopted Lean Management (LM). Although LM is a standard production mode in manufacturing, it is less familiar to IT organizations. The purpose of this paper is to identify 12 lessons learned from companies who implemented LM in their IT organization (Lean IT) to free up their IT resource capacity from existing day-to-day operations so they could use it to enable their digitization strategy.", "num_citations": "19\n", "authors": ["2241"]}
{"title": "Leadership in software development: Comparing perceptions of agile and traditional project managers\n", "abstract": " Information systems development has always been a focal point of IS research. The most widely understood traditional methods for developing information systems are based on the \u201cwaterfall\u201d life cycle model. Recently, agile methods have drawn increasing attention from IS practitioners and researchers worldwide, as a response to the shortcomings of the traditional methods. However, the impact of agile methods on project management is still not fully understood as empirical studies are scarce. This study uses a full range leadership model as a theoretical lens to analyze project managers\u2019 perceptions of appropriate leadership styles when leading agile vs. traditional software development projects. The findings show that project managers perceive a need for more transformational leadership to achieve success in agile projects as compared to traditional projects.", "num_citations": "19\n", "authors": ["2241"]}
{"title": "Methodology in software development capstone projects\n", "abstract": " Capstone projects which provide the opportunity for student teams to experience \u2018real-world\u2019software development form part of the final semester of study in many computing degrees. This paper describes a number of development methodologies that are currently used both in industry and software development capstone projects. Such projects are carried out under a unique set of constraints due to their nature as instances of experiential learning in an educational setting. These constraints are discussed and then a number of methodologies are described along with a discussion of the suitability of the methodology for capstone projects. Issues that must be addressed by instructors are considered. Finally recommendations are made and a plan for a study into capstone development methodologies is described. The goals of this paper are to provide an overview of current methodologies available for software development capstone projects, to clarify the benefits and problems encountered when using these methodologies in capstone projects, and to indicate suitable resources for those involved in these projects.", "num_citations": "11\n", "authors": ["2241"]}
{"title": "Applying Adapted Big Five Teamwork Theory to Agile Software Development\n", "abstract": " Teamwork is a central tenet of agile software development and various teamwork theories partially explain teamwork in that context. Big Five teamwork theory is one of the most influential teamwork theories, but prior research shows that the team leadership concept in this theory it is not applicable to agile software development. This paper applies an adapted form of Big Five teamwork theory to cases of agile software development. Three independent cases were drawn from a single organisation. This ensured a measure of control over contextual factors affecting the teamwork. The findings show that the adapted form of Big Five teamwork theory, including a shared team leadership concept, is fully applicable to some forms of agile software development, but not all. For practitioners, insights as to which agile practices support teamwork are provided.", "num_citations": "9\n", "authors": ["2241"]}
{"title": "A Coordination Perspective on Agile Software Development\n", "abstract": " Achieving success in software development projects is a perennial challenge, and agile software development methods emerged to tackle this challenge. Agile software development provides a way to organise complex multi-participant software development projects while achieving fast delivery of quality software, meeting customer requirements, and coping effectively with project change. There is little understanding, however, of how such projects achieve effective coordination, which is a critical factor in successful software projects. Based on evidence from four cases, this chapter presents a theory explaining coordination in agile software projects. This theory defines the concepts of coordination strategy and coordination effectiveness and propositions explaining their relationship. This theory contributes to coordination literature by presenting clearly delineated concepts and their relationships in the form of a\u00a0\u2026", "num_citations": "9\n", "authors": ["2241"]}
{"title": "A Theory of Coordination in Agile Software Development Projects\n", "abstract": " Agile software development offers a deceptively simple means to organise complex multi-participant software development while achieving fast delivery of quality software, meeting customer requirements, and coping effectively with project change. There is little understanding, however, of how agile software development projects achieve effective coordination, a critical factor in successful software projects. Agile software development provides a unique set of practices for organising the work of software projects, and these practices seem to achieve effective project coordination. Therefore, this thesis takes a coordination perspective to explore how agile software projects work, and why they are effective. The outcome of this research is a theory of coordination in co-located agile software development projects. To build a coordination theory, evidence was drawn from a multi-case study following the positivist tradition in information systems. Three cases of agile software development contributed to the theory, along with one additional non-agile project that contributed contrasting evidence. The findings show that agile software development practices form a coordination strategy addressing three broad categories of dependency: knowledge dependencies, task dependencies, and resource dependencies. Most coordination is for managing requirement, expertise, historical, and task allocation dependencies; all forms of knowledge dependency. Also present are task dependencies, which include activity or business process dependencies, and resource dependencies, which include technical or entity dependencies. The theory of coordination\u00a0\u2026", "num_citations": "8\n", "authors": ["2241"]}
{"title": "Investigating the Target Environment for Agile Methods\n", "abstract": " The agile methods were investigated to determine the factors making up their target environment. A theoretical model of the target environment for agile methods was developed and then tested using a multi-case study. Data from nine software development projects, both agile and non-agile, was gathered from project leaders. Then a cross-case analysis of each factor in the theoretical model explored the relationship between each of the environmental factors and the extent of agile method usage. This led to a refined model of the target environment. The empirical data showed that specific environmental factors correlate with effective use of an agile method. We also report that methods are tailored for use, and that, although agile methods are distinct from ad hoc development, the extent of agile method use must be measured before conclusions from agile method studies can be considered valid.", "num_citations": "8\n", "authors": ["2241"]}
{"title": "A proposal for using design science in small-scale postgraduate research projects in information technology\n", "abstract": " Design science is a research paradigm where the development and evaluation of an artefact is a key contribution. Design science is used in many domains and this paper draws on those domains to formulate a generic structure for design science research suitable for small-scale postgraduate information technology research projects. The paper includes guidelines for writing proposals and a generic research report structure. The paper presents ethical issues to consider in design science research and contributes guidelines for assessment.", "num_citations": "6\n", "authors": ["2241"]}
{"title": "Lean management in IT organizations: A ranking-type Delphi study of implementation success factors\n", "abstract": " Lean management (LM) is well established in manufacturing organizations, and LM adoption in service organizations has recently increased. However, we lack research that focuses on the success of lean management implementations in IT organizations (lean IT). This paper contributes to knowledge of the success factors of lean IT implementation and the relative importance of each factor based on the insights of field experts. The experts identified, agreed on, and ranked 12 implementation success factors for lean IT in a Delphi study using the best/worst scaling technique. The most important factors were leadership involvement, change culture and work ethic, employee involvement, and performance management. Factors of intermediate importance were implementation facilitation, training and education, clear vision and direction, long-term focus, communication, and a holistic approach. Least important factors\u00a0\u2026", "num_citations": "4\n", "authors": ["2241"]}
{"title": "Extending the dependency taxonomy of agile software development\n", "abstract": " Systems and software development is a collaborative activity and agile software development epitomises collaboration by formalising how teams and their customers work together to develop a software product. Collaboration is achieved, in part, using mechanisms for coordinating interdependent work. Coordination is defined as the managing of dependencies and this study explores the nature of dependencies in software development projects. Firstly, this study extends an existing taxonomy of dependencies based on evidence from agile projects by showing that three agile and one non-agile project show the same pattern of dependencies. Secondly, this study finds that knowledge dependencies are the most frequently occurring dependencies in these small co-located software projects. The key contribution of this research is a better understanding of the dependencies in software development projects\u00a0\u2026", "num_citations": "3\n", "authors": ["2241"]}
{"title": "A theory of coordination: from propositions to hypotheses in agile software development\n", "abstract": " Coordination is crucial in agile software development projects and a Theory of Coordination in co-located agile software development projects explains coordination in this context. This theory has propositions based on case study research. To improve the generalisability of theory built from case studies, researchers often transition to a theory testing phase involving a large-scale field study using the survey method. Prior to a large-scale field study, the propositions generated during theory building must be converted to testable hypotheses. There is little guidance explaining the complexity of this transition process and the challenges involved. Therefore, this paper explains the operationalisation process of transitioning from research propositions to research hypotheses and illustrates the process using the Theory of Coordination. The paper offers six practical guidelines, identifies seven challenges encountered, and potential solutions for each challenge. This paper contributes to agile software development and theory testing research offering seven recommendations for research practice.", "num_citations": "2\n", "authors": ["2241"]}
{"title": "Characterising the Agile Methods.\n", "abstract": " The agile methods are systems development methodologies currently in use in the software development industry. This paper characterises the agile methods to provide information for academics studying agile methods, practitioners planning to use an agile method, and teacher who need to understand agile methods in order to impart this information to the next generation of software developers. This paper presents an investigation of five agile methods in order to address the question \u2018what is an agile method?\u2019A comparative analytical framework suitable for investigating individual agile methods is described along with the results of its application to five agile methods: DSDM, XP, Scrum, ASD, and Crystal Methods. Application of the framework provides information on the properties common to agile methods, the differences between the methods, the unique properties of agile methods, and provides an\u00a0\u2026", "num_citations": "2\n", "authors": ["2241"]}
{"title": "Collaborating in the Fog: A Rich Description of Agile Software Development\n", "abstract": " Collaborative agile software development is inexorably replacing traditional command-and-control project arrangements. To gain a better understanding of collaboration in this context, empirical data was collected from a single co-located agile software development project. Aspects of collaboration in that project are described in a rich description. Collaboration is achieved with an assemblage of collaborative activities, activity sequencing, inter and intra-group interactions, shared artefacts, and other practices. This case description is a first step in informing a theory of collaboration that has potential to contribute to collaboration research and collaboration tool design.", "num_citations": "1\n", "authors": ["2241"]}
{"title": "Measuring Coordination in Agile Software Development\n", "abstract": " Coordination has long been recognized as contributing to successful IT projects. Agile software development provides many practices for achieving project coordination in small co-located projects. Given the importance of coordination to successful software development projects and the increasing popularity of agile software development, investigating coordination in this context is timely and potentially useful. This paper takes an existing theory of coordination in co-located agile software development projects developed from case study research and proposes a field test of that theory. The question addressed is what is the effect of an agile coordination strategy on coordination effectiveness in co-located software development projects? This paper describes the initial theory of coordination and a research design for field-testing that theory.", "num_citations": "1\n", "authors": ["2241"]}