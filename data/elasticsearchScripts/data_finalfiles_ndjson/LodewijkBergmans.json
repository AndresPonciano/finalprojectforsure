{"title": "Composing concurrent objects.\n", "abstract": " Adopting the object-oriented paradigm for the development of large and complex software systems offers several advantages, of which increased extensibility and reusability are the most prominent ones. The object-oriented model is also quite suitable for modelling concurrent systems. However, it appears that extensibility and reusability of concurrent applications is far from trivial. In addition, very little attention has been paid by the conventional object-oriented development methodologies to the analysis and design of synchronisation constraints for concurrent objects.To address these problems, in this thesis the framework of composition-filters, an extension to the object-oriented model, is adopted. An analysis is presented of the problems involved in reusing and extending concurrent objects, in particular the so-called inheritance anomalies. Based on this analysis, a set of criteria for effective extensible concurrent objectoriented programming languages is formulated.", "num_citations": "193\n", "authors": ["1211"]}
{"title": "The composition-filters object model\n", "abstract": " In this paper the computation model of the composition-filters object model is explained. The composition-filters model aims at providing a basis for the solution of a range of problems in the construction of very large and complex applications. It focuses mainly on modelling problems. The paper will address the basic mechanisms and how they can be applied to solve various modelling problems.", "num_citations": "51\n", "authors": ["1211"]}
{"title": "Towards detection of semantic conflicts between crosscutting concerns\n", "abstract": " Aspect-oriented programming introduces new composition operators that offer enhanced capabilities for constructing well-modularized programs. One of its cornerstones is the introduction of'reverse'dependency relations; instead of explicitly'importing'composed behavior (as is eg the case with inheritance), the composed behavior is' exported'. These reverse composition relations are more error-prone than conventional composition relations, in particular when multiple composition relations affect the same part of the program.This paper should be read as a true \u2018position statement\u2019: we describe our current position and envisioned approach towards addressing this problem. The paper is hence limited to a global explanation of the approach, with little technical detail and no concrete results to be shown.", "num_citations": "45\n", "authors": ["1211"]}
{"title": "Aspect-oriented programming\n", "abstract": " Aspect-oriented programming is a promising idea that can improve the quality of software by reduce the problem of code tangling and improving the separation of concerns. At ECOOP\u201997, the first AOP workshop brought together a number of researchers interested in aspectorientation. At ECOOP\u201998, during the second AOP workshop the participants reported on progress in some research topics and raised more issues that were further discussed. This year, the ideas and concepts of AOP have been spread and adopted more widely, and, accordingly, the workshop received many submissions covering areas from design and application of aspects to design and implementation of aspect languages.", "num_citations": "42\n", "authors": ["1211"]}
{"title": "Compose*: a language-and platform-independent aspect compiler for composition filters\n", "abstract": " This paper presents Compose*, a compilation and execution framework for the Composition Filters model. The Composition Filters model is designed to improve the composability of object-based programs. It is claimed that this approach is largely language-independent, and has previously been applied to languages such as Smalltalk, Java and C++. However, building a new Composition Filters compiler for each target language results in the duplication of compilation technology. Therefore, one of the aims of Compose* is to provide a language and platform independent compiler framework for the Composition Filters model. This paper provides the design rationale behind a tool architecture that supports this language and platform independence. It explains the use of language independent abstractions of the base program structure and how to include existing tools, such as compilers, to interface with the target language. The language and platform independence of Compose* has been verified by applying the compiler framework to multiple languages of the .NET platform, the Java language and platform and the C language.", "num_citations": "34\n", "authors": ["1211"]}
{"title": "Using a concept-based approach to aspect-oriented software design\n", "abstract": " Aspect-oriented programming (AOP) has received considerable interest, in particular as an extension of object-oriented programming. However, current object-oriented software design techniques, such as UML, are not well suited to cope with aspect orientation. In this paper we discuss a design approach, called CoCompose, which supports aspect orientation and software evolution. The CoCompose design language adopts a generic concept construct for describing software systems. Design-level relationships between concepts can be expressed by applying the parameterised feature construct. Complete CoCompose models can be translated into executable programs using an automatic translation process.", "num_citations": "21\n", "authors": ["1211"]}
{"title": "Workshop on Aspects and Dimensions of Concern: Requirements on, and Challenge Problems For, Advanced Separation Of Concerns\n", "abstract": " This document describes the results of the two-day Workshop on Aspects and Dimensions of Concern at ECOOP 2000. The workshop produced the beginnings of a set of goals, requirements, and issues to be addressed by approaches to advanced separation of concerns. These goals and issues are encapsulated, in part, in a set of challenge problems that are intended to be solved by providers of advanced separation of concerns technologies. The challenge problems and requirements begin to define the boundaries of this problem domain and solution space, and they will help provide a basis for evaluating and comparing different solutions and solution approaches.", "num_citations": "20\n", "authors": ["1211"]}
{"title": "An analysis of aspect composition problems\n", "abstract": " The composition of multiple software units does not always yield the desired results. In particular, aspect-oriented composition mechanisms introduce new kinds of composition problems. These are caused by different characteristics as compared to object-oriented composition, such as inverse dependencies. The aim of this paper is to contribute to the understanding of aspect-oriented composition problems, and eventually composition problems in a more general context. To this extent we propose and illustrate a systematic approach to analyze composition problems in a precise and concrete manner. In this approach we represent aspectbased composition mechanisms as transformation rules on program graphs. We explicitly model and show where composition problems occur, in a way that can easily be fully automated. In this paper we focus on structural superimposition (cf. intertype declarations) to illustrate our approach; this results in the identification of three categories of causes of composition problems.", "num_citations": "15\n", "authors": ["1211"]}
{"title": "Advanced separation of concerns\n", "abstract": " This document describes the results of the two-day workshop on Advanced Separation of Concerns at ECOOP 2001. The workshop combined presentations with tigthly focused work in small groups on these predefined topics: requirements and challenges for ASoC technologies, conventional solutions for ASoC problems, feature interaction, design support for ASoC and design decisions for ASoC models.", "num_citations": "14\n", "authors": ["1211"]}
{"title": "Composability: Why, what, and how\n", "abstract": " The need for composable models of computation has been recognized since long. For many years, the'conventional'object-oriented model has been considered a suitable abstraction for constructing composable software modules. However, as the model was applied to more and more domains, numerous problems in extending, reusing and composing objects appeared. We illustrate this point with two examples.Example:'arbitrary inheritance'", "num_citations": "13\n", "authors": ["1211"]}
{"title": "Towards modular resource-aware applications\n", "abstract": " Resource optimization is an increasingly important requirement in the design and implementation of software systems. It is applied to improve both environmental sustainability and usability of resource-constrained devices. This paper claims that to achieve more modular resource-aware applications, the resource utilization of components must explicitly be modeled. Due to shortcomings of existing modeling languages, we propose a notation for the resource consumption of components and we illustrate the suitability of this notation by means of two real-world examples. We observe that explicitly modeling resource consumption has as result that resource consumption information is scattered across and tangled with the functional services of components.", "num_citations": "8\n", "authors": ["1211"]}
{"title": "Towards Semantic Composition in Aspect Oriented Programming\n", "abstract": " Towards Semantic Composition in Aspect Oriented Programming \u2014 University of Twente Research Information Skip to main navigation Skip to search Skip to main content University of Twente Research Information Logo Home Profiles Research Units Projects Research output Datasets Activities Prizes Press / Media Search by expertise, name or affiliation Towards Semantic Composition in Aspect Oriented Programming I. Nagy, Lodewijk Bergmans Research output: Chapter in Book/Report/Conference proceeding \u203a Conference contribution \u203a Academic \u203a peer-review Overview Original language Undefined Title of host publication 1st european interactive workshop on aspects in software Pages - Publication status Published - 2004 Keywords METIS-220520 Cite this APA Author BIBTEX Harvard Standard RIS Vancouver Nagy, I., & Bergmans, L. (2004). Towards Semantic Composition in Aspect Oriented Programming. \u2026", "num_citations": "8\n", "authors": ["1211"]}
{"title": "A case for custom, composable composition operators\n", "abstract": " Programming languages typically support a fixed set of composition operators, with fixed semantics. This may impose limits on software designers, in case a desired operator or semantics are not supported by a language, resulting in suboptimal quality characteristics of the designed software system. We demonstrate this using the well-known State design pattern, and propose the use of a composition infrastructure that allows the designer to define custom, composable composition operators. We demonstrate how this approach improves several quality factors of the State design pattern, such as reusability and modularity, while taking a reasonable amount of effort to define the necessary pattern-related code.", "num_citations": "7\n", "authors": ["1211"]}
{"title": "Separating and managing dependent concerns\n", "abstract": " Separating and Managing Dependent Concerns (2005) | www.narcis.nl KNAW KNAW Narcis Back to search results University of Twente Publication Separating and Managing Dependent Concerns (2005) Pagina-navigatie: Main Save publication Save as MODS Export to Mendeley Save as EndNote Export to RefWorks Title Separating and Managing Dependent Concerns Published in LATE: Linking Aspect Technology and Evolution Workshop Author G\u00fclesir, G.; Bergmans, Lodewijk; Durr, PEA; Nagy, I. Date issued 2005 Access Restricted Access Reference(s) METIS-228606 Language und Type Conference Paper Publication https://research.utwente.nl/en/publications/separating-and-m... OpenURL Search this publication in (your) library Persistent Identifier urn:nbn:nl:ui:28-0c69b44f-314d-411a-9887-1a2c0a9d30fa Metadata XML Source University of Twente Go to Website Navigation: Home about narcis login \u2026", "num_citations": "6\n", "authors": ["1211"]}
{"title": "Aspects, dependencies, and interactions\n", "abstract": " For Aspect-Oriented Software Development (AOSD) the topic of Aspects, Dependencies and Interactions is of high importance across the whole range of development activities \u2013 from requirements engineering through to language design. Aspect interactions must be adequately addressed all across the software lifecycle if AOSD is to succeed as a paradigm. Thus, this topic must be tackled by the AOSD community as a whole. This first workshop, initiated by AOSD-Europe project, aimed to establish a dedicated forum for discussion of this vital topic and to attract both researchers and practitioners currently engaged with related issues. The workshop has succeeded in initiating a broad community-wide discussion of this topic and has provided an initial overview of perspectives on the state of the art as well as of outstanding issues in this area.", "num_citations": "4\n", "authors": ["1211"]}
{"title": "Composability Issues in Object Orientation: CIOO'96 Workshop Report\n", "abstract": " Composability Issues in Object Orientation: CIOO '96 Workshop Report (1996) | www.narcis.nl KNAW KNAW Narcis Back to search results University of Twente Publication Composability Issues in Object Orientation: CIOO '96 Workshop Report (1996) Pagina-navigatie: Main Save publication Save as MODS Export to Mendeley Save as EndNote Export to RefWorks Title Composability Issues in Object Orientation: CIOO '96 Workshop Report Published in Special Issues in Object-Oriented Programming, 55 - 62 Author Bergmans, Lodewijk; Cointe, P. Date issued 1996 Access Restricted Access Reference(s) METIS-118870 Language und Type Book Part Publisher DPunkt Publication https://research.utwente.nl/en/publications/composability-is... OpenURL Search this publication in (your) library ISBN 3-920993-67-5 Persistent Identifier urn:nbn:nl:ui:28-be57a2c6-7a4c-4534-8510-e4cb37c94f31 Metadata XML Source \u2026", "num_citations": "3\n", "authors": ["1211"]}
{"title": "Reuse of continuation-based control-flow abstractions\n", "abstract": " It is commonly agreed that decomposing a software design according to the structure of the problem domain makes it easier to maintain and manage its complexity (eg [9]). To retain the resulting decomposition in the implementation, a programming language is needed that supports composition mechanisms that match the compositions in the problem domain. However, current programming languages only offer a small, fixed set of composition mechanisms. This leads to compromised implementations that either do not follow the decomposition from the design, or are cluttered with additional glue code. In this paper, we discuss the composition of control flow and investigate the hypothesis that continuations may be a suitable atomic core principle for offering a wide range of control-flow composition mechanisms in a form that does not compromise the structure and maintainability of the application. We present four\u00a0\u2026", "num_citations": "2\n", "authors": ["1211"]}
{"title": "The keyword revolution: promoting language constructs for data access to first class citizens\n", "abstract": " An ongoing trend is to develop new mechanisms for composing software modules that resemble the relations between corresponding problem-domain entities and thus enable a natural decomposition of software for an increasing number of problem domains. However, we have observed that today's programming languages hard-wire a fixed set of composition mechanisms, usually in terms of keywords. To overcome this limitation, we have proposed the Co-op approach enabling developers to implement an open-ended number of composition mechanisms as first-class citizens. Extending our previous prototype which focused on the composition of behavior, this paper reports on our prototype Co-op/II which facilitates implementing composition mechanisms for data access. We show that our approach is sufficient to realize several styles, eg, of sharing data between sub classes, of controlling visibility, and of\u00a0\u2026", "num_citations": "2\n", "authors": ["1211"]}
{"title": "An implementation mechanism for tailorable exceptional flow\n", "abstract": " Decomposing software according to the structure of the problem domain makes it easier to manage its complexity. Such a decomposition requires a programming language that supports compositions matching those in the problem domain. However, current programming languages only offer a restricted set of control-flow related composition mechanisms, such as method invocation and exception handling. This limits developers in choosing the desired decomposition. Previously, we showed that continuations are suitable for implementing various control-flow compositions. However, composing and refining these implementations requires new language features. In this paper, we outline requirements for control-flow composition and show how exception handling can be implemented using continuations, scopes and bindings.", "num_citations": "1\n", "authors": ["1211"]}
{"title": "Object-Oriented Development: Problems and Solutions\n", "abstract": " Object-Oriented Development: Problems and Solutions (1992) | www.narcis.nl KNAW KNAW Narcis Back to search results University of Twente Publication Object-Oriented Development: Problems and Solutions (1992) Pagina-navigatie: Main Save publication Save as MODS Export to Mendeley Save as EndNote Export to RefWorks Title Object-Oriented Development: Problems and Solutions Published in Object-Oriented Zin and Onzin Author Bergmans, Lodewijk Date issued 1992 Access Restricted Access Reference(s) METIS-118985 Language und Type Book Part Publisher ASI Publication https://research.utwente.nl/en/publications/objectoriented-d... OpenURL Search this publication in (your) library ISBN 90-72591-06-02 Persistent Identifier urn:nbn:nl:ui:28-d898aaaa-a8fa-4026-a74d-80558af969df Metadata XML Source University of Twente Go to Website Navigation: Home about narcis login Nederlands \u2026", "num_citations": "1\n", "authors": ["1211"]}