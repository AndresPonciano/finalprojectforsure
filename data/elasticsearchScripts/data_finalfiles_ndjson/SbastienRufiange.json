{"title": "DiffAni: Visualizing dynamic graphs with a hybrid of difference maps and animation\n", "abstract": " Visualization of dynamically changing networks (graphs) is a significant challenge for researchers. Previous work has experimentally compared animation, small multiples, and other techniques, and found trade-offs between these. One potential way to avoid such trade-offs is to combine previous techniques in a hybrid visualization. We present two taxonomies of visualizations of dynamic graphs: one of non-hybrid techniques, and one of hybrid techniques. We also describe a prototype, called DiffAni, that allows a graph to be visualized as a sequence of three kinds of tiles: diff tiles that show difference maps over some time interval, animation tiles that show the evolution of the graph over some time interval, and small multiple tiles that show the graph state at an individual time slice. This sequence of tiles is ordered by time and covers all time slices in the data. An experimental evaluation of DiffAni shows that our\u00a0\u2026", "num_citations": "96\n", "authors": ["948"]}
{"title": "The Impact of Interactivity on Comprehending 2D and 3D Visualizations of Movement Data\n", "abstract": " GPS, RFID, and other technologies have made it increasingly common to track the positions of people and objects over time as they move through two-dimensional spaces. Visualizing such spatio-temporal movement data is challenging because each person or object involves three variables (two spatial variables as a function of the time variable), and simply plotting the data on a 2D geographic map can result in overplotting and occlusion that hides details. This also makes it difficult to understand correlations between space and time. Software such as GeoTime can display such data with a three-dimensional visualization, where the 3rd dimension is used for time. This allows for the disambiguation of spatially overlapping trajectories, and in theory, should make the data clearer. However, previous experimental comparisons of 2D and 3D visualizations have so far found little advantage in 3D visualizations, possibly\u00a0\u2026", "num_citations": "71\n", "authors": ["948"]}
{"title": "Treematrix: A hybrid visualization of compound graphs\n", "abstract": " We present a hybrid visualization technique for compound graphs (i.e. networks with a hierarchical clustering defined on the nodes) that combines the use of adjacency matrices, node\u2010link and arc diagrams to show the graph, and also combines the use of nested inclusion and icicle diagrams to show the hierarchical clustering. The graph visualized with our technique may have edges that are weighted and/or directed. We first explore the design space of visualizations of compound graphs and present a taxonomy of hybrid visualization techniques. We then present our prototype, which allows clusters (i.e. subtrees) of nodes to be grouped into matrices or split apart using a radial menu. We also demonstrate how our prototype can be used in the software engineering domain, and compare it to the commercial matrix\u2010based visualization tool Lattix using a qualitative user study.", "num_citations": "56\n", "authors": ["948"]}
{"title": "AniMatrix: A Matrix-Based Visualization of Software Evolution\n", "abstract": " Software designs are ever changing to adapt to new environments and requirements. Tracking and understanding changes in modules and relationships in a software project is difficult, but even more so when the software goes through several types of changes. The typical complexity and size of software also makes it harder to grasp software evolution patterns. In this paper, we present an interactive matrix-based visualization technique that, combined with animation, depicts how software designs evolve. For example, it shows which new modules and couplings are added and removed over time. Our generic visualization supports dynamic and weighted digraphs and is applied in the context of software evolution. Analyzing source code changes is important to determine the software's structural organization and identify quality issues over time. To demonstrate our approach, we explore open-source repositories\u00a0\u2026", "num_citations": "33\n", "authors": ["948"]}
{"title": "Visualizing protected variations in evolving software designs\n", "abstract": " Identifying and tracking evolving software structures at a design level is a challenging task. Although there are ways to visualize this information statically, there is a need for methods that help analyzing the evolution of software design elements. In this paper, we present a new visual approach to identify variability zones in software designs and explore how they evolve over time. To verify the usefulness of our approach, we did a user study in which participants had to browse software histories and find visual patterns. Most participants were able to find interesting observations and found our approach intuitive and useful. We present a number of design aspects that were observed by participants and the authors using our IHVis tool on four open-source projects.", "num_citations": "7\n", "authors": ["948"]}
{"title": "Visualisation hybride des liens hi\u00e9rarchiques incorporant des treemaps dans une matrice d'adjacence\n", "abstract": " Compound graphs are often useful for modeling components of hierarchical systems. While node-link diagrams can be used to visualize these graphs, adjacency matrices have the advantage of eliminating occlusion between edges, even in dense networks. However, matrices do not reveal the hierarchy in a compound graph. To address this issue, we propose a novel hybrid visualization technique that combines an adjacency matrix with treemaps displaying portions of the hierarchy. A prototype is presented that illustrates these ideas and supports visualization of digraphs with weighted edges. Interaction techniques allow the user to reorganize the hierarchical groupings of elements and facilitates the exploration of links within the network. For example, in software engineering, the prototype enables browsing of links between source code modules to help discover the architecture of the software.", "num_citations": "4\n", "authors": ["948"]}