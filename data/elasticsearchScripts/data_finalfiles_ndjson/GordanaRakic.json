{"title": "A language-independent approach to the extraction of dependencies between source code entities\n", "abstract": " ContextSoftware networks are directed graphs of static dependencies between source code entities (functions, classes, modules, etc.). These structures can be used to investigate the complexity and evolution of large-scale software systems and to compute metrics associated with software design. The extraction of software networks is also the first step in reverse engineering activities.ObjectiveThe aim of this paper is to present SNEIPL, a novel approach to the extraction of software networks that is based on a language-independent, enriched concrete syntax tree representation of the source code.MethodThe applicability of the approach is demonstrated by the extraction of software networks representing real-world, medium to large software systems written in different languages which belong to different programming paradigms. To investigate the completeness and correctness of the approach, class collaboration\u00a0\u2026", "num_citations": "25\n", "authors": ["1234"]}
{"title": "LICCA: A Tool for Cross-Language Clone Detection\n", "abstract": " Code clones mostly have been proven harmful for the development and maintenance of software systems, leading to code deterioration and an increase in bugs as the system evolves. Modern software systems are composed of several components, incorporating multiple technologies in their development. In such systems, it is common to replicate (parts of) functionality across the different components, potentially in a different programming language. Effect of these duplicates is more acute, as their identification becomes more challenging. This paper presents LICCA, a tool for the identification of duplicate code fragments across multiple languages. LICCA is integrated with the SSQSA platform and relies on its high-level representation of code in which it is possible to extract syntactic and semantic characteristics of code fragments positing full cross-language clone detection. LICCA is on a technology development\u00a0\u2026", "num_citations": "21\n", "authors": ["1234"]}
{"title": "Comparison of software metrics tools for: net\n", "abstract": " In this paper we will compare tools for calculating software metrics. We will examine tools that are available free on the internet and capable of calculating software metrics for C# language. The purpose of this paper is to compare the calculations of software metrics and determine if the tools are providing the same results. We would like to discover if choosing a different tool can provide different results and consequently bring different decisions.", "num_citations": "20\n", "authors": ["1234"]}
{"title": "Problems in Systematic Application of Software Metrics and Possible Solution\n", "abstract": " Systematic application of software metric techniques can lead to significant improvements of the quality of a final software product. However, there is still the evident lack of wider utilization of software metrics techniques and tools due to many reasons. In this paper we investigate some limitations of contemporary software metrics tools and then propose construction of a new tool that would solve some of the problems. We describe the promising prototype, its internal structure, and then focus on its independency of the input language.", "num_citations": "19\n", "authors": ["1234"]}
{"title": "Introducing enriched concrete syntax trees\n", "abstract": " In our earlier research an area of consistent and systematic application of software metrics was explored. Strong dependency of applicability of software metrics on input programming language was recognized as one of the main weaknesses in this field. Introducing enriched Concrete Syntax Tree (eCST) for internal and intermediate representation of the source code resulted with step forward over this weakness. In this paper we explain innovation made by introducing eCST and provide idea for broader applicability of eCST in some other fields of software engineering.", "num_citations": "18\n", "authors": ["1234"]}
{"title": "Language independent framework for static code analysis\n", "abstract": " The aim of this paper is to describe a framework consisting of a set of static analyzers. The main characteristic of all incorporated tools is their independency of input programming language. This independency is based on a universal representation of the source code that is to be analyzed. The overall goal of this research is to provide a framework that is suitable for consistent analysis of the source code with the intention to ensure, check, and consequently increase the quality of the heterogeneous software products. The framework currently integrates three tools: software metrics tool--SMIILE, extractor of software networks--SNEIPL and structure change analyzer--SSCA, with tendency to extend this set of components. Further application of these tools in collaboration with other tools on higher level provides even broader applicability of described framework.", "num_citations": "15\n", "authors": ["1234"]}
{"title": "Smiile prototype\n", "abstract": " In this paper the prototype of SMIILE tool (currently stands for: Software Metrics\u2014Independent of Input LanguagE) will be described. Crucial characteristic of this tool is its independency of input programming language for supported software metrics. This characteristic is based on usage of newly introduced type of syntax trees\u2014enriched Concrete Syntax Trees (eCST) for source code representation.MSCI: 68N30 Mathematical aspects of software engineering (specification, verification, metrics, requirements, etc.)", "num_citations": "14\n", "authors": ["1234"]}
{"title": "A Programming Language Independent Framework for Metrics-based Software Evolution and Analysis\n", "abstract": " Knowledge about different aspects of software quality during software    evolution can be valuable information for developers and project managers. It    helps to reduce the number of defects and improves the internal structure of    software. However, determining software\u2019s quality and structure in    heterogeneous systems is a difficult task. In this paper, a programming    language independent framework for evaluating software metrics and analyzing    software structure during software development and its evolution will be    presented. The framework consists of the SMIILE tool for calculation of    software metrics, extended with an analysis of software structure. The data    are stored in a central repository via enriched Concrete Syntax Tree (eCST)    for universal source code representation. The framework is demonstrated in a    case study. The development of such a framework is a step forward to    consistent support for software evolution by providing a change analysis and    quality control. The significance of this consistency is growing today, when    software projects are more complex, consisting of components developed in    diverse programming languages.", "num_citations": "13\n", "authors": ["1234"]}
{"title": "Towards the better software metrics tool\n", "abstract": " Project \"Towards the better software metrics tool\" is a bilateral project between Slovenia and Serbia. It was supported by Ministries of Sciences of both countries. The main goal of this project was to detect the main difficulties in application of software metrics in practice and to deal with them by development of a more useful software metrics tool. Additional goal is establishment of origin for extension of this tool to support metric based software evolution. Motivation, goals and current results of the project were presented in several international conferences.", "num_citations": "12\n", "authors": ["1234"]}
{"title": "Extendable and Adaptable Framework for Input Language Independent Static Analysis\n", "abstract": " In modern approach to software development, a great importance is given to monitoring of software quality in early development phases. Therefore, static analysis becomes more important. Furthermore, software projects are becoming more complex and heterogeneous. These characteristics are reflected in a diversity of functionalities and variety of computer languages and the technologies used for their development. Because of that consistency in static analysis becomes more important than it was earlier.", "num_citations": "9\n", "authors": ["1234"]}
{"title": "Extractor of software networks from enriched concrete syntax trees\n", "abstract": " Software networks are directed graphs of dependencies among entities (packages, classes, methods, etc.) found in a software system. These structures are used to study organizational software complexity and evolution. In this paper the prototype of software networks extractor - SNEIPL is described. SNEIPL uses enriched concrete syntax tree (eCST) representation of a source code. The benefit of such representation is that it enables independency of programming language. First experiences using SNEIPL showed that it correctly extracted isomorphic software networks from the source code of two structurally and semantically equivalent programs written in different programming languages.", "num_citations": "9\n", "authors": ["1234"]}
{"title": "SSQSA architecture\n", "abstract": " The aim of this paper is to describe architecture of the software system called Set of Software Quality Static Analyzers (SSQSA). The main aim of SSQSA is to provide some static software analyzers to ensure, check, and consequently increase, the quality of software products. Its main characteristic is the language independency which makes it more usable than many other similar systems.", "num_citations": "9\n", "authors": ["1234"]}
{"title": "XML\u2010Based Integration of the SMIILE Tool Prototype and Software Metrics Repository\n", "abstract": " An adequate system for collecting and analyzing software metric results is crucial for the successful interpretation of software characteristics during the software development process. Furthermore, the right interpretation can also identify poor quality in complex modules within software systems. However, there is a gap between raw metrics data and the right interpretation of them. In this paper, the integration of a language independent metric tool (SMIILE prototype [9]) for metrics data extraction and the software metrics repository for storing and analyzing extracted data will be described. With this integration we hope to overcome some of the difficulties that application of sofware metrics experienced in practice.", "num_citations": "7\n", "authors": ["1234"]}
{"title": "Two-dimensional Extensibility of SSQSA Framework.\n", "abstract": " The motivation to improve systematic application of software analysis tools by improving characteristics of software analysis tools originates from important aspects of modern software development regarding complexity and heterogeneity; importance of analysis and control during this process; need to keep consistency of the followed results. During the identification of the factors affecting these process we identified two important characteristics of supporting tools: extensibility and adaptability. In this paper describe extensibility of the Set of Software Quality Static Analyzers (SSQSA) in two directions: to support new programming language and to support new analysis algorithm", "num_citations": "6\n", "authors": ["1234"]}
{"title": "A Preliminary Empirical Exploration of Quality Measurement for Javascript Solutions.\n", "abstract": " Contrary to the increasing popularity of JavaScript programming language in the field of web application development, the numerical expression of evidence about the quality of solutions developed in this language is still not reliable. Based on the preliminary literature review, which is the main subject of this paper, this area has not yet been fully explored. Measurement is done by application of general and object-oriented metrics, which can reflect only general characteristics of the solution, while the specifics related to the programming language are not expressible by existing metrics. Due to the popularity of the language and the increasing number of JavaScript projects, the idea is to determine appropriate metrics and approach to measurement for their application in practice. Finally, the measurement approach will be implemented in the SSQSA Framework to enable its application. The preliminary research presented in this paper was conducted during a student course of Empirical research methods at the University of Maribor and therefore is limited in number of included papers, depth of research, and analysis of its contents, which restricts us to preliminary conclusion only, but places the foundation and justifies the described forthcoming research.", "num_citations": "5\n", "authors": ["1234"]}
{"title": "Towards the Code Clone Analysis in Heterogeneous Software Products.\n", "abstract": " Code clones are parts of source code that were usually created by copy-paste activities, with some minor changes in terms of added and deleted lines, changes in variable names, types used etc. or no changes at all. Clones in code decrease overall quality of software product, since they directly decrease maintainability, increase fault-proneness and make changes harder. Numerous researches deal with clone analysis, propose categorizations and solutions, and many tools have been developed for source code clone detection. However, there are still open questions primarily regarding what are precise characteristics of code fragments that should be considered as clones. Furthermore, tools are primarily focused on clone detection for a specific language, or set of languages. In this paper, we propose a language-independent code clone analysis, introduced as part of SSQSA (Set of Software Quality Static Analyzers) platform, aimed to enable consistent static analysis of heterogeneous software products. We describe the first prototype of the clone detection tool and show that it successfully detects same algorithms implemented in different programming languages as clones, and thus brings us a step closer to the overall goals.", "num_citations": "5\n", "authors": ["1234"]}
{"title": "First Experiences in Using So ware Metrics in Automated Assessment\n", "abstract": " Automated assessment systems are very helpful in reducing the amount of repetitive work done by instructors on computer science courses with a lot of practical exercises. These systems can also help students by providing objective grading and quicker feedback. In this paper we explore the usage of software metrics in automated assessment. The metrics are utilized to assess algorithm complexity among other aspects that currently demand instructor attention. Additional value of our approach is programming language independency of the used tools: SMIILE for software metrics calculation and Testovid for automated assessment.", "num_citations": "5\n", "authors": ["1234"]}
{"title": "Toward recursion aware complexity metrics\n", "abstract": " Context: Software developers spend a significant amount of time on reading, comprehending, and debugging of source code. Numerous software metrics can give us awareness of incomprehensible functions or of flaws in their collaboration. Invocation chains, especially recursive ones, affect solution complexity, readability, and understandability. Even though decomposed and recursive solutions are characterized as short and clear in comparison with iterative ones, they hide the complexity of the observed problem and solution. As the collaboration between functions can strongly depend on context, difficulties are usually detected in debugging, testing or by static analysis, while metrics support is still very weak.Objective: We introduce a new complexity metric, called Overall Path Complexity (OPC), which is aware of (recursive) call chains in the observed source code. As invocations are basic collaboration\u00a0\u2026", "num_citations": "4\n", "authors": ["1234"]}
{"title": "Consistent Static Analysis in Multilingual Software Products Development\n", "abstract": " The paper points out some problems that are existing in the field of static analysis of software quality. Building tools that are language independent and based on a common intermediate structure are seen as a way to overcome most of the observed problems. As an example, an original, language-independent infrastructure containing a set of static quality software analyzers (SSQSA) is introduced.", "num_citations": "3\n", "authors": ["1234"]}
{"title": "SSQSA Ontology Metrics Front-End\n", "abstract": " SSQSA is a set of language independent tools whose main purpose is to analyze source code of software systems in order to evaluate their quality attributes. The aim of this paper is to present how a formal language that is not a programming language can be integrated into the front-end of the SSQSA framework. Namely, it is explained how the SSQSA front-end is extended to support OWL2 which is a domain-specific language for the description of ontological systems. Such extension of the SSQSA front-end represents a step towards the realization of a SSQSA back-end which will be able to compute a hybrid set of metrics that reflect different aspects of complexity of ontological descriptions.", "num_citations": "3\n", "authors": ["1234"]}
{"title": "Detecting Source Code Similarity Using Compression\n", "abstract": " Different forms of plagiarism make fair assessment of student assignments more difficult. Source code plagiarisms pose a significant challenge especially for automated assessment systems aimed for students\u2019 programming solutions. Different automated assessment systems employ different text or source code similarity detection tools, and all of these tools have their advantages and disadvantages. In this paper we revitalize the idea of similarity detection based on string complexity and compression. We slightly adapt an existing, third party, approach, implement it and evaluate its potential on synthetically generated cases and on a small set of real student solutions. On synthetic cases we showed that average deviation (in absolute values) from the expected similarity is less than 1%(0.94%). On the real life examples of student programming solutions we compare our results with those of two established tools. The average difference is around 18.1% and 11.6%, while the average difference between those two tools is 10.8%. However, the results of all three tools follow the same trend. Finally, a deviation in some extent is expected as observed tools apply different approaches that are sensitive to other factors of similarities. Gained results additionally demonstrate open challenges in the field.", "num_citations": "2\n", "authors": ["1234"]}
{"title": "Translation of Tempura specifications to eCST\n", "abstract": " eCST is an innovative, language-independent intermediate source code representation designed as a basis of approach applied in development of SSQSA framework. This framework provides an infrastructure for consistent static software analysis. Tempura is a formal specification language, while Tempura programs are executable ITL (Interval Temporal Logic) specifications. This paper describes required steps to enable generation of eCST representation of Tempura code which leads to an incorporation of Tempura language in the infrastructure of SSQSA framework. This incorporation serves as a proof of concept that a formal specification language (like Tempura) can be successfully represented with an intermediate language representation (like eCST) that was primarily aimed for representation of \u201cclassical\u201d programming languages.", "num_citations": "2\n", "authors": ["1234"]}
{"title": "Introducing support for Erlang into SSQSA framework\n", "abstract": " Set of Software Quality Static Analyzers (SSQSA) is a framework which includes set of software tools for static analysis. Starting aim of the framework is consistent software quality analysis. The main characteristic of all integrated tools is the independency of the input programming language. Each of the integrated analysers can be uniformly applied to any software systems that are written in different programming languages. In SSQSA framework, language independency is achieved by enriched Concrete Syntax Tree (eCST). eCST is used as an internal representation of the source code. Currently, SSQSA supports some representative input languages. Still the support for functional language is missing. For introducing the support for new input language into SSQSA framework straightforward semi-automated procedure is established. In this paper we explore possibility to add support for functional languages into\u00a0\u2026", "num_citations": "2\n", "authors": ["1234"]}
{"title": "Process Quality Monitoring and Optimization: A Case Study for a Smart City Health Domain1\n", "abstract": " The quality of Information Technology (IT) solutions can be measured on several levels, among them focusing on data, software, as well as finally\u2013the human user. Since IT solutions are one of the essential elements used in actual business or production processes, the quality of the business process and its validation is one of the important high-level quality assessments. There have been many attempts to measure or quantify the quality of business processes, respectively their models. However, a general, an overview has not been provided of the combination of several possible approaches. In this paper, a few, seemingly different approaches from different fields/domains are joined together, analysing the same process, providing a framework and insight for business process quality evaluation, analysis and improvement. The included methods are modelling, definition of key performance indicators, risk and waste assessment, root cause analysis and simulation. The process of quality-oriented validation and optimization is demonstrated on a case study from the field of Smart City Health Domain, presenting the transformation of the blood donation process from the AS-IS to the TO-BE process. From the listed methods, simulation provided the most quantifiable benefits, although descriptive analysis provided guidance as to which process elements should be addressed to achieve the most optimal final status.", "num_citations": "1\n", "authors": ["1234"]}
{"title": "eCST to source code generation-an idea and perspectives\n", "abstract": " eCST (enriched Concrete Syntax Tree) is introduced as a fundament of SSQSA (Set of Software Quality Static Analyzers) platform for consistent static quality analysis across the input languages. It is based on the concept of enrichment of the complete syntax tree representing the input program by universal nodes. Universal nodes are based on the idea of imaginary nodes in an abstract syntax tree, but unified, so that one single node is used for all languages where it is applicable. In this paper, we describe a translation of eCST back to source code. At this moment, this is only translation to the original language in which code is written. Moreover, the translation of eCST to a code written in the original language can have a wide spectre of applications such as in (semi-)automated code refactoring and transformations.", "num_citations": "1\n", "authors": ["1234"]}
{"title": "Towards the Formalization of Software Measurement by Involving Network Theory\n", "abstract": " Complex network theory is based on a graph theory and statistical analysis. Software network is a sub-class of complex network and is usually represented by directed graphs representing relationships between software entities. Software metrics is a (numerical) measure that reflects some property of a software product or its specification. The goal of this paper is to set relationship between particular software metrics and corresponding measures from complex networks theory, including software networks. That relationship will help in discovering potentially new and useful metrics that are based on complex networks. Furthermore, it will narrow the gap between two similar research areas that is often too big. The specific goal of this paper is to present the method how the relationships can be established.", "num_citations": "1\n", "authors": ["1234"]}
{"title": "Toward Language Independent Worst-Case Execution Time Calculation\uf020\n", "abstract": " Set of Software Quality Static Analyzers (SSQSA) is a set of software tools for static analysis that is incorporated in the framework developed to target the common aim\u2013consistent software quality analysis. The main characteristic of all integrated tools is the independency of the input computer language. Language independency is achieved by enriched Concrete Syntax Tree (eCST) that is used as an intermediate representation of the source code. This characteristic gives the tools more generality comparing to the other similar static analyzers. The aim of this paper is to describe an early idea for introducing support for static timing analysis and Worst Case Execution Time (WCET) calculation at code level in SSQSA framework.", "num_citations": "1\n", "authors": ["1234"]}
{"title": "Introducing recursive complexity\n", "abstract": " In this paper a possibility of introducing new software metric is explored. The new metric reflects the recursive complexity i.e., the complexity of recursive calls appearing in the source code for the purpose of maintainability analysis. The purpose of recursive complexity is to fulfill the gap in complexity and maintainability measurements. Intention of this paper is to provoke the discussion on the needs in the field of maintainability analysis regarding complexity measures. Therefore only the basic concepts of the new metric are discussed.", "num_citations": "1\n", "authors": ["1234"]}