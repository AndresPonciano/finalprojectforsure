{"title": "SATDBailiff-mining and tracking self-admitted technical debt\n", "abstract": " Self-Admitted Technical Debt (SATD) is a metaphorical concept to describe the self-documented addition of technical debt to a software project in the form of source code comments. SATD can linger in projects and degrade source-code quality, but it can also be more visible than unintentionally added or undocumented technical debt. Understanding the implications of adding SATD to a software project is important because developers can benefit from a better understanding of the quality trade-offs they are making. However, empirical studies, analyzing the survivability and removal of SATD comments, are challenged by potential code changes or SATD comment updates that may interfere with properly tracking their appearance, existence, and removal. In this paper, we propose SATDBailiff, a tool that uses an existing state-of-the-art SATD detection tool, to identify SATD in method comments, then properly track\u00a0\u2026", "num_citations": "1\n", "authors": ["2165"]}
{"title": "Leveraging the agile development process for selecting invoking/excluding tests to support feature location\n", "abstract": " A practical approach to feature location using agile unit tests is presented. The approach employs a modified software reconnaissance method for feature location, but in the context of an agile development methodology. Whereas a major drawback to software reconnaissance is the identification or development of invoking and excluding tests, the approach allows for the automatic identification of invoking and excluding tests by partially ordering existing agile unit tests via iteration information from the agile development process. The approach is validated in a comparison study with industry professionals, where the approach is shown to improve feature location speed, accuracy, and developer confidence over purely manual feature location.", "num_citations": "1\n", "authors": ["2165"]}
{"title": "A Source Code Transformation Language to Support Software Evolution\n", "abstract": " The research presented in the dissertation focuses on the construction and evaluation of a transformation language to support software maintenance. The language, srcTL, is built on top of the srcML infrastructure. srcML is an XML-based markup language that embeds Abstract Syntax Tree (AST) information into code in the form of XML tags. srcTL takes as input the AST generated by srcML and allows users to manipulate this AST using its operators. srcTL is very modular; relying on tools written for srcML to add additional functionality without complicating the language. Additionally, srcTL uses a methodology that syntactically restructures the source code being transformed to greatly reduce the problem space of some transformations. This methodology is applied automatically by srcTL, with minimal user intervention, to make transformation scripts written in srcTL short and easy to understand. Combined, these\u00a0\u2026", "num_citations": "1\n", "authors": ["2165"]}