{"title": "Business intelligence applied to learning analytics in student-centered learning processes\n", "abstract": " This work aims to evaluate the use of Learning Analitycs (LA) in Higher Education; students, and attributes such as: profile, interactions in a virtual learning environment learning - for this use business intelligence paradigm in order to explore and exploit the data from one of the actors in the educational process is analyzed, test scores, among others, which will contribute to their educational success. In particular, this paper tries to answer the following specific objectives: To identify factors that influence the decision of a college student distance learning to abandon their studies and get the profile of potentially susceptible students from their university studies. To meet this purpose we define two analysis tasks learning and use a business intelligence methodology to implement it.", "num_citations": "19\n", "authors": ["1339"]}
{"title": "Implementation of techniques and OWASP security recommendations to avoid SQL and XSS attacks using J2EE and WS-Security\n", "abstract": " This work contains the implementation of techniques and recommendations OWASP on a SOA prototype developed with J2EE. To its design and coding we used some WS-Security specifications, Metro framework, MVC as architectural pattern, Facade and DAO as design patterns. The prototype was validated in terms of design, coding and security through some tools such as: Structural Analysis for Java, SonarQube, OWASP ZAP, Vega and Wireshark. With the development of this prototype we prove that use of standards, recommendations and techniques for writing secure code in software applications are necessary in order to prevent vulnerabilities; besides, the static analysis supports to identify security breaches and quality aspects that many times are not considered by developers.", "num_citations": "14\n", "authors": ["1339"]}
{"title": "SonarQube as a tool to identify software metrics and technical debt in the source code through static analysis\n", "abstract": " Technical Debt (TD), also known as technical debt design or technical debt code, analyze the consequence that could have a system once it has been designed architecturally, coding or implemented. TD refers to work to be performed rather than software design or coding is considered complete or correct. Static analysis is a technique to identify and analyze software characteristics from source code; through static analysis we can identify elements such as packages, classes, relationships, lines of code (LOC\u2019s), bugs, complexity, coding violations and others. In addition, subsystems, components and their relationships supported by tools, algorithms, frameworks to analyze the code were identified. SQALE is a quality and analysis model contains the internal properties expected from the code in the context of the evaluation, it has been used to perform many assessments of software source code, of various sizes in different application domains and programming language. SonarQube is an open source platform to manage the source code quality, this cover seven axes of code quality among which stand: architecture and design, duplications, unit test, complexity, potential bugs, codifications rules, comments, among others; this platform work with over 20 programming languages.This paper, use as input the source code of the software applications written in different programming language for through static analysis identify metrics, characteristics, and technical debt with the aim to improve the quality when writing code, also supported in static analysis identify aspects such as correct apply of quality attributes, standards and best practices of\u00a0\u2026", "num_citations": "11\n", "authors": ["1339"]}
{"title": "Performance evaluation in the migration process from a monolithic application to microservices\n", "abstract": " Microservices are considered as a software architecture that allows the decomposition of a system, its components or its functionalities into a set of small services, which are implemented, deployed and managed independently. In this study, the models that allow migrating a Monolith to Microservices such as NGINX and IBM are analyzed. From these models, activities that allow such migration are carefully selected and identified. In order to implement and evaluate the activities proposed in those models, an application that initially does not have any structure at the design and coding level (using PHP programming language) is applied. Then, the application's coding language changes to Java and the classes and libraries are distributed into packages. Subsequently, as it is suggested in the models, services are identified and implemented using RESTful Web Services to finally implement the microservices using\u00a0\u2026", "num_citations": "8\n", "authors": ["1339"]}
{"title": "Development of software prototypes through model game jam and basic vision artificial techniques\n", "abstract": " The artificial vision is a part of the artificial intelligence that pretends to simulate the human vision, is to say, from the acquisition, processing, analysis and interpretation of images through an intelligent system. This work presents the creation of prototypes under the game jam model as a software product. In this context, the objective of the present work was to apply basic artificial vision algorithms such as linear discriminant analysis (LDA), principal component analysis (PCA), Fisherface, Otsu, CamShift and color spaces such as RGB and HSV in order to be able to motion detection of objects, face recognition and pedestrian detection. As a result of applying this model in rapid prototyping, we found significant factors (such as: participatory design, light construction, product value approach, aesthetics and technology) in the implementation of innovative strategies in creating of prototypes focused on Software development.", "num_citations": "8\n", "authors": ["1339"]}
{"title": "Implementation of techniques, standards and safety recommendations to prevent XSS and SQL injection attacks in Java EE RESTful applications\n", "abstract": " There are recommendations and tools, given by OWASP that suggest basic techniques of prevention and protection of computer attacks over web applications where the common types of attacks are XSS and SQL Injection; for that reasons, we apply recommendations and good practice to minimize this kind of attacks; used some tools to validate automatically attacks and built some expressions to validate manually the intrusions in web applications. Therefore, this study was based on the development of a prototype under REST, design pattern Facade, Java EE and Glassfish [13]. With the development of the prototype it was found that by the use of standards and norms recommend by OWASP the security in terms of overall design and source code in web applications can be greatly improved.", "num_citations": "6\n", "authors": ["1339"]}
{"title": "Classifying Model-View-Controller Software Applications Using Self-Organizing Maps\n", "abstract": " The new era of information and the needs of our society require continuous change in software and technology. Changes are produced very quickly and software systems require evolving at the same velocity, which implies that the decision-making process of software architectures should be (semi-)automated to satisfy changing needs and to avoid wrong decisions. This issue is critical since suboptimal architecture design decisions may lead to high cost and poor software quality. Therefore, systematic and (semi-)automated mechanisms that help software architects during the decision-making process are required. Architectural patterns are one of the most important features of software applications, but the same pattern can be implemented in different ways, leaving to results of different quality. When an application requires to evolve, knowledge extracted from similar applications is useful for driving decisions, since\u00a0\u2026", "num_citations": "2\n", "authors": ["1339"]}
{"title": "A Systematic-Oriented Process for Tool Selection: The Case of Green and Technical Debt Tools in Architecture Reconstruction\n", "abstract": " Well-established methods in software engineering research, such as Systematic Literature Reviews, Systematic Mappings and Case Studies are effective research methods to explore emerging areas, since they are systematic and replicable, and produce reusable result avoiding bias. Frequently, software engineers have to evaluate and select CASE (Computer Aided Software Engineering) tools that address trending issues with a non-systematic and replicable processes. This work addresses this problem by tailoring the ISO/IEC 14102:2008 to a systematic-oriented process for the evaluation of software engineering CASE tools in order to embrace the advantages of software engineering systematic methods in the exploration of new areas or emerging issues. This tailored ISO/IEC 14102:2008 standard prescribes a process for the preparation, design and conduction of the software engineering CASE\u00a0\u2026", "num_citations": "1\n", "authors": ["1339"]}
{"title": "Herramienta para la personalizaci\u00f3n y c\u00e1lculo de m\u00e9tricas de c\u00f3digo utilizando an\u00e1lisis est\u00e1tico: SCAT\n", "abstract": " Nowadays, due to modernization, evolution and new requirements given by customers, software is subject to continuous maintenance, where reverse engineering activities are involved. The purpose of this study is to cover this limitation through the design and construction of the SCAT (Source Code Analysis Tool) in order to personalize, configure and extract the Java language features in order to obtain simple and compound metrics to be used in Green Software analysis and technical debt approaches. Keywords: Reverse engineering, software code metrics, measurements, static analysis. Ante estas necesidades, en este trabajo se presenta la herramienta SCAT (Source Code Analysis Tool), la cual permite personalizar, configurar y automatizar el proceso para extraer y calcular m\u00e9tricas que pueden ser usadas en enfoques como estimaci\u00f3n del consumo energ\u00e9tico (Lago, Gu, Bozzelli, & others, 2014) y\u00a0\u2026", "num_citations": "1\n", "authors": ["1339"]}
{"title": "Use of SQALE and tools for analysis and identification of code technical debt through static analysis\n", "abstract": " Technical Debt (TD), also known as technical debt design or technical debt code, analyze the consequence that could have a system once it has been designed architecturally, coding or implemented. TD refers to work to be performed rather than software design or coding is considered complete or correct. Static analysis is a technique to identify and analyze software characteristics from source code; through static analysis we can identify elements such as packages, classes, relationships, lines of code (LOC's), bugs, complexity, coding violations and others. In addition subsystems, components and their relationships supported by tools, algorithms, frameworks to analyze the code were identified. SQALE[1] is a quality and analysis model contains the internal properties expected from the code in the context of the evaluation, it has been used to perform many assessments of software source code, of various sizes in\u00a0\u2026", "num_citations": "1\n", "authors": ["1339"]}