{"title": "Automotive software engineering: A systematic mapping study\n", "abstract": " The automotive industry is going through a fundamental change by moving from a mechanical to a software-intensive industry in which most innovation and competition rely on software engineering competence. Over the last few decades, the importance of software engineering in the automotive industry has increased significantly and has attracted much attention from both scholars and practitioners. A large body-of-knowledge on automotive software engineering has accumulated in several scientific publications, yet there is no systematic analysis of that knowledge. This systematic mapping study aims to classify and analyze the literature related to automotive software engineering in order to provide a structured body-of-knowledge, identify well-established topics and potential research gaps. The review includes 679 articles from multiple research sub-area, published between 1990 and 2015. The primary studies\u00a0\u2026", "num_citations": "44\n", "authors": ["1117"]}
{"title": "Improving the state of automotive software engineering\n", "abstract": " The automotive industry is fundamentally changing by becoming software intensive, rather than mechanically intensive. To stay ahead of the game, automakers must continuously improve their software engineering. For this article, the authors studied the existing literature on the subject and made practitioner-oriented recommendations.", "num_citations": "24\n", "authors": ["1117"]}
{"title": "Test Prioritization in Continuous Integration Environments\n", "abstract": " Two heuristics namely diversity-based (DBTP) and history-based test prioritization (HBTP) have been separately proposed in the literature. Yet, their combination has not been widely studied in continuous integration (CI) environments. The objective of this study is to catch regression faults earlier, allowing developers to integrate and verify their changes more frequently and continuously. To achieve this, we investigated six open-source projects, each of which included several builds over a large time period. Findings indicate that previous failure knowledge seems to have strong predictive power in CI environments and can be used to effectively prioritize tests. HBTP does not necessarily need to have large data, and its effectiveness improves to a certain degree with larger history interval. DBTP can be used effectively during the early stages, when no historical data is available, and also combined with HBTP to\u00a0\u2026", "num_citations": "23\n", "authors": ["1117"]}
{"title": "What do we know about alignment of requirements engineering and software testing?\n", "abstract": " Context: The alignment of different software engineering activities for coordinated functioning and optimized product development is of great importance, particularly in industrial-scale development. The link between intermediate activities has been researched extensively, but the link between requirements engineering (RE) and software testing (ST) is a relatively less explored area.Objective: The objective of this study is to aggregate, structure, and classify all existing research regarding alignment of RE and ST published by the end of 2015.Method: We conducted a systematic mapping study (SMS) and aggregated all studies relevant to our scope. The primary studies are analyzed in terms of publication trend, focus area, ie, how alignment is supported, the application domain and benefits and challenges, methodological data, and scientific rigor and industrial relevance.Results: There is a growing interest towards\u00a0\u2026", "num_citations": "7\n", "authors": ["1117"]}
{"title": "An Argumentation-Based Design Rationale Application for Reflective Practice\n", "abstract": " This study presents an argumentation-based design rationale application for supporting communication and reflection in design. The study employs a design science research methodology and contributes to research by investigating the design and evaluation of a software artefact, namely the Rationale Browser. Preliminary evaluation of the software artefact in an experiment indicates its usefulness and usability. We conclude that the artefact can be of particular relevance to both researchers and practitioners, by serving as a reflection and documentation tool in value-sensitive, ethical or reflective design projects.", "num_citations": "3\n", "authors": ["1117"]}
{"title": "Test Case Prioritization Using Test Similarities\n", "abstract": " A classical heuristic in software testing is to reward diversity, which implies that a higher priority must be assigned to test cases that differ the most from those already prioritized. This approach is commonly known as similarity-based test prioritization (SBTP) and can be realized using a variety of techniques. The objective of our study is to investigate whether SBTP is more effective at finding defects than random permutation, as well as determine which SBTP implementations lead to better results. To achieve our objective, we implemented five different techniques from the literature and conducted an experiment using the defects4j dataset, which contains 395 real faults from six real-world open-source Java programs. Findings indicate that running the most dissimilar test cases early in the process is largely more effective than random permutation (Vargha\u2013Delaney A [VDA]: 0.76\u20130.99 observed using\u00a0\u2026", "num_citations": "2\n", "authors": ["1117"]}