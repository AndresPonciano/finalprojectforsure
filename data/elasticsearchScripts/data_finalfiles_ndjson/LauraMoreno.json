{"title": "Automatic Generation of Natural Language Summaries for Java Classes\n", "abstract": " Most software engineering tasks require developers to understand parts of the source code. When faced with unfamiliar code, developers often rely on (internal or external) documentation to gain an overall understanding of the code and determine whether it is relevant for the current task. Unfortunately, the documentation is often absent or outdated. This paper presents a technique to automatically generate human readable summaries for Java classes, assuming no documentation exists. The summaries allow developers to understand the main goal and structure of the class. The focus of the summaries is on the content and responsibilities of the classes, rather than their relationships with other classes. The summarization tool determines the class and method stereotypes and uses them, in conjunction with heuristics, to select the information to be included in the summaries. Then it generates the summaries using\u00a0\u2026", "num_citations": "283\n", "authors": ["987"]}
{"title": "On the Use of Stack Traces to Improve Text Retrieval based Bug Localization\n", "abstract": " Many bug localization techniques rely on Text Retrieval (TR) models. The most successful approaches have been proven to be the ones combining TR techniques with static analysis, dynamic analysis, and/or software repositories information. Dynamic software analysis and software repositories mining bring a significant overhead, as they require instrumenting and executing the software, and analyzing large amounts of data, respectively. We propose a new static technique, named Lobster (Locating Bugs using Stack Traces and text Retrieval), which is meant to improve TR-based bug localization without the overhead associated with dynamic analysis and repository mining. Specifically, we use the stack traces submitted in a bug report to compute the similarity between their code elements and the source code of a software system. We combine the stack trace based similarity and the textual similarity provided by\u00a0\u2026", "num_citations": "96\n", "authors": ["987"]}
{"title": "Automatic software summarization: the state of the art\n", "abstract": " Automatic text summarization has been widely studied for more than fifty years. In software engineering, automatic summarization is an emerging area that shows great potential and poses new and exciting research challenges. This technical briefing provides an introduction to the state of the art and maps future research directions in automatic software summarization.", "num_citations": "18\n", "authors": ["987"]}
{"title": "On the Analysis of Human and Automatic Summaries of Source Code\n", "abstract": " Within the software engineering field, researchers have investigated whether it is possible and useful to summarize software artifacts, in order to provide developers with concise representations of the content of the original artifacts. As an initial step towards automatic summarization of source code, we conducted an empirical study where a group of Java developers provided manually written summaries for a variety of source code elements. Such summaries were analyzed and used to evaluate some summarization techniques based on Text Retrieval.", "num_citations": "16\n", "authors": ["987"]}
{"title": "Summarization of complex software artifacts\n", "abstract": " Program understanding is necessary for most software engineering tasks. Internal and external documentation help during this process. Unfortunately, this documentation is often missing or outdated. An alternative to solve this situation is automatically summarizing software artifacts. In the case of source code, a few approaches have been proposed to generate natural language descriptions of fine-grained elements of the code. This research focuses on the automatic generation of generic natural language summaries of complex code artifacts, such as, classes and change sets. In addition, these generic summaries will be adapted to support specific maintenance tasks.", "num_citations": "14\n", "authors": ["987"]}
{"title": "A Measure to Assess the Behavior of Method Stereotypes in Object-Oriented Software\n", "abstract": " The implementation of software systems should ideally follow the design intentions of the system. However, this is not always the case - the design and implementation of software systems may diverge during software evolution. In this paper we propose a measure based on run time information to assess the consistency between the design and the implementation of OO methods. The measure is based on the analysis of the runtime behavior of methods and considers the frequency of fan-in and fan-out method calls. We analyze this measure with respect to the design intent of methods, reflected by their stereotype. We apply the proposed approach to data from three open source software systems and analyze the behavior of method stereotypes across the systems and within each system. The analysis shows that most methods behave as expected based on their stereotypes and it also detects cases that may need\u00a0\u2026", "num_citations": "11\n", "authors": ["987"]}
{"title": "Software documentation through automatic summarization of source code artifacts\n", "abstract": " Program understanding is necessary for most software engineering tasks. Both internal and external documentation help during this process, since they might summarize valuable information about the software system, including its purpose, programmers\u2019 assumptions and intentions, and design decisions. Unfortunately, software documentation is often missing or is outdated.", "num_citations": "4\n", "authors": ["987"]}