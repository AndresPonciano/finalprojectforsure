{"title": "A model-driven approach to the engineering of multiple user interfaces\n", "abstract": " In this paper, we describe MANTRA, a model-driven approach to the development of multiple consistent user interfaces for one application. The common essence of these user interfaces is captured in an abstract UI model (AUI) which is annotated with constraints to the dialogue flow. We consider in particular how the user interface can be adapted on the AUI level by deriving and tailoring dialogue structures which take into account constraints imposed by front-end platforms or inexperienced users. With this input we use model transformations described in ATL (Atlas Transformation Language) to derive concrete, platform-specific UI models (CUI). These can be used to generate implementation code for several UI platforms including GUI applications, dynamic web sites and mobile applications. The generated user interfaces are integrated with a multi tier application by referencing WSDL-based interface\u00a0\u2026", "num_citations": "84\n", "authors": ["1523"]}
{"title": "Model-driven support for product line evolution on feature level\n", "abstract": " Software Product Lines (SPL) are an engineering technique to efficiently derive a set of similar products from a set of shared assets. In particular in conjunction with model-driven engineering, SPL engineering promises high productivity benefits. There is however, a lack of support for systematic management of SPL evolution, which is an important success factor as a product line often represents a long term investment. In this article, we present a model-driven approach for managing SPL evolution on feature level. To reduce complexity we use model fragments to cluster related elements. The relationships between these fragments are specified using feature model concepts itself leading to a specific kind of feature model called EvoFM. A configuration of EvoFM represents an evolution step and can be transformed to a concrete instance of the product line (i.e., a feature model for the corresponding point in time\u00a0\u2026", "num_citations": "83\n", "authors": ["1523"]}
{"title": "Case tool support for variability management in software product lines\n", "abstract": " Software product lines (SPL) aim at reducing time-to-market and increasing software quality through extensive, planned reuse of artifacts. An essential activity in SPL is variability management, i.e., defining and managing commonality and variability among member products. Due to the large scale and complexity of today's software-intensive systems, variability management has become increasingly complex to conduct. Accordingly, tool support for variability management has been gathering increasing momentum over the last few years and can be considered a key success factor for developing and maintaining SPLs. While several studies have already been conducted on variability management, none of these analyzed the available tool support in detail. In this work, we report on a survey in which we analyzed 37 existing variability management tools identified using a systematic literature review to understand the\u00a0\u2026", "num_citations": "71\n", "authors": ["1523"]}
{"title": "Formal approach to integrating feature and architecture models\n", "abstract": " If we model a family of software applications with a feature model and an architecture model, we are describing the same subject from different perspectives. Hence, we are running the risk of inconsistencies. For instance, the feature model might allow feature configurations that are not realizable by the architecture.               In this paper we tackle this problem by providing a formalization of dependencies between features and components. Further, we demonstrate that this formalization offers a better understanding of the modeled concepts. Moreover, we propose automated techniques that derive additional information and provide feedback to the user. Finally, we discuss how some of these techniques can be implemented.", "num_citations": "61\n", "authors": ["1523"]}
{"title": "Visual tool support for configuring and understanding software product lines\n", "abstract": " Software product lines of industrial size can easily incorporate thousands of variation points. This scale of variability can become extremely complex to manage resulting in a product development process that bears significant costs. One technique that can be applied beneficially in this context is visualisation. Visualisation is widely used in software engineering and has proven useful to amplify human cognition in data intensive applications. Adopting this technique in software product line engineering can help stakeholders in supporting essential work tasks and in enhancing their understanding of large and complex product lines. This paper introduces a meta-model and accompanied research tool that employs visualisation techniques to support fundamental product line development tasks. The meta-model specifies major entities such as decisions, features, and components and relationships among them. We\u00a0\u2026", "num_citations": "57\n", "authors": ["1523"]}
{"title": "A design of a configurable feature model configurator\n", "abstract": " Our feature configuration tool S2T2 Configurator integrates (1) a visual interactive representation of the feature model and (2) a formal reasoning engine that calculates consequences of the user\u2019s actions and provides formal explanations. The tool\u2019s software architecture is designed as a chain of components, which provide mappings between visual elements and their corresponding formal representations. Using these mappings, consequences and explanations calculated by the reasoning engine are communicated in the interactive representation.", "num_citations": "52\n", "authors": ["1523"]}
{"title": "Model-driven development and evolution of customized user interfaces\n", "abstract": " One of the main benefits of model-driven development of User Interfaces (UIs) is the increase in efficiency and consistency when developing multiple variants of a UI. For instance, multiple UIs for different target users, platforms, devices, or for whole product families can be generated from the same abstract models. However, purely generated UIs are not always sufficient as there is often need for customizing the individual UI variants, eg, due to usability issues or specific customer requirements.", "num_citations": "51\n", "authors": ["1523"]}
{"title": "EvoFM: feature-driven planning of product-line evolution\n", "abstract": " Companies successfully applying product line approaches often follow a long-term strategy and need to plan product portfolios years ahead. For instance in the automotive industry, managers constantly make decisions about future product evolution, like\" the LED tail lights will be introduced with the next facelift and the LED front lights two years later\". With a raising number of features, feature changes, and evolution steps, a systematic approach for evolution planning becomes essential. However, there is only very little support for such evolution in model-based product line engineering so far.", "num_citations": "48\n", "authors": ["1523"]}
{"title": "Applying software product line techniques in model-based embedded systems engineering\n", "abstract": " This paper addresses variability in the domain of software-based control systems. When designing product lines of such systems, varying sensors and actuators have to be used and parameterized, which in turn requires adaptations in the behavior of the microcontroller. For efficient engineering these adaptations should be performed in an systematic and straightforward manner. We tackle these challenges by using a Rapid Control Prototyping (RCP) system in combination with model-based development techniques. In particular, we modularize the parametrization of components into a separate configuration, which is isolated from the model that defines the controller behavior. Hence, during adaptations the model can often remain unchanged, which significantly reduces the turnaround time during design iterations. The approach is illustrated and evaluated with a parking assistant application, which is tested on our\u00a0\u2026", "num_citations": "48\n", "authors": ["1523"]}
{"title": "Evolution of software product lines\n", "abstract": " A Software Product Line (SPL) aims to support the development of a family of similar software products from a common set of shared assets. SPLs represent a long-term investment and have a considerable life-span. In order to realize a return-on-investment, companies dealing with SPLs often plan their product portfolios and software engineering activities strategically over many months or years ahead. Compared to single system engineering, SPL evolution exhibits higher complexity due to the variability and the interdependencies between products. This chapter provides an overview on concepts and challenges in SPL evolution and summarizes the state of the art. For this we first describe the general process for SPL evolution and general modeling concepts to specify SPL evolution. On this base, we provide an overview on the state-of-the-art in each of the main process tasks which are migration towards\u00a0\u2026", "num_citations": "47\n", "authors": ["1523"]}
{"title": "Model-driven derivation of product architectures\n", "abstract": " Product Derivation is one of the central activities in Software Product Lines (SPL). One of the main challenges of the process of product derivation is dealing with complexity, which is caused by the large number of artifacts and dependencies between them. Another major challenge is maximizing development efficiency and reducing time-to-market, while at the same time producing high quality products. One approach to overcome these challenges is to automate the derivation process. To this end, this paper focuses on one particular activity of the derivation process; the derivation of the product-specific architecture and describes how this activity can be automated using a model-driven approach. The approach derives the product-specific architecture by selectively copying elements from the product-line architecture. The decision, which elements are included in the derived architecture, is based on a product\u00a0\u2026", "num_citations": "47\n", "authors": ["1523"]}
{"title": "User interface engineering for software product lines: the dilemma between automation and usability\n", "abstract": " Software Product Lines (SPL) are systematic approach to develop families of similar software products by explicating their commonalities and variability, eg, in a feature model. Using techniques from model-driven development, it is then possible to automatically derive a concrete product from a given configuration (ie, selection of features). However, this is problematic for interactive applications with complex user interfaces (UIs) as automatically derived UIs often provide limited usability. Thus, in practice, the UI is mostly created manually for each product, which results in major drawbacks concerning efficiency and maintenance, eg, when applying changes that affect the whole product family. This paper investigates these problems based on real-world examples and analyses the development of product families from a UI perspective. To address the underlying challenges, we propose the use of abstract UI models\u00a0\u2026", "num_citations": "42\n", "authors": ["1523"]}
{"title": "Integrating automated product derivation and individual user interface design\n", "abstract": " Software Product Lines, in conjunction with modeldriven product derivation, are successful examples for extensive automation and reuse in software development. However, often each single product requires an individual, tailored user interface of its own to achieve the desired usability. Moreover, in some cases (e.g., online shops, games) it is even mandatory that each product has an individual, unique user interface of its own. Usually, this results in manual user interface design independent from the model-driven product derivation. Consequently, each product configuration has to be mapped manually to a corresponding user interface which can become a tedious and error-prone task for large and complex product lines. This paper addresses this problem by integrating concepts from SPL product derivation and Model-based User Interface Development. This facilitates both (1) a systematic and semi-automated creation of user interfaces during product derivation while (2) still supporting for individual, creative design.", "num_citations": "39\n", "authors": ["1523"]}
{"title": "Automating product derivation in software product line engineering\n", "abstract": " This paper deals with deriving software products from a software product line (SPL) in an efficient and automated way. We present an approach that (1) represents the SPL with a set of integrated models, (2) specifies variability and configuration options for possible product variants and (3) automatically derives executable products with model transformations and aspect-oriented techniques. The approach is discussed with a sample SPL of scientific calculators.", "num_citations": "37\n", "authors": ["1523"]}
{"title": "Towards supporting feature configuration by interactive visualisation\n", "abstract": " Adopting a software product line approach allows companies to realise significant improvements in time-to-market, cost, productivity, and system quality. A fundamental problem in software product line engineering is the fact that a product line of industrial size can easily incorporate several thousand variation points. The scale and interdependencies can lead to variability management and product derivation tasks that are extremely complex to manage. This paper presents a metamodel that describes staged feature configuration and introduces a tool that illustrates the advantages of interactive visualisation in managing feature configuration, the first step in a product derivation process.", "num_citations": "37\n", "authors": ["1523"]}
{"title": "Visualization of variability and configuration options\n", "abstract": " When designing, constructing, and maintaining diverse and variable software systems, a key challenge is the complexity of systems. A potential approach to tackle this challenge are techniques from variability management and product line engineering to handle the diversity and variability. A key asset in variability management is a variability model, which explicitly specifies the commonalities and variability of a system and the constraints between variants. However, handling variability and configurations remains a challenge due to the complexity on a cognitive level as human engineers reach their limits in identifying, understanding, and using all relevant details. In this paper we address this issue by providing concepts for interactive visual tool support for the configuration of systems with the help of feature models. We discuss relevant principles from the area of information visualization and their\u00a0\u2026", "num_citations": "36\n", "authors": ["1523"]}
{"title": "Visualization techniques for application in interactive product configuration\n", "abstract": " In product line engineering (PLE) a major challenge is the complexity of artifacts that have to be handled. In real-world product lines, variability models can become large and complex comprising thousands of elements with hundreds of non-trivial dependencies. Visual and interactive techniques aim to reduce the (cognitive) complexity and support the user during challenging PLE tasks like product configuration. There are many visualization techniques described in the literature--eg, in Software Visualization--and some isolated techniques have been applied in PLE tools. Nevertheless, the full potential of visualization in the context of PLE has not been exploited so far. This paper provides an overview of (1) available visualization techniques and criteria to judge their benefits and drawbacks for product configuration,(2) which have been applied in product configuration in PLE, and (3) which could be beneficial to\u00a0\u2026", "num_citations": "35\n", "authors": ["1523"]}
{"title": "How to complete an interactive configuration process?\n", "abstract": " When configuring customizable software, it is useful to provide interactive tool-support that ensures that the configuration does not breach given constraints. But, when is a configuration complete and how can the tool help the user to complete it? We formalize this problem and relate it to concepts from non-monotonic reasoning well researched in Artificial Intelligence. The results are interesting for both practitioners and theoreticians. Practitioners will find a technique facilitating an interactive configuration process and experiments supporting feasibility of the approach. Theoreticians will find links between well-known formal concepts and a concrete practical application.", "num_citations": "34\n", "authors": ["1523"]}
{"title": "Applying visualisation techniques in software product lines\n", "abstract": " Software product lines of industrial size can easily incorporate thousands of variation points. This scale of variability can become extremely complex to manage resulting in a product development process that bears significant costs. One technique that can be applied beneficially in this context is visualisation. Visualisation is widely used in software engineering and has proven useful to amplify human cognition in data intensive applications. Adopting this technique in software product line engineering can help stakeholders in supporting essential work tasks and in enhancing their understanding of large and complex product lines.", "num_citations": "34\n", "authors": ["1523"]}
{"title": "Towards feature-driven planning of product-line evolution\n", "abstract": " Industries that successfully apply product line approaches often operate in markets that are well established and have a strategic perspective. Consequently, such organizations have a tendency towards long-term planning of products and product lines. Although there are numerous approaches for efficient product line engineering, there is surprisingly little support for a long-term, strategic perspective and an evolution of product lines. To address these challenges, we aim to integrate evolution into model-driven product line engineering. In particular, we explore how feature models can be applied to describe the evolution of product lines. The paper contributes (i) concepts for describing the evolution of product lines with feature models,(ii) a corresponding framework, which puts this into a bigger context and (iii) three scenarios that show how this framework can be applied. The concepts are motivated with examples\u00a0\u2026", "num_citations": "32\n", "authors": ["1523"]}
{"title": "Managing complexity and variability of a model-based embedded software product line\n", "abstract": " This paper presents a framework for model-based product lines of embedded systems. We show how to integrate model-based product line techniques into a consistent framework that can deal with large product lines as they are common in industry. The framework demonstrates the strengths of model-based techniques like abstraction, support for customised representations, and a high degree of automation. In particular, we provide the following contributions: (1) to shift existing product lines towards a model-based approach, we support the (semi-) automated extraction of models from existing requirement, test, and implementation artefacts; (2) to cope with the complexity of artefacts and their interrelations in industrial product lines, we support the generation of context-specific views. These views support developers, e.g., in analysing complex dependencies between different artefacts; (3) finally, we\u00a0\u2026", "num_citations": "30\n", "authors": ["1523"]}
{"title": "Is seeding a good strategy in multi-objective feature selection when feature models evolve?\n", "abstract": " Context: When software architects or engineers are given a list of all the features and their interactions (i.e., a Feature Model or FM) together with stakeholders\u2019 preferences \u2013 their task is to find a set of potential products to suggest the decision makers. Software Product Lines Engineering (SPLE) consists in optimising those large and highly constrained search spaces according to multiple objectives reflecting the preference of the different stakeholders. SPLE is known to be extremely skill- and labour-intensive and it has been a popular topic of research in the past years.Objective: This paper presents the first thorough description and evaluation of the related problem of evolving software product lines. While change and evolution of software systems is the common case in the industry, to the best of our knowledge this element has been overlooked in the literature. In particular, we evaluate whether seeding previous\u00a0\u2026", "num_citations": "24\n", "authors": ["1523"]}
{"title": "Model-driven planning and monitoring of long-term software product line evolution\n", "abstract": " In order to increase the level of efficiency and automation, we propose a conceptual model and corresponding tool support to plan and manage the systematic evolution of software-intensive systems, in particular software product lines (SPL). We support planning on a high abstraction level using decision-making concepts like goals, options, criteria, and rationale. We extend earlier work by broadening the scope in two dimensions: 1) in time, supporting continuous planning over long periods of time and many releases, and 2) in space, supporting traces from high-level decisions down to the implementation. We present a metamodel which allows to represent these concepts, corresponding prototypical tool support, and a first example case using data extracted from an open-source project, Eclipse SWT.", "num_citations": "22\n", "authors": ["1523"]}
{"title": "Using higher-order transformations to derive variability mechanism for embedded systems\n", "abstract": " The complexity of embedded systems can partly be handled by models and domain-specific languages (DSLs) like Matlab/Simulink. If we want to apply such techniques to families of similar systems, we have to describe their variability, i.e., commonalities and differences between the similar systems. Here, approaches from Software Product Lines (SPL) and variability modeling can be helpful. In this paper, we discuss three challenges which arise in this context: (1) We have to integrate mechanisms for describing variability into the DSL. (2) To efficiently derive products, we require techniques and tool-support that allow us to configure a particular product and resolve variability in the DSL. (3) When resolving variability, we have to take into account dependencies between elements, e.g., when removing Simulink blocks we have to remove the signals between these blocks as well. The approach presented\u00a0\u2026", "num_citations": "21\n", "authors": ["1523"]}
{"title": "Interactive visualisation to support product configuration in software product lines\n", "abstract": " Software Product Line engineering allows companies to realise significant improvements in time-to-market, cost, productivity, and system quality. One major difficulty with software product lines is that within industry there may exist thousands of variation points in a single product line. This scale of variability can become extremely complex to manage resulting in a product configuration process that bears significant costs. This paper presents a feature configuration meta-model and introduces a prototype tool that employs visualisation and interaction techniques to provide feature configuration functionality.", "num_citations": "20\n", "authors": ["1523"]}
{"title": "Mobile home automation-merging mobile value added services and home automation technologies\n", "abstract": " In this paper we study mobile home automation, a field that emerges from an integration of mobile application platforms and home automation technologies. In a conceptual introduction we first illustrate the need for such applications by introducing a two-dimensional conceptual model of mobility. Subsequently we suggest an architecture and discuss different options of how a user might access a mobile home automation service and the controlled devices. As another contribution we implemented a mobile home automation service, which we named REMOTILE. This prototype helps us to discuss typical components, such as modules that integrate various home automation devices.", "num_citations": "20\n", "authors": ["1523"]}
{"title": "A case study on variability in user interfaces\n", "abstract": " Software Product Lines (SPL) enable efficient derivation of products. SPL concepts have been applied successfully in many domains including interactive applications. However, the user interface (UI) part of applications has barely been addressed yet. While standard SPL concepts allow derivation of functionally correct UIs, there are additional non-functional requirements, like usability, which have to be considered. This paper presents a case study investigating UI variability found in variants of the commercial web-based information system HIS-GX/QIS. We analyze which aspects of a UI vary and to which degree. The results show that just tweaking the final UI (eg, using stylesheets) is not sufficient but there is a need for more customization which must be supported by, eg, UI-specific models.", "num_citations": "19\n", "authors": ["1523"]}
{"title": "Experiences of applying model-based analysis to support the development of automotive software product lines\n", "abstract": " In embedded systems in general and in automotive systems in particular the systematic reuse of existing assets is crucial. Moreover, companies in these domains often offer whole families of similar products. Hence, the application of product line engineering seems to be an obvious option.", "num_citations": "19\n", "authors": ["1523"]}
{"title": "Modeling rationale over time to support product line evolution planning\n", "abstract": " Software Product Lines are a strategic long-term investment and must evolve to meet new requirements over many years. In previous work, we have shown a model-driven approach (called EvoPL [21]) for planning and managing long-term evolution of product lines. It allows specifying historic and planned future evolution in terms of changes on feature model level. It provides benefits like abstraction, efficiency through automation, and the capability to perform analysis based on models.", "num_citations": "18\n", "authors": ["1523"]}
{"title": "Visual configuration in automotive software product lines\n", "abstract": " Software product line engineering has emerged as a viable and important software development paradigm in the automotive industry. It allows companies to realise significant improvements in time-to-market, cost, productivity, and system quality. One major difficulty with software product line engineering is related to the fact that a product line of industrial size can easily incorporate thousands of variation points. This scale of variability can become extremely complex to manage resulting in a product configuration process that bears significant costs. This paper introduces a meta-model and research tool that employs visualisation and interaction techniques to improve product configuration in high-variability product lines. The meta-model and techniques utilised are illustrated using an automotive restraint system example.", "num_citations": "18\n", "authors": ["1523"]}
{"title": "Multi front-end engineering\n", "abstract": " Multi Front-End Engineering (MFE) deals with the design of multiple consistent user interfaces (UI) for one application. One of the main challenges is the conflict between commonality (all front-ends access the same application core) and variability (multiple front-ends on different platforms). This can be overcome by extending techniques from model-driven user interface engineering.We present the MANTRA approach, where the common structure of all interfaces of an application is modelled in an abstract UI model (AUI) annotated with temporal constraints on interaction tasks. Based on these constraints we adapt the AUI, e.g., to tailor presentation units and dialogue structures for a particular platform. We use model transformations to derive concrete, platform-specific UI models (CUI) and implementation code. The presented approach generates working prototypes for three platforms (GUI, web, mobile\u00a0\u2026", "num_citations": "17\n", "authors": ["1523"]}
{"title": "Aspectual separation of feature dependencies for flexible feature composition\n", "abstract": " Aspect-oriented programming (AOP) provides effective mechanisms for improving the modularity of feature implementations. However, as features in general are not independent of each other, changes in the implementation of one feature may cause changes to or side effects in the implementation of other features.We address this challenge by separating feature dependencies from feature implementations using AOP techniques. Specifically, this paper contributes by providing aspect-oriented implementation patterns for feature dependencies (e.g. modification dependency and activation dependency). With the resulting clear separation of dependencies, this approach makes each feature implementation easier to understand and reuse. A product line of scientific calculator applications is used to demonstrate and evaluate the proposed approach.", "num_citations": "17\n", "authors": ["1523"]}
{"title": "Manually locating features in industrial source code: the search actions of software nomads\n", "abstract": " Expert software engineers working on large systems often need to perform feature location when moving to work in unfamiliar areas. We hypothesise that leveraging the system-specific knowledge of these may help to improve semi-automated feature location techniques. In order to assess and understand how software nomads perform manual feature location searches, two expert professional software engineers were observed in-vivo following a think-aloud protocol while performing manual feature location on a large-scale heterogeneous system. The nomads' search actions were found to be around twice as effective as those reported in previous studies. This cannot be explained by sophisticated use of tools or complex queries. We conclude that system rules and conventions are frequently used by experts when constructing feature location search terms.", "num_citations": "15\n", "authors": ["1523"]}
{"title": "Interactive configuration of embedded systems product lines\n", "abstract": " This paper addresses product configuration and product derivation in product lines of embedded systems. We show how domain-specific languages (DSLs), which are used to describe the implementation of the product, can be translated into configurable models with formal semantics. This facilitates, tool support during configuration including (1) side-byside visualization of features and corresponding implementation components, (2) automated reasoning to calculate consequences of the user\u2019s configuration decisions and (3) visual explanations for automatically calculated consequences. In addition, we discuss (4) how a completed configuration can be turned into a productspecific model in the domain-specific language, using negative variability and subsequent pruning of the implementation model. The approach is demonstrated for product lines of embedded systems using Simulink as an domain-specific language for the model-based engineering of embedded systems. We report on first evaluation results with a product line of parking assistant applications, including experimentation on a rapid prototyping platform with a 1:5 model car.", "num_citations": "15\n", "authors": ["1523"]}
{"title": "Using Flow Maps to Visualize Product Attributes during Feature Configuration.\n", "abstract": " During product configuration one of the main challenges is to understand the available options and the consequences of decisions, eg, in terms of functionality (features) and other characteristics (attributes) of the product. In this paper, we aim to provide support for understanding consequences of configuration decisions, focussing in particular on numerical product attributes resulting from these decisions. To address this challenge, we introduce \u201cFeature Flow Maps\u201d, an interactive visualization technique, which combines treeoriented feature models and flow map visualizations. The technique allows the application engineer to simultaneously (1) perform product configuration and (2) to visually understand the resulting numerical product attributes as well as their calculation. We discuss (i) the underlying meta-model including calculation rules, and (ii) the adaptation of flow map visualizations for application in feature models including the mapping of values to visual attributes.", "num_citations": "12\n", "authors": ["1523"]}
{"title": "Research tool to support feature configuration in software product lines\n", "abstract": " Configuring a large Software Product Line can be a complex and cognitively challenging task. The numerous relationships that can exist between different system elements such as features and their implementing artefacts can make the process time consuming and error prone. Appropriate tool support is key to the efficiency of the process and quality of the final product. We present our research prototype tool which takes a considered approach to feature configuration using visualisation techniques and aspects of cognitive theory. We demonstrate how it uses these to support fundamental feature configuration tasks.", "num_citations": "11\n", "authors": ["1523"]}
{"title": "Interactive techniques to support the configuration of complex feature models.\n", "abstract": " Whenever a software engineer derives a product from a product line, he has to resolve variability by making con guration decisions. This con guration process can become rather complex because of depen- dencies within the variability model and knock-on e ects and dependencies in other related artefacts. Because of the limited cognitive capacity of the human engineer, this complexity limits the ability of handling product lines with large con guration spaces. To address this problem we focus on techniques that support the interactive con guration of larger feature models, including (1) visual interaction with a formal reason- ing engine, (2) visual representation of multiple interrelated hierarchies, (3) indicators for con guration progress and (4)  ltering of visible nodes. The concepts are demonstrated within S2T2 Con gurator, an interactive feature con guration tool. The techniques are discussed and evaluated with feature models, however, we believe they can be generalised to other models that describe con guration choices, e.g., variability models and decision models.", "num_citations": "11\n", "authors": ["1523"]}
{"title": "Variability and evolution in systems of systems\n", "abstract": " In this position paper (1) we discuss two particular aspects of Systems of Systems, i.e., variability and evolution. (2) We argue that concepts from Product Line Engineering and Software Evolution are relevant to Systems of Systems Engineering. (3) Conversely, concepts from Systems of Systems Engineering can be helpful in Product Line Engineering and Software Evolution. Hence, we argue that an exchange of concepts between the disciplines would be beneficial.", "num_citations": "10\n", "authors": ["1523"]}
{"title": "A formal approach to reuse successful traceability practices in SPL projects\n", "abstract": " Software Product Line (SPL) Engineering has to deal with interrelated, complex models such as feature and architecture models, hence traceability is fundamental to keep them consistent. Commonly, a traceability schema must be started from scratch from project to project. To avoid that, useful traceability practices to solve day to day problems should be modeled explicitly and kept as part of the traceability knowledge gained, and then organizations can reduce time and effort in implementing traceability in new projects. This paper presents an approach for formalizing and reusing traceability practices in SPL Engineering. Using this formalization approach a traceability metamodel is defined, incorporating the particular traceability practices performed in SPL Engineering. Customized traceability methodologies for SPL projects will be systematically and formally generated from this metamodel. These resulting\u00a0\u2026", "num_citations": "10\n", "authors": ["1523"]}
{"title": "Mobile home automation: merging mobile value added services and home automation technologies\n", "abstract": " In this paper we study mobile home automation, a field that emerges from an integration of mobile application platforms and home automation technologies. We motivate our research and provide a conceptual introduction, which illustrates the need for such applications by a two-dimensional conceptual model of mobility. As a first steps towards a solution we take the user\u2019s perspective and discuss different options of how he might access a mobile home automation service and the controlled devices. Subsequently, we suggest a general system architecture for mobile home automation services and discuss related design decision. This design has been implemented in a research prototype, which we named Remotile. This helps us to discuss typical components, such as modules that integrate various home automation devices.", "num_citations": "10\n", "authors": ["1523"]}
{"title": "On lazy and eager interactive reconfiguration\n", "abstract": " An interactive configuration tool needs to provide feedback to the user on possible further decisions while respecting constraints of the product being configured. In the presence of a large number of product features, it reduces the configuration effort if users can start from a default configuration and adapt only those features that are important to them. Hence, rather than completing an empty configuration (empty product), it is easier to move from one complete configuration to another (from one product to another). This paper shows how to provide tool support for this approach to interactive configuration. Two types of algorithms, based on recent advancements in SAT technology, are introduced: lazy and eager. While the eager provides more information to the user, the lazy scales to configuration models with tens of thousands of features. This is confirmed by an experimental evaluation carried out with the\u00a0\u2026", "num_citations": "9\n", "authors": ["1523"]}
{"title": "View-supported rollout and evolution of model-based ecu applications\n", "abstract": " When applying model-based techniques to the engineering of embedded application software, a typical challenge is the complexity of dependencies between application elements. In many situations, eg, during rollout of products or in the evolution of product lines, the understanding of these dependencies is a key capability. In this paper, we discuss how model-based techniques, in particular, model transformations can help to reduce the complexity of such analysis tasks. To this end, we realised a representation of Simulink models based on the Eclipse Modeling Framework (EMF). The resulting integration allows us to apply various model-based frameworks from the Eclipse ecosystem. On this basis we developed a view that increases the visibility of functional dependencies, which otherwise would have been hidden due to a lack of abstraction in the native Simulink representation. The provided analysis\u00a0\u2026", "num_citations": "9\n", "authors": ["1523"]}
{"title": "Formal methods in software product lines: concepts, survey, and guidelines\n", "abstract": " Based upon our survey of the literature, software product lines is a fertile research field for the application of formal methods. Most computer scientists and software practitioners, including software product lines researchers, are not exploiting the powerful tools and techniques available in modern formal methods. This paper (i) summarizes the core of modern applied formal methods,(ii) discusses software product lines from a formal methods point-of-view,(iii) surveys the application of formal methods to software product lines research, and, most importantly,(iv) highlights key research opportunities and challenges for joint work between formal methods and software product lines researchers.", "num_citations": "9\n", "authors": ["1523"]}
{"title": "FLINTS: a tool for architectural-level modeling of features in software systems\n", "abstract": " A functional perspective of software systems, at the architectural level allows developers to maintain a consistent understanding of the relationships between different functionalities of their system as it evolves, and allows them to analyze the system at a functional-chunk level rather than at the traditional, structural levels more typically presented by IDEs.", "num_citations": "8\n", "authors": ["1523"]}
{"title": "Guidelines for managing requirements rationales\n", "abstract": " Requirements are identified and elaborated on the basis of stakeholders' decisions. The reasoning behind those decisions can be expressed as rationales. Systematic rationale management offers both short-term benefits, such as clearer requirements leading to fewer defects, and long-term benefits, such as simplified requirements evolution. However, little guidance exists for managing requirements rationales. This article presents guidelines to pragmatically capture, trace, maintain, and reuse such rationales. A list of questions augments the guidelines, improving their usability.", "num_citations": "8\n", "authors": ["1523"]}
{"title": "Variability and evolution in model-based engineering of embedded systems\n", "abstract": " In this paper, we report on techniques for variability and evolution in Model-based Engineering of Embedded Systems. The techniques are based on an integration of domain-specific languages for embedded systems with model-driven techniques for Software Product Lines. In particular, we discuss (1) product configuration with interactive tools, (2) product derivation with model transformations, and (3) first steps towards feature-oriented evolution planning.", "num_citations": "8\n", "authors": ["1523"]}
{"title": "Feature-modeling and aspect-oriented programming: Integration and automation\n", "abstract": " Feature modeling is an essential activity for modeling and managing the variability of a software product line. On the other hand, aspect-oriented programming provides effective means for modularizing feature implementation. Although current AOP tools (e.g., AJDT) provide a mechanism for switching aspect modules on and off to configure a product, this becomes infeasible in the context of large-scale product lines with thousands of variations. In this paper, we describe how feature modeling can be integrated with aspect-oriented programming to perform automated product derivation efficiently and effectively in the context of large-scale product lines.", "num_citations": "8\n", "authors": ["1523"]}
{"title": "A feature model of actor, agent, and object programming languages\n", "abstract": " This paper presents first steps towards a feature model, which can be used to compare actor-oriented, agent-oriented, and object-oriented programming languages. The feature model is derived from the existing literature on general concepts of programming, and validated against Erlang, Jason, and Java. The model acts as a tool to assist practitioners in selecting the most appropriate programming language for a given task, and is expected to form the basis of further high-level comparative studies in this area.", "num_citations": "6\n", "authors": ["1523"]}
{"title": "Towards a contingency based approach to Web engineering\n", "abstract": " In this paper, we introduce our preliminary work in developing an analytic framework which allows us to contrast the problem of developing \u2018web-like applications\u2019(WLAs) against our accumulated understanding of software systems development. The analytic framework will form a basis for the development of a contingent approach to selection of methods, tools and techniques, then integrating these within a suitable methodological process, for WLA development. This approach allows us to make use of our existing understanding of software engineering methodology, while alleviating the danger of relying on the consequences of assumptions within that literature which do not hold, or which hold imperfectly, in the domain of WLA development. We illustrate how our approach could provide structure for the analysis of the characteristics of the potential user base of a WLA vis-\u00e0-vis the user base for a conventional software system.", "num_citations": "6\n", "authors": ["1523"]}
{"title": "Guidance for design rationale capture to support software evolution\n", "abstract": " Documenting design rationale (DR) helps to preserve knowledge over long time to diminish software erosion and to ease maintenance and refactoring. However, use of DR in practice is still limited. One reason for this is the lack of concrete guidance for capturing DR. This paper provides a first step towards identifying DR questions that can guide DR capturing and discusses required future research.Introduction Software continuously evolves. This leads over time to software erosion resulting in significant costs when dealing with legacy software. Documenting design rationale (DR) can help developers to deal with the complexity of software maintenance and software evolution [4, 6]. DR reflects the reasoning (ie, the \u201cWhy?\u201d) underlying a certain design. It requires designers to explicate their tacit knowledge about the given context, their intentions, and the alternatives considered [1]. This helps on the one hand to increase software quality and prevent software erosion based on capabilities to 1) enable communication amongst team members [6], 2) support impact analyses [7], and 3) prevent engineers from repeating errors or entering dead-end paths [1]. On the other hand, DR supports refactoring long-living systems to perform the leap towards new platforms or technologies without introducing errors due to missing knowledge about previous decisions. In general, once documented, DR can support software development in many ways, including debugging, verification, development automation or software modification [4]. This has been confirmed in industrial practise (eg,[2, 5]).", "num_citations": "5\n", "authors": ["1523"]}
{"title": "A 3d visualisation to enhance cognition in software product line engineering\n", "abstract": " Software Product Line (SPL) Engineering is a development paradigm where core artefacts are developed and subsequently configured into different software products dependent on a particular customer\u2019s requirements. In industrial product lines, the scale of the configuration (variability management) can become extremely complex and very difficult to manage. Visualisation is widely used in software engineering and has proven useful to amplify cognition in data intensive applications. Adopting this approach within software product line engineering can help stakeholders in supporting essential work tasks by enhancing their understanding of large and complex product lines. In this paper we present our research into the application of visualisation techniques and cognitive theory to address SPL complexity and to enhance cognition in support of the SPL engineering processes. Specifically we present a 3D\u00a0\u2026", "num_citations": "5\n", "authors": ["1523"]}
{"title": "Variabilit\u00e4t im modellbasierten Engineering von eingebetteten Systemen\n", "abstract": " Die modellbasierte Entwicklung eingebetteter Systeme (MBE) mit Hilfe von Werkzeugen wie Simulink ist eine bekannte Vorgehensweise und in der industriellen Praxis weit verbreitet. Wenn diese Vorgehensweise auf eine Menge gleichartiger Systeme angewandt wird, k\u00f6nnen Ans\u00e4tze aus der modellbasierten Entwicklung und dem Produktlinien-Engineering kombiniert werden. Dabei stellen sich jedoch Herausforderungen bez\u00fcglich der Handhabung von Komplexit\u00e4t und Integration bei bestehenden Werkzeugketten. In diesem Artikel diskutieren wir, wie Konzepte und Techniken f\u00fcr modellgetriebene Software-Entwicklung dazu eingesetzt werden k\u00f6nnen, um diese Herausforderungen zu bew\u00e4ltigen. Wir pr\u00e4sentieren unseren Ansatz einschlie\u00dflich Techniken zur Integration von Simulink, Eclipse-basierten Frameworks und Variabilit\u00e4tsmechanismen f\u00fcr Simulink-Modelle. Wir diskutieren den vorgestellten Ansatz und berichten \u00fcber erste Erfahrungen aus der Erprobung mit einem autonomen Einparkassistenten sowie einem Rapid-Control-Prototyping System.", "num_citations": "5\n", "authors": ["1523"]}
{"title": "Preliminary study of multi-objective features selection for evolving software product lines\n", "abstract": " When dealing with software-intensive systems, it is often beneficial to consider families of similar systems together. A common task is then to identify the particular product that best fulfils a given set of desired product properties. Software Product Lines Engineering (SPLE) provides techniques to design, implement and evolve families of similar systems in a systematic fashion, with variability choices explicitly represented, e.g., as Feature Models. The problem of picking the \u2018best\u2019 product then becomes a question of optimising the Feature Configuration. When considering multiple properties at the same time, we have to deal with multi-objective optimisation, which is even more challenging.                 While change and evolution of software systems is the common case, to the best of our knowledge there has been no evaluation of the problem of multi-objective optimisation of evolving Software Product Lines. In\u00a0\u2026", "num_citations": "4\n", "authors": ["1523"]}
{"title": "Modeling advanced concepts of interactive multimedia applications\n", "abstract": " The initial vision associated with multimedia is to achieve user interfaces (UI) which are highly interactive, intelligent, usable, and entertaining. Although early multimedia applications did not always fulfill these expectations, today's applications come much closer towards this vision. Examples are Rich Internet Applications like Google Maps, Edutainment Systems, or new UIs in the context of Ubiquitous Computing. The key difference is the increased dynamics of the UI (media objects are created/modified depending to the current context) and the tighter integration of UI elements with the application logic. Although this dynamism allows new forms of applications, it is problematic when engineering such applications: Existing multimedia modeling approaches focus mainly on the spatio-temporal integration of media objects. However, they hardly allow modeling the integration with the application logic or generic media\u00a0\u2026", "num_citations": "4\n", "authors": ["1523"]}
{"title": "Feature dependencies have to be managed throughout the whole product life-cycle\n", "abstract": " In this position paper, we discuss feature dependencies as one major challenge in product line engineering. We suggest that (1) feature dependencies should be treated as first class entities and (2) dependencies in various artefacts across the software life cycle should be mapped onto each other.", "num_citations": "4\n", "authors": ["1523"]}
{"title": "Capturing the requirements for multiple user interfaces\n", "abstract": " In this paper we describe MANTRA, a model-driven approach for the development of multiple consistent user interfaces for one application. The common requirements of all these user interfaces are captured in an abstract UI model (AUI) which is annotated with constraints on the dialogue flow. We exemplify all further steps along a well known application scenario in which a user queries train connections from a simple timetable service. We consider in particular how the user interface can be adapted on the AUI level by deriving and tailoring dialogue structures which take into account constraints imposed by front-end platforms or inexperienced users. With this input we use model transformations to derive concrete, platform-specific UI models (CUI). These can be used to generate implementation code for several UI platforms including GUI applications, dynamic websites and mobile applications. The user interfaces are integrated with a multi tier application by referencing WSDL-based (Web Service Description Language) interface descriptions. Finally, we discuss how our approach can be extended to include voice interfaces. This imposes special challenges as these interfaces tend to be structurally different from visual platforms and have to be specified using speech-input grammars.", "num_citations": "4\n", "authors": ["1523"]}
{"title": "MILPIBEA: Algorithm for multi-objective features selection in (evolving) software product lines\n", "abstract": " Software Product Lines Engineering (SPLE) proposes techniques to model, create and improve groups of related software systems in a systematic way, with different alternatives formally expressed, eg, as Feature Models. Selecting the \u2018best\u2019software system (s) turns into a problem of improving the quality of selected subsets of software features (components) from feature models, or as it is widely known, Feature Configuration. When there are different independent dimensions to assess how good a software product is, the problem becomes even more challenging\u2013it is then a multi-objective optimisation problem. Another big issue for software systems is evolution where software components change. This is common in the industry but, as far as we know, there is no algorithm designed to the particular case of multi-objective optimisation of evolving software product lines. In this paper we present MILPIBEA, a novel hybrid algorithm which combines the scalability of a genetic algorithm (IBEA) with the accuracy of a mixed-integer linear programming solver (IBM ILOG CPLEX). We also study the behaviour of our solution (MILPIBEA) in contrast with SATIBEA, a state-of-the-art algorithm in static software product lines. We demonstrate that MILPIBEA outperforms SATIBEA on average, especially for the most challenging problem instances, and that MILPIBEA is the one that continues to improve the quality of the solutions when SATIBEA stagnates (in the evolving context).", "num_citations": "3\n", "authors": ["1523"]}
{"title": "Decision spaces in product lines, decision analysis, and design exploration: an interdisciplinary exploratory study\n", "abstract": " Context. From recent works on product properties resulting from configurations and the optimisation of these properties, one comes quickly to more complex challenges such as multi-objective optimisation, conflicting objectives, multiple stakeholders, and conflict resolution. The intuition is that Software Product Line Engineering (SPLE) can draw from other disciplines that deal with decision spaces and complex decision scenarios.Objectives. We aim to (1) explore links to such disciplines,(2) systematise and compare concepts, and (3) identify opportunities, where SPLE approaches can be enriched.Method. We undertake an exploratory study: Starting from common SPLE activities and artefacts, we identify aspects where we expect to find corresponding counterparts in other disciplines. We focus on Multiple Criteria Decision Analysis (MCDA), Multi-Objective Optimisation (MOO), and Design Space Exploration (DSE\u00a0\u2026", "num_citations": "3\n", "authors": ["1523"]}
{"title": "S2T2-Configurator: interactive support for configuration of large feature models\n", "abstract": " S2T2-Configurator is a visual tool for con guration of fea- ture models. In this tool paper, we focus on interactive techniques that support the con guration of large and complex models.", "num_citations": "3\n", "authors": ["1523"]}
{"title": "Mastering Scale and Complexity in Software Reuse\n", "abstract": " The use of general descriptive names, registered names, trademarks, service marks, etc. in this publication does not imply, even in the absence of a specific statement, that such names are exempt from the relevant protective laws and regulations and therefore free for general use. The publisher, the authors and the editors are safe to assume that the advice and information in this book are believed to be true and accurate at the date of publication. Neither the publisher nor the authors or the editors give a warranty, express or implied, with respect to the material contained herein or for any errors or omissions that may have been made. The publisher remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.", "num_citations": "2\n", "authors": ["1523"]}
{"title": "A discussion of three visualisation approaches to providing cognitive support in variability management\n", "abstract": " Variability management in software intensive systems can be a complex and cognitively challenging process. Configuring a Software Product Line with thousands of variation points in order to derive a specific product variant is an example of such a challenge. Each configurable feature can have numerous relationships with many other elements within the system. These relationships can impact greatly on the overall configuration process. Understanding the nature and impact of these relationships during configuration is key to the quality and efficiency of the configuration process. In this paper we present an overview of three visual approaches to this configuration which utilise information visualisation techniques and aspects of cognitive theory to provide stakeholder support. Using an industry example, we discuss and compare the approaches using a set of fundamental configuration tasks.", "num_citations": "2\n", "authors": ["1523"]}
{"title": "Featureoriented modelling of product line evolution\n", "abstract": " Product line engineering (PLE) needs to consider evolution and strategic planning of evolution steps right from the beginning. If evolution is not taken care of, the benefits of model-driven PLE (eg, productivity gains, strategic reuse, complexity handling) will be difficult to achieve. In this paper we propose an approach for strategic planning and management of feature model evolution. Our approach includes a modelling framework that describes evolutionary changes of product lines using extended feature models (called EvoFM), evolution plans, and fragments of models. Different versions of a feature model along the evolution path are considered to be \u201cproducts\u201d that can be configured using the EvoFM. By using feature models to document the evolution plan of feature models, we demonstrate an elegant solution to dealing with long term planning of changes to feature models.", "num_citations": "2\n", "authors": ["1523"]}
{"title": "Reparation in Evolutionary Algorithms for Multi-objective Feature Selection in Large Software Product Lines\n", "abstract": " Software Product Lines Engineering is the area of software engineering that aims to systematise the modelling, creation and improvement of groups of interconnected software systems by formally expressing possible alternative products in the form of Feature Models. Deriving a software product/system from a feature model is called Feature Configuration. Engineers select the subset of features (software components) from a feature model that suits their needs, while respecting the underlying relationships/constraints of the system\u2013which is challenging on its own. Since there exist several (and often antagonistic) perspectives on which the quality of software could be assessed, the problem is even more challenging as it becomes a multi-objective optimisation problem. Current multi-objective feature selection in software product line approaches (eg, SATIBEA) combine the scalability of a genetic algorithm (IBEA) with\u00a0\u2026", "num_citations": "1\n", "authors": ["1523"]}
{"title": "Scalable Software Testing and Verification for Industrial-Scale Systems: The Challenges\n", "abstract": " In this position paper, we argue that more collaborative research is needed to increase the use of research-led verification and testing techniques in industrialscale projects. We focus on the a) practical applicability and scalability of verification and testing techniques in industrial projects, and b) to autonomous systems. We identify the challenges involved and bring forward some initial suggestions.", "num_citations": "1\n", "authors": ["1523"]}
{"title": "Visualizing software variability\n", "abstract": " Many of the expected benefits of software product line (SPL) engineering rely on an assumption that the additional up-front effort in domain engineering that establishes the product line produces a long-term benefit. The expectation is that deriving products from a product line during application engineering is more efficient than traditional single system development.", "num_citations": "1\n", "authors": ["1523"]}
{"title": "SPLGraph: towards a graph-based formalism for software product lines\n", "abstract": " This paper presents SPLGraph a graph-based model for Software Product Lines, including (1) a formal definition;(2) an algorithm that applies configuration decisions to an SPLGraph thus yielding a product specific graph;(3) a set of patterns for typical SPLGraph structures, such as Boolean operators, reuse of expressions, named configurations, optional and alternative features and staged configuration; and (4) an algorithm that infers product configuration per a variability point.", "num_citations": "1\n", "authors": ["1523"]}
{"title": "Visualising inter-model relationships in software product lines.\n", "abstract": " Within Software Product Line (SPL) Engineering,feature modelling is a prevalent mechanism for managing variability but is insufficient for describing it as a whole and for relating its different aspects. Other modelling techniques such as Decision modelling and Component modelling provide different views of the underlying SPL data. To facilitate certain approaches in product line engineering, such as toolsupported product derivation or automated analyses we need to describe the SPL with multiple inter-related models. In this paper, we discuss how to represent the relationships that exist between those models and present an approach for communicating the relationships using visualisation techniques. We also discuss the visualisation through example scenarios and argue its benefits.", "num_citations": "1\n", "authors": ["1523"]}
{"title": "Mobile RFID management-an application scenario on the handling of industrial liquid containers\n", "abstract": " This paper deals with concepts, challenges and design alternatives for the application of RFID technology within an industry context. We are especially interested in the combination of RFID technology with positioning information and mobile networks. To discuss these topics, we introduce an application scenario concerning the handling of industrial liquid containers along an integrated supply chain. First we describe the traditional approach and some of the problems involved with it. We then contrast this with an improved process using RFID technology. The scenario is augmented by a discussion of an appropriate application prototype. This paper thus contributes to the debate on RFID and highlights the challenges of integrating various mobile technologies in order to efficiently support supply chain processes.", "num_citations": "1\n", "authors": ["1523"]}