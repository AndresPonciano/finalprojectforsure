{"title": "Testing object-oriented systems: models, patterns, and tools\n", "abstract": " More than ever, mission-critical and business-critical applications depend on object-oriented (OO) software. Testing techniques tailored to the unique challenges of OO technology are necessary to achieve high reliability and quality.\" Testing Object-Oriented Systems: Models, Patterns, and Tools\" is an authoritative guide to designing and automating test suites for OO applications. This comprehensive book explains why testing must be model-based and provides in-depth coverage of techniques to develop testable models from state machines, combinational logic, and the Unified Modeling Language (UML). It introduces the test design pattern and presents 37 patterns that explain how to design responsibility-based test suites, how to tailor integration and regression testing for OO code, how to test reusable components and frameworks, and how to develop highly effective test suites from use cases. Effective testing must be automated and must leverage object technology. The author describes how to design and code specification-based assertions to offset testability losses due to inheritance and polymorphism. Fifteen micro-patterns present oracle strategies--practical solutions for one of the hardest problems in test design. Seventeen design patterns explain how to automate your test suites with a coherent OO test harness framework. The author provides thorough coverage of testing issues such as: The bug hazards of OO programming and differences from testing procedural code How to design responsibility-based tests for classes, clusters, and subsystems using class invariants, interface data flow models, hierarchic state machines, class\u00a0\u2026", "num_citations": "2470\n", "authors": ["1058"]}
{"title": "Design for testability in object-oriented systems\n", "abstract": " estability is the relative ease and expense of revealing software faults. This article maps the testability terrain for object-oriented development to assist the reader in finding relatively shorter and cheaper paths to high reliability. Software testing adds value by revealing faults. It is fundamentally an economic problem characterized by a continuum between two goals. A reliability-dtiven process uses testing to produce evidence that a pre-release reliability goal has been met. Time and money are expended on testing until the reliability goal is attained. This view of testing is typically associated with stringent, quantifiable reliability requirements. Other things being equal, a more testable system will reduce the time and cost needed to meet reliability goals. A resource-limited process views testing as a way to remove as many rough edges from a system as time or money permits. Testing continues until available test\u00a0\u2026", "num_citations": "451\n", "authors": ["1058"]}
{"title": "Testing object\u2010oriented software: a survey\n", "abstract": " Research and practitioner literature on testing object-oriented software published up to the end of 1994 is summarized. The contribution of each source to eight topics presented:(1) abstract data type verification and testing as it relates to object-oriented testing;(2) testing theory\u2014fault hypotheses for object-oriented software and adequate testing (several fault taxonomies are presented);(3) automatic model validation\u2014techniques and tools for testing executable object-oriented representations;(4) test case design\u2014heuristic and formal techniques to develop test cases from object-oriented representations and implementations;(5) testability\u2014factors in controllability and observability;(6) test automation\u2014assertions, state manipulation, comparators, object identity and built-in tests;(7) test process strategies to organize and manage the activity of testing object-oriented implementations; and (8) experience reports\u00a0\u2026", "num_citations": "207\n", "authors": ["1058"]}
{"title": "Testing object-oriented systems: a status report\n", "abstract": " (Note: This article first appeared in the April 1994 American Programmer and was reprinted in April 1995 CrossTalk with minor revisions. A paragraph on FREE has been added here. While practice and research have made progress since this article was first published, the general conclusions are still correct. RVB.)", "num_citations": "78\n", "authors": ["1058"]}
{"title": "Method and system for evaluating wireless applications\n", "abstract": " The present invention provides a method and system for evaluating wireless applications utilizing a test console, an application model builder, a test repository manager, a simulator, a test controller, test agents, and a comparator in order to test the performance of a plurality of mobile user devices on a wireless network.", "num_citations": "74\n", "authors": ["1058"]}
{"title": "Can a manufacturing quality model work for software?\n", "abstract": " Six-sigma (i.e. 6 standard deviations) is a parameter that is used in statistical models of the quality of manufactured goods (including computer hardware). It also serves as a slogan that suggests high quality. Some attempts have been made in the past to apply 6-sigma to software quality measurement. Software engineers often look to hardware analogies to suggest techniques that are useful in building, maintaining or evaluating software systems. The author explains why the 6-sigma approach to hardware quality simply does not work when applied to software quality.", "num_citations": "64\n", "authors": ["1058"]}
{"title": "Model-based testing: where does it stand?\n", "abstract": " MBT has positive effects on efficiency and effectiveness, even if it only partially fulfills high expectations.", "num_citations": "56\n", "authors": ["1058"]}
{"title": "Object-oriented software testing\n", "abstract": " Object-oriented software offers power and many other added features, but may also be prone to errors and failures. The complexity of the object-oriented environment also makes software testing a complex task. Moreover, extensive testing is required if components of the system are to be offered for reuse. A possible solution lies in the use of the very-large-scale integration strategy. Here, components are provided with standard built-in test capabilities to automatically exercise the component.", "num_citations": "37\n", "authors": ["1058"]}
{"title": "2011 model-based testing user survey: Results and analysis\n", "abstract": " The industrial use of model-based testing (MBT) started a little over 15 years ago with the introduction of the Test Master product. 1 Put simply, model-based testing is the use of a software system to represent aspects of a system under test (a model) to generate test cases. Please refer to Selected Publications for additional information.", "num_citations": "24\n", "authors": ["1058"]}
{"title": "Modal testing strategies for OO software\n", "abstract": " The essential challenge in testing object-oriented software is to craft a practical test suite that exercises enough combinations of message sequence and state interactions to provide sufficient confidence. These interactions are often subtle and complex and therefore error-prone. If all classes were alike, it might be enough to devise tests based either on message sequence or state. Sometimes this suffices, but usually both views are needed. The notion of class modality characterizes class behavior differences to indicate an appropriate test strategy.", "num_citations": "20\n", "authors": ["1058"]}
{"title": "Object-oriented testing: myth and reality\n", "abstract": " There are many effective approaches to testing object-oriented software (see biblography.) However, most have been recently developed and are not yet widely disseminated. As software developers seem to abhor a conceptual vacuum, some myths about testing objects have formed. I've heard these myths my testing seminars, in discussions with clients, and seen a few in print.A common result of this testing mythology is that testing-by-poking-around becomes accepted practice. The developer tries to demonstrate that objects they've produced do something useful without crashing. They may even ask someone else to\" break\" them. The breaker tries a few dirty tricks. Either effort may reveal some faults. The faults are repaired and the system is then deemed\" tested\".", "num_citations": "11\n", "authors": ["1058"]}
{"title": "KB/RMS: AN INTELLIGENT ASSISTANT FOR REQUIREMENT DEFINITION\n", "abstract": " In this paper, we present a conceptual framework and a system model for an intelligent assistant for requirement definition, KB/RMS. The requirement definition process is characterized by the Requirement Context Model. Informal and formal methods for requirement definition are considered in the light of this model, which serves as the logical schema for the KB/RMS database. We summarize conventional and knowledge-based system support for requirement definition. The use of natural language processing, a semantic model of the problem and solution spaces, domain and technology models, inference driven augmentation, validation, and verification of the semantic model is discussed. Finally, we present the production of design representations from the augmented semantic model.", "num_citations": "11\n", "authors": ["1058"]}
{"title": "Six sigma: Hardware si, software no\n", "abstract": " Six sigma is a parameter used in statistical models of the quality of manufactured goods. It is also used as a slogan suggesting high quality. Some attempts have been made to apply 6 sigma to software quality measurement. This essay explains what 6 sigma means and why it is inappropriate for measuring software quality.", "num_citations": "7\n", "authors": ["1058"]}
{"title": "Object technology. A virtual roundtable\n", "abstract": " Heralded by many as a promising solution to software complexity, object technology is coming into its own. This article explores some recent trends, including distributed objects, object-oriented databases (OODBs), parallel computing, software testing and theoretical foundations.< >", "num_citations": "6\n", "authors": ["1058"]}
{"title": "The advanced mobile application testing environment\n", "abstract": " The Advanced Mobile Application Testing Environment (AMATE) combines model-based test generation and evaluation, controllable RF airlink variation, and a robust standards-based distributed test harness for end-to-end testing of distributed mobile applications. This report summarizes AMATE capabilities.", "num_citations": "5\n", "authors": ["1058"]}
{"title": "Testing Object-Oriented Software\n", "abstract": " Testing Object-Oriented Software | Proceedings of the Tools-23: Technology of Object-Oriented Languages and Systems ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleProceedingsTOOLS '97Testing Object-Oriented Software Article Testing Object-Oriented Software Share on Author: Robert V. Binder View Profile Authors Info & Affiliations Publication: TOOLS '97: Proceedings of the Tools-23: Technology of Object-Oriented Languages and SystemsJuly 1997 1citation 0 Downloads Metrics Total Citations1 Total Downloads0 Last 12 Months0 Last 6 weeks0 Get Citation Alerts New Citation Alert added! This alert has been successfully \u2026", "num_citations": "5\n", "authors": ["1058"]}
{"title": "Optimal Scheduling for Combinatorial Software Testing and Design of Experiments\n", "abstract": " Test case ordering can have significant effects on the cost, duration, or safety of a test suite. As the total number of possible orderings is  n!  for  n  test cases, finding a cost-optimal ordering can be a non-trivial problem. Combinatorial algorithms that generate  t -wise test suites either explicitly randomize sequence or order them as a side effect of the algorithm. Design of experiments uses similar strategies to select test configurations and requires sequence randomization for statistical validity. Both approaches produce test sequences that are very likely sub-optimal with respect to cost. This paper presents an integer programming model that minimizes the total cost of a test sequence and notes, for experimental design, how statistical validity may be preserved for a non-random order.", "num_citations": "4\n", "authors": ["1058"]}
{"title": "Microsoft's protocol documentation program: interoperability testing at scale\n", "abstract": " A discussion with Nico Kicillof, Wolfgang Grieskamp, and Bob Binder.", "num_citations": "4\n", "authors": ["1058"]}
{"title": "The percolation pattern\n", "abstract": " The percolation pattern | C++ Report ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search C++ Report Periodical Home Latest Issue Archive Authors Affiliations Award Winners More HomeBrowse by TitlePeriodicalsC++ ReportVol. , No. The percolation pattern article The percolation pattern Share on Author: Robert V. Binder profile image Robert V. Binder View Profile Authors Info & Affiliations Publication: C++ ReportMay 1999 0citation Get Citation Alerts New Citation Alert added! This alert has been successfully added and will be sent to: You will be notified whenever a record that you have chosen has been cited. To \u2026", "num_citations": "4\n", "authors": ["1058"]}
{"title": "Developing a test budget\n", "abstract": " This month\u2019s column outlines an answer to a question I\u2019m asked in every one of my testing seminars: how much time should we budget for testing in object-oriented development? There is no one-size-fits-all answer to this question. Ideally, we\u2019d like to test until we have very good evidence that our system is sufficiently reliable for its intended use. But an open-ended testing budget is rare. Development budgets are nearly always constrained, so this question can be restated as how much of our budget should be spent on testing? In particular, with object-oriented development, we want to know how much testing effort should be allocated to cycles within an iterative incremental process. The following analysis yields a testing budget for object-oriented development.", "num_citations": "4\n", "authors": ["1058"]}
{"title": "2014 Model-based Testing User Survey: Results\n", "abstract": " The purpose of the survey was to collect data and experience on the usage of Model-based Testing. We wanted to learn how MBT users view the efficiency and effectiveness of the approach, what works, and what does not work. Some questions were more technical and aimed at validating a common MBT classification scheme.", "num_citations": "3\n", "authors": ["1058"]}
{"title": "Application Debugging: An MVS Abend Handbook for COBOL, Assembly, PL/I, and FORTRAN Programmers\n", "abstract": " \u201cThis book contains information and techniques needed to debug application programs that have abended (abnormally ended) under IBM\u2019s MVS operating systems.\u201d Preface.", "num_citations": "3\n", "authors": ["1058"]}
{"title": "Agile High Assurance: Testing re-imagined\n", "abstract": " MBT for Program Managers Page 1 AGILE HIGH ASSURANCE: TESTING RE-IMAGINED Robert V. Binder Carnegie-Mellon University Software Engineering Institute Hungarian Software Testing Forum, 5th Annual International Conference Budapest November 18, 2015 \u00a9 Robert V. Binder, 2015. All Rights Reserved. Any opinions, findings, and conclusion or recommendations expressed in this material are those of the author and do not necessarily reflect the view of Carnegie-Mellon University, the Software Engineering Institute, or the US Government.. Page 2 Traditional role of software testing \u2022 Derivative \u2022 Reactive \u2022 Critical Page 3 Software Testing Reimaged \u2022 Quality Attribute Engineering \u2022 Risk Reduction \u2022 Trust Producer Page 4 Overview \u2022Present day risk drivers \u2022Agile Testing Practices \u2022Agile High Assurance \u2022Conclusion Page 5 What is driving software risk? \u2022 Oceans of code \u2022 Cyber insecurity \u2022 Unprecedented \u2026", "num_citations": "2\n", "authors": ["1058"]}
{"title": "Verifying class associations\n", "abstract": " Verifying class associations | Object Magazine ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Object Magazine Periodical Home Latest Issue Archive Authors Affiliations Award Winners More HomeBrowse by TitlePeriodicalsObject MagazineVol. , No. Verifying class associations article Verifying class associations Share on Author: Robert Binder View Profile Authors Info & Affiliations Publication: Object MagazineNovember 1997 weeks0 Get Citation Alerts New Citation Alert added! This alert has been successfully added and will be sent to: You will be notified whenever a record that you have chosen has been cited. \u2026", "num_citations": "1\n", "authors": ["1058"]}