{"title": "Software engineering issues for mobile application development\n", "abstract": " This paper provides an overview of important software engineering research issues related to the development of applications that run on mobile devices. Among the topics are development processes, tools, user interface design, application portability, quality, and security.", "num_citations": "766\n", "authors": ["845"]}
{"title": "Tool integration in software engineering environments\n", "abstract": " This paper has described the various types of tool integration with the goal of illustrating how diverse tools can be effectively integrated into CASE environments. Issues of data integration, control integration, and presentation integration may be viewed as orthogonal and defining a three-dimensional space in which tool integration occurs. The absence of standards has been shown to be a barrier to integration, as various tool developers remain unable to reach agreement on the appropriate point(s) in this space at which integration should occur. As a result, experience with tool integration has been largely at a tool-to-tool level, with little use of standard tool integration mechanisms.             Development of the Software through Pictures environment has provided valuable experience with these issues, and they have served to influence forthcoming changes to the structure of the tools and the overall\u00a0\u2026", "num_citations": "445\n", "authors": ["845"]}
{"title": "Extending state transition diagrams for the specification of human\u2013computer interaction\n", "abstract": " User Software Engineering is a methodology for the specification and implementation of interactive information systems. An early step in the methodology is the creation of a formal executable description of the user interaction with the system, based on augmented state transition diagrams. This paper shows the derivation of the USE transition diagrams based on perceived shortcomings of the \"pure\" state transition diagram approach. In this way, the features of the USE specification notation are gradually presented and illustrated. The paper shows both the graphical notation and the textual equivalent of the notation, and briefly describes the automated tools that support direct execution of the specification.", "num_citations": "288\n", "authors": ["845"]}
{"title": "Toward a discipline of software engineering\n", "abstract": " Despite rapid changes in computing and software development, some fundamental ideas have remained constant. This article describes eight such concepts that together constitute a viable foundation for a software engineering discipline: abstraction, analysis and design methods and notations, user interface prototyping, modularity and architecture, software life cycle and process, reuse, metrics, and automated support.", "num_citations": "172\n", "authors": ["845"]}
{"title": "The object-oriented structured design notation for software design representation\n", "abstract": " The development of a notation that supports key software structure concepts and design principles, is discussed. The notation should let designers represent modules, interfaces, hidden information, concurrency, message passing, invocation of operations and overall program structure in a comprehensive way. The authors examine three categories of approach to architectural design: object-oriented design, functional decomposition, and data structure design. They present their design notation, called object-oriented structured design (OOSD) which achieves the above-stated goal. They discuss classes in OOSD, its handling of asynchronous processes, and its design methods and rules. Automated support for OOSD is considered.< >", "num_citations": "167\n", "authors": ["845"]}
{"title": "Developing interactive information systems with the user software engineering methodology\n", "abstract": " User software engineering (USE) is a methodology, supported by automated tools, for the systematic development of interactive information systems. The USE methodology gives particular attention to effective user involvement in the early stages of the software development process, concentrating on external design and the use of rapidly created and modified prototypes of the user interface. The USE methodology is supported by an integrated set of graphically based tools. The USE methodology and the tools that support it are described.", "num_citations": "146\n", "authors": ["845"]}
{"title": "Tutorial on software design techniques\n", "abstract": " Basic concepts; Analysis and specification techniques; Architectural desogn techniques; Data design techniques; Detailed design techniques; Management issues; Annotated software design bibliography.", "num_citations": "128\n", "authors": ["845"]}
{"title": "A graphical, extensible integrated environment for software development\n", "abstract": " Analysis and design are the essential first phases in most software development projects, yet most automated support environments are aimed at the programming phase. This paper describes a workstation-based environment that provides an integrated ensemble of graphical tools for analysis and design coupled to a project database, along with mechanisms for producing declarations, code skeletons, and executable programs. The environment is built on an \u201copen architecture,\u201d in which interfaces to the tools and their associated files are visible and accessible. The open architecture supports customization and extensibility of the tool environment, so that it can be effectively linked with traditional programming tools.", "num_citations": "120\n", "authors": ["845"]}
{"title": "The future of programming\n", "abstract": " The nature of programming is changing. These changes will accelerate as improved software development practices and more sophisticated development tools and environments are produced. This paper surveys the most likely changes in the programming task and in the nature of software over the short term, the medium term, and the long term. In the short term, the focus is on gains in programmer productivity through improved tools and integrated development environments. In the medium term, programmers will be able to take advantage of libraries of software components and to make use of packages that generate programs automatically for certain kinds of common systems. Over the longer term, the nature of programming will change even more significantly as programmers become able to describe desired functions in a nonprocedural way, perhaps through a set of rules or formal specification languages\u00a0\u2026", "num_citations": "114\n", "authors": ["845"]}
{"title": "Information system design methodology\n", "abstract": " There is a great need for a systematic approach to the specification, design, and development of information systems. This article describes the motivating reasons for such an approach and surveys some of the techniques that have been developed to assist the software specification and design activity. A methodology is seen as a combination of tools and techniques employed within an organizational and managerial framework that can be consistently applied to successive information system development projects. The ways that information system development organizations can create and use such methodologies are emphasized.", "num_citations": "91\n", "authors": ["845"]}
{"title": "Quantitative measures of the spatial properties of screen designs\n", "abstract": " Screen designs can suffer from overcrowding, can lack any recognizable organizing principle, and can be aesthetically displeasing. It has been long been recognized that poor screen design can have a detrimental effect on the human performance of its user by decreasing search speed, provoking errors, and complicating machine operations.(GALI pl] Good design, on the other hand, can aid visual decoding and improve human performance.", "num_citations": "90\n", "authors": ["845"]}
{"title": "Rapid prototyping of interactive information systems\n", "abstract": " The User Software Engineering methodology is a set of techniques, supported by automated tools (Unified Support Environment), to support the specification and implementation of interactive information systems. The methodology advocates construction of a prototype of the user/program dialogue as an aid to the analysis process, and suggests the construction of a functional prototype as an aid to the specification. The USE tool RAPID (RApid Prototypes of Interactive Dialogues) supports the construction of prototypes and partial systems. RAPID builds upon two automated tools, the Transition Diagram Interpreter (TDI) and a relational database management system (Troll). This paper describes the role of prototypes in the USE methodology and the function and use of RAPID, TDI, and Troll.", "num_citations": "83\n", "authors": ["845"]}
{"title": "An object-oriented structured design method for code generation\n", "abstract": " The overall architecture of a software system has long been recognized as an important contributor to its quality (or lack thereof). A well-structured program not only adheres to guidelines of structured programming, but also exhibits a logical and modular architecture. Modularity was identified as an important characteristic of software systems by Constantine, Gauthier and Pont, Pamas, and many others [Constantine 1968, Gauthier 1970, Pamas 1972].Modules have well-defined inputs and outputs so that interfaces among modules are clear. Modules can be tested independently of one another, and the faults in a system can be traced to a specific module. Pamas stressed the value of modularization for improving the flexibility and comprehensibility of a system.", "num_citations": "71\n", "authors": ["845"]}
{"title": "The role of prototypes in the User Software Engineering (USE) methodology\n", "abstract": " \u30e6\u30fc\u30b6\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0 (UIMS): 1. \u30e6\u30fc\u30b6\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\u306e\u57fa\u790e 1.1 \u30e6\u30fc\u30b6\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\u306e\u57fa\u672c\u6982\u5ff5\u304a\u3088\u3073\u5bfe\u8a71\u306e\u65b9\u5f0f", "num_citations": "66\n", "authors": ["845"]}
{"title": "Essential elements of software engineering education\n", "abstract": " Software engineering involves the application of principles of computer science, management science, and other fields to the design and construction of software systems. Education in software engineering is fundamentally different from education in computer science, management science, or other constituent fields, even though it shares a large common area of concern. As we move toward the development of coordinated software engineering curricula, it is mandatory that we identify principles, not just random collections of techniques, on which to build them. Our research, teaching, and practical experience leads us to argue for five essential elements of any software engineering curriculum: computer science, management science, communication skills, problem solving, and design methodology. This paper will discuss these areas, illustrate their current application in courses, and indicate their implications for\u00a0\u2026", "num_citations": "66\n", "authors": ["845"]}
{"title": "The data management facilities of PLAIN\n", "abstract": " The programming language PLAIN has been designed to support the construction of interactive information systems within the framework of a systematic programming methodology. One of the key goals of PLAIN has been to achieve an effective integration of programming language and database management concepts, rather than either the functional interface to database operations or the low-level database navigation operations present in other schemes. PLAIN incorporates a relational database definitional facility, along with low-level and high-level operations on relations. This paper describes those features informally, showing how the database operations are combined with programming language notions such as type checking, block structure, expression evaluation, and iteration. A brief description of the implementation status is included.", "num_citations": "65\n", "authors": ["845"]}
{"title": "User software engineering and the design of interactive systems\n", "abstract": " The successful construction of interactive systems requires the utilization of principles of user-centered design, combined with techniques for software engineering, in order to produce systems that are reliable, easy to use, and well adapted to user needs. This paper presents some of these principles and shows how they are achieved in the User Software Engineering (USE) project, which is intended to provide the applications developer with a development environment that supports the systematic specification and implementation of interactive systems.", "num_citations": "64\n", "authors": ["845"]}
{"title": "A specification method for interactive information systems\n", "abstract": " Efforts to build sophisticated, reliable computer systems have focused attention on the need for good specifications and for tools to support their production and modification. This recognition has come for number of reasons:", "num_citations": "55\n", "authors": ["845"]}
{"title": "A framework for evaluating managerial styles in open source projects\n", "abstract": " This paper presents the Software Project Governance Framework (SPGF) for characterizing management of software projects, based on mechanisms used for communication and collaboration, the organizational structure of projects, and testing and quality assurance procedures. The framework was developed and validated from interviews and surveys with leaders of more than 70 commercial and community-based software projects, including both closed and open source projects.", "num_citations": "51\n", "authors": ["845"]}
{"title": "The design of'idiot-proof'interactive programs\n", "abstract": " Over the past few years, the use of interactive systems has begun to shift from program development to a wide range of applications. Simultaneously, the users of interactive systems have begun to shift from programmers and others familiar with computer systems to those without a technical understanding of computer systems and programs. These trends seem likely to continue with the increased availability of multiprogrammed systems, the reduced cost of computer hardware, and the development of new application programs for retail sales, medical systems, law enforcement, financial analysis, and other tasks. This steadily increasing number of conversational applications programs will produce a growing number of computer users who are well-trained in their application areas without knowing how the programs that they use actually work. These technically\" unsophisticated\" users view the computer simply as a\u00a0\u2026", "num_citations": "50\n", "authors": ["845"]}
{"title": "Software Engineering Education: Needs and Objectives Proceedings of an Interface Workshop\n", "abstract": " \" Software engineering\" is a term which was coined in the late 1960's as the theme for a workshop on the problems involved in producing software that could be developed economicaLly and would run reliably on real machines. Even now, software engineering is more of a wish than a reality, but the last few years have seen an increased awareness of the need to apply an engineering-type discipline to the design and construction of software systems. Many new proposals have been made for the management of software development and maintenance and many methodologies have been suggested for improving the programming process. As these problems and solutions become better understood, there is a growing need to teach these concepts to students and to practicing professionals. As a prelude to the educational process, it is necessary to gain an understanding of the software design and development process in industry and government, to define the appropriate job categories, and to identify the fundamental content areas of soft ware engineering. The need for quality education in software engineering is now recognized by practitioners and educators alike, and various educational endeavors in this area are now being formulated. Yet, discussions we had had over the past year or so led us to believe that there was insufficient contact between practitioners and educators, with the resultant danger that each group would go off in separate ways rather than working together.", "num_citations": "44\n", "authors": ["845"]}
{"title": "A proposed curriculum for software engineering education\n", "abstract": " We propose a curriculum for a graduate professional degree in software engineering. After presenting the instructional objectives to be met by this curriculum, we present its underlying philosophy and assumptions. A number of suggestions are made for implementing the curriculum. In particular, we emphasize that this is a specific curriculum (for a Master's degree) which can serve as a starting point for the development of other software engineering curricula.", "num_citations": "37\n", "authors": ["845"]}
{"title": "Tutorial, Software Development Environments: Initially Presented at COMPSAC 81, November 16-20, 1981: the IEEE Computer Society's Fifth International Computer Software\u00a0\u2026\n", "abstract": " MA 01970. Instructors are permitted to photocopy isola-ted articles for noncommercial classroom use without fee. For other copying, reprint, or republication permission, write to Director, Publishing Services, IEEE, 345 E. 47 St., New York, NY 10017. All rights reserved. Copy-right\u00a9 1981 by The Institute of Electrical and Elec-tronics Engineers, Inc.", "num_citations": "36\n", "authors": ["845"]}
{"title": "Personal development systems for the professional programmer\n", "abstract": " Recent advances in hardware technology? VLSI, graphics, voice, powerful personal computers? can be brought to bear on problems of software development.", "num_citations": "33\n", "authors": ["845"]}
{"title": "Evaluating software engineering processes in commercial and community open source projects\n", "abstract": " We describe a current study for obtaining information about management of commercial and community open source projects. We have interviewed and surveyed leaders of more than 75 open source projects. Questions focused on the styles of leadership and communication, with a technical focus on testing and quality assurance processes. This paper describes the methods used to identify and contact subjects, as well as the questions posed and some results.", "num_citations": "29\n", "authors": ["845"]}
{"title": "The architecture of the PLAIN data base handler\n", "abstract": " The programming language PLAIN has been designed to support conversational access to a data base, and incorporates relations as a built\u2010in data type. This paper describes the architecture of the data base handler for PLAIN, emphasizing the separation of the data base handler from other aspects of the language processor, and the modularization of the data base architecture to support modifications to the language and its implementation with minimal difficulty. The data base architecture is layered in order to provide the greatest possible degree of information hiding and separation of functionality. The paper shows the structure of the data base handler and the functions of the various modules of the system.", "num_citations": "26\n", "authors": ["845"]}
{"title": "How the Internet transformed the software industry\n", "abstract": " The growth of the Internet has had a huge impact on the software industry, from the ease of creating new businesses to the processes that companies use to develop, distribute, and support their products. Software architectures and platforms for web applications differ significantly from traditional desktop and client-server applications, and require a new generation of programming languages and development tools. Developers make extensive use of open source software, particularly at the infrastructure level of their applications. Development teams can easily use Internet-based tools for collaboration, thus facilitating distributed organizations. Product marketing now emphasizes attracting prospective customers to the company\u2019s website. Companies can release products over the Internet, or provide a hosted web application, both of which are more efficient and less expensive ways to sell their products. Companies\u00a0\u2026", "num_citations": "24\n", "authors": ["845"]}
{"title": "Realization of a skillful bridge bidding program\n", "abstract": " The problem of bidding at contract bridge is an\" intellectual\" task which has never before been performed skillfully by a computer program. Only Carley has made the attempt to handle this problem and his program used a very crude treatment; as a result, inferior contracts were produced because bidding requires many fine lines of distinction which his approach could not make.", "num_citations": "24\n", "authors": ["845"]}
{"title": "BASIS: a behavioral approach to the specification of information systems\n", "abstract": " This paper is an overview of BASIS (Behavioral Approach to the Specification of Information Systems), a multi-step formal method used for information systems design and development. The steps include information analysis, semantic specification, verification of the specification, concrete implementation, and verification of the implementation. In this way, BASIS can be used to provide a formal basis for information systems development. We provide an example showing how BASIS can be used in conjunction with implementation in the programming language PLAIN.", "num_citations": "21\n", "authors": ["845"]}
{"title": "High-level programming features for improving the efficiency of a relational database system\n", "abstract": " This paper discusses some high-level language programming constructs that can be used to manipulate the relations of a relational database system efficiently. Three different constructs are described: (1) tuple identifiers that directly reference tuples of a relation; (2) cursors that may iterate over the tuples of a relation; and (3) markings, a form of temporary relation consisting of a set of tuple identifiers. In each case, attention is given to syntactic, semantic, and implementation considerations. The use of these features is first presented within the context of the programming language PLAIN, and it is then shown how these features could be used more generally to provide database manipulation capabilities in a high-level programming language. Consideration is also given to issues of programming methodology, with an important goal being the achievement of a balance between the enforcement of good programming\u00a0\u2026", "num_citations": "21\n", "authors": ["845"]}
{"title": "OSSpal: finding and evaluating open source software\n", "abstract": " This paper describes the OSSpal project, which is aimed at helping companies, government agencies, and other organizations find high quality free and open source software (FOSS) that meets their needs. OSSpal is a successor to the Business Readiness Rating (BRR), combining quantitative and qualitative evaluation measures for software in various categories. Instead of a purely numeric calculated score OSSpal adds curation of high-quality FOSS projects and individual user reviews of these criteria. Unlike the BRR project, for which there was no automated support, OSSpal has an operational, publicly available website where users may search by project name or category, and enter ratings and reviews for projects.", "num_citations": "20\n", "authors": ["845"]}
{"title": "Building a business on open source software\n", "abstract": " The notions of free and open source software go back to the earliest days of computing, when all software was free and source code was routinely published. In the late 1960s, though, IBM unbundled software from hardware, charging money for the operating system and other software. At about the same time, new software companies arose, building businesses around the licensing and support of software systems, such as database management systems. Software developed in the research community continued to be freely distributed at no charge, even as commercial software grew to a multi-billion dollar industry. Much of the foundation for the Internet was funded by the US Government, with all of the source code freely available.In 1985 Richard Stallman at MIT put forth the notion of free software based on his personal belief that software should be free. He created the Free Software Foundation (FSF) not just as a technical movement, but also as a social, political and economic movement. In the early 1990s Linus Torvalds, a student in Finland, first developed the Linux operating system, and made it freely available under the GNU General Public License developed by Stallman and the FSF. Linux became extremely popular, especially among hobbyists, who created a large and active community that enhanced Linux, eventually making it sufficiently reliable for widespread commercial use.", "num_citations": "20\n", "authors": ["845"]}
{"title": "Building reliable interactive information systems\n", "abstract": " User software engineering (USE) is a methodology, with supporting tools, for the specification, design, and implementation of interactive information systems. With the USE approach, the user interface is formally specified with augmented state transition diagrams, and the operations may be formally specified with preconditions and postconditions. The USE state transition diagrams may be directly executed with the application development tool RAPID/USE. RAPID/USE and its associated tool RAPSUM create and analyze logging information that is useful for system testing, and for evaluation and modification of the user interface. The authors briefly describe the USE transition diagrams and the formal specification approach, and show how these tools and techniques aid in the creation of reliable interactive information systems.", "num_citations": "18\n", "authors": ["845"]}
{"title": "Tutorial, Programming Language Design: Initially Presented at COMPSAC80, the IEEE Computer Society's Fourth International Computer Software & Applications Conference, October\u00a0\u2026\n", "abstract": " The willingness of individual authors to allow reprin-I am particularly thankful to Christina Taylor and her ting of their papers is gratefully acknowledged. Without colleagues at the IEEE Computer Society for their them, this book would literally not exist. Thanks to Dennis superhuman efforts in coordinating the myriad details Fife for giving me the opportunity to present the tutorial associated with production of this book on an extremely for which this book was developed. tight schedule.", "num_citations": "18\n", "authors": ["845"]}
{"title": "Open Source Ecosystems: Diverse Communities Interacting: 5th IFIP WG 2.13 International Conference on Open Source Systems, OSS 2009, Sk\u00f6vde, Sweden, June 3-6, 2009, Proceedings\n", "abstract": " Welcome to the 5th International Conference on Open Source Systems! It is quite an achievement to reach the five-year mark\u2013that\u2019s the sign of a successful enterprise. This annual conference is now being recognized as the primary event for the open source research community, attracting not only high-quality papers, but also building a community around a technical program, a collection of workshops, and (starting this year) a Doctoral Consortium. Reaching this milestone reflects the efforts of many people, including the conference founders, as well as the organizers and participants in the previous conferences. My task has been easy, and has been greatly aided by the hard work of Kevin Crowston and Cornelia Boldyreff, the Program Committee, as well as the Organizing Team led by Bj\u00f6rn Lundell. All of us are also grateful to our attendees, especially in the difficult economic climate of 2009. We hope the participants found the conference valuable both for its technical content and for its personal networking opportunities. To me, it is interesting to look back over the past five years, not just at this conference, but at the development and acceptance of open source software. Since 2004, the business and commercial side of open source has grown enormously. At that time, there were only a handful of open source businesses, led by RedHat and its Linux distribution. Companies such as MySQL and JBoss were still quite small.", "num_citations": "17\n", "authors": ["845"]}
{"title": "Toward Integrated Software Development Environments= Verso ambienti integrati per lo sviluppo del software\n", "abstract": " Sauf mention contraire ci-dessus, le contenu de cette notice bibliographique peut \u00eatre utilis\u00e9 dans le cadre d\u2019une licence CC BY 4.0 Inist-CNRS/Unless otherwise stated above, the content of this bibliographic record may be used under a CC BY 4.0 licence by Inist-CNRS/A menos que se haya se\u00f1alado antes, el contenido de este registro bibliogr\u00e1fico puede ser utilizado al amparo de una licencia CC BY 4.0 Inist-CNRS", "num_citations": "16\n", "authors": ["845"]}
{"title": "A Graduate Academic Program in Medical Information Science.\n", "abstract": " A graduate academic program in medical information science has been established at the University of California, San Francisco, for the education of scientists capable of performing research and development in information technology in the health care setting. This interdisciplinary program, leading to a Doctor of Philosophy degree, consists of an introductory series of courses in medical information, computer sciences, medical systems analysis, and measurement and evaluation, followed by advanced course work and dissertation research. Students are conducting dissertation research on a variety of problems arising from the proliferation of medical knowledge and the increased need for management of medical data. Faculty and student research is supported by a Laboratory of Medical Information Science, an on-line computer facility which acts as an institutional focus for work on medical information systems. Work in progress includes systems for pharmacy management and utilization review, studies on human factors in information systems, and analysis of clinical decision-making.(Author)", "num_citations": "16\n", "authors": ["845"]}
{"title": "Automated Tools for Information Systems Design: Proceedings IFIP WG Working Conference on Automated Tools for Information Systems Design and Development, 8.1, New Orleans\u00a0\u2026\n", "abstract": " Automated Tools for Information Systems Design | Guide books ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksAutomated Tools for Information Systems Design: Proceedings IFIP WG Working Conference on Automated Tools for Information Systems Design and Development, 8.1, New Orleans, January 26-28, 1982 ABSTRACT No abstract available. Index Terms (auto-classified) 1.Automated Tools for Information Systems Design 1.Social and professional topics 1.Professional topics 1.Management of computing and information systems 1.Project and people management 1.Systems analysis and design Comments Login options \u2026", "num_citations": "15\n", "authors": ["845"]}
{"title": "Health Computing: Curriculum for an emerging profession-report of the ACM curriculum committee on health computing education\n", "abstract": " Computing has great potential for impacting favorably the rising costs of health care and many other aspects of the health care delivery system. Application of computers in health care has not kept pace with available technology. One substantial factor in this relative lack of progress is the need for more and better trained health computing professionals. Although a number of graduate and post-doctoral programs do exist, these have had little identifiable impact. A part of this problem is due to the fact that career rewards are lacking because the discipline has not been well defined and there is no concrete professional identity among health computing specialists.", "num_citations": "15\n", "authors": ["845"]}
{"title": "Software tools and the user software engineering project\n", "abstract": " Software tools are becoming an increasingly important aspect of systematic methods for software development. This paper describes some general properties of tools, showing how they fit within an engineering approach to software development. Then the use and development of tools within the context of the User Software Engineering (USE) project is described. The paper concludes with some cautionary notes about the nature and use of software tools.", "num_citations": "14\n", "authors": ["845"]}
{"title": "Special Feature Software Engineering Concepts and Computer Science Curricula\n", "abstract": " The field of software engineering is beginning to emerge as an area of study dealing with the problems and methods involved in producing software systems. Within recent years, it has become apparent that programming is a much harder task than it was once thought to be, especially for large production-oriented systems involving a number of people. This concern has led to the need for educating software engineering specialists to work on the construction of such systems.", "num_citations": "14\n", "authors": ["845"]}
{"title": "Automated tools in the information system development environment\n", "abstract": " Automated tools in the information system development environment | Trends in information systems ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksTrends in information systemsAutomated tools in the information system development environment chapter Automated tools in the information system development environment Share on Author: Anthony Ira Wasserman profile image AI Wasserman View Profile Authors Info & Affiliations Publication: Trends in information systemsFebruary 1986 Pages 185\u2013193 0citation 0 Downloads Metrics Total Citations0 Total Downloads0 Last 12 Months0 Last 6 weeks0 Get Citation Alerts New \u2026", "num_citations": "13\n", "authors": ["845"]}
{"title": "Software engineering education: Status and prospects\n", "abstract": " Software engineering is an emerging field aimed at improving the quality of computer software and the processess used to produce it. The field seeks to transform software creation from an art into an engineering discipline. Efforts have recently begun to teach software engineering concepts to university students and to practicing professionals in industry and government. This paper surveys past and present efforts in software engineering education, describes some existing problems in training software engineers, and outlines likely future developments in educational programs. The outline of a curriculum for a professional master's degree in software engineering is included.", "num_citations": "13\n", "authors": ["845"]}
{"title": "The Unified Support Environment: tool support for the user software engineering methodology\n", "abstract": " User Software Engineering is a methodology, supported by automated tools, for the systematic development of interactive information systems. The key ideas of the User Software Engineering (USE) methodology are described, along with the tools of the Unified Support Environment. These tools include the Troll/USE relational database management system, the RAPID/USE prototype construction system, the PLAIN programming language, and the IDE configuration management/version control system. All of these tools have been developed the environment.In this paper, we first give an overview of the User Software Engineering methodology and then describe the tools (the Unified Support Environment) that support the methodology. Space limitations preclude a lengthy description the methodology itself, and the reader is referred to [4, 5) for additional information.", "num_citations": "12\n", "authors": ["845"]}
{"title": "The design of PLAIN: support for systematic programming\n", "abstract": " The successful construction of medium and large software systems requires the management of the complexity inherent in the problem being programmed. A well-disciplined approach to software development involves the production of a complete specification, a complete problem solution, and program design prior to the inception of actual coding. In practice, this requires the production of some form of program design representation [1] from the original specification, with the action of each module specified with a program design language [2]. Furthermore, data structures are specified and refined, in some cases to physical data structures, but more commonly to logical data structures.", "num_citations": "12\n", "authors": ["845"]}
{"title": "Object-oriented structured design\n", "abstract": " Object-oriented structured design | Proceedings of the fourth international conference on Technology of object-oriented languages and systems ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleProceedingsTOOLS 4Object-oriented structured design Article Object-oriented structured design Share on Authors: Anthony I. Wasserman View Profile , Peter A. Pircher View Profile Authors Info & Affiliations TOOLS 4: Proceedings of the fourth international conference on Technology of object-oriented languages and systemsSeptember 1991 Published:01 September 1991 0citation 0 Downloads Metrics Total Citations0 Total Downloads0 Last 12 \u2026", "num_citations": "11\n", "authors": ["845"]}
{"title": "Behavior and scenarios in object-oriented development\n", "abstract": " Behavior and scenarios in object-oriented development | Journal of Object-Oriented Programming ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Journal of Object-Oriented Programming Periodical Home Latest Issue Archive Authors Affiliations Award Winners More HomeBrowse by TitlePeriodicalsJournal of Object-Oriented ProgrammingVol. , No. Behavior and scenarios in object-oriented development article Behavior and scenarios in object-oriented development Share on Author: Anthony Ira Wasserman profile image Anthony I. Wasserman View Profile Authors Info & Affiliations Publication: Journal of Object-Oriented ProgrammingFebruary 1992 0citation 0 Downloads Metrics Total Citations0 Total \u2026", "num_citations": "10\n", "authors": ["845"]}
{"title": "A software engineering view of data base management\n", "abstract": " This paper examines the field of data base management from the perspective of software engineering. Key topics in software engineering are related to specific activities in data base design and implementation. An attempt is made to show the similarities between steps in the creation of systems involving data bases and other kinds of software systems. It is argued that there is a need to unify thinking about data base systems with other kinds of software systems and tools in order to build high quality systems. The progrming language PLAIN and its programning environment is introduced as a tool for integrating notions of programning languages, data base management, and software engineering.", "num_citations": "9\n", "authors": ["845"]}
{"title": "Low ceremony processes for short lifecycle projects\n", "abstract": " Modern software applications, particularly those for mobile devices and web applications, are fundamentally different from traditional applications. Many of those applications are developed by startup businesses, which are under time and financial pressure to release their applications as quickly as possible. They have chosen to use agile methods for their development activities, largely because the administrative overhead for the process is low and the release cycle for the product is short. In this chapter, we contrast software processes based on the amount of management overhead (\u201cceremony\u201d), describing the characteristics of startup businesses and their use of low-ceremony processes.", "num_citations": "8\n", "authors": ["845"]}
{"title": "A transition diagram editor\n", "abstract": " 1. Introduction and Background This paper describes the design and implementation of the Transition Diagram Editor (tde), a graphics editor for making directed graphs, with boxes, circles, arrows, and text, for the RAPID/USE [1] system for rapid prototyping of application user interfaces. Tde and RAPID/USE are part of the User Software Engineering (USE) methodology [2], along with the Troll/USE relational database management system [3), the PLAIN programming language [4], and the Interactive Development Environment (IDE). The USE tools run under 4.2 BSD Unix. Tde currently runs on the SUN workstation.User Software Engineering is a methodology and supporting environment for the development of interactive information systems. The USE methodology recommends the creation of prototype versions of the user/program dialogue as a way to experiment with the user interface and to quickly build a working version of a system", "num_citations": "8\n", "authors": ["845"]}
{"title": "Software Engineering Environments\n", "abstract": " Publisher SummaryThis chapter explores some of the major issues associated with a software development environment. Software development typically occurs as a sequence of steps comprising a life cycle starting with the original system concept and proceeding through analysis, specification, design, implementation, testing, and operation. The chapter describes the major phases of the software development life cycle and presents an overview of some of the management procedures that must be followed throughout these phases, stressing the necessary interrelationship between technical methods and management procedures. The chapter explains the automated support that can be provided for a software development methodology and describes the integration of a methodology with automated support for the User Software Engineering methodology. The chapter provides a brief overview of the components\u00a0\u2026", "num_citations": "8\n", "authors": ["845"]}
{"title": "Community and Commercial Strategies in Open Source Software/Gemeinschafts-und kommerzielle Strategien in der Open-Source-Softwarewelt\n", "abstract": " Dieser Artikel beschreibt die Evolution von Gesch\u00e4ftsstrategien, welche Unternehmen verfolgen, die Softwareprodukte und -Dienstleistungen auf Basis von Open-Source-Software anbieten. Der Fokus liegt auf Unternehmen, welche Softwareprodukte unter einer Open-Source-Lizenz anbieten. Der Artikel vergleicht die Unternehmenspraktiken auf der einen Seite mit denen traditioneller propriet\u00e4rer Softwarehersteller und auf der anderen Seite mit denen von gemeinschaftlich entwickelten Open- Source-Projekten. Der Artikel stellt eine wachsende \u00dcberschneidung zwischen den verschiedenen Unternehmensarten fest. Abschliessend beschreibt der Artikel den erwarten Einfluss aktueller Technologieentwicklungen wie Mobiles- und Cloud-Computing auf Open-Source-Software und verwandte Gesch\u00e4ftsfelder.", "num_citations": "7\n", "authors": ["845"]}
{"title": "The Ecology of Software Development Environments\n", "abstract": " The idea of a unified framework for the design, im There are, of course, very definite disadvantages as plementation, and operation of computer programs is well. First, the programming system typically provided not new. It has been partially addressed in the design of little or no support for any task other than writing code a number of \u201cprogramming systems,\" including ECL,'and executing it. The programmer could expect no tools Joss, Mumps, and many others. The fundamental idea for specification, design, testing, or even debugging. Se-of such a system is that the programmer is given the im cond, the programming system supported exactly one pression that the entire environment exists to support language. If that language was not suitable for a parthe development and execution of programs written in a ticular application, that was just unfortunate. Finally, single programming language. there was often no way to gain access to lower-level The earliest models of programming systems offered machine resources. The operating system typically suptwo different modes of operations:\u201cdirect mode,\u201d a ported one or two simple forms of input/output, prodesk-calculator like approach in which statements vided some kind of shared memory management and would be directly interpreted and executed, and\" pro CPU multiplexing, and not much else. Attempts to degram mode,\u201d in which statements were stored for later velop sophisticated applications in such unsophisticated execution. If the statement were just typed, it would be environments frequently led to failures. executed at once; if it were preceded by a special char Nonetheless, there are many\u00a0\u2026", "num_citations": "7\n", "authors": ["845"]}
{"title": "Software tools: past, present, and future\n", "abstract": " Software tools support software development processes and reflect the types of applications being developed. Over the past 20 years, applications have evolved significantly, from those based on a single processor to client-server to n-tier Web-based. Future applications will take advantage of emerging technologies in high-bandwidth networking, \"smart\" mobile devices and speech processing. Future tools will have to evolve to support the development of applications that use those technologies.", "num_citations": "6\n", "authors": ["845"]}
{"title": "The role of prototypes in the user software engineering (USE) methodology\n", "abstract": " The role of prototypes in the User Software Engineering (USE) methodology | Human-computer interaction ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksHuman-computer interactionThe role of prototypes in the User Software Engineering (USE) methodology chapter The role of prototypes in the User Software Engineering (USE) methodology Share on Authors: Anthony I. Wasserman View Profile , David T. Shewmake View Profile Authors Info & Affiliations Publication: Human-computer interactionMay 1990 Pages 385\u2013401 8citation", "num_citations": "6\n", "authors": ["845"]}
{"title": "About this issue\n", "abstract": " and Yechiam Yemini pick up where Stallings leaves off on the subject of sharing the transmission medium. Their concern is that of time-constrained (or real-time) communication over networks, without a restriction to local area networks. Accordingly, their taxonomy and coverage of topics differ somewhat from those of Stallings. The Kurose, Schwartz, and Yemini taxonomy of multiple-access protocols is based on what Stallings calls asynchronous timedivision multiplexing in his Figure 10. Both use the term\" controlled access\" for one class of control techniques, whereas Ku-rose, Schwartz, and Yemini use the term\" contention-based access\" in place of Stallings'\" random access.\" Kurose, Schwartz, and Yemini go on to describe performance characteristics of the various protocols, including capacity and the more practical measures of average time delay and average throughput.Within that framework, the authors\u00a0\u2026", "num_citations": "6\n", "authors": ["845"]}
{"title": "Principles of systematic data design and implementation\n", "abstract": " This paper presents a set of guidelines for the has covered a broad range of topics, including the design design and implementation of data objects in software of new programming languages, the development of systems. It is intended to show that effective system system design techniques for\" data-dominant\" programs, design requires a balance between data decomposition formalization of data types and data structures, and and process decomposition. Emphasis is given to the programming guidelines similar in intent to those need to use abstraction and to the value of provided for control structures. modularization and information hiding. These techniques make program structures less vulnerable to In this paper, we shall examine some of these ideas, changes in data structures, and relate advances in with the goal of showing how they may be applied in the specification of data objects to programming language use of a systematic approach to software construction. features for their implementation. This presentation is made with the recognition that a unified approach to program and data design is essential to improving the quality of software, including its Introduction modularity and maintainability. It is our intent to apply these data design notions to all classes of data, whether Much of the early work in software engineering and shared or private, and whether persistent (files and data structured programming focused upon aspects of bases) or not (program variables). procedural decomposition and upon the proper use of control structures within various Our approach will be to follow data design through programming languages. This work\u00a0\u2026", "num_citations": "6\n", "authors": ["845"]}
{"title": "Technical and Business Challenges for Mobile Application Developers\n", "abstract": " \u2022 Before the iPhone i Extremely limited revenue opportunities i Text-based WAP/WML mobile web sites with keyboard and arrow-based input i Handset manufacturers and network operators offered developer programs i Operators ran walled gardens i Developers had to arrange deals with network operators in each territory", "num_citations": "5\n", "authors": ["845"]}
{"title": "Using FLOSSmole data in determining business readiness ratings\n", "abstract": " This paper is a preliminary report on using FLOSSmole data retrieved from open source repositories (forges) to calculate Business Readiness Rating scores.", "num_citations": "5\n", "authors": ["845"]}
{"title": "Privacy and security in information systems using programming language features\n", "abstract": " This paper describes a specification and implementation scheme for providing an integrated approach to security and privacy rules and shows how they may be achieved with a formal specification language that permits the association of operations with logical conditions. The implementation of these rules is shown in the programming language PLAIN. In this way, the access and notification control that has typically been performed by operating systems, database management systems, and programming languages is brought together in an integrated programming environment.", "num_citations": "5\n", "authors": ["845"]}
{"title": "Issues in Data Base Management: Proceedings of the Fourth International Conference on Very Large Data Bases, September 13-15, 1978, West-Berlin, Germany\n", "abstract": " Data base design; Data base software engineering; Distributed data bases; Impact of new technologies; Data base security and privacy.", "num_citations": "5\n", "authors": ["845"]}
{"title": "A top-down view of software engineering\n", "abstract": " Software engineering includes a broad range of topics related to the design and development of highquality computer software. This paper surveys the field, concentrating on aspects of prograrming methodology and management of software development. The\u2022 notion of the Application Development Team is introduced as an effective management technique. The objective of the paper is to identify the varied considerations which must be made throughout the software development process and to assess the present state of tools and techniques for software development.", "num_citations": "5\n", "authors": ["845"]}
{"title": "The anatomy of an Algol procedure\n", "abstract": " A specific Algol procedure is analyzed in great detail in order to obtain an analysis of exactly what it does.  The strategy of analysis is first explained, and the remainder of the paper consists of the written analysis.  The main technique is proof by cases.", "num_citations": "5\n", "authors": ["845"]}
{"title": "Requirements for OO design environments\n", "abstract": " Successful development of complex software systems depends on an effective process supported by an appropriate and useful set of tools. Modern programming environments and rapid prototyping tools work well for individual developers working on projects of modest size. However, large group projects require a systematic approach to development and an integrated set of tools. A comprehensive toolset for OO development includes not only design and programming tools, but also reuse libraries and browsers, code generators, and tool frameworks. Today's computing environments for object-oriented development are still relatively immature. Existing OO analysis and design tools, programming environments for OO programming languages, and GUI builders for OO user interfaces must be more completely integrated with each other and with reuse mechanisms and environment frameworks. This paper presents\u00a0\u2026", "num_citations": "4\n", "authors": ["845"]}
{"title": "Interactive development environments for information systems\n", "abstract": " For many years, medical information systems have been built with little attention to issues of software analysis and design. The paradigm for building such systems has been to carry out perfunctory systems analysis and then to begin writing code in a procedural programming language, evolving the code as needed until the ystem meets the user\u2019s requirements.", "num_citations": "4\n", "authors": ["845"]}
{"title": "Software Tools in the User Software Engineering Environment\n", "abstract": " Software tooks are becoming an increasingly inaportant aspect of systematic methods tor software development and play a major role in supporting the User Software Engineering methodolog. This paper describes the goals of the User Software Dngineering methodolog, some of the requirements for the methodology, and the caracteristics of the tools that have been created to support the methodology. Four major tools are reviewed: the Transition Diagram Interpreter (TDI), Troll, a relational algebra-fike interface to a database management system, the programming language PLAIN, and the locale Control System. The paper concludes vith a discussion of the Integration of these tools and their use in a Unir-based development environment.", "num_citations": "4\n", "authors": ["845"]}
{"title": "A specification method for interactive medical information systems\n", "abstract": " This paper presents the User Software Engineering (USE) approach for developing specifications for an interactive information system (IIS) and shows how the method is applied to the specification of a Perinatal Data Registry system. Two linked views of the system are developed: a user view suitable for computer-naive users, and a design/verification view, suitable for computer-knowledgeable users.", "num_citations": "4\n", "authors": ["845"]}
{"title": "Testing and verification aspects of Pascal-like languages\n", "abstract": " This paper addresses aspects of programming language design that affect the ease with which programs written in a language can be subjected to systematic testing and/or program verification. The discussion focuses of Pascal and on several languages that have been derived primarily from Pascal, particularly Euclid and PLAIN. Specific language issues addressed include translation-time checking, program readability, flow of control, support for program modularity, data flow, and program immutability. The relative ease of validating such programs is then determined by the style in which the programs are written. The paper presents some guidelines for writing programs in Pascal-like languages for testability and verifiability.", "num_citations": "4\n", "authors": ["845"]}
{"title": "A problem-list of public policy issues concerning computers and health care\n", "abstract": " The ACM Committee on Computers and Public Policy was formed in 1973 to investigate and report upon those aspects of computing which interact with people, focusing upon the interests typical of legislative and regulatory bodies. Its first report [1] was a problem-list of issues, indicating some of the present and potential problems related to computers and public policy. The report treated a number of different topics, giving a short introduction followed by a set of open questions for each topic, with the intent of focusing on specific problems for future study. The Committee solicited comments and suggestions on the content of the report, including the proposal of new areas on which the Committee might concentrate its further effort. An addendum to the Report is proposed. This addendum is to include the topic of computers and health care, an area which did not receive attention in the problem-list of issues concerning\u00a0\u2026", "num_citations": "4\n", "authors": ["845"]}
{"title": "Some Principles of User Software Engineering for Information Systems\n", "abstract": " User software engineering is defined as the combination of software engineering principles with human factors considerations in order to produce a satisfactory human/computer environment. Software engineering may be defined as the application of principles, skills, and art to obtain economically software that is reliable and works efficiently on real machine.[Bauer, 1972; Dennis, 1972] It therefore includes the specification, design, development, management, test, and maintenance of software systems. User engineering may be defined similarly as the application of principles, skills and art to the creation of software which is accept-able to its users in terms of ease of use, cost, and reliability.", "num_citations": "4\n", "authors": ["845"]}
{"title": "Modern software development methodologies and their environments\n", "abstract": " Progress in software engineering has come in a sequence of overlapping stages. The first stage, circa 1965\u20131970, was \u201crecognition of the problem\u201d. This stage was followed by \u201c structured programming solutions\u201d, from 1971 to about 1974. A third phase was \u201clife cycle models\u201d, from 1974 until 1976. The next step was \u201canalysis, specification and design methods\u201d, from about 1976 to 1980. The fifth stage was \u201csoftware development methodology\u201d, beginning in about 1980 and extending to the present. A sixth stage, \u201csoftware engineering environments\u2019, has recently begun and addresses automated tools and programming environments to aid the software development process. This paper gives an overview of key issues and developments in software development, emphasizing the latter two stages and their role in scientific programming.", "num_citations": "3\n", "authors": ["845"]}
{"title": "Comparing software development methodologies for Ada: a study plan\n", "abstract": " The study that is outlined in this paper has been propose d as one of the early activities in the Support Systems Task Area of the DoD STARS Program (See IEEE Computer, November, 1983). This study is an update of the study that was originally propose d by Freeman and Wasserman in a group of papers titled,\" Software Development Methodologies and Ada\". These papers were published in a report submitted to the Ada Joint Program Office(AJPO) in November, 1982. The original study emphasized the design phase of a methodology. In particular, it attempted to isolate th e design phase from the implementation phase so that one coul d study the effects of one phase on the other, e. g., a poor design followed by corrective implementation. In subsequent review, the editor and other reviewers felt that this level of differentiation added much initial complexity and risk to th e study. Consequently, the version that\u00a0\u2026", "num_citations": "3\n", "authors": ["845"]}
{"title": "Software Development Methodologies and the User Software Engineering Methodology.\n", "abstract": " EXTENDED ABSTRACT A miajor goal of rnodern software development is to follow organized and disciplined practices throughout the system specification and construction process, rather than to take an ad hoc approach to programruing. The key idea is to develop and use a softwaredevelopment methodology, a process for the creation of software. A methodology combines technical methods with management procedures for software development in a synergistic fashion, and automated tools in a development support system provide additional assistance [1, 2].", "num_citations": "3\n", "authors": ["845"]}
{"title": "A module definition facility for access control in distributed data base systems\n", "abstract": " Future information systems will involve the interconnection of databases through public networks, requiring the development of adequate security facilities within the local nodes in order to prevent unauthorized access and use of data. A key component of any security scheme is a set of lanuage primitives that define access rights; these language primitives must be combined with other language facilities that assure integrity of the data bases involved and that promote the development of reliable software systems. In such an environment, transaction-based systems, providing interactive access to stored data through a set of predefined operations, may be implemented with programming languages containing facilities for data base definition and manipulation. In such a case, it is necessary to provide some primitives for access control within the programming language. This paper presents a set of such primitives\u00a0\u2026", "num_citations": "3\n", "authors": ["845"]}
{"title": "Evaluating Open Source Software\n", "abstract": " This talk describes an approach to quantitatively evaluate the quality and maturity of open source software. and hence its suitability for use in business-critical settings. We have defined seven different evaluation categories, along with an evaluation process that allows a user to allocate weights to the various categories and to easily select the most appropriate software projects for further evaluation. The evaluation process relies heavily on data that can be extracted from open source forges and from other online resources. The goal of this work is to assist people in selecting open source software for use in business-critical settings.", "num_citations": "2\n", "authors": ["845"]}
{"title": "User Software Engineering: a Retrospective\n", "abstract": " The User Software Engineering methodology was developed two decades ago to support the development of interactive information systems. This paper describes the key concepts of User Software Engineering and how they apply to modern client-server and web application development.", "num_citations": "2\n", "authors": ["845"]}
{"title": "Specification and implementations of interactive information systems\n", "abstract": " User Software Engineering is a methodology supported by automated tools for the development of interactive information systems. The specification process decomposes the system into user-program dialogue, database definition, and formal and informal description of system operations. Evolution of the specification is supported by tools for rapid construction of prototype versions of the system, and the resulting specification is easily transformed into the programming language PLAIN. This paper gives an overview of the USE development process, illustrating it with a development dictionary example.", "num_citations": "2\n", "authors": ["845"]}
{"title": "The extension of data abstraction to database management\n", "abstract": " The long-term goal of the User Software Engineering (USE) project at the University of California, San Francisco, is to provide an integrated homogeneous programming environment for the design and development of interactive information systems. Realization of this goal involves the development of new software tools, their integration with existing tools, and the creation of an information system development methodology in which these tools are systematically used [1,2]. The successful construction of interactive information systems requires the utilization of principles of user-centered design [3,4,5], combined with features traditionally associated with the separate areas of programming languages, operating systems, and data base management [6]. It has become increasingly clear that the key to being able to provide such a unified view lies in providing a unified view of data [7]. The potential benefits of such a\u00a0\u2026", "num_citations": "2\n", "authors": ["845"]}
{"title": "A Strategy for Improving Software Development Practices\n", "abstract": " Introduction local symbol table to provide information about specific variables. Finally, the local symbol table must be accessed during expression evaluation to provide values. This example, then, is restricted to those aspects of the interpreter design which focus on management of local variables. The design of the symbol table is a lower-level design problem once the overall structure of the interpreter is designed. In that sense, a certain number of external constraints are already placed on the design.", "num_citations": "2\n", "authors": ["845"]}