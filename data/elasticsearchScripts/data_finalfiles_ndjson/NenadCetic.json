{"title": "Communication protocol engineering\n", "abstract": " The book aims to enable the reader to master the engineering of communication protocols, which are amply present nowadays in mobile phones, tablets, laptops, smart appliances, and service providers\u2019 datacenters and clouds. Readers will acquire the theoretical knowledge and practical skills to successfully design, implement, test, and verify their solutions. The key benefits of the new edition align with the latest standard for conformance testing, TTCN-3, along with updated chapters. It explains process algebra CSP and how to model, simulate, and automatically verify CSP models in PAT.", "num_citations": "54\n", "authors": ["1901"]}
{"title": "Voice control system with advanced recognition\n", "abstract": " This paper explains the process of realization of voice control system based on the cloud processing. The aim is the feasibility study of system based on integration with Google STT API (Speech to text, recognition and speech synthesis) for different platforms. This approach introduces advanced recognition module that operate on text level. Improving recognition leads to further improvement of the overall system behavior.", "num_citations": "12\n", "authors": ["1901"]}
{"title": "Energy consumption estimation for embedded applications\n", "abstract": " Energy consumption, indeed, represents one of the essential properties of embedded applications, especially for those devices whose autonomy depends on battery life. The lack of accurate and suitable methodology for energy consumption estimation for embedded applications based on ultra-low power heterogeneous multicore DSP platforms inspired a solution that will be presented in this paper. The solution has been developed as a plugin for the Eclipse based MIDE (Multicore Integrated Development Environment), in order to facilitate production of energy efficient firmware solutions. Evaluation of energy loss has been calculated using instruction-level power analysis, virtual platform, debug information, and diverse input loads. The primary goal was to obtain a precise model of energy consumption that will establish a direct link between program solutions and the amount of energy required for their execution, whilst processing different input loads. Estimation has been validated against empirical data, measured on a real DSP platform. Results show that very high accuracy has been reached.", "num_citations": "10\n", "authors": ["1901"]}
{"title": "Estimating parallelism of transactional memory programs\n", "abstract": " Transactional Memory (TM), a promising concurrency control mechanism that enables easier and more productive parallel/distributed programming, become a standard part of the latest multicores rolled out by IBM, Intel, AMD, and other IC manufacturers. Many TM aspects have been intensively researched, e.g. semantics of various possible implementations, TM safety and liveness properties, and TM performance. Some researchers suggested some novel measures for the amount of concurrency in TM programs. Alternatively, we in this paper propose an approach to analysis of TM programs by using a well-established methodology, which is based on modeling programs as DAGs, and calculating their work, span, parallelism, and speedup. In the paper we present an approach to application of this methodology in order to calculate the parallelism of a typical TM program for processing a group of transactions on a\u00a0\u2026", "num_citations": "10\n", "authors": ["1901"]}
{"title": "Embedded Processor Oriented Compiler Infrastructure\n", "abstract": " In the recent years, research of special compiler techniques and algorithms for embedded processors broaden the knowledge of how to achieve better compiler performance in irregular processor architectures. However, industrial strength compilers, besides ability to generate efficient code, must also be robust, understandable, maintainable, and extensible. This raises the need for compiler infrastructure that provides means for convenient implementation of embedded processor oriented compiler techniques. Cirrus Logic Coyote 32 DSP is an example that shows how traditional compiler infrastructure is not able to cope with the problem. That is why the new compiler infrastructure was developed for this processor, based on research in the field of embedded system software tools and experience in development of industrial strength compilers. The new infrastructure is described in this paper. Compiler generated\u00a0\u2026", "num_citations": "7\n", "authors": ["1901"]}
{"title": "Lighting control using Raspberry Pi and oblo living home automation system\n", "abstract": " Home automation systems are bringing comfort and safety into the life of a modern human. They are becoming more popular each day and most of the well-known software companies are fighting to offer their newest solution in this area. OBLO Living is a home automation system developed by the scientific-research institute \"RT-RK\". This paper presents one successful binding of the Raspberry Pi computer and the OBLO living system. The binding was made using a C++ application developed by the authors of this paper. The developed application is executed in real time on the Raspberry Pi platform. It supports a graphical user interface and its purpose is maintaining constant illumination of the room regardless of the daylight.", "num_citations": "6\n", "authors": ["1901"]}
{"title": "A run-time library for parallel processing on a multi-core dsp\n", "abstract": " Future of the computer based systems resides in the multi-core and many-core architectures. Thanks to availability of different multi-core processors, many parallelization tools and techniques emerged. However, majority of them rely on the shared memory architecture model, where data to multiple core processors is simply accessible. In this paper we present a simple hardware abstraction that targets features of a multi-core DSP processor with distributed memory architecture, aiming support for program parallelization. Both manual and automatic code parallelization approaches can use library routines described in this paper. By validating performance of multiple manually created test cases we demonstrate capabilities of presented approach. Performance is estimated by measuring time necessary for DMA data transfer between the cores using GPIO pins attached to the DSP. In addition, earlier developed C code\u00a0\u2026", "num_citations": "6\n", "authors": ["1901"]}
{"title": "Cloud based voice interface for Internet of Things devices\n", "abstract": " In this paper we give a concept of a device that provide voice interface (VI) for issuing commands and receiving messages. Proposed device is designed having Internet of Things (IoT) paradigm in mind and connected to the internet via IEEE 802.11. It uses Google speech to text (STT) and text to speech (TTS) web services for voice analysis and synthesis. Hardware prototype description is given in detail. Key aspects like price, performance, memory footprint and energy consumption are analyzed on a case study. We discuss potential applications when such a device is deployed as an interface of home automation system.", "num_citations": "5\n", "authors": ["1901"]}
{"title": "Integrated development environment for multi-core systems\n", "abstract": " Development of the software application that provides comfortable working environment of embedded software applications was always a difficult task to achieve. To reach this goal it was necessary to integrate all specific tools designed for that purpose. This paper describes Integrated Development Environment (IDE) that was developed to meet all specific needs of a software development for the family of multi-core target platforms designed for a digital signal processing in Cirrus Logic Company. Eclipse platform and RCP (Rich Client Platform) was used as a basis, because it provides an extensible plug-in system for customizing the development environment. CLIDE (Cirrus Logic Integrated Development Environment) represent the epilog of that effort, reliable IDE used for development of embedded applications. Validation of the solution is accomplished thru 2641 J Unit tests that validate most of the CLIDE's functionalities. Developed IDE (CLIDE) significantly increases a quality of a software development for multi-core systems and reduces time-to-market, thereby justifying development costs.Razvoj programskih re\u0161enja koja pru\u017eaju komforno radno okru\u017eenje za razvoj programske podr\u0161ke za platforme sa ograni\u010denim resursima je oduvek predstavljalo izazov. Da bi se navedeni cilj postigao bilo je neophodno integrisati sve specifi\u010dne alate razvijene za tu namenu. Ovaj rad opisuje Integrisano Razvojno Okru\u017eenje koje je dizajnirano kako bi zadovoljilo sve specifi\u010dnosti razvoja programske podr\u0161ke za familiju vi\u0161e jezgarnih platformi namenjenih digitalnoj obradi signala kompanije Cirrus Logic. Kao osnova za razvoj kori\u0161\u0107ena je Eklips (Eclipse\u00a0\u2026", "num_citations": "5\n", "authors": ["1901"]}
{"title": "An Approach to Instruction Set Compiled Simulator Development Based on a Target Processor C Compiler Back-End Design\n", "abstract": " Many instruction set simulation approaches place the retargetability and/or cycle-accuracy as the key features for easier architectural exploration and performance estimation early in the hardware development phase. This paper describes an approach in which importance of speed and controllability is placed above the cycle-accuracy and retargetability, thus providing a better platform for software development. The main idea behind this work is to try to associate the compiled simulator effort with the development of the C language compiler for the target embedded processor, using the knowledge from that field of work and reusing some common software elements. Through the prototype design of a compiled simulator for the Cirrus Logic Coyote DSP architecture, many implementation aspects are presented proving that this approach has a great potential.", "num_citations": "5\n", "authors": ["1901"]}
{"title": "Realisation of server application for acoustic sensors based on RTSP, RTP protocols\n", "abstract": " This paper presents realization of server for collecting and processing sound data from acoustic sensors based on RTSP and RTP protocols. Server has access to all sound data from all connected sensors, which makes it possible to apply more DSP audio algorithms on data. Sensors metadata and processing results are displayed using web server. By using internet browser user can monitor activities of sensors. The implementation is tested in two scenarios: communication in closed environment like in smart house, and communication over the Internet network. The presented example shows a good potential of the system for various acoustic sensing applications.", "num_citations": "4\n", "authors": ["1901"]}
{"title": "Communication interface libraries as an extension to the debugging framework for DSP applications\n", "abstract": " In this paper we present an approach for creating communication interface libraries using remote procedure call technique within client-server based debugger. Presented approach tries to prove the simplicity of porting the libraries to different programming or scripting languages, which greatly improves portability and extensibility of the framework, and facilitates the user experience. By using remote procedure call technique and an interface compiler, we have successfully created libraries for two different programming languages C++ and Python.", "num_citations": "4\n", "authors": ["1901"]}
{"title": "Adjustment of GCC compiler frontend for embedded processors\n", "abstract": " This paper describes one solution for adjustment and modification of GCC compiler front-end to be used with compilers for embedded processors. This project was developed as an effort to provide open source front-end for RTCC compiler library. Modified GCC translates code until certain point, and dumps the IR. RTCC parses that IR and proceeds with further compilation. It is shown that adjusting GCC frontend for embedded processors is not as simple as modifying target description.", "num_citations": "4\n", "authors": ["1901"]}
{"title": "Software for automatic control of laboratory analysis\n", "abstract": " Inspection of physical and chemical substance characteristics makes an important part of product realization processes for many industrial systems. These processes require testing of dozens or hundreds of samples daily, in order to determine the value of the material characteristics and compare it with the established quality limits. Systematization and application of laboratory tests results would be poor quality without the proper computer support. This paper presents software intended for laboratories that monitor production processes.", "num_citations": "4\n", "authors": ["1901"]}
{"title": "A C compiler based methodology for implementing audio DSP applications on a class of embedded systems\n", "abstract": " This paper describes a methodology for a common task of audio application implementation from the referent C code to executable image targeting an audio fixed-point mid-scale DSPs. This methodology tries to efficiently cover the gap between the referent code and the assembler code by usage of the C compiler, which supports fixed-point types defined in C language extensions for the embedded processors. By relaying on C++ classes this methodology deliveries a possibility to debug a DSP compiler ready C code in a C++ environment (e.g. Visual C++). The methodology was successfully applied to several audio applications, such as Dolby Volume, SRS TSHD, SRS VIQ, and Audyssey Dynamic EQ, and their implementation to Cirrus Logic Coyote DSP family. Experience with those applications shows that this methodology greatly shortens time to market for DSP firmware product.", "num_citations": "4\n", "authors": ["1901"]}
{"title": "Vision-Based Extrapolation of Road Lane Lines in Controlled Conditions\n", "abstract": " Keeping vehicle in the right track while driving is common task for humans, as they perceive lane lines with ease. Naturally, one of the essential tasks for autonomous vehicle would be to detect lane lines. Except for using them as constant reference in steering controller, they are used as inputs in other driver assistance functions like lane departure warning, for example. Different road and weather conditions make it difficult to detect lane lines, as marking can become indistinct or disappear. Many simple vision-based algorithms rely on detection of edges of the markings with Canny edge detection and previously mentioned problems can affect proper extrapolation of lanes. This paper also belongs to vision-based group of algorithms that use camera. It presents usage of color thresholding to detect lane edges and together with perspective transformations and Hough transform to extrapolate lane segments in image\u00a0\u2026", "num_citations": "3\n", "authors": ["1901"]}
{"title": "HTTP server for control of home appliances based on XMOS platform\n", "abstract": " Implementation of a smart house control system is given in this paper. The management over the network involves the use of special-purpose devices based on a microcontroller produced by company XMOS and specific software developed. This system provides control of household appliances through mobile devices (phones, iPhone / Android devices) or any other device that has a Web browser.", "num_citations": "3\n", "authors": ["1901"]}
{"title": "A retargetable C compiler for embedded systems\n", "abstract": " With the expansion of the market of available embedded platforms the variety of target architectures is rapidly increasing. Therefore the need for retarget able software development tools has never been greater. The C compiler, probably the most significant development tool for embedded systems, is required to be quickly and easily adaptable for new architectures. This paper describes one such generic C compiler which has been adapted for Crystal 32-bit and MIPS 32-bit as two different target platforms. The aim of this paper is to prove that the compiler has modifiable infrastructure and can be easily adapted to support new architectures, as well as to improve the compiler in terms of extending this capability. The compiler has been tested for correctness for both architectures. For Crystal 32-bit platform quality testing has also been performed and all test results showed remarkable results. On the other hand, for\u00a0\u2026", "num_citations": "3\n", "authors": ["1901"]}
{"title": "Source code generators for ADAS feature deployment in context of ROS and adaptive AUTOSAR applications\n", "abstract": " Fast development of autonomous vehicles comes with many challenges. One of biggest platform wise challenges is parallel development of Adaptive AUSOSAT platform and application that run on it. Use of source code generators was chosen to solve this problem. This paper will give one solution of using ROS features to allow running adaptive application on still developing platform using source code generators. To understating why specific ROS concepts are used, overview of ROS concepts and Adaptive AUTOSAR platform is given in this paper. Use of IDL to describe interfaces and source code generators to generate C++ code allows programmers to focus only on important features, forgetting about implementation details and faster development of more portable software.", "num_citations": "2\n", "authors": ["1901"]}
{"title": "Source traffic modelling in WSN for acoustic sensing in reverberant environment\n", "abstract": " Recent research efforts show that Wireless Sensor Networks (WSN) for acoustic sensing have the potential for ubiquitous sensing. The key challenge in delivering such WSN architecture is the trade-off between the cost of wireless sensors and acoustic analysis complexity. In this paper, we are proposing a source traffic modelling considering a system in which sensors are connected to a cloud based processing service. Acoustic sensing in practice generates great amount of traffic, and therefore a new model of sensing in a reverberant environment is necessary for better understanding of traffic nature and its volume. To lower the sensor cost, we have considered low-complexity acoustic event detection on the sensor side for preventing unnecessary traffic. The proposed acoustic sensor acts like a noise gate. Sound propagation in reverberant environment is modelled using the modified Image-Source Modelling (ISM) method. The source traffic model is validated in Matlab simulation and in real reverberant environment. Results show an example of bandwidth used by a simple acoustic sensor.", "num_citations": "2\n", "authors": ["1901"]}
{"title": "A light-weight SIP-based execution management service for bag-of-tasks grid system\n", "abstract": " The paper presents application of SIP protocol in the context of bag-of-tasks grid architecture. The SIP protocol has been used in realization of the execution management service. The main idea is use of stateful SIP proxy as request broker. The paper provides description of the concept, and the prototype system that has been built, as well as calculation of estimated performance level and it's relation to maximum RTT of grid system. The main advantage of this light-weight grid architecture is the reuse of a mature infrastructure.", "num_citations": "2\n", "authors": ["1901"]}
{"title": "Control of unmanned aerial vehicle based on XMOS platform\n", "abstract": " This paper describes one solution for quadrotor aircraft control based on XMOS platform. It describes implementation of systems for orientation and position estimation in 3-D space, and algorithm for reaching and maintaining requested position and orientation based on PID regulation. It also contains description of quadrotor physical model built for the purpose of system verification.", "num_citations": "2\n", "authors": ["1901"]}
{"title": "Twitter controlled real time audio synthesizer based on XMOS platform\n", "abstract": " This paper describes one solution of the audio system based on xCORE architecture of XMOS company. xCORE microcontroller is connected to the Cirrus Logic development board (used as the audio output) via I2S (Integrated-Interchip Sound) and I2C (Inter-Integrated Circuit) serial interface where digital to analog conversion is done. Microcontroller from Twitter servers downloads tweets that contain musical notes, generates musical tones and sends it (in basic form or delayed - echo effect) to the audio output.", "num_citations": "2\n", "authors": ["1901"]}
{"title": "An approach to instruction set compiled simulator development based on a target processor C compiler back-end design\n", "abstract": " Many instruction set simulation approaches place the retargetability and/or cycle-accuracy as the key features for easier architectural exploration and performance estimation early in the hardware development phase. This paper describes an approach in which importance of speed and controllability is placed above the cycle-accuracy and retargetability, thus providing a better platform for software development. The main idea behind this work is to associate the compiled simulator effort with the development of the C language compiler for the target embedded processor, using the knowledge related to compilers and reusing some common software elements. Through the prototype design of a compiled simulator for the Cirrus Logic Coyote DSP architecture, many implementation aspects are presented showing that this approach has great potential.", "num_citations": "2\n", "authors": ["1901"]}
{"title": "TM Program Concurrency Analysis: Parallelism versus Number of Schedules\n", "abstract": " \u25cb I (P= 1)= n! Why? Same as in the previous case.\u25cb I (P\u2265 n)= n! Why? Because when n TxNs run in parallel, TM will allow only one of them to get committed,(n-1) TxNs will be aborted. TM may select any TxN out of these n TxNs to be committed, so there is n such selections. Similarly, when (n-1) TxNs run in parallel, TM may make (n-1) selections, and so forth\u2026 Thus the total number of these selections is", "num_citations": "2\n", "authors": ["1901"]}
{"title": "Scripting framework for graphical configuration tool for embedded devices\n", "abstract": " Graphical device configuration tools are usually created statically from device description file. This description file specifies list of configurable registers, their descriptions and graphical controls. While this approach works well for simple controls modifying a single register, behavior of more complex controls needs to be described through script code. This paper presents a way of extending a configuration tool with Jython based scripting framework that allows creation of arbitrarily complex controls.", "num_citations": "1\n", "authors": ["1901"]}