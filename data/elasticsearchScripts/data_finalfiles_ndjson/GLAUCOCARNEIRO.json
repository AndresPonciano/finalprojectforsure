{"title": "The impact of code smells on software bugs: A systematic literature review\n", "abstract": " Context: Code smells are associated to poor design and programming style, which often degrades code quality and hampers code comprehensibility and maintainability. Goal: identify published studies that provide evidence of the influence of code smells on the occurrence of software bugs. Method: We conducted a Systematic Literature Review (SLR) to reach the stated goal. Results: The SLR selected studies from July 2007 to September 2017, which analyzed the source code of open source software projects and several code smells. Based on evidence of 16 studies covered in this SLR, we conclude that 24 code smells are more influential in the occurrence of bugs relative to the remaining smells analyzed. In contrast, three studies reported that at least 6 code smells are less influential in such occurrences. Evidence from the selected studies also point out tools, techniques, and procedures that should be applied to analyze the influence of the smells. Conclusions: To the best of our knowledge, this is the first SLR to target this goal. This study provides an up-to-date and structured understanding of the influence of code smells on the occurrence of software bugs based on findings systematically collected from a list of relevant references in the latest decade. View Full-Text", "num_citations": "19\n", "authors": ["388"]}
{"title": "Evaluating the usefulness of software visualization in supporting software comprehension activities\n", "abstract": " Modern IDEs offer built-in support for developing plug-ins. More recently, we have seen a growing number of plug-ins that offer non-conventional software visualization interfaces. They usually aim to help programmers to understand unfamiliar source code by representing it in visual structures such as trees, scatter-plots or graphs. Although very attractive visually, we need to know more about the effectiveness of these interfaces in conveying information to software engineers. In this paper, we propose an infrastructure to empirically evaluate how useful are non-conventional visual paradigms in supporting software comprehension activities. The results for the first pilot study indicated that our experimental environment was consistent and could move to a full scale controlled experiment.", "num_citations": "17\n", "authors": ["388"]}
{"title": "Combining software visualization paradigms to support software comprehension activities\n", "abstract": " Modern IDEs offer built-in support for developing plug-ins. More recently, we have seen a growing number of plug-ins that offer non-conventional software visualization interfaces. They usually aim to help programmers to understand unfamiliar source code by representing it in visual structures such as trees, scatter-plots or graphs. This poster presents a plug-in built to integrate and combine several software visualization paradigms for supporting customized software comprehension activities.", "num_citations": "16\n", "authors": ["388"]}
{"title": "Sourceminer: Towards an extensible multi-perspective software visualization environment\n", "abstract": " In spite of the available resources provided by modern IDEs, program understanding remains as a difficult task in software engineering. This paper presents a software visualization environment named SourceMiner. Implemented as an Eclipse plug-in to enhance software comprehension activities, SourceMiner is an extensible, interactive and coordinated multi-perspective environment. This paper describes the principles behind the design of SourceMiner, and discusses how it has been used to support software comprehension activities such as the identification of code smells and the characterization of object-oriented software systems.", "num_citations": "12\n", "authors": ["388"]}
{"title": "Sourceminer-a multi-perspective software visualization environment\n", "abstract": " In spite of the available resources provided by modern IDEs, program understanding remains as a very difficult and important task in software engineering. This paper presents a software visualization environment named SourceMiner. Implemented as an Eclipse plug-in to enhance software comprehension activities, SourceMiner is an extensible, interactive and coordinated multi-perspective environment. It is multi-perspective because it provides sets of views that allow programmers to look at the software from different points of view. It is coordinated because views are linked to each other, and consistently respond to the actions executed by the programmers on the environment. It is interactive in the sense that programmers can dynamically configure visual scenarios to better support the building of mental models. It is extensible because its architecture was designed to facilitate the inclusion of new views to the environment. This paper describes the principles behind the design of SourceMiner, and discusses how it has been used to support software comprehension activities such as the identification of code smells and the characterization of object-oriented software systems.", "num_citations": "10\n", "authors": ["388"]}
{"title": "Software process improvement in small and medium enterprises: A systematic literature review\n", "abstract": " The knowledge of characteristics and profile of a company is the key to plan its software process improvement. It helps focusing efforts to promote alignment with organizational culture and to support the consolidation of best practices already implemented. This paper presents a systematic literature review to identify evidences in the literature related to the challenges and opportunities of the adoption of software process improvement in small and medium enterprises. The results from the study indicate that there are relevant issues that can be considered in the effective adoption of software engineering best practices in small and medium enterprises.", "num_citations": "9\n", "authors": ["388"]}
{"title": "Proposing a visual approach to support the characterization of software comprehension activities\n", "abstract": " Modern IDE provides several resources to visually represent and explore the software. Nonetheless, there is limited empirical evidence of how those resources are utilized in specific software engineering activities. This has led to several studies to characterize the usage of IDE resources. The majority of these studies rely on methods that are costly and time consuming. This paper proposes a visual approach to help the characterization of IDE usage during software maintenance activities. It works by gathering data for all primitive operations performed by the programmers on the IDE, registering it in a log file and presenting the information abstracted from this log in an interactive visual interface. The interface transforms the fine-grained log data into meaningful information to represent how programmers use the IDE resources.", "num_citations": "9\n", "authors": ["388"]}
{"title": "Frequent releases in open source software: A systematic review\n", "abstract": " Context: The need to accelerate software delivery, supporting faster time-to-market and frequent community developer/user feedback are issues that have led to relevant changes in software development practices. One example is the adoption of Rapid Release (RR) by several Open Source Software projects (OSS). This raises the need to know how these projects deal with software release approaches. Goal: Identify the main characteristics of software release initiatives in OSS projects, the motivations behind their adoption, strategies applied, as well as advantages and difficulties found. Method: We conducted a Systematic Literature Review (SLR) to reach the stated goal. Results: The SLR includes 33 publications from January 2006 to July 2016 and reveals nine advantages that characterize software release approaches in OSS projects; four challenge issues; three possibilities of implementation and two main motivations towards the adoption of RR; and finally four main strategies to implement it. Conclusion: This study provides an up-to-date and structured understanding of the software release approaches in the context of OSS projects based on findings systematically collected from a list of relevant references in the last decade. View Full-Text", "num_citations": "8\n", "authors": ["388"]}
{"title": "Cloud Computing Adoption, Cost-benefit Relationship and Strategies for Selecting Providers: A Systematic Review.\n", "abstract": " Context: Cloud computing has been one of the most promising computing paradigms in industry to provide a customizable and resourceful platform to deploy software. There are a number of competing providers and available services that allows organizations to access computing services without owning the corresponding infrastructure. Goal: Identify the main characteristics of opportunities to migrate to the cloud, the respective challenges and difficulties as well as factors that affect the cost-benefit relationship of such adoption. Method: This paper presents a systematic literature review to compare reported strategies of organizations to migrate and adopt cloud computing and their perception of the cost-benefit of this adoption. Results: The overall data collected from these studies depicts that a significant part of the companies perceived inclination towards for the innovation adoption process influenced by technological, organizational and environmental contexts. Conclusion: Due to the variety of strategies, approaches and tools reported in the primary studies, it is expected that the results in this systematic literature review would help in establishing knowledge on how the companies should adopt and migrate to the cloud, how the cost-benefit relationship can be evaluated as well as providers can be selected. These findings can be a useful reference to develop guidelines for an effective use of cloud computing.", "num_citations": "8\n", "authors": ["388"]}
{"title": "An experimental platform to characterize software comprehension activities supported by visualization\n", "abstract": " Software visualization has been pointed out as one of the solutions to overcome challenges that programmers face in understanding unfamiliar source code. Our work proposes an extensible multi-view software visualization infrastructure implemented as an Eclipse plug-in called SourceMiner. It allows programmers to perform tasks supported by visualization interfaces provided by the IDE. A querying view is integrated into the tool, allowing for the dynamic filtering of the modules rendered into the visualization interfaces. The whole infrastructure is conceived as an experimental platform. All actions performed by the programmer are captured in a log file. This facilitates the analysis of the IDE usage while programmers are performing specific software engineering tasks.", "num_citations": "7\n", "authors": ["388"]}
{"title": "An Eclipse-Based Visualization Tool for Software Comprehension\n", "abstract": " Modern IDEs offer built-in support for developing plug-ins. More recently, we have seen a growing number of plug-ins that offer non-conventional software visualization interfaces. They usually aim to help programmers to understand unfamiliar source code by representing it in visual structures such as trees, scatter-plots or graphs. Although very attractive visually, we need to know more about the effectiveness of these interfaces in conveying information to software engineers. In this paper, we discuss some concepts and guidelines regarding the requirements of visualization tools for software comprehension as well as the set-up of an infrastructure to empirically evaluate how useful are those tools in supporting software comprehension activities.", "num_citations": "7\n", "authors": ["388"]}
{"title": "On the Impact of Product Quality Attributes on Open Source Project Evolution\n", "abstract": " Context: Several Open Source Software (OSS) projects have adopted frequent releases as a strategy to deliver both new features and fixed bugs on time. This cycle begins with express requests from the project\u2019s community, registered as issues in bug repositories by active users and developers. Each OSS project has its own priorities established by their respective communities. A a still open question is the set of criteria and priorities that influence the decisions of which issues should be analyzed, implemented/solved and delivered in next releases. In this paper, we present an exploratory study whose goal is to investigate the influence of target product quality attributes in software evolution practices of OSS projects. The goal is to search for evidence of relationships between these target attributes, priorities assigned to the registered issues and the ways they are delivered by product releases. To this end\u00a0\u2026", "num_citations": "6\n", "authors": ["388"]}
{"title": "On the use of software visualization to support concern modularization analysis\n", "abstract": " Most of the methods for concern modularity analysis rely on the exploration of crosscutting concerns directly in source code artifacts. However, as both the code size and the number of concerns increase, analyses of concern properties become an even more cumbersome and time-consuming task. In this paper, we propose a visual representation of crosscutting concerns using a software visualization infrastructure called SourceMiner. The infrastructure facilitates concern modularization analysis based on the following concepts: inheritance tree and package-class-method structure. The analysis based on each of these concepts is supported by the views and its resources available in the infrastructure. An example of use illustrates the infrastructure support to visually analyze the concern modularity of an open source code.", "num_citations": "6\n", "authors": ["388"]}
{"title": "The importance of cognitive and usability elements in designing software visualization tools\n", "abstract": " Modern IDEs offer built-in support for developing plug-ins. More recently, we have seen a growing number of plug-ins that offer non-conventional software visualization interfaces. They usually aim to help programmers to understand unfamiliar source code by representing it in visual structures such as trees, scatter-plots or graphs. Although very attractive visually, we need to know more about the effectiveness of these interfaces in conveying information to software engineers. In this paper, we discuss some concepts and guidelines regarding the requirements of visualization tools for software comprehension as well as the set-up of an infrastructure to empirically evaluate how useful are those tools in supporting software comprehension activities.", "num_citations": "6\n", "authors": ["388"]}
{"title": "Propondo uma arquitetura para ambientes interativos baseados em multiplas vis\u00f5es\n", "abstract": " Este artigo prop\u00f5e uma arquitetura para ambientes interativos baseados em m\u00faltiplas vis\u00f5es (AIMV). Para esta finalidade s\u00e3o apresentados os objetivos e s\u00e3o discutidos os principais conceitos relacionados aos AIMVs. O artigo tamb\u00e9m relata o desenvolvimento de duas aplica\u00e7\u00f5es a partir do AIMV proposto. A primeira com a finalidade de apoio \u00e0 compreens\u00e3o de software. A segunda com a finalidade de apoio \u00e0 an\u00e1lise do desempenho de redes de computadores. O desenvolvimento destas duas aplica\u00e7\u00f5es teve o objetivo de analisar a viabilidade da arquitetura proposta.", "num_citations": "5\n", "authors": ["388"]}
{"title": "Tools to Support SMEs to Migrate to the Cloud: Opportunities and Challenges\n", "abstract": " The cloud computing paradigm represents a shift in the way companies deal with customizable and resourceful platforms to deploy software. It has been receiving increasing attention, partly due to its claimed financial and functional benefits. Cloud computing providers provide organizations with access to computing services without the need for those organizations to own the providing infrastructure. However, migration of legacy information systems to the cloud is not simple. This field is very dynamic and related technologies are rapidly evolving. For instance, Small and Medium Enterprises (SMEs) may not necessarily be well prepared to deal with issues such as multi-tenancy, elasticity, interoperability, and cloud services. With such issues in view, we searched for different types of tools referenced in the literature to support migration to the cloud and discussed related challenges and advantages of their\u00a0\u2026", "num_citations": "3\n", "authors": ["388"]}
{"title": "SourceMiner: Um Ambiente Integrado Para Visualiza\u00e7\u00e3o Multi-Perspectiva De Software\n", "abstract": " Atividades de compreens\u00e3o t\u00eam papel importante em engenharia de software. A leitura  e a busca de informa\u00e7\u00f5es no c\u00f3digo fonte n\u00e3o s\u00e3o atividades triviais e requerem esfor\u00e7o  significativo em sistemas de m\u00e9dio e grande porte. Atualmente, apesar da maioria dos  ambientes de desenvolvimento de software (ADS) oferecer apoio \u00e0s atividades de  compreens\u00e3o, eles ainda n\u00e3o adotaram plenamente t\u00e9cnicas e recursos de visualiza\u00e7\u00e3o para tal  finalidade. Esta \u00e9 uma limita\u00e7\u00e3o significativa dado que o ser humano tem maior capacidade  para obter informa\u00e7\u00e3o atrav\u00e9s da vis\u00e3o do que todos os outros sentidos combinados. Al\u00e9m  disso, as pr\u00f3prias t\u00e9cnicas de visualiza\u00e7\u00e3o de software ainda n\u00e3o adotaram recursos de  intera\u00e7\u00e3o e coordena\u00e7\u00e3o j\u00e1 consolidados na \u00e1rea de visualiza\u00e7\u00e3o de informa\u00e7\u00e3o.  Esta tese prop\u00f5e um ambiente interativo baseado em m\u00faltiplas vis\u00f5es chamado  SourceMiner, desenvolvido como um plug-in da ADS Eclipse, para apoiar as atividades de  compreens\u00e3o de software. O SourceMiner traz novos recursos e t\u00e9cnicas para a \u00e1rea de  visualiza\u00e7\u00e3o de software. O principal destes \u00e9 o uso de m\u00faltiplas vis\u00f5es, j\u00e1 adotadas em  visualiza\u00e7\u00e3o de informa\u00e7\u00e3o e compatibilizadas para visualiza\u00e7\u00e3o de software atrav\u00e9s do  conceito de perspectivas. O ambiente tamb\u00e9m utiliza mecanismos de coordena\u00e7\u00e3o entre as  vis\u00f5es, zoom sem\u00e2ntico e filtros interativos. O SourceMiner \u00e9 um ambiente expans\u00edvel no  qual \u00e9 poss\u00edvel incluir novas vis\u00f5es. Al\u00e9m disso, ele possui recursos de monitoramento de  atividades a partir dos quais podem ser realizados estudos para a an\u00e1lise do perfil de uso do  ADS e das funcionalidades oferecidas pelo\u00a0\u2026", "num_citations": "3\n", "authors": ["388"]}
{"title": "Impact of Developers Sentiments on Practices and Artifacts in Open Source Software Projects: A Systematic Literature Review.\n", "abstract": " Context: Sentiment Analysis proposes the use of Software Engineering techniques for automated identification of human behavior. There is a growing interest in the use of Sentiment Analysis in topics related to Computing, more specifically in Software Engineering itself. Objective: Analyze the impact of developers sentiments on software practices and artifacts in open source software projects. Methods: We conducted a Systematic Review to collect evidence from the literature regarding the impacts of developers sentiments on software practices and artifacts. Results: We have found that the growing number of studies in this area provides greater visibility of the direct influence of developers sentiments on software practices. Practices associated with developers productivity and collaboration, along with source code, are the most vulnerable to sentiments variation. Conclusions: With the results presented, we hope to contribute to the discussion about the potential of improvement the social environment quality of software projects, as the sentiments of developers can positively or negatively impact software practices and artifacts.", "num_citations": "2\n", "authors": ["388"]}
{"title": "Towards a roadmap for the migration of legacy software systems to a microservice based architecture\n", "abstract": " The migration of legacy software systems to a microservice based architecture is not a trivial task due to challenges and difficulties as reported in the literature. The concept of microservices mainly consists in software organized as a suite of small, modular, and independently deployed services that run on their own processes and communicate through well-defined, lightweight mechanisms to serve a business goal. However, the literature is still incipient in relation to step-by-step guidelines supporting practitioners to accomplish the migration from an existing, monolithic structure to a microservice based architecture. Goal: Discuss lessons learned from the migration of legacy software systems to microservices-based architecture. Method: We conducted two studies (a pilot and a case study) aiming at characterizing the relevants steps of such guidelines. Results: We report the steps and challenges observed during the migration reported in this study. Conclusion: We identify at least three main phases that drive the migration process.", "num_citations": "2\n", "authors": ["388"]}
{"title": "An experience report from the migration of legacy software systems to microservice based architecture\n", "abstract": " Context: The literature provides evidence of challenges and difficulties related to the migration of legacy software systems to a microservice based architecture. The idea of microservices stipulates that the software be organized as a suite of small, modular, and independently deployed services, in which each service runs on its own process and communicates through well-defined, lightweight mechanisms to serve a business goal. However, the literature lacks step-by-step guidelines telling practitioners how to accomplish the migration from an existing, monolithic structure to a microservice based architecture. Goal: Discuss lessons learned from the migration of legacy software systems to microservices-based architecture. Method: We conducted two studies (a pilot and a case study) aiming at characterizing the relevants steps of such guidelines. Results: We report the steps and challenges observed during\u00a0\u2026", "num_citations": "2\n", "authors": ["388"]}
{"title": "A Characterization of Cloud Computing Adoption based on Literature Evidence\n", "abstract": " Context: The cloud computing paradigm has received increasing attention because of its claimed financial and functional benefits. This paradigm is based on a customizable and resourceful platform to deploy software. A number of competing providers can support organizations to access computing services without owning the corresponding infrastructure. However, the migration of information systems and the adoption of this paradigm is not a trivial task. For this reason, evidence from the literature reporting and analyzing experiences in this migration should be widely disseminated and organized to be used by companies and by the research community. Goal: Characterize main strategies and methodologies reported in the literature to describe and analyze the adoption and migration to cloud computing Method: The characterization followed a four-phase approach having as a start point the selection of studies published in conferences and journals. Results: Data gathered from these studies reveal a tendency for companies to choose the public deployment model, the IaaS service model, the amazon platform, and how the most important characteristics in the cloud adoption decision are cost, performance, and security and privacy. Conclusion: Due to the variety of strategies, approaches and tools reported in the primary studies, it is expected that the results in this characterization study would help in establishing knowledge on how the companies should adopt and migrate to the cloud. These findings can be a useful reference to develop guidelines for an effective use of cloud computing.", "num_citations": "2\n", "authors": ["388"]}
{"title": "A Decision Process to Migrate Legacy Systems to SOA\n", "abstract": " The maintenance of legacy systems is not a trivial activity in Software Engineering. To tackle this problem, industry has to some extent migrated legacy systems to the Service Oriented Architectures (SOA). Issues such as the time needed to plan and execute the migration as well as the complexity and risks of this decision are challenges to be faced in such cases. This paper presents a decision process to select a methodology to migrate legacy systems to SOA considering the organization profile. The decision process considers characteristics of the organization, its legacy systems and the new architecture to be implemented. A fieldwork was conducted to characterize the execution of the decision process in a Brazilian public company. The results obtained in the fieldwork provided evidences of the feasibility of the decision process.", "num_citations": "2\n", "authors": ["388"]}
{"title": "Automatic Detection of Refactoring Opportunities\n", "abstract": " Software refactoring-improving the internal structure of the software without changing its observable behavior-is an important action towards avoiding software quality decay. Key to this activity is the identification of portions of the source code that offers opportunities for refactoring--the so called bad smells. The goal of this position paper is the discussion of an approach to help on the detection of code bad smells through source code metrics and the results obtained from its use. In this discussion, it is also important to bring new elements that might be affected through a refactoring sequence as, for example, structural testing requirements that can be used in the future as a new metric to detect refactoring opportunities.", "num_citations": "2\n", "authors": ["388"]}
{"title": "Code smells detection and visualization: A systematic literature review\n", "abstract": " Context: Code smells (CS) tend to compromise software quality and also demand more effort by developers to maintain and evolve the application throughout its life-cycle. They have long been catalogued with corresponding mitigating solutions called refactoring operations. Objective: This SLR has a twofold goal: the first is to identify the main code smells detection techniques and tools discussed in the literature, and the second is to analyze to which extent visual techniques have been applied to support the former. Method: Over 83 primary studies indexed in major scientific repositories were identified by our search string in this SLR. Then, following existing best practices for secondary studies, we applied inclusion/exclusion criteria to select the most relevant works, extract their features and classify them. Results: We found that the most commonly used approaches to code smells detection are search-based (30.1%), and metric-based (24.1%). Most of the studies (83.1%) use open-source software, with the Java language occupying the first position (77.1%). In terms of code smells, God Class (51.8%), Feature Envy (33.7%), and Long Method (26.5%) are the most covered ones. Machine learning techniques are used in 35% of the studies. Around 80% of the studies only detect code smells, without providing visualization techniques. In visualization-based approaches several methods are used, such as: city metaphors, 3D visualization techniques. Conclusions: We confirm that the detection of CS is a non trivial task, and there is still a lot of work to be done in terms of: reducing the subjectivity associated with the definition and detection of CS\u00a0\u2026", "num_citations": "1\n", "authors": ["388"]}
{"title": "Code smells detection and visualization: A systematic literature review\n", "abstract": " Context: Code smells (CS) tend to compromise software quality and also demand more effort by developers to maintain and evolve the application throughout its life-cycle. They have long been catalogued with corresponding mitigating solutions called refactoring operations. Objective: This SLR has a twofold goal: the first is to identify the main code smells detection techniques and tools discussed in the literature, and the second is to analyze to which extent visual techniques have been applied to support the former. Method: Over 83 primary studies indexed in major scientific repositories were identified by our search string in this SLR. Then, following existing best practices for secondary studies, we applied inclusion/exclusion criteria to select the most relevant works, extract their features and classify them. Results: We found that the most commonly used approaches to code smells detection are search-based (30.1\u00a0\u2026", "num_citations": "1\n", "authors": ["388"]}
{"title": "Investigating the Impact of Developers Sentiments on Software Projects\n", "abstract": " Several areas of knowledge are subject to the interference of social aspects in their processes. Sentiment Analysis uses Data Science techniques to support automated or semi-automated identification of human behavior and has been widely used to characterize the perception of issues from different areas from Politics to E-commerce. The objective of this paper is to analyze the impact of developers\u2019 sentiments on open source software projects based on evidence from the literature. To achieve this goal, we selected papers from Google Scholar reporting the impact of sentiments on software practices and artifacts. We have found studies that analyzed this impact based on extracted data from different sources. Productivity, collaboration, and the software product quality can be impacted by developers\u2019 sentiments.", "num_citations": "1\n", "authors": ["388"]}
{"title": "Strategies reported in the literature to migrate to microservices based architecture\n", "abstract": " Context: Microservice-oriented architecture relies on the implementation and deployment of small and autonomous microservices, rather than implementing the functionalities in one unique module to be deployed. They have been adopted as a solution to the shortcomings of the monolithic architecture such as lack of flexibility. Goal: This paper discusses lessons learned and challenges reported in the literature regarding the migration of legacy monolithic software systems to microservices based architecture. Method: We performed an automated search targeting public repositories to accomplish the stated goal. Results: Based on the evidence provided by 12 studies, we classified main findings in lessons learned related to the migration, as well as associated difficulties and challenges. Conclusions: the guidelines to migrate to microservices based architecture are maturing/evolving and the literature has\u00a0\u2026", "num_citations": "1\n", "authors": ["388"]}
{"title": "An Action Research Study towards the Use of Cloud Computing Scenarios in Undergraduate Computer Science Courses.\n", "abstract": " Cloud computing has been a successful paradigm in its goal to provide remote computing resources in a competitive and scalable way when compared to traditional computing scenarios. Companies have a growing interest in migrating and using cloud services. However, the literature has reported difficulties and challenges faced by companies while migrating their assets to the cloud. One of the possible reasons for this is the difficulty in the identification of qualified professionals to support companies to plan, perform and monitor the migration of their legacy systems to the cloud. This paper presents an action-research study analyzing the inclusion of cloud computing scenarios in the System Analysis and Design and Operating Systems undergraduate courses at Salvador University (UNIFACS). The results of the action-research study provided initial evidence that cloud computing resources integrated to the contents of the aforementioned courses can contribute to motivate and engage students in activities. In addition, the knowledge and experience gained by these students can improve their qualification to facilitate access to the labor market.", "num_citations": "1\n", "authors": ["388"]}
{"title": "Challenges and Opportunities in the Software Process Improvement in Small and Medium Enterprises: A Field Study\n", "abstract": " The characteristics and profiles of organizations are important issues for the planning of their software process improvement. It supports the alignment with organizational culture as well as with the consolidation of best practices already implemented. This paper presents the results of a field study to identify the perception of the industry about challenges and opportunities of software process improvement faced by Small and Medium Enterprises. This field study aimed at identifying the profile and perception of a group of software development firms concerning software process improvement. The results indicated a list of challenges and activities faced and performed by the companies toward the software process improvement journey.", "num_citations": "1\n", "authors": ["388"]}
{"title": "Ado\u00e7\u00e3o de boas pr\u00e1ticas agropecu\u00e1rias para obten\u00e7\u00e3o higi\u00eanica de leite em pequenas propriedades leiteiras\n", "abstract": " Nos \u00faltimos anos, a produ\u00e7\u00e3o leiteira da regi\u00e3o agreste de Pernambuco cresceu 23%, representando 73% da produ\u00e7\u00e3o leiteira do Estado de Pernambuco, com favor\u00e1vel perspectiva de crescimento atrav\u00e9s dos investimentos privados que v\u00eam sendo realizados (CONAB, 2004). Mas para obter uma produ\u00e7\u00e3o leiteira de qualidade e oferecer seguran\u00e7a ao consumidor \u00e9 de extrema import\u00e2ncia a ado\u00e7\u00e3o de m\u00e9todos preventivos para diminui\u00e7\u00e3o da contamina\u00e7\u00e3o do leite e infec\u00e7\u00f5es nos animais.A mastite representa um dos principais entraves para a bovinocultura leiteira, devido aos severos preju\u00edzos econ\u00f4micos que acarreta, tanto pela diminui\u00e7\u00e3o da produ\u00e7\u00e3o, como gastos com tratamento dos animais e descarte do leite. Caracterizada por um processo inflamat\u00f3rio da gl\u00e2ndula mam\u00e1ria, a mastite, trata-se de uma doen\u00e7a complexa de car\u00e1ter multifatorial, envolvendo diversos pat\u00f3genos, o ambiente e fatores inerentes ao animal (BRESSAN, 2000). Sua preval\u00eancia est\u00e1 relacionada, principalmente, ao manejo antes, durante e ap\u00f3s a ordenha. Isso explica a import\u00e2ncia da conscientiza\u00e7\u00e3o do ordenhador, dos procedimentos adequados de ordenha, incluindo as formas corretas de higieniza\u00e7\u00e3o e desinfec\u00e7\u00e3o do ambiente, do animal, do profissional e de todos os utens\u00edlios utilizados na ordenha (COSER, et", "num_citations": "1\n", "authors": ["388"]}
{"title": "Usando medi\u00e7\u00e3o de c\u00f3digo fonte para refractoring\n", "abstract": " Um problema comum em desenvolvimento de software \u00e9 a possibilidade de degrada\u00e7\u00e3o cont\u00ednua do software \u00e0 medida que novas funcionalidades v\u00e3o sendo acrescentadas sem que sejam tomadas as provid\u00eancias necess\u00e1rias para sua adapta\u00e7\u00e3o \u00e0 estrutura j\u00e1 existente.Aplica\u00e7\u00f5es usando linguagens orientadas a objeto podem ser reestruturadas a partir de refactorings (Fowler, 2000a)(Opdyke, 1992). Opera\u00e7\u00f5es de refactoring reorganizam a hierarquia de classes e redistribuem as vari\u00e1veis de inst\u00e2ncia e m\u00e9todos. De acordo com Fowler (2000a), o objetivo do refactoring \u00e9 tornar o software mais f\u00e1cil de ser compreendido e modificado, reestruturando implementa\u00e7\u00f5es existentes para torn\u00e1-las mais flex\u00edveis, din\u00e2micas e reutiliz\u00e1veis. Nesta disserta\u00e7\u00e3o s\u00e3o estabelecidos relacionamentos entre alguns dos principais tipos de refactorings propostos por Fowler (2000a) e m\u00e9tricas obtidas atrav\u00e9s do c\u00f3digo fonte do software. O uso de m\u00e9tricas tem potencial para aux\u00edlio na execu\u00e7\u00e3o do processo de refactoring e torna seus resultados analis\u00e1veis quantitativamente. Como resultado, tem-se um processo de refactoring mais previs\u00edvel e menos dependente de heur\u00edsticas pessoais.", "num_citations": "1\n", "authors": ["388"]}
{"title": "Relacionando refactorings e m\u00e9tricas de c\u00f3digo fonte\u2013um primeiro passo para detec\u00e7ao autom\u00e1tica de oportunidades de refactoring\n", "abstract": " Refactoring\u2013melhorar a estrutura interna do software sem modifica\u00e7\u00e3o no seu comportamento observ\u00e1vel\u2013\u00e9 um mecanismo importante para se evitar a degrada\u00e7\u00e3o da qualidade do software. Fundamental para tal finalidade \u00e9 a identifica\u00e7\u00e3o de trechos do c\u00f3digo fonte que apresentam oportunidades de refactoring\u2013comumente chamados de bad smells. Este artigo prop\u00f5e uma abordagem para auxiliar na detec\u00e7\u00e3o de bad smells atrav\u00e9s de medi\u00e7\u00e3o de c\u00f3digo fonte e seu foco \u00e9 a apresenta\u00e7\u00e3o de um primeiro passo no sentido implementar esta abordagem. Para tal finalidade foi realizado um estudo que relaciona m\u00e9tricas, refactorings e bad smells. O estudo \u00e9 dividido em duas partes. A primeira parte\u2013top-down\u2013\u00e9 baseada na aplica\u00e7\u00e3o anal\u00edtica do m\u00e9todo Meta Pergunta M\u00e9trica (MPM ou GQM, em ingl\u00eas) na defini\u00e7\u00e3o de m\u00e9tricas para detec\u00e7\u00e3o de bad smells. A segunda parte\u2013bottom-up\u2013\u00e9 um estudo emp\u00edrico do relacionamento entre m\u00e9tricas conhecidas de c\u00f3digo fonte, refactorings e bad smells.", "num_citations": "1\n", "authors": ["388"]}