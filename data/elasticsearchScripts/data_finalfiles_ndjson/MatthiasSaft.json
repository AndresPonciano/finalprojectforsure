{"title": "The EMISQ method and its tool support-expert-based evaluation of internal software quality\n", "abstract": " There is empirical evidence that internal software quality, e.g., the quality of source code, has great impact on the overall quality of software. Besides well-known manual inspection and review techniques for source code, more recent approaches utilize tool-based static code analysis for the evaluation of internal software quality. Despite the high potential of code analyzers the application of tools alone cannot replace well-founded expert opinion. Knowledge, experience and fair judgment are indispensable for a valid, reliable quality assessment, which is accepted by software developers and managers. The EMISQ method (Evaluation Method for Internal Software Quality), guides the assessment process for all stakeholders of an evaluation project. The method is supported by the Software Product Quality Reporter (SPQR), a tool which assists evaluators with their analysis and rating tasks and provides\u00a0\u2026", "num_citations": "75\n", "authors": ["2247"]}
{"title": "Jack:: A java constraint kit\n", "abstract": " Most existing libraries providing constraint facilities are embedded in the logic programming language, Prolog, or in the object-oriented language, C++. Recently, some proposals have been made to integrate constraint handling in Java. The goal of this work is to provide a new constraint library for Java, called JACK. It consists of a high-level language for writing constraint solvers, a generic search engine and a tool to visualize the simplification and propagation of constraints.", "num_citations": "63\n", "authors": ["2247"]}
{"title": "A method for continuous code quality management using static analysis\n", "abstract": " The quality of source code is a key factor for any software product and its continuous monitoring is an indispensable task for a software development project. We have developed a method for systematic assessing and improving the code quality of ongoing projects by using the results of various static code analysis tools. With different approaches for monitoring the quality (a trend-based one and a benchmarking-based one) and an according tool support we are able to manage the large amount of data that is generated by these static analyses. First experiences when applying the method with software projects in practice have shown the feasibility of our method.", "num_citations": "30\n", "authors": ["2247"]}
{"title": "The value of software documentation quality\n", "abstract": " This paper presents the results of a study on software documentation quality in practice. Goal of this study is identifying the current state of software documentation quality and used analysis techniques for determining software documentation quality. Moreover, we aim at finding out, whether there is a demand for a tool-based software documentation quality analysis approach. This approach consists of a documentation quality model and a document checking tool, as proposed in previous work. We developed an online survey and asked about 300 experts to answer it. The survey was completed by 88 experts and the overall results confirm the importance of software documentation quality as well as the need for better tool support. The survey shows that the most important quality attributes with regard to documentation quality are accuracy, clarity, consistency, readability, structuredness, and understand ability. Most\u00a0\u2026", "num_citations": "28\n", "authors": ["2247"]}
{"title": "On the validity of benchmarking for evaluating code quality\n", "abstract": " Evaluating source code quality is a laborious task when performed by experts. There exist a number of approaches that try to provide an automatic assessment. Absolute quality assessment methods (eg based on thresholds) did not yet proof the significance of the results. Software benchmarking is a relative assessment approach based on the general idea of benchmarking from other industries. We developed a benchmarking-oriented code quality assessment method that at least overcomes known technical problems of other benchmark based methods. Nevertheless, the major concern is to validate the significance of benchmarking based results by comparing these results with the quality assessments of experts. For this purpose we conducted two studies (one for Java projects, the other for C# projects) involving a total of 10 open source projects and 22 experts. While the first experiment with Java projects has provided a result that has motivated us to use the benchmarking-oriented assessment more intensively, the experiment with C# showed us that we cannot trust the results of the automatic benchmark assessment blindly.", "num_citations": "23\n", "authors": ["2247"]}
{"title": "Measuring object-oriented design principles: The results of focus group-based research\n", "abstract": " Object-oriented design principles are fundamental concepts that carry important design knowledge and foster the development of software-intensive systems with a focus on good design quality. They emerged after the first steps in the field of object-oriented programming and the recognition of best practices in using this programming paradigm to build maintainable software. Although design principles are known by software developers, it is difficult to apply them in practice without concrete rules to follow. We recognized this gap and systematically derived design best practices for a number of design principles and provide tool support for automatic measurement of these practices. The aim of this paper is to examine the relationship between design best practices and 10 selected design principles. This should provide evidence whether the key design aspects of the design principles are covered. We conducted\u00a0\u2026", "num_citations": "22\n", "authors": ["2247"]}
{"title": "MUSE: A Framework for Measuring Object-Oriented Design Quality.\n", "abstract": " Good object-oriented design facilitates the maintainability of a software product. While metric-based approaches and the idea of identifying design smells have been established, there still remains the gap of verifying the compliance of design best practices in source code. Thus, there is no comprehensive set of metrics or design best practices that does not only support design measurement and evaluation but can also guide the improvement process. This paper proposes a novel approach based on measuring design best practices that closes the gap between the identification of design flaws and the support for improvements. An expert group six researchers captured a set of 67 design best practices that are implemented by the framework MUSE (Muse Understand Script Engine). For a first validation of MUSE in this paper, its measuring result is compared with QMOOD, which is an established metric-based\u00a0\u2026", "num_citations": "22\n", "authors": ["2247"]}
{"title": "A comprehensive code-based quality model for embedded systems: systematic development and validation by industrial projects\n", "abstract": " Existing software quality models typically focus on common quality characteristics such as the ISO 25010 software quality characteristics. However, most of them provide insufficient operationalization for quality assessments of source code. Moreover, they usually focus on software in general or on information systems and do not sufficiently cover the particularities of embedded systems. We have developed a quality model that covers quality requirements for source code that are specific for embedded systems software. It provides comprehensive operationalization (with 336 measures) for C and C++ systems, which allows for largely automated quality assessments. The empirical evaluations performed acknowledge moderate completeness of the requirements and the associated measures. Therefore, we still see room for improvements to allow covering even more aspects of embedded systems software quality\u00a0\u2026", "num_citations": "21\n", "authors": ["2247"]}
{"title": "Towards an operational safety standard for software: Modelling iec 61508 part 3\n", "abstract": " Safety standards are an important means for developing safety-critical (software) systems. Usually they provide a set of requirements and recommendations in order to support implementing safe software, such as the prominent IEC 61508 functional safety standard. Meeting them leads to safer software and reduces the likelihood for harms on people and environment. But for both, the development team and assessors, the application of the standard in practice is difficult and often leads to problems due to unclear requirements and (missing) acceptance criteria. For this purpose a quality model for the safety standard helps applying the standard objectively and provides guidance for the software development team. Concrete measures and rules of code, architecture and documentation analysis tools help to operationalize the standard that is covered by the quality model. Using documentation analysis tools helps\u00a0\u2026", "num_citations": "21\n", "authors": ["2247"]}
{"title": "Tool support for expert-centred code assessments\n", "abstract": " There is empirical evidence that the code quality of software has an important impact on the external, i.e., user perceptible, software quality. Currently a large number of source code metrics exist that seem to ease the evaluation of code quality. Nevertheless, studies show that the theoretical foundations are weak and promising approaches for the automatic assessment of code quality are to be considered with great caution. We therefore came to the conclusion that the metric values and other findings provided by various static code analysis tools can only be used in the context of an expert-centred assessment of internal software quality. In order to be able to carry out code quality assessments in a timely and efficient manner it is inevitable to have additional tool support. For that purpose we developed the eclipsed based tool software product quality reporter (SPQR) that supports expert-centred evaluation of source\u00a0\u2026", "num_citations": "21\n", "authors": ["2247"]}
{"title": "Automatic checking of quality best practices in software development documents\n", "abstract": " Quality assurance tasks of software products typically take place throughout the entire software development life-cycle. Frequently, paper-based inspections methods are used to review software development documents (e.g. requirements specifications, design documents, test plans). Nevertheless, even though the quality of these documents has a major impact on the quality of the developed software product, they are often not as rigorously reviewed as source code. This paper presents a tool-based approach that facilitates the software inspection process in order to determine defects of generally accepted documentation best practices in software development documents. Moreover, we present results of a conducted empirical study and show how this tool-based approach helps to facilitate inspection tasks and to support gathering information on the quality of the inspected documents.", "num_citations": "19\n", "authors": ["2247"]}
{"title": "Measuring, assessing and improving software quality based on object-oriented design principles\n", "abstract": " Good object-oriented design is crucial for a successful software product. Metric-based approaches and the identification of design smells are established concepts for identifying design flaws and deriving design improvements thereof. Nevertheless, metrics are difficult to use for improvements as they provide only weak guidance and are difficult to interpret. Thus, this paper proposes a novel design quality model (DQM) based on fundamental object-oriented design principles and best practices. In course of discussing DQM, the paper provides a contribution in three directions: (1) it shows how to measure design principles automatically, (2) then the measuring result is used to assess the degree of fulfilling object-oriented design principles, (3) and finally design improvements of identified design flaws in object-oriented software are derived. Additionally, the paper provides an overview of the research area by\u00a0\u2026", "num_citations": "17\n", "authors": ["2247"]}
{"title": "A visualization tool for Constraint Handling Rules\n", "abstract": " This paper presents a visualization tool, called VisualCHR, that supports the development of constraint solvers written in the high-level language Constraint Handling Rules (CHR). VisualCHR can be used to debug and to improve the eciency of constraint solvers. It can also be used to understand the details of constraint propagation methods and the interaction of dierent constraints implemented by means of CHR. Thus, it is suitable for users at dierent levels of expertise.", "num_citations": "17\n", "authors": ["2247"]}
{"title": "Classroom assignment using constraint logic programming\n", "abstract": " The Classroom Assignment problem consists of scheduling a set of courses into a fixed number of rooms, given a fixed timetable. At the University of Munich, a classroom plan has to be created each semester after collecting timetables of all departments and wishes of teachers. This planning is very complex since a lot of constraints have to be met, eg room size and equipment. Using constraint-based programming, we developed a prototype, called RoomPlan, that supports automatic creation of classroom plans. With RoomPlan a schedule can be created interactively within some minutes instead of some days. RoomPlan was presented at the Systems\u2019 99 Computer exhibition in Munich.", "num_citations": "16\n", "authors": ["2247"]}
{"title": "Model-based product quality evaluation with multi-criteria decision analysis\n", "abstract": " The ability to develop or evolve software or software-based systems/services with defined and guaranteed quality in a predictable way is becoming increasingly important. Essential - though not exclusive - prerequisites for this are the ability to model the relevant quality properties appropriately and the capability to perform reliable quality evaluations. Existing approaches for integrated quality modeling and evaluation are typically either narrowly focused or too generic and have proprietary ways for modeling and evaluating quality. This article sketches an ap- proach for modeling and evaluating quality properties in a uniform way, without losing the ability to build sufficiently detailed customized models for specific quality properties. The focus of this article is on the description of a multi-criteria aggregation mechanism that can be used for the evaluation. In addition, the underlying quality meta-model, an example application scenario, related work, initial application results, and an outlook on future research are presented.", "num_citations": "14\n", "authors": ["2247"]}
{"title": "An approach for a method and a tool supporting the evaluation of the quality of static code analysis tools\n", "abstract": " There is a lack of information concerning the quality of static code analysis tools. In order to overcome this we therefore developed a method and a tool supporting quality engineers to determine the quality of static code analysis tools. This paper shows how the method works and where the tool supports it. We already applied the combination of the method and its tool to two static code analysis tools in different versions. On this basis, we further illustrate some results of the usage of the method.", "num_citations": "13\n", "authors": ["2247"]}
{"title": "Improving object-oriented design quality: a portfolio-and measurement-based approach\n", "abstract": " Current software development trends have shortened release cycles and forced developers to implement short-term solutions that cannot cope with increasing product complexity. This phenomenon of introducing hasty design choices or applying bad design practices becomes something known as technical debt, in particular design debt. To pay off this debt, the literature offers approaches for identifying these design flaws; however, few methods for properly prioritizing investment efforts are available. In this paper, we propose an approach that supports the decision-making process regarding design improvements. It identifies violations of design best practices that are then arranged within a two-dimensional portfolio matrix. This matrix combines the importance of practices of design quality with actual achievement relative to a benchmark suite. To show the application of the approach in a quality-improvement\u00a0\u2026", "num_citations": "10\n", "authors": ["2247"]}
{"title": "A Survey on the Importance of Object-oriented Design Best Practices\n", "abstract": " To measure object-oriented design quality, metric-based approaches have been established. These have then been enhanced by identifying design smells in code. While these approaches are useful for identifying hot spots that should be refactored, they are still too vague to sufficiently guide software developers to implement improvements. This is why our previous work focuses on measuring the compliance of source code with object-oriented design best practices. These design best practices were systematically derived from the literature and can be mapped to design principles, which can help reveal fundamental object-oriented design issues in a software product. Despite the successful applications of this approach in industrial and open source projects, there is little accepted knowledge about the importance of various design best practices. Consequently, this paper shows the result of an online survey aimed\u00a0\u2026", "num_citations": "9\n", "authors": ["2247"]}
{"title": "Objective safety compliance checks for source code\n", "abstract": " Safety standards such as IEC 61508 are an important instrument for developing safety-critical systems. They provide requirements and recommendations to assist engineers in system and software development. Nevertheless, applying this standard in practice is difficult due to unclear requirements and unclear or missing acceptance criteria. We systematically developed a quality model including proper measurement support that covers the code-related parts of IEC 61508 in [20]. In this paper, we present the assessment approach for automatic compliance checks of the code-related parts of the standard. We find in a validation study that the assessment results obtained by applying this approach to real-world projects are in line with their externally granted certification. The results are valid for the vast majority of the modeled elements of the standard. Moreover, by drilling down into the assessment results, we are\u00a0\u2026", "num_citations": "9\n", "authors": ["2247"]}
{"title": "Automated quality defect detection in software development documents\n", "abstract": " Quality of software products typically has to be assured throughout the entire software development life-cycle. However, software development documents (eg requirements specifications, design documents, test plans) are often not as rigorously reviewed as source code, although their quality has a major impact on the quality of the evolving software product. Due to the narrative nature of these documents, more formal approaches beyond software inspections are difficult to establish. This paper presents a tool-based approach that supports the software inspection process in order to determine defects of generally accepted documentation best practices in software development documents. By means of an empirical study we show, how this tool-based approach helps accelerating inspection tasks and facilitates gathering information on the quality of the inspected documents.", "num_citations": "8\n", "authors": ["2247"]}
{"title": "Measuring maintainability of OO-Software-Validating the IT-CISQ quality model\n", "abstract": " The Consortium for IT Software Quality (IT-CISQ) standard claims to provide valid measures as well as an assessment method that are suitable for properly measuring software quality. We implemented the measures for maintainability as specified by the IT-CISQ standard and wanted to find out whether both \u2013 the IT-CISQ defined assessment method and the IT-CISQ measures \u2013 are suitable for determining the maintainability of object-oriented systems. We identified a reference study that classifies the maintainability of eight open-source Java projects. This study follows a comprehensive measurement and assessment process and therefore can be used for validating the IT-CISQ approach. Due to the missing consideration of project size metrics, the IT-CISQ assessment method is not capable of properly determining the quality of projects. Even considering size metrics does not substantially enhance the\u00a0\u2026", "num_citations": "7\n", "authors": ["2247"]}
{"title": "Method and apparatus for the determination of a quality assessment of a software code with determination of the assessment coverage\n", "abstract": " In a method for determining a quality assessment of a software code, the coverage is concomitantly calculated when determining the assessment. In order to increase the coverage, additional measurement results and assessments may be taken into account. Following changes to the software base, it is determined which of the additional measurements and assessment results should be renewed in order to provide or ensure the defined coverage.", "num_citations": "6\n", "authors": ["2247"]}
{"title": "Objective Measurement of Safety in the Context of IEC 61508-3\n", "abstract": " Safety standards like the IEC 61508 are an important source for developing safety-critical (software) systems as they provide a set of requirements and recommendations to assist engineers in system and software development. Applying this standard in practice leads to interpretation problems due to insufficient operationalization, i.e. unclear requirements and unclear or missing acceptance criteria. This makes it hard to measure the extent to which a product fulfills the requirements of the standard. For this, we systematically developed a quality model that covers the coding-related parts of the safety standard IEC 61508. It provides refinements to the recommendations and equips them with proper measurement support by means of static code analysis tools (236 measures for C/C++ systems). We found in an evaluation study that the used approach is suitable for covering the coding-related parts of the standard with\u00a0\u2026", "num_citations": "6\n", "authors": ["2247"]}
{"title": "Design debt prioritization: a design best practice-based approach\n", "abstract": " Technical debt (TD) in a software system is a metaphor that tries to illustrate the remediation effort of the already introduced quality deficit and the impact thereof to the business value of the system. To address TD, various management activities are proposed, each addressing a particular purpose. Whereas the activities of debt identification and measurement are broadly considered in literature, the activities of debt prioritization and communication lack appropriate approaches with an economic perspective. This work proposes a TD prioritization approach. Therefore, it narrows down the focus of TD to design debt and relies on the quantification of design best practices. Further, the non-conformance of these practices is assessed by applying a benchmarking technique. As a result, the gained information is transferred into a portfolio-matrix to support the prioritization and communication of design remediation actions\u00a0\u2026", "num_citations": "3\n", "authors": ["2247"]}
{"title": "Design debt prioritization\n", "abstract": " Technical debt (TD) in a software system is a metaphor that tries to illustrate the remediation effort of the already introduced quality deficit and the impact thereof to the business value of the system. To address TD, various management activities are proposed, each addressing a particular purpose. Whereas the activities of debt identification and measurement are broadly considered in literature, the activities of debt prioritization and communication lack appropriate approaches with an economic perspective. This work proposes a TD prioritization approach. Therefore, it narrows down the focus of TD to design debt and relies on the quantification of design best practices. Further, the non-conformance of these practices is assessed by applying a benchmarking technique. As a result, the gained information is transferred into a portfolio-matrix to support the prioritization and communication of design remediation actions. The applicability and suitability of the approach are demonstrated by using the source code of the open source project GeoGebra.", "num_citations": "2\n", "authors": ["2247"]}
{"title": "On the Suitability of a Portfolio-Based Design Improvement Approach\n", "abstract": " The design debt metaphor tries to illustrate quality deficits in the design of a software and the impact thereof to the business value of the system. To pay off the debt, the literature offers various approaches for identifying and prioritizing these design flaws, but without proper support in aligning strategic improvement actions to the identified issues. This work addresses this challenge and examines the suitability of our proposed portfolio-based design assessment approach. Therefore, this investigation is conducted based on three case studies where the product source code was analyzed and assessed using our portfolio-based approach. As a result, the approach has proven to be able to recommend concrete and valuable design improvement actions that can be adapted to project constraints.", "num_citations": "1\n", "authors": ["2247"]}
{"title": "A Framework for Measuring Object-Oriented Design Quality\n", "abstract": " Good object-oriented design facilitates the maintainability of a software product. While metric-based approaches and the idea of identifying design smells have been established, there still remains the gap of verifying the compliance of design best practices in source code. Thus, there is no comprehensive set of metrics or design best practices that does not only support design measurement and evaluation but can also guide the improvement process. This paper proposes a novel approach based on measuring design best practices that closes the gap between the identification of design flaws and the support for improvements. An expert group six researchers captured a set of 67 design best practices that are implemented by the framework MUSE (Muse Understand Script Engine). For a first validation of MUSE in this paper, its measuring result is compared with QMOOD, which is an established metric-based approach for measuring the quality of object-oriented design. The qualitative assessment based on data from six versions of the Java tool jEdit shows that MUSE is better suited to guide improvements than QMOOD, eg, for the design property encapsulation QMOOD indicates no substantial changes in the design quality while the data provided by MUSE highlights that the encapsulation property of jEdit became worse over time. These first promising results of the application of MUSE have to be further validated and future work will concentrate on measuring object-oriented design principles.", "num_citations": "1\n", "authors": ["2247"]}
{"title": "Method and Apparatus for Checking a Structure Conformity for a Piece Of Development Documentation with at Least One Development Document\n", "abstract": " A method and an apparatus for checking a structure conformity for a piece of development documentation with at least one development document are disclosed. The method may include the following steps: the at least one development document from the development documentation is read in and a document structure for the development document that has been read in is captured by a capture unit, and discrepancies in the captured document structure from a predetermined document structure are ascertained by a checking unit by using prescribed criteria for checking the structure conformity of the development documentation.", "num_citations": "1\n", "authors": ["2247"]}