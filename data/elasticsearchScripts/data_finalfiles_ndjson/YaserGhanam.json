{"title": "Emerging issues & challenges in cloud Computing\u2014A hybrid approach\n", "abstract": " As cloud computing continues to gain more momentum in the IT industry, more issues and challenges are being reported by academics and practitioners. In this paper, we aim to attain an understanding of the types of issues and challenges that have been emerging over the past five years and identify gaps between the focus of the literature and what practitioners deem important. A systematic literature review as well as interviews with experts have been conducted to answer our research questions. Our findings suggest that researchers have been mainly focusing on issues related to security and privacy, infrastructure, and data management. Interoperability across different service providers has also been an active area of research. Despite the significant overlap between the topics being discussed in the literature and the issues raised by the practitioners, our findings show that some issues and challenges that practitioners consider important are understudied such as software related issues, and challenges pertaining to learning fast-evolving technologies.", "num_citations": "55\n", "authors": ["2198"]}
{"title": "Making the leap to a software platform strategy: Issues and challenges\n", "abstract": " ContextWhile there are many success stories of achieving high reuse and improved quality using software platforms, there is a need to investigate the issues and challenges organizations face when transitioning to a software platform strategy.ObjectiveThis case study provides a comprehensive taxonomy of the challenges faced when a medium-scale organization decided to adopt software platforms. The study also reveals how new trends in software engineering (i.e. agile methods, distributed development, and flat management structures) interplayed with the chosen platform strategy.MethodWe used an ethnographic approach to collect data by spending time at a medium-scale company in Scandinavia. We conducted 16\u00a0in-depth interviews with representatives of eight different teams, three of which were working on three separate platforms. The collected data was analyzed using Grounded Theory.ResultsThe\u00a0\u2026", "num_citations": "51\n", "authors": ["2198"]}
{"title": "Extreme product line engineering: Managing variability and traceability via executable specifications\n", "abstract": " Extreme Programming (XP) has been reported to work well by valuing principles of simplicity, lightweight practices, effective feedback and continuous process and product improvement. This paper describes an approach towards managing software product lines in a setting where XP practices are common. The paper is an action research describing a case where we handled variability in the domain of intelligent home systems to satisfy a range of requirements by our industrial partner. The paper delves into how variability and traceability of requirements can be managed via executable specifications. A case study was used to evaluate the approach, and it provided initial insights on its feasibility and usefulness.", "num_citations": "38\n", "authors": ["2198"]}
{"title": "A survey paper on software architecture visualization\n", "abstract": " Understanding the software architecture is a vital step towards building and maintaining software systems. But software architecture is an intangible conceptual entity. Therefore, it is hard to comprehend a software architecture without a visual mapping that reduces the burden on the human brain. Visualizing software architecture has been one of the most important topics in software visualization. Not only are architects interested in this visualization but also developers, testers, project managers and even customers. This paper is a survey on recent and key literature on software architecture visualization. It touches on efforts that defined what characteristics an effective visualization should have. It compares various efforts in this discipline according to taxonomies such as dimensionality, multiplicity of views and use of metaphors. The paper also discusses trends and patterns in recent research and addresses research questions that are still open for further investigation.", "num_citations": "32\n", "authors": ["2198"]}
{"title": "Reactive variability management in agile software development\n", "abstract": " Agile organizations focus on developing software systems that satisfy their current customer base, without worrying about best practices to handle variations of requirements in the system. Scaling agile methods up to adopt variability management practices in their traditional form is challenging. In this paper, we discuss the challenges and we contribute a lightweight, iterative approach that enables agile organizations to manage variability on demand in a reactive manner. The approach relies on agile practices like iterative development, refactoring, and continuous integration and testing. We present a case study to show how the approach was used to handle variability arising from technical and usability issues, and we provide a discussion of the advantages and limitations of the approach.", "num_citations": "30\n", "authors": ["2198"]}
{"title": "An Iterative Model for Agile Product Line Engineering.\n", "abstract": " Agile software development (ASD) and software product line engineering (SPLE) seem to be two rewarding yet disparate schools of thoughts in software engineering. ASD encourages strong business involvement in development activities, focuses only on the requirements at hand, and deems huge investment in requirement and design upfront unjustifiable. On the other hand, SPLE considers intensive domain analysis and flexible & detailed software design as prerequisites to any development effort. SPLE plans for potential future projects, and dedicates considerable resources for preplanning efforts. Integrating ASD and SPLE, although is challenging, has a huge potential of magnifying enhancements in quality, cuts in cost and reductions in time-to-market. In this paper, we present our research on this integration. We propose a model that enables agile organizations to establish product lines without disturbing the agility of their practices. The model is a bottom-up application-driven approach that relies on automated tests to derive core assets from existing code.", "num_citations": "30\n", "authors": ["2198"]}
{"title": "Linking feature models to code artifacts using executable acceptance tests\n", "abstract": " A feature model is a representation of the requirements in a given system abstracted at the feature level. Linking conceptual requirements in feature models to actual implementation artifacts provides for many advantages such as increased program comprehension, implementation completeness assessment, impact analysis, and reuse opportunities. However, in practice, as systems evolve, traceability links between the model and the code artifacts may become broken or outdated. In this paper, we contribute an approach to provide traceability links in a way that ensures consistency between the feature model and the code artifacts, enables the evolution of variability in the feature model, and supports the product derivation process. We do that by using executable acceptance tests as a direct traceability link between feature models and code artifacts. We evaluate our approach and present a brief overview\u00a0\u2026", "num_citations": "28\n", "authors": ["2198"]}
{"title": "A test-driven approach to establishing & managing agile product lines\n", "abstract": " Test Driven Development (TDD) is an agile method that emphasizes writing tests before writing code as a means of 1) assuring the satisfaction of customer requirements, and 2) reinforcing good design habits. While the first objective is usually accomplished by acceptance tests, the second objective is achieved by unit tests. The tests also serve as a multilevel cohesive reference of the system specifications. We propose the use of this referencing mechanism\u2013test artifacts\u2013to establish and manage agile product lines. In this paper, we delve into some of the issues that need to be tackled before test artifacts are relied on as a driving force for reuse in product lines. These issues include establishing a framework for reuse, tests comparability, test traceability, test refactoring and test versioning. We also discuss the suitability of acceptance tests and unit tests as reusable artifacts, and we present a preliminary study to analyze their utilization.", "num_citations": "23\n", "authors": ["2198"]}
{"title": "Extreme Product Line Engineering\u2013Refactoring for Variability: A Test-Driven Approach\n", "abstract": " Software product lines - families of similar but not identical software products - need to address the issue of feature variability. That is, a single feature might require various implementations for different customers. Also, features might need optional extensions that are needed by some but not all products. Software product line engineering manages variability by conducting a thorough domain analysis upfront during the planning phases. However, upfront, heavyweight planning approaches are not well-aligned with the values of minimalistic practices like XP where bottom-up, incremental development is common. In this paper, we introduce a bottom-up, test-driven approach to introduce variability to systems by reactively refactoring existing code. We support our approach with an eclipse plug-in to automate the refactoring process. We evaluate our approach by a case study to determine the feasibility and\u00a0\u2026", "num_citations": "20\n", "authors": ["2198"]}
{"title": "Utilizing digital tabletops in collocated agile planning meetings\n", "abstract": " In agile software development, planning meetings play a pivotal role in establishing a concrete under-standing of customerspsila requirements. Using tools to enhance the effectiveness of the planning meetings without affecting the agility of the practices or disturbing the traditional settings is a challenging task. In this paper, we propose the use of digital tabletops as a means of collaboration in agile planning meetings for collocated teams. To support this proposal, we introduce Agile Planner for Digital Tabletops, a planning tool that was specifically designed for use on large horizontal displays. A multipart study involving a variety of qualitative methodologies was conducted to evaluate this approach. The study involved 14 individual participants plus a five member agile team. The individual evaluation suggested that in general, the tool is usable with minor issues to be considered in future design revisions. The agile\u00a0\u2026", "num_citations": "19\n", "authors": ["2198"]}
{"title": "A report on the XP workshop on agile product line engineering\n", "abstract": " Software Product Line Engineering (SPLE) promises to lower the costs of developing individual applications as they heavily reuse existing artifacts. Besides decreasing costs, software reuse achieves faster development and higher quality. Traditionally, SPLE favors big design upfront and employs traditional, heavy weight processes. On the other hand, agile methods have been proposed to rapidly develop high quality software by focusing on producing working code while reducing upfront analysis and design. Combining both paradigms, although is challenging, can yield significant improvements. In this workshop, we discussed the challenges, the research questions and the tradeoffs that need to be addressed for such an integration to enjoy success.", "num_citations": "12\n", "authors": ["2198"]}
{"title": "From desktop to tabletop: Migrating the user interface of agileplanner\n", "abstract": " Digital tabletops are emerging interactive systems that support group collaborations. To utilize digital tabletops for agile planning meetings, we migrated a desktop based planning tool \u2013 AgilePlanner to a digital tabletop. This paper reports on challenges of the migration and illustrates differences between user interactions on a digital tabletop and on a desktop. Moreover, lessons and experiences learnt from our design process are highlighted to facilitate future tabletop application design.", "num_citations": "11\n", "authors": ["2198"]}
{"title": "An alignment equation for using mind maps to filter learning queries from Google\n", "abstract": " Search engines like Google play a critical role in life-long learning. However, the query capabilities of such engines remain simple and often yield a result set that is too large. In addition, search engines like Google rely on page ranking algorithm that represents the \"collective consciousness\" of millions of users. Learning about specifics often involves context. This paper shows how mind maps can be used as a contextual mechanism to specify what needs to be learned and to filter and retrieve the relevant sources of learning from the Internet. In specific, a concept of \"alignment\" is introduced that filters only those information sources that are globally aligned to the mind map. The filter is implemented as a combinatorial optimization algorithm using Simulated Annealing", "num_citations": "10\n", "authors": ["2198"]}
{"title": "Using acceptance tests for incremental elicitation of variability in requirements: An observational study\n", "abstract": " Variability in software systems refers to the notion that the components constituting the software may vary due to a range of factors including diverse customer needs, technical constraints, and business strategies. Traditionally, variability has been treated proactively by investing in an upfront domain analysis phase. Such proactive treatment of requirements is not encouraged in agile environments. This paper provides an observational study examining a reactive approach to variability wherein acceptance tests are used to elicit variability from requirements in an incremental manner. The findings suggest the following: the approach does support the evolutionary nature of agile development, the approach is easy and quick to learn, using acceptance tests yields consistent variability interpretations, and acceptance tests - on their own - may be insufficient to reflect implicit variability constraints.", "num_citations": "8\n", "authors": ["2198"]}
{"title": "ActiveStory Enhanced: Low-Fidelity Prototyping and Wizard of Oz Usability Testing Tool\n", "abstract": " This paper presents \u201cActiveStory Enhanced\u201d as a tool that enables prototyping user interfaces and conducting usability tests in a way that is aligned with agile principles. The tool allows designers to sketch user interface prototypes as well as add basic interactions to provide navigation. Sketching can be done using a mouse or stylus on tablet PCs. Designers can then export the prototype to a web-based Wizard of Oz testing tool, allowing test participants to remotely walk through a UI while recording metrics such as mouse movements and time spent on pages. ASE improves on the original by providing some usability improvements, improved browser support, undo support, more control over the design and an improved pen and paper metaphor.", "num_citations": "8\n", "authors": ["2198"]}
{"title": "An agile framework for variability management in software product line engineering\n", "abstract": " During the past few years, research in agile product line engineering has been gaining more popularity, driven by the much needed ability to combine the flexibility and high responsiveness of agile methods with the economic advantages of reuse and mass customization offered by software product lines. This dissertation presents a novel framework to manage variability in software product lines in an agile context.  By leveraging agile practices such as iterative and incremental development, test-driven development, and refactoring, this dissertation shows that a reactive approach to variability management is indeed feasible. The findings of this research demonstrate that acceptance tests can play an important role in variability elicitation; but they may not be sufficient to deduce implicit constraints from requirements. This issue is addressed by using executable acceptance tests alongside feature models in order to uncover implicit constraints and hidden dependencies. The dissertation also discusses the role of executable acceptance tests in supporting the evolution of variability by providing instantaneous feedback on the impact of adding or removing features or variants. For requirements that cannot be adequately described using acceptance tests such as usability and portability requirements, the dissertation demonstrates how such requirements can be treated using a lightweight and reactive approach.  At the implementation level, the results of this research show that realizing variability can occur in a reactive manner provided that proper refactoring and testing practices are followed. The results also illustrate how the process can be made\u00a0\u2026", "num_citations": "7\n", "authors": ["2198"]}
{"title": "APDT: An Agile Planning Tool for Digital Tabletops\n", "abstract": " This paper presents Agile Planner for Digital Tabletops (APDT) as a tool that facilitates agile planning meetings using large horizontal displays. Utilizing APDT on a reasonably sized digital tabletop allows collaborators to create, edit, move, rotate, toss and delete index cards just like they would do with paper artifacts. APDT provides a multimodal input system that supports gesture-, handwriting- and speech recognition as alternative input methodologies to conventional mouse and keyboard input.", "num_citations": "6\n", "authors": ["2198"]}
{"title": "Using digital tabletops to support distributed agile planning meetings\n", "abstract": " Digital tabletop is an emerging technology that is being increasingly used to support group activities. Agile Planner for Digital Tabletops (APDT) is a tool that was built to support agile planning meetings. It provides interactions similar to those used in traditional pen-and-paper meetings. Previous versions of APDT were only capable of handling collocated planning meetings. In this paper, we succinctly describe the new extension of APDT that provides support for distributed planning meetings. A series of evaluations for the new version of APDT has been conducted, and the feedback tends to be positive.", "num_citations": "5\n", "authors": ["2198"]}
{"title": "A Test-Driven Approach for Extracting Libraries of Reusable Components from Existing Applications\n", "abstract": " In agile approaches such as Extreme Programming, time is not spent on making sure that system components can be reused in similar systems. Therefore, there is a need to investigate whether reuse can be achieved by extracting reusable assets from existing applications. This paper presents an approach that relies on refactoring and testing practices for extracting reusable assets from existing applications. The approach creates reusable APIs in a bottom-up fashion, on demand when a new application might benefit from component in an existing application. The extraction process is guided and supported by the usage examples and the testing scenarios in the existing application and the new one. The paper presents a case study, where the approach was used to extract components from the user interface of an existing application, wrap these components in an API, and use this API in the existing and\u00a0\u2026", "num_citations": "3\n", "authors": ["2198"]}
{"title": "Adapting existing applications to support new interaction technologies: technical and usability issues\n", "abstract": " Engineering interactive systems for use on emerging technologies such as touch-enabled devices and horizontal displays is not straightforward. Firstly, the migration process of a system from an old hardware platform to new multi-touch displays is challenging. Issues pertaining to scaling, orientation, new input mechanisms, novel interaction techniques and different SDKs need to be examined. Secondly, even after we manage to understand and resolve these issues, we need to find effective ways to migrate applications and maintain them.", "num_citations": "3\n", "authors": ["2198"]}
{"title": "Object-specific interfaces in smart homes\n", "abstract": " As smart homes become more widespread, the need for more natural forms of interaction in the home also increases. On the one hand, forcing a user to go to a central home controller at every required change does not make sense. On the other hand, having a different controller for each device is also quite overwhelming. Object-Specific Interfaces (OSIs) allow an interface customized to an object of interest to show up on a mobile device when in close proximity to it. The interface can be passive, thus showing a manual or information, or interactive and so would allow for device monitoring and controlling.", "num_citations": "3\n", "authors": ["2198"]}
{"title": "XP Workshop on Agile Product Line Engineering\n", "abstract": " Software Product Line Engineering (SPLE) promises to lower the costs of developing individual applications as they heavily reuse existing artifacts. Besides decreasing costs, software reuse achieves faster development and higher quality. Traditionally, SPLE favors big design upfront and employs traditional, heavy weight processes. On the other hand, agile methods have been proposed to rapidly develop high quality software by focusing on producing working code while reducing upfront analysis and design. Combining both paradigms, although is challenging, can yield significant improvements.", "num_citations": "2\n", "authors": ["2198"]}
{"title": "FitClipse: A Tool for Executable Acceptance Test Driven Development\n", "abstract": " FitClipse is an Eclipse plug-in for facilitating Executable Acceptance Test Driven Development. The tool allows the users to edit acceptance tests, automatically generate fixtures, execute tests and represent the test results graphically including an option to view the test results history. The tool helps with regression testing because it can distinguish between requirements tasks that were never tackled before and tasks that were already completed but are now failing again. FitClipse currently supports GreenPepper and Fit framework.", "num_citations": "2\n", "authors": ["2198"]}
{"title": "ChatVis: A Visualization Tool for Instant Messaging\n", "abstract": " This report presents ChatVis as a 2,800 LOC tool for visualizing activities in instant messaging conversations. The tool visualizes at four different levels, starting from the conversation level down to the message level, the word level and finally the character level. The tool provides means to visualize the typing speed and rhythms of an arbitrary number of conversers. Additionally, it attempts to visualize intangible characteristic of a typed message such as hesitance (uncertainty) and emphasis. ChatVis allows for mouse as well as keyboard interactions to give the user a variety of filtering and zooming options. The system state is always saved allowing for animation through temporal aspects of the conversation. Moreover, the conversation can be persisted to XML and loaded back on demand for comparison purposes amongst different people.", "num_citations": "2\n", "authors": ["2198"]}
{"title": "Discount Usability Testing\n", "abstract": " Usability testing need not be costly and time-consuming to be effective. Discount usability testing provides a set of cheap, fast and easy to apply techniques including think aloud, card sorting, walkthroughs, scenarios and heuristic evaluation. These methods can reveal major and minor usability issues in a system at a low cost. Although it is an advantage, evaluators need not be usability experts. These methods can be utilized early in the design cycle or during the implementation phase. In an Agile setting, discount usability testing works effectively because of the iterative nature of this model. Discount methods tend to find superficial problems; thus they usually are not suitable for in-depth usability studies. Discount usability testing is not a replacement of traditional usability testing, but can be very advantageous compared to doing nothing.", "num_citations": "1\n", "authors": ["2198"]}