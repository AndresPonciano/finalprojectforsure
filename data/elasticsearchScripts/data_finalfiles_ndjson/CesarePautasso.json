{"title": "Restful web services vs.\" big\"'web services: making the right architectural decision\n", "abstract": " Recent technology trends in the Web Services (WS) domain indicate that a solution eliminating the presumed complexity of the WS-* standards may be in sight: advocates of REpresentational State Transfer (REST) have come to believe that their ideas explaining why the World Wide Web works are just as applicable to solve enterprise application integration problems and to simplify the plumbing required to build service-oriented architectures. In this paper we objectify the WS-* vs. REST debate by giving a quantitative technical comparison based on architectural principles and decisions. We show that the two approaches differ in the number of architectural decisions that must be made and in the number of available alternatives. This discrepancy between freedom-from-choice and freedom-of-choice explains the complexity difference perceived. However, we also show that there are significant differences in the\u00a0\u2026", "num_citations": "1444\n", "authors": ["640"]}
{"title": "RESTful Web service composition with BPEL for REST\n", "abstract": " Current Web service technology is evolving towards a simpler approach to define Web service APIs that challenges the assumptions made by existing languages for Web service composition. RESTful Web services introduce a new kind of abstraction, the resource, which does not fit well with the message-oriented paradigm of the Web service description language (WSDL). RESTful Web services are thus hard to compose using the Business Process Execution Language (WS-BPEL), due to its tight coupling to WSDL. The goal of the BPEL for REST extensions presented in this paper is twofold. First, we aim to enable the composition of both RESTful Web services and traditional Web services from within the same process-oriented service composition language. Second, we show how to publish a BPEL process as a RESTful Web service, by exposing selected parts of its execution state using the REST interaction\u00a0\u2026", "num_citations": "266\n", "authors": ["640"]}
{"title": "Why is the web loosely coupled? A multi-faceted metric for service design\n", "abstract": " Loose coupling is often quoted as a desirable property of systems architectures. One of the main goals of building systems using Web technologies is to achieve loose coupling. However, given the lack of a widely accepted definition of this term, it becomes hard to use coupling as a criterion to evaluate alternative Web technology choices, as all options may exhibit, and claim to provide, some kind of\" loose\" coupling effects. This paper presents a systematic study of the degree of coupling found in service-oriented systems based on a multi-faceted approach. Thanks to the metric introduced in this paper, coupling is no longer a one-dimensional concept with loose coupling found somewhere in between tight coupling and no coupling. The paper shows how the metric can be applied to real-world examples in order to support and improve the design process of service-oriented systems.", "num_citations": "212\n", "authors": ["640"]}
{"title": "RESTful web services: principles, patterns, emerging technologies\n", "abstract": " RESTful Web services are software services which are published on the Web, taking full advantage and making correct use of the HTTP protocol. This chapter gives an introduction to the REST architectural style and how it can be used to design Web service APIs. We summarize the main design constraints of the REST architectural style and discuss how they impact the design of so-called RESTful Web service APIs. We give examples on how the Web can be seen as a novel kind of software connector, which enables the coordination of distributed, stateful and autonomous software services. We conclude the chapter with a critical overview of a set of emerging technologies which can be used to support the development and operation of RESTful Web services.", "num_citations": "180\n", "authors": ["640"]}
{"title": "REST: from research to practice\n", "abstract": " This volume provides an overview and an understanding of REST (Representational State Transfer). Discussing the constraints of REST the book focuses on REST as a type of web architectural style. The focus is on applying REST beyond Web applications (ie, in enterprise environments), and in reusing established and well-understood design patterns when doing so. The reader will be able to understand how RESTful systems can be designed and deployed, and what the results are in terms of benefits and challenges encountered in the process. Since REST is relatively new as an approach for designing Web Services, the more advanced part of the book collects a number of challenges to some of the assumptions and constraints of REST, and looks at current research work on how REST can be extended and applied to scenarios that often are considered not to be a good match for REST. This work will help readers to reach a deeper understanding of REST on a practical as well as on an advanced level.", "num_citations": "143\n", "authors": ["640"]}
{"title": "Microservices in practice, part 1: Reality check and service design\n", "abstract": " Service-oriented architecture (SOA) and microservices insiders Mike Amundsen, James Lewis, and Nicolai Josuttis share their experiences and predictions with department editors Cesare Pautasso and Olaf Zimmermann.", "num_citations": "138\n", "authors": ["640"]}
{"title": "Parallel computing patterns for grid workflows\n", "abstract": " Whereas a consensus has been reached on defining the set of workflow patterns for business process modeling languages, no such patterns exists for workflows applied to scientific computing on the Grid. By looking at different kinds of parallelism, in this paper we identify a set of workflow patterns related to parallel and pipelined execution. The paper presents how these patterns can be represented in different Grid workflow languages and discusses their implications for the design of the underlying workflow management and execution infrastructure. A preliminary classification of these patterns is introduced by surveying how they are supported by several existing advanced scientific and Grid workflow languages.", "num_citations": "121\n", "authors": ["640"]}
{"title": "Composing restful services with jopera\n", "abstract": " The REST architectural style is emerging as an alternative technology platform for the realization of service-oriented architectures. In this paper, we apply the notion of composition to RESTful services and derive a set of language features that are required by composition languages for RESTful services: dynamic late binding, dynamic typing, content-type negotiation, state inspection, and compliance with the uniform interface principle. To show how such requirements can be satisfied by an existing composition language, we include a case-study using the JOpera visual composition language. In it, we present how to build a composite application (DoodleMap) out of some well-known, public and currently existing RESTful service APIs.", "num_citations": "112\n", "authors": ["640"]}
{"title": "BPEL for REST\n", "abstract": " Novel trends in Web services technology challenge the assumptions made by current standards for process-based service composition. Most RESTful Web service APIs, which do not rely on the Web service description language (WSDL), cannot easily be composed using the BPEL language. In this paper we propose a lightweight BPEL extension to natively support the composition of RESTful Web services using business processes. We also discuss how to expose the execution state of a business process so that it can be manipulated through REST primitives in a controlled way.", "num_citations": "107\n", "authors": ["640"]}
{"title": "The JOpera visual composition language\n", "abstract": " Composing Web services into a coherent application can be a tedious and error-prone task when using traditional textual scripting languages or emerging XML-based approaches. As an alternative, complex interactions patterns and data exchanges between different Web services can be effectively modeled using a visual language. In this paper, we discuss the requirements of such an application scenario and we fully describe the JOpera Visual Composition Language. An extensive set of visual editing tools, a compiler and a debugger for the language have been implemented as part of the JOpera system with the goal of providing a true visual environment for Web service composition with usability features emphasizing rapid development and visual scalability.", "num_citations": "106\n", "authors": ["640"]}
{"title": "Design and evaluation of an autonomic workflow engine\n", "abstract": " In this paper we present the design and evaluate the performance of an autonomic workflow execution engine. Although there exist many distributed workflow engines, in practice, it remains a difficult problem to deploy such systems in an optimal configuration. Furthermore, when facing an unpredictable workload with high variability, manual reconfiguration is not an option. Thanks to its autonomic controller, the engine features self-configuration, self-tuning and self-healing properties. The engine runs on a cluster of computers using a tuple space to coordinate its various components. Its autonomic controller monitors its performance and responds to workload variations by altering the configuration. In case failures occur, the controller can recover the workflow execution state from persistent storage and migrate it to a different node of the cluster. Such interventions are carried out without any human supervision. As\u00a0\u2026", "num_citations": "97\n", "authors": ["640"]}
{"title": "REST: advanced research topics and practical applications\n", "abstract": " Representational State Transfer (REST) is an architectural style that defines the architectural quality attributes of the World Wide Web, seen as an open, loosely coupled, massively distributed and decentralized hypermedia system. REST has seen a large uptake for the last several years, as it is largely regarded as a simpler and more Weblike way of exposing service interfaces, in particular when compared with earlier approaches such as the rather complex and heavyweight SOAP/WS-* and similar RPC-inspired protocols. As with all success stories, there also is the downside that pretty much any HTTP-based service is being promoted and sold as being \u201cRESTful\u201d these days, even though many do not completely follow the architectural principles and constraints underlying the REST style [81]. However, in the end this may be the fate of every successful \u201cbrand name\u201d: once it becomes successful enough, it loses its\u00a0\u2026", "num_citations": "84\n", "authors": ["640"]}
{"title": "JOpera: a toolkit for efficient visual composition of web services\n", "abstract": " Web services are attracting attention because of their ability to provide standard interfaces to heterogeneous distributed services. Standard interfaces make it possible to compose more complex services out of basic ones. This paper tackles the problem of visual service composition and the efficient and scalable execution of the resulting composite services. The effort revolves around the JOpera system, which combines a visual programming environment for Web services with a flexible execution engine that interacts with Web services through the simple object access protocol (SOAP), described with Web services language description (WSDL) and registered with a universal description discovery and integration (UDDI) registry. The paper explains the syntax and implementation of the JOpera Visual Composition Language (JVCL) and its ability to provide different quality of service (QoS) levels in the execution of\u00a0\u2026", "num_citations": "82\n", "authors": ["640"]}
{"title": "Developing scientific workflows from heterogeneous services\n", "abstract": " Scientific WorkFlows (SWFs) need to utilize components and applications in order to satisfy the requirements of specific workflow tasks. Technology trends in software development signify a move from component-based to service-oriented approach, therefore SWF will inevitably need appropriate tools to discover and integrate heterogeneous services. In this paper we present the SODIUM platform consisting of a set of languages and tools as well as related middleware, for the development and execution of scientific workflows composed of heterogeneous services.", "num_citations": "74\n", "authors": ["640"]}
{"title": "Flexible binding for reusable composition of web services\n", "abstract": " In addition to publishing composite services as reusable services, compositions can also be reused by applying them to orchestrate different component services. To do so, it is important to describe compositions using flexible bindings, which define only the minimal constraints on the syntax and semantics of the services to be composed. This way, the choice of which service to invoke can be delayed to later stages in the life cycle of the composition. In the context of Web service composition, we refine the concept of binding beyond the basic distinction of static and dynamic binding. Bindings can be evaluated during the design, the compilation, the deployment, the beginning of the execution of a composition, or just before the actual service invocation takes place. Considering the current limited support of dynamic binding in the BPEL service composition language, we show how we addressed the problem in\u00a0\u2026", "num_citations": "73\n", "authors": ["640"]}
{"title": "Visual composition of web services\n", "abstract": " Composing Web services into a coherent application can be a tedious and error prone task when using traditional textual scripting languages. As an alternative, complex interactions patterns and data exchanges between different Web services can be effectively modeled using a visual language. In this paper we discuss the requirements of such an application scenario and we present the design of the BioOpera Flow Language. This visual composition language has been fully implemented in a development environment for Web service composition with usability features emphasizing rapid development and visual scalability.", "num_citations": "61\n", "authors": ["640"]}
{"title": "End-user development of mashups with naturalmash\n", "abstract": " Context: The emergence of the long-tail in the market of software applications is shifting the role of end-users from mere consumers to becoming developers of applications addressing their unique, personal, and transient needs. On the Web, a popular form of such applications is called mashup, built out of the lightweight composition of Web APIs (reusable software components delivered as a service through the Web). To enable end-users to build mashups, there is a key problem that must be overcome: End-users lack programming knowledge as well as the interest to learn how to master the complex set of Web technologies required to develop mashups. End-User Development (EUD) is an emerging research field dealing with this type of problems. Its main goal is to design tools and techniques facilitating the development of software applications by non-programmers.Objective: The paper describes the design\u00a0\u2026", "num_citations": "59\n", "authors": ["640"]}
{"title": "Autonomic execution of web service compositions\n", "abstract": " An increasing amount of Web services are being implemented using process management tools and languages (BPML, BPEL, etc.). The main advantage of processes is that designers can express complex business conversations at a high level of abstraction, even reusing standardized business protocols. The downside is that the infrastructure behind the Web service becomes more complex. This is particularly critical for Web services that may be subjected to high variability in demand and suffer from unpredictable peaks of heavy load. In this paper we present a flexible architecture for process execution that has been designed to support autonomic scalability. The system runs on a cluster of computers and reacts to workload variations by altering its configuration in order to optimally use the available resources. Such changes happen automatically and without any human intervention. This feature completely\u00a0\u2026", "num_citations": "55\n", "authors": ["640"]}
{"title": "Towards liquid web applications\n", "abstract": " As the complexity of rich Web applications grows together with the power and number of Web browsers, the next Web engineering challenge to be addressed is to design and deploy Web applications to make coherent use of all devices. As users nowadays operate multiple personal computers, smart phones, tablets, and computing devices embedded into home appliances or cars, the architecture of current Web applications needs to be redesigned to enable what we call Liquid Software. Liquid Web applications not only can take full advantage of the computing, storage and communication resources available on all devices owned by the end user, but also can seamlessly and dynamically migrate from one device to another continuously following the user attention and usage context. In this paper we address the Liquid Software concept in the context of Web applications and survey to which extent and\u00a0\u2026", "num_citations": "51\n", "authors": ["640"]}
{"title": "Specification patterns from research to industry: a case study in service-based applications\n", "abstract": " Specification patterns have proven to help developers to state precise system requirements, as well as formalize them by means of dedicated specification languages. Most of the past work has focused its applicability area to the specification of concurrent and real-time systems, and has been limited to a research setting. In this paper we present the results of our study on specification patterns for service-based applications (SBAs). The study focuses on industrial SBAs in the banking domain. We started by performing an extensive analysis of the usage of specification patterns in published research case studies - representing almost ten years of research in the area of specification, verification, and validation of SBAs. We then compared these patterns with a large body of specifications written by our industrial partner over a similar time period. The paper discusses the outcome of this comparison, indicating that some\u00a0\u2026", "num_citations": "50\n", "authors": ["640"]}
{"title": "Autonomic resource provisioning for software business processes\n", "abstract": " Software development nowadays involves several levels of abstraction: starting from the programming of single objects, to their combination into components, to their publication as services and the overall architecture linking elements at each level. As a result, software engineering is dealing with a wider range of artifacts and concepts (i.e., in the context of this paper: services and business processes) than ever before. In this paper we explore the importance of having an adequate engine for executing business processes written as compositions of Web services. The paper shows that, independently of the composition language used, the overall scalability of the system is determined by how the run-time engine treats the process execution. This is particularly relevant at the service level because publishing a process through a Web service interface makes it accessible to an unpredictable and potentially very large\u00a0\u2026", "num_citations": "48\n", "authors": ["640"]}
{"title": "Mashup development with HTML5\n", "abstract": " HTML5 is a new technology standard promising to empower browsers to become a suitable platform for developing rich Web applications. Whilst it is still considered an emerging technology, in this paper we attempt to capture and explore its impacts on mashup development. To do so, we start with a mashup case study showcasing new HTML5 features. We then move on to explore those aspects of mashup development that are affected and will possibly be enabled by HTML5 in the near future. These aspects are grouped into two categories: short-term impacts, that can be harnessed by mashup developers, and long-term impacts, that should be considered by service/content providers.", "num_citations": "47\n", "authors": ["640"]}
{"title": "Team situational awareness and architectural decision making with the software architecture warehouse\n", "abstract": " The core of the design of software architecture is all about architectural decision making. A high-quality design outcome sets high requirements, not only on the skills and knowledge of the design team members, but also on the management of the decision making process. We claim that in order to deliver high quality decisions, the design team needs to obtain a high level of situational awareness. To address this, we present an analysis of the problem of team situational awareness in design workshops and propose a model on how stakeholder positions help to build consensus within the argumentation viewpoint of architectural decisions. We show how the Software Architecture Warehouse tool has been extended to support the argumentation viewpoint within its live design document metaphor to provide support for co-located and distributed design workshops.", "num_citations": "41\n", "authors": ["640"]}
{"title": "A roadmap towards sustainable self-aware service systems\n", "abstract": " Self-awareness and self-adaptation have become primary concerns in large-scale systems as they have become too complex to be managed by human administrators alone, but rather require a new blend of coordination mechanisms between people and software services.", "num_citations": "40\n", "authors": ["640"]}
{"title": "From web service composition to megaprogramming\n", "abstract": " With the emergence of Web service technologies, it has become possible to use high level megaprogramming models and visual tools to easily build distributed systems using Web services as reusable components. However, when attempting to apply the Web service composition paradigm in practical settings, some limitations become apparent. First of all, all kinds of existing \u201clegacy\u201d components must be wrapped as Web services, incurring in additional development, maintenance, and unnecessary runtime overheads. Second, current implementations of Web service protocols guarantee interoperability at high runtime costs, which justifies the composition of only coarse-grained Web services. To address these limitations and support the composition of also fine-grained services, in this paper we generalize the notion of service by introducing an open service meta-model. This offers freedom of choice\u00a0\u2026", "num_citations": "39\n", "authors": ["640"]}
{"title": "Push-enabling RESTful business processes\n", "abstract": " Representational State Transfer (REST) as an architectural style for service design has seen substantial uptake in the past years. However, some areas such as Business Process Modeling (BPM) and push services so far have not been addressed in the context of REST principles. In this work, we look at how both BPM and push can be combined so that business processes can be modeled and observed in a RESTful way. Based on this approach, clients can subscribe to be notified when certain states in a business process are reached. Our goal is to design an architecture that brings REST\u2019s claims of loose coupling and good scalability to the area of BPM, and still allow process-driven composition and interaction between resources to be modeled.", "num_citations": "37\n", "authors": ["640"]}
{"title": "Bioopera: Cluster-aware computing\n", "abstract": " In this paper we present BioOpera, an extensible process support system for cluster-aware computing. It features an intuitive way to specify computations, as well as improved support for running them over a cluster providing monitoring, persistence, fault tolerance and interaction capabilities without sacrificing efficiency and scalability.", "num_citations": "37\n", "authors": ["640"]}
{"title": "Microservices in practice, part 2: Service integration and sustainability\n", "abstract": " Service-oriented architecture (SOA) and microservices insiders Mike Amundsen, James Lewis, and Nicolai Josuttis share their experiences and predictions with department editors Cesare Pautasso and Olaf Zimmermann.", "num_citations": "36\n", "authors": ["640"]}
{"title": "Let it flow: Building mashups with data processing pipelines\n", "abstract": " Mashups are a new kind of interactive Web application, built out of the composition of two or more existing Web service APIs and data sources. Whereas \u201cpure\u201d mashups are built relying entirely on the Web browser as a platform for integration at the presentation layer, this approach is not always feasible and part of the mashup integration logic must be deployed on the Web server instead. In the case study presented in this paper, we explore a novel approach to build mashups out of heterogeneous sources of streaming data. In particular, we introduce a layered mashup architecture, with a clear separation between the mashup user interface and the mashup integration logic run by a mashup engine. To do so, we show how to build a mashup application that displays in real time the location of visitors connecting to a Website. The integration logic feeding a map widget by processing the Web site logs is\u00a0\u2026", "num_citations": "36\n", "authors": ["640"]}
{"title": "JOpera: An agile environment for web service composition with visual unit testing and refactoring\n", "abstract": " Agile methodologies employ light-weight development practices emphasizing a test-driven approach to the development of software systems. Modern agile development environments support this approach by providing tools that automate most of the work required to effectively deal with change, including unit testing and different forms of refactoring. In this paper we discuss how to apply such techniques within the JOpera Visual Composition Language. More precisely, we show how we used the visual language to implement a regression testing framework for compositions written in the language itself and how we introduced support in the visual environment for refactorings such as renaming, synchronization of service interface changes, and extraction/inlining across different levels of nesting. This is done in the context of the Web service composition tools provided with the JOpera for Eclipse research platform.", "num_citations": "36\n", "authors": ["640"]}
{"title": "ADkwik: Web 2.0 Collaboration System for Architectural Decision Engineering.\n", "abstract": " Capturing and sharing software architecture design rationale has always been particularly challenging in complex application domains such as enterprise computing. Facing the ongoing acceleration of technology innovation and economic forces such as outsourcing and offshoring, conservative knowledge management practices and existing tools are no longer sufficient, offering only rudimentary support for knowledge exchange and collaboration on the Internet. In this paper, we present ADkwik, a Web 2.0 collaboration system supporting the cooperative decision making work of software architects. We describe the realization of ADkwik as a situational application wiki and discuss initial evaluation results. Thanks to its ease of use, ADkwik has already shown concrete benefits to its users, including rapid team orientation, tangible decision making advice, and simplification of asset harvesting.", "num_citations": "35\n", "authors": ["640"]}
{"title": "Reusable decision space for mashup tool design\n", "abstract": " Mashup tools are a class of integrated development environments that enable rapid, on-the-fly development of mashups-a type of lightweight Web applications mixing content and services provided through the Web. In the past few years there have been growing number of projects, both from academia and industry, aimed at the development of innovative mashup tools. From the software architecture perspective, the massive effort behind the development of these tools creates a large pool of reusable architectural decisions from which the design of future mashup tools can derive considerable benefits. In this paper, focusing on the design of mashup tools, we explore a design space of decisions comprised of design issues and alternatives. The design space knowledge not only is broad enough to explain the variability of existing tools, but also provides a road-map towards the design of next generation mashup tools.", "num_citations": "34\n", "authors": ["640"]}
{"title": "The adapt framework for adaptable and composable web services\n", "abstract": " The Adapt Framework for Adaptable and Composable Web Services IRIS nascondi/visualizza icone a destra nascondi/visualizza menu in alto Aiuto Sfoglia Scorri i prodotti per: Autore Titolo Riviste Serie Login IRIS Archivio della ricerca di Trieste Catalogo Prodotti Ricerca UNITS 1 Contributo in Rivista(Articolo Rivista) 1.1 Articolo in Rivista The Adapt Framework for Adaptable and Composable Web Services Italiano Italiano Italiano Italiano English English The Adapt Framework for Adaptable and Composable Web Services / BARTOLI A.; JIMNEZ-PERIS R; KEMME B; PAUTASSO C; PATARIN S; WHEATER S; WOODMAN S. - In: IEEE DISTRIBUTED SYSTEMS ONLINE. - ISSN 1541-4922. - (2005). Scheda breve Scheda completa Titolo: The Adapt Framework for Adaptable and Composable Web Services Autori: BARTOLI, Alberto \u2026", "num_citations": "34\n", "authors": ["640"]}
{"title": "A conversation based approach for modeling REST APIs\n", "abstract": " Conversations are a well-known concept in service design to describe complex interactions between a client and one or multiple services. The REST architectural style constrains the characteristics of clients, servers and their interactions in REST architectures which consequently has an impact on conversations in such systems. The relation between conversations and REST architectures and how such Restful conversations can be characterized has not been studied in detail yet. In this paper we discuss the characteristics of conversations in REST architectures and introduce an initial set of commonly used conversation types. Based on this, we propose to use conversations as a modeling tool for the design of REST APIs at a higher level of abstraction. We also introduce a corresponding interaction centric metamodel for REST APIs. The characterization of Restful conversations enables a new interaction centric\u00a0\u2026", "num_citations": "33\n", "authors": ["640"]}
{"title": "JOpera: Autonomic service orchestration\n", "abstract": " The increasing interest in new software engineering technologies for application integration such as Service Oriented Computing and Service Orchestration has resulted in a proliferation of workflow management systems as the underlying representation and execution platform for service composition [7]. Workflow management system are also being applied to new domains (eg, virtual scientific laboratories [1], Grid computing [12], service delivery and provisioning [6]). For these new applications, workflows are seen as the modeling metaphor behind the notion of straight through processing and virtual organizations where a collection of existing heterogeneous systems are composed into an integrated solution.In all these settings workflow engines are at the core of a complex combination of applications and clustered computers. As such, they have become rather difficult to deploy and configure, let alone tune to obtain maximum performance. This problem is not unique to workflow and service composition engines but it is more difficult to address in these settings because there is only a limited understanding of the execution procedures behind a workflow engine. In this short paper we report on our ongoing work to design and develop an autonomic workflow engine that can be used for large scale service composition. The challenge we face in doing this is threefold. First, we need to design an execution procedure for service compositions that is amenable to autonomic treatment. Second, this procedure needs to be realized in an architecture that supports the deployment of different modules of the system across a computer cluster in order to\u00a0\u2026", "num_citations": "33\n", "authors": ["640"]}
{"title": "Bpmn for rest\n", "abstract": " The Representational State Transfer (REST) architectural style has seen substantial growth and adoption for the design of modern Resource-Oriented Architectures. However, the impact of fundamental constraints such as stateful resources, stateless interactions, and the uniform interface have had only limited uptake and impact in the Business Process Modeling (BPM) community in general, and in the standardization activities revolving around the BPMN notation. In this paper we propose a simple and minimal extension of the BPMN 2.0 notation to provide first-class support for the concept of resource. We show several examples of how the extended notation can be used to externalize the state of a process as a resource, as well as to describe process-driven composition of resources.", "num_citations": "32\n", "authors": ["640"]}
{"title": "A flexible system for visual service composition\n", "abstract": " This dissertation brings together ideas of different research areas. First of all, we propose the applicationof visual languagesto service composition. In order to con-nect basic Services of various kinds into a larger system, their interactions along the time dimension are defined with the JOperaVisual Composition Language. As opposed to the textual or XML-based syntax of existingapproaches, our language features a very simple graphical notation. This visual syntax is used to specify the data flow and control flow graphs linking the various service invocations. This way, it becomes possible to rapidly build distributed applications out of a set of reusable Services by literally drawing the interactionsbetween them. To achieve this, we present how usabilityfeatures such as automatic, incremental graph layout and visual scalability features such as multiple views have been driving the design of JOpera'svisualservice compositionenvironment. To provide supportfor realistic application scenarios, we have also included recursion, iteration and refiection con-structs with minimal changesto the syntax of the visual language. Supported by the JOperasystem, our visual languagefor service compositionhas been applied to many scenarios, as documentedby the examples shown throughoutthe dissertation. Underneath the visual syntax, our approach to modeling service composition is based on the concept of process. In this dissertationwe borrow the notion of business process so that it can be extended to modelservice oriented architectures. Thus, the structure of a process definesthe partial order of invocation ofits Services, the data exchanges between them\u00a0\u2026", "num_citations": "31\n", "authors": ["640"]}
{"title": "Architecting liquid software\n", "abstract": " The Liquid Software metaphor refers to software that can operate seamlessly across multiple devices owned by one or multiple users. Liquid Software applications can take advantage of the computing, storage and communication resources available on all the devices owned by the user. Liquid Software applications can also dynamically migrate from one device to another, following the user's attention and usage context. The key design goal in Liquid Software development is to minimize the additional eorts arising from multiple device ownership (eg, installation, synchronization and general maintenance of personal computers, smartphones, tablets, home and car displays, and wearable devices), while keeping the users in full control of their devices, applications and data. In this paper we present the design space for Liquid Software, categorizing and discussing the most important architectural dimensions and technical choices. We also provide an introduction and comparison of two frameworks implementing Liquid Software capabilities in the context of the World Wide Web.", "num_citations": "30\n", "authors": ["640"]}
{"title": "On the architecture of liquid software: technology alternatives and design space\n", "abstract": " The liquid metaphor refers to software that operates seamlessly across multiple devices owned by one or multiple users. Liquid software architectures can dynamically deploy and redeploy stateful software components and transparently adapt them to the capabilities of heterogeneous target devices. The key design goal in liquid software development is to minimize the efforts that are related to multiple device ownership (e.g., installation, synchronization and general maintenance of personal computers, smartphones, tablets, home displays, cars and wear-able devices), while keeping the users in full control of their devices, applications and data. In this paper we present a design space for liquid software, categorizing and discussing the most important architectural issues and alternatives. These alternatives represent relevant capabilities offered by emerging technologies and deployment platforms that are then\u00a0\u2026", "num_citations": "29\n", "authors": ["640"]}
{"title": "Control-flow patterns for decentralized restful service composition\n", "abstract": " The REST architectural style has attracted a lot of interest from industry due to the nonfunctional properties it contributes to Web-based solutions. SOAP/WSDL-based services, on the other hand, provide tools and methodologies that allow the design and development of software supporting complex service arrangements, enabling complex business processes which make use of well-known control-flow patterns. It is not clear if and how such patterns should be modeled, considering RESTful Web services that comply with the statelessness, uniform interface and hypermedia constraints. In this article, we analyze a set of fundamental control-flow patterns in the context of stateless compositions of RESTful services. We propose a means of enabling their implementation using the HTTP protocol and discuss the impact of our design choices according to key REST architectural principles. We hope to shed new light on\u00a0\u2026", "num_citations": "29\n", "authors": ["640"]}
{"title": "The liquid. js framework for migrating and cloning stateful web components across multiple devices\n", "abstract": " We are heading toward an era in which users own more than one single Web-enabled device. These devices range from smart phones, tablets and personal computers to smart Web-enabled devices found in houses and cars. The access mechanisms and usage patterns of Web applications are changing accordingly, as users interact more and more with Web applications through all their devices, even if the majority of Web applications are not ready to offer a good user experience taking full advantage of multiple devices. In this demonstration we introduce Liquid. js, a framework whose goal is to enable Web developers to take advantage of multiple heterogeneous devices and offer to their users a liquid user experience, whereby any device can be used sequentially or concurrently with Web applications that can effortlessly roam from one device to another. This way, as highlighted in the demonstration users do\u00a0\u2026", "num_citations": "25\n", "authors": ["640"]}
{"title": "On composing RESTful services\n", "abstract": " Composition is one of the central tenets of service oriented computing. This paper discusses how composition can be applied to RESTful services in order to foster their reuse. Given the specific constraints of the REST architectural style, a number of challenges for current service composition languages and technologies are identified to point out future research directions.", "num_citations": "25\n", "authors": ["640"]}
{"title": "Dependable computing in virtual laboratories\n", "abstract": " Many scientific disciplines are shifting from in vitro to in silico research as more physical processes and natural phenomena are examined in a computer (in silico) instead of being observed (in vitro). In many of these virtual laboratories, the computations involved are very complex and long lived. Currently, users are required to manually handle almost all aspects of such computations, including their dependability. Not surprisingly, this is a major bottleneck and a significant source of inefficiencies. To address this issue, we have developed BioOpera, an extensible process support management system for virtual laboratories. The authors briefly discuss the architecture and functionality of BioOpera and show how it can be used to efficiently manage long lived computations.", "num_citations": "25\n", "authors": ["640"]}
{"title": "A Container-centric Methodology for Benchmarking Workflow Management Systems.\n", "abstract": " Trusted benchmarks should provide reproducible results obtained following a transparent and well-defined process. In this paper, we show how Containers, originally developed to ease the automated deployment of Cloud application components, can be used in the context of a benchmarking methodology. The proposed methodology focuses on Workflow Management Systems (WfMSs), a critical service orchestration middleware, which can be characterized by its architectural complexity, for which Docker Containers offer a highly suitable approach. The contributions of our work are: 1) a new benchmarking approach taking full advantage of containerization technologies; and 2) the formalization of the interaction process with the WfMS vendors described clearly in a written agreement. Thus, we take advantage of emerging Cloud technologies to address technical challenges, ensuring the performance measurements can be trusted. We also make the benchmarking process transparent, automated, and repeatable so that WfMS vendors can join the benchmarking effort.", "num_citations": "24\n", "authors": ["640"]}
{"title": "End-user programming for web mashups\n", "abstract": " Mashup is defined as the practice of lightweight composition, serendipitous reuse, and user-centric development on the Web. In spite of the fact that the development of mashups is rather simple due to the reuse of all the required layers of a Web application (functionality, data, and user interface), it still requires programming experience. This is a significant hurdle for non-programmers (end-users with minimal or no programming experience), who constitute the majority of Web users. To cope with this, an End-User Programming (EUP) tool can be designed to reduce the barriers of mashup development, in a way that even non-programmers will be able to create innovative, feature-rich mashups. In this paper, we give an overview of the existing EUP approaches for mashup development, as well as a list of open research challenges.", "num_citations": "24\n", "authors": ["640"]}
{"title": "Control the flow: How to safely compose streaming services into business processes\n", "abstract": " Although workflow languages are widely used for composing discrete services, these are not suitable for stream based interactions. In this paper we address the problem of how to extend a conventional Web service composition language with the ability to deal with data streaming services. The paper discusses several modeling alternatives and presents a marker based semantics for safely dealing with pipelined processing in service compositions. The paper also presents application examples that illustrate the advantages of the proposed approach", "num_citations": "24\n", "authors": ["640"]}
{"title": "A decade of enterprise integration patterns: A conversation with the authors\n", "abstract": " Department editors Olaf Zimmerman and Cesare Pautasso interview Gregor Hohpe and Bobby Woolf, authors of Enterprise Integration Patterns. They discuss the book's impact, pattern language design, message-oriented middleware, integration technology's evolution, and the authors' future plans.", "num_citations": "23\n", "authors": ["640"]}
{"title": "Atomic distributed transactions: A RESTful design\n", "abstract": " The REST architectural style supports the reliable interaction of clients with a single server. However, no guarantees can be made for more complex interactions which require to atomically transfer state among resources distributed across multiple servers. In this paper we describe a lightweight design for transactional composition of RESTful services. The approach--based on the Try-Cancel/Confirm (TCC) pattern--does not require any extension to the HTTP protocol. The design assumes that resources are designed to comply with the TCC pattern and ensures that the resources involved in the transaction are not aware of it. It delegates the responsibility of achieving the atomicity of the transaction to a coordinator which exposes a RESTful API.", "num_citations": "23\n", "authors": ["640"]}
{"title": "S: a scripting language for high-performance restful web services\n", "abstract": " There is an urgent need for novel programming abstractions to leverage the parallelism in modern multicore machines. We introduce S, a new domain-specific language targeting the server-side scripting of high-performance RESTful Web services. S promotes an innovative programming model based on explicit (control-flow) and implicit (process-level) parallelism control, allowing the service developer to specify which portions of the control-flow should be executed in parallel. For each service, the choice of the best level of parallelism is left to the runtime system. We assess performance and scalability by implementing two non-trivial composite Web services in S. Experiments show that S-based Web services can handle thousands of concurrent client requests on a modern multicore machine.", "num_citations": "22\n", "authors": ["640"]}
{"title": "Natural end-user development of web mashups\n", "abstract": " End-User Development (EUD) can be exploited on the Web, where users have the opportunity to create niche \u201cWeb Mashup\u201d applications as a means to address their long tail of situational needs in different domains of application. In this paper, we describe the design and evaluation of NaturalMash, an innovative EUD system for mashups. NaturalMash provides a high level of expressive power while it is still usable by non-professional users. This clearly distinguishes NaturalMash from existing mashup EUD tools that are either too limited or highly specialized for inexperienced users. The NaturalMash user interface efficiently combines different techniques such as live programming, natural language programming, What You See Is What You Get (WYSIWYG), and Programming by Demonstration (PbD). The design of NaturalMash adopts a formative evaluation approach, and has completed two design and\u00a0\u2026", "num_citations": "21\n", "authors": ["640"]}
{"title": "Architectural decision modeling with reuse: challenges and opportunities\n", "abstract": " Architectural decision modeling aims at supporting the software architecture design process by capturing a reusable body of architectural knowledge. Whereas significant progress has been made towards this vision, there still remains a number of open problems. This paper outlines selected research challenges and opportunities related to knowledge capturing and sharing, model evolution and verification, and the integration of the architectural design process with existing software development methodologies. Our goal is to start a discussion on a roadmap for future research on reusable modeling of architectural decisions.", "num_citations": "21\n", "authors": ["640"]}
{"title": "Programming for dependability in a service-based grid\n", "abstract": " Service-based Grid infrastructures emphasize service composition rather than sharing of low level resources. The idea is to build Grid applications out of computational services provided by the different sites of the Grid. Recent developments in the area of Web services have strengthened this idea by standardizing procedures like service description, publication and invocation. What is still missing is the infrastructure necessary to support the complete life cycle of applications running on service based Grids, i.e., suitable programming paradigms, execution infrastructure, and the ability to monitor and control such computations. Moreover, once computations are made of composable services, dependability becomes a key issue that needs to be addressed by the infrastructure as it cannot be addressed separately by each individual service. To address these concerns, we have developed the BioOpera Grid computing\u00a0\u2026", "num_citations": "21\n", "authors": ["640"]}
{"title": "Towards distributed atomic transactions over RESTful services\n", "abstract": " There is considerable debate in the REST community whether or not transaction support is needed and possible. This chapter\u2019s contribution to this debate is threefold: we define a business case for transactions in REST based on the Try-Cancel/Confirm (TCC) pattern; we outline a very light-weight protocol that guarantees atomicity and recovery over distributed REST resources; and we discuss the inherent theoretical limitations of our approach. Our TCC for REST approach minimizes the assumptions made on the individual services that can be part of a transaction and does not require any extension to the HTTP protocol. A very simple but realistic example helps to illustrate the applicability of the approach.", "num_citations": "20\n", "authors": ["640"]}
{"title": "EnglishMash: usability design for a natural mashup composition environment\n", "abstract": " The design of mashup tools combines elements from end-user development and software composition in the context of the Web. The challenge for mashup tool designers is to provide end-users with suitable abstractions, programming models and tool support for easily composing mashups out of existing Web services and Web data sources. In this paper we describe the design of a natural mashup composition environment based on the EnglishMash controlled natural language. The environment proactively supports users as they are learning the syntax of the EnglishMash language with features such as auto-completion, immediate feedback, live preview of the mashup execution and component discovery and selection based on natural language descriptions.", "num_citations": "19\n", "authors": ["640"]}
{"title": "Visual modeling of RESTful conversations with RESTalk\n", "abstract": " The cost savings introduced by Web services through code reuse and integration opportunities have motivated many businesses to develop Web APIs, with ever increasing numbers opting for the REST architectural style. RESTful Web APIs are decomposed in multiple resources, which the client can manipulate through HTTP interactions with well-defined semantics. Getting the resource in the desired state might require multiple client\u2013server interactions, what we define as a RESTful conversation. RESTful conversations are dynamically guided by hypermedia controls, such as links. Thus, when deciding whether and how to use a given RESTful service, the client might not be aware of all the interactions which are necessary to achieve its goal. This is because existing documentation of RESTful APIs describes the static structure of the interface, exposing low-level HTTP details, while little attention has been\u00a0\u2026", "num_citations": "18\n", "authors": ["640"]}
{"title": "Deploying stateful web components on multiple devices with liquid. js for Polymer\n", "abstract": " Nowadays, the average users owns two or more Web-enabled devices (smart phones, personal computers and tablets), while more are coming: watches, cars, glasses. While responsive Web applications can adapt to the specific device (e.g., screen size or input method) on which they are deployed, they only provide limited support when one user connects from more than one device at the same time. In this paper we present Liquid.js for Polymer, a framework whose goal is to support developers that need to build liquid Web applications taking full advantage of multiple heterogeneous devices. It extends emerging Web components standards to enable the liquid user experience, whereby any device can be used sequentially or concurrently with applications that can roam from one device to another with no effort required by users controlling them. This way, users do not need to stop and resume their work on their\u00a0\u2026", "num_citations": "18\n", "authors": ["640"]}
{"title": "Live mashup tools: challenges and opportunities\n", "abstract": " Live programming is a programming style in which the repetitive task of compiling and running the software being programmed is managed automatically. This style can be a helpful practice in End-User Development (EUD) where the nonprofessional end-users are to be supported through techniques and tools that empower them to create or modify software artifacts. Mashups a form of lightweight Web applications composing reusable content and functionalities available on the Web are a popular target for EUD activities on the Web. EUD for mashups is enabled by intuitive composition environments, called mashup tools. In this paper, we introduce live mashup tools, a new class of mashup tools based on the live programming style. We give a comprehensive definition and classification of live mashup tools, giving examples of how well existing tools fit in this category and discuss open research challenges and\u00a0\u2026", "num_citations": "18\n", "authors": ["640"]}
{"title": "An architectural style for liquid web services\n", "abstract": " Just as liquids adapt their shape to the one of their container, liquid architectures feature a high degree of adaptability so that they can provide scalability to applications as they are executed on a wide variety of heterogeneous deployment environments. In this paper we enumerate the properties to be guaranteed by so-called liquid service-oriented architectures and define a set of design constraints that make up a novel architectural style for liquid architectures. These constraints drive the careful construction of a pattern, the Restful Actor (Reactor), which enables to deliver the required scalability by means of replication of its constituent parts. Reactors feature a Restful Web service interface and a composable architecture which is capable of delivering scalability and high performance in a way that is independent from the chosen deployment infrastructure. We discuss how the Reactor can be deployed to run on\u00a0\u2026", "num_citations": "18\n", "authors": ["640"]}
{"title": "Peer reviewing interdisciplinary papers\n", "abstract": " Interdisciplinary research is becoming more frequent because many contemporary issues can only be successfully addressed by integrating different perspectives. One general feature of the various scientific fields is peer review, i.e. the assessment and improvement of submissions to journals, conferences and workshops. Whilst there exist guidelines for the peer review of mono-disciplinary articles and empirical studies of how interdisciplinary research proposals are assessed, there is still a need for a summary of issues specific to the peer review of interdisciplinary research papers. This article provides an overview of relevant questions such as whether reviewers are competent to assess interdisciplinary papers even if unfamiliar with all the involved fields. We discuss the assessment of the interdisciplinarity, soundness, novelty, influence and general interest of interdisciplinary manuscripts. Further issues include\u00a0\u2026", "num_citations": "18\n", "authors": ["640"]}
{"title": "ASQ: Interactive web presentations for hybrid MOOCs\n", "abstract": " ASQ is a Web application for creating and delivering interactive HTML5 presentations. It is designed to support teachers that need to gather real-time feedback from the students while delivering their lectures. Presentation slides are delivered to viewers that can answer the questions embedded in the slides. The objective is to maximize the efficiency of bi-directional communication between the lecturer and a large audience. More specifically, in the context of a hybrid MOOC classroom, a teacher can use ASQ to get feedback in real time about the level of comprehension of the presented material while reducing the time for gathering survey data, monitoring attendance and assessing solutions.", "num_citations": "17\n", "authors": ["640"]}
{"title": "Automatic configuration of an autonomic controller: An experimental study with zero-configuration policies\n", "abstract": " Autonomic control managers can remove the need for manual system configuration in order to achieve good performance and efficient resource utilization. However, simple controllers based on reconfiguration actions tied to thresholds, or 'if-then' rules, themselves need to be configured and tuned in order to adapt the controller behavior to the expected workload characteristic. In this paper we present an experimental study of zero-configuration policies that can be automatically tuned based on analytical models of the system under control. In particular, we have designed and implemented a threshold-free self-configuration policy for a distributed workflow execution engine and compared it with a standard PID controller. The experimental results included in the paper show that using such a policy the controller can tune itself in addition to reconfiguring the distributed engine and the proposed policy out-performs\u00a0\u2026", "num_citations": "17\n", "authors": ["640"]}
{"title": "Publishing persistent grid computations as WS resources\n", "abstract": " Grid services can be composed into processes, providing a high level definition of the computations involved in terms of their data exchanges and control flow dependencies. In this paper we show how processes themselves can be efficiently published as grid services by mapping the persistent state of the process executions to standard compliant interfaces as defined by the Web Services Resource Framework (WS-RF). Mapping processes to resources is a fundamental step to enable recursive Grid service composition, where composite grid services are themselves published as services. This gives processes a standardized and well-understood interface that enables their management, monitoring, steering and adaptation. Additionally it eases their reusability and simplifies integration into existing grid applications and portals. In order to determine the mapping's overhead, we include the results of a\u00a0\u2026", "num_citations": "17\n", "authors": ["640"]}
{"title": "The web as a software connector: integration resting on linked resources\n", "abstract": " The web, seen as a graph of linked resources shared between microservices, can serve as an integration style. It offers unique characteristics and possibilities regarding dataflow, control flow, and other qualities, compared to file transfer, shared databases, remote procedure calls, and asynchronous messaging. Carrying these insights in your toolbox will make you aware of all the options to consider next time you build loosely coupled integrated systems.", "num_citations": "16\n", "authors": ["640"]}
{"title": "Just enough anticipation: Architect your time dimension\n", "abstract": " Documenting the time dimension part of your architecture might look like extra work. However, anticipation should be a large part of your job as an architect, anyway. If you communicate your anticipation as an evolution viewpoint or architecture roadmap, your architecture description will stay valid longer. And, you'll have a ready answer when stakeholders ask how you've addressed their change and planning concerns.", "num_citations": "16\n", "authors": ["640"]}
{"title": "Maturity model for liquid web architectures\n", "abstract": " Liquid Web applications adapt to the set of connected devices and flow seamlessly between them following the user attention. As opposed to traditional centralised architectures, in which data and logic of the application resides entirely on a Web server, Liquid software needs decentralised or distributed architectures in order to achieve seamless application mobility between clients. By decomposing Web application architectures into layers, following the Model View Controller design pattern, we define a maturity model for Web application architectures evolving from classical solid applications deployed on single devices, to fully liquid applications deployed across multiple Web-enabled devices. The maturity model defines different levels based on where the application layers are deployed and how they migrate or synchronize their state across multiple devices. The goal of the maturity model described in\u00a0\u2026", "num_citations": "15\n", "authors": ["640"]}
{"title": "Employing community question answering for online discussions in university courses: students\u2019 perspective\n", "abstract": " In university courses as well as in MOOCs, Community Question Answering (CQA) systems have been recently recognized as a promising alternative to standard discussion forums for mediating online discussions. Despite emerging research on educational CQA systems, a study investigating when and how to use these systems to support university education is still missing. We stress that such a study should effectively take into account students' perceptions of CQA systems rather than relying solely on an analysis of their effective usage based on data available in system logs. This paper therefore systematically analyzes perspective of 182 computer science students from three universities located in three different countries on concept of educational CQA systems. Students\u2019 opinions were collected using a questionnaire that was designed to assess conceptual issues of using CQA systems in university education\u00a0\u2026", "num_citations": "14\n", "authors": ["640"]}
{"title": "A pattern language for RESTful conversations\n", "abstract": " As a good user interface design is important for the success of an app, so is a good API for the success of a Web service. Within the RESTful Web services community there is a need for a systematic approach in knowledge sharing, for which patterns are particularly suitable. Using a RESTful service to achieve a certain goal often requires multiple client-server interactions, ie, to have a conversation. While patterns of such RESTful conversations can be uncovered from existing APIs' usage scenarios, or the service engineering literature, they have never been gathered in a pattern language, nor properly visualized with a Domain Specific Modeling Language (DSML). These patterns provide valuable input for API designers, as well as API consumers, by establishing a common vocabulary to describe recurring conversations. To do so, this paper uses RESTalk, a DSML, to model the basic RESTful conversation patterns\u00a0\u2026", "num_citations": "14\n", "authors": ["640"]}
{"title": "TigerQuoll: parallel event-based JavaScript\n", "abstract": " JavaScript, the most popular language on the Web, is rapidly moving to the server-side, becoming even more pervasive. Still, JavaScript lacks support for shared memory parallelism, making it challenging for developers to exploit multicores present in both servers and clients. In this paper we present TigerQuoll, a novel API and runtime for parallel programming in JavaScript. TigerQuoll features an event-based API and a parallel runtime allowing applications to exploit a mutable shared memory space. The programming model of TigerQuoll features automatic consistency and concurrency management, such that developers do not have to deal with shared-data synchronization. TigerQuoll supports an innovative transaction model that allows for eventual consistency to speed up high-contention workloads. Experiments show that TigerQuoll applications scale well, allowing one to implement common parallelism\u00a0\u2026", "num_citations": "14\n", "authors": ["640"]}
{"title": "An evaluation of mashup tools based on support for heterogeneous mashup components\n", "abstract": " Mashups are built by combining building blocks, which are commonly referred to as mashup components. These components are characterized by a high level of heterogeneity in terms of technologies, access methods, and the behavior they may exhibit within a mashup. Abstracting away this heterogeneity is the mission of the so-called mashup tools aiming at automating or semi-automating mashup development to serve non-programmers. The challenge is to ensure this abstraction mechanism does not limit the support for heterogeneous mashup components. In this paper, we propose a novel evaluation framework that can be applied to assess the degree to which a given mashup tool addresses this challenge. The evaluation framework can serve as a benchmark for future improved design of mashup tools with respect to heterogeneous mashup components support. In order to demonstrate the\u00a0\u2026", "num_citations": "14\n", "authors": ["640"]}
{"title": "Consistent disaster recovery for microservices: the CAB theorem\n", "abstract": " How do you backup a Microservice? You dump its database. How do you backup an entire application decomposed into microservices? In this paper we discuss the tradeoff between the availability and consistency of a microservice-based architecture, when the backup of the entire system is being performed.", "num_citations": "13\n", "authors": ["640"]}
{"title": "The mashup component description language\n", "abstract": " Mashups can be seen as the result of software composition applied to the Web. One of the characteristics of mashup development is the heterogeneity of its building components in terms of logical layering (eg, user interface, application logic, and data), access method (eg, REST, SOAP), and composition technique (eg, scraping vs. clipping, synchronous vs. asynchronous interaction, discrete vs. streaming). This poses a challenge towards the design of mashup tools aiming at lowering the barriers of mashup development, as this heterogeneity needs to be abstracted. In this paper, we address this challenge by proposing a new JSON-based domain-specific language for describing heterogeneous mashup components, called the Mashup Component Description Language (MCDL). MCDL lies at the core of a meta-model for mashup component modeling, and can be used for component discovery and classification\u00a0\u2026", "num_citations": "13\n", "authors": ["640"]}
{"title": "From choreography diagrams to RESTful interactions\n", "abstract": " Today, business process management is a key approach to organize work, and many companies represent their operations in business process models. Recently, choreography diagrams have been introduced to represent interactions between business processes, run by different partners. While there is considerable work on using process models during process implementation, there is little work on using choreography models to implement interactions between business processes. In this paper, a novel approach to enhance choreography diagrams by execution information is introduced. The approach is based on the REST architecture style, which is the primary way for interacting systems. Using enhanced choreography diagrams allows us to develop REST-based interactions among business partners in an efficient manner. The approach is illustrated by an example of an accommodation reservation\u00a0\u2026", "num_citations": "12\n", "authors": ["640"]}
{"title": "Modeling RESTful conversations with extended BPMN choreography diagrams\n", "abstract": " RESTful Web APIs often make use of multiple basic HTTP interactions to guide clients towards their goal. For example, clients may get redirected towards related resources by means of hypermedia controls such as links. Existing modeling approaches for describing RESTful APIs expose low-level HTTP details that help developers construct individual requests and parse the corresponding responses. However, very little attention has been given to high-level modeling of RESTful conversations, which abstracts the structure of multiple HTTP interactions. To address such issue in this paper we introduce an extension of the notation used in BPMN choreography diagrams. Its purpose is to represent concisely all possible interaction sequences in a given RESTful conversation.", "num_citations": "12\n", "authors": ["640"]}
{"title": "Liquid stream processing across web browsers and web servers\n", "abstract": " The recently proposed API definition WebRTC introduced peer-to-peer real time communication between Web browsers, allowing streaming systems to be deployed on browsers in addition to traditional server-side execution environments. While streaming applications can be adapted to run on Web browsers, it remains difficult to deal with temporary disconnections, energy consumption on mobile devices and a potentially very large number of heterogeneous peers that join and leave the execution environment affecting the quality of the stream. In this paper we present the decentralized control approach followed by the Web Liquid Streams (WLS) framework, a novel framework for streaming applications running on Web browsers, Web servers and smart devices. Given the heterogeneity of the deployment environment and the volatility of Web browsers, we implemented a control infrastructure which is able\u00a0\u2026", "num_citations": "12\n", "authors": ["640"]}
{"title": "The stream software connector design space: Frameworks and languages for distributed stream processing\n", "abstract": " In recent years we witnessed the rise of applications in which data is continuously generated and pushed towards consumers in real time through complex processing pipelines. Software connectors like remote procedure call (RPC) do not fit with the needs of such applications, for which the publish/subscribe and the stream connectors are more suitable. This paper introduces the design space of the stream software connector by analyzing recent stream processing engine frameworks and domain specific languages featuring native streaming support. On the one side, we want to classify and compare streaming systems based on a taxonomy derived from the wide range of features they offer (i.e., pipeline dynamicity and representation, load balancing and deployment flexibility). On the other side, the gaps in the design space we identify point at future research directions in the area of distributed stream processing\u00a0\u2026", "num_citations": "12\n", "authors": ["640"]}
{"title": "Embedding continuous lifelong verification in service life cycles\n", "abstract": " Service-oriented systems are an instantiation of open world software, which is characterized by high dynamism and decentralization. These properties strongly impact on how service-oriented systems are engineered, built, and operated, as well as verified. To address the challenges of applying verification to open service-oriented systems, in this position paper we propose to apply verification across the entire life cycle of a service and introduce a verification-oriented service life cycle.", "num_citations": "12\n", "authors": ["640"]}
{"title": "Grid-based analysis of tandem mass spectrometry data in clinical proteomics.\n", "abstract": " Biomarker detection is one of the greatest challenges in Clinical Proteomics. Today, great hopes are placed into tandem mass spectrometry (MS/MS) to discover potential biomarkers. MS/MS is a technique that allows large scale data analysis, including the identification, characterization, and quantification of molecules. Especially the identification process, that implies to compare experimental spectra with theoretical amino acid sequences stored in specialized databases, has been subject for extensive research in bioinformatics since many years. Dozens of identification programs have been developed addressing different aspects of the identification process but in general, clinicians are only using a single tools for their data analysis along with a single set of specific parameters. Hence, a significant proportion of the experimental spectra do not lead to a confident identification score due to inappropriate parameters or scoring schemes of the applied analysis software. The swissPIT (Swiss Protein Identification Toolbox) project was initiated to provide the scientific community with an expandable multi-tool platform for automated and in-depth analysis of mass spectrometry data. The swissPIT uses multiple identification tools to automatic analyze mass spectra. The tools are concatenated as analysis workflows. In order to realize these calculation-intensive workflows we are using the Swiss Bio Grid infrastructure. A first version of the web-based frontend is available (http://www. swisspit. cscs. ch) and can be freely accessed after requesting an account. The source code of the project will be also made available in near future.", "num_citations": "11\n", "authors": ["640"]}
{"title": "Autonomic computing for virtual laboratories\n", "abstract": " Virtual laboratories can be characterized by their long-lasting, large-scale computations, where a collection of heterogeneous tools is integrated into data processing pipelines. Such virtual experiments are typically modeled as scientific workflows in order to guarantee their reproduceability. In this chapter we present JOpera, one of the first autonomic infrastructures for managing virtual laboratories. JOpera provides a sophisticated Eclipse-based graphical environment to design, monitor and debug distributed computations at a high level of abstraction. The chapter describes the architecture of the workflow execution environment, emphasizing its support for the integration of heterogeneous tools and evaluating its autonomic capabilities, both in terms of reliable execution (self-healing) and automatic performance optimization (self-tuning).", "num_citations": "11\n", "authors": ["640"]}
{"title": "The liquid user experience API\n", "abstract": " In the past years the average number of Web-enabled devices owned by each user has significantly increased. Liquid Web applications enable users to take advantage of all their devices sequentially to migrate their running applications across them or simultaneously when running different views of the same application at the same time on each device. Developers of liquid Web application need to control how to expose the liquid behavior of their cross-device Web applications to the users. To do so, they can use the API of Liquid. js we describe in this paper. Liquid. js is a framework for building component-based rich Web applications which run across multiple Web-enabled devices. The framework is based on technologies such as Polymer, WebRTC, WebWorkers, PouchDB and Yjs. Liquid. js helps to build decentralized Web applications whose components can seamlessly flow directly between Web browsers\u00a0\u2026", "num_citations": "10\n", "authors": ["640"]}
{"title": "RESTful business process management in the cloud\n", "abstract": " As more and more business processes are migrated into cloud-based runtimes, there is a need to manage their state to provide support for quality attributes such as elasticity, scalability and dependability. In this paper we discuss how the REST architectural style provides a sensible choice to manage and publish service compositions under the Platform as a Service paradigm. We define the design principles of RESTful business process management in the cloud and compare several architectural alternatives to support elastic processes which can be monitored and dynamically adapted to workload changes.", "num_citations": "10\n", "authors": ["640"]}
{"title": "Goals, questions and metrics for architectural decision models\n", "abstract": " Architectural decisions are the key element behind the design process leading to a software architecture. Making software architects aware of the implications of their decisions is only the beginning of what can be achieved by capturing the rationale and the constraints influencing the decision making process in a reusable body of architectural knowledge. In this paper we propose a metric-based approach to the analysis of architectural decision models. Using a hierarchically-structured approach we identify a number of useful goals and stakeholders involved in the architectural design process. Next, we sketch a set of metrics to provide data for the evaluation of the aforementioned goals. Our aim is to stimulate a discussion on how to find indicators relevant for software architects by measuring the intrinsic properties of architectural knowledge.", "num_citations": "10\n", "authors": ["640"]}
{"title": "Towards liquid service oriented architectures\n", "abstract": " The advent of Cloud computing platforms, and the growing pervasiveness of Multicore processor architectures have revealed the inadequateness of traditional programming models based on sequential computations, opening up many challenges for research on parallel programming models for building distributed, service-oriented systems. More in detail, the dynamic nature of Cloud computing and its virtualized infrastructure pose new challenges in term of application design, deployment and dynamic reconfiguration. An application developed to be delivered as a service in the Cloud has to deal with poorly understood issues such as elasticity, infinite scalability and portability across heterogeneous virtualized environments. In this position paper we define the problem of providing a novel parallel programming model for building application services that can be transparently deployed on multicore and cloud\u00a0\u2026", "num_citations": "10\n", "authors": ["640"]}
{"title": "The mashup atelier\n", "abstract": " Can mashups be used to make high school students interested in studying computer science? To answer this question, we have designed the mashup atelier. The goal of this experimental lecture is to make students realize that the Web is not only a medium for passively consuming information but it can be actively reprogrammed as they see fit. The atelier introduces the topic of Web 2.0 Mashups to students without any formal pre-existing computer science education. After giving the atelier several times, we report on the results of a student evaluation survey showing that, if supported with right kind of mashup tools, creative students can become very productive developing interesting mashups in a short timeframe. The feedback we gathered from the students can also be used to improve existing mashup languages and tools, with the ultimate goal of understanding what makes them intuitive and fun to use.", "num_citations": "10\n", "authors": ["640"]}
{"title": "Comparing the built-in application architecture models in the web browser\n", "abstract": " Depending on one's viewpoint, a generic standards-compatible web browser supports three, four or five built-in application rendering and programming models. In this paper, we provide an overview of the built-in client-side web application architectures. While the dominance of the base HTML/CSS/JS technologies cannot be ignored, we foresee Web Components and WebGL gaining popularity as the world moves towards more complex and even richer web applications, including systems supporting virtual and augmented reality.", "num_citations": "9\n", "authors": ["640"]}
{"title": "Inferring student attention with ASQ\n", "abstract": " ASQ is a Web application for broadcasting and tracking interactive presentations, which can be used to support active learning pedagogies during lectures, labs and exercise sessions. Students connect their smartphones, tablets or laptops to receive the current slide as it is being explained by the teacher. Slides can include interactive teaching elements (usually questions of different forms). In contrast to other existing platforms, ASQ does not only collect, aggregate and visualize the answers in real-time, it also supports the data analytics in the classroom paradigm by providing the teacher with a real-time analysis of student behaviour during the entire session. One vital aspect of student behaviour is (in)attention and in this paper we discuss how we infer \u2014 in real-time \u2014 student attention based on log traces ASQ collects.", "num_citations": "9\n", "authors": ["640"]}
{"title": "Overseer: low-level hardware monitoring and management for Java\n", "abstract": " The high-level and portable nature of the Java platform allows applications to be written once and executed on all the supported systems. However, such a feature comes at the cost of hardware abstraction, making it more difficult or even impossible to access several low-level functionalities. Overseer is a Java framework that makes it possible on Linux systems by simplifying access to real-time measurement of low-level data such as Hardware Performance Counters (HPCs), IPMI sensors, and Java VM internal events. Overseer supports functionalities such as HPC-management, process/thread affinity settings, hardware topology identification, as well as power-consumption and temperature monitoring. In this paper we describe Overseer and how to use it to extend Java applications with functionalities not provided by the default runtime. A public release of Overseer is available.", "num_citations": "9\n", "authors": ["640"]}
{"title": "swissPIT: a novel approach for pipelined analysis of mass spectrometry data\n", "abstract": " The identification and characterization of peptides from tandem mass spectrometry (MS/MS) data represents a critical aspect of proteomics. Today, tandem MS analysis is often performed by only using a single identification program achieving identification rates between 10\u201350% (Elias and Gygi, ). Beside the development of new analysis tools, recent publications describe also the pipelining of different search programs to increase the identification rate (Hartler et al., 2007; Keller et al., 2005).         The Swiss Protein Identification Toolbox (swissPIT) follows this approach, but goes a step further by providing the user an expandable multi-tool platform capable of executing workflows to analyze tandem MS-based data. One of the major problems in proteomics is the absent of standardized workflows to analyze the produced data. This includes the pre-processing part as well as the final identification of peptides and\u00a0\u2026", "num_citations": "9\n", "authors": ["640"]}
{"title": "RESTful Web Services\n", "abstract": " RESTful Web Services Page 1 1 10.4.2008 Web Services and Service Oriented Architectures \u00a92008 Cesare Pautasso 1 RESTful Web Services Cesare Pautasso Faculty of Informatics University of Lugano http://www.pautasso.info 10.4.2008 Web Services and Service Oriented Architectures \u00a92008 Cesare Pautasso 2 SOA without WS* My mental picture of SOA, in the good sense, is just about wiring applications together and you can do that without the WS-*, the \"death star\u201c. David Hansson, creator of Ruby on Rails http://www.infoq.com/interviews/David-Hansson \u201c \u201d http://www.loudthinking.com/arc/000585.html Page 2 2 10.4.2008 Web Services and Service Oriented Architectures \u00a92008 Cesare Pautasso 3 RESTful Web Services A renaissance of HTTP appreciation is building and, under the banner of REST, shows a credible alternative to what the merchants of complexity are trying to ram down everyone\u2019s throats. \u2026", "num_citations": "9\n", "authors": ["640"]}
{"title": "\" BPELanon\": Anonymizing BPEL Processes.\n", "abstract": " We are currently developing a performance benchmark for Workflow Management System. As a first activity we are collecting real-world processes. However, to protect their competitive advantage, some companies are not willing to share their corporate assets. This work\u2019s objective is to propose a method (\u201cBPELanon\u201d) for BPEL process anonymization in order to deal with the problem. The method transforms a process to preserve its original structure and runtime behavior, while completely anonymizing its business semantics. Anonymization is a complicated task that must meet the requirements we outline in this paper. Namely, we need to preserve the structural and executional information while anonymizing information such as namespaces, names (activity names, variable names, partner link names etc.), and XPath expressions that may reveal proprietary information. Furthermore, the names contained in the anonymized process should be chosen carefully in order to avoid conflicts, preserve privacy, and file-readability. Multiple dependency relations among process artifacts raise the challenge of fulfilling the aforementioned requirements, as a unique change in a file potentially leads to a flow of changes to other related process artifacts.", "num_citations": "8\n", "authors": ["640"]}
{"title": "Measuring student behaviour dynamics in a large interactive classroom setting\n", "abstract": " Digital devices (most often laptops and smartphones), though desired tools by students in a higher education classroom, have in the past been shown to serve more as distractors than supporters of learning. One of the reasons is the often undirected nature of the devices' usage. With our work we aim to turn students' digital devices into teaching and communication tools by seamlessly interleaving lecture material and complex questions in the students' browser through ASQ, a Web application for broadcasting and tracking interactive presentations. ASQ's fine-grained logging abilities allow us to track second by second to what extent students are engaging with ASQ which in turn enables insights into student behaviour dynamics. This setup enables us to conduct\" in situ\" experiments. Based on the logs collected in a longitudinal study over a ten week period across 14 lectures with more than 300 students, we\u00a0\u2026", "num_citations": "7\n", "authors": ["640"]}
{"title": "Interactive scalable lectures with ASQ\n", "abstract": " Taking full advantage of the Web technology platform during in-class lectures requires a shift from the established scheme of online education delivery that utilizes the video channel to embed all types of content and gathers student feedback via multiple choice questions or textual answers. In this paper we present the design of ASQ to deliver interactive content for use in heterogeneous educational settings with a large number of students, taking advantage of the co-location of students and instructors and building upon the latest capabilities of the Web platform. ASQ is centered around interactive HTML5 presentations coupled with a versatile microformat to create and deliver various types quizzes and scalable, synchronous/asynchronous feedback mechanisms.", "num_citations": "7\n", "authors": ["640"]}
{"title": "Node. scala: Implicit parallel programming for high-performance web services\n", "abstract": " Event-driven programming frameworks such as Node.JS have recently emerged as a promising option for Web service development. Such frameworks feature a simple programming model with implicit parallelism and asynchronous I/O. The benefits of the event-based programming model in terms of concurrency management need to be balanced against its limitations in terms of scalability on multicore architectures and against the impossibility of sharing a common memory space between multiple Node.JS processes. In this paper we present Node.Scala, an event-based programming framework for the JVM which overcomes the limitations of current event-driven frameworks. Node.Scala introduces safe stateful programming for event-based services. The programming model of Node.Scala allows threads to safely share state in a standard event-based programming model. The runtime system of Node\u00a0\u2026", "num_citations": "7\n", "authors": ["640"]}
{"title": "Towards self-organizing service-oriented architectures\n", "abstract": " Service-oriented architectures (SOAs) provide a successful model for structuring complex distributed software systems, as they reduce the cost of ownership and ease the creation of new applications by composing existing services. However, currently, the development of service-oriented applications requires many manual tasks and prevailing infrastructure is often based on centralized components that are central points of failure and easily become bottlenecks. In this paper, we promote self-organizing SOA as a new approach to overcome these limitations. Self-organizing SOA integrates research results in the areas of autonomic and service oriented computing. We consider self-organizing features for the whole life-cycle of a service-oriented application, from the creation to the execution, optimization, and monitoring.", "num_citations": "7\n", "authors": ["640"]}
{"title": "A multicore-aware runtime architecture for scalable service composition\n", "abstract": " Middleware for web service orchestration, such as runtime engines for executing business processes, workflows, or web service compositions, can easily become performance bottlenecks when the number of concurrent service requests increases. Many existing process execution engines have been designed to address scalability with distribution and replication techniques. However, the advent of modern multicore machines, comprising several chip multi-processors each offering multiple cores and often featuring a large shared cache, offers the opportunity to redesign the architecture of process execution engines in order to take full advantage of the underlying hardware resources. In this paper we present an innovative process execution engine architecture. Its design takes into account the specific constraints of multicore machines and scales well on different processor architectures, as shown by our extensive\u00a0\u2026", "num_citations": "7\n", "authors": ["640"]}
{"title": "JOpera: Visual composition of grid services\n", "abstract": " The recent shift to service-based Grids enables the use of service composition tools for rapidly building and efficiently running distributed computations. At ETH Zurich, we have developed JOpera, a visual composition language and a set of integrated software development tools for composing Grid services. The system can be freely downloaded and has been successfully tested with data-intensive bioinformatics applications as well as large-scale, Monte-Carlo network simulations.Early Grid middleware and tools emphasized low-level resource management aspects. Today, Grid computing has adopted the notion of \u2018services\u2019 as a basic building block for large-scale scientific computations. The focus has moved from CPU sharing to defining computational resources and functionality as composable services. Thanks to standards such as Web services, an increasingly large number of basic Grid services are being\u00a0\u2026", "num_citations": "7\n", "authors": ["640"]}
{"title": "Modeling microservice conversations with RESTalk\n", "abstract": " Microservices are characterized by their small size and low degree of coupling. As a consequence, building microservice architectures requires composing multiple microservices and determine how they interact to achieve a given client\u2019s goal. In this chapter we introduce the concept of RESTful conversation, whereby clients or API gateways perform multiple basic HTTP request/response interactions with one or more microservice APIs. To represent possible sequences of interactions, we introduce the RESTalk visual notation, as well as its textual DSL, and the corresponding metamodel, and show how it can be used to complement existing structural approaches to represent RESTful APIs, such as the OpenAPI Specification. To reveal the degree of coupling between clients and microservices, the language supports the concept of hyperlink flow, showing whether, within a conversation, the links embedded into\u00a0\u2026", "num_citations": "6\n", "authors": ["640"]}
{"title": "Sketching process models by mining participant stories\n", "abstract": " Producing initial process models currently requires gathering knowledge from multiple process participants and using modeling tools to produce a visual representation. With traditional tools this can require significant effort and thus delay the feedback cycle where the initial model is validated and refined based on participants\u2019 feedback. In this paper we propose a novel approach for process model sketching by applying existing process mining techniques to a sample process log obtained directly from the process participants. To that end, we specify a simple natural language-like domain-specific language to represent process traces or fragments of process traces. We also illustrate the architecture of a live modeling tool, the Sketch Miner, implementing the proposed approach. The tool produces a draft visual representation of the control flow which is updated in real-time as the traces are written down. The\u00a0\u2026", "num_citations": "6\n", "authors": ["640"]}
{"title": "Restalk miner: mining restful conversations, pattern discovery and matching\n", "abstract": " REST has become the architectural style of choice for APIs, where clients need to instantiate a potentially lengthy sequence of requests to the server in order to achieve their goal, effectively leading to a RESTful conversation between clients and servers. Mining the logs of such RESTful conversations can facilitate knowledge sharing among API designers regarding design best practices as well as API usage and optimization. In this demo paper, we present the RESTalk Miner, which takes logs from RESTful services as an input and uses RESTalk, a domain specific language, to visualize them. It provides interactive coloring to facilitate graph reading, as well as statistics to compare the relative frequency of conversations performed by different clients. Furthermore, it supports searching for predefined patterns as well as pattern discovery.", "num_citations": "6\n", "authors": ["640"]}
{"title": "Web User Interface Implementation Technologies: An Underview.\n", "abstract": " Over the years, the World Wide Web has evolved from a document distribution environment into a rich development platform that can run compelling, full-fledged software applications. However, the programming capabilities of the web browser\u2013designed originally for relatively simple scripting tasks\u2013have evolved organically in a rather haphazard fashion. Consequently, there are many ways to build applications on the Web today. Depending on one\u2019s viewpoint, current standards-compatible web browsers support three, four or even five built-in application rendering and programming models. In this paper, we provide an\u201d underview\u201d of the built-in client-side web application UI implementation technologies, ie, a summary of those rendering models that are built into the standards-compatible web browser out-of-the-box. While the dominance of the base HTML/CSS/JS technologies cannot be ignored, we foresee Web Components and WebGL gaining popularity as the world moves towards more complex and even richer web applications, including systems supporting virtual and augmented reality.", "num_citations": "6\n", "authors": ["640"]}
{"title": "Experiences using an interactive presentation platform in a functional and logic programming course\n", "abstract": " Modern constructivist approaches to education dictate active experimentation with the study material and have been linked with improved learning outcomes in STEM fields. During classroom time we believe it is important for students to experiment with the lecture material since active recall helps them to start the memory encoding process as well as to catch misconceptions early and to prevent them from taking root. In this paper, we report on our experiences using ASQ, a Web-based interactive presentation tool in a functional and logic programming course taught at the Faculty of Informatics and Information Technologies at the Slovak University of Technology in Bratislava. ASQ allowed us to collect immediate feedback from students and retain their attention by asking complex types of questions and aggregating student answers in real time. From our experience we identified several requirements and guidelines\u00a0\u2026", "num_citations": "6\n", "authors": ["640"]}
{"title": "Decentralized stream processing over web-enabled devices\n", "abstract": " Thanks to the recent introduction of peer-to-peer communication between browsers with WebRTC, real time processing of streams can now be deployed on browsers in addition to traditional server-side execution environments. In this paper we present the Web Liquid Streams framework for building and executing stream processing topologies capable of gathering data from Web-enabled sensors and process it through JavaScript operators scattered across a peer-to-peer Cloud of computing peers. i) support for arbitrary topologies and data streams, ii) deployment on heterogeneous Web-enabled devices, iii) transparent stream delivery across the WebRTC, WebSockets and ZeroMQ protocols, iv) stateful and stateless operators. WLS takes care of the deployment of the topology on the available resources, while users are only required to implement the operators and describe the topology graph using\u00a0\u2026", "num_citations": "6\n", "authors": ["640"]}
{"title": "A RESTful API for controlling dynamic streaming topologies\n", "abstract": " Streaming applications have become more and more dynamic and heterogeneous thanks to new technologies which enable platforms like microcontrollers and Web browsers to be able to host part of a streaming topology. A dynamic heterogeneous streaming application should support load balancing and fault tolerance while being capable of adapting and rearranging topologies to user needs at runtime. In this paper we present a REST API to control dynamic heterogeneous streaming applications. By means of resources, their uniform interface and hypermedia we show how it is possible to monitor, change and adapt the deployment configuration of a streaming topology at runtime.", "num_citations": "6\n", "authors": ["640"]}
{"title": "Guidelines for efficient and effective end-user development of mashups\n", "abstract": " End-User Development (EUD) is an emerging research area aiming at empowering non-technical users to somehow create or design software artifacts. Mashups provide a high potential for EUD activities on the Web. Users on the Web can tap into a vast resource of off-the-shelf components in order to rapidly compose new lightweight software applications called mashups. In this paper, we provide a set of guidelines to design EUD systems for mashups that are widely referred to as mashup tools. The guidelines are derived from our experience with the (ongoing) design and evaluation of NaturalMash, a novel mashup tool targeted for a wide range of users to create feature-rich mashups.", "num_citations": "6\n", "authors": ["640"]}
{"title": "Hardware-aware thread scheduling: the case of asymmetric multicore processors\n", "abstract": " Modern processor architectures are increasingly complex and heterogeneous, often requiring solutions tailored to the specific characteristics of each processor model. In this paper we address this problem by targeting the AMD Bulldozer processor as case study for specific hardware-oriented performance optimizations. The Bulldozer architecture features an asymmetric simultaneous multithreading implementation with shared floating point units (FPUs) and per-core arithmetic logic units (ALUs). Bulld Over, presented in this paper, improves thread scheduling by exploiting this hardware characteristic to increase performance of floating point-intensive workloads on Linux-based operating systems. Bulld Over is a user-space monitoring tool that automatically identifies FPU-intensive threads and schedules them in a more efficient way without requiring any patches or modifications at the kernel level. Our\u00a0\u2026", "num_citations": "6\n", "authors": ["640"]}
{"title": "Decentralized computation offloading on the edge with liquid WebWorkers\n", "abstract": " Liquid Web applications seamlessly flow across any kind of device ranging from powerful desktop and laptop devices to smaller devices, such as tablets, smart phones or any device capable of running a Web browser. In this context, there is the opportunity to reduce the execution time of CPU-intensive tasks or limit their energy consumption by offloading them across the set of machines running the liquid Web application. To do so, in this paper we present Liquid WebWorkers, which build upon the standard HTML5 WebWorker API and transparently offload the task execution to other devices and manage the corresponding data transfer. This way, Web developers can reuse their existing WebWorker scripts without any changes. We present how to create a pool of paired devices and compare different policies for choosing the target device that have been implemented in the Liquid.js framework.", "num_citations": "5\n", "authors": ["640"]}
{"title": "REST vs. WS-* comparison\n", "abstract": " In this part we summarize the WS-* vs. REST debate by giving a quantitative technical comparison based on architectural principles and decisions. We show that the two approaches differ in the number of architectural decisions that must be made and in the number of available alternatives. This discrepancy between freedom-from-choice and freedom-of-choice explains the complexity difference perceived. However, we also show that there are significant differences in the consequences of certain decisions in terms of resulting development and maintenance costs. The comparison helps technical decision makers to assess the two technologies more objectively and select the one that best fits their needs: REST is well suited for basic, ad hoc integration scenarios, WS-* is more flexible and addresses advanced quality of service requirements commonly occurring in enterprise computing.", "num_citations": "5\n", "authors": ["640"]}
{"title": "Unified discovery and composition of heterogeneous services: The SODIUM approach\n", "abstract": " Service-oriented computing (SOC) is an emerging software engineering trend that promises to reform the way applications are built. Services, the main building blocks in this new engineering trend, provide the means to utilize functionality that is o\u00a4 ered by service providers via message exchanges over the Internet. The unique characteristics of a service have been a highly debated research issue (see, for example, Kozlenkov et al. 2006; Czajkowski et al. 2004; Vogels 2003, 59); nonetheless, all researchers agree that a service possesses properties such as self-description, Internet accessibility, and message-oriented communication. Normally, a service can be described, discovered, and invoked using XML-based protocols and standards which lie on top of other proven communication protocols, such as HTTP.Web Services (Booth et al. 2004) is the best-known instantiation of the SOC paradigm. Other instantiations include Grid Services (Czajkowski et al. 2004), which emerged from the scienti\ufb01c application domain, and Peer-to-Peer (P2P) Services (Li 2001, 88), which originated from community-oriented systems and applications, such as instant messaging and \ufb01le sharing.", "num_citations": "5\n", "authors": ["640"]}
{"title": "Mirroring resources or mapping requests: implementing WS-RF for Grid workflows\n", "abstract": " The Web services resource framework (WS-RF) and the Web services notification (WS-N) specifications are a crucial component of grid infrastructures. They provide a standardized interface to stateful services so that they can be managed remotely. There are already several implementations of these specifications and initial performance studies have compared them in terms of the overhead observed by a single client. In this paper, we address the problem of implementing the WS-RF and WS-N specifications for large scale systems. In particular, we discuss how to implement WS-RF and WS-N as the management interfaces to a grid workflow engine. In the paper we describe and compare two different architectures for mapping resources to processes. The first one mirrors the state of the process as a resource. The second one maps the client requests to access the state of a resource embedded into the grid\u00a0\u2026", "num_citations": "5\n", "authors": ["640"]}
{"title": "Enforcing web services business protocols at run-time: a process-driven approach\n", "abstract": " Business processes provide abstractions for modelling business protocols that define the correct interactions between two or more Web services (WS). It has been shown that it is possible to automatically derive role-specific processes from a global protocol definition and also statically verify the compliance of a local process with the corresponding global business process. In this paper, we show that a similar approach can be used at run-time. We propose to employ process-based tools to enforce that the messages exchanged between different WS comply with a given business protocol, both in terms of sequencing constraints and data flow characteristics. Our solution simplifies the implementation of WS because it helps to separate the concern of business protocol compliance from the actual service implementation. To do so, we show how to transparently add a protocol enforcement layer to the WS messaging\u00a0\u2026", "num_citations": "5\n", "authors": ["640"]}
{"title": "CS Adaptability Container\n", "abstract": " This deliverable is a description and evaluation of parts of the ADAPT composition engine (deliverable D14, CS Middleware) which is currently at the prototype stage (deliverable due on month 29). The deliverable builds upon deliverables D9 (CS Middleware Architecture, due on month 5) and D7 (Composition Language, due on month 11). The aspects of the evaluation plan that pertain to this module are covered by this deliverable in the form of performance measurements.As indicated by the reviewers on the first review of the project, we have opted for a format in the report that matches scientific papers. Part of this report has been submitted for publication in: C. Pautasso, G. Alonso, Visual Adaptation of Mismatching Web Services, Second International Workshop on Semantic Web and Databases.", "num_citations": "5\n", "authors": ["640"]}
{"title": "From text to visual BPMN process models: Design and evaluation\n", "abstract": " Most existing Business Process Model and Notation (BPMN) editing tools are graphical, and as such based on explicit modeling, requiring good knowledge of the notation and its semantics, as well as the ability to analyze and abstract business requirements and capture them by correctly using the notation. As a consequence, their use can be cumbersome for live modeling during interviews and design workshops, where participants should not only provide input but also give feedback on how it has been represented in a model. To overcome this, in this paper we present the design and evaluation of BPMN Sketch Miner, a tool which combines notes taking in constrained natural language with process mining to automatically produce BPMN diagrams in real-time as interview participants describe them with stories. In this work we discuss the design decisions regarding the trade-off between using mining vs\u00a0\u2026", "num_citations": "4\n", "authors": ["640"]}
{"title": "Empirical Research in Executable Process Models\n", "abstract": " Perhaps one of the reasons BPM research concentrates on analytical modeling of business processes is that BPMN is standardized fully in this regard and modeling tools support the notation very well. In this book, we focus instead on empirical research in executable process models. This requires a complete and precise specification of process models, which graduate from \u201cPowerPoint slide\u201d into an executable artifact running inside a workflow engine in the Cloud. In this chapter, we introduce fundamental background concepts defining executable business processes, discussing empirical research methods suitable for business process management, and presenting different architectural options for process execution and close with a brief history leading toward executable BPMN.", "num_citations": "4\n", "authors": ["640"]}
{"title": "The liquid web worker API for horizontal offloading of stateless computations\n", "abstract": " As most users access the Web from multiple devices with different characteristics, ranging from powerful desktops or laptops to tablets, mobile phones or watches and cars, liquidWeb applications seamlessly flow across multiple Web-enabled devices and adapt their distributed user interface to the set of devices simultaneously accessing the application. In this paper we focus on the business logic layer of rich Web applications and explore the opportunity to reduce the execution time of CPU-intensive tasks or limit their energy consumption by offloading them among nearby devices running the same liquid Web application. We extend the standard HTML5 WebWorker API with the concept of liquid WebWorkers, so that developers can transparently offload parallel execution of stateless tasks by managing the necessary device selection and direct peer-to-peer data transfer. By introducing the liquid WebWorkerAPI into our Liquid. js framework, we present how to create a pool of devices sharing their CPU processing capabilities according to different policies.", "num_citations": "4\n", "authors": ["640"]}
{"title": "Asqium: A JavaScript plugin framework for extensible client and server-side components\n", "abstract": " JavaScript has become a language for programming complex Web applications, whose logic is deployed across both Web browsers and Web servers. Current software packaging mechanisms for JavaScript enable a basic level of modularity and reuse. However, they have not yet reached full maturity in terms of enabling system extensions with features contributed as third-party plugins, while encapsulating them adequately. In this paper we present a novel plugin system for JavaScript applications, which integrate Node.js modules with HTML5 Web Components. It provides abstractions for: real time and loosely coupled communication between front-end and back-end components, persistent state storage, and isomorphic usage of JavaScript. Plugins can use hooks and events to contribute functionality and embed it into the main application flow, while respecting the common asynchronous non-blocking\u00a0\u2026", "num_citations": "4\n", "authors": ["640"]}
{"title": "High\u2010performance execution of service compositions: a multicore\u2010aware engine design\n", "abstract": " Although modern computer hardware offers an increasing number of processing elements organized in nonuniform memory access (NUMA) architectures, prevailing middleware engines for executing business processes, workflows, and Web service compositions have not been optimized for properly exploiting the abundant processing resources of such machines. Amongst others, factors limiting performance are inefficient thread scheduling by the operating system, which can result in suboptimal use of system memory and CPU caches, and sequential code sections that cannot take advantage of multiple available cores.In this article, we study the performance of the JOpera process execution engine on recent multicore machines. We first evaluate its performance without any dedicated optimization for multicore hardware, showing that additional cores do not significantly improve performance, although the engine\u00a0\u2026", "num_citations": "4\n", "authors": ["640"]}
{"title": "Exploiting multicores to optimize business process execution\n", "abstract": " While modern CPUs offer an increasing number of cores with shared caches, prevailing execution engines for business processes, workflows, or Web service compositions have not been optimized for properly exploiting the abundant processing resources of such CPUs. One factor limiting performance is the inefficient thread scheduling by the operating system, which can result in suboptimal use of shared caches. In this paper we study performance of the JOpera business process execution engine on a recent multicore machine. By analyzing the engine's architecture and by binding threads that are likely to access shared data to cores with a common cache, we achieve speedups up to 13% for a variety of workloads, without modifying the engine's architecture and implementation, apart from binding threads to CPUs. As the engine is implemented in Java, we provide a new Java library to manage thread bindings\u00a0\u2026", "num_citations": "4\n", "authors": ["640"]}
{"title": "Some rest design patterns (and anti-patterns)\n", "abstract": " \u25aa The REST architectural style is simple to define, but understanding how to apply it to design concrete REST services in support of SOA can be more complex. The goal of this talk is to present the main design elements of a RESTful architecture and introduce a pattern-based design methodology for REST services.\u25aa A selection of REST-inspired SOA design patterns taken from the upcoming\" SOA with REST\" book will be explained and further discussed to share useful solutions to recurring design problems and to also the foundational building blocks that comprise the REST framework from a patterns perspective.\u25aa We will conclude by introducing some common SOA anti-patterns particularly relevant to the design of REST services in order to point out that not all current Web services that claim to be RESTful are indeed truly so.", "num_citations": "4\n", "authors": ["640"]}
{"title": "Emerging Web Services Technology\n", "abstract": " The Workshop on Emerging Web Services Technology (WEWST06) took place in conjunction with the 4th European Conference on Web Services (ECOWS\u201906) on 4th December 2006, in Zurich, Switzerland. Acting as the natural extension to the main ECOWS conference, the main goal of the WEWST workshop is serving as a forum for providing early exposure andmuchneededfeedbacktogrowandestablishoriginalandemergingideaswithin the Web Services community. The wide variety of tools, novel techniques and emergingtechnologicalsolutionspresentedinWEWSTshareone commonfeature: they advance the current Web services research in new directions by introducing new and sometimes controversial ideas into the? eld. WEWST focuses on research contributions advancing the state of the art in Web services technologies in the following areas: Model Driven Engineering for SOA, Mobility and Services, Streaming Services and Event Driven Architectures, Dynamic Web Service Discovery and Composition, Lightweight Orchestration-gines, SLA Creation and Service Delivery, Semantic Web, Managing Change and Service Evolution, Business Driven Development, Service-Oriented Grid Comp-ing Middleware, Business Process Management for Web Services, Software and Service Engineering. WEWST covers the whole spectrum which makes it a very important part of ECOWS.", "num_citations": "4\n", "authors": ["640"]}
{"title": "Multi-device adaptation with liquid media queries\n", "abstract": " The design of responsive Web applications is traditionally based on the assumption that they run on a single client at a time. Thanks to CSS3 media queries, developers can declaratively specify how the Web application UI adapts to the capabilities of specific devices. As users own more and more devices and they attempt to use them to run Web applications in parallel, we propose to extend CSS media queries so that they can be used to adapt the UI of liquid Web applications while they are dynamically deployed across multiple devices. In this paper we present our extension of CSS media queries with liquid-related types and features, allowing to detect the number of devices connected, the number of users running the application, or the role played by each device. The liquid media query types and features defined in this paper are designed and suitable for liquid component-based Web architectures\u00a0\u2026", "num_citations": "3\n", "authors": ["640"]}
{"title": "A template for categorizing business processes in empirical research\n", "abstract": " Empirical research is becoming increasingly important for understanding the practical uses of and problems with business processes technology in the field. However, no standardization on how to report observations and findings exists. This sometimes leads to research outcomes which report partial or incomplete data and makes published results of replicated studies on different data sets hard to compare. In order to help the research community improve reporting on business process models and collections and their characteristics, this chapter defines a modular template with the aim of reports\u2019 standardization, which could also facilitate the creation of shared business process repositories to foster further empirical research in the future. The template has been positively evaluated by representatives from both BPM research and industry. The survey feedback has been incorporated in the template. We\u00a0\u2026", "num_citations": "3\n", "authors": ["640"]}
{"title": "Rapid Mashup Development Tools: First International Rapid Mashup Challenge, RMC 2015, Rotterdam, The Netherlands, June 23, 2015, Revised Selected Papers\n", "abstract": " This book constitutes the refereed proceedings of the First International Rapid Mashup Challenge, RMC 2015, held on June 23, 2015, in Rotterdam, The Netherlands, in conjunction with the 15th International Conference on Web Engineering, ICWE 2015. The 2015 edition of the challenge is the first installment of a series of challenges that aim to engage researchers and practitioners in a competition for the best mashup approach. The 6 thoroughly reviewed contributions contained in this volume are extended versions of the initial proposals that served the authors to express their interest to participate in the challenge. The initial proposals have been used by the challenge organizers to select participants based on the interestingness and maturity of the proposals.", "num_citations": "3\n", "authors": ["640"]}
{"title": "Service-Oriented Computing: 11th International Conference, ICSOC 2013, Berlin, Germany, December 2-5, 2013. Proceedings\n", "abstract": " This book constitutes the refereed proceedings of the 11th International Conference on Service-Oriented Computing, ICSOC 2012, held in Berlin, Germany, in December 2013. The 29 full papers and 27 short papers presented were carefully reviewed and selected from 205 submissions. The papers are organized in topical sections on service engineering, service operations and management; services in the cloud; and service applications and implementations.", "num_citations": "3\n", "authors": ["640"]}
{"title": "The atomic web browser\n", "abstract": " The Atomic Web Browser achieves atomicity for distributed transactions across multiple RESTful APIs. Assuming that the participant APIs feature support for the Try-Confirm/Cancel pattern, the user may navigate with the Atomic Web Browser among multiple Web sites to perform local resource state transitions (eg, reservations or bookings). Once the user indicates that the navigation has successfully completed, the Atomic Web browser takes care of confirming the local transitions to achieve the atomicity of the global transaction.", "num_citations": "3\n", "authors": ["640"]}
{"title": "The design space of modern html5/javascript web application\n", "abstract": " This presentation gives a tour of the architectural design decision space for modern Web applications. Assuming that architects have decided to pick emerging HTML5/JavaScript technologies to build a medium-size, highly interactive and possibly collaborative application, this tour will explore the important consequences and discusses the implications of such decision. Thanks to our systematic perspective over the design decision space of modern Web applications, attendees will learn to distinguish what is possible from what is challenging to achieve.Category: 1. Front-End Architectures\u2014Submission Type: Conference presentation", "num_citations": "3\n", "authors": ["640"]}
{"title": "Programmatic Interfaces for Web Applications\n", "abstract": " Programmatic interfaces for Web applications have created new opportunities for vendors to build developer ecosystems. Such interfaces have also become a core feature that developers expect from any Web application. In this special issue, the guest editors collect a number of contributions that address some of the challenges of designing modern Web service APIs, take a close look at the underlying technologies, and provide examples of the real-world impact of programmatic Web interfaces.", "num_citations": "3\n", "authors": ["640"]}
{"title": "Towards scalable service composition on multicores\n", "abstract": " The advent of modern multicore machines, comprising several chip multi-processors each offering multiple cores and often featuring a large shared cache, offers the opportunity to redesign the architecture of service composition engines in order to take full advantage of the underlying hardware resources. In this paper we introduce an innovative service composition engine architecture, which takes into account specific features of multicore machines while not being constrained to run on any particular processor architecture. Our preliminary performance evaluation results show that the system can scale to run thousands of concurrent business process instances per second.", "num_citations": "3\n", "authors": ["640"]}
{"title": "Compiling business process models into executable code\n", "abstract": " Model-driven architecture (MDA), design and transformation techniques can be applied with success to the domain of business process modeling (BPM) with the goal of making the vision of business-driven development a reality. This chapter is centered on the idea of compiling business process models for executing them, and how this idea has been driving the design of the JOpera for Eclipse workflow management tool. JOpera presents users with a simple, graph-based process modeling language with a visual representation of both control and data-flow aspects. As an intermediate representation, the graphs are converted into Event-Condition-Action rules, which are further compiled into Java bytecode for efficient execution. These transformations of process models are performed by the JOpera process compiler in a completely transparent way, where the generated executable artefacts are kept hidden from\u00a0\u2026", "num_citations": "3\n", "authors": ["640"]}
{"title": "A self-configuring service composition engine\n", "abstract": " A Self-Configuring Service Composition Engine English Fran\u00e7ais login Menu Search Personalize Your alerts Your baskets Your searches Browse Collections Help English Fran\u00e7ais login Infoscience Record thumbnail image A Self-Configuring Service Composition Engine Heinis, Thomas; Pautasso, Cesare; Alonso, Gustavo 2006 Formats Format BibTeX View Download MARC View Download MARCXML View Download DublinCore View Download EndNote View Download NLM View Download RefWorks View Download RIS View Download Details Title A Self-Configuring Service Composition Engine Author(s) Heinis, Thomas ; Pautasso, Cesare ; Alonso, Gustavo Published in Autonomic Computing: Concepts, Infrastructure, and Applications Editor(s) Parashar, Manish ; Hariri, Salim Date 2006 Publisher CRC Press ISBN 0-8493-9367-1 Keywords Autonomic Computing Additional link URL Laboratories DIAS \u2026", "num_citations": "3\n", "authors": ["640"]}
{"title": "Adapt: towards autonomic web services\n", "abstract": " Organizations are increasingly using the Web not only to sell products and deliver information, but also for providing their services to businesses and individual customers. Typically, the provision of such services by organizations requires the construction of applications that integrate existing enterprise information systems to offer new business functions. Organizations need to ensure that these services are available, scalable and also autonomic to guarantee that user interactions are promptly processed even under highly volatile conditions. In most cases, organizations use application servers with a multi-tier architecture for the delivery of their services. In the following, we will refer to services not relying on other web services as Basic Services (BSs). The presence of a wide variety of BSs over the Internet has created an exciting new business opportunity of providing value added, inter-organizational services by composing multiple BSs into new Composite Services (CSs). The Adapt project aims to provide autonomic support for both basic and composite web services. In the following sections we describe autonomic support for both kinds of web services.", "num_citations": "3\n", "authors": ["640"]}
{"title": "WebAssembly modules as lightweight containers for liquid IoT applications\n", "abstract": " Going all the way to IoT with web technologies opens up the door to isomorphic IoT system architectures, which deliver flexible deployment and live migration of code between any device in the overall system. In this vision paper, we propose using WebAssembly to implement lightweight containers and deliver the required portability. Our long-term vision is to use the technology to support developers of liquid IoT applications offering seamless, hassle-free use of multiple devices.", "num_citations": "2\n", "authors": ["640"]}
{"title": "Multi-Device Complementary View Adaptation with Liquid Media Queries\n", "abstract": " The design of responsive Web applications is traditionally based on the assumption that they run on a single client at a time. Thanks to CSS3 media queries, developers can declaratively specify how the Web application UI adapts to the capabilities of specific devices.", "num_citations": "2\n", "authors": ["640"]}
{"title": "Empirical Studies on the Development of Executable Business Processes\n", "abstract": " Thank you for your interest in the topic of empirical research in the domain of executable business processes! We want to take you on an interesting tour on how technologies in this domain can be applied in practice and what obstacles and benefits projects actually encounter and how they can overcome the former and achieve the latter.Executable business processes are one of the success stories of model-driven engineering (MDE) at the intersection of software engineering (SE) and business process management (BPM). On the one hand, an executable model is formally and precisely defined so that a computer is able to interpret it and execute it. On the other hand, models are visualized so that humans can describe, document, and optimize business processes at a higher level of abstraction than with traditional textual programming languages. While these important research areas have been long separated\u00a0\u2026", "num_citations": "2\n", "authors": ["640"]}
{"title": "Mashup development with web liquid streams\n", "abstract": " Web services such as Twitter and Facebook provide direct access to their streaming APIs. The data generated by all of their users is forwarded in quasi-real-time to any external client requesting it: this continuous feed opens up new ways to create mashups that differ from existing data aggregation approaches, which focus on presenting with multiple widgets an integrated view of the data that is pulled from multiple sources. Streaming data flows directly into the mashup without the need to fetch it in advance, making it possible to exchange data between mashup components through streaming channels. In this challenge submission we show how streaming APIs can be integrated using a stream processing framework. Mashup components can be seen as stream operators, while the mashup can be defined by building a streaming topology. The mashup is built with Web Liquid Streams, a dynamic streaming\u00a0\u2026", "num_citations": "2\n", "authors": ["640"]}
{"title": "BPELanon\u201d: Protect business processes on the cloud\n", "abstract": " The advent of Cloud computing supports the offering of many Business Process Management applications on a distributed, per-use basis environment through its infrastructure. Due to the fact that privacy is still an open issue in the Cloud, many companies are reluctant to move their Business Processes on a public Cloud. Since the Cloud environment can be beneficiary for the Business Processes, the investigation of privacy issues needs to be further examined. In order to enforce the Business Process sharing on the Cloud we propose a methodology (\u201cBPELanon\u201d) for the anonymization of Business Processes expressed in the Web Service Business Process Execution Language (BPEL). The method transforms a process to preserve its original structure and run-time behavior, while completely anonymizing its business semantics. In this work we set the theoretical framework of the method and define a five management layers architecture to support its realization. We developed a tool that implements the \u201cBPELanon\u201d method, validate its functionality and evaluate its performance against a collection of real-world process models that were conducted in the scope of research projects.", "num_citations": "2\n", "authors": ["640"]}
{"title": "BPMeter: Web Service and Application for Static Analysis of BPMN 2.0 Collections.\n", "abstract": " The number of business process models is constantly increasing as companies realize the competitive advantage of managing their processes. Measuring their size and structural properties can give useful insights. With the BPMeter tool, process owners can quickly compare their process with company\u2019s process portfolio, researchers can statically analyze a process to see which modeling language features have been used in practice, while modelers can obtain an aggregated view over their processes. In this demonstration we show how to use BPMeter, which provides a simple Web application to visualize the results of applying over 100 different size and structure metrics to BPMN 2.0 process models. The visualization features measurements, statistics and the possibility to compare the measurements with the ones obtained from the entire portfolio. Moreover we show how to invoke its RESTful Web API so that the BPMeter analyzer can be easily integrated with existing process management tools.", "num_citations": "2\n", "authors": ["640"]}
{"title": "Research challenges on service technology foundations\n", "abstract": " This work gives an overview of the future research challenges on enabling technologies for service-based applications that have been identified in the network of excellence S-Cube. Service-based applications comprise three layers: business processes, service compositions and services and service infrastructures. The goal of this work is to present a roadmap for future research in technologies for software and system services.", "num_citations": "2\n", "authors": ["640"]}
{"title": "Collaborative design with the software architecture warehouse\n", "abstract": " \u2022 Designing a software architecture requires access to domain knowledge and experience, combined with the ability to make good decisions based on partial information. We present the Software Architecture Warehouse (SAW, http://saw. inf. unisi. ch/), a Web-\u2010based tool that supports distributed architecture design teams by managing their shared knowledge and enabling consensus-\u2010based decision making.\u2022 After introducing the extensible knowledge meta-\u2010model of SAW, we will present various scenarios of in-\u2010meeting design-\u2010dialogue mapping and discussion support, along with visual aids. We will demonstrate how SAW can be used to induce synergy effects between knowledge reuse and remote collaboration. We claim that giving immediate feedback to the whole design team about the implications and constraints of a design decision results in an improvement in the quality of decisions made.", "num_citations": "2\n", "authors": ["640"]}
{"title": "RESTful Service Design\n", "abstract": " REST is simple to define, but understanding how to apply it to design RESTful services is more difficult. The goal of this part of the tutorial is to present the main design elements of a RESTful architecture and introduce a design methodology for RESTful services. A selection of useful patterns and anti-patterns will be discussed with some examples that will be further developed in the practical part.", "num_citations": "2\n", "authors": ["640"]}
{"title": "Emerging Web Services Technology, Volume II\n", "abstract": " This book contains papers from the 2007 European Conference on Web Services and the Workshop on Emerging Web Services Technology. Coverage includes grid-based computing, mobility issues for web services, dynamic web services, and model driven engineering.", "num_citations": "2\n", "authors": ["640"]}
{"title": "Initializing a National Grid Infrastructure Lessons Learned from the Swiss National Grid Association Seed Project\n", "abstract": " In addition to multi-national Grid infrastructures, several countries operate their own national Grid infrastructures to support science and industry within national borders. These infrastructures have the benefit of better satisfying the needs of local, regional and national user communities. Although Switzerland has strong research groups in several fields of distributed computing, only recently a national Grid effort was kick-started to integrate a truly heterogeneous set of resource providers, middleware pools, and users. In the following article we discuss our efforts to start Grid activities at a national scale to combine several scientific communities and geographical domains. We make a strong case for the need of standards that have to be built on top of existing software systems in order to provide support for a heterogeneous Grid infrastructure.", "num_citations": "2\n", "authors": ["640"]}
{"title": "RESTful Web Service Composition with JOpera\n", "abstract": " RESTful Web Service Composition with JOpera Page 1 1 28 November 2008 \u00a92008 Cesare Pautasso | www.pautasso.info RESTful Web Service Composition with JOpera Cesare Pautasso Faculty of Informatics University of Lugano (USI), Switzerland http://www.pautasso.info Page 2 \u00a92008 Cesare Pautasso 2 \u2022 Faculty of Informatics (Opened 2004) \u2022 15 Professors \u2022 63 PhDs & Post-docs \u2022 Excellence in Research \u2022 Innovative Teaching University of Lugano, Switzerland Page 3 \u00a92008 Cesare Pautasso 3 My Research Interests Web 2.0 Mashups Business Process Management Autonomic Computing Scientific Workflow Management Service Oriented Architectures Software Composition Cesare Pautasso Page 4 4 28 November 2008 \u00a92008 Cesare Pautasso | www.pautasso.info RESTful Web Service Composition with JOpera Cesare Pautasso Faculty of Informatics University of Lugano (USI), Switzerland http://www.\u2026", "num_citations": "2\n", "authors": ["640"]}
{"title": "Isomorphic Internet of Things architectures with web technologies\n", "abstract": " Internet of Things development needs isomorphic software architectures, in which every kind of device can be programmed with a consistent set of implementation technologies, allowing applications and their components to be statically deployed or dynamically migrated without having to change their shape.", "num_citations": "1\n", "authors": ["640"]}
{"title": "Blockchain and Smart Contract Engineering\n", "abstract": " Blockchains help to build trust among a decentralized network of unknown and untrusted peers who need to agree on a common protocol and trust the correctness and compatibility of the corresponding software implementations. The software engineering discipline cannot ignore this trend, as it fundamentally affects the way software is designed, developed, deployed, and delivered.1 As with the emergence of the Internet, software smart contracts for solving new classes of real-world problems, as opposed to introducing blockchains everywhere, where they may be unnecessary, or provide an inefficient and environmentally unsound solution.4", "num_citations": "1\n", "authors": ["640"]}
{"title": "On the web platform cornucopia\n", "abstract": " The evolution of the Web browser has been organic, with new features introduced on a pragmatic basis rather than following a clear rational design. This evolution has resulted in a cornucopia of overlapping features and redundant choices for developing Web applications. These choices include multiple architecture and rendering models, different communication primitives and protocols, and a variety of local storage mechanisms. In this position paper we examine the underlying reasons for this historic evolution. We argue that without a sound engineering approach and some fundamental rethinking there will be a growing risk that the Web may no longer be a viable, open software platform in the long run.", "num_citations": "1\n", "authors": ["640"]}
{"title": "SAW-Q: a dynamic composition approach of REST services based on queue model\n", "abstract": " Service composition is one of the principles of service-oriented architecture; it enables reuse and allows developers to combine existing services in order to create new services that in turn can be part of another composition. Dynamic composition requires that service components are chosen from a set of services with equal or similar functionality at runtime and possibly automatically. The adoption of the REST services in the industry has led to a growing number of services of this type, many with similar functionality. The existing dynamic composition techniques are method-oriented whereas REST is resource-oriented and consider only traditional (WSDL/SOAP) services. We propose SAW-Q, an extension of simple additive weighting (SAW), as a novel dynamic composition technique that follows the principles of the REST style. Additionally, SAW-Q models quality attributes as a function of the actual service demand\u00a0\u2026", "num_citations": "1\n", "authors": ["640"]}
{"title": "Liquid Web Applications: ICWE2017 Tutorial\n", "abstract": " As the users possess a growing number of personal computers, smart phones, tablets, and other connected computing devices, the architecture of Web applications needs to be redesigned to enable truly seamless cross-device and multi-device use. In this tutorial, we address the Liquid Software concept in the context of Web applications. Liquid Web applications not only can take full advantage of the computing, storage and communication resources available on all devices owned by the end user, but also can seamlessly and dynamically migrate from one device to another, continuously following the user\u2019s attention and context. We survey how and to which extent Web technologies can support the novel requirements of Liquid Software, showing technology demonstrations that will be discussed hands-on, at the level of source code.", "num_citations": "1\n", "authors": ["640"]}
{"title": "ICWE 2015 Rapid Mashup Challenge: Introduction\n", "abstract": " The ICWE 2015 Rapid Mashup Challenge is the first installment of a series of challenges that aim to engage researchers and practitioners in a competition for the best mashup approach. This paper introduces the reader to the general context of the Challenge, its objectives and motivation. It summarizes its structure into phases and the requirements contributions were asked to satisfy, so as to be eligible for participation. A brief summary of the contributions that were selected for presentation provides an overview of the content of the remainder of this volume.", "num_citations": "1\n", "authors": ["640"]}
{"title": "Challenge Outcome and Conclusion\n", "abstract": " In the following we report on the outcome of the ICWE 2015 Rapid Mashup Challenge (RMC), describe the voting system used, and draw some conclusions regarding the presented works.", "num_citations": "1\n", "authors": ["640"]}
{"title": "Improving execution unit occupancy on SMT-based processors through hardware-aware thread scheduling\n", "abstract": " Modern processor architectures are increasingly complex and heterogeneous, often requiring software solutions tailored to the specific hardware characteristics of each processor model. In this article, we address this problem by targeting two processors featuring Simultaneous MultiThreading (SMT) to improve the occupancy of their internal execution units through a sustained stream of instructions coming from more than one thread. We target the AMD Bulldozer and IBM POWER7\u00a0processors as case studies for specific hardware-oriented performance optimizations that increase the variety of instructions sent to each core to maximize the occupancy of all its execution units. WorkOver, presented in this article, improves thread scheduling by increasing the performance of floating point-intensive workloads on Linux-based operating systems. WorkOver\u00a0is a user-space monitoring tool that automatically identifies FPU\u00a0\u2026", "num_citations": "1\n", "authors": ["640"]}
{"title": "Third International Workshop on RESTful Design (WS-REST 2012)\n", "abstract": " Over the past few years, the discussion between the two major architectural styles for designing and implementing Web services, the RPC-oriented approach and the resource-oriented approach, has been mainly held outside of traditional research communities. Mailing lists, forums and developer communities have seen long and fascinating debates around the assumptions, strengths, and weaknesses of these two approaches. The Representational State Transfer (REST) is an architectural style and as such can be applied in different ways, extended by additional constraints, or specialized with specific interaction patterns. The Third International Workshop on RESTful Design (WS-REST 2012) aims to involve researchers in the debate by providing a premier forum for discussing research ideas, novel applications and results centered around the resource-oriented style of Web services. The WWW conference\u00a0\u2026", "num_citations": "1\n", "authors": ["640"]}
{"title": "Second international workshop on RESTful design (WS-REST 2011)\n", "abstract": " Over the past few years, the discussion between the two major architectural styles for designing and implementing Web services, the RPC-oriented approach and the resourceoriented approach, has been mainly held outside of traditional research communities. Mailing lists, forums and developer communities have seen long and fascinating debates around the assumptions, strengths, and weaknesses of these two approaches. The Second International Workshop on RESTful Design (WS-REST 2011) has the goal of getting more researchers involved in the debate by providing a forum where discussions around the resource-oriented style of Web services design take place. Representational State Transfer (REST) is an architectural style and as such can be applied in different ways, can be extended by additional constraints, or can be specialized with more specific interaction patterns. WS-REST is the premier forum\u00a0\u2026", "num_citations": "1\n", "authors": ["640"]}
{"title": "Service Oriented Architectures for the REST of Us\n", "abstract": " \u25aa Recent technology trends in Web services indicate that a solution eliminating the perceived complexity of the WS-* standard technology stack may be in sight: advocates of representational state transfer (REST) have come to believe that their ideas explaining why the Internet works j li bl li i li i are just as applicable to solving enterprise application integration problems and to radically simplifying the\" plumbing\" of service-oriented architectures. In this p g tutorial, we give an update on how the REST architectural style has been recently rediscovered to become the foundation for so-called\" RESTful Web services\" After foundation for so-called RESTful Web services. After introducing REST as a set of design constraints, we will show how these can be used as a guide to the design of RESTf l W bi API hil till d li ig tf RESTful Web service APIs while still delivering most of the qualities required in enterprise-grade serviceoriented architectures.", "num_citations": "1\n", "authors": ["640"]}
{"title": "RESTful Service Composition with JOpera\n", "abstract": " Next generation Web services technologies challenge the assumptions made by current standards for process-based service composition. For example, most existing RESTful Web service APIs cannot natively be composed using the WS-BPEL standard. In this talk we apply the notion of composition to RESTful services and discuss the conceptual relationship between business processes and stateful resources. Our goal is to enable lightweight access to service compositions published with a RESTful API. We show that the uniform interface and the hyper-linking capabilities of RESTful services provide an excellent abstraction for publishing proceses as a resource and exposing in a controlled way the execution state of a service composition.", "num_citations": "1\n", "authors": ["640"]}
{"title": "First International Workshop on RESTful Design (WS-REST 2010)\n", "abstract": " Over the past few years, the discussion between the two major architectural styles for designing and implementing Web services, the RPC-oriented approach and the resource-oriented approach, has been mainly held outside of traditional research communities. Mailing lists, forums and developer communities have seen long and fascinating debates around the assumptions, strengths, and weaknesses of these two approaches. The First International Workshop on RESTful Design (WS-REST 2010) has the goal of getting more researchers involved in the debate by providing a forum where discussions around the resource-oriented style of Web services design take place. Representational State Transfer (REST) is an architectural style and as such can be applied in different ways, can be extended by additional constraints, or can be specialized with more specific interaction patterns. WS-REST is the premier forum\u00a0\u2026", "num_citations": "1\n", "authors": ["640"]}
{"title": "Web Service Technology\n", "abstract": " This chapter contains sections titled:   Introduction   Web Services Architecture   Invoking Web Services   Describing and Discovering Web Services   Composing Web Services   Providing Advanced Quality of Service Guarantees   Stateful Web Services   Conclusion   Endnotes   References and Further Reading", "num_citations": "1\n", "authors": ["640"]}
{"title": "From SOA to REST Tutorial: Introduction\n", "abstract": " This introduction presents the schedule, the tutorial presenters, and some background for the tutorial. Specifically, we briefly mention all the *OA terms that have been invented in recent years, such as SOA (Services), ROA (Resources), WOA (Web), SynOA (Syndication), and EOA (Event), and briefly set them into context. Our main goal is to explain our notion of SOA for the purpose of this tutorial, and what we perceive as the core tasks when moving from SOA to REST.", "num_citations": "1\n", "authors": ["640"]}
{"title": "Service oriented architectures and Web services\n", "abstract": " Service Oriented Architectures and Web Services Page 1 Service Oriented Architectures and Web Services Prof. Cesare Pautasso Faculty of Informatics University of Lugano c.pautasso@ieee.org http://www.pautasso.info \u00a92009 - Cesare Pautasso 2 Prof. Cesare Pautasso \u25a1 Ph.D. at ETH Z\u00fcrich (2004) \u25a1 Post-Doc at ETH Z\u00fcrich in the Systems (IKS) Group \u25a1 Researcher at IBM Zurich Research Lab (2007) \u25a1 Assistant Professor at the new Faculty of Informatics, University of Lugano (USI), Switzerland (since September 2007) \u25a1 Research Interests: \u25aa Software Architecture and Software Composition \u25aa Business Process Management \u25aa Service Oriented Architectures and Web Services \u25aa Web 2.0 Mashups and RESTful Web Services \u25aa Autonomic Computing \u25aa Grid Computing (Scientific Workflow Management) \u25a1 More Information: http://www.pautasso.info/ \u25a1 Follow me on: http://twitter.com/pautasso/ Page 2 \u00a92009 - \u2026", "num_citations": "1\n", "authors": ["640"]}
{"title": "SOA with REST\n", "abstract": " SOA with REST Page 1 31.3.2009 Web Services and Service Oriented Architectures \u00a92009 Cesare Pautasso 1 SOA with REST Cesare Pautasso Faculty of Informatics University of Lugano http://www.pautasso.info c.pautasso@ieee.org Page 2 31.3.2009 Web Services and Service Oriented Architectures \u00a92009 Cesare Pautasso 2 Web Sites (1992) HTTP HTML Web Browser Web Server (HTTP) SOAP Server Client XML WSDL WS-* Web Services (2000) Page 3 31.3.2009 Web Services and Service Oriented Architectures \u00a92009 Cesare Pautasso 3 RESTful Web Services (2007) Client HTTP PO-XML RSS JSON Web Server WADL (HTTP) SOAP Server Client XML WSDL WS-* Web Services (2000) Page 4 31.3.2009 Web Services and Service Oriented Architectures \u00a92009 Cesare Pautasso 4 Where do Web services come from? \u2022 Address the problem of enterprise software standardization \u2022 Enterprise Computing \u2026", "num_citations": "1\n", "authors": ["640"]}
{"title": "Software Composition: 7th International Symposium, SC 2008, Budapest, Hungary, March 29-30, 2008. Proceedings\n", "abstract": " The goal of the International Symposia on Software Composition is to advance the state of the research in component-based software development. We focus on the challenges related to component development, reuse, veri? cation and, of course, composition. Softwarecompositionisbecomingmoreandmoreimportant as innovation in software engineering shifts from the development of individual components to their reuse and recombination in novel ways. To this end, for the 2008 edition, researchers were solicited to contribute on topics related to component adaptation techniques, composition languages, calculi and type systems, as well as emerging composition techniques such as aspect-oriented programming, service-oriented architectures, and mashups. In line with previous editions of SC, contributions were sought focusing on both theory and practice, with a particular interest in e? orts relating them. This LNCS volume contains the proceedings of the 7th International S-posium on Software Composition, which was held on March 29\u201330, 2008, as a satellite event of the European Joint Conferences on Theory and Practice of Software (ETAPS), in Budapest, Hungary. We received 90 initial submissions from all over the world, out of which 70 were considered for evaluation by a Program Committee consisting of 30-ternational experts. Among these submissions, we selected 13 long papers and 6 short papers to be included in the proceedings and presented at the conf-ence. Each paper went through a thoroughrevisionprocess and was reviewedby three to? ve reviewers. This ensured the necessary quality for publishing these proceedings in\u00a0\u2026", "num_citations": "1\n", "authors": ["640"]}
{"title": "with JOpera for Eclipse\n", "abstract": " Thanks to the interoperability offered by Web services standards it is now possible to build large scale distributed software systems by composing reusable services published on the Web. In this presentation we will demonstrate how we combined Eclipse\u2019s user experience (background model checking and incremental recompilation) with a simple visual composition language to develop the JOpera for Eclipse plugins [1]. With them, it is not required to work with XML-based languages when composing many kinds of different services because their interactions can be specified by literally drawing them in a data and control flow graph. The visual representation is then directly compiled to Java code in order to be executed efficiently. A visual monitor and debugger are also included, so that it is possible to interactively watch the progress of the composition as it runs at the same level of abstraction and with the same visual syntax used to define it.Web services offer a standards-based approach to address many interoperability issues arising when composing distributed software systems out of reusable services. Thanks to the SOAP protocol and WSDL interface description language, an increasingly large number of basic services are being published on the Internet. Clearly, it becomes important to find the right composition abstractions in order to build value added services out of the aggregation of basic ones. Complementing existing approaches based on the XML syntax (eg, BPML, WSBPEL) we have designed a visual syntax for a service composition language [2]. Thus, the data exchanges between the services (data flow), their order of invocation\u00a0\u2026", "num_citations": "1\n", "authors": ["640"]}
{"title": "Advanced Information Systems Engineering: 28th International Conference, CAiSE 2016\n", "abstract": " Although Workflow Management Systems (WfMSs) are a key component in workflow technology, research work for assessing and comparing their performance is limited. This work proposes the first microbenchmark for WfMSs that can execute BPMN 2.0 workflows. To this end, we focus on studying the performance impact of well-known workflow patterns expressed in BPMN 2.0 with respect to three open source WfMSs. We executed all the experiments under a reliable environment and produced a set of meaningful metrics. This paper contributes to the area of workflow technology by defining building blocks for more complex BPMN 2.0 WfMS benchmarks. The results have shown bottlenecks on architectural design decisions, resource utilization, and limits on the load a WfMS can sustain, especially for the cases of complex and parallel structures. Experiments on a mix of workflow patterns indicated that there are no unexpected performance side effects when executing different workflow patterns concurrently, although the duration of the individual workflows that comprised the mix was increased.", "num_citations": "1\n", "authors": ["640"]}
{"title": "BioOpera: managing large-scale computations in bioinformatics\n", "abstract": " Large-scale computations are pervasive in bioinformatics due to the size of the datasets involved and the resource demands of the algorithms. These computations typically run for long periods of time and produce vast amounts of data. Currently, users are required to manage system resources, data, and the distribution of each process throughout the entire computation. Not surprisingly, this introduces a major bottleneck in the whole procedure.This paper describes the architecture of BioOpera, a process management system that controls the distribution, execution, and monitoring of large-scale computations on clusters of computers. BioOpera can be used in heterogeneous computing environments and provides capabilities for specifying complex sequences of computations and tools for monitoring their execution. It can also persistently store all intermediate and final results produced. To demonstrate the power of BioOpera, we performed an all vs. all alignment of Swiss-Prot version 38. This computation, which requires every sequence to be aligned against every other sequence, involved several billion pairwise Smith-Waterman alignments and ran for approximately one month in the background of a heavily loaded cluster of machines. Our need to intervene on behalf of BioOpera was minimal and the entire computation required significantly less time to complete than previously performed manual efforts.", "num_citations": "1\n", "authors": ["640"]}