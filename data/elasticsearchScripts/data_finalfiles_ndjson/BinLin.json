{"title": "Scheduling non-preemptive tasks with strict periods in multi-core real-time systems\n", "abstract": " Non-preemptive tasks with strict periods are usually adopted in practical multi-core real-time systems when continual sampling and processing of data are required. Systems designers need to provide a proper scheduling strategy such that the tasks\u2019 deadlines will be met even under the worst-case conditions. In this paper, we study the scheduling problem of non-preemptive tasks with strict periods in multi-core real-time systems. We first derive a necessary and sufficient condition to determine whether a new task is schedulable upon a multi-core platform without changing the allocations of the existing tasks. Then, with a game theory analogy, we design a recursive method to calculate the maximum permissible execution time for a given task, and propose a new schedulability condition used when the start time and processor assignments of the existing tasks can be modified. Finally, based on the conditions derived\u00a0\u2026", "num_citations": "46\n", "authors": ["1441"]}
{"title": "Generating High Coverage Tests for SystemC Designs Using Symbolic Execution\n", "abstract": " SystemC is a system-level modeling language increasingly adopted by the semiconductor industry. Quality assurance for SystemC designs is important, since undetected errors may propagate to final silicon implementations and become very costly to fix. The errors, if not fixed, can cause major damage and even endanger lives. However, quality assurance for SystemC designs is very challenging due to their object-oriented nature, event-driven simulation semantics, and inherent concurrency. In this research, we have developed an approach to generating high coverage tests for SystemC designs using symbolic execution. We have applied this approach to a representative set of SystemC designs. The results show that our approach is able to generate tests that provide high code coverage of the designs with modest time and memory usage. Furthermore, the experiment on a RISC CPU design with more than 2K\u00a0\u2026", "num_citations": "14\n", "authors": ["1441"]}
{"title": "Concolic Testing of SystemC Designs\n", "abstract": " SystemC is a system-level modelling language widely used in the semiconductor industry. SystemC validation is both necessary and important, since undetected bugs may propagate to final silicon products, which can be extremely expensive and dangerous. However, it is challenging to validate SystemC designs due to their heavy usage of object-oriented features, event-driven simulation semantics, and inherent concurrency. In this paper, we present CTSC, an automated, easy-to-deploy, scalable, and effective binary-level concolic testing framework for SystemC designs. We have implemented CTSC and applied it to an open source SystemC benchmark. In our extensive experiments, the CTSC-generated test cases achieved high code coverage, triggered 14 assertions, and found two severe bugs. In addition, the experiments on two designs with more than 2K lines of SystemC code show that our approach\u00a0\u2026", "num_citations": "12\n", "authors": ["1441"]}
{"title": "Allocation and Scheduling of Strictly Periodic Tasks in Multi-Core Real-Time Systems\n", "abstract": " Integrated modular design has been widely adopted as an approach to facilitating the development process of large-scale real-time systems. Although this approach can achieve enhanced design reuse and reduced time consumption, it results in a complex task allocation and scheduling problem. All tasks should be integrated into a shared platform according to a proper schedule, such that their deadlines will be met even under the worst case situations. In this paper, we study the allocation and scheduling problem of strictly periodic tasks in multi-core real-time systems. We first propose a necessary and sufficient condition to determine whether a new task is schedulable on a processor without changing the start times of the existing tasks. Then, based on the condition derived previously, we present a task assignment algorithm, which not only provides valid start times and processor allocations for all tasks, but also\u00a0\u2026", "num_citations": "12\n", "authors": ["1441"]}
{"title": "SCBench: A Benchmark Design Suite for SystemC Verification and Validation\n", "abstract": " SystemC has become a de-facto standard hardware modelling language in the semiconductor industry, enabling early exploration of design spaces and verification at a higher level of abstraction. It is both important and necessary for researchers to evaluate their new verification approaches and algorithms quantitatively. This paper presents SCBench, a comprehensive suite of benchmark designs for SystemC verification and validation. SCBench consists of 38 well-written representative behavior-level SystemC designs, which have been selected carefully from various application domains, such as CPU architecture, security, network, and artificial intelligence. The benchmark covers most core features of SystemC language. SCBench is freely available online to all researchers.", "num_citations": "8\n", "authors": ["1441"]}
{"title": "Regression Testing of Virtual Prototypes Using Symbolic Execution\n", "abstract": " Recently virtual platforms and virtual prototyping techniques have been widely applied for accelerating software development in electronics companies. It has been proved that these techniques can greatly shorten time-to-market and improve product quality. One challenge is how to test and validate a virtual prototype. In this paper, we present how to conduct regression testing of virtual prototypes in different versions using symbolic execution. Suppose we have old and new versions of a virtual prototype, we first apply symbolic execution to the new version and collect all path constraints. Then the collected path constraints are used for guiding the symbolic execution of the old version. For each path explored, we compare the device states between two versions to check if they behave the same. We have applied this approach to a widely-used virtual prototype and detected numerous differences. The experimental results show that our approach is useful and efficient.", "num_citations": "5\n", "authors": ["1441"]}
{"title": "Selective Concolic Testing for Hardware Trojan Detection in Behavioral SystemC Designs\n", "abstract": " With the growing complexities of modern SoC designs and increasingly shortened time-to-market requirements, new design paradigms such as outsourced design services have emerged. Design abstraction level has also been raised from RTL to ESL. Modern SoC designs in ESL often integrate a variety of third-party behavioral intellectual properties, as well as intensively utilizing EDA tools to improve design productivity. However, this new design trend makes modern SoCs more vulnerable to hardware Trojan attacks. Although hardware Trojan detection has been studied for more than a decade in RTL and lower levels, it has only recently gained attention in ESL designs. In this paper, we present a novel approach for generating test cases by selective concolic testing to detect hardware Trojans in ESL. We have evaluated our approach on an open source benchmark that includes various types of hardware\u00a0\u2026", "num_citations": "2\n", "authors": ["1441"]}
{"title": "A Systematic Investigation of State-of-the-Art SystemC Verification\n", "abstract": " The growing complexity of System-on-a-Chips (SoCs) and rapidly decreasing time-to-market have pushed the design abstraction to the electronic system level in order to increase design productivity. SystemC is a widely used electronic system level modeling language that enables quick prototyping and early verification in the SoC design process. The functional correctness of SystemC designs is often one of the greatest concerns in the SoC design process, since undetected design errors may propagate to low-level implementations or even final silicon products, which are costly to fix. However, SystemC verification is a challenging task due to its complex language features such as object-oriented constructs, hardware-oriented data types and concurrency. A variety of approaches have been proposed for SystemC verification in the past two decades. This work systematically investigates the state-of-the-art\u00a0\u2026", "num_citations": "1\n", "authors": ["1441"]}