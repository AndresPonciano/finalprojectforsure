{"title": "Investigating bias in the search phase of Software Engineering secondary studies.\n", "abstract": " Context. Researchers are increasingly resorting of secondary studies (eg systematic literature reviews and mapping studies) in Software Engineering. This method is strongly dependent on the source of primary studies adopted, which is a bias. We did not find guidelines or benchmarks to evaluate the sources in a systematic way. Objective. In this paper we aim to tackle the selection of electronic data sources while conducting such kind of studies evaluating the equilibrium between the volume and number of relevant papers. Method. In this sense, we proceed towards a secondary study to analyze the overlapping of three different electronic data sources. We also compared our results with other similar studies. Results. Our results show minimum overlapping and no effortless combination of electronic data sources at all. Conclusion. We conclude that researchers shall resort of completeness to work with a feasible set of papers to review. Specially in secondary studies adopting general and no standardized terms.", "num_citations": "13\n", "authors": ["1001"]}
{"title": "Investigating Feature-Oriented Software Comprehension\n", "abstract": " A number of techniques and tools to handle variability are available and they have been increasingly applied in the development of large and complex software systems. Some of them have reached high levels of popularity in industry, such as conditional compilation, whereas some are mostly known in academia, such as Feature-Oriented Programming (FOP). Researchers have addressed the existing drawbacks of both in order to improve adoption and ease their use.However, there is still a lack of support to variability implementation in some domains\u2013eg, JavaScript-based systems\u2013and also a lack of understanding of the impact of the different ways to implement variability on program comprehension and consequently on the effort they demand from developers, so they could successfully accomplish the assigned maintenance tasks.", "num_citations": "1\n", "authors": ["1001"]}
{"title": "How do Programmers Learn AOP?\n", "abstract": " Aspect-Oriented Programming (AOP) is a maturing technique that requires a good comprehension of which types of mistakes programmers, novice or experts, make during the development of applications. Unfortunately, the lack of such knowledge seems to represent one of the reasons for the cautious adoption of AOP in real software development projects. This paper reports the results of an experiment whose main goal is to observe and analyze mistakes made by students learning AOP. The experiment consists of a task that requires the aspectization of two crosscutting concerns in two object-oriented applications. Three rounds of the experiment in academic environment provided us with the data of 36 AOP applications upon which we develop our analysis. Mistakes are categorized and correlated with the developers\u2019 expertise in object-oriented programming (OOP) and their professional backgrounds. The results suggest that (i) in general, the more experience developers have the fewer mistakes they make,(ii) not always programmers working in pairs perform better than individually, and (iii) some specific kinds of mistakes are more frequently made by experienced older programmers.", "num_citations": "1\n", "authors": ["1001"]}