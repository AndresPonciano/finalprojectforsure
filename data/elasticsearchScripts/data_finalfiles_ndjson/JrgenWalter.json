{"title": "Automation in Software Performance Engineering Based on a Declarative Specification of Concerns\n", "abstract": " Software performance is of particular relevance to software system design, operation, and evolution because it has a significant impact on key business indicators. During the life-cycle of a software system, its implementation, configuration, and deployment are subject to multiple changes that may affect the end-to-end performance characteristics. Consequently, performance analysts continually need to provide answers to and act based on performance-relevant concerns. To ensure a desired level of performance, software performance engineering provides a plethora of methods, techniques, and tools for measuring, modeling, and evaluating performance properties of software systems. However, the answering of performance concerns is subject to a significant semantic gap between the level on which performance concerns are formulated and the technical level on which performance evaluations are actually conducted. Performance evaluation approaches come with different strengths and limitations concerning, for example, accuracy, time-to-result, or system overhead. For the involved stakeholders, it can be an elaborate process to reasonably select, parameterize and correctly apply performance evaluation approaches, and to filter and interpret the obtained results. An additional challenge is that available performance evaluation artifacts may change over time, which requires to switch between different measurement-based and model-based performance evaluation approaches during the system evolution. At model-based analysis, the effort involved in creating performance models can also outweigh their benefits.  To overcome the\u00a0\u2026", "num_citations": "51\n", "authors": ["1968"]}
{"title": "Asking ''What?'', Automating the ''How?'': The Vision of Declarative Performance Engineering\n", "abstract": " Over the past decades, various methods, techniques, and tools for modeling and evaluating performance properties of software systems have been proposed covering the entire software life cycle. However, the application of performance engineering approaches to solve a given user concern is still rather challenging and requires expert knowledge and experience. There are no recipes on how to select, configure, and execute suitable methods, tools, and techniques allowing to address the user concerns. In this paper, we describe our vision of Declarative Performance Engineering (DPE), which aims to decouple the description of the user concerns to be solved (performance questions and goals) from the task of selecting and applying a specific solution approach. The strict separation of\" what\" versus\" how\" enables the development of different techniques and algorithms to automatically select and apply a suitable\u00a0\u2026", "num_citations": "29\n", "authors": ["1968"]}
{"title": "Modeling of Parametric Dependencies for Performance Prediction of Component-based Software Systems at Run-time\n", "abstract": " Model-based performance analysis can be leveraged to explore performance properties of software systems. To capture the behavior of varying workload mixes, configurations, and deployments of a software system requires formal modeling of the impact of configuration parameters and user input on the system behavior. Such influences are represented as parametric dependencies in software performance models. Existing modeling approaches focus on modeling parametric dependencies at design-time. This paper identifies runtime specific parametric dependency features, which are not supported by existing work. Therefore, this paper proposes a novel modeling methodology for parametric dependencies and a corresponding graph-based resolution algorithm. This algorithm enables the solution of models containing component instance-level dependencies, variables with multiple descriptions in parallel, and\u00a0\u2026", "num_citations": "13\n", "authors": ["1968"]}
{"title": "A Reference Architecture for Online Performance Model Extraction in Virtualized Environments\n", "abstract": " Performance models can support decisions throughout the life-cycle of a software system. However, the manual construction of such performance models is a complex and time-consuming task requiring deep system knowledge. Therefore, automatic approaches for creating and updating performance models of a running system are necessary. Existing work focuses on single aspects of model extraction or proposes approaches specifically designed for a certain technology stack. In virtualized environments, we often see different applications based on diverse technology stacks sharing the same infrastructure. In order to enable online performance model extraction in such environments, we describe a new reference architecture for integrating different specialized model extraction solutions.", "num_citations": "13\n", "authors": ["1968"]}
{"title": "Model-based Autonomic and Performance-aware System Adaptation in Heterogeneous Resource Environments: A Case Study\n", "abstract": " Recent trends like cloud computing show that service providers increasingly adopt to modern self-adaptive system architectures promising higher resource efficiency and lower operating costs. In this paper, we apply a holistic model-based approach to engineering performance-aware system adaptation. More specifically, we employ the Descartes Modeling Language (DML), a domain-specific language for modeling the performance behavior and run-time adaptation processes of modern dynamic IT systems. The conducted case study evaluates the applicability and effectiveness of our approach and demonstrates that DML provides suitable modeling abstractions that can be used as a basis for self-adaptive performance and resource management in heterogeneous environments. We apply a holistic model-based approach to build a self-adaptive system that automatically maintains performance requirements and\u00a0\u2026", "num_citations": "13\n", "authors": ["1968"]}
{"title": "Online Learning of Run-Time Models for Performance and Resource Management in Data Centers\n", "abstract": " In this chapter, we explain how to extract and learn run-time models that a system can use for self-aware performance and resource management in data centers. We abstract from concrete formalisms and identify extraction aspects relevant to performance models. We categorize the learning aspects into: (i) model structure, (ii) model parametrization (estimation and calibration of model parameters), and (iii) model adaptation options (change point detection and run-time reconfiguration). The chapter identifies alternative approaches for the respective model aspects. The type and granularity of each aspect depend on the characteristic of the concrete performance models.", "num_citations": "10\n", "authors": ["1968"]}
{"title": "Tools for Declarative Performance Engineering\n", "abstract": " Performance is of particular relevance to software system design, operation, and evolution. However, the application of performance engineering approaches to solve a given user concern is challenging and requires expert knowledge. In this tutorial paper, we guide the reader step-by-step through the answering of performance concerns following the idea of declarative performance engineering. We explain tools available online, which can be used for automating huge parts of the software performance engineering process. In particular, we present a performance concern language, for which we provide automated answering and visualization referring to measurement-based and model-based analysis. We also detail how to derive performance models using automated extraction of architectural performance models and modeling of parametric dependencies.", "num_citations": "8\n", "authors": ["1968"]}
{"title": "Integrating Statistical Response Time Models in Architectural Performance Models\n", "abstract": " Performance predictions enable software architects to optimize the performance of a software system early in the development cycle. Architectural performance models and statistical response time models are commonly used to derive these performance predictions. However, both methods have significant downsides: Statistical response time models can only predict scenarios for which training data is available, making the prediction of previously unseen system configurations infeasible. In contrast, the time required to simulate an architectural performance model increases exponentially with both system size and level of modeling detail, making the analysis of large, detailed models challenging. Existing approaches use statistical response time models in architectural performance models to avoid modeling subsystems that are difficult or time-consuming to model, yet they do not consider simulation time. In this\u00a0\u2026", "num_citations": "7\n", "authors": ["1968"]}
{"title": "The Vision of Self-aware Reordering of Security Network Function Chains\n", "abstract": " Services provided online are subject to various types of attacks. Security appliances can be chained to protect a system against multiple types of network attacks. The sequence of appliances has a significant impact on the efficiency of the whole chain. While the operation of security appliance chains is currently based on a static order, traffic-aware reordering of security appliances may significantly improve efficiency and accuracy. In this paper, we present the vision of a self-aware system to automatically reorder security appliances according to incoming traffic. To achieve this, we propose to apply a model-based learning, reasoning, and acting (LRA-M) loop. To this end, we describe a corresponding system architecture and explain its building blocks.", "num_citations": "7\n", "authors": ["1968"]}
{"title": "Addressing Shortcomings of Existing DDoS Protection Software Using Software-Defined Networking\n", "abstract": " Addressing Shortcomings of Existing DDoS Protection Software Using Software-Defined Networking Page 1 http://se.informatik.uni-wuerzburg.de/ SSP 2018, Hildesheim Addressing Shortcomings of Existing DDoS Protection Software Using Software-Defined Networking Lukas Iffl\u00e4nder, Stefan Geissler, J\u00fcrgen Walter, Lukas Beierlieb, Samuel Kounev 13.11.2018 Page 2 Lukas Iffl\u00e4nder, Stefan Geissler, J\u00fcrgen Walter, Lukas Beierlieb, Samuel Kounev 2 Addressing Shortcomings of Existing DDoS Protection Software Using Software-Defined Networking Motivation \u27a2 No definite defense possible, only mitigation \u27a2 Long time security threat \u27a2 More dangerous than ever: \u2022 Increasing number of IoT devices \u2022 Generally lower security level \u27a2 Marginal performance increase of defense systems hardware Need for more effective mitigation approaches Page 3 Lukas Iffl\u00e4nder, Stefan Geissler, J\u00fcrgen Walter, Lukas Beierlieb, \u2026", "num_citations": "4\n", "authors": ["1968"]}
{"title": "PAVO: A Framework for the Visualization of Performance Analyses Results\n", "abstract": " Awareness of application performance can be derived through various quantitative analyses, model-based and measurement-based approaches. A suitable visualization supports the understanding of application performance. Usually, analysis tools include a tool specific visualization or no visualization at all. In this paper we proposed to decouple the result visualization from the analysis approach. We present the Performance VisualizatiOn (PAVO) framework which provides result visualization tailored to a given performance analysis result. To show benefits and usability of PAVO, we present our integration in Descartes Query Language (DQL).", "num_citations": "4\n", "authors": ["1968"]}
{"title": "Parallel Simulation of Queueing Petri Nets\n", "abstract": " Queueing Petri Nets (QPNs) are a powerful formalism to model the performance of software systems. Such models can be solved using analytical or simulation techniques. Analytical techniques suffer from scalability issues, whereas simulation techniques often require very long simulation runs. Existing simulation techniques for QPNs are strictly sequential and cannot exploit the parallelism provided by modern multi-core processors. In this paper, we present an approach to parallel discrete-event simulation of QPNs using a conservative synchronization algorithm. We consider the spatial decomposition of QPNs as well as the lookahead calculation for different scheduling strategies. Additionally, we propose techniques to reduce the synchronization overhead when simulating performance models describing systems with open workloads. The approach is evaluated in three case studies using performance models of real-world software systems. We observe speedups between 1.9 and 2.5 for these case studies. We also assessed the maximum speedup that can be achieved with our approach using synthetic models.", "num_citations": "4\n", "authors": ["1968"]}
{"title": "Parallel Simulation of Queueing Petri Net Models\n", "abstract": " For years the CPU clock frequency was the key to improve processor performance. Nowadays, modern processors enable performance improvements by increasing the number of cores. However, existing software needs to be adapted to be able to utilize multiple cores. Such an adaptation poses many challenges in the field of discrete-event software simulation. Decades of intensive research have been spent to find a general solution for parallel discrete event simulation. In this context, Queueing Networks (QNs) and Petri Nets (PNs) have been extensively studied. However, to the best of our knowledge, there is only one previous work that considers the concurrent simulation of Queueing Petri Nets (QPNs)[J\u00fcr97]. This work focuses on comparing different synchronization algorithms and excludes a majority of lookahead calculation and net decomposition. In this thesis, we build upon and extend this work. For this purpose, we adapted and extended findings from QNs, PNs and parallel simulation in general.We apply our findings to SimQPN, which is a sequential simulation engine for QPNs. Among other application areas, SimQPN is currently applied to online performance prediction for which a speedup due to parallelization is desirable. We present a parallel SimQPN implementation that employs application level and event level parallelism. A validation ensures the functional correctness of the new parallel implementations. The parallelization of multiple runs enables almost linear speedup. We parallelized the execution of a single run by the use of a conservative barrier-based synchronization algorithm. The speedup for a single run depends on\u00a0\u2026", "num_citations": "4\n", "authors": ["1968"]}
{"title": "Spacecraft Autonomous Reaction Capabilities, Control Approaches, and Self-aware Computing\n", "abstract": " Space exploration missions require very challenging autonomous reaction capabilities, as spacecraft have to react appropriately to the partially unknown environment in time-critical situations. Here, direct human interaction is often impossible due to significant signal propagation delays related to the huge distances. We discuss existing solution strategies for autonomy in space and exemplified by the missions CASSINI\u2013HUYGEN (landing on the Saturnian moon) and ROSETTA (the accompanying and landing on a comet), and the NetSat project (low Earth orbit formations). Based on the state of the art, we outline how self-aware computing may improve autonomy in future space missions.", "num_citations": "2\n", "authors": ["1968"]}
{"title": "Automated Transformation of Descartes Modeling Language to Palladio Component Model\n", "abstract": " Model-based performance predictions and reconfigurations enable optimizing resource efficiency while ensuring that Quality-of-Service demands are met in today\u2019s complex IT-systems. The Descartes Modeling Language (DML) and the Palladio Component Model (PCM) are two architectural performance modeling formalisms applied in this context. This paper compares DML to PCM concerning similarities, differences and semantic gaps. Based on this, we propose a mapping from DML to PCM for which we implemented a tool realizing an automated transformation.", "num_citations": "2\n", "authors": ["1968"]}
{"title": "Providing Model-Extraction-as-a-Service for Architectural Performance Models\n", "abstract": " Providing Model-Extraction-as-a- Service for Architectural Performance Models Page 1 Providing Model-Extraction-as-aService for Architectural Performance Models J\u00fcrgen Walter, Simon Eismann, Nikolai Reed, and Samuel Kounev University of W\u00fcrzburg November 9-10, 2017 SSP 2017 Karlsruhe, Germany Page 2 \u25aa Architectural performance models \u2026 \u25aa can be applied to predict performance indices (response time, CPU utilization, throughput) \u25aa capture the semantics of the modeled system Motivation 11/13/2017 J\u00fcrgen Walter 2 Vet WelcomeController HTTP Welcome Controller VetControllerHTTP VetController ClinicServiceImpl VetRepository OwnerController HTTP Owner Controller Owner Repository Web & Application Server Database PetClinicApplication CacheConfig Admin What if analysis architecture optimization \u2026 Page 3 Manual creation Huge effort per application Motivation 11/13/2017 J\u00fcrgen Walter \u2026", "num_citations": "1\n", "authors": ["1968"]}
{"title": "Automating the Build Pipeline for Docker Container\n", "abstract": " Automating the Build Pipeline for Docker Container Page 1 Automating the Build Pipeline for Docker Container Nikolai Reed, J\u00fcrgen Walter, and Samuel Kounev University of W\u00fcrzburg November 9-10, 2017 SSP 2017 Karlsruhe, Germany Page 2 \u25aa The lack of reproducibility of scientific experiments is a huge problem in research [5] \u25aa Scientific papers often lack a detailed description on how to apply the research software [5, 2] \u25aa Many software projects in public repositories cannot be built or installed within a hour [2] Reproducibility Problem 08.11.17 Nikolai Reed 2 Page 3 Solutions 08.11.17 3 \u25aa Problem: Traditional deployment of software can be cumbersome due to compilation, required adaptations, dependency resolution, and lack of developer knowledge [2, 3, 4] \u25aa Problem: Classical virtualization using virtual machines leads to heavy weight containers [1] \u25aa Novel container technologies like Docker \u25aa provide a \u2026", "num_citations": "1\n", "authors": ["1968"]}