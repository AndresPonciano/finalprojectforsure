{"title": "Consistent product line configuration across file type and product line boundaries\n", "abstract": " Creating a valid software configuration of a product line can require laborious customizations involving multiple configuration file types, such as feature models, domain-specific languages, or preprocessor defines in C header files. Using configurable off-the-shelf components causes additional complexity. Without checking of constraints across file types boundaries already at configuration time, intricate inconsistencies are likely to be introduced\u2014resulting in product defects, which are costly to discover and resolve later on.               Up to now, at best ad-hoc solutions have been applied. To tackle this problem in a general way, we have developed an approach and a corresponding plug-in infrastructure. It allows for convenient definition and checking of constraints across configuration file types and product line boundaries. Internally, all configuration files are converted to models, facilitating the use of model\u00a0\u2026", "num_citations": "35\n", "authors": ["758"]}
{"title": "Architecture challenges for internal software ecosystems: A large-scale industry case study\n", "abstract": " The idea of software ecosystems encourages organizations to open software projects for external businesses, governing the cross-organizational development by architectural and other measures. Even within a single organization, this paradigm can be of high value for large-scale decentralized software projects that involve various internal, yet self-contained organizational units. However, this intra-organizational decentralization causes architecture challenges that must be understood to reason about suitable architectural measures. We present an in-depth case study on collaboration and architecture challenges in two of these large-scale software projects at Siemens. We performed a total of 46 hours of semi-structured interviews with 17 leading software architects from all involved organizational units. Our major findings are:(1) three collaboration models on a continuum that ranges from high to low coupling,(2\u00a0\u2026", "num_citations": "27\n", "authors": ["758"]}
{"title": "Toolchain-independent variant management with the Leviathan filesystem\n", "abstract": " Preprocessor-configured software needs tool support for the developer to be able to cope with the complexity introduced by optional and alternative code blocks in the source. Current approaches, which assist the software developer by providing preprocessed views, are all bound to a special integrated development environment. This eliminates them from being used both in industry settings (where domain-specific toolchains are often mandated) and in open-source projects (where diverse sets of editors and tools are being used and freedom of tool choice is crucial for the project success).", "num_citations": "19\n", "authors": ["758"]}
{"title": "Variability modelling throughout the product line lifecycle\n", "abstract": " This paper summarizes our experience with introducing feature modelling into several product lines within Siemens. Feature models are used for solving various tasks in the product line lifecycle, starting with scoping the reusable asset base up to support for actual product configuration. Using feature models as primary artefacts for managing variability early in the lifecycle, we could improve the efficiency and transparency of scoping activities considerably and made the development efforts way easier to schedule. On the other end of the lifecycle, feature models lowered the engineering efforts in solution business in supporting product configuration and instantiation.", "num_citations": "14\n", "authors": ["758"]}
{"title": "Moving towards industrial software ecosystems: Are our software architectures fit for the future?\n", "abstract": " The development of large-scale software product-lines within large enterprises commonly involves various internal business units. Although within the same enterprise, each business unit has individual motivations and participation interests. For coordinating development, the emerging discipline of software ecosystems intents to explicitly discover and analyze the different players' interests, and manage them, often by means of a suitable software architecture. Already within a single enterprise, this discipline can be of high value. Instead of detailed managerial orders to coordinate internal interactions, an analysis of the players, their interests, and a suitable software architecture may slacken organizational structures and simplify processes. We have started to analyze the ecosystems of several Siemens internal product-lines in order to determine the different players and their interests, and to derive suitable software\u00a0\u2026", "num_citations": "12\n", "authors": ["758"]}
{"title": "Towards Separation of Concerns in Model Transformation Workflows.\n", "abstract": " Model-driven software product lines are an emerging topic in research and industry, as they promise higher development speed and easier adaptability to customer needs. The generation facilities for the products, however, still have a static nature: specification languages for the composition of model transformations sequences (model transformation workflows) up to now only support the specification of simple control flows with conditional execution. Thus, separation of concerns with respect to variable product features is impossible. To flexibly compose model transformation workflows depending on the feature selection, we express them by a dedicated and clearly scoped domainspecific modeling language (DSML). This facilitates to use aspect-oriented model weaving techniques to preprocess the workflow depending on the concrete product configuration and, thus, prevents tangling of concerns in the base workflow artifacts.", "num_citations": "11\n", "authors": ["758"]}
{"title": "Multi-variability modeling and realization for software derivation in industrial automation management\n", "abstract": " The systems of industrial automation management (IAM) are in the domain of information systems. IAM systems have software components that support manufacturing processes. The operational parts of IAM coordinate highly plug-compatible hardware devices. These functions lead to process and topology variability, which result in development and reuse challenges for software engineers in practice. This paper presents an approach aiming at improving the development and derivation of one IAM software family within Siemens. The approach integrates feature modeling with domain-specific modeling languages (DSMLs) for variability representation. Moreover, by combining code generation techniques, the configuration of variability models can be used to automate the software derivation. We report on a case study of applying the approach in practice. The outcome shows the enhancement of variability\u00a0\u2026", "num_citations": "10\n", "authors": ["758"]}
{"title": "Fixing configuration inconsistencies across file type boundaries\n", "abstract": " Creating a valid software configuration often involves multiple configuration file types, such as feature models, domain-specific languages, or C header files with preprocessor defines. Enforcing constraints across file types boundaries already at configuration is necessary to prevent inconsistencies, which otherwise are costly to discover and resolve later on. We present a pragmatic framework to specify and apply inconsistency-resolving fixes on configuration files of arbitrary types. The framework converts each configuration file to a model, checks it for consistency, applies fixes, and serializes it back again. We argue that conventionally programmed fixes and round-trip mechanisms (i.e., converters and serializers) are indispensable for practical applicability and can provide sufficient reliability when following usual development practices. We have developed round-trip mechanisms for seven different configuration file\u00a0\u2026", "num_citations": "10\n", "authors": ["758"]}
{"title": "Towards model-based derivation of systems in the industrial automation domain\n", "abstract": " Many systems in the industrial automation domain include information systems. They manage manufacturing processes and control numerous distributed hardware and software components. In current practice, the development and reuse of such systems is costly and time-consuming, due to the variability of systems' topology and processes. Up to now, product line approaches for systematic modeling and management of variability have not been well established for such complex domains.", "num_citations": "9\n", "authors": ["758"]}
{"title": "Product derivation for solution-driven product line engineering\n", "abstract": " Solution-driven product line engineering is a project business where products are created for each customer individually. Although reuse of results from former projects is widely done, configuration and integration of the results currently is often a manual, time-consuming, and error-prone task and needs considerable knowledge about implementation details.", "num_citations": "9\n", "authors": ["758"]}
{"title": "Using MARTE in code-centric real-time projects providing evolution support\n", "abstract": " The MARTE UML profile targets specification and analysis of real-time systems. It has been used both, in modeldriven development (MDD) approaches incorporating codegeneration and in approaches that manually reengineered existing systems. The first option is not possible in many cases, as certain regulations, the preferences of the developers, or substantial legacy code may impede it. The second option, in contrast, constantly involves the risk that code and models drift apart during system evolution, necessitating expensive, manual code-model resynchronisation and impeding the day-to-day analysis of the evolving system. In this paper we present an approach for modelling existing real-time systems with MARTE. It provides semiautomated support for synchronous evolution of code base and model without the need to switch to a code-generation\u2013based MDD approach. We illustrate our approach by describing several evolution scenarios and discuss the most critical issues.", "num_citations": "8\n", "authors": ["758"]}
{"title": "Automating Staged Product Derivation for Heterogeneous Multi-Product-Lines\n", "abstract": " Software constitutes a major cost factor when developing technical systems. To reduce this cost, systematic reuse of assets is necessary from early on when developing similar products\u2013an approach that has become known as software product line engineering. The automation of product derivation, that is, the automated product creation from core assets, is one of the success factors of product line engineering. It has two facets: automated support during configuration of a product, such as configuration consistency checks and automated fixes, and automation of the actual generation of the product, via generative technologies, which produce product artifacts from the configuration.", "num_citations": "7\n", "authors": ["758"]}
{"title": "Architecture-violation management for internal software ecosystems\n", "abstract": " Large-scale intra-organizational, yet decentralized software projects that involve various self-contained organizational units require architecture guidelines to coordinate development. Tool support allows for managing architecture-guideline violations to ensure software quality. However, the decentralized development across units results in significant violation-management hurdles that must be considered. In this paper, we present a set of capabilities required to manage guideline violations within two of these large-scale software projects at Siemens. Their main purpose is process support for resolving violations, aiming to reduce the architects' and developers' effort required to handle them. Moreover, we present a prototype that implements the capabilities.", "num_citations": "4\n", "authors": ["758"]}
{"title": "Seco patterns: Architectural decision support in software ecosystems\n", "abstract": " A software ecosystem challenges the architect through additional considerations, because multiple partners with different interests are involved. Therefore, the perspectives business, organization and high-level architecture need to be taken into account before deriving a detailed software design. In this paper, we present our vision and first results of SECO patterns, which capture solutions for recurring high-level problems in software ecosystems. They can be used standalone, but our vision also includes a two-step decision support system to aid the architect in two complex decisions: At first, it can propose relevant SECO patterns to support feature selection. The proposals are based on the specific characteristics of the software ecosystem of interest, which have to be provided by the architect. In a second step, the decision support system can aid the architect in applying a selected SECO pattern. For this step, we\u00a0\u2026", "num_citations": "4\n", "authors": ["758"]}
{"title": "Experiences during extraction of variability models for warehouse management systems\n", "abstract": " Warehouse management systems (WMS) play a critical role in supply chains and large production processes. WMS pose two crucial challenges for variability modeling and management: Firstly, the physical configuration of each warehouse differs significantly. Numerous different electronic devices like controllers, sensors, and motors are used to automate warehouses. Secondly, the processes running in a warehouse demand control and coordination of these various software and hardware components. These processes have different configurations according to customer requirements. This paper reports on our experiences when applying variability modeling techniques in WMS, in order to improve the degree of reuse and shorten the delivery time to customers. Feature modeling is used to extract commonalities and variability in WMS. More than 200 features were identified, and categorized into three hierarchical\u00a0\u2026", "num_citations": "4\n", "authors": ["758"]}
{"title": "An infrastructure for composing build systems of software product lines\n", "abstract": " Deriving a product from a software product line may require various build tasks, such as model transformations, source code generation, preprocessing, compiling, as well as linking and packaging the compiled sources. Usually implemented using simple scripting languages, such as Apache ant or GNU make, build systems tend to become monolithic entities, which are intricate to adapt and maintain.", "num_citations": "4\n", "authors": ["758"]}
{"title": "Multi-level product line customization\n", "abstract": " Managing and developing a set of software products jointly using a software product line approach has achieved significant productivity and quality gain in the last decade. More and more, product lines now are becoming themselves entities that are sold and bought in the software supply chain. Customers build more specialized product lines on top of them or derive themselves the concrete products. As customers have different requirements, whole product lines now may vary depending on customer needs\u2014they need to be customized. Current approaches going beyond the scope of one product line do not provide appropriate means for customization. They either are tailored to specific implementation techniques, only regard customization on few levels (eg, only source code level), or imply a lot of manual effort for performing the customization.", "num_citations": "4\n", "authors": ["758"]}
{"title": "Modeling partner networks for systematic architecture derivation in software ecosystems\n", "abstract": " Partner networks have proven successful in delivering comprehensive customer offerings. Market leaders of various domains, from industry to online services, leverage the innovative strength and resource capacities of their partners to complement and extend existing offerings or to define completely new offerings. Examples such as Amazon\u2019s sales platform or Google\u2019s Android network are just prominent representatives of a rich universe of digital cooperation strategies. Software ecosystems have emerged as a digital cooperation strategy in partner networks. They leverage a common technological base to coordinate the contributions of multiple software and service providers to a shared market. The technological base may consist of an execution platform such as Android, an open solution framework such as Eclipse, or just a set of standards such as DICOM or PROFINET. For a software ecosystem to flourish, the\u00a0\u2026", "num_citations": "3\n", "authors": ["758"]}
{"title": "Challenges in managing behavior variability of production control software\n", "abstract": " Software product line engineering helps organizations to achieve systematic software reuse by taking advantage of commonalities and predicted variability. Variability management has been considered as one important issue in product line development. In this paper, a variability analysis in production control systems reveals that the variability in such systems lays in the dynamic behavior and interaction of configured components, which we consider as behavior variability. This paper identifies the three main challenges to be solved for applying a product line approach to the domain of production control systems: (1) the selection or design of a proper variability language for describing the flexible behavior variability, (2) the need to model variability of behavior at different levels of granularity, as well as to map the elements among different levels, (3) the binding of behavioral variation points and variants into the\u00a0\u2026", "num_citations": "3\n", "authors": ["758"]}
{"title": "Architecture-violation management for internal software ecosystems: An industry case study\n", "abstract": " Large-scale intra-organizational, yet decentralized software projects that involve various self-contained organizational units require architecture guidelines to coordinate development. Tool support allows for managing architecture-guideline violations to ensure software quality. However, the decentralized development across units results in significant violation-management hurdles that must be considered.  Derived from our previous research, we have elaborated a set of capabilities required to manage guideline violations within two of these large-scale software projects at Siemens. Their main purpose is process support for resolving violations, aiming to reduce the architects' and developers' effort required to handle them. We developed a prototype that implements the capabilities and conducted a qualitative case study on their usefulness, involving 9 experts from our study systems. Our capabilities are considered as very important and reveal great potential to ease violation management for large-scale software engineering.", "num_citations": "2\n", "authors": ["758"]}
{"title": "Model-driven development versus aspect-oriented programming a case study\n", "abstract": " This case study compares two different technologies - model-driven development (MDD) and aspect-oriented programming (AOP) - both trying to avoid redundant code, but with very different approaches. A real industrial software system, the OpenSOA platform, which had already applied a model-driven XML/XSL-T approach, is used as the basis for implementation and comparison. For evaluation purpose, we have re-implemented the XSL-T implemented logic with a corresponding AOP implementation in AspectJ. Taking into account several criteria, our case study indicates that the AOP implementation reveals its strengths in avoiding redundancy, better testability, and understandability. However, more advanced tooling could significantly improve the position of MDD for the latter. MDD is in turn the more flexible approach, allowing generation of arbitrary artefacts the design demands. As the main issue of the case\u00a0\u2026", "num_citations": "2\n", "authors": ["758"]}
{"title": "Light-weight tool support for staged product derivation\n", "abstract": " Tool support that checks for configuration errors and generates product parts from configurations can significantly improve on product derivation in product line engineering. Up to now, however, derivation tools commonly disregard the staged derivation process. They do not restrict configuration consistency checks to process entities such as configuration stages, stakeholders, or build tasks. As a result, constraints that are only valid for certain process entities must either be checked permanently, leading to false positive errors, or one must refrain from defining them at all.", "num_citations": "2\n", "authors": ["758"]}
{"title": "Leviathan: SPL support on filesystem level\n", "abstract": " A lot of configurable software, especially in the domain of embedded and operating systems, is configured with a source preprocessor, mostly to avoid run-time overhead. However, developers then have to face a myriad of preprocessor directives and the corresponding complexity in the source code, even when they might only be working on the implementation of a single feature at a time. Thus, it has long been recognized that tool support is needed to cope with this \u2018#ifdef hell\u2019. Current approaches, which assist the software developer by providing preprocessed views, are all bound to a special integrated development environment. This eliminates them from being used both in industry settings (where domain-specific toolchains are often mandated) and in open-source projects (where diverse sets of editors and tools are being used).", "num_citations": "2\n", "authors": ["758"]}
{"title": "Eine Infrastruktur f\u00fcr modellgetriebene hierarchische Produktlinien\n", "abstract": " Die Entwicklung von Software durch den Produktlinienansatz hat zu beachtlichen Effizienzsteigerungen gef\u00fchrt. Die klassische Vorgehensweise st\u00f6\u00dft jedoch an Grenzen, wenn sehr breite Produktportfolios abgedeckt werden sollen. In gro\u00dfen Unternehmen ergeben sich daher zunehmend so genannte hierarchische Produktlinien, bei denen auf einer Basisplattform je nach zu entwickelnder Produktgruppe weitere Produktlinienplattformen aufsetzen. Diese stellen sowohl in organisatorischer als auch in technischer Hinsicht Herausforderungen im gesamten Software-Lebenszyklus. Um die Variabilit\u00e4t in der Anforderungsspezifikation, der Architektur und der Implementierung einer solchen Produktlinie zu verkn\u00fcpfen, stellen wir in dieser Ver\u00f6ffentlichung unser Konzept der modellgetriebenen hierarchischen Produktlinie vor. Um deren einfache Entwicklung zu erm\u00f6glichen, beschreiben wir zudem unseren Ansatz einer generischen Infrastruktur, welche die Entwicklung von modellgetriebenen hierarchischen Produktlinien unterst\u00fctzt.", "num_citations": "2\n", "authors": ["758"]}
{"title": "A case study on model-driven development and aspect-oriented programming: Benefits and liabilities\n", "abstract": " Model-driven development (MDD) and aspect-oriented programming (AOP) are two very different paradigms, having in common that they both aim at increasing development efficiency. In order to investigate their benefits and liabilities, we compared both in  context of a case study on an industrial-grade software system, the Open SOA platform. Already having a model-driven XML/XSL-T implementation in place, we re-implemented the corresponding logic of the Open SOA platform with a corresponding AOP implementation in AspectJ. Considering several comparison criteria, the results of our case study indicate that the AspectJ implementation is less redundant, better testable, and improves on understandability and readability. The model-driven approach, in turn, is the more flexible one, as it allows for generating arbitrary artifacts and structures, without the need for compromising on design. Additionally\u00a0\u2026", "num_citations": "1\n", "authors": ["758"]}