{"title": "Software pipelined execution of stream programs on GPUs\n", "abstract": " The StreamIt programming model has been proposed to exploit parallelism in streaming applications on general purpose multi-core architectures. This model allows programmers to specify the structure of a program as a set of filters that act upon data, and a set of communication channels between them. The StreamIt graphs describe task, data and pipeline parallelism which can be exploited on modern graphics processing units (GPUs), as they support abundant parallelism in hardware. In this paper, we describe the challenges in mapping StreamIt to GPUs and propose an efficient technique to software pipeline the execution of stream programs on GPUs. We formulate this problem - both scheduling and assignment of filters to processors - as an efficient integer linear program (ILP), which is then solved using ILP solvers. We also describe a novel buffer layout technique for GPUs which facilitates exploiting the\u00a0\u2026", "num_citations": "133\n", "authors": ["1719"]}
{"title": "Alter: exploiting breakable dependences for parallelization\n", "abstract": " For decades, compilers have relied on dependence analysis to determine the legality of their transformations. While this conservative approach has enabled many robust optimizations, when it comes to parallelization there are many opportunities that can only be exploited by changing or re-ordering the dependences in the program.", "num_citations": "44\n", "authors": ["1719"]}
{"title": "Language to specify syntax-guided synthesis problems\n", "abstract": " We present a language to specify syntax guided synthesis (SyGuS) problems. Syntax guidance is a prominent theme in contemporary program synthesis approaches, and SyGuS was first described in [1]. This paper describes concretely the input format of a SyGuS solver. [1] Rajeev Alur, Rastislav Bodik, Garvit Juniwal, Milo M. K. Martin, Mukund Raghothaman, Sanjit A. Seshia, Rishabh Singh, Armando Solar-Lezama, Emina Torlak, and Abhishek Udupa. Syntax-guided synthesis. In FMCAD, pages 1--17, 2013.", "num_citations": "26\n", "authors": ["1719"]}
{"title": "Synergistic execution of stream programs on multicores with accelerators\n", "abstract": " The StreamIt programming model has been proposed to exploit parallelism in streaming applications on general purpose multicore architectures. The StreamIt graphs describe task, data and pipeline parallelism which can be exploited on accelerators such as Graphics Processing Units (GPUs) or CellBE which support abundant parallelism in hardware.", "num_citations": "24\n", "authors": ["1719"]}
{"title": "The SyGuS Language Standard Version 2.0\n", "abstract": " We present a language to specify instances of the syntax-guided synthesis (SyGuS) problem. An instance of a SyGuS problem specifies:", "num_citations": "2\n", "authors": ["1719"]}
{"title": "Synthesis of distributed protocols from scenarios and specifications\n", "abstract": " Distributed protocols, typically expressed as stateful agents communicating asynchronously over buffered communication channels, are difficult to design correctly. This difficulty has spurred decades of research in the area of automated model-checking algorithms. In turn, practical implementations of model-checking algorithms have enabled protocol developers to prove the correctness of such distributed protocols. However, model-checking techniques are only marginally useful during the actual development of such protocols; typically as a debugging aid once a reasonably complete version of the protocol has already been developed. The actual development process itself is often tedious and requires the designer to reason about complex interactions arising out of concurrency and asynchrony inherent to such protocols. In this dissertation we describe program synthesis techniques which can be applied as an\u00a0\u2026", "num_citations": "1\n", "authors": ["1719"]}