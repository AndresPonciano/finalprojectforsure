{"title": "Experimental comparison of automated mutation testing tools for java\n", "abstract": " Mutation testing has been used to evaluate the quality of the test set and provides the confidence in testing activity. Generation as well as running of mutants needs practice. A huge amount of mutants are generated and therefore, it is a very costly activity in terms of time and effort. Automatic mutant generation and execution is essential to support testing. Automation achieves more attention, saves time and effort as developers and testers use automated tools. In the recent years, researchers have found that practitioners have diminutive knowledge about tools and their effectiveness. This paper compares five well-known publicly accessible mutation testing tools: `MuClipse', `Judy', `Jumble', `Jester' and PIT. This comparison uses a collection of Java classes taken from various easily accessible sources. Tests were designed and generated with the help of test generation techniques. The performance of each mutation\u00a0\u2026", "num_citations": "21\n", "authors": ["2041"]}
{"title": "On the effectiveness of using elitist genetic algorithm in mutation testing\n", "abstract": " Manual test case generation is an exhaustive and time-consuming process. However, automated test data generation may reduce the efforts and assist in creating an adequate test suite embracing predefined goals. The quality of a test suite depends on its fault-finding behavior. Mutants have been widely accepted for simulating the artificial faults that behave similarly to realistic ones for test data generation. In prior studies, the use of search-based techniques has been extensively reported to enhance the quality of test suites. Symmetry, however, can have a detrimental impact on the dynamics of a search-based algorithm, whose performance strongly depends on breaking the \u201csymmetry\u201d of search space by the evolving population. This study implements an elitist Genetic Algorithm (GA) with an improved fitness function to expose maximum faults while also minimizing the cost of testing by generating less complex and asymmetric test cases. It uses the selective mutation strategy to create low-cost artificial faults that result in a lesser number of redundant and equivalent mutants. For evolution, reproduction operator selection is repeatedly guided by the traces of test execution and mutant detection that decides whether to diversify or intensify the previous population of test cases. An iterative elimination of redundant test cases further minimizes the size of the test suite. This study uses 14 Java programs of significant sizes to validate the efficacy of the proposed approach in comparison to Initial Random tests and a widely used evolutionary framework in academia, namely Evosuite. Empirically, our approach is found to be more stable with significant\u00a0\u2026", "num_citations": "18\n", "authors": ["2041"]}
{"title": "Systematic literature review on search based mutation testing\n", "abstract": " Search based techniques have been widely applied in the domain of software testing. This Systematic Literature Review aims to present the research carried out in the field of search based approaches applied particularly to mutation testing. During the course of literature review, renowned databases were searched for the relevant publications in the field to include relevant studies up to the year 2014. Few studies for the year 2015\u20132016, gathered by performing snowball search, have also been included. For reviewing the literature in the field, 43 studies were evaluated, out of which 18 studies were thoroughly studied and analysed. The result of this SLR shows that search based techniques were applied to mutation testing primarily for two purposes, either for mutant optimisation or for test case optimisation. The future directions of this SLR suggests the application of search based techniques for other issues related to mutation testing, like, solution to equivalents mutants, generation of non-trivial mutants, multi-objective test data generation and non-functional testing.", "num_citations": "11\n", "authors": ["2041"]}
{"title": "An approach for test data generation based on genetic algorithm and delete mutation operators\n", "abstract": " This paper introduces a novel method that generates the program test data based on 'Genetic Algorithm' and 'Delete Mutation Analysis'. This approach attempts to imporve the test suite by deleting the redundant test data and leads to an efficient test data set in terms of better mutation score. In this approach, fitness is evaluated using mutation score and therefore, an adequate testdata is generated. Mutants based on delete operators are cost effective and, save huge time and effort in comparison with traditional mutant operators.", "num_citations": "11\n", "authors": ["2041"]}
{"title": "Implementing time-bounded automatic test data generation approach based on search-based mutation testing\n", "abstract": " Automatic test generation is a backbreaking task in software testing, and it is the need of the research community as well as for industry. Search-based mutation testing has been effectively applied for solving the testing problems. In this paper, an idea following the behavior of genetic algorithm with the benefits of mutation testing is proposed and implemented to generate the test cases automatically. For the sake of minimizing the cost incurred due to mutation testing, selective mutation technique is encouraged to generate the lesser number of mutants using delete mutation operators instead of all the traditional mutation operators. The process stops when it reaches the predefined time limit. In each iteration, it tries to optimize the size of the test suite by searching and eliminating the redundant less fit test inputs with the aim of mutation coverage. Results suggest that the generated test cases successfully\u00a0\u2026", "num_citations": "6\n", "authors": ["2041"]}
{"title": "State of art in the field of search-based mutation testing\n", "abstract": " Search-based Mutation Testing makes use of Meta-heuristic optimization techniques like Genetic Algorithm, Hill Climbing and other such Evolutionary Approaches for the process of mutation testing. This paper presents the opportunities and challenges faced in applying Search-based techniques to mutation testing. Enormous amount of research has been done in the recent years in this area. The major challenge is the storage and computational cost for a large set of mutants. This paper also lists the latest research, available tools and updates to SBMT.", "num_citations": "4\n", "authors": ["2041"]}
{"title": "Adopting social group optimization algorithm using mutation testing for test suite generation: SGO-MT\n", "abstract": " Test case generation is popular among the researchers and doing this manually is an exhaustive and time taking process. Automation can cut its cost and create an effective test suite that is evaluated for its adequacy over a set of faults. These faults can be created by applying mutagenic rules that have been used appropriately for searching the improved test inputs in search-based approaches. Researchers have advised these approaches combining mutation testing are more effective at test generation. This paper proposes a novel test generation algorithm SGO-MT by adopting social group optimization algorithm (SGO) with the goal to reveal maximum faults in the software. SGO follows the concept of learning the traits of humans in a group. It works in two phases: acquiring phase (learning from society) and improving phase (learning from the teacher) that try to enhance the fitness of each individual. In\u00a0\u2026", "num_citations": "3\n", "authors": ["2041"]}
{"title": "Investigating Different Metrics for Evaluation and Selection of Mutation Operators for Java\n", "abstract": " Mutation testing is a successful and powerful technique, specifically designed for injecting the artificial faults. Although it is effective at revealing the faults, test suite assessment and its reduction, however, suffer from the expense of executing a large number of mutants. The researchers have proposed different types of cost reduction techniques in the literature. These techniques highly depend on the inspection of mutation operators. Several metrics have been evolved for the same. The selective mutation technique is most frequently used by the researchers. In this paper, the authors investigate different metrics for evaluating the traditional mutation operators for Java. Results on 13 Java programs indicate how grouping few operators can impact the effectiveness of an adequate and minimal test suite, and how this could provide several cost benefits.", "num_citations": "1\n", "authors": ["2041"]}