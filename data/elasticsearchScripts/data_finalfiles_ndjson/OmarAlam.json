{"title": "Concern-oriented software design\n", "abstract": " There exist many solutions to solve a given design problem, and it is difficult to capture the essence of a solution and make it reusable for future designs. Furthermore, many variations of a given solution may exist, and choosing the best alternative depends on application-specific high-level goals and non-functional requirements. This paper proposes Concern-Oriented Software Design, a modelling technique that focuses on concerns as units of reuse. A concern groups related models serving the same purpose, and provides three interfaces to facilitate reuse. The variation interface presents the design alternatives and their impact on non-functional requirements. The customization interface of the selected alternative details how to adapt the generic solution to a specific context. Finally, the usage interface specifies the provided behaviour. We illustrate our approach by presenting the concern models of\u00a0\u2026", "num_citations": "95\n", "authors": ["2199"]}
{"title": "TouchRAM: A multitouch-enabled tool for aspect-oriented software design\n", "abstract": " This paper presents TouchRAM, a multitouch-enabled tool for agile software design modeling aimed at developing scalable and reusable software design models. The tool gives the designer access to a vast library of reusable design models encoding essential recurring design concerns. It exploits model interfaces and aspect-oriented model weaving techniques as defined by the Reusable Aspect Models (RAM) approach to enable the designer to rapidly apply reusable design concerns within the design model of the software under development. The paper highlights the user interface features of the tool specifically designed for ease of use, reuse and agility (multiple ways of input, tool-assisted reuse, multitouch), gives an overview of the library of reusable design models available to the user, and points out how the current state-of-the-art in model weaving had to be extended to support seamless model\u00a0\u2026", "num_citations": "41\n", "authors": ["2199"]}
{"title": "Feature modelling and traceability for concern-driven software development with TouchCORE\n", "abstract": " This demonstration paper presents TouchCORE, a multi-touch enabled software design modelling tool aimed at developing scalable and reusable software design models following the concerndriven software development paradigm. After a quick review of concern-orientation, this paper primarily focusses on the new features that were added to TouchCORE since the last demonstration at Modularity 2014 (were the tool was still called TouchRAM). TouchCORE now provides full support for concern-orientation. This includes support for feature model editing and different modes for feature model and impact model visualization and assessment to best assist the concern designers as well as the concern users. To help the modeller understand the interactions between concerns, TouchCORE now also collects tracing information when concerns are reused and stores that information with the woven models. This makes\u00a0\u2026", "num_citations": "31\n", "authors": ["2199"]}
{"title": "On the modularization provided by concern-oriented reuse\n", "abstract": " Reuse is essential in modern software engineering, and hence also in the context of model-driven engineering (MDE). Concern-Oriented Reuse (CORE) proposes a new way of structuring model-driven software development where models of the system are modularized by domains of abstraction within units of reuse called concerns. Within a concern, models are further decomposed and modularized by views and features. High-level concerns can reuse lower-level concerns, and models within a concern can extend other models belonging to the same concern, resulting in complex inter-and intra-concern dependencies. To clearly specify what dependencies are allowed between models belonging to the same or to different concerns, CORE advocates a three-part interface to describe each concern (variation, customization, and usage interfaces). This paper presents the CORE metamodel that formalizes the CORE\u00a0\u2026", "num_citations": "24\n", "authors": ["2199"]}
{"title": "Using CVL to operationalize product line development with reusable aspect models\n", "abstract": " This paper proposes a software design modelling approach that uses the Common Variability Language (CVL) to specify and resolve the variability of a software design, and the aspect-oriented modelling technique Reusable Aspect Models (RAM) to specify and then compose the detailed structural and behavioural design models corresponding to the chosen variants. This makes it possible to 1) exploit the advanced modularization capabilities of RAM to specify a complex, detailed design concern and its variants by means of a set of interdependent aspect models; 2) use CVL to provide an easy-to-use product-line interface for the design concern; 3) automatically generate a detailed design model for a chosen variant using a custom generic CVL derivation operator and the RAM weaver.", "num_citations": "20\n", "authors": ["2199"]}
{"title": "Concern-Driven Software Development with jUCMNav and TouchRAM.\n", "abstract": " A concern is a unit of reuse that groups together software artifacts describing properties and behaviour related to any domain of interest to a software engineer at different levels of abstraction. This demonstration illustrates how to specify, design, and reuse concerns with two integrated tools: jUCMNav for feature modelling, goal modelling, and scenario modelling, and TouchRAM for design modelling with class, sequence, and state diagrams, and for code generation. For a demo video see: http://www. youtube. com/watch? v= KWZ7wLsRFFA.", "num_citations": "13\n", "authors": ["2199"]}
{"title": "Automated grading of class diagrams\n", "abstract": " Drawing UML diagrams, such as class diagrams, is an essential learning task in many software engineering courses. In course assignments, students are tasked to draw models that describe scenarios, model requirements, or system designs. The course instructor usually grades the diagrams manually by comparing a student's solution model with a template solution model made by the instructor. However, modelling is not an exact science, and multiple correct solutions or variants may exist. This makes grading UML assignments a cumbersome task, especially when there are many assignments to grade. Therefore, there is a need for an automated grading tool that aids the instructor in the grading process. This paper presents an approach for automated grading of UML class diagrams. We propose a metamodel that establishes mappings between the instructor solution and all the solutions for a class. The\u00a0\u2026", "num_citations": "10\n", "authors": ["2199"]}
{"title": "TouchRAM: a multitouch-enabled software design tool supporting concern-oriented reuse\n", "abstract": " TouchRAM is a multitouch-enabled tool for agile software design modelling aimed at developing scalable and reusable software design models. This paper primarily focusses on the new features that were added to TouchRAM to provide initial support for concern-orientation, and then summarizes the new extensions to behavioural modelling and improved integration with Java. A video that demonstrates the use of TouchRAM can be found here: http://www. youtube. com/watch? v= l8LMqwwRPg4", "num_citations": "9\n", "authors": ["2199"]}
{"title": "Modelling a family of systems for crisis management with concern\u2010oriented reuse\n", "abstract": " Concern\u2010oriented reuse (CORE) proposes the concern as a new unit of model\u2010based reuse encapsulating software artefacts pertaining to a domain of interest that span multiple development phases and levels of abstraction. With CORE, a concern encapsulates multiple reusable features, while allowing its generic models to be customized to problem\u2010specific contexts. We report on our experience of designing a family of crisis management systems (CMS) with the help of reusable concern libraries. The collected metrics show a considerable amount of reuse in our CMS design. The study provides encouraging evidence that CORE's vision to create large\u2010scale, generic and reusable entities that are expressed with the most appropriate modelling formalisms at the right level of abstraction is feasible. We present our experience in the design of the CMS and elaborate on the advantages as well as the efforts required\u00a0\u2026", "num_citations": "7\n", "authors": ["2199"]}
{"title": "Towards online collaborative multi-view modelling\n", "abstract": " Increasingly, distributed software development teams rely on online collaboration tools to work together in real time. Collaborative textual editors are intuitive, since the position of the cursor and the currently selected text, if any, tell other collaborators what part of the text/code a developer is currently focusing on or editing. Model-Driven Engineering (MDE) advocates using models as the primary development artifacts, and to be most effective, the system is described at different levels of abstraction from multiple points of view. This poses additional challenges for online collaboration, as the current focus of the developer and the scope of his changes are often less clear, in particular when the modelling language(s) and views use graphics or have hierarchical or other kinds of dependencies. This paper proposes two algorithms that exploit the metamodels of the involved modelling languages to visualize a\u00a0\u2026", "num_citations": "6\n", "authors": ["2199"]}
{"title": "Designing with inheritance and composition\n", "abstract": " Inheritance and composition are two different techniques that allow a modeller to extend the properties of a class. In this paper we highlight the differences of these two closely-related concepts when used in aspect-oriented designs. In particular, we explain that when an aspect wants to extend a base class of a source model, the designer should choose to use composition if she intends the extension to replace the base class. If she intends to define an alternative to the base class with extended functionality, inheritance should be used. We demonstrate the power of the combined use of both techniques by showing an aspect-oriented design of parts of a workflow middleware product line.", "num_citations": "6\n", "authors": ["2199"]}
{"title": "Concern oriented reuse: a software reuse paradigm\n", "abstract": " Model reuse remains a major challenge in Model Driven Engineering (MDE), despite the success stories in programming languages as exemplified by class libraries, services, and components. Modellers usually create models from scratch because modelling languages offer limited support to reuse existing models and modelling tools in general are not shipped with a library of reusable models. In addition, the crosscutting nature of software development concerns complicates the application of software engineering techniques such as information hiding, decomposition, interfaces, and abstraction in the context of MDE. This thesis mitigates the aforementioned challenges that reuse faces in the context of MDE by proposing Concern-Oriented Reuse (CORE), a novel reuse paradigm that extends MDE with best practices and techniques from advanced modularization and separation of concerns (SoC), goal modelling\u00a0\u2026", "num_citations": "5\n", "authors": ["2199"]}
{"title": "Concern-Oriented Software Design with TouchRAM.\n", "abstract": " TouchRAM is a multitouch-enabled tool for agile software design modelling aimed at developing scalable and reusable software design models. This paper briefly summarizes the main features of the Reusable Aspect Models modelling approach, highlights the new features of TouchRAM that have been added in the last 6 months, and then describes how the tool is used to incrementally elaborate a software design model. A video that demonstrates the use of TouchRAM can be found here: http://www. youtube. com/watch? v= l8LMqwwRPg4", "num_citations": "5\n", "authors": ["2199"]}
{"title": "Specification of domain-specific languages based on concern interfaces\n", "abstract": " Concern-Driven Development (CDD) is a set of software engineering approaches that focus on reusing existing software models. In CDD, a concern encapsulates related software models and provides three interfaces to facilitate reuse. These interfaces allow to select, customize, and use elements of the concern when an application reuses the concern. Domain-Specific Languages (DSLs) emerged to make modeling accessible to users and domain experts who are not familiar with software engineering techniques. In this paper, we argue that it is possible to create a DSL by using only the three-part interface of the concern modeling the domain in question and that the three-part interface is essential for an appropriate DSL. The DSL enables the composition of the concern with the application under development. We explain this by specifying DSLs based on the interfaces of the Association and the Observer concerns.", "num_citations": "4\n", "authors": ["2199"]}
{"title": "Revising the Comparison Criteria for Composition.\n", "abstract": " Abstract The Comparing Modeling Approaches (CMA) workshop proposed in 2011 a set of criteria that allows modellers to understand, analyze, classify and compare various modelling approaches. Based on feedback gained from applying the criteria, the criteria and questionnaire document were revised and extended multiple times. In this paper, we suggest a change to the criteria that is aimed at improving the assessment of model composition. We argue that the definition of composition rule is ambiguous in the current document, and suggest to replace it with an easier and more useful criterion\u2013the input specification. We propose an updated questionnaire and show how to apply it to three modelling approaches: AoURN, RAM, and UML.", "num_citations": "4\n", "authors": ["2199"]}
{"title": "Incremental software design modelling\n", "abstract": " In this paper we investigate how a software designer can build a complex software design model incrementally by exploiting model interfaces and information hiding to encapsulate different design concerns within model increments. Each model increment either extends or customizes the model it is applied to. When using model extension, each increment adds modelling elements to the existing model to provide additional structure and behaviour. When using model customization, each increment adds modelling elements to adapt the general structure and behaviour of the model to a specific need. We discuss how incremental modelling fits with software development processes, and show how different model composition techniques, ie class merge, subclassing, operation inlining and advising, support the incremental extension and customization of models. Finally, we explain how to generate the complete software design in the end. Practically, we present how we extended the Reusable Aspect Models (RAM) approach to support incremental modelling and show details of an incremental design of a workflow middleware product line.", "num_citations": "3\n", "authors": ["2199"]}
{"title": "Concern Driven Software Development.\n", "abstract": " This paper describes the vision of Concern-Driven Development (CDD), a novel software development paradigm that extends model-driven engineering with best practices from reuse, advanced modularization techniques, goal modelling, and software product line research. CDD advocates the use of a three-part interface to describe units of reuse, ie, concerns. The variation interface describes required design decisions and their impact on high level system qualities, both explicitly expressed using feature models and goal models. The customization interface allows the chosen variation to be adapted to a specific reuse context, while the usage interface defines how a customized concern may eventually be used. When a concern is reused, the modeller first uses the variation interface to select the feature configuration that has the desired impact on stakeholder goals and system qualities, then adapts the concern to the context of the application under development with the help of the customization interface, and finally accesses the concern\u2019s functionality through its usage interface. We argue that, if CDD is successfully adopted on a large scale, it will transform the software engineering discipline by enabling software engineers to specialize to a greater degree and hence align the practice of software engineering closer to what is done in other engineering disciplines.", "num_citations": "3\n", "authors": ["2199"]}
{"title": "Is Automated Grading of Models Effective? Assessing Automated Grading of Class Diagrams\n", "abstract": " Learning how to model the structural properties of a problem domain or an object-oriented design in the form of a class diagram is an essential learning task in many software engineering courses. Since the grading of models is a time-consuming activity, automated grading approaches have been developed to assist the instructor by speeding up the grading process, as well as ensuring consistency and fairness for large classrooms. This paper empirically evaluates the efficacy of one such automated grading approach when applied in two real world settings: a beginner undergraduate class of 103 students required to create an object-oriented design model, and an advanced undergraduate class of 89 students elaborating a domain model. The results of the experiment highlight a) the need to adapt the grading strategy and strictness to the level of the students and the grading style of the instructor, and b) the\u00a0\u2026", "num_citations": "2\n", "authors": ["2199"]}
{"title": "Predicting irregularities in arrival times for transit buses with recurrent neural networks using GPS coordinates and weather data\n", "abstract": " Intelligent transportation systems (ITS) play an important role in the quality of life of citizens in any metropolitan city. Despite various policies and strategies incorporated to increase the reliability and quality of service, public transportation authorities continue to face criticism from commuters largely due to irregularities in bus arrival times, most notably manifested in early or late arrivals. Due to these irregularities, commuters may miss important appointments, wait for too long at the bus stop, or arrive late for work. Therefore, accurate prediction models are needed to build better customer service solutions for transit systems, e.g. building accurate mobile apps for trip planning or sending bus delay/cancel  notifications. Prediction models will also help in developing better appointment scheduling systems for doctors, dentists, and other businesses to take into account transit bus delays for their clients. In this paper, we\u00a0\u2026", "num_citations": "2\n", "authors": ["2199"]}
{"title": "Domain-specific model differencing in visual concrete syntax\n", "abstract": " Like any other software artifact, models evolve and need to be versioned. In the last few years, dedicated support for model versioning has been proposed to improve the default text-based versioning that version control systems offer. However, there is still the need to comprehend model differences in terms of the semantics of the modeling language. For this purpose, we propose a comprehensive approach that considers both abstract and concrete syntax, to express model differences in terms of the domain-specific language (DSL) used and define domain-specific semantics for specific difference patterns. The approach is based on the automatic extension of the DSL to enable the representation of changes, on the definition of rules to capture recurrent domain-specific difference patterns, and on the automatic adaptation of the graphical concrete syntax to visualize the differences. We present a prototype tool\u00a0\u2026", "num_citations": "2\n", "authors": ["2199"]}
{"title": "Towards an agile concern-driven development process\n", "abstract": " This paper proposes an Agile Concern-Driven Development (Agile CDD) process, a software development process that uses concerns as its primary artifact and applies agile practices. Whereas classical Model-Driven Engineering (MDE) methodologies focus on models that are built from scratch with little support for reuse, Agile CDD is a reuse-focused development process in which an application is built incrementally by repeatedly reusing other existing concerns. In Agile CDD, a modeler would use a modelling language that is appropriate for the current development phase and for the problem domain. Model transformations would then be applied to produce the initial set of models for the next phase. The process will continue until an execute model is produced. In each phase, the modeller should consult a repository of reusable concerns to identify and reuse concerns. Changing requirements are welcome and\u00a0\u2026", "num_citations": "2\n", "authors": ["2199"]}
{"title": "Challenges for reuse in collaborative modeling environments\n", "abstract": " So ware systems are not developed by individuals, and have become increasingly collaborative endeavors between stakeholders with complimentary expertise. Model-driven engineering (MDE) facilitates such collaboration by enabling developers to work on models (o en domain-speci c) rather than application code directly. Collaborative modeling environments help promote the integration of models. e issue of model reuse is crucial in a collaborative environment to foster the practice of modeling. Relying on a version control system as the sole means of reuse limits the usefulness of collaborative environments. is article discusses a set of challenges that must be addressed in a collaborative environment to support model reuse. Our investigation of the state of practice in existing environments shows that they do not provide su cient support for reuse yet.", "num_citations": "2\n", "authors": ["2199"]}
{"title": "Towards Collaborative Modeling Using a Concern-driven Version Control System\n", "abstract": " This paper presents an approach for collaboration in modeling that builds on ideas of Concern-Oriented Reuse (CORE). CORE is a novel reuse paradigm that supports broad-based model reuse. We leverage the ideas of CORE and version control systems to support collaborative modeling of reusable concerns. We capture our ideas in a metamodel and demonstrate our approach by collaboratively modeling a drone system concern.", "num_citations": "2\n", "authors": ["2199"]}
{"title": "The Role of Race and Gender in Teaching Evaluation of Computer Science Professors: A Large Scale Analysis on RateMyProfessor Data\n", "abstract": " Recently, Computer Science (CS) education has experienced a renewed interest, driven by the demand in the fast-changing job market. This renewed interest created an uptick of enrollment in computer science courses. Increased number of students search for information about CS courses and professors. Often times, students turn to a professor's profile on online sites, eg RateMyProfessor. com (RMP), to read feedback and assessments made by other students. Student Evaluations of Teaching (SETs), conducted online or on paper, are widely used to assess and improve the teaching quality of professors, and to provide critical assessment of the teaching material and content. This paper studies the role of race and gender of computer science professors on their teaching evaluation by analyzing the publicly available data of over 39,000 CS professors on RateMyProfessor. We found that women are generally\u00a0\u2026", "num_citations": "1\n", "authors": ["2199"]}
{"title": "Reducing error propagation for long term energy forecasting using multivariate prediction\n", "abstract": " Many statistical and machine learning models for prediction make use of historical data as an input and produce single or small numbers of output values. To forecast over many timesteps, it is necessary to run the program recursively. This leads to a compounding of errors, which has adverse effects on accuracy for long forecast periods. In this paper, we show this can be mitigated through the addition of generating features which can have an \u201canchoring\u201d effect on recurrent forecasts, limiting the amount of compounded error in the long term. This is studied experimentally on a benchmark energy dataset using two machine learning models LSTM and XGBoost. Prediction accuracy over differing forecast lengths is compared using the forecasting MAPE. It is found that for LSTM model the accuracy of short term energy forecasting by using a past energy consumption value as a feature is higher than the accuracy when not using past values as a feature. The opposite behavior takes place for the long term energy forecasting. For the XGBoost model, the accuracy for both short and long term energy forecasting is higher when not using past values as a feature.", "num_citations": "1\n", "authors": ["2199"]}
{"title": "Feature model for extensions in modeling languages\n", "abstract": " Extension is a common term used in model-driven engineering. However, it is expressed in different ways by different modeling languages. A class diagram modeler uses extension to mean inheriting from a class. An aspect modeler extends a base with an aspect. Despite the different ways the term is being expressed, it generally refers to adding/changing structure/behaviour of a model in some way. We observe that model extensions vary in several ways. For example, in some cases, such as in use case diagram extensions, the extended model (base model) is information complete, meaning that it requires no further information in order for it to be useful. In other languages, the base model is not useful on its own and must be completed with an extension. Extensions also vary in terms of granularity, e.g., inheritance between two classes is an extension at a low level of granularity (between two elements, i.e\u00a0\u2026", "num_citations": "1\n", "authors": ["2199"]}
{"title": "Concern-oriented incremental modelling\n", "abstract": " This paper investigates how to incrementally model a software system in the context of Concern-Oriented Reuse (CORE). CORE proposes concerns as new units of reuse encapsulating software artifacts that span multiple development phases and levels of abstraction. CORE advocates a three-part interface to describe each concern (variation, customization, and usage interfaces) and de nes compositions between di erent concerns. However, the process of incrementally modelling of artifacts in CORE has not been discussed before. We propose two kinds of increments, feature-driven increments within a concern, and reuse-driven increments between concerns. We demonstrate incremental modelling by modelling a work ow concern in CORE.", "num_citations": "1\n", "authors": ["2199"]}