{"title": "A tree-based approach to support refactoring in multi-language software applications\n", "abstract": " Developers build software applications using different programming languages, so they can benefit from the programming languages\u2019 specific advantages. To allow an interaction of different programming languages, each programming language offers Application Programming Interfaces (API) to be called. However, such interactions pose challenges for source-code refactoring across programming languages. To this end, we present a generalized approach to refactoring in multi-language software applications based on graphs of trees. To illustrate the broad application of our approach, we implement a library that builds the foundation for two tools that support the refactoring of database applications implemented in Java and Java applications that invoke code of the functional programming language Clojure.", "num_citations": "5\n", "authors": ["816"]}
{"title": "Code Smells in Highly Configurable Software\n", "abstract": " Modern software systems are increasingly configurable. Conditional compilation based on C preprocessor directives (i. e., #ifdefs) is a popular variability mechanism to implement this configurability in source code. Although C preprocessor usage has been subject to repeated criticism, with regard to variability implementation, there is no thorough understanding of which patterns are particularly harmful. Specifically, we lack empirical evidence of how frequently reputedly bad patterns occur in practice and which negative effect they have. For object-oriented software, in contrast, code smells are commonly used to describe source code that exhibits known design flaws, which negatively affect understandability or changeability. Established code smells, however, have no notion of variability. Consequently, they cannot characterize flawed patterns of variability implementation. The goal of my research is therefore to\u00a0\u2026", "num_citations": "3\n", "authors": ["816"]}
{"title": "A solid foundation: Why e-assessment should be based on a systematic typology of test items\n", "abstract": " The Bologna Process requires, besides other changes, more frequent assessment of students, both during and after modules. As e-learning and e-teaching scenarios already play important roles in many curricula, instructors are now starting to consider e-assessment as well. To enable automated evaluation, selected-response items are typically used in eassessment. However, current e-assessment platforms offer only a limited and rather arbitrary selection of item types. This means that the decision on which item types to use in a test is often based on purely technical issues instead of pedagogical considerations. In this paper, we argue that both implementers and users of e-assessment platforms should abstract from current implementations and base the selection of item types for e-assessment on a sound typology of test items. This would allow instructors to choose the item types best suited for a test and it would allow implementers to generalize the test facilities of their systems, reducing maintenance and development costs. As an example, we outline R\u00fctter\u2019s 1973 typology and discuss selected issues from the point of users and implementers of e-assessment.", "num_citations": "2\n", "authors": ["816"]}
{"title": "Interoperabilit\u00e4t von elektronischen Tests\n", "abstract": " Die Erstellung qualitativ hochwertiger Tests ist aufw\u00e4ndig. Daher ist es w\u00fcnschenswert, einmal erstellte Tests wiederund weiterverwenden zu k\u00f6nnen. Um eine Abh\u00e4ngigkeit von einer einzelnen Testplattform zu vermeiden, werden standardisierte Austauschformate ben\u00f6tigt. In diesem Beitrag formulieren wir Desiderata f\u00fcr derartige Formate und untersuchen den derzeitigen De-Facto-Standard, die IMS Question \\& Test Interoperability Specification (QTI), auf seine Eignung. Das erkl\u00e4rte Ziel von QTI ist es, den Austausch von Tests zwischen verschiedenen Systemen zu erm\u00f6glichen. Nach der Analyse der Spezifikation und aufgrund unserer Erfahrungen bei der Implementierung von QTI im System \\?ECQuiz\u201c kommen wir zu dem Schluss, dass QTI jedoch als Austauschformat ungeeignet ist.", "num_citations": "2\n", "authors": ["816"]}