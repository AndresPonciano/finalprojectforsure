{"title": "Hypothesis-driven adaptation of business models based on product line engineering\n", "abstract": " The continuous innovation of its business models is an important task for a company to stay competitive. During this process, the company has to validate various hypotheses about its business models by adapting to uncertain and changing customer needs effectively and efficiently. This adaptation, in turn, can be supported by the concept of Software Product Lines (SPLs). SPLs reduce the time to market by deriving products for customers with changing requirements using a common set of features, structured as a feature model. Analogously, we support the process of business model adaptation by applying the engineering process of SPLs to the structure of the Business Model Canvas (BMC). We call this concept a Business Model Decision Line (BMDL). The BMDL matches business domain knowledge in the form of a feature model with customer needs to derive hypotheses about the business model together\u00a0\u2026", "num_citations": "12\n", "authors": ["775"]}
{"title": "Model-based product configuration in augmented reality applications\n", "abstract": " Augmented Reality (AR) has recently found high attention in mobile shopping apps such as in domains like furniture or decoration. Here, the developers of the apps focus on the positioning of atomic 3D objects in the physical environment. With this focus, they neglect the configuration of multi-faceted 3D object composition according to the user needs and environmental constraints. To tackle these challenges, we present a model-based approach to support AR-assisted product configuration based on the concept of Dynamic Software Product Lines. Our approach splits products (e.g. table) into parts (e.g. tabletop, table legs, funnier) with their 3D objects and additional information (e.g. name, price). The possible products, which can be configured out of these parts, are stored in a feature model. At runtime, this feature model can be used to configure 3D object compositions out of the product parts and adapt\u00a0\u2026", "num_citations": "6\n", "authors": ["775"]}
{"title": "Intertwined development of business model and product functions for mobile applications: a twin peak feature modeling approach\n", "abstract": " Mobile app stores like Apple\u2019s AppStore or Google\u2019s PlayStore are highly competitive markets for third-party developers wanting to develop successful applications. During the development process, many developers focus on the multitude of product functions but neglect the business model as an equally important part. As a result, developers often fail to meet customer needs, leading to unnecessary development costs and poor market penetration. This, in turn, raises the question of how we intertwine the business model and product functions during the development process to ensure a better alignment between the two.               In this paper, we show this intertwined development by adapting the concept of Twin Peaks to the business model and product functions. Based on feature modeling as an abstraction layer, we introduce the concept of a Business Model Decision Line (BMDL) to structure the\u00a0\u2026", "num_citations": "6\n", "authors": ["775"]}
{"title": "Situation-Specific Business Model Development Methods for Mobile App Developers\n", "abstract": " The development of effective business models is an essential task in highly competitive markets like mobile ecosystems. Existing development methods for these business models do not specifically bring into focus that the development process profoundly depends on the situation (eg, market size, regulations) of the mobile app developer. Here, a mismatch between method and situation can lead to poor resource management and longer development cycles. In software engineering, software projects use situational method engineering to configure a development method out of a method repository based on the project situation. Analogously, we support creating situation-specific business model development methods with a method base and new user roles. Here, the method engineer obtains the domain expert\u2019s knowledge and stores it in the method base as elements, building blocks, and patterns. We derive the\u00a0\u2026", "num_citations": "5\n", "authors": ["775"]}
{"title": "ProConAR: a tool support for model-based AR product configuration\n", "abstract": " Mobile shopping apps have been using Augmented Reality (AR) in the last years to place their products in the environment of the customer. While this is possible with atomic 3D objects, there is still a lack in the runtime configuration of 3D object compositions based on user needs and environmental constraints. For this, we previously developed an approach for model-based AR-assisted product configuration based on the concept of Dynamic Software Product Lines. In this demonstration paper, we present the corresponding tool support ProConAR in the form of a Product Modeler and a Product Configurator. While the Product Modeler is an Angular web app that splits products (e.g. table) up into atomic parts (e.g. tabletop, table legs, funnier) and saves it within a configuration model, the Product Configurator is an Android client that uses the configuration model to place different product configurations\u00a0\u2026", "num_citations": "5\n", "authors": ["775"]}
{"title": "Model-Based Hypothesis Engineering for Supporting Adaptation to Uncertain Customer Needs\n", "abstract": " To build successful products, the developers have to adapt their product features and business models to uncertain customer needs. This adaptation is part of the research discipline of Hypotheses Engineering (HE) where customer needs can be seen as hypotheses that need to be tested iteratively by conducting experiments together with the customer. So far, modeling support and associated traceability of this iterative process are missing. Both, in turn, are important to document the adaptation to the customer needs and identify experiments that provide most evidence to the customer needs. To target this issue, we introduce a model-based HE approach with a twofold contribution: First, we develop a modeling language that models hypotheses and experiments as interrelated hierarchies together with a mapping between them. While the hypotheses are labeled with a score level of their current evidence, the\u00a0\u2026", "num_citations": "4\n", "authors": ["775"]}
{"title": "Business models of store-oriented software ecosystems: a variability modeling approach\n", "abstract": " In the last years, store-oriented software ecosystems are gaining more and more attention from a business perspective. In these ecosystems, third-party developers upload extensions to a store which can be downloaded by end users. While the functional scope of such ecosystems is relatively similar, the underlying business models differ greatly in and between their different product domains (e.g. Mobile Phone, Smart TV). This variability, in turn, makes it challenging for store providers to find a business model that fits their own needs.               To handle this variability, we introduce the Business Variability Model (BVM) for modeling business model decisions. The basis of these decisions is the analysis of 60 store-oriented software ecosystems in eight different product domains. We map their business model decisions to the Business Model Canvas, condense them to a variability model and discuss particular\u00a0\u2026", "num_citations": "4\n", "authors": ["775"]}
{"title": "Extending business model development tools with consolidated expert knowledge\n", "abstract": " Business Model Innovation (BMI) is a creative process that often needs collaboration between different stakeholders with the support of domain experts. Instead of innovation workshops where the domain experts need to be physically present, software-based tools allow reusing the knowledge of many domain experts independent of their actual presence. This reusing of expert knowledge, which improves the quality of the developed business models, is currently not supported by existing Business Model Development Tools (BMDTs). To address this shortcoming, we present an approach to support BMDTs with consolidated knowledge of different experts. In our approach, domain experts formalize their knowledge about business models for particular domains in expert models to make them useable within and transferable between different tools. Business developers can subsequently choose the expert\u00a0\u2026", "num_citations": "2\n", "authors": ["775"]}
{"title": "VREUD-an end-user development tool to simplify the creation of interactive VR scenes\n", "abstract": " Recent advances in Virtual Reality (VR) technology and the increased availability of VR-equipped devices enable a wide range of consumer-oriented applications. For novice developers, however, creating interactive scenes for VR applications is a complex and cumbersome task that requires high technical knowledge which is often missing. This hinders the potential of enabling novices to create, modify, and execute their own interactive VR scenes. Although recent authoring tools for interactive VR scenes are promising, most of them focus on expert professionals as the target group and neglect the novices with low programming knowledge. To lower the entry barrier, we provide an open-source web-based End-User Development (EUD) tool, called VREUD, that supports the rapid construction and execution of interactive VR scenes. Concerning construction, VREUD enables the specification of the VR scene\u00a0\u2026", "num_citations": "1\n", "authors": ["775"]}
{"title": "TOWARDS VISUALIZING AND SIMULATING BUSINESS MODELS IN DYNAMIC PLATFORM ECOSYSTEMS\n", "abstract": " Platform-based business models underlie the success of many of today\u2019s largest, fastest-growing, and most disruptive companies. Despite the success of prominent examples, such as Uber and Airbnb, creating a profitable platform ecosystem presents a key challenge for many companies across all industries. Although research provides knowledge about platforms\u2019 different value drivers (eg, network effects), companies that seek to transform their current business model into a platform-based one lack an artifact to reduce knowledge boundaries, collaborate effectively, and cope with the complexities and dynamics of platform ecosystems. We address this challenge by developing two artifacts and combining research from variability modeling, business model dependencies, and system dynamics. This paper presents a design science research approach to develop the platform ecosystem modeling language and the platform ecosystem development tool that support researcher and practitioner by visualizing and simulating platform ecosystems.", "num_citations": "1\n", "authors": ["775"]}
{"title": "jPL: A java-based software framework for preference learning\n", "abstract": " Preference learning (PL) is an emerging subfield of machine learning, which deals with the induction of preference models from observed preference information [3]. Such models are typically used for prediction purposes, for example to predict context-dependent preferences of individuals on various choice alternatives. Depending on the representation of preferences, individuals, alternatives, and contexts, a large variety of preference models and problems are conceivable. We developed a software framework offering tools and algorithms for solving preference learning problems. 1 While software frameworks for core machine learning problems such as classification abound, we are not aware of any comprehensive library of tools for preference learning. In fact, existing libraries are essentially restricted to one or two types of PL problems (eg [2],[6],[5],[4],[1]). Our framework, called jPL, is implemented in Java. It is based on a unified data format, the Generic Preference Representation Format (GPRF), which is suitable for modeling data related to different kinds of preference learning problems. This also includes a dataset transformer, which converts data from several existing formats to GPRF. As problem classes, the framework currently supports collaborative filtering, instance ranking, label ranking, multilabel classifcation, object ranking, ordinal classification, and rank aggregation out of the box, with at least two algorithms being implemented for each problem. It provides a convenient command line interface as well as an API, both allowing one to configure the system using json files. The whole framework was developed in a quite generic way, so\u00a0\u2026", "num_citations": "1\n", "authors": ["775"]}