{"title": "Architectural patterns revisited\u2013a pattern language\n", "abstract": " Architectural patterns are a key concept in the field of software architecture: they offer well-established solutions to architectural problems, help to document the architectural design decisions, facilitate communication between stakeholders through a common vocabulary, and describe the quality attributes of a software system as forces. Regrettably, finding and applying the appropriate architectural patterns in practice still remains largely ad-hoc and unsystematic. This is due to the lack of consensus in the community with respect to the \u201cphilosophy\u201d and granularity of architectural patterns, as well as the lack of a coherent pattern language. In this paper we attempt to establish common ground in the architectural patterns community by proposing a pattern language that acts as a superset of the existing architectural pattern collections and categorizations. This language is particularly focused on establishing the relationships between the patterns and performs a categorization based on the concept of \u201carchitectural views\u201d.", "num_citations": "311\n", "authors": ["169"]}
{"title": "Towards a pattern language for learning management systems\n", "abstract": " Learning Management Systems are sophisticated web-based applications that are being engineered today in increasing numbers by numerous institutions and companies that want to get involved in e-learning either for providing services to third parties, or for educating and training their own people. Even though the construction of such systems has been taking place for many years, they are still designed and developed from scratch. The reason is that experience from previous Learning Management Systems, is not codified or documented, resulting in forcing the development teams to \u2018re-invent the wheel\u2019. This paper presents an approach of recording design experience in the form of design patterns for Learning Management Systems and aims at developing a pattern language for these systems.", "num_citations": "308\n", "authors": ["169"]}
{"title": "VxBPEL: Supporting variability for Web services in BPEL\n", "abstract": " Web services provide a way to facilitate the business integration over the Internet. Flexibility is an important and desirable property of Web service-based systems due to dynamic business environments. The flexibility can be provided or addressed by incorporating variability into a system. In this study, we investigate how variability can be incorporated into service-based systems. We propose a language, VxBPEL, which is an adaptation of an existing language, BPEL, and able to capture variability in these systems. We develop a prototype to interpret this language. Finally, we illustrate our method by using it to handle variability of an example.", "num_citations": "178\n", "authors": ["169"]}
{"title": "Tool support for architectural decisions\n", "abstract": " In contrast to software architecture models, architectural decisions are often not explicitly documented, and therefore eventually lost. This contributes to major problems such as high-cost system evolution, stakeholders mis-communication, and limited reusability of core system assets. An approach is outlined that systematically and semi-automatically documents architectural decisions and allows them to be effectively shared by the stakeholders. A first attempt is presented that partially implements the approach by binding architectural decisions, models and the system implementation. The approach is demonstrated with an example demonstrating its usefulness with regards to some industrial use cases.", "num_citations": "178\n", "authors": ["169"]}
{"title": "A documentation framework for architecture decisions\n", "abstract": " In this paper, we introduce a documentation framework for architecture decisions. This framework consists of four viewpoint definitions using the conventions of ISO/IEC/IEEE 42010, the new international standard for the description of system and software architectures. The four viewpoints, a Decision Detail viewpoint, a Decision Relationship viewpoint, a Decision Chronology viewpoint, and a Decision Stakeholder Involvement viewpoint satisfy several stakeholder concerns related to architecture decision management.With the exception of the Decision Stakeholder Involvement viewpoint, the framework was evaluated in an industrial case study. The results are promising, as they show that decision views can be created with reasonable effort while satisfying many of the stakeholder concerns in decision documentation.", "num_citations": "147\n", "authors": ["169"]}
{"title": "Towards a pattern language for networked learning\n", "abstract": " The work of designing a useful, convivial networked learning environment is complex and demanding. People new to designing for networked learning face a number of major challenges when they try to draw on the experience of others\u2013whether that experience is shared informally, in the everyday language of educational practice, or through published research and evaluation studies, or through sets of action-oriented guidelines. In this paper we present a novel approach to sharing educational design experience, making use of an organisational and communicative framework derived from Christopher Alexander\u2019s work on pattern languages. We describe the structure and purpose of design patterns, show how they fit together in a pattern language, and illustrate the approach with reference to some design patterns for networked learning. For clarity, our presentation is set within a specific conception of the nature of designing for networked learning, but we aim to show how the patterns-based approach transcends such particularities. We suggest that design patterns offer a useful method for sharing design ideas in participatory educational design work.", "num_citations": "139\n", "authors": ["169"]}
{"title": "Variability in quality attributes of service-based software systems: A systematic literature review\n", "abstract": " ContextVariability is the ability of a software artifact (e.g., a system, component) to be adapted for a specific context, in a preplanned manner. Variability not only affects functionality, but also quality attributes (e.g., security, performance). Service-based software systems consider variability in functionality implicitly by dynamic service composition. However, variability in quality attributes of service-based systems seems insufficiently addressed in current design practices.ObjectiveWe aim at (a) assessing methods for handling variability in quality attributes of service-based systems, (b) collecting evidence about current research that suggests implications for practice, and (c) identifying open problems and areas for improvement.MethodA systematic literature review with an automated search was conducted. The review included studies published between the year 2000 and 2011. We identified 46 relevant studies\u00a0\u2026", "num_citations": "111\n", "authors": ["169"]}
{"title": "How do architecture patterns and tactics interact? A model and annotation\n", "abstract": " Software architecture designers inevitably work with both architecture patterns and tactics. Architecture patterns describe the high-level structure and behavior of software systems as the solution to multiple system requirements, whereas tactics are design decisions that improve individual quality attribute concerns. Tactics that are implemented in existing architectures can have significant impact on the architecture patterns in the system. Similarly, tactics that are selected during initial architecture design significantly impact the architecture of the system to be designed: which patterns to use, and how they must be changed to accommodate the tactics. However, little is understood about how patterns and tactics interact. In this paper, we develop a model for the interaction of patterns and tactics that enables software architects to annotate architecture diagrams with information about the tactics used and their impact on\u00a0\u2026", "num_citations": "109\n", "authors": ["169"]}
{"title": "Leveraging architecture patterns to satisfy quality attributes\n", "abstract": " Architectural design has been characterized as making a series of decisions that have system-wide impact. These decisions have side effects which can have significant impact on the system. However, the impact may be first understood much later; when the system architecture is difficult to change. Architecture patterns can help architects understand the impact of the architectural decisions at the time these decisions are made, because patterns contain information about consequences and context of the pattern usage. However, this information has been of limited use because it is not presented consistently or systematically. We discuss the current limitations of patterns on evaluating their impact on quality attributes, and propose integrating the information of patterns\u2019 impact on quality attributes in order to increase the usefulness of architecture patterns.", "num_citations": "105\n", "authors": ["169"]}
{"title": "Enriching software architecture documentation\n", "abstract": " The effective documentation of Architectural Knowledge (AK) is one of the key factors in leveraging the paradigm shift toward sharing and reusing AK. However, current documentation approaches have severe shortcomings in capturing the knowledge of large and complex systems and subsequently facilitating its usage. In this paper, we propose to tackle this problem through the enrichment of traditional architectural documentation with formal AK. We have developed an approach consisting of a method and an accompanying tool suite to support this enrichment. We evaluate our approach through a quasi-controlled experiment with the architecture of a real, large, and complex system. We provide empirical evidence that our approach helps to partially solve the problem and indicate further directions in managing documented AK.", "num_citations": "104\n", "authors": ["169"]}
{"title": "A systematic mapping study on the combination of software architecture and agile development\n", "abstract": " ContextCombining software architecture and agile development has received significant attention in recent years. However, there exists no comprehensive overview of the state of research on the architecture-agility combination.ObjectiveThis work aims to analyze the combination of architecture and agile methods for the purpose of exploration and analysis with respect to architecting activities and approaches, agile methods and practices, costs, benefits, challenges, factors, tools, and lessons learned concerning the combination.MethodA systematic mapping study (SMS) was conducted, covering the literature on the architecture-agility combination published between February 2001 and January 2014.ResultsFifty-four studies were finally included in this SMS. Some of the highlights: (1) a significant difference exists in the proportion of various architecting activities, agile methods, and agile practices employed in the\u00a0\u2026", "num_citations": "90\n", "authors": ["169"]}
{"title": "Empirically-grounded reference architectures: a proposal\n", "abstract": " A reference architecture describes core elements of the software architecture for systems that stem from the same domain. A reference architecture ensures interoperability of systems through standardization. It also facilitates the instantiation of new concrete architectures. However, we currently lack procedures for systematically designing reference architectures that are empirically-grounded. Being empirically-grounded would increase the validity and reusability of a reference architecture. We therefore present an approach which helps systematically design reference architectures. Our approach consists of six steps performed by the software architect and domain experts. It helps design reference architectures either from scratch, or based on existing architecture artifacts. We also illustrate how our approach could be applied to the design of two existing reference architectures found in literature.", "num_citations": "89\n", "authors": ["169"]}
{"title": "Past and future of software architectural decisions\u2013A systematic mapping study\n", "abstract": " ContextThe software architecture of a system is the result of a set of architectural decisions. The topic of architectural decisions in software engineering has received significant attention in recent years. However, no systematic overview exists on the state of research on architectural decisions.ObjectiveThe goal of this study is to provide a systematic overview of the state of research on architectural decisions. Such an overview helps researchers reflect on previous research and plan future research. Furthermore, such an overview helps practitioners understand the state of research, and how research results can help practitioners in their architectural decision-making.MethodWe conducted a systematic mapping study, covering studies published between January 2002 and January 2012. We defined six research questions. We queried six reference databases and obtained an initial result set of 28,895 papers. We\u00a0\u2026", "num_citations": "80\n", "authors": ["169"]}
{"title": "The effect of GoF design patterns on stability: a case study\n", "abstract": " Stability refers to a software system's resistance to the \u201cripple effect\u201d, i.e., propagation of changes. In this paper, we investigate the stability of classes that participate in instances/occurrences of GoF design patterns. We examine whether the stability of such classes is affected by (a) the pattern type, (b) the role that the class plays in the pattern, (c) the number of pattern occurrences in which the class participates, and (d) the application domain. To this end, we conducted a case study on about 65.000 Java open-source classes, where we performed change impact analysis on classes that participate in zero, one (single pattern), or more than one (coupled) pattern occurrences. The results suggest that, the application of design patterns can provide the expected \u201cshielding\u201d of certain pattern-participating classes against changes, depending on their role in the pattern. Moreover, classes that participate in coupled pattern\u00a0\u2026", "num_citations": "72\n", "authors": ["169"]}
{"title": "Mature architecting-a survey about the reasoning process of professional architects\n", "abstract": " Architecting is to a large extent a decision-making process. While many approaches and tools exist to support architects during the various activities of architecting, little guidance exists to support the reasoning part of decision-making. This is partly due to our limited understanding of how professional architects make decisions. We report on findings of a survey that we have conducted with 53 industrial software architects to find out how they reason in real projects. The results of the survey are interpreted with respect to the industrial context and the architecture literature. We derive reasoning best practices that can support especially inexperienced architects with optimizing their decision-making process.", "num_citations": "71\n", "authors": ["169"]}
{"title": "Forces on architecture decisions-a viewpoint\n", "abstract": " In this paper, the notion of forces as influences upon architecture decisions is introduced. To facilitate the documentation of forces as a part of architecture descriptions, we specify a decision forces viewpoint, which extends our existing framework for architecture decisions, following the conventions of the international architecture description standard ISO/IEC/IEEE 42010. The applicability of the viewpoint was validated in three case studies, in which senior software engineering students used it to document decisions in software projects, two of which conducted for industrial customers. The results show that the forces viewpoint is a well-received documentation approach, satisfying stakeholder concerns related to traceability between decision forces and architecture decisions.", "num_citations": "60\n", "authors": ["169"]}
{"title": "Decision-centric architecture reviews\n", "abstract": " Architecture evaluation is an important activity in the software engineering life cycle that ensures that the architecture satisfies stakeholders' expectations. Additionally, risks and issues can be uncovered before they cause tremendous costs later in the life cycle. Unfortunately, architecture evaluation isn't regularly practiced in industry. This article presents DCAR (decision-centric architecture review), an architecture evaluation method that uses architecture decisions as first-class entities. DCAR uncovers and evaluates the rationale behind the most important architecture decisions, considering the entire context in which the decisions were made. Furthermore, it's lightweight and can be performed during or after the design is finalized. Experiences in large industrial projects have shown that full-scale DCAR evaluations, including reporting, can be conducted in fewer than five person-days, while producing satisfying\u00a0\u2026", "num_citations": "55\n", "authors": ["169"]}
{"title": "Quality attributes and quality models for ambient assisted living software systems: A systematic mapping\n", "abstract": " Context: Ambient Assisted Living (AAL) has become an essential, multidisciplinary research topic, aiming at providing software systems and services that assist people in their everyday life activities. Considering the critical nature of AAL systems, several initiatives have already contributed to the improvement of their quality, by mainly focusing on their non-functional requirements. Despite the importance of quality assurance in AAL systems, there is a lack of a comprehensive analysis on how quality assurance is performed in such systems. This fact might in turn lead to an absence of standardization with regard to the quality assurance process of these systems.Objective: We provide a broad, detailed panorama about the state of the art on quality models (QMs) and quality attributes (QAs) that are important for the AAL domain.Method: We performed a Systematic Mapping (SM). We used six publication databases to\u00a0\u2026", "num_citations": "53\n", "authors": ["169"]}
{"title": "Difficulty of architectural decisions\u2013a survey with professional architects\n", "abstract": " Much research exists on architectural decisions, but little work describes architectural decisions in the real-world. In this paper, we present the results of a survey with 43 architects from industry. We study characteristics of 86 real-world architectural decisions and factors that contribute to their difficulty. Also, we compare decisions made by junior architects and senior architects. Finally, we compare good and bad architectural decisions. Survey results indicate that architectural decisions take an average time of eight working days. Dependencies between decisions and the effort required to analyze decisions are major factors that contribute to their difficulty. Compared to senior architects, junior architects spend a quarter of the time on making a decision. Good architectural decisions tend to include more decision alternatives than bad decisions. Finally, we found that 86% of architectural decisions are group\u00a0\u2026", "num_citations": "52\n", "authors": ["169"]}
{"title": "Using architectural decisions\n", "abstract": " There are increasing demands for the explicit rep-resentation and subsequent sharing and usage of architectural decisions in the software architecting process. However, there is little known on how to use these architectural decisions, or what type of stakeholders need to use them. This paper presents a use case model that arose from industrial needs, and is meant to explore how these needs can be satisfied through the effective usage of architectural decisions by the relevant stakeholders. The use cases are currently being validated in practice through industrial case studies. As a result of this validation, we argue that the usage of architectural decisions by the corresponding stakeholders can enhance the quality of software architecture.", "num_citations": "49\n", "authors": ["169"]}
{"title": "Describing, instantiating and evaluating a reference architecture: A case study\n", "abstract": " The result of a domain maturing is the emergence of reference architectures that offer numerous advantages to software architects and other stakeholders. However there is no straightforward way to describe a reference architecture and in sequence to design instances for specific systems, while at the same time assuring the quality of the end product. This paper presents an approach of describing a reference architecture, instantiating it into a software architecture by making implementation decisions and evaluating it with respect to quality attributes. A case study for the approach is drawn from the domain of Learning Management Systems which is maturing and would greatly benefit from a reference architecture. This work is based upon the IEEE standard for architectural description, on wellestablished software engineering practices, and on the empirical results of designing, developing and evaluating Learning Management Systems.", "num_citations": "47\n", "authors": ["169"]}
{"title": "A practice-driven systematic review of dependency analysis solutions\n", "abstract": " When following architecture-driven strategies to develop large software-intensive systems, the analysis of the dependencies is not an easy task. In this paper, we report a systematic literature review on dependency analysis solutions. Dependency analysis concerns making dependencies due to interconnections between programs or system components explicit. The review is practice-driven because its research questions, execution, and reporting were influenced by the practice of a group of software architects at Philips Healthcare MRI. The review results in an overview and assessment of the state-of-the-art and applicability of dependency analysis. The overview provides insights about definitions related to dependency analysis, the sort of development activities that need dependency analysis, and the classification and description of a number of dependency analysis solutions. The contribution of this\u00a0\u2026", "num_citations": "46\n", "authors": ["169"]}
{"title": "Requirements reasoning for distributed requirements analysis using semantic wiki\n", "abstract": " In large-scale collaborative software projects, thousands of requirements with complex interdependencies and different granularity spreading in different levels are elicited, documented, and evolved during the project lifecycle. Non-technical stakeholders involved in requirements engineering activities rarely apply formal techniques; therefore it is infeasible to automatically detect problems in requirements. This situation becomes even worse in a distributed context when all sites are responsible to maintain their own requirements list using various requirements models and management tools, and the detection of requirements problems across multiple sites is error-prone, and un-affordable if performed manually. This paper proposes an integrated approach of basing distributed requirements analysis on semantic Wiki by requirements reasoning. First, the functions concerning reasoning support provided by semantic\u00a0\u2026", "num_citations": "44\n", "authors": ["169"]}
{"title": "Incorporating fault tolerance tactics in software architecture patterns\n", "abstract": " One important way that an architecture impacts fault tolerance is by making it easy or hard to implement measures that improve fault tolerance. Many such measures are described as fault tolerance tactics. We studied how various fault tolerance tactics can be implemented in the best-known architecture patterns. This shows that certain patterns are better suited to implementing fault tolerance tactics than others, and that certain alternate tactics are better matches than others for a given pattern. System architects can use this data to help select architecture patterns and tactics for reliable systems.", "num_citations": "44\n", "authors": ["169"]}
{"title": "A survey on quality attributes in service-based systems\n", "abstract": " Service-based systems have become popular in the software industry. In software engineering, it is widely acknowledged that requirements on quality attributes (e.g., performance, security, reliability) significantly impact the design of software systems. This study explores the role of quality attributes during the design of service-based systems. We investigate the significance of quality attributes when designing service-based systems and how quality attributes are addressed through design decisions, across application domains, and related to other aspects of software development, e.g., architecture documentation. We conducted a descriptive survey. The survey was done as an online questionnaire targeting practitioners. Furthermore, we included researchers with practical design experience. We obtained 56 valid responses. Most survey participants consider quality attributes and functionality as equally\u00a0\u2026", "num_citations": "42\n", "authors": ["169"]}
{"title": "Constraints for the design of variability-intensive service-oriented reference architectures\u2013An industrial case study\n", "abstract": " ContextService-oriented architecture has become a widely used concept in software industry. However, we currently lack support for designing variability-intensive service-oriented systems. Such systems could be used in different environments, without the need to design them from scratch. To support the design of variability-intensive service-oriented systems, reference architectures that facilitate variability in instantiated service-oriented architectures can help.ObjectiveThe design of variability-intensive service-oriented reference architectures is subject to specific constraints. Architects need to know these constraints when designing such reference architectures. Our objective is to identify these constraints.MethodAn exploratory case study was performed in the context of local e-government in the Netherlands to study constraints from the perspective of (a) the users of a variability-intensive service-oriented system\u00a0\u2026", "num_citations": "42\n", "authors": ["169"]}
{"title": "Does decision documentation help junior designers rationalize their decisions? A comparative multiple-case study\n", "abstract": " Software architecture design is challenging, especially for junior software designers. Lacking practice and experience, junior designers need process support in order to make rational architecture decisions. In this paper, we present the results of a comparative multiple-case study conducted to find out if decision viewpoints from van Heesch et al., 2012, van Heesch et al., in press can provide such a support. The case study was conducted with four teams of software engineering students working in industrial software projects. Two of the four teams were instructed to document their decisions using decision viewpoints; the other two teams were not instructed to do so. We observed the students for a period of seven weeks by conducting weekly focus groups and by analyzing their work artifacts and minutes. Our findings suggest that junior designers who use decision viewpoints are more systematic in exploring and\u00a0\u2026", "num_citations": "40\n", "authors": ["169"]}
{"title": "Tools and technologies for architecture knowledge management\n", "abstract": " As management of architectural knowledge becomes vital for improving an organization\u2019s architectural capabilities, support for (semi-) automating this management is required. There exist already several tools that specialize in architecture knowledge management, as well as generic technologies that can potentially be used for this purpose. Both tools and technologies cover a wide number of potential use cases for architecture knowledge management. In this chapter, we survey the existing tool support and related technologies for different architecture knowledge management strategies, and present them according to the use cases they offer.", "num_citations": "40\n", "authors": ["169"]}
{"title": "Sharing the architectural knowledge of quantitative analysis\n", "abstract": " Sharing the architectural knowledge of architectural analysis among stakeholders proves to be troublesome. This causes problems in and with architectural analysis, which can have serious consequences for the quality of a system being developed, as this quality might be incompletely or wrongly assessed. This paper presents a domain model, which can be used as a common ground among analysts and architects to capture and explicitly share such knowledge. This enables a way to overcome some of the obstacles imposed by the multi-disciplinary context in which architectural analysis takes place. To apply the domain model in practice, we have created a tool implementing (part of) this domain model for capturing and using explicit architectural knowledge during analysis. We validate the tool and domain model in the context of an industrial case study.", "num_citations": "39\n", "authors": ["169"]}
{"title": "An architecture for open learning management systems\n", "abstract": " There exists an urgent demand on defining architectures for Learning Management Systems, so that high-level frameworks for understanding these systems can be discovered, and quality attributes like portability, interoperability, reusability and modifiability can be achieved. In this paper we propose a prototype architecture aimed to engineer Open Learning Management Systems, that professes state-of-the-art software engineering techniques such as layered structure and component-based nature. Our work is based upon standards and practices from international standardization bodies, on the empirical results of designing, developing and evaluating Learning Management Systems and on the practices of well-established software engineering techniques.", "num_citations": "39\n", "authors": ["169"]}
{"title": "Modelling web-based instructional systems\n", "abstract": " The size and complexity of modern instructional systems, which are based on the World Wide Web, bring about great intricacy in their crafting, as there is not enough knowledge or experience in this field. This imposes the use of new instructional design models in order to achieve risk-mitigation, cost and time efficiency, high pedagogical quality of the end product, which will capitalise on the potential of the networked technologies. This paper presents a model for constructing such systems, using a problem solving approach that defines the solution of an instructional problem in both a pedagogical and a technical manner in a holistic view. This model tries to standardise the development of such systems supporting reusability at the design as well as the implementation level. The pedagogical or non-technical solution is comprised of five interconnected sets of learning elements: the learning objectives, the didactic\u00a0\u2026", "num_citations": "37\n", "authors": ["169"]}
{"title": "An overview of software engineering approaches to service oriented architectures in various fields\n", "abstract": " For the last few years, a rise has been observed in research activity in Service Oriented Architectures, with applications in different sectors. Several new technologies have been introduced and even more are being currently researched and aimed to the future. In this paper we present and analyze some of the most influential approaches from a software engineerpsilas point of view that belong either to the academic or to the industrial field. Despite their differences though, all of these approaches share a service oriented mentality, with the purpose of lessening the issues of clients and companies, students and teachers, citizens and government employees alike. Lastly, we discuss our findings from the comparison and present possible new research opportunities for the immediate future.", "num_citations": "36\n", "authors": ["169"]}
{"title": "Analysis of architecture pattern usage in legacy system architecture documentation\n", "abstract": " Architecture patterns are an important tool in architectural design. However, while many architecture patterns have been identified, there is little in-depth understanding of their actual use in software architectures. For instance, there is no overview of how many patterns are used per system or which patterns are the most common or most important for particular domains. In addition, little is known of how architecture patterns ay interact with each other. We studied architecture documentation of 47 systems to learn about their architecture patterns. Most systems had two or more architecture patterns, and certain patterns were prominent in different application domains. We identified several patterns that are commonly used together, and are beginning to learn how such combinations may impact system quality attributes. This information can be used to help designers select architecture patterns, can help people learn\u00a0\u2026", "num_citations": "36\n", "authors": ["169"]}
{"title": "Identifying extract method refactoring opportunities based on functional relevance\n", "abstract": " `Extract Method' is considered one of the most frequently applied and beneficial refactorings, since the corresponding Long Method smell is among the most common and persistent ones. Although Long Method is conceptually related to the implementation of diverse functionalities within a method, until now, this relationship has not been utilized while identifying refactoring opportunities. In this paper we introduce an approach (accompanied by a tool) that aims at identifying source code chunks that collaborate to provide a specific functionality, and propose their extraction as separate methods. The accuracy of the proposed approach has been empirically validated both in an industrial and an open-source setting. In the former case, the approach was capable of identifying functionally related statements within two industrial long methods (approx. 500 LoC each), with a recall rate of 93 percent. In the latter case\u00a0\u2026", "num_citations": "35\n", "authors": ["169"]}
{"title": "Handling variability in software architecture: problems and implications\n", "abstract": " Variability helps manage differences and commonalities within and across software systems. As variability is reflected in and facilitated through the software architecture, it is important to understand the problems that architects face when carrying out their tasks. This would help us improve methods for architecting variability-intensive software systems. In this paper, we therefore present an exploratory study to identify problems that occur when performing variability-related tasks during software architecting. Our subjects were 27 graduate students. We identified eleven problems as experienced by the subjects of our study. The paper also presents implications of the findings for the software architecture field. In particular, we discuss implications for architecture description, methods and tools, and the training of architects.", "num_citations": "34\n", "authors": ["169"]}
{"title": "Pattern-based architecture reviews\n", "abstract": " Software architecture reviews are effective in identifying potential problems in architectures, however, are expensive, time-consuming, and generally rely on extensive architecture documentation. An architecture review that accommodates projects with very short development cycles, minimal documentation, or frequently changing requirements could be useful if it identifies important architectural issues. We developed a useful, inexpensive architecture review method that uses the architecture patterns in a system to identify important issues in the achievement of quality attributes.", "num_citations": "33\n", "authors": ["169"]}
{"title": "Capturing tacit architectural knowledge using the repertory grid technique (NIER track):(Nier track)\n", "abstract": " Knowledge about the architecture of a software-intensive system tends to vaporize easily. This leads to increased maintenance costs. We explore a new idea: utilizing the repertory grid technique to capture tacit architectural knowledge. Particularly, we investigate the elicitation of design decision alternatives and their characteristics. To study the applicability of this idea, we performed an exploratory study. Seven independent subjects applied the repertory grid technique to document a design decision they had to take in previous projects. Then, we interviewed each subject to understand their perception about the technique. We identified advantages and disadvantages of using the technique. The main advantage is the reasoning support it provides; the main disadvantage is the additional effort it requires. Also, applying the technique depends on the context of the project. Using the repertory grid technique is a\u00a0\u2026", "num_citations": "32\n", "authors": ["169"]}
{"title": "Pattern-driven architectural partitioning: Balancing functional and non-functional requirements\n", "abstract": " One of the vexing challenges of software architecture is the problem of satisfying the functional specifications of the system to be created while at the same time meeting its non-functional needs. In this work we focus on the early stages of the software architecture process, when initial high-level system partitioning is being performed. Specifically, we study the problem of system partitioning with respect to both functional requirements and quality attributes. Architecture patterns are particularly well-suited to simultaneously addressing functional requirements and quality attributes. They support architects in considering both, understanding the impact of decisions on other attributes, and making tradeoffs among them. Existing architectural design methods accommodate pattern use, but do not exploit it in detail. We propose a pattern-based approach that leverages the benefits of patterns, and fits well with existing methods.", "num_citations": "32\n", "authors": ["169"]}
{"title": "Architecture sustainability [guest editors' introduction]\n", "abstract": " Software architecture is the foundation of software system development, encompassing a system's architects' and stakeholders' strategic decisions. A special issue of IEEE Software is intended to raise awareness of architecture sustainability issues and increase interest and work in the area. The first Web extra at http://youtu.be/wUGHvocfix0 is an audio interview in which Davide Falessi speaks with guest editors Paris Avgeriou and Rich Hilliard about the importance of architecture sustainability including the three types of approaches they distinguish for handling change systematically, listed in an order of increasing severity: refactoring, renovating, and rearchitecting. The second Web extra at http://youtu.be/T-neSlUhAv0 is an audio interview in which Brian Brannon speaks with guest editor Michael Stal about his experiences with architecture sustainability as a principal engineer at Siemens AG's Corporate\u00a0\u2026", "num_citations": "31\n", "authors": ["169"]}
{"title": "Collaborative software architecting through knowledge sharing\n", "abstract": " In the field of software architecture, there has been a paradigm shift from describing the outcome of the architecting process to documenting architectural knowledge, such as design decisions and rationale. Moreover, in a global, distributed setting, software architecting is essentially a collaborative process in which sharing and reusing architectural knowledge is a crucial and indispensible part. Although the importance of architectural knowledge has been recognized for a considerable period of time, there is still no systematic process emphasizing the use of architectural knowledge in a collaborative context. In this chapter, we present a two-part solution to this problem: a collaborative architecting process based on architectural knowledge and an accompanying tool suite that demonstrates one way to support the process.", "num_citations": "31\n", "authors": ["169"]}
{"title": "Agilo: a highly flexible groupware framework\n", "abstract": " Today there exist many frameworks for the development of synchronous groupware applications. Although the domain of these applications is very heterogeneous, existing frameworks provide only limited flexibility to integrate diverse groupware applications in a meaningful way. We identify five variation points that a groupware framework needs to offer in a flexible way in order to facilitate the integration of diverse groupware applications. Based on these variation points, we propose a groupware framework called Agilo that tries to overcome the limited flexibility of existing frameworks by offering multiple realizations of these variation points and providing a modular architecture to simplify the integration of applications and the extensibility and adaptability to different application and integration requirements.", "num_citations": "29\n", "authors": ["169"]}
{"title": "Naive architecting-understanding the reasoning process of students\n", "abstract": " Software architecting entails making architecture decisions, which requires a lot of experience and expertise. Current literature contains several methods and processes to support architects with architecture design, documentation and evaluation but not with the design reasoning involved in decision-making. In order to derive a systematic reasoning process we need to understand the current state of practice and propose ways to improve it. In this paper we present the results of a survey that was conducted with undergraduate software engineering students, aiming to find out the innate reasoning process during architecting. The results of the survey are compared to the existing architecture literature in order to identify promising directions towards systematic reasoning processes.", "num_citations": "26\n", "authors": ["169"]}
{"title": "Sharing architecture knowledge through models: quality and cost\n", "abstract": " In the field of software architecture, there has been a paradigm shift from describing structural information, such as components and connectors, to documenting architectural knowledge (AK), such as design decisions and rationale. To this end, a series of industrial and academic domain models have been proposed for defining the concepts and their relationships in the field of AK. To a large extent the merit of this new paradigm is to share and reuse AK across organizations, especially in geographically distributed settings. However, the employment of different AK domain models by different parties makes effective AK sharing challenging, as it needs to be mapped from one domain model to another. In this paper, we investigate two different approaches for sharing AK, based on either direct or indirect mapping between different AK domain models. We compare the cost and quality of these two approaches, with\u00a0\u2026", "num_citations": "26\n", "authors": ["169"]}
{"title": "Assumptions and their management in software development: A systematic mapping study\n", "abstract": " ContextAssumptions are constantly made by stakeholders or generated automatically in software development. However, there is a lack of systematic analysis and comprehensive understanding of the research and practice regarding assumptions and their management.ObjectiveThis work aims to explore and analyze the state of the art on assumptions and their management in software development.MethodA systematic mapping study that covers the literature from January 2001 to December 2015 on assumptions and their management in software development.Results134 studies were included: (1) The studies were published in 94 venues, which indicates that assumptions and their management has been a broad topic in software engineering. (2) Only 21 studies defined the assumption concept. (3) Most assumptions are made for or related to the artifacts in requirements engineering and software design, which\u00a0\u2026", "num_citations": "25\n", "authors": ["169"]}
{"title": "Knowledge architect: A tool suite for managing software architecture knowledge\n", "abstract": " Management of software architecture knowledge (AK) is vital for improving an organization\u2019s architectural capabilities. To support the architecting process within our industrial partner: Astron, the Dutch radio astronomy institute, we implemented the Knowledge Architect (KA): a tool suite for creating, using, translating, sharing and managing AK. The KA tool suite entails specialized support for integrating the various process activities and supporting collaboration between the stakeholders. This report discusses the tools included and features of KA. We also discuss different usages of the KA for capturing and using AK to support the architecture process.", "num_citations": "25\n", "authors": ["169"]}
{"title": "Analyzing the actual execution of a large software-intensive system for determining dependencies\n", "abstract": " In this paper, we present a dynamic analysis approach to increase the understandability of a large software-intensive system, more particularly to enable the identification of dependencies between its execution entities. This approach analyzes the execution of a software system in a top-down fashion to cope with complexity and uses execution entities such as scenarios, components, and processes rather than code artifacts such as modules, classes, or objects. The approach synchronizes and analyzes two sources of execution information (logging and process activity), and builds architectural views of the system execution, according to a specific metamodel. We have validated this approach on an MRI scanner, a representative large software-intensive system, enabling the identification of dependencies in the execution of its software subsystem.", "num_citations": "25\n", "authors": ["169"]}
{"title": "An embedded multiple-case study on oss design quality assessment across domains\n", "abstract": " Context: Investing on Open Source Software (OSS) as a \"code reuser\", involves certain risks, such as the difficulty in understanding the level of OSS design quality Aim: We investigate the levels of design quality of OSS projects, across different application domains. Method: We conducted a case study, which is the most fitting research method for observing a phenomenon in its real context, which is active for a long period of time, and for which variables cannot be controlled. Results: We present the values for seven design quality metrics of 546 OSS projects, as well as the statistically significant differences across application domains. Conclusions: The results of the study suggest that OSS application domains correlate with several design quality characteristics, in the sense that projects within one application domain appear to have similar levels of design quality. In addition to that, the results reveal application\u00a0\u2026", "num_citations": "24\n", "authors": ["169"]}
{"title": "From collective knowledge to intelligence: pre-requirements analysis of large and complex systems\n", "abstract": " Requirements engineering is essentially a social collaborative activity in which involved stakeholders have to closely work together to communicate, elicit, negotiate, define, confirm, and finally come up with the requirements for the system to be implemented or upgraded. In the development of large and complex systems, with a huge number of uncertain stakeholders, the requirements engineering process becomes a challenging task due to overwhelming and dynamic social interactions, tradeoffs, and collective decisions made by above stakeholders. Traditional approaches and techniques are deficient in supporting this kind of social interactions in requirements-related activities, and managing the evolving requirements and their traceability caused by the social interactions. This paper proposes to address the challenges in the pre-requirements analysis of large and complex systems by employing the techniques\u00a0\u2026", "num_citations": "24\n", "authors": ["169"]}
{"title": "Investigating the effect of design patterns on energy consumption\n", "abstract": " Gang of Four (GoF) patterns are well\u2010known best practices for the design of object\u2010oriented systems. In this paper, we aim at empirically assessing their relationship to energy consumption, ie, a performance indicator that has recently attracted the attention of both researchers and practitioners. To achieve this goal, we investigate pattern\u2010participating methods (ie, those that play a role within the pattern) and compare their energy consumption to the consumption of functionally equivalent alternative (nonpattern) solutions. We obtained the alternative solution by refactoring the pattern instances using well\u2010known transformations (eg, replace polymorphism with conditional statements). The comparison is performed on 169 methods of 2 GoF patterns (namely, State/Strategy and Template Method), retrieved from 2 well\u2010known open source projects. The results suggest that for the majority of cases the alternative design\u00a0\u2026", "num_citations": "23\n", "authors": ["169"]}
{"title": "The notion of variability in software architecture: results from a preliminary exploratory study\n", "abstract": " Context: In the software product line domain, the concept of variability is well recognized. However, variability in the context of software architecture still seems to be poorly understood. Objective: In this paper, we aim at contributing to the development of a basic understanding of the notion of variability in the software architecture domain, beyond the idea of product lines. Method: We perform a preliminary exploratory study which consists of two parts: an expert survey among 11 subjects, and a mini focus group with 4 participants. For both parts, we collect and analyze mostly qualitative data. Results: Our observations indicate that there seems to be no common understanding of\" variability\" in the context of software architecture. On the other hand, some challenges related to variability in software architecture are similar to challenges identified in the product line domain. Conclusions: Variability in software architecture\u00a0\u2026", "num_citations": "23\n", "authors": ["169"]}
{"title": "Investigating quality trade-offs in open source critical embedded systems\n", "abstract": " During the development of Critical Embedded Systems (CES), quality attributes that are critical for them (e.g., correctness, security, etc.) must be guaranteed. However, this often leads to complex quality trade-offs, since non-critical qualities (e.g., reusability, understandability, etc.) may be compromised. In this study, we aim at empirically investigating the existence of quality trade-offs, on the implemented architecture, among versions of open source CESs, and compare them with those of systems from other application domains. The results of the study suggest that in CES, non-critical quality attributes are usually compromised in favor of critical quality attributes. On the contrary, we have not observed compromises of critical qualities in favor of non-critical ones in either CES or other application domains. Furthermore, quality trade-offs are more frequent among critical quality attributes, compared to trade-offs among\u00a0\u2026", "num_citations": "22\n", "authors": ["169"]}
{"title": "Patterns for designing Learning Management systems\n", "abstract": " Learning Management Systems are sophisticated web-based applications that are being engineered today in increasing numbers by numerous institutions and companies that want to get involved in e-learning either for providing services to third parties, or for educating and training their own people. Even though the construction of such systems has been taking place for many years, they are still designed and developed from scratch. The reason is that experience from previous Learning Management Systems, is not codified or documented, resulting in forcing the development teams to \u2018re-invent the wheel\u2019. This paper presents an approach of recording design experience in the form of design patterns for Learning Management Systems and aims at developing a pattern language for these systems. The proposed design patterns are semantically organized and categorized, and form the basic core of a pattern language for Learning Management Systems.", "num_citations": "22\n", "authors": ["169"]}
{"title": "Implementing reliability: the interaction of requirements, tactics and architecture patterns\n", "abstract": " An important way that the reliability of a software system is enhanced is through the implementation of specific run-time measures called runtime tactics. Because reliability is a system-wide property, tactic implementations affect the software structure and behavior at the system, or architectural level. For a given architecture, different tactics may be a better or worse fit for the architecture, depending on the requirements and how the architecture patterns used must change to accommodate the tactic: different tactics may be a better or worse fit for the architecture. We found three important factors that influence the implementation of reliability tactics. One is the nature of the tactic, which indicates whether the tactic influences all components of the architecture or just a subset of them. The second is the interaction between architecture patterns and tactics: specific tactics and patterns are inherently compatible or\u00a0\u2026", "num_citations": "21\n", "authors": ["169"]}
{"title": "Defining execution viewpoints for a large and complex software-intensive system\n", "abstract": " An execution view is an important asset for developing large and complex systems. An execution view helps practitioners to describe, analyze, and communicate what a software system does at runtime and how it does it. In this paper, we present an approach to define execution viewpoints for an existing large and complex software intensive system. This definition approach enables the customization and extension of a set of predefined viewpoints to address the requirements of a specific development organization. The application of this approach has helped us to identify a set of execution viewpoints that we are currently using to construct execution views of an MRI system, a large software-intensive system in the healthcare domain.", "num_citations": "20\n", "authors": ["169"]}
{"title": "An approach for usability evaluation of e-commerce sites based on design patterns and heuristics criteria\n", "abstract": " DEPTH (evaluation approach based on DEsign PaTterns & Heuristic criteria) is an approach for performing scenario-based heuristic usability evaluation for e-commerce sites. It is comprised of a preparatory and execution phase where specific steps are performed for evaluating the usability along three axis: usability comparison tests among similar e-commerce sites, expert/heuristic evaluation, scenario-based user inspection/enquiry sessions.", "num_citations": "20\n", "authors": ["169"]}
{"title": "A survey on software architectural assumptions\n", "abstract": " ContextManaging architectural assumptions (AA) during the software lifecycle, as an important type of architecture knowledge, is critical to the success of projects. However, little empirical evidence exists on the understanding, identification, and recording of AA from the practitioners\u2019 perspective.ObjectiveWe investigated the current situation on (1) how practitioners understand AA and its importance, and (2) whether and how practitioners identify and record AA in software development.MethodA web-based survey was conducted with 112 practitioners, who use Chinese as native language and are engaged in software development in China.ResultsThe main findings are: (1) AA are important in both software architecting and development. However, practitioners understand AA in different ways; (2) only a few respondents identified and recorded AA in their projects, and very few approaches and tools were used for\u00a0\u2026", "num_citations": "19\n", "authors": ["169"]}
{"title": "A variability viewpoint for enterprise software systems\n", "abstract": " Many of today's enterprise software systems are subject to variability. For example, enterprise software systems often run in different business units of an organization, with each unit having its own detailed requirements. Systematic handling of variability allows a software system to be adjusted for different contexts, by planning for adaptation during architecture design. As variability is system-wide, it is reflected in the software architecture. To facilitate the representation and analysis of variability in the architecture of enterprise software systems, we propose an architecture viewpoint. To define a reusable variability viewpoint, we elicited stakeholders and concerns through exploratory studies. We also show how the viewpoint was applied for describing variability in a large-scale e-government system.", "num_citations": "19\n", "authors": ["169"]}
{"title": "A top-down strategy to reverse architecting execution views for a large and complex software-intensive system: An experience report\n", "abstract": " This article is an experience report about the application of a top-down strategy to use and embed an architecture reconstruction approach in the incremental software development process of the Philips MRI scanner, a representative large and complex software-intensive system. The approach is an iterative process to construct execution views without being overwhelmed by the system size and complexity. An execution view contains architectural information that describes what the software of a software-intensive system does at runtime and how it does this. The application of the strategy is illustrated with a case study, the construction of an up-to-date execution view for the start-up process of the Philips MRI scanner. The construction of this view helped the development organization to quickly reduce about 30% the start-up time of the scanner, and set up a new system benchmark for assuring the system\u00a0\u2026", "num_citations": "19\n", "authors": ["169"]}
{"title": "A comparative analysis of reference architectures for healthcare in the ambient assisted living domain\n", "abstract": " Population aging has brought important challenges at social, economical, and healthcare issues, mainly due to the increasing number of people that need intensive care. Ambient Assisted Living (AAL) systems that aim at assisting people in their health-related activities have emerged. In another perspective, Reference Architectures (RAs) are a special type of software architecture that promotes reuse of design expertise and facilitates the development, standardization, and evolution of software systems. During the last years, important RAs for AAL systems have been created. However, there is a lack of studies that compare RAs for healthcare systems in AAL domain, making the selection among RAs a rather difficult task. In this paper, we present a comparative analysis and evaluate the completeness of that healthcare RAs. Specifically, we intend to offer: (i) a guide to select the most complete and adequate RA for\u00a0\u2026", "num_citations": "18\n", "authors": ["169"]}
{"title": "Qualitative analysis of the impact of soa patterns on quality attributes\n", "abstract": " Software architecture patterns are proven and reusable solutions to common architecture design problems. One characteristic of architecture patterns is that they affect quality attributes (e.g., performance, reliability). Over the past years, architecture patterns for service-based systems have been proposed. In this paper we report initial findings about the impact of architecture patterns for service-based systems on quality attributes of service-based systems. We related more than 70 SOA patterns from a patterns catalogue to a quality model for service-based systems. Based on the description of the patterns in the catalogue, we characterized the interaction of patterns and quality attributes. We found several patterns which do not seem to explicitly address quality attributes. Our findings can be used to select SOA patterns for architecture design. Also, our findings point to directions for further research: Our preliminary\u00a0\u2026", "num_citations": "18\n", "authors": ["169"]}
{"title": "Architectural patterns for collaborative applications\n", "abstract": " There is currently little reuse of either design or code in the development of collaborative applications. Though there are some application frameworks for this domain, they tend to be rather inflexible in the functionality they offer. This paper seeks to provide design reuse in the form of architectural patterns that focus on low-level horizontal issues: distribution, message exchange, functional decomposition, sharing data, concurrency and synchronisation. We base these patterns on a number of well-established patterns in the domain of distributed applications, concentrating on the specific issues that are encountered in the domain of collaborative applications. We also outline the relation between these low-level architectural patterns and the high-level functionality that collaborative applications offer. By codifying this knowledge and experience in the form of patterns, we hope for a wider support of low-level\u00a0\u2026", "num_citations": "18\n", "authors": ["169"]}
{"title": "Design patterns in adaptive web-based educational systems: An overview\n", "abstract": " Adaptive Web-based Educational Systems represent an emerging technology that provides a unique advantage over traditional Web-based Educational Systems; that is the ability to adapt to the user's needs, goals, preferences etc. Adaptive Web-based Educational Systems are increasingly becoming part of the mainstream education, yet there does not exist a disciplined way of designing them-most of the development is ad-hoc. This paper aims to fill this void, which is the absence of disciplined design, by recording the expertise of existing Adaptive Web-based Educational Systems in the form of design patterns. We present a categorization of the patterns according to an established paradigm in Adaptive Hypermedia, we examine the patterns in one of these categories and provide an exemplary pattern.", "num_citations": "18\n", "authors": ["169"]}
{"title": "Size and cohesion metrics as indicators of the long method bad smell: An empirical study\n", "abstract": " Source code bad smells are usually resolved through the application of well-defined solutions, ie, refactorings. In the literature, software metrics are used as indicators of the existence and prioritization of resolving bad smells. In this paper, we focus on the long method smell (ie one of the most frequent and persistent bad smells) that can be resolved by the extract method refactoring. Until now, the identification of long methods or extract method opportunities has been performed based on cohesion, size or complexity metrics. However, the empirical validation of these metrics has exhibited relatively low accuracy with regard to their capacity to indicate the existence of long methods or extract method opportunities. Thus, we empirically explore the ability of size and cohesion metrics to predict the existence and the refactoring urgency of long method occurrences, through a case study on java open-source methods. The\u00a0\u2026", "num_citations": "17\n", "authors": ["169"]}
{"title": "Defining and documenting execution viewpoints for a large and complex software-intensive system\n", "abstract": " An execution view is an important asset for developing large and complex systems. An execution view helps practitioners to describe, analyze, and communicate what a software system does at runtime and how it does it. In this paper, we present an approach to define and document viewpoints that guide the construction and use of execution views for an existing large and complex software-intensive system. This approach includes the elicitation of the organization's requirements for execution views, the initial definition and validation of a set of execution viewpoints, and the documentation of the execution viewpoints. The validation and application of the approach have helped us to produce mature viewpoints that are being used to support the construction and use of execution views of the Philips Healthcare MRI scanner, a representative large software-intensive system in the healthcare domain.", "num_citations": "17\n", "authors": ["169"]}
{"title": "Learning Technology Systems: issues, trends, challenges\n", "abstract": " This paper elaborates on a comparative analysis of contemporary LTSs. We have selected a number of the most important, commonly used, modern LTSs and put them through a thorough evaluation process, based on the services, tools, and features they support, and the usability of their hypertext user interface. The result of the evaluation is twofold: to explore the utility of LTSs and consequently discover the real nature of these systems, based on the features they support; and to delve into the usability of LTSs, a critical factor in the acceptance of these systems by the market.", "num_citations": "17\n", "authors": ["169"]}
{"title": "Architecting systems of systems: A tertiary study\n", "abstract": " Context: The term System of Systems (SoS) has increasingly been used in a wide variety of domains to describe those systems composed of independent constituent systems that collaborate towards a mission that they could not accomplish on their own. There is a significant volume of research by the software architecture community that aims to overcome the challenges involved in architecting SoS, as evidenced by the number of secondary studies in the field published so far. However, the boundaries of such research do not seem to be well defined, at least partially, due to the emergence of SoS-adjacent areas of interest like the Internet of Things.Objective: This paper aims to investigate the current state of research on SoS architecting by synthesizing the demographic data, assessing the quality and the coverage of architecting activities and software quality attributes by the research, and distilling a concept map\u00a0\u2026", "num_citations": "16\n", "authors": ["169"]}
{"title": "Resolving architectural mismatches of COTS through architectural reconciliation\n", "abstract": " The integration of COTS components into a system under development entails architectural mismatches. These have been tackled, so far, at the component level, through component adaptation techniques, but they also must be tackled at an architectural level of abstraction. In this paper we propose an approach for resolving architectural mismatches, with the aid of architectural reconciliation. The approach consists of designing and subsequently reconciling two architectural models, one that is forward-engineered from the requirements and another that is reverse-engineered from the COTS-based implementation. The final reconciled model is optimally adapted both to the requirements and to the actual COTS-based implementation. The contribution of this paper lies in the application of architectural reconciliation in the context of COTS-based software development. Architectural modeling is based upon the\u00a0\u2026", "num_citations": "16\n", "authors": ["169"]}
{"title": "What can violations of good practices tell about the relationship between GoF patterns and run-time quality attributes?\n", "abstract": " ContextGoF patterns have been extensively studied with respect to the benefit they provide as problem-solving, communication and quality improvement mechanisms. The latter has been mostly investigated through empirical studies, but some aspects of quality (esp. run-time ones) are still under-investigated.ObjectiveIn this paper, we study if the presence of patterns enforces the conformance to good coding practices. To achieve this goal, we explore the relationship between the presence of GoF design patterns and violations of good practices related to source code correctness, performance and security, via static analysis.MethodSpecifically, we exploit static analysis so as to investigate whether the number of violations of good coding practices identified on classes is related to: (a) their participation in pattern occurrences, (b) the pattern category, (c) the pattern in which they participate, and (d) their role within the\u00a0\u2026", "num_citations": "15\n", "authors": ["169"]}
{"title": "A top\u2010down approach to construct execution views of a large software\u2010intensive system\n", "abstract": " This paper presents an approach to construct execution views, which are views that describe what the software of a software\u2010intensive system does at runtime and how it does it. The approach represents an architecture reconstruction solution based on a metamodel, a set of viewpoints, and a dynamic analysis technique. The metamodel and viewpoints capture the conventions that can be used to describe the runtime of a system developed by a particular organization. The dynamic analysis technique is used to extract and abstract runtime information from a combination of system logging and runtime measurements in a top\u2010down fashion. The approach was developed and validated constructing execution views for a magnetic resonance imaging scanner developed by Philips Healthcare. Therefore, the approach represents a solution that can be applied at similar large and complex software\u2010intensive systems\u00a0\u2026", "num_citations": "15\n", "authors": ["169"]}
{"title": "Modeling learning technology systems as business systems\n", "abstract": " The design of Learning Technology Systems, and the Software Systems that support them, is largely conducted on an intuitive, ad hoc basis, thus resulting in inefficient systems that defectively support the learning process. There is now justifiable, increasing effort in formalizing the engineering of Learning Technology Systems in order to achieve better learning effectiveness as well as development efficiency. This paper presents such an approach for designing Learning Technology Systems and their most popular specialization, the Web-based Learning Systems, by modeling them as business systems, using business-modeling methods. The aim is to provide an in-depth analysis and comprehension of the Learning Technology Systems and Web-based Learning Systems\u2019 domain, that can be used for improving the systems themselves, as well as for building the supporting software systems. Our work is\u00a0\u2026", "num_citations": "15\n", "authors": ["169"]}
{"title": "The role of quality attributes in service-based systems architecting: a survey\n", "abstract": " Quality attributes (QA) play a fundamental role when architecting software systems. However, in contrast to QA in traditional software systems, the role of QA when architecting service-based systems (SBS) has not yet been studied in depth. Thus, we conducted a descriptive survey to explore how QA are treated during the architecting of SBS. Data were collected using an online questionnaire targeted at participants with architecting experience. Our survey shows that QA and functional requirements of SBS are mostly considered equally important. Also, QA are usually treated explicitly rather than implicitly. Furthermore, dependability and performance appear to be the most important QA in the context of SBS. Our results partially show that general findings on QA also apply to the domain of SBS. On the other hand, we did not find a confirmation that QA are primary drivers for the architecting of SBS, or that\u00a0\u2026", "num_citations": "14\n", "authors": ["169"]}
{"title": "Rationale management challenges in requirements engineering\n", "abstract": " Rationale and rationale management have been playing an increasingly prominent role in software system development mainly due to the knowledge demand during system evaluation, maintenance, and evolution, especially for large and complex systems. The rationale management for requirements engineering, as a commencing and critical phase in software development life cycle, is still under-exploited. In this paper, we first survey briefly the state-of-the-art on rationale employment and applications in requirements engineering. Secondly, we identify the challenges in integrating rationale management in requirements engineering activities in order to promote further investigations and define a research agenda on rationale management in requirements engineering.", "num_citations": "14\n", "authors": ["169"]}
{"title": "Selecting a high-quality central model for sharing architectural knowledge\n", "abstract": " In the field of software architecture, there has been a paradigm shift from describing the outcome of architecting process to documenting architectural knowledge (AK), such as design decisions and rationale. To this end, a series of domain models have been proposed for defining the concepts and their relationships in the field of AK. To a large extent, the merit of this new paradigm is derived by sharing and reusing AK across organizations, especially in geographically distributed contexts. However, the employment of different AK domain models by different parties makes effective AK sharing challenging, as it needs to be mapped either from one domain model to another directly, or indirectly through a central model for simplicity when the number of AK models increases. The indirect mapping approach has proved to be a cost-effective way by sacrificing acceptable sharing quality compared with direct mapping\u00a0\u2026", "num_citations": "14\n", "authors": ["169"]}
{"title": "The evolution of design pattern grime: An industrial case study\n", "abstract": " Context: GoF design patterns are popular among both researchers and practitioners, in the sense that software can be largely comprised of pattern instances. However, there are concerns regarding the efficacy with which software engineers maintain pattern instances, which tend to decay over the software lifetime if no special emphasis is placed on them. Pattern grime (i.e., degradation of the instance due to buildup of unrelated artifacts) has been pointed out as one recurrent reason for the decay of GoF pattern instances. Goal: Seeking to explore this issue, we investigate the existence of relations between the accumulation of grime in pattern instances and various related factors: (a) projects, (b) pattern types, (c) developers, and (d) the structural characteristics of the pattern participating classes. Method: For that, we empirically assessed these relations through an industrial exploratory case study\u00a0\u2026", "num_citations": "13\n", "authors": ["169"]}
{"title": "Assessing code smell interest probability: a case study\n", "abstract": " An important parameter in deciding to eliminate technical debt (TD) is the probability of a module to generate interest along software evolution. In this study, we explore code smells, which according to practitioners are the most commonly occurring type of TD in industry, by assessing the associated interest probability. As a proxy of smell interest probability we use the frequency of smell occurrences and the change proneness of the modules in which they are identified. To achieve this goal we present a case study on 47,751 methods extracted from two well-known open source projects. The results of the case study suggest that:(a) modules in which\" code smells\" are concentrated are more change-prone than smell-free modules,(b) there are specific types of\" code smells\" that are concentrated in the most change-prone modules, and (c) interest probability of code clones seems to be higher than the other two\u00a0\u2026", "num_citations": "13\n", "authors": ["169"]}
{"title": "A reference architecture for healthcare supportive home systems\n", "abstract": " Ambient Assisted Living (AAL) has become focus of attention for governmental organisations, and healthcare and ICT researchers. AAL includes methods, products, services, and software systems to support the everyday lives of elders. To develop AAL software systems, reference architectures (i.e., a special software architecture that guides the development, standardization, and evolution of systems architectures) have been proposed. Despite of the existing reference architectures, their use is a difficult task, due their high level of abstraction. Moreover, these architectures do not support the development of systems for telemonitoring and self-management of chronic diseases at home. The main objective of this project is to propose a reference architecture for Healthcare Supportive Home (HSH) systems. With this project we will contribute in promoting and reusing the knowledge of expertise and in supporting the\u00a0\u2026", "num_citations": "13\n", "authors": ["169"]}
{"title": "Modeling architectural patterns\u2019 behavior using architectural primitives\n", "abstract": " Architectural patterns have an impact on both the structure and the behavior of a system at the architecture design level. However, it is challenging to model patterns\u2019 behavior in a systematic way because modeling languages do not provide the appropriate abstractions and because each pattern addresses a whole solution space comprised of potentially infinite solution variants. In this paper, we advocate the use of architectural primitives for systematically modeling architectural patterns in the behavioral view. These architectural primitives are found among a number of architectural patterns and serve as the basic building blocks for modeling patterns\u2019 behavior. The main contribution of this work lies in the discovery of architectural primitives, defining architectural primitives using UML, and capturing the missing pattern semantics by using UML\u2019s stereotypes.", "num_citations": "13\n", "authors": ["169"]}
{"title": "CRITON: A hypermedia design tool\n", "abstract": " The WWW has turned into a development and run-time environment for large-scale and complex applications. Such sophisticated applications are being deployed in increasing numbers without having been developed according to appropriate methodologies, tools and quality standards. The reason is not only that the hypermedia industry resists to utilize formal methods, but also that these methods and corresponding tools are very few and of dubious standards. The consequence is that the hypermedia applications being developed are of poor functionality and lack qualities such as modifiability, usability and maintainability. Especially the design phase is one of the phases that lack sufficient support from methods and CASE tools. This paper presents CRITON, a cross platform tool, built to support a hypermedia design method within an integrated environment. CRITON manages all three aspects of\u00a0\u2026", "num_citations": "13\n", "authors": ["169"]}
{"title": "A study on architectural smells prediction\n", "abstract": " Architectural smells can be detrimental to the system maintainability, evolvability and represent a source of architectural debt. Thus, it is very important to be able to understand how they evolved in the past and to predict their future evolution. In this paper, we evaluate if the existence of architectural smells in the past versions of a project can be used to predict their presence in the future. We analyzed four Java projects in 295 Github releases and we applied for the prediction four different supervised learning models in a repeated cross-validation setting. We found that historical architectural smell information can be used to predict the presence of architectural smells in the future. Hence, practitioners should carefully monitor the evolution of architectural smells and take preventative actions to avoid introducing them and stave off their progressive growth.", "num_citations": "12\n", "authors": ["169"]}
{"title": "An industrial case study on an architectural assumption documentation framework\n", "abstract": " As an important type of architectural knowledge, documenting architectural assumptions (AAs) is critical to the success of projects. In this work, we proposed and validated an Architectural Assumption Documentation Framework (AADF), which is composed of four viewpoints (i.e., the Detail, Relationship, Tracing, and Evolution viewpoint), to document AAs in projects. One case study with two cases was conducted at two companies from different domains and countries. The main findings are: (1) AADF can be understood by architects in a short time (i.e., a half day workshop); (2) the AA Evolution view requires the least time to create, followed by the AA Detail view and the AA Relationship view; (3) AADF can help stakeholders to identify risks and understand AAs documented by other stakeholders; and (4) understanding and applying AADF is related to various factors, including factors regarding the framework per se\u00a0\u2026", "num_citations": "12\n", "authors": ["169"]}
{"title": "Architectural assumptions and their management in industry\u2013An exploratory study\n", "abstract": " As an important type of architectural knowledge, architectural assumptions should be well managed in projects. However, little empirical research has been conducted regarding architectural assumptions and their management in software development. In this paper, we conducted an exploratory case study with twenty-four architects to analyze architectural assumptions and their management in industry. In this study, we confirmed certain findings from our previous survey on architectural assumptions (e.g., neither the term nor the concept of architectural assumption is commonly used in industry, and stakeholders may have different understandings of the architectural assumption concept). We also got five new findings: (1) architects frequently make architectural assumptions in their work; (2) the architectural assumption concept is subjective; (3) architectural assumptions are context-dependent and have a\u00a0\u2026", "num_citations": "12\n", "authors": ["169"]}
{"title": "An industrial case study on variability handling in large enterprise software systems\n", "abstract": " ContextEnterprise software systems (e.g., enterprise resource planning software) are often deployed in different contexts (e.g., different organizations or different business units or branches of one organization). However, even though organizations, business units or branches have the same or similar business goals, they may differ in how they achieve these goals. Thus, many enterprise software systems are subject to variability and adapted depending on the context in which they are used.ObjectiveOur goal is to provide a snapshot of variability in large scale enterprise software systems. We aim at understanding the types of variability that occur in large industrial enterprise software systems. Furthermore, we aim at identifying how variability is handled in such systems.MethodWe performed an exploratory case study in two large software organizations, involving two large enterprise software systems. Data were\u00a0\u2026", "num_citations": "11\n", "authors": ["169"]}
{"title": "Empirical studies on software traceability: A mapping study\n", "abstract": " During the last decades, software traceability has been studied in a large number of studies, from different perspectives (e.g., how to create traces and what are its benefits). This large body of knowledge needs to be better explored and exploited by both practitioners and researchers: We need an overview of different aspects of traceability and a structured way to assess and compare existing work in order to extend it with new research or apply it in practice, Thus, we have conducted a secondary study on this large corpus of primary studies, focusing on empirical studies on software traceability, without setting any further restrictions in terms of investigating a specific domain or concrete artifacts. The study explores the goals of existing approaches and the empirical methods used for their evaluation. Its main contributions are the investigation of (a) the type of artifacts linked through traceability approaches; (b) the\u00a0\u2026", "num_citations": "10\n", "authors": ["169"]}
{"title": "Reducing architectural knowledge vaporization by applying the repertory grid technique\n", "abstract": " The architecture of a software-intensive system is the composition of architectural design decisions. These decisions are an important part of Architectural Knowledge (AK). Failure to document architectural design decisions can lead to AK vaporization and higher maintenance costs. To reduce AK vaporization, we propose to apply the Repertory Grid Technique (RGT) to make tacit knowledge about architecture decisions explicit. An architect can use the RGT to elicit decision alternatives and concerns, and to rank each alternative against concerns. To validate our approach, we conducted a survey with graduate students. In the survey, participants documented decisions using the RGT. We compared these decisions with decisions documented using a basic decision template. Our results suggest that RGT leads to less AK vaporization, compared to conventional ways of documenting decisions.", "num_citations": "10\n", "authors": ["169"]}
{"title": "Advanced quality prediction model for software architectural knowledge sharing\n", "abstract": " In the field of software architecture, a paradigm shift is occurring from describing the outcome of architecting process to describing the Architectural Knowledge (AK) created and used during architecting. Many AK models have been defined to represent domain concepts and their relationships, and they can be used for sharing and reusing AK across organizations, especially in geographically distributed contexts. However, different AK domain models can represent concepts that are different, thereby making effective AK sharing challenging. In order to understand the mapping quality from one AK model to another when more than one AK model coexists, AK sharing quality prediction based on the concept differences across AK models is necessary. Previous works in this area lack validation in the actual practice of AK sharing. In this paper, we carry out validation using four AK sharing case studies. We also improve\u00a0\u2026", "num_citations": "10\n", "authors": ["169"]}
{"title": "Run-time reconfiguration of service-centric systems\n", "abstract": " Service-centric systems are driven more and more towards self-adaptation in order to satisfy QoS in highly dynamic environments. However, the young age and immaturity of this domain, combined with the increasing size and complexity of these systems, hinder the architects from designing effectively self-adaptive systems. This paper addresses the process of run-time reconfiguration with respect to high level issues such as monitoring, evaluation of QoS, reconfiguring and structuring the service-centric system. All patterns relate their solutions partially to well-established architectural patterns, adapted to the domain of servicecentric systems. The aim is to compose a unified framework in the form of a pattern language that will help architects in taking the major design decisions.", "num_citations": "10\n", "authors": ["169"]}
{"title": "Towards a pattern language for adaptive web-based educational systems\n", "abstract": " Adaptive Web-based Educational Systems represent an emerging technology that provides a unique advantage over traditional Web-based Educational Systems; that is the ability to adapt to the user's needs, goals, preferences etc. Adaptive Web-based Educational Systems are increasingly becoming part of the mainstream education, yet there does not exist a disciplined way of designing them-most of the development is ad-hoc. This paper aims to fill this void, which is the absence of disciplined design, by recording the expertise of existing Adaptive Web-based Educational Systems in the form of design patterns. We present a categorization of the patterns according to an established paradigm in Adaptive Hypermedia and we provide three exemplary patterns.", "num_citations": "10\n", "authors": ["169"]}
{"title": "Foreword: towards reference architectures for systems-of-systems\n", "abstract": " Currently, software-intensive systems have become larger and complex, resulting from the interoperability of several sometimes distributed, independent systems so that emergent, broader missions can be performed. So referred as Systems-of-Systems (SoS), this new class of systems has emerged in special in critical application domains. In another perspective, reference architecture is a special type of software architecture that has provided a considerable support to the development, evolution, and also standardization of systems of given application domains. Considering their usefulness, reference architectures are even more important to SoS than they have been today, by making it possible to mainly promote interoperability among constituent systems of SoS. Adequate interoperability in SoS has been still a great challenge to the community. In this scenario, this foreword arises challenges in this new research\u00a0\u2026", "num_citations": "9\n", "authors": ["169"]}
{"title": "The Learner's Mirror.\n", "abstract": " Adaptive Hypermedia Educational Systems, AHES, represent an emerging technology that provides a unique advantage over traditional Web-based Educational Systems; that is the ability to adapt to the user's needs, goals, preferences etc. These systems are increasingly becoming part of mainstream education, yet there does not exist a disciplined way of designing them-most of the development is ad-hoc.This paper aims to fill this void, which is the absence of disciplined design, by recording the expertise of existing Adaptive Hypermedia Educational Systems in the form of design patterns. In this paper we present three of these patterns: User Model Definition, User Model Initialisation and User Model Maintenance, as well as a more complete organization map that illustrates the entire pattern language based on the patterns\u2019 relations.", "num_citations": "9\n", "authors": ["169"]}
{"title": "Building Quality Into Learning Management Systems\u2013An Architecture-Centric Approach\n", "abstract": " The design and development of contemporary Learning Management Systems (LMS), is largely focused on satisfying functional requirements, rather than quality requirements, thus resulting in inefficient systems of poor software and business quality. In order to remedy this problem there is a research trend into specifying and evaluating software architectures for LMS, since quality at-tributes in a system depend profoundly on its architecture. This paper presents a case study of appraising the software architecture of a Learning Management through experience-based assessment and the use of an architectural prototype. The framework of the evaluation conducted, concerns run-time, development and business qualities. The paper concludes with the lessons learned from the evaluation, emphasizing on the compromise between them.", "num_citations": "9\n", "authors": ["169"]}
{"title": "Supporting variability through agility to achieve adaptable architectures\n", "abstract": " Variability facilitates the design of software products that can be adapted for a wide range of customers or contexts. In agile development, software products begin to be built before the desired product is fully understood. Both variability and agile development embrace change and adaptation. This chapter combines the agile paradigm and variability to achieve adaptable software architectures and shows how the agile paradigm and the concept of variability can complement each other in an approach to variability handling at the software architecture level.", "num_citations": "8\n", "authors": ["169"]}
{"title": "Variability in Web services\n", "abstract": " Service-based computing and associated development paradigms, including service-oriented architecture (SOA), web services, or the idea of \u201cSoftware as a Service,\u201d have gained significant attention in software engineering industry and research. The aim of this chapter is to provide an introduction to variability in service-based systems. Within this chapter, we use the term \u201cservice-based\u201d for systems that are largely or entirely built from web services [4], with SOA as the primary architectural style.", "num_citations": "8\n", "authors": ["169"]}
{"title": "On integrating student empirical software engineering studies with research and teaching goals\n", "abstract": " Background: Many empirical software engineering studies use students as subjects and are conducted as part of university courses. Aim: We aim at reporting our experiences with using guidelines for integrating empirical studies with our research and teaching goals. Method: We document our experience from conducting three studies with graduate students in two software architecture courses. Results: Our results show some problems that we faced when following the guidelines and deviations we made from the original guidelines. Conclusions: Based on our results we propose recommendations for empirical software engineering studies that are integrated in university courses.", "num_citations": "8\n", "authors": ["169"]}
{"title": "Evaluation of a process for architectural assumption management in software development\n", "abstract": " ContextArchitectural assumption management is critical to the success of software development projects. In this paper, we propose an Architectural Assumption Management (AAM) process, comprised of four AAM activities: Architectural Assumption Making, Description, Evaluation, and Maintenance.ObjectiveEvaluating the AAM process in architectural assumption management, regarding the ease of understanding and the effort of conducting the AAM process, as well as the effectiveness of using the AAM process to make architectural assumptions explicit and to identify and reduce invalid architectural assumptions.MethodAn explanatory study with 88 first-year master students in software engineering, and an exploratory study with five practitioners from five companies.Results(1) the ease of understanding the AAM process is moderate for first-year master students but easy for practitioners; (2) the effort of\u00a0\u2026", "num_citations": "7\n", "authors": ["169"]}
{"title": "SOA in variability-intensive environments: Pitfalls and best practices\n", "abstract": " Software solution providers face numerous pitfalls when using standardized SOA-based solutions. One cause is variability between customer organizations\u2014for example, variability occurs in local e-government because of municipalities\u2019 autonomy when it comes to implementing national laws. This autonomy results in variations in business processes, which then cause variability in the information systems that implement them. This article presents pitfalls the authors observed in Dutch e-government, an example of a variability-intensive environment. They also present best practices that help deal with these pitfalls and organize them in an architecture pattern. Applying the pattern at more than 20 Dutch municipalities led to successful SOA implementations. Because such pitfalls are not just applicable to e-government, the proposed pattern can also be applied to other domains.", "num_citations": "7\n", "authors": ["169"]}
{"title": "e-Learning resource brokers\n", "abstract": " There is an exponentially increasing demand for provisioning of high-quality learning resources, which is not satisfied by current web technologies and systems. E-Learning Resource Brokers are a potential solution to this problem, as they represent the state-of-the-art in facilitating the exchange of learning resources between multiple parties. These systems currently operate at a limited scale but their use is vastly increasing, especially in the context of multi-faceted educational organizations, such as virtual universities. This paper presents some of these systems that are extensively used in the e-learning market. It then moves on to provide an overview of the ideal functionality that e-Learning Resource Brokers should provide. Finally it discusses future trends in their development, within the context of global e-learning forces.", "num_citations": "7\n", "authors": ["169"]}
{"title": "An integrated model for the authoring of web-based adaptive educational applications\n", "abstract": " In this paper a design model for Web-based Adaptive Educational Applications (WAEA) is presented. A model-based approach is proposed as an answering to the problem of the difficulty of authoring such applications. This approach is based on the use of object oriented modeling techniques and the specification of WAEA by means of an XML binding.", "num_citations": "7\n", "authors": ["169"]}
{"title": "Evolution of the Unix system architecture: an exploratory case study\n", "abstract": " Unix has evolved for almost five decades, shaping modern operating systems, key software technologies, and development practices. Studying the evolution of this remarkable system from an architectural perspective can provide insights on how to manage the growth of large, complex, and long-lived software systems. Along main Unix releases leading to the FreeBSD lineage we examine core architectural design decisions, the number of features, and code complexity, based on the analysis of source code, reference documentation, and related publications. We report that the growth in size has been uniform, with some notable outliers, while cyclomatic complexity has been religiously safeguarded. A large number of Unix-defining design decisions were implemented right from the very early beginning, with most of them still playing a major role. Unix continues to evolve from an architectural perspective, but the rate\u00a0\u2026", "num_citations": "6\n", "authors": ["169"]}
{"title": "An exploratory case study on reusing architecture decisions in software-intensive system projects\n", "abstract": " Reusing architecture decisions from previous projects promises to support architects when taking decisions. However, little is known about the state of art of decision-reuse and the benefits and challenges associated with reusing decisions. Therefore, we study how software architects reuse architecture decisions, the stakeholders and their concerns related to decision-reuse, and how architects perceive the ideal future state of decision-reuse. We conducted a qualitative explorative case study in the software-intensive systems industry. The study has shown that architects frequently reuse decisions but are confined to decisions they already know or have heard about. The results also suggest that architects reuse decisions in an ad-hoc manner. Moreover this study presents a conceptual model of decision-reuse and lists stakeholder concerns with regards to decision-reuse. The results of this study indicate that\u00a0\u2026", "num_citations": "6\n", "authors": ["169"]}
{"title": "Mining relationships between the participants of architectural patterns\n", "abstract": " Architectural patterns are often combined with other, relevant architectural patterns during software architecture design. However, combining patterns effectively remains a challenging task: first because the integration of any two architectural patterns can take several forms; second because existing pattern languages only mention generic pattern-to-pattern relationships and do not go into the details of their combination. In this paper, we propose to address this problem by discovering and defining a handful of recurring pattern relationships at the level of the participants of patterns. We have studied 32 industrial case studies and mined a number of relationships between participants of different patterns. We present a few of these relationships and outline some examples of their appearance.", "num_citations": "6\n", "authors": ["169"]}
{"title": "Constructing a resource usage view of a large and complex software-intensive system\n", "abstract": " A resource usage view consists of models that are important assets to analyze and control usage of hardware resources such as processors and memory elements. In this paper, we present the application of a top-down approach to construct a resource usage view using actual system runtime information. The models in this view help to address the concerns of a resource usage viewpoint providing information in terms of system-specific architecture and design execution elements such as execution scenarios, tasks, software components, processes, and threads. As part of our validation, constructing a resource usage view of an MRI system, a representative large software-intensive system, we observed that the constructed models for this view provide useful overviews and insights for practitioners to describe part of the system execution architecture and especially to analyze and evaluate the use of hardware\u00a0\u2026", "num_citations": "6\n", "authors": ["169"]}
{"title": "From architectural knowledge to requirements knowledge management\n", "abstract": " Knowledge management has been playing an increasingly prominent role in software engineering in both academic and industrial perspectives. Meanwhile, the software architecture community has recently witnessed a paradigm shift towards managing architectural knowledge (AK), and consolidated research results have been achieved. Within the software development lifecycle, requirements engineering (RE) and architecting are two closely related activities, and so are their associated knowledge. This report makes a literature survey on RE from a knowledge perspective, and proposes to reuse the research outcomes for AK management in RE. We target specific RE problems and present knowledge-based ideas to tackle them by integrating concrete results from the AK community. This work can subsequently stimulate further research in knowledge-based RE, which may in turn feed its results back into software architecture.", "num_citations": "6\n", "authors": ["169"]}
{"title": "Refinement to griffin core model and model mapping for architectural knowledge sharing\n", "abstract": " This technical report is trying to clarify the similar (overlapping and interweaving) concepts in documenting Architectural Knowledge (AK), and we argue that UML class diagram is appropriate for the representation of core model of AK for the purpose of AK sharing. A refined AK core model represented in UML is proposed, and four terminological frameworks from literatures and one domain model for industrial case for AK documentation are analyzed, and their respective concept mappings to the refined core model are presented.", "num_citations": "6\n", "authors": ["169"]}
{"title": "Introduction to the special issue on technical debt in software systems\n", "abstract": " Introduction to the special issue on technical debt in software systems | Journal of Systems and Software ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Journal of Systems and Software Periodical Home Latest Issue Archive Authors Affiliations Award Winners More HomeBrowse by TitlePeriodicalsJournal of Systems and SoftwareVol. , No. CIntroduction to the special issue on technical debt in software systems research-article Introduction to the special issue on technical debt in software systems Share on Authors: Davide Falessi California Polytechnic State University, USA California Polytechnic State University, USA View Profile , Philippe Kruchten University of British Columbia, Canada University of , , , \u2026", "num_citations": "5\n", "authors": ["169"]}
{"title": "Improving Architectural Knowledge Management in Public Sector Organizations-an Interview Study (S).\n", "abstract": " Architecting software systems is a knowledge-intensive activity. It requires significant knowledge about architecting in general, but also about domains and technologies. Such knowledge should be managed systematically to make it available throughout the whole software development cycle (eg to facilitate maintenance). Architectural knowledge management (AKM) literature covers organizations in the private sector (eg software vendors). However, there is a lack of studies on AKM practices in public sector organizations (eg municipalities), even though AKM practices in the public sector are immature. Therefore, we propose applying lessons from AKM practices found in the private sector to address AKM challenges in the public sector. Thus, we conducted an interview study with four public and four private sector organizations. We identified challenges for AKM in the public sector. Then, we derived solutions from the private sector to the challenges in the public sector. The main challenges in the public sector are vaporization of architectural knowledge, insufficient knowledge sharing, and organizational cultures that do not encourage AKM. Solutions to these challenges include community building, improved tool support, quality control and management support. The results help improve AKM practices in the public sector.", "num_citations": "5\n", "authors": ["169"]}
{"title": "Combining architectural patterns and software technologies in one design language\n", "abstract": " Software technologies like frameworks, APIs, or libraries are pieces of software that can be used to solve recurring problems in particular domains. Just like patterns, they can be documented in a way that explicitly describes the context, in which they can be used; the problems they solve, and the solutions they imply. Based on this assumption, software technologies and patterns can be treated equally as architectural solutions capturing reusable architectural knowledge. In this paper, we describe the idea of relating patterns and technologies from a specific domain in one design language that provides useful guidance for software engineers who need to become familiar with the domain.", "num_citations": "5\n", "authors": ["169"]}
{"title": "P.: An evaluation of ADLs on modeling patterns for software architecture design\n", "abstract": " Architecture patterns provide solutions to recurring design problems at the architecture level. In order to model patterns during software architecture design, one may use a number of existing Architecture Description Languages (ADLs), including the UML, a generic language but also a de facto industry standard. Unfortunately, there is little explicit support offered by such languages to model architecture patterns, mostly due to the inherent variability that patterns entail. In this paper, we analyze the support that few selected languages offer in modeling a limited set of architecture patterns with respect to four specific criteria: syntax, visualization, variability, and extensibility. The results highlight the strengths and weaknesses of the selected ADLs for modeling architecture patterns in software design.", "num_citations": "5\n", "authors": ["169"]}
{"title": "Web engineering: new discipline, new educational challenges\n", "abstract": " The WWW has turned into a development and run-time environment for large-scale and complex applications. Such sophisticated applications are being deployed in increasing numbers without having been developed according to appropriate methodologies and quality standards. The main reason for this ad hoc development philosophy is the lack of specialised training/education on the web engineering subject domain. This domain/discipline is new, still immature and has recently started getting the attention of researchers, developers, and other major players in the web-based application development market and training market. There is now justifiable and increasing concern about the manner in which students and lifelong learners are well educated and trained in this new discipline. It\u2019s also only one year ago that few universities have started providing special courses on this discipline and offer seminars to\u00a0\u2026", "num_citations": "5\n", "authors": ["169"]}
{"title": "An empirical study on self-fixed technical debt\n", "abstract": " Technical Debt (TD) can be paid back either by those that incurred it or by others. We call the former self-fixed TD, and it is particularly effective, as developers are experts in their own code and are best-suited to fix the corresponding TD issues. To what extent is TD self-fixed, which types of TD are more likely to be self-fixed and is the remediation time of self-fixed TD shorter than non-self-fixed TD? This paper attempts to answer these questions. It reports on an empirical study that analyzes the self-fixed issues of five types of TD (ie, Code, Defect, Design, Documentation and Test), captured via static analysis, in more than 17,000 commits from 20 Python projects of the Apache Software Foundation. The results show that more than two thirds of the issues are self-fixed and that the self-fixing rate is negatively correlated with the number of commits, developers and project size. Furthermore, the survival time of self-fixed\u00a0\u2026", "num_citations": "4\n", "authors": ["169"]}
{"title": "Integrating agile practices into architectural assumption management: An industrial survey\n", "abstract": " Although managing architectural assumptions can benefit software development in several aspects (eg, reducing architectural misunderstanding and mismatch), the effort required is a key obstacle towards employing architectural assumption management in practice. One potential solution is to apply agile practices in order to reduce this effort. To this end, we conducted a survey with 91 practitioners to investigate the possibility of integrating agile practices into architectural assumption management in industrial practice. The results offer an overview of which agile practices can be integrated in architectural assumption management and how. Six agile practices were selected by more than half of the subjects:\" Backlog\",\" Iterative and Incremental Development\",\" Refactoring\",\" Continuous Integration\",\" Effective Communication\", and\" Just Enough Work\". Twelve agile practices were further elaborated by the subjects\u00a0\u2026", "num_citations": "4\n", "authors": ["169"]}
{"title": "Correlating pattern grime and quality attributes\n", "abstract": " The gang of four design patterns are widely adopted in industry as best practices and their effect on software quality has been long investigated in academia, with both positive and negative consequences being observed. One important parameter that relates to the effect of patterns on quality is the deterioration of pattern instances due to the buildup of artifacts unrelated to the pattern structure. This is called pattern grime and can potentially diminish some of the benefits of using patterns in the first place. In this paper we investigate the relation between pattern grime and three qualities, namely performance, security, and correctness. To this end, we conducted a case study with five industrial projects (approx. 260 000 lines of code) implemented by 16 developers. Our findings suggest a correlation between the accumulation of grime and decreased levels of performance, security, and correctness. Moreover, factors\u00a0\u2026", "num_citations": "4\n", "authors": ["169"]}
{"title": "Lightweight evaluation of software architecture decisions\n", "abstract": " Software architecture is an important foundation of every software project. Therefore, it is advisable to evaluate it in early stages of the software design. Architecture evaluation helps to uncover risks and suboptimal decisions before they cause tremendous cost and re-engineering efforts. Unfortunately, many software companies still do not integrate architecture evaluations into their software projects as a standard activity. This is partially because architecture evaluation is perceived as complicated and time-consuming by some people. Modern agile development methodologies are perceived as avoiding up-front architectural design, which amplifies this problem. In this chapter, we present an extended description of the decision-centric architecture review (DCAR) method. DCAR is lightweight and easy to integrate into different types of software projects (traditional and agile projects). We present the method in detail\u00a0\u2026", "num_citations": "4\n", "authors": ["169"]}
{"title": "Using pattern-based architecture reviews to detect quality attribute issues-an exploratory study\n", "abstract": " Architecture reviews are effective for identifying potential problems in architectures, particularly concerning the quality attributes of the system, but are generally expensive. We propose that architecture reviews based on the architecture patterns and their interactions with quality attributes can be done with small effort. We performed an exploratory study to investigate how much time and effort is required to perform such a review, and how many related issues it uncovers. We performed nine architecture reviews on small systems, and recorded the time and effort spent, and the number of issues identified. On average, a pattern-based review took less than two person-days of effort and less than a day of calendar time. The median number of issues identified was three, one of which was major. We recommend that where extensive architecture reviews are too expensive, a pattern-based review can be done with\u00a0\u2026", "num_citations": "4\n", "authors": ["169"]}
{"title": "Modeling the variability of architectural patterns\n", "abstract": " Architectural patterns provide proven solutions to recurring design problems that arise in a system context. A major challenge for modeling patterns in a system design is effectively expressing pattern variability. However, modeling pattern variability in a system design remains a challenging task mainly because of the infinite pattern variants addressed by each architectural pattern. This paper is an attempt to solve this problem by categorizing the solution participants of patterns. More precisely, we identify variable participants that lead to specializations within individual pattern variants and participants that appear over and over again in the solution specified by several patterns. With examples and a case study, we demonstrate the successful applicability of this approach for designing systems. Using the UML extension mechanism, we offer extensible architectural modeling constructs that can be used for modeling\u00a0\u2026", "num_citations": "4\n", "authors": ["169"]}
{"title": "Developing a modeling tool using eclipse\n", "abstract": " Tool development using an open source platform provides autonomy to users to change, use, and develop cost-effective software with freedom from licensing requirements. However, open source tool development poses a number of challenges, such as poor documentation and continuous evolution. In this paper, we present our experience of developing a modeling tool in an open source environment. We not only explain the functionality of the tool, but also list the pros and cons of developing in such an environment. The contribution of this paper lies in introducing readers to the modeling tool and draw attention to some of the challenges faced by open source tool developers.", "num_citations": "4\n", "authors": ["169"]}
{"title": "Hypermedia design for the mobile era\n", "abstract": " The daunting task of designing hypermedia applications for multi-channel access by heterogeneous devices has been the target of great attention by the academia and the practitioners community. The plethora of client platforms poses many challenges, due to the diversity of the available capabilities and restrictions of these platforms. This paper presents an attempt for designing a conceptual model for hypermedia applications that allows for easy update and alteration of its content as well as its presentation and also allows for deployment in various mobile platforms.", "num_citations": "4\n", "authors": ["169"]}
{"title": "The art of multi-channel hypermedia application development\n", "abstract": " The plethora of networked devices and platforms that continuously come to light, as well as the emergence of alternative ways to access the internet, have increased the demand for multi-channel access to hypermedia applications. Researchers and practitioners nowadays not only have to deal with the challenges that classic hypermedia applications pose, but also have to face numerous considerations with respect to multi-channel delivery of the applications. This paper presents an attempt for attacking the problem of multi-channel hypermedia application development. In specific it proposes a model that explicitly separates the hypermedia content from its presentation to the user through a document engineering perspective, by employing XML content storage and XSL transformations. Our work is based upon the empirical results of designing, developing and deploying hypermedia applications on multiple platforms and client devices, and on the practices of well-established hypermedia engineering techniques.", "num_citations": "4\n", "authors": ["169"]}
{"title": "WOnDA: An extensible multi-platform hypermedia design model\n", "abstract": " The design and development of hypermedia applications that are deployed on the Web and other delivery platforms is largely conducted on an intuitive, ad hoc basis, thus resulting in inefficient systems that are hard to modify, maintain and port to alternative platforms. There are now justifiable research and development efforts that attempt to formalize the engineering process of such systems in order to achieve certain quality attributes like modifiability, maintainability and portability. This paper presents such an attempt for designing a conceptual model of a hypermedia application that allows for easy update and alteration of its content as well as its presentation and also allows for deployment in various platforms. In specific this model explicitly separates the hypermedia content from its presentation to the user, by employing XML content storage and XSL transformations. Our work is based upon the empirical\u00a0\u2026", "num_citations": "4\n", "authors": ["169"]}
{"title": "Can Clean New Code reduce Technical Debt Density\n", "abstract": " While technical debt grows in absolute numbers as software systems evolve over time, the density of technical debt (technical debt divided by lines of code) is reduced in some cases. This can be explained by either the application of refactorings or the development of new artifacts with limited Technical Debt. In this paper we explore the second explanation, by investigating the relation between the amount of Technical Debt in new code and the evolution of Technical Debt in the system. To this end, we compare the Technical Debt Density of new code with existing code, and we investigate which of the three major types of code changes (additions, deletions and modifications) is primarily responsible for changes in the evolution of Technical Debt density. Furthermore, we study whether there is a relation between code quality practices and the \u201ccleanness\u201d of new code. To obtain the required data, we have performed\u00a0\u2026", "num_citations": "3\n", "authors": ["169"]}
{"title": "On the temporality of introducing code technical debt\n", "abstract": " Code Technical Debt (TD) is intentionally or unintentionally created when developers introduce inefficiencies in the codebase. This can be attributed to various reasons such as heavy work-load, tight delivery schedule, unawareness of good practices, etc. To shed light into the context that leads to technical debt accumulation, in this paper we investigate: (a) the temporality of code technical debt introduction in new methods, i.e., whether the introduction of technical debt is stable across the lifespan of the project, or if its evolution presents spikes; and (b) the relation of technical debt introduction and the development team\u2019s workload in a given period. To answer these questions, we perform a case study on twenty-seven Apache projects, and inspect the number of Technical Debt Items introduced in 6-month sliding temporal windows. The results of the study suggest that: (a) overall, the number of Technical\u00a0\u2026", "num_citations": "3\n", "authors": ["169"]}
{"title": "A process framework for embedded systems engineering\n", "abstract": " Engineering of embedded systems is considered highly complex, due to the need for integrating multi-site, multi-lifecycle, multi-disciplinary, and multi-organization approaches. However, such challenges have not been comprehensively addressed in existing engineering processes. To this end, this study proposes a process framework to tackle these challenges, focusing on its meta-model, i.e. A set of elements used for process instantiation. As an exploratory validation of the proposed meta-model we conducted two focus groups with experts on embedded systems, resulting in positive feedback and industrial acceptance.", "num_citations": "3\n", "authors": ["169"]}
{"title": "Two Empirical Studies on Decision-making Pro-cesses in Software Architecture\n", "abstract": " Firstly, I would like to deeply thank my professor and supervisor Paris Avgeriou; his support during my studies was crucial for my personal and academic development. As most of the people who had the opportunity to work with him know, he is insightful, critical, supportive, and he has a great sense of humor. Working together with Paris has always been quite an experience.There are also two people that I have been closely working with, and they heavily influenced this thesis. Initially, I would like to thank my second supervisor Dan Tofan for the endless conversations regarding our experiences, future plans and, of course, this manuscript. Dan influenced me in numerous ways by bringing new ideas, and also by challenging me to strictly criticize my own work. This thesis is certainly a result of our close communication and fruitful exchange of ideas and viewpoints. I also owe special thanks to my friend and colleague Maja Kutlaca for investing her time on my study. Her knowledge together with her willingness to provide me with insights in statistics and intention-\u2010\u2011based theories played a crucial role in the successful conduction of the research. I am truly grateful to both Dan and Maja for their overall contribution to my thesis.", "num_citations": "3\n", "authors": ["169"]}
{"title": "Managing Requirements Knowledge using Architectural Knowledge Management Approaches\n", "abstract": " The software architecture community has recently witnessed a paradigm shift towards managing architectural knowledge (AK), and consolidated research results have been achieved. Within the lifecycle of software development, requirements engineering (RE) and architecting are two closely related activities, and so are their associated knowledge. In this paper, we target specific RE problems and present knowledgebased approaches to tackle them by integrating concrete results from the AK community. This work can subsequently stimulate further research in knowledge-based RE, which may in turn feed its results back into software architecture.", "num_citations": "3\n", "authors": ["169"]}
{"title": "A Pattern-based Approach Against Architectural Knowledge Vaporization\n", "abstract": " Architectural documentation is often considered as a tedious and resource intensive task, that is usually skipped or performed inadequately. As a result the rationale of the architect\u2019s decisions gets lost. This problem is known as architectural knowledge vaporization. We propose a documentation approach for architectural decisions concerning the application of software patterns. Based on the assumption that patterns and pattern languages incorporate generic architectural knowledge, we recommend reusing this documented knowledge in application specific architecture documentation to preserve an important part of the rationale, that went into the architect\u2019s decisions, while saving time compared to other documentation approaches.", "num_citations": "3\n", "authors": ["169"]}
{"title": "The Learner\u2019s Mirror-Designing a User Modelling Component in Adaptive Hypermedia Educational Systems\n", "abstract": " Adaptive Hypermedia Educational Systems, AHES, represent an emerging technology that provides a unique advantage over traditional Web-based Educational Systems; that is the ability to adapt to the user's needs, goals, preferences etc. These systems are increasingly becoming part of mainstream education, yet there does not exist a disciplined way of designing them-most of the development is ad-hoc. This paper aims to fill this void, which is the absence of disciplined design, by recording the expertise of existing Adaptive Hypermedia Educational Systems in the form of design patterns. In this paper we present three of these patterns: User Model Definition, User Model Initialisation and User Model Maintenance, as well as a more complete organization map that illustrates the entire pattern language based on the patterns\u2019 relations.", "num_citations": "3\n", "authors": ["169"]}
{"title": "Patterns for adaptive web-based educational systems\n", "abstract": " Adaptive Web-based Educational Systems are sophisticated applications that offer a solution to the shortcomings of their non-adaptive counterparts, attempting to provide individualized and customized learning, tailored to the learner\u2019s needs. Even though substantial research and development of such systems has taken place the past years, they are still designed and developed from scratch. The reason is that experience from designing previous Adaptive Web-based Educational Systems is not somehow documented, thus resulting in the development teams \u2018re-inventing the wheel\u2019. This paper introduces an approach for recording design experience in the form of design patterns for Adaptive Web-based Educational Systems, which are semantically organized and categorized, according to a well-established reference model for adaptive hypermedia applications. Furthermore, this paper elaborates on the patterns of one of the above categories that deal with the user modeling aspect of such systems.", "num_citations": "3\n", "authors": ["169"]}
{"title": "Industrial Evaluation of an architectural assumption Documentation tool: a Case Study\n", "abstract": " According to Kruchten et al.[1], the concept of architectural knowledge consists of architecture design as well as the design decisions, assumptions, context, and other factors that together determine why a particular solution is the way it is. In this work we adopt the definition of architectural assumption (AA) from our previous work: AAs are architectural knowledge taken for granted or accepted as true without evidence [2]. This definition of AA emphasizes the characteristic of uncertainty in architectural knowledge: stakeholders believe but cannot prove, for instance, the importance, impact, or correctness of specific architectural knowledge. In addition to being a type of architectural knowledge, assumptions are also a type of artifact. As defined by Kroll and", "num_citations": "2\n", "authors": ["169"]}
{"title": "A survey on the interplay between software engineering and systems engineering during sos architecting\n", "abstract": " Background: The Systems Engineering and Software Engineering disciplines are highly intertwined in most modern Systems of Systems (SoS), and particularly so in industries such as defense, transportation, energy and health care. However, the combination of these disciplines during the architecting of SoS seems to be especially challenging; the literature suggests that major integration and operational issues are often linked to ambiguities and gaps between system-level and software-level architectures.Aims: The objective of this paper is to empirically investigate: 1) the state of practice on the interplay between these two disciplines in the architecting process of systems with SoS characteristics; 2) the problems perceived due to this interplay during said architecting process; and 3) the problems arising due to the particular characteristics of SoS systems.Method: We conducted a questionnaire-based online\u00a0\u2026", "num_citations": "2\n", "authors": ["169"]}
{"title": "Identification and Remediation of Self-Admitted Technical Debt in Issue Trackers\n", "abstract": " Technical debt refers to taking shortcuts to achieve short-term goals, which might negatively influence software maintenance in the long-term. There is increasing attention on technical debt that is admitted by developers in source code comments (termed as self-admitted technical debt or SATD). But SATD in issue trackers is relatively unexplored. We performed a case study, where we manually examined 500 issues from two open source projects (i.e. Hadoop and Camel), which contained 152 SATD items. We found that: 1) eight types of technical debt are identified in issues, namely architecture, build, code, defect, design, documentation, requirement, and test debt; 2) developers identify technical debt in issues in three different points in time, and a small part is identified by its creators; 3) the majority of technical debt is paid off, 4) mostly by those who identified it or created it; 5) the median time and average time to\u00a0\u2026", "num_citations": "2\n", "authors": ["169"]}
{"title": "Applying Patterns in Embedded Systems Design for Managing Quality Attributes and Their Trade-offs\n", "abstract": " Embedded systems comprise one of the most important types of software-intensive systems, as they are pervasive and used in daily life more than any other type, eg, in cars or in electrical appliances. When these systems operate under hard constraints, the violation of which can lead to catastrophic events, the system is classified as a critical embedded system (CES). The quality attributes related to these hard constraints are named critical quality attributes. For example, the performance and security of the software for cruise-control, automatic braking, or self-driving in a car are critical as they can potentially relate to harming human lives. Despite the growing body of knowledge on engineering CESs, there is still a lack of approaches that can support the design of CES, while managing critical quality attributes and their trade-offs with noncritical ones. To address this gap, this dissertation explored the state of research and practice on designing CES and managing quality trade-offs, identified approaches to improve the design of CES with regards to managing quality attributes and their trade-offs, and empirically investigated the merit of these approaches.To investigate the state-of-practice, we explored the actual trade-offs between quality attributes (both critical and noncritical) in real systems. The results showed that trade-offs favor certain critical quality attributes against noncritical ones (eg, security for extendibility) or other critical quality attributes (eg, correctness for performance). In addition, these trade-offs between critical and noncritical quality attributes are more recurrent in the domain of CESs. These observations suggest that certain trade\u00a0\u2026", "num_citations": "2\n", "authors": ["169"]}
{"title": "Towards a Pattern Language for Learning Management Systems\n", "abstract": " Learning Management Systems are sophisticated web-based applications that are being engineered today in increasing numbers by numerous institutions and companies that want to get involved in e-learning either for providing services to third parties, or for educating and training their own people. Even though the construction of such systems has been taking place for many years, they are still designed and developed from scratch. The reason is that experience from previous Learning Management Systems, is not codified or documented, resulting in forcing the development teams to re-invent the wheel. This paper presents an approach of recording design experience in the form of design patterns for Learning Management Systems and aims at developing a pattern language for these systems.", "num_citations": "2\n", "authors": ["169"]}
{"title": "Validating and improving a knowledge acquisition approach for architectural decisions\n", "abstract": " Software architects make architectural decisions such as choosing architecture patterns or frameworks. Capturing architectural decisions reduces evolution costs for software systems. Existing approaches overlook the challenge of capturing tacit knowledge about architectural decisions. Previously, we proposed the REGAIN approach to capture tacit knowledge about architectural decisions. REGAIN is based on the Repertory Grid technique, a powerful knowledge acquisition approach from knowledge engineering. However, REGAIN lacked industrial validation. Therefore, in this paper, we initially present a study to ensure that REGAIN meets the needs of industrial architects. We interviewed 16 architects who indicated REGAIN advantages such as systematic decision-making support. Also, architects indicated improvement opportunities, in particular tool support and the possibility to prioritize concerns that are used\u00a0\u2026", "num_citations": "2\n", "authors": ["169"]}
{"title": "Proceedings of the 1st ACM SIGSOFT/SIGPLAN International Workshop on Software Engineering for Systems-of-Systems (SESoS 2013)\n", "abstract": " CNRS| IRISA| IRISA_UBS| UBS| IRISA-D4| UNIV-RENNES1| INSTITUT-TELECOM| INRIA| INSA-TOULOUSE| UR1-UFR-ISTIC| UNIV-RENNES| LAAS-RESEAUX-ET-COMMUNICATIONS| LAAS-SARA| LAAS| INSA-GROUPE| UNIV-TLSE3| UT1-CAPITOLE| UNIV-TLSE2| LAAS-RISC| INSA-RENNES", "num_citations": "2\n", "authors": ["169"]}
{"title": "Patterns for Adaptive Service-Centric Systems.\n", "abstract": " Service-centric systems are driven more and more towards self-adaptation in order to satisfy QoS in highly dynamic environments. However, the young age and immaturity of this domain, combined with the increasing size and complexity of these systems, hinder the architects from designing effectively self-adaptive systems. This paper addresses the main problems that architects face with respect to high level issues such as monitoring, evaluation of QoS, and dynamic re-configuration. All patterns relate their solutions partially to wellestablished architectural patterns, adapted to the domain of service-centric systems. The aim is to compose a unified framework in the form of a pattern language that will help architects in taking the major design decisions.", "num_citations": "2\n", "authors": ["169"]}
{"title": "Patterns for documenting software architectures\n", "abstract": " The process of creating the architecture of a software system results in a documentation, which is recognized as a key artifact for stakeholder communication, early analysis of the system, support for quality attributes and trouble-free maintenance. The problem of software architecture documentation remains to a large extent unsolved; however the past few years, significant advances have been made in the field from research academic and industrial centers. This paper introduces an approach for recording the results that have been achieved hitherto in the field of documenting software architectures, by formatting them in the shape of patterns. We aim at assembling knowledge and experience in the field from industry and academia, with respect to the few issues that the community has reached consensus. Furthermore, by codifying this knowledge and experience in the form of patterns, we hope for a wider dissemination of architectural documentation concepts and practices to the community and thus a further advance of the field.", "num_citations": "2\n", "authors": ["169"]}
{"title": "m-WOnDA: The\u201d Write Once \u2018n\u2019Deliver Anywhere \u201cModel for Mobile Users\n", "abstract": " The design and development of hypermedia applications that are deployed on the Wireless World Wide Web is a daunting task because of the various available platforms and the restrictions and capabilities imposed by the lack of established standards and the exponentially increasing number of emerging platforms. There are now justifiable research and development efforts that attempt to formalize the engineering process of such applications in order to achieve certain quality attributes like modifiability, maintainability and portability. This paper presents such an attempt for designing a conceptual model for hypermedia applications that allows for easy update and alteration of its content as well as its presentation and also allows for deployment in various mobile platforms. In specific this model explicitly separates the hypermedia content from its presentation to the user, by employing XML content storage\u00a0\u2026", "num_citations": "2\n", "authors": ["169"]}
{"title": "Adaptive Web-Based Instructional Systems\u2013An Overview\n", "abstract": " Adaptive Hypermedia is a relatively young research field, which has been established on the intersection of hypermedia systems and adaptive user-interfaces [De Bra et al. 1999a]. In adaptive hypermedia, as in every hypermedia application, there is a structure of nodes and links that connect them. In contrast though to the rest of the hypermedia applications, an adaptive hypermedia system maintains a user model and alters the content, as well as the presentation of the information, contained within the nodes on the fly. Links are also adaptive, that is their presentation and functionality is adjusted as well. The aforementioned sustainable and constantly updated user model is utilized in order to lead the system\u2019s user towards new and interesting information and keep him or her away from information that is considered inappropriate or useless. Adaptive Hypermedia Systems have already started being broadly applied in instructional systems, which have certain deficiencies that can be remedied through adaptation techniques.The structure of the paper is as following: the theoretical underpinnings of adaptive systems is given in section 2, where the concepts of hypermedia systems, web-based instructional systems and their adaptive versions are discussed. Section 3 analyzes the need for the application of adaptation techniques in hypermedia and instructional systems and how this need is covered through adaptive systems. Section 4 performs a classification of the adaptation techniques and describes the structure of an adaptive web-based instructional system.", "num_citations": "2\n", "authors": ["169"]}
{"title": "Advanced learning technologies in the new instructional paradigm\n", "abstract": " There is a trend towards the introduction of computer networks and related technologies into the educational and training process in order to enrich the latter by providing alternative means to the students for learning, communicating and collaborating. The need to shift from the conventional instructional paradigm to the new networked model is becoming eminent and the attempt of taming these technologies in order to make them functional and at the same time achieving pedagogical efficiency remains a great challenge. In this paper we present the technologies of computer networks that are used to support the instructional process, namely advanced learning technologies. After defining these technologies we describe the ways they can be used in the context of the learning process by categorizing them according to the services they provide. Next we present a brief literature review, outlining the major players that are conducting considerable research in the field of advanced learning technologies and are attempting to standardize the various aspects of these technologies. Finally we conclude with some remarks about the present situation in the application of advanced learning technologies.", "num_citations": "2\n", "authors": ["169"]}
{"title": "Learning object metadata in a Web-based learning environment\n", "abstract": " The plethora and variance of learning resources embedded in modern web-based learning environments require a mechanism to enable their structured administration. This goal can be achieved by defining metadata on them and constructing a system that manages the metadata in the context of the learning environment. Both activities have to meet certain standards.", "num_citations": "2\n", "authors": ["169"]}
{"title": "Architectural design decisions that incur technical debt\u2014An industrial case study\n", "abstract": " Context:During software development, some architectural design decisions incur technical debt, either deliberately or inadvertently. These have serious impact on the quality of a software system, and can cost significant time and effort to be changed. While current research efforts have explored general concepts of architectural design decisions and technical debt separately, debt-incurring architectural design decisions have not been specifically explored in practice.Objective:In this case study, we explore debt-incurring architectural design decisions (DADDs) in practice. Specifically, we explore the main types of DADDs, why and how they are incurred in a software system, and how practitioners deal with these types of design decisions.Method:We performed interviews and a focus group with practitioners working in embedded and enterprise software companies, discussing their concrete experience with such\u00a0\u2026", "num_citations": "1\n", "authors": ["169"]}
{"title": "System-and Software-level Architecting Harmonization Practices for Systems-of-Systems: An exploratory case study on a long-running large-scale scientific instrument\n", "abstract": " The problems caused by the gap between system- and software-level architecting practices, especially in the context of Systems of Systems where the two disciplines inexorably meet, is a well known issue with a disappointingly low amount of works in the literature dedicated to it. At the same time, organizations working on Systems of Systems have been developing solutions for closing this gap for many years now. This work aims to extract such knowledge from practitioners by studying the case of a large-scale scientific instrument, a geographically distributed radio telescope to be more specific, developed as a sequence of projects during the last two decades. As the means for collecting data for this study we combine online interviews with a virtual focus group of practitioners from the organization responsible for building the instrument. Through this process, we identify persisting problems and the best practices\u00a0\u2026", "num_citations": "1\n", "authors": ["169"]}
{"title": "Understanding Architecture Erosion: The Practitioners' Perceptive\n", "abstract": " As software systems evolve, their architecture is meant to adapt accordingly by following the changes in requirements, the environment, and the implementation. However, in practice, the evolving system often deviates from the architecture, causing severe consequences to system maintenance and evolution. This phenomenon of architecture erosion has been studied extensively in research, but not yet been examined from the point of view of developers. In this exploratory study, we look into how developers perceive the notion of architecture erosion, its causes and consequences, as well as tools and practices to identify and control architecture erosion. To this end, we searched through several popular online developer communities for collecting data of discussions related to architecture erosion. Besides, we identified developers involved in these discussions and conducted a survey with 10 participants and held interviews with 4 participants. Our findings show that: (1) developers either focus on the structural manifestation of architecture erosion or on its effect on run-time qualities, maintenance and evolution; (2) alongside technical factors, architecture erosion is caused to a large extent by non-technical factors; (3) despite the lack of dedicated tools for detecting architecture erosion, developers usually identify erosion through a number of symptoms; and (4) there are effective measures that can help to alleviate the impact of architecture erosion.", "num_citations": "1\n", "authors": ["169"]}
{"title": "Stories from the Front\n", "abstract": " Stories from the Front \u2014 the University of Groningen research portal Skip to main navigation Skip to search Skip to main content the University of Groningen research portal Logo Help & FAQ English Nederlands Home Profiles Research Units Research output Projects Datasets Prizes Activities Press / Media Search by expertise, name or affiliation Stories from the Front David C. Shepherd * , Paris Avgeriou * Corresponding author for this work Software Engineering Research output: Contribution to journal \u203a Editorial \u203a Academic \u203a peer-review Overview Original language English Pages (from-to) A1-A1 Number of pages 1 Journal Journal of Systems and Software Volume 146 DOIs https://doi.org/10.1016/j.jss..Publication status Published - Dec-2018 Access to Document 10.1016/j.jss..Embargoed Document Stories from the Front Final publisher's version, 309 KB Request copy Cite this APA Author BIBTEX Harvard RIS , , , '\u2026", "num_citations": "1\n", "authors": ["169"]}
{"title": "Design approaches for critical embedded systems: A systematic mapping study\n", "abstract": " Critical Embedded Systems (CES) are systems in which failures are potentially catastrophic and, therefore, hard constraints are imposed on them. In the last years the amount of software accommodated within CES has considerably changed. For example, in smart cars the amount of software has grown about 100 times compared to previous years. This change means that software design for these systems is also bounded to hard constraints (e.g., high security and performance). Along the evolution of CES, the approaches for designing them are also changing rapidly, so as to fit the specialized needs of CES. Thus, a broad understanding of such approaches is missing. Therefore, this study aims to establish a fair overview on CESs design approaches. For that, we conducted a Systematic Mapping Study (SMS), in which we collected 1,673 papers from five digital libraries, filtered 269 primary studies, and\u00a0\u2026", "num_citations": "1\n", "authors": ["169"]}
{"title": "A Study On The Accumulation Of Technical Debt On Framework-based Web Applications\n", "abstract": " This paper presents the results of an observational study to investigate the advantages of using widely used software development frameworks for Java EE applications. Also, it presents the accumulation of Technical Debt and the evolution of the quality code metrics, when the software is developed using frameworks. Considering that web applications hold the lion\u2019s share of today\u2019s IT industry, this study focuses on two widely popular Java EE frameworks, namely Spring Web MVC Framework and Apache Struts 2. In particular, we have developed one system over four versions in both frameworks while Technical Debt and quality code metrics have been monitored. The findings indicate that software developed based on frameworks is relatively free of Technical Debt. Moreover, we have not noticed any significant differences between the two frameworks in terms of Technical Debt. In general, one could claim that framework-based development can potentiality lead to high quality and maintainable systems, if the framework is properly used.", "num_citations": "1\n", "authors": ["169"]}
{"title": "A Mapping Study on Software Artifacts Traceability: Review Protocol\n", "abstract": " This study aims at summarizing already proposed techniques related to artifact traceability, among and within software development phases. With the term development phases we refer to the parts of a software development lifecycle, as defined in the 12207: 2008 ISO/IEC/IEEE standard, ie Requirements Analysis, Architecture Design, Detailed Design, Construction, Integration, and Quality Testing (12207 IEEE standard). This standard introduces a process framework for describing the development lifecycle of the software part of a system and is composed by the six abovementioned development phases. Additionally, according to the same standard a development phase consists of several activities (eg the Requirements Analysis phase may consist of representing system requirements using natural language and writing use cases). In this document we will refer to such activities as \u201cdevelopment activities\u201d. In Section 1, we will provide background information on artifact traceability. In addition to that, we will describe the motivation for conducting this mapping study and a discussion on the reasons for selecting to conduct a mapping study, rather than a systematic literature review. Next, in Section 2, we will present the systematic mapping protocol, whereas in Sections 3 and 4 we will present the protocol validation process and the plan for presenting the results of our study, respectively.", "num_citations": "1\n", "authors": ["169"]}
{"title": "Software engineering for resilient system\n", "abstract": " The unprecedented level of complexity of modern software makes it difficult to ensure its resilience-the ability of the system to persistently deliver its services in a trustworthy way even when facing changes. Yet, we are observing the increasingly pervasive use of software in such critical infrastructures as transportation, health care, energy production etc. This trend urges the research community to develop powerful methods for assuring resilience of software-intensive systems. The SERENE workshop was established as a means of disseminating such research results and fostering discussion and cooperation between the growing resilience research community.This volume contains the proceedings of the 4th International Workshop on Software Engineering for Resilient Systems (SERENE 2012). SERENE 2012 took place in Pisa, Italy, during September 27\u201328, 2012. The SERENE workshop is an annual event that\u00a0\u2026", "num_citations": "1\n", "authors": ["169"]}
{"title": "A case of quality prediction of architecture knowledge sharing through model mapping\n", "abstract": " In this report, we introduce the AK sharing activity with a query-based scenario, and the motivation for the prediction of AK sharing quality prediction. In the end, a concrete case of quality prediction of AK sharing through model mapping was presented with assumptions.", "num_citations": "1\n", "authors": ["169"]}
{"title": "Architectural patterns in practice\n", "abstract": " Architectural Patterns in Practice \u2014 the University of Groningen research portal Skip to main navigation Skip to search Skip to main content the University of Groningen research portal Logo Help & FAQ English Nederlands Home Profiles Research Units Research output Projects Datasets Prizes Activities Press / Media Search by expertise, name or affiliation Architectural Patterns in Practice Paris Avgeriou, Uwe Zdun Software Engineering Research output: Chapter in Book/Report/Conference proceeding \u203a Chapter \u203a Academic 93 Downloads (Pure) Overview Original language English Title of host publication EPRINTS-BOOK-TITLE Publisher University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science Number of pages 4 Publication status Published - 2005 Access to Document 2005ProcEuroPLoPAvgeriou.pdfFinal publisher's version, 55.6 KB Cite this APA Author BIBTEX Harvard RIS , P\u2026", "num_citations": "1\n", "authors": ["169"]}
{"title": "A Layered Component-Based Architecture of a Virtual Learning Environment\n", "abstract": " There exists an urgent demand on defining architectures for Virtual Learning Environments (VLEs), so that high-level frameworks for understanding these systems can be discovered, portability, interoperability and reusability can be achieved and adaptability over time can be accomplished. In this paper we propose a prototype architecture for a VLE that professes state-of-the-art software engineering techniques such as layered structure and component-based nature. We base our work upon the LTSA working standard of IEEE LTSC, which serves as a business model, on the empirical results of a web-based instructional system architecture and on the practices of a well-established software engineering process.", "num_citations": "1\n", "authors": ["169"]}
{"title": "How Can We Educate Students on the Web Engineering Discipline Via the Web? The NTUA's Approach\n", "abstract": " Over the last years the Web has been increasingly used as a platform for supporting the delivery of flexible and interactive hypermedia applications. However, it is admitted that the dominant approach is ad hoc development. Developers should be educated in the use of effective processes, process models, methods, tools and documentation guidelines. In few words, they should be trained on the Web Engineering discipline. The number of courses which deal with this discipline is augmenting. National Technical University of Athens (NTUA), Greece offers such a course with a main pedagogical aim to make students well aware of the advantages when following systematic hypermedia development approaches contrary to ad hoc practices. NTUA\u2019s approach was to use open learning methods based on a Web-based instructional system. NTUA team developed the instructional system in a systematic way having challenged itself that such way can lead to pedagogically effective instructional delivery and to learning material fo high quality. The evaluation results showed that the challenge was met. This paper presents the NTUA\u2019s instructional approach about the web engineering discipline and the qualitative evaluation results.", "num_citations": "1\n", "authors": ["169"]}