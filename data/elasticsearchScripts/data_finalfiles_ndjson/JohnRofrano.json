{"title": "Web services agreement specification (WS-Agreement)\n", "abstract": " This document describes Web Services Agreement Specification (WS-Agreement), a Web Services protocol for establishing agreement between two parties, such as between a service provider and consumer, using an extensible XML language for specifying the nature of the agreement, and agreement templates to facilitate discovery of compatible agreement parties. The specification consists of three parts which may be used in a composable manner: a schema for specifying an agreement, a schema for specifying an agreement template, and a set of port types and operations for managing agreement life-cycle, including creation, expiration, and monitoring of agreement states.", "num_citations": "1110\n", "authors": ["1934"]}
{"title": "Virtual sales person for electronic catalog\n", "abstract": " This invention involves an electronic catalog system which employs the knowledge and experience of a\" Sales Agent\", which is provided to a computer data base, and used with an inference engine to assist and guide actual customers to products that they will most likely be interested in purchasing. This system is employs hypothetical questions and answers, based on the sales agents experience with generic customers, as well as criteria and constraints provided by both the Sales Agent and the electronic catalog content.", "num_citations": "143\n", "authors": ["1934"]}
{"title": "System, method and program product for cost-aware selection of templates for provisioning shared resources\n", "abstract": " A template generator organizing templates in a cost-aware clustering, a method of allocating resources using cost-aware clustering and computer program products therefor. A resource provisioning unit generates, selects and maintains a selected number of resource templates. Each template specifies an allocable resource capacity configuration. Each requesting client device has resources allocated determined by one of the selected resource templates. A resource provisioning unit includes a configuration store with costs of allocable resources and associated attributes, a server request store with previously received requests, and an input parameter store with template list options. A template generator determines an optimum list of templates to satisfy previously received requests. A template store stores generated template lists.", "num_citations": "85\n", "authors": ["1934"]}
{"title": "Replacing virtual machine disks\n", "abstract": " At least one target virtual disk descriptor that describes at least one virtual disk associated with an existing target virtual machine in a target virtualized environment is merged with at least one source virtual disk descriptor that describes at least one virtual disk associated with a source. The merging is carried out to obtain at least one merged virtual disk descriptor compatible with the target virtualized environment. The at least one virtual disk associated with the existing target virtual machine in the target virtualized environment is replaced with the at least one virtual disk associated with the source, in accordance with the at least one merged virtual disk descriptor.", "num_citations": "81\n", "authors": ["1934"]}
{"title": "Web services agreement specification (WS-Agreement) version 2005/09\n", "abstract": " This document describes Web Services Agreement Specification (WS-Agreement), a Web Services protocol for establishing agreement between two parties, such as between a service provider and consumer, using an extensible XML language for specifying the nature of the agreement, and agreement templates to facilitate discovery of compatible agreement parties. The specification consists of three parts which may be used in a composable manner: a schema for specifying an agreement, a schema for specifying an agreement template, and a set of port types and operations for managing agreement life-cycle, including creation, expiration, and monitoring of agreement states.", "num_citations": "73\n", "authors": ["1934"]}
{"title": "Systematic migration of workload based on classification\n", "abstract": " Data characterizing a source computing environment having at least one hardware resource and at least one workload is obtained, as is a specification of a target computing environment to which the at least one workload is to be migrated in a migration. Based on the data characterizing the source computing environment and the specification of the target computing environment, the migration is categorized into one of a plurality of categories; and the migration is specified in accordance with a migration technique selected based on the categorizing step. Techniques to identify suitable migration candidates are also provided.", "num_citations": "57\n", "authors": ["1934"]}
{"title": "Method and system for providing interactive electronic catalog for product and constraint information of equality and inequality search\n", "abstract": " A system for collecting, categorizing and searching metadata about products which may be the subject of user-input inequality searches. Unique methods are provided for: generating image information at the user interface; inputting of the inequality search; conducting an inequality search based on the metadata in response to input at the user interface; and; displaying the search results appropriately.", "num_citations": "39\n", "authors": ["1934"]}
{"title": "Cloudaffinity: A framework for matching servers to cloudmates\n", "abstract": " Increasingly organizations are considering moving their workloads to clouds to take advantage of the anticipated benefits of a more cost effective and agile IT infrastructure. A key component of a cloud service, as it is exposed to the consumer, is the published selection of instance resource configurations (CPU, memory, and disk). The number of instance configurations, as well as the specific values that characterize them, form important decisions for the cloud service provider. This paper explores these resource configurations; examines how well a traditional data center fits into the cloud model from a resource allocation perspective; and proposes a framework, named CloudAffinity, aimed at selecting an optimal number of configurations based on customer requirements.", "num_citations": "36\n", "authors": ["1934"]}
{"title": "Java OGSI Hosting Environment Design\u2013A Portable Grid Service Container Framework\n", "abstract": " The Open Grid Service Infrastructure (OGSI) specification defines a set of WSDL interfaces to be implemented by various hosting environments. In this document we define one such hosting environment written in Java. We focus on defining the serverside programming model in order to allow Grid services written in one environment to be easily deployed in others. In addition to facilitating service implementation portability, we also define a container framework that is responsible for implementing the low-level infrastructure of OGSI, so that service providers can focus on the application logic. A key design point of the framework is its flexibility to allow for custom dispatchers to be written for a wide range of back-end hosting environments, such as EJB containers, Servlet containers, and CORBA servers. We define a set of interfaces and classes that must be supported to comply with the container framework, and we provide two use cases of applications of this framework; a lightweight Java implementation, and a more enterprise-oriented EJB Entity Bean implementation of a Grid service.", "num_citations": "27\n", "authors": ["1934"]}
{"title": "Automatically generating configuration images and deploying computer components in a computing environment that comprises a shared pool of configurable computing resources\n", "abstract": " Generating configuration images and deploying computer components in a computing environment that comprises a shared pool of configurable computing resources may be provided. Configuration templates from a plurality of repositories may be mined and classified. Base templates may be created that represent different service configurations based on the configuration templates classified into classes of different service configurations. For deploying a requested service with specified requirements, a plurality of candidate templates may be created based on the base templates that represent configurations for the requested service and configurations that meet the specified requirements. A target template from the plurality of candidate templates may be selected that most meets the specified requirements. Computer resources for the requested service may be deployed by running the target template.", "num_citations": "23\n", "authors": ["1934"]}
{"title": "System and method for an adaptive sales interview search technique\n", "abstract": " An exemplary embodiment of the invention is a system and method for an adaptive sales interview search technique for an electronic catalog. The system includes a customer interface, a host system coupled to the customer interface through a network and a database coupled to the host system. The host system provides, in the electronic catalog, products contained in a database. Also provided by the host system, are questions relating to the products to be presented to a customer who uses the electronic catalog. The host system supplies, in the electronic catalog, likely answers of the customer linked to constraints relative to the products contained in the database. The host system selects the electronic catalog questions in order of ranked importance, presents a highest ranked question, receives an answer to the highest ranked question, applies the constraints based on the answer to the highest ranked question\u00a0\u2026", "num_citations": "23\n", "authors": ["1934"]}
{"title": "Application reference designs for distributed systems\n", "abstract": " This paper is based on the findings and conclusions of a client/server work group that was commissioned in 1991 to report IBM's technical strategy for client/server computing. Although there are countless variations for designing applications and interconnecting components in a distributed environment, there seems to be a finite number of variations that represent what a large majority of customers want to build. The intent of the work group was to explore the possibility of defining a set of application \u201creference designs,\u201d which would represent the distributed designs that customers are building today or want to build in the near future. This paper documents the customer scenarios, the reference designs that represent them, and the requirements that were generated for the underlying system software. The work group concluded that the reference designs described herein represent our best working assumption about\u00a0\u2026", "num_citations": "23\n", "authors": ["1934"]}
{"title": "Web Services Agreement Negotiation Specification (WS-AgreementNegotiation)\n", "abstract": " This document describes Web Services Agreement Negotiation Specification (WS-AgreementNegotiation), a protocol for negotiation of agreements based on the WS-Agremeent specification.", "num_citations": "19\n", "authors": ["1934"]}
{"title": "Method and apparatus for managing the versioning of business objects using a state machine\n", "abstract": " A method and apparatus are disclosed for managing the versioning of business objects, such as contracts, advertisements, auction listings and RFQs. A state machine is used to represent a business process and manages the versioning of business objects associated with the business process. The present invention manages the original business object, the new version of the object, and any business objects that depend on the modified business object, if necessary. The business object remains in an active state during the modification process, until the new version of the business object is available. The new version of the business object remains in an inactive state during the modification process. The new version of the business object is transferred to an active state and the original business object is transferred to an inactive state when the modification is complete (eg, when the modified business object is\u00a0\u2026", "num_citations": "16\n", "authors": ["1934"]}
{"title": "Method, system, and computer program product for multi-domain component management\n", "abstract": " Components in a plurality of administrative domains that are communicatively coupled by a network are automatically managed. Permission to implement a corrective action in a second administrative domain is obtained by a management program in a first administrative domain that does not have existing permission to act in the second administrative domain. Responsive to obtaining the permission, the corrective action is implemented in the second administrative domain under control of the management program in the first administrative domain.", "num_citations": "14\n", "authors": ["1934"]}
{"title": "Managing the file system from the kernel\n", "abstract": " In this paper, we investigate the benefits of adding autonomic capabilities inside the operating system. We have developed and implemented a solution that focuses on three use cases (continuous file permission compliance, dynamic disk cleanup, and accidental removal protection) for the file system, and encapsulates all the respective file system monitoring, troubleshooting and error remedial operations in a Linux kernel module. The main benefits of this approach are the capability to detect issues instantly when they occur, and fix these issues transparently, with the invoking applications being unaware of their occurrence. These capabilities are not present in external agent architectures, including contemporary configuration management systems, like Puppet, Chef, or CFEngine. We have built a prototype and evaluated the performance of the most resource intensive use case, dynamic disk cleanup, using the\u00a0\u2026", "num_citations": "13\n", "authors": ["1934"]}
{"title": "Design considerations for distributed applications\n", "abstract": " Probably the hardest part about developing a distributed application is determining where to start. There are multiple hardware and software platforms to understand, network traffic implications, and numerous tools and technologies to consider. One question, however, transcends the importance of what platform to pick or what tool to use: that is, how do you design it? This paper represents the results of two years of work with customers regarding this question. The paper explores some of the implications of working in a distributed environment, reviews some rules for data and function placement, and introduces a methodology for distributed application design.", "num_citations": "11\n", "authors": ["1934"]}
{"title": "Recommending upgrade actions during migration\n", "abstract": " Embodiments of the present invention provide methods, systems, and computer program products for recommending an upgrade action during migration. In one embodiment, a configuration of servers are loaded in a graph format onto a database, and from a group of templates in the database, a closest matching configuration is identified. An action plan is determined from an impact score of several update actions and the action plan is stored in the database.", "num_citations": "8\n", "authors": ["1934"]}
{"title": "Negotiability constraints in WS-Agreement\n", "abstract": " This document specifies negotiability constraints associated with agreement terms in WS-Agreement. Current WS-Agreement Specification allows the choice of one or more terms from a set of terms during negotiation. The current specification additionally enables customization of individual terms. It identifies elements of an agreement term as negotiable and defines constraints to be followed during negotiation. The specification also includes the initial discovery of agreement templates supported by a provider.", "num_citations": "8\n", "authors": ["1934"]}
{"title": "Towards automated planning for enterprise services: Opportunities and challenges\n", "abstract": " Existing Artificial Intelligence (AI) driven automation solutions in enterprises employ machine learning, natural language processing, and chatbots. There is an opportunity for AI Planning to be applied, which offers reasoning about action trajectories to help build automation blueprints. AI Planning is a problem-solving technique, where knowledge about available actions and their consequences is used to identify a sequence of actions, which, when applied in a given initial state, satisfy a desired goal. AI Planning has successfully been applied in a number of domains ranging from space applications, logistics and transportation, manufacturing, robotics, scheduling, e-learning, enterprise risk management, and service composition. In this paper, we discuss experience in building automation solutions that employ AI planning for use in enterprise IT and business services, such as change and event\u00a0\u2026", "num_citations": "5\n", "authors": ["1934"]}
{"title": "File deletion in storage devices based on the deletion priority rules\n", "abstract": " Deleting files may include identifying files stored in a storage device to delete based on one or more deletion rules. The identified files are categorized into at least a first group and a second group. Deletion of files may be triggered based on a free space threshold. Deletion of files in the first group may be triggered. If the free space threshold is not met by deleting the files in the first group, deletion of files in the second group is triggered based on one or more of prioritization and cost optimization.", "num_citations": "5\n", "authors": ["1934"]}
{"title": "Dynamically extending a plurality of manageability capabilities of it resources through the use of manageability aspects\n", "abstract": " Extending a plurality of manageability capabilities of manageable information technology (IT) resources utilize an \u201caspect of\u201d association for describing a relationship between a first object representing a manageable resource playing a role of a subject and one or more additional objects each playing a role of an aspect. The \u201caspect of\u201d association establishes an overall manageability function for the first object representing a manageable resource and the one or more additional objects as a logical composition of a plurality of manageability capabilities. The manageability capabilities are provided using distinct implementation classes for supporting a specific role, and for supporting management-discipline related aspects and behaviors needed by each of a plurality of resource management applications for managing the manageable resource. The one or more additional objects have an aspect life cycle that is\u00a0\u2026", "num_citations": "5\n", "authors": ["1934"]}
{"title": "Method and apparatus for managing a user group list for a business process managed using a state machine\n", "abstract": " A method and apparatus are disclosed for maintaining membership lists associated with given states of a state machine. The present invention uses a state machine to represent a business process. The state machine includes a plurality of states, and at least one state includes an entry action that is executed upon entering the state. A user group list can be accessed and processed using the entry action. When an object enters a state, the corresponding entry action may be executed. The entry action will obtain the membership group name from the corresponding state definition. If the field is not null, then the business process manager queries the membership subsystem to obtain a list of individuals who belong to that membership group name for the organization which owns the object. Only those users are notified that the object is awaiting approval and are therefore designated as the preferred approvers for this\u00a0\u2026", "num_citations": "5\n", "authors": ["1934"]}
{"title": "IBM WebSphere commerce suite product advisor\n", "abstract": " This paper describes the Product Advisor component of the IBM WebSphere\u2122 Commerce Suite. Product Advisor consists of a set of tools to be used by marketing personnel to generate, without programming help, Web shopping applications involving a product catalog. The user interfaces generated by these tools cover an extensible set of shopping paradigms including parametric search, a knowledge-based \u201cvirtual salesperson,\u201d and side-by-side comparison shopping. The paper also describes the Java\u2122 infrastructure that supports the Product Advisor tools: servlets, JavaBeans\u2122 and JavaServer Pages\u2122 in the server, and applets in the client. Furthermore, it describes the implementation techniques used for rendering dynamic data: a data container hierarchy, a data type hierarchy, and presentation beans.", "num_citations": "5\n", "authors": ["1934"]}
{"title": "Self-service server change management\n", "abstract": " A method is provided to eliminate many of the manual steps in a server change management process, creating a self-service experience for a change requester. The method may automatically retrieve the current state of a server; constrain the requested change to a valid, feasible specification; verify that the requested change is compliant with business policies; implement the changes automatically; and develop a knowledge base of automated change risk that is used to modify the change management business process by identifying safe changes that can be performed outside of change windows and/or during change freezes. The method can be applied to changes to physical servers, virtual servers, and servers in a cloud environment.", "num_citations": "4\n", "authors": ["1934"]}
{"title": "Blueplan: a service for automated migration plan construction using AI\n", "abstract": " Migration of legacy applications to Cloud has been growing steadily over the past years, driven by the promise of greater flexibility, scalability, and lower management costs. However, the complexity of the migration tasks and activities makes transformation of the current service and application architectures a long and difficult process that involves months of migration planning and execution. In this paper, we present a service application BluePlan and its implementation, which employs an artificial intelligence (AI) planner that optimizes the end-to-end migration planning with constraints, and creates migration plans for execution. The AI planner service serves to expedite and simplify the migration planning process by defining the clients\u2019 constraints and resources in a simplified format that abstracts the user\u2019s need to hardcode domains and problems. This capability is exposed as a service and evaluated for\u00a0\u2026", "num_citations": "4\n", "authors": ["1934"]}
{"title": "Blueshift: Automated application transformation to cloud native architectures\n", "abstract": " Presented BlueShift: Self-service for orchestrating automated tasks (via APIs) and human tasks for end-to-end transformation process including, application discovery, analysis, artifact transformation and enablement of cloud value-add services. Demonstrated transformation process for PlantsByWebSphere application, with Liberty Profile runtime as a target in BlueMix (cloud-foundry based platform). Discussed challenges arising in transformation from application complexity and non-functional requirements.", "num_citations": "3\n", "authors": ["1934"]}
{"title": "Techniques for Creating Service Status Abstraction Layers Based on Client Roles in a Business Process Management Scenario\n", "abstract": " Techniques for role-based service operation status reporting to clients are provided. In one aspect, a method for reporting a status of a service operation to a client is provided. The method includes the following steps. A sequence of business process steps involved in performing the service operation is identified. One or more abstractions of the business process steps are made, each abstraction containing a sequence of a fewer number of steps than the business process, wherein the number of steps in each of the abstractions correlates with a level of detail about the service operation. The status of the service operation is reported to the client based on a given one of the abstractions having the level of detail best suited to a role of the client.", "num_citations": "3\n", "authors": ["1934"]}
{"title": "Cloud readiness planning tool (CRPT): An AI-based framework to automate migration planning\n", "abstract": " The growing popularity of cloud computing has increased demands of application migration to the cloud, but among others, the main deterrent has been the complexity of the migration planning for the large-scale projects with 1000s of servers. The complexity is mainly derived from the plethora of different migration options and required platform/application changes for cloud fitness of applications. In addition, the automated or artificial intelligence planning has been used to generate the migration plans, but despite its effectiveness, it has not been adopted broadly in migration because the AI planning language is complex and hard to scale. In this paper, we propose Cloud Readiness Planning Tool (CRPT), a system that constitutes a Migration Type Classifier trained under a novel active learning strategy dealing with \"concept drift\", and an AI Planner which generates plan from automatically created domain and\u00a0\u2026", "num_citations": "2\n", "authors": ["1934"]}
{"title": "Design and Evaluation of a Self-Service Delivery Framework\n", "abstract": " We present a framework for automating change and service request management, a process that has remained almost entirely human-centric, despite the fact that it involves complex workflows, takes a significant amount of time, and is prone to errors. We extend previous work on modeling process complexity to evaluate the impact of automating business constraints (such as policy approvals and entitlements). Our results indicate that automation eliminates a significant amount of operational complexity, reducing it by  compared to the Information Technology Infrastructure Library (ITIL) guidelines, and by  compared to actual client processes. Automation also reduces, between  and  for different client accounts, the average time that elapses from the moment that a change request is received until it starts executing.", "num_citations": "2\n", "authors": ["1934"]}
{"title": "Managing vulnerabilities in a cloud native world with bluefix\n", "abstract": " Bluefix is a solution we created for managing the vulnerabilities in a cloud native world where clients operate their own DevOp pipelines and design the same management function and assurance of that of traditional managed services. We show that the challenges imposed by container cloud and DevOp culture requires significant departure of service management design. As a case study, we examined how vulnerabilities are managed in the pre-cloud native vs. post-cloud native world, identified control points in both DevOp pipeline as well as cloud service fabric as to enable a scalable and automated vulnerability management solution for IBM container cloud. Our journey and exploration in this area has only just begun, as the lessons learned and many remaining challenges hold much promise and opportunities.", "num_citations": "2\n", "authors": ["1934"]}
{"title": "Java OGSI Hosting Environment Design\u2013A Portable Grid Service Container Framework\n", "abstract": " The Open Grid Service Infrastructure (OGSI) specification defines a set of WSDL interfaces to be implemented by various hosting environments. In this document we define one such hosting environment written in Java. We focus on defining the serverside programming model in order to allow Grid services written in one environment to be easily deployed in others. In addition to facilitating service implementation portability, we also define a container framework that is responsible for implementing the low-level infrastructure of OGSI, so that service providers can focus on the application logic. A key design point of the framework is its flexibility to allow for custom dispatchers to be written for a wide range of back-end hosting environments, such as EJB containers, Servlet containers, and CORBA servers. We define a set of interfaces and classes that must be supported to comply with the container framework, and we provide two use cases of applications of this framework; a lightweight Java implementation, and a more", "num_citations": "2\n", "authors": ["1934"]}
{"title": "Dynamic automation of pipeline creation\n", "abstract": " An intelligent computer platform to provide intent identification, mining and refinement, and dynamic application of the intent to pipeline. Natural language processing (NLP) is utilized with respect to the intent identification and refinement. A pipeline tool to support the function of the intent is identified, and a corresponding dynamic modification of a corresponding pipeline template takes place to integrate the tool into a stage of the corresponding template. Program code that aligns with the dynamic modification of the pipeline template is generated, thereby incorporating the searched intents into the functional aspect (s) represented in the pipeline.", "num_citations": "1\n", "authors": ["1934"]}
{"title": "Advantages and Challenges of Using AI Planning in Cloud Migration\n", "abstract": " Cloud Migration transforms customer\u2019s data, application and services from original IT platform to one or more cloud en-vironment, with the goal of improving the performance of the IT system while reducing the IT management cost. The enterprise level Cloud Migration projects are generally com-plex, involves dynamically planning and replanning various types of transformations for up to 10k endpoints. Currently the planning and replanning in Cloud Migration are generally done manually or semi-manually with heavy dependency on the migration expert\u2019s domain knowledge, which takes days to even weeks for each round of planning or replanning. As a result, automated planning engine that is capable of gener-ating high quality migration plan in a short time is particu-larly desirable for the migration industry. In this short paper, we briefly introduce the advantages of using AI planning in Cloud Migration, a preliminary prototype, as well as the challenges the requires attention from the planning and scheduling society.", "num_citations": "1\n", "authors": ["1934"]}
{"title": "Protected graphical user interface for role-based application and data access\n", "abstract": " Methods, systems, and computer program products for a protected graphical user interface for role-based application and data access are provided herein. A method for controlling access on an endpoint device to at least a portion of an application includes obtaining a default configuration indicating whether one or more widget functions associated with the application are enabled in a graphical user interface; modifying one or more of the widget functions in the default configuration to a disabled status in the graphical user interface based on a privilege configuration; determining if one or more user click events generated using the graphical user interface are associated with a widget function having the disabled status; and preventing the user click events having the disabled status from being provided to an operating system for further processing, wherein at least one of the steps is carried out by a computing device.", "num_citations": "1\n", "authors": ["1934"]}
{"title": "Predicting effects of climate change on supply chain performance\n", "abstract": " A method for predicting effects of climate change on supply chain performance includes receiving a global climate change model, a supply chain model, and at least one element model. A regional climate model modeling local weather is generated using the global climate model. A first supply chain performance is simulated using the supply chain model, the element model and the regional climate model. One or more extreme weather events are forecasted using the regional climate model. A second supply chain performance is simulated using the supply chain model and the forecasted extreme weather events. A score is determined for the supply chain performance.", "num_citations": "1\n", "authors": ["1934"]}