{"title": "Hierarchical metamorphic relations for testing scientific software\n", "abstract": " Scientist developers have not yet routinely adopted systematic testing techniques to assure software quality. A key challenge is the oracle problem, a situation in which appropriate mechanisms are unavailable for checking if the code produces the expected output when executed using a set of test cases (TCs). Metamorphic testing alleviates the oracle problem by specifying the relationship that a source TC and its follow-up TC shall meet. Such relationships are called metamorphic relations (MRs) which are necessary properties of the intended program's functionality. Existing approaches handle the MRs in a flat manner. This paper introduces a novel way to facilitate a hierarchy of MRs to be developed incrementally. We illustrate our approach by testing U.S. EPA's Storm Water Management Model (SWMM). The results offer concrete insights into developing effective MRs to systematically test scientific software.", "num_citations": "22\n", "authors": ["1118"]}
{"title": "Exploratory metamorphic testing for scientific software\n", "abstract": " Scientific model developers are able to verify and validate their software via metamorphic testing (MT), even when the expected output of a given test case is not readily available. The tenet is to check whether certain relations hold among the expected outputs of multiple-related inputs. Contemporary approaches require the relations to be defined before tests. Our experience shows that it is often straightforward to first define the multiple iterations of tests for performing continuous simulations, and then keep multiple and even competing metamorphic relations open for investigating the testing-result patterns. We call this new approach exploratory MT, and report our experience of applying it to detect bugs, mismatches, and constraints in automatically calibrating parameters for the United States Environmental Protection Agency's Storm Water Management Model.", "num_citations": "17\n", "authors": ["1118"]}
{"title": "Unit tests of scientific software: A study on SWMM\n", "abstract": " Testing helps assure software quality by executing program and uncovering bugs. Scientific software developers often find it challenging to carry out systematic and automated testing due to reasons like inherent model uncertainties and complex floating point computations. We report in this paper a manual analysis of the unit tests written by the developers of the Storm Water Management Model (SWMM). The results show that the 1,458 SWMM tests have a 54.0% code coverage and a 82.4% user manual coverage. We also observe a \u201cgetter-setter-getter\u201d testing pattern from the SWMM unit tests. Based on these results, we offer insights to improve test development and coverage.", "num_citations": "12\n", "authors": ["1118"]}
{"title": "Scientific software testing goes serverless: Creating and invoking metamorphic functions\n", "abstract": " We developed a Function-as-a-Service (FaaS) framework to transform end users\u2019 questions into automated tests for scientific software. Our case study of applying the FaaS framework to US EPA\u2019s Storm Water Management Model (SWMM) demonstrated the value of detecting realworld defects and revealed performance-cost tradeoffs. Our work illustrates FaaSification of scientific software testing and the importance of value-based evaluations.", "num_citations": "9\n", "authors": ["1118"]}
{"title": "Releasing scientific software in GitHub: a case study on SWMM2PEST\n", "abstract": " Release engineering involves code development, integration, testing, and software delivery. It has been widely applied to deliver high-quality software to users. While release engineering is a widespread practice in the software industry, there have been very few studies on the release engineering pipeline of scientific software. To shorten this gap, we present a case study in this paper to show a GitHub-driven release workflow on SWMM2PEST, a software system automating parameter calibration for the U.S. EPA's Storm Water Management Model (SWMM). Moreover, we analyze software version updates and requirements changes to develop strategies for improving the ongoing releases. The feasibility of improvement strategies is demonstrated by our consecutively released versions of SWMM2PEST. The results offered insights into the continuous release of scientific software.", "num_citations": "7\n", "authors": ["1118"]}
{"title": "Unit and regression tests of scientific software: A study on SWMM\n", "abstract": " Testing helps assure software quality by executing a program and uncovering bugs. Scientific software developers often find it challenging to carry out systematic and automated testing due to reasons like inherent model uncertainties and complex floating-point computations. Extending the recent work on analyzing the unit tests written by the developers of the Storm Water Management Model (SWMM) [32], we report in this paper the investigation of both unit and regression tests of SWMM. The results show that the 2953 unit tests of SWMM have a 39.7% statement-level code coverage and a 82.4% user manual coverage. Meanwhile, an examination of 58 regression tests of SWMM shows a 44.9% statement-level code coverage and a near 100% user manual coverage. We also observe a \u201cgetter-setter-getter\u201d testing pattern from the SWMM unit tests, and suggest a diversified way of executing regression tests.", "num_citations": "5\n", "authors": ["1118"]}
{"title": "Discovering metamorphic relations for scientific software from user forums\n", "abstract": " Scientific software can be used for decades and is constantly evolving. Recently, metamorphic testing, a property-based testing technique, has shown to be effective in testing scientific software, and the necessary properties are expressed as metamorphic relations. However, the development of metamorphic relations is difficult: it requires considerable practical expertise for the software tester. In this article, we report our experience of uncovering metamorphic relations from a user forum's questions of the United States Environmental Protection Agency's Storm Water Management Model (SWMM). Our study not only illustrates a wealth of end users\u2019 expertise in interpreting software results, but also demonstrates the usefulness of classifying the user-oriented metamorphic relations into a nominal, ordinal, and functional hierarchy mainly from the software output perspective.", "num_citations": "5\n", "authors": ["1118"]}
{"title": "I/O Associations in Scientific Software: A Study of SWMM\n", "abstract": " Understanding which input and output variables are related to each other is important for metamorphic testing, a simple and effective approach for testing scientific software. We report in this paper a quantitative analysis of input/output (I/O) associations based on co-occurrence statistics of the user manual, as well as association rule mining of a user forum, of the Storm Water Management Model (SWMM). The results show a positive correlation of the identified I/O pairs, and further reveal the complementary aspects of the user manual and user forum in supporting scientific software engineering tasks.", "num_citations": "1\n", "authors": ["1118"]}