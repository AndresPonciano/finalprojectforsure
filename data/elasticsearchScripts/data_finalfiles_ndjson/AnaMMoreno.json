{"title": "Knowledge maps: An essential technique for conceptualisation\n", "abstract": " The process of conceptualisation is a fundamental problem-solving activity and, hence, is an essential activity for solving the problem of software systems construction. This paper first analyses the process of conceptualisation generally, that is, not as applied specifically to software systems, and establishes a general-purpose conceptualisation process, composed of three activities: analysis, synthesis and holistic testing. A proposed instantiation of this framework for the process of conceptualisation in knowledge-based systems (KBS) construction is then presented. The paper focuses on an activity that is frequently overlooked in conceptualisation, that is, holistic testing, and on a technique that is proposed to address this phase, known as the knowledge map (KM). This technique integrates the static and dynamic perspectives of the reasoning employed by the expert to solve the problem. This paper discusses the\u00a0\u2026", "num_citations": "146\n", "authors": ["2223"]}
{"title": "Gamification in Software Engineering Education: A Systematic Mapping\n", "abstract": " The potential of gamification in education is based on the hypothesis that it supports and motivates students and can thus lead to enhanced learning processes and outcomes. Gamification in software engineering (SE) education is in its infancy. However, as SE educators we are particularly interested in understanding how gamification is pollinating our field and the extent to which the above claim is valid in our context. A systematic literature mapping has underscored the difficulty in fully corroborating the above claim because few empirical data are available so far. However, key trends and challenges have been identified. We found that the purpose of applying gamification in the SE field is mostly directly related to improving student engagement and, to a lesser extent, to improving student knowledge, although other targets are the application of SE best practices and socialization. We have also discussed insightful\u00a0\u2026", "num_citations": "140\n", "authors": ["2223"]}
{"title": "Agile user stories enriched with usability\n", "abstract": " Usability is a critical quality factor. Therefore, like traditional software teams, agile teams have to address usability to properly catch their users experience. There exists an interesting debate in the agile and usability communities about how to achieve this integration. Our aim is to contribute to this debate by discussing the incorporation of particular usability recommendations into user stories, one of the most popular artifacts for communicating agile requirements. In this paper, we explore the implications of usability for both the structure of and the process for defining user stories. We discuss what changes the incorporation of particular usability issues may introduce in a user story. Although our findings require more empirical validation, we think that they are a good starting point for further research on this line.", "num_citations": "41\n", "authors": ["2223"]}
{"title": "Persona as a tool to involving human in agile methods: contributions from HCI and marketing\n", "abstract": " Human centricity refers to the active involvement in the overall product lifecycle of different human actors including end-users, stakeholders and providers. Persona is one of the different tools that exist for human centricity. While marketing is the original domain in which persona was introduced, this technique has also been widely used in user-centered design (UCD) design. In these two perceptions, persona has demonstrated its potential as an efficient tool for grouping the users or customers and focusing on user or customer needs, goals and behavior. A segmentation technique is generally used with persona in order to group individual users according to their common features, identifying within these groups those that represent a pattern of human behavior. This paper investigates how persona has been used to improve the usability in the agile development domain, while studying which contributions\u00a0\u2026", "num_citations": "39\n", "authors": ["2223"]}
{"title": "Object-oriented analysis from textual specifications\n", "abstract": " One of the main limitations attributed to Object Orientation (OO) by software engineers is the immaturity of the Object-Oriented Analysis (OOA) process. This article aims to propose a method to formalize this process. This method is based on the use of linguistic information from informal specifications. This information is composed of words which, in turn, denote elements of an OO modelling, such as classes, properties, etc. These words have a particular meaning, and their use in the modelling is usually related with that meaning. So, the objective is to analyse this information from the semantic and syntactic viewpoint and extract, by means of a formal procedure, the components of an OO system. These components are represented by one model that contains the static part of the system and another one that describes system behaviour", "num_citations": "31\n", "authors": ["2223"]}
{"title": "Conceptual modelling in software engineering and knowledge engineering: Concepts, techniques and trends\n", "abstract": " Conceptual modeling is a crucial software development activity for both Software Engineering and Knowledge Engineering. Each discipline, however, has developed its own techniques for conceptual modeling, and there is no agreement about a common set of techniques that can be used in both disciplines. This chapter will describe such techniques, paying special attention to the more recent and innovative ones, as well as to the concepts shared by the techniques used in the two disciplines. The chapter will, therefore, outline the field of conceptual modeling within these two disciplines. Although the situation in the field is satisfactory, as can be inferred from the review conducted, there is still a lot of work to be done. Indeed, a series of shortcomings besetting the different techniques will be identified and an alternative perspective will be described, which points to a way of quieting such objections.", "num_citations": "30\n", "authors": ["2223"]}
{"title": "Industry/university software engineering collaborations for the successful reeducation of non-software professionals\n", "abstract": " Production of software is growing at a phenomenal rate worldwide. In addition, the increasingly global business climate has accelerated the need for business software. There are too few software engineers to produce and maintain software to meet this demand. One possible solution to correcting this shortfall is reeducating existing non-software employees to become software engineers. For the past two years, the Industry/University (UU) subgroup of the Working Group on Software Engineering Education and Training (WGSEET) has been investigating active collaborations between companies and universities in which employees without formal software education are reeducated to become software engineers. This paper reports on our findings by discussing our approach to the investigation, outlining the factors involved in successful collaboration construction and execution, and describing alumni views of the\u00a0\u2026", "num_citations": "22\n", "authors": ["2223"]}
{"title": "Software Project Management: Learning from Our Mistakes.\n", "abstract": " IEEE Software, the Voice of Evidence article,\u201cLooking for the Holy Grail of Software Development,\u201d reviewed the main practices that software project managers should engage in to make success more likely. 1 A complementary question is, what practices should they avoid to make success more likely? Answering this question will help current and future software project managers prevent, or at least mitigate, problematic scenarios that, if unresolved, will lead to additional project failures. Antipatterns come into play for formally describing dysfunctional approaches to problem solving and offering refactored solutions for successfully overcoming dysfunctions. 2 In software development, antipatterns are related to different activities including software project management. What are these antipatterns, and to what software project management issues are they related?", "num_citations": "20\n", "authors": ["2223"]}
{"title": "Software Project Management: Learning from Our Mistakes\n", "abstract": " IEEE Software, the Voice of Evidence article,\u201cLooking for the Holy Grail of Software Development,\u201d reviewed the main practices that software project managers should engage in to make success more likely. 1 A complementary question is, what practices should they avoid to make success more likely? Answering this question will help current and future software project managers prevent, or at least mitigate, problematic scenarios that, if unresolved, will lead to additional project failures. Antipatterns come into play for formally describing dysfunctional approaches to problem solving and offering refactored solutions for successfully overcoming dysfunctions. 2 In software development, antipatterns are related to different activities including software project management. What are these antipatterns, and to what software project management issues are they related?", "num_citations": "20\n", "authors": ["2223"]}
{"title": "An approach to determine software requirement construction sequences based on use cases\n", "abstract": " The majority of software development projects utilize the use cases technique to define software requirements, which are necessary to determine not only the scope of the software itself, but also the sequence in which this software will be constructed. Currently, there are several proposals to define the construction sequence of software requirements, but most of these proposals lack of ease of use from the developerpsilas perspective. This paper presents an approach to determine software construction sequences based on use cases precedence diagrams, which offers some advantages from the developerpsilas point of view. In order to demonstrate the technique, we also present a controlled experiment performed by people who had at least two years of experience in software projects. The results of this experiment show that our proposed technique, unlike other ad hoc techniques used, enables a more precise\u00a0\u2026", "num_citations": "20\n", "authors": ["2223"]}
{"title": "Looking for the Holy Grail of Software Development\n", "abstract": " The history of software engineering has been marked by many famous project failures documented in papers, articles, and books. This pattern of lack of success has prompted the creation of dozens of software analysis, requirements definition, design methods, programming languages, software development environments, and software development processes all promoted as solving \"the software problem.\" What we hear less about are software projects that were successful. This article reports on the findings of an extensive analysis of successful software projects that have been reported in the literature. It discusses the different interpretations of success and extracts the characteristics that successful projects have in common. These characteristics provide software project managers with an agenda of topics to be addressed that will help ensure, not guarantee, that their software project will be successful.", "num_citations": "18\n", "authors": ["2223"]}
{"title": "Characteristics of Successful collaborations to produce educated software engineering professionals\n", "abstract": " Currently, a large gap exists between the number of open software engineering positions and the number of qualified software engineers to fill those positions. The Industry/University (I/U) subgroup of the Working Group on Software Engineering Education and Training (WGSEET) is investigating active collaborations between companies and universities in which non-software professionals and practitioners without formal software education are reeducated to become software engineers. This paper describes the current status of work performed by the I/U subgroup in the investigation of reeducation collaborations. It is our goal to identify the common characteristics of successful collaborations in order to provide guidance to universities and companies when constructing a collaborative program, as well as to promote future collaborations. In this paper, we report on the current activity of the I/U subgroup, describe the\u00a0\u2026", "num_citations": "16\n", "authors": ["2223"]}
{"title": "How Agile Developers Integrate User-Centered Design into their Processes\n", "abstract": " The lack of user engagement, the absence of user feedback, incomplete and continuously changing user requirements are among the critical concerns that cause projects to fail. User-centered design (UCD) and agile software development are two iterative approaches that have been proposed to overcome such concerns. UCD is a design process focusing on user research, user interface design and usability evaluation. Introduced by software engineering practitioners, agile refers to a number of iterative and incremental software development practices that emphasize people\u2019s needs, communication between developers and stakeholders and the ability to adapt to change. In both the agile and UCD communities, however, a full understanding of user requirements is often seen as incompatible with early and quick development iterations. We performed a literature review aiming to identify how agile teams have\u00a0\u2026", "num_citations": "12\n", "authors": ["2223"]}
{"title": "Educating software engineering managers-revisited what software project managers need to know today\n", "abstract": " In 2003, the original paper with this title was published as part of CSEET 2003. It focused on resolving communication issues between software project managers and developers and introduced a corporate strategy based means of evaluating software engineers. Now, more than a decade later, we could benefit from what we have learned in other fields about managing people involved in knowledge work and how to improve our success in software development. But are we? This paper is intended to present what Software Engineering students can be taught today that will help them to be successful as software project managers now and in the future. It is based on the premise that effective software project managers are not born but made through education.", "num_citations": "12\n", "authors": ["2223"]}
{"title": "Responsibilities in the usability requirements elicitation process\n", "abstract": " Like any other software system quality attribute, usability places requirements on software components. In particular, it has been demonstrated that certain usability features have a direct impact throughout the software process. This paper details an approach that looks at how to deal with certain usability features in the early software development stages. In particular, we consider usability features as functional usability requirements using patterns that have been termed usability patterns to elicit requirements. Additionally, we clearly establish the responsibilities of all the players at the usability requirements elicitation stage.", "num_citations": "12\n", "authors": ["2223"]}
{"title": "Integraci\u00f3n de la IPO en el Proceso de Desarrollo de la Ingenier\u00eda del Software: Propuestas Existentes y Temas a Resolver\n", "abstract": " La usabilidad del producto software se ha convertido en un tema altamente relevante para la industria del software. Sin embargo, existe una falta de integraci\u00f3n de las actividades y t\u00e9cnicas relacionadas con la usabilidad en los procesos de desarrollo software de la IS (Ingenier\u00eda del Software). El art\u00edculo realiza una revisi\u00f3n de la evoluci\u00f3n que ha sufrido la consideraci\u00f3n de la usabilidad por parte de la IS, y un an\u00e1lisis de las aproximaciones existentes a la integraci\u00f3n de las actividades y t\u00e9cnicas de la IPO (Interacci\u00f3n Persona-Ordenador) en la IS. Adem\u00e1s, se detallan los principales problemas que deben solucionarse para que se pueda producir tal integraci\u00f3n, y se proponen posibles soluciones.", "num_citations": "12\n", "authors": ["2223"]}
{"title": "Challenges of Gamification in Software Process Improvement\n", "abstract": " Software process improvement (SPI) initiatives have contributed for a long time to the progress of software development. However, the outcome of such initiatives has not always been as effective as expected. The literature of SPI points out that motivation of practitioners involved in SPI initiatives is a critical factor for its success. On the other hand, gamification has been perceived as motivational and has the potential to improve people's engagement. Thus, researchers have been recently investigating the impact of gamification in increasing the motivation and commitment of the organization members involved in SPI. Despite the novelty of the field, we see the integration of gamification and SPI as an opportunity of study and research. The aim of this paper is to investigate and report the state of the practice in this field, identifying key challenges faced by organizations wishing to incorporate gamification into their SPI\u00a0\u2026", "num_citations": "10\n", "authors": ["2223"]}
{"title": "Justification of the equivalence between linguistic and conceptual patterns for the object model\n", "abstract": " The objective of this article is to provide a formal basis that justifies assigning certain object model conceptual structures to particular linguistic structures in Spanish. In other words, we seek to answer the question: why does the conceptual pattern c correspond to the linguistic pattern l? Apart from the linguistic and conceptual worlds, another, intermediate world\u2013the mathematical world, in particular, logic and set theory\u2013is used to this end. The justification is based on showing that the mathematical representations of the linguistic and conceptual patterns are equivalent.", "num_citations": "10\n", "authors": ["2223"]}
{"title": "The Maturity of Usability Maturity Models\n", "abstract": " The integration of usability practices in software development is not a straightforward process. In this context, the application of usability maturity models (UMM) in a software organization can provide insightful information to improve such integration. This paper discusses the design and application characteristics of the UMMs used over the last decade. The analysis of recent UMMs confirms that, even when the UMM field is a matter of interest and is getting adapted to new development contexts (for instance, agile or open source). UMMs lack detailed empirical evidence and supporting documentation for their objective application. In addition, our study also identifies other open issues related such as the level of prescriptiveness or mutability of UMMs. Consequently this paper identifies different opportunities for improving the maturity of UMMs. The application of mature UMMs would contribute to a better\u00a0\u2026", "num_citations": "9\n", "authors": ["2223"]}
{"title": "Evaluating Software Project Managers. A Multidimensional-perspective\n", "abstract": " Qualified, motivated project managers are key contributors to software organizations. Experts have identified a capable project manager as the most important factor in a software project's success. Project managers' value to software projects, software engineers, and their companies is unquestionable. Thus, getting the most out of those managers is critical. The literature about knowledge workers' psychological profiles show that the best motivator is feedback about how well they've done. This is consistent with our experience in software project management and consulting. Frequent, detailed feedback can also be a positive learning experience and an opportunity to improve skills. Feedback and recognition require the evaluation of professionals, who must accept responsibility for their work if they're going to consider assessments as an opportunity instead of a burden. However, the criteria needed to evaluate\u00a0\u2026", "num_citations": "7\n", "authors": ["2223"]}
{"title": "What is Going on Agile Gamification\n", "abstract": " The potential of gamification is based on the hypothesis that it improves user engagement, motivation, and performance. Gamification has already been used in software development with promising results. Our aim is to get a snapshot of the state of the practice of gamification and agile software development, and to discover what evidence there is about the benefits of this integration. A literature review revealed that current research in the field is at the very early stages, and there are very few studies, some of which do not provide empirical evidence of the impact of gamification on the agile process. Therefore, results will always be inconclusive. However, we found that the impact of gamification on agile team performance is perceived to be positive. Examples of other interesting issues that have arisen are that user stories are the most gamified agile practice or that the most frequently adopted gamification elements\u00a0\u2026", "num_citations": "5\n", "authors": ["2223"]}
{"title": "Usability design recommendations: a first advance\n", "abstract": " This paper presents some guidelines to help software designers to design architectures that support particular usability features. We focus on features with high impact on software functionality and therefore on software design, like Feedback or Undo/Cancel. We have adopted an empirical approach to propose some design recommendations to be used to build the above usability features into specific architectures.", "num_citations": "5\n", "authors": ["2223"]}
{"title": "Reeducation to Expand the Software Engineering Workforce: Successful Industry/University Collaborations\n", "abstract": " Software produced worldwide is growing at a phenomenal rate as software is used in such diverse products as automobiles, homes, and airplanes. In addition, the increasingly global business climate and expanding emphasis on distributed computing have accelerated the need for business software. However, there is currently an inadequate number of software engineers to produce and maintain software to meet this demand. One possible solution to correcting this shortfall is reeducating existing non-software engineering employees to become software engineers. For the past two years, the IndustryUniversity IU subgroup of the Working Group on Software Engineering Education and Training has been investigating active collaborations between companies and universities in which non-software professionals and practitioners who lack formal software education are reeducated to become software engineers. This paper reports on the IU subgroups findings by describing their approach to the investigation, the factors involved in successful collaboration construction and execution, and alumni views of the knowledge and skills transferred by the collaboration.Descriptors:", "num_citations": "5\n", "authors": ["2223"]}
{"title": "Incorporating usability in the software development process\n", "abstract": " Objective:Check that the system can execute and undo a particular set of actions.Initialization: Check that the storage structure has the capacity (enoughspace) to store actions.Actions:1. Execute an action identified as undoable.2. Check that the system identifies the action taken in step 1 asundoable.3. Repeat steps 1 and 2 until N or until the system recognizes Nactions as undoable.4. Undo the last action taken.5. Check that the last action taken has been undone and is no longerrecognized in the storage structure as undoable.6. Repeat steps 4 and 5 for all the actions that the system is to undo.", "num_citations": "3\n", "authors": ["2223"]}
{"title": "Results of the application of a linguistic approach to object-oriented analysis\n", "abstract": " In this paper, we present a linguistic approach in order to achieve the object oriented analysis (OOA) process in a systematic way. The approach is based on the definition of a formal correspondence between a subset of structures from linguistic world, called linguistic patterns, and a subset of structures from conceptual world, called conceptual patterns. This correspondence provides a solid basis in order to develop the conceptual models that represent the problem and its solution. One conceptual model will be used to represent the static part of the system, and another will represent system behavior.", "num_citations": "3\n", "authors": ["2223"]}
{"title": "Second XP Workshop about Dealing with Usability in an Agile Domain\n", "abstract": " The Second Workshop \u201cDealing with Usability in an Agile Domain\u201d is aimed to be a forum for discussing these approximations for the intersection of agility and usability. More concretely, issues regarding the implications of usability in agile environments, alternatives for integrating HCI techniques in an agile process, approaches for incorporating usability features into agile artifacts or open issues in the integration of agile and usability where discussed.", "num_citations": "2\n", "authors": ["2223"]}
{"title": "A replicated experiment with undergraduate students to evaluate the applicability of a use case precedence diagram based approach in software projects\n", "abstract": " The Use Case Precedence Diagram (UCPD) is a technique that addresses the problem of determining the construction sequence or prioritization of a software product from the developer\u2019s perspective. This paper presents a replicated controlled experiment with undergraduate students. The results obtained from this experiment confirm the results obtained in previous studies with practitioners in which the proposed approach enables developers to define construction sequences more precisely than with other ad-hoc techniques. However, unlike previous studies with practitioners, qualitative evaluation of the UCPD based on the Method Adoption Model (MAM), where the intention to use a method is determined by the users\u2019 perceptions, shows that the relationships defined by the MAM are not confirmed with the results obtained with undergraduate students.", "num_citations": "1\n", "authors": ["2223"]}
{"title": "Evaluating the Applicability of a Use Case Precedence Diagram Based Approach in Software Development Projects through a Controlled Experiment\n", "abstract": " Use Cases are the most utilized technique to specify software requirements. Currently, there are several proposals based on this technique to address the problem of determining the scope and construction sequence of a software, but most of them lack ease of use from the developer\u2019s perspective. In this paper, we present an approach to determine software construction sequences which emphasizes easiness from the developers\u2019 point of view and a controlled experiment based on this approach with professionals who have had at least two years of experience in software projects. The results obtained from this experiment show that our approach enables developers to define construction sequences more precisely than with other ad-hoc techniques.", "num_citations": "1\n", "authors": ["2223"]}
{"title": "Case Study Evaluations for a Function Point Counting Improvement for Object-Oriented Projects\n", "abstract": " Since the introduction of object-oriented (OO) development in industrial practice, many Function Point (FP) technique adaptations have been introduced to improve software size estimation in these kinds of projects. Current research work only deal with OO modifications to the previous version of the FP Counting Practices Manual (4.1). In this paper, we propose the use of the composition relationship analysis in classes to improve the rules included in FP Counting Practices Manual 4.2. 1 for Internal Logic Files (ILF) and External Interface Files (EIF) identification. We also show the results obtained by applying our proposal in six case studies performed by practitioners and comparing against the results we obtained with undergraduate students. These results have proved to be at least equal in accuracy and consistency to the original FPA technique.", "num_citations": "1\n", "authors": ["2223"]}
{"title": "Summary of the overview of software process models\n", "abstract": " Part I of the book presented an overview of the software process models from the viewpoints of the process model features and properties and the software process representation. Particularly, we highlighted the guidelines that these models provide for outputting the elements and their relationships and the features of the social environment (creativity, social interaction and flexibility) and their incorporation into the software process. This we do to check whether the models examined cover and represent the three environments (organisational, social and technological) that are important for the management of both the activities and the members of a project team.", "num_citations": "1\n", "authors": ["2223"]}
{"title": "Graduate software engineering education: adapting for the BSSE?\n", "abstract": " Summary form only given. As the number of undergraduate software engineering programs increases, what does this imply about the future role of graduate programs in software engineering? This panel will explore changes that may be required to existing graduate software engineering programs to adapt to the increasing number of undergraduates with bachelor's degrees in software engineering entering graduate software engineering programs. In particular, the questions the panel will consider include: How should graduate software engineering programs adapt to accommodate the arrival of students with BSSE degrees? Should graduate software engineering curricula change because of the growth in BSSE programs, and, if so, how? Should a BSSE degree substitute for the industry experience requirement commonly used in MSSE programs? Will graduate software engineering education still have value in\u00a0\u2026", "num_citations": "1\n", "authors": ["2223"]}