{"title": "Systematic literature review and empirical investigation of barriers to process improvement in global software development: Client\u2013vendor perspective\n", "abstract": " ContextIncreasingly, software development organizations are adopting global software development (GSD) strategies, mainly because of the significant return on investment they produce. However, there are many challenges associated with GSD, particularly with regards to software process improvement (SPI). SPI can play a significant role in the successful execution of GSD projects.ObjectiveThe aim of the present study was to identify barriers that can negatively affect SPI initiatives in GSD organizations from both client and vendor perspectives.MethodA systematic literature review (SLR) and survey questionnaire were used to identify and validate the barriers.ResultsTwenty-two barriers to successful SPI programs were identified. Results illustrate that the barriers identified using SLR and survey approaches have more similarities However, there were significant differences between the ranking of these barriers in\u00a0\u2026", "num_citations": "107\n", "authors": ["1359"]}
{"title": "Systematic review of success factors and barriers for software process improvement in global software development\n", "abstract": " Nowadays, many software development organisations are globalising their work throughout the world. The motivation behind the software globalisation is competitive advantage and business profits that it yields to an organisation. Besides, these organisations are facing various challenges due to the distributed nature of the software development. However, software process improvement (SPI) is one of the biggest issues in the domain of global software development (GSD). The aim of this research study is to identify success factors and barriers to assist GSD organisations for successful implementation of SPI program. Accordingly, a systematic literature review approach was adopted to identify the success factors and barriers. A total of nine success factors and six barriers were identified that could impact SPI. Using the criteria of the factors having a frequency >50% as critical, total four success factors were ranked\u00a0\u2026", "num_citations": "86\n", "authors": ["1359"]}
{"title": "Improving the quality of software development process by introducing a new methodology\u2013AZ-model\n", "abstract": " Quality is the most important factor for software development as it mainly defines customer satisfaction that is directly related to the success of a software project. The software process model is used to ensure software quality, represent a variety of task settings, manage project duration, improve the process and range to execute the process understanding, and to appropriate implicit conjecture for all task settings. Several software processes models exist in software albeit with limited scope. Given this viewpoint, this paper presents a new software development life cycle model, \u201cAZ-Model\u201d, for software development by introducing new activities during software development life cycle. It overcomes the limitations of traditional models and significantly impacts the production of a quality product in a time-box. This paper also presents a comprehensive comparative study and statistical analyses to examine the significance\u00a0\u2026", "num_citations": "71\n", "authors": ["1359"]}
{"title": "Software design patterns classification and selection using text categorization approach\n", "abstract": " ContextNumerous software design patterns have been introduced and cataloged either as a canonical or a variant solution to solve a design problem. The existing automatic techniques for design pattern(s) selection aid novice software developers to select the more appropriate design pattern(s) from the list of applicable patterns to solve a design problem in the designing phase of software development life cycle.GoalHowever, the existing automatic techniques are limited to the semi-formal specification, multi-class problem, an adequate sample size to make precise learning and individual classifier training in order to determine a candidate design pattern class and suggest more appropriate pattern(s).MethodTo address these issues, we exploit a text categorization based approach via Fuzzy c-means (unsupervised learning technique) that targets to present a systematic way to group the similar design patterns and\u00a0\u2026", "num_citations": "67\n", "authors": ["1359"]}
{"title": "Success factors influencing requirements change management process in global software development\n", "abstract": " Planning and managing requirements changes in Global Software Development (GSD) is a challenging task. While requirements change has received much attention from researchers, Requirements Change Management (RCM) process is still an emerging area in GSD. The objective of this paper is to identify the success factors of RCM in the GSD environment. We applied the Systematic Literature Review (SLR) approach and identified 23 success factors that influence RCM in GSD projects. The findings of the SLR indicate that change impact analysis, change understanding, management support, RCM process awareness, standard for RCM, progress measure, updated requirements and minimize project failure risk are key factors that influence RCM in a GSD project. We present a comparison of success factors identified in client and vendor organizations. Moreover, we present a framework to classify the\u00a0\u2026", "num_citations": "50\n", "authors": ["1359"]}
{"title": "Implications of deep learning for the automation of design patterns organization\n", "abstract": " Though like other domains such as email filtering, web page classification, sentiment analysis, and author identification, the researchers have employed the text categorization approach to automate organization and selection of design patterns. However, there is a need to bridge the gap between the semantic relationship between design patterns (i.e. Documents) and the features which are used for the organization of design patterns. In this study, we propose an approach by leveraging a powerful deep learning algorithm named Deep Belief Network (DBN) which learns on the semantic representation of documents formulated in the form of feature vectors. We performed a case study in the context of a text categorization based automated system used for the classification and selection of software design patterns. In the case study, we focused on two main research objectives: 1) to empirically investigate the effect of\u00a0\u2026", "num_citations": "46\n", "authors": ["1359"]}
{"title": "Systematic literature study for dimensional classification of success factors affecting process improvement in global software development: client\u2013vendor perspective\n", "abstract": " The majority of organisations are globalising their software development activities by following the ideas of global software development (GSD). The motivation behind the adoption of GSD phenomena are the list of benefits gained by the software industry. However, there are different challenges face by the GSD organisations, particularly the issues related to software process improvement (SPI). The aim of this study is the identification and classification into categories of the success factors that can impact SPI initiatives taken in GSD organisations. The systematic literature review (SLR) method has been used to extract the success factors from the literature. SLR phases, `planning, conducting, and reporting the review' have been followed to perform this study. Totally, 15 success factors were identified and classified into the six main categories. The authors have also reported the critical success factors of SPI, i.e\u00a0\u2026", "num_citations": "32\n", "authors": ["1359"]}
{"title": "Automated framework for classification and selection of software design patterns\n", "abstract": " Though, Unified Modeling Language (UML), Ontology, and Text categorization approaches have been used to automate the classification and selection of design pattern(s). However, there are certain issues such as time and effort for formal specification of new patterns, system context-awareness, and lack of knowledge which needs to be addressed. We propose a framework (i.e. Three-phase method) to discuss these issues, which can aid novice developers to organize and select the correct design pattern(s) for a given design problem in a systematic way. Subsequently, we propose an evaluation model to gauge the efficacy of the proposed framework via certain unsupervised learning techniques. We performed three case studies to describe the working procedure of the proposed framework in the context of three widely used design pattern catalogs and 103 design problems. We find the significant results of\u00a0\u2026", "num_citations": "30\n", "authors": ["1359"]}
{"title": "Investigation of the requirements change management challenges in the domain of global software development\n", "abstract": " The phenomenon of global software development (GSD) has been adopted by a majority of the software development firms to achieve the significant benefits it offers. However, there are many challenges faced by the GSD organizations, which are mainly related to requirements change management (RCM). The key objective of this study is to identify the challenges of RCM process in GSD domain. The systematic literature review (SLR) approach has been used to investigate the challenges of RCM activities, and a total of 30 challenges were identified. We have further classified the identified challenges in the domain of client and vendor GSD organizations, aiming to provide a clear understanding of the RCM process and its challenges in the context of both types of GSD organizations. The identified challenges were also categorized into three core types according to the organization size (small, medium sized, or\u00a0\u2026", "num_citations": "28\n", "authors": ["1359"]}
{"title": "Understanding software process improvement in global software development: a theoretical framework of human factors\n", "abstract": " Presently, most of the software development organizations are adopting the phenomena of Global Software Development (GSD), mainly because of the significant return on investment it produces. However, GSD is a complex phenomenon and there are many challenges associated with it, especially that related to Software Process Improvement (SPI). The aim of this work is to identify humans' related success factors and barriers that could impact the SPI process in GSD organizations and proposed a theoretical framework of the factors in relation to SPI implementation. We have adopted the Systematic Literature Review (SLR) method in order to investigate the success factors and barriers. Using the SLR approach, total ten success factors and eight barriers were identified. The paper also reported the Critical Success Factors (CSFs) and Critical Barriers (CBs) for SPI implementation following the criteria of the factors\u00a0\u2026", "num_citations": "28\n", "authors": ["1359"]}
{"title": "Effects of Geographical, Socio-Cultural and Temporal distances on Communication in Global Software Development during Requirements Change Management  A Pilot Study\n", "abstract": " Trend of software development is changing rapidly most of the software development organizations are trying to globalize their activities throughout the world. This trend leads towards a phenomenon called Global Software Development (GSD). The main reason behind the software globalization is its various benefits. Besides these benefits, software organizations are facing various challenges. One of these challenges is communication which is considered a big challenge in GSD and it becomes more complicated during the Requirements Change Management (RCM) process due to three factors, they are Geographical, Socio-cultural and Temporal distances. This paper presents a framework which shows the effect of these factors on communication during RCM process in GSD. Communication is the core function of collaboration which allows information to be exchanged between the team members. A pilot study\u00a0\u2026", "num_citations": "26\n", "authors": ["1359"]}
{"title": "Systematic literature review and empirical investigation of motivators for requirements change management process in global software development\n", "abstract": " Most software development firms have adopted the concepts of global software development (GSD) to develop high\u2010quality and low\u2010cost products. However, GSD is not a straightforward process. It is associated with many challenges that are mostly related to requirements change management (RCM). In this study, we explore the motivators that contribute to managing RCM activities in the GSD environment. We extracted a total of 25 motivators using the systematic literature review (SLR) approach and conducted a survey study to empirically evaluate the findings of the SLR. The results of the applied Spearman's statistical test show that the findings of the SLR and survey study had a positive moderate correlation (rs(25) = 0.566). We further analyzed the reported motivators according to organization size. Finally, we developed taxonomies of the identified motivators based on the framework proposed by Ramasubbu\u00a0\u2026", "num_citations": "17\n", "authors": ["1359"]}
{"title": "Systematic literature reviews of software process improvement: A tertiary study\n", "abstract": " Systematic Literature Review (SLR) is becoming a vital part of present day research in software process improvement (SPI). Nevertheless, there is no available study that provides detail review of the published software process improvement SLRs. Objective: The aim of this article is to classify the SLRs of SPI in order to identify the main research areas covered and evaluate the quality of the published SLRs. Methodology: A tertiary study was conducted to review the SLRs published by other researchers on the topic of SPI. Results: Twenty-four SLR articles were identified in the field of SPI. Results show that the quality of the selected SLRs on SPI is decreasing over the recent years. The most popular research topics are factors affecting SPI and process models. Conclusions: This study provides the review and state of the art in the context of SPI research. The results of this article would be of great interest for\u00a0\u2026", "num_citations": "17\n", "authors": ["1359"]}
{"title": "Requirement change management challenges in GSD: An analytical hierarchy process approach\n", "abstract": " Majority of software development firms are adopting the concepts of global software development (GSD) in order to develop high\u2010quality and low\u2010cost products. However, the requirements change management (RCM) becomes a significant challenge in the GSD environment because of the unavailability of proper RCM framework and taxonomy. The objective of this study is to develop a taxonomy of the challenging factors of the RCM process in GSD. The taxonomy is developed based on the results of the data collected during the survey study and the implementation of the analytical hierarchy process (AHP). Total 25 challenging factors are identified and mapped into four core categories, ie, \u201corganizational management,\u201d \u201cteam,\u201d \u201ctechnology,\u201d and \u201cprocess.\u201d Moreover, the AHP analysis is performed to prioritize the challenging factors and their categories. The prioritization process highlight that \u201cprocess\u201d is the most\u00a0\u2026", "num_citations": "16\n", "authors": ["1359"]}
{"title": "A methodology to automate the selection of design patterns\n", "abstract": " Background: Over the last two decades, numerous software design patterns have been introduced and cataloged on the basis of developer's interest and skills. Motivation: In software design phase, inexperienced designers are mostly concerned on how to select an appropriate design pattern from the catalog of relevant patterns in order to solve a design problem. The existing automated design pattern selection methodologies are limited to the need of formal specification of design patterns or an appropriate sample size to make the learning process more effective. Method: To address this concern, we propose a three step methodology to automate the selection process of design pattern for a design problem. The steps of the methodology are text preprocessing, use of an unsupervised learning technique (that is Fuzzy c-Mean) as a core function to quantitatively determine the resemblance of different objects and\u00a0\u2026", "num_citations": "16\n", "authors": ["1359"]}
{"title": "Performance Evaluation of Ensemble Methods For Software Fault Prediction: An Experiment\n", "abstract": " In object-oriented software development, a plethora of studies have been carried out to present the application of machine learning algorithms for fault prediction. Furthermore, it has been empirically validated that an ensemble method can improve classification performance as compared to a single classifier. But, due to the inherent differences among machine learning and data mining approaches, the classification performance of ensemble methods will be varied. In this study, we investigated and evaluated the performance of different ensemble methods with itself and base-level classifiers, in predicting the faults proneness classes. Subsequently, we used three ensemble methods AdaboostM1, Vote and StackingC with five base-level classifiers namely Naivebayes, Logistic, J48, VotedPerceptron and SMO in Weka tool. In order to evaluate the performance of ensemble methods, we retrieved twelve datasets of\u00a0\u2026", "num_citations": "16\n", "authors": ["1359"]}
{"title": "Leveraging IoT and fog computing in healthcare systems\n", "abstract": " Internet of things (IoT) is playing a pivotal role in bringing comfort and ease in human lives by connecting billions of devices across the globe. Innovation and development in IoT have established new ways to analyze patient data in healthcare systems. Currently, IoT and cloud-based solutions are available to process and analyze patient data, but cloud computing causes large end-to-end delay and network usage problems while processing huge amounts of data. Efficiency and security are still a challenge in IoT-based healthcare systems. Fog computing is introduced to overcome the issues of cloud computing by providing computing and storage services at the edge of the network. In this article, first we present a fog based efficient architecture for IoT-based healthcare systems. Then we present the user authentication method through identity management to prevent security breaches. The fog based architecture\u00a0\u2026", "num_citations": "15\n", "authors": ["1359"]}
{"title": "Detection of fault-prone classes using logistic regression based object-oriented metrics thresholds\n", "abstract": " Background: In the plethora of studies, the object-orientedmetrics have been empirically validated to assess the design properties and quantify the high-level quality attributes such as fault-proneness, either at the method or class granularity levels of software. Motivation: A more precise value of an object-oriented metric can be used as an indicator for the developers tomake the informed decisions regarding the detection of design flaws and classify the fault-proneness classes. Method: Bender used an approach in the domain of epidemiology studies to derivethe threshold values for the risk factors. In our study, we follow the Bender's approach and propose a model to derive the thresholds for a set of software design metrics via non-linearfunctions, which are described through logistic regressioncoefficients. Subsequently, we perform four types of analysis and three experiments in order to evaluate and compare the\u00a0\u2026", "num_citations": "15\n", "authors": ["1359"]}
{"title": "Hidden Markov model and driver path preference for floating car trajectory map matching\n", "abstract": " Here, a hidden Markov model (HMM) and driver path preference (DPP)-based algorithm was proposed for floating car trajectory map matching. The algorithm focused on two improvements over existing HMM-based map matching algorithm: (i) the use of distance difference feature and average speed difference feature for transition probability calculation, which reasonably describe the context information between the two adjacent sampling points. It results in a more accurate matching capability; (ii) the DPP overcomes the shortcoming of feature attenuation in calculating the transition probability at low floating car sampling rates. It assures the matching accuracy of the algorithm at low sampling rates. The algorithm was evaluated using ground truth data and the results of the experiment show that the new transition probability significantly improves the matching capability. The proposed DPP can significantly help to\u00a0\u2026", "num_citations": "11\n", "authors": ["1359"]}
{"title": "Detecting fraudulent labeling of rice samples using computer vision and fuzzy knowledge\n", "abstract": " Pakistan\u2019s climate allows growing several types of crops, among them is rice. Basmati is one of the most harvested and most profitable varieties of rice because of its unique fragrance. Rice varieties are difficult to differentiate accurately by visual inspection. Therefore, dishonest dealers could easily mislabel or adulterate basmati rice with less valuable assortments that look similar. We need a way to guard the interests of our trade partners. Many different approaches have been proposed to detect adulteration or fraud labeling of rice, in particular, to detect mixtures of authentic basmati and non-basmati varieties. These techniques employ characteristics such as morphological parameters, physicochemical properties, DNA, protein, or metabolites and are expensive and time-consuming. In this paper, we propose a novel and inexpensive technique to detect fraudulent labeling. We use computer vision and a\u00a0\u2026", "num_citations": "11\n", "authors": ["1359"]}
{"title": "Towards a hypothetical framework of humans related success factors for process improvement in global software development: systematic review\n", "abstract": " Presently, the majority of the software development organizations are adopting the phenomena of Global Software Development (GSD), mainly because of the significant return on investment it produces. However, GSD is a complex phenomenon and there are many challenges associated with it, especially that related to Software Process Improvement (SPI). The aim of this work is to identify humans' related factors that can positively impact the SPI process in GSD organizations and proposed a hypothetical framework of the identified success factors in relation to SPI implementation. We have adopted the Systematic Literature Review (SLR) method in order to identify the success factors. Using the SLR approach, total ten success factors were identified. The paper also reported the Critical Success Factors (CSFs) for SPI implementation following the criteria of the factors having a frequency\u2265 50% as critical. Our\u00a0\u2026", "num_citations": "9\n", "authors": ["1359"]}
{"title": "The effect of gang-of-four design patterns usage on design quality attributes\n", "abstract": " Context: In the plethora of studies, it has been empirically investigated that the incidence of design pattern instances can be considered as an indicator to elaborate the software design. The developers, who have more concern with design quality, are interested to know the effect of use intensity of design patterns on the system level design quality attributes. Goal: The objective of our study is to empirically investigate the effect of the frequent use of the Gang-of-Four (GoF) design patterns on the design quality attributes. Method: We perform a case study which includes three analyses in order to investigate, 1) the existence of a correlation between design pattern usage and design quality attributes, 2) the confounding effect of system size (number of classes) on the correlation, and 3) how the change in number of employed design pattern instances affects the design quality in the subsequent releases of a system\u00a0\u2026", "num_citations": "7\n", "authors": ["1359"]}
{"title": "Towards experiencing the pair programming as a practice of the Rational Unified Process (RUP)\n", "abstract": " The Rational Unified Process (RUP) is a software engineering process model that is significantly used to enhance the software team productivity within a development organization. However, the asynchronize communication among the developers of a software team shows diverse effects over the team effort and productivity factors as main goals of the RUP. Although, the roles, workflow and artifacts are well documented but there is a need to fill the gap that arises due to the asynchronize communication among the developers. In Agile development, pair programming is considered the best practice for developers to work in pairs and synchronize the communication. The authors have proposed a novel framework to experience the pair programming concept among the role's communication in three main areas of the RUP such as activities of workflow, phase integration, and process and control management. We\u00a0\u2026", "num_citations": "7\n", "authors": ["1359"]}
{"title": "A formal framework for web service broker to compose QoS measures\n", "abstract": " Web Services has been more recently emerged as the technology of choice to realize Service-Oriented Computing (SOC), a significant computing paradigm. The accomplishment of customer's satisfaction and trust is thought-provoking for web service providers. Subsequently, the attainment of non-functional requirements (aka QoS measures) is still a critical research challenge in realizing the Web Service Composition (WSC). The reason behind this research is to design a formal procedure for a service broker to present the worst scenario for users nonfunctional besides functional requirements. We formally address the workflow-based abstract level description of web services coordination through a formal framework of a service broker by composing the functional and non-functional requirements. The syntax of the formal framework is defined and analyzed using \u03c0-calculus. However, the semantic analysis of the\u00a0\u2026", "num_citations": "7\n", "authors": ["1359"]}
{"title": "Multicriteria Decision Making Taxonomy of Cloud-Based Global Software Development Motivators\n", "abstract": " The software organizations widely consider the cloud based global software development (CGSD) as it offer the quality projects with low cast. The adoption of CGSD is challenging due to the geographical distance between practitioners. This study aims to identify and analyses the motivators that could positively impact the implementation of CGSD paradigm. The systematic literature review approach was applied to identify the CGSD motivators reported in the literature, and were further validated with industry experts using questionnaire survey study. Moreover, the fuzzy-AHP approach was applied to prioritize the investigated motivators concerning their significance for the successful adoption of CGSD. The findings of the study provide the prioritization-based taxonomy of the investigated motivators that assists the software organizations to develop and revise their strategies for the successful implementation of CGSD.", "num_citations": "5\n", "authors": ["1359"]}
{"title": "Towards process improvement in DevOps: a systematic literature review\n", "abstract": " In recent years, the software release cost has been reduced dramatically due to the alteration from traditional shrink-wrapped software to software as a service. Organizations that can deliver their services continuously and with a high frequency have a higher ability to compete in the market. As a response to this, a substantial number of software companies acquired DevOps to establish a culture of effective communication and collaboration between development and operation teams and in order to enhance the production release frequency as well as to maintain the product quality. However, the DevOps environment requires a platform that aid in evaluating the performance of existing processes and provide improvement recommendations. On top of that, organizations can only achieve the perceived benefits of DevOps if their processes are mature and continuously measured. The objective of this research is to\u00a0\u2026", "num_citations": "5\n", "authors": ["1359"]}
{"title": "A framework for ranking of software design patterns\n", "abstract": " Several software design patterns have been familiarized either in canonical or as variant solutions in order to solve a problem. Novice designers mostly adopt patterns without considering their ground reality and relevancy with design problems, which may cause to increase the development and maintenance efforts. In order to realize the ground reality and to automate the selection process, the existing automated systems for the selection of design patterns either need formal specification or precise learning through training the numerous classifiers. In order to address this issue, we propose an approach on the base of a supervised learning technique named \u2018Learning to Rank\u2019, to rank the design patterns with respect to text similarity with the description of the given design problems. Subsequently, we also propose an evaluation model in order to assess the effectiveness of the proposed approach. We\u00a0\u2026", "num_citations": "5\n", "authors": ["1359"]}
{"title": "A robust framework for cloud\u2010based software development outsourcing factors using analytical hierarchy process\n", "abstract": " Managing the cloud\u2010based software development outsourcing (CSDO) activities across the geographically distributed development sites are much challenging. This study aims to identify the success factors (SFs) for CSDO and prioritize them based on their significance. To achieve this objective, we conducted a systematic literature review (SLR) and survey study with industrial and academic experts. Finally, we applied the analytical hierarchy process (AHP) to develop the framework based on the prioritization of the identified SFs. We believe that the findings of this study will assist the industry practitioners and researchers in developing effective strategies for the successful implementation of CSDO activities.", "num_citations": "4\n", "authors": ["1359"]}
{"title": "A methodology to rank the design patterns on the base of text relevancy\n", "abstract": " Several software design patterns have cataloged either with canonical or as variants to solve a recurring design problem. However, novice designers mostly adopt patterns without considering their ground reality and relevance to design problems, which causes to increase the development and maintenance efforts. The existing automated systems to select the design patterns need either high computing effort and time for the formal specification or precise learning through the training of several classifiers with large sample size to select the right design patterns realized on the base of their ground reality. In order to discuss this issue, we propose a method on the base of a supervised learning technique named \u2018Learning to Rank\u2019, to rank the design patterns via the text relevancy with the description of the given design problems. Subsequently, we also propose an evaluation model to assess the effectiveness\u00a0\u2026", "num_citations": "4\n", "authors": ["1359"]}
{"title": "Correlation between the frequent use of gang-of-four design patterns and structural complexity\n", "abstract": " The structural complexity of design components (e.g. Classes) is proportional to design quality at the system level and is quantified via the object-oriented metrics. The frequent use of design patterns causes of too much abstraction and can increase the structural complexity of design components. Though, in our previous work, we have empirically investigated the impact of use intensity of design pattern on the system level quality attributes. However, the empirical investigation of the effect of usage of design patterns on the design properties is still required. In this regard, we conduct an empirical study and perform a case study which includes the analysis 1) the existence of a correlation between design pattern usage and design metrics, 2) the confounding effect of system size (number of classes) on the correlation, and 3) how the change in number of employed design pattern instances affects the structural\u00a0\u2026", "num_citations": "3\n", "authors": ["1359"]}
{"title": "A fuzzy analytical hierarchy process to prioritize the success factors of requirement change management in global software development\n", "abstract": " Planning and managing of requirement change management (RCM) process in global software development (GSD) are a complicated task, but the RCM plays a significant role in developing the quality software within time and budget. The key aim of this study is to prioritize the factors that could positively influence the RCM program in GSD context. To achieve the study objective, the questionnaire survey study was conducted to get the feedback of the practitioners concerning the success factors of RCM in GSD context. Moreover, the fuzzy analytical hierarchy process (FAHP) was applied. The application of FAHP is novel in this research domain as it has been effectively applied previously in various other research areas, for example, supplier selection, electronics and electrical, personnel selection, and agile software development. The results of this study will provide the prioritization\u2010based taxonomy of RCM\u00a0\u2026", "num_citations": "2\n", "authors": ["1359"]}
{"title": "Methodology for the quantification of the effect of patterns and anti-patterns association on the software quality\n", "abstract": " The employment of design patterns is considered as a benchmark of software quality in terms of reducing the number of software faults. However, the quantification of the information about the hinder design issues such as the number of roles, type of design pattern, and their association with anti-pattern classes is still required. The authors propose a new methodology to evaluate the impact of certain design issues on the software quality in terms of quantification of fault density. Firstly, they mine the required information about the classes of each system under study. Secondly, they describe taxonomy to group the classes. Subsequently, they used statistical techniques to formulate and benchmark the results. They include the analysis of four open source projects with six design patterns and six anti-patterns in the case study. The main consequences are (i) the pattern participant classes are less dense in faults, (ii) the\u00a0\u2026", "num_citations": "2\n", "authors": ["1359"]}
{"title": "A framework for assisting software process improvement program in global software development: student research abstract\n", "abstract": " Presently, software systems are becoming a vital part of business in the world. Most of the software development organizations is adopting Global Software Development (GSD) and it is incessantly getting faster. The software development orgazations trying to globalize their production worldwide to acquire various benefits. GSD is a complex phenomenon and organizations face different challenges while adopting GSD. It has been noticed that Software Process Improvement (SPI) becomes as one of the major challenges for GSD. The objective of this research is to develop a framework in order to support the implementation of softwrae process improvement program in the context of GSD. The framework will base on an industrial study of SPI practitioners, experiences and understanding of factors that can have a positive or negative impact on SPI implementation initiatives in the domain of GSD.", "num_citations": "2\n", "authors": ["1359"]}
{"title": "End User in Charge-Social Framework for Open Source Development\n", "abstract": " Open Source Software (OSS) is often developed in a public collaborative manner. Online OSS repositories such as GitHub, Google Code and SourceForge support collaborative OSS development by offering services such as subversion management, bug tracking and others. However, OSS mostly favors end-users who are programmers or have some prerequisite programming skills. The normally short README description file provided by the OSS developers does not contain enough information to help the novice end-users who intend to use the software in terms of installation and usage. Also, despite being equipped with social coding feature to support distributed multi-developer work environment, most OSS repositories provide only a storage space for the OSS files and this limits end-users just to their bugs/review comments on a different platform and naturally, people would also like to be key stakeholders like changing the functionality and accessibility of software they could use. Some online OSS repositories do not make provision for users to frequently communicate with the developers of the OSS to discuss about the published content on the repository. In this paper, we propose a social framework for OSS development to address the aforementioned issues. The framework is aimed to allow:(1) knowing the degree of matching between the sought user\u2019s requirements and the available OSS by presenting the enduser with the business domain model of a candidate OSS associated to its textual requirements description and (2) a lifetime communication between the users and OSS developers and even inviting other developers out of the\u00a0\u2026", "num_citations": "2\n", "authors": ["1359"]}
{"title": "A Communication Risk Framework For Requirements Change in Global Software Development\n", "abstract": " Global Software Development (GSD) has gained great attention during the past decade or so; and it is also being implemented throughout the world. Due to the economic and strategic effects of GSD, it is treated as a substitute to a single site. The geographically dispersed environment makes software development a complicated task and brings out several challenges such as geographical, socio-cultural and temporal distances. The process of Requirements Change Management (RCM) in the GSD is thought to be puzzling even in the finest situations. Due to effect of geographical, socio-cultural and temporal distances, various communication risks arise among the distributed team members during the process of RCM.", "num_citations": "2\n", "authors": ["1359"]}
{"title": "What users really think about the usability of smartphone applications: diversity based empirical investigation\n", "abstract": " In recent years, smartphone devices are becoming progressively popular across a diverse range of users. However, user diversity creates challenges in smartphone application (app) development. The diversity of users is often ignored by designers and developers due to the absence of requirements. Owing to this, many smartphone users face usability issues. Despite that, no dedicated platform found that guide smartphone app designers and developers regarding human universality. The aim of this research is to explore the requirements of diverse users in smartphone apps and provide usability guidelines. The objectives of this research are achieved by following two scientific approaches. The human diversity requirements are located by conducting usability tests that investigated the requirements in the form of usability issues. The systematic literature review (SLR) process is followed in order to resolve\u00a0\u2026", "num_citations": "1\n", "authors": ["1359"]}
{"title": "A Similarity Integration Method based Information Retrieval and Word Embedding in Bug Localization\n", "abstract": " To improve the performance of bug localization, there is necessity to solve the lexical mismatch between the natural language in the bug report and the programming language in the source file. A similarity integration method for bug localization is proposed, in which the similarity between bug report and source file is calculated by information retrieval (IR) and word embedding. More specifically, IR technique is used to collect the exact matches between bug report and source file. The terms in the bug report and the potential source files of different code tokens are connected by word embedding technique, which is used to complement with IR technique. Finally, deep neural network (DNN) is utilized to integrate extracted features to get the correlation between bug reports and source files. The experimental results show that the proposed approach outperforms several existing bug localization approaches in terms of\u00a0\u2026", "num_citations": "1\n", "authors": ["1359"]}
{"title": "Prioritizing Management Success Factors in Offshore Software Development\n", "abstract": " A number of organizations have adopted offshore software development (OSD) practices to support their software development in terms of reducing time to market, access to technical talent and lower costs. There is a lack of understandings of the factors associated with successful management of OSD projects. The objective of this study is to identify and prioritize the factors that contribute to successful management of OSD projects. First, we conducted a systematic literature review (SLR) to identify a set of factors that influence successful management of OSD projects. Second, a questionnaire survey was developed based on the findings of the SLR to collect feedback from industry practitioners. Finally, we prioritized the success factors using the analytic hierarchy process. In total, 36 success factors were identified. Findings of the study indicate that standards and procedures, change management engineering and\u00a0\u2026", "num_citations": "1\n", "authors": ["1359"]}
{"title": "Knowledge based quality analysis of crowdsourced software development platforms\n", "abstract": " As an emerging and promising approach, crowdsourcing-based software development has become popular in many domains due to the participation of talented pool of developers in the contests, and to promote the ability of requesters (or customers) to choose the \u2018wining\u2019 solution with respect to their desired quality levels. However, due to lack of a central mechanism for team formation, continuity in the developer\u2019s work on consecutive tasks and risk of noise in submissions of a contest, there is a gap between the requesters of a domain and their quality concerns related to the adaptation of a crowdsourcing-based software development platform. In order to address concerns and aid requesters, we describe three measures; Quality of Registrant Developers (QRD), Quality of Contest (QC) and Quality of Support (QS) to compute and predict the quality of a crowdsourcing-based platform through historical\u00a0\u2026", "num_citations": "1\n", "authors": ["1359"]}