{"title": "Systematic review in software engineering\n", "abstract": " In contrast to the usual process of literature review, unsystematically conducted whenever one starts a particular investigation, a SR is developed, as the term denotes, in a formal and systematic way. This means that the research conduction process of a systematic type of review follows a very well defined and strict sequence of methodological steps, according to an aprioristically developed protocol. This instrument is constructed around a central issue, which represents the core of the investigation, and which is expressed by using specific concepts and terms, that must be addressed towards information related to a specific, pre-defined, focused, and structured question. The methodological steps, the strategies to retrieve the evidence, the focus of the question are explicitly defined, so that other professionals can reproduce the same protocol and also be able to judge about the adequacy of the chosen standards for\u00a0\u2026", "num_citations": "968\n", "authors": ["162"]}
{"title": "Towards an ontology of software maintenance\n", "abstract": " We suggest that empirical studies of maintenance are difficult to understand unless the context of the study is fully defined. We developed a preliminary ontology to identify a number of factors that influence maintenance. The purpose of the ontology is to identify factors that would affect the results of empirical studies. We present the ontology in the form of a UML model. Using the maintenance factors included in the ontology, we define two common maintenance scenarios and consider the industrial issues associated with them. Copyright \u00a9 1999 John Wiley & Sons, Ltd.", "num_citations": "283\n", "authors": ["162"]}
{"title": "Introdu\u00e7\u00e3o \u00e0 engenharia de software experimental\n", "abstract": " Experimenta\u00e7\u00e3o \u00e9 o centro do processo cient\u00edfico. Somente experimentos verificam as teorias. Somente experimentos podem explorar os fatores cr\u00edticos e dar luz ao fen\u00f4meno novo para que as teorias possam ser formuladas e corrigidas. Experimenta\u00e7\u00e3o oferece o modo sistem\u00e1tico, disciplinado, comput\u00e1vel e controlado para avalia\u00e7\u00e3o da atividade humana. Novos m\u00e9todos, t\u00e9cnicas, linguagens e ferramentas n\u00e3o deveriam ser apenas sugeridos, publicados ou apresentados para venda sem experimenta\u00e7\u00e3o e valida\u00e7\u00e3o. Portanto, \u00e9 preciso avaliar novas inven\u00e7\u00f5es e sugest\u00f5es em compara\u00e7\u00e3o com as existentes.Quando falamos de Engenharia de Software, a discuss\u00e3o concentra-se em se podemos consider\u00e1-la ci\u00eancia ou engenharia. Esta quest\u00e3o refere o duplo car\u00e1ter do software. Por um lado, a Engenharia de Software considera o processo de cria\u00e7\u00e3o do produto (software) e desse ponto de vista ela\u00a0\u2026", "num_citations": "231\n", "authors": ["162"]}
{"title": "Towards supporting the life cycle of large scale scientific experiments\n", "abstract": " One of the main challenges of scientific experiments is to allow scientists to manage and exchange their scientific computational resources (data, programs, models, etc.). The effective management of such experiments requires a specific set of cardinal facilities, such as experiment specification techniques, workflow derivation heuristics and provenance mechanisms. These facilities may characterise the experiment life cycle into three phases: composition, execution, and analysis. Works concerned with supporting scientific workflows are mainly concerned with the execution and analysis phase. Therefore, they fail to support the scientific experiment throughout its life cycle as a set of integrated experimentation technologies. In large scale experiments this represents a research challenge. We propose an approach for managing large scale experiments based on provenance gathering during all phases of the life\u00a0\u2026", "num_citations": "163\n", "authors": ["162"]}
{"title": "A integra\u00e7\u00e3o de conhecimento em um amblente de desenvolvimento de software\n", "abstract": " A medida que o processo de desenvolvimento de software toma-se mais complexo, passa a ser imprescind\u00edvel que os Ambientes de Desenvolvimento de Software (ADSs) ofere\u00e7am suporte inteligente para a execu\u00e7\u00e3o das atividades do processo. Entretanto, a maioria dos ADSs com suporte baseado em, conhecimento nao trata o conhecimento de mane\u00edra integrada, mas sim isoladanumte em cada urna de suas ferramentas. Este texto apresenta a abordagem preliminar utilizada na Esta\u00e7\u00e3o TABA, um ADS desenvolvido segundo o paradigma de objetos, para a integra\u00e7\u00e3o de conhecimento descrito na forma de regras.", "num_citations": "161\n", "authors": ["162"]}
{"title": "Estudos Prim\u00e1rios e Secund\u00e1rios apoiando a busca por Evid\u00eancia em Engenharia de Software\n", "abstract": " Neste relat\u00f3rio, \u00e9 descrito como a Engenharia de Software pode se beneficiar da utiliza\u00e7\u00e3o de uma abordagem baseada em evid\u00eancia. Nesse cen\u00e1rio, a condu\u00e7\u00e3o de estudos experimentais, e a posterior compila\u00e7\u00e3o, agrega\u00e7\u00e3o e sumariza\u00e7\u00e3o dos resultados desses estudos, possibilita caracterizar uma determinada tecnologia em uso. O resultado dessa caracteriza\u00e7\u00e3o pode auxiliar a aquisi\u00e7\u00e3o e a aplica\u00e7\u00e3o de tecnologias no desenvolvimento industrial de software, al\u00e9m de direcionar os esfor\u00e7os de pesquisa na \u00e1rea.", "num_citations": "116\n", "authors": ["162"]}
{"title": "Aplicando uma metodologia baseada em evid\u00eancia na defini\u00e7\u00e3o de novas tecnologias de software\n", "abstract": " The transfer of Software technologies to the industrial context could bring undesirable consequences if such technologies are not under an adequate maturity level. This paper aims at to describe the use of an evidencebased methodology that can support the reduction of this risk. The application of such methodology is illustrated through two concrete cases regarding the definition of a software requirements reading technique and a checklist based approach for inspecting software architectural models. Besides, some lessons learned by using the methodology are also described.Resumo. A introdu\u00e7\u00e3o de tecnologias de software rec\u00e9m-definidas no contexto industrial pode trazer conseq\u00fc\u00eancias indesej\u00e1veis caso a tecnologia n\u00e3o possua um grau adequado de maturidade. Nesse sentido, o presente artigo visa a ilustrar como a utiliza\u00e7\u00e3o de uma metodologia baseada em evid\u00eancia pode auxiliar a minimizar essa\u00a0\u2026", "num_citations": "85\n", "authors": ["162"]}
{"title": "Characterizing DevOps by hearing multiple voices\n", "abstract": " Recently, DevOps has emerged as an alternative for software organizations inserted into a dynamic market to handle daily software demands. As claimed, it intends to make the software development and operations teams to work collaboratively. However, it is hard to observe a shared understanding of DevOps, what potentially hinders the discussions in the literature and can confound observations when conducting empirical studies. Therefore, we performed a Multivocal Literature Review aiming at characterizing DevOps in multiple perspectives, including data sources from technical and gray literature. Grounded Theory procedures were used to rigorous analyze the collected data. It allowed us to achieve a grounded definition for DevOps, as well as to identify its recurrent principles, practices, required skills, potential benefits, challenges and what motivates the organizations to adopt it. Finally, we understand the\u00a0\u2026", "num_citations": "72\n", "authors": ["162"]}
{"title": "Extending UML to support domain analysis\n", "abstract": " Develops a domain engineering approach and the supporting tools to define software product lines. The approach is composed of a process and a notation. The notation is an extension of UML (Unified Modeling Language), while the process is influenced by the Synthesis and FAST domain engineering methods. Supporting tools have been built on top of a commercial CASE tool for UML. This paper focuses on the domain analysis part of the approach and specifically on the notation and tools to support it. The approach is being applied to sub-domains of the guidance, navigation and control domain, which are a set of functionalities used on-board satellites developed by the NASA Goddard Space Flight Center.", "num_citations": "64\n", "authors": ["162"]}
{"title": "Towards a defect prevention based process improvement approach\n", "abstract": " Defect causal analysis (DCA) is a means of product focused software process improvement. A systematic literature review to identify the DCA state of the art has been undertaken. The systematic review gathered unbiased knowledge and evidence and identified opportunities for further investigation. Moreover, some guidance on how to efficiently implement DCA in software organizations could be elaborated. This paper describes the initial concept of the DBPI (Defect Based Process Improvement) approach. It represents a DCA based approach for process improvement, designed considering the results of the systematic review and the obtained guidance. Its main contributions are tailoring support for DCA based process improvement and addressing an identified opportunity for further investigation by integrating organizational learning mechanisms regarding cause-effect relations into the conduct of DCA.", "num_citations": "61\n", "authors": ["162"]}
{"title": "Defini\u00e7\u00e3o e constru\u00e7\u00e3o de ambientes de desenvolvimento de software orientados a organiza\u00e7\u00e3o\n", "abstract": " Este artigo define Ambientes de Desenvolvimento de Software Orientados a Organiza\u00e7\u00e3o (ADSOrg) como sendo ambientes de desenvolvimento de software que ap\u00f3iam a ger\u00eancia do conhecimento relevante para os processos de desenvolvimento e manuten\u00e7\u00e3o de software da organiza\u00e7\u00e3o. Al\u00e9m disso, prop\u00f5e um modelo que especifica os componentes necess\u00e1rios para que tais ambientes contemplem os seus requisitos. Uma estrat\u00e9gia para a constru\u00e7\u00e3o de ADSOrg a partir de um meta-ambiente tamb\u00e9m foi definida, implementada e utilizada. Este artigo ainda apresenta um resumo dos resultados de uma pesquisa de campo realizada com a finalidade de orientar os futuros esfor\u00e7os de incorpora\u00e7\u00e3o de conte\u00fado e desenvolvimento de ferramentas para ADSOrg.", "num_citations": "60\n", "authors": ["162"]}
{"title": "Evidence-based guidelines to defect causal analysis\n", "abstract": " Default causal analysis (DCA) or defect prevention is required by higher-maturity-level software development processes such as the Brazilian Software Process Improvement Reference Model and Capability Maturity Model Integration. The authors ask and answer questions about implementing it in lower-maturity organizations. In the related web extra entitled \u201cEvidence-Based Guidelines on Defect Causal Analysis,\u201d authors Marcos Kalinowski, David N. Card, and Guilherme H. Travassos discuss the basics of research protocol.", "num_citations": "58\n", "authors": ["162"]}
{"title": "Common agile practices in software processes\n", "abstract": " Objective: to investigate studies about software processes looking for practices which can be used to obtain agility in software processes. Method: A systematic review including seven search engines was executed in Feb/2010. To apply the defined criteria to select papers and extract information regarding working practices bringing agility to software processes. Results: from 6696 retrieved papers, 441 were selected to support the identification of 236 occurrences of 51 distinct practices associated with the concept of agility. Their descriptions were deeply analyzed and consolidated. After discarding those which appeared in the technical literature in a small amount of papers, 17 agile practices were identified. Conclusion: although further studies are necessary to evaluate the efficacy of these 17 agile practices, 12 of them have been more commonly approached in the software projects and could be primarily\u00a0\u2026", "num_citations": "49\n", "authors": ["162"]}
{"title": "Revis\u00f5es sistem\u00e1ticas aplicadas a engenharia de software\n", "abstract": " \u2022 Um engenheiro de software est\u00e1 trabalhando na \u00e1rea de processos de software, desenvolvendo uma abordagem para melhoria de qualidade de software. Neste sentido, tem se especulado na sua organiza\u00e7\u00e3o que a utiliza\u00e7\u00e3o de inspe\u00e7\u00f5es de software pode aprimorar o processo de constru\u00e7\u00e3o fazendo com que se identifique em torno de 60% dos defeitos do produto. Entretanto, n\u00e3o se tem clareza disso. Para tomar a decis\u00e3o de inserir inspe\u00e7\u00f5es no processo de desenvolvimento \u00e9 necess\u00e1ria a observa\u00e7\u00e3o de alguma evid\u00eancia sobre se inspe\u00e7\u00f5es de software realmente trazem benef\u00edcio ao desenvolvimento.", "num_citations": "49\n", "authors": ["162"]}
{"title": "Investigating probabilistic sampling approaches for large-scale surveys in software engineering\n", "abstract": " Establishing representative samples for Software Engineering surveys is still considered a challenge. Specialized literature often presents limitations on interpreting surveys\u2019 results, mainly due to the use of sampling frames established by convenience and non-probabilistic criteria for sampling from them. In this sense, we argue that a strategy to support the systematic establishment of sampling frames from an adequate source of sampling can contribute to improve this scenario. A conceptual framework for supporting large scale sampling in Software Engineering surveys has been organized after performing a set of experiences on designing such strategies and gathering evidence regarding their benefits. The use of this conceptual framework based on a sampling strategy developed for supporting the replication of a survey on characteristics of agility and agile practices in software processes is depicted in this paper. A professional social network (Linkedln) was established as the source of sampling and its groups of interest as the units for searching members to be recruited. It allowed to deal with a sampling frame composed by more than 110,000 members (prospective subjects) distributed over 19 groups of interest. Then, through the similarity levels observed among these groups, eight strata were organized and 7745 members were invited, from which 291 have confirmed participation and answered the questionnaire. The heterogeneity and number of participants in this replication contributed to improve the strength of original survey\u2019s results. Therefore, we believe the sharing of this experience, the instruments and plan can be helpful for\u00a0\u2026", "num_citations": "46\n", "authors": ["162"]}
{"title": "A computational framework for supporting software inspections\n", "abstract": " Software inspections improve software quality by the analysis of software artifacts, detecting their defects for removal before these artifacts are delivered to the following software life cycle activities. Some knowledge regarding software inspections have been acquired by empirical studies. However, we found no indication that computational support for the whole software inspection process using appropriately such knowledge is available. This paper describes a computational framework whose requirements set was derived from knowledge acquired by empirical studies to support software inspections. To evaluate the feasibility of such framework, two studies have been accomplished: one case study, which has shown the feasibility of using the framework to support inspections, and an experimental study that evaluated the supported software inspection planning activity. Preliminary results of this experimental study\u00a0\u2026", "num_citations": "46\n", "authors": ["162"]}
{"title": "Evaluation Approaches for Software Architectural Documents: a Systematic Review.\n", "abstract": " Due to the importance of software architectural documents, its review became a fundamental activity for the success of software projects and for the software quality improvement. Software architecture evaluation is a subject that has been intensively studied by diverse research groups. However there is a lack of formal reviews aiming at identifying the existence of software evaluation approaches. The bibliographical reviews that have been accomplished can not be audited or repeated, making them entirely dependent upon the researchers for the obtained results, which could introduce bias on the research results. To prevent these limitations, this paper describes a systematic review aiming at the identification of existing architectural evaluation approaches. Based on the result of this review, we summarize the main characteristics, advantages and limitations of the identified evaluation approaches and propose the requirements for a checklist based software architectural documents evaluation approach.", "num_citations": "44\n", "authors": ["162"]}
{"title": "Gerenciando experimentos cient\u00edficos em larga escala\n", "abstract": " Several scientific areas, such as bioinformatics and oil engineering, need means of executing simulation-based experiments. The state of the practice for this, in most of the cases, consists in the execution of a set of programs. This, however, is not enough to deal with the complexity imposed by the problems that need to be analyzed. This issue gets worse with largescale experiments. In this case, we need a system to manage the composition of processes and data in a coherent flux. Also, this system must be capable of registering the steps and parameters used in the well-succeeded executions of the experiment. The main motivation of this paper is in identifying and analyzing the challenges that need to be addressed to provide computational support to the development of large-scale scientific experiments. The challenges we identify here deal with the general problem of managing scientific experiments to several applications and resources distributed over a large-scale network such as grids. We identify three complementary research directions: the performance, the management process, and the semantic support. For each of them, we point out some possible solution paths.Resumo. Diversas \u00e1reas cient\u00edficas, tais como bioinform\u00e1tica e engenharia de petr\u00f3leo, necessitam de meios para a execu\u00e7\u00e3o de experimentos baseados em simula\u00e7\u00e3o. O estado da pr\u00e1tica para esse fim consiste, na grande maioria das vezes, na execu\u00e7\u00e3o de um conjunto de programas, o que n\u00e3o \u00e9 suficiente para tratar a complexidade imposta pelos problemas a serem analisados. O problema se agrava quando o experimento ocorre em larga escala. Faz-se\u00a0\u2026", "num_citations": "42\n", "authors": ["162"]}
{"title": "T\u00e9cnicas de leitura de software: Uma revis\u00e3o sistem\u00e1tica\n", "abstract": " The object-oriented paradigm (OO) has smoothly succeeded in the industrial development environments. However, the accomplishment of verification and validation activities concerned with OO system still remains a challenge. We believe that the use of reading techniques for software inspections can represent a feasible alternative into this context. In this paper the results from a systematic review regarding reading techniques applied to OO software have been described, including the discussion about research challenges concerned with such techniques.Resumo. A orienta\u00e7\u00e3o a objetos (OO) alcan\u00e7ou consider\u00e1vel sucesso no desenvolvimento industrial. Entretanto, a condu\u00e7\u00e3o de atividades de verifica\u00e7\u00e3o e valida\u00e7\u00e3o em software OO ainda \u00e9 um desafio. Acreditamos que a utiliza\u00e7\u00e3o de t\u00e9cnicas de leitura em inspe\u00e7\u00f5es de software seja uma alternativa vi\u00e1vel para garantir a qualidade do software OO. Em vista\u00a0\u2026", "num_citations": "38\n", "authors": ["162"]}
{"title": "Managing organizational risk knowledge\n", "abstract": " Risk planning requires an organization global view, as it is strongly centered in the experience and knowledge acquired in former projects. The larger the experience of the project manager the better will be his ability in identifying risks, estimating their occurrence likelihood and impact, and defining the mitigation and contingency plans. However, project manager risk knowledge cannot stay in an individual level, but it must be made available to the organization. This paper describes an approach to risk planning in software projects based on the organizational risk knowledge reuse. A risk management process focused on the capture and utilization of organizational knowledge together with a support case tool make part of this approach. An experimental study of the relations between risk-causing facts and risks of software projects was accomplished and its results used to define such a tool.", "num_citations": "33\n", "authors": ["162"]}
{"title": "Characterizing testing methods for context-aware software systems: Results from a quasi-systematic literature review\n", "abstract": " Context-Aware Software Systems (CASS) use environmental information to provide better service to the systems\u2019 actors to fulfill their goals. Testing of ubiquitous software systems can be challenging since it is unlikely that, while designing the test cases, the tester can identify all possible context variations. A quasi-Systematic Literature Review has been undertaken to characterize the methods usually used for testing CASS. The analysis and generation of knowledge in this work rely on classifying the extracted information. Established taxonomies of software testing and context-aware were used to characterize and interpret the findings. The results show that, although it is possible to observe the utilization of some software testing methods, few empirical studies are evaluating such methods when testing CASS. The selected technical literature conveys a lack of consensus on the understanding of context and CASS\u00a0\u2026", "num_citations": "31\n", "authors": ["162"]}
{"title": "Experimentation with dynamic simulation models in software engineering: planning and reporting guidelines\n", "abstract": " Simulation-based studies (SBS) have become an interesting investigation approach for Software Engineering (SE). However, the reports on experiments with dynamic simulation models found in the technical literature lack relevant information, hampering the full understanding of the procedures and results reported, as well as their replicability. Apart from the limitations on the length in conferences and journal papers, some of the relevant information seems to be missing due to methodological issues not considered when conducting such studies. This is the case of missing research questions and goals, lack of evidence regarding the dynamic simulation model validity, poorly designed simulation experiments, amongst others. Based on findings from a previous quasi-systematic literature review, we propose a set of reporting guidelines for SBS with dynamic models in the context of SE aiming at providing\u00a0\u2026", "num_citations": "31\n", "authors": ["162"]}
{"title": "Verification of Software Product Line Artefacts: A Checklist to Support Feature Model Inspections.\n", "abstract": " Software Product Line Engineering (SPL) should ensure the correctness, completeness and consistency of its artefacts and related domain to prevent the propagation of defects in derived products. Software inspection techniques are effective in detecting defects in software artefacts and avoiding their propagation throughout the software development process. However, the results of a quasi-systematic review of the technical literature reported in this paper pointed to a lack of such techniques to support the inspection of SPL artefacts, including techniques to support the inspection of feature models (FMs) that are largely used in domain modelling. Therefore, a checklist-based inspection technique (FMCheck) has been developed to support the detection of defects on FMs. FMCheck is configurable and can be applied to the original feature model notation (the FODA approach) and its extensions, including the Odyssey\u00a0\u2026", "num_citations": "30\n", "authors": ["162"]}
{"title": "Desafios no apoio \u00e0 composi\u00e7\u00e3o de experimentos cient\u00edficos em larga escala\n", "abstract": " Management of scientific experiments requires a set of specific functionalities. One of such functionalities is the support to experiment composition, which includes scientific workflows conception. However, little support is given to: conception and instantiation for execution in a Workflow Management System; reuse of workflows; control about the evolution of different workflow; and gathering of information for provenance of data. In this paper we present solutions to some of these problems. Such solutions were obtained with Software Engineering and Databases Techniques. Preliminary results with real experiments point to the feasibility of this approach.Resumo. Para que experimentos cient\u00edficos em larga escala possam ser gerenciados, \u00e9 necess\u00e1rio que um conjunto de funcionalidades esteja presente. Dentre essas funcionalidades est\u00e1 o apoio \u00e0 composi\u00e7\u00e3o dos experimentos, que inclui a concep\u00e7\u00e3o de workflows cient\u00edficos. o entanto, pouco apoio \u00e9 oferecido \u00e0 concep\u00e7\u00e3o e instancia\u00e7\u00e3o para execu\u00e7\u00e3o num Sistema de Ger\u00eancia de Workflows, \u00e0 reutiliza\u00e7\u00e3o, ao controle sobre a evolu\u00e7\u00e3o dos workflows e \u00e0 coleta de informa\u00e7\u00f5es para proveni\u00eancia de dados. este artigo apresentamos solu\u00e7\u00f5es para alguns destes problemas a partir de t\u00e9cnicas de Engenharia de Software e Banco de Dados. Resultados preliminares com experimentos reais apontam para a viabilidade dessa abordagem.", "num_citations": "30\n", "authors": ["162"]}
{"title": "iMPS: an experimentation based investigation of a nationwide software development reference model\n", "abstract": " Experimentation in software engineering represents a means to understand the impact of adopting software technologies. In this paper we describe an on-going experimentation work aiming at to address a real industry need in Brazil: the understanding of how performance variables (such as cost, productivity, and quality) are affected by the adoption of a nationwide software development reference model. The main strategy consists in integrating the application of carefully planned surveys into the model implementation and assessment procedures. Besides the expected performance results, we hope it can be useful to reinforce to the Brazilian software industry the importance of experimentation to support software technologies evaluation.", "num_citations": "30\n", "authors": ["162"]}
{"title": "Using domain-knowledge in software development environments\n", "abstract": " Software teams have hard times to develop software when they are not familiar with the problem domain. We believe that the use of domain knowledge during the software development can render this process easier and increase productivity. To support this idea we defined a DomainOriented Software Development Environment and we are currently building it. This environment will make available knowledge about the domain in a symbolic representation by using domain ontology. Specific domain activities and domain-specific tools introduced into the software development environment define the use of this knowledge during the software development process. This paper shows how the domain-knowledge is defined and used to assist in the software development process. We also give examples from the cardiology domain.", "num_citations": "30\n", "authors": ["162"]}
{"title": "MPS. BR: Promovendo a Ado\u00e7\u00e3o de Boas Pr\u00e1ticas de Engenharia de Software pela Ind\u00fastria Brasileira.\n", "abstract": " The MPS model has been developed in the context of the MPS. BR Program in order to address the business needs of the Brazilian software industry. In this paper we present the current version of the MPS model, quantitative results of its adoption, and qualitative performance results obtained by software organizations that adopted the model, gathered through an experimental strategy based on surveys applied during two consecutive years. The quantitative results (174 organizations appraised until September 2009) point to an increasing adoption of the MPS model by Brazilian software organizations and to its capacity in promoting good software engineering practices. The qualitative results, on the other hand, show an increase of customer satisfaction and productivity, and capacity to deal with bigger projects for organizations that adopted the MPS model.", "num_citations": "27\n", "authors": ["162"]}
{"title": "Tool-supported unobtrusive evaluation of software engineering process conformance\n", "abstract": " Software engineers face the dilemma of verifying process conformance and having the Hawthorne effect distorting the results or not doing it and as a consequence not being able to know if the proposed process is actually carried out. We addressed this issue by classifying and proposing the use of some approaches based on unobtrusive observation. These approaches include cognitive labs, remote monitoring and metrics collection. In addition, a tool supporting the application of perspective based reading (PER) for requirements inspection has been used and is also presented to exemplify metrics collection. Among other features, PBR Tool unobtrusively collects metrics in order to monitor if the reading technique is faithfully applied. Two studies evaluating the feasibility of such a tool are also reported.", "num_citations": "26\n", "authors": ["162"]}
{"title": "Managing and developing distributed research projects in software engineering by means of action-research\n", "abstract": " Participation in software research projects involving several organizations (research groups, enterprises, etc) scattered all around the world is an increasingly frequent phenomenon. The geographical distribution of the organizations entails the research projects development and management taking suitable Software Engineering research methods which must satisfy the acquired commitments as well as the new coming challenges. In that respect, this paper discusses how the Action-research qualitative method can be suitable for managing and developing software engineering distributed research projects. Furthermore, we propose a strategy to guide the use of Action-research in the context of distributed research projects. The application of this strategy in a research project, in which more than 10 enterprises and 27 research groups from 13 countries from Latin-America plus Portugal and Spain took part, is also illustrated. We observed that the use of the proposed strategy was able to provide the research managers with:(i) a suitable research project centralized administration, and (ii) appropriate coordination and apportioning of the research responsibilities for the research products construction and validation. It is important to highlight that the proposed strategy is a new way of applying the Action-research method in Software Engineering.", "num_citations": "24\n", "authors": ["162"]}
{"title": "iMPS: Resultados de desempenho de organiza\u00e7\u00f5es que adotaram o Modelo MPS\n", "abstract": " \u2022 1\u2013Introdu\u00e7\u00e3o\u2022 2-iMPS\u2022 3-Execu\u00e7\u00e3o do Estudo: Rodada 1\u2022 4-Caracteriza\u00e7\u00e3o Inicial das Organiza\u00e7\u00f5es\u2022 5\u2013An\u00e1lise dos Dados", "num_citations": "24\n", "authors": ["162"]}
{"title": "Lessons learnt in conducting survey research\n", "abstract": " Context: Surveys constitute an valuable tool to capture a large-scale snapshot of the state of the practice. Apparently trivial to adopt, surveys hide, however, several pitfalls that might hinder rendering the result valid and, thus, useful. Goal: We aim at providing an overview of main pitfalls in software engineering surveys and report on practical ways to deal with them. Method: We build on the experiences we collected in conducting many studies and distill the main lessons learnt. Results: The eight lessons learnt we report cover different aspects of the survey process ranging from the design of initial research objectives to the design of a questionnaire. Conclusions: Our hope is that by sharing our lessons learnt, combined with a disciplined application of the general survey theory, we contribute to improving the quality of the research results achievable by employing software engineering surveys.", "num_citations": "23\n", "authors": ["162"]}
{"title": "Challenges in testing context aware software systems\n", "abstract": " Context aware software systems (CASS) are becoming pervasive in our lives. Nevertheless, it is not clear whether traditional (no-context aware) software testing techniques are adequate for testing CASS. Therefore, a quasi systematic literature review was used to identify 11 relevant sources that mentioned 15 problems and 4 proposed solutions, which were analyzed and classified into 3 groups of challenges and strategies for dealing with CASS testing. Additionally, some recommendations for testing such software applications with the currently available testing technologies are presented. However, we argue that new context aware testing techniques need to be developed in order to assure the quality of CASS.", "num_citations": "22\n", "authors": ["162"]}
{"title": "Would sociable software engineers observe better?\n", "abstract": " Quantitative studies in Software Engineering are frequently dependent on primary studies in which population is usually small and established by convenience. It brings several limitations for the analysis and strength of results due sampling issues. Therefore, when these studies are reapplied, different and non-clustered populations are established, making unfeasible evidence generalization and contributing for an imbalance between research and practice. Aiming at investigating ways to overcome the absence of large sampling frames in Software Engineering studies, this short paper presents the results of an initial experience concerned with the systematic recruitment of subjects for a survey regarding software requirements effort factors by using social networks compared with recruitment by convenience. We have observed in this particular case that using social networks technology does not guarantee sample\u00a0\u2026", "num_citations": "20\n", "authors": ["162"]}
{"title": "Reporting guidelines for simulation-based studies in software engineering\n", "abstract": " Background: Some scientific fields, such as automobile, drugs discovery or engineer have used simulation-based studies (SBS) to faster the observation of phenomena and evolve knowledge. All of them organize their working structure to perform computerized experiments based on explicit research protocols and evidence. The benefits have been many and great advancements are continuously obtained for the society. However, could the same approach be observed in Software Engineering (SE)? Are there research protocols and evidence based models available in SE for supporting SBS? Are the studies reports good enough to support their understanding and replication? AIM: To characterize SBS in SE and organize a set of reporting guidelines aiming at improving SBS' understandability, replicability, generalization and validity. METHOD: To undertake a secondary study to characterize SBS. Besides, to\u00a0\u2026", "num_citations": "20\n", "authors": ["162"]}
{"title": "Towards pertinent characteristics of agility and agile practices for software processes\n", "abstract": " Context: It is believed that agility in software processes can bring benefits to software development and lead to an economy of efforts when accommodating changes is needed. Objective: Assess pertinence and relevance of agility characteristics and agile practices for software processes. Method: From 18 agility characteristics and 17 agile practices applicable to software processes revealed through systematic literature reviews performed in 2010, a survey was conducted to assess their pertinence and relevance. Results: 16 agility characteristics and 15 agile practices were considered pertinent to insert agility in software processes. Conclusion: Results should be used sparingly. It would be interesting to replicate the study in other contexts, with different subjects, and compare them, to increase the generalization of their results.", "num_citations": "19\n", "authors": ["162"]}
{"title": "ArqCheck: Uma abordagem para inspe\u00e7\u00e3o de documentos arquiteturais baseada em checklist\n", "abstract": " A arquitetura de um software, representada atrav\u00e9s do documento arquitetural, \u00e9 de grande import\u00e2ncia para os stakeholders por ser utilizada em diversos momentos no processo de desenvolvimento do software. Portanto, a sua revis\u00e3o se torna uma atividade relevante para o sucesso do projeto e para a melhoria da qualidade do software. As abordagens de avalia\u00e7\u00e3o arquitetural existentes apresentam limita\u00e7\u00f5es que dificultam sua aplica\u00e7\u00e3o em um contexto industrial. Esse trabalho prop\u00f5e ArqCheck, uma abordagem para inspe\u00e7\u00e3o de documentos arquiteturais, que objetiva minimizar essas limita\u00e7\u00f5es. Al\u00e9m disso, ele descreve alguns resultados de um estudo de viabilidade dessa abordagem.", "num_citations": "19\n", "authors": ["162"]}
{"title": "Surveys in software engineering: Identifying representative samples\n", "abstract": " Context: The representativeness of samples in Software Engineering primary studies is still a great challenge, mainly when identifying available sources for establishing adequate sampling frames, characterizing subjects and stimulating their participation in (opinion) surveys. The lack of survey guidelines taking into account the specificities of Software Engineering increases the research challenge. Goal: To introduce a conceptual framework for supporting the identification of representative samples for surveys in Software Engineering. Method: Based on knowledge acquired in the technical literature and researchers' experience, to organize a set of guidelines to systematically support sampling in Software Engineering surveys. To perform in vitro empirical studies to observe and evolve the guidelines. Results: An empirically evaluated set of planning activities and tasks with recommendations to support the\u00a0\u2026", "num_citations": "18\n", "authors": ["162"]}
{"title": "Simulation based studies in software engineering: A matter of validity\n", "abstract": " CONTEXT: Despite the possible lack of validity when compared with other science areas, Simulation-Based Studies (SBS) in Software Engineering (SE) have supported the achievement of some results in the field. However, as it happens with any other sort of experimental study, it is important to identify and deal with threats to validity aiming at increasing their strength and reinforcing results confidence. OBJECTIVE: To identify potential threats to SBS validity in SE and suggest ways to mitigate them. METHOD: To apply qualitative analysis in a dataset resulted from the aggregation of data from a quasi-systematic literature review combined with ad-hoc surveyed information regarding other science areas. RESULTS: The analysis of data extracted from 15 technical papers allowed the identification and classification of 28 different threats to validity concerned with SBS in SE according Cook and Campbell\u2019s categories. Besides, 12 verification and validation procedures applicable to SBS were also analyzed and organized due to their ability to detect these threats to validity. These results were used to make available an improved set of guidelines regarding the planning and reporting of SBS in SE. CONCLUSIONS: Simulation based studies add different threats to validity when compared with traditional studies. They are not well observed and therefore, it is not easy to identify and mitigate all of them without explicit guidance, as the one depicted in this paper.", "num_citations": "18\n", "authors": ["162"]}
{"title": "Are we prepared for simulation based studies in software engineering yet?\n", "abstract": " CONTEXT: Simulation-based studies have been used in different research areas in order to conduct computerized experiments with distinct purposes. However, it seems that Software Engineering simulation studies have been performed in a non-systematic way, using ad-hoc experimental design and analysis procedures, i.e., without defining a research protocol and missing information when reporting results. OBJECTIVE: To characterize simulation-based studies and identify the common simulation strategies in Software Engineering. METHOD: To undertake a quasi-Systematic Review. Three online digital libraries (Scopus, Ei Compendex, and Web of Science) are used as sources of information. Information extraction from the primary studies should be captured using a predefined form. Plotted charts and tables should be used together with quantitative/qualitative approaches when possible to support data analysis. RESULTS: From 946 papers, 108 have been included, from which it is possible to identify 19 simulation approaches, 17 domains, 28 simulation models characteristics, 22 output analysis instruments, and 9 procedures for the verification and validation of simulation models in the Software Engineering context. Most dominant approach is System Dynamics in the Software Project Management domain. Replication is not a common behaviour. CONCLUSION: The lack of information regarding most of the simulation-based studies and their models restricts replication, making the results usually specifics and generalization hard. Apart from that, it compromises validity confidence. More research and discussions should be made by the\u00a0\u2026", "num_citations": "18\n", "authors": ["162"]}
{"title": "Matching context aware software testing design techniques to ISO/IEC/IEEE 29119\n", "abstract": " A software system is context aware when it uses contextual information to help actors (users or other systems) to achieve their tasks. Testing this type of software can be a challenge since context and its variabilities cannot be controlled by the software tester. The ISO/IEC/IEEE 29119 intended to cover testing of any software system. It provides a common language and process for testing software systems, including a categorization of conventional testing techniques. This paper contains the initial results of our ongoing efforts to understand the testing of context aware software, Specifically, we evaluate whether the observed techniques for testing context aware software can be matched against the ISO/IEC/IEEE 29119 categories or if they represent a new breed of testing techniques. The results indicate that using conventional techniques variations to test context aware software systems does not produce\u00a0\u2026", "num_citations": "16\n", "authors": ["162"]}
{"title": "Uma abordagem para Avalia\u00e7\u00e3o de Propostas de Melhoria em Processos de Software\n", "abstract": " Este artigo apresenta uma abordagem para a realiza\u00e7\u00e3o de projetospiloto no ambiente industrial de forma sistem\u00e1tica, planejada e controlada para que os efeitos das melhorias em processos de software possam ser observados e mensurados adequadamente antes da institucionaliza\u00e7\u00e3o das mudan\u00e7as.", "num_citations": "15\n", "authors": ["162"]}
{"title": "Sampling improvement in software engineering surveys\n", "abstract": " Context: Small and non-probabilistic samples represent relevant issues when discussing the external validity of empirical studies in Software Engineering. Goal: To investigate alternatives to improve the quality of samples (size, heterogeneity and level of confidence). Method: To replicate a survey on characteristics of agility in software processes by applying a systematic recruitment strategy over a professional social network. Results: It resulted in a sampling frame composed by 19 groups stratified according two perspectives: sharing of groups' members and main software engineering skills reported by the subjects. In total, 7,745 subjects were randomly recruited, resulting in 291 contributions. Conclusions: This sample was significantly larger, more heterogeneous and presents some strata with higher confidence levels than previous trials samples.", "num_citations": "14\n", "authors": ["162"]}
{"title": "UbiCheck: an approach to support requirements definition in the ubicomp domain\n", "abstract": " Ubiquitous computing brings a set of characteristics that are not commonly found in conventional software projects. One of the consequences is an increase in the software development complexity. Additionally, traditional software engineering techniques are not usually adequate to support the development of this system category as they do not cover specific characteristics of this domain. Therefore, this work presents UbiCheck-an approach to support requirements definition in the ubicomp domain, including the results of an initial observational study that indicated such approach can be feasible.", "num_citations": "14\n", "authors": ["162"]}
{"title": "OORTs/ProDeS: Defini\u00e7\u00e3o de t\u00e9cnicas de leitura para um processo de software orientado a objetos\n", "abstract": " Observa-se que a atividade de inspe\u00e7\u00e3o e as t\u00e9cnicas de leitura associadas s\u00e3o, em geral, discutidas sem considerar explicitamente um processo subjacente de desenvolvimento de software. Em particular, quando se considera a abordagem OO (Orientada a Objetos), as t\u00e9cnicas s\u00e3o, em geral, associadas \u00e0s nota\u00e7\u00f5es definidas pela UML (Unified Modeling Language). O fato da UML n\u00e3o estar vinculada a um processo de desenvolvimento dificulta a defini\u00e7\u00e3o e implanta\u00e7\u00e3o de atividades de garantia de qualidade de software, em especial, atividades de VV&T (Valida\u00e7\u00e3o, Verifica\u00e7\u00e3o e Teste). A falta de um processo permite uma livre escolha do conjunto de diagramas selecionados para o desenvolvimento de uma aplica\u00e7\u00e3o, al\u00e9m do que a forma de utiliza\u00e7\u00e3o dos mesmos e a interpreta\u00e7\u00e3o dos conceitos da pr\u00f3pria UML podem variar dentro de um mesmo ambiente de desenvolvimento. Ressalta-se ainda que a atividade de inspe\u00e7\u00e3o \u00e9 essencial para que um determinado processo atinja o n\u00edvel 3 do CMM (Capability Maturity Model). As t\u00e9cnicas de leitura OORTs (Object Oriented Reading Techniques) foram definidas para um subconjunto da nota\u00e7\u00e3o UML, considerando um processo de software gen\u00e9rico e simplificado e se aplicam essencialmente na fase de projeto. Neste artigo define-se um conjunto de t\u00e9cnicas de leitura para apoiar atividades de inspe\u00e7\u00e3o em um processo de desenvolvimento de software OO baseado na nota\u00e7\u00e3o UML, denominado ProDeS/UML, que inclui atividades de teste ao longo de suas fases desenvolvimento. Esse conjunto de t\u00e9cnicas de leitura denomina-se OORTs/ProDeS e consiste da integra\u00e7\u00e3o das\u00a0\u2026", "num_citations": "14\n", "authors": ["162"]}
{"title": "Guidance for efficiently implementing defect causal analysis\n", "abstract": " Defect causal analysis has shown itself to be a cheap and high return means of product-focused software process improvement. However, despite its advantages and wide industry adoption little academic research is being done in this area. Thus, professionals face several questions when implementing it in software organizations. Aiming to provide unbiased and evidence-based answers to those questions, a systematic review has been conducted. Based on the results of the systematic review, better guidance for implementing defect causal analysis efficiently in software organizations can be elaborated.", "num_citations": "13\n", "authors": ["162"]}
{"title": "ScenarIoT: Support for Scenario Specification of Internet of Things-based Software Systems\n", "abstract": " As well as any paradigm shift, the Internet of Things (IoT) brings up challenges related to several areas of research, including Software Engineering at different stages of development. This work proposes the ScenarIoT approach aiming to support the specification of scenarios when developing software systems on the IoT background. This approach is grounded on Interaction Arrangements-designed by applying an evidence-based approach\u2013which represents recurrent flows of interaction between abstract elements of the IoT domain. These results presented can contribute to the progress of research on IoT from the lens of the Software Engineering research field.", "num_citations": "12\n", "authors": ["162"]}
{"title": "Activity diagram inspection on requirements specification\n", "abstract": " The requirements specification of contemporary software applications usually is composed by diverse artifacts describing lots of activities, flows, dependencies among the flows, branches and business rules. For instance, web or scientific workflow (e-science) based applications require structural representations for the various activities and functionalities involved in their execution, usually described trough activity diagrams. The quality assurance of such specifications represents a challenge for software engineers. The results of a quasi-systematic review indicated there is a lack of software technologies to support the inspection of this type of requirements specification. Therefore, in this paper, besides the review results, an inspection technique (checklist) to review Activity Diagrams on the requirements specifications is introduced. A proof of concept on applying the checklist for the inspection of a real requirements\u00a0\u2026", "num_citations": "12\n", "authors": ["162"]}
{"title": "Marak\u00e1: Infra-estrutura Computacional para Apoiar o Planejamento e Controle dos Testes de Software\n", "abstract": " Este artigo descreve a infra-estrutura Marak\u00e1, uma infra-estrutura computacional que ap\u00f3ia o planejamento e controle de testes de software desenvolvida a partir de requisitos extra\u00eddos dos resultados obtidos em um survey, que avaliou o estado da pr\u00e1tica das atividades de teste de software em um cen\u00e1rio real de desenvolvimento de software, e do conhecimento extra\u00eddo na literatura t\u00e9cnica da \u00e1rea de testes de software. Marak\u00e1 permite o acompanhamento do processo de testes de software e a documenta\u00e7\u00e3o das atividades realizadas ao longo dos testes usando um padr\u00e3o internacional (IEEE Standard 829). O controle das atividades de teste de software \u00e9 suprido atrav\u00e9s de artefatos que descrevem gr\u00e1ficos de acompanhamento, cronogramas ou outras informa\u00e7\u00f5es sobre os testes realizados.", "num_citations": "12\n", "authors": ["162"]}
{"title": "Addressing variability in a guidance, navigation, and control flight software product line\n", "abstract": " The NASA Goddard Space Flight Center is developing a guidance, navigation, and control flight software product line that includes both processes and their accompanying products. The processes include a domain and application engineering process that have been influenced by Synthesis [1] and FAST [2]. The products include graphical and textual analysis/design documents and the flight software repository. We are using UML (Unified Modeling Language) stereotypes to represent variability in our domain analysis models. This paper focuses on how variability is addressed during each phase of the domain and application engineering processes. The techniques are illustrated using the Celestial Body subdomain. The GNC FSW product line is a work in progress so many concepts presented in this paper have not fully matured.", "num_citations": "12\n", "authors": ["162"]}
{"title": "Characterizing Sampling Frames in Software Engineering Surveys.\n", "abstract": " Questionnaire-based Survey is a study strategy commonly applied in Software Engineering. It allows the researchers to perform descriptive largescale investigations without the rigorous control level required by experiments. A critical issue on planning surveys concerns with the characterization of adequate sampling frames and their units of analysis. Therefore, this paper presents the results of a structured review in order to identify how sampling frames and units of analysis have been usually characterized in Software Engineering surveys. This investigation allowed to observe the predominant behavior of sampling by convenience whitin units of analysis composed by individuals retrieved from non-representative sources of sampling. Besides, it was also identified many other design alternatives. Based on these results, a set of recommendations on characterizing sampling frames for software engineering surveys, including the attributes gathered from each kind of unit of analysis (organization, individual, project), is presented aiming at supporting future surveys studies in software engineering.", "num_citations": "11\n", "authors": ["162"]}
{"title": "Knowledge repository structure of an experimental software engineering environment\n", "abstract": " Experimental studies execution in Software Engineering is time consuming and produces great amount of information and knowledge with complex management. Hence, it is important to have a computerized infrastructure to support the experimental study execution. This infrastructure should provide efficient knowledge representation and management mechanisms regarding Experimentation. In this paper we discuss the knowledge repository structure of an experimentation environment in Software Engineering (eSEE) - an infrastructure capable of instantiating software engineering environments to manage knowledge about the definition, planning, execution and packaging of experimental studies in software engineering.", "num_citations": "11\n", "authors": ["162"]}
{"title": "Uma abordagem para inspe\u00e7\u00e3o de documentos arquiteturais baseada em checklist\n", "abstract": " Neste cap\u00edtulo, s\u00e3o apresentadas algumas defini\u00e7\u00f5es que permitem identificar o contexto de Arquitetura de Software em que a abordagem proposta nesta disserta\u00e7\u00e3o se aplica. Nele, procuramos responder, tamb\u00e9m, em que consiste uma arquitetura de software e qual benef\u00edcio que pode ser obtido ao avali\u00e1-la. Para isso, descrevemos os conceitos relacionados \u00e0 arquitetura de software que utilizamos como base, identificamos a import\u00e2ncia desse artefato dentro do processo de desenvolvimento de software e como ele \u00e9 constru\u00eddo.", "num_citations": "11\n", "authors": ["162"]}
{"title": "Memphis: a reuse based OO software development environment\n", "abstract": " Considering the systematization of software reuse, it is important to have automated support, such as that provided by software development environments (SDEs). However, in order to have a reuse-based SDE (RBSDE), an adequate software development process, methods and tools that consider software reuse activities must have been previously defined. We describe in this paper the Memphis environment, a RBSDE under development at the Computer Science Department of COPPE/UFRJ (the Computer Science Department of the Federal University of Rio de Jnneiro) that explores object-oriented (OO) technology in order to achieve its objectives. It supports the activities involved in software management, construction, quality assurance and reuse by providing an integrated set of tools and a reuseable component repository.", "num_citations": "11\n", "authors": ["162"]}
{"title": "Software Knowledge Registration Practices at Software Innovation Startups: Results of an Exploratory Study\n", "abstract": " The development of innovative software usually happens in an environment of high uncertainty conditions regarding the problem, the solution, and business issues. Thus, the software needs to be delivered fast and iteratively to the intended customers, which can quickly experiment the ideas developed for the product and give adequate feedback regarding the new features. This development configuration can lead software innovation Startups to avoid activities regarding the creation and updating of documentation and models about the software ideas and features, which raise the risk of losing software knowledge that can support successive software development iterations. Aiming at contributing to supporting software knowledge registering, we conducted an exploratory study to characterize knowledge registration practices used in innovative software projects to make clear software ideas and features. Moreover\u00a0\u2026", "num_citations": "10\n", "authors": ["162"]}
{"title": "Agilidade em Processos de Software: Evid\u00eancias Sobre Caracter\u00edsticas de Agilidade e Pr\u00e1ticas \u00c1geis\n", "abstract": " Incorporar agilidade aos processos de software \u00e9 um tema que vai al\u00e9m do debate sobre a aplica\u00e7\u00e3o de m\u00e9todos \u00e1geis pr\u00e9-definidos. Visando refor\u00e7ar as evid\u00eancias sobre a viabilidade de introduzir caracter\u00edsticas de agilidade e pr\u00e1ticas \u00e1geis previamente mapeadas para obten\u00e7\u00e3o de agilidade em processos de software, este artigo apresenta a reexecu\u00e7\u00e3o em larga escala de um survey sobre a pertin\u00eancia e a relev\u00e2ncia destas caracter\u00edsticas e pr\u00e1ticas, coletando a opini\u00e3o de 292 participantes. Os resultados sugerem um consenso sobre a pertin\u00eancia da maioria das caracter\u00edsticas e das pr\u00e1ticas investigadas, embora a relev\u00e2ncia delas n\u00e3o seja percebida na mesma intensidade. Em adi\u00e7\u00e3o, novas caracter\u00edsticas e pr\u00e1ticas foram propostas.", "num_citations": "10\n", "authors": ["162"]}
{"title": "Towards a model to support in silico studies of software evolution\n", "abstract": " Software evolution is recognized as one of the most challenging areas in the field of Software Engineering. The observation of evolution is time-dependent, reducing opportunities for actual observations in short periods of time. Usually, maintenance cycles are proportional to the software life cycle. Therefore, the amount of research has not been enough to deal with all the issues related to the evolution of software. However, simulation through confident models represents an interesting strategy to support software decay observation in short period of time. Towards that, this paper describes a model aimed at supporting the software decay simulation through systems dynamics. The Laws of Software Evolution and ISO 9126 were used as initial knowledge to support the discovery of software characteristic (size, periodicity, complexity, effort, reliability, and maintainability) relationships. Next, evidence to strengthen the\u00a0\u2026", "num_citations": "10\n", "authors": ["162"]}
{"title": "Leitura Baseada em Perspectiva: A Vis\u00e3o do Projetista Orientada a Objetos\n", "abstract": " Este artigo apresenta uma nova t\u00e9cnica de leitura, denominada OO-PBR. OO-PBR tem como principal objetivo a detec\u00e7\u00e3o de defeitos cr\u00edticos em documentos de requisitos de software descritos em linguagem natural. OO-PBR ap\u00f3ia a revis\u00e3o dos requisitos ao explorar a constru\u00e7\u00e3o de modelo de projeto orientado a objetos. As etapas para a defini\u00e7\u00e3o de OO-PBR s\u00e3o discutidas, destacando-se as premissas e os resultados experimentais obtidos.", "num_citations": "10\n", "authors": ["162"]}
{"title": "Software Technologies: The Use of Experimentation to Introduce ISPIS-a Software Inspection Framework-Into the Industry \u201c\n", "abstract": " ISPIS, a framework for supporting software inspection processes, resulted from academic research and was carefully evaluated in this context by conducting an experimental study and a case study. In this paper we provide an overview on ISPIS and describe how it could be introduced into a software engineering organization. Therefore, an empirical software process introduction methodology was considered and two additional case studies conducted:\u201d use in real life cycle \u2018and\u201d use in industry \u2018, respectively. The feedback from those two case studies resulted in adjustments to the support ISPIS provides for software inspections. The main purpose of those adjustments was to increase the efficiency of software inspections by adding awareness support and carefully granting rights to participants in order to move towards inspection conclusion.", "num_citations": "10\n", "authors": ["162"]}
{"title": "Testes de integra\u00e7\u00e3o aplicados a software orientado a objetos: Heur\u00edsticas para ordena\u00e7\u00e3o de classes\n", "abstract": " Uma quest\u00e3o crucial quando aplicando teste de integra\u00e7\u00e3o em software orientado a objetos \u00e9 decidir a ordem de integra\u00e7\u00e3o das classes. As classes precisam ser integradas uma de cada vez ou, em alguns casos, em pequenos clusters [7] j\u00e1 que a abordagem de integra\u00e7\u00e3o big-bang se demonstra inadequada nesta situa\u00e7\u00e3o. Conceitos como encapsulamento, heran\u00e7a e polimorfismo adicionam complexidade aos testes, fazendo com que crit\u00e9rios precisem ser estabelecidos para, eventualmente, quebrar a depend\u00eancia existente entre as classes sem aumentar a complexidade (esfor\u00e7o) do teste. Este trabalho apresenta um conjunto de heur\u00edsticas aplicadas aos diagramas de classes UML que permitem estabelecer uma ordem de prioridade para o teste de integra\u00e7\u00e3o das classes que comp\u00f5em o software, utilizando o n\u00famero de stubs necess\u00e1rios para o teste como medida do esfor\u00e7o requerido. Quando comparada \u00e0s abordagens existentes, estas heur\u00edsticas se aplicam em n\u00edvel mais alto de abstra\u00e7\u00e3o (projeto), facilitando sua utiliza\u00e7\u00e3o e permitindo antecipar a tomada de decis\u00e3o no planejamento do teste de integra\u00e7\u00e3o. Um estudo de caso demonstra sua aplica\u00e7\u00e3o e realiza uma compara\u00e7\u00e3o dos resultados com estudos realizados encontrados na literatura.", "num_citations": "10\n", "authors": ["162"]}
{"title": "A Taste of the Software Industry Perception of Technical Debt and its Management in Brazil\n", "abstract": " Background: Technical Debt (TD) metaphor has been an exciting topic of investigation for the software industry and academia in the last year. Despite the increasing attention of practitioners and researchers, TD studies indicate that its management (TDM) is still incipient. Particularly in Brazilian Software Organizations (BSOs), there is still a lack of information regarding how software practitioners perceive and manage TD in their projects. Objective: To characterize TD and its management under the perspective of BSOs using their practitioners as proxies and extend the discussions presented at the 2018 Ibero-American Conference in Software Engineering. Methods: A survey was performed with 62 practitioners, representing about 12 organizations and 30 software projects. Results: The analysis of 40 valid questionnaires indicates that TD is still unknown to a considerable fraction of the participants, and only a small\u00a0\u2026", "num_citations": "9\n", "authors": ["162"]}
{"title": "Investigating samples representativeness for an online experiment in java code search\n", "abstract": " Context: The results of large-scale studies in software engineering can be significantly impacted by samples' representativeness. Diverse population sources can be used to support sampling for such studies. Goal: To compare two samples, one from the crowdsourcing platform Mechanical Turk and another from the professional social network LinkedIn, in an online experiment for evaluating the relevance of Java code snippets to programming tasks. Method: To compare the samples (subjects' experience, programming habits) and experimental results concerned with three experimental trials. Results: LinkedIn's subjects present significantly higher levels of experience in Java programming and programming in general than Mechanical Turk's subjects. The experimental results revealed a significant difference between samples and suggested that LinkedIn's subjects were more pessimistic than Mechanical Turk's\u00a0\u2026", "num_citations": "9\n", "authors": ["162"]}
{"title": "A Computational Infrastructure for Research Synthesis in Software Engineering.\n", "abstract": " Research synthesis is an essential instrument to consolidate scientific knowledge regarding the benefits and drawbacks of software technologies. However, conducting a research synthesis can be challenging given the amount of data and information to manage and aggregate. Furthermore, comparing and contrasting evidence besides keeping track of all aggregation decisions can be cumbersome whether manually performed. Therefore, in this paper, we present a computational infrastructure to support research synthesis. The tool offers a graphical and formal notation to represent Software Engineering qualitative and quantitative evidence. The infrastructure\u2019s design and navigational concerns besides the details about its internal algorithms are presented aiming at supporting the explanations on how the formal representation is used in the aggregation procedure and how uncertainty formalisms are implemented. The infrastructure usefulness is shown through its use on aggregating evidence regarding software inspection techniques.", "num_citations": "9\n", "authors": ["162"]}
{"title": "An ecological perspective towards the evolution of quantitative studies in software engineering\n", "abstract": " Context: Two of the most common external threats to validity in quantitative studies in software engineering (SE) are concerned with defining the population by convenience and nonrandom sampling assignment. Although these limitations can be reduced by increasing the number of replications and aggregating their results, the acquired evidence rarely can be generalized to the field.Objective: To investigate the state of practice of meta-analysis in SE and its limitations, intending to propose an alternative perspective to understand the relationships among experimentation, production, threats to validity and evidence. To propose and evaluate means to strengthen quantitative studies in software engineering and making them less risky due to population and sampling issues.Method: To use the underlying idea from the Theory of Food Chains to alternatively understand the impact of external threats to validity in the SE\u00a0\u2026", "num_citations": "9\n", "authors": ["162"]}
{"title": "Checklist-based inspection technique for feature models review\n", "abstract": " Software Product Line Engineering aims to ensure the correctness, completeness and consistency among its artifacts and the specified domain, in order to prevent the spread of defects for the products derived from this domain. Among initial artifacts of a software product line, feature models are artifacts generated in various domain engineering approaches. Although software inspection is highlighted as an effective review activity for detection of defects in software artifacts, mainly in the early models of software projects, a recent quasi-systematic review of literature indicated a lack of techniques to support the inspection of software product line artifacts, which include features models. Thus, this paper presents FMCheck, a checklist-based inspection technique to support the detection of defects on feature models. This technique was developed to be configurable and to be applied on several extensions of the original\u00a0\u2026", "num_citations": "9\n", "authors": ["162"]}
{"title": "Estudio Emp\u0131rico del Estado Actual de la Estimaci\u00f3n de Software en Pymes de Colombia\n", "abstract": " Este trabajo de maestr\u00eda consiste en un estudio experimental enfocado en analizar el estado actual de las pr\u00e1cticas de estimaci\u00f3n de software de las Pymes colombianas, que realizaron un primer ciclo de mejora utilizando CMMI-DEV v1.2 [13] como modelo referente -- Parte de este documento contiene el protocolo del estudio experimental, junto con las caracter\u00edsticas de este estudio, lo cual facilita la comprensi\u00f3n de los objetivos, preguntas de investigaci\u00f3n y resultados encontrados al final del estudio --  El objetivo principal de este trabajo de maestr\u00eda fue caracterizar los procesos de estimaci\u00f3n de proyectos de software de las Pymes desde dos perspectivas: primero desde la perspectiva del proceso, se analiza el nivel de cubrimiento de buenas pr\u00e1cticas de estimaci\u00f3n descritas en el modelo CMMI-DEV v1.2 y segundo desde la perspectiva de los m\u00e9todos de estimaci\u00f3n se busca caracterizar cuales son los m\u00e9todos m\u00e1s usados en la industria -- Para recopilar la informaci\u00f3n se dise\u00f1\u00f3 y aplic\u00f3 una encuesta a las Pymes que estuvieron vinculadas a unprograma masivo de mejora llevado a cabo durante el periodo 2008-2010 en Colombia -- As\u00ed mismo, se analizan la precisi\u00f3n de la estimaci\u00f3n del esfuerzo (horas hombre) y la duraci\u00f3n (semanas) de proyectos de software -- Tal como lo plantea,es importante analizar estas dos variables por separado ya que algunas empresas ponen mayor empe\u00f1o en terminar los proyectos a tiempo y para lograr esto sobrecargan al personal para cumplir con estas metas, esto puede generar un falso sentido de \u00e9xito, ya que el \u00e9xito de un proyecto depende de entregar toda la funcionalidad a tiempo y de\u00a0\u2026", "num_citations": "9\n", "authors": ["162"]}
{"title": "Experimental studies of e-contract establishment in the PL4BPM context\n", "abstract": " Electronic contract (e-contract) establishment is a complex activity due to both sundry involved information and required parameters. PL4BPM, previously presented in other works, is an approach to support e-contract establishment and other activities related to business process management (BPM). It supports process reuse based on concepts of product line (PL) focusing on feature modelling to represent commonalities and variabilities of e-contracts. This paper complements the previous works with two experimental studies carried out to evaluate the e-contract establishment in PL4BPM context. The first study was undertaken within the academic environment and the second in the industrial one. Participants of both studies assessed the approach benefits over ad hoc procedures, especially focusing on its usability and feasibility. Both studies provide strong evidences of the advantages of PL4BPM approach over\u00a0\u2026", "num_citations": "9\n", "authors": ["162"]}
{"title": "A computerized infrastructure for supporting experimentation in software engineering\n", "abstract": " An experimental Software Engineering Environment (eSEE) is an infrastructure capable of instantiating software engineering environments to support the definition, planning, execution and packaging of experimental studies as well as knowledge produced throughout the experimentation process. This paper presents the concepts and architectural solutions for the eSEE infrastructure and the current state of this research work at COPPE/UFRJ.", "num_citations": "9\n", "authors": ["162"]}
{"title": "Towards a computerized infrastructure for managing experimental software engineering knowledge\n", "abstract": " The growing interest in experimental studies in software engineering and the difficulties found in their execution had led software engineering researchers to look for ways to (semi) automate the experimental process. This paper introduces the concept of experimental Software Engineering Environment (eSEE)\u2013an infrastructure capable of instantiating software engineering environments to manage knowledge about the definition, planning, execution and packaging of experimental studies in software engineering.", "num_citations": "9\n", "authors": ["162"]}
{"title": "Uma abordagem para a sele\u00e7\u00e3o de padr\u00f5es arquiteturais baseada em caracter\u00edsticas de qualidade\n", "abstract": " One of the critical issues regarding architecture based software development is concerned with the selection of suitable architectural styles or patterns to be used for the design solution. This paper describes an approach that explores a criteria based on software quality characteristics (basically, non-functional requirements) to support the selection of architectural patterns suitable for a software project. An experimental study has been accomplished to calibrate selecting knowledge explored by such criteria and its results are also described.Resumo: O recente interesse na \u00e1rea de estudo das arquiteturas de software foi impulsionado pelo car\u00e1ter que estas representam no desenvolvimento de produtos de qualidade. Por\u00e9m, um dos aspectos cr\u00edticos de se desenvolver software com \u00eanfase arquitetural \u00e9 a sele\u00e7\u00e3o de um estilo ou padr\u00e3o arquitetural adequado. Neste artigo apresentamos uma abordagem de sele\u00e7\u00e3o de padr\u00f5es arquiteturais baseada em um crit\u00e9rio que busca privilegiar determinadas caracter\u00edsticas de qualidade do software. O artigo ainda apresenta um estudo realizado para a calibra\u00e7\u00e3o do conhecimento utilizado pela abordagem de sele\u00e7\u00e3o.", "num_citations": "9\n", "authors": ["162"]}
{"title": "An approach to perform behavior testing in object-oriented systems\n", "abstract": " The paper addresses an approach to behavior testing in object oriented systems. This approach is used in the MEMPHIS project (C.M.I. Werner et al., 1997) and emphasis on state based testing. The key elements are the generation of testing sequences based on the state transition diagram to test the system objects and the creation of testing scenarios, which allow the verification of object integration.", "num_citations": "9\n", "authors": ["162"]}
{"title": "The Perception and Management of Technical Debt in Software Startups\n", "abstract": " The software startups are a particular scenario where Technical Debt (TD) may occur in an intentional or unintentional way. However, the current knowledge about the perception and management of TD are mainly related to mature software organizations. This chapter contextualizes the startups\u2019 characteristics that can lead to TD incurrence, the concepts related to TD and its management, and presents the results of a survey with Uruguayan software startups. The survey\u2019s primary goal was to understand how software startups perceive and manage TD in their projects. The results refer to the level of understanding of the startup\u2019s practitioners concerning TD concept, the adopted Technical Debt Management (TDM) activities, and the strategies and technologies used in their projects to support such activities. The findings show that startups seem to invest time and effort in TDM activities being TD prevention, one of the\u00a0\u2026", "num_citations": "8\n", "authors": ["162"]}
{"title": "CATS design: a context-aware test suite design process\n", "abstract": " Context-awareness is the ability of a system to gather information from its context and adapt its behaviors. This feature makes the testing of Context-aware software systems more challenging. Based on this assumption, this research proposes an approach to design functional test cases for context-aware software systems, the CATS Design. In its development, ideas from other domains presenting similar issues were tailored to the problem of testing context-aware software systems. This paper presents the design process of CATS Design, and its two empirical evaluation stages: 1) through a proof of concept, and 2) with an observational study involving eight undergraduate students in Uruguay. The results suggest that it is feasible to apply CATS Design for designing test cases for context-aware software systems.", "num_citations": "8\n", "authors": ["162"]}
{"title": "Caracteriza\u00e7\u00e3o de m\u00e9todos \u00c1geis de desenvolvimento de software\n", "abstract": " This research intends to investigate agility characteristics in agile software development methods. A research protocol has been formalized and performed in order to conduct a systematic review. The data obtained were analyzed and a basic characterization for agile methods has been proposed.Resumo. O objetivo deste trabalho \u00e9 investigar quais s\u00e3o as caracter\u00edsticas de agilidade no contexto de m\u00e9todos \u00e1geis de desenvolvimento de software. Um protocolo de pesquisa foi formalizado e executado para conduzir uma revis\u00e3o sistem\u00e1tica de literatura. Os dados obtidos foram analisados e uma proposta para caracteriza\u00e7\u00e3o b\u00e1sica de m\u00e9todos \u00e1geis \u00e9 apresentada.", "num_citations": "8\n", "authors": ["162"]}
{"title": "Uma abordagem com apoio ferramental para aplica\u00e7\u00e3o de t\u00e9cnicas de leitura baseada em perspectiva\n", "abstract": " Inspe\u00e7\u00f5es de software t\u00eam sido sistematicamente avaliadas e h\u00e1 evid\u00eancias experimentais dos benef\u00edcios de sua realiza\u00e7\u00e3o. A inspe\u00e7\u00e3o de documentos de requisitos de software \u00e9 especialmente importante por permitir a identifica\u00e7\u00e3o de defeitos logo no in\u00edcio do processo de desenvolvimento, quando os custos envolvidos com sua corre\u00e7\u00e3o s\u00e3o menores. A identifica\u00e7\u00e3o de defeitos pode ser feita de forma ad hoc ou com uma t\u00e9cnica espec\u00edfica como, por exemplo, a leitura baseada em perspectiva (PBR).Diversos estudos indicaram a efic\u00e1cia desta t\u00e9cnica na identifica\u00e7\u00e3o de defeitos. Entretanto, estes mesmos estudos revelaram aspectos negativos envolvidos com a aplica\u00e7\u00e3o manual da t\u00e9cnica. De forma a minimizar estes aspectos, esta tese apresenta uma proposta de apoio ferramental para PBR. Esta ferramenta tamb\u00e9m coleta m\u00e9tricas de forma n\u00e3o intrusiva para permitir a verifica\u00e7\u00e3o do grau de fidelidade com que a t\u00e9cnica \u00e9 aplicada. Para avaliar a viabilidade desta proposta, dois estudos experimentais foram conduzidos. Foi observado que a ferramenta possui estabilidade de funcionamento que permite justificar sua utiliza\u00e7\u00e3o em estudos e processos de software mais complexos.", "num_citations": "8\n", "authors": ["162"]}
{"title": "A Perception of the Practice of Software Security and Performance Verification\n", "abstract": " Security and performance are critical nonfunctional requirements for software systems. Thus, it is crucial to include verification activities during software development to identify defects related to such requirements, avoiding their occurrence after release. Software verification, including testing and reviews, encompasses a set of activities that have a purpose of analyzing the software searching for defects. Security and performance verification are activities that look at defects related to these specific quality attributes. Few empirical studies have been focused on how is the state of the practice in security and performance verification. This paper presents the results of a case study performed in the context of Brazilian organizations aiming to characterize security and performance verification practices. Additionally, it provides a set of conjectures indicating recommendations to improve security and performance verification\u00a0\u2026", "num_citations": "7\n", "authors": ["162"]}
{"title": "Towards the conception of scientific workflows for in silico experiments in software engineering\n", "abstract": " The evolution of Science has been supported by complex computerized infrastructures with growing interest in simulation based experiments. This trend can also be observed in Software Engineering. Our capacity of acquiring evidences to describe phenomena of interest in the field allowed the building of in silico models that can virtually replicate feasible software behaviors and improve our capacity of observation. In silico experiments demand additional concerns for its planning. One of them is regarding the scientific workflow conception. This task is not easy and to apply ad-hoc approaches can risky the experiment execution, validity and future replications. Regarding this topic, this paper presents some initial results from our research towards an approach to support the conception of scientific workflows for in silico experiments in Software Engineering are presented.", "num_citations": "7\n", "authors": ["162"]}
{"title": "Apoio na Concep\u00e7\u00e3o de Workflow Cient\u00edfico Abstrato para Estudos in virtuo e in silico em Engenharia de Software\n", "abstract": " Science evolution has been supported by complex computerized infrastructures with growing interests in simulation based studies based on scientific workflows. However, the conception of such workflows is not easy and the current ad-hoc approaches make it a risky process. Therefore, this paper describes the application of an approach for the conception of scientific workflows for Software Engineering simulation based large scale studies in software decay.Resumo. A evolu\u00e7\u00e3o da ci\u00eancia tem sido apoiada por infra-estrutura computacional complexa para realizar as pesquisas, com crescente interesse em estudos baseados em simula\u00e7\u00e3o utilizando tecnologias de workflow cient\u00edfico. Entretanto, a concep\u00e7\u00e3o de workflows n\u00e3o \u00e9 trivial e as pr\u00e1ticas correntes ad-hoc podem trazer riscos ao estudo. Por isto, este trabalho apresenta a aplica\u00e7\u00e3o de uma abordagem de apoio \u00e0 concep\u00e7\u00e3o de workflow cient\u00edficos para estudos larga escala baseados em simula\u00e7\u00e3o em Engenharia de Software no dom\u00ednio da Evolu\u00e7\u00e3o de Software.", "num_citations": "7\n", "authors": ["162"]}
{"title": "From Silver Bullets to Philosophers\u2019 Stones: Who Wants to Be Just an Empiricist?\n", "abstract": " For a long time scientists have been committed to describe and organize information acquired by observations from the field. To improve the comprehension and testability of the observed information, Bacon\u2019s works proposed to organize the way that the experiences should be structured and somehow formalized, starting with the experimental method idea. From that point in time, the ideas regarding experimentation have been explored and evolved into different scientific areas, including physics, agriculture, medicine, engineering and social sciences among others. It has not been different in Software Engineering. By applying the scientific method to organize their experimental studies, software engineers have intensively worked to understand the application and evolution of software processes and technologies. Acquiring knowledge through different categories of experimental studies has supported\u00a0\u2026", "num_citations": "7\n", "authors": ["162"]}
{"title": "Estudo sobre a Influ\u00eancia do Tipo de Personalidade do Inspetor no Desempenho de Inspe\u00e7\u00f5es de Usabilidade\n", "abstract": " Usability is one of the most relevant factors for the acceptance of Web applications. Different inspection techniques have been proposed aiming at detecting usability defects and to increase the quality of Web applications. However, studies have indicated great variation in the results even when using inspectors with similar experience. It is possible that other factors not accounted for have influenced the results of these usability inspections. Therefore, this paper aims to investigate the influence that different personality profiles (based on Myers-Briggs Type Indicator) may have upon the performance of usability inspectors. These results, when compared to a previous study that investigated the personality profiles of code inspectors, suggest that the allocation of inspectors based on their personality profiles seems to increase the number of defects detected in usability inspections.", "num_citations": "6\n", "authors": ["162"]}
{"title": "Resultados iniciais do iMPS 2010: Varia\u00e7\u00e3o de Desempenho nas Empresas que Adotaram o Modelo MPS\n", "abstract": " Este artigo apresenta uma s\u00edntese dos resultados iniciais da rodada de 2010 do projeto iMPS (informa\u00e7\u00f5es para acompanhar e evidenciar varia\u00e7\u00e3o de desempenho nas empresas que adotaram o Modelo MPS). Neste terceiro ano consecutivo de coleta de dados, os resultados s\u00e3o apresentados sob tr\u00eas perspectivas: caracteriza\u00e7\u00e3o, an\u00e1lise de varia\u00e7\u00e3o 2009/2010 e an\u00e1lise de varia\u00e7\u00e3o 2008/2009/2010. De forma geral, a satisfa\u00e7\u00e3o das empresas com o modelo \u00e9 not\u00f3ria, com mais de 92% das empresas se dizendo parcialmente ou totalmente satisfeitas. Em rela\u00e7\u00e3o ao retorno de investimento da ado\u00e7\u00e3o do modelo, mais de 72% das empresas informaram ter recuperado mais do que o investimento feito na implementa\u00e7\u00e3o e avalia\u00e7\u00e3o do modelo. Al\u00e9m disso, assim como em 2009, principalmente para aquelas empresas que evolu\u00edram ou internalizaram o MPS em seus processos, foi poss\u00edvel observar tend\u00eancias a redu\u00e7\u00e3o de custos, aumento da qualidade, redu\u00e7\u00e3o de prazos e aumento de produtividade.", "num_citations": "6\n", "authors": ["162"]}
{"title": "Infra-estrutura Conceitual para Ambientes de Experimenta\u00e7\u00e3o em Engenharia de Software\n", "abstract": " Experimental Software Engineering studies planning, execution and packaging are important research topics. Into this context, the Experimental Software Engineering group at COPPE/UFRJ has been working on the development of a computerized infrastructure to support large-scale experimentation in Software Engineering, called eSEE (experimental Software Engineering Environment). In order to allow this support, eSEE is based on a conceptual infrastructure, which organizes the knowledge regarding the experimental process and acts as an instantiation guide to experimental environments. This paper describes the evolution of this conceptual infrastructure, discussing the levels of knowledge organization according to different taxonomies regarding experimental studies classification.Resumo. O planejamento, a execu\u00e7\u00e3o e o empacotamento de estudos experimentais na \u00e1rea de Engenharia de Software s\u00e3o importantes temas de pesquisa. Neste contexto, o grupo de Engenharia de Software Experimental da COPPE/UFRJ vem trabalhando no desenvolvimento de uma infra-estrutura computacional capaz de apoiar experimenta\u00e7\u00e3o em larga-escala em Engenharia de Software, denominada eSEE (experimental Software Engineering Environment). Para viabilizar este apoio, o eSEE est\u00e1 fundamentado em uma infra-estrutura conceitual que organiza o conhecimento sobre o processo de experimenta\u00e7\u00e3o e atua como um roteiro de instancia\u00e7\u00e3o de ambientes para experimenta\u00e7\u00e3o. Este artigo descreve a evolu\u00e7\u00e3o desta infra-estrutura conceitual, explicitando os n\u00edveis de organiza\u00e7\u00e3o do conhecimento segundo diferentes taxonomias para\u00a0\u2026", "num_citations": "6\n", "authors": ["162"]}
{"title": "A generic architecture for knowledge acquisition tools in cardiology\n", "abstract": " Knowledge-acquisition is well known to be a bottleneck activity in the development of knowledge-based systems. Several techniques and tools were proposed to support this process. However, knowledge engineers still have difficulties to understand the problem domain, to apply these techniques and to interact with the experts. Considering that domain-specific tools can be useful for knowledge acquisition, we defined a generic architecture of knowledge acquisition tools and, based on that, we built KED, a Knowledge Editor for Diagnosis in the cardiology domain. KED is part of a general environment that aims at supporting the software development in cardiology domain.", "num_citations": "6\n", "authors": ["162"]}
{"title": "Testing context-aware software systems: Unchain the context, set it free!\n", "abstract": " Background: In the era of digitalization, context awareness has become more important to allow software systems adaptation. Therefore, the quality assurance of such systems must consider the variation of context. However, there is a lack of software quality technologies doing so, which can increase the risk of failure of these systems. Objective/Aim: To evidence recent advances regarding the testing of context-aware software systems (CASS), focusing on the abstraction that context should freely vary during test execution as it does in production environments. Method: Based on knowledge acquired with quasi-Systematic Literature Reviews, we evaluate current testing approaches and discuss benefits and limitations of applying the observation above about CASS.Results: It was not possible to observe any software testing technology supporting the unconstrained variation of context during testing a CASS. The\u00a0\u2026", "num_citations": "5\n", "authors": ["162"]}
{"title": "Experimenta\u00e7ao em engenharia de software: Gloss\u00e1rio de termos\n", "abstract": " There is an increasing agreement in the Software Engineering community that experimentation is necessary to develop or to improve software development and maintenance processes, methods and tools. Motivated by the importance of Experimental Software Engineering, some researchers have tried to adapt concepts and definitions to their own perspectives and research practices. This scenario frequently leads to difficulties in knowledge exchanging between research groups and, mainly, in study results comparison. To address this problem, a glossary of terms concerned with Experimental Software Engineering has been organized. This paper describes the construction of this glossary and introduces a web-based tool that turns it accessible to the research community.Resumo. Existe um consenso crescente na comunidade de Engenharia de Software que experimenta\u00e7\u00e3o \u00e9 necess\u00e1ria para desenvolver ou melhorar processos de desenvolvimento e manuten\u00e7\u00e3o de software, m\u00e9todos e ferramentas. Motivados pela import\u00e2ncia da Engenharia de Software Experimental, alguns pesquisadores tentam adaptar conceitos e defini\u00e7\u00f5es a suas perspectivas e pr\u00e1ticas de pesquisa locais. Este cen\u00e1rio freq\u00fcentemente leva a dificuldades na troca de conhecimento e, principalmente, na compara\u00e7\u00e3o de resultados de estudo. Para tratar este problema, um gloss\u00e1rio de termos em Experimenta\u00e7\u00e3o em Engenharia de Software foi constru\u00eddo. Este artigo relata o processo de constru\u00e7\u00e3o deste gloss\u00e1rio e apresenta uma ferramenta web que o torna acess\u00edvel para a comunidade de pesquisa em engenharia de software.", "num_citations": "5\n", "authors": ["162"]}
{"title": "Evolutive Maintenance: Observing Object-Oriented Software Decay\n", "abstract": " While the maintenance refers to the activities that happen in any time after the implementation of a new software development project, the software evolution is defined by the exam of the systems characteristics dynamic behavior and how they change along the time.The Laws of Software Evolution (LSE) describe how a system behaves throughout their successive versions (LEHMAN, 1980). Works found in the literature makes reference to software evolution experimental studies just considering the legacy systems\u2019 source code (KEMERER & SLAUGHTER, 1999)(SCACHI, 2003). Besides, LEHMAN & RAMIL (2002) have been pointing out the need for evolution studies regarding object-oriented systems and in other software development process phases (LEHMAN & RAMIL, 2003). Due to these characteristics, decay causes\u2019 study throughout object-oriented development processes becomes relevant, providing us a better understanding of how this type of software evolves.", "num_citations": "5\n", "authors": ["162"]}
{"title": "Uma abordagem Experimental para avalia\u00e7\u00e3o da melhoria de processos\n", "abstract": " Este artigo descreve a aplica\u00e7\u00e3o de uma abordagem baseada em experimenta\u00e7\u00e3o \u00e0 melhoria de processo de software. Os benef\u00edcios obtidos pela organiza\u00e7\u00e3o fomentaram a demanda por novos estudos e melhorias.", "num_citations": "5\n", "authors": ["162"]}
{"title": "Uma Infra-estrutura para apoio ao Planejamento e Execuc\u00e3o de Pesquisas de Opini\u00e3o na Web\n", "abstract": " A comunidade de Engenharia de Software freq\u00fcentemente prop\u00f5e novas tecnologias, t\u00e9cnicas de desenvolvimento, linguagens de programa\u00e7\u00e3o e ferramentas, sem uma avalia\u00e7\u00e3o cient\u00edfica mais rigorosa, contribuindo para que a evolu\u00e7\u00e3o da", "num_citations": "5\n", "authors": ["162"]}
{"title": "An OO software engineering training experience within a collaboration project between academia and industry\n", "abstract": " This paper describes an object-oriented (O.O.) software engineering training experience, within a collaboration project between academia and industry. This experience involves the academia-industry exchange both for training and technology transfer. The project and team characteristics are described as well as the performed work and obtained results.", "num_citations": "5\n", "authors": ["162"]}
{"title": "Socioeconomic factors and the probability of death by Covid-19 in Brazil\n", "abstract": " BackgroundTo design better measures to contain the Covid-19 epidemics, it is relevant to know whether socioeconomic factors are associated with a higher risk of death by Covid-19. This work estimates the effects of individual socioeconomic characteristics on the risk of death by Covid-19.MethodsLogistic models were estimated to assess the effect of socioeconomic characteristics (income, race/ethnicity, schooling, occupation and economic activity) on the risk of death from Covid-19. For this purpose, Covid-19 individual death records in Rio de Janeiro state, Brazil were combined with the Annual Register of Social Information, which contains socioeconomic information about formal workers.", "num_citations": "4\n", "authors": ["162"]}
{"title": "Measuresoftgram: a future vision of software product quality\n", "abstract": " ABSTRACT< u> Background:</u> Software product quality assurance affects the acceptance of releases. The one dimensional observational perspective of current software product quality (SPQ) models constrains their use in continuous software engineering environments.< u> Aims:</u> To investigate multidimensional relationships between software product characteristics and build an evidence-based infrastructure to observe SPQ continuously.< u> Method:</u> To mine and manipulate datasets regarding software development and use. Next, to perform multidimensional analytical SPQ interpretations to observe quality.< u> Results:</u> There is empirical evidence on the multidimensionality linkage of quality characteristics throughout the software life cycle.< u> Conclusions:</u> The one-dimensional quality perspective is not enough to observe the SPQ in continuous environments. Alternative mathematical abstractions should be investigated.", "num_citations": "4\n", "authors": ["162"]}
{"title": "Escaping from the time box towards continuous planning: an industrial experience\n", "abstract": " Continuous Planning (CP) is a management practice inspired in principles from the agile and lean software development. In this paper, we present in detail the case of a small Brazilian software company on moving from an agile background towards CP, due to a constant changing environment. Furthermore, we discuss the reported case in the light of the technical literature on CP. Although observing evidence on benefits and challenges, the CP adoption at all levels using a \"big-bang\" approach may be disastrous. Therefore, we advocate the need for more systematic studies on CP, despite the complexity of observing it into real case environments.", "num_citations": "4\n", "authors": ["162"]}
{"title": "Aplicaci\u00f3n y valoraci\u00f3n de la verificaci\u00f3n y validaci\u00f3n de software: una encuesta realizada en Buenos Aires\n", "abstract": " La verificaci\u00f3n y validaci\u00f3n del software no s\u00f3lo comprueban que se est\u00e1 construyendo la aplicaci\u00f3n inform\u00e1tica correctamente, sino tambi\u00e9n buscan que la aplicaci\u00f3n a construir sea la correcta. Es posible identificar un conjunto de actividades, procesos y herramientas donde se concreta su aplicaci\u00f3n. Con la finalidad de comprender el grado de aplicaci\u00f3n y la valoraci\u00f3n de \u00e9stas, se define una encuesta realizada a personas involucradas en el proceso de desarrollo de software en la ciudad de Buenos Aires. Los resultados muestran que existe una mayor valoraci\u00f3n y aplicaci\u00f3n de las actividades de validaci\u00f3n con respecto a las de verificaci\u00f3n y que existe una oportunidad de mejora en la gesti\u00f3n de la verificaci\u00f3n y validaci\u00f3n, y consecuentemente su eficiencia.", "num_citations": "4\n", "authors": ["162"]}
{"title": "Uma Ferramenta de Apoio ao Planejamento de Estudos Experimentais em Engenharia de Software\n", "abstract": " This paper presents a tool designed to provide support to decision making in experimental studies planning in Software Engineering research. This is achieved by retrieving knowledge from OWL ontology models. This tool shows this knowledge as planning questions, each one with its respective answer options. By answering these questions, the researcher is guided throughout the planning phase. After analyzing the ontologies, the tool generates a planning document template with the answers provided.Resumo. Este artigo apresenta uma ferramenta de apoio a tomadas de decis\u00e3o no planejamento de estudos experimentais em Engenharia de Software. A ferramenta recupera conhecimento de ontologias OWL, sendo disponibilizado na forma de perguntas, cada qual com as respectivas respostas. O pesquisador \u00e9 guiado ao longo da fase de planejamento atrav\u00e9s das respostas dadas \u00e0s perguntas. Ap\u00f3s recuperar o conhecimento, a ferramenta gera um template de documento de plano com as respostas dadas.", "num_citations": "4\n", "authors": ["162"]}
{"title": "Varia\u00e7\u00e3o de Desempenho nas Empresas que Adotaram o Modelo MPS: resultados iniciais iMPS 2009\n", "abstract": " Este artigo apresenta uma s\u00edntese dos resultados iniciais da rodada de 2009 do projeto iMPS (informa\u00e7\u00f5es para acompanhar e evidenciar varia\u00e7\u00e3o de desempenho nas empresas que adotaram o Modelo MPS), apresentados sob duas perspectivas: caracteriza\u00e7\u00e3o e an\u00e1lise de varia\u00e7\u00e3o 2008/2009. De forma geral, a satisfa\u00e7\u00e3o das empresas com o modelo \u00e9 not\u00f3ria, com mais de 98% das empresas se dizendo parcialmente ou totalmente satisfeitas. Al\u00e9m disso, as empresas relataram que o retorno do investimento foi obtido e, principalmente, para aquelas empresas que evolu\u00edram ou internalizaram o MPS em seus processos foi poss\u00edvel observar tend\u00eancia a melhoria de custo, qualidade, prazo e produtividade, princ\u00edpios b\u00e1sicos quando se desenvolve software seguindo os preceitos de engenharia.", "num_citations": "4\n", "authors": ["162"]}
{"title": "ISPIS: From conception towards industry readiness\n", "abstract": " ISPIS, a framework for supporting software inspection processes, resulted from academic research. Its conceptual phase started by informally reviewing the state of the art regarding software inspections and formalizing a proposal for supporting them. The set of requirements of this proposal was mainly derived from knowledge acquired by experimental studies. Although the resulting implementation was promising, it was possible to evolve it after feedback gathered by applying an experimental methodology for taking a newly proposed technology from the conceptual phase through transfer to industry. This paper provides insight to the use of experimentation to allow technology transference from academia to industry, by describing step by step how the experimental studies of the methodology, helped to evolve ISPIS to the support it currently provides.", "num_citations": "4\n", "authors": ["162"]}
{"title": "Heur\u00edsticas para Identifica\u00e7\u00e3o da Ordem de Integra\u00e7\u00e3o de Classes em Testes Aplicados a Software Orientado a Objetos\n", "abstract": " A introdu\u00e7\u00e3o do paradigma orientado a objetos (00) no contexto de desenvolvimento de software provocou mudan\u00e7as significativas na forma como os produtos de software s\u00e3o criados e mantidos. As mudan\u00e7as foram motivadas pela nova perspectiva adotada pelo paradigma 00 (\u00eanfase nos objetos), em oposi\u00e7\u00e3o ao paradigma procedural que utiliza uma abordagem focada na funcionalidade e no fluxo de informa\u00e7\u00e3o dos sistemas.Em consequ\u00eancia dessa nova vis\u00e3o para o desenvolvimento de software, muitas \u00e1reas tiveram que ser revisadas, pois teorias, pr\u00e1ticas, modelos e m\u00e9tricas que eram adequados para software convencionais n\u00e3o podem ser aplicados de forma irrestrita quando se desenvolve software 0 0. Uma dessas \u00e1reas \u00e9 o teste de software. A atividade de teste de software \u00e9 uma das atividades de garantia de qualidade de software, sendo uma das atividades de verifica\u00e7\u00e3o e valida\u00e7\u00e3o, com o prop\u00f3sito de verificar a presen\u00e7a de defeitos no produto ou artefato, conforme considerado pela norma ISO 1 IEC 12207 (1 995). O termo defeito pode ser entendido como a causa de um comportamento incorreto do programa, assim como engano e erro (ROCHA et al., 2001). O padr\u00e3o IEEE 610.12 (1990) diferencia os termos da seguinte forma: defeito \u00e9 o passo, processo ou defini\u00e7\u00e3o de dados incorretos; engano corresponde a uma a\u00e7\u00e3o humana que produz um resultado incorreto; e erro significa a diferen\u00e7a entre o valor obtido e o valor esperado. Neste sentido, o termo falha \u00e9 usado para designar uma consequ\u00eancia de um defeito, sendo definido como a produ\u00e7\u00e3o de uma sa\u00edda incorreta com rela\u00e7\u00e3o a especifica\u00e7\u00e3o.", "num_citations": "4\n", "authors": ["162"]}
{"title": "eSEE: a Computerized Infrastructure for Experimental Software Engineering\n", "abstract": " There is a growing interest in empirical studies on software engineering (SE). It can be evidenced by the increasing number of papers describing results from empirical studies published elsewhere. The Experimental Software Engineering (ESE) team is a research group of the Systems Engineering and Computer Science Program (PESC) at COPPE/UFRJ. Its goals include the improvement of software engineering by the application of the scientific method (experimentation) for the construction of new methods and techniques to support software development, and researching of new models and approaches for planning, execution and packaging of SE experimental studies.The ESE team has used the experimentation model defined by [1] to perform different experimental studies. The diversity of the packaged experimental studies made us able to observe that the conventional two-staged SE experiments taxonomy\u00a0\u2026", "num_citations": "4\n", "authors": ["162"]}
{"title": "Technical Debt Management in Brazilian Software Organizations: A Need, an Expectation, or a Fact?\n", "abstract": " Maintenance is often the most expensive and time-consuming of all software system lifecycle phases. Technical Debt (TD) refers to technical decisions on shortcuts and workarounds taken during the software development. It affects the internal quality of software. Therefore, software maintenance can be difficult when the TD is not perceived or managed in the projects. Despite the increasing attention of practitioners and researchers, TD studies indicate its management (TDM) is still incipient. Particularly in Brazilian Software Organizations (BSOs), there is still a lack of information on how practitioners perceive and manage the TD in software projects. This paper reports the results of two studies aiming to investigate the current knowledge level of practitioners from BSOs regarding TD and TDM, and to produce a summary of the available technologies to manage TD. To achieve these objectives, we surveyed\u00a0\u2026", "num_citations": "3\n", "authors": ["162"]}
{"title": "Testing Non-Functional Requirements: Lacking of Technologies or Researching Opportunities?\n", "abstract": " Software testing aims to reveal failures due to the lack of conformity (defects) among functional and non-functional requirements and the implemented system. Thus, defects can be identified and fixed, improving software quality. However, despite several works emphasizing the importance of non-functional requirements (NFRs), there is an insufficient amount of software testing approaches dealing with them. The lack of NFR evaluation may be the cause of low-quality software that does not meet users need, influencing software project success. Goal: To organize a body of knowledge regarding NFRs and software testing approaches available in the technical literature and reveal the gaps between testable NFRs and software testing approaches. Method: To perform structured literature reviews to identify NFRs and software testing approaches dealing with testable NFRs. To combine both results, reveal research opportunities and organize a body of knowledge regarding NFRs and software testing approaches. Results: From 224 identified NFRs, 87 were described, and 47 software testing approaches observed. Only eight approaches are empirically evaluated. No testing approaches were identified for 11 testable NFRs. Furthermore, regarding the testing process, we did not observe any testing approach covering the test planning phase. Conclusion: Despite their importance, many testable NFRs seem not be tested due to the lack of appropriate software testing approaches yet. Also, the existing testing approaches do not cover all testing processes activities and, in general, lack empirical evidence about their feasibility and performance, making\u00a0\u2026", "num_citations": "3\n", "authors": ["162"]}
{"title": "Is a Picture worth a Thousand Words?: A Comparative Analysis of Using Textual and Graphical Approaches to Specify Use Cases\n", "abstract": " Use cases specifications are artifacts employed in all stages of software development, from the requirements elicitation to implementation. During this process, issues related to ambiguity, redundancy, inconsistency, and incompleteness can affect these specifications. These issues can harm software engineers' understanding and, consequently, affect the software quality. Given this context, this paper describes an empirical study to evaluate two different use cases specifications approaches (textual and graphical-based forms). We compared the approaches by assessing the degree of correctness and the time spent to generate the specifications. In addition, we performed an analysis focusing on evaluating the ease of use and usefulness of each approach. The quantitative results showed that textual form and graphical-based specifications presented similar levels of correctness and the time spent to generate them\u00a0\u2026", "num_citations": "3\n", "authors": ["162"]}
{"title": "Tape Mbo e: A First Experimental Assessment\n", "abstract": " The development of software not only needs to consider the construction process, but also other aspects such as cost, human resources and communication among stakeholders. The lack of simplicity into this context becomes explicit when some restrictions, such as service oriented architecture, must be considered as the basic style to build sustainable applications into environments were practitioners are not aware of this software technology. In addition to this, most of the available software processes are not directly applicable nor are they reusable, so learning times becomes risk for the development of the project. Therefore, Tape Mbo\u2019e (TME) has been proposed to support the building of such applications, into development environments like developing countries where we can have economic constraints and scarcity of proficient practitioners. The first application of TME has been to develop a service-based application whose goal is to provide the interoperability among legacy systems of different public agencies in Paraguay. Initial results of this experience indicated the feasibility and simplicity of TME when applied in this field. The evaluation process, its results and conclusions are described in this paper.", "num_citations": "3\n", "authors": ["162"]}
{"title": "Software Defects: Stay Away from Them. Do Inspections!\n", "abstract": " All software system fails. However, as more defects the development team can identify and remove as lower will be the probability of software to fail. Identifying and removing defects throughout the software development process represent an important approach to improve software quality. There is evidence about the feasibility, efficiency and efficacy of using software inspections to support the identification of defects. Besides their low cost, the performance of inspections can be positively influenced by the technique used to detect defects. Despite all these benefits, the use of inspections is not common place in the software industry. Therefore, this Quatic 2014 keynote speech intends to discuss the benefits of Software Inspections (the method and techniques) and their use in software projects.", "num_citations": "3\n", "authors": ["162"]}
{"title": "Estimativa de esfor\u00e7o em teste de software: modelos: fatores e incertezas\n", "abstract": " Estimar esfor\u00e7o \u00e9 uma atividade cr\u00edtica em Teste de Software. Diversos modelos t\u00eam sido propostos na literatura t\u00e9cnica para apoiar tal atividade. Diante deste cen\u00e1rio, este trabalho apresenta os resultados de um estudo secund\u00e1rio que identificou fatores de influ\u00eancia do esfor\u00e7o do teste de software e modelos de estimativa de esfor\u00e7o que fazem uso destes fatores. Os modelos e fatores identificados n\u00e3o se mostram genericamente adequados devido a variabilidade dos projetos. Al\u00e9m disso, as evid\u00eancias sobre a falta de consenso sobre o que \u00e9 teste de software e o que \u00e9 esfor\u00e7o de teste tornam a escolha de qualquer um destes modelos de estimativa uma tarefa arriscada e propensa a erro.", "num_citations": "3\n", "authors": ["162"]}
{"title": "Uma Abordagem Probabil\u00edstica para An\u00e1lise Causal de Defeitos de Software\n", "abstract": " An\u00e1lise causal de defeitos tem se mostrado uma forma eficiente para melhoria de processos com base no produto. Nesta tese uma abordagem probabil\u00edstica para an\u00e1lise causal, chamada DPPI (Defect Prevention-Based Process Improvement) foi elaborada com base em evid\u00eancias obtidas a partir de quatro rodadas de revis\u00e3o sistem\u00e1tica da literatura e feedback obtido de especialistas da \u00e1rea. DPPI representa uma abordagem inovadora que integra mecanismos de aprendizado de causa e efeito (redes Bayesianas) nos procedimentos de an\u00e1lise causal de defeitos. Adicionalmente, para facilitar o uso destes mecanismos em reuni\u00f5es de an\u00e1lise causal, o tradicional diagrama de causa e efeito foi estendido para um diagrama de causa e efeito probabil\u00edstico. DPPI foi aplicada a um projeto real e avaliada atrav\u00e9s de tr\u00eas rodadas de um estudo experimental. A aplica\u00e7\u00e3o ao projeto real indicou sua viabilidade e permitiu refinar requisitos para a constru\u00e7\u00e3o de apoio ferramental. As rodadas do estudo experimental forneceram ind\u00edcios de que o uso dos diagramas de causa e efeito probabil\u00edsticos de DPPI aumenta a efic\u00e1cia e reduz o esfor\u00e7o na identifica\u00e7\u00e3o de causas de defeitos, quando comparado \u00e0 identifica\u00e7\u00e3o de causas de defeitos sem o uso dos diagramas.", "num_citations": "3\n", "authors": ["162"]}
{"title": "Pr\u00e1ticas e Caracter\u00edsticas de Agilidade em Processos de Testes de Software\n", "abstract": " 1-Introdu\u00e7\u00e3o 2-Caracter\u00edsticas de Agilidade no Contexto das Abordagens \u00c1geis de Desenvolvimento de Software", "num_citations": "3\n", "authors": ["162"]}
{"title": "A System Dynamics Model based on Cause and Effect Diagram to Observe Object-Oriented Software Decay\n", "abstract": " Due to the ever growing necessities of evolution in Software Systems, it is necessary to advance towards the understanding on how these systems suffer changes, so as to be more easily modified to accommodate these needs, throughout successive cycles of evolutive maintenance. In this fashion, an environment for experimental studies on software evolution is underway. This environment explores simulation techniques based on System Dynamics (Madachy, 2008)(Barros, 2001) models, to observe the decay of object oriented software. The Laws of Software Evolution (LSE)(Lehman, 1980)(Lehman and Ramil, 2003) have influence the building of the model. These Laws describe how a system behaves through its versions, regarding its decaying. The application of System Dynamics techniques is justified by the fact that evolving systems present a dynamic behavior, non-static, which needs to be considered. However, the complexity of identifying and defining the process to regulate the behavior, justify the use of semi-quantitative analysis. The semi-quantitative analysis (Camiletti and Ferracioli, 2002) offers the possibility of data analysis through trends of pre-determined software characteristics, providing for the observation of the behavior of evolving systems, as proposed in the environment presented in this work.", "num_citations": "3\n", "authors": ["162"]}
{"title": "Heuristics for the identification of class Integration order in object-oriented software testing\n", "abstract": " Dependency cycles among components (classes) represent a practical challenge when identifying the class integration order in object-oriented software testing. Classical approaches, such as \u201ctop-down\u201d or \u201cbottom-up\u201d integration (or their combination) become less useful due to their acyclic characteristics. Some OO integration testing strategies explore the principle of breaking these dependency cycles, but broken dependencies imply that the target class will have to be stubbed when integrating and testing the source class, which increases the testing effort. This paper describes an integration testing strategy that guides software engineers to identify the class integration order with the minimum number of implemented stubs. This strategy can be directly applied to high level OO design (UML class) diagrams allowing the reduction of extra construction efforts related to additional classes needed in other strategies. The results from experimental studies have indicated its feasibility and effectiveness. The use of such integration testing strategy can be supported by a case tool, also described in this paper.", "num_citations": "3\n", "authors": ["162"]}
{"title": "ISPIS: A Framework Supporting Software Inspection Processes\n", "abstract": " This paper describes ISPIS, a computational framework for supporting the software inspection process whose requirements set was derived from knowledge acquired by empirical studies. ISPIS allows the inspection of all artifact types by geographically distributed teams. Specific defect detection support is provided by the integration of external tools. A case study has shown the feasibility of using ISPIS to support real inspections", "num_citations": "3\n", "authors": ["162"]}
{"title": "Integrating verification and validation techniques knowledge into software engineering environments\n", "abstract": " Accomplishing software verification and validation (V&V) activities is not a simple task. It involves a great number of techniques to choose and there is no sufficient organized information to support the selection regarding the V&V technique to be used. This paper describes an ongoing research work concerned with the definition of an approach to plan verification and validation processes. Its objective is to define how V&V activities can be supported throughout software development processes accomplished by a Software Engineering Environment (SEE). Besides V&V knowledge integrated into the SEE, this approach will also organize some practical recommendations generated by experimental studies regarding V&V techniques to support their use.", "num_citations": "3\n", "authors": ["162"]}
{"title": "Estrat\u00e9gias de Aquisi\u00e7\u00e3o e Dissemina\u00e7\u00e3o de Conhecimento para Apoiar o Desenvolvimento de Software com o RUP\n", "abstract": " As empresas v\u00eam demonstrando ao longo dos \u00faltimos anos um grande interesse no desenvolvimento OO. Nesse sentido, muitas delas j\u00e1 adotaram o RUP como base para seu processo de desenvolvimento. Por ser um framework para processo, diversas vari\u00e1veis podem afetar sua adapta\u00e7\u00e3o, execu\u00e7\u00e3o e ger\u00eancia para um projeto. Ter conhecimento sobre essas vari\u00e1veis e os impactos causados por elas no projeto \u00e9 fundamental para melhoria cont\u00ednua do processo. Atrav\u00e9s da defini\u00e7\u00e3o de uma estrat\u00e9gia para adquirir conhecimentos, tais como pontos fortes e fracos aprendidos ao longo do projeto, pretende-se atacar com mais objetividade os processos mais deficientes (pontos fracos) e incentivar que os pontos fortes continuem sendo aplicados em projetos futuros. Um estudo de caso aplicando a estrat\u00e9gia de aquisi\u00e7\u00e3o de conhecimento em um projeto que utiliza um processo baseado no RUP \u00e9 apresentado. Al\u00e9m disso, uma estrat\u00e9gia para dissemina\u00e7\u00e3o de conhecimento \u00e9 descrita. Essa estrat\u00e9gia est\u00e1 fundamentada na constru\u00e7\u00e3o de planos de a\u00e7\u00e3o elaborados com base nas necessidades da equipe.", "num_citations": "3\n", "authors": ["162"]}
{"title": "ACKNOWLEDGE: a tool to support knowledge capturing\n", "abstract": " Knowledge management enhances organizational competitive advantages by supporting the capture, maintenance and communication of the business processes knowledge to organization members. ACKNOWLEDGE is a tool that supports tacit and explicit knowledge capturing. Organization members can use this tool to exteriorize knowledge related to organizational processes activities. The acquired knowledge is filtered, packed and stored into the organizational memory in order to be reused by other members during processes activities execution.", "num_citations": "3\n", "authors": ["162"]}
{"title": "Usando Modelos Para Apoiar a Especifica\u00e7\u00e3o e Verifica\u00e7\u00e3o de Requisitos de Ubiquidade\n", "abstract": " A computa\u00e7\u00e3o ub\u00edqua \u00e9 caracterizada como um novo paradigma onde o poder de processamento est\u00e1 dispon\u00edvel de forma onipresente e impercept\u00edvel no ambiente do usu\u00e1rio. Explorar este paradigma em projetos de software permite tratar solu\u00e7\u00f5es para problemas at\u00e9 ent\u00e3o invi\u00e1veis devido a suas caracter\u00edsticas gerais de utiliza\u00e7\u00e3o e acesso. Assim, essa pesquisa visa evoluir uma abordagem de apoio \u00e0 defini\u00e7\u00e3o e verifica\u00e7\u00e3o de requisitos de ubiquidade ao definir estruturas (atrav\u00e9s de um metamodelo chamado UbiModel) para guiar a gera\u00e7\u00e3o da especifica\u00e7\u00e3o. Nesse contexto foi desenvolvida uma ferramenta que usa UbiModel para apoiar a descri\u00e7\u00e3o dos requisitos de ubiquidade de forma mais robusta. Considerando que os requisitos s\u00e3o usualmente definidos sob o ponto de vista das demandas e necessidades do usu\u00e1rio, a ferramenta permite a integra\u00e7\u00e3o das caracter\u00edsticas de ubiquidade com o ponto de vista do comportamento esperado do sistema, propiciando a descri\u00e7\u00e3o dos requisitos de forma abrangente.", "num_citations": "2\n", "authors": ["162"]}
{"title": "Abordagem para concep\u00e7\u00e3o de experimentos cient\u00edficos em larga escala suportados por workflows cient\u00edficos\n", "abstract": " Currently science has been supported by complex computerized infrastructures to accomplish researches, with growing interest on in virtuo and in silico studies. To accomplish this, scientific workflows technologies are used ad-hoc, but the conception of workflows is not trivial, what could bring risks to the study. Therefore, this research proposes an approach for aids the designing of scientific workflows for in virtuo and in silico studies.Resumo. Atualmente, a ci\u00eancia se ap\u00f3ia em infra-estrutura computacional complexa para realizar pesquisas, com crescente interesse em estudos in virtuo e in silico utilizando tecnologias de workflow cient\u00edfico. Entretanto, a concep\u00e7\u00e3o de workflows n\u00e3o \u00e9 trivial e abordagens ad-hoc podem trazer riscos ao estudo. Assim, esta pesquisa prop\u00f5e uma abordagem para auxiliar a concep\u00e7\u00e3o de workflows cient\u00edficos para estes tipos de estudo.", "num_citations": "2\n", "authors": ["162"]}
{"title": "O Uso de Projetos-Piloto para Avalia\u00e7\u00e3o da Efetividade da Melhoria de Processos\n", "abstract": " Este artigo apresenta um arcabou\u00e7o para a realiza\u00e7\u00e3o de projetos-piloto de forma sistem\u00e1tica, planejada e controlada para que os efeitos das mudan\u00e7as dos processos de software possam ser observados e mensurados antes de sua institucionaliza\u00e7\u00e3o.", "num_citations": "2\n", "authors": ["162"]}
{"title": "Engenharia de Software Orientada a objetos\n", "abstract": " \u25aa Nossa habilidade em construir novos programas \u00e9 insuficiente para suprir a demanda por novas aplica\u00e7\u00f5es, nem mesmo somos capazes de construir rapidamente programas para atender aos requisitos do neg\u00f3cio ou necessidade de mercado. Ex.: aplica\u00e7\u00f5es para e-commerce, TV Digital, e-infraestrutura, eci\u00eancia, sistemas ub\u00edquos,...", "num_citations": "2\n", "authors": ["162"]}
{"title": "A skeptical discussion regarding experimentation in software engineering based on reading techniques studies\n", "abstract": " Software Engineering is a relatively young discipline and still lacks experimental maturity, making it comparable with the Pharmaceutical Industry of the 19th century. The absence of experimental studies on several topics or the poor way in which some studies are accomplished help to support this scenario. In this paper we discuss under an objective and skeptical view the potential limitations and confounding factors of some requirements reading techniques experimental studies. These studies were selected through a systematic review concerned with software reading techniques. Furthermore, we suggest alternative ways to overcome some of these issues.", "num_citations": "2\n", "authors": ["162"]}
{"title": "Introduction to the special issue on engineering context-aware software systems\n", "abstract": " Introduction to the special issue on engineering context-aware software systems \u2014 The UWS Academic Portal Skip to main navigation Skip to search Skip to main content The UWS Academic Portal Logo Help & FAQ Home Profiles Research Units Research output Activities Press / Media Prizes Search by expertise, name or affiliation Introduction to the special issue on engineering context-aware software systems Domenico Amalfitano, Santiago Matalonga, Guilherme Horta Travassos School of Computing, Engineering and Physical Sciences Research output: Contribution to journal \u203a Editorial Overview Original language English Article number 106509 Number of pages 2 Journal Information and Software Technology Volume 132 Early online date 23 Dec 2020 DOIs https://doi.org/10.1016/j.infsof.Publication status Published - 30 Apr 2021 Access to Document 10.1016/j.infsof.Other files and links Link to publication in -\u2026", "num_citations": "1\n", "authors": ["162"]}
{"title": "Alternatives for Testing of Context-Aware Contemporary Software Systems in industrial settings: Results from a Rapid review\n", "abstract": " Context: Context-aware contemporary software systems (CACSS) are mainstream. Furthermore, they present challenges for current engineering practices. These challenges are distinctively present when testing CACSS, as the variation of context deepens the limitations of available software testing practices and technologies. Objective: To understand how the industry deals with the variation of context when testing CACSS. Method: A Rapid Review was commissioned to uncover the necessary evidence to achieve the objectives. Results: Our results show that current research initiatives aim to generate or improve Test Suites that can deal with the variation of context and the sheer volume of test input possibilities. To achieve this, they mostly rely on modelling the systems' dynamic behavior and increasing computing resources to generate test inputs. We found no evidence of research results aiming at managing context variation through the testing lifecycle process. Conclusions: We discuss how the identified solutions are not ready for mainstream adoption. They are all domain-specific, and while the ideas and approaches can be reproduced in different settings, the technologies noon to be re-engineered and tailor to the specific CACSS.", "num_citations": "1\n", "authors": ["162"]}
{"title": "Moderator Factors of Software Security and Performance Verification\n", "abstract": " Context: Security and performance (S&P) are critical non-functional requirements on software systems. Therefore, verification activities should be included in the development process to identify related defects and avoiding S&P failures after deployment. However, the state of the practice of S&P verification is unclear, challenging academia to offer solutions for real-world problems faced by the S&P verification practitioners. Thus, identifying factors moderating the S&P verification helps software development organizations improve the S&P verification, releasing software that meets security and performance requirements. Objective: To present moderator factors influencing S&P verification activities and actions to promote S&P moderator factors. Method: Multiple case study using qualitative analysis of observational data to identify S&P moderators factors. Literature Rapid Reviews with Snowballing to strengthen confidence in the identified S&P moderators factors. Practitioners Survey to classify the S&P moderator factors regarding their relevance. Results: Identification of eight S&P moderator factors regarding organizational awareness, crossfunctional team, S&P requirements, support tools, verification environment, verification methodology, verification planning, and reuse practices. The literature reviews allowed us to confirm the identified S&P moderator factors and identify a set of actions to promote each of them. A survey with 37 valid participants allowed us to classify the identified S&P moderators factors and their actions relevant to S&P verification activities. Conclusions: The S&P moderator factors can be considered key points in which\u00a0\u2026", "num_citations": "1\n", "authors": ["162"]}
{"title": "A Technology to Support the Building of Requirements Documents for IoT Software Systems\n", "abstract": " The IoT paradigm seeks to support practical solutions to solve problems in the real world and several domains such as education, health, and mobility. As with traditional systems, requirements engineering represents a fundamental part of the Internet of Things (IoT) based software systems\u2019 quality development. However, the IoT systems are complex when compared to traditional software systems. RETIoT (Requirements Engineering Technology for IoT software systems) is a software technology aimed at building IoT software system requirements documents. This paper aims to present a proof of concept of RETIoT regarding its models. The proof of concept was carried out in the context of two real projects, low-cost IoT solutions, to assist health professionals at the Federal University of Rio de Janeiro in coping with the pandemic COVID-19. The results indicate the initial feasibility of using RETIoT to build\u00a0\u2026", "num_citations": "1\n", "authors": ["162"]}
{"title": "A Taste of the Software Industry Perception of Technical Debt and its Management in Uruguay: A survey in software industry\n", "abstract": " Background: Technical debt (TD) has been an important focus of attention in recent years by the scientific community and the software industry. TD is a concept for expressing the lack of internal software quality that directly affects its capacity to evolve. Some studies have focused on the TD industry perspective. Aims: To characterize how the software industry professionals in Uruguay understand, perceive, and adopt technical debt management (TDM) activities. Method: To replicate a Brazilian survey with the Uruguayan software industry and compare their findings. Results: From 259 respondents, many indicated any awareness of the TD concept due to the faced difficult to realize how to associate such a concept with actual software issues. Therefore, it is possible to observe a considerable variability in the importance of TDM among the respondents. However, a small part of the respondents declares to carry out\u00a0\u2026", "num_citations": "1\n", "authors": ["162"]}
{"title": "Towards Supporting the Specification of Context-Aware Software System Test Cases.\n", "abstract": " In Software Engineering, context can be understood as the overall set of information used to characterize the situation of an entity. A software system is context-aware if it uses the context to provide relevant information or services to the user. Nowadays, different types of software systems with a profound impact on the user\u2019s life can be considered context-aware (eg, ubiquitous and Internet of Things software systems). Therefore, it is crucial to guarantee that they behave correctly. Software Testing is the primary process for verifying system behavior. Because of the particularities of Context-Aware Software Systems (CASS), conventional testing methods are not enough to test such systems. Based on that, we propose CATS#, a technique to support software engineers with the specification of CASS test cases and capture not only the context itself but its variation as well. CATS# is an evolution of the CATS (Context-Aware Test Suite) Design technique. It introduces two relevant evolutions: test case models and a new test template. The test case models were proposed after we searched for context-aware applications through the literature and realized that the context could affect the test process in different manners. The test template was proposed to capture the variation of context by specifying which variation should occur during the test case and when it should occur. We selected one example application to apply our technique, deriving different types of test cases and showing its relevance in these initial steps.", "num_citations": "1\n", "authors": ["162"]}
{"title": "PipaBot: um canal de comunica\u00e7\u00e3o para o PIPA UFRJ\n", "abstract": " Chatbots make use of natural language processing to establish dialogues with people. They can be used as channels that facilitate communication between humans and entities (companies, social projects, research projects, hospitals, schools/universities, etc.). The PipaBot is a chatbot that was built to facilitate the communication between the mothers (expected two thousand participants) and researchers from the Childhood and Environmental Pollutants Project (PIPA-UFRJ). It was built following an incremental and iterative way and used the Botpress framework. The chatbot is available in two versions: Facebook Messenger and PIPA-UFRJ website. The actions provided by PipaBot are (i) registration of a project participant;(ii) information about the project, medical consultations, and result of medical exams, among others. The PipaBot was evaluated following the Technological Acceptance Model (TAM) with 13 participants, and the initial results provided evidence of user satisfaction regarding its acceptance.", "num_citations": "1\n", "authors": ["162"]}
{"title": "A Rapid Review on Testing of Context-Aware Contemporary Software Systems\n", "abstract": " In the investigation regarding Contemporary Software Systems (CSS)-such as the Internet of Things, Industry 4.0, and Smart Cities\u2013it has been observed that these modern software systems offer challenges for their construction since they are challenging our traditional methods for software development. Usually, they rely on different technologies and devices that can interact-capture-exchange information, act, and make decisions. It leads to concerns that rather than just developing software, we need to engineer software systems embracing multidisciplinarity, integrating different areas.In this context, previous investigations identified a lack of software testing technologies to support the evaluation of context-awareness, one of the main features of CSS. The observations made so far revealed that, despite applying conventional testing technologies to such software systems, it seems not to be possible to test the behavior of the system considering the variation of the context (at runtime). Besides, the design of test cases uses to miss context variables, which reduces the testing coverage and do not contribute to reducing the likelihood of failures due to context-related defects.", "num_citations": "1\n", "authors": ["162"]}
{"title": "Digitalizando o Microsc\u00f3pio \u00d3ptico: a solu\u00e7\u00e3o do Parasite Watch\n", "abstract": " As infec\u00e7\u00f5es parasit\u00e1rias afetam mais de um bilh\u00e3o de pessoas em 149 pa\u00edses em desenvolvimento e, para diagnostic\u00e1-las, utiliza-se um processo lento, capaz de afetar negativamente a sa\u00fade dos profissionais envolvidos. Visando este problema, prop\u00f5e-se uma infraestrutura de baixo custo com o objetivo de transformar microsc\u00f3pios \u00f3pticos comuns em digitais. A solu\u00e7\u00e3o apresentada possibilita a visualiza\u00e7\u00e3o da imagem em um monitor comum, bem como a captura dessas imagens e de informa\u00e7\u00f5es relevantes. Al\u00e9m disso, as imagens podem ser compartilhadas atrav\u00e9s de plataformas IoT. Este procedimento torna o processo de observa\u00e7\u00e3o de amostras mais f\u00e1cil e confort\u00e1vel, evitando problemas de sa\u00fade relacionados ao uso constante do microsc\u00f3pio convencional.", "num_citations": "1\n", "authors": ["162"]}
{"title": "Who is Right? Evaluating Empirical Contradictions in the Readability and Comprehensibility of Source Code.\n", "abstract": " Context: Several code guidelines aim at providing a common perspective on the readability and comprehensibility of source code. However, in many cases, they are contradictory on how to improve these quality characteristics. Objective: To analyze the influence of three contradictory source code attributes\u2013indentation spacing, identifier length and code size\u2013on the source code readability and comprehensibility, interpreting whether programming experience and domain knowledge can support explaining these contradictions. Method: To perform an empirical study with software developers collecting quantitative (Likert scale) and qualitative data to assess the readability and comprehensibility of developers regarding Python snippets. To observe eventual perceptions contradictions and whether their levels of experience and knowledge have something to do with such contrary results. Results: Regardless their programming experience, 4-spaces indentation dominated the readability preference of participants. While the readability and comprehensibility preferences towards long and completeword identifiers were mostly true for both novice/experts, developers with more experience and low domain knowledge level seemed to be more affected by the length of identifiers. Furthermore, while all participants showed more positive comprehensibility perceptions for Pythin snippets with more lines of code, their readability perceptions regardnig code size were contradictory since the less experienced participants preferred more lines of code and the more experienced ones prefer fewer lines. Conclusion: The results presented in the technical literature\u00a0\u2026", "num_citations": "1\n", "authors": ["162"]}
{"title": "Systematic Literature Review Protocol: Investigating Context Aware Software Testing Strategies: CAcTUS Project Report 01/2014\n", "abstract": " Ubiquitous computing shifts the focus from technology towards the user and her needs. Efforts in ubiquitous computing expand the place and mode of interaction beyond the desktop, into everyday spaces in which the main challenge is to make the systems useful in various situations that may be encountered in the real world (Lei Tang et al, 2011). A key tenant of ubiquitous computing is the concept of invisibility, where technology must blend into everyday objects (Weiser, 1991). In this context, it is essential that the different devices and services are capable of inter-operate among themselves without the interaction of the user.", "num_citations": "1\n", "authors": ["162"]}
{"title": "iMPS 2011\n", "abstract": " O programa MPS. BR\u2013Melhoria de Processo do Software Brasileiro foi criado em dezembro de 2003, sob coordena\u00e7\u00e3o da SOFTEX\u2013Associa\u00e7\u00e3o para Promo\u00e7\u00e3o da Excel\u00eancia do Software Brasileiro. As avalia\u00e7\u00f5es MPS em empresas t\u00eam prazo de validade de tr\u00eas anos: a 1\u00aa foi realizada em 2005; a 100\u00aa, em 2008; a 200\u00aa, em 2009; e a 300\u00aa, em 2011. O modelo MPS \u00e9 adotado tanto por pequenas e m\u00e9dias empresas (PME)-cerca de 70% das avalia\u00e7\u00f5es MPS publicadas, quanto por organiza\u00e7\u00f5es de grande porte, privadas e governamentais-cerca de 30%.", "num_citations": "1\n", "authors": ["162"]}
{"title": "Inspe\u00e7\u00e3o de Diagramas de Atividades da Especifica\u00e7\u00e3o de Requisitos\n", "abstract": " A especifica\u00e7\u00e3o de requisitos dos aplicativos de software atuais \u00e9 usualmente composta de diversos artefatos que descrevem v\u00e1rias atividades, fluxos, depend\u00eancias entre estes fluxos, desvios e regras de neg\u00f3cio. As aplica\u00e7\u00f5es web e as baseadas em workflow cient\u00edfico (e-science), por exemplo, demandam representa\u00e7\u00f5es estruturais para as diversas atividades e funcionalidades envolvidas na sua execu\u00e7\u00e3o, geralmente descritas atrav\u00e9s do diagrama de atividades. A garantia da qualidade destas especifica\u00e7\u00f5es representa um desafio para os engenheiros de software. Os resultados de uma quasi-revis\u00e3o sistem\u00e1tica indicam a car\u00eancia de tecnologias de software que apoiem a inspe\u00e7\u00e3o deste tipo de especifica\u00e7\u00e3o de requisitos. Para este fim, neste artigo, al\u00e9m dos resultados desta revis\u00e3o, \u00e9 apresentada uma t\u00e9cnica de inspe\u00e7\u00e3o (checklist) para apoiar a revis\u00e3o dos diagramas de atividades de uma\u00a0\u2026", "num_citations": "1\n", "authors": ["162"]}
{"title": "A conception process for abstract workflows: an example on deep water oil exploitation domain\n", "abstract": " Experimentation is one of the ways used to support theories based on a scientific method. In-silico experiments are highly dependent of massive use of computational resources to execute their simulations. One way to use in-silico experiments is through the use of scientific work-flows. It is a model that represents the flow of programs, services and data usually orchestrated to support a simulation. Scientific workflows are executed in engines called Scientific Workflow Management Systems (SWfMS), which are responsible for enacting, controlling and monitoring the workflow. Each one of the scientific workflows within an experiment follows specific phases regarding composition, execution and analysis. Usually, when conducting a scientific experiment, the first phase to be considered is called Composition. One important sub-phase is the Conception, which is responsible for setting up the experiment. Many initiatives suggest that composition should be done by abstracting the several concepts usually used in the scientific workflows. An abstract workflow is the chaining of activities that describes what should be done, but without saying how. In the next abstraction level, when a scientific workflow is ready to be executed, it is called a concrete workflow. In this context, scientific experiments based on computational simulations introduced new concerns for the scientists about their prior organization, modelling and specification. In general, the scientific experiments are specified as scientific workflows directly bound to the computational resources required for their implementation. So, the experiments composition directly in SWfMS becomes difficult for\u00a0\u2026", "num_citations": "1\n", "authors": ["162"]}
{"title": "PatternFlow: Supporting Standardized Description and Enactment of Business Processes\n", "abstract": " The establishment of patterns to systematically address workflow requirements is important, since it should be possible for a modeled process to be described and enacted by workflow management systems. Despite the sprouting of those workflow patterns, many of them are not supported in a great amount of workflow modeling languages and workflow management systems. Moreover, many of those patterns recur quite frequently during the analysis phase of workflow projects, which highlights the importance of supporting such patterns.In this paper we present PatternFlow, a framework for describing and enacting business processes whose requirements set was derived mainly from knowledge acquired from the analysis of documented workflow patterns. PatternFlow has been used, among others, to implement ISPIS, a framework for supporting the software inspection process. Evaluations of ISPIS in academy and industry allowed us to gain additional insight regarding the feasibility of using PatternFlow for enacting processes used in real industrial environments.", "num_citations": "1\n", "authors": ["162"]}
{"title": "An Integrated Computational Environment for Modeling, Simulation and Visualization of Sedimentary Basins and Petroleum Systems\n", "abstract": " Increasing oil and gas production is crucial for the Brazilian development. In order to overcome the growing demand, it is necessary to reduce the exploration risks and costs, as well as the time necessary for the development of new ventures. The complexity of deep water exploration and exploitation has been challenging scientists and engineers to find new and efficient computer-based tools that bring together technology\u2019s state-of-the art. The objective of this paper is to report our current efforts to study the scientific workflow of oil and gas exploration for the development of an integrated workbench for modeling, simulation and visualization of sedimentary basins and petroleum systems. Recently, many tools for computer based modeling of geological and geophysical phenomena have been developed at COPPE/UFRJ, rendering important results to deep-water oil and gas exploration and research efforts. On the other hand, data mining techniques have allowed an efficient exploitation of the huge amount of geological, geophysical and geochemical exploration data. The integration of such enabling technologies in the same computerized workbench, with availability of high performance computing hardware and high resolution graphical interfaces, may improve the decision-making process, which is currently based upon the expert\u2019s experience and conventional techniques represented by several non integrated tools.", "num_citations": "1\n", "authors": ["162"]}
{"title": "An Environment to Observe Object-Oriented Software Evolution.\n", "abstract": " Software systems are growing quickly in needs of functionality, complexity, size and structure. Therefore, it becomes necessary to advance the ways where software suffers changes, so it can be modified more easily to accommodate these needs. However, anticipating the changes is not an easy task, once there are a lot of reasons why the systems change. The Laws of Software Evolution describe how a system behaves throughout their successive versions regarding its decaying. Most of the experimental studies supporting these Laws are regarding legacy systems' source code. However, we believe the Laws can also be observed when dealing with the other software development process phases. Therefore, we present a set of observational hypotheses to verify whether the Laws of Software Evolution can also be supported by the different phases of a object-oriented software development process, as well as the linkages and influences among the Laws of Software Evolution, so as to establish how the Laws impact each other. Thus, we intend to experimentally study these hypotheses in order to have a better understanding of how objectoriented systems can evolve.", "num_citations": "1\n", "authors": ["162"]}
{"title": "Software Engineering Environments.\n", "abstract": " Software engineering environments started to be built in the 80's, aiming to support the software development processes by integrating CASE tools and making them available to the software engineers. However, software processes, software complexity, development paradigms, innovative problem domains and so on have evolved along these years, making the building of software engineering environments harder, but still possible. At this talk, we discuss the issues regarding software engineering environments construction, highlighting the need of SE knowledge to support such environments. Our discussion is based on the experience acquired in the building of the TABA Workstation (http://www. cos. ufrj. br/~ taba), a meta environment that allows software engineers to configure and instantiate SEE for software projects. TABA represents a long term research project at COPPE/UFRJ. Its results are being used by the Brazilian Software Industry to support their software projects, including CMMI-2 certification.", "num_citations": "1\n", "authors": ["162"]}
{"title": "Combining Metrics, Principles, and Guidelines for Object Oriented Design Complexity Reduction\n", "abstract": " Combining Metrics, Principles, and Guidelines for Object Oriented Design Complexity Reduction | Proceedings of the Workshop on Object-Oriented Technology ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleProceedingsProceedings of the Workshop on Object-Oriented TechnologyCombining Metrics, Principles, and Guidelines for Object Oriented Design Complexity Reduction Article Combining Metrics, Principles, and Guidelines for Object Oriented Design Complexity Reduction Share on Authors: Guilherme Travassos View Profile , Renata da Silva Andrade View Profile Authors Info & Affiliations Proceedings of the Workshop on -334\u2026", "num_citations": "1\n", "authors": ["162"]}