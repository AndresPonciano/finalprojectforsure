{"title": "Detecting and resolving process model differences in the absence of a change log\n", "abstract": " Business-driven development favors the construction of process models at different abstraction levels and by different people. As a consequence, there is a demand for consolidating different versions of process models by detecting and resolving differences. Existing approaches rely on the existence of a change log which logs the changes when changing a process model. However, in several scenarios such a change log does not exist and differences must be identified by comparing process models before and after changes have been made. In this paper, we present our approach to detecting and resolving differences between process models, in the absence of a change log. It is based on computing differences and deriving change operations for resolving differences, thereby providing a foundation for variant and version management in these cases.", "num_citations": "192\n", "authors": ["1252"]}
{"title": "Adapt cases: extending use cases for adaptive systems\n", "abstract": " Adaptivity is prevalent in today's software. Mobile devices self-adapt to available network connections, washing machines adapt to the amount of laundry, etc. Current approaches for engineering such systems facilitate the specification of adaptivity in the analysis and the technical design. However, the modeling of platform independent models for adaptivity in the logical design phase remains rather neglected causing a gap between the analysis and the technical design phase.", "num_citations": "66\n", "authors": ["1252"]}
{"title": "A Tool for Process Merging in Business-Driven Development.\n", "abstract": " Business-driven development favors the construction of process models at different abstraction levels and by different people. As a consequence, there is a demand for consolidating different versions of process models by merging them. In this paper, we study a basic scenario, derive requirements and present a prototype for detecting and resolving changes between process models.", "num_citations": "51\n", "authors": ["1252"]}
{"title": "Detection of semantically equivalent fragments for business process model change management\n", "abstract": " Modern business process modeling environments support distributed development by means of model version control, i.e., comparison and merging of two different model versions. This is a challenging task since most modeling languages support an almost arbitrary creation of process models. Thus, in multi-developer environments, process models or parts of them are often syntactically very different but semantically equivalent. Hence, the comparison of business process models must be performed on a semantic level rather then on a syntactic level. For the domain of business process modeling, this problem is yet unsolved. This paper describes an approach that allows the semantic comparison of different business process models using a normal form. For that purpose, the process models are fully automatically translated into process model terms and normalized using a term rewriting system. The resulting\u00a0\u2026", "num_citations": "46\n", "authors": ["1252"]}
{"title": "Dependent and conflicting change operations of process models\n", "abstract": " Version management of models is common for structural diagrams such as class diagrams but still challenging for behavioral models such as process models. For process models, conflicts of change operations are difficult to resolve because often dependencies to other change operations exist. As a consequence, conflicts and dependencies between change operations must be computed and shown to the user who can then take them into account while creating a consolidated version. In this paper, we introduce the concepts of dependencies and conflicts of change operations for process models and provide a method how to compute them. We then discuss different possibilities for resolving conflicts. Using our approach it is possible to enable version management of process models with minimal manual intervention of the user.", "num_citations": "41\n", "authors": ["1252"]}
{"title": "Language-independent change management of process models\n", "abstract": " In model-driven development approaches, process models are used at different levels of abstraction and are described by different languages. Similar to other software artifacts, process models are developed in team environments and underlie constant change. This requires reusable techniques for the detection of changes between different process models and the computation of dependencies and conflicts between changes. In this paper, we propose a framework for the construction of process model change management solutions that provides generic techniques for the detection of differences and the computation of dependencies and conflicts between changes. The framework contains an abstract representation for process models that serves as a common denominator for different process models. In addition, we show how the framework is instantiated exemplarily for BPMN.", "num_citations": "31\n", "authors": ["1252"]}
{"title": "Detection and resolution of conflicting change operations in version management of process models\n", "abstract": " Version management of process models requires that different versions of process models are integrated by applying change operations. Conflict detection between individually applied change operations and conflict resolution support are integral parts of version management. For conflict detection it is utterly important to compute a precise set of conflicts, since the minimization of the number of detected conflicts also reduces the overhead for merging different process model versions. As not every syntactic conflict leads to a conflict when taking into account model semantics, a computation of conflicts solely on the syntax leads to an unnecessary high number of conflicts. Moreover, even the set of precisely computed conflicts can be extensive and their resolution means a significant workload for a user. As a consequence, adequate support is required that guides a user through the resolution process and\u00a0\u2026", "num_citations": "29\n", "authors": ["1252"]}
{"title": "Precise detection of conflicting change operations using process model terms\n", "abstract": " Version management of process models requires that changes can be resolved by applying change operations. Conflict detection is an important part of version management and the minimization of the number of detected conflicts also reduces the overhead when resolving changes. As not every syntactic conflict leads to a conflict when taking into account model semantics, a computation of conflicts solely on the syntax leads to an unnecessary high number of conflicts. In this paper, we introduce the notion of syntactic and semantic conflicts for change operations of process models. We provide a method how to efficiently compute conflicts, using a term formalization of process models. Using this approach, we can significantly reduce the number of overall conflicts and thereby reduce the amount of work for the user when resolving conflicts.", "num_citations": "28\n", "authors": ["1252"]}
{"title": "Pattern-based modeling and formalizing of business process quality constraints\n", "abstract": " The quality of business processes can be checked by verifying their compliance with specific quality constraints. These constraints represent a set of required temporal and logical relationships between different steps of business processes. Quality constraints are usually formulated as informal texts, which makes them difficult to be verified, when business processes become complex. One way to solve this problem is by automating the verification of quality constraints on business processes by applying model checking. To apply model checking, both business processes and quality constraints have to be formalized. In this paper, we define a new visual language for modeling quality constraints and we provide a pattern-based translation for quality constraint models into Computation Tree Logic formulas.", "num_citations": "27\n", "authors": ["1252"]}
{"title": "Dynamic computation of change operations in version management of business process models\n", "abstract": " Version management of business process models requires that changes can be resolved by applying change operations. In order to give a user maximal freedom concerning the application order of change operations, position parameters of change operations must be computed dynamically during change resolution. In such an approach, change operations with computed position parameters must be applicable on the model and dependencies and conflicts of change operations must be taken into account because otherwise invalid models can be constructed. In this paper, we study the concept of partially specified change operations where parameters are computed dynamically. We provide a formalization for partially specified change operations using graph transformation and provide a concept for their applicability. Based on this, we study potential dependencies and conflicts of change operations and\u00a0\u2026", "num_citations": "22\n", "authors": ["1252"]}
{"title": "Kaos4SOA-Extending KAOS Models with Temporal and Logical Dependencies.\n", "abstract": " In requirements engineering for service-oriented systems, stakeholder objectives are described by goal models from which business process models are derived that define the required service compositions. A goal-based requirements specification should ensure completeness of the goals that need to be achieved as well as the consideration of temporal and logical dependencies between goals. Recent approaches lack the ability to elicitate and specify the stakeholders\u2019 knowledge about dependencies between goals that need to be considered in the derivation of business processes. We present Kaos4SOA, an extended goal notation for the explicit specification of goal dependencies and briefly describe how existing approaches can be extended to validate the consistency of business processes against these dependencies. The application of our approach is supported by the implemented Kaos4SOA modeling workbench.", "num_citations": "16\n", "authors": ["1252"]}
{"title": "From open API to semantic specifications and code adapters\n", "abstract": " Today, modern IT-systems are often an interplay of third-party web services. Developers in their role as requesters integrate existing services of different providers into new IT-systems. Providers use frameworks like Open API to create syntactic service specifications from which requesters generate code to integrate services. Proper service discovery is crucial to identify usable services in the growing plethora of third-party services. Most advanced service discovery approaches rely on semantic specifications, e.g., OWL-S. While semantic specifications are crucial for a precise discovery, syntactical specification are needed for service invocation. To close the gap between semantic and syntactic specifications, service grounding establishes links between the semantic and syntactic specifications. However, for a large number of web services still no semantic specification or grounding exists. In this paper, we present an\u00a0\u2026", "num_citations": "14\n", "authors": ["1252"]}
{"title": "Ensuring consistency among business goals and business process models\n", "abstract": " The paradigm of service-oriented architectures has emerged as an architectural style for designing enterprise applications. Requirements engineering for such applications comprises the specification of business goal models representing stakeholder objectives and the operationalization to business process models that specify the required composition of services. Inconsistencies between business goals and derived business processes can lead to service compositions that are not in line with the actual stakeholder objectives. For preserving consistency it is required to consider logical and temporal dependencies among goals (e.g. the order in which they need to be achieved) in the derivation of business processes. In previous work, we provided a technique for the elicitation and specification of dependencies between business goals. Extending this approach, we aim at validating the consistency between\u00a0\u2026", "num_citations": "13\n", "authors": ["1252"]}
{"title": "Towards an automatic service discovery for UML-based rich service descriptions\n", "abstract": " Service-oriented computing (SOC) promises to solve many issues in the area of distributed software development, e.g. the realization of the loose coupling pattern in practice through service discovery and invocation. For this purpose, service descriptions must comprise structural as well as behavioral information of the services otherwise an accurate service discovery is not possible. We addressed this issue in our previous paper and proposed a UML-based rich service description language (RSDL) providing comprehensive notations to specify service requests and offers.               However, the automatic matching of service requests and offers specified in a RSDL for the purpose of service discovery is a complex task, due to multifaceted heterogeneity of the service partners. This heterogeneity includes the use of different underlying ontologies or different levels of granularity in the specification itself resulting\u00a0\u2026", "num_citations": "13\n", "authors": ["1252"]}
{"title": "A UML-based Rich Service Description Language for Automatic Service Discovery of Heterogeneous Service Partners.\n", "abstract": " Service-oriented computing (SOC) emerges as a promising trend solving many issues in distributed software development. Following the essence of SOC, service descriptions are defined by the service partners based on current standards, eg, WSDL [15]. However, these standards are mostly structural and do not provide any behavioral description, which may lead to inaccurate service discovery results. There is a requirement for a rich service description language for service partners that encompasses the structural as well as behavioral information in the service description. Furthermore, service discovery based on an automatic matching of these comprehensive service descriptions is a complex task, which is further complicated through the heterogeneity of the service partners\u2019 domains in terms of different underlying ontologies. In this paper, we propose a rich service description language based on UML, which allows the specification of structural and behavioral features of a service. In addition, we also briefly discuss how some existing matching approaches can be extended to define an automatic matching mechanism for rich service descriptions resolving the underlying heterogeneity.", "num_citations": "13\n", "authors": ["1252"]}
{"title": "RSDL workbench results for OAEI 2014\n", "abstract": " The vision of automatic service composition is to automatically combine single services to a software solution that satisfies certain requirements. Comprehensive service specifications are needed to receive suitable compositions. The Rich Service Description Language (RSDL) has been developed and can be used to specify ontological and behavioral semantics of services comprehensively. Part of a service\u2019s RSDL specification is its domain ontology that comprises concepts to describe, eg, the service\u2019s input and output parameters. The RSDL Workbench (RSDLWB) is a platform that provides tools for the specification, matching, and composition of services. In particular, RSDLWB matches ontologies that are part of RSDL specifications. In this paper, we present that ontology matcher and the evaluation results as determined by the Ontology Alignment Evaluation Initiative (OAEI). Compared to the last campaign, we improved the runtime while maintaining the quality level of the produced alignments.", "num_citations": "11\n", "authors": ["1252"]}
{"title": "Normalizing heterogeneous service description models with generated QVT transformations\n", "abstract": " Service-Oriented Architectures (SOAs) enable the reuse and substitution of software services to develop highly flexible software systems. To benefit from the growing plethora of available services, sophisticated service discovery approaches are needed that bring service requests and offers together. Such approaches rely on rich service descriptions, which specify also the behavior of provided/requested services, e.g., by pre- and postconditions of operations. As a base for the specification a data schema is used, which specifies the used data types and their relations. However, data schemas are typically heterogeneous wrt. their structure and terminology, since they are created individually in their diverse application contexts. As a consequence the behavioral models that are typed over the heterogeneous data schemas, cannot be compared directly. In this paper, we present an holistic approach to\u00a0\u2026", "num_citations": "11\n", "authors": ["1252"]}
{"title": "Model-driven specification of adaptive cloud-based systems\n", "abstract": " In cloud-based systems, business process models compose loosely coupled services to fulfill a certain goal. In order to ensure a high quality of service (QoS) of these systems, irregularities and violations need to be detected and handled at runtime by adapting the system. As a consequence, engineering such systems requires an explicit modeling of adaptation rules, which define how the system is adapted under certain conditions. These rules are defined based on models that specify QoS agreements as well as service bindings and business processes that are adapted. In this paper, we present a modeling approach for adaptive, cloud-based systems which supports the explicit specification of adaptation rules. We are introducing a metamodel for specifying bindings between business processes and cloud services considering Service Level Agreements that define the required QoS. In order to express\u00a0\u2026", "num_citations": "10\n", "authors": ["1252"]}
{"title": "QUAASY: QUality Assurance of Adaptive SYstems\n", "abstract": " The emerging approach to tackle the increasing complexity of today's software systems is the use of self-adaptation techniques. Modeling and implementing adaptivity features is a burdensome and error-prone task that potentially results in erroneous system models. As a consequence, quality analysis and assurance must be considered early in the development of self-adaptive systems.", "num_citations": "10\n", "authors": ["1252"]}
{"title": "Market-optimized service specification and matching\n", "abstract": " Various approaches in service engineering are based on service markets where brokers use service matching in order to perform service discovery. For matching, a broker translates the specifications of providers\u2019 services and requesters\u2019 requirements into her own specification language, in order to check their compliance using a matcher. The broker\u2019s success depends on the configuration of her language and its matcher because they influence important properties like the effort for providers and requesters to create suitable specifications as well as accuracy and runtime of matching. However, neither existing service specification languages, nor existing matching approaches are optimized in such way. Our approach automatically provides brokers with an optimal configuration of a language and its matcher to improve her success in a given market with respect to her strategy. The approach is based on\u00a0\u2026", "num_citations": "9\n", "authors": ["1252"]}
{"title": "Vertical process merging by reconstruction of equivalent models and hierarchical process merging\n", "abstract": " Methods, systems and computer program products for improvement of vertical process merging by reconstruction of equivalent models and hierarchical process merging. Embodiments of the invention include a method for identifying and resolving differences between business process models, the method including receiving a first business process model project, identifying a second business process model project, performing changes to the second business process model project, merging the first and second business process model projects, creating a delta model configured to analyze the differences between the business process model projects, wherein an analysis of the differences between the first and second business process model projects are in the form of low-level changes and auto-applying the low-level changes of the first business process model project to generate a new business process model\u00a0\u2026", "num_citations": "9\n", "authors": ["1252"]}
{"title": "Precise Mappings between Business Process Models in Versioning Scenarios\n", "abstract": " In the development process of service-oriented systems, business process models are used at different levels. Typically, high-level business process models that describe business requirements and needs are stepwise refined to the IT level by different business modelers and software architects. As a result, different process model versions must be compared and merged by means of model version control. An important prerequisite for process model version control is an elaborated matching approach that results in precise mappings between different process model versions. The challenge of such an approach is to deal with syntactically different process models that are semantically equivalent. For that purpose, matching techniques must consider the semantics of process modeling languages. In this paper, we present a matching approach for process models in a versioning scenario. Based on a term\u00a0\u2026", "num_citations": "9\n", "authors": ["1252"]}
{"title": "Computing dependent and conflicting changes of business process models\n", "abstract": " Changing a business process model involves several aspects:(1) given a set of change operations, dependencies and conflicts are encoded in dependency and conflict matrices;(2) given a change sequence for a process model M, the change sequence is broken up into subsequences such that operations from different subsequences are independent;(3) given a change sequence for a process model V1 and another change sequence for a process model V2, conflicts between operations in the different change sequences are determined;(4) the process structure tree can be used to localize dependency computations, yielding a more efficient approach to determining dependencies; and (5) the process structure tree can be used to localize conflict computations, yielding a more efficient approach to determining conflicts.", "num_citations": "8\n", "authors": ["1252"]}
{"title": "CrossEcore: an extendible framework to use ecore and OCL across platforms\n", "abstract": " Today, model-driven approaches are a cornerstone in modern software development. The Eclipse Modeling Framework (EMF) is highly adopted in practice and generates Java code from platform-independent models with embedded Object Constraint Language (OCL) expressions. However, applications that target multiple platforms like Android, iOS, Windows, web browsers usually need to be implemented in different programming languages. Feature-complete Ecore and OCL runtime APIs are not available for all these platforms, such that their functionality has to be re-implemented. In this paper, we present CrossEcore: A multi-platform enabled modeling framework that generates C#, Swift, TypeScript, and JavaScript code from Ecore models with embedded OCL. An OCL compiler translates OCL expressions into expressions of the target language. The Ecore and OCL API can be consistently used across\u00a0\u2026", "num_citations": "7\n", "authors": ["1252"]}
{"title": "Visual Requirements Modeling for Cross-Device Systems\n", "abstract": " Modern information systems have to support a variety of different device    types like desktop computers, smartphones, or tablets. Furthermore, it is    important to enable users to use device types that fit their needs or are    suited for the tasks at hand, e.g., allowing them to use multiple devices in    parallel or sequentially by switching from one device to another. Such    cross-device interactions must be taken into account already during    requirements analysis to ensure that they are properly addressed in later    phases of development. Unfortunately, current requirements modeling    techniques do not provide adequate techniques to model cross-device systems.    In this paper, we present an extended form of use case diagrams able to model    such systems. Using our approach it is possible to specify which device types    can be used when performing a certain use case and what kinds of cross-device    interactions are supported. Based on this, we show how this information can    be refined by integrating extended use case diagrams with our existing    approach to model cross-device interactions in process diagrams. Thereby, we    explain how requirements can be modeled visually in a model-based development    process for cross-device systems.", "num_citations": "6\n", "authors": ["1252"]}
{"title": "Cross-Device Integration of Android Apps\n", "abstract": " Integrating apps on mobile devices into applications running on other devices is usually difficult. For instance, using a messenger on a smartphone to share a text written on a desktop computer often ends up in a cumbersome solution to transfer the text, because many applications are not designed for such scenarios. In this paper, we present an approach enabling the integration of apps running on Android devices into applications running on other devices and even other platforms. This is achieved by specifying adapters for Android apps, which map their services to a platform-independent service interface. For this purpose, we have developed a domain-specific language to ease the specification of such mappings. Our approach is applicable without the need to modify the existing Android apps providing the service. We analyzed its feasibility by implementing our approach and by specifying mappings\u00a0\u2026", "num_citations": "6\n", "authors": ["1252"]}
{"title": "Multi-staged quality assurance for self-adaptive systems\n", "abstract": " The emerging approach to tackle the increasing complexity of today's software systems is the use of self-adaptation techniques. Most often, self-adaptation is introduced in terms of externalized adaptation rules (e.g. event-condition-action rules). Modeling and implementing adaptation rules introduces an additional amount of complexity that potentially results in erroneous system specification models. As a consequence, quality analysis and assurance must be considered early in the development cycle of self-adaptive systems. In this paper, we propose an efficient quality assurance approach for self-adaptive systems in terms of an integrated modeling and analysis approach, which is capable to identify errors (e.g. conflicting adaptation rules) in the set of adaptation rules early in the design process. Based on Adapt Cases, a high-level design modeling language for self-adaptive systems, we describe a multi-staged\u00a0\u2026", "num_citations": "6\n", "authors": ["1252"]}
{"title": "Process Merging in Business-Driven Development\n", "abstract": " Business-driven development favors the construction of process models at different abstraction levels and by different people. As a consequence, there is a demand for consolidating different versions of process models by merging them. Process merging can be considered as a special case of model composition. However, in order to be applicable by a business user, process merging has to fulfill specific requirements such as user-friendliness and minimal manual intervention. In this paper, we present our approach to process merging. It is based on calculating differences and ordering them according to the underlying structure of process models. This allows to resolve differences in a particular user-friendly way by eg automating reconnection of inserted process elements.", "num_citations": "6\n", "authors": ["1252"]}
{"title": "Towards Rich Change Management for Business Process Models\n", "abstract": " Business process models play an important role in the development of large IT systems, since they are easy to understand by all project stakeholders. High-level process models may be created by domain experts, which are stepwise refined in later development phases until they become executable. To establish such model-driven development (MDD) approaches in praxis, a comprehensive tool support of the complete model life cycle is necessary including model change management in particular. In this position paper, we give an overview of our framework for change management of business process models. This framework allows to merge process models in different modeling languages and considers the execution semantics of process models during comparison. Based on these results, we derive further research challenges with the aim to obtain a rich change management solution for business process models.", "num_citations": "5\n", "authors": ["1252"]}
{"title": "XDAI-A: Framework for Enabling Cross-Device Integration of Android Apps\n", "abstract": " A lot of people are managing multiple computing devices suited for different purposes, like private and work devices. Integrating applications running on different devices is often a problem, because the services provided by those applications are not meant to be integrated. In this demonstration, we present our XDAI-A framework which enables cross-device integration of services provided by Android apps. The framework uses adapters to convert Android-internal service interfaces of existing apps into external services with a platform-independent interface that can be accessed from applications on other devices and even other platforms. Our ready-to-use framework does not require to alter existing Android apps, since the adapters are installed separately. For the convenient specification of adapters, our framework comes with a domain-specific language (DSL). Additionally, we provide an infrastructure to\u00a0\u2026", "num_citations": "3\n", "authors": ["1252"]}
{"title": "Behavior Modeling-Foundations and Applications\n", "abstract": " This book contains revised selected papers of six annual International Workshops on Behaviour Modelling-Foundations and Applications, which were held from 2009 to 2014 [1\u20136].Behaviour modelling is about describing a system in terms of its states and its transitions from one state to another. The transitions may be initiated by the system itself or by the systems environment, including the system\u2019s users and other systems. Behaviour models capture system requirements forming the basis of their precision and completeness. They may have execution semantics, and, therefore, they are related to system simulation techniques.", "num_citations": "3\n", "authors": ["1252"]}
{"title": "Use Your Best Device! Enabling Device Changes at Runtime\n", "abstract": " The usage of different computing devices, like desktop computers or smartphones, in our everyday lifes increases continuously. Moreover, smart watches and other wearables are ready to accompany us in our daily habits. As a consequence, applications are developed for a variety of different computing devices, in order to give users the freedom to choose a device that really fits their current situation. If this situation changes, a different device may become more suitable than the chosen one. In most cases, applications do not support changing the executing device at runtime, since this is usually not considered at design time and would require the transferal of the current state. In this paper, we present an approach to define device changes for process-driven applications. To this extent, we enrich process models with deployment information, which allows specifying where it should be possible to change the\u00a0\u2026", "num_citations": "3\n", "authors": ["1252"]}
{"title": "Integrating coverage analysis into testdriven development of model transformations\n", "abstract": " For testing model transformations, a software engineer usually designs a test suite consisting of test cases where each test case consists of one or several models. In order to ensure a high quality of such a test suite, coverage achieved by the test cases with regard to the system under test must be systematically measured. The results obtained during coverage analysis can then be used eg for creating additional test cases. In addition to measuring coverage, a software engineer developing a model transformation is also confronted with how to integrate such coverage analysis results into the development process. For example, the software engineer has to decide when to measure coverage, when to investigate the results and how and when to take appropriate actions. In this paper, we present a prototypical tool which can be used for measuring coverage of test requirements for model transformations. We explain\u00a0\u2026", "num_citations": "3\n", "authors": ["1252"]}
{"title": "Automated service discovery and composition for On-the-Fly SOAs\n", "abstract": " The true essence of service-oriented computing is the realization of software development based on services that are composed to service-oriented architectures (SOA). In recent years, the number of available software services steadily increased, favored by the rise of cloud computing with its attached delivery models like Software-as-a-Service (SaaS). To fully leverage the opportunities provided by these services for developing highly flexible and aligned SOA, integration of new services as well as the substitution of existing services must be simplified. As a consequence, approaches for automated and accurate service discovery and composition are needed. In this paper, we propose an automatic service composition approach as an extension to our earlier work on automatic service discovery. To ensure accurate results, it matches the service request and available offers based on their structural as well as behavioral aspects. Afterwards, possible service compositions are determined by composing the service protocols through a composition strategy based on labeled transition systems.", "num_citations": "3\n", "authors": ["1252"]}
{"title": "A UML-based Rich Service Description for Automatic Service Discovery\n", "abstract": " Service-oriented computing (SOC) emerges as a promising trend solving many issues in distributed software development. Following the essence of SOC, service descriptions are dened by the service partners based on current standards, eg, WSDL [15]. However, these standards are mostly structural and do not provide any behavioral description, which may lead to inaccurate service discovery results. There is a requirement for a rich service description language for service partners that encompasses the structural as well as behavioral information in the service description. Furthermore, service discovery based on an automatic matching of these comprehensive service descriptions is a complex task, which is further complicated through the heterogeneity of the service partners' domains in terms of dierent underlying ontologies. In this paper, we propose a rich service description language based on UML, which\u00a0\u2026", "num_citations": "3\n", "authors": ["1252"]}
{"title": "On-The-Fly computing: automatic service discovery and composition in heterogeneous domains\n", "abstract": " In software markets of the future, customer-specific software will be developed on demand based on distributed software and hardware services. Based on a customer-specific request, available service offers have to be discovered and composed into sophisticated IT services that fulfill the customer\u2019s request. A prerequisite of this vision are rich service descriptions, which comprise structural as well as behavioral aspects of the services, otherwise an accurate service discovery and composition is not possible. However, automatic matching of service requests and offers specified in rich service descriptions for the purpose of service discovery is a complex task, due to the multifaceted heterogeneity of the service partners. This heterogeneity includes the use of different specification languages, different underlying ontologies, or different levels of granularity in the specification itself. In this article, we present a\u00a0\u2026", "num_citations": "2\n", "authors": ["1252"]}
{"title": "Breathing Life into Situational Software Engineering Methods\n", "abstract": " Software engineering methods are used to prescribe and coordinate the tasks necessary to plan, build, deliver, and maintain software. There is a broad consensus that there is no one-size-fits-all method and that, e.g., agile and plan-driven approaches have to be mixed sometimes, based on the context of a project. Creating these so-called situational methods and assuring that they cover all necessary details consistently is a challenge. There is also the challenge for the project teams to follow methods as prescribed by the method engineer. Our approach supports the creation of consistent situational methods from a repository of pre-existing building blocks. Moreover, we present means to enact these methods with standard BPEL/BPEL4People workflow engines, automating the coordination of tasks and providing guidance for them.", "num_citations": "2\n", "authors": ["1252"]}
{"title": "Goal-Driven Composition of Business Process Models\n", "abstract": " Goal-driven requirements engineering is a well-known approach for the systematic elicitation and specification of strategic business goals in early phases of software engineering processes. From these goals concrete operations can be derived that are composed in terms of a business process model. Lacking consistency between goal models and derived business processes especially with respect to the dependencies between goals can result in an implementation that is not in line with the actual business objectives. Hence, constraints indicated from these dependencies need to be considered in the derivation of business process models. In previous work, we introduced the extended goal modeling language Kaos4SOA that provides comprehensive modeling capabilities for temporal and logical dependencies among goals. Further, we presented an approach to validate the consistency between goal\u00a0\u2026", "num_citations": "2\n", "authors": ["1252"]}
{"title": "Automated service composition for on-the-fly soas\n", "abstract": " In the service-oriented computing domain, the number of available software services steadily increased in recent years, favored by the rise of cloud computing with its attached delivery models like Software-as-a-Service (SaaS). To fully leverage the opportunities provided by these services for developing highly flexible and aligned SOA, integration of new services as well as the substitution of existing services must be simplified. As a consequence, approaches for automated and accurate service discovery and composition are needed. In this paper, we propose an automatic service composition approach as an extension to our earlier work on automatic service discovery. To ensure accurate results, it matches service requests and available offers based on their structural as well as behavioral aspects. Afterwards, possible service compositions are determined by composing service protocols through a\u00a0\u2026", "num_citations": "2\n", "authors": ["1252"]}
{"title": "A generic meta-model-based approach for specifying framework functionality and usage\n", "abstract": " Enterprise software development is based on the usage of frameworks. However, well-established concepts to specify framework functionality and how to use it can hardly be found. As consequence, there are poor framework documentations. Various problems arise from this, e.g. a high effort for learning a framework and therefore the need of framework specialists. Existing framework description languages (FDL) focus on parts of the problem but do not cover all aspects of specifying framework functionality and usage. In this paper, we present a generic approach for specifying all aspects of framework functionality and usage. We collected requirements to identify relevant aspects and defined a generic meta-model for FDLs. The generic meta-model is the base for defining concrete FDLs while guaranteeing that all relevant framework aspects are covered. Particularly, due to its generic character, parts of the\u00a0\u2026", "num_citations": "2\n", "authors": ["1252"]}
{"title": "Adapt cases\n", "abstract": " Adapt Cases Page 1 Adapt Cases Extending Use Cases for Adap6ve Systems Markus Luckey, Benjamin Nagel, Christian Gerth, Gregor Engels University of Paderborn, Germany UC1 UCD: XY ACD: XY adapts AC1 Page 2 Scenario Additional Computing Power Requesting Page Processing Request Cooling System Managing System 5/23/11 -\u2010 SEAMS '11 2 Page 3 Machine Model A B C UC S1 S2 S3 S4 Object-\u2010Oriented System Design S E Object-\u2010Oriented Design of Adaptation Rules IF Then Adapt 5/23/11 -\u2010 SEAMS '11 3 Page 4 The Gap 5/23/11 -\u2010 SEAMS '11 4 Adaptation rules Context model Attributes Strategies, Tactics Schedules, Operators ? Requirements Analysis Logical Design Technical Design Adaptivity Functionality C o n s tru c tio n Use Cases Architecture Adaptation Mechanism The system \u2026 SHALL .... The system SHALL... AS CLOSE AS POSSIBLE \u2026. Goals, Requirements, Uncertainty Factors (\u2026", "num_citations": "2\n", "authors": ["1252"]}
{"title": "Detection and resolution of data-flow differences in business process models\n", "abstract": " Business process models have an important role in enterprises and organizations as they are used for insight, specification or configuration of business processes. After its initial creation, a process model is very often refined, by different business modelers and software architects in distributed environments, in order to reflect changed requirements or changed business rules. At some point, the different resulting process model versions need to be merged in an integrated version. In order to enable comparison and merging, an approach which comprises difference representation as well as a discovery method for differences is needed. Regarding control-flow, such approaches already exist. As the specification of data-flow is also important, an approach for dealing with data-flow differences is also needed. In this paper, we propose a model for representation of data-flow differences as well as a method able\u00a0\u2026", "num_citations": "1\n", "authors": ["1252"]}
{"title": "Modeling Cross-Device Systems with Use Case Diagrams.\n", "abstract": " Information systems often support a variety of different device types like desktop computers, smartphones or tablets. Some can even be used in a cross-device manner, ie, using multiple devices in parallel or being able to switch from one device to another while interacting with the system. Even though there is increasing support to implement such cross-device systems, existing modeling languages only provide limited means to specify them. In this paper, we present an extended form of UML use case diagrams, which allows to properly take the cross-device features of a system into account and serves as a first step towards a model-based development process for cross-device systems.", "num_citations": "1\n", "authors": ["1252"]}
{"title": "Configuration of Specification Language and Matching for Services in On-The-Fly Computing\n", "abstract": " In order to buy and use software services, service requesters have to discover services which satisfy their requirements and are available on service markets. Various approaches introduce service brokers, who serve as intermediaries between requesters and providers [ACKM10]. For the discovery, a broker matches the requesters\u2019 requirements specification to specifications of the provided services. For this, brokers use a matcher that determines the extent, to which a provider\u2019s service complies to the requesters\u2019 requirements. Furthermore, providers and requesters often use different specification languages. Thus, the broker has to translate their specifications into her own language supported by a corresponding matcher. This translation is out of the scope of this report as it can be done automatically based on existing approaches [KLR+ 12].In the market, different brokers compete with each other for customers [CJ03]. We assume that customers prefer a broker who delivers most suitable services fast and with the least possible effort. Thus, in order to succeed in this competition, brokers can distinguish themselves by providing a fast and accurate service discovery with low effort for their customers. Therefore, brokers have to develop their own business strategies, which they adjust to the given market. A main part of this strategy is to find a configuration of a language and a matcher, which is optimal wrt. the service discovery and the customer\u2019s effort. Depending on the broker\u2019s strategy and the market characteristics, different configurations can be optimal because they are subject to multiple trade-offs. For example, a comprehensive specification\u00a0\u2026", "num_citations": "1\n", "authors": ["1252"]}
{"title": "CVSM 2013 Challenge: Recognizing High-level Edit Operations in Evolving Models\n", "abstract": " In Model-Driven Engineering (MDE), models are subject to continuous change and typically exist in many versions during their lifetime. To support an efficient MDE, fully featured development environments are a necessity that in particular must enable the comparison of different versions of models. However, currently available comparison tools operate on low-level, sometimes tool-specific model representations and result in elementary difference representations. The resulting difference representations are often not understandable. Tool users rather prefer differences to be reported in terms of high-level edit operations, eg as offered by modern graphical editors, to present and handle model differences and to analyze the evolution of models. In this paper, we present two particular challenges for the detection of high-level edit operations between model versions in the absence of a change-log.", "num_citations": "1\n", "authors": ["1252"]}