{"title": "Formal proof\u2013the four-color theorem\n", "abstract": " The Tale of a Brainteaser Francis Guthrie certainly did it, when he coined his innocent little coloring puzzle in 1852. He managed to embarrass successively his mathematician brother, his brother\u2019s professor, Augustus de Morgan, and all of de Morgan\u2019s visitors, who couldn\u2019t solve it; the Royal Society, who only realized ten years later that Alfred Kempe\u2019s 1879 solution was wrong; and the three following generations of mathematicians who couldn\u2019t fix it [19]. Even Appel and Haken\u2019s 1976 triumph [2] had a hint of defeat: they\u2019d had a computer do the proof for them! Perhaps the mathematical controversy around the proof died down with their book [3] and with the elegant 1995 revision [13] by Robertson, Saunders, Seymour, and Thomas. However something was still amiss: both proofs combined a textual argument, which could reasonably be checked by inspection, with computer code that could not. Worse, the\u00a0\u2026", "num_citations": "618\n", "authors": ["1878"]}
{"title": "A machine-checked proof of the odd order theorem\n", "abstract": " This paper reports on a six-year collaborative effort that culminated in a complete formalization of a proof of the Feit-Thompson Odd Order Theorem in the Coq proof assistant. The formalized proof is constructive, and relies on nothing but the axioms and rules of the foundational framework implemented by Coq. To support the formalization, we developed a comprehensive set of reusable libraries of formalized mathematics, including results in finite group theory, linear algebra, Galois theory, and the theories of the real and complex algebraic numbers.", "num_citations": "420\n", "authors": ["1878"]}
{"title": "The geometry of optimal lambda reduction\n", "abstract": " Lamping discovered an optimal graph-reduction implementation of the \u03bb-calculus. Simultaneously, Girard invented the geometry of interaction, a mathematical foundation for operational semantics. In this paper, we connect and explain the geometry of interaction and Lamping's graphs. The geometry of interaction provides a suitable semantic basis for explaining and improving Lamping's system. On the other hand, graphs similar to Lamping's provide a concrete representation of the geometry of interaction. Together, they offer a new understanding of computation, as well as ideas for efficient and correct implementations.", "num_citations": "306\n", "authors": ["1878"]}
{"title": "A small scale reflection extension for the Coq system\n", "abstract": " This is the user manual of Ssreflect, a set of extensions to the proof scripting language of the Coq proof assistant. While these extensions were developed to support a particular proof methodology - small-scale reflection - most of them actually are of a quite general nature, improving the functionality of Coq in basic areas such as script layout and structuring, proof context management, and rewriting. Consequently, and in spite of the title of this document, most of the extensions described here should be of interest for all Coq users, whether they embrace small-scale reflection or not.", "num_citations": "282\n", "authors": ["1878"]}
{"title": "A computer-checked proof of the four colour theorem\n", "abstract": " This report gives an account of a successful formalization of the proof of the Four Colour Theorem, which was fully checked by the Coq v7. 3.1 proof assistant [13]. This proof is largely based on the mixed mathematics/computer proof [26] of Robertson et al, but contains original contributions as well. This document is organized as follows: section 1 gives a historical introduction to the problem and positions our work in this setting; section 2 defines more precisely what was proved; section 3 explains the broad outline of the proof; section 4 explains how we exploited the features of the Coq assistant to conduct the proof, and gives a brief description of the tactic shell that we used to write our proof scripts; section 5 is a detailed account of the formal proof (for even more details the actual scripts can be consulted); section 6 is a chronological account of how the formal proof was developed; finally, we draw some general conclusions in section 7.", "num_citations": "212\n", "authors": ["1878"]}
{"title": "Portable, unobtrusive garbage collection for multiprocessor systems\n", "abstract": " We describe and prove the correctness of a new concurrent mark-and-sweep garbage collection algorithm. This algorithm derives from the classical on-the-fly algorithm from Dijkstra et al.[9]. A distinguishing feature of our algorithm is that it supports multiprocessor environments where the registers of running processes are not readily accessible, without imposing any overhead on the elementary operations of loading a register or reading or initializing a field. Furthermore our collector never blocks running mutator processes except possibly on requests for free memory; in particular, updating a field or creating or marking or sweeping a heap object does not involve system-dependent synchronization primitives such as locks. We also provide support for process creation and deletion, and for managing an extensible heap of variable-sized objects.", "num_citations": "207\n", "authors": ["1878"]}
{"title": "Formal proof\n", "abstract": " There remains but one course for the recovery of a sound and healthy condition\u2014namely, that the entire work of the understanding be commenced afresh, and the mind itself be from the very outset not left to take its own course, but guided at every step; and the business be done as if by machinery.", "num_citations": "189\n", "authors": ["1878"]}
{"title": "The four colour theorem: Engineering of a formal proof\n", "abstract": " The 150 year old Four Colour Theorem is the first famous result with a proof that requires large computer calculations. Such proofs are still controversial: It is thought that computer programs cannot be reviewed with mathematical rigor.               To overturn this belief, we have created a fully computer-checked proof of the Four Colour Theorem. Using the Coq proof assistant, we wrote an extended program that specifies both the calculations and their mathematical justification. Only the interface of the program \u2013 the statement of the theorem \u2013 needs to be reviewed. The rest (99.8%) is self-checking: Coq verifies that it strictly follows the rules of logic. Thus, our proof is more rigorous than a traditional one.               Our effort turned out to be more than just an exercise in verification; having to definine rigorously all key concepts provided new mathematical insight into the concept of planarity. Planarity has topological\u00a0\u2026", "num_citations": "181\n", "authors": ["1878"]}
{"title": "Packaging mathematical structures\n", "abstract": " This paper proposes generic design patterns to define and combine algebraic structures, using dependent records, coercions and type inference, inside the Coq system. This alternative to telescopes in particular supports multiple inheritance, maximal sharing of notations and theories, and automated structure inference. Our methodology is robust enough to handle a hierarchy comprising a broad variety of algebraic structures, from types with a choice operator to algebraically closed fields. Interfaces for the structures enjoy the convenience of a classical setting, without requiring any axiom. Finally, we present two applications of our proof techniques: a key lemma for characterising the discrete logarithm, and a matrix decomposition problem.", "num_citations": "172\n", "authors": ["1878"]}
{"title": "An introduction to small scale reflection in Coq\n", "abstract": " This tutorial presents the Ssreflect extension to the Coq system. This extension consists of an extension to the Coq language of script, and of a set of libraries, originating from the formal proof of the Four Color theorem. This tutorial proposes a guided tour in some of the basic libraries distributed in the Ssreflect package. It focuses on the application of the small scale reflection methodology to the formalization of finite objects in intuitionistic type theory.", "num_citations": "162\n", "authors": ["1878"]}
{"title": "Linear logic without boxes\n", "abstract": " Girard's original de nition of proof nets for linear logic involves boxes. The box is the unit for erasing and duplicating fragments of proof nets. It imposes synchronization, limits sharing, and impedes a completely local view of computation. Here we describe an implementation of proof nets without boxes. Proof nets are translated into graphs of the sort used in optimal-calculus implementations; computation is performed by simple graph rewriting. This graph implementation helps in understanding optimal reductions in the-calculus and in the various programming languages inspired by linear logic.", "num_citations": "119\n", "authors": ["1878"]}
{"title": "Canonical big operators\n", "abstract": " In this paper, we present an approach to describe uniformly iterated \u201cbig\u201d operations, like  or max i\u2009\u2208\u2009I                         f(i) and to provide lemmas that encapsulate all the commonly used reasoning steps on these constructs.               We show that these iterated operations can be handled generically using the syntactic notation and canonical structure facilities provided by the Coq system. We then show how these canonical big operations played a crucial enabling role in the study of various parts of linear algebra and multi-dimensional real analysis, as illustrated by the formal proofs of the properties of determinants, of the Cayley-Hamilton theorem and of Kantorovitch\u2019s theorem.", "num_citations": "113\n", "authors": ["1878"]}
{"title": "S\u00e9mantiques et mod\u00e8les d'ex\u00e9cution des langages r\u00e9actifs synchrones: application \u00e0 Esterel\n", "abstract": " Les syst\u00e8mes r\u00e9actifs sont les syst\u00e8mes qui doivent r\u00e9pondre \u00e0 des stimuli r\u00e9p\u00e9t\u00e9s de leur environnement par des actions sur lui. La programmation de ces syst\u00e8mes est naturellement parall\u00e8le; les langages classiques y sont mal adapt\u00e9s, en raison de leur asynchronisme. Dans cette th\u00e8se nous \u00e9tudions la s\u00e9mantique de langages synchrones sp\u00e9cialement con\u00e7us pour cette programmation, et en particulier celle du langage Esterel. Dans ces langages la r\u00e9action d'un programme \u00e0 un stimulus est instantan\u00e9e, tous les calculs le d\u00e9terminant devant s\u2019 effectuer infiniment rapidement. Nous commen\u00e7ons par \u00e9tudier le langage Esterel, dont nous donnons une s\u00e9mantique\" naturelle\" fond\u00e9e sur les histoires d'entr\u00e9es et de sorties des programmes; nous la montrons \u00e9quivalente \u00e0 une s\u00e9mantique comportementale d\u00e9crivant les changements d'\u00e9tat caus\u00e9s par chaque stimulus. Nous d\u00e9finissons ensuite un mod\u00e8le alg\u00e9brique permettant de d\u00e9crire l'ex\u00e9cution des calculs internes \u00e0 une r\u00e9action. Un th\u00e9or\u00e8me d'abstraction exprime l'\u00e9quivalence entre les s\u00e9mantiques op\u00e9rationnelles et comportementales des termes de ce mod\u00e8le, en l'absence de communication. L'ajout de la communication conduit \u00e0 une s\u00e9mantique comportementale simple avec une s\u00e9mantique op\u00e9rationnelle non effective. L'introduction d'une analyse statique du flot de contr\u00f4le dans la s\u00e9mantique op\u00e9rationnelle permet de la rendre effective, et nous montrons que ceci est \u00e9quivalent \u00e0 l'introduction de contraintes de causalit\u00e9 au niveau comportemental. De plus nous montrons que ces contraintes ne modifient pas la s\u00e9mantique des programmes corrects {c'est-\u00e0-dire dont l\u00a0\u2026", "num_citations": "89\n", "authors": ["1878"]}