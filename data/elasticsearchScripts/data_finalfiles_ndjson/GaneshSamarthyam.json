{"title": "Refactoring for Software Design Smells\n", "abstract": " Technical debt is the debt that accrues when developers knowingly or unknowingly make wrong or nonoptimal design decisions. Technical debt is akin to financial debt. Allowing a small debt to occur is acceptable provided it is paid soon enough; not paying the debt for a longer period invites bigger troubles. Similarly, in a software project, technical debt needs to be repaid regularly to avoid its accumulation. Large technical debt significantly degrades the quality of the software system and affects the productivity of the development team. In extreme cases, when the accumulated technical debt becomes so huge that it cannot be paid off anymore, the product has to be abandoned. This chapter emphasizes the importance of the concept of technical debt, the factors that contribute to it, and its impact on software projects.", "num_citations": "29\n", "authors": ["815"]}
{"title": "Focus: An adaptation of a SWEBOK-based curriculum for industry requirements\n", "abstract": " Siemens Corporate Development Center India (CT DC IN) develops software applications for the industry, energy, health-care, and infrastructure & cities sectors of Siemens. These applications are typically critical in nature and require software practitioners who have considerable competency in the area of software engineering. To enhance the competency of engineers, CT DC IN has introduced an internal curriculum titled \u201cFOundation CUrriculum for Software engineers\u201d (FOCUS) which is an adapted version of IEEE's SWEBOK curriculum. The FOCUS program has been used to train more than 500 engineers in the last three years. In this experience report, we describe the motivation for FOCUS, how it was structured to address the specific needs of CT DC IN, and how the FOCUS program was rolled out within the organization. We also provide results obtained from a survey of the FOCUS participants, their\u00a0\u2026", "num_citations": "22\n", "authors": ["815"]}
{"title": "Continual monitoring of code quality\n", "abstract": " CQMM (Code Quality Monitoring Method) is a means for systematically monitoring and improving code level quality of a system during development. It employs goal directed monitoring using quality models and static code analysis tools. In this paper, we present the CQMM method, learnings gathered through pilot studies, and changes needed for its large scale adoption within our organization. This exercise was an important step towards evolving an organization wide common minimum baseline for code-centric quality. Initial results indicate that the process helps in exposing important code-centric issues, besides sensitizing developers to coding practices. We also demonstrate the usefulness of the approach by tracking code level issues on select open source projects.", "num_citations": "18\n", "authors": ["815"]}
{"title": "Understanding test debt\n", "abstract": " Technical debt occurs when teams knowingly or unknowingly make technical decisions in return for short-term gain(s) in their projects. The test dimension of technical debt is known as test technical debt (or test debt). Test debt is an emerging topic and has received considerable interest from software industry in the last few years. This chapter provides an overview of test debt, factors that contribute to test debt, and strategies for repaying test debt. The chapter also discusses how to identify \u201ctest smells\u201d and refactor them for repaying technical debt in industrial projects using numerous examples and case studies. This chapter would be of considerable value to managers and leads working in IT companies as well as researchers working in the area of test debt.", "num_citations": "14\n", "authors": ["815"]}
{"title": "Limitations of Technical Debt Quantification: Do you Rely on these Numbers\n", "abstract": " Participant A: Oh, technical debt\u2026 we already have \u201cXYZ\u201d tool that quantifies the exact amount of technical debt in terms of the effort required to repay it in person hours. It even gives us nice graphs and visualizations. So I don't need to attend this talk!This conversation triggered an interesting question in my mind: By using currently available technical debt tools, is it possible to exactly know how much technical debt does the software has in terms of cost and effort? Is it possible for such a quantification to be accurate and complete in all aspects?", "num_citations": "2\n", "authors": ["815"]}