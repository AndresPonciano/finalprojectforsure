{"title": "An Efficient Performance-Driven Approach for HW/SW Co-Design\n", "abstract": " Nowadays embedded systems are powerful and everywhere. They implement complex functionality relying on a huge set of different hardware and software (HW/SW) architectures. In order to reduce their development effort, HW/SW Co-Design techniques are used during the entire development cycle. These techniques aim at helping designers to define a feasible hardware and software partitioning for the system in such a way that functional and non-functional requirements are fulfilled. In this context Design Space Exploration is a challenging activity since a huge number of different implementation alternatives need to be evaluated.", "num_citations": "10\n", "authors": ["732"]}
{"title": "A Microservice Reference Case Study for Design-Runtime Interaction in MDE.\n", "abstract": " Model-Driven Engineering techniques may achieve major support to the software development of nowadays complex systems when they allow managing relationships between a running system and its design models. These relationships can be exploited for different goals, such as the software evolution due to new functional requirements. In order to address this challenge, researchers need to better understand the nature of the available runtime information and related correspondences as well as how leveraging such knowledge. Typically, to this end, they rely on reference applications.In this paper, we present a reference case study for design-runtime interaction in MDE. It is based on Train Ticket, a microservice-based web application, and its monitoring infrastructure. Also, the case study provides its software modeling artifacts designed in UML, a dataset of monitoring logs, and the definition of design-runtime correspondence as traceability links. We invite researchers to consider this case study as a reference for extending or new contribution to this topic.", "num_citations": "3\n", "authors": ["732"]}
{"title": "A model-driven approach for continuous performance engineering in microservice-based systems\n", "abstract": " Microservices are quite widely impacting on the software industry in recent years. Rapid evolution and continuous deployment represent specific benefits of microservice-based systems, but they may have a significant impact on non-functional properties like performance. Despite the obvious relevance of this property, there is still a lack of systematic approaches that explicitly take into account performance issues in the lifecycle of microservice-based systems.In such a context of evolution and re-deployment, Model-Driven Engineering techniques can provide major support to various software engineering activities, and in particular they can allow managing the relationships between a running system and its architectural model.In this paper, we propose a model-driven integrated approach that exploits traceability relationships between the monitored data of a microservice-based running system and its architectural\u00a0\u2026", "num_citations": "1\n", "authors": ["732"]}
{"title": "On the impact of Performance Antipatterns in multi-objective software model refactoring optimization\n", "abstract": " Software quality estimation is a challenging and time-consuming activity, and models are crucial to face the complexity of such activity on modern software applications. One main challenge is that the improvement of distinctive quality attributes may require contrasting refactoring actions on an application, as for trade-off between performance and reliability. In such cases, multi-objective optimization can provide the designer with a wider view on these trade-offs and, consequently, can lead to identify suitable actions that take into account independent or even competing objectives. In this paper, we present an approach that exploits the NSGA - II multi-objective evolutionary algorithm to search optimal Pareto solution frontiers for software refactoring while considering as objectives: i) performance variation, ii) reliability, iii) amount of performance antipatterns, and iv) architectural distance. The algorithm combines\u00a0\u2026", "num_citations": "1\n", "authors": ["732"]}