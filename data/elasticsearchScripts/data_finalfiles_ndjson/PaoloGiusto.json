{"title": "Understanding and using the controller area network communication protocol: theory and practice\n", "abstract": " This book to offers a hands-on guide to designing, analyzing and debugging a communication infrastructure based on the Controller Area Network (CAN) bus. Although the CAN bus standard is well established and currently used in most automotive systems, as well as avionics, medical systems and other devices, its features are not fully understood by most developers, who tend to misuse the network. This results in lost opportunities for better efficiency and performance. These authors offer a comprehensive range of architectural solutions and domains of analysis. It also provides formal models and analytical results, with thorough discussion of their applicability, so that it serves as an invaluable reference for researchers and students, as well as practicing engineers.", "num_citations": "230\n", "authors": ["1060"]}
{"title": "Reliable estimation of execution time of embedded software\n", "abstract": " Estimates of execution time of embedded software play an important role in function-architecture co-design. This paper describes a technique based upon a statistical approach that improves existing estimation techniques. Our approach provides a degree of reliability in the error of the estimated execution time. We illustrate the technique using both control-oriented and computational-dominated benchmark programs.", "num_citations": "115\n", "authors": ["1060"]}
{"title": "Statistically based estimate of embedded software execution time\n", "abstract": " A statistical approach to estimating software execution times is implemented by preparing a model of a target processing device, correlating the software to be estimated to benchmark programs used in the preparation of the model, and then applying the software to be estimated to the model. The model is developed by determining the actual execution times of the benchmark programs, determining a number of virtual instructions in the benchmark programs and determining a predictor equation that correlates the virtual instructions to the actual execution time. The predictor equation is determined by a linear regression technique that includes a correlation analysis of the virtual instructions, removal of highly correlated instructions, and a combination of stepwise linear regression and multiple linear regression to determine the predictor equation.", "num_citations": "77\n", "authors": ["1060"]}
{"title": "A case study in computer-aided co-design of embedded controllers\n", "abstract": " We present an application of the methodology and of the various software tools embedded in the POLIS co-design system. The application is in the realm of automotive electronics: a shock absorber controller, whose specification comes from an actual product. All aspects of the design process are closely examined, including high level language specification and automatic hardware and software synthesis. We analyze different software implementation styles, compare the results, and outline the future developments of our work.", "num_citations": "66\n", "authors": ["1060"]}
{"title": "Using statistical methods to compute the probability distribution of message response time in controller area network\n", "abstract": " Automotive electrical/electronic (E/E) architectures need to be evaluated and selected based on the estimated performance of the functions deployed on them before the details of these functions are known. End-to-end delays of controls must be estimated using incomplete and aggregate information on the computation and communication load for ECUs and buses. We describe the use of statistical analysis to compute the probability distribution of Controller Area Network (CAN) message response times when only partial information is available about the functionality and architecture of a vehicle. We provide results compared to simulations as well as trace data. These results demonstrate that our statistical inference can be used for predicting the distribution of the response time of a CAN message, once its priority has been assigned, from limited information such as the bus utilization of higher priority messages.", "num_citations": "61\n", "authors": ["1060"]}
{"title": "Scheduling the flexray bus using optimization techniques\n", "abstract": " FlexRay is a new communication protocol for automotive systems, providing support for transmission of periodic messages in static segments and priority-based scheduling of event-triggered messages in dynamic segments. The design of a FlexRay schedule is not an easy task because of protocol constraints and demands for extensibility and flexibility. We study the problem of FlexRay bus scheduling from the perspective of the application designer, interested in optimizing the performance of application related timing metrics or extensibility. We provide solutions for different task scheduling policies on existing industry standards based on a mixed integer linear programming (MILP) framework.", "num_citations": "43\n", "authors": ["1060"]}
{"title": "Synthesis of task and message activation models in real-time distributed automotive systems\n", "abstract": " Modern automotive architectures support the execution of distributed safety- and time-critical functions on a complex networked system with several buses and tens of ECUs. Schedulability theory allows the analysis of the worst case end-to-end latencies and the evaluation of the possible architecture configurations options with respect to timing constraints. The paper presents an optimization framework, based on an ILP formulation of the problem, to select the communication and synchronization model that leverages the trade-offs between the purely periodic and the precedence constrained data-driven activation models to meet the latency and jitter requirements of the application. The authors demonstrate its effectiveness by optimizing a complex automotive architecture", "num_citations": "42\n", "authors": ["1060"]}
{"title": "Automotive virtual integration platforms: why's, what's, and how's\n", "abstract": " In this paper, we present the new concept of virtual integration platform for automotive electronics. The platform provides the basis for a novel methodology in which the integration of sub-systems is performed much earlier in the design cycle. As a result, cost reduction in the final implementation and in the design process can be achieved. In addition, early and repeatable fault analysis can be performed therefore easing the task of system safety proving.", "num_citations": "42\n", "authors": ["1060"]}
{"title": "Synthesis of mixed software-hardware implementations from CFSM specifications\n", "abstract": " Embedded controllers for reactive real-time applications are implemented as mixed softwarehardware systems. In CLJ+ 93], a formal speci cation model called Co-design Finite StateMachine (CFSM) is introduced. In this paper we present a methodology for partitioning and automatic synthesis of software-hardware systems speci ed with CFSMs. CFSM networks are partitioned into software and hardware domains. Interfaces between hardware and/or software partitions are de ned. An implementation of the entire system is automatically generated and optimization techniques are applied to both software and hardware. To reduce the complexity of the design and the representation, library modules can be prede ned and reused. An example from the automotive industry is used to demonstrate the method.", "num_citations": "41\n", "authors": ["1060"]}
{"title": "Optimizing end-to-end latencies by adaptation of the activation events in distributed automotive systems\n", "abstract": " Schedulability theory provides support for the analysis of the worst case latencies in distributed computations when the architecture of the system is known and the communication and synchronization mechanisms have been defined. In the design of complex automotive systems, however, a great benefit of schedulability analysis may come from its use as an aid in the exploration of the software architecture configurations that can best support the target application. We present an optimization algorithm that leverages the trade-offs between the purely periodic and the data-driven activation models to meet the latency requirements of distributed vehicle functions. We demonstrate its effectiveness on a complex automotive architecture", "num_citations": "37\n", "authors": ["1060"]}
{"title": "A universal communication model for an automotive system integration platform\n", "abstract": " In this paper, we present a virtual integration platform based design methodology for distributed automotive systems. The platform, built within the 'Virtual Component Co-Design'' tool (VCC), provides the ability of distributing a given system functionality over an architecture so as to validate different solutions in terms of cost, safety requirements, and real-time constraints. The virtual platform constitutes the foundation for design decisions early in the development phase, therefore enabling decisive and competitive advantages in the development process. This paper focuses on one of the key-enablers of the methodology, the universal communication model (UCM). The UCM is defined at a level of abstraction that allows accurate estimates of the performance including the latencies over the bus network, and good simulation performance. In addition, due to the high level of reusability and parameterization of its\u00a0\u2026", "num_citations": "37\n", "authors": ["1060"]}
{"title": "Optimizations of an application-level protocol for enhanced dependability in FlexRay\n", "abstract": " FlexRay [9] is an automotive standard for high-speed and reliable communication that is being widely deployed for next generation cars. The protocol has powerful error-detection mechanisms, but its error-management scheme forces a corrupted frame to be dropped without any notification to the transmitter. In this paper, we analyze the feasibility of and propose an optimization approach for an application-level acknowledgement and retransmission scheme for which transmission time is allocated on top of an existing schedule. We formulate the problem as a Mixed Integer Linear Program. The optimization is comprised of two stages. The first stage optimizes a fault tolerance metric; the second improves scheduling by minimizing the latencies of the acknowledgement and retransmission messages. We demonstrate the effectiveness of our approach on a case study based on an experimental vehicle designed at\u00a0\u2026", "num_citations": "33\n", "authors": ["1060"]}
{"title": "Rapid-prototyping of embedded systems via reprogrammable devices\n", "abstract": " This paper describes a flexible board-level rapid-prototyping environment for embedded control applications. The environment is based on an APTIX board populated by Xilinx FPGA devices, a 68HC11 emulator, and APTIX programmable interconnect devices. Given a design consisting of logic and of software running on a micro-controller that implement a set of tasks, the prototype is obtained by programming the FPGA devices, the micro-controller emulator and the APTIX devices. This environment being based on programmable devices offers the flexibility to perform engineering changes, the performance needed to validate complex systems and the hardware setup for field tests. The key point in our approach is the use of results of our previous research on software and hardware synthesis as well as of some commercial tools to provide the designer with fast programming data from a high-level\u00a0\u2026", "num_citations": "23\n", "authors": ["1060"]}
{"title": "Softcontract: an assertion-based software development process that enables design-by-contract\n", "abstract": " This paper discusses a model-based design flow for requirements in distributed embedded software development. Such requirements are specified using a language similar to linear temporal logic which allows one to reason about time and sequencing. They consist of assertions which must hold for a design, given some assumptions on its environment. They can be checked both during simulation and, at least for a subset, even on the target. The key contribution of the paper is the extension to the embedded software domain of assertion-based verification, and the automated generation of property-checking code in multiple target languages, from simulation, to prototyping, to final production.", "num_citations": "21\n", "authors": ["1060"]}
{"title": "Statistical analysis of controller area network message response times\n", "abstract": " Automotive electronics architectures need to be evaluated and selected based on the estimated performance of the functions deployed on them before the details of these functions are known. End-to-end delays of controls must be estimated using incomplete and aggregate information on the computation and communication load for ECUs and buses. We describe the use of statistical analysis to compute the probability distribution of controller area network (CAN) message response times when only partial information is available about the functionality and electrical architecture of a vehicle. We provide results on simulation as well as trace data to show that our statistical inference can be used for predicting the distribution of the response time of a CAN message, once its priority has been assigned, from limited information such as the bus utilization of higher priority messages.", "num_citations": "19\n", "authors": ["1060"]}
{"title": "Efficient wire routing and wire sizing for weight minimization of automotive systems\n", "abstract": " As the complexities of automotive systems increase, designing a system is a difficult task that cannot be done manually. In this paper, we focus on wire routing and wire sizing for weight minimization to deal with more and more connections between devices in automotive systems. The wire routing problem is formulated as a minimal Steiner tree problem with capacity constraints, and the location of a Steiner vertex is selected to add a splice which is used to connect more than two wires. We modify the Kou-Markowsky-Berman algorithm to efficiently construct Steiner trees and propose an integer linear programming (ILP) formulation to relocate Steiner vertices and satisfy capacity constraints. The ILP formulation is relaxed to a linear programming (LP) formulation which has the same optimal objective and can be solved more efficiently. Besides wire routing, wire sizing is also performed to satisfy resistance constraints\u00a0\u2026", "num_citations": "17\n", "authors": ["1060"]}
{"title": "Architecture exploration for time-critical and cost-sensitive distributed systems\n", "abstract": " Emerging technologies provide opportunities for the implementation of advanced car features enhancing the safety and the comfort of the driver, but at the same time, the correct implementation of these features imposes new design challenges on electronics, software, and controls designers due to the large number of in-vehicle computers and serial data communications. In this paper, we propose a comprehensive view of methods and tools that support the designers in facing such challenges. We propose an approach for quantitative architecture exploration based on the scoring of the possible alternatives via metrics of interest, and we illustrate some early results with a case study example.", "num_citations": "16\n", "authors": ["1060"]}
{"title": "Using timing analysis for the design of future switched based Ethernet automotive networks\n", "abstract": " In this paper, we focus on modeling and analyzing multi-cast and broadcast traffic latencies on switch-level within an Ethernet- based communication network for automotive applications. The analysis is performed adapting existing worst/best case schedulability analysis concepts, techniques, and methods. Under our modeling assumptions, we obtain safe bounds for both the minimum (lower bound) and maximum (upper bound) latencies. The formal analysis results are validated via simulation to determine the probability distribution of the latencies (including the worst/best case ones). We also show that the bounds can be tightened under some assumptions and we sketch opportunities for future work in this area. Finally, we show how formal analysis can be used to quickly explore tradeoffs in the system configuration which delivers the required performance. All results in this work are obtained on a moderately\u00a0\u2026", "num_citations": "15\n", "authors": ["1060"]}
{"title": "Method and apparatus for improving processing performance of a multi-core processor\n", "abstract": " Managing task execution in a multi-core processor may be achieved by employing a spinlock and a multi-processor priority ceiling protocol. The spinlock may be employed to effect a dynamically enforceable mutual exclusion constraint. The multi-processor priority ceiling protocol may be employed to effect the dynamically enforceable mutual exclusion constraint to synchronize a plurality of tasks executing in the first and second processing cores of the multi-core processor.", "num_citations": "14\n", "authors": ["1060"]}
{"title": "Enabling rapid design exploration through virtual integration and simulation of fault tolerant automotive application\n", "abstract": " Modern automotive applications such as X-by-Wire are implemented over distributed architectures where electronic control units (ECU's) communicate via broadcast buses. In this paper, we present a framework for quick exploration of design alternatives in terms of HW/SW architectures for distributed applications. The exploration is carried out on a virtual integration platform that allows the distribution of embedded software onto ECU's. The framework shortens design turn-around time by supporting semi-automatic communication protocol model configuration (eg frame packaging, redundancy level, etc.), and then by allowing the designer to run fast yet accurate simulations of a virtual prototype of the distributed architecture that includes models of the application software and the bus communication protocols. As a result, design errors can be found earlier in the design process, before the system integration in the car\u00a0\u2026", "num_citations": "14\n", "authors": ["1060"]}
{"title": "An efficient wire routing and wire sizing algorithm for weight minimization of automotive systems\n", "abstract": " As the complexities of automotive systems increase, designing a system is a difficult task that cannot be done manually. In this paper, we propose an algorithm for weight minimization of wires used for connecting electronic devices in a system. The wire routing problem is formulated as a Steiner tree problem with capacity constraints, and the location of a Steiner vertex is selected for adding a splice connecting more than two wires. Besides wire routing, wire sizing is also done to satisfy resistance constraints and minimize the total wiring weight. Experimental results show the effectiveness and efficiency of our algorithm.", "num_citations": "12\n", "authors": ["1060"]}
{"title": "Worst-case time analysis of CAN messages\n", "abstract": " Designers of CAN-based systems are of course interested in being able to predict the time performance of the messages exchanged over the network. The CAN protocol adopts a collision detection and resolution scheme, where the message to be transmitted is chosen according to its identifier. When multiple nodes need to transmit over the bus, the lowest identifier message is selected for transmission. The CAN MAC arbitration protocol encodes the message priority into the identifier field and implements priority-based real-time scheduling of periodic and aperiodic messages. Predictable scheduling of real-time messages on the CAN bus is then made possible by adapting existing real-time scheduling algorithms to the MAC arbitration protocol or by superimposing a higher-level scheduler designed purposely.", "num_citations": "8\n", "authors": ["1060"]}
{"title": "Modeling and analysis of automotive systems: Current approaches and future trends\n", "abstract": " The fierce competition among automotive manufacturers in introducing Advanced Driver Assist Systems (ADAS) and autonomous features has led to the explosive growth of the Electrical/Electronics (E/E) assets, including Software, in today's and future vehicles. The resource demand and quality requirements of these assets has increased consequently. Rigorous methodologies and tools are required for developing the E/E assets to meet the quality demands of these assets. This paper summarizes the current practices used in the industry for managing the development of these assets and discusses the future trends. The summary includes the description of three development strategies that are becoming important and critical, which are Model-driven Feature Development, Product Line Approach and Virtual Development and Integration of E/E architectures.", "num_citations": "7\n", "authors": ["1060"]}
{"title": "Towards a methodology for the quantitative evaluation of automotive architectures\n", "abstract": " Architecture design is a critical stage of the electronics/controls/software (ECS)-based vehicle design flow. Traditional approaches relying on component-level design and analysis are no longer effective as they do not always allow for the quantitative evaluation of properties arising from the composition of subsystems. This paper presents a system level architecture design methodology that is supported by tools and methods for the quantitative evaluation of key metrics of interest related to timing, dependability and cost. An example of its application to a by-wire system case study is presented, and the challenges faced in its application in the context of the actual development process are discussed", "num_citations": "7\n", "authors": ["1060"]}
{"title": "A case study in computer-aided codesign of embedded controllers\n", "abstract": " With our codesign system, POLIS, we have specified and implemented a real-life design: a shock absorber controller. Through this experiment, we have shown the possibility of using such a system to design complex applications and to speed up the design cycle dramatically. All aspects of the design process are closely scrutinized including high level language translation and automatic hardware and software synthesis. We analyze different software implementation styles and draw some conclusions about our design process.< >", "num_citations": "7\n", "authors": ["1060"]}
{"title": "Metrics for Evaluating Electronic Control System Architecture Alternatives\n", "abstract": " Current development processes for automotive Electronic Control System (ECS) architectures have certain limitations in evaluating and comparing different architecture design alternatives. The limitations entail the lack of systematic and quantitative exploration and evaluation approaches that enable objective comparison of architectures in the early phases of the design cycle. In addition, architecture design is a multi-stage process, and entails several stakeholders who typically use their own metrics to evaluate different architecture design alternatives. Hence, there is no comprehensive view of which metrics should be used, and how they should be defined. Finally, there are often conflicting forces pulling the architecture design toward short-term objectives such as immediate cost savings versus more flexible, scalable or reliable solutions. In this paper, we propose the usage of a set of metrics for comparing ECS\u00a0\u2026", "num_citations": "6\n", "authors": ["1060"]}
{"title": "Rapid design exploration of safety-critical distributed automotive applications via virtual integration platforms\n", "abstract": " Modern automotive applications such as Drive-by-Wire are implemented over distributed architectures where electronic control units (ECU\u2019s) communicate via broadcast buses. In this paper, we present the concept of virtual integration platform for automotive applications. The platform provides the basis for early analysis and validation of distributed applications, therefore enhancing the current model based development process techniques that are applied to one ECU at a time. The virtual prototype includes both functional and performance (time) models of the application software, scheduling policies, and the bus communication protocols. As a result, since design errors can be found earlier in the design process before the different sub-systems are integrated in the car, savings in both production and development costs can be achieved. The virtual integration platform concept is supported by an integrated IP\u00a0\u2026", "num_citations": "6\n", "authors": ["1060"]}
{"title": "Rapid prototyping of automotive communication protocols\n", "abstract": " Modern automotive applications, such as X-by-Wire, are implemented over distributed architectures that include several electronic control units (ECUs) communicating via one or more communication protocols, such as CAN (Controller Area Network) and TTP (Time-Triggered Protocol), over network broadcast buses. In these scenarios of increasing complexity, it is paramount for the designer to try different implementations quickly in terms of software distribution and communication protocols, so as to satisfy the requirements of cost, real time and safety. In this paper, we present a novel way of rapidly prototyping communication protocols that are typical of the automotive domain. An implementation of the key enabler of the rapid prototyping framework, the Universal Communication Model (UCM), is described.", "num_citations": "6\n", "authors": ["1060"]}
{"title": "Methods and tools for calculating the flexibility of automotive HW/SW architectures\n", "abstract": " To cope with the increasing number of advanced features (eg, smart-phone integration and side-blind zone alert.) being deployed in vehicles, automotive manufacturers are designing flexible hardware architectures which can accommodate increasing feature content with as fewer as possible hardware changes so as to keep future costs down. In this paper, we propose a formal and quantitative definition of flexibility, a related methodology and a tool flow aimed at maximizing the flexibility of an automotive hardware architecture with respect to the features that are of greater importance to the designer. We define flexibility as the ability of an architecture to accommodate future changes in features with no changes in hardware (no addition/replacement of processors, buses, or memories). We utilize an optimization framework based on mixed integer linear programming (MILP) which computes the flexibility of the\u00a0\u2026", "num_citations": "4\n", "authors": ["1060"]}
{"title": "The CAN 2.0 b standard\n", "abstract": " This chapter introduces version 2.0b of the CAN Standard. This introduction is an excerpt of the main features of the protocol as described in the official Bosch specification document [16]. For more details, the reader should check the free official specification document available on-line, along with the other references provided throughout this chapter.", "num_citations": "4\n", "authors": ["1060"]}
{"title": "Metrics for quantifying and evaluating ability of electronic control system architectures to accommodate changes\n", "abstract": " Recent trends in the automotive industry show growing demands for the introduction of new in-vehicle features (eg, smart-phone integration, adaptive cruise control, etc.) at increasing rates and with reduced time-to-market. New technological developments (eg, in-vehicle Ethernet, multi-core technologies, AUTOSAR standardized software architectures, smart video and radar sensors, etc.) provide opportunities as well as challenges to automotive designers for introducing and implementing new features at lower costs, and with increased safety and security. As a result, the design of Electrical/Electronic (E/E) architectures is becoming increasingly challenging as several hardware resources are needed. In our earlier work, we have provided top-level definitions for three relevant metrics that can be used to evaluate E/E architecture alternatives in the early stages of the design process: flexibility, scalability and\u00a0\u2026", "num_citations": "3\n", "authors": ["1060"]}
{"title": "A Conceptual Data Model for the Architecture Exploration of Automotive Distributed Embedded Architectures\n", "abstract": " As design complexities increase exponentially, automotive designers need integrated tool environments enabling system-level analyses of alternative architectural solutions. Hence, a huge amount of heterogeneous design data must be made available easily and quickly for the analysis. In this paper, we introduce the AETM (architecture exploration tools and methods) data model, a key enabler for an integrated model-based tool environment. The data model encompasses several important aspects of the design of any embedded architecture (not only an automotive one), as it supports design capture at different levels of abstraction (e.g., functional, logical, and physical) and across application domains.", "num_citations": "3\n", "authors": ["1060"]}
{"title": "Interactive presentation: Towards a methodology for the quantitative evaluation of automotive architectures\n", "abstract": " Architecture design is a critical stage of the Electronics/Controls/Software (ECS)-based vehicle design flow. Traditional approaches relying on component-level design and analysis are no longer effective as they do not always allow for the quantitative evaluation of properties arising from the composition of subsystems. This paper presents a system level architecture design methodology that is supported by tools and methods for the quantitative evaluation of key metrics of interest related to timing, dependability and cost. An example of its application to a by-wire system case study is presented, and the challenges faced in its application in the context of the actual development process are discussed.", "num_citations": "3\n", "authors": ["1060"]}
{"title": "How aerospace and transportation design challenges can be addressed from simulation-based virtual prototyping for distributed safety critical automotive applications\n", "abstract": " The reduction of development and product costs for distributed and software dominated safety-critical automotive applications can only be achieved via novel methodologies and tool sets that address fault injection/analysis and integration testing via simulation-based virtual prototyping. In fact, earlier discovery of design errors and initial proof of safety in critical conditions should be addressed earlier using a system virtual prototype, before hardware and software implementations are available. In this paper, we propose a methodology that allows evaluating fault-tolerant system architectures in the presence of errors caused by faults of hardware elements or interferences. We illustrate how the paradigm shift from physical to virtual integration platforms can be applied to Aerospace and Transportation domains effectively.", "num_citations": "2\n", "authors": ["1060"]}
{"title": "POLIS-A design environment for control-dominated embedded systems, version 0.4-User's Manual\n", "abstract": " CiteSeerX \u2014 POLIS - A design environment for control-dominated embedded systems, version CiteSeerX logo Documents: Advanced Search Include Citations Authors: Advanced Search Include Citations Tables: DMCA POLIS - A design environment for control-dominated embedded systems, version 0.4 - User's Manual (1999) Cached Download as a PDF Download Links [ic.eecs.berkeley.edu] Save to List Add to Collection Correct Errors Monitor Changes by Felice Balarin , Massimiliano Chiodo , Daniel Engels , Paolo Giusto , Wilsin Gosti , Harry Hsieh , Attila Jurecska , Marcello Lajolo , Luciano Lavagno , Claudio Passerone , Roberto Passerone , Marco Sgroi , Ellen Sentovich , Kei Suzuki , Bassam Tabbara , Reinhard Hanxleden , Sherman Yee , Alberto Sangiovanni-vincentelli , Ffl Magneti Marelli Citations: 1 - 0 self Summary \u2026", "num_citations": "2\n", "authors": ["1060"]}
{"title": "Method and system for configuring filter objects for a controller area network controller\n", "abstract": " A system and method for configuring a filter object for a controller area network is disclosed. The method includes determining, by a processor, a plurality of message identifiers of messages that are to be captured by a filter object. The method also includes performing factorization of a function that represents the plurality of message identifiers to generate a simplified function. The method also includes configuring at least one filter object based on the generated simplified function.", "num_citations": "1\n", "authors": ["1060"]}
{"title": "Reference Architecture of a CAN-Based System\n", "abstract": " A CAN communication system requires the implementation of a complex protocol stack, from the application-level programming interface (API), down to the hardware implementation of the Medium Access Control (MAC) and Logical Link Control (LLC) layers inside the CAN adapter. Several properties of the communication, including latencies of messages, with possible priority inversions and loss of any type of time predictability, depend on the design choices at all levels including the hardware architecture of the peripheral adapter (e.g., available number of message buffers and their management), the structure of the operating system and middleware layers (e.g., the model of the operations for enqueuing and dequeuing messages in the device driver, OS, and Interaction layer), and the I/O management scheme (e.g., interrupt-based or polling-based) inside the device driver.", "num_citations": "1\n", "authors": ["1060"]}
{"title": "Education panel: Designing the always connected car of the future\n", "abstract": " The automotive industry is introducing novel features, such as seamless vehicle-to-vehicle and vehicle-to-infrastructure connectivity to improve in vehicle driver safety (e.g., forward collision warnings) and comfort (e.g., routing to avoid congestion) while facing stricter government regulations, and shortened time-to-markets. As a result, automotive Electronic Control System (ECS) architectures are becoming increasingly complex. To cope with these challenges and opportunities, the entire automotive supply chain is engaged as follows: automotive OEMs are managing complexity by reusing legacy components and enabling new technologies; tier one suppliers are increasingly up-integrating features on the same computing platform; tier two suppliers are providing multi-core and other powerful technologies; academic institutions are doing research in new analysis, synthesis and optimization methods; and tool\u00a0\u2026", "num_citations": "1\n", "authors": ["1060"]}
{"title": "Using system-level timing analysis for the evaluation and synthesis of automotive architectures\n", "abstract": " Emerging technologies allow the implementation of advanced car features enhancing the safety and the comfort of the driver. These complex functions are distributed among several ECUs, implemented by multiple tasks executed on each processor, and are characterized by non-functional requirements, including timing constraints. The design of the physical architecture and the placement of tasks and messages must be performed in accordance with the constraints and optimizing the performance of the functions. We show how schedulability analysis can be used in the development of complex automotive systems to find the architectures that can best support the target application in a what-if iterative process, and we address the opportunities for the synthesis of architecture configurations. A case study of an experimental vehicle shows the applicability of the approach.", "num_citations": "1\n", "authors": ["1060"]}
{"title": "SoftContract: model-based design of error-checking code and property monitors\n", "abstract": " This paper discusses a model-based design flow for requirements in distributed embedded software development. Such requirements are specified using a language similar to Linear Temporal Logic which allows one to reason about time and sequencing. They consist of assertions which must hold for a design, given some assumptions on its environment. They can be checked both during simulation and, at least for a subset, even on the target. Of course the guarantee of correctness is ensured only as long as the assertion express the complete design intent, and the simulation stimuli cover all possible cases. While this is generally not true, the simulation-based approach is a practical manner to ensure correctness with a good degree of confidence, while avoiding the intricacies of software formal verification. Assertions related to deadline satisfaction can also be checked statically by a schedulability\u00a0\u2026", "num_citations": "1\n", "authors": ["1060"]}
{"title": "Constraint-driven simulation-based automatic task allocation on ecu networks\n", "abstract": " With the increasing number of ECUs in modern automotive applications (70 in high end cars), designers are facing the challenge of managing complex design tasks, such as the allocation of software tasks over a network of ECUs. The allocation may be dictated by different attributes (performance, cost, size, etc.). The task of validating a given allocation can be achieved either via static analysis (eg, for cost, size) and/or dynamic analysis (eg via performance simulation\u2013for timing constraints). This paper brings together two key concepts: algorithmic and optimization techniques to be used during static analysis and virtual integration platforms for simulation-based exploration. The two concepts together provide the pillars for a constraintdriven/simulation-based approach, tailored to optimize the entire ECU network according to a cost function defined by the user.", "num_citations": "1\n", "authors": ["1060"]}
{"title": "Rapid design exploration for safety critical distributed automotive systems.\n", "abstract": " In the past few years the rate of electronics in automobiles has been rapidly increasing - new features are realized by the integrating several function coming from different suppliers and interacting over a distributed architecture. The resulting increased complexity needs to be managed by new design approaches. In this paper, a new seamless methodology that allows the validation of the interaction of a pool of functions over a distributed architecture is presented. This methodology is based upon a new perception of the development process. The current development processes follow the criteria of an electronic control unit (ECU) per actuator. Therefore, parts of the system design are performed before all requirements are completely analyzed. This leads to complex architectures that may not be optimal. By introducing a virtual integration platform into the development process, the design of the system is determined\u00a0\u2026", "num_citations": "1\n", "authors": ["1060"]}
{"title": "Verification\n", "abstract": " Traditionally, verification has been done by reproducing the behavior of the design using physical simulation of a prototype of the design (called prototyping), physical simulation of an approximate implementation (called emulation), or computer simulation of a model, using mathematical techniques to construct the model (called simulation). Physical or virtual measurements are taken to assess the quality of the design.", "num_citations": "1\n", "authors": ["1060"]}
{"title": "Design Examples\n", "abstract": " This chapter describes some design examples that have been used to validate the POLIS design methodology. For each example we discuss the initial specification, problems encountered during the design, and the final results.", "num_citations": "1\n", "authors": ["1060"]}
{"title": "System and method of selecting a computational platform\n", "abstract": " Methods and apparatus are provided for selecting a computational platform. The method includes collecting platform feature data for each of a plurality of existing computational platforms in a particular class of computational platforms. The platform feature data for each of the plurality of existing computational platforms includes a plurality of design parameters and a performance measurement for the computational platform to complete a benchmarking software component. The method further includes training a mathematical model using the collected platform feature data to devise a predictive model for predicting a predicted performance measurement for a computational platform in the particular class of computational platforms when provided with design parameters, predicting, with the predictive model, the predicted performance measurement of a new computational platform that is not available for testing, and\u00a0\u2026", "num_citations": "0\n", "authors": ["1060"]}
{"title": "The Automotive Virtual Verification Ecosystem\n", "abstract": " Jansen et al. 1 define software (SW) ecosystems as... a set of actors, functioning as a unit and interacting with a shared market for software and services, together with the relationships among them. These relationships are frequently underpinned by a common technological platform or market and operate through the exchange of information, resources, and artifacts.In previous work, 2 we proposed to investigate virtual verification in the automotive ecosystem. In this article, we refine our view and focus on the virtual verification ecosystem itself. This virtual verification ecosystem involves suppliers of models and tools, suppliers of hardware (HW) and SW, and users, aiming to leverage the benefits of the technological platform: virtualization and model-driven engineering (MDE). A potential supply network of this ecosystem (based on the SW ecosystem modeling notation3) is shown in Figure S1. It depicts a typical value\u00a0\u2026", "num_citations": "0\n", "authors": ["1060"]}
{"title": "Method and apparatus for cross-execution of binary embedded software\n", "abstract": " A vehicle, control system for the vehicle and method of operating the vehicle. The control system includes a target processor, a binary executable program and an instruction set simulator (ISS). The binary executable program is compiled to run on a legacy processor in order to operate the vehicle. The ISS is configured to run on the target processor and emulate operation of the legacy processor. The binary executable program runs on the target processor via the ISS in order to operate the vehicle.", "num_citations": "0\n", "authors": ["1060"]}
{"title": "The Automotive Virtual Verification Ecosystem: Impediments and Enablers\n", "abstract": " We describe the benefits of, critical impediments to, and crucial enablers for virtual verification. This will provide help for overcoming difficulties and starting a constructive dialogue among ecosystem actors in the automotive industry.", "num_citations": "0\n", "authors": ["1060"]}
{"title": "Guest Editorial: Special Issue on System Level Design of Automotive Electronics/Software\n", "abstract": " The two letters in this special issue cover two critical topics for future vehicles: security layers for smartphone-to-vehicle communication and the design of new applications for vehicle sharing.", "num_citations": "0\n", "authors": ["1060"]}
{"title": "Methods and Tools for End-to-End Latency Analysis and Optimization of a Dual-Processor Control Module\n", "abstract": " Automotive HW/SW architectures are becoming increasingly complex to support the deployment of new safety, comfort, and energy-efficiency features. Such architectures include several software tasks (100+), messages (1000+), computational and communication resources (70+ CPUs, 10+ buses), and (smart) sensors and actuators (20+). To cope with the increasing system complexity at lowest development and product costs, highest safety, and fastest time to market, model-based rapid-prototyping development processes are essential. The processes, coupled with optimization steps aimed at reducing the number of software and hardware resources while satisfying the safety requirements, enable reduction of the system complexity and ease downstream testing/validation efforts. This paper describes a novel model-based design exploration and optimization process for the deployment of a set of software tasks on a dual-processor control module implementing a fail-safe strategy. The fail-safe strategy is realized by a primary and a secondary path, implemented as two separate chains of software tasks executing on two separate processors communication via a SPI (Serial Peripheral Interface) bus. The dual-processor module must satisfy two requirements: first, the latency of the primary path must be bounded to guarantee a safe real time response to changes in the environment; second, the difference between the primary and the secondary path latencies must be bounded to guarantee no data inconsistency occurs (eg, stale data). In this work, we apply a design exploration and optimization process, based upon a synergetic use of different\u00a0\u2026", "num_citations": "0\n", "authors": ["1060"]}
{"title": "Reliability Analysis of CAN\n", "abstract": " In this chapter, we will discuss the reliability of CAN communication systems. Because the subject of reliability may not be familiar to all readers, we first provide some general definitions that are going to be used in the rest of the chapter. Reliability is the ability of a system to perform its specified function for a prescribed time and under stipulated environmental conditions. Reliability, along with availability, safety, and other metrics, is part of the more general concept of dependability.", "num_citations": "0\n", "authors": ["1060"]}
{"title": "Statistical Analysis\n", "abstract": " After worst-case analysis and stochastic analysis, another alternative for the timing evaluation of CAN systems is the use of statistical analysis, possibly in conjunction with simulation, or leveraging data from traces and simulations. The statistical analysis of message response-times can be applied in at least two contexts. The first consists in the analysis of an existing system, using trace data or simulation data to compute the probability of latency values for selected messages. The second is the use of the regression formulas presented in this chapter to predict the probability of message latencies in a CAN system for which only limited information is available, for example, when a hypothetical architecture option is analyzed. In the latter case, the analysis is for a CAN bus as part of a larger system, in which end-to-end response-times need to be estimated to provide a measure of the quality of the architecture\u00a0\u2026", "num_citations": "0\n", "authors": ["1060"]}
{"title": "CAN Tools\n", "abstract": " In this chapter, we are going to describe commercial tools for configuring, analyzing and calibrating a CAN communication system. For the sake of generality, we refer to the high level tool flow shown in Fig. 8.1.", "num_citations": "0\n", "authors": ["1060"]}
{"title": "Analysis of CAN Message Traces\n", "abstract": " The previous chapters discuss different analysis techniques for computing the (worst-case and average-case) response time of CAN messages. These methods are based on a number of assumptions, including the availability of a perfect priority-based queue at each node for the outgoing messages, the availability of a transmit object, TxObject, for each message, the preemptability of the transmit objects, and the ability to immediately (i.e., in zero time) copy the highest priority message from the queue to the TxObjects at the source node as soon as they are available. When these assumptions do not hold, as in many cases of industrial relevance, the response time of messages can be significantly larger than what is predicted.", "num_citations": "0\n", "authors": ["1060"]}
{"title": "Higher-Level Protocols\n", "abstract": " The CAN standard defines the lower two layers of the ISO reference model, and even those with several gaps and omissions. This is often not enough for the practical operation of a network and the devices attached to it. Interchangeability and portability of devices require further standardization of cables and connectors at the physical layer. Transmission of data units longer than 8 bytes needs to be supported by transport-level protocols. Furthermore, several classes of users need to agree on additional higher-level protocol features, including data types, type encoding, and the definition of commonly used parameters and parameter groups. Also, network management features, addressing of multicast groups and definition of multicast addresses may be subject to standardization. It is not surprising, then, that a number of additional standards have been developed to provide solutions with respect to these\u00a0\u2026", "num_citations": "0\n", "authors": ["1060"]}
{"title": "Stochastic Analysis\n", "abstract": " This chapter focuses on the stochastic analysis of the timing performance of CAN messages. Worst-case analysis based on schedulability theory allows to verify the timing correctness of a CAN subsystem. However, as discussed in the previous chapter, CAN messages carry the signal data realizing communication in (possibly complex) end-to-end functionality, in which the flow of data and control may go across several nodes and networks. In this case, timing analysis can be used to compute the contribution of messages to end-to-end latencies and provides the architecture designer with a set of values (one for each end-to-end path) on which he/she can check correctness of an architecture solution.", "num_citations": "0\n", "authors": ["1060"]}
{"title": "Guest Editorial Special Issue on Automotive Embedded Systems\n", "abstract": " The five letters in this special issue on automotive embedded systems cover a spectrum of topics ranging from an innovative concept and environment for the ever-increasing integration of driver and vehicle to novel algorithms and design implementations of automotive embedded systems.", "num_citations": "0\n", "authors": ["1060"]}
{"title": "2009 Index IEEE Transactions on Industrial Informatics Vol. 5\n", "abstract": " Index of authors of papers and participants in discussions and titles of papers and topics discussed.", "num_citations": "0\n", "authors": ["1060"]}
{"title": "Design and Verification of Automotive Networked Systems Using Architectural Simulation\n", "abstract": " A modern car is a complex electromechanical system that includes a networked, distributed electronic architecture, with a large number of Electronic Control Units (ECU's), serial communication buses, and a large distributed embedded software component. In the traditional design flow for automotive electronics, the target architecture, including the binding of embedded software functionalities to ECUs, is defined very early in he design cycle, when scarce information is available to the designer teams, while the integration of the components, and the ECU software integration are performed at the physical level at much later time, when the components are made available by the suppliers. In addition the proof of the safety concept of the application can only be achieved via costly tests and set-ups in labs and tracks. These activities are error prone and mostly manual. Late discovery of faults after car delivery to\u00a0\u2026", "num_citations": "0\n", "authors": ["1060"]}
{"title": "Models of IP's for automotive virtual integration platforms\n", "abstract": " Summary form only given.The concept of virtual integration platform plays a key role in any novel methodology that is trying to address earlier validation of distributed applications in regular and faulty conditions. The methodology must rely upon libraries that model the most important features of the commonly used IP's in the automotive segment such as FlexRay, the emerging bus protocol for safety critical applications supported by BMW, Daimler-Chrysler, Philips, Bosch, and Motorola, OSEK compliant RTOSes and protocol stacks, microprocessors such as Motoro/IBM PowerPC, Infineon 167, NEC v850, Tricore, ST 10, and Janus. We believe that tools must support the easy plug and play of the IP models in a seamless way to the user. For example, it must be possible to run a fast simulation at the token level (frames) to provide insights about the best network protocol configuration within a reasonable accuracy for\u00a0\u2026", "num_citations": "0\n", "authors": ["1060"]}
{"title": "Partitioning, Synthesis\n", "abstract": " The design of hardware/software systems involves modeling, validation, and implementation. This section focuses on system implementation, which is often strongly biased by the modeling style. System imple-mentation involves several (automated) choices, that include hardware/software partitioning and hardware and software synthesis.", "num_citations": "0\n", "authors": ["1060"]}
{"title": "A design environment for control-dominated embedded systems version 0.4\n", "abstract": " The purpose of this document is to informally introduce the codesign environment Polis 1 to a prospective user. It does not cover in detail, however, the supported specication languages 14, nor the underlying computational models 10, nor the implemented analysis and synthesis algorithms 12, 13, 2. Themostrecentsummaryoftheoverall Polis methodologyandalgorithms is presented in 3.The document is organized into sections. We recommend reading all of them even if you are not planning to use some features, because information about some commands is interspersed along the way. TheSection2containsaquickdescription of Polis throughtwosimple introductoryexamples. Section 3 summarizes the Polis design ow. Section 4 introduces a medium size example used to demonstrate the methodology through the rest of the manual. Section 5 shows how the behavior of the system can be specied. Section 6\u00a0\u2026", "num_citations": "0\n", "authors": ["1060"]}
{"title": "Models and Representations\n", "abstract": " This chapter describes the models and specification methods that are used inside the POLIS system, both to specify the complete system, and to perform analysis, synthesis, and optimization. It also contains a brief review of related models reported in the literature.", "num_citations": "0\n", "authors": ["1060"]}
{"title": "Interface Synthesis and the Real-Time Operating System\n", "abstract": " This chapter is devoted to the various issues concerning the hardware/software interface and the coordination between software CFSMs that are mainly implemented by the POLIS RTOS. We begin by describing the general problem of interface synthesis, then we analyze the philosophy and implementation of the RTOS, and show how to configure the RTOS for a specific processor. Finally we discuss the scheduling problem, and outline some new techniques for schedule validation.", "num_citations": "0\n", "authors": ["1060"]}
{"title": "Interfacing to External Hardware and Software\n", "abstract": " When developing an embedded system it is often necessary to use hardware or software blocks that were already designed or used in previous projects, or components that are not designed using POLIS. This is usually the case when a project is partially built on previous work, when some off-the-shelf components are used or when company policy requires using a commercial or in-house real-time kernel that may be preferred also to access features such as file or network I/O.", "num_citations": "0\n", "authors": ["1060"]}
{"title": "HW/SW Co-Design for Embedded Systems\n", "abstract": " HW/SW Co-Design for Embedded Systems Page 1 \u00a9 ASV et al. 1996 HW/SW Co-Design for Embedded Systems L. Lavagno Politecnico di Torino, Italy Cadence Berkeley Labs, CA P. Giusto, A. Jurecska Magneti Marelli, Torino, Italy H. Hsieh, A. Sangiovanni-Vincentelli University of California, Berkeley, CA K. Suzuki Hitachi Res. Lab. , Tokio, Japan M. Chiodo Alta Group, Sunnyvale, CA F. Balarin, E. Sentovich Cadence Berkeley Labs, CA Page 2 \u00a9 ASV et al. 1996 Outline q Reactive Real-Time Embedded Systems q Specification Models and Languages x Data Flow x Extended Finite State Machines q Proposed Design Methodology x System Specification x Validation x System Partitioning x Software, Hardware and Interface Synthesis x Real-time Operating System and Scheduling q Summary Page 3 \u00a9 ASV et al. 1996 Embedded Systems q An embedded system x uses a computer to perform some function, but x is \u2026", "num_citations": "0\n", "authors": ["1060"]}
{"title": "Synthesis of Mixed Software-Hardware Implementations From CFSM\n", "abstract": " Embedded controller for reactive real-time applications are implemented as mixed software- hardware systems. In [CGH+ 93], a formal specification model called Co-design Finite State Machine (CFSM) is introduced. In this paper we present a methodology for partitioning and automatic synthesis of software-hardware systems specified with CFSMs, CFSM networks are partitioned into software ad hardware domains. Interfaces between hardware and/or software partitions are defined. An implementation of the entire system is automatically generated and optimization techniques are applied to both software and hardware. To reduce the complexity of the design and the representation, library modules can be predefined and reused. An example from the automotive industry is used to demonstrate the method.", "num_citations": "0\n", "authors": ["1060"]}
{"title": "Embedded Software Forum Committee\n", "abstract": " Embedded Software Forum Committee IEEE.org Help Cart Jobs Board Create Account Toggle navigation IEEE Computer Society Digital Library Jobs Tech News Resource Center Press Room Browse By Date Advertising About Us IEEE IEEE Computer Society IEEE Computer Society Digital Library My Subscriptions Magazines Journals Conference Proceedings Institutional Subscriptions IEEE IEEE Computer Society More Jobs Tech News Resource Center Press Room Browse By Date Advertising About Us Cart All Advanced Search Conference Cover Image Download 1.Home 2.Proceedings 3.date 2003 Embedded Software Forum Committee 2003, pp. x, vol. 3 DOI Bookmark: 10.1109/DATE.2003.10220 Keywords Authors About Us Advertising Resource Center Jobs Board Corporate Programs Help Contact Press Room Browse By Date Privacy Accessibility Statement IEEE Nondiscrimination Policy \u00a9 2020 IEEE \u2026", "num_citations": "0\n", "authors": ["1060"]}
{"title": "SPECIAL ISSUE ON AUTOMOTIVE EMBEDDED SYSTEMS\n", "abstract": " Table of contents Page 1 JUNE 2010 VOLUME 2 NUMBER 2 ESLMAP (ISSN 1943-0663) SPECIAL ISSUE ON AUTOMOTIVE EMBEDDED SYSTEMS GUEST EDITORIAL SpecialIssueonAutomotiveEmbeddedSystems................................................................................ .................................. M. Di Natale, A. Ghosal, P. Giusto, A. Sangiovanni-Vincentelli, H. Zeng, and S. Seshia 21 SPECIAL ISSUE LETTERS HierarchicalAdditiveHoughTransformforLaneDetection.................................................................... . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . RK Satzoda, S. Sathyanarayana, T. Srikanthan, and S. Sathyanarayana 23 A Video Elaboration System for Image Deinterlacing and Processing in Race Cars . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .............................................. G. Danese, M. Giachero, F. Leporati, A. Majani, N. Nazzicari, and C. Virgili 27 MPC-On-Chip: An Embedded GPC Coprocessor for Automotive \u2026", "num_citations": "0\n", "authors": ["1060"]}
{"title": "Comments on \u201cT\u2013S Fuzzy-Model-Based Robust H1 Design for Networked Control Systems With Uncertainties\u201d.............\n", "abstract": " Table of contents Page 1 NOVEMBER 2009 VOLUME 5 NUMBER 4 ITIICH (ISSN 1551-3203) SPECIAL SECTION ON IN-VEHICLE EMBEDDED SYSTEMS EDITORIAL 2009\u2014TheYearofGrowth................................................................................................R.Zurawski 369 Introducing Associate Editor Weng Khuen Ho . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ............................................. 371 Guest Editorial: Special Section on In-Vehicle Embedded Systems . . . . . . . . . . . . . . . . . . . . . . . ......................... F.Simonot-Lion 372 SPECIAL ISSUE PAPERS A Synchronization Protocol for Temporal Isolation of Software Components in Vehicular Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......................................................................................... T. Nolte, I. Shin, M. Behnam, and M. Sj\u00f6din 375 StochasticAnalysisofCAN-BasedReal-TimeAutomotiveSystems ................................................................ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \u2026", "num_citations": "0\n", "authors": ["1060"]}
{"title": "2013 Index IEEE Embedded Systems Letters Vol. 5\n", "abstract": " This index covers all technical items - papers, correspondence, reviews, etc. - that appeared in this periodical during the year, and items from previous years that were commented upon or corrected in this year. Departments and other items may also be covered if they have been judged to have archival value. The Author Index contains the primary entry for each item, listed under the first author's name. The primary entry includes the co-authors' names, the title of the paper or other item, and its location, specified by the publication abbreviation, year, month, and inclusive pagination. The Subject Index contains entries describing the item under all appropriate subject headings, plus the first author's name, the publication abbreviation, month, and year, and inclusive pages. Note that the item title is found only under the primary entry in the Author Index.", "num_citations": "0\n", "authors": ["1060"]}
{"title": "Fahmy, SA Fanucci, L.\n", "abstract": " 2010 List of Reviewers Page 1 IEEE EMBEDDED SYSTEMS LETTERS, VOL. 2, NO. 4, DECEMBER 2010 131 2010 List of Reviewers IEEE EMBEDDED SYSTEMS LETTERS depends upon the extensive reviews by a large number of volunteers. This is a work that is largely out of sight from most readers, though as editors, we have often argued about the ability to include attributed or unattributed reviews for the depth and clarity they bring to the peer review process. While such a change to print publication content will have to wait for discussion another day, here we take a moment to recognize our community of reviewers whose work is absolutely crucial to the quality of publications in IEEE ESL. As of the end of 2010, there were 478 reviewers registered for the LETTERS. Of these, the following 210 individuals were assigned papers who completed the review process. Frequently, each individual review is rated by the \u2026", "num_citations": "0\n", "authors": ["1060"]}
{"title": "Impediments and Enablers for the Automotive Virtual Verification Ecosystem\n", "abstract": " Virtual verification promises measurable gains in productivity of automotive systems development, especially if supported by shared modeling of ECUs (Electronic Control Unit) and their components across the automotive supply chain, and throughout the software development process, long before ECUs and components become available as silicon. Yet, bootstrapping a technological platform and critical relationships in an ecosystem for shared modeling and virtual verification has proven difficult within the automotive industry. By describing benefits, critical impediments, and crucial enablers, we provide help for overcoming such difficulties and for starting a constructive dialogue across ecosystem actors.", "num_citations": "0\n", "authors": ["1060"]}
{"title": "A Formal Methodology for Hardware/Software\n", "abstract": " Our methodology for control-dominated embedded reactive systems is based on an implementation-independent representation, Codesign Finite State Machines (CFSMs). This representation allows us to preserve semantical correctness throughout the design process, because CFSMs assume unbounded, non-zero reaction delays, that correspond both to hardware and software behavior. CFSMs can be generated from a variety of specification languages, such as Esterel, StateCharts, VHDL, Verilog. Partitioning is user-driven, while our codesign environment performs automatically all other synthesis tasks. We derive hardware directly from CFSMs, assuming single-cycle reaction delays (but pipelining is also allowed by the model semantics). We synthesize software using an intermediate representation, Software Graphs, that allows better optimization and tighter control over implementation costs than general\u00a0\u2026", "num_citations": "0\n", "authors": ["1060"]}
{"title": "Optimizing end-to-end latencies by adaptation of the activation events in distributed automotive systems\n", "abstract": " Schedulability theory provides support for the analysis of the worst case latencies in distributed computations when the architecture of the system is known and the communication and synchronization mechanisms have been defined. In the design of complex automotive systems, however, a great benefit of schedulability analysis may come from its use as an aid in the exploration of the software architecture configurations that can best support the target application. We present an optimization algorithm that leverages the trade-offs between the purely periodic and the data-driven activation models to meet the latency requirements of distributed vehicle functions. We demonstrate its effectiveness on a complex automotive architecture.", "num_citations": "0\n", "authors": ["1060"]}
{"title": "SPECIAL SECTION ON AUTOMOTIVE EMBEDDED SYSTEMS AND SOFTWARE\n", "abstract": " Table of contents Page 1 NOVEMBER 2015 VOLUME 34 NUMBER 11 ITCSDI (ISSN 0278-0070) SPECIAL SECTION ON AUTOMOTIVE EMBEDDED SYSTEMS AND SOFTWARE GUEST EDITORIAL Special Section on Automotive Embedded Systems and Software . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . S. Chakraborty and S. Ramesh 1701 SPECIAL SECTION PAPERS Mining Requirements From Closed-Loop Control Models . . . . . . . . . . . . . . . . . . X. Jin, A. Donz\u00e9, JV Deshmukh, and SA Seshia 1704 Timely Error Detection for Effective Recovery in Light-Lockstep Automotive Systems . . . . . . . . . . . . .C. Hernandez and J. Abella 1718 Efficient Wire Routing and Wire Sizing for Weight Minimization of Automotive Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ........................................... C.-W. Lin, L. Rao, P. Giusto, J. D\u2019Ambrosio, and AL Sangiovanni-Vincentelli 1730 Online Algorithms for Automotive Idling Reduction With \u2026", "num_citations": "0\n", "authors": ["1060"]}