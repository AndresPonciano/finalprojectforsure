{"title": "A Quantification Framework for Software Safety in the Requirements Phase: Application to Nuclear Power Plants\n", "abstract": " With the increasing dependence on digital instrumentation and control (I&C) systems in nuclear power plants, software has become a significant determinant of system safety assurance. To expand the use of digital technology in the nuclear industry, systematic methods are required for quantifying the safety of software-based I&C systems in safety critical applications. A software safety quantification model limited to the requirements phase is built in this paper based on the causal mechanisms that challenge safety. A preliminary mathematical method was developed to assess the number of requirements faults and their sub-types. A case study is conducted on a function of a reactor protection system to verify the validity of the quantification model.", "num_citations": "3\n", "authors": ["2050"]}
{"title": "Automated Software Testing\n", "abstract": " Automated software testing is a new trend in software engineering. It is a technology that allows the completion of test procedures with little or no human interaction from the initial test design to the final test execution. This technology benefits the testing process by increasing its efficiency and repeatability, reducing human error, and increasing the depth at which the analysis of the results is performed. In practice, model-based testing is a common methodology used to automate test procedures; it records information of interest to the test participants by utilizing a series of models to describe the system under test, the test requirements for verification and validation, application context, and other relevant knowledge. Building the models for testing requires cooperation between various activities such as modeling language selection, operational profile development, etc. Based on the generated models, the test cases can be carried out automatically to satisfy predefined test criteria such as statement coverage, branch coverage, functionality coverage, etc. Due to the complexity of software systems, the testing process would be impossible to complete because of the vast number of generated test cases. This problem is solved by reducing the number of test cases to an acceptable level through dedicated optimization algorithms. Test cases will execute on a testbed or a test environment which is capable of parsing test scripts, and collecting and reasoning about test results. In this chapter, we will detail the crucial phases of model-based automatic software testing and discuss existing challenges and solutions.", "num_citations": "2\n", "authors": ["2050"]}
{"title": "A Method for Merging Experts' Cause-Effect Knowledge in Software Dependability\n", "abstract": " Software dependability engineering is an interdisciplinary area built on numerous concepts with complex interrelations. Understanding the relations between various concepts and integrating such conceptual knowledge is fundamental for educational, research and industrial purposes. This paper proposes a method to merge experts' conceptual knowledge represented in the form of Causal Mechanism Graphs (CMG). A case study was conducted to apply the method on 14 causal mechanism graphs obtained from 11 domain experts. The obtained consensus knowledge was then validated and evolved based on another 24 experts' opinions. The results demonstrate the main causal mechanisms that influence software dependability attributes, i.e. software aspect of reliability, safety, security, availability and maintainability. The application shows that the CMG merging method has the advantage of explicitly\u00a0\u2026", "num_citations": "2\n", "authors": ["2050"]}
{"title": "Extension of Mutation Testing for the Requirements and Design Faults\n", "abstract": " Mutation Testing is a fault\u2013based software testing technique that is considered to be the most efficient in detecting faults. It focuses on the software code level and follows a set of rules which are called mutation operators to systematically seed faults into the source code. Each seeded fault results is a new version of the software, which is called a mutant. Mutation testing promises to be effective in identifying adequate test data which can be used to find faults in the source code. However, traditional mutation testing is not geared towards the detection of requirements and design faults. To cover the full spectrum of possible faults, the mutation framework has been extended from the code level to the requirements and design level. Twenty-nine defects that appear in requirements and design documents were identified to define appropriate mutants. Then corresponding mutation operators that model the defects were developed. For each mutation operator, the strategy to generate a mutant and the evaluation of the number of possible mutants were defined. Existing code level cost reduction techniques were tailored for requirements and design mutation operators that result in a large number of mutants. With the extended mutation testing framework, the full spectrum of possible faults will be tested and identified to ensure the safety and functionality of the software.", "num_citations": "2\n", "authors": ["2050"]}
{"title": "Importance Ranking of Software Dependability Attributes in the Nuclear Industry\n", "abstract": " With the current transition from analog to digital instrumentation and control systems in nuclear power plants, the number and variety of software-based systems has significantly increased. Due to the sophisticated nature and the increasing complexity of software, a significant challenge faced by the nuclear industry is the trust one can place in software-based systems once they have been developed. The trust placed in software is typically termed software dependability, a qualifier which encompasses different attributes such as software reliability, safety, security, availability and maintainability. It is recognized that these attributes relate to each other in different ways under various scenarios. The detailed dependencies between software dependability attributes can be found in a previous study. With limited time and budget resources, which dependability attribute should be given the highest priority when certifying software-based systems in the nuclear industry is a fundamental question that needs to be answered. This paper addresses this problem using stakeholders' opinion elicitation. A comprehensive questionnaire was designed to elicit the goals that should be fulfilled by the nuclear industry and to collect the relative importance of the various dependability attributes for each goal. We then used the Analytical Hierarchy Process (AHP) to analyze the data and obtained more\u00bb", "num_citations": "2\n", "authors": ["2050"]}
{"title": "Effects Assessment for Requirements Faults of Safety Critical Software in Nuclear Industry\n", "abstract": " In a context where software has been pervasive in safety critical applications, trust in software safety is challenged by software complexity and lack of systematic methods to assess the effects of remaining faults. To expand the use of digital technology in the nuclear industry, systematic methods are required to assess the effects of remaining faults for software-based Instrumentation & Control (I& C) systems in safety critical applications. In this paper, the effects of the remaining requirements faults are assessed using a probability density function (PDF) of their hazard rates. A hazard-based effect analysis (HEA) method is developed to obtain the probability distribution of the hazard rates of a remaining requirements fault. The HEA method is applied to a Reactor Protection System (RPS) in the case study. The probability density functions for the introduced faults, detected faults and remaining faults in the requirements\u00a0\u2026", "num_citations": "1\n", "authors": ["2050"]}