{"title": "PuLSE: a methodology to develop software product lines\n", "abstract": " Software product lines have recently been introduced as one of the most promising advances for efficient software development. Yet upon close examination, there are few guidelines or methodologies available to develop and deploy product lines beyond existing domain engineering approaches. The latter have had mixed success within commercial enterprises because of their deployment complexity, lack of customizability, and especially their misplaced focus, that is on domains as opposed to products.To tackle these problems we developed the PuLSETM (&oduct Line software Engineering) methodology for the purpose of enabling the conception and deployment of software product lines within a large variety of enterprise contexts. This is achieved via product-centric focus throughout the phases of PuLSETM, customizability of its components, incremental introduction capability, maturity scale for structured\u00a0\u2026", "num_citations": "627\n", "authors": ["1313"]}
{"title": "Dynamic software product lines\n", "abstract": " The Software Engineering Institute (SEI) defines an SPL as a set of software-intensive systems that share a common, managed set of features satisfying the specific needs of a particular market segment or mission. A fundamental principle of SPLs is variability management, which involves separating the product line into three parts - common components, parts common to some but not all products, and individual products with their own specific requirements - and managing these throughout development. Using SPLs seeks to maximize reusable variation and eliminate wasteful generic development of components used only once. Although traditional SPL engineering recognizes that variation points are bound at different stages of development, and possibly also at runtime, it typically binds variation points before delivery of the software. In contrast, DSPL engineers typically aren't concerned with pre-runtime\u00a0\u2026", "num_citations": "517\n", "authors": ["1313"]}
{"title": "Calculating ROI for software product lines\n", "abstract": " Product line engineering has become an important and widely used approach for efficiently developing portfolios of software products. The idea is to develop a set of products as a single, coherent development task from a core asset base (sometimes called a platform), a collection of artifacts specifically designed for use across a portfolio. This approach produces order-of-magnitude economic improvements compared to one-at-a-time software system development. Because the product line approach isn't limited to specific technical properties of the planned software but rather focuses on economic characteristics, high return on investment has become the anthem of the approach's protagonists. Our software product line cost model can calculate the costs and benefits (and hence the ROI) that we can expect to accrue from various product line development situations. It's also straightforward and intuitive.", "num_citations": "241\n", "authors": ["1313"]}
{"title": "The economic impact of product line adoption and evolution\n", "abstract": " An organization faces many challenging decisions when transitioning to product line development: What is the best way to adopt a product line approach? How can we avoid disrupting regular product development? Once adopted, how should we evolve the product line? The article discusses how to optimize a product line's economic benefits by considering the adoption context and using product line scoping techniques.", "num_citations": "228\n", "authors": ["1313"]}
{"title": "A comprehensive product line scoping approach and its validation\n", "abstract": " Product Line Engineering is a recent approach to software development that specifically aims at exploiting commonalities and systematic variabilities among functionally overlapping systems in terms of large scale reuse. Taking full advantage of this potential requires adequate planning and management of the reuse approach as otherwise huge economic benefits will be missed due to an inappropriate alignment of the reuse infrastructure. Key in product line planning is the scoping activity, which aims at focussing the reuse investment where it pays. Scoping actually happens on several levels in the process: during the domain analysis step (analysis of product line requirements) a focusing needs to happen just like during the decision of what to implement for reuse. The latter decision has also important ramifications for the development of an appropriate reference architecture as it provides the reusability\u00a0\u2026", "num_citations": "197\n", "authors": ["1313"]}
{"title": "A systematic approach to derive the scope of software product lines\n", "abstract": " Product line scoping is a critical activity because it elicits the common realms upon which the different products of a product line can be optimally engineered with respect to economies of scope. This, in turn, upper bounds the overall economic benefits that can be accrued from product line based development. Inherently, product line scoping is difficult because of the complexity of the factors that must be taken into account. Many are not known a priori. Traditional scoping approaches (from domain engineering) have focused on the notion of application domains. However, domains proved difficult to optimally scope and engineer from an enterprise standpoint because a domain captures extraneous elements that are of no interest to an enterprise which must focus on particular products, whether existing, under development, or anticipated. Hence, the domain view provides a flawed economic basis for making a\u00a0\u2026", "num_citations": "193\n", "authors": ["1313"]}
{"title": "Building dynamic software product lines\n", "abstract": " Our world becomes increasingly complex and rapidly changing. This is not only a burden for people, but for software, too. Systems increasingly need to be capable to run continuously under adverse conditions (harsh environments, partial failures of subsystems, changing user needs, etc.). Often, they need to run unattended without interruption. Telecommunication systems and space systems are only rather extreme examples of this trend. More mundane applications like your smartphone, which ideally adapts its overall system behavior to energy levels, quality of network connection, etc. are also current challenges.As a result of this type of challenges, we saw the advent of many different approaches to develop systems that are capable of adapting to changing needs, like self-adapting systems, agent-based systems, autonomous computing, emergent systems, bio-inspired systems, etc. While all these approaches share a fundamental theme: flexible adaptation of software to the needs, they also exhibit significant differences in terms of the range of adaptations supported, as well as the guarantees that can be expected for the various adapted systems.", "num_citations": "143\n", "authors": ["1313"]}
{"title": "Applying product line concepts in small and medium-sized companies\n", "abstract": " Small and medium-sized enterprises work under heavy constraints: They need to be very flexible and fast in their reaction to customer requests, thus limiting their possibility for long-term planning. In a partially publicly funded project, the authors have started to apply their Product Line Software Engineering method developed at Fraunhofer IESE, in six small and medium-sized companies addressing six different domains. The article presents first experience and lessons learned from 24 months of project work; including first results within the companies.", "num_citations": "113\n", "authors": ["1313"]}
{"title": "A formal approach to technical debt decision making\n", "abstract": " The notion of technical debt attracts significant attention, especially in the context of reconciling architecture and agile development. However, most work on technical debt is still largely informal and if it provides a formalization it is often ad-hoc. In this paper, we provide a detailed, formal analysis of decision making on technical debt in development. Using this formalization, we show that optimal decision making is not effectively computable in real-world situations and provide several well-defined approximations that allow to handle the problem nevertheless in practical situations. Combining these approximations in a single method leads to a light-weight approach that can be effectively applied in iterative software development, including agile approaches.", "num_citations": "63\n", "authors": ["1313"]}
{"title": "Guidelines on the aesthetic quality of UML class diagrams\n", "abstract": " In the past, formatting guidelines have proved to be a successful method to improve the readability of source code. With the increasing success of visual specification languages such as UML for model-driven software engineering visual guidelines are needed to standardize the presentation and the exchange of modeling diagrams with respect to human communication, understandability and readability. In this article, we introduce a new and encompassing taxonomy of visual guidelines capturing the aesthetic quality of UML class diagrams. We propose these guidelines as a framework to improve the aesthetic quality and thus the understandability of UML class diagrams. To validate this claim, we describe in detail a controlled experiment carried out as a pilot study to gather preliminary insights on the effects of some of the guideline rules on the understandability of UML class diagrams.", "num_citations": "60\n", "authors": ["1313"]}
{"title": "A systematic analysis of textual variability modeling languages\n", "abstract": " Industrial variability models tend to grow in size and complexity due to ever-increasing functionality and complexity of software systems. Some authors report on variability models specifying several thousands of variabilities. However, traditional variability modeling approaches do not seem to scale adequately to cope with size and complexity of such models. Recently, textual variability modeling languages have been advocated as one scalable solution.", "num_citations": "59\n", "authors": ["1313"]}
{"title": "Product management for software product lines: an unsolved problem?\n", "abstract": " comprises all the tasks mentioned previously, but seen in light of the interplay between the technical view of a product line (common technical platform) and the marketing view of a product line (products targeting a similar market, not necessarily technically related)[5]. More specifically, the common architecture and assets make product management for SPLs different and more complicated: the traditional (marketing-oriented) view of product management does not take into account how software is produced. As long as products are developed on a single-system basis, this is acceptable. But because products are interrelated in a product line, the technical perspective must be included. Therefore, product management for SPLs should not be mainly a marketing function but instead must treat technical and market-oriented input equally and simultaneously.If this interrelation is adequately considered, this can strongly\u00a0\u2026", "num_citations": "46\n", "authors": ["1313"]}
{"title": "A cost model for software product lines\n", "abstract": " In this paper we present a first-order cost model that describes the costs associated with developing products in a product line organization. The model addresses a number of issues that we present as a set of scenarios. The goal of this work is to develop models of varying granularity that support a manager\u2019s decision-making needs at a variety of levels. The basis of these models is the relationships among the artifacts of the product line.", "num_citations": "46\n", "authors": ["1313"]}
{"title": "Metrics for analyzing variability and its implementation in software product lines: A systematic literature review\n", "abstract": " Context: Software Product Line (SPL) development requires at least concepts for variability implementation and variability modeling for deriving products from a product line. These variability implementation concepts are not required for the development of single systems and, thus, are not considered in traditional software engineering. Metrics are well established in traditional software engineering, but existing metrics are typically not applicable to SPLs as they do not address variability management. Over time, various specialized product line metrics have been described in literature, but no systematic description of these metrics and their characteristics is currently available.Objective: This paper describes and analyzes variability-aware metrics, designed for the needs of software product lines. More precisely we restrict the scope of our study explicitly to metrics designed for variability models, code artifacts, and\u00a0\u2026", "num_citations": "44\n", "authors": ["1313"]}
{"title": "An initial model of product line economics\n", "abstract": " In this paper we describe an initial model of product line economics, which aims at filling exactly this gap. The model integrates characteristics of the software process with aspects of the market, where the later are used for valuation. We present the model in three layers, each adding a layer of issues that are taken into account to the previous one. This layering mirrors the levels of complexity in existing models of reuse economics.", "num_citations": "42\n", "authors": ["1313"]}
{"title": "Variability modeling for distributed development\u2013a comparison with established practice\n", "abstract": " The variability model is a central artifact in product line engineering. Existing approaches typically treat this as a single centralized artifact which describes the configuration of other artifacts. This approach is very problematic in distributed development as a monolithic variability model requires significant coordination among the involved development teams. This holds in particular if multiple independent organizations are involved.               At this point very little work exists that explicitly supports variability modeling in a distributed setting. In this paper we address the question how existing, real-world, large-scale projects deal with this problem as a source of inspiration on how to deal with this in variability management.", "num_citations": "41\n", "authors": ["1313"]}
{"title": "Flexible resource monitoring of Java programs\n", "abstract": " Monitoring resource consumptions is fundamental in software engineering, e.g., in validation of quality requirements, performance engineering, or adaptive software systems. However, resource monitoring does not come for free as it typically leads to overhead in the observed program. Minimizing this overhead and increasing the reliability of the monitored data is a major goal in realizing resource monitoring tools. Typically, this is achieved by limiting capabilities, e.g., supported resources, granularity of the monitoring focus, or runtime access to results. Thus, in practice often several approaches must be combined to obtain relevant information.We describe SPASS-meter, a novel resource monitoring approach for Java and Android Apps, which combines these conflicting capabilities with low overhead. SPASS-meter supports a large set of resources, flexible configuration of the monitoring scope even for user-defined\u00a0\u2026", "num_citations": "38\n", "authors": ["1313"]}
{"title": "Collaborative creativity in requirements engineering: Analysis and practical advice\n", "abstract": " Requirements engineering (RE) often entails interdisciplinary groups of people working together to find novel and valuable solutions to a complex design problem. In such situations RE requires creativity in a form where interactions among stakeholders are particularly important: collaborative creativity. However, few studies have explicitly concentrated on understanding collaborative creativity in RE, resulting in limited advice for practitioners on how to support this aspect of RE. This paper provides a framework of factors characterising collaborative creative processes in RE. These factors enable a systematic investigation of the collaboratively creative nature of RE. They can potentially guide practitioners when facilitating RE efforts, and also provide researchers with ideas on where to focus when developing methods and tools for RE.", "num_citations": "37\n", "authors": ["1313"]}
{"title": "Selecting creativity techniques for innovative requirements engineering\n", "abstract": " While the traditional focus of requirements engineering was mainly on the systematic, reliable and adequate translation of the customers intentions into requirements documentation, it became recently increasingly accepted that requirements engineering, especially for innovative and novel products, is probably more adequately described as a process of joint discovery of requirements that can be supported by creativity techniques. However, so far little work exists on how to systematically select techniques as a basis for requirements engineering. As part of the IdSpace Project, which focuses on collaborative product innovation, we are currently investigating this area. This paper provides a brief overview of our work in this domain.", "num_citations": "34\n", "authors": ["1313"]}
{"title": "Mapping the design-space of textual variability modeling languages: a refined analysis\n", "abstract": " Variability modeling is a major part of modern product line engineering. Graphical or table-based approaches to variability modeling are focused around abstract models and specialized tools to interact with these models. However, more recently textual variability modeling languages, comparable to some extent to programming languages, were introduced. We consider the recent trend in product line engineering towards textual variability modeling languages as a phenomenon, which deserves deeper analysis. In this article, we report on the results and approach of a literature survey combined with an expert study. In the literature survey, we identified 11 languages, which enable the textual specification of product line variability and which are sufficiently described for an in-depth analysis. We provide a classification scheme, useful to describe the range of capabilities of such languages. Initially, we\u00a0\u2026", "num_citations": "33\n", "authors": ["1313"]}
{"title": "Requirements management for product lines: extending professional tools\n", "abstract": " The key idea of software product lines is the integrated development of a set of products, exploiting commonalities and variabilities among the products to achieve high levels of reuse. The commercial potential of this approach has already been demonstrated in numerous case studies. However, while requirements management tools are already widespread, the range of professional tool support for product line development is still very poor. In this paper we analyze the question whether and how existing requirement management tools can be seamlessly extended to product line development. We present a general approach, which has been prototyped based on the DOORS requirements management tool and leads to the REMAP-tool extension", "num_citations": "33\n", "authors": ["1313"]}
{"title": "Successful software product line development in a small organization\n", "abstract": " This report details the experience of a small company, Market Maker Software AG of Kaiserslautern, Germany, as they adopted and used the paradigm of software product lines to help their business grow successfully into a new market area. While software product lines are often associated with large, traditional software organizations, the experience of Market Maker and other small companies like it shows that software product lines represent an ideal development concept for companies of all sizes. This case study reports on the history of the company, how it came to adopt product lines as its prominent development strategy, the role of the key individuals involved, and how they met and overcame various technical challenges. The report concludes with a section analyzing the Market Maker approach.", "num_citations": "31\n", "authors": ["1313"]}
{"title": "Making AI systems more creative: the IPC-model\n", "abstract": " In this article, a model of information processing in human creativity, called the IPC-model, is presented. This model has been developed based on a review of psychological studies and models. Using this model as a baseline deficiencies of current AI systems are identified and several approaches for providing them with a higher level of creativity are proposed. A discussion of the range of applicability of these approaches and their implications for the overall system behaviour is provided.", "num_citations": "30\n", "authors": ["1313"]}
{"title": "A requirements-based taxonomy of software product line evolution\n", "abstract": " Software product lines are, by their very nature, complex software systems. Due to the interconnectedness of the various products in the product line any form of evolution becomes significantly more complex than in a single system situation. So far most work on product line evolution has focused on specific approaches to supporting special cases of the evolution problem. In this paper, we take a different approach and provide a broad taxonomy of requirements-driven evolution in software product lines. This serves as a basis for the identification of requirements on evolution support.", "num_citations": "27\n", "authors": ["1313"]}
{"title": "Model-based implementation of meta-variability constructs: A case study using aspects\n", "abstract": " abstract In this paper, we introduce the concept of metavariability, ie, variability with respect to basic variability attributes like binding time or constraints. While the main focus of this paper is on the introduction of the concept, we will also illustrate the concept by providing a case study. The case study will feature a simple implementation environment based on aspect-oriented programming and will include an example that will exhibit some key characteristics of the envisioned production process.", "num_citations": "27\n", "authors": ["1313"]}
{"title": "PuLSE-BEAT\u2014a decision support tool for scoping product lines\n", "abstract": " Determining the scope of a product line is a core activity in product line development, as it has a major impact on the economic results of the project. Only recently an approach was proposed that allows to base this decision explicitly on a detailed analysis of the relevant business goals [2]. As the approach requires gathering and evaluating a lot of data, tool support becomes mandatory. In this paper, we describe the tool PuLSE-BEAT, which was specifically developed to address this need.", "num_citations": "27\n", "authors": ["1313"]}
{"title": "Formalizing distributed evolution of variability in information system ecosystems\n", "abstract": " The open variability of software product line ecosystems allows customers and third party organizations to create extensions to a system which may refine the variability model. In this paper we will describe an approach to evolution support, which was developed in the context of one specific company, HIS GmbH. However, the approach is much more generic than this. In particular, it is based on the formalization of modifications to configuration values and constraints on both the model and the data in the context of the evolution of multi-level configurations. Our approach supports the identification of inconsistencies in evolution.", "num_citations": "25\n", "authors": ["1313"]}
{"title": "Variability issues in the evolution of information system ecosystems\n", "abstract": " In a software ecosystem with open variability customers create their own products based on a reuse infrastructure provided by a development company. While an open approach has many benefits, it brings along a number of specific issues, especially related to evolution. In this problem statement we discuss some of the issues that arise in merging local variabilities with evolved versions of the reuse infrastructure of the development organization. In our discussion we focus on information systems, inspired by the situation of a specific company.", "num_citations": "25\n", "authors": ["1313"]}
{"title": "From feature models to decision models and back again an analysis based on formal transformations\n", "abstract": " In Software Product Line Engineering, variability modeling plays a crucial rule. Over the years, a couple of different modeling paradigms with a plethora of different approaches have been proposed. However, only little attention was spent to compare these concepts. In this paper, we compare the capabilities and expressiveness of basic feature modeling with basic decision modeling.", "num_citations": "24\n", "authors": ["1313"]}
{"title": "Analysing the Kconfig semantics and its analysis tools\n", "abstract": " The Linux kernel is often used as a real world case study to demonstrate novel Software Product Line Engineering research methods. An important point in this is often the analysis of the Kconfig semantics. However, we detected that the semantics of Kconfig is rather unclear and has many special cases, which are not documented in its short specification. We performed a systematic analysis to uncover the correct behaviour of Kconfig and present the results, which are necessary for applying semantically correct analyses. Further, we analyse existing analysis tools of the research community whether they are aware of the correct semantics of Kconfig. These analyses can be used for improving existing analysis tools as well as decision support for selecting an appropriate tool for a specific analysis. In summary we contribute to a better understanding of Kconfig in the research community to improve the validity of\u00a0\u2026", "num_citations": "23\n", "authors": ["1313"]}
{"title": "Next-generation mobile computing\n", "abstract": " This issue of IEEE Software discusses where the mobile computing has brought us today and where it could be taking us in the future. It provides a glimpse into the near future of mobile computing by focusing on proximate software challenges coupled with promising techniques, infrastructure, and research from academia, government, and industry. The first Web extra at http://youtu.be/iLnNHwp-H8E is a video demonstration of the Group Autonomy for Mobile Systems (GAMS) project, which is an extension of a research project called Self-governing Mobile Adhocs with Sensors and Handhelds (SMASH) that investigated human-in-the-loop autonomy at Carnegie Mellon University. The project created Android interfaces to a drone swarm that tried to autonomously search for survivors in a disaster scenario using the Parrot AR.Drone and custom GPS and thermal sensors. The second Web extra at http://youtu.be\u00a0\u2026", "num_citations": "23\n", "authors": ["1313"]}
{"title": "An assessment approach to analyzing benefits and risks of product lines\n", "abstract": " Software Product Lines is still a new field within software reuse that aims at large-scale, systematic reuse. Huge benefits regarding the reduction of time-to-markets, reduction of effort, and quality improvement have been reported as a result of adopting a product line approach. Since a product line program involves major investments, considerable risks are associated with it. Thus, it is important to evaluate at the start of a product line project, i.e., before the major investments are performed, its potential benefits and risks. In this paper we describe an approach that allows to identify the benefits and risks in a systematic manner, thus enabling the early development of risk-avoiding measures. As opposed to other techniques our approach supports the identification of subdomains that are particular appropriate for systematic reuse and by means of the detailed evaluation enables trade-off decisions on where to invest for\u00a0\u2026", "num_citations": "23\n", "authors": ["1313"]}
{"title": "Developing long-term stable product line architectures\n", "abstract": " Product lines are usually built for the long term in order to repay the initial investment. While long-term stable software systems are already hard, if they are developed individually, it is even harder for complete product lines. At the time a new product line is created, the details of future product line characteristics are typically not known, no matter how well and detailed scoping and planning is done. Thus, any product line needs to evolve and adapt over time to incorporate new customer requirements as well as new technology constraints.", "num_citations": "22\n", "authors": ["1313"]}
{"title": "EASy-producer: product line development for variant-rich ecosystems\n", "abstract": " Development of software product lines requires tool support, eg, to define variability models, to check variability models for consistency and to derive the artifacts for a specific product. Further capabilities are required when product lines are combined to software ecosystems, ie, management and development of distributed product lines across multiple different organizations.", "num_citations": "21\n", "authors": ["1313"]}
{"title": "A heuristic approach for supporting product innovation in requirements engineering: a controlled experiment\n", "abstract": " [Context and motivation] While requirements engineering earlier focused on gathering requirements, it has been recognized today that creativity and innovation are required as a basis for novel products. [Question/problem] We described earlier an approach to support creativity in requirements engineering. Here, we focus on a thorough validation of the approach. [Principal ideas/results] Our approach uses semantic-based technologies to derive new idea triggers. Here, we show an evaluation of this approach. We find that the approach provides better results than other existing creativity techniques like random triggers. [Contribution] The paper provides evidence for creativity enhancement using our approach. It also shows how a controlled experiment to analyze creativity in requirements engineering can be performed.", "num_citations": "21\n", "authors": ["1313"]}
{"title": "Customizing the PuLSE product line approach to the demands of an organization\n", "abstract": " It is well-known that software processes need to be adapted to the specifics of the organization, the application domain, and the development techniques of the environments in which they are used. This is particularly important for reuse processes as they impact the whole software life-cycle and the reuse of artifacts creates additional relationships among multiple process instances (projects). Nevertheless the support for tailoring existing reuse approaches is at best weak. As a consequence of this realization we made customization support for the method a first rate objective while developing the Product Line Software Engineering method (PuLSETM).             The technology used for customization is called PulSE Baselining and Customization (PuLSE-BC). This approach relies on an explicit characterization of the environment and the explicit connection of these characteristics to customizable properties of a\u00a0\u2026", "num_citations": "21\n", "authors": ["1313"]}
{"title": "A Collection of Software Engineering Challenges for Big Data System Development\n", "abstract": " In recent years, the development of systems for processing and analyzing large amounts of data (so-called Big Data) has become an important sub-discipline of software engineering. However, to date there exits no comprehensive summary of the specific idiosyncrasies and challenges that the development of Big Data systems imposes on software engineers. With this paper, we aim to provide a first step towards filling this gap based on our collective experience from industry and academic projects as well as from consulting and initial literature reviews. The main contribution of our work is a concise summary of 26 challenges in engineering Big Data systems, collected and consolidated by means of a systematic identification process. The aim is to make practitioners more aware of common challenges and to offer researchers a solid baseline for identifying novel software engineering research directions.", "num_citations": "20\n", "authors": ["1313"]}
{"title": "Challenges and solutions in global requirements engineering\u2013A literature survey\n", "abstract": " Requirements engineering is a core part of the software engineering lifecycle with tremendous leverage on software development success. It becomes particularly difficult in the context of global software engineering due to the need to coordinate many different stakeholders in a distributed setting. In this paper we survey some main results in global requirements engineering. We will address both the development of systems with internationally distributed customers as well as the situation of globally distributed development.", "num_citations": "20\n", "authors": ["1313"]}
{"title": "Variability Support for Variability-Rich Software Ecosystems\n", "abstract": " Lately, software ecosystems have generated a lot of attention as they are very important to modern software industry. Over the course of several research projects, we addressed the problem of variability-rich software ecosystems and their relation to software product lines in our research group. This paper summarizes some of the problems we identified and describes some solutions we created both on a conceptual level and implemented in a prototype tool environment.", "num_citations": "20\n", "authors": ["1313"]}
{"title": "A quantitative model of the value of architecture in product line adoption\n", "abstract": " Product line adoption is a key issue in product line development, as the right adoption approach is central to the overall success of product line de velopment. Thus, this is a strongly discussed area of product line engineering. While so far, guidelines and experiences on the best approach to product line adoption have been presented, no detailed quantitative model was provided.               In this paper we present a quantitative model of the product line adoption problem. From this model we deduce general guidelines for product line adoption, particularly highlighting the role of the architecture in the cost-effective adoption of a product line.", "num_citations": "20\n", "authors": ["1313"]}
{"title": "An economic perspective on product line software development\n", "abstract": " In this paper, we discuss the view that planning software development\u2014and particularly software reuse\u2014should be based not on standardized criteria, but on those criteria that are particularly relevant to the environment for which the planning is done. We also describe how this tailoring of the decisionmaking process is performed in PuLSE-Eco, an approach for scoping software product lines developed at the Fraunhofer IESE.", "num_citations": "20\n", "authors": ["1313"]}
{"title": "A study on creativity in requirements engineering\n", "abstract": " The first step of requirements engineering is always: deciding what to build. While it may seem trivial, it is sometimes the hardest step in the whole project. In this report, we illustrate some experiences with a miniature creativity session that focused on the what-to-build question. The very limited time frame allowed at the same time very detailed controlling of the overall results. Thus, we can provide here quantitative results on the success of the workshop.", "num_citations": "19\n", "authors": ["1313"]}
{"title": "Cloud-based software product lines\n", "abstract": " The traditional focus of Product Line Engineering (PIE) is on the customization of whole software solutions. So far, the combination of cloud computing with PLE techniques has hardly been discussed. In this paper, we discuss different approaches to cloud computing and their relation to product line technologies. We also describe both, specific opportunities and drawbacks, of these approaches.", "num_citations": "18\n", "authors": ["1313"]}
{"title": "A comprehensive analysis of UML tools, their capabilities and their compliance\n", "abstract": " abstract Im letzten Jahrzehnt hat sich die Unified Modeling Language (UML) als Modellierungssprache f\u00fcr den praktischen Einsatz im Software Engineering weitgehend durchgesetzt. Aufgrund der Komplexit\u00e4t der UML Spezifikation ist es allerdings f\u00fcr ein einzelnes Werkzeug sehr schwierig, die gesamte Bandbreite der UML Modellierungselemente getreu der UML Spezifikationen umzusetzen. Werkzeugrealisierungen unterscheiden sich daher ma\u00dfgeblich anhand der von ihnen unterst\u00fctzten Teile der UML Spezifikation. Die Entscheidung einer Entwicklungsorganisation f\u00fcr ein konkretes Modellierungswerkzeug ist bedeutsam f\u00fcr das ganze Unternehmen. Im Regelfall zieht eine derartige Entscheidung empfindliche Kosten nach sich, zB f\u00fcr das Training der Mitarbeiter. Lizenzkosten stellen dabei oft nur einen geringen Anteil der tats\u00e4chlichen Kosten f\u00fcr ein Werkzeug dar. Folglich sollte eine Werkzeugauswahl mit\u00a0\u2026", "num_citations": "18\n", "authors": ["1313"]}
{"title": "The product line mapping approach to defining and structuring product portfolios\n", "abstract": " A key activity in product line development is to define and structure the product portfolio which shall be the basis for product line development. We present an approach that aims at supporting this activity. This approach also provides a conceptual structuring of the product line in terms of the features and technical domains that are relevant to it. This structure then provides a basis for the planning of the actual product line development and for architecture definition. We also discuss the validation of our approach in the context of some case studies.", "num_citations": "18\n", "authors": ["1313"]}
{"title": "Using IVML to model the topology of big data processing pipelines\n", "abstract": " Creating product lines of Big Data stream processing applications introduces a number of novel challenges to variability modeling. In this paper, we discuss these challenges and demonstrate how advanced variability modeling capabilities can be used to directly model the topology of processing pipelines as well as their variability. We also show how such processing pipelines can be modeled, configured and validated using the Integrated Variability Modeling Language (IVML).", "num_citations": "17\n", "authors": ["1313"]}
{"title": "A Comprehensive Survey of UML Compliance in Current Modelling Tools\n", "abstract": " The Unified Modeling Language (UML) specification is widely adopted in software engineering. When tools do not fully implement the UML specification, the user might be locked-in to a modeling tool, e.g. when exported models are not compatible among tools or tools implement different subsets of the UML. These compatibility problems also have significant impact on the effectiveness of model-driven development approaches. Compliance, as defined by the UML standard, is intended to characterize tools and to highlight such problems. In this paper we describe an approach to asses the UML compliance levels of modeling tools. Using UML definition of compliance, we could only identify 4 out of 68 tools as being acceptable.", "num_citations": "17\n", "authors": ["1313"]}
{"title": "Reconciling marketed and engineered software product lines\n", "abstract": " Basically all companies today go beyond the development of single products and offer set(s) of similar and related products. In marketing, one such set is often called a product line. Nevertheless, still today most products are not yet engineered as product lines, i.e., they are not yet derived from a single platform. In this paper, we explore the relation of these two forms of product lines. It is shown that under certain circumstances engineered and marketed software product line subsume different products. This paper shows how these two perspectives differ and why a difference in products between these perspectives may be appropriate from a company perspective. Finally, it is argued that activities currently subsumed under product management and scoping should be closely coordinated, allowing companies to optimize their product portfolios since decision-making is facilitated", "num_citations": "17\n", "authors": ["1313"]}
{"title": "An analysis of variability modeling concepts: Expressiveness vs. analyzability\n", "abstract": " Variability modeling is a core activity of software product line engineering. Over the years, many different approaches to variability modeling have been proposed. Typically, the individual approaches have been designed without a detailed justification on why certain modeling concepts should be used. This yields a rather unfunded selection of modeling approaches in practice, e.g., selecting approaches that provide higher modeling concepts than actually needed, but less analyses capabilities than required. Thus, we propose that the focus of an analysis should not be to determine the best modeling language, but rather to provide a characterization on when to use what kind of approach. In particular, the selection of one approach for a specific situation should be driven from the required modeling concepts (expressiveness) and the required analyzability.               In this paper, we propose a classification of\u00a0\u2026", "num_citations": "16\n", "authors": ["1313"]}
{"title": "An Empirical Study of Configuration Mismatches in Linux\n", "abstract": " Ideally the variability of a product line is represented completely and correctly by its variability model. However, in practice additional variability is often represented on the level of the build system or in the code. Such a situation may lead to inconsistencies, where the actually realized variability does not fully correspond to the one described by the variability model. In this paper we focus on configuration mismatches, ie, cases where the effective variability differs from the variability as it is represented by the variability model. While previous research has already shown that these situations still exist even today in well-analyzed product lines like Linux, so far it was unclear under what circumstances such issues occur in reality. In particular, it is open what types of configuration mismatches occur and how severe they are. Here, our contribution is to close this gap by presenting a detailed manual analysis of 80\u00a0\u2026", "num_citations": "15\n", "authors": ["1313"]}
{"title": "Supporting heterogeneous compositional multi software product lines\n", "abstract": " Software Product Line Engineering is inherently complex. This complexity increases further if multiple product line infrastructures are composed to yield the final products, an approach sometimes referred to as Multi Software Product Lines (MSPL). In this paper, we present an approach that targets this development scenario. The approach we present here aims at a lightweight, scalable, and practical approach to variability management for multi software product lines.", "num_citations": "14\n", "authors": ["1313"]}
{"title": "Integrated Cost- and Investment Models for Product Family Development\n", "abstract": " abstract Product family development focusses on systematically developing reusable assets over time that are used in later projects to achieve benefits in terms of development effort, time-to-market reduction, and quality improvement. Consequently, the costs from the initial development for reuse are more than compensated by the derived benefits. The initial costs of development for reuse thus take the role of an investment in later product line benefits [CN01]. Therefore it is key to successful product family engineering to identify costs and benefits that are associated with product family development. This provides the basis for the subsequent optimization of the investment. In this deliverable we focus on the relationship between costs and benefits and show the implications and constraints on the associated investment decisions. We present a basic economic model, which provides the necessary background for\u00a0\u2026", "num_citations": "14\n", "authors": ["1313"]}
{"title": "KernelHaven: an experimentation workbench for analyzing software product lines\n", "abstract": " Systematic exploration of hypotheses is a major part of any empirical research. In software engineering, we often produce unique tools for experiments and evaluate them independently on different data sets. In this paper, we present KernelHaven as an experimentation workbench supporting a significant number of experiments in the domain of static product line analysis and verification. It addresses the need for extracting information from a variety of artifacts in this domain by means of an open plug-in infrastructure. Available plug-ins encapsulate existing tools, which can now be combined efficiently to yield new analyses. As an experimentation workbench, it provides configuration-based definitions of experiments, their documentation, and technical services, like parallelization and caching. Hence, researchers can abstract from technical details and focus on the algorithmic core of their research problem.", "num_citations": "13\n", "authors": ["1313"]}
{"title": "Systematic management of software product lines\n", "abstract": " Software product lines can effectively facilitate large\u2010scale reuse and can thus bring about order of magnitude improvements in terms of time to market (TTM), costs, and quality. This comes at the price of a more complex development environment in which many interdependencies are created through shared generic assets. Owing to this complexity, the specific strategy chosen for product line development can be expected to have a strong impact on the benefits that can be gained from product line development. This is systematically studied in this work, as we vary different strategies and apply them to various forms of products lines. On the basis of the analysis of the performed simulations, we were able to determine optimal, heuristic strategies to the integrated management of the product line. As a result of the analysis, we identify strategies and guidelines that can be employed by practitioners in order to improve\u00a0\u2026", "num_citations": "13\n", "authors": ["1313"]}
{"title": "Introducing a software modeling concept in a medium-sized company\n", "abstract": " In this paper, we describe, using the Quality Improvement Paradigm (QIP), how an improvement project aimed at improving the modeling and documentation approach of a medium-sized company (MSuD) was conducted. We discuss the new modeling approach which may serve for other companies as a template for deriving their own adapted approach. Further, we illustrate our insights from this project that can help in future technology transfer projects. A major characteristic of this project was that it was embedded in a long-term consulting relationship.", "num_citations": "13\n", "authors": ["1313"]}
{"title": "Towards an efficient construction of test sets for deciding ground reducibility\n", "abstract": " We propose a method for constructing test sets for deciding whether a term is ground reducible w.r.t. an arbitrary, many-sorted, unconditional term rewriting system. Our approach is based on a suitable characterization of such test sets using a certain notion of transnormality. It generates very small test sets and shows some promise to be an important step towards a practicable implementation.", "num_citations": "13\n", "authors": ["1313"]}
{"title": "Experiences with the Model-based Generation of Big Data Pipelines\n", "abstract": " Developing Big Data applications implies a lot of schematic or complex structural tasks, which can easily lead to implementation errors and incorrect analysis results. In this paper, we present a model-based approach that supports the automatic generation of code to handle these repetitive tasks, enabling data engineers to focus on the functional aspects without being distracted by technical issues. In order to identify a solution, we analyzed different Big Data stream-processing frameworks, extracted a common graph-based model for Big Data streaming applications and de- veloped a tool to graphically design and generate such applications in a model-based fashion (in this work for Apache Storm). Here, we discuss the concepts of the approach, the tooling and, in particular, experiences with the approach based on feedback of our partners.", "num_citations": "12\n", "authors": ["1313"]}
{"title": "The Product Line Engineering Approach\n", "abstract": " Software increasingly becomes the key asset for modern, competitive products. No matter how simple or complex, no matter how large or small, there is hardly any modern product without software. Thus, competitiveness in software development has increasingly become a concern for companies of all sizes and in all markets. As a result, product line engineering has gained increasing attention over recent years. While many introductions of a software product line engineering approach are driven by cost and time to market concerns, it supports other business goals as well. We will discuss the consequences of such an approach on business performance in detail in Sect. 1. 1. In Sect. 1.2 we will discuss the historical basis of software product line engineering and compare it with other efforts for software reuse. Section 1.3 gives an overview of the most fundamental concepts of product line engineering. These are\u00a0\u2026", "num_citations": "12\n", "authors": ["1313"]}
{"title": "Implementation issues in product line scoping\n", "abstract": " Often product line engineering is treated similar to the waterfall model in traditional software engineering, i.e., the different phases (scoping, analysis, architecting, implementation) are treated as if they could be clearly separated and would follow each other in an ordered fashion. However, in practice strong interactions between the individual phases become apparent. In particular, how implementation is done has a strong impact on economic aspects of the project and thus how to adequately plan it. Hence, assessing these relationships adequately in the beginning has a strong impact on performing a product line project right.               In this paper we present a framework that helps in exactly this task. It captures on an abstract level the relationships between scoping information and implementation aspects and thus allows to provide rough guidance on implementation aspects of the project. We will also\u00a0\u2026", "num_citations": "12\n", "authors": ["1313"]}
{"title": "Variability in service-oriented systems: an analysis of existing approaches\n", "abstract": " In service-oriented systems services can be easily reused and shared without modification. However, there are business situations where a variation of services is needed to meet the requirements of a specific customer or context. Variation of software systems has been well researched in product line engineering in terms of Variability Implementation Techniques (VITs). While most VITs focus on the customization of traditional software systems, several VITs have been developed for service-oriented systems. In this paper, we discuss the problem of service customization and provide an overview of different VITs for service variability. For this purpose, we will define four dimensions to describe, characterize and analyze existing VITs: the technical core idea, the object of variation, the forms of variation, and the binding time.", "num_citations": "11\n", "authors": ["1313"]}
{"title": "Creativity support at the workplace\n", "abstract": " In this paper, we discuss creativity as a form of learning from the perspective of idea generation in the creative process. We analyze forms of creativity and present the statement-based creativity techniques. Based on these concepts a tool prototype IdeaTrigger is presented and verified. It shows the advantages for innovative activity, especially in collaborative environment.", "num_citations": "11\n", "authors": ["1313"]}
{"title": "Identifying the intensity of variability changes in software product line evolution\n", "abstract": " The evolution of a Software Product Line (SPL) typically affects a variety of artifact types. The intensity (the frequency and the amount) in which developers change variability information in these different types of artifacts is currently unknown. In this paper, we present a fine-grained approach for the variability-centric extraction and analysis of changes to code, build, and variability model artifacts introduced by commits. This approach complements existing work that is typically based on a feature-perspective and, thus, abstracts from this level of detail. Further, it provides a detailed understanding of the intensity of changes affecting variability information in these types of artifacts. We apply our approach to the Linux kernel revealing that changes to variability information occur infrequently and only affect small parts of the analyzed artifacts. Further, we outline how these results may improve certain analysis and\u00a0\u2026", "num_citations": "10\n", "authors": ["1313"]}
{"title": "KernelHaven: an open infrastructure for product line analysis\n", "abstract": " KernelHaven is an open infrastructure for Software Product Line (SPL) analysis. It is intended both as a production-quality analysis tool set as well as a research support tool, eg, to support researchers in systematically exploring research hypothesis. For flexibility and ease of experimentation KernelHaven components are plug-ins for extracting certain information from SPL artifacts and processing this information, eg, to check the correctness and consistency of variability information or to apply metrics. A configuration-based setup along with automatic documentation functionality allows different experiments and supports their easy reproduction.", "num_citations": "10\n", "authors": ["1313"]}
{"title": "EASy-Producer: from product lines to variability-rich software ecosystems\n", "abstract": " The EASy-Producer product line environment is a novel open-source tool that supports the lightweight engineering of software product lines and variability-rich software ecosystems. It has been applied in several industrial case studies, showing its practical applicability both from a stability and a capability point of view. The tool set integrates both, interactive configuration capabilities and a DSL-based approach to variability modeling, configuration definition and product derivation. The goal of the tutorial is to provide the participants with an overview of the tool. However, the main focus will be on a brief introduction of the DSLs. After participating in the tutorial, the participants will understand the capabilities of the toolset and will have a basic practical understanding of how to use it to define software ecosystems and derive products from them.", "num_citations": "10\n", "authors": ["1313"]}
{"title": "The feature pack approach: systematically managing implementations in software ecosystems\n", "abstract": " In an information system ecosystem customers integrate features, which are independently developed and evolved by multiple organizations. These features need to work together although there is little to no coordination among developer organizations.", "num_citations": "10\n", "authors": ["1313"]}
{"title": "Domain-Oriented Customization of Service Platforms: Combining Product Line Engineering and Service-Oriented Computing.\n", "abstract": " Service-Oriented Computing (SoC) has been established as an important paradigm over the last decade. A particularly important part in a service-oriented solution is the serviceoriented platform. This provides an environment and infrastructure for a number of serviceoriented applications. An important challenge in complex application areas is the need to customize these platforms to the demands of a specific context. Product line technologies can support this by providing the concept of variability management to SoC. In this paper, we will provide a reference model for (domain-specific) service platforms and describe different approaches that provide customization possibilities in a service platform context. The complexity of handling the customization of large-scale service platforms in an integrated manner will be addressed by introducing the concept of production strategies for variability implementation techniques.", "num_citations": "10\n", "authors": ["1313"]}
{"title": "Creative problem solving and automated discovery: an analysis of psychological and AI research\n", "abstract": " Since creativity is the ability to produce something novel and unexpected, it has always fascinated people. Consequently, efforts have been made in AI to invent creative computer programs. At the same time much effort was spent in psychology to analyze the foundations of human creative behaviour. However, until now efforts in AI to produce creative programs have been largely independent from psychological research. In this study, we try to combine both fields of research. First, we give a short summary of the main results of psychological research on creativity. Based on these results we propose a model of the creative process that emphasizes its information processing aspects. Then we describe AI approaches to the implementation of the various components of this model and contrast them with the results of psychological research. As a result we will not only reveal weaknesses of current AI systems hindering them in achieving creativity, but we will also make plausible suggestions - based on psychological research - for overcoming these weaknesses.", "num_citations": "10\n", "authors": ["1313"]}
{"title": "Enactment of adaptation in data stream processing with latency implications\u2014A systematic literature review\n", "abstract": " ContextStream processing is a popular paradigm to continuously process huge amounts of data. Runtime adaptation plays a significant role in supporting the optimization of data processing tasks. In recent years runtime adaptation has received significant interest in scientific literature. However, so far no categorization of the enactment approaches for runtime adaptation in stream processing has been established.ObjectiveThis paper identifies and characterizes different approaches towards the enactment of runtime adaptation in stream processing with a main focus on latency as quality dimension.MethodWe performed a systematic literature review (SLR) targeting five main research questions. An automated search, resulting in 244 papers, was conducted. 75 papers published between 2006 and 2018 were finally included. From the selected papers, we extracted data like processing problems, adaptation goals\u00a0\u2026", "num_citations": "8\n", "authors": ["1313"]}
{"title": "From Reproducibility Problems to Improvements: A journey\n", "abstract": " Reproducibility and repeatability are key properties of benchmarks. However, achieving reproducibility can be difficult. We faced this while applying the microbenchmark MooBench [5] to the resource monitoring framework SPASS-meter. In this paper, we discuss some interesting problems that occurred while trying to reproduce previous benchmarking results. In the process of reproduction, we extended MooBench and made improvements to the performance of SPASS-meter. We conclude with lessons learned for reproducing (micro-) benchmarks.", "num_citations": "8\n", "authors": ["1313"]}
{"title": "Effective Requirements Elicitation in Product Line Application Engineering\u2013An Experiment\n", "abstract": " [Context & Motivation] Developing new software systems based on a software product line (SPL) is still a time-consuming task and the benefits of using such an approach are often smaller than expected. One important reason for this are difficulties in systematically mapping customer requirements to characteristics of the SPL. [Question/problem] Even though it has been recognized that the success of reuse strongly depends on how requirements are treated, it remains unclear how to perform this in an optimal way. [Principal ideas/results] In this paper, we present a controlled experiment performed with 26 students that compared two requirements elicitation approaches when instantiating a given SPL. [Contribution] Our findings indicate that a novel, problem-oriented requirements approach that explicitly integrates the reuse of SPL requirements into the elicitation of customer-specific requirements is more\u00a0\u2026", "num_citations": "8\n", "authors": ["1313"]}
{"title": "Philips medical systems\n", "abstract": " Philips Medical Systems 1 produces imaging equipment that is used to support medical diagnoses and interventions. Some systems are capable of image acquisition. Examples are X-ray, Magnetic Resonance Imaging (MRI), Computer Tomography (CT) and Ultrasound. Typically, such a product will scan the patient in one way or another and produce images to be viewed immediately. Other products deal with image interchange, archiving and recovery for later viewing, and image processing and annotation. Fig. 15.1 shows several situations of this equipment in use.The company is distributed all over the world, with product development in several countries. Product groups (divisions) are responsible for specific market segments. Typically, several (marketed) product lines are available in each product group. Although the product lines differ a lot, there are also possibilities for software reuse. All products deal with\u00a0\u2026", "num_citations": "8\n", "authors": ["1313"]}
{"title": "Telvent\n", "abstract": " Telvent is specialised in solutions in four specific industrial sectors: energy, traffic, transport and environment. Its main clients are in the Americas, Spain and China. With over forty years of experience in industrial supervisory control and business process management systems, Telvent executes projects and provides technical services in the field of mission-critical, real-time control and information management. Telvent provides outsourcing and consulting services, and employs a technology-neutral philosophy. The company manages IT and telecommunications infrastructure for an extensive international client base.", "num_citations": "8\n", "authors": ["1313"]}
{"title": "Multi-staged scoping for software product lines\n", "abstract": " Scoping is a core planning activity in product line development. It is central to determining and optimizing the economical benefits of product line development. In this position paper we discuss the requirements on a sound and practically useful product line development approach and will propose a specific approach which fulfills these requirements.", "num_citations": "8\n", "authors": ["1313"]}
{"title": "Adaptive Application Performance Management for Big Data Stream Processing\n", "abstract": " Big data applications with their high-volume and dynamically changing data streams impose new challenges to application performance management. Efficient and effective solutions must balance performance versus result precision and cope with dramatic changes in real-time load and needs without overprovisioning resources. Moreover, a developer should not be burdened too much with addressing performance management issues, so he can focus on the functional perspective of the system For addressing these challenges, we present a novel comprehensive approach, which combines software configuration, model-based development, application performance management and runtime adaptation.", "num_citations": "7\n", "authors": ["1313"]}
{"title": "Product Line Mapping Report\n", "abstract": " abstract As opposed to traditional domain analysis approaches [Ara89, KCH+ 90, PD87], the product line mapping approach starts by thoroughly analyzing the product development plans. Thus it is akin to industrial strength domain analysis approaches like ODM [ODM96] or Synthesis [RSP93], but actually goes further in its product orientation. However, the approach given here is explicitly not meant as a full-fledged domain analysis approach, but aims at identifying solely the information necessary as a prerequisite to scoping. Thus, the aimed-at endresult is solely to identify the major products and how they differ in terms of features they support. For identifying the products, the relevant subdomains and their interrelationships the following approach is used: 1 Identify the existing and future systems that may be relevant to the product line. 2 Develop an overview plan of these products. 3 Identify the major functions\u00a0\u2026", "num_citations": "7\n", "authors": ["1313"]}
{"title": "Reverse engineering variability in an industrial product line: observations and lessons learned\n", "abstract": " Ideally, a variability model is a correct and complete representation of product line features and constraints among them. Together with a mapping between features and code, this ensures that only valid products can be configured and derived. However, in practice the modeled constraints might be neither complete nor correct, which causes problems in the configuration and product derivation phases. This paper presents an approach to reverse engineer variability constraints from the implementation, and thus improve the correctness and completeness of variability models.", "num_citations": "6\n", "authors": ["1313"]}
{"title": "From Resource Monitoring to Requirements-based Adaptation: An Integrated Approach\n", "abstract": " In large and complex systems there is a need to monitor resources as it is critical for system operation to ensure sufficient availability of resources and to adapt the system as needed. While there are various (resource)-monitoring solutions, these typically do not include an analysis part that takes care of analyzing violations and responding to them. In this paper we report on experiences, challenges and lessons learned in creating a solution for performing requirements-monitoring for resource constraints and using this as a basis for adaptation to optimize the resource behavior. Our approach rests on reusing two previous solutions (one for resource monitoring and one for requirements-based adaptation) that were built in our group.", "num_citations": "6\n", "authors": ["1313"]}
{"title": "Performance Modeling in the Age of Big Data\n", "abstract": " Big Data aims at the efficient processing of massive amounts of data. Performance modeling is often used to optimize performance of systems under development. Based on experiences from modeling Big Data solutions, we describe some problems in applying performance modeling and discuss potential solution approaches.", "num_citations": "6\n", "authors": ["1313"]}
{"title": "IVML: a DSL for configuration in variability-rich software ecosystems\n", "abstract": " Variability-rich Software Ecosystems need configuration capabilities just as in any product line. However, various additional capabilities are required, taking into account the software ecosystem characteristics. In order to address these specific needs, we developed the Integrated Variability Modeling Language (IVML) for describing configurations of variability-rich software ecosystems. IVML is a variability modeling and configuration language along with accompanying reasoning facilities.", "num_citations": "6\n", "authors": ["1313"]}
{"title": "Using semantically linked content to support creativity in product innovation\n", "abstract": " In competitive markets product innovation becomes a major issue for companies. Many creativity techniques have been proposed over time to improve creativity.In this paper, we discuss a platform and a specific reasoning approach to support product innovation. This reasoning approach is based on a specific form of heuristic (or almost correct) reasoning, most instances rely on analogies.", "num_citations": "6\n", "authors": ["1313"]}
{"title": "Reasoning on requirements knowledge to support creativity\n", "abstract": " Developing innovative products is an important challenge for companies these days. Meanwhile it is in requirements engineering widely recognized that requirements elicitation has to go beyond mere recording of knowledge, rather is has to be an active process where new ideas are created. Thus, creativity is an important issue in requirements engineering. While so far tool support for creativity focused mainly on recording the creative outcome or providing relevant knowledge, we will describe an approach where tool support is used to actively support people in the creation of ideas.", "num_citations": "6\n", "authors": ["1313"]}
{"title": "Requirements management for product lines: A prototype\n", "abstract": " abstract The key idea of software product lines is the integrated development of a set of products, exploiting commonalities and variabilities among the products to achieve high levels of reuse. The commercial potential of this approach has already been demonstrated in numerous case studies. However, while requirements management tools are already widespread, the range of professional tool support for product line development is still very poor. In this paper we analyze the question whether and how existing requirement management tools can be seamlessly extended to product line development. We present a general approach, which has been prototyped based on the DOORS requirements management tool and lead to the REMAP tool.", "num_citations": "6\n", "authors": ["1313"]}
{"title": "People issues in developing software product lines\n", "abstract": " In this paper we discuss the importance of people and their behavior in the introduction and continuous operation of product lines. We give some hypotheses on how these people issues can be formed in a way favorable to product line development. In particular, we focus on the relation between the mind set of people, communication patterns, and the organizational structure. The hypotheses we provide are derived from our own industrial experience as well as from industry reports. However, this work is in an early stage and mainly aims at contributing to an ongoing discussion of technology transfer in a product line context.", "num_citations": "6\n", "authors": ["1313"]}
{"title": "MetricHaven: more than 23,000 metrics for measuring quality attributes of software product lines\n", "abstract": " Variability-aware metrics are designed to measure qualitative aspects of software product lines. As we identified in a prior SLR [6], there exist already many metrics that address code or variability separately, while the combination of both has been less researched. MetricHaven fills this gap, as it extensively supports combining information from code files and variability models. Further, we also enable the combination of well established single system metrics with novel variability-aware metrics, going beyond existing variability-aware metrics. Our tool supports most prominent single system and variability-aware code metrics. We provide configuration support for already implemented metrics, resulting in 23,342 metric variations. Further, we present an abstract syntax tree developed for MetricHaven, that allows the realization of additional code metrics.", "num_citations": "5\n", "authors": ["1313"]}
{"title": "Variability modeling with the integrated variability modeling language (IVML) and EASy-producer\n", "abstract": " EASy-Producer is an open-source research toolset for engineering product lines, variability-rich software ecosystems, and dynamic software product lines. In this tutorial, we will focus on its (textual) variability modeling capabilities as well as its configuration and validation functionality. Further, we will provide an outlook on how EASy-Producer can be applied to variability instantiation.", "num_citations": "5\n", "authors": ["1313"]}
{"title": "Supporting the effective configuration of software product lines\n", "abstract": " Most research in product line engineering focuses on the domain engineering phase. However, the ultimate reason of any Software Product Line Engineering (SPLE) activity is the derivation of products and thus application engineering. In this research we focus on how the configuration activity within application engineering can be supported to achieve sufficient efficiency.", "num_citations": "5\n", "authors": ["1313"]}
{"title": "Product management for software product lines: An overview\n", "abstract": " Software product management is an issue that has gained significant attention in industrial practice, but little research has addressed this area. This is especially the case for software product lines, where the use of a common product line infrastructure creates additional challenges. These challenges mainly result from the additional complexity involved in developing, maintaining, and evolving the common product line infrastructure and the products derived from that infrastructure. But, as we argued in a previous work (Helferich, Schmid, and Herzwurm 2006a), the different perspectives that marketing and software development have on product lines also lead to problems. The remainder of this chapter is structured as follows: In Section 5.2 we explain how the marketing perspective and the (software) engineering perspective on product lines relate to each other and how mismatches between these product lines can\u00a0\u2026", "num_citations": "5\n", "authors": ["1313"]}
{"title": "Strategically defining and exploiting product portfolios with a product line approach\n", "abstract": " If we look at mature software development companies today, we see that most of them focus on developing products for specific markets: Nokia develops mobile phones (and the software for it), HP is well-known for its printer products, and SAP successfully develops enterprise management software. All of these companies develop software not specifically for a single customer, but rather for a market at large. Of course, focusing on a market does not preclude to focus on individual customers!", "num_citations": "5\n", "authors": ["1313"]}
{"title": "Using a quantitative approach for defining generic components: A case study\n", "abstract": " In this paper we give a sketch of a new quantitative approach which can be used to identify and cluster system functionality that should be developed in a reusable fashion, for example, when starting product line development. We demonstrate the applicability of the approach and its validity in a case study.", "num_citations": "5\n", "authors": ["1313"]}
{"title": "Reverse engineering code dependencies: converting integer-based variability to propositional logic\n", "abstract": " A number of SAT-based analysis concepts and tools for software product lines exist, that extract code dependencies in propositional logic from the source code assets of the product line. On these extracted conditions, SAT-solvers are used to reason about the variability. However, in practice, a lot of software product lines use integer-based variability. The variability variables hold integer values, and integer operators are used in the conditions. Most existing analysis tools can not handle this kind of variability; they expect pure Boolean conditions.", "num_citations": "4\n", "authors": ["1313"]}
{"title": "Optimal Product Line Architectures for the Automotive Industry\n", "abstract": " The creation of product line architectures is a difficult and complex task. The resulting architectures must support the required system variabilities as well as further quality attributes. In the automotive domain, product lines of software-intensive system models have a great diversity of products, which leads to vast design spaces. Finding optimal product line architectures as part of the system design process requires the consideration of a variety of trade-offs. In practice, this challenge cannot be solved manually for all but the smallest problems, therefore an automated solution is required. Our contribution is the generation of a sound mathematical formalization of the problem. This formalization makes the product line optimization problem accessible to various established multi-objective optimization techniques. The applicability of the chosen approach is shown by means of applying a commercial tool for multi-criteria decision making.", "num_citations": "4\n", "authors": ["1313"]}
{"title": "Analysing the KConfig Semantic and Related Analysis Tools\n", "abstract": " abstract The Linux Kernel is often used as real world use case to demonstrate novel Software Product Line Engineering techniques. The large open source repository facilitates the analysis of the variability model, the instantiation process, the instantiable artefacts, and the evolution of all of them. This report focusses on the analysis of undocumented KConfig functionalities. These functions have to be considered while applying any variability management technique to the Linux Kernel. Hence, this report will contribute to a better understanding how variability is handled in KConfig files. Further, we analyse existing work, which also analysed KConfig. Based on the weak documentation of KConfig, these works contain errors. These errors threat the validity of many existing analysis of the Linux Kernel.", "num_citations": "4\n", "authors": ["1313"]}
{"title": "Erhebung von Produkt-Laufzeit-Metriken: Ein Vergleich mit dem SPASS-Meter-Werkzeug\n", "abstract": " Die Erfassung von Produktmetriken zur Laufzeit ist ein wesentlicher Baustein einer Qualit\u00e4tsstrategie in der Produktentwicklung. Die Erfassung von Produktmetriken in der Entwicklung ist jedoch oft mit signifikantem Aufwand verbunden, da viele Werkzeuge nur bestimmte Eigenschaften erfassen k\u00f6nnen und ihre Verwendung oft sehr komplex ist. Dar\u00fcber hinaus entsteht durch die Durchf\u00fchrung der Messung meist ein signifikanter Laufzeit-Overhead.", "num_citations": "4\n", "authors": ["1313"]}
{"title": "Support for complex product line populations\n", "abstract": " In this paper, we describe EASy-Producer, a prototypical tool for complex and large-scale Software Product Line (SPL) development. The tool enables SPL engineers to reduce complexity by combining derivation and composition techniques to manage one large SPL as a combination of individual, but interrelated SPLs.", "num_citations": "4\n", "authors": ["1313"]}
{"title": "Architecture\n", "abstract": " In theory, requirements engineering is a prerequisite to architecting, and thus requirements for the architecture will be established. In practice, architects often cannot afford to wait until a stable requirements specification is available to them. Instead, they have to deal with incomplete and changing requirements. Next to taking part in the \u2018normal\u2019requirements engineering process as stakeholders, architects take the evolving set of requirements and dig up and document the architecturally relevant requirements: a small set of requirements that will really shape the reference architecture. A reference architecture for a software product line has to deal with the requirements of many (planned) products. Requirements that are common to all should be satisfied by the reference architecture. Other requirements may be unique for certain products, some of them may be conflicting. The reference architecture must support such\u00a0\u2026", "num_citations": "4\n", "authors": ["1313"]}
{"title": "Philips Consumer Electronics Software for Televisions\n", "abstract": " Philips Consumer Electronics, a division of Royal Philips [103], is one of the largest consumer electronics companies in the world. It has an annual turnover of\u20ac 10 billion and a sustainable profit of 5%, which is considered quite well in this domain. Philips Consumer Electronics has 16,000 employees and is present in all regions of the world.Televisions are responsible for one-third of the turnover of Philips Consumer Electronics. 1 Though a quite traditional product, they are an important factor in shaping the brand image that will allow all Philips divisions to create and enter new markets in lifestyle, healthcare and technology. Philips has a market share of 10% in televisions, roughly equal in size to its main competitors.", "num_citations": "4\n", "authors": ["1313"]}
{"title": "Softwareproduktlinien f\u00fcr Anwendungssysteme: eine Analyse aus Techniksicht und Marktsicht\n", "abstract": " Softwareproduktlinien sind ein aktueller Ansatz zur Erstellung flexibler und kundenorientierter IT-Anwendungen [MKWI04]. Dieser Ansatz wird kurz vorgestellt und dem Marketingbegriff der Produktlinie gegen\u00fcbergestellt. Darauf aufbauend wird gezeigt welche M\u00f6glichkeiten es gibt, wie sich die Produktlinie aus Techniksicht und die Produktlinie aus Marktsicht zueinander verhalten. Erstaunlicherweise fallen Marktsicht und Techniksicht unter bestimmten Umst\u00e4nden auseinander. In diesem Beitrag wird gezeigt, wie sich die Produktlinie aus Marktsicht und die Produktlinie aus Techniksicht unterscheiden k\u00f6nnen, und erl\u00e4utert, warum dies sinnvoll sein kann. Abschlie\u00dfend werden Anforderungen an ein Vorgehen zur integrierten Betrachtung von Techniksicht und Marktsicht abgeleitet.", "num_citations": "4\n", "authors": ["1313"]}
{"title": "People management in institutionalizing product lines\n", "abstract": " 1 Currently, the key approach to large-scale software reuse is product line development, an approach built upon the systematic development of building blocks for reuse. While most work on product lines focusses on technical issues, in the end they are built by by people. Winning them for product line development is a key issue in successfully introducing and institutionalizing product line development in an organization. This makes people issues a key concern in technology transfer. Based on our experience in technical transfer in the product line area we developed some hypotheses on how these people issues can be formed in a way favorable to product line development. In particular, we focus on the relation between the mind set of people, communication patterns, and the organizational structure. We then give concrete rules based on our own industrial experience as well as industry reports that support instutionalizing product line development.", "num_citations": "4\n", "authors": ["1313"]}
{"title": "From theory refinement to kb maintenance: a position statement\n", "abstract": " Since we consider theory re nement (TR) as a possible key concept for a methodologically clear view of knowledge-base maintenance, we try to give a structured overview about the actual state-of-the-art in TR. This overview is arranged along the description of TR as a search problem. We explain the basic approach, show the variety of existing systems and try to give some hints about the direction future research should go.", "num_citations": "4\n", "authors": ["1313"]}
{"title": "Fast static analyses of software product lines: an example with more than 42,000 metrics\n", "abstract": " Context: Software metrics, as one form of static analyses, is a commonly used approach in software engineering in order to understand the state of a software system, in particular to identify potential areas prone to defects. Family-based techniques extract variability information from code artifacts in Software Product Lines (SPLs) to perform static analysis for all available variants. Many different types of metrics with numerous variants have been defined in literature. When counting all metrics including such variants, easily thousands of metrics can be defined. Computing all of them for large product lines can be an extremely expensive process in terms of performance and resource consumption.Objective: We address these performance and resource challenges while supporting customizable metric suites, which allow running both, single system and variability-aware code metrics.Method: In this paper, we introduce a\u00a0\u2026", "num_citations": "3\n", "authors": ["1313"]}
{"title": "Experiences with the model-based generation of big data applications\n", "abstract": " abstract Developing Big Data applications implies a lot of schematic or complex structural tasks, which can easily lead to implementation errors and incorrect analysis results. In this paper, we present a model-based approach that supports the automatic generation of code to handle these repetitive tasks, enabling data engineers to focus on the functional aspects without being distracted by technical issues. In order to identify a solution, we analyzed different Big Data stream-processing frameworks, extracted a common graph-based model for Big Data streaming applications and developed a tool to graphically design and generate such applications in a model-based fashion (in this work for Apache Storm). Here, we discuss the concepts of the approach, the tooling and, in particular, experiences with the approach based on feedback of our partners.", "num_citations": "3\n", "authors": ["1313"]}
{"title": "Implementation Metrics for Software Product Lines-A Systematic Literature Review\n", "abstract": " abstract Development of Software Product Lines (SPLs) requires additional implementation concepts to manage variability and to facilitate the derivation of individual products based on a common platform. These variability implementation concepts are not required for the development of single systems and, thus, are not considered in traditional software engineering. Metrics are well established in traditional software engineering, but are typically not applicable to SPLs as they do not address variability management. Over time, a number of specialized product line metrics have been described in literature. However, no systematic description of the characteristics of these metrics is currently available. We conducted a systematic literature review to identify variability-aware implementation metrics, designed for the needs of SPLs. We list these metrics according to the measured artifact types: variability models, code\u00a0\u2026", "num_citations": "3\n", "authors": ["1313"]}
{"title": "Towards a better understanding of software product line evolution\n", "abstract": " In contrast to traditional software systems, the evolution of a Software Product Line (SPL) affects not only artifacts like source code or requirements, but also variability information, which supports the customization of these artifacts across different products of the SPL. While some work exists that aims at characterizing the state and evolution of a product line from a feature perspective, this abstracts away the details of code evolution, hence, ignoring aspects like the difference in size of features. In this paper, we present an approach for the extraction and analysis of changes introduced to code, build, and variability model artifacts. This approach has been developed for and applied to the Linux product line.", "num_citations": "3\n", "authors": ["1313"]}
{"title": "Resource-optimizing adaptation for big data applications\n", "abstract": " The resource requirements of Big Data applications may vary dramatically over time, depending on changes in the context. If resources should not be defined for the maximum case, but available resources are mostly static, there is a need to adapt resource usage by modifying the processing behavior. The QualiMaster project researches such an approach for the analysis of systemic risks in the financial markets.", "num_citations": "3\n", "authors": ["1313"]}
{"title": "Managing the evolution and customization of database schemas in information system ecosystems\n", "abstract": " We present an approach that supports the customization and evolution of a database schema in a software ecosystem context. The approach allows for the creation of customized database schemas according to selected, supported feature packs and can be used in an ecosystem context, where third-party providers and customers augment the system with their own capabilities.               The creation of the final database schema is automatic and also the relevant updates of individual feature packs can be automatically handled by the system.", "num_citations": "3\n", "authors": ["1313"]}
{"title": "Technical debt--from metaphor to engineering guidance: A novel approach based on cost estimation\n", "abstract": " abstract In this report, we discuss the notion of Technical Debt and formalize the concept as a basis of disciplined study. This formalization allows us to characterize and measure Technical Debt independent of its source. We will then introduce approximations to measuring Technical Debt that can be more easily applied in practice. As a result we arrive at a method for deciding on tackling Technical Debt, which relies on a formal approach, with clearly identified approximations. We will also illustrate our approach with an example.", "num_citations": "3\n", "authors": ["1313"]}
{"title": "Kreativit\u00e4t in der Anforderungsgewinnung: ein Experiment\n", "abstract": " Im modernen Requirements Engineering werden Anforderungen nicht nur erfasst, sondern gestaltet. Entsprechend ist Innovation in der Anforderungsgewinnung eine wichtige Aufgabe, die entscheidenden Einfluss auf den Produkterfolg hat. Doch k\u00f6nnen innovative Ideen systematisch entwickelt werden? Fr\u00fchere Fallstudien zeigten bereits, dass dies m\u00f6glich ist. In diesem Beitrag zeigen wir, dass der kreative Nutzen einzelner Techniken mit empirischen Methoden systematisch analysiert und belegt werden kann.", "num_citations": "3\n", "authors": ["1313"]}
{"title": "An analysis of existing software configuration systems\n", "abstract": " abstract Dynamic Software Product Lines (DSPL) focuses on product lines where the resolution of variants happens at a later point in time, ideally at runtime. While runtime reconfiguration is still rather innovative, preconfiguration of software systems is well established and to some degree even standardized. Thus, we study such preconfiguration approaches to better understand how their capabilities relate to classical product line engineering on one hand and to dynamic software product lines on the other.", "num_citations": "3\n", "authors": ["1313"]}
{"title": "2nd international workshop on dynamic software product lines dspl 2008\n", "abstract": " In emerging domains such as ubiquitous computing, service robotics, unmanned space and water exploration, and medical and life-support devices, software is becoming increasingly complex with extensive variation in both requirements and resource constraints. Developers face growing pressure to deliver high-quality software with additional functionality, on tight deadlines, and more economically.", "num_citations": "3\n", "authors": ["1313"]}
{"title": "Towards adaptive service engineering\n", "abstract": " abstract Technical systems are increasingly becoming an imminent part of human life. A growing trend is that systems are embedded in technical devices and working continuously without human intervention. However, this implies that these systems run for a long time without human control. As the environment changes, the systems need to adapt themselves. One approach to address these challenges is the use of service-oriented development paradigms. This paper highlights the challenges and research issues in the context of engineering adaptable, service-oriented systems. Challenges are identified based on the development plane they might appear in (ie, service-, application-, and infrastructure engineering). We finish by discussing in detail the expected benefits and open research issues.", "num_citations": "3\n", "authors": ["1313"]}
{"title": "Requirements Engineering for Product Lines.-An Overview\n", "abstract": " For years the predominant view in software engineering was that of single-system development. We developed software for one system at a time and cared little about what other systems we are going to develop next. Reuse in this context was restricted to mere copy-and-adapt approaches. We analyzed what could be reused from previous projects (requirements specifications, code, design, etc.) and adapted these pieces to fit into our current system. This approach is opportunistic in nature. We reused components that we did not design to be reused in the current context and this led to inefficiency in software development, duplicated code, and multiple maintenance threads. This could have been avoided if the similarities in our systems would have been taken into account from the very beginning. Over time (and especially with the rise of component-based software engineering), another view entered the research landscape: let\u2019s build components once and for all, ie, components that are reusable in arbitrary situations and without much adaptation effort. This was a very ambitious vision and as it turned out it was beyond the state of art of engineering. The demise of the IBM San Francisco framework and the Ariane 5 disaster are two examples for this [1].Between these two extremes, software developers detected a promising middle ground: targeting a certain range of functionality for a limited set of products, the product line. While software engineering research neglected this pragmatic concept for years, it did take ground in practice. Many companies organized their software development in a way that was driven by this view. The ideas have\u00a0\u2026", "num_citations": "3\n", "authors": ["1313"]}
{"title": "A framework for product line quality model development\n", "abstract": " This report provides the background material for developing product line quality models. While the approach aims at the development of quality models to support the PuLSE-Eco V2. 0 scoping approach 1, the resulting models are not restricted to this context, but support the development of arbitrary, general purpose product line quality models.This report does not provide any quality models, but provides a common framework for the development and documentation of these models. This framework describes the underlying structure of the specialized models, as well as a basic approach for developing them. This helps to ensure that the various quality models will adher to the same general structure.", "num_citations": "3\n", "authors": ["1313"]}
{"title": "Variability modeling and implementation with EASy-producer\n", "abstract": " EASy-Producer is an open-source research toolset for engineering product lines, variability-rich software ecosystems, and dynamic software product lines. In this tutorial, we will introduce its (textual) variability modeling capabilities realized by the Integrated Variability Modeling Language (IVML) and its model-based development and implementation capabilities, which are realized by the Variability Instantiation Language (VIL) and the Variability Template Language (VTL).", "num_citations": "2\n", "authors": ["1313"]}
{"title": "Variability-aware semantic slicing using code property graphs\n", "abstract": " A common problem in program analysis is to identify semantically related statements in programs, for example, which statements change the value of a variable, or implement a specific feature or functionality. This is a very challenging task for large programs and gets even more complicated in the presence of variability implementations like# ifdef-annotations. Program slicing is a technique that can be used to aid developers with this challenge. But while slicing is a well-established technique for individual programs, there has been so far only little work on program slicing of product lines.", "num_citations": "2\n", "authors": ["1313"]}
{"title": "Variability Modeling with EASy-Producer\n", "abstract": " EASy-Producer is an open-source research toolset for engineering product lines, variability-rich software ecosystems, and dynamic software product lines. In this tutorial, we will focus on its (textual) variability modeling capabilities as well as its configuration and validation functionality. Further, we will provide an outlook on how EASy-Producer can be applied to variability instantiation.", "num_citations": "2\n", "authors": ["1313"]}
{"title": "Customizing Service Platforms (Dagstuhl Seminar 13171)\n", "abstract": " This report documents the program and the outcomes of Dagstuhl Seminar 13171\" Customizing Service Platforms\". The aim of the seminar was to bring together researchers from different areas of academia and industry that are related to the seminar topic and typically do not intensively interact with each other. These communities are Product Line Engineering, Software Architecture, Service Engineering, and Cloud Computing. The ambition of the seminar was to work on the topic of\" Customization of Service Platforms\", which is related to all of these areas, in a synergistic and cooperative way to identify new research challenges and solution approaches. As part of the seminar, we identified a number of key areas which provided the basis for highly interactive working groups.", "num_citations": "2\n", "authors": ["1313"]}
{"title": "Top productivity through software reuse\n", "abstract": " This volume contains the proceedings accepted for the International Conference on Software Reuse (ICSR 12) held during June 13\u201317, 2011 in Pohang, South Korea.The International Conference on Software Reuse is the premier international event in the software reuse community. It has a long tradition going back 20 years: the first ICSR was held in 1991. During this period reuse has changed the industry significantly on different levels and through different technologies and methods. Examples are feature-based development, product line engineering, or generation-based approaches. Many of these have created their own specific communities. Of course this reflects back on ICSR. Thus, at this conference a healthy mixture of contributions can be found: some are from areas intersecting with other communities, while some either use novel approaches or look at software reuse from a broad angle, which is\u00a0\u2026", "num_citations": "2\n", "authors": ["1313"]}
{"title": "16th International Working Conference on Requirements Engineering: Foundation for Software Quality. Proceedings of the Workshops CreaRE, PLREQ, RePriCo and RESC\n", "abstract": " This ICB Research Report constitutes the proceedings of the following four workshops which were held on Tuesday, 29th June 2010 as part of the Requirements Engineering: Foundation for Software Quality (REFSQ) conference 2010 at the University of Duisburg-Essen. First Workshop on Creativity in Requirements Engineering (CreaRE). First International Workshop on Product Line Requirements Engineering and Quality (PLREQ). First Workshop on Requirements Prioritization for customer-oriented Software-Development (RePriCo). First Workshop on Requirements Engineering in Small Companies (RESC)", "num_citations": "2\n", "authors": ["1313"]}
{"title": "Evolving Adaptable Systems: Potential and Challenges. In 2\n", "abstract": " Future software systems will be even longer in service than today (which often is already measured in decades). During operation, a system must change in many ways, eg, due to environment changes, functional enhancements, etc. While adaptive software systems already cope with changing environments, existing approaches are insufficient to address an open-ended world where unpredictable changes may happen that cannot be foreseen. Here, we discuss how existing work in (dynamic) software product lines, evolution of product lines (eg [1]) and adaptive systems (eg [2]) can be combined to improve evolvability of adaptive systems. Before we discuss the evolution of adaptive systems, we first outline the concept of variability and its relationship to adaptive systems. A key concept of software product lines (SPL) is the notion of variability [4]. A variability model defines the differences among valid products as well as interdependencies among different characteristics of a SPL. While the differentiation among the products is typically made at development time, more recently approaches, referred to as dynamic software product lines (DSPL)[5], target variation at runtime. While evolution of SPL can be seen as an orthogonal dimension to variability engineering, variability models can be used to capture and organize evolution variants. As we explained in [1], this requires extensions to existing variability modeling approaches. These extensions are required to support the potential openness of evolutionary changes. The term self-adaptive system is typically used for systems that are capable of performing changes of their internal or external\u00a0\u2026", "num_citations": "2\n", "authors": ["1313"]}
{"title": "Introducing and optimizing software product lines using the FEF\n", "abstract": " This tutorial provides an introduction to the basic concepts of software product line engineering: business orientation, variability management, architecture-driven development, and the two-lifecycle approach.", "num_citations": "2\n", "authors": ["1313"]}
{"title": "Orientierung in der Landschaft des Requirements-Engineering: Ein \u00dcberblick \u00fcber RE-Frameworks und ihre Anwendungsgebiete\n", "abstract": " Das Requirements-Engineering (RE) hat in den vergangenen Jahren viele RE-Frameworks hervor gebracht, die zentrale Konzepte des RE detailliert und umfassend beschreiben sowie Anleitungen f\u00fcr die RE-Praxis bieten wollen. Zugleich sind mit der Ausweitung der Software-Produktlinien (SPL)-Entwicklung in der Industrie neue Herausforderungen an das RE entstanden, f\u00fcr die RE-Frameworks L\u00f6sungen bieten sollten.", "num_citations": "2\n", "authors": ["1313"]}
{"title": "Deliverable D2. 1-State of the Art in Tools for Creativity: idSpace project deliverable\n", "abstract": " This deliverable provides a survey of creativity techniques that have been developed over time. It provides a reference model for characterizing them as a basis for selecting techniques that are particularly appropriate for the idSpace-project.", "num_citations": "2\n", "authors": ["1313"]}
{"title": "Workshop Summary: Artificial Intelligence Methods for Ambient Intelligence\n", "abstract": " We are pleased to present the workshop proceedings of the workshop Artificial Intelligence Methods for Ambient Intelligence, which took place as part of the European Conference on Ambient Intelligence on November 7, 2008 in Darmstadt, Germany. Ambient Intelligence (AmI) is the vision of our future environment. In this future environment we will be surrounded by various kinds of interfaces supported by computing and networking technology which will provide an intelligent, seamless and non-obtrusive assistance to humans. The ambient environment will be aware of the presence and identity of the humans, it will be able to communicate in multi-modal form and to anticipate the humans\u2019 goals and needs in order to provide best possible assistance to them. This broad vision addresses all areas of human life, such as home, work, health care, travel and leisure activities. A large amount of interdisciplinary\u00a0\u2026", "num_citations": "2\n", "authors": ["1313"]}
{"title": "The Family Evaluation Framework\n", "abstract": " The Family Evaluation Framework (FEF) is a consolidated result of six years of European co-operation projects with industry and academia. These are the ESAPS, CAF\u00c9 and FAMILIES projects. 1 Companies within these projects mainly work on a large variety of embedded systems including medical imaging, mobile phones, flight control software, utility control, supervision and management, financial services and car electronics. During these projects, the terminology in use was \u201csoftware product family\u201d or \u201csystem family\u201d instead of \u201csoftware product line\u201d. This terminology is also reflected in the name of the final project in the series and in the name of the FEF. This chapter gives an overview of the FEF. Section 6.1 describes the purpose of the framework. Next, its basic structure is described (6. 2). The FEF is based on the four concerns of the BAPO model, leading to four dimensions in the evaluation framework. Sects\u00a0\u2026", "num_citations": "2\n", "authors": ["1313"]}
{"title": "Siemens medical solutions\n", "abstract": " Siemens Medical Solutions is one of the largest companies providing hospital applications. The portfolio of products covers nearly everything from X-Ray tubes, over Magnetic Resonance Imaging (MRI) and Computed Tomography (CT) scanners to complete infrastructure support in hardware and software for hospitals and all other medical practitioners. The department Health Services Image Management 1 specialises in software for image distribution and image post-processing. The supported physician is the radiologist. The task of the radiologist starts with patient registration and ends after several activities with reporting and archiving of the images in the report repository (see Fig. 16.1). This workflow is standardised in the \u201cIntegrating the Healthcare Enterprise initiative\u201d[69].", "num_citations": "2\n", "authors": ["1313"]}
{"title": "Goal-Based Requirements Modelling as a Basis for Adaptivity to the Service Context\n", "abstract": " The demand for flexible software systems is constantly increasing. A promising approach is to enable systems to become selfadaptive up to a point where they are able to compose themselves flexibly based on available services. Despite this flexibility, behavior consistent with the underlying requirements of the system is still expected. This is a challenge to current software engineering approaches, which are built on the vision of a stable system. In this paper, we propose a specific approach to software engineering and in particular requirements engineering to support the systematic development of adaptive systems. We focus in particular on adaptivity to the service environment.", "num_citations": "2\n", "authors": ["1313"]}
{"title": "Key challenges in industrial product line engineering\n", "abstract": " abstract This paper summarizes the results of the\" Gesellschaft f\u00fcr Informatik\"(GI) working group on\" Requirements Engineering for Software Product Lines\" which is part of the requirements engineering group within in the GI. This work group met regularly to identify the key problems in product line engineering practice with potential (and proven) solutions. While this started originally as an effort focused purely on requirements engineering issues, we soon understood that we had to take a broader perspective due to the tight interconnection of requirements engineering with other issues in a product line context. We will provide a characterization of the different organizations that participated in this effort. This will demonstrate that overall a good coverage of different types of software organizations has been achieved. We will then provide an overview of the main problems in product line development. Based on both\u00a0\u2026", "num_citations": "2\n", "authors": ["1313"]}
{"title": "Planung von Softwarewiederverwendung\u2013Ein systematischer Ansatz zum Scoping von Softwareproduktlinien\n", "abstract": " Moderne Unternehmen bieten typischerweise eine stark diversifizierte Produktpalette an. Diese Notwendigkeit zur Entwicklung \u00e4hnlicher Systeme gilt nat\u00fcrlich auch f\u00fcr die Software. Der PuLSE-Eco 1 Ansatz erlaubt es aus dieser \u00c4hnlichkeit der Systeme maximalen wirtschaftlichen Nutzen zu ziehen.", "num_citations": "2\n", "authors": ["1313"]}
{"title": "L\u00f6sungen f\u00fcr Probleme des Requirements Engineering f\u00fcr Produktlinien\n", "abstract": " Softwareproduktlinien entstehen wo auch immer Produkte in Varianten entwickelt werden. Dies stellt ein gigantisches Wiederverwendungspotential dar, schafft aber auch Schwierigkeiten, vor allem f\u00fcr den Anforderungsprozess. Daher wurde vor zwei Jahren ein GI-Arbeitskreis zu diesem Thema gegr\u00fcndet, der sich mit Problemen und L\u00f6sungen des Requirements Engineering f\u00fcr Produktlinien besch\u00e4ftigt.", "num_citations": "2\n", "authors": ["1313"]}
{"title": "Practical Problems of Cost Estimation in the Product Line Context\n", "abstract": " Existing software cost estimation methods are far from being suitable for the reuse of software in the context of product line development. This paper points out the product line specific aspects of reuse compared to opportunistic reuse in single product development. Implications for existing estimation approaches are drawn and important topics of work are identified.", "num_citations": "2\n", "authors": ["1313"]}
{"title": "A framework for product line quality model development: the PuLSE-Eco Meta Quality Model\n", "abstract": " abstract In this report, we described the basis for developing quality models that can be used by the PuLSE-Eco scoping approach to provide a quantitative basis for the scoping of the asset base. We described the general structure of these models as well as the necessary notation and terminology to discuss the specific models and perhaps needed deviations from the standard model. In particular, we discussed the process aspects of product line development, we discussed the general structure of product line quality models, and discussed how specific quality models can be developed. Further, we discussed in detail the relationship between the meta-quality model and the specific quality model guides and how these can be instantiated for the specific projects.", "num_citations": "2\n", "authors": ["1313"]}
{"title": "Environment Modeling for Adaptive Systems: A Systematic Literature Review\n", "abstract": " [Context & Motivation] Adaptive systems are an important research area. The dominant reason for adaptivity in systems are changes in the environment. Thus, it is an important question how to model the environment and how to determine the necessary information on this environment in the requirements engineering phase. [Question/ Problem] There is so far relatively little explicit study of the notion of environment models in software engineering research. [Principal ideas/ Results] In this paper, we present a systematic literature review with the goal to determine the state of the art in environment modeling for adaptive systems, in particular from a requirements perspective. We discuss the goals of the approaches, the modeling concepts, as well as the methodology aspects of environment modeling in our survey. [Contribution] As major result of our survey, we provide a meta-model of existing environment modeling concepts. As a negative finding - and a research opportunity - we find that so far methodological aspects of environment modeling have received very little attention.", "num_citations": "1\n", "authors": ["1313"]}
{"title": "ADOOPLA-Combining Product-Line-and Product-Level Criteria in Multi-objective Optimization of Product Line Architectures\n", "abstract": " Product lines of software-intensive systems have a great diversity of features and products, which leads to vast design spaces that are difficult to explore. In addition, finding optimal product line system architectures usually requires a consideration of several quality trade-offs at once, involving both product-level as well as product-line-wide criteria. This challenge cannot be solved manually for all but the smallest problems, and can therefore benefit from automated support. In this paper we propose ADOOPLA, a tool-supported approach for the optimization of product line system architectures. In contrast to existing approaches where product-level approaches only support product-level criteria and product-line oriented approaches only support product-line-wide criteria, our approach integrates criteria from both levels in the optimization of product line architectures. Further, the approach can handle multiple\u00a0\u2026", "num_citations": "1\n", "authors": ["1313"]}
{"title": "Exploring Automotive Stakeholder Requirements for Architecture Optimization Support\n", "abstract": " In automotive system design, system architects increasingly use model-based approaches for defining product line architectures (PLAs). This trend is strongly supported by the emergence of domain standards like EAST-ADL and AUTOSAR that facilitate a system design approach based on systematic reuse. In our work, we focus on the automated exploration of PLA design spaces by means of multi-objective optimization and ask what are challenges that stakeholders face as part of this design task. Optimizing PLA design spaces shares certain challenges with conventional architecture optimization, like conflicting quality goals and potentially vast design spaces. However, PLA optimization exacerbates these challenges by an additional layer of complexity in the system architecture, due to product line variability in the system. Our main focus in this paper is on achieving a better understanding of the stakeholder\u00a0\u2026", "num_citations": "1\n", "authors": ["1313"]}
{"title": "Improving Software Engineering Research Through Experimentation Workbenches\n", "abstract": " Experimentation with software prototypes plays a fundamental role in software engineering research. In contrast to many other scientific disciplines, however, explicit support for this key activity in software engineering is relatively small. While some approaches to improve this situation have been proposed by the software engineering community, experiments are still very difficult and sometimes impossible to replicate.                 In this paper, we propose the concept of an experimentation workbench as a means of explicit support for experimentation in software engineering research. In particular, we discuss core requirements that an experimentation workbench should satisfy in order to qualify as such and to offer a real benefit for researchers. Beyond their core benefits for experimentation, we stipulate that experimentation workbenches will also have benefits in regard to reproducibility and repeatability of\u00a0\u2026", "num_citations": "1\n", "authors": ["1313"]}
{"title": "Model-based product line development with EASy-producer using VIL and VTL\n", "abstract": " EASy-Producer is an open-source research toolset for engineering product lines, variability-rich software ecosystems, and dynamic software product lines. In this tutorial, we will focus on its model-based development and implementation capabilities, which are realized by the Variability Instantiation Language (VIL) and the Variability Template Language (VTL). Further, we will provide a basic introduction into the Integrated Variability Modeling Language (IVML) in order to use the provided information of IVML variability models and configurations during instantiation defined with VIL and as part of the templates created with VTL.", "num_citations": "1\n", "authors": ["1313"]}
{"title": "A Commit-Based Analysis of Software Product Line Evolution: Two Case Studies\n", "abstract": " abstract Software Product Line (SPL) evolution affects a variety of artifact types, each containing their artifact-specific information as well as variability information. While the former information type defines the basic content of an artifact, like the general program definition in code artifacts, the latter supports the customization of these artifacts for different products of the SPL. Existing work that aims at characterizing the state and evolution of a product line identifies general SPL evolution scenarios or evaluates the (co-) evolution of variability information in different types of artifacts. However, these results are typically based on a feature perspective, which abstracts from the SPL evolution at large. We argue that an artifact-based analysis of product line evolution will complement existing work by analyzing the intensity of changes to different artifact and information types. In this report, we therefore present an approach for\u00a0\u2026", "num_citations": "1\n", "authors": ["1313"]}
{"title": "Understanding variable code: Reducing the complexity by integrating variability information\n", "abstract": " Software product lines often use preprocessor statements as a basis for representing variability, which makes understanding the artifacts rather complex. An approach that has been proposed in the past to improve the understanding of code with preprocessor statements is formal concept analysis. This approach has been applied to a number of causes in reengineering. However, the lattices constructed by this approach can become rather large and complex. Hence, any approach that helps to reduce them can be beneficial to understanding the preprocessor-dependencies contained in the code. Here, we show how consistency analysis both within code variability and between code and a variability model can be used to reduce the complexity of a lattice, supporting the analysis of product-line code. We apply our approach to Linux, one of the largest open-source product lines, and analyze both multiple versions\u00a0\u2026", "num_citations": "1\n", "authors": ["1313"]}
{"title": "Mismatched Configuration Information of Linux\n", "abstract": " abstract Context. Software product line engineering has been established to minimize costs and efforts, while maximizing the quality of products in a family of software products. Software product lines typically contain a variability model, which supports the derivation of permissible variants. These variability models may contain expert/domain knowledge in the form of constraints. These constraints are used during the configuration process to avoid the selection of unsupported product variants. Problem. Developers must encode their knowledge about supported product variants and restrictions, otherwise the variability model becomes ineffective or even incorrect. The initial development of the variability model as well as the evolution of the product line implementation bear the risk that model and implementation drift apart. In this report, we introduce the notion of mismatched configuration information to describe the\u00a0\u2026", "num_citations": "1\n", "authors": ["1313"]}
{"title": "Experience from implementing a complex eclipse extension for software product line engineering\n", "abstract": " Software Product Line Engineering (SPLE) is a systematic approach for the development of related software products. These products share a common infrastructure but vary with respect to their individual capabilities, called variabilities. Variability management is a key part of SPLE and is responsible for developing, combining and configuring such variabilities. As these activities are inherently complex, SPLE significantly benefits from tool-support. We developed a customizable Eclipse extension for SPLE that consists of around 38 plug-ins. The resulting tool, called EASy-Producer, extends the Eclipse IDE by the capability to support the creation and management of software product line projects. To provide this capability, EASy-Producer utilizes the extension concepts of the Eclipse platform and integrates additional frameworks, like Xtext. In this paper, we share our experience while applying the Eclipse\u00a0\u2026", "num_citations": "1\n", "authors": ["1313"]}
{"title": "Factors Influencing Collaborative Creativity in Requirements Engineering: Analysis and Practical Advice\n", "abstract": " Requirements engineering is often a process within which an interdisciplinary group of people have to arrive at a novel and valuable solution to a complex design problem in which they all share a stake. In such situations, requirements engineering requires creativity, and typically involves intensive communication and negotiation. Collaborative creativity can thus be essential for effective requirements engineering in these cases. Few studies have concentrated on understanding the implications of this need for collaborative creativity, however, and there is limited advice for practitioners. This paper therefore explains the collaboratively creative nature of requirements engineering, based upon a literature review and the results of a survey of experts. It then develops a list of factors influencing collaborative creativity and provides advice for practitioners on how to deal with them.", "num_citations": "1\n", "authors": ["1313"]}
{"title": "Produktlinienentwicklung\n", "abstract": " Ans\u00e4tze zur Produktlinienentwicklung zielen auf die integrierte Entwicklung einer gro\u00dfen Anzahl von Softwareprodukten. Durch diese Integration soll inhaltlich \u00e4hnliche Funktionalit\u00e4t durch eine gemeinsame Implementierung realisiert werden, die in allen Systemen wiederverwendet wird. Die Einf\u00fchrung eines Produktlinienentwicklungsansatzes erfordert bestimmte methodische Kompetenzen wie Scoping oder Variabilit\u00e4tsmanagement und wird durch spezielle Realisierungsans\u00e4tze unterst\u00fctzt. Bisherige Industrieerfahrungen haben gezeigt, dass eine erfolgreiche Produktlinienentwicklung zu deutlichen Vorteilen in Bezug auf Kosten, Qualit\u00e4t und Entwicklungszeit f\u00fchrt.", "num_citations": "1\n", "authors": ["1313"]}
{"title": "Automatisierte Kreativit\u00e4tsunterst\u00fctzung in der Anforderungserhebung\n", "abstract": " Traditionell wird die Anforderungserhebung vor allem als eine reine Erfassung existierender W\u00fcnsche gesehen. In letzter Zeit setzt sich jedoch die Ansicht durch, dass Anforderungen f\u00fcr neue Produkte meist erst entwickelt werden m\u00fcssen; Anforderungserhebung also mit Innovation verbunden ist. Damit ist auch das Interesse an der Unterst\u00fctzung von Kreativit\u00e4t in der Anforderungserhebung stark gewachsen. Kreativit\u00e4tsunterst\u00fctzung wird meist im Zusammenhang mit moderierten Workshops gesehen. Hier stellen wir jedoch einen Ansatz dar, bei dem ein Assistenzsystem basierend auf modelliertem Wissen versucht zus\u00e4tzliche Anhaltspunkte f\u00fcr die kreative Entwicklung von Anforderungen zu geben.", "num_citations": "1\n", "authors": ["1313"]}
{"title": "idSpace D2. 2\u2013Semantic meta-model, integration and transformations v1\n", "abstract": " This report introduces a topic maps based metamodel for crea-tivity techniques, creativity process, and idea maps as results from creativity process. It proposes a graph based and hierar-chical graph based transformation of idea maps for combination and integration of results of different creativity sessions. It fur-ther suggests a service composition model as an integration model based on service oriented architecture which integrates various creativity process supporting tools as services.", "num_citations": "1\n", "authors": ["1313"]}
{"title": "EASy-Producer-A Product Line Production Environment\n", "abstract": " In this paper, we describe EASy-producer, a prototypical production environment for software product lines (SPL), in particular for the realization of adaptive systems and dynamic SPL.", "num_citations": "1\n", "authors": ["1313"]}
{"title": "Deliverable D3. 1-Description of Context Awareness in idSpace: idSpace project deliverable\n", "abstract": " Deliverable D3.1 - Description of Context Awareness in idSpace: idSpace project deliverable \u2014 Aalborg University's Research Portal Skip to main navigation Skip to search Skip to main content Aalborg University's Research Portal Logo Dansk English Home Profiles Projects Publications Activities Research Units Facilities Press / Media Prizes Datasets Impacts Search by keywords, name or affiliation Deliverable D3.1 - Description of Context Awareness in idSpace: idSpace project deliverable Aimilia Tzanavari, George Sielis, Peter Dolog, Argyris Kouloumbis, Klaus Schmid Department of Computer Science Daisy - Center for Data-intensive Systems Research output: Book/Report \u203a Report \u203a Research Overview Projects (1) Original language English Publication status Published - 2008 Access to Document http://dspace.ou.nl/bitstream/1820/1662/1/idSpace%20D3.%20final%20%20EC%2028-11-2008.pdf \u2026", "num_citations": "1\n", "authors": ["1313"]}
{"title": "Ein Referenzmodell f\u00fcr Anforderungsspezifikationen\n", "abstract": " Viele verschiedene Ans\u00e4tze zur Modellierung von Anforderungen wurden im Verlauf der Zeit entwickelt. Doch der prinzipielle Zusammenhang zwischen diesen Notationen ist weitestgehend unklar. Im Rahmen der beschriebenen Arbeit wurde ein Referenzmodell abgeleitet, dass mehrere sehr verschiedene Notationen integriert. Das mittelfristige Ziel der beschriebenen Arbeiten ist eine Basis f\u00fcr die semi-automatische Transformation von Anforderungsmodellen zu bieten.", "num_citations": "1\n", "authors": ["1313"]}
{"title": "How Much Agility Do We Need?\u2014A View From A Product Line Perspective\n", "abstract": " I do not consider myself an agile supporter; nor am I in favor of heavy-weight methods. The true question to me is not whether to be agile and which method is best, but rather which is the most appropriate approach in a given situation.Four years ago, when we defined the PuLSE1 approach to product line software engineering, we did not define it as a fixed method, but rather we intended it to be a very flexible and adaptable approach to product line engineering (cf. Figure 1,[3]). In particular, this method introduces the concept of a customization step; a step to define the actual method instance to be applied [4].", "num_citations": "1\n", "authors": ["1313"]}