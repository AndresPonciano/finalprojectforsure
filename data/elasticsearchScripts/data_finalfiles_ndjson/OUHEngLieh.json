{"title": "An adaptability-driven model and tool for analysis of service profitability.(2016)\n", "abstract": " Profitability of adopting Software-as-a-Service (SaaS) solutions for existing applications is currently analyzed mostly in informal way. Informal analysis is unreliable because of the many conflicting factors that affect costs and benefits of offering applications on the cloud. We propose a quantitative economic model for evaluating profitability of migrating to SaaS that enables potential service providers to evaluate costs and benefits of various migration strategies and choices of target service architectures. In previous work, we presented a rudimentary conceptual SaaS economic model enumerating factors that have to do with service profitability, and defining qualitative relations among them. A quantitative economic model presented in this paper extends the conceptual model with equations that quantify these relations, enabling more precise reasoning about profitability of various SaaS implementation strategies\u00a0\u2026", "num_citations": "11\n", "authors": ["2220"]}
{"title": "Query rewriting for SWIFT (first) answers\n", "abstract": " Traditionally, the answer to a database query is construed as the set of all tuples that meet the criteria stated. Strict adherence to this notion in query evaluation is, however, increasingly unsatisfactory because decision makers are more prone to adopting an exploratory strategy for information search which we call \"getting some answers quickly, and perhaps more later\". From a decision-maker's perspective, such a strategy is optimal for coping with information overload and makes economic sense (when used in conjunction with a micropayment mechanism). These new requirements present new opportunities for database query optimization. In this paper, we propose a progressive query processing strategy that exploits this behavior to conserve system resources and to minimize query response time and user waiting time. This is accomplished by the heuristic decomposition of user queries into subqueries that can\u00a0\u2026", "num_citations": "9\n", "authors": ["2220"]}
{"title": "BugsInPy: a database of existing bugs in Python programs to enable controlled testing and debugging studies\n", "abstract": " The 2019 edition of Stack Overflow developer survey highlights that, for the first time, Python outperformed Java in terms of popularity. The gap between Python and Java further widened in the 2020 edition of the survey. Unfortunately, despite the rapid increase in Python's popularity, there are not many testing and debugging tools that are designed for Python. This is in stark contrast with the abundance of testing and debugging tools for Java. Thus, there is a need to push research on tools that can help Python developers.", "num_citations": "8\n", "authors": ["2220"]}
{"title": "Applying case-based learning for a postgraduate software architecture course\n", "abstract": " Software architecture remains a difficult subject for learners to grasp and for educators to teach given its level of abstraction. On the other hand, case-based learning (CBL) is a popular teaching approach used across disciplines especially in business, medicine and law where students work in groups apply their knowledge to solve real-world case studies, or scenarios using their reasoning skills and existing theoretical knowledge. In this paper, we provide how we apply case-based learning to address the challenge in teaching a postgraduate software architecture course. Our learners are postgraduate students taking a master's program in software engineering. We first describe our design of case-based learning for our software architecture course. We then analyse the survey ratings and learners' profile to evaluate the effectiveness of the proposed case-based design. These data are gathered from 9 class runs\u00a0\u2026", "num_citations": "6\n", "authors": ["2220"]}
{"title": "Exploring Experiential Learning Model and Risk Management Process for an Undergraduate Software Architecture Course\n", "abstract": " This paper shares our insights on exploring the experiential learning model and risk management process to design an undergraduate software architecture course. The key challenge for undergraduate students to appreciate software architecture design is usually their limited experience in the software industry. In software architecture, the high-level design principles are heuristics lacking the absoluteness of first principles which for inexperienced undergraduate students, this is a frustrating divergence from what they used to value. From an educator's perspective, teaching software architecture requires contending with the problem of how to express this level of abstraction practically and also make the learning realistic. In this paper, we propose a model adapting the concepts of experiential learning and risk management to design the course on software architecture. The lesson plan promotes active learning with\u00a0\u2026", "num_citations": "6\n", "authors": ["2220"]}
{"title": "Teaching adult learners on software architecture design skills\n", "abstract": " Software architectures present high-level views of systems, enabling developers to abstract away the unnecessary details and focus on the overall big picture. Designing a software architecture is an essential skill in software engineering and adult learners are seeking this skill to further progress in their career. With the technology revolution and advancements in this rapidly changing world, the proportion of adult learners attending courses for continuing education are increasing. Their learning objectives are no longer to obtain good grades but the practical skills to enable them to perform better in their work and advance in their career. Teaching software architecture to upskill these adult learners requires contending with the problem of how to express this level of abstraction practically and also make the learning realistic. We provide here our seven years' history of teaching software architecture of information\u00a0\u2026", "num_citations": "4\n", "authors": ["2220"]}
{"title": "Did our Course Design on Software Architecture meet our Student\u2019s Learning Expectations?\n", "abstract": " This Innovative Practice Full Paper discusses our course design on software architecture to meet the learning expectations of two groups of software engineers. Software engineers with working experiences frequently find themselves the need to upskill in their lifelong learning journey. Their learning expectations are shaped not just by their need to know but also other learning characteristics such as their working experiences. In many cases, we design courses based on the required learning outcomes and assessment criteria. In this paper, we wish to find out whether our course design on software architecture has met the learning expectations of our students over eight years. Our study data involves two groups of software engineers to upskill in two courses (1) software engineering practitioners taking a public software architecture design course (2) postgraduate students taking a Master\u2019s level software\u00a0\u2026", "num_citations": "3\n", "authors": ["2220"]}
{"title": "Do my students understand? Automated identification of doubts from informal reflections\n", "abstract": " Traditionallyteaching is usually one directional where the instructor imparts knowledge andthere is minimal interaction between learners and instructor. With the focus onlearner-centred pedagogy, it can be a challenge to provide timely and relevantguidance to individual learners according to their levels of understanding. Oneof the options available is to collect reflections from learners after eachlesson to extract relevant and high-value feedback so that doubts or questionscan be addressed in a timely manner. In this paper, we derived an approach toautomate the identification of doubts from the informal reflections through featuresanalysis and machine learning. Using reflections as a feedback mechanism andaligning it to the weekly course content can pave way to a promising approachfor learner-centered teaching and personalized learning.", "num_citations": "3\n", "authors": ["2220"]}
{"title": "A conceptual model to evaluate decisions for service profitability.(2015)\n", "abstract": " Service profitability depends on the cost of engineering a service for a given base of tenants, on service provisioning cost, and on the revenue gained from selling the service to that tenant base. The tenant base depends on the range of service variability, ie, on Service Provider's ability to vary service requirements to meet tenant expectations. These various factors that have to do with service profitability form a complex web of information that makes it difficult to analyze and see the exact impact of decisions regarding the choice of service architecture or the use of service adaptation techniques. To make this analysis easier for Service Providers, we built a conceptual model that helps Service Providers identity factors affecting service profitability and the interplay among them. Based on that model, Service Providers can answer questions regarding how choices of the service architecture or tenant base affect service profitability.", "num_citations": "3\n", "authors": ["2220"]}
{"title": "Designing Learning Activities for Experiential Learning in a Design Thinking Course\n", "abstract": " The experiential learning method aligns well for a design thinking course. While many studies advocate the benefits of how experience influences the learning process, there are also critiques that argue the complexity of experiences with uncontrolled environment. In a course design with experiential learning, the learning activities have to be designed to maximize learning effectiveness of the participants. One design challenge is the duration of these learning activities for experiential learning. These learning activities take up time and effort for teachers to design and student to perform. Proper design of the number and type of activities based on their effectiveness in achieving their learning outcome is required. Another design challenge is the minimum instructional guidance of these learning activities which potentially impact the learning effectiveness of novice students. In this paper, we describe our experiences\u00a0\u2026", "num_citations": "2\n", "authors": ["2220"]}
{"title": "Evaluating Methods for Students to Identify and Clarify Doubts in Computing Design Courses\n", "abstract": " This full paper evaluates the effectiveness of doubts identification and clarification methods applied in undergraduate computing design courses. Many undergraduate courses in computing require students to understand abstract design concepts. Exposed to the design concepts for the first time, students need to be able to identify and clarify their doubts about the abstract concepts in order to make the right design decisions. In this study, we seek to evaluate the effectiveness of six methods that help students to identify and clarify their doubts. These methods vary in their timing (immediate or delayed), communication style (online or face-to-face) and participation style (individual or group-based). We conduct surveys on the effectiveness of these methods in two undergraduate computing design courses, a course on design thinking and another on software architecture design. We evaluate the quantitative and\u00a0\u2026", "num_citations": "1\n", "authors": ["2220"]}
{"title": "A longitudinal study of a capstone course\n", "abstract": " This is a 7 years study on a capstone course completed by 1700+ students for 200+ organizations involving 300+ projects. Student teams deliver a system to solve real-world problems proposed by industry partners. We want to understand what independent variables influence student performance. We analyzed the deployment status of systems delivered, the type of organization/industry, the number of meetings and the technology used. Our results show some organization value proof of concept over fully deployed systems, student strengths are in Infocomm and Finance projects, the number of meetings is a weak correlation to performance and best performing projects are fully deployed on iOS using Microsoft technologies. Faculty can use these insights to focus on factors such as the type of industry projects and technology used. They may not be overly concern if student teams have fewer meetings or did not fully deployed their system, so long as they create value.", "num_citations": "1\n", "authors": ["2220"]}