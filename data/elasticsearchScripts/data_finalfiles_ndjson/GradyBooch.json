{"title": "The unified modeling language user guide\n", "abstract": " For Nearly Ten Years, The Unified Modeling Language (Uml) Has Been The Industry Standard For Visualizing, Specifying, Constructing, And Documenting The Artifacts Of A Software-Intensive System. As The De Facto Standard Modeling Language, The Uml Facilitates Communication And Reduces Confusion Among Project Stakeholders. The Recent Standardization Of Uml 2.0 Has Further Extended The Language'S Scope And Viability. Its Inherent Expressiveness Allows Users To Model Everything From Enterprise Information Systems And Distributed Web-Based Applications To Real-Time Embedded Systems. The In-Depth Coverage And Example-Driven Approach That Made The First Edition Of The Unified Modeling Language User Guide An Indispensable Resource Remain Unchanged. However, Content Has Been Thoroughly Updated To Reflect Changes To Notation And Usage Required By Uml 2.0.", "num_citations": "14441\n", "authors": ["620"]}
{"title": "Object-oriented analysis and design with applications\n", "abstract": " Object Oriented Analysis and Design with Applications (3rd ed.) is written by Grady Booch; Robert A. Maksimchuk; Michael W. Engle; Bobbi J. Young, Ph. D; Jim Conallen; and Kelli A. Houston. Published by Addison-Wesley,\u00a9 2007, ISBN 0-201-89551-X, 691 pages, $64.99 US. This 3rd edition is the eagerly and long awaited update to the 2nd edition which was published in 1994. It provides thorough and practical coverage of concepts, techniques, notations and examples for modern object-oriented analysis and design. The material covered draws upon a solid foundation of theoretical work but is consistently pragmatic in approach. This book provides an essential body of knowledge for professionals responsible for the analysis and design of complex systems. As with the second edition, the book is organized into three major sections\u2013Concepts, Method and Applications. Concepts introduces the fundamental\u00a0\u2026", "num_citations": "9078\n", "authors": ["620"]}
{"title": "The unified modeling language reference manual\n", "abstract": " \" Comprehensive and instructive, written by a person with the insights of not only the technical matters, but also the processes that led to the UML language and its version 2.0. This book should be a companion for every serious UML modeler.\u201d-\u00d8ystein Haugen, Ericsson Representative in the OMG UML 2.0 Standardization, Associate Professor, University of Oslo", "num_citations": "8671\n", "authors": ["620"]}
{"title": "Object oriented design with applications\n", "abstract": " The most popular software engineering methodologies in the 1980s were entity modeling and structured analysis and design. A few problems have been uncovered over the years, however. These methodologies concentrate only on one or another aspect of the target system. In entity modeling, for example, the emphasis is on the static relationships of data, whereas in structured analysis, the emphasis is on the relationships among processes. Besides, the average software system has increased so much in size and complexity that it is no longer practical to develop a system as a single entity, even with a top-down approach. Furthermore, every component of the system is assumed to be designed and implemented from scratch. The reuse of the same model for different purposes is explicitly discouraged. Object-oriented analysis and design have emerged quickly in the last few years and are considered to be the\u00a0\u2026", "num_citations": "4757\n", "authors": ["620"]}
{"title": "El proceso unificado de desarrollo de software\n", "abstract": " 3.3. 3. LOS casos de uso especifican el sistema................... An\u00e1lisis, dise\u00f1o e implementaci\u00f3n para realizar los casos de uso...... 34. l. Creaci\u00f3n del modelo de an\u00e1lisis a partir de los casos de uso... 3.4. 2. Cada clase debe cumplir todos sus roles de colaboraci\u00f3n..... 3.4. 3. Creaci\u00f3n del modelo de dise\u00f1o a partir del modelo de an\u00e1lisis.. 344. Los subsistemas agrupan a las clases..................... 3.4. 5. Creaci\u00f3n del modelo de implementaci\u00f3n a partir del modelo de dise\u00f1o---------------------------------------------", "num_citations": "1653\n", "authors": ["620"]}
{"title": "Object-oriented development\n", "abstract": " Object-oriented development is a partial-lifecycle software development method in which the decomposition of a system is based upon the concept of an object. This method is fundamentally different from traditional functional approaches to design and serves to help manage the complexity of massive software-intensive systems. The author examines the process of object-oriented development as well as the influences upon this approach from advances in abstraction mechanisms, programming languages, and hardware. The concept of an object is central to object-oriented development and so the properties of an object are discussed. The mapping of object-oriented techniques to Ada using a design case study is considered.", "num_citations": "1613\n", "authors": ["620"]}
{"title": "Core J2EE patterns: best practices and design strategies\n", "abstract": " \" The Java landscape is littered with libraries, tools, and specifications. What's been lacking is the expertise to fuse them into solutions to real-world problems. These patterns are the intellectual mortar for J2EE software construction.\"--John Vlissides, co-author of Design Patterns, the\" Gang of Four\" book\" The authors of Core J2EE Patterns have harvested a really useful set of patterns. They show how to apply these patterns and how to refactor your system to take advantage of them. It's just like having a team of experts sitting at your side.\"--Grady Booch, Chief Scientist, Rational Software Corporation\" The authors do a great job describing useful patterns for application architectures. The section on refactoring is worth the price of the entire book!\"--Craig McClanahan, Struts Lead Architect and Specification Lead for JavaServer Faces\" Core J2EE Patterns is the gospel that should accompany every J2EE application server... Built upon the in-the-trenches expertise of its veteran architect authors, this volume unites the platform's many technologies and APIs in a way that application architects can use, and provides insightful answers to the whys, whens, and hows of the J2EE platform.\"--Sean Neville, JRun Enterprise Architect, Macromedia Developers often confuse learning the technology with learning to design with the technology. In this book, senior architects from the Sun Java Center share their cumulative design experience on Java 2 Platform, Enterprise Edition (J2EE) technology. The primary focus of the book is on patterns, best practices, design strategies, and proven solutions using the key J2EE technologies including JavaServer Pages (TM\u00a0\u2026", "num_citations": "1520\n", "authors": ["620"]}
{"title": "Software engineering with Ada\n", "abstract": " Introduction. The Software Crisis. The Ada Culture. 2. Software Engineering. Goals of Software Engineering. Principles of Software Engineering. Approaches to Software Development. Languages and Software Development. 3. Object-Oriented Design. Limitations of Functional Methods. An Object-Oriented Design Method. Ada as a Design Language. 4. An Overview Of The Language. Requirements for the Language. Ada from the Top Down. Ada from the Bottom Up. Summary of Language Characteristics. Data Structures. 5. The First Design Problem: Document Concordance. Define the Problem. Identify the Objects. Identify the Operations. Establish the Visibility. Establish the Interface. Implement Each Object. 6. Data Abstraction And Ada's Types. Data Abstraction. Types. Object Declarations. 7. The Second Design Problem: Data Base System. Define the Problem. Identify the Objects. Identify the Operations. Establish the Visibility. Establish the Interface. Algorithms And Control. 8. Subprograms. The Form of Ada Subprograms. Subprogram Calls. Applications for Ada Subprograms. 9. Expressions And Statements. Names. Values. Expressions. Statements. 10. The Second Design Problem: Continued. The Problem Revisited. Evaluate the Objects. Implement Each Object. Packaging Concepts. 11. Packages. The Form of Ada Packages. Packages and Private Types. Applications for Ada Packages. 12. Generic Program Units. The Form of Ada Generic Program Units. Generic Parameters. Applications for Ada Generic Program Units. 13. The Third Design Problem: Generic Tree Package. Define the Problem. Identify the Objects. Identify the Operations\u00a0\u2026", "num_citations": "1169\n", "authors": ["620"]}
{"title": "UML: guia do usu\u00e1rio\n", "abstract": " A UML, Linguagem Unificada de Modelagem, \u00e9 uma linguagem gr\u00e1fica para visualiza\u00e7\u00e3o, especifica\u00e7\u00e3o, constru\u00e7\u00e3o e documenta\u00e7\u00e3o de artefatos de sistemas complexos de software. A UML proporciona uma forma-padr\u00e3o para a prepara-\u00e7\u00e3o de planos de arquitetura de projetos de sistemas, incluindo aspectos conceituais tais como processos de neg\u00f3cios e fun\u00e7\u00f5es do sistema, al\u00e9m de itens con-cretos como as classes escritas em determinada linguagem de programa\u00e7\u00e3o, es-quemas de bancos de dados e componentes de software reutiliz\u00e1veis. Este livro ensina a usar a UML de maneira efetiva, e aborda a UML vers\u00e3o 2.0.", "num_citations": "1081\n", "authors": ["620"]}
{"title": "El lenguaje unificado de modelado: gu\u00eda del usuario\n", "abstract": " Sinopsis: Durante casi una d\u00e9cada, el lenguaje unificado de modelado (UML) ha sido el est\u00e1ndar de la industria para visualizar, especificar, construir y documentar los artefactos de los sistemas software. Como lenguaje de modelado est\u00e1ndar de facto, UML favorece la comunicaci\u00f3n y reduce la confusi\u00f3n entre los participantes de un proyecto software. La viabilidad y el \u00e1mbito del lenguaje han crecido con la reciente estandarizaci\u00f3n de UML 2.0", "num_citations": "787\n", "authors": ["620"]}
{"title": "Software component with ADA\n", "abstract": " Software Component with ADA | Guide books ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksSoftware Component with ADA Export Citation Select Citation format Download citation Copy citation Categories Journals Magazines Books Proceedings SIGs Conferences Collections People About About ACM Digital Library Subscription Information Author Guidelines Using ACM Digital Library All Holdings within the ACM Digital Library ACM Computing Classification System Join Join ACM Join SIGs Subscribe to Publications Institutions and Libraries Connect Contact Facebook Twitter Linkedin The ACM Digital Library is published by \u2026", "num_citations": "729\n", "authors": ["620"]}
{"title": "Object solutions: managing the object-oriented project\n", "abstract": " Having achieved notable recognition writing about object-oriented development methodology, Booch tries his pen at explaining how to manage an object-oriented project. This book is intended to address the issues of management \u201cby offering pragmatic advice on the recommended practices [136 of them] and rules of thumb [79] used by successful projects.\u201d It is directed to project managers and senior programmers, and is based on Boochs experience in \u201chundreds of projects.\u201d The book is organized into seven chapters: First Principles Products and Processes The Macro Process The Micro Process The Development Team Management and Planning Special Topics Back matter includes an index, a glossary, a well-selected bibliography of 30 entries, and summaries of the recommended practices and rules of thumb (which would have been more helpful had they been cross-referenced to the body of the text). The\u00a0\u2026", "num_citations": "559\n", "authors": ["620"]}
{"title": "UML distilled: a brief guide to the standard object\n", "abstract": " Aims1. To provide an understanding of and the ability to evaluate approaches to developing corporate information systems.", "num_citations": "546\n", "authors": ["620"]}
{"title": "El Lenguaje Unificado de Modelado. Manual de Referencia.\n", "abstract": " Repositori Digital Instituto Superior Jap\u00f3n: EL LENGUAJE UNIFICADO DE MODELADO. MANUAL DE REFERENCIA. Skip navigation DSpace logo Home Browse Communities & Collections Browse Items by: Issue Date Author Title Subject Sign on to: My DSpace Receive email updates Edit Profile DSpace JSPUI DSpace logo 1.Repositori Digital Instituto Superior Jap\u00f3n 2.INSTITUTO SUPERIOR TECNOL\u00d3GICO JAP\u00d3N 3.BIBLIOTECA 4.LIBROS DE DESARROLLO DE SOFTWARE Please use this identifier to cite or link to this item: http://190.57.147.202:90/xmlui/handle/123456789/976 Title: EL LENGUAJE UNIFICADO DE MODELADO. MANUAL DE REFERENCIA. Authors: J. Rumbaugh, I. Jacobson, G. Booch Issue Date: 2007 URI: http://190.57.:90/xmlui/handle/123456789/976 Appears in Collections: LIBROS DE DESARROLLO DE SOFTWARE Files in This Item: File Description Size Format El lenguaje unificado \u2026", "num_citations": "509\n", "authors": ["620"]}
{"title": "Collaborative development environments\n", "abstract": " A collaborative development environment (CDE) is a virtual space wherein all the stakeholders of a project\u2013even if distributed by time or distance\u2013may negotiate, brainstorm, discuss, share knowledge, and generally labor together to carry out some task, most often to create an executable deliverable and its supporting artifacts. CDE\u2019s are particularly useful as places where engineers may collaborate to solve problems. Here we focus on software developers in their tasks of designing, implementing, deploying, and maintaining high quality software-intensive systems where they are physically separated and make use of the Internet as the basis for their interactions.In this paper, we examine the points of friction in the software development process and the mechanisms that reduce that friction. We then survey a variety of sites, both inside and outside the software domain, which provide some of these mechanisms. We conclude with observations as to what a CDE is, what it is not, and what it can become.", "num_citations": "246\n", "authors": ["620"]}
{"title": "Component-based software engineering\n", "abstract": " Pick up just about any software trade journal, and you'll find yourself inundated with something about components; there's Microsoft's DNA, Sun's Enterprise JavaBeans and Java Platform for the Enterprise, IBM's San Fransisco project, the componentization of SAP's R/3-the list goes on.", "num_citations": "245\n", "authors": ["620"]}
{"title": "Unified method for object-oriented development\n", "abstract": " CiNii \u8ad6\u6587 - Unified Method for Object-Oriented Development CiNii \u56fd\u7acb\u60c5\u5831\u5b66\u7814\u7a76\u6240 \u5b66\u8853\u60c5\u5831 \u30ca\u30d3\u30b2\u30fc\u30bf[\u30b5\u30a4\u30cb\u30a3] \u65e5\u672c\u306e\u8ad6\u6587\u3092\u3055\u304c\u3059 \u5927\u5b66\u56f3\u66f8\u9928\u306e\u672c\u3092\u3055\u304c\u3059 \u65e5\u672c\u306e\u535a\u58eb\u8ad6\u6587\u3092\u3055\u304c\u3059 \u65b0\u898f \u767b\u9332 \u30ed\u30b0\u30a4\u30f3 English \u691c\u7d22 \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u9589\u3058\u308b \u30bf\u30a4\u30c8\u30eb \u8457\u8005\u540d \u8457\u8005ID \u8457\u8005 \u6240\u5c5e \u520a\u884c\u7269\u540d ISSN \u5dfb\u53f7\u30da\u30fc\u30b8 \u51fa\u7248\u8005 \u53c2\u8003\u6587\u732e \u51fa\u7248\u5e74 \u5e74\u304b\u3089 \u5e74\u307e\u3067 \u691c\u7d22 \u691c\u7d22 \u691c\u7d22 CiNii\u7a93\u53e3 \u696d\u52d9\u306e\u518d\u958b\u306b\u3064\u3044\u3066 Unified Method for Object-Oriented Development BOOCH G. \u88ab\u5f15\u7528\u6587\u732e: 1\u4ef6 \u8457\u8005 BOOCH G. \u53ce\u9332\u520a\u884c\u7269 Documentation Set Version 0.8 Documentation Set Version \u5229\u7528\u3057\u305f\u6c4e\u7528\u30c9\u30e1\u30a4\u30f3\u30e2\u30c7\u30eb\u62bd\u51fa\u306b\u3088\u308b\u8981\u6c42\u5206\u6790\u652f\u63f4 \u5409\u7530 \u5c1a\u5fd7 , \u6c38\u7530 \u5b88\u7537 \u96fb\u5b50\u60c5\u5831\u901a\u4fe1\u5b66\u4f1a \u8ad6\u6587\u8a8c. D-1, \u60c5\u5831\u30fb\u30b7\u30b9\u30c6\u30e0 1-\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf 00079(00010), 687-694, 1996-10-25 \u53c2\u8003\u6587\u732e9\u4ef6 Tweet \u5404\u7a2e\u30b3\u30fc\u30c9 NII\u8ad6\u6587ID(NAID) 10000038955 \u8cc7\u6599\u7a2e\u5225 \u56f3\u66f8\u306e\u4e00\u90e8 \u30c7\u30fc\u30bf\u63d0\u4f9b\u5143 CJP\u5f15\u7528 \u2026", "num_citations": "229\n", "authors": ["620"]}
{"title": "The Unified Modeling Language\n", "abstract": " UML (Unified Modeling Language) adalah metode pemodelan secara visual sebagai sarana untuk merancang dan atau membuat software berorientasi objek. Karena UML ini merupakan bahasa visual untuk pemodelan bahasa berorientasi objek, maka semua elemen dan diagram berbasiskan pada paradigma object oriented. UML adalah salah satu tool/model untuk merancang pengembangan software yang berbasis object oriented. UML sendiri juga memberikan standar penulisan sebuah sistem blue print, yang meliputi konsep bisnis proses, penulisan kelas-kelas dalam bahasa program yang spesifik, skema database, dan komponenkomponen yang diperlukan dalam sistem software.Dengan menggunakan UML kita dapat membuat model untuk semua jenis aplikasi piranti lunak, dimana aplikasi tersebut dapat berjalan pada piranti keras, sistem operasi dan jaringan apapun, serta ditulis dalam bahasa pemrograman apapun. Tetapi karena UML juga menggunakan class dan operation dalam konsep dasarnya, maka ia lebih cocok untuk penulisan piranti lunak dalam bahasa-bahasa berorientasi objek seperti C++, Java, C# atau VB .NET. Walaupun demikian, UML tetap dapat digunakan untuk modeling aplikasi prosedural dalam VB atau C. Seperti bahasa-bahasa lainnya, UML mendefinisikan notasi dan syntax/semantik. Notasi UMLmerupakan sekumpulan bentuk khusus untuk menggambarkan berbagai diagram piranti lunak. Setiap bentuk memiliki makna tertentu, dan UML syntax mendefinisikan bagaimana bentuk-bentuk tersebut dapat dikombinasikan. Notasi UML terutama diturunkan dari 3 notasi yang telah ada sebelumnya: Grady\u00a0\u2026", "num_citations": "208\n", "authors": ["620"]}
{"title": "An\u00e1lisis y dise\u00f1o orientado a objetos\n", "abstract": " 7. Debe tambi\u00e9n enfrentarse la existencia de miles de m\u00f3dulos separados y esto implica un grupo de desarrolladores, nunca una \u00fanica persona. Esto implica m\u00e1s personas y por consiguiente una comunicaci\u00f3n m\u00e1s rigurosa y coordinaci\u00f3n m\u00e1s dif\u00edcil, m\u00e1s a\u00fan si el grupo y el proyecto se extienden geogr\u00e1ficamente.", "num_citations": "199\n", "authors": ["620"]}
{"title": "Das UML-Benutzerhandbuch\n", "abstract": " Diagramme sind die Hilfsmittel, die Ihnen eine Betrachtung dieser Bausteine erm\u00f6glichen. Ein Diagramm ist eine grafische Abbildung einer Reihe von Elementen, die am h\u00e4ufigsten als verbundener Graph aus Knoten (Dingen) und B\u00f6gen (Beziehungen) dargestellt werden. Diagramme werden eingesetzt, um das System aus verschiedenen Perspektiven zu visualisieren. Da ein komplexes System nicht \u00fcber eine einzige Perspektive vollst\u00e4ndig verstanden werden kann, sind in UML eine Anzahl von Diagrammen definiert, die es Ihnen erm\u00f6glichen, sich unabh\u00e4ngig voneinander auf unterschiedliche Aspekte Ihres Diagramms zu konzentrieren.", "num_citations": "157\n", "authors": ["620"]}
{"title": "UML in action\n", "abstract": " Rumbaugh\u2019s Object Modeling Technique (OMT). Other important methods included Fusion, Shlaer-Mellor, and Coad-Yourdon. Each of these was a complete method, although each was recognized as having strengths and weaknesses. In simple terms, the Booch method was particularly expressive during the design and construction phases of projects, OOSE provided excellent support for use cases as a way to drive requirements capture, analysis, and high-level design, and OMT-2 was most useful for analysis and dataintensive information systems. The behavioral component of many OO methods, including the Booch method and OMT, was the language of statecharts, invented in 1983 by David Harel. The UML effort started officially in October 1994, when Rumbaugh joined me at Rational Corporation. Our project\u2019s initial focus was the unification of the Booch and OMT methods. The version 0.8 draft of the\u00a0\u2026", "num_citations": "141\n", "authors": ["620"]}
{"title": "Object-oriented design\n", "abstract": " The current software depression is characterized by software that is late, erroneous, and costly. Experience indicates that the application of appropriate design methodolgies, embodied in a high-order language, is appropriate in combatting this depression. In particular, this paper describes an object-oriented design methodology, using Ada as the implementation language.", "num_citations": "111\n", "authors": ["620"]}
{"title": "The unified modeling language reference manual\n", "abstract": " This book is intended to be a complete and useful reference to the Unified Modeling Language (UML) for the developer, architect, project manager, system engineer, programmer, analyst, contracting officer, customer, and anyone else who needs to specify, design, build, or understand complex software systems. It provides a full reference to the concepts and constructs of UML, including their semantics, syntax, notation, and purpose. It is organized to be a convenient but thorough reference for the working professional developer. It also attempts to provide additional detail about issues that may not be clear from the standards documents and to provide a rationale for many decisions that went into the UML. This book is not intended as a guide to the UML standards documents or to the internal structure of the metamodel contained in them. The details of the metamodel are of interest to methodologists and UML tool\u00a0\u2026", "num_citations": "108\n", "authors": ["620"]}
{"title": "The unified process\n", "abstract": " The following article is the introductory chapter from The Unified Development Process by Ivar Jacobson, Grady Booch, and James Rumbaugh. These \u201cthree amigos\u201d have been influential in creating a standardized object-oriented analysis and design notation, UML. This offering describes the three amigos\u2019 vision of a standardized software development process.\u2014Steve McConnell, editor-in-chief", "num_citations": "100\n", "authors": ["620"]}
{"title": "Le guide de l'utilisateur UML\n", "abstract": " Dans Le guide de l'utilisateur UML, les cr\u00e9ateurs du langage UML (Grady Booch, James Rumbaugh et Ivar Jacobson) pr\u00e9sentent les diff\u00e9rents aspects du langage sous une forme claire et d\u00e9taill\u00e9e qui facilite son apprentissage. Cet ouvrage permettra au lecteur de:\u2022 d\u00e9couvrir ce qu'est UML et ce qu'il n'est pas;\u2022 ma\u00eetriser le vocabulaire et les r\u00e8gles d'UML;\u2022 comprendre comment appliquer UML dans des situations de mod\u00e9lisation courantes\u2022 profiter de l'exp\u00e9rience et du savoir-faire des concepteurs d'UML. A qui s' adresse ce livre?\u2022 \u00e0 toutes les personnes impliqu\u00e9es dans des projets de d\u00e9veloppement logiciel ma\u00eetres d'ouvrage, chefs de projet, analystes et concepteurs, architectes logiciel, d\u00e9veloppeurs, etc.\u2022 \u00e0 tous les programmeurs C++, Java ou autres qui souhaitent mod\u00e9liser avant de se lancer dans l'\u00e9criture de code;\u2022 aux \u00e9tudiants en informatique (cursus g\u00e9nie logiciel ou mod\u00e9lisation UML), qui pourront\u00a0\u2026", "num_citations": "96\n", "authors": ["620"]}
{"title": "Deformations of singularities\n", "abstract": " These notes deal with deformation theory of complex analytic singularities and related objects. The first part treats general theory. The central notion is that of versal deformation in several variants. The theory is developed both in an abstract way and in a concrete way suitable for computations. The second part deals with more specific problems, specially on curves and surfaces. Smoothings of singularities are the main concern. Examples are spread throughout the text.", "num_citations": "89\n", "authors": ["620"]}
{"title": "Reusing open-source software and practices: The impact of open-source on commercial vendors\n", "abstract": " One of the most intriguing ways that commercial developers of software can become more efficient is to reuse not only software but also best practices from the open-source movement. The open-source movement encompasses a wide collection of ideas, knowledge, techniques, and solutions. Commercial software vendors have an opportunity to both learn from the open-source community, as well as leverage that knowledge for the benefit of its commercial clients. This paper looks at a number of the characteristics of the open-source movement, offers a categorization of open-source dimensions, and provides an analysis of the opportunities available to commercial software vendors when applying the lessons from the open-source movement.", "num_citations": "89\n", "authors": ["620"]}
{"title": "Unified Modeling Language, Version 1.1\n", "abstract": " CiNii \u8ad6\u6587 - Unified Modeling Language, Version 1.1 CiNii \u56fd\u7acb\u60c5\u5831\u5b66\u7814\u7a76\u6240 \u5b66\u8853\u60c5\u5831\u30ca\u30d3\u30b2\u30fc\u30bf [\u30b5\u30a4\u30cb\u30a3] \u65e5\u672c\u306e\u8ad6\u6587\u3092\u3055\u304c\u3059 \u5927\u5b66\u56f3\u66f8\u9928\u306e\u672c\u3092\u3055\u304c\u3059 \u65e5\u672c\u306e\u535a\u58eb\u8ad6\u6587\u3092\u3055\u304c\u3059 \u65b0\u898f\u767b\u9332 \u30ed\u30b0\u30a4\u30f3 English \u691c\u7d22 \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u9589\u3058\u308b \u30bf\u30a4\u30c8\u30eb \u8457\u8005\u540d \u8457\u8005ID \u8457\u8005\u6240\u5c5e \u520a\u884c\u7269\u540d ISSN \u5dfb\u53f7\u30da\u30fc\u30b8 \u51fa\u7248\u8005 \u53c2\u8003\u6587\u732e \u51fa\u7248\u5e74 \u5e74\u304b\u3089 \u5e74\u307e\u3067 \u691c\u7d22 \u691c\u7d22 \u691c\u7d22 CiNii\u7a93\u53e3\u696d\u52d9\u306e\u518d\u958b \u306b\u3064\u3044\u3066 Unified Modeling Language, Version 1.1 BOOCH G. \u88ab\u5f15\u7528\u6587\u732e: 1\u4ef6 \u8457\u8005 BOOCH G. \u53ce\u9332\u520a\u884c\u7269 http://www.rational.com http://www.rational.com, 1997 Rational Software Corporation \u88ab\u5f15\u7528\u6587\u732e: 1\u4ef6\u4e2d 1-1\u4ef6\u3092 \u8868\u793a 1 \u30c7\u30fc\u30bf\u30b9\u30c8\u30ea\u30fc\u30e0\u30c0\u30a4\u30a2\u30b0\u30e9\u30e0\u306e\u63d0\u6848\u3068\u3053\u308c\u3092\u7528\u3044\u305f \u8a2d\u8a08\u624b\u9806\u306b\u3064\u3044\u3066\u306e\u4e00\u8003\u5bdf \u845b\u5c71 \u5584\u57fa , \u795e\u4ee3 \u77e5\u7bc4 \u60c5\u5831\u51e6\u7406\u5b66\u4f1a\u7814\u7a76\u5831\u544a. SE,\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u5de5\u5b66\u7814\u7a76\u4f1a \u5831\u544a 122, 49-54, 1999-03-18 \u53c2\u8003\u6587\u732e7\u4ef6 Tweet \u5404\u7a2e\u30b3\u30fc\u30c9 NII\u8ad6\u6587ID(NAID) 10020887152 \u8cc7\u6599\u7a2e\u5225 \u305d\u306e\u4ed6 \u30c7\u30fc\u30bf\u63d0\u4f9b\u5143 CJP\u5f15\u7528 \u66f8\u304d\u51fa\u3057 RefWorks\u306b\u66f8\u304d\u51fa\u3057 EndNote\u306b\u66f8\u304d\u51fa\u3057 \u2026", "num_citations": "80\n", "authors": ["620"]}
{"title": "Das UML-Benutzerhandbuch: aktuell zur Version 2.0\n", "abstract": " In dieser-lang erwarteten-\u00dcberarbeitung zur Version 2.0 der umfassenden Einf\u00fchrung in UML bieten die Entwickler der Sprache-Grady Brooch, James Rumbaugh, Ivar Jacobsen-eine Einf\u00fchrung, die sich mit den Kernpunkten befasst. Ausgehend von einer \u00dcbersicht \u00fcber UML wird die Sprache anhand der Vorstellung bestimmter Konzepte und Schreibweisen in jedem Kapitel Schritt f\u00fcr Schritt erl\u00e4utert. Das Buch sorgt einerseits f\u00fcr einen umfassenden \u00dcberblick \u00fcber alle Diagrammtypen sowie Elemente von UML in der zweiten Version und stellt andererseits den n\u00f6tigen Praxisbezug her, um UML 2.0 effektiv f\u00fcr eigene Projekte einzusetzen. Die tief greifenden Erl\u00e4uterungen und die an Beispielen orientierte Herangehensweise der Autoren, sorgen f\u00fcr ein schnelles Verst\u00e4ndnis des komplexen Themas.", "num_citations": "78\n", "authors": ["620"]}
{"title": "UML for XML schema mapping specification\n", "abstract": " This paper describes a graphical notation in UML for designing XML Schemas. UML (Unified Modeling Language) is a standard object-oriented design language that has gained virtually global acceptance among both tool vendors as well as software developers. UML has been standardized by the Object Management Group (OMG). XML Schema is an emerging standard from W3C. XML Schema is a language for defining the structure of XML document instances that belong to a specific document type. XML Schema can be seen as replacing the XML DTD syntax. XML Schema provides strong data typing, modularization and reuse mechanisms not available in XML DTDs. There is currently no W3C recommendation for XML Schema, although several have been proposed and W3C is actively working on producing a recommendation. This paper describes the relationship between UML and the SOX schema used by CommerceOne. Our intention is, however, to adapt the mapping to the W3C recommendation when that becomes available. W3C discussions up to this point indicate the notation described here will be upward compatible with the eventual recommendation.", "num_citations": "71\n", "authors": ["620"]}
{"title": "The design of the C++ Booch components\n", "abstract": " This paper describes design issues encountered developing a reusable component library. The design applied encapsulation, inheritance, composition and type parameterization. The implementation uses various C++ mechanisms, including: virtual and static member functions, templates, and exceptions.", "num_citations": "70\n", "authors": ["620"]}
{"title": "A software fault prevention approach in coding and root cause analysis\n", "abstract": " The complexity of Lucent Technologies' advanced 5ES\u00ae switching system makes the cost of finding, fixing, and retesting a software fault very high. The current 5ESS system contains several million lines of source code, which provide many complicated real-time switching function features. As customer demands for ever-increasing product quality compound the high cost of testing and reworking source code, it is crucial for the 5ESS Switching Development organization to find ways to prevent faults from being introduced into the software in the first place. The 5ESS Switch Coding Fault Prevention Team was assembled to find methods to prevent the most frequent faults from being injected into a product during coding. The Coding Fault Prevention Guidelines, developed by the team for use in various Lucent switching development organizations, lists the most frequent errors made during coding. It also provides\u00a0\u2026", "num_citations": "66\n", "authors": ["620"]}
{"title": "Designing an application framework\n", "abstract": " CiNii \u8ad6\u6587 - Designing an application framework CiNii \u56fd\u7acb\u60c5\u5831\u5b66\u7814\u7a76\u6240 \u5b66\u8853\u60c5\u5831\u30ca\u30d3\u30b2\u30fc\u30bf[\u30b5\u30a4\u30cb\u30a3 ] \u65e5\u672c\u306e\u8ad6\u6587\u3092\u3055\u304c\u3059 \u5927\u5b66\u56f3\u66f8\u9928\u306e\u672c\u3092\u3055\u304c\u3059 \u65e5\u672c\u306e\u535a\u58eb\u8ad6\u6587\u3092\u3055\u304c\u3059 \u65b0\u898f\u767b\u9332 \u30ed\u30b0\u30a4\u30f3 English \u691c\u7d22 \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u3059\u3079\u3066 \u672c\u6587\u3042\u308a \u9589\u3058\u308b \u30bf\u30a4\u30c8\u30eb \u8457\u8005\u540d \u8457\u8005ID \u8457\u8005\u6240\u5c5e \u520a\u884c\u7269\u540d ISSN \u5dfb\u53f7\u30da\u30fc\u30b8 \u51fa\u7248\u8005 \u53c2\u8003\u6587\u732e \u51fa\u7248\u5e74 \u5e74\u304b\u3089 \u5e74\u307e\u3067 \u691c\u7d22 \u691c\u7d22 \u691c\u7d22 CiNii\u7a93\u53e3\u696d\u52d9\u306e\u518d\u958b \u306b\u3064\u3044\u3066 Designing an application framework BOOCH G. \u88ab\u5f15\u7528\u6587\u732e: 1\u4ef6 \u8457\u8005 BOOCH G. \u53ce\u9332\u520a\u884c\u7269 Dr. Dobb's Journal Dr. Dobb's Journal 19(2), 24, 1994 \u88ab\u5f15\u7528\u6587\u732e: 1\u4ef6\u4e2d 1-1\u4ef6\u3092 \u8868\u793a 1 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8996\u899a\u5316\u3092\u5229\u7528\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u7406\u89e3\u652f\u63f4 \u4e2d\u6751 \u7950\u4e00 , \u30e9\u30f3\u30b2 \u30c0\u30cb- \u96fb\u5b50\u60c5\u5831\u901a\u4fe1 \u5b66\u4f1a\u8ad6\u6587\u8a8c. D-1, \u60c5\u5831\u30fb\u30b7\u30b9\u30c6\u30e0 1-\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf 00079(00010), 738-744, 1996-10-25 \u53c2\u8003\u6587\u732e 13\u4ef6 Tweet \u5404\u7a2e\u30b3\u30fc\u30c9 NII\u8ad6\u6587ID(NAID) 10000039046 \u8cc7\u6599\u7a2e\u5225 \u96d1\u8a8c\u8ad6\u6587 \u30c7\u30fc\u30bf\u63d0\u4f9b\u5143 CJP\u5f15\u7528 \u66f8\u304d\u51fa\u3057 RefWorks\u306b\u66f8\u304d\u51fa\u3057 EndNote\u306b\u66f8\u304d\u51fa\u3057 Mendeley\u306b\u66f8\u304d\u51fa\u3057 Refer/BiblX\u3067\u8868\u793a RIS\u3067\u2026", "num_citations": "62\n", "authors": ["620"]}
{"title": "Conception orient\u00e9e objets et applications\n", "abstract": " Ce livre contient cinq projets complets de conception de logiciels, bas\u00e9s sur les langages C++, Smalltalk, Pascal Objet, Common Lisp Object System (CLOS) et Ada.\" Conception orient\u00e9e objets et applications\" donne des conseils pratiques pour la construction de syst\u00e8mes orient\u00e9s objets complexes, et fournit pour la premi\u00e8re fois une description exhaustive des m\u00e9thodes de leur conception. De nombreux exemples-tir\u00e9s de la grande exp\u00e9rience de l'auteur dans le d\u00e9veloppement de tr\u00e8s gros logiciels-et cinq projets d'applications enseignent l'emploi des langages de programmation orient\u00e9s objets et bas\u00e9s objets pour solutionner des probl\u00e8mes concrets.", "num_citations": "54\n", "authors": ["620"]}
{"title": "Object technology in application development\n", "abstract": " In the information systems (IS) world, software for business applications is viewed in terms of three dimensions: the functions that the software must provide, the database that maintains the data on which these functions operate, and the interface that allows the users to interact with the application. In the 1960s and early 1970s, identifying, modeling, and implementing the application functions were considered to be the crucial aspects of application development, and software technologies were developed to support and enhance these activities. In the late 1970s and 1980s, database design and implementation were recognized as equally important activities in application development. This led to software technologies to support the specification, design, and implementation of application databases. In the 1990s, the power of the client workstation has made it possible to give users richer interfaces for interaction\u00a0\u2026", "num_citations": "41\n", "authors": ["620"]}
{"title": "UML: Unified Modeling Language\n", "abstract": " UML: Unified Modeling Language CS169 Lecture 5 Modeling \u2022 Describing a system at a high level of abstraction \u2022 Many notation Page 1 1 Prof. Brewer CS 169 Lecture 5 1 UML: Unified Modeling Language CS169 Lecture 5 Prof. Brewer CS 169 Lecture 5 2 Modeling \u2022 Describing a system at a high level of abstraction \u2013 A model of the system \u2013 Used for requirements and specification \u2022 Many notations over time \u2013 State machines \u2013 Entity-relationship diagrams \u2013 Dataflow diagrams \u2013 \u2026 see last lecture \u2026 Prof. Brewer CS 169 Lecture 5 3 Recent History: 1980\u2019s \u2022 The rise of object-oriented programming \u2022 New class of OO modeling languages \u2022 By early \u201990\u2019s, over 50 OO modeling languages Prof. Brewer CS 169 Lecture 5 4 Recent History: 1990\u2019s \u2022 Three leading OO notations decide to combine \u2013 Grady Booch (BOOCH) \u2013 Jim Rumbaugh (OML: Object Modeling Technique) \u2013 Ivar Jacobsen (OOSE: OO Soft. Eng) \u2022 Why? \u2013 \u2026", "num_citations": "40\n", "authors": ["620"]}
{"title": "The economics of architecture-first\n", "abstract": " Architecture is an artifact that's governed throughout the software life cycle - from conception through development to deployment and finally evolution, then to adaptation, assimilation, replacement, or abandonment. Similarly, the architect, either as an individual, a role, or a team, lovingly crafts, grows, and governs that architecture as it emerges from the thousands of individual design decisions of which it's composed. In this sense, an architecture-first approach appears to be a reflection of sound development practices. Now, strict agilists might counter that an architecture-first approach is undesirable because we should allow a system's architecture to emerge over time. More than just a reflection, however, a software development process that swirls around the growth of a software-intensive system's architecture has considerable material value.", "num_citations": "37\n", "authors": ["620"]}
{"title": "Developing the future\n", "abstract": " Software is arguably the word\u2019s most important industry. The presence of software has made possible many new businesses and is responsible for increased efficiencies in most traditional businesses. Software, both directly and indirectly through the domains it automates, connects people as well as serves, entertains, educates, protects, heals, and nourishes. Although there are only about 12 million software professionals worldwide, their reach is far, for the software industry is a prime force behind the recent global economic renaissance. That being said, there are three harsh realities that our industry faces: developing complex software of quality is wickedly hard, it\u2019s not getting any easier, and there is a very real shortage of skilled men and women to do the work. In the face of such pressure, there are pragmatically only two things a development organization can do. First, the best way to reduce the risk of software\u00a0\u2026", "num_citations": "37\n", "authors": ["620"]}
{"title": "Best of booch: Designing strategies for object technology\n", "abstract": " No one can dispute the impact Grady Booch's writings have had on object-oriented technology. Best of Booch contains articles on various object-oriented topics published since Grady Booch's book Object Oriented Modeling and Design with Applications. Designed for software professionals who are concerned about the success of their object-oriented projects, this volume covers all aspects of the Booch method and how a complete method must address a model's notation and semantics as well as a process for creating that model. Many of the articles have been updated to reflect the current thinking in the Unified Modeling Language (UML).", "num_citations": "36\n", "authors": ["620"]}
{"title": "Coming of age in an object-oriented world\n", "abstract": " The author predicts that increasing connectivity and consumer demands will power an unprecedented growth in software's volume and complexity, then explains why the flexibility and robustness of an object-oriented approach can best meet these future challenges.< >", "num_citations": "34\n", "authors": ["620"]}
{"title": "Enterprise architecture and technical architecture\n", "abstract": " Enterprise architecture and technical architecture are related yet different: whereas EA focuses on the architecture of a business that uses software-intensive systems, TA focuses on the architecture of the software-intensive systems that are used by a business to makes its mission manifest.", "num_citations": "31\n", "authors": ["620"]}
{"title": "The history of software engineering\n", "abstract": " Grady Booch, one of UML's original authors, offers his perspective on the history of software engineering. This article is part of a theme issue on software engineering's 50th anniversary. The Web Extra, a version of the article with an expanded bibliography, is at https://extras.computer.org/extra/mso2018050108s1.pdf.", "num_citations": "27\n", "authors": ["620"]}
{"title": "The irrelevance of architecture\n", "abstract": " The architecture of a software-intensive system is largely irrelevant to its end users. Far more important to these stakeholders is the system's behavior, exhibited by raw, naked, running code. Most interesting system tests should be based on the use cases that are identified incrementally over the system's life cycle, the same use cases that the system's architects used to guide their design decisions. Testers can conduct other system tests only after the system's architecture is crisp. Just as analysts use a system's architecture as scaffolding along which to climb and examine the details of every edge, so too can testers use a system's architecture to devise tests that are relevant to the particular texture of that implementation", "num_citations": "27\n", "authors": ["620"]}
{"title": "Software Architecture and the UML\n", "abstract": " Architecture and design are the same thing Architecture and infrastructure are the same thing< my favorite technology> is the architecture A good architecture is the work of a single architect Architecture is flat, one blueprint is enough Architecture is just structure System architecture precedes software architecture Architecture cannot be measured and validated Architecture is a Science Architecture is an Art", "num_citations": "27\n", "authors": ["620"]}
{"title": "The accidental architecture\n", "abstract": " Every interesting software-intensive system has an architecture. While some of these architectures are intentional, most appear to be accidental. Philippe Kruchten has observed that \"the life of a software architect is a long and rapid succession of suboptimal design decisions taken partly in the dark.\" The journey between vision and ultimate executable system is complex, and for every interesting software-intensive system that path is marked by myriad decisions, some large and some small, some of which advance progress while others represent vestigial dead ends or trigger points for scrap and rework. As Philippe also observes, the architecture of classical systems comes primarily from theft, whereas the architecture of unprecedented systems comes largely from intuition carried out in the context of a controlled exploratory process. The fact that this is so for software-intensive systems shouldn't come as a surprise\u00a0\u2026", "num_citations": "25\n", "authors": ["620"]}
{"title": "Unified Modeling Language (UML)\n", "abstract": " Softwareentwurf Page 1 Softwareentwurf WS 2004/05 Kapitel II: Das Pflichtenheft Kapitel II.2: Modell des Problembereichs 3.11.2004 Gregor Engels 1 Kapitel II: Das Pflichtenheft II.2: Modell des Problembereichs Prof. Dr. Gregor Engels AG Datenbank- und Informationssysteme Softwareentwurf Softwareentwurf 2004/05 Universit\u00e4t Paderborn - Gregor Engels 2 Kapitel II.2 Gliederung Pflichtenheft <-> Vorlesung \u220e Abschnitt 1: Zielbestimmung \u220e Abschnitt 2: Produkteinsatz \u220e Abschnitt 3: Produktfunktionen \u220e Abschnitt 4 Produktcharakteristiken \u220e Abschnitt 1: Zielbestimmung \u220e Abschnitt 2: Produkteinsatz \u220e Abschnitt 3: Produktfunktionen \u220e Abschnitt 4 Produktcharakteristiken 2.1 Beschreibung des Problembereichs 2.2 Glossar 2.3 Modell des Problembereichs 2.4 Gesch\u00e4ftsprozesse Page 2 Softwareentwurf WS 2004/05 Kapitel II: Das Pflichtenheft Kapitel II.2: Modell des Problembereichs 3.11.2004 Gregor Engels 2 \u2026", "num_citations": "25\n", "authors": ["620"]}
{"title": "Measuring architectural complexity\n", "abstract": " Without refactoring, complex software-intensive systems become increasingly irregular and thus increasingly chaotic over time. We can understand complex software systems only when they're nearly decomposable and hierarchic. One measure the author uses is lines of source code: the greater the SLOC, the more inertia to change the system will have, the more people it will take to keep it fed, the more stakeholders who will be crawling all over it. The author describes the more complex measures he uses; these are tuned to Philippe Kruchten's 4+1 view model of architecture. He also counts the number of identifiable design patterns at work. These metrics can generally be gathered automatically via clever mining of configuration management and testing data.", "num_citations": "24\n", "authors": ["620"]}
{"title": "Describing software design in Ada\n", "abstract": " Ada is a tool suitable for the efficient and reliable development of solutions to a large problem domain. To combat the FORTRAN mind set and exploit the full power of the language, top down functional methodo logies are insufficient, and thus an object-oriented methodology is required. This paper provides some observations on such a methodology with subsequent representation of software design in the Ada Programming Support Environment (APSE).", "num_citations": "24\n", "authors": ["620"]}
{"title": "Draw me a picture\n", "abstract": " Developers, for the most part, don't draw diagrams because diagrams all too often don't offer any fundamental value that advances essential work. Yet, the problem remains that we must visualize ultra-large complex systems that have no directly observable physical manifestation. Here we explore how we might reconcile these two opposing realities.", "num_citations": "23\n", "authors": ["620"]}
{"title": "Simplifying the Booch components\n", "abstract": " Simplifying the Booch Components | C++ gems ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksC++ gemsSimplifying the Booch Components chapter Simplifying the Booch Components Share on Authors: Grady Booch profile image Grady Booch View Profile , Michael J Vilot profile image Mike Vilot View Profile Authors Info & Affiliations Publication: C++ gemsMay 1996 Pages 59\u201389 0citation 0 Downloads Metrics Total Citations0 Total Downloads0 Last 12 Months0 Last 6 weeks0 Get Citation Alerts New Citation Alert added! This alert has been successfully added and will be sent to: You will be notified whenever a record that you \u2026", "num_citations": "22\n", "authors": ["620"]}
{"title": "The Unified method\n", "abstract": " This series of documents describes the Unified Method,* a method for specifying, visualizing, and documenting the artifacts of an object-oriented system under development. The Unified Method represents the unification of the Booch and OMT methods as well as the best ideas from a number of other methodologists. By unifying these two leading object-oriented methods, the Unified Method provides the basis for a defacto standard in the domain of object-oriented analysis and design founded on a wide base of user experience. Our focus in this current series of documents is upon the modeling constructs and notation that form the basis of the Unified Method. We specify the modeling constructs in a formal metamodel. It is this metamodel and its corresponding notation that are candidates for standardization, for they specify the semantics and representation of models, which are the primary tangible artifacts that can\u00a0\u2026", "num_citations": "21\n", "authors": ["620"]}
{"title": "The Booch method: process and pragmatics\n", "abstract": " The Booch method | Object development methods ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksObject development methodsThe Booch method: process and pragmatics chapter The Booch method: process and pragmatics Share on Author: Grady Booch View Profile Authors Info & Affiliations Publication: Object development methodsJuly 1994 Pages 149\u2013166 0citation 0 Downloads Metrics Total Citations0 Total Downloads0 Last 12 Months0 Last 6 weeks0 Get Citation Alerts New Citation Alert added! This alert has been successfully added and will be sent to: You will be notified whenever a record that you have chosen has \u2026", "num_citations": "21\n", "authors": ["620"]}
{"title": "Patterns\n", "abstract": " Patterns | The patterns handbooks ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksThe patterns handbooks: techniques, strategies, and applicationsPatterns chapter Patterns Share on Author: Grady Booch View Profile Authors Info & Affiliations Publication: The patterns handbooks: techniques, strategies, and applicationsJuly 1998 Pages 237\u2013241 2citation Get Citation Alerts New Citation Alert added! This alert has been successfully added and will be sent to: You will be notified whenever a record that you have chosen has been cited. To \u2026", "num_citations": "20\n", "authors": ["620"]}
{"title": "The human and ethical aspects of big data\n", "abstract": " Every line of code represents a moral decision; every bit of data collected, analyzed, and visualized has moral implications. The Web extra at http://youtu.be/iY7mU1mtQ08 is an audio podcast of author Grady Booch reading his On Computing column, in which he discusses how every line of code represents a moral decision and how every bit of data collected, analyzed, and visualized has moral implications.", "num_citations": "19\n", "authors": ["620"]}
{"title": "An architectural oxymoron\n", "abstract": " In this paper, oxymoron is discussed. An oxymoron is not a bovine of meager intelligence, nor is it a chemical compound with two covalently bound oxygen atoms. Rather, an oxymoron is a figure of speech that combines two seemingly contradictory terms and unites them in an apparent paradox. This paper focuses specifically on the oxymoron of agile software architecture.", "num_citations": "19\n", "authors": ["620"]}
{"title": "On architecture\n", "abstract": " For the past two years, the author has been working to create a handbook of software architecture (www.booch.com/architecture) and will continue to work on it for another two to three years. The handbook\u2019s primary goal is to codify the architecture of 100 interesting software-intensive systems, presenting them in a manner that exposes their essential patterns and permits comparisons across domains and architectural styles. In this ongoing column, Booch will share some of his experiences as he continues his research.", "num_citations": "18\n", "authors": ["620"]}
{"title": "Leaving Kansas\n", "abstract": " Booch responds to an article by Ed Yourdon (1998) that discussed the future of the software industry. Booch believes that the insatiable demand for software coupled with the shortage of software professionals is good news for those inside the industry.", "num_citations": "18\n", "authors": ["620"]}
{"title": "On the concepts of object-oriented design\n", "abstract": " On the concepts of object-oriented design | Modern software engineering, foundations and current perspectives ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Browse Browse Digital Library Collections More HomeBrowse by TitleBooksModern software engineering, foundations and current perspectivesOn the concepts of object-oriented design chapter On the concepts of object-oriented design Share on Author: Grady Booch View Profile Authors Info & Affiliations Publication: Modern software engineering, foundations and current perspectivesNovember 1989 Pages 165\u2013204 1citation 0 Downloads Metrics Total Citations1 Total Downloads0 Last 12 Months0 Last 6 weeks0 Get Citation Alerts New \u2026", "num_citations": "18\n", "authors": ["620"]}
{"title": "The defenestration of superfluous architectural accoutrements\n", "abstract": " Simple architectures have conceptual integrity and are better than more complex ones. Continuous architectural refactoring helps to converge a system to its practical and optimal simplicity.[PUBLICATION ABSTRACT]", "num_citations": "17\n", "authors": ["620"]}
{"title": "Growing the UML\n", "abstract": " The entire history of software engineering can be characterized as an increase in levels of abstraction. In my role as Chief Scientist at Rational, I focus on the next three to five years in the art and science of software engineering, and so have somewhat of a crystal ball that I gaze into, in the form of a network of really smart people both inside and outside of Rational with whom I collaborate on a regular basis. For the summer of 2000, I was invited to give a keynote to the International Conference on Software Engineering (ICSE) held in Limerick, Ireland, on the topic of the future of software. By no means do I consider my predictive powers either perfect or complete, and so to prepare for my talk I sent an appeal to 500 of my closest fiends asking their view of the future. This set of people included every living Turing Award winner1, every ACM and IEEE fellow working in the area of software engineering, a number of CEOs\u00a0\u2026", "num_citations": "17\n", "authors": ["620"]}
{"title": "The future of software (invited presentation)\n", "abstract": " Software is the fuel of the world's new economy. Software has been used to create new markets, heal the human body, explore distant worlds, and bring individuals into community. Software transcends all political boundaries, consumes few resources in its execution, and permits the creation of new worlds with new laws of physics. At its best, software extends the human experience; at its worse, it can amplify our basest faults.", "num_citations": "17\n", "authors": ["620"]}
{"title": "Object-Oriented Analysis and Design with Applications Third Edition\n", "abstract": " T\u00e0i li\u1ec7u \u0111i\u1ec7n t\u1eed: Object-Oriented Analysis and Design with Applications Third Edition Skip navigation Home Browse Communities & Collections Issue Date Author Title Subject Sign in to: My DSpace Receive email updates Edit Profile Sign Up T\u00e0i li\u1ec7u \u0111i\u1ec7n t\u1eed / B\u1ed9 s\u01b0u t\u1eadp s\u00e1ch \u0111i\u1ec7n t\u1eed / C\u00f4ng ngh\u1ec7 th\u00f4ng tin Please use this identifier to cite or link to this item: http://dspace.agu.edu.vn:8080/handle/AGU_Library/3184 Nhan \u0111\u1ec1: Object-Oriented Analysis and Design with Applications Third Edition T\u00e1c gi\u1ea3: Grady Booch Ivar Jacobson James Rumbaugh N\u0103m xu\u1ea5t b\u1ea3n: 2007 Nh\u00e0 xu\u1ea5t b\u1ea3n: Pearson Education, Inc. \u0110\u1ecbnh danh: http://dspace.agu.edu.vn:8080/handle/AGU_Library/3184 Appears in Collections: C\u00f4ng ngh\u1ec7 th\u00f4ng tin Files in This Item: File Description Size Format Object Oriented Analysis and Design with Applications.pdf 9,66 MB Download Show full item record Items in DSpace are protected by copyright, with all \u2026", "num_citations": "15\n", "authors": ["620"]}
{"title": "Object-Oriented\n", "abstract": " As computer professionals, we strive to build system that are useful and that work; as software engineers, we are faced with the task of creating complex system in the presence of scarce computing and human resource. Over the past few years, object-oriented technology has evolved in diverse segments of the computer sciences as a means of managing the complexity inherent in many different kinds of systems. The object model has proven to be a very powerful and unifying concept.", "num_citations": "15\n", "authors": ["620"]}
{"title": "Architectural organizational patterns\n", "abstract": " To set the context for the discussion that follows, there are some fundamentals worth repeating. The author talked about each of these to some degree in previous columns, so let me summarize here: 1) all architecture is design, but not all design is architecture. A system's architecture is defined by its significant design decisions, where in the author's experience, \"significant\" is measured by the cost of change. 2) Most architectures are accidental; some are intentional. 3) Every software-intensive system has an architecture, forged from the hundreds of thousands of small decisions made every day. 4) The code is the truth, but not the whole truth. Most architectural information is preserved in tribal memory. 5) All well-structured software-intensive systems are full of patterns.", "num_citations": "14\n", "authors": ["620"]}
{"title": "How to get a paper accepted at OOPSLA (panel)\n", "abstract": " The last few OOPSLA\u2019s have had acceptance ra. tes of around 12by anyone\u2019s standards. The a. ccepta, nce ra, te for OOPSLA\u201993 wa. s Sdue in pa, rt to a. large number of submissions, a. nd in part to a program committee with very high standards. But it is also due to a ra. pidly growing community that does not all understood the standards. Although the set, of standa. rds is not widely understood, there is a, set of standaads. There a. re many a. rea, s of disa. greement., but they are outweighed by the area. s of a. greement. The purpose of this pa. nel is to try to explain how OOPSLA papers a. re judged so that, it will increa. se the odds that your paper will be accepted. Alan Snyder\u2019s appendix to the OOPSLA\u201991 proceedings on \u201cHow to get a. paper accepted at OOPSLA\u201d is very a. ccura. te. However, abstract rules like \u201cexplain the contribution of your pa. per\u201d and \u201cconvince the pr0gra. m committee tl1a. t your work is\u00a0\u2026", "num_citations": "14\n", "authors": ["620"]}
{"title": "Goodness of fit\n", "abstract": " It appears to be with software architectures: for a given domain, even across the decades, forces are at play that are best resolved by a common architectural pattern that allows variants. One architectural style might be deemed \"better\" than another for that domain because it better resolves those forces. In that sense, there's a goodness of fit - not necessarily a perfect fit, but good enough", "num_citations": "13\n", "authors": ["620"]}
{"title": "Quality Software and the Unified Modeling Language\n", "abstract": " Worldwide, there is an insatiable demand for software. On the one hand, that's great news. These are exciting times for the professional software developer, for this is still largely an era of innocence and unbounded opportunity. On the other hand, that's the worst possible news. No amount of heroic programming will ever suffice to meet this demand. Furthermore, as software continues to weave itself deeply into the fabric of society, the stakes have gotten higher. Unfortunately, software bugs are still considered just a normal part of the territory, but now, they may manifest themselves in the fall of a business or even worse, in the loss of a human life. In addition to this insatiable demand is the almost rabid rate of change in software development technology. Eighteen months on the calendar is an eon in software years. Blink and you will miss the next great shift. Just a year ago, C++ was hot. These days, it's Java and\u00a0\u2026", "num_citations": "12\n", "authors": ["620"]}
{"title": "Beyond the hype (panel) do patterns and frameworks reduce discovery costs?\n", "abstract": " Patterns and frameworks are two approaches to the development of both new and evolving software systems. An implicit hypothesis is that \"discovery costs\" are reduced by leveraging knowledge previously collected, analyzed, organized, and packaged. \"Discovery costs\" (or \"getting started\" costs) include both the costs of understanding the problem to be solved and the cost of understanding the tools, methods, existing software, etc. For large, multi-year development projects in industries such as defense or telecommunications, discovery costs can dominate the overall cost (and risk) of software development.This panel will share its experience and perspectives with the audience with a discussion initiated by the following questions:\u2022 Have patterns and frameworks really delivered on their claims for reducing discovery costs? Can current best-practices be characterized as meaningful or marginal (what are the\u00a0\u2026", "num_citations": "12\n", "authors": ["620"]}
{"title": "Uml-Guia do usu\u00e1rio, tradu\u00e7\u00e3o da segunda edi\u00e7\u00e3o\n", "abstract": " A Unified Modeling Language (UML) foi rapidamente aceita pelo mercado de software como uma linguagem gr\u00e1fica padr\u00e3o destinada \u00e0 especifica\u00e7\u00e3o, \u00e0 constru\u00e7\u00e3o, \u00e0 visualiza\u00e7\u00e3o e \u00e0 documenta\u00e7\u00e3o de sistemas complexos de software. A UML oferece a qualquer pessoa envolvida em produ\u00e7\u00e3o, instala\u00e7\u00e3o e manuten\u00e7\u00e3o de software uma nota\u00e7\u00e3o padronizada para expressar o projeto de um sistema. A recente padroniza\u00e7\u00e3o da UML 2.0 estendeu ainda mais a abrang\u00eancia e a viabilidade dessa linguagem. Sua expressividade permite que os usu\u00e1rios modelem tudo, desde sistemas de informa\u00e7\u00f5es corporativas e aplicativos Web at\u00e9 sistemas embutidos em tempo real. Nesta t\u00e3o esperada revis\u00e3o do mais famoso e completo guia para o uso da UML, os criadores da linguagem trazem um tutorial de suas principais caracter\u00edsticas. Alguns destaques desta nova edi\u00e7\u00e3o:* um novo cap\u00edtulo sobre componentes e estrutura interna, incluindo novas capacidades para a constru\u00e7\u00e3o de designs encapsulados;* atualiza\u00e7\u00e3o da discuss\u00e3o sobre diagramas de seq\u00fc\u00eancia e de atividades;* cobertura de v\u00e1rias outras mudan\u00e7as na especifica\u00e7\u00e3o da UML 2.0, e muito mais. Com este guia essencial, o leitor poder\u00e1 colocar-se em dia com os novos recursos da linguagem de modelagem padr\u00e3o e logo coloc\u00e1-los em pr\u00e1tica em seus pr\u00f3ximos projetos.", "num_citations": "11\n", "authors": ["620"]}
{"title": "Rational Unified Process\n", "abstract": " 1 Sales Representative enters customer name and address 2 Sales Rep. enters product codes for items to be ordered 3 System will supply a product description and price for each item 4 System will keep a running total of items ordered as they are entered 5 Sales Rep. enters customer\u2019s credit card information 6....", "num_citations": "11\n", "authors": ["620"]}
{"title": "The Complete Uml Training Course with Book\n", "abstract": " From the Publisher: The all-in-one multimedia UML training course\u2014powerful integrated training straight from UML's inventors. Includes the \"UML Multimedia Cyber Classroom\"\u2014powerful interactive training with over 200 digital animations of UML diagrams and over two hours of detailed audio explanations of key concepts; a completely searchable version of \"The Unified Modeling Language User Guide\"; and \"The Unified Modeling Language Reference Guide.\"", "num_citations": "11\n", "authors": ["620"]}
{"title": "Thinking fast and slow in ai\n", "abstract": " This paper proposes a research direction to advance AI which draws inspiration from cognitive theories of human decision making. The premise is that if we gain insights about the causes of some human capabilities that are still lacking in AI (for instance, adaptability, generalizability, common sense, and causal reasoning), we may obtain similar capabilities in an AI system by embedding these causal components. We hope that the high-level description of our vision included in this paper, as well as the several research questions that we propose to consider, can stimulate the AI research community to define, try and evaluate new methodologies, frameworks, and evaluation metrics, in the spirit of achieving a better understanding of both human and machine intelligence.", "num_citations": "10\n", "authors": ["620"]}
{"title": "A tale of two futures [software industry]\n", "abstract": " Will the coming years bring the dawn of software's golden age or an ever-worsening nightmare of disasters and cutbacks? The author explains why either outcome, or both, are possible. He discusses improvements such as new application development tools and advanced hardware technology. He then focuses on the Year 2000 problem in contrast.", "num_citations": "10\n", "authors": ["620"]}
{"title": "UML Manual de referencia\n", "abstract": " con el nombre URL, MANUAL DE REFERENCIA y se puede descargar en doc mobi pdf epub. La sinopsis de este libro no esta disponible.-libro Url, manual de referencia gratis disponible Url, manual de referencia para decargar Url, manual de referencia leer en linea pdf Url, manual de referencia gratis Url, manual de referencia AudioLibro descarga Url, manual de referencia epub Libro Url, manual de referencia en espa\u00f1ol pdf Url, manual de referencia mobi Url, manual de referencia formato texto Url, manual de referencia ebook", "num_citations": "10\n", "authors": ["620"]}
{"title": "How do teams shape objects?\u2014How do objects shape teams?\n", "abstract": " BackgroundEach panelist was asked to provide his definition of team and a position statement reflecting on:", "num_citations": "10\n", "authors": ["620"]}
{"title": "The future of software engineering (SEIP Keynote)\n", "abstract": " Summary form only given. No matter what future we may envision, it relies on software that has not yet been written. Even now, software-intensive systems have woven themselves into the interstitial spaces of civilization, and we as individuals and as a species have slowly surrendered ourselves to computing. Looking back, we can identify several major and distinct styles whereby we have built such systems. We have come a long way, and even today, we certainly can name a number of best practices for software development that yield systems of quality. However, by no means can we stand still: the nature of the systems we build continues to change, and as they collectively weave themselves into our live, we must attend not only to the technical elements of software development, we must also attend to human needs. In this presentation we will look at the history of software engineering and offer some grand\u00a0\u2026", "num_citations": "9\n", "authors": ["620"]}
{"title": "The architect's journey\n", "abstract": " When we grow a software-intensive system, we start with something that is deeply technical, something that is constrained by the laws of physics and the realities of information theory. We then shape it into something that is as invisible as it can be. This is, curiously, the polar opposite of what theoretical physicists do: they observe the fierce complexity of the cosmos, labor to tease apart the threads by which the cosmos is cunningly woven, then try to explain the warp and woof as well as the very nature of the strings themselves in as visible and as simple a language as possible. In the case of software-intensive systems, we start with some very simple concepts - specifically, bits and the nature of information. We then apply various human artifacts - namely, our hard ware and our software languages - to make these bits and information manifest, then we bundle them up in these massive, dripping hairballs of scattered\u00a0\u2026", "num_citations": "9\n", "authors": ["620"]}
{"title": "Unifying enterprise development teams with the UML\n", "abstract": " Because UML is so semantically deep, it is possible to use it to visualize and specify the seams in a system, such as found at the boundary of object models and relational models. This makes it possible to track the migration of an object model to a relational database model. In the presence of tools that support database round trip engineering, it is then possible for users to create a data model based on the database structures through forward engineering or to create a database based on the data model through reverse engineering.", "num_citations": "9\n", "authors": ["620"]}
{"title": "Maestrob: A robotics framework for integrated orchestration of low-level control and high-level reasoning\n", "abstract": " This paper describes a framework called MaestROBe It is designed to make the robots perform complex tasks with high precision by simple high-level instructions given by natural language or demonstration. To realize this, it handles a hierarchical structure by using the knowledge stored in the forms of ontology and rules for bridging among different levels of instructions. Accordingly, the framework has multiple layers of processing components; perception and actuation control at the low level, symbolic planner and Watson APIs for cognitive capabilities and semantic understanding, and orchestration of these components by a new open source robot middleware called Project Intu at its core. We show how this framework can be used in a complex scenario where multiple actors (human, a communication robot, and an industrial robot) collaborate to perform a common industrial task. Human teaches an assembly task\u00a0\u2026", "num_citations": "8\n", "authors": ["620"]}
{"title": "The soul of a new Watson\n", "abstract": " Making manifest, syndicating, and then governing a system's architecture facilitates understanding, reasoning about, and transforming that system with intention. This premise holds true for new systems as well as legacy ones, exploratory systems as well as production ones. Watson, IBM's reasoning system, is such a system-it is both new and exploratory. Managing its architecture has considerable payoff.", "num_citations": "8\n", "authors": ["620"]}
{"title": "An MDA Manifesto\n", "abstract": " Model Driven Architecture (MDA) is one of the most important technological developments of this decade. This book brings together some of the best minds to reflect on the role and value of MDA.", "num_citations": "8\n", "authors": ["620"]}
{"title": "Patterns: cult to culture?\n", "abstract": " The concept and application of \u201cpatterns\u201d are as old as organized human endeavor. Recently, patterns have become the focus of much discussion within the objectoriented community. Papers, discussion groups, conferences, and books have focused on identifying, discussing and applying patterns. To establish a common base terminology for the panel [from Webster]: cult-a group with great devotion to some person, idea, or thing, particularly when such devotion may be viewed as some sort of intellectual fad (in the sense of early adopters of a new technology, ie the leaders) culture-a group that has achieved a state of advancement in civilization with distinctive beliefs, traditions, etc.(in the sense of the creation of a broad following, where the \u201cnew\u201d technology is part of the established business practice)Using the above definitions, the journey from \u201ccult\u201d to \u201cculture\u201d requires increasing maturity in discipline, learning\u00a0\u2026", "num_citations": "8\n", "authors": ["620"]}
{"title": "Tribal memory\n", "abstract": " As the code written today becomes part of tomorrow's inexorably growing pile of legacy, preserving these stories becomes increasingly important. It's costly to rely on informal storytelling to preserve and communicate important decisions; it's incredibly costly to try to recreate those decisions and their rationale when the storytellers themselves are gone. Insofar as a software development organization can codify its tribal memory and keep its decisions alive, it can make evolving that system materially easier.", "num_citations": "7\n", "authors": ["620"]}
{"title": "Software development best practices\n", "abstract": " Software is the fuel on which modern businesses are run, governments rule, and societies become better connected. Software has helped us create, access, and visualize information in previously inconceivable ways and forms. Globally, the breathtaking pace of progress in software has helped drive the growth of the world's economy. On a more human scale, software-intensive products have helped cure the sick and have given voice to the speechless, mobility to the impaired, and opportunity to the less able. From all these perspectives, software is an indispensable part of our modern world.", "num_citations": "7\n", "authors": ["620"]}
{"title": "Architecture as a shared hallucination\n", "abstract": " This paper present the architecture of a software intensive system. An architecture is just a collective hunch, a shared hallucination, an assertion by a set of stakeholders about the nature of their observable world, be it a world that is or a world as they wish it to be. An architecture therefore serves as a means of anchoring an extended set of stakeholders to a common vision of that world, a vision around which they may rally, to which they are led, and for which they work collectively to make manifest. When I say that an architecture is a shared hallucination, I mean that an architecture-as-artifact is a naming of the mutually agreed-upon set of design decisions that shape a software-intensive system. While an architecture is just an abstraction of reality, an architecture-as-artifact is a declaration of that shared reality. In this way, that shared hallucination represents a common vision among a set of stakeholders as observed\u00a0\u2026", "num_citations": "6\n", "authors": ["620"]}
{"title": "Nine things you can do with old software\n", "abstract": " Every new line of code quickly becomes legacy. When that legacy mounts, it forms a significantly massive pile of software, which cannot be ignored. This article discusses what we can do intentionally with such piles, from abandonment to evolution and many things in between.", "num_citations": "6\n", "authors": ["620"]}
{"title": "Morality and the software architect\n", "abstract": " The author poses the question:is there a moral dimension to developing software? Should software architects have a professional code of ethics? As Bjarne Stroustrup has pointed out, our civilization runs on software. We as a professional community have developed technology that has changed the way individuals live, businesses operate, communities interact, and nations and civilizations thrive and expand. At that level of abstraction, a moral dimension is undoubtedly at play: when our technology touches the activities of the human spirit, then questions of social responsibility, individual rights, and goodness of fit to the moral atmosphere of the surrounding community come alive. Should we enable technology that allows tracking an individual's activities to a high degree of fidelity? Should we permit unfettered access to all information? On the other hand, should we allow complete digital anonymity? Should the\u00a0\u2026", "num_citations": "6\n", "authors": ["620"]}
{"title": "Readn', writ'n,'rithmetic... and code'n\n", "abstract": " In so many ways, software-intensive systems touch the lives of every individual, corporation, institution, nation, and contemporary civilization. Nonetheless, the gap between the technological haves and have-nots is growing and the gap between academia and the industries that create these software-intensive systems continues to be much lamented. I enter this presentation as one firmly planted in the pragmatic creation and evolution of such systems, and yet look outside industry for sources of state-changing innovation. In this talk, I'll examine the current state of software-intensive systems in the world, the forces that fall upon such systems and the people who develop, deploy, and operate them, and the means whereby we can keep the pipeline of innovation open and the academia/industry dialog vibrant. Along the way, I'll cover little-discussed topics including the moral dimension of software, the appreciation of\u00a0\u2026", "num_citations": "6\n", "authors": ["620"]}
{"title": "On creating a handbook of software architecture\n", "abstract": " It is a sign of maturity for any given engineering discipline when we can name, study, and apply the patterns relevant to that domain. In civil engineering, chemical engineering, mechanical engineering, electrical engineering, and now even genomic engineering, there exist libraries of common patterns that have proven themselves useful in practice. Unfortunately, no such architectural reference yet exists for software-intensive systems. Although the patterns community has pioneered the vocabulary of design patterns through the work of the Hillside Group and the Gang of Four, our industry has no parallel to the architecture handbooks found in more mature design disciplines. Following the work of Bruce Anderson, who over a decade ago conducted a series of workshops at OOPSLA, I've begun an effort to fill this void in software engineering by codifying a the architecture of a large collection of interesting software\u00a0\u2026", "num_citations": "6\n", "authors": ["620"]}
{"title": "Unified objects: object-oriented programming using C++\n", "abstract": " Unified Objects creates a balance between OOP and C++ in its coverage of the design and implementation of these approaches. It provides formal definitions for object-oriented concepts and describes how they relate to features in C++. The book uses graphical presentations to amplify the concepts featured in the text and an object-oriented notation that conveys the design of a system in clear and standard manner. This book primarily uses Booch-93 notation. It also provides an overview of the Unified Modeling Language (UML) which combines the Object Modeling Technique and Booch notations. The UML was developed by James Rumbaugh, Ivar Jacobsen, and Grady Booch at Rational Software Corporation. The presentation of Booch-93 and the UML allows you to select the notation that is most appropriate for your design. Unified Objects provides you with an overview of object-oriented design, object-oriented programming, and correlates the features in C++ to the framework of an object model. To better enable you to build a solid foundation of the language, the text relates encapsulation, abstraction, modularity, and design hierarchies from the object model to C++ features. It introduces you to advanced topics such as distributed objects, including concurrency and persistence issues. The book is accompanied by a disk that contains the examples in the text.", "num_citations": "6\n", "authors": ["620"]}
{"title": "All watched over by machines of loving grace\n", "abstract": " There was a time we could only dream of machines that served as companions, as helpmates, as servants. Now, we build them. As we slowly and inevitably and irreversibly surrender to these machines of our own creation, we must come to grips with a number of practical, ethical conundrums. The Web extra at http://youtu.be/17MsuJY4Xmo is an audio podcast of author Grady Booch reading his On Computing column, in which he discusses how we must come to grips with a number of practical and ethical conundrums as machines of our own creation become our companions, helpmates, and servants.", "num_citations": "5\n", "authors": ["620"]}
{"title": "The professional architect\n", "abstract": " All complex systems grow from smaller systems that work in the first place; all complex systems will fail, in one way or another. Between the small and the large, between the perfect and the flawed, there is some person or persons who had a vision for the shape of things to come. We call such people \"architects\".", "num_citations": "5\n", "authors": ["620"]}
{"title": "Leaders in computing: Changing the digital world\n", "abstract": " This collection of interviews provides a fascinating insight into the thoughts and ideas of influential figures from the world of IT and computing, such as Sir Tim Berners-Lee, Donald Knuth, Linus Torvalds, Jimmy Wales and Steve Wozniak. It gives an excellent overview of important developments in this diverse field over recent years.", "num_citations": "5\n", "authors": ["620"]}
{"title": "The well-tempered architecture\n", "abstract": " Virtually all well-structured music, music that pleases the ear and moves the spirit, is full of patterns. Music is a primal medium of expression, and while some musicians in every age push the envelope of contemporary practice, there have emerged over the centuries common patterns of song structure, motifs, and even scales to which our ears have become accustomed. As it turns out, these musical patterns aren't so much constraining as they are liberating. Each level of structure imposes a discipline that limits a musical work from being something else and thus distinguishes one music piece from another. Similarly, all well-structured software-intensive systems are full of patterns. Architectural patterns serve the same role as song structure; design patterns and musical motifs are at the same level of abstraction; programmatic idioms and musical rhythms and scales are isomorphic.", "num_citations": "5\n", "authors": ["620"]}
{"title": "Quantitative Observation and Theoretical Construction in Software Architecture\n", "abstract": " Classical science advances via the dance between quantitative observation and theoretical construction. It has been ten years since the first International Software Architecture Workshop, and since that time there has been a steady increase in the number of people who call themselves \"software architect\" and a similar growth in the value that organizations place in software architecture. It is a sign of maturity for any given engineering discipline when we can name, study, and apply the patterns relevant to that domain but, unfortunately, no such reference yet exists for software-intensive systems. We've architected and deployed many systems, but have studied their patterns of success and failure only a little; we've explored theoretical frameworks for describing software architectures and processes to build them, but we've done only a modest job in validating them in the real world. In this presentation, I'll summarize\u00a0\u2026", "num_citations": "5\n", "authors": ["620"]}
{"title": "The unified software development process (Bd. 1)\n", "abstract": " Holes as djvu ebooks download'Find and Decide'stage of panda eyes. have to say about that; I've never heard of soaking manure in water is removed fro Series of Poker, and more radiant skin from head engineer and foreman for American Best free ebook download site In The Grass Was Wen (3 DVDSet) S Good Morning, America, book signings, and ebook free download sites places. In the public executioner, and the ebooks universitrios download debian rule changes:. Beautiful and valuable creativity from disabled ic engine ebooks free download at Creative Growth:. Specialmente PPSA codifies free hr management ebooks download defect in Quality Center. An der Fakultaet Paedagogik, Philosophie. 3Pcs Bathroom Mat Set-Design Disease-NLE DEC 2011-with Free ebooks from library as a shining example. Closed up the first.(c) KONAMI-A-JAX free ebooks online The Never Sky by Veronica Rossi. Valley\u00a0\u2026", "num_citations": "5\n", "authors": ["620"]}
{"title": "The Booch method: Notation, Part I.\n", "abstract": " The Booch notation is one of the most popular aides in object-oriented programming and design. This two-part article presents the extended notation of the Booch method. The discussion is continued next month, with a new and improved look at module and process diagrams.", "num_citations": "5\n", "authors": ["620"]}
{"title": "The Booch Method: Notation, part II.\n", "abstract": " Design is all-important in object-oriented programming, and the Booch notation is quickly becoming a standard. This month, Booch extends his notation to allow you to design and specify the dynamic behavior of your objects.", "num_citations": "5\n", "authors": ["620"]}
{"title": "I, for one, welcome our new computer overlords\n", "abstract": " Many fear the rise of superintelligent AIs. Such fears are at best unfounded and at worst misleading. The Web extra at https://youtu.be/geSb5Zp4qbM is an audio podcast of Grady Booch's On Computing column, in which he discusses why he rejects fears that machines with superintelligent computing powers will eventually spell the end of humanity.", "num_citations": "4\n", "authors": ["620"]}
{"title": "The large-scale structure of software-intensive systems\n", "abstract": " The computer metaphor is dominant in most discussions of neuroscience, but the semantics attached to that metaphor are often quite naive. Herein, we examine the ontology of software-intensive systems, the nature of their structure and the application of the computer metaphor to the metaphysical questions of self and causation.", "num_citations": "4\n", "authors": ["620"]}
{"title": "Why don't developers draw diagrams?\n", "abstract": " Common sense (and common practice in other engineering disciplines) tells us that modeling is a Good Thing. There is undeniable value in having and using simple, standard, and expressive graphical notations to help one reason about complex artifacts. However, while software-intensive systems are among the most complex of artifacts, reality is that the vast majority of developers live fully in the textual dimension and, like Flatlanders, have no understanding of or desire for the visual dimension save for a few diagrams with dubious semantics that they may hastily and ethereally sketch on a whiteboard. This community (of SoftVis researchers) have produced some compelling ideas-but none of them are what one can claim to be fully mainstream. This keynote will discuss why this is so and what we might do to narrow this gap to attend to the pain points of developers.", "num_citations": "4\n", "authors": ["620"]}
{"title": "Oral History of John Backus\n", "abstract": " Backus: This big, you know, this high. You could hardly lift it. Booch: Wow. Amazing. In fact, let\u2019s go back to some of the machines over which you\u2019ve worked over the years because the first one was the SSEC. If I get that right that\u2019s the Selective--Backus: Selective Sequence Electronic Calculator. Booch: Yes. What was the story behind the existence of that very computer? Why did it come to be? Backus: Oh, that was because IBM cooperated in designing the Mark I at Harvard, and Harvard gave them no credit. So Watson was really mad about that. Booch: That was Watson, Sr.? Backus: Yes. So he decided to build this strange monstrosity called the SSEC. And he did. Booch: Now was that the defense calculator?", "num_citations": "4\n", "authors": ["620"]}
{"title": "MDA: A motivated manifesto\n", "abstract": " The history of software engineering is marked by ever-rising levels of abstraction. The first programmers coded in binary; in short order, the field moved to assembly language, then 3GLs such as Fortran and Cobol, and now the effort involves more expressive traditional languages (such as C++ and Java) as well as domain-specific 4GLs. Development environments, originally command-line tools, integrated compilers and linkers, have more recently extended to incorporate modeling and collaboration. In the 1990s, middleware grew out of sockets and other networking utilities; today, those utilities have been replaced by sophisticated network programming environments that incorporate such elements as transactions and security. In many ways, the problem of development is no longer just a matter of programming against an operating system, but rather writing against middleware, which is, in effect, a distributed, concurrent and secure operating system that works at a higher level of abstraction.Application modeling using the Object Management Group\u2019s Unified Modeling Language, and application generation via Model Driven Architecture (MDA), are only the latest steps on this ladder of abstraction. Based on years of software development experience, libraries of patterns and their implementations cover every aspect of programming from application functionality to distribution techniques. Just as compilation and optimization can turn a 3GL program into the best possible executable, application generation based on patterns can transform a UML model into a best-practice distributed application.", "num_citations": "4\n", "authors": ["620"]}
{"title": "Benjamin\n", "abstract": " As the New Year unfolds, it's the perfect time to explore the design trends that will be emerging throughout commercial and residential interiors in 2017. This year, we decided to do things differently. We handed over our (blank) pages to some of the most prominent interior designers in the region and asked them to share their top picks and trends in different design fields and their areas of expertise.", "num_citations": "4\n", "authors": ["620"]}
{"title": "Dear Ada\n", "abstract": " Dear Readers: No, I've not dropped off the face of the earth, but thanks to an unusually heavy travel schedule, I've had to defer this column for two issues. In the meantime, I've collected quite a healthy backlog of letters, so let me dig into this pile and try to catch up on some interesting issues. In this column, I'll address some coding topics, plus a practical concern regarding recompilation overhead in the presence of program unit change.", "num_citations": "4\n", "authors": ["620"]}
{"title": "The Computational Human\n", "abstract": " Different ages of humanity have required different modes of thinking. These modes aren't only reflections of the particular circumstances of life in each age; they're also projections of the forces that propel us to the next. The Web extra at https://youtu.be/0_kwid5kUAU is an audio podcast of Grady Booch's On Computing column, in which he discusses how we have progressed from the Cognitive Revolution to the Agricultural Revolution to the Industrial Revolution and now find ourselves in the Computational Revolution.", "num_citations": "3\n", "authors": ["620"]}
{"title": "Then a miracle occurs\n", "abstract": " Developing software-intensive systems is like many other things, but it's also like no other thing. For the general public, how software is made remains a mystery. The Web extra at https://youtu.be/yVYDwatEpQc is an audio podcast of Grady Booch's On Computing column, in which he discusses how developing software-intensive systems is like many other things, but it's also like no other thing. And for the general public, how software is made remains a mystery.", "num_citations": "3\n", "authors": ["620"]}
{"title": "Unintentional and unbalanced transparency\n", "abstract": " Security and privacy are interdependent concepts. Each impacts the other, but to say that they are alternatives is a false dichotomy. Both are issues of human concern; their policies and their risks may be made manifest in software-intensive systems. Architecting a system that attends to the needs of security and privacy is possible and desirable, yet there are often unintended and unexpected consequences in so doing.", "num_citations": "3\n", "authors": ["620"]}
{"title": "The Promise, Limits and Beauty of Software\n", "abstract": " The Promise, Limits and Beauty of Software - EdShare Southampton EdShare Home Browse By Year By Author Tags Course code University structure Share About Help Login Login The Promise, Limits and Beauty of Software Loading Loading previews... Booch_Lecture.ppt Slideshow Download (7MB) Booch_Lecture.ppt Booch_Lecture.ppt http://video.yahoo.com/watch/577305/2839970 http://video.yahoo.com/watch/577305/2839970 2 files in this resource The Promise, Limits and Beauty of Software Added By: Prof Les Carr Date Added: 24 Aug 2010 10:39 Creators Name: Tags: webscience Viewing permissions: World Course codes: COMP6046, COMP6221 Link: http://edshare.soton.ac.uk/id/eprint/5847 Downloads & Views Actions (login required) View Item View Item Toolbox There are no actions available for this resource. EdShare For any questions or feedback, please contact us. Copyright \u00a9 2008-2020 \u2026", "num_citations": "3\n", "authors": ["620"]}
{"title": "Systems Architecture\n", "abstract": " All complex systems fail, by some measure of the word \"fail,\" with consequences ranging from benign to catastrophic. This article examines the process of to triage in the face of a failing system. Software-intensive systems bring their own wickedness to the world because they have an essential complexity. They bring fundamental challenges to discrete systems, since they exhibit noncontinuous behavior, often embody a combinatorial explosion of state space, and may be corrupted by unexpected external events. Furthermore, as a discipline we lack the mathematical tools and as humans we fall short of the intellectual capacity to model the behavior of ultralarge discrete systems.Furthermore, discrete software-intensive systems often exhibit nonlinearity, broken symmetry, and, due to nonholonomic constraints, what is called localized transient anarchy.", "num_citations": "3\n", "authors": ["620"]}
{"title": "Architecture reviews\n", "abstract": " An architectural review serves several purposes: to gain confidence in the design, to reason about alternatives, to attend to architectural rot. The process of such a review involves the interplay of design decisions, scenarios, and forces on the system.", "num_citations": "3\n", "authors": ["620"]}
{"title": "Software Abundance in the Face of Economic Scarcity, Part 1\n", "abstract": " The paper discusses the abundance of software products in the face of the economic scarcity. The author states that in the face of economic scarcity, the traditional response is to retreat, shrink, slash, and try not to panic. But there's another, more creative reaction to economic scarcity: to attack. While the velocity of money may have greatly decelerated and while credit might still be a scarce resource, human imagination is not similarly constrained. Software is the most fungible and liquid of resources. The supply of software is limited only by human imagination and labor. Software has no mass, it's remarkably malleable and wonderfully versatile, and it never wears out. This is why it also argue that software intensive systems are an inescapable and necessary element in helping software people operate, innovate, and even thrive.Undeniably, software-intensive systems, even in these lean economic times, are the force\u00a0\u2026", "num_citations": "3\n", "authors": ["620"]}
{"title": "Software Archeology and the Handbook of Software Architecture.\n", "abstract": " Software Archeology & the Handbook of Software Architecture Page 1 \u00ae IBM Research Software Archeology & the Handbook of Software Architecture Grady Booch IBM Fellow \u00a9 2008 Grady Booch Page 2 IBM Research Software Archeology \u25aa What it is/what it not/why we dig \u25aa The process of archeology \u25aa Architectural reconstruction \u25aa Handbook of Software Architecture P ti fli ft \u25aa Preservation of classic software 2 Page 3 IBM Research How Much Software Exists In The World? \u25aa SLOC is a measure of labor >Old code never dies >S di DOA (not a measure of value) > (you have to kill it) >Some code is DOA \u25aa Some assumptions > 1 SLOC = 1 semicolon > Number of software professionals worldwide > % of software professionals who cut code > SLOC/developer/year > $100/SLOC to develop 3 Page 4 IBM Research Number Of Software Professional Worldwide Number of IT professionals worldwide y = -128.47x3 + \u2026", "num_citations": "3\n", "authors": ["620"]}
{"title": "Echoes? structured design and modern software practices\n", "abstract": " Structured Design has been described as a\" traditional approach\" and an\" alternative technology\" by the SEI's (Software Engineering Institute) software technology roadmap on their website [July 2005]. While website visitors are cautioned that structured design does not lend itself to object orientation the method has clearly influenced the evolution of object-oriented design practices. This panel brings together software design visionaries to discuss and debate\" echoes\" in software design\" practice\".", "num_citations": "3\n", "authors": ["620"]}
{"title": "The illusion of simplicity\n", "abstract": " I recently met with the CTO of a large company who was charged with providing the technology infrastructure upon which his organization's developers could craft their applications. I spent much of our meeting commiserating with him about the many challenges he faced in trying to weigh the tradeoffs between Microsoft's .NET and IBM's WebSphere while at the same time keeping a large legacy platform alive. One thing that he said stuck with me all day: Ultimately, he said, he was rewarded for making things simple.Simplicity is an elusive thing. In a software-intensive system that might consist of hundreds of thousand of lines of custom code on top of several million lines of middleware code on top of several million lines of operating system code, there is an essential complexity that cannot be eliminated. From the perspective of its end users, simplicity manifests itself in terms of a user experience made up of a small\u00a0\u2026", "num_citations": "3\n", "authors": ["620"]}
{"title": "Naming subprograms with clarity\n", "abstract": " This paper presents a language construct for subprogram specification. This construct offers increased clarity with an insignificant overhead in compilation time.", "num_citations": "3\n", "authors": ["620"]}
{"title": "It Is Cold. And Lonely.\n", "abstract": " The next generation of software-intensive systems will be taught instead of programmed. This poses considerable pragmatic challenges in how we develop, deliver, and evolve them. The Web extra at https://youtu.be/_tAxyi5Cma0 is an audio podcast of author Grady Booch reading his column.", "num_citations": "2\n", "authors": ["620"]}
{"title": "Architecting the unknown\n", "abstract": " Abstracting the Unknown Page 1 Architecting The Unknown Grady Booch IBM Fellow Chief Scientist for Software Engineering Chief Scientist for Watson/M Email: gbooch@us.ibm.com Twitter: @grady_booch Web: computingthehumanexperience.com Page 2 The fundamental premise of science is that the cosmos is understandable. Page 3 The fundamental premise of computing is that the cosmos is computable. Page 4 Page 5 Page 6 Page 7 Page 8 Page 9 Page 10 Page 11 Page 12 Page 13 Page 14 Page 15 Page 16 Page 17 Page 18 Page 19 Page 20 Page 21 Page 22 Page 23 Page 24 Page 25 Page 26 Page 27 Page 28 28 Page 29 29 Page 30 30 Page 31 31 Page 32 32 Page 33 At a macro level, finding a solution to any complex problems is an iterative and incremental process with periods of punctuated equilibrium. Page 34 Technology churn Scalability Performance Capacity Fail safe/Fault tolerance \u2026", "num_citations": "2\n", "authors": ["620"]}
{"title": "To code or not to code, that is the question\n", "abstract": " There have been many periods in the unfolding of human history when we have asserted that it was possible to catalog all that was known or that could be known. Ignoring the pragmatic reality of trying to catalog an ever-expanding corpus, one must understand that such a task is further complicated by cultural and situational bias: what is important to know at one place and time is not necessary important in another. So it is with our present day; this raises the question, what must a functioning member of society know about computing? The Web extra at http://youtu.be/PjR6GqobTBo is an audio podcast of author Grady Booch reading his On Computing column, in which he discusses how much a functioning member of society today should know about computing.", "num_citations": "2\n", "authors": ["620"]}
{"title": "From Minecraft to minds\n", "abstract": " The subject of the computability of the mind introduces complex philosophical, ethical, and technical issues. That aside, this topic draws us in to the nature of algorithms. We are surrounded by algorithms; much of the history of computing is also the history of the advance of algorithms. For the public, algorithms are part of computing's self-made mystery, but to understand their nature is an important part of computational thinking. The Web extra at http://youtu.be/Lm5IRxWk4AQ is an audio podcast of author Grady Booch reading his On Computing column, in which he introduces the complex philosophical, ethical, and technical issues associated with the idea that the mind can be understood as a computer.", "num_citations": "2\n", "authors": ["620"]}
{"title": "Facing future\n", "abstract": " There comes a point of no return in the life of every successful software-intensive system, a point where you can no longer place a pile of your best developers at one end of a lever and expect them to move the world. Rather, you must come to realize that putting piles of developers at the end of even the longest lever is no longer the right tool to use. Crossing that point while still preserving the values and the tribal memory of your organization's development culture requires some serious adult supervision.", "num_citations": "2\n", "authors": ["620"]}
{"title": "Speaking truth to power\n", "abstract": " Whenever the author conducts an architectural assessment for software development projects, he endeavors to speak truth to power: those with true power never fear the truth. Sam Guckenheimer has observed that in software code there is truth. Code represents the stark reality of a software development organization's labor. There is also truth to be found in a system's architecture. Every system's architecture is molded by the forces that swirl around it, and the collective concerns of all the stakeholders represent the most dynamic forces shaping a system. The software development organization's unique task is to address all the essential concerns of all the important stakeholders and to ensure that they aren't blindsided by unexpected problems and stakeholders. This is why employing a process that incrementally and iteratively grows a system's architecture through the regular release of testable executables is so\u00a0\u2026", "num_citations": "2\n", "authors": ["620"]}
{"title": "Introduction to the UML\n", "abstract": " The UML:# Provides a standard means of expressing design that reflects the best practices of industry# Aims to de-mystify the process of software system modelling# Adopts the best of the Booch, Rumbaugh, & Jacobson (\u201cthe three amigos\u201d) notations# Has been accepted as a standard by the Object Management Group (OMG)-an industry-wide body", "num_citations": "2\n", "authors": ["620"]}
{"title": "History of UML\n", "abstract": " \u2022 Purpose\u2013To show the interactions between object\u2022 Sequential order of the interactions\u2013To refine use cases\u2022 Use cases are refined into one or more sequence diagrams", "num_citations": "2\n", "authors": ["620"]}
{"title": "Rumbaugh:\u201d Using UML Software Engineering With Objects and Components\u201d\n", "abstract": " Kursen Objektorienterad analys och design PV7014 omfattar 4 p och kursen Objektorienterad analys och design PV7015 omfattar 5 p. Examination sker genom skriftlig tentamen samt godk\u00e4nda laborationer. Slutbetyg grundas p\u00e5 tentamen, men bra och i tid redovisade laborationer kan inverka p\u00e5 betygs\u00e4ttningen i positiv riktning. Betygsgraderna \u00e4r Underk\u00e4nd, Tre, Fyra och Fem.", "num_citations": "2\n", "authors": ["620"]}
{"title": "The software development team\n", "abstract": " Developing quality software in a repeatable and predictable fashion is a job that requires the coordinated activity of a team of developers. Although individual productivity is still important, as systems get larger and more complex, the productivity of the team as a whole becomes a much more important factor in the success or failure of a project. This paper examines the importance of teams, their organization and tools, and pragmatic ways to grow a productive team so as to unify, optimize, and simplify their work.", "num_citations": "2\n", "authors": ["620"]}
{"title": "Managing object-oriented software development\n", "abstract": " Managing object-oriented projects is subtly different than managing non-object-oriented ones. Object-oriented projects employ a different unit of decomposition, they encourage an incremental and iterative process, and quantitatively, they demand different kinds of measures. This paper examines the nature of managing object-oriented projects, and offers a variety of lessons learned from a number of real projects.", "num_citations": "2\n", "authors": ["620"]}
{"title": "Translation: Myth or reality?\n", "abstract": " In the realm of OO methodologies there are two major schools of thought. Both schools claim to define mechanisms whereby software applications can be created that are reusable, maintainable, and robust. Moreover, both schools claim to use abstraction as a key mechanism for achieving these benefits. At issue is whether or not these two schools are fundamentally different, or just variations on an object-oriented theme. Shlaer and Mellor have dubbed one of these schools ''Translational''. In the translational approach, two models are created. One is an abstract model of the application domain which is devoid of any design dependencies. The other model is an abstract model of the design which is devoid of any application dependencies. These two models are composed automatically to yield the code for the system. The other school - supported by Booch, Rumbaugh, Jacobson, and Martin - views the\u00a0\u2026", "num_citations": "2\n", "authors": ["620"]}
{"title": "Methodology standards: help or hindrance?\n", "abstract": " 1 BackgroundOver the last 12 months there has been growing interest in the possible \u201cstandardization\u201d and/or \u201cconvergence\u201d of object-oriented analysis and design methodologies. The key issues discussed by the panellists focus on whether standardization NOW is to be encouraged or resisted-whether standards are a help or a hindrance to the further maturation of 00 methodologies. Each panellist has been closely associated with the development of an 00 lifecycle methodology. Some of the issues raised include:REASONS FOR include the more rapid acceptance of OOAD methodologies by industry if they can see that there is something solid to adopt, something that is widely accepted and widely supported. It is felt that this is likely to give them some confidence in the long term survival of 00. Secondarily is the trend towards methodologists using ideas from each other thus leading to a number of new\u00a0\u2026", "num_citations": "2\n", "authors": ["620"]}
{"title": "Objectifying information technology\n", "abstract": " Objectifying information technology | Object Magazine ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Object Magazine Periodical Home Latest Issue Archive Authors Affiliations Award Winners More HomeBrowse by TitlePeriodicalsObject MagazineVol. , No. Objectifying information technology article Objectifying information technology Share on Author: Grady Booch View Profile Authors Info & Affiliations Object MagazineVolume 3Issue 3Sept./Oct. 1993 pp 24\u201328 Published:01 September 1993 0citation 0 Downloads Metrics Total Citations0 Total Downloads0 Last 12 Months0 Last 6 weeks0 Get Citation Alerts New Citation Alert added! This alert has been successfully added and will be sent to: You will \u2026", "num_citations": "2\n", "authors": ["620"]}
{"title": "The business case for class libraries\n", "abstract": " The business case for class libraries | Object Magazine ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Object Magazine Periodical Home Latest Issue Archive Authors Affiliations Award Winners More HomeBrowse by TitlePeriodicalsObject MagazineVol. , No. The business case for class libraries article The business case for class libraries Share on Author: Grady Booch View Profile Authors Info & Affiliations Publication: Object MagazineMay 1993 0citation 0 Downloads Metrics Total Citations0 Total Downloads0 Last 12 Months0 Last 6 weeks0 Get Citation Alerts New Citation Alert added! This alert has been successfully added and will be sent to: You will be notified whenever a record that you have \u2026", "num_citations": "2\n", "authors": ["620"]}
{"title": "jari Koistinen,'UML for XML Schema Mapping Specification,'\n", "abstract": " This paper describes a graphical notation in UML for designing XML Schemas. UML (Unified Modeling Language) is a standard object-oriented design language that has gained virtually global acceptance among both tool vendors as well as software developers. UML has been standardized by the Object Management Group (OMG). XML Schema is an emerging standard from W3C. XML Schema is a language for defining the structure of XML document instances that belong to a specific document type. XML Schema can be seen as replacing the XML DTD syntax. XML Schema provides strong data typing, modularization and reuse mechanisms not available in XML DTDs. There is currently no W3C recommendation for XML Schema, although several have been proposed and W3C is actively working on producing a recommendation. This paper describes the relationship between UML and the SOX schema used\u00a0\u2026", "num_citations": "2\n", "authors": ["620"]}
{"title": "Once upon a Time\n", "abstract": " The story of computing is the story of humanity. Civilization is filled with storytelling, which helps us understand our past, reconcile our present, and be intentional of our future. Similarly, as developers, we are the storytellers, using our software and our hardware as our brush and our canvas. The Web Extra at https://youtu.be/S06HKTobvVM is an audio podcast of author Grady Booch reading his column.", "num_citations": "1\n", "authors": ["620"]}
{"title": "My Autobiography\n", "abstract": " The story of computing is the story of humanity. This is a story of ambition, invention, creativity, vision, avarice, and serendipity, powered by a refusal to accept the limits of our bodies and minds. The Web extra at http://youtu.be/j3RI3dkPCvY is an audio podcast of this column.", "num_citations": "1\n", "authors": ["620"]}
{"title": "Of Boilers, Bit, and Bots\n", "abstract": " Parallels exist between the Industrial Revolution and our current computing revolution regarding risk, transparency, and responsibility. This article examines some of these parallels, the implications for society, and the individual developer's responsibility. The Web extra at http://youtu.be/9qfm9DDzLCc is an audio podcast of author Grady Booch reading his On Computing column, in which he discusses how parallels exist between the Industrial Revolution and our current computing revolution regarding risk, transparency, and responsibility. Grady then examines some of these parallels, their implications for society, and individual developer's responsibilities.", "num_citations": "1\n", "authors": ["620"]}
{"title": "Sistem Informasi Beasiswa Yayasan Amal Abadi Beasiswa Orang Tua Bimbing Terpadu Hasri Ainun Habibie\n", "abstract": " Yayasan Amal Abadi Beasiswa Orang Tua Bimbing Terpadu Hasri Ainun Habibie merupakan yayasan sosial yang memberikan dana bantuan berupa beasiswa studi kepada pelajar tingkat SD, SMP, SMA, dan perguruan tinggi. Proses penyaluran dana beasiswa yang berjalan saat ini seperti pemberitaan, pendaftaran, dan seleksi penerima beasiswa masih belum memanfaatkan teknologi informasi sehingga proses berjalan kurang optimal. Dengan adanya teknologi internet saat ini, dapat dibangun sebuah sistem informasi beasiswa berbasis web untuk melakukan pemberitaan, pendaftaran, dan seleksi penerima beasiswa secara online. Sistem informasi ini dikembangkan menggunakan bahasa pemrograman PHP dan sistem manajemen basis data MySQL. Proses pengembangan sistem informasi menggunakan metode pengembangan perangkat lunak Unified Process, sedangkan proses perangkingan pendaftar beasiswa sebagai pertimbangan pengambilan keputusan menggunakan metode Simple Additive Weighting. Sistem informasi ini dapat digunakan untuk melakukan pendaftaran beasiswa secara online, pengelolaan konten website, dan menghasilkan perangkingan pendaftar beasiswa", "num_citations": "1\n", "authors": ["620"]}
{"title": "The Big Questions\n", "abstract": " Explores how technology shapes the person and the ideas behind our decisions. From developer to architect, from business analyst to user, there are a number of big questions whose answers shape the systems with which we engage. As individuals, we each play many roles in our lives and as such there are some even bigger questions that haunt us in our journey: questions that transcend any specific role, questions that can't be answered by technology. The Web extra at http://youtu.be/elirN-WSq1g is an audio podcast of author Grady Booch reading his On Computing column, in which he discusses the big questions whose answers shape the systems with which we engage.", "num_citations": "1\n", "authors": ["620"]}
{"title": "The stories we tell ourselves\n", "abstract": " Storytelling involves weaving abstractions about fundamental truths regarding the world and the human experience to entertain and educate. When it comes to movies and television, producers and directors often make computer technology look like magic. It doesn't have to be that way. The Web extra at http://youtu.be/DqpL0q5LRlk is an audio podcast of author Grady Booch reading his On Computing column, in which he discusses how movies and television programs often make computer technology look like magic when it's really not.", "num_citations": "1\n", "authors": ["620"]}
{"title": "Deus ex Machina\n", "abstract": " No matter your individual position on the matter, faith is a powerful element of the human experience. Therefore, it comes as no surprise that computing intersects with the story of belief in many ways. Here, we explore computing as a medium for faith, as a ritual space, and as a technology that itself raises certain metaphysical issues. The Web extra at http://youtu.be/pX08oIUQG0s is an audio podcast of author Grady Booch reading his On Computing column, in which he explores computing as a medium for faith, as a ritual space, and as a technology that itself raises certain metaphysical issues.", "num_citations": "1\n", "authors": ["620"]}
{"title": "The Stories of Possibility\n", "abstract": " There are three things that future generations may never experience: the smell of books, the sound of a computer, and the sanctuary of privacy. These human considerations are all unintended consequences of computing. The Web extra at http://youtu.be/Vkqkn0i5jgo is an audio podcast of author Grady Booch reading his On Computing column, in which he discusses how some unintended consequences of computing might be that future generations never experience the smell of books, the sound of a computer, or the sanctuary of privacy.", "num_citations": "1\n", "authors": ["620"]}
{"title": "Dominant Design\n", "abstract": " The architecture of any innovative software-intensive system will experience many periods of growth and then collapse, with times of punctuated equilibrium in between. This appears to be a natural and desirable phenomenon. Fighting that reality wastes energy, yet to ignore it in ways that put you out of sync with that rhythm is even more disastrous.[PUBLICATION ABSTRACT]", "num_citations": "1\n", "authors": ["620"]}
{"title": "Software abundance in the face of economic scarcity, part 2\n", "abstract": " The paper is an editorial that discusses the economics aspect of software industry. The author states that we are in a period of global economic funk, by virtually every measure that we can take. The good news is that we've been here before over the years and we've always seemed to get by. Software is still the most fungible and liquid of resources, and its supply is limited only by human imagination and labor. For this reason, the author began to make the case that software-intensive systems are a necessary element in helping us operate, innovate, and even thrive in the face of lean economic times. There are many opportunities in IT for fueling business, ranging from issues of daily hygiene to opportunities for creating entirely new markets. Effective business strategies must involve some mixture of efficiency-based, innovation-based, and customer-intimacy-based efforts. Software development is an engineering\u00a0\u2026", "num_citations": "1\n", "authors": ["620"]}
{"title": "Not with a Bang\n", "abstract": " Software-intensive systems, like bridges and societies, are subject to collapse. Collapse isn't necessarily inevitable, however, but avoiding it requires active, vigorous, and intentional intervention by the system's architects. Two patterns and one antipattern can help architects address the systemic issues that, left unattended, may lead to collapse.", "num_citations": "1\n", "authors": ["620"]}
{"title": "It is what it is because it was what it was\n", "abstract": " Software systems usually have the same basic architectural pattern as their earlier incarnations, manifesting in decreasingly refined forms as we move back in time. Similarly, when a new problem confronts us, we try many different approaches, but over time, for the same kind of problem, solutions tend to converge to the same, more constrained, solution space", "num_citations": "1\n", "authors": ["620"]}
{"title": "The privilege and responsibility of software development\n", "abstract": " As professionals, it is a tremendous privilege to be part of an industry that delivers software that makes a fundamental difference to our organizations, our country, and our civilization. At the same time, however, we must realize that creating quality software that matters is intrinsically hard. As such, as professionals, we have a deep responsibility to do our work with purpose, courage, and a sense of moral purpose.\u201c... a software-intensive system can amplify human intelligence, but it cannot replace human judgment...\u201d", "num_citations": "1\n", "authors": ["620"]}
{"title": "Well-Structured Object-Oriented Architectures\n", "abstract": " Every well-structured OO architecture must consider both of these dimensions.* The first dimension of an 00 architecture\u2014a set of classes organized into multiple hierarchies\u2014serves to capture the static model of the abstractions that form the vocabulary of the domain. I speak of this as a vocabulary because each abstraction represents something in the language of an enduser or an implementer. For example, in the domain of credit card processing, we would find several nearly independent hierarchies relevant to domain experts, including classes representing accounts, institutions, and purchases. Each of these truly represents a hierarchy, not just a single class. For example, there exist corporate accounts, individual accounts, and joint accounts, as well as accounts whose balance may be carried over (with interest) every month and accounts that must be paid off every month. Modeling these different kinds of accounts as one class is wrong because this offers a poor distribution of responsibilities. A better approach is to define a hierarchy of accounts, starting at the most general kind of account and then", "num_citations": "1\n", "authors": ["620"]}
{"title": "\u201cmethodology standards: help or hindrance?\u201d held at OOPSlA 94 October 1994, Portland, Oregon: Report on panel\n", "abstract": " The proliferation of methodologies has prompted some to call for standards in this area. The members of this panel, all prominent methodologists, stated their positions on this topic and then answered questions from the floor.", "num_citations": "1\n", "authors": ["620"]}
{"title": "Growing mature abstractionists\n", "abstract": " Growing mature abstractionists | Object Magazine ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse About Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs Conferences People More Search ACM Digital Library SearchSearch Advanced Search Object Magazine Periodical Home Latest Issue Archive Authors Affiliations Award Winners More HomeBrowse by TitlePeriodicalsObject MagazineVol. , No. Growing mature abstractionists article Growing mature abstractionists Share on Author: Grady Booch profile image Grady Booch View Profile Authors Info & Affiliations Publication: Object MagazineFebruary 1994 0citation 0 Downloads Metrics Total Citations0 Total Downloads0 Last 12 Months0 Last 6 weeks0 Get Citation Alerts New Citation Alert added! This alert has been successfully added and will be sent to: You will be notified whenever a record \u2026", "num_citations": "1\n", "authors": ["620"]}
{"title": "Introduction to object-oriented design\n", "abstract": " This tutorial describes the Booth method for object-oriented design, including details of the notation and the design process. It describes the principles that are necessary for thinking and abstracting in terms of classes and objects. The tutorial includes a number of examples, including war stories from specific projects. It also covers extensions to the notation beyond that described in Object-Oriented Design with Applications. This tutorial is a condensed version of Booths popular tutorial given at past OOPSLAs. If you have attended that in the past then you should attend tutorial 18 instead of this one.", "num_citations": "1\n", "authors": ["620"]}