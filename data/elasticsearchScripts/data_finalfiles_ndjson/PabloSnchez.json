{"title": "Designing and weaving aspect-oriented executable uml models\n", "abstract": " Aspect-Oriented technologies, including Aspect-Oriented Modelling, provide a set of new constructs (eg, advices or pointcuts), that help to improve the modularisation of crosscutting concerns. However, these new constructions can make it more difficult to understand how a system works as a whole, once all design modules are composed together, because:(1) designers may not be familiar with the new aspect-oriented constructions; and/or (2) aspect-orientation may cause new problems, such as the handling of aspect interactions. A straightforward and simple solution to check how a system works is to execute it. UML and its Action Semantics provide the foundations for modelling and executing object-oriented software systems. This paper presents as UML 2.0 Profile which extends the UML and its Action Semantics for the construction of aspect-oriented executable models and also a model weaver which makes the execution of such models possible. Our approach is illustrated using an Online Book Store system taken from the literature.", "num_citations": "60\n", "authors": ["610"]}
{"title": "Feature-oriented model-driven software product lines: The TENTE approach\n", "abstract": " In recent years, modern techniques for advanced separation of concerns and Model-Driven Development (MDD) have provided new means for improving the current methods of Software Product Line (SPL) Engineering. Mechanisms such as family polymorphism and mixin composition can be used to improve the separation and composition of features of an SPL. Using MDD repetitive, laborious and time consuming tasks of SPL processes can be automated. Nevertheless, there is a general lack of SPL processes that integrate advanced mechanisms for separation of concerns with MDD techniques. This paper presents an innovative process, called TENTE, which combines both technologies. The result is a model-driven process that maintains the separation of features both at the architectural design and implementation stages, improving separation of variants; at the same time repetitive, laborious and time consuming tasks are automated.", "num_citations": "25\n", "authors": ["610"]}
{"title": "Survey of aspect-oriented middleware\n", "abstract": " Survey of Aspect-Oriented Middleware - Lancaster EPrints LOADING Skip to main content Lancaster University homepage Home Browse By Year By Subject By Department Search Help Survey of Aspect-Oriented Middleware Loughran, N. and Parlavantzas, N. and Pinto, M. and S\u00e1nchez, P. and Webster, M. and Colyer, A. (2005) Survey of Aspect-Oriented Middleware. UNSPECIFIED. (Unpublished) Full text not available from this repository. Item Type: Other Uncontrolled Keywords: /dk/atira/pure/researchoutput/libraryofcongress/qa75 Subjects: Departments: Faculty of Science and Technology > School of Computing & Communications ID Code: 12562 Deposited By: ep_importer_comp Deposited On: 07 Jul 2011 14:52 Refereed?: No Published?: Unpublished Last Modified: 04 Jun 2020 08:45 URI: https://eprints.lancs.ac.uk/id/eprint/12562 Lancaster University Library homepage Links EPrints FAQ Privacy Policy \u2026", "num_citations": "24\n", "authors": ["610"]}
{"title": "Mortadelo: Automatic generation of NoSQL stores from platform-independent data models\n", "abstract": " In the last decade, several NoSQL systems have emerged as a response to the scalability problems manifested by classical relational databases when used in Big Data contexts. These NoSQL systems appeared first as physical-level solutions, initially lacking any design methodologies. After this initial batch of systems, several design methodologies for NoSQL have been recently created. Nevertheless, most of these methodologies target just one NoSQL paradigm. In addition, as each methodology uses a different conceptual modeling approach, NoSQL database designers would need to remake conceptual models as they switch from one NoSQL paradigm to another. Moreover, most of these design processes provide just a set of design heuristics and guidelines that database designers need to apply manually, which can be a time-consuming and error-prone process. To overcome these limitations, this article\u00a0\u2026", "num_citations": "13\n", "authors": ["610"]}
{"title": "FLANDM: a development framework of domain-specific languages for data mining democratisation\n", "abstract": " Companies have an increasing interest in employing data mining to take advantage of the vast amounts of data their systems store nowadays. This interest confronts two problems: (1) business experts usually lack the skills required to apply data mining techniques, and (2) the specialists who know how to use these techniques are a scarce and valuable asset. To help democratise data mining, we proposed, in a previous work, the development of domain-specific languages (DSLs) that hide the complexity of data mining techniques. The objective of these DSLs is to allow business experts to specify analysis processes by using high-level primitives and terminology from the application domain. These specifications would then be automatically transformed into a low-level, executable form. Although these DSLs might offer a promising solution to the aforementioned problems, their development from scratch requires a\u00a0\u2026", "num_citations": "6\n", "authors": ["610"]}
{"title": "Towards a DSL for educational data mining\n", "abstract": " Nowadays, most companies and organizations rely on computer systems to run their work processes. Therefore, the analysis of how these systems are used can be an important source of information to improve these work processes. In the era of Big Data, this is perfectly feasible with current state-of-art data analysis tools. Nevertheless, these data analysis tools cannot be used by general users, as they require a deep and sound knowledge of the algorithms and techniques they implement. In other areas of computer science, domain-specific languages have been created to abstract users from low level details of complex technologies. Therefore, we believe the same solution could be applied for data analysis tools. This article explores this hypothesis by creating a Domain-Specific Language (DSL) for the educational domain.", "num_citations": "5\n", "authors": ["610"]}
{"title": "Lavoisier: A DSL for increasing the level of abstraction of data selection and formatting in data mining\n", "abstract": " Input data of a data mining algorithm must conform to a very specific tabular format. Data scientists arrange data into that format by creating long and complex scripts, where different low-level operations are performed, and which can be a time-consuming and error-prone process. To alleviate this situation, we present Lavoisier, a declarative language for data selection and formatting in a data mining context. Using Lavoisier, script size for data preparation can be reduced by\u223c 40% on average, and by up to 80% in some cases. Additionally, accidental complexity present in state-of-the-art technologies is considerably mitigated.", "num_citations": "4\n", "authors": ["610"]}
{"title": "Mortadelo: A Model-Driven Framework for NoSQL Database Design\n", "abstract": " In big data contexts, the performance of relational databases can get overwhelmed, usually by numerous concurrent connections over large volumes of data. In these cases, the support of ACID transactions is dropped in favour of NoSQL data stores, which offer quick responses and high data availability. Although NoSQL systems solve this concrete performance problem, they also present some issues. For instance, the NoSQL spectrum covers a wide range of database paradigms, such as key-value, column-oriented or document stores. These paradigms differ too much from the relational model, provoking that it is not possible to make use of existent, well-known practices from relational database design. Moreover, the existence of that paradigm heterogeneity makes difficult the definition of general design practices for NoSQL data stores. We present Mortadelo, a framework devised for the automatic\u00a0\u2026", "num_citations": "4\n", "authors": ["610"]}
{"title": "State charts as an intermediate representation of JPDDs which help developers to map them to executable artifacts\n", "abstract": " Join Point Designation Diagrams (JPDDs) give developers the ability to model their join point selections in the UML, independent of any existing aspect-oriented programming language. In order to apply JPDDs in real software projects, it is necessary to have an executable representation of them--either in terms of generated code for the desired aspect-oriented programming language or directly as executable diagrams in an environment that permits to execute UML diagrams. While principles for translating JPDDs into a target language are already known, it turns out that developers who follow those principles still face a large number of problems due to the complex selection semantics for dynamic join point: developers need to collect all data that is necessary to detect dynamic join points, and they need to maintain that data in appropriate data structures. In order to ease this step, it is desirable to translate JPDDs\u00a0\u2026", "num_citations": "3\n", "authors": ["610"]}
{"title": "Pinset: A DSL for Extracting Datasets from Models for Data Mining-Based Quality Analysis\n", "abstract": " Data mining techniques have been successfully applied to software quality analysis and assurance, including quality of modeling artefacts. Before such techniques can be used, though, data under analysis commonly need to be formatted into two-dimensional tables. This constraint is imposed by data mining algorithms, which typically require a collection of records as input for their computations. The process of extracting data from the corresponding sources and formatting them properly can become error-prone and cumbersome. In the case of models, this process is mostly carried out through scripts written in a model management language, such as EOL or ATL. To improve this situation, we present Pinset, a domain-specific language devised for the extraction of tabular datasets from software models. Pinset offers a tailored syntax and built-in facilities for common activities in dataset extraction. For evaluation\u00a0\u2026", "num_citations": "2\n", "authors": ["610"]}
{"title": "Extracci\u00f3n De Grupos Perceptuales En Im\u00e1genes A Partir De T\u00e9cnicas De Partici\u00f3n Espectral De Grafos\n", "abstract": " La extracci\u00f3n de grupos perceptuales de una imagen es una tarea muy simple para el humano pero compleja para un sistema de visi\u00f3n artificial. Las t\u00e9cnicas de agrupamiento mediante espectro de grafos, empleadas desde hace algunos a\u00f1os en la segmentaci\u00f3n de im\u00e1genes, ofrecen una herramienta potente y eficaz para este tipo de operaci\u00f3n. En este trabajo se presenta una implementaci\u00f3n del m\u00e9todo de corte normalizado de grafos para la obtenci\u00f3n autom\u00e1tica de grupos perceptuales de im\u00e1genes formadas por segmentos y de puntos. Tambi\u00e9n se presentan resultados que ilustran la utilidad, posibilidades y correcto funcionamiento de esta t\u00e9cnica.", "num_citations": "2\n", "authors": ["610"]}
{"title": "Lavoisier: High-Level Selection and Preparation of Data for Analysis\n", "abstract": " Most data mining algorithms require their input data to be provided in a very specific tabular format. Data scientists typically achieve this task by creating long and complex scripts, written in data management languages such as SQL, R or Pandas, where different low-level data transformation operations are performed. The process of writing these scripts can be really time-consuming and error-prone, which decreases data scientists\u2019 productivity. To overcome this limitation, we present Lavoisier, a declarative language for data extraction and formatting. This language provides a set of high-level constructs that allow data scientists to abstract from low-level data formatting operations. Consequently, data extraction scripts\u2019 size and complexity are reduced, contributing to an increase of the productivity with respect to using conventional data manipulation tools.", "num_citations": "1\n", "authors": ["610"]}
{"title": "A Model-Driven Ecosystem for the Definition of Data Mining Domain-Specific Languages\n", "abstract": " Data mining techniques are making their entrance in nowadays companies, allowing business users to take informed decisions based on their available data. However, these business experts usually lack the knowledge to perform the analysis of the data by themselves, which makes it necessary to rely on experts in the field of data mining. In an attempt to solve this problem, we previously studied the definition of domain-specific languages, which allowed to specify data mining processes without requiring experience in the applied techniques. The specification was made through high-level language primitives, which referred only to familiar concepts and terms from the original domain of the data. Therefore, technical details about the mining processes were hidden to the final user. Although these languages present themselves as a promising solution, their development can become a challenging task\u00a0\u2026", "num_citations": "1\n", "authors": ["610"]}
{"title": "Facilitating the Exploration of Join Point Selection In Aspect-Oriented Models\n", "abstract": " Aspect-oriented systems provide developers with several means to specify what characteristics selected join points need to possess, as opposed to how these join points are selected. In some situations, though, developers want to know how a join point is selected, eg, when they observe that their pointcut does not work as expected. Then, developers tend to inspect the scattered and cryptic results of the aspect weaver, which is a tedious task. To improve this situation, we present a model transformation which translates the characteristic-centered specification of a pointcut (ie, the what?) into a progress-oriented description of the corresponding selection process (ie, the how?). This progressoriented description denotes a consolidated and contiguous view of (only) the relevant steps leading to the selection of a join point. It may thus help developers in understanding how join points are selected, eg, why a pointcut designates join points which it wasn't expected to designate.", "num_citations": "1\n", "authors": ["610"]}