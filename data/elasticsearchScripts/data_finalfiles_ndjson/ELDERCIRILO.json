{"title": "A product derivation tool based on model-driven techniques and annotations.\n", "abstract": " In this paper, we present a model-based tool for product derivation. Our tool is centered on the definition of three models (feature, architecture and configuration models) which enable the automatic instantiation of software product lines (SPLs) or frameworks. The Eclipse platform and EMF technology are used as the base for the implementation of our tool. A set of specific Java annotations are also defined to allow generating automatically many of our models based on existing implementations of SPL architectures. We illustrated the use and validation of our tool in the preparation of the automatic derivation of the JUnit framework and a J2ME games product line.", "num_citations": "73\n", "authors": ["243"]}
{"title": "A framework for migrating relational datasets to NoSQL\n", "abstract": " In software development, migration from a Data Base Management System (DBMS) to another, especially with distinct characteristics, is a challenge for programmers and database administrators. Changes in the application code in order to comply with new DBMS are usually vast, causing migrations infeasible. In order to tackle this problem, we present NoSQLayer, a framework capable to support conveniently migrating from relational (i.e., MySQL) to NoSQL DBMS (i.e., MongoDB). This framework is presented in two parts: (1) migration module; and, (2) mapping module. The first one is a set of methods enabling seamless migration between DBMSs (i.e. MySQL to MongoDB). The latter provides a persistence layer to process database requests, being capable to translate and execute these requests in any DBMS, returning the data in a suitable format as well. Experiments show NoSQLayer as a handful solution\u00a0\u2026", "num_citations": "70\n", "authors": ["243"]}
{"title": "Supporting the identification of architecturally-relevant code anomalies\n", "abstract": " Code anomalies are likely to be critical to the systems' maintainability when they are related to architectural problems. Many tools have been developed to support the identification of code anomalies. However, those tools are restricted to only analyze source code structure and identify individual anomaly occurrences. These limitations are the main reasons why state-of-art tools are often unable to identify architecturally-relevant code anomalies, i.e. those related to architectural problems. To overcome these shortcomings we propose SCOOP, a tool that includes: (i) architecture-code traces in the analysis of the source code, and (ii) exploits relationships between multiple occurrences of code anomalies to detect the architecturally-relevant ones. Our preliminary evaluation indicated that SCOOP was able to detect anomalous code elements related to 293 out of 368 architectural problems found in 3 software systems.", "num_citations": "57\n", "authors": ["243"]}
{"title": "Jat: A test automation framework for multi-agent systems\n", "abstract": " Automated tests have been widely used as a supporting mechanism during software development and maintenance activities. It improves the confidence on software releases as it seeks to uncover regression bugs, and serves as a live documentation which is very useful when evolving systems. Concerning multi agent systems (MASs), some characteristics such as agent autonomy and asynchronous message-based interaction bring a degree of non-determinism which presents new testing challenges. This paper proposes JAT, a framework for building and running MASs test scenarios, which relies on the use of aspect-oriented techniques to monitor the autonomous agents during tests and control the test input of asynchronous test cases. The tool has been developed on top of JADE, a widely used agent platform implemented in Java. We have used JAT on testing 3 different MASs. Our experience shows that JAT\u00a0\u2026", "num_citations": "46\n", "authors": ["243"]}
{"title": "Integrating component and product lines technologies\n", "abstract": " In this paper, we explore the integration of product line and component technologies in the context of the product derivation process. In particular, we propose new extensions to our existing model-based product derivation tool, called GenArch, in order to address the new abstractions and mechanisms provided by the Spring and OSGi component models. The GenArch extensions enable the automatic instantiation of product lines and applications - implemented using these component technologies. Moreover, it also enables different levels of customization, from fine-grained configuration of component properties to the automatic selection of components that will compose the final product.", "num_citations": "30\n", "authors": ["243"]}
{"title": "Automating the product derivation process of multi-agent systems product lines\n", "abstract": " Agent-oriented software engineering and software product lines are two promising software engineering techniques. Recent research work has been exploring their integration, namely multi-agent systems product lines (MAS-PLs), to promote reuse and variability management in the context of complex software systems. However, current product derivation approaches do not provide specific mechanisms to deal with MAS-PLs. This is essential because they typically encompass several concerns (e.g., trust, coordination, transaction, state persistence) that are constructed on the basis of heterogeneous technologies (e.g., object-oriented frameworks and platforms). In this paper, we propose the use of multi-level models to support the configuration knowledge specification and automatic product derivation of MAS-PLs. Our approach provides an agent-specific architecture model that uses abstractions and instantiation\u00a0\u2026", "num_citations": "28\n", "authors": ["243"]}
{"title": "Preference-based feature model configuration with multiple stakeholders\n", "abstract": " Feature model configuration is known to be a hard, error-prone and time-consuming activity. This activity gets even more complicated when it involves multiple stakeholders in the configuration process. Research work has proposed approaches to aid multi-stakeholder feature model configuration, but they rely on systematic processes that constraint decisions of some of the stakeholders. In this paper, we propose a novel approach to improve the multi-stakeholder configuration process, considering stakeholders' preferences expressed through both hard and soft constraints. Based on such preferences, we recommend different product configurations using different strategies from the social choice theory. We conducted an empirical study to evaluate the effectiveness of our strategies with respect to individual stakeholder satisfaction and fairness among all stakeholders. Results indicate that particular strategies\u00a0\u2026", "num_citations": "23\n", "authors": ["243"]}
{"title": "Extending web-based applications to incorporate autonomous behavior\n", "abstract": " Web applications are popular nowadays due to the ubiquity of the client and also because user experience is becoming each time more interactive. However, several tasks of these applications can be automated. Agent-oriented software engineering has emerged as a new software engineering paradigm to allow the development of applications that present autonomous behavior. In this work, we present two case studies of web-based systems, on which we added autonomous behavior by means of software agents. We also discuss some design and implementation issues found on the development of those systems and propose an architectural pattern as a consequence of our case studies.", "num_citations": "20\n", "authors": ["243"]}
{"title": "GenArch-A Model-Based Product Derivation Tool.\n", "abstract": " In this paper, we present a model-based tool for product derivation. Our tool is centered on the definition of three models (feature, architecture and configuration models) which enable the automatic instantiation of software product lines (SPLs) or frameworks. The Eclipse platform and EMF technology are used as the base for the implementation of our tool. A set of specific Java annotations are also defined to allow generating automatically many of our models based on existing implementations of SPL architectures.", "num_citations": "18\n", "authors": ["243"]}
{"title": "Bug report summarization: An evaluation of ranking techniques\n", "abstract": " Bug reports are regularly consulted software artifacts, especially, because they contain valuable information for many change management tasks. Developers consult them whenever they need to know already reported problems or have to investigate previous bug solutions. This activity, however, consumes a substantial amount of time once bug reports content might achieve dozens of comments and thousands of sentences. One recommended and massively applied solution to prevent developers to read the entire bug report is to summarize the whole conversation in a few sentences. Summaries ideally give to developers an overview of the current status of the bug and the reasons, highlighting the result of each proposed solution, for which environments, which solutions are most appropriated, and the necessary information to reproduce the bug. This strategy intends to minimize the time a developer would spend\u00a0\u2026", "num_citations": "15\n", "authors": ["243"]}
{"title": "Are you still smelling it? A comparative study between Java and Kotlin language\n", "abstract": " Java is one of the most widely used programming languages. However, Java is a verbose language, thus one of the main drawbacks of the language is that even simple tasks often entail writing a significant amount of code. In some cases, writing too much code might lead to certain code smells, which are violations of fundamental design that can negatively impact the overall quality of programs. To allow programmers to write concise code, JetBrains created a new language named Kotlin. Nevertheless, few studies have evaluated whether Kotlin leads to concise and clearer code in comparison to Java. We conjecture that due to Java's verbosity, programs written in Java are likely to have more code smells than Kotlin programs. Therefore, we set out to evaluate whether some types of code smells are more common in Java programs. To this end, we carried out a large-scale empirical study involving more than 6\u00a0\u2026", "num_citations": "14\n", "authors": ["243"]}
{"title": "Configuration knowledge of software product lines: A comprehensibility study\n", "abstract": " The configuration knowledge is a key element to the success of software product lines, as it defines constraints on how product line variability should be composed to derive products. Even though configuration knowledge specification is a long standing problem in software product line engineering, the impact of different specification techniques on comprehensibility has never been studied. This paper presents an empirical study to evaluate and compare three techniques for configuration knowledge specification. Each of them is centered on different means to express the configuration constraints: annotations, general-purpose modeling, and domain-specific modeling. Our results suggest that:(i) the use of domain-specific abstractions tends to facilitate the comprehension of coarse-grained variability;(ii) the use of general-purpose models imposes certain restrictions on the location and comprehension of the configuration knowledge; and (iii) the correct comprehension of configuration constraints is not associated with individual expertise.", "num_citations": "9\n", "authors": ["243"]}
{"title": "Genarch: Uma ferramenta baseada em modelos para deriva\u00e7\u00e3o de produtos de software\n", "abstract": " Produtos de Software. Rio de Janeiro, 2008. 100p. Disserta\u00e7\u00e3o de Mestrado-Departamento de Inform\u00e1tica, Pontif\u00edcia Universidade Cat\u00f3lica do Rio de Janeiro.Este trabalho apresenta uma ferramenta baseada em modelos para deriva\u00e7\u00e3o de produtos de LPSs, denominada GenArch. O objetivo principal da ferramenta \u00e9 permitir que a comunidade de desenvolvimento de software tradicional, utilize conceitos e fundamentos de abordagens de LPSs na produ\u00e7\u00e3o de seus sistemas ou partes de seus sistemas sem a necessidade do entendimento de modelos e conceitos complexos. A abordagem implementada pela ferramenta foi elaborada com base em fundamentos do desenvolvimento dirigido por modelos. Centrada na defini\u00e7\u00e3o de tr\u00eas modelos (caracter\u00edsticas, implementa\u00e7\u00e3o e configura\u00e7\u00e3o), a ferramenta permite a deriva\u00e7\u00e3o autom\u00e1tica de produtos ou frameworks existentes. O trabalho tamb\u00e9m define um\u00a0\u2026", "num_citations": "9\n", "authors": ["243"]}
{"title": "Understanding vulnerabilities in plugin-based web systems: an exploratory study of wordpress\n", "abstract": " A common software product line strategy involves plugin-based web systems that support simple and quick incorporation of custom behaviors. As a result, they have been widely adopted to create web-based applications. Indeed, the popularity of ecosystems that support plugin-based development (eg, WordPress) is largely due to the number of customization options available as community-contributed plugins. However, plugin-related vulnerabilities tend to be recurrent, exploitable and hard to be detected and may lead to severe consequences for the customized product. Hence, there is a need to further understand such vulnerabilities to enable preventing relevant security threats. Therefore, we conducted an exploratory study to characterize vulnerabilities caused by plugins in web-based systems. To this end, we went over WordPress vulnerability bulletins cataloged by the National Vulnerability Database as well\u00a0\u2026", "num_citations": "7\n", "authors": ["243"]}
{"title": "A case for new directions in agent-oriented software engineering\n", "abstract": " The state-of-the-art of Agent-oriented Software Engineering (AOSE) is insufficiently reflected in the state-of-practice in developing complex distributed systems. This paper discusses software engineering (SE) areas that have not been widely addressed in the context of AOSE, leading to a lack of mechanisms that support the development of Multiagent Systems (MASs) based on traditional SE principles, such as modularity, reusability and maintainability. This discussion is based on an exploratory study of the development of a family of buyer agents following the belief-desire-intention model and using a Software Product Line architecture. Based on the discussion presented in this paper, we hope to encourage the AOSE community to address particular SE issues on the development of MAS that have not yet been (widely) considered.", "num_citations": "7\n", "authors": ["243"]}
{"title": "Extending PASSI to model multi-agent systems product lines\n", "abstract": " Multi-agent System Product Lines (MAS-PLs) have emerged to integrate software product lines (SPLs) and agent-oriented software engineering techniques by incorporating their respective benefits and helping the industrial exploitation of agent technology. In this paper, we present a new approach for modeling MAS-PLs, focusing the domain analysis stage. Our approach is based on PASSI methodology and incorporates some extensions to address agency variability.", "num_citations": "7\n", "authors": ["243"]}
{"title": "Configurable Software Product Lines\u2013Supporting Heterogeneous Configuration Knowledge\n", "abstract": " Although different types of enterprise information systems have been built as configurable software product lines, the growing heterogeneity and diversity in system development approaches makes it difficult to specify the configuration knowledge. In this paper we examine the deficiencies of current approaches to the specification of configuration knowledge, and as a solution propose the notion of Domain Knowledge Modeling Languages (DKMLs). We also present GenArch+, an extensible tool that supports the creation and composition of DKMLs. We illustrate and evaluate the use of DKMLs in four different product lines. Our quantitative and qualitative assessment suggests that the use of DMKLs brings improvements for heterogeneous configuration knowledge specification.", "num_citations": "6\n", "authors": ["243"]}
{"title": "Automatic Derivation of Spring-OSGi based Web Enterprise Applications\n", "abstract": " Component-based technologies (CBTs) are nowadays widely adopted in the development of different kinds of applications. They provide functionalities to facilitate the management of the application components and their different configurations. Spring and OSGi are two relevant examples of CBTs in the mainstream scenario. In this paper, we explore the use of Spring/OSGi technologies in the context of automatic product derivation. We illustrated through a typical web-based enterprise application: (i) how different models of a feature-based product derivation tool can be automatically generated based on the configuration files of Spring and OSGi, and Java annotations; and (ii) how the different abstractions provided by these CBTs can be related to a feature model with the aim to automatically derive an Spring/OSGi based application or product line.", "num_citations": "6\n", "authors": ["243"]}
{"title": "Engenharia de software em Telessa\u00fade: aplica\u00e7\u00f5es e desafios\n", "abstract": " Tecnologias da informa\u00e7\u00e3o e comunica\u00e7\u00e3o (TIC) v\u00eam sendo amplamente exploradas na pr\u00e1tica de Sa\u00fade. Al\u00e9m da grande variedade de ferramentas que foram desenvolvidas no aux\u00edlio \u00e0 preven\u00e7\u00e3o e tratamento de doen\u00e7as, tamb\u00e9m", "num_citations": "5\n", "authors": ["243"]}
{"title": "Fine-grained variability in the development of families of software agents\n", "abstract": " This paper contains a presentation of an exploratory study of the development of a family of software agents, in which we adopted techniques to support the construction of agents using reusable assets that address domain variability. This agent family was built using a Software Product Line (SPL) architecture with fine-grained variability. We describe the development of our case study, the Buyer agent SPL, and report on lessons learned primarily related to: what variable types were handled, how current Multi-agent System (MAS) methodologies are able to document variability and provide mechanisms to enable software reuse, and what implementation techniques were adopted.", "num_citations": "5\n", "authors": ["243"]}
{"title": "Assisted User-Guidance in Collaborative and Dynamic Software Product Line Configuration.\n", "abstract": " The product configuration is a key activity for enabling mass customization. It corresponds to tailor a software application from a software product line, respecting individual customer requirements. In practice, the product configuration activity is challenging, mainly because it involves numerous stakeholders with different expertise making decisions. Several works claim to decompose the configuration activity into pre-arranged stages, whereby stakeholders can make their decisions in a separately way and coherent fashion. However, due to the decentralization in geography of the knowledge required in each stage and that customer requirements could be imprecise and change frequently, the proposed solutions do not apply. To address these issues, this paper proposes a dynamic and distributed product configuration approach based on the personal assistant metaphor. Personal assistants in a cooperative way\u00a0\u2026", "num_citations": "4\n", "authors": ["243"]}
{"title": "Please please me: does the presence of test cases influence mobile app users' satisfaction?\n", "abstract": " Mobile application developers have started to realize that quality plays a vital role in increasing the popularity of mobile applications (apps), thereby directly influencing economical profit (in-app purchases revenue) and app-related success factors (ie, number of downloads). Therefore, developers have become increasingly concerned with taking preemptive actions to ensure the quality of their apps. In general, developers have been relying on testing as their main quality assurance practice. However, little is known about how much mobile app testing contributes to increasing user level satisfaction. In this paper we investigate to what extent testing mobile apps contributes to achieving higher user satisfaction. To this end, we probed into whether there is a relation between having automated tests and overall user satisfaction. We looked into users ratings, which express their level of satisfaction with apps, and users\u00a0\u2026", "num_citations": "3\n", "authors": ["243"]}
{"title": "SS-BDD: automated acceptance testing for spreadsheets\n", "abstract": " Current Spreadsheet Applications, such as Excel and Google Sheets, provide innumerous built-in facilities, including arithmetic, financial and statistical operations, as well as conditional expressions. Thus, users with little or no formal training in programming can use Spreadsheet Applications to implement their own Spreadsheet Programs. In fact, Spreadsheet Applications have become one of the most popular end-user programming environments nowadays. However, these applications also ease the introduction of errors in Spreadsheet Programs. Minor mistakes in formulas can mislead decisionmaking processes, resulting in uncountable costs to organizations. In general, end-user programmers are unaware of the potential risks that the uncontrolled construction of Spreadsheet Programs can cause. Therefore, a major focus of this paper is to offer an automated approach that makes programmers aware of\u00a0\u2026", "num_citations": "3\n", "authors": ["243"]}
{"title": "Automatic product derivation of multi-agent systems product lines\n", "abstract": " Multi-agent Systems (MASs) development and Software Product Lines (SPLs) are two consolidated software engineering techniques. Recent research work explores the integration between them by proposing new templates and adaptations to document SPL variability in the context of MASs. However, the automatic product derivation process is not addressed in these works. In this paper, we propose a new extension to our existing model-based product derivation tool, called GenArch, in order to enable the automatic instantiation and customization of Multiagent Systems Product Lines (MAS-PLs). A case study illustrates how the proposed extension can be used to derive products (instances) from a MAS-PL.", "num_citations": "3\n", "authors": ["243"]}
{"title": "Estudo e avalia\u00e7\u00e3o de linguagens de programa\u00e7\u00e3o musical\n", "abstract": " Music programming languages date back to the early days of computing and have suffered and still suffer a major influence from evolution and researchs in the area of Programming Languages. This influence resulted in an ecosystem of languages with different paradigms but under the same domain, Computer Music. In this article, we present the historical questions of the evolution of these languages, their technical and developmental issues and also an analysis and evaluation of them, taking into account the ease of use and criteria such as readability, expressiveness and writeability. Finally, we present a discussion about this analysis and evaluation that can help artists/programmers in the adoption of these languages.Resumo. As linguagens de programa\u00e7\u00e3o musical datam dos prim\u00f3rdios da computa\u00e7\u00e3o e sofreram-e ainda sofrem-uma grande influ\u00eancia da evolu\u00e7\u00e3o e pesquisa na \u00e1rea de Linguagens de Programa\u00e7\u00e3o. Esta influ\u00eancia resultou em um ecossistema de linguagens com diferentes paradigmas mas sob o mesmo dom\u00ednio, a Computa\u00e7\u00e3o Musical. Neste artigo, apresentamos as quest\u00f5es hist\u00f3rias da evolu\u00e7\u00e3o destas linguagens, as suas quest\u00f5es t\u00e9cnicas e de desenvolvimento e tamb\u00e9m uma an\u00e1lise e avalia\u00e7\u00e3o das mesmas levando em considera\u00e7\u00e3o a facilidade de uso e crit\u00e9rios como legibilidade, expressividade e facilidade de escrita. Por fim, apresentamos uma discuss\u00e3o sobre esta an\u00e1lise e avalia\u00e7\u00e3o que pode auxiliar artistas/programadores na ado\u00e7\u00e3o destas linguagens.", "num_citations": "2\n", "authors": ["243"]}
{"title": "Experience with Automatic Product Derivation of Mobile Applications Using Model-Driven Techniques\n", "abstract": " In this work, the authors describe their experience on the adoption of a model-driven product derivation tool to help variability management and automatic product instantiation of a mobile product line, called MobileMedia. MobileMedia is a software product line (SPL) that provides support to manage (create, delete, visualize, play, send) different medias (photo, music, and video) on mobile devices. It was previously implemented as a Java Micro Edition (JME) application, in two different versions:(i) the first one uses conditional compilation implementation mechanisms to modularize their respective variations; and (ii) the second one adopts aspect-oriented programming, specifically AspectJ language, to explore a better modularization and separation of their respective variations. In this chapter, the authors illustrate how GenArch, a model-driven product derivation tool developed at the authors\u2019 research labs, can be\u00a0\u2026", "num_citations": "2\n", "authors": ["243"]}
{"title": "GenArch+ an extensible infrastructure for building framework-based software product lines\n", "abstract": " Software product line (SPL) engineering has been focused on tailor single products without programming new completion code. Systematic reuse as configuration potentially lead to significant gains but requires the configuration knowledge to be well conducted. However, due to the use of frameworks to relive the development of software systems, it might become difficult to have precise and comprehensible configuration knowledge specifications. First, because the completion code of a specific framework-provided concept might be scattered across and tangled with code implementing other concepts or features. Second, creating an instance of a framework-provided abstraction involves making implementation choices, some of which are stipulated by hidden programming interface and crosscut heterogeneous languages. In this demonstration we present a tool based on Domain Knowledge Modeling Languages\u00a0\u2026", "num_citations": "2\n", "authors": ["243"]}
{"title": "Developing a family of software agents with fine-grained variability: an exploratory study\n", "abstract": " This paper presents an exploratory study of the development of a family of software agents, in which we had to adopt appropriate techniques to allow building agents using reusable assets that address the domain vari ability. This agents family was built using a Software Product Line (SPL) ar chitecture with finegrained variability. We describe the development of our case study, the Buyer agent SPL, and report lessons learned mainly related to the following points: variability types that we dealt with, how current Multi agent System (MAS) methodologies are able to document variability and provide mechanisms to enable software reuse, and adopted implementation techniques.", "num_citations": "2\n", "authors": ["243"]}
{"title": "Using governance and adaptive normative multiagent systems for dynamic vehicle platoon formation\n", "abstract": " Autonomous vehicles (AVs) are vehicles able to sense their environments and guide themselves with little or no human input. AVs have the potential to provide a wide variety of benefits to road traffic, such as improving traffic flow, alleviating traffic congestion and reducing car accidents. However, there are scenarios where AVs require governance systems capable of performing collaborative actions in order to keep traffic flowing smoothly and safely. This paradigm shift will support moving from isolated to collaborative autonomous vehicles. Our goal is to create a collaborative governance-based autonomous vehicle approach using adaptive normative multiagent systems to reduce congestion time. With this collaborative perspective in mind, steps should be taken for AVs to improve their collective mobility while not undermining the `social' goals of vehicle platoons and be able to provide benefits such as reduced\u00a0\u2026", "num_citations": "1\n", "authors": ["243"]}
{"title": "Promoting Reusability and Extensibility in the Engineering of Domain-Specific Conversational Systems\n", "abstract": " Conversational systems are computer programs that interact with users using natural language. Considering the complexity and interaction of the different components involved in building intelligent conversational systems that can perform diverse tasks, a promising approach to facilitate their development is by using multiagent systems (MAS). This paper reviews the main concepts and history of conversational systems, and introduces an architecture based on MAS. This architecture was designed to support the development of conversational systems in the domain chosen by the developer while also providing a reusable built-in dialogue control. We present a practical application in the healthcare domain. We observed that it can help developers to create conversational systems in different domains while providing a reusable and centralized dialogue control. We also present derived lessons learned that can be\u00a0\u2026", "num_citations": "1\n", "authors": ["243"]}
{"title": "An\u00e1lise e classifica\u00e7\u00e3o de Linguagens de Programa\u00e7\u00e3o Musical\n", "abstract": " Professor do Departamento de Ci\u00eancia da Computa\u00e7\u00e3o da Universidade Federal de S\u00e3o Jo\u00e3o del-Rei, atuou como pesquisador visitante na Universidade de Waterloo (Canad\u00e1) durante um per\u00edodo de 4 anos e como p\u00f3s-doutorando no Laborat\u00f3rio de Engenharia de Software da PUC-Rio. Possui gradua\u00e7\u00e3o em Ci\u00eancia da Computa\u00e7\u00e3o pela Universidade Federal de Juiz de Fora (2006). Obteve seu mestrado em Inform\u00e1tica pela Pontif\u00edcia Universidade Cat\u00f3lica do Rio de Janeiro (2008) e doutorado em Inform\u00e1tica pela Pontif\u00edcia Universidade Cat\u00f3lica do Rio de Janeiro (2012). Tem experi\u00eancia na \u00e1rea de Engenharia de Software, com \u00eanfase em sistemas de software configur\u00e1veis, linguagens espec\u00edficas de dom\u00ednio, desenvolvimento de software orientado a features, programa\u00e7\u00e3o por usu\u00e1rios finais e engenharia de software experimental. E-mail: elder@ ufsj. edu. br", "num_citations": "1\n", "authors": ["243"]}
{"title": "Software Engineering in Telehealth, an Extension of Sana Mobile Applied to the Process of a Routine Hospital\n", "abstract": " The patient\u2019s medical record, containing the reasons for hospitalization, clinical evolution, laboratory tests, prescription drugs and other relevant information is of utmost importance to medical management care. Information technology plays a key role in communicating and disseminating the patient\u2019s clinical data [1]. The Sana Mobile, originally developed by MIT (the Massachusetts Institute of Technology) for mobile platform, consists of an open source electronic medical record. It has revolutionized the delivery of healthcare services in remote areas in a clear and objective way [2]. The mobile device stores Sana medical data, text files, audio and video containing patient\u2019s clinical information while transmitting data over the mobile platform to a web server, the Open Medical Record System \u2013 OpenMRS. This system gathers information about medications, diagnoses, and others crucial data from a patient\u00a0\u2026", "num_citations": "1\n", "authors": ["243"]}
{"title": "A domain analysis approach for multi-agent systems product lines\n", "abstract": " In this paper, we propose an approach for documenting and modeling Multi-agent System Product Lines (MAS-PLs) in the domain analysis stage. MAS-PLs are the integration between two promising techniques, software product lines and agent-oriented software engineering, aiming at incorporating their respective benefits and helping the industrial exploitation of agent technology. Our approach explores the scenario of including agency features to existing web applications and is based on PASSI, an agent-oriented methodology, to which we added some extensions to address agency variability. A case study, OLIS (OnLine Intelligent Services), illustrates our approach.", "num_citations": "1\n", "authors": ["243"]}