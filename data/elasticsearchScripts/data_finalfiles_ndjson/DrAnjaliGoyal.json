{"title": "NRFixer: Sentiment Based Model for Predicting the Fixability of Non-Reproducible Bugs\n", "abstract": " EN Software maintenance is an essential step in software development life cycle. Nowadays, software companies spend approximately 45% of total cost in maintenance activities. Large software projects maintain bug repositories to collect, organize and resolve bug reports. Sometimes it is difficult to reproduce the reported bug with the information present in a bug report and thus this bug is marked with resolution non-reproducible (NR). When NR bugs are reconsidered, a few of them might get fixed (NR-to-fix) leaving the others with the same resolution (NR). To analyse the behaviour of developers towards NR-to-fix and NR bugs, the sentiment analysis of NR bug report textual contents has been conducted. The sentiment analysis of bug reports shows that NR bugs\u2019 sentiments incline towards more negativity than reproducible bugs. Also, there is a noticeable opinion drift found in the sentiments of NR-to-fix bug reports. Observations driven from this analysis were an inspiration to develop a model that can judge the fixability of NR bugs. Thus a framework, NRFixer, which predicts the probability of NR bug fixation, is proposed. NRFixer was evaluated with two dimensions. The first dimension considers meta-fields of bug reports (model-1) and the other dimension additionally incorporates the sentiments (model-2) of developers for prediction. Both models were compared using various machine learning classifiers (Zero-R, naive Bayes, J48, random tree and random forest). The bug reports of Firefox and Eclipse projects were used to test NRFixer. In Firefox and Eclipse projects, J48 and Naive Bayes classifiers achieve the best prediction accuracy\u00a0\u2026", "num_citations": "11\n", "authors": ["1920"]}
{"title": "Visheshagya: Time based expertise model for bug report assignment\n", "abstract": " The brisk escalation in scale of software systems has made bug triaging an imperative step in bug fixing process. A huge amount of bug reports is submitted daily to bug tracking repositories. Although this practice assists in building a reliable and error-free software product but handling a large amount of work becomes challenging. Bug assignment, an essential step in bug triaging, is the process of designating a suitable developer for the bug report who could make code changes in order to fix the bug. Various approaches ranging from semi to fully automatic bug assignment are proposed in literature. These approaches are mostly based on machine learning and information retrieval techniques. Since the information retrieval based activity profiling approach achieves higher accuracy, they are more often used in recent studies. Time factor based normalization in activity profiling could play a vital role in analyzing\u00a0\u2026", "num_citations": "10\n", "authors": ["1920"]}
{"title": "Empirical Analysis of Ensemble Machine Learning Techniques for Bug Triaging\n", "abstract": " Bug reports are an inescapable part of the software product framework. Nowadays, software advancements have led to the creation of beta versions of software in order to assemble the bug reports from clients. The assembled bug reports are then handled by software developers to make consequent software more reliable as well as robust. However, high recurrence of approaching bug reports forges the process of bug fixing to be a troublesome & tedious process. Bug triaging is an essential component of issue handling process and it deals with the selection of a suitable software developer for handling of reported bug such that the assigned developer is able to fix the reported issue. In the literature, different semi and fully mechanized procedures are proposed to facilitate the endeavor of developer selection in bug repositories. These techniques use historically fixed information from bug repositories to classify any\u00a0\u2026", "num_citations": "8\n", "authors": ["1920"]}
{"title": "Machine Learning or Information Retrieval Techniques for Bug Triaging: Which is better?\n", "abstract": " Bugs are the inevitable part of a software system. Nowadays, large software development projects even release beta versions of their products to gather bug reports from users. The collected bug reports are then worked upon by various developers in order to resolve the defects and make the final software product more reliable. The high frequency of incoming bugs makes the bug handling a difficult and time consuming task. Bug assignment is an integral part of bug triaging that aims at the process of assigning a suitable developer for the reported bug who corrects the source code in order to resolve the bug. There are various semi and fully automated techniques to ease the task of bug assignment. This paper presents the current state of the art of various techniques used for bug report assignment. Through exhaustive research, the authors have observed that machine learning and information retrieval based bug assignment approaches are most popular in literature. A deeper investigation has shown that the trend of techniques is taking a shift from machine learning based approaches towards information retrieval based approaches. Therefore, the focus of this work is to find the reason behind the observed drift and thus a comparative analysis is conducted on the bug reports of the Mozilla, Eclipse, Gnome and Open Office projects in the Bugzilla repository. The results of the study show that the information retrieval based technique yields better efficiency in recommending the developers for bug reports.", "num_citations": "8\n", "authors": ["1920"]}
{"title": "Deep learning for conflicting statements detection in text\n", "abstract": " Background. Automatic contradiction detection or conflicting statements detection in text consists of identifying discrepancy, inconsistency and defiance in text and has several real world applications in questions and answering systems, multi-document summarization, dispute detection and finder in news, and detection of contradictions in opinions and sentiments on social media. Automatic contradiction detection is a technically challenging natural language processing problem. Contradiction detection between sources of text or two sentence pairs can be framed as a classification problem.Methods. We propose an approach for detecting three different types of contradiction: negation, antonyms and numeric mismatch. We derive several linguistic features from text and use it in a classification framework for detecting contradictions. The novelty of our approach in context to existing work is in the application of artificial neural networks and deep learning. Our approach uses techniques such as Long short-term memory (LSTM) and Global Vectors for Word Representation (GloVe). We conduct a series of experiments on three publicly available dataset on contradiction detection: Stanford dataset, SemEval dataset and PHEME dataset. In addition to existing dataset, we also create more dataset and make it publicly available. We measure the performance of our proposed approach using confusion and error matrix and accuracy.Results. There are three feature combinations on our dataset: manual features, LSTM based features and combination of manual and LSTM features. The accuracy of our classifier based on both LSTM and manual features for\u00a0\u2026", "num_citations": "7\n", "authors": ["1920"]}
{"title": "Optimizing bug report assignment using multi criteria decision making technique\n", "abstract": " Bug report assignment is an integral part of bug triaging process. It aims at assigning a suitable developer for the reported bug. The assigned developer edits the source code in order to resolve the bug. Existing bug assignment techniques use different bug report parameters for selection of suitable developer. In the literature, bug report parameters are always weighed equally for developer selection. However, each parameter has varying importance among themselves. Thus, it would be beneficial to assign varying weights to the bug report parameters. This paper presents a novel Analytic Hierarchy Process (AHP) based bug assignment technique, W8Prioritizer, that prioritizes bug report parameters on the basis of their relative importance before making the developer assignment. The experimental results show an improved accuracy for the AHP based bug assignment approach. The proposed approach achieves\u00a0\u2026", "num_citations": "7\n", "authors": ["1920"]}
{"title": "Email Phishing: Text Classification using Natural, Language Processing\n", "abstract": " Phishing is networked theft in which the main motive of phishers is to steal any person\u2019s private information, its financial details like account number, credit card details, login information, payment mode information by creating and developing a fake page or a fake web site, which look completely authentic and genuine. Nowadays email phishing has become a big threat to all, and is increasing day by day. Moreover detection of phishing emails have been considered an important research issue as phishing emails have been increasing day by day. Various techniques have been introduced and applied to deal with such a big issue. The major objective of this research paper is giving a detailed description on the classification of phishing emails using the natural language processing concepts. NLP (natural language processing) concepts have been applied for the classification of emails, along with that accuracy rate of various classifiers have been calculated. The paper is presented in four sections. An introduction about phishing its types, its history, statistics, life cycle, motivation for phishers and working of email phishing have been discussed in the first section. The second section covers various technologies of phishing-email phishing and also description of evaluation metrics. An overview of the various proposed solutions and work done by researchers in this field in form of literature review has been presented in the third section. The solution approach and the obtained results have been defined in the fourth section giving a detailed description about NLP concepts and working procedure.", "num_citations": "6\n", "authors": ["1920"]}
{"title": "Analytical Study on Bug Triaging Practices\n", "abstract": " Software bugs are inevitable and fixing these bugs is a difficult and time consuming task. Bug report assignment is the activity of designating a developer who makes source code changes in order to fix the bug. Many bug assignment techniques have been proposed in the existing studies. These studies use different datasets, varied input and evaluation parameters to validate their work. This diversification in bug triaging results in perplexity among researchers. Hence, this paper organizes the work performed in bug triaging in a structured manner. This paper aims to present current state of the art to provide a structured consolidation of bug triaging approaches. The paper has identified six research questions under five dimensions to address the various aspects of bug triaging. 60 articles from 36 venues have been reviewed and categorized in order to organize and substructure existing work in the field of bug report\u00a0\u2026", "num_citations": "6\n", "authors": ["1920"]}
{"title": "Automatic email response suggestion for support departments within a university\n", "abstract": " Background. Office of Academic Affairs (OAA), Office of Student Life (OSL) and Information Technology Helpdesk (ITD) are support functions within a university which receives hundreds of email messages on the daily basis. A large percentage of emails received by these departments are frequent and commonly used queries or request for information. Responding to every query by manually typing is a tedious and time consuming task and an automated approach for email response suggestion can save lot of time.Methods. We propose an application and solution approach for automatically generating and suggesting short email responses to support queries in a university environment. Our proposed solution can be used as one tap or one click solution for responding to various types of queries raised by faculty members and students in a university. We create a dataset for the application domain and make it publicly available. We apply a machine learning framework for classifying emails into categories such as office of academic affairs or information technology department. We apply a machine learning based classification approach for sub-category level classification also. We apply text pre-processing techniques, feature selection, support vector machine and na\u00efve naive classifiers. We present an approach to overcome various natural language processing based challenges in the text.Results. We conduct a series of experiments and evaluate the approach using confusion matrix and accuracy based metrics. We study the discriminatory power of features and compare their relevance for the classification task. Our experimental results reveal that\u00a0\u2026", "num_citations": "5\n", "authors": ["1920"]}
{"title": "Efficient bug triage in issue tracking systems\n", "abstract": " Bug triaging is the process of designating a suitable developer for bug report who could make source code changes in order to fix the bug. Appropriate bug report assignment is important as it lowers the tossing path length and hence reduces the overall time and efforts involved in bug resolving. In this research work, our objective is to design a proficient recommendation framework for efficient bug triaging. In the literature, varied bug report assignment techniques exist. Research is still in progress to discover the most suitable bug report assignment technique. In this work, we first investigate the most appropriate bug triaging technique for suitable developer assignment. Recent studies have emphasized that time based decay is efficient in bug triaging. It is due to the fact that \u2018knowledge decays over time\u2019. Thus, we propose and evaluate a novel time based model for bug report assignment. It has also been observed in literature that all the bug parameters used for bug report assignment has been given equal weightage whereas in the real scenario bug parameters can play role with varying importance. Hence, we propose a novel bug assignment approach, W8Prioritizer, based on parameter prioritization. We further extend our study for triaging of Non-reproducible (NR) bugs. Whenever the developer faces any issue in reproducing a bug report, he/she marks the bug report as NR. However, certain portion of these bugs gets reproduced and eventually fixed later. To predict the fixability of bug reports marked as NR, we propose a prediction model, NRFixer. We plan to work on bug report assignment for fixable NR bugs. Overall our initial results are\u00a0\u2026", "num_citations": "5\n", "authors": ["1920"]}
{"title": "Change-proneness of object-oriented software using combination of feature selection techniques and ensemble learning techniques\n", "abstract": " Change-prone modules are characterized as the programming parts in the source code which have high probability to alter in the future. Change-proneness prediction helps software testers to streamline and concentrate their testing assets on the modules which have a higher probability of alteration. In this work, we perform an empirical study of 11 feature selection techniques to identify the suitable set of source code metrics, out of 21 metrics, for change-proneness prediction. We first proposed a source code validation framework that includes Wilcoxon signed rank test, univariate logistic regression analysis, cross correlation analysis, multivariate linear regression stepwise forward selection. We then compared the results of proposed software metrics validation framework (PFST) with 10 feature selection techniques. The selected features are then used for predicting change-proneness using 18 machine learning\u00a0\u2026", "num_citations": "4\n", "authors": ["1920"]}
{"title": "An empirical analysis of machine learning models for automated essay grading\n", "abstract": " Background. Automated Essay Scoring (AES) is an area which falls at the intersection of computing and linguistics. AES systems conduct a linguistic analysis of a given essay or prose and then estimates the writing skill or the essay quality in the form a numeric score or a letter grade. AES systems are useful for the school, university and testing company community for efficiently and effectively scaling the task of grading a large number of essays.Methods. We propose an approach for automatically grading a given essay based on 9 surface level and deep linguistic features, 2 feature selection and ranking techniques and 4 text classification algorithms. We conduct a series of experiments on publicly available manually graded and annotated essay data and demonstrate the effectiveness of our approach. We investigate the performance of two different features selection techniques (1) RELIEF (2) Correlation-based Feature Subset Selection (CFS) with three different machine learning classifiers (kNN, SVM and Linear Regression). We also apply feature normalization and scaling.Results. Our results indicate that features like world count with respect to the world limit, appropriate use of vocabulary, relevance of the terms in the essay with the given topic and coherency between sentences and paragraphs are good predictors of essay score. Our analysis reveals that not all features are equally important and few features are more relevant and better correlated with respect to the target class. We conduct experiments with k-nearest neighbour, logistic regression and support vector machine based classifiers. Our results on 4075 essays across multiple\u00a0\u2026", "num_citations": "4\n", "authors": ["1920"]}
{"title": "Effective Bug Triage for Non-reproducible Bugs\n", "abstract": " The objective of this research work is to develop a proficient recommender system for effective bug triaging. To build this we initiated with introducing a novel time based model, Visheshagya, for bug report assignment. Subsequently, we propose a novel AHP based bug assignment approach, W8Prioritizer, based on bug parameter prioritization. We further extend our work for triaging Non-reproducible (NR) bugs, the bugs for which the developer faces difficulty in reproducing. However, certain fraction of these bugs gets fixed later. We propose a novel prediction model, NRFixer to predict the fixability of bug reports marked as NR. In the future, we plan to work on bug report assignment for fixable NR bugs using Visheshagya and W8Prioritizer. Overall our initial results are encouraging and shows the possibility of making a robust recommender system for effective bug report assignment for both reproducible (R) and\u00a0\u2026", "num_citations": "4\n", "authors": ["1920"]}
{"title": "Graph based Recommendation System in Social Networks\n", "abstract": " Media content recommendation is a popular trend now days. Twitter, Facebook, and Google+ are very popular in the world. The growth of social networks has made recommendation systems one of the intensively studied research area in the last decades. Recommendation systems can be based on content filtering, collaborative filtering or both. In this paper, we propose a novel approach for media content recommendation based on collaborative filtering. Firstly the user-user social network is created using most prominent neighbor set of each user by utilizing their preference information. Then these users are clustered using their neighbor sets and the user with maximum neighbor count is chosen as cluster head. When new user searches for its cluster its similarity is calculated with all the cluster heads. The user gets recommendation based on the average ratings of his cluster members. The proposed approach is tested on the users of Movielens Dataset. The proposed approach gives a hit ratio of 89.33%, Mean Absolute Error as 0.4756 and Root Mean Square Error as 0.7671 on Movielens dataset.", "num_citations": "3\n", "authors": ["1920"]}
{"title": "Performance Assessment of Bug Fixing Process in Open Source Repositories\n", "abstract": " Software bugs are inevitable. Large software projects often use bug tracking systems in order to collect, organize and keep track of reported bugs. The primary objective of using these bug tracking systems is to expedite the bug fix process which further improves the overall quality of software product. However, managing bug tracking systems incurs additional cost and efforts. Hence, it is important to monitor the performance of the bug fix process which is followed in bug tracking systems. The aim of this paper is to identify the performance characteristics of the bug fixing process in open source bug repositories. Various performance metrics have been investigated which measures the bug fix process quality. For experimental evaluation, bug reports are collected from Bugzilla repository of Mozilla Firefox, Eclipse, NetBeans and Open Office projects. It has been found that overall 45.67% of bug reports are closed with\u00a0\u2026", "num_citations": "2\n", "authors": ["1920"]}
{"title": "Automated Essay Grading: An Empirical Analysis of Ensemble Learning Techniques\n", "abstract": " Automated essay grading refers to the application of natural language processing tools for assigning scores to student essays. It is an important research domain as teachers are often required to grade a large amount of student essays in educational settings. Fair grading of essays is a challenging and tedious task. Teachers often consider this as unproductive work. Thus, there is a need for an automated approach for teachers so that they are no longer required to manually grade the student essays. Various automated essay scoring systems using machine learning and information retrieval concepts have been developed in the past studies. In the recent years, ensemble classification techniques have gained popularity. Ensemble techniques use multiple classifiers for making a prediction and have proved to be outperforming classical machine learning. In this paper, we present an empirical study of ensemble\u00a0\u2026", "num_citations": "1\n", "authors": ["1920"]}
{"title": "IMNRFixer: A hybrid approach to alleviate class\u2010imbalance problem for predicting the fixability of Non\u2010Reproducible bugs\n", "abstract": " Software maintenance is an important phase in the software development life cycle. Software projects maintain bug repositories to gather, organize, and keep track of bug reports. These bug reports are resolved by numerous software developers. Whenever the reported bug does not get resolved by the assigned developer, he marks the resolution of bug report as Non\u2010Reproducible (NR). When NR bugs are reconsidered, few of them get resolved, and their resolution changes from NR to fix (NRF). The main aim of this paper is to predict these fixable NRF bug reports. A major challenge in predicting NRF bugs from NR bugs is that only a small portion of NR bugs get fixed, i.e., class\u2010imbalance problem. For example, NRF bugs account for only 8.64%, 4.73 %, 4.56%, and 1.06% in NetBeans, Eclipse, Open Office, and Mozilla Firefox projects respectively. In this paper, we work on improving the classification\u00a0\u2026", "num_citations": "1\n", "authors": ["1920"]}
{"title": "An empirical study of non-reproducible bugs\n", "abstract": " A large number of bug reports received in bug tracking system causes a negative impact on software\u2019s growth and maintenance. Non-Reproducible bugs are an additional overhead on bug fixing process as certain percentage of Non-Reproducible bugs get fixed and these are difficult to detect. Their fixation can enhance the efficiency of bug fixing process. Past studies had ignored Non-Reproducible bugs while investigating bugs with varied perspectives. In this paper, we investigate characteristics of Non-Reproducible bug reports to understand their behaviour so that overall bug fixing process can be improved. We\u00a0have also build\u00a0machine learning models to predict fixable bugs from the set of Non-Reproducible marked bugs. We mine four large, open-source projects of Bugzilla repository and analyze Non-Reproducible bugs with different dimensions: frequency distribution, time-series analysis, active fix\u00a0\u2026", "num_citations": "1\n", "authors": ["1920"]}
{"title": "Characterization Study of Developers in Non-Reproducible Bugs\n", "abstract": " Software bugs are inevitable. Increasing size and complexity of software systems makes bug handling a cumbersome and time-consuming task. In such scenarios, Non-Reproducible (NR) bug reports are an additional overhead for software developers as these bugs are hard-to-reproduce. This difficulty in reproducing NR bugs is due to varied reasons such as the absence of information required to create the same test environment, resource and time constraints, inability of the assigned developer to fix the issue, etc. However, when NR marked bug reports are reconsidered, a few percentages of these bug reports get Fixed (NRF). This fixation occurs either due to the trial of new solutions to reproduce the bug or due to the assignment of a different developer for the bug report. To find whether a change in developer helps in resolving NR bugs, this paper investigates the developers associated with NR bug reports\u00a0\u2026", "num_citations": "1\n", "authors": ["1920"]}