{"title": "Introduction to HOL A theorem proving environment for higher order logic\n", "abstract": " Michael JC Gordon & TF Melham, Introduction to Hol a Theorem Proving Environment for Higher Order Logic - PhilPapers Sign in | Create an account PhilPapers PhilPeople PhilArchive PhilEvents PhilJobs PhilPapers home Syntax Advanced Search Syntax Advanced Search Syntax Advanced Search Introduction to Hol a Theorem Proving Environment for Higher Order Logic Michael JC Gordon & TF Melham (1993) Abstract This article has no associated abstract. (fix it) Keywords Automatic theorem proving HOL Logic, Symbolic and mathematical Categories Areas of Mathematics in Philosophy of Mathematics (categorize this paper) Buy this book Find it on Amazon.com ISBN(s) 0521441897 Options Edit this record Mark as duplicate Export citation Find it on Scholar Request removal from index Revision history Download options PhilArchive copy Upload a copy of this paper Check publisher's policy Papers currently \u2026", "num_citations": "2617\n", "authors": ["1893"]}
{"title": "Hardware verification using higher-order logic\n", "abstract": " The Hardware Verification Group at the University of Cambridge is investigating how various kinds of digital systems can be verified by mechanised formal proof. This paper explains our approach to representing behaviour and structure using higher order logic. Several examples are described including a ripple carry adder and a sequential device for computing the factorial function. The dangers of inaccurate models are illustrated with a CMOS exclusive-or gate.", "num_citations": "205\n", "authors": ["1893"]}
{"title": "Automating recursive type definitions in higher order logic\n", "abstract": " The expressive power of higher order logic makes it possible to define a wide variety of types within the logic and to prove theorems that state the properties of these types concisely and abstractly. This paper contains a tutorial introduction to the logical basis for such type definitions. Examples are given of the formal definitions in logic of several simple types. A method is then described for systematically defining any instance of a certain class of commonly-used recursive types. The automation of this method in HOL, an interactive system for generating proofs in higher order logic, is also discussed.", "num_citations": "201\n", "authors": ["1893"]}
{"title": "Higher order logic and hardware verification\n", "abstract": " Dr. Melham shows here how formal logic can be used to specify the behavior of hardware designs and reason about their correctness. A primary theme of the book is the use of abstraction in hardware specification and verification. The author describes how certain fundamental abstraction mechanisms for hardware verification can be formalized in logic and used to express assertions about design correctness and the relative accuracy of models of hardware behavior. His approach is pragmatic and driven by examples. He also includes an introduction to higher-order logic, which is a widely used formalism in this subject, and describes how that formalism is actually used for hardware verification. The book is based in part on the author's own research as well as on graduate teaching. Thus it can be used to accompany courses on hardware verification and as a resource for\u00a0\u2026", "num_citations": "173\n", "authors": ["1893"]}
{"title": "Abstraction mechanisms for hardware verification\n", "abstract": " It is argued that techniques for proving the correctness of hardware designs must use abstraction mechanisms for relating formal descriptions at different levels of detail. Four such abstraction mechanisms and their formalisation in higher order logic are discussed.", "num_citations": "150\n", "authors": ["1893"]}
{"title": "Five axioms of alpha-conversion\n", "abstract": " We present five axioms of name-carrying lambda-terms identified up to alpha-conversion\u2014that is, up to renaming of bound variables. We assume constructors for constants, variables, application and lambda-abstraction. Other constants represent a function Fv that returns the set of free variables in a term and a function that substitutes a term for a variable free in another term. Our axioms are (1) equations relating Fv and each constructor, (2) equations relating substitution and each constructor, (3) alpha-conversion itself, (4) unique existence of functions on lambda-terms defined by structural iteration, and (5) construction of lambda-abstractions given certain functions from variables to terms. By building a model from de Bruijn\u2019s nameless lambda-terms, we show that our five axioms are a conservative extension of HOL. Theorems provable from the axioms include distinctness, injectivity and an exhaustion\u00a0\u2026", "num_citations": "123\n", "authors": ["1893"]}
{"title": "A Mechanized Theory of the Pi-Calculus in HOL.\n", "abstract": " The \u03c0-calculus is a process algebra for modelling concurrent systems in which the pattern of communication between processes may change over time. This paper describes the results of preliminary work on a definitional formal theory of the \u03c0-calculus in higher order logic using the HOL theorem prover. The ultimate goal of this work is to provide practical mechanized support for reasoning with the \u03c0-calculus about applications.", "num_citations": "115\n", "authors": ["1893"]}
{"title": "The PROSPER toolkit\n", "abstract": " The Prosper (Proof and Specification Assisted Design Environments) project advocates the use of toolkits which allow existing verification tools to be adapted to a more flexible format so that they may be treated as components. A system incorporating such tools becomes another component that can be embedded in an application.               This paper describes the Prosper Toolkit which enables this. The nature of communication between components is specified in a language-independent way. It is implemented in several common programming languages to allow a wide variety of tools to have access to the toolkit.", "num_citations": "111\n", "authors": ["1893"]}
{"title": "A package for inductive relation definitions in HOL\n", "abstract": " This paper describes a set of theorem proving tools based on a new derived principle of definition in HOL, namely the introduction of relations inductively defined by a set of rules. Such inductive definitions abound in computer science. Example application areas include reasoning about structured operational semantics, type judgements, transition relations for process algebras, reduction relations, and compositional proof systems. The package described in this paper automates the derivation of certain inductive definitions involved in these applications and provides the basic tools needed for reasoning about the relations introduced by them.", "num_citations": "109\n", "authors": ["1893"]}
{"title": "Reasoning with inductively defined relations in the HOL theorem prover\n", "abstract": " Inductively defined relations are among the basic mathematical tools of computer science. Examples include evaluation and computation relations in structural operational semantics, labelled transition relations in process algebra semantics, inductively-defined typing judgements, and proof systems in general. This paper describes a set of HOL theorem-proving tools for reasoning about such inductively defined relations. We also describe a suite of worked examples using these tools.", "num_citations": "96\n", "authors": ["1893"]}
{"title": "A reflective functional language for hardware design and theorem proving\n", "abstract": " This paper introduces reFLect, a functional programming language with reflection features intended for applications in hardware design and verification. The reFLect language is strongly typed and similar to ML, but has quotation and antiquotation constructs. These may be used to construct and decompose expressions in the reFLect language itself. The paper motivates and presents the syntax and type system of this language, which brings together a new combination of pattern-matching and reflection features targeted specifically at our application domain. It also gives an operational semantics based on a novel use of contexts as expression constructors, and it presents a scheme for compiling reFLect programs using the same context mechanism.", "num_citations": "89\n", "authors": ["1893"]}
{"title": "Practical formal verification in microprocessor design\n", "abstract": " Practical application of formal methods requires more than advanced technology and tools; it requires an appropriate methodology. A verification methodology for data-path-dominated hardware combines model checking and theorem proving in a customizable framework. This methodology has been effective in large-scale industrial trials, including verification of an IEEE-compliant floating-point adder.", "num_citations": "60\n", "authors": ["1893"]}
{"title": "A methodology for large-scale hardware verification\n", "abstract": " We present a formal verification methodology for datapathdominated hardware. This provides a systematic but flexible framework within which to organize the activities undertaken in large-scale verification efforts and to structure the associated code and proof-script artifacts. The methodology deploys a combination of model checking and lightweight theorem proving in higher-order logic, tightly integrated within a general-purpose functional programming language that allows the framework to be easily customized and also serves as a specification language. We illustrate the methodology-which has has proved highly effective in large-scale industrial trials-with the verification of an IEEE- compliant, extended precision floating-point adder.", "num_citations": "52\n", "authors": ["1893"]}
{"title": "Dynamic specialisation of XC6200 FPGAs by partial evaluation\n", "abstract": " This paper describes preliminary results of dynamically specialising Xilinx XC6200 FPGA circuits using partial evaluation. This method provides a systematic way to manage the complexity of dynamic reconfiguration in the special case where a general circuit is specialised with respect to a slowly changing input. We describe how we address the verification and run-time support issues which are raised when one modifies a circuit at run-time.", "num_citations": "52\n", "authors": ["1893"]}
{"title": "Formalizing abstraction mechanisms for hardware verification in higher order logic\n", "abstract": " Recent advances in microelectronics have given designers of digital hardware the potential to build devices of remarkable size and complexity. Along with this however, it becomes increasingly difficult to ensure that such systems are free from design errors, where complete simulation of even moderately sized circuits is impossible. One solution to these problems is that of hardware verification, where the functional behaviour of the hardware is described mathematically and formal proof is used to show that the design meets rigorous specifications of the intended operation.", "num_citations": "49\n", "authors": ["1893"]}
{"title": "The HOL logic extended with quantification over type variables\n", "abstract": " The HOL system is an LCF-style mechanized proof assistant for conducting proofs in higher-order logic. This paper discusses a proposal to extend the primitive basis of the logic underlying the HOL system with a very simple form of quantification over types. It is shown how certain practical problems with using the definitional mechanisms of HOL would be solved by the additional expressive power gained by making this extension.", "num_citations": "38\n", "authors": ["1893"]}
{"title": "Translating dependent type theory into higher order logic\n", "abstract": " This paper describes a translation of the complex calculus of dependent type theory into the relatively simpler higher order logic originally introduced by Church. In particular, it shows how type dependency as found in Martin-L\u00f6f's Intuitionistic Type Theory can be simulated in the formulation of higher order logic mechanized by the HOL theoremproving system. The outcome is a theorem prover for dependent type theory, built on top of HOL, that allows natural and flexible use of set-theoretic notions. A bit more technically, the language of the resulting theorem-prover is the internal language of a (boolean) topos (as formulated by Phoa).", "num_citations": "36\n", "authors": ["1893"]}
{"title": "Interactive theorem proving: An empirical study of user activity\n", "abstract": " In this paper the interaction between users and the interactive theorem prover HOL is investigated from a human\u2013computer interaction perspective. First, we outline three possible views of interaction, and give a brief survey of some current interfaces and how they may be described in terms of these views. Second, we describe and present the results of an empirical study of intermediate and expert HOL users. The results are analysed for evidence in support of the proposed view of proof activity in HOL. We believe that this approach provides a principled basis for the assessment and design of interfaces to theorem provers.", "num_citations": "35\n", "authors": ["1893"]}
{"title": "Using recursive types to reason about hardware in higher order logic\n", "abstract": " The expressive power of higher order logic makes it possible to define a wide variety of data types within the logic and to prove theorems that state the properties of these types concisely and abstractly. This paper describes how such defined data types can be used to support formal reasoning in higher order logic about the behaviour of hardware designs.", "num_citations": "34\n", "authors": ["1893"]}
{"title": "The PROSPER toolkit\n", "abstract": " The PROSPER (Proof and Specification Assisted Design Environments) project advocates the use of toolkits which allow existing verification tools to be adapted to a more flexible format so that they can be treated as components. A system incorporating such tools becomes another component that can be embedded in an application. This paper describes the software toolkit developed by the project. The nature of communication between components is specified in a language-independent way. It is implemented in several common programming languages to allow a wide variety of tools to have access to the toolkit.", "num_citations": "32\n", "authors": ["1893"]}
{"title": "Using Nuprl for the verification and synthesis of hardware\n", "abstract": " The Nuprl proof development system, based on constructive type theory, has a sophisticated proof editor and user interface which facilitates the development of proofs and specifications. We present our experience using Nuprl for hardware verification and. synthesis. We have verified floating point hardware and are extending this work to reasoning about the IEEE floating point specification. In addition we are using Nuprl to reason about software for synthesizing hardware designs at several different levels. We present two efforts in this area. In the first, we prove a system that synthesizes CMOS circuits from boolean equations. The second system, PBS, minimizes large sets of boolean formulae by using the weak division algorithm.", "num_citations": "28\n", "authors": ["1893"]}
{"title": "Automatic abstraction in symbolic trajectory evaluation\n", "abstract": " Symbolic trajectory evaluation (STE) is a model checking technology based on symbolic simulation over a lattice of abstract state sets. The STE algorithm operates over families of these abstractions encoded by Boolean formulas, enabling verification with many different abstraction cases in a single modelchecking run. This provides a flexible way to achieve partitioned data abstraction. It is usually called \"symbolic indexing' and is widely used in memory verification, but has seen relatively limited adoption elsewhere, primarily because users typically have to create the right indexed family of abstractions manually. This work provides the first known algorithm that automatically computes these partitioned abstractions given a reference-model specification. Our experimental results show that this approach not only simplifies memory verification, but also enables handling completely different designs fully automatically.", "num_citations": "25\n", "authors": ["1893"]}
{"title": "Abstraction by symbolic indexing transformations\n", "abstract": " Symbolic indexing is a data abstraction technique that exploits the partially-ordered state space of symbolic trajectory evaluation (STE). Use of this technique has been somewhat limited in practice because of its complexity. We present logical machinery and efficient algorithms that provide a much simpler interface to symbolic indexing for the STE user. Our logical machinery also allows correctness assertions proved by symbolic indexing to be composed into larger properties, something previously not possible.", "num_citations": "22\n", "authors": ["1893"]}
{"title": "Theorem Proving in Higher Order Logics: 18th International Conference, TPHOLs 2005, Oxford, UK, August 22-25, 2005, Proceedings\n", "abstract": " This volume constitutes the proceedings of the 18th International Conference on Theorem Proving in Higher Order Logics (TPHOLs 2005), which was held during22\u201325August2005inOxford, UK. TPHOLscoversallaspectsoftheorem proving in higher order logics as well as related topics in theorem proving and veri? cation. There were 49 papers submitted to TPHOLs 2005 in the full research c-egory, each of which was refereed by at least three reviewers selected by the programcommittee. Of these submissions, 20 researchpapersand 4 proof pearls were accepted for presentation at the conference and publication in this volume. In keeping with longstanding tradition, TPHOLs 2005 also o? ered a venue for the presentation of work in progress, where researchers invited discussion by means of a brief introductory talk and then discussed their work at a poster session. A supplementary proceedings volume was published as a 2005 technical report of the Oxford University Computing Laboratory. The organizers are grateful to Wolfgang Paul and Andrew Pitts for agreeing to give invited talks at TPHOLs 2005.", "num_citations": "21\n", "authors": ["1893"]}
{"title": "Modelling, abstraction, and computation in systems biology: A view from computer science\n", "abstract": " Systems biology is centrally engaged with computational modelling across multiple scales and at many levels of abstraction. Formal modelling, precise and formalised abstraction relationships, and computation also lie at the heart of computer science\u2014and over the past decade a growing number of computer scientists have been bringing their discipline's core intellectual and computational tools to bear on biology in fascinating new ways. This paper explores some of the apparent points of contact between the two fields, in the context of a multi-disciplinary discussion on conceptual foundations of systems biology.", "num_citations": "18\n", "authors": ["1893"]}
{"title": "A refinement approach to design and verification of on-chip communication protocols\n", "abstract": " Modern computer systems rely more and more on on-chip communication protocols to exchange data. To meet performance requirements these protocols have become highly complex, which usually makes their formal verification infeasible with reasonable time and effort. We present a new refinement approach to on-chip communication protocols that combines design and verification together, interleaving them hand-in-hand. Our modeling framework consists of design steps and design transformations formalized as finite state machines. Given a verified design step, transformations are used to extend the system with advanced features. A design transformation ensures that the extended design is correct if the previous system is correct. This approach is illustrated by an arbiter-based master-slave communication system inspired by the AMBA high-performance bus architecture. Starting with a sequential protocol\u00a0\u2026", "num_citations": "16\n", "authors": ["1893"]}
{"title": "An analysis of errors in interactive proof attempts\n", "abstract": " The practical utility of interactive, user-guided, theorem proving depends on the design of good interaction environments, the study of which should be grounded in methods of research into human\u2013computer interaction (HCI). This paper discusses the relevance of classifications of programming errors developed by the HCI community to the problem of interactive theorem proving. A new taxonomy of errors is proposed for interaction with theorem provers and its adequacy as a usability metric is assessed experimentally.", "num_citations": "16\n", "authors": ["1893"]}
{"title": "Integrating model checking and theorem proving in a reflective functional language\n", "abstract": " Forte is a formal verification system developed by Intel\u2019s Strategic CAD Labs for applications in hardware design and verification. Forte integrates model checking and theorem proving within a functional programming language, which both serves as an extensible specification language and allows the system to be scripted and customized. The latest version of this language, called reFL                                            ect                 , has quotation and antiquotation constructs that build and decompose expressions in the language itself. This provides combination of pattern-matching and reflection features tailored especially for the Forte approach to verification. This short paper is an abstract of an invited presentation given at the International Conference on Integrated Formal Methods in 2004, in which the philosophy and architecture of the Forte system are described and an account is given of the role\u00a0\u2026", "num_citations": "14\n", "authors": ["1893"]}
{"title": "Formally analyzed dynamic synthesis of hardware\n", "abstract": " Dynamic hardware reconfiguration based on run-time system specialization is viable with FPGAs. The research challenge for formal verification is to help ensure the correctness of dynamically generated hardware. In this paper, the approach is to verify a specialization synthesis algorithm used to reconfigure FPGA designs at run-time. The verification approach is based on a deep embedding of a language for netlist and the relational hardware modeling style.", "num_citations": "13\n", "authors": ["1893"]}
{"title": "An AMBA-ARM7 formal verification platform\n", "abstract": " The pressure to create a working System on Chip design as early as possible leads designers to consider using a platform based design method. In this approach, designing an application is a matter of selecting from a set of standard components with compatible specifications. Subsequently, a formal verification platform can be constructed. The formal verification platform provides an environment to analysed the combined properties of the design. In this paper, we present a methodology to do formal System on Chip analysis by developing generic formal components that can be integrated in a formal verification platform. First, we develop reusable formal properties of standard components. Second, we define a generic formal platform in which components of System on Chip design can be integrated. The platform contains basic components such as a standard bus protocol and a processor. Third, we\u00a0\u2026", "num_citations": "12\n", "authors": ["1893"]}
{"title": "Theorem Provers in Circuit Design\n", "abstract": " Theorem Provers in Circuit Design Universiteit Gent Add publications Lists Sign in Academic Bibliography Search 200 years of publications by Ghent University researchers. Search publications Advanced search Add to list 1.Search results 2.Theorem Provers in Circuit Design Theorem Provers in Circuit Design V STAVRIDOU, T MELHAM and Raymond Boute (UGent) (1992) Editor V STAVRIDOU, T MELHAM and Raymond Boute (UGent) Organization Department of Information technology Citation Cite this BibTeX Metrics Please use this url to cite or link to this publication: http://hdl.handle.net/1854/LU-314603 MLA STAVRIDOU, V, T MELHAM, and Raymond Boute, eds. \u201cTheorem Provers in Circuit Design.\u201d 1992 : n. pag. Print. APA STAVRIDOU, V., MELHAM, T., & Boute, R. (Eds.). (1992). Theorem Provers in Circuit Design. North-Holland. Chicago author-date STAVRIDOU, V, T MELHAM, and Raymond Boute, eds. \u2026", "num_citations": "12\n", "authors": ["1893"]}
{"title": "Automatic symbolic indexing methods for formal verification on a symbolic lattice domain\n", "abstract": " Processes for formal verification of circuits and other finite-state systems are disclosed. For one embodiment, a process is disclosed to provide for significantly reduced computation through automated symbolic indexing of a property assertion and to compute the satisfiability of the property assertion directly from a symbolic simulation of the indexed property assertion. For an alternative embodiment a process using indexed property assertions on a symbolic lattice domain to represent and verify properties, provides an efficient symbolic manipulation technique using binary decision diagrams (BDDs). Methods for computing symbolic simulations, and verifying satisfiability may be applicable with respect to property assertions that are symbolically indexed under specific disclosed conditions. A process is also disclosed to compute a constraint abstraction for a property assertion, thereby permitting automated formal\u00a0\u2026", "num_citations": "10\n", "authors": ["1893"]}
{"title": "The HOL pred sets Library\n", "abstract": " The pred_sets library contains a theory of predicates regarded as sets. A predicate s:*-> bool is considered as a collection or \u2018set\u2019of elements of type*, and the standard operations on sets such as union, intersection, and set difference are appropriately defined for this representation. The library was originally written in 1989 by Ton Kalker. It was completely rewritten by the present author for HOL version 2.01 in early 1992. The aim of this revision was to make the pred_sets library closely parallel to the much more developed HOL sets library, with the same names for constants and theorems and the same form of definitions for operations on sets. The present document is itself also adapted from the manual for the sets library [1]. There is only one theory in the pred_sets library, namely the theory \u2018pred_sets\u2019. This document explains the logical basis of this theory and the theorem-proving support provided by library. The latter includes conversions for expanding set specifications and for evaluating various operations on finite sets described by enumeration of their elements. The library also provides parser and pretty-printer support for terms that denote sets.", "num_citations": "10\n", "authors": ["1893"]}
{"title": "Relational STE and theorem proving for formal verification of industrial circuit designs\n", "abstract": " Model checking by symbolic trajectory evaluation, orchestrated in a flexible functional-programming framework, is a well-established technology for correctness verification of industrial-scale circuit designs. Most verifications in this domain require decomposition into subproblems that symbolic trajectory evaluation can handle, and deductive theorem proving has long been proposed as a complement to symbolic trajectory evaluation to enable such compositional reasoning. This paper describes an approach to verification by symbolic simulation, called Relational STE, that raises verification properties to the purely logical level suitable for compositional reasoning in a theorem prover. We also introduce a new deductive theorem prover, called Goaled, that has been integrated into Intel's Forte verification framework for this purpose. We illustrate the effectiveness of this combination of technologies by describing a\u00a0\u2026", "num_citations": "9\n", "authors": ["1893"]}
{"title": "Epilogue: Some conceptual foundations of systems biology.\n", "abstract": " Some thesis volumes scanned as part of the digitisation scheme funded by Dr Leonard Polonsky are currently unavailable due to sensitive material or uncleared third-party copyright content. We are attempting to contact authors whose theses are affected.", "num_citations": "9\n", "authors": ["1893"]}
{"title": "Plenary discussion of the conceptual foundations of systems biology\n", "abstract": " Progress in Biophysics and Molecular Biology are derived ended with a wide-ranging discussion of the nature of systems biology and its underlying principlesdtouching on complexity, the programming and database metaphors, dynamic modelling and underlying concepts. To give a flavour of the debate, we present here a lightly edited version of that discussion, which started with a brief commentary by Denis Noble on his ten Principles of Systems Biology (Noble, 2008).", "num_citations": "9\n", "authors": ["1893"]}
{"title": "A functional HDL in reFLect\n", "abstract": " ReFLect [4] is a functional programming language designed and implemented at Intel\u2019s Strategic CAD Labs under the direction of Jim Grundy. The language is strongly typed and similar to ML, but provides certain reflection features intended for applications in industrial hardware design and verification. Like LISP, reFLect has quotation and antiquotation constructs that may be used to construct and decompose expressions in the language itself. Unlike LISP, these mechanisms are typed. The language also provides a primitive mechanism for pattern-matching, and in particular for defining functions over code by pattern-matching on the structure of reFLect expressions. The design of reFLect draws on the experience of applying an earlier reflective language called FL [1] to large-scale formal verification problems within Intel\u2019s Forte framework [8]. One of the intended roles of reFLect is to be the host language for a functional HDL. As with other work based on Haskell [2, 7] or LISP [5, 6], a key requirement is the ability to simulate hardware models by program execution. Circuit descriptions are just functional programs, which we can simply run to simulate the circuits on test case inputs. But in addition to this simulation capability, we also wish to execute various operations on the abstract syntax of circuit descriptions written in the language. We want to be able to write programs that \u2018see\u2019the code of a circuit description. This allows us, for example, to program circuit design transformations [10] as functions that traverse code\u2014or simply to generate netlists for other design tools. This talk at DCC 2006 will illustrate how the reflection features of reFLect can\u00a0\u2026", "num_citations": "9\n", "authors": ["1893"]}
{"title": "Xs are for trajectory evaluation, Booleans are for theorem proving\n", "abstract": " This paper describes a semantic connection between the symbolic trajectory evaluation model-checking algorithm and relational verification in higher-order logic. We prove a theorem that translates correctness results from trajectory evaluation over a four-valued lattice into a shallow embedding of temporal operators over Boolean streams. This translation connects the specialized world of trajectory evaluation to a general-purpose logic and provides the semantic basis for connecting additional decision procedures and model checkers.", "num_citations": "9\n", "authors": ["1893"]}
{"title": "Tool building requirements for an API to first-order solvers\n", "abstract": " Effective formal verification tools require that robust implementations of automatic procedures for first-order logic and satisfiability modulo theories be integrated into expressive interactive frameworks for logical deduction, such as higher-order logic theorem provers. This paper states some pragmatic requirements for implementations of decision procedures that make them well-suited to integration into such frameworks. The aim is to open a dialogue with the designers of decision procedure software that will lead to greater and easier uptake of their implementations by verification users.", "num_citations": "8\n", "authors": ["1893"]}
{"title": "A study of user activity in interactive theorem proving\n", "abstract": " A Study Of User Activity In Interactive Theorem Proving - ORA - Oxford University Research Archive Logos Header links Search History Bookmarks 0 New Search Deposit Help Footer links Deposit Agreements Disclaimer Privacy Policy Cookies Accessibility Statement Take-down Policy Copyright Contact Skip to main NEW SEARCH Deposit HELP 0 Back to Search CONTACT Name Email Comment Send message Actions Authors Bibliographic Details Terms of Use Stats Export BibTeX EndNote RefWorks Book icon Book A Study Of User Activity In Interactive Theorem Proving Actions Email \u00d7 Send the bibliographic details of this record to your email address. Your Email Please enter the email address that the record information will be sent to. Your message (optional) Please add any additional information to be included within the email. Send Cite \u00d7 APA Style Aitken, S., Gray, P., Melham, T., & Thomas, M. (1995). A \u2026", "num_citations": "7\n", "authors": ["1893"]}
{"title": "The HOL sets library\n", "abstract": " The HOL sets Library - ORA - Oxford University Research Archive Logos Header links Search History Bookmarks 0 New Search Deposit Help Footer links Deposit Agreements Disclaimer Privacy Policy Cookies Accessibility Statement Take-down Policy Copyright API Contact Skip to main NEW SEARCH Deposit HELP 0 Back to Search CONTACT Name Email Comment Send message Actions Authors Bibliographic Details Terms of Use Stats Export BibTeX EndNote RefWorks General item icon General item The HOL sets Library Actions Email \u00d7 Send the bibliographic details of this record to your email address. Your Email Please enter the email address that the record information will be sent to. Your message (optional) Please add any additional information to be included within the email. Send Cite \u00d7 APA Style Melham, TF (1991). The HOL sets Library. Computer Laboratory\u201a University of Cambridge. Copy APA \u2026", "num_citations": "7\n", "authors": ["1893"]}
{"title": "On the semantics of ReFLect as a basis for a reflective theorem prover\n", "abstract": " This paper explores the semantics of a combinatory fragment of reFLect, the lambda-calculus underlying a functional language used by Intel Corporation for hardware design and verification. ReFLect is similar to ML, but has a primitive data type whose elements are the abstract syntax trees of reFLect expressions themselves. Following the LCF paradigm, this is intended to serve as the object language of a higher-order logic theorem prover for specification and reasoning - but one in which object- and meta-languages are unified. The aim is to intermix program evaluation and logical deduction through reflection mechanisms. We identify some difficulties with the semantics of reFLect as currently defined, and propose a minimal modification of the type system that avoids these problems.", "num_citations": "6\n", "authors": ["1893"]}
{"title": "Conceptual foundations of systems biology.\n", "abstract": " Some thesis volumes scanned as part of the digitisation scheme funded by Dr Leonard Polonsky are currently unavailable due to sensitive material or uncleared third-party copyright content. We are attempting to contact authors whose theses are affected.", "num_citations": "6\n", "authors": ["1893"]}
{"title": "Specification and VLSI design\n", "abstract": " We describe research into specification-based VLSI design underway at the University of Calgary. Our long term research goals are directed towards building a specification-based design environment (EDICT) to support an iterative, hierarchic design methodology. Our current research has three aspects: the SHIFT high level design capture format (completed); gaining experience in verifying large designs (underway); and building a specification library. In this paper we describe work in progress on two large proofs. The first is for the elimination unit of a local area network device, for which the proof is well underway. The second project concerns the specification driven design of Landin's SECD machine and is just beginning. To set the context for this work on verification, we  start by giving partial descriptions of EDICT and SHIFT to show how they use specifications.", "num_citations": "6\n", "authors": ["1893"]}
{"title": "Assume-guarantee validation for STE properties within an SVA environment\n", "abstract": " Symbolic Trajectory Evaluation is an industrial-strength verification method, based on symbolic simulation and abstraction, that has been highly successful in data path verification, especially microprocessor execution units. These correctness results are typically obtained under certain assumptions about how the verified hardware block's inputs are driven, as well as assumptions about the values of these inputs. For correct overall operation, the hardware environment within which the verified block resides is expected to satisfy these assumptions. We describe a translation of these proof assumptions into System Verilog Assertions. These are then used as checkers in dynamic validation of the hardware environment within which blocks verified by Symbolic Trajectory Evaluation operate. The result is a pragmatic assume-guarantee method that increases the quality and confidence in verification results, requires little\u00a0\u2026", "num_citations": "5\n", "authors": ["1893"]}
{"title": "Parametric representation methods for formal verification on a symbolic lattice domain\n", "abstract": " Processes for formal verification of circuits and other finite-state systems are disclosed. For one embodiment, a process is disclosed to provide for significantly reduced computation through automated symbolic indexing of a property assertion and to compute the satisfiability of the property assertion directly from a symbolic simulation of the indexed property assertion. For an alternative embodiment a process using indexed property assertions on a symbolic lattice domain to represent and verify properties, provides an efficient symbolic manipulation technique using binary decision diagrams (BDDs). Methods for computing symbolic simulations, and verifying satisfiability may be applicable with respect to property assertions that are symbolically indexed under specific disclosed conditions. A process is also disclosed to compute a constraint abstraction for a property assertion, thereby permitting automated formal\u00a0\u2026", "num_citations": "5\n", "authors": ["1893"]}
{"title": "Interactive proof discovery: An empirical study of HOL users\n", "abstract": " One commonly cited obstacle to the widespread use of theorem provers is the poor quality of the user interface. Research projects which have addressed this problem have had mixed results. In the majority of cases, the designers of new interfaces to theorem provers have failed to draw upon the most relevant discipline: Human Computer Interaction. The design of these interfaces is carefully considered, but is generally informed by the personal experience of the designer and their intuitions.The ITP project aims to apply the methods of HCI to the problem of designing interfaces to interactive theorem provers. Of particular relevance are task modelling and analysis (Norman, 1988) which can identify the gulfs of execution and evaluation which hinder interaction. Nielsen (1986) presents a linguistic account of interaction by asserting that the di erent levels at which user-system interaction may be described correspond to the lexical, syntactic and semantic levels of linguistic activity. Such multi-level views of interaction are relevant to our study of user-prover interaction. Theories about the usability and e ectiveness of representations (Green, 1989, 1991) and studies of the nature of programming (Wiedenbeck, 1985)(Davis, 1991) are also important.", "num_citations": "5\n", "authors": ["1893"]}
{"title": "Correct Hardware Design and Verification Methods: 11th IFIP WG 10.5 Advanced Research Working Conference, CHARME 2001 Livingston, Scotland, UK, September 4-7, 2001 Proceedings\n", "abstract": " This volume contains the proceedings of CHARME 2001, the Eleventh Advanced Research Working Conference on Correct Hardware Design and Veri? cation Methods. CHARME 2001 is the 11th in a series of working conferences devoted to the development and use of leading-edge formal techniques and tools for the design and veri? cation of hardware and hardware-like systems. Previous events in the \u2018CHARME\u2019series were held in Bad Herrenalb (1999), Montreal (1997), Frankfurt (1995), Arles (1993), and Torino (1991). This series of meetings has been organized in cooperation with IFIP WG 10.5 and WG 10.2. Prior meetings, stretching backto the earliest days of formal hardware veri? cation, were held under various names in Miami (1990), Leuven (1989), Glasgow (1988), Grenoble (1986), Edinburgh (1985), and Darmstadt (1984). The convention is now well-established whereby the European CHARME conference alternates with its biennial counterpart, the International Conference on Formal Methods in Computer-Aided Design (FMCAD), which is held on even-numbered years in the USA. The conference tookplace during 4\u20137 September 2001 at the Institute for System Level Integration in Livingston, Scotland. It was co-hosted by the-stitute and the Department of Computing Science of Glasgow University and co-sponsored by the IFIP TC10/WG10. 5 Working Group on Design and En-neering of Electronic Systems. CHARME 2001 also included a scienti? c session and social program held jointly with the 14th International Conference on Th-rem Proving in Higher Order Logics (TPHOLs), which was co-located in nearby Edinburgh.", "num_citations": "4\n", "authors": ["1893"]}
{"title": "Phases, modes and information flow in theory development\n", "abstract": " We de ne the concept of phase in interactive theory development and relate it to interface modes by considering the information required in each phase of theory development. The design of an experimental trial to investigate information requirement is described.", "num_citations": "4\n", "authors": ["1893"]}
{"title": "Design and Verification of On\u2212 Chip Communication Protocols\n", "abstract": " Modern computer systems rely more and more on on-chip communication protocols to exchange data. To tackle performance requirements these protocols have become highly complex, which makes their formal verification usually infeasible with reasonable time and effort.", "num_citations": "3\n", "authors": ["1893"]}
{"title": "Symbolic trajectory evaluation in a nutshell\n", "abstract": " We write\u25b3= to mean equals by definition. We assume familiarity with elementary propositional logic and predicate calculus notation and use the symbol\u2283 for logical implication. We use lower-case letters (eg a, v, x, y1) for Boolean variables, and upper-case letters (eg P, Q) to stand for formulas of propositional logic (ie \u2018Boolean functions\u2019). We write xs to mean a vector of unique variables x1,..., xn for indeterminate n and similarly Ps to stand for a vector of formulas P1,..., Pn.The notation P [Qs/xs] stands for the result of simultaneously substituting the formulas Qs for all occurrences of the Boolean variables xs in P. The notation P [xs] should be taken to mean a formula that contains free occurrences of the distinct Boolean variables xs. In a context in which a formula has been written P [xs], subsequent use of the notation P [Qs] can then be understood to mean the result of substituting the formulas Qs for the variables xs\u00a0\u2026", "num_citations": "3\n", "authors": ["1893"]}
{"title": "The HOL string library\n", "abstract": " The HOL string Library - ORA - Oxford University Research Archive Logos Header links Search History Bookmarks 0 New Search Deposit Help Footer links Deposit Agreements Disclaimer Privacy Policy Cookies Accessibility Statement Take-down Policy Copyright API Contact Skip to main NEW SEARCH Deposit HELP 0 Back to Search CONTACT Name Email Comment Send message Actions Authors Bibliographic Details Terms of Use Stats Export BibTeX EndNote RefWorks General item icon General item The HOL string Library Actions Email \u00d7 Send the bibliographic details of this record to your email address. Your Email Please enter the email address that the record information will be sent to. Your message (optional) Please add any additional information to be included within the email. Send Cite \u00d7 APA Style Melham, TF (1991). The HOL string Library. Computer Laboratory\u201a University of Cambridge. Copy APA \u2026", "num_citations": "3\n", "authors": ["1893"]}
{"title": "A symbolic execution framework for algorithm-level modelling\n", "abstract": " This work aims to address the well-known and acute challenge of functional validation for complex, contemporary microarchitectural circuit designs. We provide a new formal framework for algorithm level modelling - design modelling at a high abstraction level, focused exclusively on function and algorithms. The semantics of our models is based on abstract state machines with synchronous parallel execution, sequential execution, and nondeterminism. To express models we propose an executable, object-oriented architecture specification language with rich data types and a well-defined formal semantics, based initially on Microsoft's AsmL. We describe an experimental framework for direct symbolic execution of models in this language, intended as a basis for both property and refinement verification, as well as design exploration. We explain and illustrate our approach through a case study, the modelling a\u00a0\u2026", "num_citations": "2\n", "authors": ["1893"]}
{"title": "PROSPER An Investigation into Software Architecture for Embedded Proof Engines\n", "abstract": " Prosper is a recently-completed ESPRIT Framework IV research project that investigated software architectures for component-based, embedded formal verification tools. The aim of the project was to make mechanized formal analysis more accessible in practice by providing a framework for integrating formal proof tools inside other software applications. This paper is an extended abstract of an invited presentation on Prosper given at FroCoS 2002. It describes the vision of the Prosper project and provides a summary of the technical approach taken and some of the lessons learned.", "num_citations": "2\n", "authors": ["1893"]}
{"title": "Some research issues in higher order logic theorem proving\n", "abstract": " Some Research Issues in Higher Order Logic Theorem Proving - ORA - Oxford University Research Archive Logos Header links Search History Bookmarks 0 New Search Deposit Help Footer links Deposit Agreements Disclaimer Privacy Policy Cookies Accessibility Statement Take-down Policy Copyright API Contact Skip to main NEW SEARCH Deposit HELP 0 Back to Search CONTACT Name Email Comment Send message Actions Authors Bibliographic Details Terms of Use Stats Export BibTeX EndNote RefWorks Report icon Report Some Research Issues in Higher Order Logic Theorem Proving Actions Email \u00d7 Send the bibliographic details of this record to your email address. Your Email Please enter the email address that the record information will be sent to. Your message (optional) Please add any additional information to be included within the email. Send Cite \u00d7 APA Style Melham, TF (1996). Some \u2026", "num_citations": "2\n", "authors": ["1893"]}
{"title": "Higher Order Logic Theorem Proving and Its Applications: 7th International Workshop, Valletta, Malta, September 19-22, 1994. Proceedings\n", "abstract": " This volume presents the proceedings of the 7th International Workshop on Higher Order Logic Theorem Proving and Its Applications held in Valetta, Malta in September 1994. Besides 3 invited papers, the proceedings contains 27 refereed papers selected from 42 submissions. In total the book presents many new results by leading researchers working on the design and applications of theorem provers for higher order logic. In particular, this book gives a thorough state-of-the-art report on applications of the HOL system, one of the most widely used theorem provers for higher order logic.", "num_citations": "2\n", "authors": ["1893"]}
{"title": "Higher Order Logic Theorem Proving and Its Applications: 6th International Workshop, HUG'93, Vancouver, BC, Canada, August 11-13, 1993. Proceedings\n", "abstract": " This volume constitutes the refereed proceedings of the 1993 Higher-Order Logic User's Group Workshop, held at the University of British Columbia in August 1993. The workshop was sponsored by the Centre for Integrated Computer System Research. It was the sixth in the series of annual international workshops dedicated to the topic of Higher-Order Logic theorem proving, its usage in the HOL system, and its applications. The volume contains 40 papers, including an invited paper by David Parnas, McMaster University, Canada, entitled\" Some theorems we should prove\".", "num_citations": "2\n", "authors": ["1893"]}
{"title": "The HOL word Library\n", "abstract": " Bit vector (or word) 1 is one of the fundamental data objects in hardware specification and verification. The modelling of bit vectors is a key to the success of a hardware verification project. This library attempt to provide a general, flexible infrastructure for reasoning about words. The description begins with a discussion of approach used by the library to model words. This is followed by a summary of the facilities available in the library. Chapter 2 contains the reference entries of all ML functions, and the last chapter lists all theorems stored in the library.", "num_citations": "2\n", "authors": ["1893"]}
{"title": "Symbolic Trajectory Evaluation\n", "abstract": " Symbolic trajectory evaluation is an industrial-strength formal hardware verification method, based on symbolic simulation, which has been highly successful in data-path verification, especially for microprocessor execution units. It is a \u2018model-checking\u2019 method in the basic sense that properties, expressed in a simple temporal logic, are verified by (symbolic) exploration of formal models of sequential circuits. Its defining characteristic is that it operates by symbolic simulation over abstractions of sets of states that only partially delineate the circuit states in the set. These abstract state sets are ordered in a lattice by information content, based on a three-valued domain for values on circuit nodes (true, false, and don\u2019t know). The algorithm operates over families of these abstractions encoded by Boolean formulas, providing a flexible, specification-driven mechanism for partitioned data abstraction. We provide a\u00a0\u2026", "num_citations": "1\n", "authors": ["1893"]}
{"title": "Xs are for Trajectory Evaluation \u201aBooleans are for Theorem Proving (Extended Version)\n", "abstract": " This paper describes a semantic connection between the symbolic trajectory evaluation model-checking algorithm and relational verification in higher-order logic. We prove a theorem that translates correctness results from trajectory evaluation over a four-valued lattice into a shallow embedding of temporal operators over Boolean streams. This translation connects the specialized world of trajectory evaluation to a general-purpose logic and provides the semantic basis for connecting additional decision procedures and model checkers.", "num_citations": "1\n", "authors": ["1893"]}
{"title": "Prosper technology roadmap\n", "abstract": " This document provides a report on state-of-the-art in the field and an assessment of the work of PROSPER in the broader research context. It also includes a section on the work of numerous existing projects relevant to PROSPER and how these projects relate to PROSPER\u2019s objectives and results.", "num_citations": "1\n", "authors": ["1893"]}
{"title": "ITP Project Anthology\n", "abstract": " ITP Project Anthology - ORA - Oxford University Research Archive Logos Header links Search History Bookmarks 0 New Search Deposit Help Footer links Deposit Agreements Disclaimer Privacy Policy Cookies Accessibility Statement Take-down Policy Copyright API Contact Skip to main NEW SEARCH Deposit HELP 0 Back to Search CONTACT Name Email Comment Send message Actions Authors Bibliographic Details Terms of Use Stats Export BibTeX EndNote RefWorks Report icon Report ITP Project Anthology Actions Email \u00d7 Send the bibliographic details of this record to your email address. Your Email Please enter the email address that the record information will be sent to. Your message (optional) Please add any additional information to be included within the email. Send Cite \u00d7 APA Style Aitken, S., Gray, P., Melham, T., & Thomas, M. (1997). ITP Project Anthology. Department of Computing Science\u201a \u2026", "num_citations": "1\n", "authors": ["1893"]}
{"title": "Special issue editorial. Higher order logic theorem proving and its application\n", "abstract": " Special issue editorial. Higher order logic theorem proving and its application | The Computer Journal | Oxford Academic Skip to Main Content Advertisement Oxford University Press Search Menu Account Menu Menu Sign In Register Navbar Search Filter Mobile Microsite Search Term Search Sign In Register Issues More Content Advance Articles Special Issues Submit Author Guidelines Submission Site Open Access Reviewer Guidelines Guidelines for Editors Review and Appeals Process Purchase Alerts About About The Computer Journal About the BCS, The Chartered Institute for IT Editorial Board Advertising and Corporate Services Journals Career Network Self-Archiving Policy Dispatch Dates The Computer Journal BCS, The Chartered Institute for IT Issues More Content Advance Articles Special Issues Submit Author Guidelines Submission Site Open Access Reviewer Guidelines Guidelines for Editors \u2026", "num_citations": "1\n", "authors": ["1893"]}
{"title": "The HOL finite_sets Library\n", "abstract": " The HOL finite_sets Library - ORA - Oxford University Research Archive Logos Header links Search History Bookmarks 0 New Search Deposit Help Footer links Deposit Agreements Disclaimer Privacy Policy Cookies Accessibility Statement Take-down Policy Copyright API Contact Skip to main NEW SEARCH Deposit HELP 0 Back to Search CONTACT Name Email Comment Send message Actions Authors Bibliographic Details Terms of Use Stats Export BibTeX EndNote RefWorks General item icon General item The HOL finite_sets Library Actions Email \u00d7 Send the bibliographic details of this record to your email address. Your Email Please enter the email address that the record information will be sent to. Your message (optional) Please add any additional information to be included within the email. Send Cite \u00d7 APA Style Melham, TF (1992). The HOL finite_sets Library. Computer Laboratory\u201a University of \u2026", "num_citations": "1\n", "authors": ["1893"]}
{"title": "Hardware Verification by Formal Proof\n", "abstract": " Hardware verification is the art of proving formally that, to within the tolerance of an underlying model, a design meets (or perhaps does not meet) its specification. This paper is an introduction to hardware verification and its limitations. We illustrate the technique by specifying and verifying an  or gate and a  ripple carry sub-system using the HOL notation, (see [2,8,9]), and then demonstrate its capabilities with sample applications to VLSI CAD and  system re-implementation.", "num_citations": "1\n", "authors": ["1893"]}
{"title": "Towards a VLSI Design Tool System\n", "abstract": " This paper outlines a proposal for VLSI design tools at Calgary. The system will allow a designer to specify the behaviour of a circuit and to generate verified designs. The central element of the environment is a very high level intermediate form which guarantees consistency throughout the design cycle. The VLSI tools will be built on top of the JADE distributed prototyping environment which is also under development at the University of Calgary.", "num_citations": "1\n", "authors": ["1893"]}