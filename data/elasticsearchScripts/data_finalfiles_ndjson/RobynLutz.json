{"title": "Analyzing software requirements errors in safety-critical, embedded systems\n", "abstract": " The root causes of safety-related software errors in safety-critical embedded systems are analyzed. The results show that software errors identified as potentially hazardous to the system tend to be produced by different error mechanisms than those that produce nonsafety-related software errors. Safety-related software errors are shown to arise most commonly from: discrepancies between the documented requirements specifications and the requirements needed for correct functioning of the system; and misunderstandings of the interface of the software with the rest of the system. These results are used to identify methods by which requirements errors can be prevented. The goal is to reduce safety-related software errors and to enhance the safety of complex, embedded systems.< >", "num_citations": "423\n", "authors": ["1482"]}
{"title": "A software fault tree approach to requirements analysis of an intrusion detection system\n", "abstract": " Requirements analysis for an intrusion detection system (IDS) involves deriving requirements for the IDS from analysis of the intrusion domain. When the IDS is, as here, a collection of mobile agents that detect, classify, and correlate system and network activities, the derived requirements include what activities the agent software should monitor, what intrusion characteristics the agents should correlate, where the IDS agents should be placed to feasibly detect the intrusions, and what countermeasures the software should initiate. This paper describes the use of software fault trees for requirements identification and analysis in an IDS. Intrusions are divided into seven stages (following Ruiu), and a fault subtree is developed to model each of the seven stages (reconnaissance, penetration, etc.). Two examples are provided. This approach was found to support requirements evolution (as new intrusions were identified\u00a0\u2026", "num_citations": "182\n", "authors": ["1482"]}
{"title": "Targeting safety-related errors during software requirements analysis\n", "abstract": " This article provides a safety checklist for use during the analysis of software requirements for spacecraft and other safety-critical, embedded systems. The checklist specifically targets the two most common causes of safety-related software errors: 1) inadequate interface requirements and 2) discrepancies between the documented requirements and the requirements actually needed for correct functioning of the system. The analysis criteria represented in the checklist are evaluated by application to two spacecraft projects. Use of the checklist to enhance the software requirements analysis is shown to reduce the number of safety-related software errors.", "num_citations": "182\n", "authors": ["1482"]}
{"title": "Safety analysis of software product lines using state-based modeling\n", "abstract": " The difficulty of managing variations and their potential interactions across an entire product line currently hinders safety analysis in safety-critical, software product lines. The work described here contributes to a solution by integrating product-line safety analysis with model-based development. This approach provides a structured way to construct state-based models of a product line having significant, safety-related variations and to systematically explore the relationships between behavioral variations and potential hazardous states through scenario-guided executions of the state model over the variations. The paper uses a product line of safety-critical medical devices to demonstrate and evaluate the technique and results.", "num_citations": "118\n", "authors": ["1482"]}
{"title": "Requirements analysis using forward and backward search\n", "abstract": " The requirements analysis of critical software components often involves a search for hazardous states and failure modes. This paper describes the integration of a forward search for consequences of reaching these forbidden modes with a backward search for contributing causes. Results are reported from two projects in which the integrated search method was used to analyze the requirements of critical spacecraft software. The search process was found to be successful in identifying some ambiguous, inconsistent, and missing requirements. More importantly, it identified four significant, unresolved requirements issues involving complex system interfaces and unanticipated dependencies. The results suggest that recent efforts by researchers to integrate forward and backward search have merit.", "num_citations": "103\n", "authors": ["1482"]}
{"title": "Empirical analysis of safety-critical anomalies during operations\n", "abstract": " Analysis of anomalies that occur during operations is an important means of improving the quality of current and future software. Although the benefits of anomaly analysis of operational software are widely recognized, there has been relatively little research on anomaly analysis of safety-critical systems. In particular, patterns of software anomaly data for operational, safety-critical systems are not well understood. We present the results of a pilot study using orthogonal defect classification (ODC) to analyze nearly two hundred such anomalies on seven spacecraft systems. These data show several unexpected classification patterns such as the causal role of difficulties accessing or delivering data, of hardware degradation, and of rare events. The anomalies often revealed latent software requirements that were essential for robust, correct operation of the system. The anomalies also caused changes to documentation\u00a0\u2026", "num_citations": "100\n", "authors": ["1482"]}
{"title": "Software fault tree analysis for product lines\n", "abstract": " The current development of high-integrity product lines threatens to outstrip existing tools for product-line verification. Software Fault Tree Analysis (SFTA) is a technique that has been used successfully to investigate contributing causes to potential hazards in safety-critical applications. This paper adapts SFTA to product lines of systems. The contribution is to define: (1) the technique to construct a product-line SFTA; and (2) the pruning technique required to reuse the SFTA for the analysis of a new system in the product line. The paper describes how product-line SFTA integrates with forward-analysis techniques such as Software Failure Modes, Effects, and Criticality Analysis (SFMECA), supports requirements evolution, and helps identify previously unforeseen constraints on the systems to be built. Applications to two small examples are used to illustrate the technique.", "num_citations": "77\n", "authors": ["1482"]}
{"title": "Compositional model checking of software product lines using variation point obligations\n", "abstract": " This paper introduces a technique for incremental and compositional model checking that allows efficient reuse of model-checking results associated with the features in a product line. As the use of product lines has increased, so has the need to verify the models used to construct the products in the product line. However, this effort is currently hampered by the difficulty of composing model-checking results for the features in a way that allows reuse for subsequent products. The contributions of this paper are to remove restrictions on how the features can be sequentially composed, to describe how to generate obligations such that all sequentially composed systems can be verified, and to show how to compositionally model check the product in the product line by reusing the variation-point obligations. The paper develops the technique and its implementation in the context of a medical-device product line.", "num_citations": "71\n", "authors": ["1482"]}
{"title": "Bi-directional analysis for certification of safety-critical software\n", "abstract": " This paper proposes the use of Bi-directional Analysis (BDA), an integrated extension of SFMEA and SFTA, as a core assessment technique by which saftey-critical software can be certified.", "num_citations": "65\n", "authors": ["1482"]}
{"title": "Operational anomalies as a cause of safety-critical requirements evolution\n", "abstract": " This paper reports the results of a small study of requirements changes to the onboard software of seven spacecraft subsequent to launch. Only those requirement changes that resulted from operational (i.e., post-launch) anomalies were of interest here, since the goal was to better understand the relationship between critical anomalies during operations and how safety-critical requirements evolve. The results of the study were surprising in that anomaly-driven requirements changes during operations were rarely due to previous requirements having been incorrect. Instead, changes involved new requirements either (1) for the software to handle rare but high-consequence events or (2) for the software itself to compensate for hardware failures or limitations. The prevalence of new requirements as a result of post-launch anomalies suggests a need for increased requirements-engineering support of maintenance\u00a0\u2026", "num_citations": "64\n", "authors": ["1482"]}
{"title": "PLFaultCAT: A product-line software fault tree analysis tool\n", "abstract": " Industry currently employs a product line approach to software development and deployment as a means to enhance quality while reducing development cost and time. This effort has created a climate where safety-critical software product lines are being developed without the full range of accompanying safety analysis tools available to software engineers. Software Fault Tree Analysis (SFTA) is a technique that has been used successfully to investigate contributing causes to potential hazards in safety-critical applications. This paper further extends the adaptation of SFTA to product lines of systems by describing a software safety analysis tool called PLFaultCAT. PLFaultCAT is an interactive, partially-automated support tool to aid software engineers in the application of product-line software SFTA. The paper describes the integration of product-line SFTA and PLFaultCAT with the software development life\u00a0\u2026", "num_citations": "63\n", "authors": ["1482"]}
{"title": "Parallel web service composition in moscoe: A choreography-based approach\n", "abstract": " We present a goal-driven approach to model a choreographer for realizing composite Web services. In this framework, the users start with an abstract, and possibly incomplete functional specification of a desired goal service. This specification is used to compose a choreographer that allows communication between the client and the set of available component services, and is functionally equivalent to the goal service. However, if such a composition cannot be realized, the proposed approach identifies the cause(s) for the failure of composition. This information can be used by the user to minimally reformulate the goal to reduce the `gap' between the desired functionality. The process can be iterated until a feasible composition is realized or the user decides to abort. The approach ensures that (i) a choreographer, if one is produced by our composition algorithm, in fact realizes the user-specified goal functionality\u00a0\u2026", "num_citations": "52\n", "authors": ["1482"]}
{"title": "Towards the automatic generation of mobile agents for distributed intrusion detection system\n", "abstract": " The Mobile Agent Intrusion Detection System (MAIDS) is an agent based distributed Intrusion Detection System (IDS). A disciplined requirement engineering process is developed to build MAIDS. The starting point is a high level description of intrusions expressed as Software Fault Trees (SFTs). Then the SFTs are translated to Colored Petri Nets (CPNs) that specify the IDS design. Subsequently, the CPNs are implemented as software intrusion detection agents in the MAIDS agent system. By using SFT and CPN as the theoretical underpinnings, the design and implementation of MAIDS can be verified and the design and implementation errors can be substantially reduced.This paper presents a tool that automatically translates CPNs that specify IDS design into software intrusion detection agents in MAIDS. Together with the translator we have developed to convert SFTs that model intrusions into the CPN for IDS\u00a0\u2026", "num_citations": "48\n", "authors": ["1482"]}
{"title": "Bi-directional safety analysis of product lines\n", "abstract": " As product-line engineering becomes more widespread, more safety-critical software product lines are being built. This paper describes a structured method for performing safety analysis on a software product line, building on standard product-line assets: product-line requirements, architecture, and scenarios. The safety-analysis method is bi-directional in that it combines a forward analysis (from failure modes to effects) with a backward analysis (from hazards to contributing causes). Safety-analysis results are converted to XML files to allow automated consistency checking between the forward and backward analysis results and to support reuse of the safety-analysis results throughout the product line. The paper demonstrates and evaluates the method on a safety-critical product-line subsystem, the Door Control System. Results show that the bi-directional safety-analysis method found both missing and incorrect\u00a0\u2026", "num_citations": "46\n", "authors": ["1482"]}
{"title": "Extending the product family approach to support safe reuse\n", "abstract": " Upcoming spacecraft will reuse software components to the extent that some systems will form product families of similar or identical units (e.g., a fleet of spaceborne telescopes). Missions such as these must be demonstrably safe, but the consequences of broad reuse are hard to evaluate from a software safety perspective. This paper reports experience specifying an interferometer (telescope) subsystem as a product family and supplementing the specification with results from a failure analysis. Extensions to the product family approach, with lessons learned, are discussed in three areas: (1) integration of safety analysis with the product family approach; (2) modeling decisions that have safety implications (e.g., how to handle near-commonalities, establishing a hierarchy of variabilities, and specifying dependencies among options); and (3) use of the product family requirements for design evaluation of reusable\u00a0\u2026", "num_citations": "46\n", "authors": ["1482"]}
{"title": "Tool-supported verification of product line requirements\n", "abstract": " A recurring difficulty for organizations that employ a product-line approach to development is that when a new product is added to an existing product line, there is currently no automated way to verify the completeness and consistency of the new product\u2019s requirements in terms of the product line. In this paper we address the issue of requirements verification for product lines. We have implemented our approach in a requirements engineering tool called DECIMAL (DECIsion Modeling AppLication). DECIMAL is a requirements verification tool with a rich graphical user interface that automatically checks for completeness and consistency between a new product and the product line to which it belongs. The verification uses an SQL database server as the underlying analysis engine. The paper describes the tool and evaluates it in two applications: a virtual-reality, positional device-driver product line and the\u00a0\u2026", "num_citations": "45\n", "authors": ["1482"]}
{"title": "An approach to architectural analysis of product lines\n", "abstract": " This paper addresses the issue of how to perform architectural analysis on an existing product line architecture. The con tribution of the paper is to identify and demonstrate a repeatable product line architecture analysis process. The approach defines a \u201cgood\u201d product line architecture in terms of those quality attributes required by the particular product line under development. It then analyzes the architecture against these criteria by both manual and tool-supported methods. The phased approach described in this paper provides a structured analysis of an existing product line architecture using (1) formal specification of the high-level architecture,(2) manual analysis of scenarios to exercise the architecture's support for required variabilities, and (3) model checking of critical behaviors at the architectural level that are required for all systems in the product line. Results of an application to a software product line of\u00a0\u2026", "num_citations": "45\n", "authors": ["1482"]}
{"title": "Using obstacle analysis to identify contingency requirements on an unpiloted aerial vehicle\n", "abstract": " This paper describes the use of Obstacle Analysis to identify anomaly handling requirements for a safety-critical, autonomous system. The software requirements for the system evolved during operations due to an on-going effort to increase the autonomous system\u2019s robustness. The resulting increase in autonomy also increased system complexity. This investigation used Obstacle Analysis to identify and to reason incrementally about new requirements for handling failures and other anomalous events. Results reported in the paper show that Obstacle Analysis complemented standard safety-analysis techniques in identifying undesirable behaviors and ways to resolve them. The step-by-step use of Obstacle Analysis identified potential side effects and missing monitoring and control requirements. Adding an Availability Indicator and feature-interaction patterns proved useful for the analysis of obstacle\u00a0\u2026", "num_citations": "44\n", "authors": ["1482"]}
{"title": "Analysis of a software product line architecture: an experience report\n", "abstract": " This paper describes experiences with the architectural specification and tool-assisted architectural analysis of a mission-critical, high-performance software product line. The approach used defines a \u201cgood\u201d product line architecture in terms of those quality attributes required by the particular product line under development. Architectures are analyzed against several criteria by both manual and tool-supported methods. The approach described in this paper provides a structured analysis of an existing product line architecture using (1) architecture recovery and specification, (2) architecture evaluation, and (3) model checking of behavior to determine the level of robustness and fault tolerance at the architectural level that are required for all systems in the product line. Results of an application to a software product line of spaceborne telescopes are used to explain the approach and describe lessons learned.", "num_citations": "43\n", "authors": ["1482"]}
{"title": "Integrating product-line fault tree analysis into AADL models\n", "abstract": " Fault tree analysis (FTA) is a safety-analysis technique that has been extended recently to accommodate product-line engineering. This paper describes a tool-supported approach for integrating product-line FTA with the AADL (architecture analysis and design language) models and associated AADL Error Models for a product line. The AADL plug-in we have developed provides some automatic pruning and adaptation of the fault tree for a specific product from the product-line FTA. This work supports consistent reuse of the FTA across the systems in the product line and reduces the effort of maintaining traceability between the safety analysis and the architectural models. Incorporating the product-line FTA into the AADL models also allows derivation of basic quantitative and cut set analyses for each product-line member to help identify and eliminate design weaknesses. The tool-supported capabilities enable\u00a0\u2026", "num_citations": "42\n", "authors": ["1482"]}
{"title": "Contributions of SFMEA to requirements analysis\n", "abstract": " The experience report describes the lessons learned from the use of software failure modes and effects analysis (SFMEA) for requirements analysis of critical spacecraft software. The SFMEA process was found to be successful in identifying some ambiguous, inconsistent, and missing requirements. More importantly, the SFMEA process, followed by a backward analysis somewhat similar to fault tree analysis (FTA), identified four significant, unresolved requirements issues. These issues involved complex system interfaces and unanticipated dependencies. Our results challenge some current views on the limitations of SFMEA and suggest that recent efforts by researchers to integrate SFMEA with a broader FTA approach have merit.", "num_citations": "41\n", "authors": ["1482"]}
{"title": "A product-line requirements approach to safe reuse in multi-agent systems\n", "abstract": " The dynamic nature of highly autonomous agents within distributed systems is difficult to specify with existing requirements techniques. However, capturing the possibly shifting configurations of agents in the requirements specification is essential for safe reuse of agents. The contribution of this work is an extensible agent-oriented requirements specification template for distributed systems that supports safe reuse. We make two basic claims for this idea. First, by adopting a product-line-like approach, it exploits component reuse during system evolution. Second, the template allows ready integration with an existing tool-supported, safety analysis technique sensitive to dynamic variations within the components (i.e., agents) of a system. To illustrate these claims, we apply the requirements specification template and safety analysis to a real-world context-aware, distributed satellite system.", "num_citations": "36\n", "authors": ["1482"]}
{"title": "Safety analysis of requirements for a product family\n", "abstract": " A safety analysis was performed on the software requirements for a family of flight instrumentation displays of commercial aircraft. First, an existing safety checklist was extended to apply to four-variable models and used to analyze the requirements models for representative members of the product family. The results were evaluated against an initial specification of the product family's required commonalities and variabilities. The safety checklist was found to be effective at analyzing the completeness of the product family requirements and at identifying additional variabilities and commonalities. Secondly, a forward and backward search for hazards was performed on representative members of the product family. Additional safety requirements for enhanced fault tolerance were derived from these searches. The safety analysis techniques used here appear to have applicability for enhancing the completeness and\u00a0\u2026", "num_citations": "36\n", "authors": ["1482"]}
{"title": "Requirements discovery during the testing of safety-critical software\n", "abstract": " This paper describes the role of requirements discovery during the testing of a safety-critical software system. Analysis of problem reports generated by the integration and system testing of an embedded, safety-critical software system identified four common mechanisms for requirements discovery and resolution during testing: (1) Incomplete requirements, resolved by changes to the software, (2) Unexpected requirements interactions, resolved by changes to the operational procedures, (3) Requirements confusion by the testers, resolved by changes to the documentation, and (4) Requirements confusion by the testers, resolved by a determination that no change was needed The experience reported here confirms that requirements discovery during testing is frequently due to communication difficulties and subtle interface issues. The results also suggest that \"false positive\" problem reports from testing (in which the\u00a0\u2026", "num_citations": "34\n", "authors": ["1482"]}
{"title": "MoSCoE: A framework for modeling web service composition and execution\n", "abstract": " Development of sound approaches and software tools for specification, assembly, and deployment of composite Web services from independently developed components promises to enhance collaborative software design and reuse. In this context, the proposed research introduces a new incremental approach to service composition, MoSCoE (Modeling Web Service Composition and Execution), based on the three steps of abstraction, composition and refinement. Abstraction refers to the high-level description of the service desired (goal) by the user, which drives the identification of an appropriate composition strategy. In the event that such a composition is not realizable, MoSCoE guides the user through successive refinements of the specification towards a realizable goal service that meets the user requirements.", "num_citations": "33\n", "authors": ["1482"]}
{"title": "Fault contribution trees for product families\n", "abstract": " Software fault tree analysis (SFTA) provides a structured way to reason about the safety or reliability of a software system. As such, SFTA is widely used in mission-critical applications to investigate contributing causes to possible hazards or failures. In this paper we propose an approach similar to SFTA for product families. The contribution of the paper is to define a top-down, tree-based analysis technique, the fault contribution tree analysis (FCTA), that operates on the results of a product-family domain analysis and to describe a method by which the FCTA of a product family can serve as a reusable asset in the building of new members of the family. Specifically, we describe both the construction of the fault contribution tree for a product family (domain engineering) and the reuse of the appropriately pruned fault contribution tree for the analysis of a new member of the product family (application engineering). The\u00a0\u2026", "num_citations": "33\n", "authors": ["1482"]}
{"title": "Applying adaptive safety analysis techniques [for embedded software]\n", "abstract": " Current needs for high-reliability reusable software, rapid evolutionary development and verification of innovative software architectures have focused attention on improving techniques for analysing the safety and reliability of embedded software. The work reported in this paper integrates two successful safety analysis techniques which have been used separately on software and hardware into the system engineering process. This process combines SFMECA (software failure modes and effects criticality analysis) and SFTA (software fault tree analysis) in a way that can be readily adapted to a particular project's evolving system needs. The technique was used on two recent space instruments: the Mars Microprobe Project and the Earth Orbiting System's Microwave Limb Sounder. The main lessons learned from this experience are discussed: (1) flexible use, (2) a risk-driven rather than sequential approach, (3\u00a0\u2026", "num_citations": "33\n", "authors": ["1482"]}
{"title": "MoSCoE: An approach for composing web services through iterative reformulation of functional specifications\n", "abstract": " We propose a specification-driven approach to Web service composition. Our framework allows the users (or service developers) to start with a high-level, possibly incomplete specification of a desired (goal) service that is to be realized using a subset of the available component services. These services are represented using labeled transition systems augmented with guards over variables with infinite domains and are used to determine a strategy for their composition that would realize the goal service functionality. However, in the event the goal service cannot be realized using the available services, our approach identifies the cause(s) for such failure which can then be used by the developer to reformulate the goal specification. Thus, the technique supports Web service composition through iterative reformulation of the functional specification. We present a prototype implementation in a tabled-logic\u00a0\u2026", "num_citations": "32\n", "authors": ["1482"]}
{"title": "Evaluation, Selection, and Application of Model-Based Diagnosis Tools and Approaches\n", "abstract": " Automated methods for diagnosing problems with system behavior are commonplace in automobiles, copiers, and many other consumer products. Applying advanced diagnostic techniques to aerospace systems, especially aerospace vehicles with human crews, is much more challenging. The low probability of component and subsystem failure, the cost of verification and validation, the difficulty of selecting the most appropriate diagnostic technology for a given problem, and the lack of large-scale diagnostic technology demonstrations increase the complexity of these applications. To meet these challenges, NASA Ames Research Center has developed the Advanced Diagnostic and Prognostic Testbed with the following goals in mind:(i) Provide a technology-neutral basis for testing and evaluating diagnostic systems, both software and hardware,(ii) Provide the capability to perform accelerated testing of diagnostic\u00a0\u2026", "num_citations": "32\n", "authors": ["1482"]}
{"title": "Experience report: Using formal methods for requirements analysis of critical spacecraft software\n", "abstract": " Formal specification and analysis of requirements continues to gain support as a method for producing more reliable software. However, the introduction of formal methods to a large software project is difficult, due in part to the unfamiliarity of the specification languages and the lack of graphics. This paper reports results of an investigation into the effectiveness of formal methods as an aid to the requirements analysis of critical, system-level fault-protection software on a spacecraft currently under development. Our experience indicates that formal specification and analysis can enhance the accuracy of the requirements and add assurance prior to design development in this domain.", "num_citations": "31\n", "authors": ["1482"]}
{"title": "Better Analysis of Defect Data at NASA.\n", "abstract": " For example. thc LM teDm only used k of the eight &-mcnsims of the sbudard OX scheme (thc four shown m Figarc 1 plus\" impact\", which is implicit in rhc selection by the LM team of only highcrithhty 8lomdies). Thc other throa dhensions wue not UsEd due tm damain-specitic m-sans, cg they were invariant in that projects-These domain-specjfic masons fqr resttkfhg the diuwnsionality may not ap-ply fo other domains. For example:-The lV&V dcfea kcking (em is plming to collcct", "num_citations": "23\n", "authors": ["1482"]}
{"title": "State-based modeling to support the evolution and maintenance of safety-critical software product lines\n", "abstract": " Changes to safety-critical product lines can jeopardize the safety properties that they must ensure. Thus, evolving software product lines must consider the impact that changes to requirements may have on the existing systems and their safety. The contribution of this work is a systematic, tool-supported technique to support safe evolution of product-line requirements using a model-based approach. We show how the potential feature interactions that need to be modeled are scoped and identified with the aid of product-line software fault tree analysis. Further, we show how reuse of the state-based models is effectively exploited in the evolution phase of product-line engineering. To illustrate this approach, we apply our technique to the evolution of a safety-critical cardiac pacemaker product line", "num_citations": "22\n", "authors": ["1482"]}
{"title": "Selecting and composing web services through iterative reformulation of functional specifications\n", "abstract": " We propose a specification-driven approach to Web service composition. The proposed framework allows users to start with a high-level, possibly incomplete specification of a desired (goal) service that is to be realized using a subset of the available component services. These services are represented by the system using transition systems augmented with guards over variables with infinite domains and are used to determine a strategy for their composition that would realize the goal service. In the event that the goal service cannot be realized using the available services, the system identifies the cause(s) for such failure which can then be used by the developer to reformulate the goal specification. Thus, the system supports Web service composition through iterative refinement of the functional specifications. We present a prototype implementation in tabled-logic programming environment that illustrates the key\u00a0\u2026", "num_citations": "21\n", "authors": ["1482"]}
{"title": "Ongoing requirements discovery in high-integrity systems\n", "abstract": " Discovering new requirements and requirements knowledge continues throughout the lifetime of many high-integrity embedded systems. Understanding the mechanisms for how we discover and resolve requirements identifies guidelines to help prevent anomalies found during testing from recurring during operations. We can improve our systems' quality by means of a better understanding of the mechanisms by which we discover requirements and manage them in testing and operations. We analyzed anomaly reports from testing and operations for eight spacecraft projects at the California Institute of Technology's Jet Propulsion Laboratory, showing that many of the anomalies during these phases involve software requirements discovery. As a result, several patterns of requirements discovery emerged. In turn, identifying these patterns leads to six guidelines for managing the ongoing requirements discovery.", "num_citations": "21\n", "authors": ["1482"]}
{"title": "Requirements analysis for a product family of DNA nanodevices\n", "abstract": " DNA nanotechnology uses the information processing capabilities of nucleic acids to design self-assembling, programmable structures and devices at the nanoscale. Devices developed to date have been programmed to implement logic circuits and neural networks, capture or release specific molecules, and traverse molecular tracks and mazes. Here we investigate the use of requirements engineering methods to make DNA nanotechnology more productive, predictable, and safe. We use goal-oriented requirements modeling to identify, specify, and analyze a product family of DNA nanodevices, and we use PRISM model checking to verify both common properties across the family and properties that are specific to individual products. Challenges to doing requirements engineering in this domain include the error-prone nature of nanodevices carrying out their tasks in the probabilistic world of chemical kinetics, the\u00a0\u2026", "num_citations": "20\n", "authors": ["1482"]}
{"title": "Gaia-PL: A product line engineering approach for efficiently designing multiagent systems\n", "abstract": " Agent-oriented software engineering (AOSE) has provided powerful and natural, high-level abstractions in which software developers can understand, model and develop complex, distributed systems. Yet, the realization of AOSE partially depends on whether agent-based software systems can achieve reductions in development time and cost similar to other reuse-conscious development methods. Specifically, AOSE does not adequately address requirements specifications as reusable assets. Software product line engineering is a reuse technology that supports the systematic development of a set of similar software systems through understanding, controlling, and managing their common, core characteristics and their differing variation points. In this article, we present an extension to the Gaia AOSE methodology, named Gaia-PL (Gaia-Product Line), for agent-based distributed software systems that enables\u00a0\u2026", "num_citations": "20\n", "authors": ["1482"]}
{"title": "Using occurrence properties of defect report data to improve requirements\n", "abstract": " Defect reports generated for faults found during testing provide a rich source of information regarding problematic phrases used in requirements documents. These reports indicate that faults often derive from instances of ambiguous, incorrect or otherwise deficient language. In this paper, we report on a method combining elements of linguistic theory and information retrieval to guide the discovery of problematic phrases throughout a requirements specification, using defect reports and correction requests generated during testing to seed our detection process. We found that phrases known from these materials to be problematic have occurrence properties in requirements documents that both allow the direction of resources to prioritize their correction, and generate insights characterizing more general locations of difficulty within the requirements. Our findings lead to some recommendations for more efficiently and\u00a0\u2026", "num_citations": "19\n", "authors": ["1482"]}
{"title": "Reuse of a formal model for requirements validation\n", "abstract": " This paper report experience from how a project engaged in the process of requirements analysis for evolutionary builds can reuse the formally specified design model produced for a similar, earlier project in the same domain.", "num_citations": "19\n", "authors": ["1482"]}
{"title": "Resolving requirements discovery in testing and operations\n", "abstract": " We describe the results of an investigation into requirements discovery during testing and operations. Requirements discovery includes both new requirements and new knowledge regarding existing requirements. Analysis of anomaly reports shows that many of the anomalies that occur during these phases involve requirements discovery. Previous work identified four common mechanisms for requirements discovery and resolution during testing. The results reported here extend that work in two ways: (1) to show that very similar requirements-discovery mechanisms are at work in both testing and operations, and (2) to evaluate the requirements-discovery mechanisms against experience with seven additional systems. We discuss the consequences of these classifications and results in terms of reducing requirements-based defects in critical, embedded systems.", "num_citations": "18\n", "authors": ["1482"]}
{"title": "A product-line approach to promote asset reuse in multi-agent systems\n", "abstract": " Software reuse technologies have been a driving force in significantly reducing both the time and cost of software specification, development, maintenance and evolution. However, the dynamic nature of highly autonomous agents in distributed systems is difficult to specify with existing requirements analysis and specification techniques. This paper offers an approach for open, agent-based distributed software systems to capture requirements specifications in such a way that they can be easily reused during the initial requirements phase as well as later if the software needs to be updated. The contribution of this paper is to provide a reusable requirements specification pattern to capture the dynamically changing design configurations of agents and reuse them for future similar systems. This is achieved by adopting a product-line approach for agent-based software engineering. We motivate and illustrate\u00a0\u2026", "num_citations": "17\n", "authors": ["1482"]}
{"title": "Evolution of safety-critical requirements post-launch\n", "abstract": " This paper reports the results of a small study of requirements changes to the onboard software of three spacecraft subsequent to launch. Only those requirement changes that resulted from post-launch anomalies (i.e., during operations) were of interest here, since the goal was to better understand the relationship between critical anomalies during operations and how safety-critical requirements evolve. The results of the study were surprising in that anomaly-driven, post-launch requirements changes were rarely due to previous requirements having been incorrect. Instead, changes involved new requirements: (1) for the software to handle rare events; or (2) for the software to compensate for hardware failures or limitations. The prevalence of new requirements as a result of post-launch anomalies suggests a need for increased requirements-engineering support of maintenance activities in these systems. The results\u00a0\u2026", "num_citations": "17\n", "authors": ["1482"]}
{"title": "Automated requirements analysis for a molecular watchdog timer\n", "abstract": " Dynamic systems in DNA nanotechnology are often programmed using a chemical reaction network (CRN) model as an intermediate level of abstraction. In this paper, we design and analyze a CRN model of a watchdog timer, a device commonly used to monitor the health of a safety critical system. Our process uses incremental design practices with goal-oriented requirements engineering, software verification tools, and custom software to help automate the software engineering process. The watchdog timer is comprised of three components: an absence detector, a threshold filter, and a signal amplifier. These components are separately designed and verified, and only then composed to create the molecular watchdog timer. During the requirements-design iterations, simulation, model checking, and analysis are used to verify the system. Using this methodology several incomplete requirements and design flaws\u00a0\u2026", "num_citations": "15\n", "authors": ["1482"]}
{"title": "DECIMAL and PLFaultCAT: from product-line requirements to product-line member software fault trees\n", "abstract": " PLFaultCAT is a tool for software fault tree analysis (SFTA) during product-line engineering. When linked with DECIMAL, a product-line requirements verification tool, the enhanced version of PLFaultCAT provides traceability between product- line requirements and SFTA hazards as well as semi-automated derivation of the SFTA for each new product-line system previously verified by DECIMAL. The combined tool reduces the effort needed to safely reuse requirements and customize the product-line SFTA as each new system is constructed.", "num_citations": "15\n", "authors": ["1482"]}
{"title": "Detecting unsafe error recovery schedules\n", "abstract": " This paper presents a mechanism for modeling timing, precedence, and data-consistency constraints on concurrently executing processes. The model allows durations and intervals between events to be speci ed. An algorithm is provided to detect schedules which may be unsafe with respect to the constraints. This work, motivated by the design and validation of autonomous error-recovery strategies on the Galileo spacecraft, appears to be applicable to a variety of asynchronous real-time systems.", "num_citations": "15\n", "authors": ["1482"]}
{"title": "Software engineering for space exploration\n", "abstract": " Software engineering offers tools and techniques that improve the odds spacecraft will survive long missions, contributing to their resilience to new environmental challenges and to their adaptability to updated mission requirements.", "num_citations": "14\n", "authors": ["1482"]}
{"title": "Automata-Based Verification of Security Requirements of Composite Web Services.\n", "abstract": " With the increasing reliance of complex real-world applications on composite web services assembled from independently developed component services, there is a growing need for effective approaches to verifying that a composite service not only offers the required functionality but also satisfies the desired non-functional requirements (NFRs). In high-assurance applications such as traffic control, medical decision support, and coordinated response to civil emergencies, of special concern are NFRs having to do with security, safety and reliability of composite services. Current approaches to verifying NFRs of composite services (as opposed to individual services) remain largely ad-hoc and informal in nature. In this paper we develop techniques for ensuring that a composite service meets the user-specified NFRs expressible in the form of hard constraints e.g., \u201cresponse time has to be less than 5 minutes.\u201d We\u00a0\u2026", "num_citations": "14\n", "authors": ["1482"]}
{"title": "Experience with the architectural design of a modest product family\n", "abstract": " Many product families are modest in the sense that they consist of a sequence of incremental products with, at any point in time, only a few distinct products available and minimal variations among the products. Such product families, nevertheless, are often large, complex systems, widely deployed, and possessing stringent safety and performance requirements. This paper describes a case study that tends to confirm the value of using a product\u2010line approach for the architectural design of a modest product family. The paper describes the process, design alternatives, and lessons learned, both positive and negative, from the architectural design of one such family of medical image analysis products. Realized benefits included identifying previously unrecognized common behavior and sets of features that were likely to change together, aligning the architecture with specific market needs and with the organization\u00a0\u2026", "num_citations": "14\n", "authors": ["1482"]}
{"title": "Engineering and verifying requirements for programmable self-assembling nanomachines\n", "abstract": " We propose an extension of van Lamsweerde's goal-oriented requirements engineering to the domain of programmable DNA nanotechnology. This is a domain in which individual devices (agents) are at most a few dozen nanometers in diameter. These devices are programmed to assemble themselves from molecular components and perform their assigned tasks. The devices carry out their tasks in the probabilistic world of chemical kinetics, so they are individually error-prone. However, the number of devices deployed is roughly on the order of a nanomole (a 6 followed by fourteen 0s), and some goals are achieved when enough of these agents achieve their assigned subgoals. We show that it is useful in this setting to augment the AND/OR goal diagrams to allow goal refinements that are mediated by threshold functions, rather than ANDs or ORs. We illustrate this method by engineering requirements for a\u00a0\u2026", "num_citations": "13\n", "authors": ["1482"]}
{"title": "Using fault modeling in safety cases\n", "abstract": " For many safety-critical systems a safety case is built as part of the certification or acceptance process. The safety case assembles evidence to justify that the design and implementation of a system avoid hazardous software behavior. Fault modeling and analysis can provide a rich source of evidence that the design meets safety goals. However, there is currently little guidance available to bridge the gap between the fault modeling that developers perform and the mandated safety case. In this experience report we describe results and open issues from an investigation of how evidence from software tool supported fault modeling and analysis of a spacecraft power system could assist in safety-case construction. The ways in which the software fault models can provide evidence for the safety case appears to be applicable to other critical systems.", "num_citations": "12\n", "authors": ["1482"]}
{"title": "Supporting requirements reuse in multi-agent system product line design and evolution\n", "abstract": " A principal goal of agent-oriented software engineering (AOSE) is to provide the mechanisms for reusing, maintaining and allowing the evolution of agent-based software systems. Our AOSE methodology, Gaia-PL, enables the design and development of multi-agent system product lines (MAS-PL) 1  by providing the software engineering processes to define and reuse requirements specifications and design artifacts. In this paper we extend our Gaia-PL methodology with automated tool support to enable the reuse and verification of MAS-PL requirements to better facilitate specification reuse during both initial system development and evolution. Specifically, we show how use of our product-line requirements management and verification tool along with feature modeling can support correct variation point selection, reuse and MAS-PL evolution. We illustrate and evaluate this work through an application to a\u00a0\u2026", "num_citations": "12\n", "authors": ["1482"]}
{"title": "Using immersive virtual environments for certification\n", "abstract": " As virtual environments move from research laboratories to commercial use, there is a need to define the appropriate role of VEs in certifying the systems they simulate. This article describes the unique features of this developing technology, as well some key issues to consider when using VEs for certification.", "num_citations": "12\n", "authors": ["1482"]}
{"title": "Toward safe reuse of product family specifications\n", "abstract": " Upcoming spacecraft plan extensive reuse of software components, to the extent that some systems will form product families of similar or identical units (eg, a fleet of spaceborne telescopes). Missions such as these must be demonstrably safe, but the consequences of broad reuse are hard to evaluate from a software safety perspective. This paper reports experience specifying an interferometer (telescope) subsystem as a product family and supplementing the specification with results from a hazards analysis. Lessons learned are discussed in three areas:(1) integration of hazards analysis with the product family approach;(2) modeling decisions that have safety implications (eg, how to handle near-commonalities, establishing a hierarchy of variabilities, and specifying dependencies among options); and (3) tracing the product family requirements to the design of the reusable components and to the design of a\u00a0\u2026", "num_citations": "12\n", "authors": ["1482"]}
{"title": "Product-line-based requirements customization for web service compositions\n", "abstract": " Customizing web services according to users' individual functional and non-functional requirements has become increasingly difficult as the number of users increases. This paper introduces a new way to customize and verify composite web services by incorporating a software product-line engineering approach into web-service composition. The approach uses a partitioning similar to that between domain engineering and application engineering in the product-line context. It specifies the options that the user can select and constructs the resulting web-service compositions. By first creating a web-service composition search space that satisfies the common requirements and then querying the search space as the user selects values for the parameters of variation, we provide a more efficient way to customize web services. A decision model, illustrated with examples from an emergency-response application, is\u00a0\u2026", "num_citations": "10\n", "authors": ["1482"]}
{"title": "The role of aspects in modeling product line variabilities\n", "abstract": " As of today, it is unclear whether aspect-oriented modeling can benefit the model-driven development of software product lines. Although some preliminary studies exist at the requirements and implementation level that investigate the interaction of crosscutting behaviors and product-line variabilities, to the best of our knowledge these interactions at the modeling level are not yet investigated. The contribution of this work is a preliminary study of the object-oriented and aspect-oriented approaches for handling crosscutting variabilities. This study helps us identify desired characteristics of aspect-oriented modeling techniques for product lines. A pacemaker product line, extracted from the real industry case, serves as a running example to illustrate our findings.", "num_citations": "10\n", "authors": ["1482"]}
{"title": "DECIMAL: A requirements engineering tool for product families\n", "abstract": " Today, many software organizations are utilizing product lines as a way of improving productivity, improving quality and reducing development time. When a product family evolves (a new member is added to it), there must be a way to verify whether the new member's specific requirements are met within the reuse constraints of its product family. The contribution of this paper is to demonstrate such a verification process by describing a requirements engineering tool called DECIMAL. DECIMAL is an interactive, automated, GUI driven verification tool that automatically checks for completeness (checking to see if all commonalities are satisfied) and consistency (checking to see if dependencies between variabilities are satisfied) of the new member's requirements with the product family's requirements. DECIMAL also checks that variabilities are within the range and data type specified for the product family. The approach is to perform the verification using a database as the underlying analysis engine. Finally, a pilot study of a virtual reality device driver product family is described which investigates the feasibility of this approach by evaluating the tool.", "num_citations": "10\n", "authors": ["1482"]}
{"title": "Enabling verifiable conformance for product lines\n", "abstract": " NASA is, with the rest of industry, turning to product-line engineering to reduce costs and improve quality by effectively managing reuse. Experience in industry has shown that it is the verifiable conformance of each system to the product-line specifications that makes or breaks the product-line practice. Verification that the software for each project satisfies its intended product-line constraints is thus essential. This paper reports early results from aneffort to assemble from previous, industrial experience a set of enablers of verifiable conformance for use in the application engineering of NASA product lines. Lessons learned may be useful for developers of safety-critical, long-lived, or highly autonomous productlines, as well as for companies that integrate product line subsystems developed by multiple contractors.", "num_citations": "9\n", "authors": ["1482"]}
{"title": "Bi-Directional Safety Analysis for Product-Line, Multi-Agent Systems\n", "abstract": " Safety-critical systems composed of highly similar, semiautonomous agents are being developed in several application domains. An example of such multi-agent systems is a fleet, or \u201cconstellation\u201d of satellites. In constellations of satellites, each satellite is commonly treated as a distinct autonomous agent that must cooperate to achieve higher-level constellation goals. In previous work, we have shown that modeling a constellation of satellites or spacecraft as a product line of agents (where the agents have many shared commonalities and a few key differences) enables reuse of software analysis and design assets. We have also previously developed efficient safety analysis techniques for product lines.We now propose the use of Bi-Directional Safety Analysis (BDSA) to aid in system certification. We extend BDSA to product lines of multi-agent systems and show how the analysis artifacts thus produced contribute to the software\u2019s safety case for certification purposes. The product-line approach lets us reuse portions of the safety analysis for multiple agents, significantly reducing the burden of certification. We motivate and illustrate this work through a specific application, a product-line, multiagent satellite constellation.", "num_citations": "9\n", "authors": ["1482"]}
{"title": "Failure Modes and Effects Analysis\n", "abstract": " The sections in this article are", "num_citations": "9\n", "authors": ["1482"]}
{"title": "Failure analysis for composition of web services represented as labeled transition systems\n", "abstract": " The Web service composition problem involves the creation of a choreographer that provides the interaction between a set of component services to realize a goal service. Several methods have been proposed and developed to address this problem. In this paper, we consider those scenarios where the composition process may fail due to incomplete specification of goal service requirements or due to the fact that the user is unaware of the functionality provided by the existing component services. In such cases, it is desirable to have a composition algorithm that can provide feedback to the user regarding the cause of failure in the composition process. Such feedback will help guide the user to re-formulate the goal service and iterate the composition process. We propose a failure analysis technique for composition algorithms that views Web service behavior as multiple sequences of input/output events. Our\u00a0\u2026", "num_citations": "8\n", "authors": ["1482"]}
{"title": "Mapping concern space to software architecture: a connector-based approach\n", "abstract": " Concern modeling plays an important role in software design, implementation and maintenance. Hyperspace has provided a strong conceptual framework to separate concerns in multi-dimensional levels. The contribution of this work is to create an architectural element, called a concern connector, to support the implementation of hyperspace in the architectural design phase. The paper makes three basic claims for this idea. First, using concern connectors allows the scope of each hyperslice in a certain concern dimension to be defined and stored. Second, the concern interactions within each hypermodule can be specified in the concern connectors. Third, the association of concern modeling with this distinctive architectural element improves the flexibility of concern maintenance and evolution during the development process. To test these claims the paper investigates the use of concern connectors in a real\u00a0\u2026", "num_citations": "8\n", "authors": ["1482"]}
{"title": "Runtime fault detection in programmed molecular systems\n", "abstract": " Watchdog timers are devices that are commonly used to monitor the health of safety-critical hardware and software systems. Their primary function is to raise an alarm if the monitored systems fail to emit periodic \u201cheartbeats\u201d that signal their well-being. In this article, we design and verify a molecular watchdog timer for monitoring the health of programmed molecular nanosystems. This raises new challenges, because our molecular watchdog timer and the system that it monitors both operate in the probabilistic environment of chemical kinetics, where many failures are certain to occur and it is especially hard to detect the absence of a signal. Our molecular watchdog timer is the result of an incremental design process that uses goal-oriented requirements engineering, simulation, stochastic analysis, and software verification tools. We demonstrate the molecular watchdog\u2019s functionality by having it monitor a molecular\u00a0\u2026", "num_citations": "7\n", "authors": ["1482"]}
{"title": "Mining requirements knowledge from operational experience\n", "abstract": " This chapter reports results from two recent studies of how operational experience with mission-critical product lines can enhance knowledge management for use with their future products. The challenge was how to propagate new requirements knowledge forward in a product line in ways that projects will use. In the first product line, the concern was capture and retention of requirements knowledge exposed by defects that occurred during operations. This led to two mechanisms not traditionally associated with requirements management \u2013 feature models extended with assumption specifications (formal) and structured anecdotes of paradigmatic product-line defects (informal). In the second product line, the traditional notion of binding time in a product line did not accurately reflect the timing of project decisions. This led to a definition of product-line binding times that better accommodates the varying\u00a0\u2026", "num_citations": "7\n", "authors": ["1482"]}
{"title": "Identifying contingency requirements using obstacle analysis\n", "abstract": " This paper describes the use of obstacle analysis to identify anomaly-handling requirements for a safety-critical, autonomous system. The software requirements for the system evolved during operations due to an on-going effort to increase the autonomous system's robustness. The resulting increase in autonomy also increased system complexity. This investigation used obstacle analysis to identify and to reason incrementally about new requirements for handling failures and other anomalous events. Results reported in the paper show that obstacle analysis complemented standard safety-analysis techniques in identifying undesirable behaviors and ways to resolve them. The step-by-step use of obstacle analysis identified potential side effects and missing monitoring and control requirements. Adding an availability indicator and feature-interaction patterns proved useful for the analysis of obstacle resolutions. The\u00a0\u2026", "num_citations": "7\n", "authors": ["1482"]}
{"title": "Failure Assessment\n", "abstract": " Three questions to which software developers want accurate, precise answers are \u201cHow can the software system fail?\u201d, \u201cWhat bad things will happen if the software fails?\u201d, and \u201cHow many failures will the software experience?\u201d. In this paper we discuss several of the most prevalent and useful techniques that have been devised to answer these questions. For each technique, we present its purpose and background, describe the process of performing the technique, and evaluate it in a discussion section. We also discuss lessons learned from practice, describe available tools and resources to help the practitioner select and implement failure assessment techniques, and identify some future directions for the topic.", "num_citations": "7\n", "authors": ["1482"]}
{"title": "Safe-AR: Reducing Risk While Augmenting Reality\n", "abstract": " Augmented reality (AR) systems excel at offering users real-time, situation-aware information to support users' decision making. With AR, rich visualizations of relevant data can be displayed to users without blocking their view of the real world. For example, an AR-enabled automotive windshield can display a red outline around a pedestrian to alert a driver starting a turn into that cross street. Other critical uses of AR applications that are or will soon be deployed include surgery, emergency response, vehicle maintenance, and pilot training. Many of these applications can enhance operational safety. However, developing risk analysis methods to handle failure modes in the melded virtual and physical realities remains an open problem. This paper proposes a risk analysis method with which to study computer-generated AR visualizations of system and environment states. The analysis framework incorporates three\u00a0\u2026", "num_citations": "6\n", "authors": ["1482"]}
{"title": "Tool-supported verification of contingency software design in evolving, autonomous systems\n", "abstract": " Advances in software autonomy can support system robustness to a broader range of operational anomalies, called contingencies, than ever before. Contingency management includes, but goes beyond, traditional fault protection. Increased autonomy to achieve contingency management brings with it the challenge of how to verify that the software can detect and diagnose contingencies when they occur. The approach used in this work to investigate the verification was two-fold: (1) to integrate in a single model the representation of the contingencies and of the data signals and software monitors required to identify those contingencies, and (2) to use tool-supported verification of the diagnostics design to identify gaps in coverage of the contingencies. Results presented here indicate that tool-supported verification of the adequacy and correct behavior of such diagnostic software for contingency management can\u00a0\u2026", "num_citations": "6\n", "authors": ["1482"]}
{"title": "Experiences using formal methods for requirements modeling\n", "abstract": " This paper describes three case studies in the lightweight application of formal methods to requirements modeling for spacecraft fault protection systems.", "num_citations": "6\n", "authors": ["1482"]}
{"title": "Analyzing Software Errors in Safety-Critical Embedded Systems\n", "abstract": " This paper analyzes the root causes of safty-related software faults identified as potentially hazardous to the system are distributed somewhat differently over the set of possible error causes than non-safety-related software faults.", "num_citations": "6\n", "authors": ["1482"]}
{"title": "Automated caching of behavioral patterns for efficient run-time monitoring\n", "abstract": " Run-time monitoring is a powerful approach for dynamically detecting faults or malicious activity of software systems. However, there are often two obstacles to the implementation of this approach in practice: (1) that developing correct and/or faulty behavioral patterns can be a difficult, labor-intensive process, and (2) that use of such pattern-monitoring must provide rapid turn-around or response time. We present a novel data structure, called extended action graph, and associated algorithms to overcome these drawbacks. At its core, our technique relies on effectively identifying and caching specifications from (correct/faulty) patterns learned via machine-learning algorithm. We describe the design and implementation of our technique and show its practical applicability in the domain of security monitoring of sendmail software", "num_citations": "5\n", "authors": ["1482"]}
{"title": "Embedded software for a space interferometry system: automated analysis of a software product line architecture\n", "abstract": " This paper describes the analysis of the embedded software for an interferometry system using model checking as a means for achieving various analysis goals. The contribution of this paper is to demonstrate how the use of lightweight formal methods can be applied to software for an embedded system via analysis of the behavior of a software architecture.", "num_citations": "5\n", "authors": ["1482"]}
{"title": "Population-Induced Phase Transitions and the Verification of Chemical Reaction Networks\n", "abstract": " We show that very simple molecular systems, modeled as chemical reaction networks, can have behaviors that exhibit dramatic phase transitions at certain population thresholds. Moreover, the magnitudes of these thresholds can thwart attempts to use simulation, model checking, or approximation by differential equations to formally verify the behaviors of such systems at realistic populations. We show how formal theorem provers can successfully verify some such systems at populations where other verification methods fail.", "num_citations": "4\n", "authors": ["1482"]}
{"title": "Using model-based assurance to strengthen diagnostic procedures\n", "abstract": " In previous work we described Diagnostic Tree for Verification (DTV), a partially automated software engineering technique by which diagnostic trees generated from system models are used to help check out diagnostic procedures. Diagnostic procedures are instructions used to isolate failures during operations. Assuring such procedures manually is time-consuming and costly. This paper reports our recent experience in applying DTV to diagnostic procedures for lighting failures in NASA's Habitat Demonstration Unit (HDU), a prototype for astronauts' living quarters. DTV identified missing and inconsistent instructions, as well as more-efficient sequences of diagnostic steps. Unexpectedly, the most significant benefit was finding assumptions that will not remain true as the system evolves. We describe both the challenges faced in applying DTV and how its independent perspective helped in assuring the procedures'\u00a0\u2026", "num_citations": "4\n", "authors": ["1482"]}
{"title": "Reliability and availability requirements engineering within the unified process using a dependability analysis and modeling profile\n", "abstract": " In this paper, we propose an integration of the Unified Process and a Dependability Analysis and Modeling (DAM) profile to support quantifiable, testable reliability and availability requirements (R & AR) elicitation and completeness analysis. Specifically, we are interested in improved identification and specification of R & AR and their associated assumptions. This is accomplished through an iterative workflow that is consistent with the Unified Process and attaches DAM stereotypes to use and misuse cases. Fault-tree analysis helps determine and mitigate combinations of faults that could impede R & AR achievement. The workflow steps are demonstrated and evaluated on an intrusion protection service for critical infrastructures.", "num_citations": "4\n", "authors": ["1482"]}
{"title": "Using defect reports to build requirements knowledge in product lines\n", "abstract": " In a recent study of a product line, we found that the defect reports both (1) captured new requirements information and (2) implicated undocumented, tacit requirements information in the occurrence of the defects. We report four types of requirements knowledge revealed by software defect reports from integration and system testing for two products in this high-dependability product line. We argue that store-and-retrieve-based requirements management is insufficient to avoid recurrence of these types of defects on upcoming members of the product line. We then propose the use of two mechanisms not traditionally associated with requirements management, one formal and one informal, to improve communication of these types of requirements knowledge to developers of future products in the product line. We show how the two proposed mechanisms, namely feature models extended with assumption\u00a0\u2026", "num_citations": "4\n", "authors": ["1482"]}
{"title": "RE at 50, with a Focus on the Last 25 Years\n", "abstract": " This talk looks backward at how the requirements engineering field and mission have changed in the 25 years since RE'17.", "num_citations": "3\n", "authors": ["1482"]}
{"title": "Evaluating the Reusability of Product-Line Software Fault Tree Analysis Assets for a Safety-Critical System\n", "abstract": " The reuse of\u00a0product-line assets enables efficiencies in development time and cost.\u00a0Safety analysis techniques for Software Product-Line Engineering (SPLE) construct safety-related, non-code artifacts with the aim of reusing these assets for new product-line members.\u00a0In this paper we describe results from the construction and reuse of a key safety-analysis technique, Product-line Software Fault Tree Analysis (PL-SFTA), and its supporting tool, PLFaultCAT. The main contribution of this work is the evaluation of PL-SFTA and PLFaultCAT for the reuse of safety analysis assets in a product line. The context is a safety-critical product line of spacecraft developed as a multi-agent system.", "num_citations": "3\n", "authors": ["1482"]}
{"title": "Assessing the Effect of Software Failures on Trust Assumptions\n", "abstract": " The contribution of this paper is a technique to assess whether software failures during operational use can invalidate the trust assumptions and, hence, the adequacy of the software security. Use of the technique identified four security-related software requirements for making the system more robust to denial-of-service attacks.", "num_citations": "3\n", "authors": ["1482"]}
{"title": "A tool-supported technique for specification & management of model-checking properties for software product lines\n", "abstract": " Property specification in model checking is currently handled without adequately taking software product lines into account. This is largely due to the fact that the available model checkers and property specification tools lack sufficient support for reusing model-checking effort. The challenge is twofold: first, we need to make the properties accurately trace to individual system requirements and models even as they evolve; and second, we need to make the property specification easy to share and reuse among different systems of the same product line. The contribution of this work is a tool-supported technique to guide users in generating, selecting, managing, and reusing product-line properties and patterns of properties. The technique is evaluated in a product-line application. Results show that it improves the reusability and traceability of property specifications for model checking in a product line setting.", "num_citations": "3\n", "authors": ["1482"]}
{"title": "Orthogonal defect classification for projects\n", "abstract": " Orthoaonal Defect Classification for Projects Page 1 U Orthoaonal Defect Classification for Projects Robyn Lutz and Carmen Mikulski robyn.lutz@jpl.nasa.gov carmen.mi kulski@jpl.nasa.gov QMS W contact: Burt Sigal Jet Propulsion Laboratory Quality Mission Software Workshop May 13-15,2003 The research described in this presentation was carried out at the Jet Propulsion Laboratory, California Institute of Technology, under a contract with the National Aeronautics and Space Administration. It was funded by NASA's Office of Safety and Mission Assurance, Center Initiative UPN 323-08. The first author's research is supported in part by National Science Foundation Grants CCR-0204139 and CCR-0205588. http://qmsworkshop5.gsfc.nasa.gov/ 4/30/2003 Page 1 Page 2 Orthogonal Defect Classification (ODC) for Projects 9 What are the objectives of defect measurement? P Reduce post-launch critical software \u2026", "num_citations": "3\n", "authors": ["1482"]}
{"title": "Constraint checking during error recovery\n", "abstract": " The system-level software onboard a spacecraft is responsible for recovery from communication, power, thermal, and computer-health anomalies that may occur. The recovery must occur without disrupting any critical scientific or engineering activity that is executing at the time of the error. Thus, the error-recovery software may have to execute concurrently with the ongoing acquisition of scientific data or with spacecraft maneuvers. This work provides a technique by which the rules that constrain the concurrent execution of these processes can be modeled in a graph. An algorithm is described that uses this model to validate that the constraints hold for all concurrent executions of the error-recovery software with the software that controls the science and engineering activities of the spacecraft. The results are applicable to a variety of control systems with critical constraints on the timing and ordering of the events they control.", "num_citations": "3\n", "authors": ["1482"]}
{"title": "State logging in chemical reaction networks\n", "abstract": " Recording the state of a molecular programmed nanosystem is essential for many purposes. The capability to log the state helps in debugging and verifying the system, enables checkpointing for rollback in case of faults, and provides stable system states for input into other devices. In this paper we present the computational design of a molecular device to log the states of a system modeled by a chemical reaction network. We describe, formally specify and prove the correctness of the design. We then extend the device to include components that detect whether a signal is valid and log only valid states. These molecular components enable us to store a copy of the system's state and to communicate that copy to another system for use.", "num_citations": "2\n", "authors": ["1482"]}
{"title": "Moving Toward Evidence-Based Software Production\n", "abstract": " Computer software is increasingly critical to the products, infrastructure, and science upon which society depends. However, the production of society\u2019s software is known to be problematic. Current understanding of software production, largely based on anecdotes, is inadequate. Achieving the deeper understanding needed to transform software production experiences into software production improvements requires collecting and using evidence on a large scale. This paper proposes some steps toward that outcome, with particular attention to what government can do to stimulate software engineering studies that will advance the capabilities of software production.", "num_citations": "2\n", "authors": ["1482"]}
{"title": "Using auto-generated diagnostic trees for optimized fault handling\n", "abstract": " The launch of a NASA spacecraft depends on a complex set of ground procedures that must be successfully verified and executed. These procedures are a complicated mix of software checks and calibrations, manual inputs and checks of console data, and inspection of physical devices. Development, inspection and execution of these test procedures are currently labor-intensive and critically dependent on human expertise. In this paper, we study how to use the auto-generated diagnostic trees from existing diagnostic models to improve the verification of safety critical launch procedures. Our goal is to identify potential adjustments in the procedures that might offer savings in terms of reduced complexity, increased efficiency and autonomy, and/or reduced cost. The application of the presented method to a spacecraft electrical power system shows the feasibility of the approach and its range of capabilities.", "num_citations": "2\n", "authors": ["1482"]}
{"title": "Identifying Safety-Critical Requirement Defects Using a Tool-Based, Iterative Process\n", "abstract": " Deriving accurate system requirements from a natural language description is difficult. A common approach to translate formatted, natural language user requirements into accurate system requirements is through a collaboration of domain and application engineers. However, this process often leads to flawed requirements. A promising solution is to catch early requirements defects via rapid prototyping [2]. In this paper, we use an executable specification language, SpecTRM-RL, for early prototyping. Different from the traditional code-based prototyping approaches, it helps increase consistency between the prototype and the requirements and provides both formal analysis and dynamic evaluation to support verification and validation (V&V)[2]. As a result more requirements related defects can be found during the early development stage.", "num_citations": "2\n", "authors": ["1482"]}
{"title": "Patterns of software defect data on spacecraft\n", "abstract": " The identification of patterns of software defect data yields insights into improving the quality of both operational and future spacecraft.  This paper describes the results of applying this technique to both post-launch and pre-launch spacecraft.  It then describes four key challenges that remain to achieving fuller utilization of defect analysis in future systems.", "num_citations": "2\n", "authors": ["1482"]}
{"title": "Validating system-level error recovery for spacecraft\n", "abstract": " The system-level software onboard a spacecraft is re-sponsible for recovery from communicat ion, thermal, power, and computer-health anomalies that may occur. The recovery must occur without disrupting any critical scientific or engineering activity that is executing at the time of the error. Thus, the error-recovery software may have to execute concurrently with the ongoing acquisition of scientific data or with spacecraft maneuvers. This paper provides a technique by which the rules that constrain the concurrent execut, ion of these processes can be modeled in a graph. An algorithm is described that uses this model to validate that the constraints hold for all concurrent executions of the errorrecovery software with the soft, ware that controls the science and engineering events on the spacecraft", "num_citations": "2\n", "authors": ["1482"]}
{"title": "Using an Astronaut Jetpack Project to Teach Human-CPS Requirements Engineering\n", "abstract": " This paper reports experience teaching an undergraduate Requirements Engineering (RE) course organized around a Human-Cyber-Physical System (H-CPS) project called SafeWalk. This project, based on a NASA astronaut\u2019s jetpack, gave students practical experience developing RE skills. Using the SafeWalk project helped the students learn the RE discovery, specification, analysis and evolution techniques they need to be practitioners in the growing field of H-CPS.", "num_citations": "1\n", "authors": ["1482"]}
{"title": "Robustness and games against nature in molecular programming\n", "abstract": " Matter, especially DNA, is now programmed to carry out useful processes at the nanoscale. As these programs and processes become more complex and their envisioned safetycritical applications approach deployment, it is essential to develop methods for engineering trustworthiness into molecular programs. Some of this can be achieved by adapting existing software engineering methods, but molecular programming also presents new challenges that will require new methods. This paper presents a method for dealing with one such challenge, namely, the difficulty of ascertaining how robust a molecular program is to perturbations of the relative \"clock speeds\" of its various reactions. The method proposed here is gametheoretic. The robustness of a molecular program is quantified in terms of its ability to win (achieve its original objective) in games against other molecular programs that manipulate its relative\u00a0\u2026", "num_citations": "1\n", "authors": ["1482"]}
{"title": "Evidence-based software production\n", "abstract": " \"\u2026[S] oftware remains NIT's [Networking and Information Technology] greatest weakness. Although reliable and robust software is central to activities throughout society, much software is brittle, full of bugs and flaws. Software development remains a labor-intensive process in which delays and cost overruns are common, and responding to installed software's errors, anomalies, vulnerabilities, and lack of interoperability is costly to organizations throughout the US economy.\"\"\u2026[T] he science of software development must be a focus of Federal NIT R&D. As software's complexity continues to rise, today's design, development, and management problems will become intractable unless fundamental breakthroughs are made\u2026\"[2]", "num_citations": "1\n", "authors": ["1482"]}
{"title": "Model-Based Assurance of Diagnostic Procedures for Complex Systems\n", "abstract": " Verifying diagnostic procedures for complex systems is hard and labor-intensive. Usually this verification is accomplished primarily through extensive review of the procedures by experts. We aim to augment this review process by using insights from comparing the diagnostic steps described in the procedural definitions with diagnostics information derived from existing models of the system. These comparisons offer various conformance checks between the manually developed diagnostic procedures and the diagnostic trees autogenerated from the diagnostic system models. We previously described our DTV Diagnostic Tree for Verification technique based on these comparisons. This paper describes an extension to DTV, and reports results of an application of DTV to a representative systems diagnostic procedures. Specifically, it outlines four analyses branch analysis, root cause coverage, path verification, and efficiency that can be performed using DTV illustrates the process for applying DTV and reports results from our application of DTV to assure fifteen of the procedures developed for diagnosing problems in an electrical power system testbed for spacecraft.Descriptors:", "num_citations": "1\n", "authors": ["1482"]}
{"title": "Towards Verification of Operational Procedures using Auto-Generated Diagnostic Trees\n", "abstract": " The design, development, and operation of complex space, lunar and planetary exploration systems require the development of general procedures that describe a detailed set of instructions capturing how mission tasks are performed. For both crewed and uncrewed NASA systems, mission safety and the accomplishment of the scientific mission objectives are highly dependent on the correctness of procedures. In this paper, we describe how to use auto-generated diagnostic trees from existing diagnostic models to improve the verification of standard operating procedures. Specifically, we introduce a systematic method, namely the Diagnostic Tree for Verification (DTV), developed with the goal of leveraging the information contained within auto-generated diagnostic trees in order to check the correctness of procedures, to streamline the procedures in terms of reducing the number of steps or use of resources in them, and to propose alternative procedural steps adaptive to changing operational conditions. The application of the DTV method to a spacecraft electrical power system shows the feasibility of the approach and its range of capabilities.", "num_citations": "1\n", "authors": ["1482"]}
{"title": "Deriving safety-related scenarios to support architecture evaluation\n", "abstract": " This chapter introduces an analysis process that combines the different perspectives of system decomposition with hazard analysis methods to identify the safety-related use cases and scenarios. It argues that the derived safety-related use cases and scenarios, which are the detailed instantiations of system safety requirements, serve as input to future software architectural evaluation. Furthermore, by modeling the derived safety-related use cases and scenarios into UML (Unified Modeling Language) diagrams, the authors hope that visualization of system safety requirements will not only help to enrich the knowledge of system behaviors but also provide a reusable asset to support system development and evolution.", "num_citations": "1\n", "authors": ["1482"]}
{"title": "An Approach to Architectural Analysis of Product Lines\n", "abstract": " This paper addresses the issue of how to perform architectural analysis on an existing product line architecture.", "num_citations": "1\n", "authors": ["1482"]}