{"title": "Automated GUI test coverage analysis using GA\n", "abstract": " A Graphical User Interface (GUI) is a graphical front-end to a software system. A GUI contains graphical objects with certain distinct values which can be used to determine the state of the GUI at any time. Software developing organizations always desire to test the software thoroughly to get maximum confidence about its quality. But this requires gigantic effort to test a GUI application due to the complexity involved in such applications. This problem has led to the automation of GUI testing and different techniques have been proposed for automated GUI Testing. Event-flow graph is a fresh technique being used in the field of automated GUI testing. Just as control-flow graph, another GUI model that represents all possible execution paths in a program, event-flow model, in the same way, represents all promising progressions of events that can be executed on the GUI. Another challenging question in software testing is\u00a0\u2026", "num_citations": "66\n", "authors": ["1255"]}
{"title": "Enterprise content management (ECM): needs, challenges and recommendations\n", "abstract": " Availablity of information, agility of business process, interoperability of diverse business functions and conformity of the legal requirements are few of the critical success factors for enterprises to survive in the modern and competing global market space. Enterprises while striving to achieve these critical success factors are further exposed to the complexity of massive volumes of variant data and information, which exists in a broad array of formats. Complex and extended business processes spanning across the business functions and partners around the globe, need for integration and interoperability, fulfullment of compliance to legal and regulatory requirements. Enterprise Content Management (ECM) answers the above questions and offers the capabilities to efficiently and effectively manage the challenges imposed by the demanding business requirements of the modern world. The study in-hand reviews and\u00a0\u2026", "num_citations": "26\n", "authors": ["1255"]}
{"title": "Value based regression test case prioritization\n", "abstract": " Test case prioritization organizes test cases in a way to accomplish some performance goals efficiently. Rate of fault detection is one of most important performance objective. The test cases must run in an order that raises the opportunity of fault detection in the earlier life cycle of testing. Test case prioritization techniques have proven to be beneficial in improving regression testing activities. In this paper, we have proposed an algorithm which prioritizes the system test cases based on the six factors: customer priority, changes in requirement, implementation complexity, requirement traceability, execution time and fault impact of requirement. We conducted a controlled experiment on two industrial data sets to compare the proposed value based test case prioritization algorithm with random prioritization for early rate of fault detection. Average percentage of fault detection metrics has been used to measure the efficiency of proposed and random prioritization and it shows that the proposed value based algorithm is more efficient than random prioritization to generate sequence of test cases for early rate of fault detection.", "num_citations": "24\n", "authors": ["1255"]}
{"title": "Scope management in agile versus traditional software development methods\n", "abstract": " Scope management is among one of the most important knowledge areas of software project management which if not managed carefully can lead the projects towards failure. A well defined and well managed scope is very important for a qualitative, cost effective and timely completion of the project. In this paper we discussed the role and impact of the scope on two very broadly accepted methodologies for software development. The two methodologies adopt different techniques for the development of software. How they are different from each other and how they adopt and manage the scope in there development process are discussed. Moreover, the replacement of traditional software development methods by agile software development methods in terms of cost, resources and time are also a part of this work.", "num_citations": "24\n", "authors": ["1255"]}
{"title": "MECA: Software process improvement for small organizations\n", "abstract": " Today many large, medium and small companies face complication in instituting a quality improvement programme. In contrast, we can observe that unlike large organizations, small companies find it generally complicated to implement and adjust to quality improvement plans. This is further complex since most software quality models such as capability maturity model and spice primarily addresses the requirements of large organization. Therefore, in order to provide a basis for the development of software quality for small software organization we proposed customized approach to the measurement and for process improvement, which takes into account the explicit limits of the small organizations. To implement software process improvement in smaller setup is very difficult. We suggest a new approach, for software process improvement. This new model is name as MECA model (monitor, evaluate, control, and act\u00a0\u2026", "num_citations": "20\n", "authors": ["1255"]}
{"title": "Project scheduling conflict identification and resolution using genetic algorithms (GA)\n", "abstract": " Project management has gained a lot of application in software development activity in the past two decades. It is now considered to be one of the most critical component of software development lifecycle. Project management is traditionally defined as the discipline of planning, organizing, and managing activities and resources for successful execution and completion of project goals and objectives. In this respect, project management holds a key position in satisfactory completion of projects. That is the reason that we have a complete knowledge domain we know as software project management (SPM). The main purpose of SPM is to achieve all the project goals and objectives while working within the constraints posed by project environment and stakeholders. These constraints include (but not limited to) time, scope, resources, resource allocation and optimization etc. Successful project planning\u00a0\u2026", "num_citations": "18\n", "authors": ["1255"]}
{"title": "Using Artificial Intelligence to Automatically Test GUI\n", "abstract": " This position paper presents a synopsis of the imperative function artificial intelligence (AI) has partaken in software engineering (SE) as well as in software testing. In addition, the paper discusses how graphical user interface (GUI), and event driven software testing can derive benefits from the use of AI techniques. Artificial intelligence has significantly aided the process of the automation of different software process. The employment of AI in software testing is not novel, having played a crucial role in the automation of software testing since its innovation. The usage of AI techniques not only reduces the cost but it also guarantees better quality as well as thorough testing. GUI Testing can be considered as the most challenging area of software testing. Although the results are quite preliminary, but the application of different AI techniques for GUI testing has proven to produce ideal results. Nevertheless, the application\u00a0\u2026", "num_citations": "16\n", "authors": ["1255"]}
{"title": "Gap Analysis between State of Practice and State of Art Practices in Agile Software Development\n", "abstract": " Agile software development can be considered as a development methodology which suits the situations where requirements are changing frequently. Most of the literature about agile is specific to one or two practices. Lack of a comprehensive discussion on all the commonly used agile practices in literature and their adoption results by industry is very much evident. This work is an ongoing effort, where we are going to discuss some of the literature, we have gone through to solicit common agile practices, score them on the basis of frequency of referral and then we have tried to get an opinion from industry regarding our findings. Our aim is to have a comprehensive review of all the literature presented for Agile in last decade and have an analysis of these results based on feedback from industry of at-least 2-3 continents. In this short paper, we are presenting some of our findings and we hope to extend our work\u00a0\u2026", "num_citations": "15\n", "authors": ["1255"]}
{"title": "Evolutionary based Automated Coverage Analysis for GUI Testing\n", "abstract": " In recent times, software industry has seen the immense expansion in its popularity. Graphical user interface (GUI) is of the most important and ground breaking factor behind the exponential growth of acceptance of software systems. Beside this popularity, software organizations are trying best to optimize the quality of delivered products. In software development life cycle, software testing is one major phase having focus towards improved software quality. Increased attention towards GUI in development helped in materialization of GUI testing as a vital branch of software testing. Manual efforts to test GUI have revealed a lot of problems, which, ultimately led towards automation of GUI testing. This paper presents a novel approach towards automation of GUI test coverage analysis based on an evolutionary algorithm, Particle Swarm Optimization (PSO). Another objective that has been tried to achieve is\u00a0\u2026", "num_citations": "13\n", "authors": ["1255"]}
{"title": "Site selection for food distribution using rough set approach and TOPSIS method\n", "abstract": " Suitable site selection for a specific purpose is a crucial activity, and of the greatest importance to a project manager. Several methods have been proposed by the research community for effective site selection, but all proposed methods incur high costs. This study explores the combination of a rough set theory approach (RSTA) with Technique for Order Preference by Similarity to Ideal Solution (TOPSIS) for suitable site selection for food distribution. This method provides a set of rules to determine different sites, which ultimately can help management develop strategies for suitable site selection. A set of rules for suitable site selection are derived from information related to a practical case, Pakistan Red Crescent Society (PRCS), to demonstrate the prediction ability of RSTA. The results clearly demonstrate that the RSTA model can be a valuable tool for site identification. Rough set theory also assists management in\u00a0\u2026", "num_citations": "12\n", "authors": ["1255"]}
{"title": "Fully automated gui testing and coverage analysis using genetic algorithms\n", "abstract": " Graphical user interface (GUI), is a graphical front-end to a software system, contains graphical objects with certain distinct values whose purpose is to ascertain the state of the GUI at any time. In order to ensure that the quality of the software is par excellence, software developing organizations endeavor to test the software meticulously. Nevertheless, the process of testing a GUI application calls for a colossal effort, owing on account of the intricacy entailed in such applications. Subsequently, organizations were spurred to initiate the automation of GUI testing, thereby proposing various techniques to achieve this end. A GUI model event-flow graph, an innovative technique being utilized in the field of automated GUI testing, represents, likewise control flow graph, all promising progressions of events that can be executed on GUI. The search for utmost quality insurance for software, through the introduction of automated software testing, raises yet another challenging question, that of the \u201camount\u201d of testing required so as procuring the best results. In the course of the development of the techniques for the automation of the software testing procedure, a few measures can be employed to provide guidance on the quality of an automatic test suite. Based on some predefined test criterion, genetic algorithm searches for the best possible test parameter combinations. Usually this test criterion corresponds to a \u201ccoverage function\u201d that measures how much of the automatically generated optimization parameters satisfies the given test criterion. In this paper, we have attempted to exploit the event driven nature of GUI. Based on this nature, we have presented\u00a0\u2026", "num_citations": "11\n", "authors": ["1255"]}
{"title": "PSO based Automated Test Coverage Analysis of Event Driven Systems\n", "abstract": " Graphical User Interface (GUI, pronounced sometimes as gooey as well) was first developed in 1981 and has become an essence for today's computing. A GUI contains graphical objects having certain distinct values which can be used to determine the state of the GUI at any time. Developing organizations always desire to thoroughly test the software to get maximum confidence about its quality, but this requires gigantic effort to test a GUI application due to complexity involve in such applications. This problem has led to automate GUI testing and different techniques have been proposed for automated GUI Testing. Event-flow graph is a fresh breach in the field of automated GUI testing. As control-flow graph, another GUI model represents all possible execution paths in a program; in the same way, event-flow model represents all promising progressions of events that can be executed on the GUI. Another challenging\u00a0\u2026", "num_citations": "10\n", "authors": ["1255"]}
{"title": "Deep learning based pedestrian detection at distance in smart cities\n", "abstract": " Generative adversarial networks (GANs) have been promising for many computer vision problems due to their powerful capabilities to enhance the data for training and test. In this paper, we leveraged GANs and proposed a new architecture with a cascaded Single Shot Detector (SSD) for pedestrian detection at distance, which is yet a challenge due to the varied sizes of pedestrians in videos at distance. To overcome the low-resolution issues in pedestrian detection at distance, DCGAN is employed to improve the resolution first to reconstruct more discriminative features for a SSD to detect objects in images or videos. A crucial advantage of our method is that it learns a multi-scale metric to distinguish multiple objects at different distances under one image, while DCGAN serves as an encoder-decoder platform to generate parts of an image that contain better discriminative information. To measure the\u00a0\u2026", "num_citations": "9\n", "authors": ["1255"]}
{"title": "Trajectory based vehicle counting and anomalous event visualization in smart cities\n", "abstract": " Motion pattern analysis can be performed automatically on the basis of object trajectories by means of tracking videos; an effective approach to analyse and to model the traffic behaviour; is important to describe motion by taking the whole trajectory whereas it\u2019s more essential to identify and evaluate object behaviour online. In this paper, pattern detection approach is presented which takes spatio-temporal characteristic of vehicle trajectories. A real time system is built to infer and track the object behaviour quickly by online performing trajectory analysis. Every independent vehicle in the video frame is tracked over time. As the anomaly behaviour occurs, glyph is generated to show it occurrences. Vehicle counting is done by estimating the trajectories and compared with Hungarian tracker. Several surveillance videos are taken into account for the performance checking of system. Experimental results\u00a0\u2026", "num_citations": "9\n", "authors": ["1255"]}
{"title": "Software maintenance prediction using weighted scenarios: an architecture perspective\n", "abstract": " Software maintenance is considered one of the most important issues in software engineering which has some serious implications in term of cost and effort. It consumes enormous amount of organization's overall resources. On the other hand, software architecture of an application has considerable effect on quality factors such as maintainability, performance, reliability and flexibility etc. Using software architecture for quantification of certain quality factor will help organizations to plan resources accordingly. This paper is an attempt to predict software maintenance effort at architecture level. The method takes requirements, domain knowledge and general software engineering knowledge as input in order to prescribe application architecture. Once application architecture is prescribed, then weighted scenarios and certain factors (i.e. system novelty, turnover and maintenance staff ability, documentation quality\u00a0\u2026", "num_citations": "8\n", "authors": ["1255"]}
{"title": "Survey based usability evaluation of MS Word\n", "abstract": " Usability evaluation has been employed frequently for spotting strengths and weaknesses of an application's from user-friendliness point of view. Questionnaires have extensively been used to evaluate user interfaces of different applications. This paper is a survey report conducted for evaluation of product usability. Product that was chosen to be evaluated from usability aspects was Microsoft Word included in Microsoft Office 2007 Package. This product was taken into account because of its large usability at academic and professional level. In this paper we present the results of our survey and also the analysis of those results. The findings and recommendations of this study can be generalized for other Microsoft office products. Some limitations of study have also been listed.", "num_citations": "7\n", "authors": ["1255"]}
{"title": "Ontology driven semantic annotation based GUI testing\n", "abstract": " One major agreed upon factor responsible for popularity of software systems, is graphical user interface. Besides the efforts and desires of development organizations, testing a graphical user interface thoroughly, is still almost a nightmare. Manual effort required to complete this task is very large. One major breakthrough to automate this manual effort of GUI testing is to map GUI events with some models and graphs. Event-flow graph is relatively a fresh and useful addition to cope up with automation of GUI testing. In this paper we are presenting an idea of using ontology for GUI testing. This ontology is supposed to work on the basis of semantics of possible events and then annotations will be used to generate the test cases and work as an oracle for verification of the output of testing effort. This work still is based on theoretical concepts and needs practical verification, which will be completed in short time.", "num_citations": "6\n", "authors": ["1255"]}
{"title": "Analysis of softfare process improvement efforts in Pakistan\n", "abstract": " Organizations have alfays strived for reduction in delivery time, improved quality, and increased productivity of application development. These goals have assumed more significance keeping in mind tight labor markets and increasing pressure to deliver at a faster and economical rate. This means that realization about importance of mature softfare processes has increased over the past fef years. That is fhy the popularity of the different process improvement techniques has grofn over the past fef years. Pakistan's softfare industry has made its mark globally and has experienced rapid grofth in this time. Notfithstanding its smaller size in global market, Pakistan's softfare industry has established a place for itself in the forld. Pakistan's IT industry is bringing its focus tofards mature processes and quality products. This paper has been authored to find out the current status of local industry regarding improvement of its\u00a0\u2026", "num_citations": "6\n", "authors": ["1255"]}
{"title": "Parallel testing and coverage analysis for context-free applications\n", "abstract": " Software testing being one of the major phases of the software development life cycle is critical in delivering reliable software products. Traditional manual GUI testing has severe limitations like insufficient test coverage, labor intensiveness, complexity involved and cost ineffectiveness. \u201cHow much testing is enough or sufficient?\u201d still remains a challenging question. Coverage analysis helps to guide the test engineers regarding test coverage and is used extensively to determine the effectiveness of selected testing methodology. The problems mentioned above related to manual GUI testing prompted the need for automation of GUI testing and coverage analysis. With the rapid emergence of GUI based context free applications, automated testing tools seems less effective. Recently, it has been learnt that concurrent and distributed machines based cluster can be used to reduce the required effort to test GUI in\u00a0\u2026", "num_citations": "4\n", "authors": ["1255"]}
{"title": "Validation of ontology based test case generation for graphical user interface\n", "abstract": " Testing is an important phase during the development cycle of software. Generating test cases is an important activity during this phase. TCG for GUI is a least focused area and the techniques which are being used in Command Line Interface do not fit here. One of the means to formally represent knowledge is through ontology. It represents domain information as a set of concepts and relationship among them. Ontology based GUI testing is a new branch of testing. To validate the framework for generating test case based on ontology an experiment has been conducted.", "num_citations": "4\n", "authors": ["1255"]}
{"title": "Coverage Analysis for GUI Testing\n", "abstract": " Software Testing is one of the most critical phases in development of software. The aim of software testing is to create quality software products to meet the expectations of an organization. Software testing is considered as an effort demanding activity and hence it is often neglected to some extent. Graphical user interface (GUI) is a major contributing factor behind the popularity of software applications in recent times. Realizing the importance of GUI\u201f s, a lot of research concentrating on GUI is being carried out. Moreover the importance of ensuring the correctness of GUI is of higher value. That\u201f s why; a software development organization must have to manage the additional testing for the GUI. GUIs make testing systems more difficult because they inherit characteristics like eventdriven nature, unsolicited events, and infinite input domain problems. The major benefit of a GUI is that it hides the complexity from the users and sometimes from programmers as wells.In the end testing such applications becomes a nightmare for test team. To reduce the effort required and shorten the duration of testing GUI, automated techniques and tools are being used now. A GUI model based on event-flow graph is an innovative technique being utilized in the field of automated GUI testing. The search for utmost quality assurance of software, through the introduction of automated software testing, raises yet another challenging question, what is the required \u201camount\u201d of testing to gain confidence in quality of software? Usually this criterion corresponds to a function known as \u201ccoverage\u201d that measures how much of the software is to be tested? Like procedural and\u00a0\u2026", "num_citations": "4\n", "authors": ["1255"]}
{"title": "Evaluation of UML-real time profiles for Industrial Control Systems\n", "abstract": " UML does not provide complete solution for real-time system especially for Industrial Control Systems (ICS). To overcome the UML limitation of expressions, number of designers of real-time systems from industry provides solution according to their environment. Stereotypes, Tagged values, and Constraints is lightweight way of extending UML. In this paper, UML profiles for real-time systems are evaluated on the basis of characteristics of Real-Time Industrial Control System (RT-ICS). After reviewing these UML Profiles, some shortcomings were identified and it was felt that a new UML profile is needed to overcome these short comings.", "num_citations": "4\n", "authors": ["1255"]}
{"title": "Architecture based ripple effect analysis: a software quality maintenance perspective\n", "abstract": " one of the major challenges for software developer is to fulfill the quality requirements of the software systems. This emphasis on, software quality has some serious implications in terms of customer satisfaction and system acceptance. On the other hand, software architecture as an artifact can be used to deal with software qualities such as maintainability, performance and reliability etc. With rapid expansion on software systems to cater to the need of automation, software intensive systems are becoming large and complex. This is enhancing our emphasis on system quality which ultimately gives rise to the need for software quality maintenance. This software quality maintenance is not without ripple effect cost. This paper is an attempt to analyse architecture based quality maintenance ripple effect and for this purpose, a process for architecture based quality maintenance ripple effect analysis is proposed. A\u00a0\u2026", "num_citations": "4\n", "authors": ["1255"]}
{"title": "Automated software testing: An insight into local industry\n", "abstract": " The objective of this study is to find out current position and betterment needs in the automated software testing. For this, an industrial survey of Pakistan IT market was conducted to identify the benefits, challenges and automated software testing tools that are being utilized. Through the results of the study, it is concluded that in local industry of Pakistan \u201cAutomated Software Testing (AST)\u201chas been introduced for the last few years and some gaps have been identified between literature and practices. There is need of further research in automated software testing as well as the challenges should be solved to make AST process more effective.", "num_citations": "3\n", "authors": ["1255"]}
{"title": "A novel approach for architecture based software maintenance prediction\n", "abstract": " In the recent years, the success or failure of any software development effort is judged by the degree of achievement of various software quality attributes associated with it. We can say that software quality is one of the most important issues in software engineering. It has some serious implications in terms of customer satisfaction and system acceptance. Due to its significance, it is also considered as one of the major challenges to be met by software developer since s/he is responsible for fulfilling the quality requirements of the software systems. One way to address this challenge is to adopt architecture based software development. Software architecture of an application has considerable effect on quality factors such as maintainability, performance, reliability and flexibility, etc. The experience has shown that using software architecture for quantification of certain quality factors can help organizations to plan resources accordingly. In this paper, we have presented a novel approach to predict software maintenance effort at architecture level. We have used requirements, domain knowledge and general software engineering knowledge as inputs in our proposed technique to prescribe application architecture. Once application architecture is prescribed, then weighted scenarios and certain factors (ie, system novelty, turnover and maintenance staff ability, documentation quality, testing quality, etc.) that affect software maintenance are applied to application architecture to quantify maintenance effort. We have presented the web content extraction application architecture case study to manifest the performance of our proposed approach.", "num_citations": "3\n", "authors": ["1255"]}
{"title": "Mathematical model based traffic violations identification\n", "abstract": " Traffic rules violations and accidents on road are major issues now-a-days. Identification of vehicles violating traffic rules and manual monitoring of vehicles is difficult, due to traffic congestion on freeways. A novel mathematical model is proposed to generalize detection of a number of traffic violations on highways. The model, using image processing techniques translates lanes on the road as equation of lines. A tracking algorithm generates a vehicle trace which is modelled as equations. A piecewise linearity is used for the modelling and ease of computation of traffic violation. The model then solves a number of equations for finding intersection of traces with the traffic lanes to identify the violations. This novel modelling approach can help machine based identification of a number of traffic violations and proposed system need not to be installed in vehicles and all along road for violation detection. To cover\u00a0\u2026", "num_citations": "2\n", "authors": ["1255"]}
{"title": "Data flow testing of UML state machine using ant colony algorithm (ACO)\n", "abstract": " Automatic data flow testing refers to analysis of flow of data within models by using data flow analysis rules. To ensure correct data flow within states we have to consider these data values. The data flow analysis (DFA) forms a source of testing data flow (DFT) by considering defines and uses of the variables. State-based testing examines state changes and its behavior without focusing on the internal details, thus data faults remain uncovered. Empirical studies have shown that existing statebased approaches are not efficient in detecting state based faults. In this paper, an approach is presented to enhance fault detection capability state based approaches. All definition-use paths are used as coverage criterion. We implemented this approach in a tool named data flow generator (DFG). Tool enhances fault detection capability of state based approaches by efficiently detects data flow errors and generates optimal number of feasible test cases are automatically to provide complete def-use paths coverage.", "num_citations": "2\n", "authors": ["1255"]}
{"title": "Agile Project Management: Brief Review\n", "abstract": " In this paper we review the importance of agile in project management and the differences between it and traditional methods where agile method is an alternative traditional method and features that made the agile superior to traditional methods. We will mention the most important factors of operations of agile software development. We also describe in this paper the most common challenges of agile faced by team and benefits that accrue to the project when using agile method. This paper focus different methodologies used agile and most popular and the most common used like Scrum, Feature Driven development, Extreme Programing and stage each method and most benefits each method. This paper includes comparison between Scrum and Extreme programing. Finally we review the most drawbacks of agile management.", "num_citations": "2\n", "authors": ["1255"]}
{"title": "Intelligent Web Application Systems Testing through Value Based Test Case Prioritization\n", "abstract": " Websites entail some exclusively novel challenges in this era of software quality focus. This sequence of fresh issues associated exclusively with website applications can be considered as an opportunity as well as a greater challenge to have a complete automated testing of websites. Despite the continuous research in the web application testing domain, further work is needed to quantitatively analyze the testing results especially with respect to obtaining the statistics such as the efficiency and coverage of the test cases, value of test suite with respect to coverage and efficiency and distribution of the fault reasons. Using artificial intelligence techniques, a complete framework has been proposed to address the above mentioned challenges. This research effort presents the preliminary results of this effort. The proposed framework would provide the facilities to cover analyze web based on the web modeling\u00a0\u2026", "num_citations": "2\n", "authors": ["1255"]}
{"title": "Software Project Management Models\n", "abstract": " Project management is a process tasks and activities are planned, organized, assigned resources and executed within a given budget and period. There are several software management models that are used in the process of managing a software project. Since there are many of the techniques and models, this articles selects and analyzes some of them. This is to help managers in making a decision which tool to use depending on their needs. Model in software project management means a standard practice that sometimes with guides and procedures on how to carry out activities. Models are sometimes diagrammed to illustrate procedures that project team members will use.", "num_citations": "2\n", "authors": ["1255"]}
{"title": "A lightweight framework for automated Model-to-Code transformation\n", "abstract": " Model Driven Engineering (MDE) focuses on the automatic generation of code from system models, referred to as the Model-to-Code (M2C) transformation. Currently, M2C transformation relies on the transformation rules, metamodels and transformation languages, making the transformation process complex and lengthy. In this paper, we propose a novel framework for M2C transformation utilizing the available set of transformation examples. The examples are expressed as predicates and are used to train the system regarding automatic code generation. After the training, a set of transformations are extracted from the available training data, which are eventually used to transform the input models into implementation code. The quality of the generated code is ensured by the correctness of the available transformation examples. This framework uses transformation examples to utilize the transformation knowledge\u00a0\u2026", "num_citations": "2\n", "authors": ["1255"]}
{"title": "Extending UML to model GUI: A new profile\n", "abstract": " Graphical user interfaces (GUIs) are fundamental part of software systems now days. This provides user with a facility to interact with the system. It is very important to clearly specify and precisely analyze GUI requirements before implementation of any system. Traditionally UML is considered as one of successful languages to model software requirements and specifications. But UML does not provide a considerable help for modeling GUI, hence a requirement is there to come through ideas where UML can be used for GUI analysis purpose as well. Many efforts have been put already in this direction, and this paper also makes such an attempt. Notations for commonly used GUI objects have been revised and interaction between different GUI objects has also been explained in this paper.", "num_citations": "2\n", "authors": ["1255"]}
{"title": "Keywords-based test categorization for Extra-Functional Properties\n", "abstract": " Categorizing existing test specifications can provide insights on coverage of the test suite to extra-functional properties. Manual approaches for test categorization can be time-consuming and prone to error. In this short paper, we propose a semi-automated approach for semantic keywords-based textual test categorization for extra-functional properties. The approach is the first step towards coverage-based test case selection based on extra-functional properties. We report a preliminary evaluation of industrial data for test categorization for safety aspects. Results show that keyword-based approaches can be used to categorize tests for extra-functional properties and can be improved by considering contextual information of keywords.", "num_citations": "1\n", "authors": ["1255"]}
{"title": "Evaluating the Optimized Mutation Analysis Approach in Context of Model-Based Testing\n", "abstract": " Data flow analysis rules help ensuring the correct flow of data and identifying the related state issues within the model-based testing practices. Though, studies have produced encouraging results for detecting data flow and states-oriented faults and enormous research work has been carried out in this direction, still optimal results from multiple criteria have not been achieved simultaneously. We are aiming to come up with a comprehensive approach that is able to (1): find the define-usage errors, (2): automatically generate the test data for UML state machines (3): mutate the states and flow with different level of complexity achieving efficient mutation score (4): provide the optimal def-use path complete coverage (5): applicable to all UML diagrams. This work in progress is a first step in this direction and we have validated our approach through an implementation which can run against state diagrams. Results have\u00a0\u2026", "num_citations": "1\n", "authors": ["1255"]}
{"title": "Real time fuzzy based traffic flow estimation and analysis\n", "abstract": " Real-time traffic flow analysis using road mounted surveillance cameras presents multitude of benefits. In this paper, we used surveillance videos to design optical flow based technique for robust motion analysis and estimation. Region growing method is employed for detection of objects of interest. Autonomous density estimation of vehicles is crucial for traffic congestion analysis so that countermeasures can be taken at the earliest possible opportunity. A video based data extraction scheme for traffic data is proposed to determine the right traffic conditions which alleviates the false alarms and detrimental noise effects. Evaluation of proposed system is done by applying approach on several surveillance videos obtained from different sources and scenarios. An experimental study illustrates estimation and analysis results accuracy as compared to state-of-the-art approaches.", "num_citations": "1\n", "authors": ["1255"]}
{"title": "Pso based test coverage analysis for event driven software\n", "abstract": " Graphical User Interface (GUI) includes graphical objects for certain functionalities and features that will determine the state of the GUI at any time. To ensure that software quality is par excellence, software development organizations have made a lot of efforts to test the software with care. However, the process of the examination of a GUI application requires, a huge effort, because of the complexity of these applications. As a result, these organizations have started to provide various automated testing techniques to achieve this goal. Flow graph of events (control flow graph) is an innovative technology being used in the automated GUI testing. The search for the ultimate guarantee for software quality through the introduction of automated software testing raises a more difficult question of \"quantity\" of tests necessary to ensure the best results. During automated software testing process, evolutionary algorithms can be\u00a0\u2026", "num_citations": "1\n", "authors": ["1255"]}
{"title": "Component specification framewor: Anoverview\n", "abstract": " Most of the software developers are adopting the CBSE approach, to guarantee; on time delivery of software products, reduce development and maintenance cost and to improve reusability. CBSE is the development of new software by integrating built-in components. A component is a unit of composition with a well defined interface and having self-existence property. Component specification is performed in order to remove ambiguity/contradiction among the components. In this paper we have designed a component specification framework to maintain consistency among components. Our proposed framework is based on certain factors i-e functional specification, applicability, standards, related components, sample use, software connector's specification, interface specification and behavior specification. With the help of this specification, we will be able to resolve component mismatch and compatibility problem\u00a0\u2026", "num_citations": "1\n", "authors": ["1255"]}