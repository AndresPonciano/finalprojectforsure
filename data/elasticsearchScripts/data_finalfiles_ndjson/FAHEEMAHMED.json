{"title": "Making sense of software development and personality types\n", "abstract": " It's common sense to state that the production of any software product involves a human element, at least to some extent. We all have different personality traits, and the way we perceive, plan, and execute any activity is influenced by these characteristics. Typically, software development is a product of teamwork, involving several people performing various tasks. The success and failure of software projects reveal the human factor as one of vital importance. Not everyone can excel at every task, thus better results are achieved if people with particular personality traits are assigned to different aspects of a project, especially the roles best suited to their ability. The authors mapped some opposing psychological traits, such as extroversion-introversion, sensing-intuition, thinking-feeling, and judging-perceiving, to the main stages of a software development life cycle. Consequently, they concluded that assigning a person\u00a0\u2026", "num_citations": "244\n", "authors": ["375"]}
{"title": "Evaluating the demand for soft skills in software development\n", "abstract": " An analysis of 500 advertisements for IT positions focuses on the soft skills mentioned in the ads, revealing which soft skills are in high demand for software development and which ones are neglected despite their importance. Our survey indicates that soft skills are in demand in the software industry, but only to a limited extent. This highlights the lack of understanding of the role that soft skills play in an employee's professional ability and performance.", "num_citations": "167\n", "authors": ["375"]}
{"title": "Why do we need personality diversity in software engineering?\n", "abstract": " Diversity of skills is good for society, it is also good in problem solving because different people see a problem from several pers-pectives, so diversity should be good for software engineering too. This study tackles a difficult to study aspect of software engineer-ing, that is, how to best associate personnel with the various tasks in a software project. The approach uses psychological types to determine who is best suited to particular development roles. The article has four main objectives: (1) to arouse awareness of human factors among software engineers; (2) to investigate how psycho-logical factors can contribute to their effectiveness at work; (3) to catalyze effort among software engineers leading towards a deeper understanding and broader applications of human factors in the light of the activities involving the engineering of software; and (4) to emphasize the important of skill diversity in the software engi\u00a0\u2026", "num_citations": "121\n", "authors": ["375"]}
{"title": "Game development software engineering process life cycle: a systematic review\n", "abstract": " Software game is a kind of application that is used not only for entertainment, but also for serious purposes that can be applicable to different domains such as education, business, and health care. Multidisciplinary nature of the game development processes that combine sound, art, control systems, artificial intelligence (AI), and human factors, makes the software game development practice different from traditional software development. However, the underline software engineering techniques help game development to achieve maintainability, flexibility, lower effort and cost, and better design. The purpose of this study is to assesses the state of the art research on the game development software engineering process and highlight areas that need further consideration by researchers. In the study, we used a systematic literature review methodology based on well-known digital libraries. The largest number of studies have been reported in the production phase of the game development software engineering process life cycle, followed by the pre-production phase. By contrast, the post-production phase has received much less research activity than the pre-production and production phases. The results of this study suggest that the game development software engineering process has many aspects that need further attention from researchers; that especially includes the postproduction phase.", "num_citations": "112\n", "authors": ["375"]}
{"title": "Soft skills and software development: A reflection from the software industry\n", "abstract": " We review the literature relating to soft skills and the software engineering and information systems domain before describing a study based on 650 job advertisements posted on well-known recruitment sites from a range of geographical locations including, North America, Europe, Asia and Australia. The study makes use of nine defined soft skills to assess the level of demand for each of these skills related to individual job roles within the software industry. This work reports some of the vital statistics from industry about the requirements of soft skills in various roles of software development phases. The work also highlights the variation in the types of skills required for each of the roles. We found that currently although the software industry is paying attention to soft skills up to some extent while hiring but there is a need to further acknowledge the role of these skills in software development. The objective of this paper is to analyze the software industry soft skills requirements for various software development positions, such as system analyst, designer, programmer, and tester. We pose two research questions, namely, (1) What soft skills are appropriate to different software development lifecycle roles, and (2) Up to what extend does the software industry consider soft skills when hiring an employee. The study suggests that there is a further need of acknowledgment of the significance of soft skills from employers in software industry.", "num_citations": "109\n", "authors": ["375"]}
{"title": "A three-dimensional view of software ecosystems\n", "abstract": " The concept of a Software ecosystem is gaining in popularity amongst large organizations and inherently relies on the adoption of common architectural development for multiple product development. The adoption of these approaches represents a significant shift in traditional software development style and process methodology. Currently several organizations are in practice with this new process model which embraces business, third party involvement and open architecture as its central pillars and these institutions have thrived as a result. The advent of software ecosystems have caused major players in the software industry to rethink their operating practices and engage with third parties, opening their platforms to external entities to attain business objectives. In this paper we present a three dimensional view of the software ecosystem model examine the role played by each of the three central pillars\u00a0\u2026", "num_citations": "93\n", "authors": ["375"]}
{"title": "An open source usability maturity model (OS-UMM)\n", "abstract": " User satisfaction has always been a major factor in the success of software, regardless of whether it is closed proprietary or open source software (OSS). In open source projects, usability aspects cannot be improved unless there are ways to test and measure them. Hence, the increasing popularity of open source projects among novice and non-technical users necessitates a usability evaluation methodology. Consequently, this paper presents a usability maturity model specifically aimed at usability-related issues for open source projects. In particular, the model examines the degree of coordination between open source projects and their usability aspects. The measuring instrument of the model contains factors that have been selected from four of our empirical studies, which examine the perspectives of OSS users, developers, contributors and the industry. In addition to presenting the usability maturity model, this\u00a0\u2026", "num_citations": "76\n", "authors": ["375"]}
{"title": "A new calibration for Function Point complexity weights\n", "abstract": " Function Point (FP) is a useful software metric that was first proposed 25 years ago, since then, it has steadily evolved into a functional size metric consolidated in the well-accepted Standardized International Function Point Users Group (IFPUG) Counting Practices Manual \u2013 version 4.2. While software development industry has grown rapidly, the weight values assigned to count standard FP still remain same, which raise critical questions about the validity of the weight values. In this paper, we discuss the concepts of calibrating Function Point, whose aims are to estimate a more accurate software size that fits for specific software application, to reflect software industry trend, and to improve the cost estimation of software projects. A FP calibration model called Neuro-Fuzzy Function Point Calibration Model (NFFPCM) that integrates the learning ability from neural network and the ability to capture human knowledge\u00a0\u2026", "num_citations": "68\n", "authors": ["375"]}
{"title": "Soft skills requirements in software development jobs: A cross\u2010cultural empirical study\n", "abstract": " Purpose \u2013 Most of the studies carried out on human factor in software development concentrate primarily on personality traits. However, soft skills which largely help in determining personality traits have been given comparatively little attention by researchers. The purpose of this paper is to find out whether employers' soft skills requirements, as advertised in job postings, within different roles of software development, are similar across different cultures.Design/methodology/approach \u2013 The authors review the literature relating to soft skills before describing a study based on 500 job advertisements posted on well\u2010known recruitment sites from a range of geographical locations, including North America, Europe, Asia and Australia. The study makes use of nine defined soft skills to assess the level of demand for each of these skills related to individual job roles within the software industry.Findings \u2013 It was found that in\u00a0\u2026", "num_citations": "58\n", "authors": ["375"]}
{"title": "Benchmarking machine learning technologies for software defect detection\n", "abstract": " Machine Learning approaches are good in solving problems that have less information. In most cases, the software domain problems characterize as a process of learning that depend on the various circumstances and changes accordingly. A predictive model is constructed by using machine learning approaches and classified them into defective and non-defective modules. Machine learning techniques help developers to retrieve useful information after the classification and enable them to analyse data from different perspectives. Machine learning techniques are proven to be useful in terms of software bug prediction. This study used public available data sets of software modules and provides comparative performance analysis of different machine learning techniques for software bug prediction. Results showed most of the machine learning methods performed well on software bug datasets.", "num_citations": "55\n", "authors": ["375"]}
{"title": "An organizational maturity model of software product line engineering\n", "abstract": " Software product line engineering is an inter-disciplinary concept. It spans the dimensions of business, architecture, process, and the organization. Some of the potential benefits of this approach include cost reduction, improvements in product quality and a decrease in product development time. The increasing popularity of software product line engineering in the software industry necessitates a process maturity evaluation methodology. Accordingly, this paper presents an organizational maturity model of software product line engineering for evaluating the maturity of organizational dimension. The model assumes that organizational theories, behavior, and management play a critical role in the institutionalization of software product line engineering within an organization. Assessment questionnaires and a rating methodology comprise the framework of this model. The objective and design of the\u00a0\u2026", "num_citations": "50\n", "authors": ["375"]}
{"title": "Critical success factors to improve the game development process from a developer\u2019s perspective\n", "abstract": " The growth of the software game development industry is enormous and is gaining importance day by day. This growth imposes severe pressure and a number of issues and challenges on the game development community. Game development is a complex process, and one important game development choice is to consider the developer\u2019s perspective to produce good-quality software games by improving the game development process. The objective of this study is to provide a better understanding of the developer\u2019s dimension as a factor in software game success. It focuses mainly on an empirical investigation of the effect of key developer\u2019s factors on the software game development process and eventually on the quality of the resulting game. A quantitative survey was developed and conducted to identify key developer\u2019s factors for an enhanced game development process. For this study, the\u00a0\u2026", "num_citations": "48\n", "authors": ["375"]}
{"title": "Users\u2019 perception of open source usability: an empirical study\n", "abstract": " The number of open source software (OSS) users has increased in recent years. No longer are they limited to technically adept software developers. Many believe that the OSS market share could increase tremendously provided OSS had systems that were easier to use. Although examples of good usable open source software exist, it is agreed that OSS can be made more usable. This study presents an empirical investigation into the impact of some key factors on OSS usability from the end users\u2019 point of view. The research model studies and establishes the relationship between the key usability factors from the users\u2019 perspective and OSS usability. A data set of 102 OSS users from 13 open source projects of various sizes was used to study the research model. The results of this study provide empirical evidence by indicating that the highlighted key factors play a significant role in improving OSS usability.", "num_citations": "48\n", "authors": ["375"]}
{"title": "Managing the business of software product line: An empirical investigation of key business factors\n", "abstract": " Business has been highlighted as a one of the critical dimensions of software product line engineering. This paper\u2019s main contribution is to increase the understanding of the influence of key business factors by showing empirically that they play an imperative role in managing a successful software product line. A quantitative survey of software organizations currently involved in the business of developing software product lines over a wide range of operations, including consumer electronics, telecommunications, avionics, and information technology, was designed to test the conceptual model and hypotheses of the study. This is the first study to demonstrate the relationships between the key business factors and software product lines. The results provide evidence that organizations in the business of software product line development have to cope with multiple key business factors to improve the overall\u00a0\u2026", "num_citations": "47\n", "authors": ["375"]}
{"title": "The software product line architecture: An empirical investigation of key process activities\n", "abstract": " Software architecture has been a key area of concern in software industry due to its profound impact on the productivity and quality of software products. This is even more crucial in case of software product line, because it deals with the development of a line of products sharing common architecture and having controlled variability. The main contributions of this paper is to increase the understanding of the influence of key software product line architecture process activities on the overall performance of software product line by conducting a comprehensive empirical investigation covering a broad range of organizations currently involved in the business of software product lines. This is the first study to empirically investigate and demonstrate the relationships between some of the software product line architecture process activities and the overall software product line performance of an organization at the best of our\u00a0\u2026", "num_citations": "46\n", "authors": ["375"]}
{"title": "Software Requirements Engineer: An Empirical Study about Non-Technical Skills.\n", "abstract": " Over a period of time software industry has seen a steady growth and the main reason for this growth is increase in the supply and demand of software. In software industry people are hired from different parts of the world having technical and non-technical skills. However, nontechnical skills which are equally given importance while hiring a new employee are relatively given little attention by researchers from software engineering community. The main objective of this work is twofold; firstly we provide comprehensive empirical evidence about up to what extent software industry is considering different non-technical skills while hiring a new employee as software requirements engineer. Secondly, we also target to find out whether employers\u2019 non-technical skills requirements, as advertised in job postings, in case of software requirements engineering profession are similar across different cultures. We used a dataset of 250 jobs descriptions from four different regions of the world in this study. The broader conclusion of this study shows that there is an explicit requirement of having communication skills in a software requirements engineer. While some other non-technical skills such as analytical and problem solving, interpersonal skills, ability to work independently, and team player have also been given some moderate consideration. Whereas, organizational skills, open and adaptable to changes, innovative, and fast learner skills are given least priority. On the regional side although Australian, Asian and European cultures exhibits more similarity than North American culture on the choice of non-technical skills requirements in hiring new employee\u00a0\u2026", "num_citations": "43\n", "authors": ["375"]}
{"title": "Institutionalization of software product line: An empirical investigation of key organizational factors\n", "abstract": " A good fit between the person and the organization is essential in a better organizational performance. This is even more crucial in case of institutionalization of a software product line practice within an organization. Employees\u2019 participation, organizational behavior and management contemplation play a vital role in successfully institutionalizing software product lines in a company. Organizational dimension has been weighted as one of the critical dimensions in software product line theory and practice. A comprehensive empirical investigation to study the impact of some organizational factors on the performance of software product line practice is presented in this work. This is the first study to empirically investigate and demonstrate the relationships between some of the key organizational factors and software product line performance of an organization. The results of this investigation provide empirical evidence\u00a0\u2026", "num_citations": "43\n", "authors": ["375"]}
{"title": "Empirical investigation of key business factors for digital game performance\n", "abstract": " Game development is an interdisciplinary concept that embraces software engineering, business, management, and artistic disciplines. This research facilitates a better understanding of the business dimension of digital games. The main objective of this research is to investigate empirically the effect of business factors on the performance of digital games in the market and to answer the research questions asked in this study. Game development organizations are facing high pressure and competition in the digital game industry. Business has become a crucial dimension, especially for game development organizations. The main contribution of this paper is to investigate empirically the influence of key business factors on the business performance of games. This is the first study in the domain of game development that demonstrates the interrelationship between key business factors and game performance in the\u00a0\u2026", "num_citations": "38\n", "authors": ["375"]}
{"title": "A business maturity model of software product line engineering\n", "abstract": " In the recent past, software product line engineering has become one of the most promising practices in software industry with the potential to substantially increase the software development productivity. Software product line engineering approach spans the dimensions of business, architecture, software engineering process and organization. The increasing popularity of software product line engineering in the software industry necessitates a process maturity evaluation methodology. Accordingly, this paper presents a business maturity model of software product line, which is a methodology to evaluate the current maturity of the business dimension of a software product line in an organization. This model examines the coordination between product line engineering and the business aspects of software product line. It evaluates the maturity of the business dimension of software product line as a function of\u00a0\u2026", "num_citations": "37\n", "authors": ["375"]}
{"title": "Integrating function point project information for improving the accuracy of effort estimation\n", "abstract": " Software organizations are putting efforts to improve the accuracy of the project cost estimation. This in turn helps them to allocate resources. Software cost estimation has been an area of key interest in software engineering community. Many estimation models divided among various categories have been proposed over a period of time. Function Point (FP) is one of the useful software cost estimation methodology that was first proposed twenty-five years ago using the project repository that contained information about various aspects of software project. In the last twenty five years software development productivity has grown rapidly but the complexity weight metrics values assigned to count standard FP still remain same. This fact raises critical questions about the validity of the complexity weight values and accuracy of the estimation process. The objective of this work is to present a genetic algorithm based\u00a0\u2026", "num_citations": "32\n", "authors": ["375"]}
{"title": "Dependable wireless sensor networks for reliable and secure humanitarian relief applications\n", "abstract": " Disasters such as flooding, earthquake, famine and terrorist attacks might occur any time anywhere without prior warnings. In most cases it is difficult to predict when a disaster might occur however, well-planned disaster recovery procedures will reduce the intensity of expected consequences. When a disaster occurs, infrastructure based communications are most likely to be crippled, worsening the critical situation on hand. Wireless ad hoc and sensor network (WASN) technologies are proven to be valuable in coordinating and managing rescue operations during disasters. However, the increasing reliance on WASNs make them attractive to malicious attackers, especially terrorist groups, in a bid to hamper rescue operations amplifying the damage and increasing the number of casualties. Therefore, it is necessary to ensure the fidelity of data traffic through WASN against malicious traffic disruption attacks. In this\u00a0\u2026", "num_citations": "30\n", "authors": ["375"]}
{"title": "An assessment of mobile os-centric ecosystems\n", "abstract": " The evolution of software ecosystems is the result of the popularity and adoption of common architectural development for multiple product development and represents a significant shift in traditional software development style and process methodology. Currently several organizations are in practice with this new process model that embraces business as one of its central factors and have thrived as a result. There can be no doubt that the development of software ecosystems have caused major players in the software industry to rethink their operating practices and engage with third parties, opening their platforms to external entities to attain business objectives. In this paper we examine four of the organizations that are at the forefront of software ecosystem adoption, specifically for mobile devices and explore their business development models. This investigation explores and compares their business process models in terms of how they engage with the external players in order to develop and distribute software and services in this changing marketplace. The study found some commonalities as well as some salient differences in their business processes and presents an assessment of the health of each mobile OS-centric ecosystem. We conclude that this study will help in further aiding understanding of the business process role in this area of ecosystem software.", "num_citations": "30\n", "authors": ["375"]}
{"title": "An architecture process maturity model of software product line engineering\n", "abstract": " Software architecture has been a key research area in the software engineering community due to its significant role in creating high-quality software. The trend of developing product lines rather than single products has made the software product line a viable option in the industry. Software product line architecture (SPLA) is regarded as one of the crucial components in the product lines, since all of the resulting products share this common architecture. The increased popularity of software product lines demands a process maturity evaluation methodology. Consequently, this paper presents an architecture process maturity model for software product line engineering to evaluate the current maturity of the product line architecture development process in an organization. Assessment questionnaires and a rating methodology comprise the framework of this model. The objective of the questionnaires is to\u00a0\u2026", "num_citations": "29\n", "authors": ["375"]}
{"title": "An empirical study of open source software usability: the industrial perspective\n", "abstract": " Recent years have seen a sharp increase in the use of open source projects by common novice users; Open Source Software (OSS) is thus no longer a reserved arena for software developers and computer gurus. Although user-centered designs are gaining popularity in OSS, usability is still not considered one of the prime objectives in many design scenarios. This paper analyzes industry users\u2019 perception of usability factors, including understandability, learnability, operability, and attractiveness on OSS usability. The research model of this empirical study establishes the relationship between the key usability factors and OSS usability from industrial perspective. In order to conduct the study, a data set of 105 industry users is included. The results of the empirical investigation indicate the significance of the key factors for OSS usability.", "num_citations": "29\n", "authors": ["375"]}
{"title": "Learning & personality types: A case study of a software design course\n", "abstract": " The software industry has continued to grow over the past decade and there is now a need to provide education and hands-on training to students in various phases of software life cycle. Software design is one of the vital phases of the software development cycle. Psychological theories assert that not everybody is fit for all kind of tasks as people have different personality traits and abilities. The learning pattern of students is influenced by the personality types, with individuals having different personality types their learning pattern varies. The personality type of an individual generates a great deal of impact on the performance of various activities that humans can carry out. The behavior of individuals with a particular type of personality reflects the way these people perceive the world and make decisions. This personality type classification covers many aspects of human behavior, such as attitude, action and reaction\u00a0\u2026", "num_citations": "28\n", "authors": ["375"]}
{"title": "A call to promote soft skills in software engineering\n", "abstract": " We have been thinking about other aspects of software engineering for many years; the missing link in engineering software is the soft skills set, essential in the software development process. Although soft skills are among the most important aspects in the creation of software, they are often overlooked by educators and practitioners. One of the main reasons for the oversight is that soft skills are usually related to social and personality factors, i.e., teamwork, motivation, commitment, leadership, multi-culturalism, emotions, interpersonal skills, etc. This editorial is a manifesto declaring the importance of soft skills in software engineering with the intention to draw professionals attention to these topics. We have approached this issue by mentioning what we know about the field, what we believe to be evident, and which topics need further investigation. Important references to back up our claims are also included. Software engineers take pride in the depth of their technical expertise, which separates them from the crowd. But, what makes a good software engineer? First, it is the technical knowledge of relevant methodologies and techniques (i.e. hard skills), as well as the skills necessary for applying that knowledge in practice. Second, but nonetheless important, it is a set of soft skills, in particular collaboration, communication, problem-solving and similar interpersonal and critical thinking skills that are expected from software engineering professionals. In other words, software engineers need both hard and soft skills in order to be successful at the workplace.", "num_citations": "27\n", "authors": ["375"]}
{"title": "Fuzzy inference system for software product family process evaluation\n", "abstract": " When developing multiple products within a common application domain, systematic use of a software product family process can yield increased productivity in cost, quality, effort and schedule. Such a process provides the means for the reuse of software assets which can considerably reduce the development time and the cost of software products. A comprehensive strategy for the evaluating the maturity of a software product family process is needed due to growing popularity of this concept in the software industry. In this paper, we propose a five-level maturity scale for software product family process. We also present a fuzzy inference system for evaluating maturity of software product family process using the proposed maturity scale. This research is aimed at establishing a comprehensive and unified strategy for process evaluation of a software product family. Such a process evaluation strategy will enable an\u00a0\u2026", "num_citations": "27\n", "authors": ["375"]}
{"title": "Analysis of risks faced by information technology offshore outsourcing service providers\n", "abstract": " To gain competitive advantage, organisations are considering information technology (IT) outsourcing as a strategic option by concentrating on their core operations and by reducing their operating costs. Many organisations are offering outsourcing services from various parts of the world. There are certain risks factors which IT outsourcing service providers come across while managing their service operations. Risk-related data from 50 Indian IT outsourcing service providers about their risks and concerns have been collected and archived. This study identifies risks from the providers' perspective in regard to offshore outsourcing and put forward some guidelines to mitigate such risks.", "num_citations": "22\n", "authors": ["375"]}
{"title": "Improvement of Open Source Software Usability: An Empirical Evaluation from Developers' Perspective\n", "abstract": " User satisfaction has always been important for software success whether it is Open Source Software (OSS) or closed proprietary software. Even though we do not presume that OSS always has poor usability, as there are examples of good usable open source software, it would still be agreed that OSS usability has room for further improvement. This paper presents an empirical investigation to study the impact of some key factors on OSS usability from developers' points of view. This is one of the series of four studies that we are conducting regarding improvement of OSS usability from OSS developers, users, contributors, and industry perspectives. The research model of this empirical investigation studies and establishes the relationship between the key usability factors from developers' perspective and OSS usability. A data set of 106 OSS developers from 18 open source projects of varied size has been used to study the research model. The results of this study provide empirical evidence that the studied key factors play a significant role in improving OSS usability.", "num_citations": "22\n", "authors": ["375"]}
{"title": "A digital game maturity model (DGMM)\n", "abstract": " Game development is an interdisciplinary concept that embraces artistic, software engineering, management, and business disciplines. This research facilitates a better understanding of important dimensions of digital game development methodology. Game development is considered as one of the most complex tasks in software engineering. The increased popularity of digital games, the challenges faced by game development organizations in developing quality games, and high competition in the digital game industry demand a game development maturity assessment. Consequently, this study presents a Digital Game Maturity Model to evaluate the current development methodology in an organization. The framework of this model consists of assessment questionnaires, a performance scale, and a rating method. The main goal of the questionnaires is to collect information about current processes and practices\u00a0\u2026", "num_citations": "21\n", "authors": ["375"]}
{"title": "Best practices of RUP\u00ae in software product line development\n", "abstract": " Software industry has always been tried to figure out the best practices of software development in order to increase the success rate of software projects. Rational Unified Process presents and incorporates the six best practices of software industry to achieve the goals of high quality, reliable, cost effective and within schedule software projects. We present the concept of managing RUP reg  best practices in the development of software product lines. This concept further strengthens the core activities present in the process of software product line development. We implemented this approach in developing an E-Commerce Software Product Line presented as case study in this paper.", "num_citations": "20\n", "authors": ["375"]}
{"title": "Soft sides of software\n", "abstract": " Software is a field of rapid changes: the best technology today becomes obsolete in the near future. If we review the graduate attributes of any of the software engineering programs across the world, life-long learning is one of them. The social and psychological aspects of professional development is linked with rewards. In organizations, where people are provided with learning opportunities and there is a culture that rewards learning, people embrace changes easily. However, the software industry tends to be short-sighted and its primary focus is more on current project success; it usually ignores the capacity building of the individual or team. It is hoped that our software engineering colleagues will be motivated to conduct more research into the area of software psychology so as to understand more completely the possibilities for increased effectiveness and personal fulfillment among software engineers working alone and in teams.", "num_citations": "18\n", "authors": ["375"]}
{"title": "Wear particle shape and edge detail analysis\n", "abstract": " Microscopic size wear debris transported through oil-lubricated systems provides important information about the condition of machinery, in particular the state of wear. Experts extract this information to monitor the operation of the machine to ensure safety, efficiency and economy of operation. This paper describes the analysis of microscopic particles generated by wear mechanisms by using computer vision and image processing techniques. The aim of the work is to develop an automated system to classify wear particles and thereby predict wear failure modes in machines. An interactive image analysis system is devised, which is used to process and store the quantitative information of particle shape and edge details. Further analysis on the stored data is also described which permits systematic morphological analysis of the wear particles.", "num_citations": "17\n", "authors": ["375"]}
{"title": "What Soft Skills Software Architect Should Have? A Reflection from Software Industry\n", "abstract": " The job of software architect is considered very crucial in the life cycle of the software development because software architecture has a pivotal role in the success and failure of the software project in terms of cost and quality. People have different personality traits, and the way they perceive, plan and execute any assigned task is influenced by it. These personality traits are characterized by soft skills. Most of the time, software development is a team work involving several people executing different tasks. The success and failure stories of software projects revealed the human factor as one of the critical importance. In this work we are presenting an exploratory study about the soft skills requirements for a software architects job. We analyzed 124 advertised jobs in the title of software architect and explore the soft skills requirements. The results of this investigation help in understanding software skills requirement set for a job of software architect and presents the current status of their use in job advertisements.", "num_citations": "14\n", "authors": ["375"]}
{"title": "A decision support tool for assessing the maturity of software product line process\n", "abstract": " The software product line aims at the effective utilization of software assets, reducing the time required to deliver a product, improving the quality, and decreasing the cost of software products. Organizations trying to incorporate this concept require an approach to assess the current maturity level of the software product line process in order to make management decisions. A decision support tool for assessing the maturity of the software product line process is developed to implement the fuzzy logic approach, which handles the imprecise and uncertain nature of software process variables. The proposed tool can be used to assess the process maturity level of a software product line. Such knowledge will enable an organization to make crucial management decisions. Four case studies were conducted to validate the tool, and the results of the studies show that the software product line decision support tool provides a direct mechanism to evaluate the current software product line process maturity level within an organization.", "num_citations": "13\n", "authors": ["375"]}
{"title": "Business process mining approaches: a relative comparison\n", "abstract": " Recently, information systems like ERP, CRM and WFM record different business events or activities in a log named as event log. Process mining aims at extracting information from event logs to capture business process as it is being executed. Process mining is an important learning task based on captured processes. In order to be competent organizations in the business world; they have to adjust their business process along with the changing environment. Sometimes a change in the business process implies a change into the whole system. Process mining allows for the automated discovery of process models from event logs. Process mining techniques has the ability to support automatically business process (re)design. Typically, these techniques discover a concrete workflow model and all possible processes registered in a given events log. In this paper, detailed comparison among process mining methods used in the business process mining and differences in their approaches have been provided.", "num_citations": "12\n", "authors": ["375"]}
{"title": "A framework for process assessment of software product line\n", "abstract": " Software product line has emerged as an attractive phenomenon within organizations dealing with software development process. It involves assembly of products from existing core assets, commonly known as components, and continuous growth in the core assets as production proceeds. Organizations trying to incorporate the concept of software product line to reduce development time and cost require certain rules to be followed for successful development and management, they also require a direct procedure to evaluate the current maturity level of the process. In this work certain rules for developing and managing a software product line are put forward. Additionally, a fuzzy logic based software product line process assessment tool (SPLPAT) has been designed and implemented on the basis of developed rules for software product line process assessment. SPLPAT can be used to assess the process maturity level of software product line, and it provides an opportunity to handle imprecision and uncertainty present in software process variables. Four case studies were conducted to validate the framework, and results show that SPLPAT provides a direct mechanism to evaluate current software product line process maturity level within an organization. The results of the developed software product line process assessment approach were compared with the existing CMM-level of the organization in order to evaluate the reliability of the presented approach and to find out how effectively an organization can execute software product line process when it has already achieved a certain CMM level.", "num_citations": "11\n", "authors": ["375"]}
{"title": "Comparative performance analysis of machine learning techniques for software bug detection\n", "abstract": " Machine learning techniques can be used to analyse data from different perspectives and enable developers to retrieve useful information. Machine learning techniques are proven to be useful in terms of software bug prediction. In this paper, a comparative performance analysis of different machine learning techniques is explored for software bug prediction on public available data sets. Results showed most of the machine learning methods performed well on software bug datasets.", "num_citations": "11\n", "authors": ["375"]}
{"title": "Maintenance support in open source software projects\n", "abstract": " Easy and mostly free access to the Internet has resulted in the growing use of open source software (OSS). However, it is a common perception that closed proprietary software is still superior in areas such as software maintenance and management. The research model of this study establishes a relationship between maintenance issues (such as user requests and error handling) and support provided by open source software through project forums, mailing lists and trackers. To conduct this research, we have used a dataset consisting of 120 open source software projects, covering a wide range of categories. The results of the study show that project forums and mailing lists play a significant role in addressing user requests in open source software. However according to the empirical investigation, it has been explored that trackers are used as an effective medium for error reporting as well as user requests.", "num_citations": "11\n", "authors": ["375"]}
{"title": "Incorporating green it concepts in undergraduate software requirements engineering course: An experience report\n", "abstract": " Our planet is facing serious environmental issues due to constant increase in energy consumption, and waste from industry. During the past two decades, the use of information technology (IT) has tremendously increased, causing an increase in IT-related power consumption and resulting in higher carbon emission. On the other hand, the concept of Green IT is gaining momentum in our society after the realization that reducing emission can increase the age of our planet and help in improving the health of its inhabitants. Many organizations are considering this phenomenon a serious issue while planning and managing IT infrastructure. In an undergraduate course of software requirements engineering (SRE) the main objective is to teach students the ability to define the characteristics, properties, or qualities that the software product must possess. The main purpose of this work is to incorporate the concept of\u00a0\u2026", "num_citations": "11\n", "authors": ["375"]}
{"title": "Hybrid OCR techniques for cursive script languages-a review and applications\n", "abstract": " Software-based Arabic optical character recognition (OCR) has been used quite successfully for many years. However, the hardware-based implementations of the OCR - which can be 10-100 times faster than the software-only method - seem to not have been fully exploited. This paper briefly reviews the research material addressing software based OCR but focuses more on the hardware realization of Arabic OCR. The software-only OCR methods have achieved reasonable maturity but require use of PCs (or similar platforms), which is an obvious hindrance for OCR implementations in small form factor, such as pens or mobile devices. Different researchers have addressed individual, sub-tasks of Arabic (non-Latin) OCR, but not as complete, functional systems. The recognition accuracies also have significant room of improvement. The main challenge for practically functioning OCR systems in smaller sizes is the\u00a0\u2026", "num_citations": "11\n", "authors": ["375"]}
{"title": "Wear particle profile analysis\n", "abstract": " Microscopic size wear debris transported through oil-lubricated systems provides important information about the condition of machinery, in particular the state of wear. Experts extract this information to monitor the operation of the machine to ensure safety, efficiency and economy of operation. The paper describes the analysis of microscopic wear particles by using computer vision and image processing techniques. The aim of the work is to develop an automated system to classify wear particles and thereby predict wear failure modes in machines. An interactive image analysis system WPIAS is devised which is used to process and store the quantitative information of particle profile (size, quantity, shape and edge details) analysis. Further analysis on the stored data is also described which permits systematic morphological analysis of the wear particles.", "num_citations": "11\n", "authors": ["375"]}
{"title": "Usability bugs in open-source software and online forums\n", "abstract": " The unlimited number of open-source software (OSS) users and the importance of end users' experience in determining software quality make usability an even more critical quality attribute for OSS than it is for proprietary software. The research model of this study establishes the relationship between usability errors in OSS and online public forums. The results of this empirical analysis provide evidence about active management of usability-related issues in OSS. To conduct this research, the authors used a dataset consisting of 1753 OSS projects, covering a broad range of categories. The results of the study show that online forums play a significant role in identifying and fixing usability bugs in OSS.", "num_citations": "10\n", "authors": ["375"]}
{"title": "Maturity assessment framework for business dimension of software product family\n", "abstract": " The software product family approach aims at curtailing the concept of \u201creinventing the wheel\u201d in the software development process. The business has been highlighted as one of the critical dimensions in the process of software product family. This work presents an assessment framework for evaluating the business dimension of software product family process. Additionally, a software product family business evaluation tool has been designed and implemented on the basis of the presented framework. The tool preprocesses the data of key business factors, and it evaluates the overall business maturity of an organization. To demonstrate the application of the framework, and to determine the current software product family business performance, we conducted a case study of an organization actively involved in the business of software product family. The framework and the tool provide direct mechanisms to evaluate the current maturity level of software product family business of an organization. This research is a contribution towards establishing a comprehensive and unified strategy for a process evaluation of the software product family.", "num_citations": "10\n", "authors": ["375"]}
{"title": "Security issues in data warehouse\n", "abstract": " Data Warehouse provides storage for huge amounts of historical data from heterogeneous operational sources in the form of multidimensional views, thus supplying sensitive and useful information which help decision-makers to improve the organizations business processes. A data warehouse environment must ensure that data collected and stored in one big repository are not vulnerable. A review of security approaches specifically for data warehouse environment and issues concerning each type of security approach have been provided in this paper.", "num_citations": "9\n", "authors": ["375"]}
{"title": "Cognitive factors in software product line engineering\n", "abstract": " Software development organizations are trying to incorporate the concept of software product line to reduce development time and cost. The process of software product line initiation and institutionalization within an organization requires strong relationship of both technical and organizational requirements. In this paper we have identified various cognitive factors that are involved in various activities of software product line. The cognitive factors involved are divided into three categories of software product line. The identification and analysis of the cognitive factors involved in software product line will enable an organization to understand the product line process and helps them to formulate a strategy for the successful implementation of the concept.", "num_citations": "9\n", "authors": ["375"]}
{"title": "Empirical investigation of key factors for SaaS architecture dimension\n", "abstract": " Software-as-a-Service (SaaS) has received significant attention from software providers and users as a software delivery model. Most of the existing companies are transferring their business into a SaaS model. This intensely competitive environment has imposed many challenges for SaaS developers and vendors. SaaS development is a very complex process and SaaS success depends on its architecture design and development. This paper provides a better understanding of SaaS applications architecture phase during the SaaS development process. It focuses mainly on an empirical investigation of key factors of SaaS Architecture phase identified from the systematic literature review. A quantitative survey was developed and conducted to identify key architecture factors for an improved and successful SaaS application. A developed survey was used to test the proposed hypothesis presented in this study\u00a0\u2026", "num_citations": "8\n", "authors": ["375"]}
{"title": "Myths and realities about online forums in open source software development: an empirical study\n", "abstract": " The use of free and open source software (OSS) is gaining momentum due to the ever increasing availability and use of the Internet. Organizations are also now adopting open source software, despite some reservations, in particular regarding the provision and availability of support. Some of the biggest concerns about free and open source software are post release software defects and their rectification, management of dynamic requirements and support to the users. A common belief is that there is no appropriate support available for this class of software. A contradictory argument is that due to the active involvement of Internet users in online forums, there is in fact a large resource available that communicates and manages the provision of support. The research model of this empirical investigation examines the evidence available to assess whether this commonly held belief is based on facts given the current developments in OSS or simply a myth, which has developed around OSS development. We analyzed a dataset consisting of 1880 open source software projects covering a broad range of categories in this investigation. The results show that online forums play a significant role in managing software defects, implementation of new requirements and providing support to the users in open source software and have become a major source of assistance in maintenance of the open source projects.", "num_citations": "8\n", "authors": ["375"]}
{"title": "COTS\u2010based software product line development\n", "abstract": " Purpose \u2013 The purpose of this paper is to provide an overview of a pragmatic approach to components off\u2010the\u2010shelf (COTS)\u2010based development. Software product line (SPL) is at the forefront among the techniques for reducing costs, decreasing schedule time, and ensuring commonality of features across a family of products \u2013 as COTS are reused in multiple products.Design/methodology/approach \u2013 A disciplined process for SPL development is still needed. This paper proposes the Y\u2010model for COTS\u2010based SPL development. The model put forward identifies and elaborates the essential phases and activities of SPL development from COTS\u2010based repository.Findings \u2013 The Y\u2010model provides an efficient way of integrating the approaches of SPL and COTS\u2010based development as a cohesive software development model.Practical implications \u2013 The model has the potential to tremendously increase software\u00a0\u2026", "num_citations": "8\n", "authors": ["375"]}
{"title": "A consumer perspective on digital games: Factors for successful game development\n", "abstract": " Contemporary digital game development companies offer a variety of games for diverse consumer tastes. One important game-development factor is considering the consumer perspective. Game development is a complex task, and measuring the consumer experience of games poses an additional challenge. For the successful development of high-quality digital games, the developer must consider and explore all related dimensions as well as discuss aspects with the stakeholders involved. The main contribution of this article is to investigate key consumer factors for digital games that have been reported in studies from the literature.", "num_citations": "7\n", "authors": ["375"]}
{"title": "Green computing and Software Defects in open source software: An Empirical study\n", "abstract": " Overtime open source software (OSS) is receiving attention from industry. The growth rate is unprecedented. The software industry is inclining towards adopting OSS despite concerns about the quality. Defect management has been a key issue in OSS. Software whether it is close or open source uses energy. Green computing argued that environmental conditions are getting worst and use of power consumptions should be minimized to protect the earth. A lot of work has been reported in the area of green hardware but very little work has been reported in making software green. The main objective this work is to increase understanding of green software development. In this study, we empirically investigate that whether there is relationship between defect management in OSS and power consumption of OSS application. We used a dataset consist of 82 OSS projects to study the research model of this investigation\u00a0\u2026", "num_citations": "7\n", "authors": ["375"]}
{"title": "Managing support requests in open source software project: The role of online forums\n", "abstract": " The use of free and open source software is gaining momentum due to the ever increasing availability and use of the Internet. Organizations are also now adopting open source software, despite some reservations in particular regarding the provision and availability of support. One of the greatest concerns about free and open source software is the availability of post release support and the handling of for support. A common belief is that there is no appropriate support available for this class of software, while an alternative argument is that due to the active involvement of Internet users in online forums, there is in fact a large resource available that communicates and manages the management of support requests. The research model of this empirical investigation establishes and studies the relationship between open source software support requests and online public forums. The results of this empirical study\u00a0\u2026", "num_citations": "7\n", "authors": ["375"]}
{"title": "Organizational behavior & software product line engineering: An empirical study\n", "abstract": " Software product line engineering is an inter-disciplinary concept. It spans over the dimensions of business, architecture, process and organization. Some of the potential benefits of this approach include cost reduction, improvement in quality and a decrease in product development time. Employees' participation, organizational behavior and management contemplation play a vital role in successfully institutionalizing software product lines in a firm. Organizational dimension has been weighted as one of the critical dimensions in software product line theory and practice. Organizational behavior covers organizational culture, organizational commitment and organizational learning. A comprehensive empirical investigation to study the relationship of some organizational behavior on the performance of software product line practice is presented in this work. The results of this investigation provide empirical evidence\u00a0\u2026", "num_citations": "7\n", "authors": ["375"]}
{"title": "Open source computer game application: An empirical analysis of quality concerns\n", "abstract": " A computer game is one of the major sources of entertainment. People nowadays spend a lot of time while playing computer games. Open Source Software (OSS), despite some reservations on the quality, has been steadily increasing its popularity. The uncontrolled change management foresees an increase in the complexity of the methods and classes in an application, which sometimes result in poor quality. The number of OSS projects dealing with computer game development are on the increase, which lead to more research interests in assessing the quality of OSS resulting products. Some studies that deal with the evaluating the OSS quality, concerns use user\u2019s survey approach focusing on the usability aspects. The empirical investigations to evaluate the quality concerns of the design, using internal code attributes, needs attention of researchers. In this study, we aim to investigate the quality concerns of the\u00a0\u2026", "num_citations": "5\n", "authors": ["375"]}
{"title": "A software product line methodology for development of e-learning system\n", "abstract": " Software product line has become one of the most promising software practices with the potential to substantially increase the development productivity in the software industry. Learning objects can be defined along the three dimensions of pedagogy, technology and the domain. We put forward a methodology to develop a software product line of E-Learning systems. This model identifies and elaborates the essential phases and activities. The model is divided into two phases, Domain Engineering and Application Engineering. Domain engineering phase consists of two views, Product Line Infrastructure View and E-Learning Analysis View. Application Engineering phase has Product Line Application View and Core Assets Development View. Various activities related to each view are identified to enhance the reuse development process for E-Learning software product line. The methodology demonstrates the use of explicit variability definition in a learning object at various levels of the model including Site, Structure, Skin, Services, Space Plan and Stuff. The methodology is validated against a commercial e-learning course in Six Sigma.", "num_citations": "5\n", "authors": ["375"]}
{"title": "Empirical analysis of team and application size on software maintenance and support activities\n", "abstract": " Software industry is gaining momentum due to profound impact on the productivity of the various tasks. Typically software development life cycle includes, development activity and post release activities. The post release activities cover software maintenance and support. It is inevitable to deny the significance of software maintenance and support activities due to fairly a large size of the software. In this study we are analyzing the relationship of team size, application size and software maintenance and support activities. We used the latest dataset of International Standard Benchmark Group data repository containing the software maintenance and support information to conduct this empirical investigation. The results of this empirical investigation further reinforce the current perceptions of the significantly important role of application size, team structure and size on the software maintenance and support activities.", "num_citations": "5\n", "authors": ["375"]}
{"title": "Updating weight values for function point counting\n", "abstract": " While software development productivity has grown rapidly, the weight values assigned to count standard Function Point (FP) created at IBM twenty-five years ago have never been updated. This obsolescence raises critical questions about the validity of the weight values; it also creates other problems such as ambiguous classification, crisp boundary, as well as subjective and locally defined weight values. All of these challenges reveal the need to calibrate FP in order to reflect both the specific software application context and the trend of today's software development techniques more accurately. We have created a FP calibration model that incorporates the learning ability of neural networks as well as the capability of capturing human knowledge using fuzzy logic. The empirical validation using ISBSG Data Repository (release 8) shows an average improvement of 22% in the accuracy of software effort estimations\u00a0\u2026", "num_citations": "4\n", "authors": ["375"]}
{"title": "Architecture guidelines for SaaS development process\n", "abstract": " Software-as-a-service (SaaS) has received significant attention from software providers and users as software delivery model. Most of the existing companies are transferring their business into SaaS model. This intensely competitive environment has imposed many challenges for SaaS developers for the development process. SaaS development is a very complex process and SaaS success depends on its architecture design and development. This paper identifies important key factors from literature and provides guidelines for SaaS developers to support these factors in SaaS architecture development process. Ultimately, it will be beneficial for SaaS developers to improve the development process of SaaS application.", "num_citations": "3\n", "authors": ["375"]}
{"title": "Multivariate mutual information for audio video fusion\n", "abstract": " Information fusion is one of the essential part of distributed wireless sensor networks as well as perceptual user interfaces. Irrelevant and redundant data severely affect the performance of the information fusion process. In this paper, a method based on multivariate mutual information is presented to validate the acceptability of data from two sources (visual and auditory). The audiovisual information is fused to observe the ventriloquism effect to validate the algorithm. Unlike the preceding algorithms, this framework does not require any preprocessing such as automatic face recognition. Moreover, statistical modeling or feature extraction and learning algorithms are not required to extract the maximum information regions. The results for various cases, containing a single speaker as well as a group of speakers, are also presented.", "num_citations": "3\n", "authors": ["375"]}
{"title": "Computer Vision in the Field of Wear Particles\n", "abstract": " This paper presents a system to monitor the wear process in machines using computer vision and image processing techniques applied to wear particle analysis. Particles are classified using their visual attributes to predict wear failure modes in engines and other machinery. The aim of the current work is to develop an automated system to classify wear particles and thereby predict wear failure modes in engines and other machinery, such that it obviates the need for specialists and reliance on human visual inspection techniques. The paper describes an interactive control system CAVE (Computer Aided Vision Engineering) in terms of the stages involved in processing data to acquire morphological features of wear particles from microscopic images and their automatic classification.", "num_citations": "3\n", "authors": ["375"]}
{"title": "On the reliability estimation of nano-circuits using neural networks\n", "abstract": " As the integrated circuit geometries shrink, it becomes important for the designers to take into consideration the reliability of the circuits. Different techniques can be used for reliability calculation or estimation. Some of these techniques are accurate but time-consuming while others are quick but not accurate. For example, using a set of mathematical equations for reliability estimation is very fast but not precise enough for large systems. Alternatively, Monte Carlo simulations are highly accurate, but very time-intensive. This work presents three different neural network models for estimating circuit reliability. The models provide better prediction accuracies than the mathematical technique. A reasonably large number of combinational circuits were simulated over a wide range of device reliabilities to collect the training data for the models. Multiple slices of an ISCAS-85 benchmark circuit were used to validate the models\u00a0\u2026", "num_citations": "2\n", "authors": ["375"]}
{"title": "A neural network based approach to wind energy yield forecasting\n", "abstract": " It is commonly acknowledged that wind energy is the leading renewable energy generation method; currently producing a power yield equivalent to 35 GW, with an estimated projection of 40-60 GW by 2012. In order to successfully integrate wind energy with traditional generation supplies it is necessary to have the ability to accurately forecast the available yield of a wind installation during a period of time. In this paper we present a neural network based estimation tool which produces wind speed estimates for a given wind installation. These predications are subsequently used in industry standard calculations to produce an energy yield estimate for the wind installation over a given time period. The proposed approach produces forecasts that can be used for two main purposes; firstly, delivery of wind (energy) yield estimations and secondly to assess the suitability of a given location for development into a\u00a0\u2026", "num_citations": "2\n", "authors": ["375"]}
{"title": "FuzzyCART: a novel fuzzy logic based classification & regression trees algorithm\n", "abstract": " Classification algorithms have found high levels of application in a range of domains. One of the most important classification algorithms that is currently in wide use Classification And Regression Trees (CART), which yields accurate and consistent results in most multiple domains. A significant failing of CART and other similar algorithms is their inability to handle imprecision. This inability to handle the \u00bfgrey areas\u00bf makes these algorithms less applicable to a range of domains such as Medicine and Finance. A well-regarded method for handling such imprecision is Fuzzy Logic, and in this paper a novel algorithm that combines CART and Fuzzy Logic is presented. Following the description of the implementation the experimental results presented which have been achieved through the use of the proposed FuzzyCART algorithm demonstrate an increased level of classification accuracy for medical data when\u00a0\u2026", "num_citations": "2\n", "authors": ["375"]}
{"title": "Design guidelines for SaaS development process\n", "abstract": " A novel and widespread business model in cloud computing is to provide on-demand software as a service (SaaS) over the Internet. The software runs on a server and the user access it through an Internet connection. A single application instance can be shared by multiple users which provide a cost-effective solution to SaaS providers. Varying requirements from multiple users increase complexity in SaaS application design. The success of SaaS depends on its design. SaaS is different than traditional web-based application, so traditional application design model cannot full fill many SaaS specific design requirements. This paper provides a better understanding of key design factors in SaaS development process which results in a successful SaaS product following an improved design process. This study identifies key design factors through literature review and provides guidelines for key design factors on the\u00a0\u2026", "num_citations": "1\n", "authors": ["375"]}
{"title": "Data security approaches and solutions for data warehouse\n", "abstract": " Data Warehouse (DWH) contains large amount of historical data from heterogeneous operational sources and provide multidimensional views, thus supplying sensitive and critical information which help decision-makers to improve the organization\u2019s business processes. The critical business information at one place and nature of the aggregated queries make it vulnerable for malicious outside and inside attackers. For database aggregated queries most of the existing data security solutions are not sufficient, require too many resources along with increase query response time and results into many false alarms. In this study, we conducted a survey of available data security approaches, solutions, and strategies for data warehouse environment.", "num_citations": "1\n", "authors": ["375"]}
{"title": "Defects in Open Source Software: The Role of Online Forums\n", "abstract": " Free and open source software is gaining popularity at an unprecedented rate of growth. Organizations despite some concerns about the quality have been using them for various purposes. One of the biggest concerns about free and open source software is post release software defects and their fixing. Many believe that there is no appropriate support available to fix the bugs. On the contrary some believe that due to the active involvement of internet user in online forums, they become a major source of communicating the identification and fixing of defects in open source software. The research model of this empirical investigation establishes and studies the relationship between open source software defects and online public forums. The results of this empirical study provide evidence about the realities of software defects myths of open source software. We used a dataset consist of 616 open source software\u00a0\u2026", "num_citations": "1\n", "authors": ["375"]}
{"title": "Software Product Line Engineering: Future Research Directions\n", "abstract": " The recent trend of switching from single software product development to lines of software products in the software industry has made the software product line concept viable and widely accepted methodology in the future. Some of the potential benefits of this approach include cost reduction, improvement in quality and a decrease in product development time. Many organizations that deal in wide areas of operation, from consumer electronics, telecommunications, and avionics to information technology, are using software product lines practice because it deals with effective utilization of software assets and provides numerous benefits. Software product line engineering is an inter-disciplinary concept. It spans over the dimensions of business, architecture, process and organization. The business dimension of software product lines deals with managing a strong coordination between product line engineering and the business aspects of product line. Software product line architecture is regarded as one of the crucial piece of entity in software product lines. All the resulting products share this common architecture. The organizational theories, behavior and management play critical role in the process of institutionalization of software product line engineering in an organization. The objective of this chapter is to discuss the state of the art of software product line engineering from the perspectives of business, architecture,", "num_citations": "1\n", "authors": ["375"]}
{"title": "The business of software product family: An empirical survey\n", "abstract": " The software product family approach aims at curtailing the concept of \"reinventing the wheel\" in software development process. It provides means for reuse of software assets, thus reducing considerably, development time and cost of software products to capture market segments. Business factor has been highlighted as one of the critical dimensions in software product family approach. Doing the business of software product family requires comprehensive knowledge and expertise of key business process areas. In this paper we highlighted some of the key business process areas and their aspects peculiar to software product family. A number of organizations dealing with software product family business were surveyed to get feedback about how effectively they are doing the business of software product family. The survey leads to the conclusion that software product family requires comprehensive alignment of\u00a0\u2026", "num_citations": "1\n", "authors": ["375"]}
{"title": "Software Product Line Analysis of Enterprise Information System.\n", "abstract": " Now a day geographical and physical constraint that allowed only for fixed and static placements of resources has vanished completely within an enterprise utilizing the concept of information technology to integrate their business needs. The object oriented programming approach has paved a way to reusability of components thus reducing cost and development efforts up to certain extend. Software product line has further strengthened the concept of reusability, and component-based architecture. In this paper we have analysed the concept of Software Product Line Analysis for an Enterprise Information System which will help to construct a Software Product Line within the organization to produce high quality software product in order to full fill the information technology requirements of the organization.", "num_citations": "1\n", "authors": ["375"]}