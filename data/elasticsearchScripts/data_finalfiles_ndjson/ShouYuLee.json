{"title": "A QoS assurance middleware model for enterprise cloud computing\n", "abstract": " Enterprise Cloud Computing has the complicated issues of the multi-tenancy, cross layer service composition, i.e., Software as a Service, Platform as a Service, and Infrastructure as a Service, multiple constraints from user requirements and Service Level Agreements. To assure the quality of service and effectiveness of Enterprise Cloud Computing, a middleware to support the service composition and monitoring in Enterprise Cloud Computing is highly important. We have designed a middleware for Enterprise Cloud Computing which can automatically manage the resource allocation of services from services, platforms, and infrastructures, and provide a cost-effective and secure way to access services from cloud environment. This architecture will compose of several functions, such as Service Monitoring, Service Composition, and Service Status Analysis. In order to provide complete transparency of the underlying\u00a0\u2026", "num_citations": "28\n", "authors": ["1971"]}
{"title": "An empirical study of requirements-based test generation on an automobile control system\n", "abstract": " Requirements-based test generation techniques have been widely used in industry to help practitioners generate appropriate test cases to ensure that their software systems behave according to customer expectations. These tests provide a solid foundation for functional testing--a critical, essential step that must be performed properly for quality assurance of any software system. In this paper, we present a study, in collaboration with Hyundai Motor Company, on a real-life industrial software system used to control the driver's demand torque of an automobile. Since any hazardous incident caused by this mechanism may result in significant property loss or even fatalities, its safe and reliable operation becomes absolutely imperative. To overcome this problem, we propose a framework including different requirements-based test generation techniques such as equivalence class partitioning (ECP), boundary value\u00a0\u2026", "num_citations": "8\n", "authors": ["1971"]}
{"title": "An Exploratory Analysis on Software Developers' Bug-Introducing Tendency over Time\n", "abstract": " Understanding how software developers' erroneous tendency changes across time has significant implications for building fault-proneness prediction models and guiding software evolution testing. This paper initiates the investigation on software developers' bug-introducing tendency through an exploratory analysis. Five metrics are proposed to capture software developers' bug-introducing tendency and its correlated factors. A total of 76 software developers, working in four widely used software programs from GitHub, have been analyzed. The initial findings are presented.", "num_citations": "7\n", "authors": ["1971"]}
{"title": "Case study of requirements-based test case generation on an automotive domain\n", "abstract": " In our previous study, a framework combining different requirement-based test generation techniques such as Equivalence Class Partitioning (ECP), Boundary Value Analysis (BVA), Choice Relationship Framework (CRF) and Predicate Testing was proposed to improve the efficiency of software testing. It has been used to generate test cases for the Validation & Verification (V&V) control system in a HEV (Hybrid Electric Vehicle). As an extension, this paper reports the usage of this framework on wider series of experiments. During these experiments, we further modified each testing technique and provide solutions to better integrate them to address their own limitations. The implications of the result are discussed and additional guidelines are also provided.", "num_citations": "7\n", "authors": ["1971"]}
{"title": "An Investigation of Essential Topics on Software Fault-Proneness Prediction\n", "abstract": " Understanding critical aspects of software fault-proneness prediction contributes significantly to building effective fault-proneness prediction models. This paper conducts an investigation of essential topics in this area, including techniques for evaluating the effectiveness of fault-proneness prediction models, issues of concerns when building the prediction models, as well as findings shared by the academic community. It is our hope that this investigation will aid researchers in further studying and contributing to software fault-proneness prediction.", "num_citations": "6\n", "authors": ["1971"]}
{"title": "DRS: A developer risk metric for better predicting software fault-proneness\n", "abstract": " Previous studies have reported that the performance of a developer can greatly impact the quality of the software he/she has worked on. Such performance can be measured using two developer risk metrics during a particular development period. One is the ratio of the number of bug-introduce commits to the total number of commits made by a developer (i.e., the DQ metric). The other is the proportion of faulty software modules out of all modules modified by the developer (i.e., the BR metric). However, all bug-introduce commits, no matter its severity, are treated equally by both DQ and BR metrics. Moreover, the complexity of a software module that a developer is working on may also have a potential impact on his/her performance but is not considered by either DQ or BR. To resolve these two problems, we propose Developer Risk Score (DRS), which takes both program complexity and the severity of bug-introduce\u00a0\u2026", "num_citations": "6\n", "authors": ["1971"]}
{"title": "Software safety standards: evolution and lessons learned\n", "abstract": " As safety issues occur in many domains, software safety standards provide guidelines for development of software systems that operate in safety-critical environments. However, evolution of existing software safety standards diverges under various circumstances and environments. To understand the purpose of these standards on their domains and the effect of changing the environment on evolution of these standards, we conducted a survey on the history of the families of DO-178 (Commercial avionics), MIL-STD-882 (US Department of Defense), and DEF-STAN 00-56 (UK Ministry of Defense). Additionally, we learned that even in different environments, there are certain features in common that are preferred by industry and would likely be added to newer versions of the standard. In other words, these features are very likely to be must-haves when constructing new standards in the future.", "num_citations": "3\n", "authors": ["1971"]}