{"title": "Supporting collaborative software development through the visualization of socio-technical dependencies\n", "abstract": " One of the reasons large-scale software development is difficult is the number of dependencies that software engineers face. These dependencies create a need for communication and coordination that requires continuous effort by developers. Empirical studies, including our own, suggest that technical dependencies among software components create social dependencies among the software developers implementing those components. Based on this observation, we developed Ariadne, a plug-in for Eclipse. Ariadne analyzes software projects for dependencies and collects authorship information about projects relying on configuration management repositories. Ariadne can\" translate\" technical dependencies among components into social dependencies among developers. We have created visualizations to convey dependency information and the presence of coordination problems identified in our previous\u00a0\u2026", "num_citations": "171\n", "authors": ["1552"]}
{"title": "How to hackathon: Socio-technical tradeoffs in brief, intensive collocation\n", "abstract": " Hackathons are events where people who are not normally collocated converge for a few days to write code together. Hackathons, it seems, are everywhere. We know that long-term collocation helps advance technical work and facilitate enduring interpersonal relationships, but can similar benefits come from brief, hackathon-style collocation? How do participants spend their time preparing, working face-to-face, and following through these brief encounters? Do the activities participants select suggest a tradeoff between the social and technical benefits of collocation? We present results from a multiple-case study that suggest the way that hackathon-style collocation advances technical work varies across technical domain, community structure, and expertise of participants. Building social ties, in contrast, seems relatively constant across hackathons. Results from different hackathon team formation strategies\u00a0\u2026", "num_citations": "144\n", "authors": ["1552"]}
{"title": "Continuous coordination-a new paradigm to support globally distributed software development projects\n", "abstract": " Along with the rapid globalization of companies, the globalization of software development has become a reality. Many software projects are now distributed in diverse sites across the globe. The distance between these sites creates several problems that did not exist for previously collocated teams. Problems with the coordination of the activities, as well as with the communication between team members, emerge. Many collaborative software engineering tools that have been used to date, in global software development projects, exhibit a fundamental paradox: they are meant to support the collaborative activity of software development, but cause individuals and groups to work more or less independently from one another. The underlying issue is that existing software engineering tools, such as configuration manage-", "num_citations": "94\n", "authors": ["1552"]}
{"title": "Bridging the gap between technical and social dependencies with ariadne\n", "abstract": " One of the reasons why large-scale software development is difficult is the number of dependencies that software engineers need to face; eg, dependencies among the software components and among the development tasks. These dependencies create a need for communication and coordination that requires continuous effort by software developers. Empirical studies, including our own, suggest that technical dependencies among software components create social dependencies among the software developers implementing these components. Based on this observation, we developed Ariadne, a Java plug-in for Eclipse. Ariadne analyzes a Java project to identify program dependencies and collects authorship information about the project by connecting to a configuration management repository. Through this process, Ariadne can\" translate\" technical dependencies among software components into social\u00a0\u2026", "num_citations": "66\n", "authors": ["1552"]}
{"title": "Continuous coordination within the context of cooperative and human aspects of software engineering\n", "abstract": " We have developed software tools that aim to support the cooperative software engineering tasks and promote an awareness of social dependencies that is essential to successful coordination. The tools share common characteristics that can be traced back to the principles of the Continuous Coordination (CC) paradigm. However, the development of each sprung from carrying out a different set of activities during its development process. In this paper, we outline the principles of the CC paradigm, the tools that implement these principles and focus on the social aspects of software engineering. Finally, we discuss the socio-technical and human-centered processes we adopted to develop these tools. Our conclusion is that the cooperative dimension of our tools represents the cooperation between researchers, subjects, and field sites. Our conclusion suggests that the development processes adopted to develop like\u00a0\u2026", "num_citations": "41\n", "authors": ["1552"]}
{"title": "Community code engagements: summer of code & hackathons for community building in scientific software\n", "abstract": " Community code engagements--short-term, intensive software development events--are used by some scientific communities to create new software features and promote community building. But there is as yet little empirical support for their effectiveness. This paper presents a qualitative study of two types of community code engagements: Google Summer of Code (GSoC) and hackathons. We investigated the range of outcomes these engagements produce and the underlying practices that lead to these outcomes. In GSoC, the vision and experience of core members of the community influence project selection, and the intensive mentoring process facilitates creation of strong ties. Most GSoC projects result in stable features. The agenda setting phase of hackathons reveals high priority issues perceived by the community. Social events among the relatively large numbers of participants over brief engagements\u00a0\u2026", "num_citations": "39\n", "authors": ["1552"]}
{"title": "Foundations for the design of visualizations that support trust in distributed teams\n", "abstract": " We seek to provide design principles for software tools intended to support the development of trust in distributed teams. As such, we present a\" design space\" for such tools that consists of three elements: trust factors, collaborative traces, and visual representations. Trust factors are aspects of work shown in the research literature to influence one's perceived trustworthiness of their team members. Collaborative traces are representations of past and current work done by team members manipulating project artifacts. Collaborative traces provide information about a trust factor. Visual representations consist of a set of visual abstractions of the collaborative traces arranged in a layout that provides users with the ability to formulate accurate perceptions of their team members' trustworthiness with respect to a particular trust factor. Because the eventual goal of this research is to produce visual interfaces that support the\u00a0\u2026", "num_citations": "25\n", "authors": ["1552"]}
{"title": "From technical dependencies to social dependencies\n", "abstract": " This paper describes Ariadne, a Java tool for the Eclipse IDE, that links technical and social dependencies. Ariadne is based on the observation that technical dependencies among software components create social dependencies among the software developers implementing these components. We describe our approach for creating technical, socio-technical and social dependencies from a software project. We describe possible uses of our approach and tool as well as discuss briefly related work.", "num_citations": "24\n", "authors": ["1552"]}
{"title": "From personal tool to community resource: What's the extra work and who will do it?\n", "abstract": " Sharing scientific data, software, and instruments is becoming increasingly common as science moves toward large-scale, distributed collaborations. Sharing these resources requires extra work to make them generally useful. Although we know much about the extra work associated with sharing data, we know little about the work associated with sharing contributions to software, even though software is of vital importance to nearly every scientific result. This paper presents a qualitative, interview-based study of the extra work that developers and end users of scientific software undertake. Our findings indicate that they conduct a rich set of extra work around community management, code maintenance, education and training, developer-user interaction, and foreseeing user needs. We identify several conditions under which they are likely to do this work, as well as design principles that can facilitate it. Our results\u00a0\u2026", "num_citations": "23\n", "authors": ["1552"]}
{"title": "E-mentoring for software engineering: A socio-technical perspective\n", "abstract": " Mentoring is one of the most effective pedagogical tools, holding great promise for software engineering education. When done badly, however, it can lead to dysfunctional interpersonal relationships and may turn off mentees from careers in software engineering. In this qualitative interview-based study we examine how socio-technical dimensions of software impact the formation of social ties important for satisfying two goals of mentorship, building technical skill and interpersonal development. We find that mentees working on user facing, interdependent software form a balance of ties that facilitate both goals, while mentees working on non-user facing software mostly form ties important for building technical skill. Work practices that create opportunities for unstructured contact between mentees and community members, such as code review in a mentee cohort, can help to overcome this imbalance. Our findings\u00a0\u2026", "num_citations": "22\n", "authors": ["1552"]}
{"title": "Bridging the gap between awareness and trust in globally distributed software teams\n", "abstract": " Trust remains a key challenge for globally distributed teams despite decades of research. Awareness, a key component of collaboration, has even more research around it. However, detailed accounts of the interrelationship of awareness and trust are still lacking in the literature, particularly in the setting of software teams. The gap we seek to fill with this article is to examine how software tool support for awareness can engender trust among globally distributed software developers. We highlight qualitative results from a previous and extensive field study that shows how trust is still a problem in contemporary teams. These results motivate a specific examination of how developers form attributions of one another. We describe a collection of visualization widgets designed to address the specific issues found in the field. To evaluate their effectiveness, we performed a controlled laboratory study with 28 students and 12\u00a0\u2026", "num_citations": "21\n", "authors": ["1552"]}
{"title": "Trust and surprise in distributed teams: towards an understanding of expectations and adaptations\n", "abstract": " Trust can be defined in terms of one party's expectations of another, and the former's willingness to be vulnerable based on those expectations. Surprise results from a failure to meet expectations, which can influence trust. We conducted an empirical study of surprises stemming from cultural differences in distributed teams and their influence on trust. Our study findings provide two primary contributions. First, we find that trust judgments in culturally diverse teams are made from accumulated experiences that involve a sequence of cultural surprise, attribution, formulation of new expectations, and the application of adaptations in new situations. Second, we document adaptations that individuals develop to avoid future surprises and which ultimately helped them to improve their sense of trust towards others. In general, our findings contribute to the existing body of work by providing evidence of how people attribute\u00a0\u2026", "num_citations": "20\n", "authors": ["1552"]}
{"title": "Impact of collaborative traces on trustworthiness\n", "abstract": " We investigated how trust among software developers would be affected by providing them with visualizations of collaborative traces. We define collaborative traces to be representations of the past and current activity of a group of developers manipulating software development artifacts. In this paper, we report two main findings. First, we report the results of our controlled experiment in which collaborative traces were visualized. Second, we present an overview of tools which aim to represent collaborative software engineering traces. Our experiment provides evidence that collaborative traces can support the development of several factors of trust identified in our field study. However, we also identified some shortcomings of our current visualizations, gaining insights into future improvements. From our review of tools that represent collaborative traces, we observed that such representations can drive the design of\u00a0\u2026", "num_citations": "16\n", "authors": ["1552"]}
{"title": "Analyzing a socio-technical visualization tool using usability inspection methods\n", "abstract": " Ariadne is a novel visualization tool that allows end users to explore the socio-technical relationships in software development projects. Essentially the visualization is a variant of a social network graph. It is based on the observation that dependencies between software components create dependencies between the developers implementing those components. This relationship emerged in our own and other researcherspsila field studies of software projects. Large software development projects require management of dependencies by managers and developers to ensure the smooth coordination of work. We sought to evaluate our visualization to assess its utility. Although we had some informal trials with potential end users, we sought a deeper analysis before further refinement of the tool and evaluation on a larger scale. Usability inspection methods provided one potential avenue. Moreover, such inspection\u00a0\u2026", "num_citations": "14\n", "authors": ["1552"]}
{"title": "Hacking and making at time-bounded events: Current trends and next steps in research and event design\n", "abstract": " Time-bounded collaborative events in which teams work together under intense time pressure are becoming increasingly popular. While hackathons, that is, competitive overnight coding events, are one of the more prevalent examples of this phenomenon, there are many more distinct event design variations for different audiences and with divergent aims, such as sprints, codefests, hack-days, edit-a-thons and so on. Taken together, these events offer new opportunities and challenges for cooperative work by affording explicit, predictable, time-bounded spaces for interdependent work and access to new audiences of collaborators. This one-day workshop brings together researchers interested in the phenomenon, experienced event organizers, and participants interested in running their own events to consolidate research to-date, share practical experiences, and understand what benefits different event variations\u00a0\u2026", "num_citations": "13\n", "authors": ["1552"]}
{"title": "Distributed developers and the non-use of web 2.0 technologies: a proclivity model\n", "abstract": " We sought to understand the role that Web 2.0 technologies play in supporting the development of trust in globally distributed development teams. We found the use of Web 2.0 technologies to be minimal, with less than 25% of our participants reporting using them and many reporting the disadvantages of adopting them. In response, we sought to understand the factors that led to the use and non-use of these technologies in distributed development teams. We adopted a mix of qualitative and quantitative methods to analyze data collected from 61 interviewees representing all common roles in systems development. We discovered six factors that influenced the use and non-use of Web 2.0 technology. We present a proclivity model to frame our findings as well as our conclusions about the interrelationships between the results of our qualitative and quantitative analyses. We also present implications for the design of\u00a0\u2026", "num_citations": "13\n", "authors": ["1552"]}
{"title": "The Big Effects of Short-term Efforts: Mentorship and Code Integration in Open Source Scientific Software\n", "abstract": " Simply releasing the source code to scientific software is inadequate if it is to remain useful to scientists beyond initial publication [1]. First, scientists often develop \u201ckleenex-code\u201d that they intend to use once and throw away [5]. This software is therefore unlikely to be accessible to other scientists. Second, scientists do not receive obvious benefits from contributing to open-source scientific software, unless those contributions directly result in publication [5, 6]. Third, scientists often lack the expertise to develop production quality software [4, 7]. Fourth, because there tend not to be funding lines for the maintenance of scientific software, the software may quickly become outdated and unusable once project grants are exhausted [9].Google Summer of Code (GSoC) 1, an annual program that pays students who successfully complete shortterm open-source coding projects, may hold promise for addressing these concerns. As a first step, we sought to understand the kinds of features that get integrated, and participants\u2019 impressions of the program. We therefore conducted a case study of Biopython [2], a scientific software community with a history of participation in GSoC. Bringing in new contributors and retaining them over the long term are of course primary objectives, but we found a number of less expected effects as well.", "num_citations": "11\n", "authors": ["1552"]}
{"title": "Supporting trust in globally distributed software teams: the impact of visualized collaborative traces on perceived trustworthiness\n", "abstract": " Trust plays an important role in collaborations because it creates an environment in which people can openly exchange ideas and information with one another and engineer innovative solutions together with less perceived risk. The rise in globally distributed software development has created an environment in which workers are likely to have less information and lower quality information about their remote colleagues. As such, the likelihood of coordination breakdowns increases. Observers of a breakdown are more likely to erroneously attribute the cause to personal characteristics (dispositional attributions) of the persons involved, rather than characteristics of the situation (situational attributions). Data collected from globally distributed software teams show that such breakdowns can negatively impact trust between the parties involved, as well as the perceived quality of the collaboration.", "num_citations": "9\n", "authors": ["1552"]}
{"title": "A survey of visualization tools that promote awareness of software development activities\n", "abstract": " In recent years, research attention in the software engineering community has shifted from process management and workflow tools that aim to plan for all coordination activity and eventualities before development begins to a new generation of more flexible tools that saturate the developer's workspace with information at varying degrees of granularity and in different visual, and often interactive, representations. The common thread that runs through these tools is the objective of supporting awareness of software developers \u2018activities, in order to put one\u2018s own activities in context. Despite the glut of such tools, little work has been done to assess to what extent they address well-understood coordination needs. This survey symbolizes a critical first step in that process. Its primary goal is to study the relationship between coordination and awareness as empirically explored in the software engineering literature, identify important aspects of awareness from that same body of literature, and, with respect to these aspects, compare tools representative of those used in academia and industry that are built to support awareness of development activities. An analysis of the tools was performed and a table was constructed that maps the tools to important dimensions of awareness.", "num_citations": "6\n", "authors": ["1552"]}
{"title": "The big effects of short-term efforts: A catalyst for community engagement in scientific software\n", "abstract": " Scientific progress relies crucially on software, yet in practice there are significant challenges to scientific software production and maintenance. We conducted a case study of a bioinformatics library called Biopython to investigate the promise of Summer of Code (SoC), a program originally developed by Google that pays students to work on open-source projects for the summer, for addressing these challenges. We find that SoC benefits students by engaging them with mentors and the community at large. SoC students learn how to contribute to open-source scientific software projects and how to apply their new software engineering skills in practice. We also find that SoC benefits the Biopython community by creating mentorship and communication networks that enable Biopython developers to more easily identify and implement users\u2019 needs.", "num_citations": "5\n", "authors": ["1552"]}
{"title": "Continuous coordination tools and their evaluation\n", "abstract": " This chapter discusses a set of co-ordination tools (the Continuous Co-ordination (CC) tool suite that includes Ariadne, Workspace Activity Viewer (WAV), Lighthouse, Palant\u00edr, and YANCEES) and details of our evaluation framework for these tools. Specifically, we discuss how we assessed the usefulness and the usability of these tools within the context of a predefined evaluation framework called DESMET               . For example, for visualization tools we evaluated the suitability of the level of abstraction and the mode of displaying information of each tool. Whereas for an infrastructure tool we evaluate the effort required to implement co-ordination tools based on the given tool. We conclude with pointers on factors to consider when evaluating co-ordination tools in general.", "num_citations": "5\n", "authors": ["1552"]}
{"title": "Exploiting the Relationship between Software Dependencies and Coordination through Visualization\n", "abstract": " Large software development projects require management of dependencies by managers and developers to ensure the smooth coordination of work. Based on theoretical predictions and empirical observations (ours and from others) that dependencies between software components create dependencies between the developers implementing those components, we created Ariadne, a visualization tool designed as a plug-in for Eclipse. Ariadne aims to explore this socio-technical relationship by translating technical dependencies into dependencies among software developers presented in a social network graph. Here, we describe a revised visualization that preserves the ease of identifying connections found in social network graphs but also facilitates efficient identification of dependency information needed to coordinate developers\u2019 work. We have evaluated the visualization using multiple inspection methods appropriate for visual interfaces. The results of our evaluation indicate significant improvements over the graph-based approach and suggest important avenues for future work.", "num_citations": "4\n", "authors": ["1552"]}
{"title": "Beyond code: prioritizing issues, sharing knowledge, and establishing identity at Hackathons for Science\n", "abstract": " Although the stated objective of a hackathon is to write code, code is not the only outcome. In this position paper, we argue that \u201chackathons for science,\u201d hackathons used to advance infrastructure for science, facilitate the circulation of important knowledge, such as the scientific community\u2019s priorities, technical know-how, and social connections. We support this position by drawing from scientific literature on hackathons, summaries and descriptions posted online by hackathon participants, and interviews that we conducted with bioinformatics scientists who have attended hackathons for science.Our focus is on hackathons used in the life sciences. Over the last several years, hackathons have frequently been used in bioinformatics. For instance, the National Evolutionary Synthesis Center (NESCent), an evolutionary biology research center, has sponsored and organized hackathons every year since 20061. At these events, about 30-45 scientists and developers of scientific software take time off from their regular jobs to meet face to face and collaborate intensively on the software for several days. Typical activities include keynote presentations on software infrastructure issues, brainstorming solutions that can be immediately addressed at the hackathon, and training on software tools. Participants spend the majority of the time implementing, testing, and documenting code. These activities produce a range of outcomes.", "num_citations": "3\n", "authors": ["1552"]}
{"title": "Continuous Coordination (CC): A New Collaboration Paradigm\n", "abstract": " The increase in software complexity introduced the need for software development teams and consequently the need to coordinate team members\u2019 activities and create a shared awareness. We seek to overcome some the pitfalls of earlier attempts to coordinate software development through a new coordination paradigm we term Continuous Coordination (CC). Generally speaking, the CC paradigm complements formal synchronization with support for informal activities. In this paper, we define the CC paradigm within three dimensions and demonstrate how we embodied CC through a spectrum of Eclipse plug-ins.", "num_citations": "3\n", "authors": ["1552"]}
{"title": "Attitude and usage of collaboration tools in GSE: a practitioner oriented theory\n", "abstract": " Collaboration tools support global software engineering (GSE) by providing relevant information and work context to developers, essentially seeking to provide a local context for developers working globally. Although many collaborative tools have been developed, we have insufficient knowledge of how they are used in practice. In this paper, we review the recent empirical studies on collaboration tools for GSE. Then we theorize a conceptual framework that aims to explain how the unique contextual dimensions of GSE (e.g. culture diversity and adaptation, etc.) influence practitioners' attitudes toward, and usage of, the tools. The conceptual framework will guide our future empirical studies, and it will be refined by the empirical evidence collected in these studies.", "num_citations": "2\n", "authors": ["1552"]}
{"title": "Connecting the social and technical aspects of computing with visualization\n", "abstract": " In software development projects, dependencies between developers arise from dependencies in the source-code they write. This observation emerged in our own field studies and the related literature. In response, we created Ariadne, a visualization tool that allows end-users to explore socio-technical relationships in software development projects.", "num_citations": "2\n", "authors": ["1552"]}
{"title": "Continuous coordination within software engineering teams: concepts and tool support\n", "abstract": " This paper describes the continuous coordination paradigm and the tools that implement its principles. The paradigm enables the coordination of software engineering activities during a single development phase and throughout a project life-cycle and blends the best aspects of the more formal, process-oriented approaches with those of the more informal, awareness-based approach. In doing so, continuous coordination blends processes to guide users in their day-to-day high-level activities with extensive information sharing and presentation to inform them of relevant, parallel ongoing activities. Some of the key properties for tools that implement the priciples of this paradigm are that the tools share relevant information and do so in a contextualized and unobtrusive manner. Information is relevant when it is provided to a developer who will utilize it in the foreseeable future. Shared information is contextualized and unobtrusive when it is embedded in the development environment allowing developers to modify their behavior at a time that is convenient to them. The tools enable developers to document and coordinate their activities from the moment of project inception through design to implementation. The need for the paradigm, and the tools we have developed to support it, arises from the reality that software engineering is typically a complex process. This process generally requires a collaborative team effort to successfully carry it out to completion. Problems arise when software engineers are involved in developing inter-dependent artifacts in isolation of each other. A concerted effort must be made to coordinate and control the development\u00a0\u2026", "num_citations": "2\n", "authors": ["1552"]}